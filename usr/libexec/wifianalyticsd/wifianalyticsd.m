id WALogCategoryDefaultHandle()
{
  if (qword_1000ECE98 != -1) {
    dispatch_once(&qword_1000ECE98, &stru_1000CCB30);
  }
  return (id)qword_1000ECEA0;
}

void sub_1000047F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.wifi.analytics", "Default");
  v2 = (void *)qword_1000ECEA0;
  qword_1000ECEA0 = (uint64_t)v1;
}

id WALogDiagnosticProfileLogHandle()
{
  if (qword_1000ECEA8 != -1) {
    dispatch_once(&qword_1000ECEA8, &stru_1000CCB50);
  }
  return (id)qword_1000ECEB0;
}

void sub_100004864(id a1)
{
  os_log_t v1 = os_log_create("com.apple.wifi.analytics", "diagnosticstream");
  v2 = (void *)qword_1000ECEB0;
  qword_1000ECEB0 = (uint64_t)v1;
}

id WALogWorkReportHandle()
{
  if (qword_1000ECEB8 != -1) {
    dispatch_once(&qword_1000ECEB8, &stru_1000CCB70);
  }
  return (id)qword_1000ECEC0;
}

void sub_1000048D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.wifi.analytics", "WorkReport");
  v2 = (void *)qword_1000ECEC0;
  qword_1000ECEC0 = (uint64_t)v1;
}

id WALogActivityManagerHandle()
{
  if (qword_1000ECEC8 != -1) {
    dispatch_once(&qword_1000ECEC8, &stru_1000CCB90);
  }
  return (id)qword_1000ECED0;
}

void sub_100004944(id a1)
{
  os_log_t v1 = os_log_create("com.apple.wifi.analytics", "Activity");
  v2 = (void *)qword_1000ECED0;
  qword_1000ECED0 = (uint64_t)v1;
}

id WALogCategoryDeviceStoreHandle()
{
  if (qword_1000ECED8 != -1) {
    dispatch_once(&qword_1000ECED8, &stru_1000CCBB0);
  }
  return (id)qword_1000ECEE0;
}

void sub_1000049B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.wifi.analytics", "DeviceStore");
  v2 = (void *)qword_1000ECEE0;
  qword_1000ECEE0 = (uint64_t)v1;
}

void sub_100004BF4(_Unwind_Exception *a1)
{
}

void sub_100004C08(uint64_t a1)
{
  v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WALogCategoryDefaultHandle();
  v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) key]);
    v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originalClassName]);
    int v31 = 136447490;
    v32 = "-[WAMessageAWDStore updateMessage:]_block_invoke";
    __int16 v33 = 1024;
    int v34 = 60;
    __int16 v35 = 2112;
    id v36 = v6;
    __int16 v37 = 2112;
    v38 = v7;
    __int16 v39 = 2112;
    v40 = v8;
    __int16 v41 = 2048;
    id v42 = [WeakRetained storeSize];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Message store ingesting message with UUID: %@ key: %@ and original classname: %@ size before: %lu",  (uint8_t *)&v31,  0x3Au);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
  v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
    v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v13]);
    v15 = [v14 size];

    v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
    v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    v18 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v17]);
    [v18 updatePayload:*(void *)(a1 + 32)];

    v19 = [WeakRetained storeSize];
    v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
    v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v21]);
    objc_msgSend(WeakRetained, "setStoreSize:", (char *)objc_msgSend(v22, "size") + v19 - v15);

    v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
    v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    v25 = (WAMessageAWDStoreEntry *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v24]);
  }

  else
  {
    v25 = -[WAMessageAWDStoreEntry initWithPayload:]( objc_alloc(&OBJC_CLASS___WAMessageAWDStoreEntry),  "initWithPayload:",  *(void *)(a1 + 32));
    v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
    v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    [v26 setObject:v25 forKeyedSubscript:v27];

    objc_msgSend( WeakRetained,  "setStoreSize:",  (char *)objc_msgSend(WeakRetained, "storeSize") + -[WAMessageAWDStoreEntry size](v25, "size"));
  }

  [WeakRetained _insertInOrder:v25];
  [WeakRetained _purgeIfNecessary];
  id v28 = WALogCategoryDefaultHandle();
  v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    id v30 = [WeakRetained storeSize];
    int v31 = 136446722;
    v32 = "-[WAMessageAWDStore updateMessage:]_block_invoke";
    __int16 v33 = 1024;
    int v34 = 75;
    __int16 v35 = 2048;
    id v36 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Size after: %lu",  (uint8_t *)&v31,  0x1Cu);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000051EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_100005214(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100005224(uint64_t a1)
{
}

void sub_10000522C(uint64_t a1)
{
  v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
  v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:*(void *)(a1 + 32)]);

  if (v5) {
    v6 = (void *)objc_claimAutoreleasedReturnValue([v5 message]);
  }
  else {
    v6 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v6);
  if (v5) {

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

int64_t sub_10000535C(id a1, WAMessageAWDStoreEntry *a2, WAMessageAWDStoreEntry *a3)
{
  id v4 = a2;
  v5 = a3;
  id v6 = -[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v4, "lastModifiedTimeInMillisecondEpoch");
  if (v6 <= (id)-[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v5, "lastModifiedTimeInMillisecondEpoch"))
  {
    id v8 = -[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v4, "lastModifiedTimeInMillisecondEpoch");
    int64_t v7 = v8 < (id)-[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v5, "lastModifiedTimeInMillisecondEpoch");
  }

  else
  {
    int64_t v7 = -1LL;
  }

  return v7;
}

LABEL_13:
    return;
  }

  if (-[WAMessageAWDStore storeSize](self, "storeSize") > 0x7A120)
  {
    *(void *)&v3 = 136447746LL;
    v21 = v3;
    while (1)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(-[WAMessageAWDStore sortedByLastAccess](self, "sortedByLastAccess", v21));
      v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 lastObject]);

      id v6 = WALogCategoryDefaultHandle();
      int64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      id v8 = v7;
      if (!v5) {
        break;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s message](v5, "message"));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uuid]);
        v11 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s message](v5, "message"));
        v12 = (void *)objc_claimAutoreleasedReturnValue([v11 key]);
        v13 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s message](v5, "message"));
        v14 = (void *)objc_claimAutoreleasedReturnValue([v13 originalClassName]);
        v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  (double)((unint64_t)-[os_log_s lastModifiedTimeInMillisecondEpoch]( v5,  "lastModifiedTimeInMillisecondEpoch")
                                 / 0x3E8)));
        v16 = -[WAMessageAWDStore storeSize](self, "storeSize");
        *(_DWORD *)buf = v21;
        v23 = "-[WAMessageAWDStore _purgeIfNecessary]";
        v24 = 1024;
        v25 = 122;
        v26 = 2112;
        v27 = (unint64_t)v10;
        id v28 = 2112;
        v29 = v12;
        id v30 = 2112;
        int v31 = v14;
        v32 = 2112;
        __int16 v33 = v15;
        int v34 = 2048;
        __int16 v35 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Removing message with UUID:%@ key: %@ and original class name: %@ (that was last modified at %@) as the message store is too big (%lu). If this message was intended for submission, data loss has occurred.",  buf,  0x44u);
      }

      v17 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s message](v5, "message"));
      v18 = (void *)objc_claimAutoreleasedReturnValue([v17 uuid]);
      v19 = -[WAMessageAWDStore _removeMessageWithUUID:](self, "_removeMessageWithUUID:", v18);

      if (!v19) {
        goto LABEL_13;
      }

      if (-[WAMessageAWDStore storeSize](self, "storeSize") <= 0x7A120) {
        return;
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v23 = "-[WAMessageAWDStore _purgeIfNecessary]";
      v24 = 1024;
      v25 = 121;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Trying to purge with an empty store! This is a serious issue.",  buf,  0x12u);
    }

    v5 = 0LL;
    goto LABEL_13;
  }

  v16 = WALogCategoryDefaultHandle();
  v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_signpost_enabled(v17))
  {
    LOWORD(v40) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR _scanPredicatesWithMode",  (const char *)&unk_1000B76E7,  (uint8_t *)&v40,  2u);
  }

  v18 = WALogCategoryDefaultHandle();
  v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v40 = 136446722;
    __int16 v41 = "-[WAIOReporterMessagePopulator _scanPredicatesWithMode:]";
    id v42 = 1024;
    v43 = 1460;
    v44 = 2048;
    v45 = (_UNKNOWN **)a3;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:addDriverChannelsMatchingPredicateList from _scanPredicatesWithMode %ld",  (uint8_t *)&v40,  0x1Cu);
  }

  v20 = -[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]( self,  "_addDriverChannelsMatchingPredicateList:",  a3);
  if (v20)
  {
    v21 = (_UNKNOWN **)v20;
    v22 = WALogCategoryDefaultHandle();
    v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 136446722;
      __int16 v41 = "-[WAIOReporterMessagePopulator _scanPredicatesWithMode:]";
      id v42 = 1024;
      v43 = 1465;
      v44 = 2048;
      v45 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found %lu new channels",  (uint8_t *)&v40,  0x1Cu);
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOPopAvailableChannels](self, "cachedIOPopAvailableChannels"));
    v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:&off_1000DFFD0]);
    v26 = [v25 count];

    -[WAIOReporterMessagePopulator _freeSubscriptionSample:](self, "_freeSubscriptionSample:", &off_1000DFFD0);
    v27 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:&off_1000DFFD0]);
    v29 = [v28 unsignedIntValue];

    if ((unint64_t)v26 > v29)
    {
      id v30 = WALogCategoryDefaultHandle();
      int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v40 = 136447490;
        __int16 v41 = "-[WAIOReporterMessagePopulator _scanPredicatesWithMode:]";
        id v42 = 1024;
        v43 = 1472;
        v44 = 2112;
        v45 = &off_1000DFFD0;
        v46 = 2048;
        v47 = v21;
        v48 = 2048;
        v49 = v9;
        v50 = 2048;
        v51 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Increasing max known channel count for group %@ by %lu from %lu to %lu",  (uint8_t *)&v40,  0x3Au);
      }

      v32 = -[NSNumber initWithUnsignedLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedLong:", v26);
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
      [v33 setObject:v32 forKeyedSubscript:&off_1000DFFD0];
    }

    self->_ioReportersCacheNeedsUpdating = 1;
  }

  int v34 = WALogCategoryDefaultHandle();
  __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_signpost_enabled(v35))
  {
    LOWORD(v40) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR _scanPredicatesWithMode",  (const char *)&unk_1000B76E7,  (uint8_t *)&v40,  2u);
  }

  id v36 = WALogCategoryDefaultHandle();
  __int16 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v40 = 136446466;
    __int16 v41 = "-[WAIOReporterMessagePopulator _scanPredicatesWithMode:]";
    id v42 = 1024;
    v43 = 1481;
    v38 = "%{public}s::%d:_scanPredicatesWithMode Complete";
LABEL_29:
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v38, (uint8_t *)&v40, 0x12u);
  }

  v13 = &v10[-v5];
  if (v10 == v7) {
    v14 = 0LL;
  }
  else {
    v14 = (std::string::size_type)(v13 + 1);
  }
  if ((size & 0x80) != 0) {
    size = v2->__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&v16, v2, v14, size, (std::allocator<char> *)&v17);
  *v3 = v16;
  if ((v3->__r_.__value_.__s.__size_ & 0x80u) != 0) {
    v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
  }
  result = (basic_string<char, std::char_traits<char>, std::allocator<char>> *)__toupper(v3->__r_.__value_.__s.__data_[0]);
  v3->__r_.__value_.__s.__data_[0] = (char)result;
  return result;
}

  v15 = WALogCategoryDefaultHandle();
  v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v19 = "-[DPSQuickRecoveryRecommendationEngine init]";
    v20 = 1024;
    v21 = 97;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:FAILED to initialize!",  buf,  0x12u);
  }

  return 0LL;
}

    v13 = dlerror();
    v14 = (_Unwind_Exception *)abort_report_np("%s", v13);
    _Block_object_dispose(buf, 8);
    _Unwind_Resume(v14);
  }

  v11 = WALogCategoryDefaultHandle();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Failed to WACoreCaptureControlCreate",  buf,  2u);
  }

LABEL_12:
  objc_autoreleasePoolPop(v2);
}
}

void sub_1000058C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000058DC(uint64_t a1)
{
  v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uuidToMessageMap]);
  [v4 removeAllObjects];

  v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sortedByLastAccess]);
  [v5 removeAllObjects];

  [WeakRetained setStoreSize:0];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_100005CB0(_Unwind_Exception *a1)
{
}

void sub_100005CC4(uint64_t a1)
{
  v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _removeMessageWithUUID:*(void *)(a1 + 32)];

  objc_autoreleasePoolPop(v2);
}

void sub_100005D94( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v333 = a2;
  id v14 = a3;
  id v15 = a4;
  objc_initWeak(&location, a5);
  id v16 = a7;
  id v326 = a8;
  v320 = a9;
  id val = objc_loadWeakRetained(&location);
  v310 = objc_autoreleasePoolPush();
  id v17 = WALogCategoryDefaultHandle();
  v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_signpost_enabled(v18))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v352 = 0LL;
  sub_10000971C(v333, val, a6, v16, v14, v15, v326, &v352);
  id v315 = v352;
  id v19 = WALogCategoryDefaultHandle();
  v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_signpost_enabled(v20))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v21 = WALogCategoryDefaultHandle();
  v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_signpost_enabled(v22))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityAWDLInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  v311 = (void *)objc_claimAutoreleasedReturnValue([v333 fieldForKey:@"NWA_awdlIfStats"]);
  id v23 = (id)objc_claimAutoreleasedReturnValue([v311 subMessageValue]);
  objc_initWeak(&v358, val);
  id v343 = v16;
  id v327 = v14;
  id v24 = v15;
  id v336 = objc_loadWeakRetained(&v358);
  id v25 = v23;
  id v26 = sub_10002575C(v24);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  context = objc_autoreleasePoolPush();
  __int128 v356 = 0u;
  __int128 v357 = 0u;
  *(_OWORD *)v354 = 0u;
  __int128 v355 = 0u;
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
  v29 = (void *)objc_claimAutoreleasedReturnValue([v28 allKeys]);

  id v30 = [v29 countByEnumeratingWithState:v354 objects:buf count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v355;
LABEL_9:
    uint64_t v32 = 0LL;
    while (1)
    {
      if (*(void *)v355 != v31) {
        objc_enumerationMutation(v29);
      }
      __int16 v33 = (void *)*((void *)v354[1] + v32);
      if ([v33 containsString:@"Interface awdl"])
      {
      }

      if (v30 == (id)++v32)
      {
        id v30 = [v29 countByEnumeratingWithState:v354 objects:buf count:16];
        if (v30) {
          goto LABEL_9;
        }
        goto LABEL_16;
      }
    }

    id v38 = v33;

    if (!v38) {
      goto LABEL_17;
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue([v25 fieldForKey:@"NWAAWDLIS_role"]);
    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 stringValue]);
    unsigned __int8 v42 = [v41 isEqualToString:v38];

    id v43 = WALogCategoryDefaultHandle();
    v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    BOOL v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
    if ((v42 & 1) != 0)
    {
      if (v45)
      {
        *(_DWORD *)v359 = 136446466;
        v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
               "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __stron"
               "g, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v361 = 1024;
        int v362 = 1095;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Found AWDL Interface",  v359,  0x12u);
      }
    }

    else
    {
      if (v45)
      {
        *(_DWORD *)v359 = 136446466;
        v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
               "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __stron"
               "g, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v361 = 1024;
        int v362 = 1092;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Setting AWDL Interface",  v359,  0x12u);
      }

      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue([v25 fieldForKey:@"NWAAWDLIS_role"]);
      -[os_log_s setStringValue:](v44, "setStringValue:", v38);
    }

    v46 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v47 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v38]);
    v48 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:@"Manager Config"]);

    if (v48)
    {
      sub_10002595C(v24, v25, @"NWAAWDLIS_enabled", v27, v38, @"Manager Config", @"Enabled");
      sub_10002595C( v24,  v25,  @"NWAAWDLIS_rtPeerCount",  v27,  v38,  @"Manager Config",  @"Realtime Group Peer Count");
      sub_10002595C(v24, v25, @"NWAAWDLIS_peerCount", v27, v38, @"Manager Config", @"Peer Count");
      sub_10002595C(v24, v25, @"NWAAWDLIS_peersAdded", v27, v38, @"Manager Config", @"Peers Added");
      sub_10002595C( v24,  v25,  @"NWAAWDLIS_peersRemoved",  v27,  v38,  @"Manager Config",  @"Peers Removed");
    }

    else
    {
      id v49 = WALogCategoryDefaultHandle();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v359 = 136446466;
        v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
               "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __stron"
               "g, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v361 = 1024;
        int v362 = 1105;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:AWDL hasn't been enabled yet, rescan needed, continuing",  v359,  0x12u);
      }
    }

    v51 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v52 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v38]);
    v53 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKeyedSubscript:@"Action Frames"]);

    if (v53) {
      sub_10002595C(v24, v25, @"NWAAWDLIS_afCount", v27, v38, @"Action Frames", @"Input");
    }
    v54 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v55 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:v38]);
    v56 = (void *)objc_claimAutoreleasedReturnValue([v55 objectForKeyedSubscript:@"Data Bytes"]);

    if (v56)
    {
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  0,  @"NWAAWDLIS_bytes",  v27,  v38,  @"Data Bytes",  @"Rx Bytes");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  3u,  @"NWAAWDLIS_bytes",  v27,  v38,  @"Data Bytes",  @"BE Tx Bytes");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  2u,  @"NWAAWDLIS_bytes",  v27,  v38,  @"Data Bytes",  @"BK Tx Bytes");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  5u,  @"NWAAWDLIS_bytes",  v27,  v38,  @"Data Bytes",  @"VI Tx Bytes");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  4u,  @"NWAAWDLIS_bytes",  v27,  v38,  @"Data Bytes",  @"VO Tx Bytes");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  1u,  @"NWAAWDLIS_bytes",  v27,  v38,  @"Data Bytes",  @"Tx Bytes");
    }

    v57 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v58 = (void *)objc_claimAutoreleasedReturnValue([v57 objectForKeyedSubscript:v38]);
    v59 = (void *)objc_claimAutoreleasedReturnValue([v58 objectForKeyedSubscript:@"Data Packets"]);

    if (v59)
    {
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  0,  @"NWAAWDLIS_packets",  v27,  v38,  @"Data Packets",  @"Rx Packets");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  3u,  @"NWAAWDLIS_packets",  v27,  v38,  @"Data Packets",  @"BE Tx Packets");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  2u,  @"NWAAWDLIS_packets",  v27,  v38,  @"Data Packets",  @"BK Tx Packets");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  5u,  @"NWAAWDLIS_packets",  v27,  v38,  @"Data Packets",  @"VI Tx Packets");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  4u,  @"NWAAWDLIS_packets",  v27,  v38,  @"Data Packets",  @"VO Tx Packets");
      sub_100025FC8( v24,  v25,  v336,  a6,  v343,  1u,  @"NWAAWDLIS_packets",  v27,  v38,  @"Data Packets",  @"Tx Packets");
    }

    v60 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v38]);
    v62 = (void *)objc_claimAutoreleasedReturnValue([v61 objectForKeyedSubscript:@"Manager Config"]);

    if (v62)
    {
      sub_100025B1C( v24,  v25,  v336,  a6,  v343,  @"NWAAWDLIS_npeers",  v27,  v38,  @"Manager Config",  @"Peer Count State");
      sub_100025B1C( v24,  v25,  v336,  a6,  v343,  @"NWAAWDLIS_nrtpeers",  v27,  v38,  @"Manager Config",  @"Realtime Group Peer Count State");
      sub_100025B1C( v24,  v25,  v336,  a6,  v343,  @"NWAAWDLIS_enableStates",  v27,  v38,  @"Manager Config",  @"Enabled State");
    }

    v63 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v64 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKeyedSubscript:v38]);
    v65 = (void *)objc_claimAutoreleasedReturnValue([v64 objectForKeyedSubscript:@"AWDL Schedule"]);

    if (v65) {
      sub_100025B1C( v24,  v25,  v336,  a6,  v343,  @"NWAAWDLIS_awdlStates",  v27,  v38,  @"AWDL Schedule",  @"AWDL Schedule State");
    }
    v66 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v67 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v38]);
    v68 = (void *)objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:@"TxCompletion Latency"]);
    v69 = (void *)objc_claimAutoreleasedReturnValue([v68 objectForKeyedSubscript:@"Completion Latency Be"]);

    if (v69) {
      sub_10002734C(v24, v25, v336, a6, v343, @"NWAAWDLIS_txLatencyBEs", v27, v38, @"Completion Latency Be");
    }
    v70 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v71 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:v38]);
    v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:@"TxCompletion Latency"]);
    v73 = (void *)objc_claimAutoreleasedReturnValue([v72 objectForKeyedSubscript:@"Completion Latency Bk"]);

    if (v73) {
      sub_10002734C(v24, v25, v336, a6, v343, @"NWAAWDLIS_txLatencyBKs", v27, v38, @"Completion Latency Bk");
    }
    v74 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v75 = (void *)objc_claimAutoreleasedReturnValue([v74 objectForKeyedSubscript:v38]);
    v76 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:@"TxCompletion Latency"]);
    v77 = (void *)objc_claimAutoreleasedReturnValue([v76 objectForKeyedSubscript:@"Completion Latency Vo"]);

    if (v77) {
      sub_10002734C(v24, v25, v336, a6, v343, @"NWAAWDLIS_txLatencyVOs", v27, v38, @"Completion Latency Vo");
    }
    v78 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
    v79 = (void *)objc_claimAutoreleasedReturnValue([v78 objectForKeyedSubscript:v38]);
    v80 = (void *)objc_claimAutoreleasedReturnValue([v79 objectForKeyedSubscript:@"TxCompletion Latency"]);
    v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:@"Completion Latency Vi"]);

    if (v81) {
      sub_10002734C(v24, v25, v336, a6, v343, @"NWAAWDLIS_txLatencyVIs", v27, v38, @"Completion Latency Vi");
    }
    int v39 = 0;
  }

  else
  {
LABEL_16:

LABEL_17:
    id v34 = WALogCategoryDefaultHandle();
    __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      id v36 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v27]);
      __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 allKeys]);
      *(_DWORD *)v359 = 136446722;
      v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
             "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
             "SDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v361 = 1024;
      int v362 = 1088;
      __int16 v363 = 2112;
      v364 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group Interface awdlX:... we have %@",  v359,  0x1Cu);
    }

    id v38 = 0LL;
    int v39 = 1;
  }

  objc_autoreleasePoolPop(context);
  if (v39)
  {
    id v82 = WALogCategoryDefaultHandle();
    v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v359 = 136446466;
      v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
             "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
             "SDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v361 = 1024;
      int v362 = 1159;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v359, 0x12u);
    }
  }

  objc_destroyWeak(&v358);
  id contexta = v315;

  id v84 = WALogCategoryDefaultHandle();
  v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
  if (os_signpost_enabled(v85))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v85,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityAWDLInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v86 = WALogCategoryDefaultHandle();
  v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
  if (os_signpost_enabled(v87))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v87,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityAPInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  v312 = (void *)objc_claimAutoreleasedReturnValue([v333 fieldForKey:@"NWA_apIfStats"]);
  id v88 = (id)objc_claimAutoreleasedReturnValue([v312 subMessageValue]);
  objc_initWeak(&v358, val);
  id v344 = v343;
  id v328 = v327;
  id v89 = v24;
  id v337 = objc_loadWeakRetained(&v358);
  id v90 = v88;
  id v91 = sub_10002575C(v89);
  v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
  v316 = objc_autoreleasePoolPush();
  __int128 v356 = 0u;
  __int128 v357 = 0u;
  *(_OWORD *)v354 = 0u;
  __int128 v355 = 0u;
  v93 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
  v94 = (void *)objc_claimAutoreleasedReturnValue([v93 allKeys]);

  v95 = (char *)[v94 countByEnumeratingWithState:v354 objects:buf count:16];
  if (v95)
  {
    uint64_t v96 = *(void *)v355;
    while (2)
    {
      for (i = 0LL; i != v95; ++i)
      {
        if (*(void *)v355 != v96) {
          objc_enumerationMutation(v94);
        }
        v98 = (void *)*((void *)v354[1] + (void)i);
        if ([v98 containsString:@"Interface ap"]
          && ([v98 containsString:@"Peer"] & 1) == 0)
        {
          id v99 = v98;

          if (v99)
          {
            v100 = (void *)objc_claimAutoreleasedReturnValue([v90 fieldForKey:@"NWAAPIS_role"]);
            v101 = (void *)objc_claimAutoreleasedReturnValue([v100 stringValue]);
            unsigned __int8 v102 = [v101 isEqualToString:v99];

            if ((v102 & 1) == 0)
            {
              id v103 = WALogCategoryDefaultHandle();
              v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
              if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v359 = 136446466;
                v360 = "void populateNWActivityAPInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporter"
                       "PopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _N"
                       "onnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
                __int16 v361 = 1024;
                int v362 = 1195;
                _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Setting AP Interface",  v359,  0x12u);
              }

              v105 = (void *)objc_claimAutoreleasedReturnValue([v90 fieldForKey:@"NWAAPIS_role"]);
              [v105 setStringValue:v99];
            }

            v106 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v107 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:v99]);
            v108 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKeyedSubscript:@"Manager Config"]);

            if (v108)
            {
              sub_10002595C(v89, v90, @"NWAAPIS_enabled", v92, v99, @"Manager Config", @"Enabled");
              sub_10002595C( v89,  v90,  @"NWAAPIS_peerCount",  v92,  v99,  @"Manager Config",  @"Peer Count");
              sub_10002595C( v89,  v90,  @"NWAAPIS_peersAdded",  v92,  v99,  @"Manager Config",  @"Peers Added");
              sub_10002595C( v89,  v90,  @"NWAAPIS_peersRemoved",  v92,  v99,  @"Manager Config",  @"Peers Removed");
            }

            v109 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v110 = (void *)objc_claimAutoreleasedReturnValue([v109 objectForKeyedSubscript:v99]);
            v111 = (void *)objc_claimAutoreleasedReturnValue([v110 objectForKeyedSubscript:@"Data Bytes"]);

            if (v111)
            {
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  0,  @"NWAAPIS_bytes",  v92,  v99,  @"Data Bytes",  @"Rx Bytes");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  3u,  @"NWAAPIS_bytes",  v92,  v99,  @"Data Bytes",  @"BE Tx Bytes");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  2u,  @"NWAAPIS_bytes",  v92,  v99,  @"Data Bytes",  @"BK Tx Bytes");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  5u,  @"NWAAPIS_bytes",  v92,  v99,  @"Data Bytes",  @"VI Tx Bytes");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  4u,  @"NWAAPIS_bytes",  v92,  v99,  @"Data Bytes",  @"VO Tx Bytes");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  1u,  @"NWAAPIS_bytes",  v92,  v99,  @"Data Bytes",  @"Tx Bytes");
            }

            v112 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v113 = (void *)objc_claimAutoreleasedReturnValue([v112 objectForKeyedSubscript:v99]);
            v114 = (void *)objc_claimAutoreleasedReturnValue([v113 objectForKeyedSubscript:@"Data Packets"]);

            if (v114)
            {
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  0,  @"NWAAPIS_packets",  v92,  v99,  @"Data Packets",  @"Rx Packets");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  3u,  @"NWAAPIS_packets",  v92,  v99,  @"Data Packets",  @"BE Tx Packets");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  2u,  @"NWAAPIS_packets",  v92,  v99,  @"Data Packets",  @"BK Tx Packets");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  5u,  @"NWAAPIS_packets",  v92,  v99,  @"Data Packets",  @"VI Tx Packets");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  4u,  @"NWAAPIS_packets",  v92,  v99,  @"Data Packets",  @"VO Tx Packets");
              sub_100025FC8( v89,  v90,  v337,  a6,  v344,  1u,  @"NWAAPIS_packets",  v92,  v99,  @"Data Packets",  @"Tx Packets");
            }

            v115 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v116 = (void *)objc_claimAutoreleasedReturnValue([v115 objectForKeyedSubscript:v99]);
            v117 = (void *)objc_claimAutoreleasedReturnValue([v116 objectForKeyedSubscript:@"Manager Config"]);

            if (v117)
            {
              sub_100025B1C( v89,  v90,  v337,  a6,  v344,  @"NWAAPIS_npeers",  v92,  v99,  @"Manager Config",  @"Peer Count State");
              sub_100025B1C( v89,  v90,  v337,  a6,  v344,  @"NWAAPIS_enableStates",  v92,  v99,  @"Manager Config",  @"Enabled State");
            }

            v118 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v119 = (void *)objc_claimAutoreleasedReturnValue([v118 objectForKeyedSubscript:v99]);
            v120 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v121 = (void *)objc_claimAutoreleasedReturnValue([v120 objectForKeyedSubscript:@"Completion Latency Be"]);

            if (v121) {
              sub_10002734C( v89,  v90,  v337,  a6,  v344,  @"NWAAPIS_txLatencyBEs",  v92,  v99,  @"Completion Latency Be");
            }
            v122 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v123 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKeyedSubscript:v99]);
            v124 = (void *)objc_claimAutoreleasedReturnValue([v123 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v125 = (void *)objc_claimAutoreleasedReturnValue([v124 objectForKeyedSubscript:@"Completion Latency Bk"]);

            if (v125) {
              sub_10002734C( v89,  v90,  v337,  a6,  v344,  @"NWAAPIS_txLatencyBKs",  v92,  v99,  @"Completion Latency Bk");
            }
            v126 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v127 = (void *)objc_claimAutoreleasedReturnValue([v126 objectForKeyedSubscript:v99]);
            v128 = (void *)objc_claimAutoreleasedReturnValue([v127 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v129 = (void *)objc_claimAutoreleasedReturnValue([v128 objectForKeyedSubscript:@"Completion Latency Vo"]);

            if (v129) {
              sub_10002734C( v89,  v90,  v337,  a6,  v344,  @"NWAAPIS_txLatencyVOs",  v92,  v99,  @"Completion Latency Vo");
            }
            v130 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v92]);
            v131 = (void *)objc_claimAutoreleasedReturnValue([v130 objectForKeyedSubscript:v99]);
            v132 = (void *)objc_claimAutoreleasedReturnValue([v131 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v133 = (void *)objc_claimAutoreleasedReturnValue([v132 objectForKeyedSubscript:@"Completion Latency Vi"]);

            if (v133) {
              sub_10002734C( v89,  v90,  v337,  a6,  v344,  @"NWAAPIS_txLatencyVIs",  v92,  v99,  @"Completion Latency Vi");
            }
          }

          goto LABEL_90;
        }
      }

      v95 = (char *)[v94 countByEnumeratingWithState:v354 objects:buf count:16];
      if (v95) {
        continue;
      }
      break;
    }
  }

  id v99 = 0LL;
LABEL_90:
  objc_autoreleasePoolPop(v316);

  objc_destroyWeak(&v358);
  id contextb = contexta;

  id v134 = WALogCategoryDefaultHandle();
  v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
  if (os_signpost_enabled(v135))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v135,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityAPInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v136 = WALogCategoryDefaultHandle();
  v137 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
  if (os_signpost_enabled(v137))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v137,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityIRInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  v313 = (void *)objc_claimAutoreleasedReturnValue([v333 fieldForKey:@"NWA_irIfStats"]);
  id v138 = (id)objc_claimAutoreleasedReturnValue([v313 subMessageValue]);
  objc_initWeak(&v358, val);
  id v345 = v344;
  id v329 = v328;
  id v139 = v89;
  id v338 = objc_loadWeakRetained(&v358);
  id v140 = v138;
  id v141 = sub_10002575C(v139);
  v142 = (void *)objc_claimAutoreleasedReturnValue(v141);
  v317 = objc_autoreleasePoolPush();
  __int128 v356 = 0u;
  __int128 v357 = 0u;
  *(_OWORD *)v354 = 0u;
  __int128 v355 = 0u;
  v143 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
  v144 = (void *)objc_claimAutoreleasedReturnValue([v143 allKeys]);

  v145 = (char *)[v144 countByEnumeratingWithState:v354 objects:buf count:16];
  if (v145)
  {
    uint64_t v146 = *(void *)v355;
    while (2)
    {
      for (j = 0LL; j != v145; ++j)
      {
        if (*(void *)v355 != v146) {
          objc_enumerationMutation(v144);
        }
        v148 = (void *)*((void *)v354[1] + (void)j);
        if ([v148 containsString:@"Interface ir"]
          && ([v148 containsString:@"Peer"] & 1) == 0)
        {
          id v149 = v148;

          if (v149)
          {
            v150 = (void *)objc_claimAutoreleasedReturnValue([v140 fieldForKey:@"NWAIRIS_role"]);
            v151 = (void *)objc_claimAutoreleasedReturnValue([v150 stringValue]);
            unsigned __int8 v152 = [v151 isEqualToString:v149];

            if ((v152 & 1) == 0)
            {
              id v153 = WALogCategoryDefaultHandle();
              v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
              if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v359 = 136446466;
                v360 = "void populateNWActivityIRInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporter"
                       "PopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _N"
                       "onnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
                __int16 v361 = 1024;
                int v362 = 1284;
                _os_log_impl( (void *)&_mh_execute_header,  v154,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Setting IR Interface",  v359,  0x12u);
              }

              v155 = (void *)objc_claimAutoreleasedReturnValue([v140 fieldForKey:@"NWAIRIS_role"]);
              [v155 setStringValue:v149];
            }

            v156 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v157 = (void *)objc_claimAutoreleasedReturnValue([v156 objectForKeyedSubscript:v149]);
            v158 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKeyedSubscript:@"Manager Config"]);

            if (v158)
            {
              sub_10002595C(v139, v140, @"NWAIRIS_enabled", v142, v149, @"Manager Config", @"Enabled");
              sub_10002595C( v139,  v140,  @"NWAIRIS_peerCount",  v142,  v149,  @"Manager Config",  @"Peer Count");
              sub_10002595C( v139,  v140,  @"NWAIRIS_peersAdded",  v142,  v149,  @"Manager Config",  @"Peers Added");
              sub_10002595C( v139,  v140,  @"NWAIRIS_peersRemoved",  v142,  v149,  @"Manager Config",  @"Peers Removed");
            }

            v159 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v160 = (void *)objc_claimAutoreleasedReturnValue([v159 objectForKeyedSubscript:v149]);
            v161 = (void *)objc_claimAutoreleasedReturnValue([v160 objectForKeyedSubscript:@"Data Bytes"]);

            if (v161)
            {
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  0,  @"NWAIRIS_bytes",  v142,  v149,  @"Data Bytes",  @"Rx Bytes");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  3u,  @"NWAIRIS_bytes",  v142,  v149,  @"Data Bytes",  @"BE Tx Bytes");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  2u,  @"NWAIRIS_bytes",  v142,  v149,  @"Data Bytes",  @"BK Tx Bytes");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  5u,  @"NWAIRIS_bytes",  v142,  v149,  @"Data Bytes",  @"VI Tx Bytes");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  4u,  @"NWAIRIS_bytes",  v142,  v149,  @"Data Bytes",  @"VO Tx Bytes");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  1u,  @"NWAIRIS_bytes",  v142,  v149,  @"Data Bytes",  @"Tx Bytes");
            }

            v162 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v163 = (void *)objc_claimAutoreleasedReturnValue([v162 objectForKeyedSubscript:v149]);
            v164 = (void *)objc_claimAutoreleasedReturnValue([v163 objectForKeyedSubscript:@"Data Packets"]);

            if (v164)
            {
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  0,  @"NWAIRIS_packets",  v142,  v149,  @"Data Packets",  @"Rx Packets");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  3u,  @"NWAIRIS_packets",  v142,  v149,  @"Data Packets",  @"BE Tx Packets");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  2u,  @"NWAIRIS_packets",  v142,  v149,  @"Data Packets",  @"BK Tx Packets");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  5u,  @"NWAIRIS_packets",  v142,  v149,  @"Data Packets",  @"VI Tx Packets");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  4u,  @"NWAIRIS_packets",  v142,  v149,  @"Data Packets",  @"VO Tx Packets");
              sub_100025FC8( v139,  v140,  v338,  a6,  v345,  1u,  @"NWAIRIS_packets",  v142,  v149,  @"Data Packets",  @"Tx Packets");
            }

            v165 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v166 = (void *)objc_claimAutoreleasedReturnValue([v165 objectForKeyedSubscript:v149]);
            v167 = (void *)objc_claimAutoreleasedReturnValue([v166 objectForKeyedSubscript:@"Manager Config"]);

            if (v167)
            {
              sub_100025B1C( v139,  v140,  v338,  a6,  v345,  @"NWAIRIS_npeers",  v142,  v149,  @"Manager Config",  @"Peer Count State");
              sub_100025B1C( v139,  v140,  v338,  a6,  v345,  @"NWAIRIS_enableStates",  v142,  v149,  @"Manager Config",  @"Enabled State");
            }

            v168 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v169 = (void *)objc_claimAutoreleasedReturnValue([v168 objectForKeyedSubscript:v149]);
            v170 = (void *)objc_claimAutoreleasedReturnValue([v169 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v171 = (void *)objc_claimAutoreleasedReturnValue([v170 objectForKeyedSubscript:@"Completion Latency Be"]);

            if (v171) {
              sub_10002734C( v139,  v140,  v338,  a6,  v345,  @"NWAIRIS_txLatencyBEs",  v142,  v149,  @"Completion Latency Be");
            }
            v172 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v173 = (void *)objc_claimAutoreleasedReturnValue([v172 objectForKeyedSubscript:v149]);
            v174 = (void *)objc_claimAutoreleasedReturnValue([v173 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v175 = (void *)objc_claimAutoreleasedReturnValue([v174 objectForKeyedSubscript:@"Completion Latency Bk"]);

            if (v175) {
              sub_10002734C( v139,  v140,  v338,  a6,  v345,  @"NWAIRIS_txLatencyBKs",  v142,  v149,  @"Completion Latency Bk");
            }
            v176 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v177 = (void *)objc_claimAutoreleasedReturnValue([v176 objectForKeyedSubscript:v149]);
            v178 = (void *)objc_claimAutoreleasedReturnValue([v177 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v179 = (void *)objc_claimAutoreleasedReturnValue([v178 objectForKeyedSubscript:@"Completion Latency Vo"]);

            if (v179) {
              sub_10002734C( v139,  v140,  v338,  a6,  v345,  @"NWAIRIS_txLatencyVOs",  v142,  v149,  @"Completion Latency Vo");
            }
            v180 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v142]);
            v181 = (void *)objc_claimAutoreleasedReturnValue([v180 objectForKeyedSubscript:v149]);
            v182 = (void *)objc_claimAutoreleasedReturnValue([v181 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v183 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKeyedSubscript:@"Completion Latency Vi"]);

            if (v183) {
              sub_10002734C( v139,  v140,  v338,  a6,  v345,  @"NWAIRIS_txLatencyVIs",  v142,  v149,  @"Completion Latency Vi");
            }
          }

          goto LABEL_125;
        }
      }

      v145 = (char *)[v144 countByEnumeratingWithState:v354 objects:buf count:16];
      if (v145) {
        continue;
      }
      break;
    }
  }

  id v149 = 0LL;
LABEL_125:
  objc_autoreleasePoolPop(v317);

  objc_destroyWeak(&v358);
  id contextc = contextb;

  id v184 = WALogCategoryDefaultHandle();
  v185 = (os_log_s *)objc_claimAutoreleasedReturnValue(v184);
  if (os_signpost_enabled(v185))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v185,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityIRInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v186 = WALogCategoryDefaultHandle();
  v187 = (os_log_s *)objc_claimAutoreleasedReturnValue(v186);
  if (os_signpost_enabled(v187))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v187,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityNANInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  v314 = (void *)objc_claimAutoreleasedReturnValue([v333 fieldForKey:@"NWA_nanIfStats"]);
  id v188 = (id)objc_claimAutoreleasedReturnValue([v314 subMessageValue]);
  objc_initWeak(&v358, val);
  id v346 = v345;
  id v330 = v329;
  id v189 = v139;
  id v339 = objc_loadWeakRetained(&v358);
  id v190 = v188;
  id v191 = sub_10002575C(v189);
  v192 = (void *)objc_claimAutoreleasedReturnValue(v191);
  v318 = objc_autoreleasePoolPush();
  __int128 v356 = 0u;
  __int128 v357 = 0u;
  *(_OWORD *)v354 = 0u;
  __int128 v355 = 0u;
  v193 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
  v194 = (void *)objc_claimAutoreleasedReturnValue([v193 allKeys]);

  v195 = (char *)[v194 countByEnumeratingWithState:v354 objects:buf count:16];
  if (v195)
  {
    uint64_t v196 = *(void *)v355;
    while (2)
    {
      for (k = 0LL; k != v195; ++k)
      {
        if (*(void *)v355 != v196) {
          objc_enumerationMutation(v194);
        }
        v198 = (void *)*((void *)v354[1] + (void)k);
        if ([v198 containsString:@"Interface nan"]
          && ([v198 containsString:@"Peer"] & 1) == 0)
        {
          id v199 = v198;

          if (v199)
          {
            v200 = (void *)objc_claimAutoreleasedReturnValue([v190 fieldForKey:@"NWANANIS_role"]);
            v201 = (void *)objc_claimAutoreleasedReturnValue([v200 stringValue]);
            unsigned __int8 v202 = [v201 isEqualToString:v199];

            if ((v202 & 1) == 0)
            {
              id v203 = WALogCategoryDefaultHandle();
              v204 = (os_log_s *)objc_claimAutoreleasedReturnValue(v203);
              if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v359 = 136446466;
                v360 = "void populateNWActivityNANInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporte"
                       "rPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _"
                       "Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
                __int16 v361 = 1024;
                int v362 = 1373;
                _os_log_impl( (void *)&_mh_execute_header,  v204,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Setting NAN Interface",  v359,  0x12u);
              }

              v205 = (void *)objc_claimAutoreleasedReturnValue([v190 fieldForKey:@"NWANANIS_role"]);
              [v205 setStringValue:v199];
            }

            v206 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v207 = (void *)objc_claimAutoreleasedReturnValue([v206 objectForKeyedSubscript:v199]);
            v208 = (void *)objc_claimAutoreleasedReturnValue([v207 objectForKeyedSubscript:@"Manager Config"]);

            if (v208)
            {
              sub_10002595C( v189,  v190,  @"NWANANIS_enabled",  v192,  v199,  @"Manager Config",  @"Enabled");
              sub_10002595C( v189,  v190,  @"NWANANIS_peerCount",  v192,  v199,  @"Manager Config",  @"Peer Count");
              sub_10002595C( v189,  v190,  @"NWANANIS_peersAdded",  v192,  v199,  @"Manager Config",  @"Peers Added");
              sub_10002595C( v189,  v190,  @"NWANANIS_peersRemoved",  v192,  v199,  @"Manager Config",  @"Peers Removed");
            }

            v209 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v210 = (void *)objc_claimAutoreleasedReturnValue([v209 objectForKeyedSubscript:v199]);
            v211 = (void *)objc_claimAutoreleasedReturnValue([v210 objectForKeyedSubscript:@"Data Bytes"]);

            if (v211)
            {
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  0,  @"NWANANIS_bytes",  v192,  v199,  @"Data Bytes",  @"Rx Bytes");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  3u,  @"NWANANIS_bytes",  v192,  v199,  @"Data Bytes",  @"BE Tx Bytes");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  2u,  @"NWANANIS_bytes",  v192,  v199,  @"Data Bytes",  @"BK Tx Bytes");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  5u,  @"NWANANIS_bytes",  v192,  v199,  @"Data Bytes",  @"VI Tx Bytes");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  4u,  @"NWANANIS_bytes",  v192,  v199,  @"Data Bytes",  @"VO Tx Bytes");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  1u,  @"NWANANIS_bytes",  v192,  v199,  @"Data Bytes",  @"Tx Bytes");
            }

            v212 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v213 = (void *)objc_claimAutoreleasedReturnValue([v212 objectForKeyedSubscript:v199]);
            v214 = (void *)objc_claimAutoreleasedReturnValue([v213 objectForKeyedSubscript:@"Data Packets"]);

            if (v214)
            {
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  0,  @"NWANANIS_packets",  v192,  v199,  @"Data Packets",  @"Rx Packets");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  3u,  @"NWANANIS_packets",  v192,  v199,  @"Data Packets",  @"BE Tx Packets");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  2u,  @"NWANANIS_packets",  v192,  v199,  @"Data Packets",  @"BK Tx Packets");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  5u,  @"NWANANIS_packets",  v192,  v199,  @"Data Packets",  @"VI Tx Packets");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  4u,  @"NWANANIS_packets",  v192,  v199,  @"Data Packets",  @"VO Tx Packets");
              sub_100025FC8( v189,  v190,  v339,  a6,  v346,  1u,  @"NWANANIS_packets",  v192,  v199,  @"Data Packets",  @"Tx Packets");
            }

            v215 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v216 = (void *)objc_claimAutoreleasedReturnValue([v215 objectForKeyedSubscript:v199]);
            v217 = (void *)objc_claimAutoreleasedReturnValue([v216 objectForKeyedSubscript:@"Manager Config"]);

            if (v217)
            {
              sub_100025B1C( v189,  v190,  v339,  a6,  v346,  @"NWANANIS_npeers",  v192,  v199,  @"Manager Config",  @"Peer Count State");
              sub_100025B1C( v189,  v190,  v339,  a6,  v346,  @"NWANANIS_enableStates",  v192,  v199,  @"Manager Config",  @"Enabled State");
            }

            v218 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v219 = (void *)objc_claimAutoreleasedReturnValue([v218 objectForKeyedSubscript:v199]);
            v220 = (void *)objc_claimAutoreleasedReturnValue([v219 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v221 = (void *)objc_claimAutoreleasedReturnValue([v220 objectForKeyedSubscript:@"Completion Latency Be"]);

            if (v221) {
              sub_10002734C( v189,  v190,  v339,  a6,  v346,  @"NWANANIS_txLatencyBEs",  v192,  v199,  @"Completion Latency Be");
            }
            v222 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v223 = (void *)objc_claimAutoreleasedReturnValue([v222 objectForKeyedSubscript:v199]);
            v224 = (void *)objc_claimAutoreleasedReturnValue([v223 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v225 = (void *)objc_claimAutoreleasedReturnValue([v224 objectForKeyedSubscript:@"Completion Latency Bk"]);

            if (v225) {
              sub_10002734C( v189,  v190,  v339,  a6,  v346,  @"NWANANIS_txLatencyBKs",  v192,  v199,  @"Completion Latency Bk");
            }
            v226 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v227 = (void *)objc_claimAutoreleasedReturnValue([v226 objectForKeyedSubscript:v199]);
            v228 = (void *)objc_claimAutoreleasedReturnValue([v227 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v229 = (void *)objc_claimAutoreleasedReturnValue([v228 objectForKeyedSubscript:@"Completion Latency Vo"]);

            if (v229) {
              sub_10002734C( v189,  v190,  v339,  a6,  v346,  @"NWANANIS_txLatencyVOs",  v192,  v199,  @"Completion Latency Vo");
            }
            v230 = (void *)objc_claimAutoreleasedReturnValue([v189 objectForKeyedSubscript:v192]);
            v231 = (void *)objc_claimAutoreleasedReturnValue([v230 objectForKeyedSubscript:v199]);
            v232 = (void *)objc_claimAutoreleasedReturnValue([v231 objectForKeyedSubscript:@"TxCompletion Latency"]);
            v233 = (void *)objc_claimAutoreleasedReturnValue([v232 objectForKeyedSubscript:@"Completion Latency Vi"]);

            if (v233) {
              sub_10002734C( v189,  v190,  v339,  a6,  v346,  @"NWANANIS_txLatencyVIs",  v192,  v199,  @"Completion Latency Vi");
            }
          }

          goto LABEL_160;
        }
      }

      v195 = (char *)[v194 countByEnumeratingWithState:v354 objects:buf count:16];
      if (v195) {
        continue;
      }
      break;
    }
  }

  id v199 = 0LL;
LABEL_160:
  objc_autoreleasePoolPop(v318);

  objc_destroyWeak(&v358);
  id v234 = contextc;

  id v235 = WALogCategoryDefaultHandle();
  v236 = (os_log_s *)objc_claimAutoreleasedReturnValue(v235);
  if (os_signpost_enabled(v236))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v236,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityNANInterfaceStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  v237 = (void *)objc_claimAutoreleasedReturnValue([v333 fieldForKey:@"NWA_controllerStats"]);
  contextd = (void *)objc_claimAutoreleasedReturnValue([v237 subMessageValue]);

  id v238 = WALogCategoryDefaultHandle();
  v239 = (os_log_s *)objc_claimAutoreleasedReturnValue(v238);
  if (os_signpost_enabled(v239))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v239,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "nwActivityIteratorblock",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v240 = WALogCategoryDefaultHandle();
  v241 = (os_log_s *)objc_claimAutoreleasedReturnValue(v240);
  if (os_signpost_enabled(v241))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v241,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityControllerStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v351 = v234;
  sub_10000B154(contextd, val, a6, v346, v330, v189, &v351);
  id v242 = v351;

  id v243 = WALogCategoryDefaultHandle();
  v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v243);
  if (os_signpost_enabled(v244))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v244,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "populateNWActivityControllerStats",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  v245 = (void *)objc_claimAutoreleasedReturnValue([v333 fieldForKey:@"NWA_linkQualSample"]);
  v246 = (void *)objc_claimAutoreleasedReturnValue([v245 subMessageValue]);
  id v350 = v242;
  sub_10000FB9C(v246, v346, v330, v189, &v350);
  id v319 = v350;

  id v247 = v333;
  objc_initWeak(v354, val);
  id v347 = v346;
  id v334 = v330;
  id v248 = v189;
  id WeakRetained = objc_loadWeakRetained(v354);
  v331 = objc_autoreleasePoolPush();
  id v249 = sub_10002575C(v248);
  v250 = (void *)objc_claimAutoreleasedReturnValue(v249);
  v251 = 0LL;
  uint64_t v252 = 0LL;
  char v253 = 1;
  while (1)
  {
    char v254 = v253;
    v255 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"WiFi Quality Score Slice %lu",  v252);

    v256 = (void *)objc_claimAutoreleasedReturnValue([v248 objectForKeyedSubscript:v250]);
    v251 = v255;
    v257 = (void *)objc_claimAutoreleasedReturnValue([v256 objectForKeyedSubscript:v255]);
    BOOL v258 = v257 == 0LL;

    if (v258) {
      goto LABEL_175;
    }
    v259 = (void *)objc_claimAutoreleasedReturnValue([v248 objectForKeyedSubscript:v250]);
    v260 = (void *)objc_claimAutoreleasedReturnValue([v259 objectForKeyedSubscript:v255]);
    v261 = (void *)objc_claimAutoreleasedReturnValue([v260 objectForKeyedSubscript:@"Counters"]);
    BOOL v262 = v261 == 0LL;

    if (v262) {
      break;
    }
    v263 = (void *)objc_claimAutoreleasedReturnValue([v247 fieldForKey:@"NWA_scores"]);
    v264 = (void *)objc_claimAutoreleasedReturnValue([v263 repeatableValues]);
    BOOL v265 = v264 == 0LL;

    if (v265)
    {
      v266 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained getNewMessageForKey:@"QS" groupType:a6 forProcessWithToken:v347]);
      v267 = (void *)objc_claimAutoreleasedReturnValue([v247 fieldForKey:@"NWA_scores"]);
      [v267 addRepeatableSubMessageValue:v266];

      v268 = (void *)objc_claimAutoreleasedReturnValue([v247 fieldForKey:@"NWA_scores"]);
      id v269 = [v266 copy];
      [v268 addRepeatableSubMessageValue:v269];
    }

    v270 = (void *)objc_claimAutoreleasedReturnValue([v247 fieldForKey:@"NWA_scores"]);
    v271 = (void *)objc_claimAutoreleasedReturnValue([v270 repeatableValues]);
    v272 = (void *)objc_claimAutoreleasedReturnValue([v271 objectAtIndex:v252]);

    if (!v272)
    {
      id v309 = WALogCategoryDefaultHandle();
      v305 = (os_log_s *)objc_claimAutoreleasedReturnValue(v309);
      if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v366 = "void populateNWActivityQualityScore(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
               "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSD"
               "ictionary * _Nonnull __strong)";
        __int16 v367 = 1024;
        int v368 = 2380;
        _os_log_impl( (void *)&_mh_execute_header,  v305,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad sliceSpecificMessage",  buf,  0x12u);
      }

      goto LABEL_201;
    }

    sub_10002595C(v248, v272, @"QS_channelQuality", v250, v251, @"Counters", @"Channel Quality Score");
    sub_10002595C(v248, v272, @"QS_txLoss", v250, v251, @"Counters", @"Tx Loss Score");
    sub_10002595C(v248, v272, @"QS_rxLoss", v250, v251, @"Counters", @"Rx Loss Score");
    sub_10002595C(v248, v272, @"QS_txLatency", v250, v251, @"Counters", @"Tx Latency Score");
    sub_10002595C(v248, v272, @"QS_rxLatency", v250, v251, @"Counters", @"Rx Latency Score");

LABEL_175:
    char v253 = 0;
    char v273 = 0;
    uint64_t v252 = 1LL;
    if ((v254 & 1) == 0) {
      goto LABEL_176;
    }
  }

  id v304 = WALogCategoryDefaultHandle();
  v305 = (os_log_s *)objc_claimAutoreleasedReturnValue(v304);
  if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
  {
    v306 = (void *)objc_claimAutoreleasedReturnValue([v248 objectForKeyedSubscript:v250]);
    v307 = (void *)objc_claimAutoreleasedReturnValue([v306 objectForKeyedSubscript:v251]);
    v308 = (void *)objc_claimAutoreleasedReturnValue([v307 allKeys]);
    *(_DWORD *)buf = 136446722;
    v366 = "void populateNWActivityQualityScore(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessage"
           "Delegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong)";
    __int16 v367 = 1024;
    int v368 = 2369;
    __int16 v369 = 2112;
    v370 = v308;
    _os_log_impl( (void *)&_mh_execute_header,  v305,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup with contains Counters, we have %@",  buf,  0x1Cu);
  }

LABEL_201:
  char v273 = 1;
LABEL_176:

  objc_autoreleasePoolPop(v331);
  if ((v273 & 1) != 0)
  {
    id v274 = WALogCategoryDefaultHandle();
    v275 = (os_log_s *)objc_claimAutoreleasedReturnValue(v274);
    if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v366 = "void populateNWActivityQualityScore(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
             "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
             "onary * _Nonnull __strong)";
      __int16 v367 = 1024;
      int v368 = 2394;
      _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }
  }

  objc_destroyWeak(v354);
  id v276 = v247;
  objc_initWeak(v354, val);
  id v348 = v347;
  id v335 = v334;
  id v277 = v248;
  id v341 = objc_loadWeakRetained(v354);
  v332 = objc_autoreleasePoolPush();
  id v278 = sub_10002575C(v277);
  v279 = (void *)objc_claimAutoreleasedReturnValue(v278);
  uint64_t v280 = 0LL;
  char v281 = 1;
  while (2)
  {
    char v282 = v281;
    v283 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"BT LE Connection Stats Slice %lu",  v280);
    v284 = (void *)objc_claimAutoreleasedReturnValue([v277 objectForKeyedSubscript:v279]);
    v285 = (void *)objc_claimAutoreleasedReturnValue([v284 objectForKeyedSubscript:v283]);
    BOOL v286 = v285 == 0LL;

    if (v286)
    {
LABEL_186:

      char v281 = 0;
      char v297 = 0;
      uint64_t v280 = 1LL;
      if ((v282 & 1) == 0) {
        goto LABEL_187;
      }
      continue;
    }

    break;
  }

  v287 = (void *)objc_claimAutoreleasedReturnValue([v276 fieldForKey:@"NWA_btleConnections"]);
  v288 = (void *)objc_claimAutoreleasedReturnValue([v287 repeatableValues]);
  BOOL v289 = v288 == 0LL;

  if (v289)
  {
    v290 = (void *)objc_claimAutoreleasedReturnValue( [v341 getNewMessageForKey:@"WFAAWDBTLECS" groupType:a6 forProcessWithToken:v348]);
    v291 = (void *)objc_claimAutoreleasedReturnValue([v276 fieldForKey:@"NWA_btleConnections"]);
    [v291 addRepeatableSubMessageValue:v290];

    v292 = (void *)objc_claimAutoreleasedReturnValue([v276 fieldForKey:@"NWA_btleConnections"]);
    id v293 = [v290 copy];
    [v292 addRepeatableSubMessageValue:v293];
  }

  v294 = (void *)objc_claimAutoreleasedReturnValue([v276 fieldForKey:@"NWA_btleConnections"]);
  v295 = (void *)objc_claimAutoreleasedReturnValue([v294 repeatableValues]);
  v296 = (void *)objc_claimAutoreleasedReturnValue([v295 objectAtIndex:v280]);

  if (v296)
  {
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_start", v279, v283, @"Counters", @"BT LE Cnx Start");
    sub_10002595C( v277,  v296,  @"WFAAWDBTLECS_complete",  v279,  v283,  @"Counters",  @"BT LE Cnx Complete");
    sub_10002595C( v277,  v296,  @"WFAAWDBTLECS_peakOutage",  v279,  v283,  @"Counters",  @"BT LE Cnx Peak Outage");
    sub_10002595C( v277,  v296,  @"WFAAWDBTLECS_totalDuration",  v279,  v283,  @"Counters",  @"BT LE Cnx Total Duration");
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_dc0", v279, v283, @"Counters", @"BT LE Cnx DC 0");
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_dc1", v279, v283, @"Counters", @"BT LE Cnx DC 1");
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_dc2", v279, v283, @"Counters", @"BT LE Cnx DC 2");
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_dc3", v279, v283, @"Counters", @"BT LE Cnx DC 3");
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_dc4", v279, v283, @"Counters", @"BT LE Cnx DC 4");
    sub_10002595C(v277, v296, @"WFAAWDBTLECS_dc5", v279, v283, @"Counters", @"BT LE Cnx DC 5");

    goto LABEL_186;
  }

  id v302 = WALogCategoryDefaultHandle();
  v303 = (os_log_s *)objc_claimAutoreleasedReturnValue(v302);
  if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v366 = "void populateNWActivityBTLEConnection(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
           "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDiction"
           "ary * _Nonnull __strong)";
    __int16 v367 = 1024;
    int v368 = 2325;
    _os_log_impl( (void *)&_mh_execute_header,  v303,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad sliceSpecificMessage",  buf,  0x12u);
  }

  char v297 = 1;
LABEL_187:

  objc_autoreleasePoolPop(v332);
  if ((v297 & 1) != 0)
  {
    id v298 = WALogCategoryDefaultHandle();
    v299 = (os_log_s *)objc_claimAutoreleasedReturnValue(v298);
    if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v366 = "void populateNWActivityBTLEConnection(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
             "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDic"
             "tionary * _Nonnull __strong)";
      __int16 v367 = 1024;
      int v368 = 2345;
      _os_log_impl((void *)&_mh_execute_header, v299, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }
  }

  objc_destroyWeak(v354);
  id v300 = WALogCategoryDefaultHandle();
  v301 = (os_log_s *)objc_claimAutoreleasedReturnValue(v300);
  if (os_signpost_enabled(v301))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v301,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "nwActivityIteratorblock",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  objc_autoreleasePoolPop(v310);
  v320[2](v320, v276, v319);

  objc_destroyWeak(&location);
}
    }
  }

  else
  {
    if (![v10 isEqualToString:@"disable_dps_wd"])
    {
      if ([v10 isEqualToString:@"minutes_between_dps_wd"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setMinutes_between_dps_wd:]( self,  "setMinutes_between_dps_wd:",  [v16 unsignedIntegerValue]);
        id v25 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 494;
        v87 = 2048;
        id v88 = -[RecommendationPreferences minutes_between_dps_wd](self, "minutes_between_dps_wd");
        id v21 = "%{public}s::%d:minutes_between_dps_wd Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_wd_cca"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_wd_cca:](self, "setDps_wd_cca:", [v16 unsignedIntegerValue]);
        id v26 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 499;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_wd_cca](self, "dps_wd_cca");
        id v21 = "%{public}s::%d:dps_wd_cca Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_stall_dur_for_wd"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_stall_dur_for_wd:]( self,  "setDps_stall_dur_for_wd:",  [v16 unsignedIntegerValue]);
        v27 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 504;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_stall_dur_for_wd](self, "dps_stall_dur_for_wd");
        id v21 = "%{public}s::%d:dps_stall_dur_for_wd Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_capture_evaluated_at_sample"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_capture_evaluated_at_sample:]( self,  "setDps_capture_evaluated_at_sample:",  [v16 unsignedIntegerValue]);
        id v28 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 509;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_capture_evaluated_at_sample](self, "dps_capture_evaluated_at_sample");
        id v21 = "%{public}s::%d:dps_capture_evaluated_at_sample Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_trap_evaluated_at_sample"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_trap_evaluated_at_sample:]( self,  "setDps_trap_evaluated_at_sample:",  [v16 unsignedIntegerValue]);
        v29 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 514;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_trap_evaluated_at_sample](self, "dps_trap_evaluated_at_sample");
        id v21 = "%{public}s::%d:dps_trap_evaluated_at_sample Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_interrogation_sample_count"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_interrogation_sample_count:]( self,  "setDps_interrogation_sample_count:",  [v16 unsignedIntegerValue]);
        id v30 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 519;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_interrogation_sample_count](self, "dps_interrogation_sample_count");
        id v21 = "%{public}s::%d:dps_interrogation_sample_count Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_duration_between_samples"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_duration_between_samples:]( self,  "setDps_duration_between_samples:",  [v16 unsignedIntegerValue]);
        uint64_t v31 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 524;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_duration_between_samples](self, "dps_duration_between_samples");
        id v21 = "%{public}s::%d:dps_duration_between_samples Preference is %ld";
      }

      else if ([v10 isEqualToString:@"dps_report_sent_after"])
      {
        if (!v16) {
          goto LABEL_202;
        }
        -[RecommendationPreferences setDps_report_sent_after:]( self,  "setDps_report_sent_after:",  [v16 unsignedIntegerValue]);
        uint64_t v32 = WALogCategoryDefaultHandle();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_201;
        }
        *(_DWORD *)buf = 136446722;
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        v85 = 1024;
        id v86 = 529;
        v87 = 2048;
        id v88 = -[RecommendationPreferences dps_report_sent_after](self, "dps_report_sent_after");
        id v21 = "%{public}s::%d:dps_report_sent_after Preference is %ld";
      }

      else
      {
        if ([v10 isEqualToString:@"force_dps_recommend_always"])
        {
          if (v16)
          {
            -[RecommendationPreferences setForce_dps_recommend_always:]( self,  "setForce_dps_recommend_always:",  [v16 BOOLValue]);
            __int16 v33 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              id v34 = -[RecommendationPreferences force_dps_recommend_always](self, "force_dps_recommend_always");
              __int16 v35 = "NO";
              id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
              *(_DWORD *)buf = 136446722;
              if (v34) {
                __int16 v35 = "YES";
              }
              v85 = 1024;
              id v86 = 534;
              v87 = 2080;
              id v88 = (int64_t)v35;
              id v21 = "%{public}s::%d:force_dps_recommend_always Preference is %s";
              goto LABEL_200;
            }

            goto LABEL_201;
          }

          goto LABEL_202;
        }

        if ([v10 isEqualToString:@"dns_symptoms_trap_evaluated_at_sample"])
        {
          if (!v16) {
            goto LABEL_202;
          }
          -[RecommendationPreferences setDns_symptoms_trap_evaluated_at_sample:]( self,  "setDns_symptoms_trap_evaluated_at_sample:",  [v16 unsignedIntegerValue]);
          id v36 = WALogCategoryDefaultHandle();
          v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_201;
          }
          *(_DWORD *)buf = 136446722;
          id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
          v85 = 1024;
          id v86 = 539;
          v87 = 2048;
          id v88 = -[RecommendationPreferences dns_symptoms_trap_evaluated_at_sample]( self,  "dns_symptoms_trap_evaluated_at_sample");
          id v21 = "%{public}s::%d:dns_symptoms_trap_evaluated_at_sample Preference is %ld";
        }

        else if ([v10 isEqualToString:@"dns_symptoms_interrogation_sample_count"])
        {
          if (!v16) {
            goto LABEL_202;
          }
          -[RecommendationPreferences setDns_symptoms_interrogation_sample_count:]( self,  "setDns_symptoms_interrogation_sample_count:",  [v16 unsignedIntegerValue]);
          __int16 v37 = WALogCategoryDefaultHandle();
          v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_201;
          }
          *(_DWORD *)buf = 136446722;
          id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
          v85 = 1024;
          id v86 = 544;
          v87 = 2048;
          id v88 = -[RecommendationPreferences dns_symptoms_interrogation_sample_count]( self,  "dns_symptoms_interrogation_sample_count");
          id v21 = "%{public}s::%d:dns_symptoms_interrogation_sample_count Preference is %ld";
        }

        else if ([v10 isEqualToString:@"dns_symptoms_duration_between_samples_before_trap"])
        {
          if (!v16) {
            goto LABEL_202;
          }
          -[RecommendationPreferences setDns_symptoms_duration_between_samples_before_trap:]( self,  "setDns_symptoms_duration_between_samples_before_trap:",  [v16 unsignedIntegerValue]);
          id v38 = WALogCategoryDefaultHandle();
          v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_201;
          }
          *(_DWORD *)buf = 136446722;
          id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
          v85 = 1024;
          id v86 = 549;
          v87 = 2048;
          id v88 = -[RecommendationPreferences dns_symptoms_duration_between_samples_before_trap]( self,  "dns_symptoms_duration_between_samples_before_trap");
          id v21 = "%{public}s::%d:dns_symptoms_duration_between_samples_before_trap Preference is %ld";
        }

        else if ([v10 isEqualToString:@"dns_symptoms_duration_between_samples_after_trap"])
        {
          if (!v16) {
            goto LABEL_202;
          }
          -[RecommendationPreferences setDns_symptoms_duration_between_samples_after_trap:]( self,  "setDns_symptoms_duration_between_samples_after_trap:",  [v16 unsignedIntegerValue]);
          int v39 = WALogCategoryDefaultHandle();
          v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_201;
          }
          *(_DWORD *)buf = 136446722;
          id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
          v85 = 1024;
          id v86 = 554;
          v87 = 2048;
          id v88 = -[RecommendationPreferences dns_symptoms_duration_between_samples_after_trap]( self,  "dns_symptoms_duration_between_samples_after_trap");
          id v21 = "%{public}s::%d:dns_symptoms_duration_between_samples_after_trap Preference is %ld";
        }

        else
        {
          if ([v10 isEqualToString:@"disable_fast_dps_wd"])
          {
            if (v16)
            {
              -[RecommendationPreferences setDisable_fast_dps_wd:]( self,  "setDisable_fast_dps_wd:",  [v16 BOOLValue]);
              v40 = WALogCategoryDefaultHandle();
              v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v41 = -[RecommendationPreferences disable_fast_dps_wd](self, "disable_fast_dps_wd");
                unsigned __int8 v42 = "NO";
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                *(_DWORD *)buf = 136446722;
                if (v41) {
                  unsigned __int8 v42 = "YES";
                }
                v85 = 1024;
                id v86 = 559;
                v87 = 2080;
                id v88 = (int64_t)v42;
                id v21 = "%{public}s::%d:disable_fast_dps_wd Preference is %s";
                goto LABEL_200;
              }

              goto LABEL_201;
            }

            goto LABEL_202;
          }

          if ([v10 isEqualToString:@"disable_fast_dps_validation_for_test"])
          {
            if (v16)
            {
              -[RecommendationPreferences setDisable_fast_dps_validation_for_test:]( self,  "setDisable_fast_dps_validation_for_test:",  [v16 BOOLValue]);
              id v43 = WALogCategoryDefaultHandle();
              v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                v44 = -[RecommendationPreferences disable_fast_dps_validation_for_test]( self,  "disable_fast_dps_validation_for_test");
                BOOL v45 = "NO";
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                *(_DWORD *)buf = 136446722;
                if (v44) {
                  BOOL v45 = "YES";
                }
                v85 = 1024;
                id v86 = 564;
                v87 = 2080;
                id v88 = (int64_t)v45;
                id v21 = "%{public}s::%d:disable_fast_dps_validation_for_test Preference is %s";
                goto LABEL_200;
              }

              goto LABEL_201;
            }

            goto LABEL_202;
          }

          if ([v10 isEqualToString:@"minutes_between_fast_dps_wd_screen_on"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setMinutes_between_fast_dps_wd_screen_on:]( self,  "setMinutes_between_fast_dps_wd_screen_on:",  [v16 unsignedIntegerValue]);
            v46 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 569;
            v87 = 2048;
            id v88 = -[RecommendationPreferences minutes_between_fast_dps_wd_screen_on]( self,  "minutes_between_fast_dps_wd_screen_on");
            id v21 = "%{public}s::%d:minutes_between_fast_dps_wd_screen_on Preference is %ld";
          }

          else if ([v10 isEqualToString:@"minutes_between_fast_dps_wd_screen_off"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setMinutes_between_fast_dps_wd_screen_off:]( self,  "setMinutes_between_fast_dps_wd_screen_off:",  [v16 unsignedIntegerValue]);
            v47 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 574;
            v87 = 2048;
            id v88 = -[RecommendationPreferences minutes_between_fast_dps_wd_screen_off]( self,  "minutes_between_fast_dps_wd_screen_off");
            id v21 = "%{public}s::%d:minutes_between_fast_dps_wd_screen_off Preference is %ld";
          }

          else if ([v10 isEqualToString:@"prediction_probability_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setPrediction_probability_threshold:]( self,  "setPrediction_probability_threshold:",  [v16 unsignedIntegerValue]);
            v48 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 579;
            v87 = 2048;
            id v88 = -[RecommendationPreferences prediction_probability_threshold]( self,  "prediction_probability_threshold");
            id v21 = "%{public}s::%d:prediction_probability_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"prediction_probability_threshold_macos"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setPrediction_probability_threshold_macos:]( self,  "setPrediction_probability_threshold_macos:",  [v16 unsignedIntegerValue]);
            id v49 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 584;
            v87 = 2048;
            id v88 = -[RecommendationPreferences prediction_probability_threshold_macos]( self,  "prediction_probability_threshold_macos");
            id v21 = "%{public}s::%d:prediction_probability_threshold_macos Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_cca_bin_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_cca_bin_threshold:]( self,  "setReset_cca_bin_threshold:",  [v16 unsignedIntegerValue]);
            v50 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 589;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_cca_bin_threshold](self, "reset_cca_bin_threshold");
            id v21 = "%{public}s::%d:reset_cca_bin_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_score_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_score_threshold:]( self,  "setReset_score_threshold:",  [v16 unsignedIntegerValue]);
            v51 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 594;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_score_threshold](self, "reset_score_threshold");
            id v21 = "%{public}s::%d:reset_score_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"dps_symptoms_average_cca_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setDps_symptoms_average_cca_threshold:]( self,  "setDps_symptoms_average_cca_threshold:",  [v16 unsignedIntegerValue]);
            v52 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 599;
            v87 = 2048;
            id v88 = -[RecommendationPreferences dps_symptoms_average_cca_threshold]( self,  "dps_symptoms_average_cca_threshold");
            id v21 = "%{public}s::%d:dps_symptoms_average_cca_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_pd_rssi_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_pd_rssi_threshold:]( self,  "setReset_pd_rssi_threshold:",  [v16 integerValue]);
            v53 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 604;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_pd_rssi_threshold](self, "reset_pd_rssi_threshold");
            id v21 = "%{public}s::%d:reset_pd_rssi_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_pd_cca_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_pd_cca_threshold:]( self,  "setReset_pd_cca_threshold:",  [v16 unsignedIntegerValue]);
            v54 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 609;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_pd_cca_threshold](self, "reset_pd_cca_threshold");
            id v21 = "%{public}s::%d:reset_pd_cca_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"minutes_between_symptoms_dps_wd_screen_on"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setMinutes_between_symptoms_dps_wd_screen_on:]( self,  "setMinutes_between_symptoms_dps_wd_screen_on:",  [v16 unsignedIntegerValue]);
            v55 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 614;
            v87 = 2048;
            id v88 = -[RecommendationPreferences minutes_between_symptoms_dps_wd_screen_on]( self,  "minutes_between_symptoms_dps_wd_screen_on");
            id v21 = "%{public}s::%d:minutes_between_symptoms_dps_wd_screen_on Preference is %ld";
          }

          else if ([v10 isEqualToString:@"minutes_between_symptoms_dps_wd_screen_off"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setMinutes_between_symptoms_dps_wd_screen_off:]( self,  "setMinutes_between_symptoms_dps_wd_screen_off:",  [v16 unsignedIntegerValue]);
            v56 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 619;
            v87 = 2048;
            id v88 = -[RecommendationPreferences minutes_between_symptoms_dps_wd_screen_off]( self,  "minutes_between_symptoms_dps_wd_screen_off");
            id v21 = "%{public}s::%d:minutes_between_symptoms_dps_wd_screen_off Preference is %ld";
          }

          else if ([v10 isEqualToString:@"minutes_between_peer_diagnostics_trigger_for_dns_stall"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setMinutes_between_peer_diagnostics_trigger_for_dns_stall:]( self,  "setMinutes_between_peer_diagnostics_trigger_for_dns_stall:",  [v16 unsignedIntegerValue]);
            v57 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 624;
            v87 = 2048;
            id v88 = -[RecommendationPreferences minutes_between_peer_diagnostics_trigger_for_dns_stall]( self,  "minutes_between_peer_diagnostics_trigger_for_dns_stall");
            id v21 = "%{public}s::%d:minutes_between_peer_diagnostics_trigger_for_dns_stall Preference is %ld";
          }

          else if ([v10 isEqualToString:@"minutes_between_peer_diagnostics_trigger_for_other_issues"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setMinutes_between_peer_diagnostics_trigger_for_other_issues:]( self,  "setMinutes_between_peer_diagnostics_trigger_for_other_issues:",  [v16 unsignedIntegerValue]);
            v58 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 629;
            v87 = 2048;
            id v88 = -[RecommendationPreferences minutes_between_peer_diagnostics_trigger_for_other_issues]( self,  "minutes_between_peer_diagnostics_trigger_for_other_issues");
            id v21 = "%{public}s::%d:minutes_between_peer_diagnostics_trigger_for_other_issues Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_legacy_chipset_cca_bin_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_legacy_chipset_cca_bin_threshold:]( self,  "setReset_legacy_chipset_cca_bin_threshold:",  [v16 unsignedIntegerValue]);
            v59 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 634;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_legacy_chipset_cca_bin_threshold]( self,  "reset_legacy_chipset_cca_bin_threshold");
            id v21 = "%{public}s::%d:reset_legacy_chipset_cca_bin_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_rssi_bin_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_rssi_bin_threshold:]( self,  "setReset_rssi_bin_threshold:",  [v16 unsignedIntegerValue]);
            v60 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 639;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_rssi_bin_threshold](self, "reset_rssi_bin_threshold");
            id v21 = "%{public}s::%d:reset_rssi_bin_threshold Preference is %ld";
          }

          else if ([v10 isEqualToString:@"reset_awdl_activity_threshold"])
          {
            if (!v16) {
              goto LABEL_202;
            }
            -[RecommendationPreferences setReset_awdl_activity_threshold:]( self,  "setReset_awdl_activity_threshold:",  [v16 unsignedIntegerValue]);
            v61 = WALogCategoryDefaultHandle();
            v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_201;
            }
            *(_DWORD *)buf = 136446722;
            id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
            v85 = 1024;
            id v86 = 644;
            v87 = 2048;
            id v88 = -[RecommendationPreferences reset_awdl_activity_threshold](self, "reset_awdl_activity_threshold");
            id v21 = "%{public}s::%d:reset_awdl_activity_threshold Preference is %ld";
          }

          else
          {
            if ([v10 isEqualToString:@"disable_slow_wifi_wd"])
            {
              if (v16)
              {
                -[RecommendationPreferences setDisable_slow_wifi_wd:]( self,  "setDisable_slow_wifi_wd:",  [v16 BOOLValue]);
                v62 = WALogCategoryDefaultHandle();
                v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  v63 = -[RecommendationPreferences disable_slow_wifi_wd](self, "disable_slow_wifi_wd");
                  v64 = "NO";
                  id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                  *(_DWORD *)buf = 136446722;
                  if (v63) {
                    v64 = "YES";
                  }
                  v85 = 1024;
                  id v86 = 649;
                  v87 = 2080;
                  id v88 = (int64_t)v64;
                  id v21 = "%{public}s::%d:disable_slow_wifi_wd Preference is %s";
                  goto LABEL_200;
                }

                goto LABEL_201;
              }

              goto LABEL_202;
            }

            if ([v10 isEqualToString:@"minutes_between_slow_wifi_wd"])
            {
              if (!v16) {
                goto LABEL_202;
              }
              -[RecommendationPreferences setMinutes_between_slow_wifi_wd:]( self,  "setMinutes_between_slow_wifi_wd:",  [v16 unsignedIntegerValue]);
              v65 = WALogCategoryDefaultHandle();
              v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_201;
              }
              *(_DWORD *)buf = 136446722;
              id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
              v85 = 1024;
              id v86 = 654;
              v87 = 2048;
              id v88 = -[RecommendationPreferences minutes_between_slow_wifi_wd](self, "minutes_between_slow_wifi_wd");
              id v21 = "%{public}s::%d:minutes_between_slow_wifi_wd Preference is %ld";
            }

            else if ([v10 isEqualToString:@"slow_wifi_interrogation_sample_count"])
            {
              if (!v16) {
                goto LABEL_202;
              }
              -[RecommendationPreferences setSlow_wifi_interrogation_sample_count:]( self,  "setSlow_wifi_interrogation_sample_count:",  [v16 unsignedIntegerValue]);
              v66 = WALogCategoryDefaultHandle();
              v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_201;
              }
              *(_DWORD *)buf = 136446722;
              id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
              v85 = 1024;
              id v86 = 659;
              v87 = 2048;
              id v88 = -[RecommendationPreferences slow_wifi_interrogation_sample_count]( self,  "slow_wifi_interrogation_sample_count");
              id v21 = "%{public}s::%d:slow_wifi_interrogation_sample_count Preference is %ld";
            }

            else if ([v10 isEqualToString:@"slow_wifi_duration_between_samples"])
            {
              if (!v16) {
                goto LABEL_202;
              }
              -[RecommendationPreferences setSlow_wifi_duration_between_samples:]( self,  "setSlow_wifi_duration_between_samples:",  [v16 unsignedIntegerValue]);
              v67 = WALogCategoryDefaultHandle();
              v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_201;
              }
              *(_DWORD *)buf = 136446722;
              id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
              v85 = 1024;
              id v86 = 664;
              v87 = 2048;
              id v88 = -[RecommendationPreferences slow_wifi_duration_between_samples]( self,  "slow_wifi_duration_between_samples");
              id v21 = "%{public}s::%d:slow_wifi_duration_between_samples Preference is %ld";
            }

            else if ([v10 isEqualToString:@"slow_wifi_report_sent_after"])
            {
              if (!v16) {
                goto LABEL_202;
              }
              -[RecommendationPreferences setSlow_wifi_report_sent_after:]( self,  "setSlow_wifi_report_sent_after:",  [v16 unsignedIntegerValue]);
              v68 = WALogCategoryDefaultHandle();
              v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_201;
              }
              *(_DWORD *)buf = 136446722;
              id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
              v85 = 1024;
              id v86 = 669;
              v87 = 2048;
              id v88 = -[RecommendationPreferences slow_wifi_report_sent_after](self, "slow_wifi_report_sent_after");
              id v21 = "%{public}s::%d:slow_wifi_report_sent_after Preference is %ld";
            }

            else
            {
              if ([v10 isEqualToString:@"disable_slow_wifi_dps_is_priority_network"])
              {
                if (v16)
                {
                  -[RecommendationPreferences setDisable_slow_wifi_dps_is_priority_network:]( self,  "setDisable_slow_wifi_dps_is_priority_network:",  [v16 BOOLValue]);
                  v69 = WALogCategoryDefaultHandle();
                  v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
                  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                  {
                    v70 = -[RecommendationPreferences disable_slow_wifi_dps_is_priority_network]( self,  "disable_slow_wifi_dps_is_priority_network");
                    v71 = "NO";
                    id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                    *(_DWORD *)buf = 136446722;
                    if (v70) {
                      v71 = "YES";
                    }
                    v85 = 1024;
                    id v86 = 674;
                    v87 = 2080;
                    id v88 = (int64_t)v71;
                    id v21 = "%{public}s::%d:disable_slow_wifi_dps_is_priority_network Preference is %s";
                    goto LABEL_200;
                  }

                  goto LABEL_201;
                }

                goto LABEL_202;
              }

              if ([v10 isEqualToString:@"ior_rescan_budget_less_than_previous_max_channels_seconds"])
              {
                if (!v16) {
                  goto LABEL_202;
                }
                -[RecommendationPreferences setIor_rescan_budget_less_than_previous_max_channels_seconds:]( self,  "setIor_rescan_budget_less_than_previous_max_channels_seconds:",  [v16 unsignedIntegerValue]);
                v72 = WALogCategoryDefaultHandle();
                v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
                if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_201;
                }
                *(_DWORD *)buf = 136446722;
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                v85 = 1024;
                id v86 = 679;
                v87 = 2048;
                id v88 = -[RecommendationPreferences ior_rescan_budget_less_than_previous_max_channels_seconds]( self,  "ior_rescan_budget_less_than_previous_max_channels_seconds");
                id v21 = "%{public}s::%d:ior_rescan_budget_less_than_previous_max_channels_seconds Preference is %ld";
              }

              else if ([v10 isEqualToString:@"ior_rescan_budget_exploratory_seconds"])
              {
                if (!v16) {
                  goto LABEL_202;
                }
                -[RecommendationPreferences setIor_rescan_budget_exploratory_seconds:]( self,  "setIor_rescan_budget_exploratory_seconds:",  [v16 unsignedIntegerValue]);
                v73 = WALogCategoryDefaultHandle();
                v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
                if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_201;
                }
                *(_DWORD *)buf = 136446722;
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                v85 = 1024;
                id v86 = 684;
                v87 = 2048;
                id v88 = -[RecommendationPreferences ior_rescan_budget_exploratory_seconds]( self,  "ior_rescan_budget_exploratory_seconds");
                id v21 = "%{public}s::%d:ior_rescan_budget_exploratory_seconds Preference is %ld";
              }

              else if ([v10 isEqualToString:@"ior_rescan_new_phy_delay_seconds"])
              {
                if (!v16) {
                  goto LABEL_202;
                }
                -[RecommendationPreferences setIor_rescan_new_phy_delay_seconds:]( self,  "setIor_rescan_new_phy_delay_seconds:",  [v16 unsignedIntegerValue]);
                v74 = WALogCategoryDefaultHandle();
                v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
                if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_201;
                }
                *(_DWORD *)buf = 136446722;
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                v85 = 1024;
                id v86 = 689;
                v87 = 2048;
                id v88 = -[RecommendationPreferences ior_rescan_new_phy_delay_seconds]( self,  "ior_rescan_new_phy_delay_seconds");
                id v21 = "%{public}s::%d:ior_rescan_new_phy_delay_seconds Preference is %ld";
              }

              else if ([v10 isEqualToString:@"ior_persist_delay_seconds"])
              {
                if (!v16) {
                  goto LABEL_202;
                }
                -[RecommendationPreferences setIor_persist_delay_seconds:]( self,  "setIor_persist_delay_seconds:",  [v16 unsignedIntegerValue]);
                v75 = WALogCategoryDefaultHandle();
                v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
                if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_201;
                }
                *(_DWORD *)buf = 136446722;
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                v85 = 1024;
                id v86 = 694;
                v87 = 2048;
                id v88 = -[RecommendationPreferences ior_persist_delay_seconds](self, "ior_persist_delay_seconds");
                id v21 = "%{public}s::%d:ior_persist_delay_seconds Preference is %ld";
              }

              else
              {
                if (![v10 isEqualToString:@"work_report_seconds"])
                {
                  if ([v10 isEqualToString:@"work_report_logs_enabled"])
                  {
                    if (v16)
                    {
                      -[RecommendationPreferences setWork_report_logs_enabled:]( self,  "setWork_report_logs_enabled:",  [v16 BOOLValue]);
                      v77 = WALogCategoryDefaultHandle();
                      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
                      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                      {
                        v78 = -[RecommendationPreferences work_report_logs_enabled](self, "work_report_logs_enabled");
                        v79 = "NO";
                        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                        *(_DWORD *)buf = 136446722;
                        if (v78) {
                          v79 = "YES";
                        }
                        v85 = 1024;
                        id v86 = 704;
                        v87 = 2080;
                        id v88 = (int64_t)v79;
                        id v21 = "%{public}s::%d:work_report_logs_enabled Preference is %s";
                        goto LABEL_200;
                      }

                      goto LABEL_201;
                    }
                  }

                  else
                  {
                    v80 = WALogCategoryDefaultHandle();
                    v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
                    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446978;
                      id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                      v85 = 1024;
                      id v86 = 707;
                      v87 = 2112;
                      id v88 = (int64_t)v12;
                      id v89 = 2112;
                      id v90 = v10;
                      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Received an unexpected wifianalyticsd preference change: %@ for %@",  buf,  0x26u);
                    }

                    v82.receiver = self;
                    v82.super_class = (Class)&OBJC_CLASS___RecommendationPreferences;
                    -[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]( &v82,  "observeValueForKeyPath:ofObject:change:context:",  v10,  v11,  v12,  a6);
                  }

                  goto LABEL_202;
                }

                if (!v16) {
                  goto LABEL_202;
                }
                -[RecommendationPreferences setWork_report_seconds:]( self,  "setWork_report_seconds:",  [v16 unsignedIntegerValue]);
                v76 = WALogCategoryDefaultHandle();
                v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
                if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_201;
                }
                *(_DWORD *)buf = 136446722;
                id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
                v85 = 1024;
                id v86 = 699;
                v87 = 2048;
                id v88 = -[RecommendationPreferences work_report_seconds](self, "work_report_seconds");
                id v21 = "%{public}s::%d:work_report_seconds Preference is %ld";
              }
            }
          }
        }
      }

void sub_100009634( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28, id location, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id a38)
{
}

void sub_10000971C(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v126 = a1;
  objc_initWeak(&location, a2);
  id v131 = a4;
  id v125 = a5;
  id v136 = a6;
  id v141 = a7;
  id v130 = objc_loadWeakRetained(&location);
  __int128 v149 = 0u;
  __int128 v150 = 0u;
  __int128 v147 = 0u;
  __int128 v148 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue([v126 fieldForKey:@"NWA_interfaceStats"]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 repeatableValues]);

  id v15 = [v14 countByEnumeratingWithState:&v147 objects:v161 count:16];
  if (!v15)
  {

    v142 = 0LL;
LABEL_13:
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v130 getNewMessageForKey:@"NWAIS" groupType:a3 forProcessWithToken:v131]);

    id v25 = (void *)objc_claimAutoreleasedReturnValue([v126 fieldForKey:@"NWA_interfaceStats"]);
    [v25 addRepeatableSubMessageValue:v24];

    if ([v141 hasSuffix:v141])
    {
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v24 fieldForKey:@"NWAIS_role"]);
      [v26 setStringValue:v141];
    }

    v142 = v24;
    goto LABEL_16;
  }

  v142 = 0LL;
  char v16 = 0;
  uint64_t v17 = *(void *)v148;
  do
  {
    for (i = 0LL; i != v15; i = (char *)i + 1)
    {
      if (*(void *)v148 != v17) {
        objc_enumerationMutation(v14);
      }
      id v19 = *(void **)(*((void *)&v147 + 1) + 8LL * (void)i);
      v20 = (void *)objc_claimAutoreleasedReturnValue([v19 fieldForKey:@"NWAIS_role"]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 stringValue]);
      unsigned int v22 = [v21 isEqualToString:v141];

      if (v22)
      {
        id v23 = v19;

        char v16 = 1;
        v142 = v23;
      }
    }

    id v15 = [v14 countByEnumeratingWithState:&v147 objects:v161 count:16];
  }

  while (v15);

  if ((v16 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_16:
  v27 = (void *)objc_claimAutoreleasedReturnValue([v142 fieldForKey:@"NWAIS_role"]);
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 stringValue]);
  unsigned int v29 = [v28 isEqualToString:v141];

  id v30 = &AnalyticsSendEventLazy_ptr;
  if (v29)
  {
    id v31 = v142;
    id v132 = v131;
    id v137 = v141;
    id v134 = v125;
    id v32 = v136;
    v127 = v31;
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v31 fieldForKey:@"NWAIS_assoc"]);
    id obj = (id)objc_claimAutoreleasedReturnValue([v33 subMessageValue]);

    id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Interface %@",  v137));
    id v35 = sub_10002575C(v32);
    id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    __int128 v158 = 0u;
    __int128 v159 = 0u;
    __int128 v156 = 0u;
    __int128 v157 = 0u;
    __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v36]);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 allKeys]);

    id v39 = [v38 countByEnumeratingWithState:&v156 objects:v176 count:16];
    if (v39)
    {
      uint64_t v40 = *(void *)v157;
LABEL_19:
      uint64_t v41 = 0LL;
      while (1)
      {
        if (*(void *)v157 != v40) {
          objc_enumerationMutation(v38);
        }
        unsigned __int8 v42 = *(void **)(*((void *)&v156 + 1) + 8 * v41);
        if (v39 == (id)++v41)
        {
          id v39 = [v38 countByEnumeratingWithState:&v156 objects:v176 count:16];
          if (v39) {
            goto LABEL_19;
          }
          goto LABEL_25;
        }
      }

      id v47 = v42;

      if (!v47) {
        goto LABEL_26;
      }
      __int128 v154 = 0u;
      __int128 v155 = 0u;
      __int128 v152 = 0u;
      __int128 v153 = 0u;
      v48 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v36]);
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKeyedSubscript:v47]);
      v50 = (void *)objc_claimAutoreleasedReturnValue([v49 allKeys]);

      id v51 = [v50 countByEnumeratingWithState:&v152 objects:buf count:16];
      if (!v51)
      {
LABEL_38:

        id v30 = &AnalyticsSendEventLazy_ptr;
LABEL_39:
        id v55 = WALogCategoryDefaultHandle();
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v36]);
          v57 = (void *)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:v47]);
          v58 = (void *)objc_claimAutoreleasedReturnValue([v57 allKeys]);
          *(_DWORD *)v162 = 136446722;
          v163 = "void populateNWActivityInterfaceAssocStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPop"
                 "ulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
                 "ng, NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong)";
          __int16 v164 = 1024;
          int v165 = 856;
          __int16 v166 = 2112;
          v167 = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup, we have %@",  v162,  0x1Cu);
        }

        goto LABEL_41;
      }

      uint64_t v52 = *(void *)v153;
LABEL_32:
      uint64_t v53 = 0LL;
      while (1)
      {
        if (*(void *)v153 != v52) {
          objc_enumerationMutation(v50);
        }
        v54 = *(void **)(*((void *)&v152 + 1) + 8 * v53);
        if (v51 == (id)++v53)
        {
          id v51 = [v50 countByEnumeratingWithState:&v152 objects:buf count:16];
          if (v51) {
            goto LABEL_32;
          }
          goto LABEL_38;
        }
      }

      id v61 = v54;

      id v30 = &AnalyticsSendEventLazy_ptr;
      if (!v61) {
        goto LABEL_39;
      }
      sub_10002595C(v32, obj, @"NWAA_authSuccess", v36, v47, v61, @"Auth Success");
      sub_10002595C(v32, obj, @"NWAA_authFailed", v36, v47, v61, @"Auth Failed");
      sub_10002595C(v32, obj, @"NWAA_assocSuccess", v36, v47, v61, @"Assoc Success");
      sub_10002595C(v32, obj, @"NWAA_assocFailed", v36, v47, v61, @"Assoc Failed");
      sub_10002595C(v32, obj, @"NWAA_reassocSuccess", v36, v47, v61, @"Reassoc Success");
      sub_10002595C(v32, obj, @"NWAA_reassocFailed", v36, v47, v61, @"Reassoc Failed");
      sub_10002595C(v32, obj, @"NWAA_linkChanged", v36, v47, v61, @"Link Changed");
      sub_10002595C(v32, obj, @"NWAA_roamSuccess", v36, v47, v61, @"Roam Success");
      sub_10002595C(v32, obj, @"NWAA_roamFailed", v36, v47, v61, @"Roam Failed");
      sub_10002595C(v32, obj, @"NWAA_assocDoneSuccess", v36, v47, v61, @"Assoc Done Success");
      sub_10002595C(v32, obj, @"NWAA_assocDoneFailed", v36, v47, v61, @"Assoc Done Failed");
      sub_10002595C(v32, obj, @"NWAA_assocReady", v36, v47, v61, @"Assoc Ready");
      sub_10002595C(v32, obj, @"NWAA_ssidChanged", v36, v47, v61, @"SSID Changed");
      sub_10002595C(v32, obj, @"NWAA_bssidChanged", v36, v47, v61, @"BSSID Changed");
      sub_10002595C(v32, obj, @"NWAA_deauthReceived", v36, v47, v61, @"Deauth Received");
      sub_10002595C(v32, obj, @"NWAA_disassocReceived", v36, v47, v61, @"Dissasoc Received");
      sub_10002595C(v32, obj, @"NWAA_decryptError", v36, v47, v61, @"Decrypt Error");
      sub_10002595C(v32, obj, @"NWAA_pruned", v36, v47, v61, @"Pruned");
      sub_10002595C(v32, obj, @"NWAA_supplicant", v36, v47, v61, @"Supplicant");
      sub_10002595C(v32, obj, @"NWAA_macAddrChanged", v36, v47, v61, @"MAC Addr Changed");
      sub_10002595C(v32, obj, @"NWAA_rssiChanged", v36, v47, v61, @"RSSI Changed");
      sub_10002595C(v32, obj, @"NWAA_homeChanQualChanged", v36, v47, v61, @"Home Channel Qual Changed");
      sub_10002595C(v32, obj, @"NWAA_chanSwitchEvent", v36, v47, v61, @"Channel Switch Event");
      sub_10002595C(v32, obj, @"NWAA_roamPrep", v36, v47, v61, @"Roam Prep");
      sub_10002595C(v32, obj, @"NWAA_roamScanStart", v36, v47, v61, @"Roam Scan Start");
      sub_10002595C(v32, obj, @"NWAA_roamScanEnd", v36, v47, v61, @"Roam Scan End");
      sub_10002595C(v32, obj, @"NWAA_scanResults", v36, v47, v61, @"Scan Results");
      sub_10002595C(v32, obj, @"NWAA_scanSummary", v36, v47, v61, @"Scan Summary");
      sub_10002595C(v32, obj, @"NWAA_scanDone", v36, v47, v61, @"Scan Done");
      sub_10002595C(v32, obj, @"NWAA_scanInternalDone", v36, v47, v61, @"Scan Internal Done");
      sub_10002595C(v32, obj, @"NWAA_bssDisallowEvent", v36, v47, v61, @"BSS Disallow Event");
      sub_10002595C(v32, obj, @"NWAA_slowWiFiSymptom", v36, v47, v61, @"Slow WiFi Symptom");
      sub_10002595C(v32, obj, @"NWAA_dpsSymptom", v36, v47, v61, @"DPS Symptom");
      sub_10002595C(v32, obj, @"NWAA_crashTracerTrig", v36, v47, v61, @"Crash Tracer Triggered");
      sub_10002595C(v32, obj, @"NWAA_rc1Stats", v36, v47, v61, @"RC1 Stats");
      sub_10002595C(v32, obj, @"NWAA_rc2Stats", v36, v47, v61, @"RC2 Stats");
      sub_10002595C(v32, obj, @"NWAA_escoTrafficInd", v36, v47, v61, @"ESCO Traffic Indication");
    }

    else
    {
LABEL_25:

LABEL_26:
      id v43 = WALogCategoryDefaultHandle();
      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        BOOL v45 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v36]);
        v46 = (void *)objc_claimAutoreleasedReturnValue([v45 allKeys]);
        *(_DWORD *)buf = 136446978;
        v169 = "void populateNWActivityInterfaceAssocStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
               "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, "
               "NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong)";
        __int16 v170 = 1024;
        int v171 = 847;
        __int16 v172 = 2112;
        v173 = v34;
        __int16 v174 = 2112;
        v175 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group %@, we have %@",  buf,  0x26u);
      }

      id v47 = 0LL;
LABEL_41:

      id v59 = WALogCategoryDefaultHandle();
      v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v162 = 136446466;
        v163 = "void populateNWActivityInterfaceAssocStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
               "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, "
               "NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong)";
        __int16 v164 = 1024;
        int v165 = 904;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v162, 0x12u);
      }

      id v61 = 0LL;
    }
  }

  v62 = (void *)objc_claimAutoreleasedReturnValue([v30[115] stringWithFormat:@"Interface %@", v141]);
  id v63 = sub_10002575C(v136);
  v135 = (void *)objc_claimAutoreleasedReturnValue(v63);
  id v64 = v62;
  v128 = (void *)objc_claimAutoreleasedReturnValue([v30[115] stringWithFormat:@"Interface %@ Chip", v141]);
  v133 = v64;
  if (v64)
  {
    v65 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v66 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKeyedSubscript:v133]);
    v67 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:@"Manager Config"]);

    if (v67)
    {
      sub_10002595C(v136, v142, @"NWAIS_enabled", v135, v133, @"Manager Config", @"Enabled");
      sub_100025B1C( v136,  v142,  v130,  a3,  v131,  @"NWAIS_enableStates",  v135,  v133,  @"Manager Config",  @"Enabled State");
    }

    else
    {
      id v68 = WALogCategoryDefaultHandle();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v178 = 1024;
        int v179 = 966;
        _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Infra hasn't been enabled yet, rescan needed, continuing",  v176,  0x12u);
      }
    }

    v70 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v71 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:v133]);
    v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:@"Data Bytes"]);

    if (v72)
    {
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  0,  @"NWAIS_bytes",  v135,  v133,  @"Data Bytes",  @"Rx Bytes");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  3u,  @"NWAIS_bytes",  v135,  v133,  @"Data Bytes",  @"BE Tx Bytes");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  2u,  @"NWAIS_bytes",  v135,  v133,  @"Data Bytes",  @"BK Tx Bytes");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  5u,  @"NWAIS_bytes",  v135,  v133,  @"Data Bytes",  @"VI Tx Bytes");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  4u,  @"NWAIS_bytes",  v135,  v133,  @"Data Bytes",  @"VO Tx Bytes");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  1u,  @"NWAIS_bytes",  v135,  v133,  @"Data Bytes",  @"Tx Bytes");
    }

    else
    {
      id v73 = WALogCategoryDefaultHandle();
      v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v178 = 1024;
        int v179 = 980;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Infra Missing Data Bytes subgroup, continuing",  v176,  0x12u);
      }
    }

    v75 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v76 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:v133]);
    v77 = (void *)objc_claimAutoreleasedReturnValue([v76 objectForKeyedSubscript:@"Data Packets"]);

    if (v77)
    {
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  0,  @"NWAIS_packets",  v135,  v133,  @"Data Packets",  @"Rx Packets");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  3u,  @"NWAIS_packets",  v135,  v133,  @"Data Packets",  @"BE Tx Packets");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  2u,  @"NWAIS_packets",  v135,  v133,  @"Data Packets",  @"BK Tx Packets");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  5u,  @"NWAIS_packets",  v135,  v133,  @"Data Packets",  @"VI Tx Packets");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  4u,  @"NWAIS_packets",  v135,  v133,  @"Data Packets",  @"VO Tx Packets");
      sub_100025FC8( v136,  v142,  v130,  a3,  v131,  1u,  @"NWAIS_packets",  v135,  v133,  @"Data Packets",  @"Tx Packets");
    }

    else
    {
      id v78 = WALogCategoryDefaultHandle();
      v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v178 = 1024;
        int v179 = 994;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Infra Missing Data Packets subgroup, continuing",  v176,  0x12u);
      }
    }

    v80 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:v128]);

    if (v81)
    {
      id v82 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
      v83 = (void *)objc_claimAutoreleasedReturnValue([v82 objectForKeyedSubscript:v128]);
      id v84 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKeyedSubscript:@"Rx Data Frame Counters"]);

      if (v84)
      {
        sub_100026348( v136,  v142,  v130,  a3,  v131,  6LL,  @"NWAIS_packets",  v135,  v128,  @"Rx Data Frame Counters",  @"SU MPDU Data");
        sub_100026348( v136,  v142,  v130,  a3,  v131,  8LL,  @"NWAIS_packets",  v135,  v128,  @"Rx Data Frame Counters",  @"OFDMA MPDU Data");
        sub_100026348( v136,  v142,  v130,  a3,  v131,  10LL,  @"NWAIS_packets",  v135,  v128,  @"Rx Data Frame Counters",  @"MU MIMO MPDU Data");
      }

      v85 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
      id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKeyedSubscript:v128]);
      v87 = (void *)objc_claimAutoreleasedReturnValue([v86 objectForKeyedSubscript:@"Rx Data Byte Counters"]);

      if (v87)
      {
        sub_100026348( v136,  v142,  v130,  a3,  v131,  6LL,  @"NWAIS_bytes",  v135,  v128,  @"Rx Data Byte Counters",  @"SU MPDU Bytes");
        sub_100026348( v136,  v142,  v130,  a3,  v131,  8LL,  @"NWAIS_bytes",  v135,  v128,  @"Rx Data Byte Counters",  @"OFDMA MPDU Bytes");
        sub_100026348( v136,  v142,  v130,  a3,  v131,  10LL,  @"NWAIS_bytes",  v135,  v128,  @"Rx Data Byte Counters",  @"MU MIMO MPDU Bytes");
      }

      id v88 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
      id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForKeyedSubscript:v128]);
      id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:@"Tx Data Frame Counters"]);

      if (v90)
      {
        sub_100026348( v136,  v142,  v130,  a3,  v131,  7LL,  @"NWAIS_packets",  v135,  v128,  @"Tx Data Frame Counters",  @"SU MPDU Data");
        sub_100026348( v136,  v142,  v130,  a3,  v131,  9LL,  @"NWAIS_packets",  v135,  v128,  @"Tx Data Frame Counters",  @"OFDMA MPDU Data");
      }

      id v91 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
      v92 = (void *)objc_claimAutoreleasedReturnValue([v91 objectForKeyedSubscript:v128]);
      v93 = (void *)objc_claimAutoreleasedReturnValue([v92 objectForKeyedSubscript:@"Tx Data Byte Counters"]);

      if (v93)
      {
        sub_100026348( v136,  v142,  v130,  a3,  v131,  7LL,  @"NWAIS_bytes",  v135,  v128,  @"Tx Data Byte Counters",  @"SU MPDU Bytes");
        sub_100026348( v136,  v142,  v130,  a3,  v131,  9LL,  @"NWAIS_bytes",  v135,  v128,  @"Tx Data Byte Counters",  @"OFDMA MPDU Bytes");
      }
    }

    else
    {
      id v94 = WALogCategoryDefaultHandle();
      v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v178 = 1024;
        int v179 = 1021;
        _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Infra Missing Interface en0 Chip group, continuing",  v176,  0x12u);
      }
    }

    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v97 = (void *)objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:v133]);
    v98 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKeyedSubscript:@"Phy Mode"]);

    if (v98) {
      sub_100025B1C( v136,  v142,  v130,  a3,  v131,  @"NWAIS_phymodes",  v135,  v133,  @"Phy Mode",  @"PhyMode State");
    }
    id v99 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v100 = (void *)objc_claimAutoreleasedReturnValue([v99 objectForKeyedSubscript:v133]);
    v101 = (void *)objc_claimAutoreleasedReturnValue([v100 objectForKeyedSubscript:@"NSS"]);

    if (v101) {
      sub_100025B1C(v136, v142, v130, a3, v131, @"NWAIS_nss", v135, v133, @"NSS", @"NSS State");
    }
    unsigned __int8 v102 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 objectForKeyedSubscript:v133]);
    v104 = (void *)objc_claimAutoreleasedReturnValue([v103 objectForKeyedSubscript:@"Data Path Stuck"]);

    if (v104)
    {
      sub_10002595C( v136,  v142,  @"NWAIS_consecutivedps",  v135,  v133,  @"Data Path Stuck",  @"Consecutive DPS Detected");
      sub_10002595C(v136, v142, @"NWAIS_dps", v135, v133, @"Data Path Stuck", @"DPS Detected");
    }

    __int128 v145 = 0u;
    __int128 v146 = 0u;
    __int128 v143 = 0u;
    __int128 v144 = 0u;
    v105 = (void *)objc_claimAutoreleasedReturnValue([v142 fieldForKey:@"NWAIS_peers"]);
    id obja = (id)objc_claimAutoreleasedReturnValue([v105 repeatableValues]);

    id v106 = [obja countByEnumeratingWithState:&v143 objects:v160 count:16];
    if (v106)
    {
      v107 = 0LL;
      char v138 = 0;
      uint64_t v108 = *(void *)v144;
      do
      {
        for (j = 0LL; j != v106; j = (char *)j + 1)
        {
          if (*(void *)v144 != v108) {
            objc_enumerationMutation(obja);
          }
          v110 = *(void **)(*((void *)&v143 + 1) + 8LL * (void)j);
          v111 = (void *)objc_claimAutoreleasedReturnValue([v110 fieldForKey:@"NWAPS_hashID"]);
          v112 = (void *)objc_claimAutoreleasedReturnValue([v111 stringValue]);
          unsigned int v113 = [v112 isEqualToString:@"00:00:00:00:00:00"];

          if (v113)
          {
            id v114 = v110;

            char v138 = 1;
            v107 = v114;
          }
        }

        id v106 = [obja countByEnumeratingWithState:&v143 objects:v160 count:16];
      }

      while (v106);

      if ((v138 & 1) != 0) {
        goto LABEL_94;
      }
    }

    else
    {

      v107 = 0LL;
    }

    v115 = (void *)objc_claimAutoreleasedReturnValue([v130 getNewMessageForKey:@"NWAPS" groupType:a3 forProcessWithToken:v131]);

    v116 = (void *)objc_claimAutoreleasedReturnValue([v142 fieldForKey:@"NWAIS_peers"]);
    [v116 addRepeatableSubMessageValue:v115];

    v117 = (void *)objc_claimAutoreleasedReturnValue([v115 fieldForKey:@"NWAPS_hashID"]);
    [v117 setStringValue:@"00:00:00:00:00:00"];

    v107 = v115;
LABEL_94:
    sub_100011574(v142, v107, v130, a3, v131, v125, v136, v141, a8);
    goto LABEL_95;
  }

  id v118 = WALogCategoryDefaultHandle();
  v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
  if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
  {
    v120 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v135]);
    v121 = (void *)objc_claimAutoreleasedReturnValue([v120 allKeys]);
    *(_DWORD *)v176 = 136446978;
    v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
           "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDiction"
           "ary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    __int16 v178 = 1024;
    int v179 = 960;
    __int16 v180 = 2112;
    uint64_t v181 = 0LL;
    __int16 v182 = 2112;
    v183 = v121;
    _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group %@, we have %@",  v176,  0x26u);
  }

  id v122 = WALogCategoryDefaultHandle();
  v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
  if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v176 = 136446466;
    v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
           "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDiction"
           "ary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    __int16 v178 = 1024;
    int v179 = 1059;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v176, 0x12u);
  }

  v107 = 0LL;
LABEL_95:

  objc_destroyWeak(&location);
}

void sub_10000B100( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, id location)
{
}

void sub_10000B154(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v11 = a1;
  objc_initWeak(&location, a2);
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id val = objc_loadWeakRetained(&location);
  id v15 = v11;
  id v16 = v12;
  id v17 = v13;
  id v18 = v14;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v15 fieldForKey:@"NWACS_scanActivity"]);
  v20 = (void *)objc_claimAutoreleasedReturnValue([v19 subMessageValue]);

  id v21 = sub_10002575C(v18);
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v22]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"WLAN Power"]);
  BOOL v25 = v24 == 0LL;

  if (v25)
  {
    id v333 = WALogCategoryDefaultHandle();
    id v334 = (os_log_s *)objc_claimAutoreleasedReturnValue(v333);
    if (os_log_type_enabled(v334, OS_LOG_TYPE_ERROR))
    {
      id v335 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v22]);
      id v336 = (__CFString *)objc_claimAutoreleasedReturnValue([v335 allKeys]);
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityScanActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
             "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
             "onary * _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1442;
      __int16 v452 = 2112;
      v453 = v336;
      _os_log_impl( (void *)&_mh_execute_header,  v334,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  v448,  0x1Cu);
    }
  }

  else
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v22]);
    v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:@"WLAN Power"]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:@"Phy Scan"]);
    BOOL v29 = v28 == 0LL;

    if (!v29)
    {
      sub_10002595C( v18,  v20,  @"NWASA_userCount",  v22,  @"WLAN Power",  @"Phy Scan",  @"User Scan Count");
      sub_10002595C( v18,  v20,  @"NWASA_userDur",  v22,  @"WLAN Power",  @"Phy Scan",  @"User Scan Dur");
      sub_10002595C( v18,  v20,  @"NWASA_roamCount",  v22,  @"WLAN Power",  @"Phy Scan",  @"Roam Scan Count");
      sub_10002595C( v18,  v20,  @"NWASA_roamDur",  v22,  @"WLAN Power",  @"Phy Scan",  @"Roam Scan Dur");
      sub_10002595C( v18,  v20,  @"NWASA_assocCount",  v22,  @"WLAN Power",  @"Phy Scan",  @"Assoc Scan Count");
      sub_10002595C( v18,  v20,  @"NWASA_assocDur",  v22,  @"WLAN Power",  @"Phy Scan",  @"Assoc Scan Dur");
      sub_10002595C( v18,  v20,  @"NWASA_pnoBSSIDCount",  v22,  @"WLAN Power",  @"Phy Scan",  @"PNO BSSID Scan Count");
      sub_10002595C( v18,  v20,  @"NWASA_pnoBSSIDDur",  v22,  @"WLAN Power",  @"Phy Scan",  @"PNO BSSID Scan Dur");
      sub_10002595C( v18,  v20,  @"NWASA_pnoSSIDCount",  v22,  @"WLAN Power",  @"Phy Scan",  @"PNO SSID  Scan Count");
      sub_10002595C( v18,  v20,  @"NWASA_pnoSSIDDur",  v22,  @"WLAN Power",  @"Phy Scan",  @"PNO SSID  Scan Dur");
      sub_10002595C( v18,  v20,  @"NWASA_otherCount",  v22,  @"WLAN Power",  @"Phy Scan",  @"Other Scan Count");
      sub_10002595C( v18,  v20,  @"NWASA_otherDur",  v22,  @"WLAN Power",  @"Phy Scan",  @"Other Scan Dur");
      goto LABEL_4;
    }

    id v346 = WALogCategoryDefaultHandle();
    id v334 = (os_log_s *)objc_claimAutoreleasedReturnValue(v346);
    if (os_log_type_enabled(v334, OS_LOG_TYPE_ERROR))
    {
      id v347 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v22]);
      id v348 = (void *)objc_claimAutoreleasedReturnValue([v347 objectForKeyedSubscript:@"WLAN Power"]);
      v349 = (__CFString *)objc_claimAutoreleasedReturnValue([v348 allKeys]);
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityScanActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
             "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
             "onary * _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1444;
      __int16 v452 = 2112;
      v453 = v349;
      _os_log_impl( (void *)&_mh_execute_header,  v334,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup, we have %@",  v448,  0x1Cu);
    }
  }

  id v350 = WALogCategoryDefaultHandle();
  id v351 = (os_log_s *)objc_claimAutoreleasedReturnValue(v350);
  if (os_log_type_enabled(v351, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v448 = 136446466;
    v449 = "void populateNWActivityScanActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessage"
           "Delegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong)";
    __int16 v450 = 1024;
    int v451 = 1463;
    _os_log_impl((void *)&_mh_execute_header, v351, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
  }

LABEL_4:
  id v30 = v15;
  id v31 = v16;
  id v32 = v17;
  id v33 = v18;
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v30 fieldForKey:@"NWACS_powerActivity"]);
  id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 subMessageValue]);

  id v36 = sub_10002575C(v33);
  __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v37]);
  id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 objectForKeyedSubscript:@"WLAN Power"]);
  BOOL v40 = v39 == 0LL;

  if (v40)
  {
    id v337 = WALogCategoryDefaultHandle();
    id v338 = (os_log_s *)objc_claimAutoreleasedReturnValue(v337);
    if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
    {
      id v339 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v37]);
      v340 = (__CFString *)objc_claimAutoreleasedReturnValue([v339 allKeys]);
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityPowerActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
             "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDict"
             "ionary * _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1482;
      __int16 v452 = 2112;
      v453 = v340;
      _os_log_impl( (void *)&_mh_execute_header,  v338,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  v448,  0x1Cu);
    }
  }

  else
  {
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v37]);
    unsigned __int8 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 objectForKeyedSubscript:@"WLAN Power"]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKeyedSubscript:@"Phy Activity"]);
    BOOL v44 = v43 == 0LL;

    if (!v44)
    {
      sub_1000292E0( v33,  v35,  @"NWAPPS_kRadioPhyReportTxDur",  v37,  @"WLAN Power",  @"Phy Activity",  @"Radio Tx Dur");
      sub_1000292E0( v33,  v35,  @"NWAPPS_kRadioPhyReportRxDur",  v37,  @"WLAN Power",  @"Phy Activity",  @"Radio Rx Dur");
      goto LABEL_7;
    }

    id v352 = WALogCategoryDefaultHandle();
    id v338 = (os_log_s *)objc_claimAutoreleasedReturnValue(v352);
    if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
    {
      v425 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v37]);
      v353 = (void *)objc_claimAutoreleasedReturnValue([v425 objectForKeyedSubscript:@"WLAN Power"]);
      v354 = (__CFString *)objc_claimAutoreleasedReturnValue([v353 allKeys]);
      *(_DWORD *)v448 = 136446978;
      v449 = "void populateNWActivityPowerActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
             "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDict"
             "ionary * _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1484;
      __int16 v452 = 2112;
      v453 = @"Phy Activity";
      __int16 v454 = 2112;
      v455 = v354;
      _os_log_impl( (void *)&_mh_execute_header,  v338,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  v448,  0x26u);
    }
  }

  id v355 = WALogCategoryDefaultHandle();
  __int128 v356 = (os_log_s *)objc_claimAutoreleasedReturnValue(v355);
  if (os_log_type_enabled(v356, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v448 = 136446466;
    v449 = "void populateNWActivityPowerActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessag"
           "eDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictiona"
           "ry * _Nonnull __strong)";
    __int16 v450 = 1024;
    int v451 = 1492;
    _os_log_impl((void *)&_mh_execute_header, v356, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
  }

LABEL_7:
  id v417 = v30;
  objc_initWeak(v431, val);
  id v45 = v31;
  id v410 = v32;
  id v46 = v33;
  id v47 = (void *)objc_claimAutoreleasedReturnValue([v417 fieldForKey:@"NWACS_impedingFunctions"]);
  v48 = (void *)objc_claimAutoreleasedReturnValue([v47 subMessageValue]);

  id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 fieldForKey:@"NWAIF_sdbtdm"]);
  v50 = (void *)objc_claimAutoreleasedReturnValue([v49 subMessageValue]);

  id WeakRetained = objc_loadWeakRetained(v431);
  id v52 = sub_10002575C(v46);
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
  v54 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v53]);
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"TVPM Slice 0"]);
  BOOL v56 = v55 == 0LL;

  if (!v56)
  {
    sub_10002595C( v46,  v48,  @"NWAIF_txduty0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"Tx Duty Cycle (%)");
    sub_10002595C( v46,  v48,  @"NWAIF_txpowerbackoff0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"Tx Power Backoff (1/4dBm)");
    sub_10002595C( v46,  v48,  @"NWAIF_activechains0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"Active Chains");
    sub_10002595C( v46,  v48,  @"NWAIF_temp0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"Temperature (C)");
    sub_10002595C( v46,  v48,  @"NWAIF_voltage0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"Battery Voltage (10xV)");
    sub_10002595C( v46,  v48,  @"NWAIF_ppm0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"PPM");
    sub_10002595C( v46,  v48,  @"NWAIF_ctlmid0",  v53,  @"TVPM Slice 0",  @"Temperature Voltage Power Management",  @"CTLM Index");
    sub_100025B1C( v46,  v48,  WeakRetained,  a3,  v45,  @"NWAIF_cTLMIndexs",  v53,  @"TVPM Slice 0",  @"CTLM Index",  @"CTLM Index");
    sub_100025B1C( v46,  v48,  WeakRetained,  a3,  v45,  @"NWAIF_txPowerBackoffDBs",  v53,  @"TVPM Slice 0",  @"Tx Power Backoff",  @"Tx Power Backoff");
    sub_100025B1C( v46,  v48,  WeakRetained,  a3,  v45,  @"NWAIF_txDutyCyclePcts",  v53,  @"TVPM Slice 0",  @"Tx Duty Cycle",  @"Tx Duty Cycle");
  }

  v57 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v53]);
  v58 = (void *)objc_claimAutoreleasedReturnValue([v57 objectForKeyedSubscript:@"TVPM Slice 1"]);
  BOOL v59 = v58 == 0LL;

  if (!v59)
  {
    sub_10002595C( v46,  v48,  @"NWAIF_txduty1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"Tx Duty Cycle (%)");
    sub_10002595C( v46,  v48,  @"NWAIF_txpowerbackoff1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"Tx Power Backoff (1/4dBm)");
    sub_10002595C( v46,  v48,  @"NWAIF_activechains1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"Active Chains");
    sub_10002595C( v46,  v48,  @"NWAIF_temp1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"Temperature (C)");
    sub_10002595C( v46,  v48,  @"NWAIF_voltage1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"Battery Voltage (10xV)");
    sub_10002595C( v46,  v48,  @"NWAIF_ppm1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"PPM");
    sub_10002595C( v46,  v48,  @"NWAIF_ctlmid1",  v53,  @"TVPM Slice 1",  @"Temperature Voltage Power Management",  @"CTLM Index");
    sub_100025B1C( v46,  v48,  WeakRetained,  a3,  v45,  @"NWAIF_cTLMIndex1s",  v53,  @"TVPM Slice 1",  @"CTLM Index",  @"CTLM Index");
    sub_100025B1C( v46,  v48,  WeakRetained,  a3,  v45,  @"NWAIF_txPowerBackoffDB1s",  v53,  @"TVPM Slice 1",  @"Tx Power Backoff",  @"Tx Power Backoff");
    sub_100025B1C( v46,  v48,  WeakRetained,  a3,  v45,  @"NWAIF_txDutyCyclePct1s",  v53,  @"TVPM Slice 1",  @"Tx Duty Cycle",  @"Tx Duty Cycle");
  }

  v60 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v53]);
  id v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:@"TDM Slice 0"]);
  BOOL v62 = v61 == 0LL;

  if (!v62)
  {
    id v63 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"TDM_sliceStats"]);
    id v64 = (void *)objc_claimAutoreleasedReturnValue([v63 repeatableValues]);
    BOOL v65 = v64 == 0LL;

    if (v65)
    {
      v66 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained getNewMessageForKey:@"TDMS" groupType:a3 forProcessWithToken:v45]);
      v67 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"TDM_sliceStats"]);
      [v67 addRepeatableSubMessageValue:v66];

      id v68 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"TDM_sliceStats"]);
      id v69 = [v66 copy];
      [v68 addRepeatableSubMessageValue:v69];
    }

    v70 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"TDM_sliceStats"]);
    v71 = (void *)objc_claimAutoreleasedReturnValue([v70 repeatableValues]);
    v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectAtIndex:0]);

    if (!v72)
    {
      id v363 = WALogCategoryDefaultHandle();
      v364 = (os_log_s *)objc_claimAutoreleasedReturnValue(v363);
      if (!os_log_type_enabled(v364, OS_LOG_TYPE_ERROR)) {
        goto LABEL_238;
      }
      *(_DWORD *)v448 = 136446466;
      v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulator"
             "MessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NS"
             "Dictionary * _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1559;
      v365 = "%{public}s::%d:Bad sliceSpecificMessage";
      goto LABEL_237;
    }

    sub_1000292E0( v46,  v72,  @"TDMS_txDeferDuration",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA Defer Duration");
    sub_1000292E0( v46,  v72,  @"TDMS_txaDuration",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA On Duration");
    sub_1000292E0( v46,  v72,  @"TDMS_txPriDuration",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA Priority Duration");
    sub_10002595C( v46,  v72,  @"TDMS_txaONCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA Set On");
    sub_10002595C( v46,  v72,  @"TDMS_txaTimeoutCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA Timeout Count");
    sub_10002595C( v46,  v72,  @"TDMS_txaPORCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"Path Off Requests");
    sub_10002595C( v46,  v72,  @"TDMS_txPathEnableReqCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"Path Unmute Requests");
    sub_10002595C( v46,  v72,  @"TDMS_txPathMuteCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"Path Mute Requests");
    sub_10002595C( v46,  v72,  @"TDMS_txMuteCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"Active Tx Muted");
    sub_10002595C( v46,  v72,  @"TDMS_ackTxPowerBackoffCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"Active Tx Power Backedoff");
    sub_10002595C( v46,  v72,  @"TDMS_txPriorityCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA Priority Taken");
    sub_10002595C( v46,  v72,  @"TDMS_txDeferredCount",  v53,  @"TDM Slice 0",  @"TDM Counters",  @"TXA Defer Count");
  }

  id v73 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v53]);
  v74 = (void *)objc_claimAutoreleasedReturnValue([v73 objectForKeyedSubscript:@"TDM Slice 1"]);
  BOOL v75 = v74 == 0LL;

  if (!v75)
  {
    v76 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"TDM_sliceStats"]);
    v77 = (void *)objc_claimAutoreleasedReturnValue([v76 repeatableValues]);
    BOOL v78 = v77 == 0LL;

    if (!v78)
    {
      v79 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"TDM_sliceStats"]);
      v80 = (void *)objc_claimAutoreleasedReturnValue([v79 repeatableValues]);
      v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectAtIndex:1]);

      if (v81)
      {
        sub_1000292E0( v46,  v81,  @"TDMS_txDeferDuration",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA Defer Duration");
        sub_1000292E0( v46,  v81,  @"TDMS_txaDuration",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA On Duration");
        sub_1000292E0( v46,  v81,  @"TDMS_txPriDuration",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA Priority Duration");
        sub_10002595C( v46,  v81,  @"TDMS_txaONCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA Set On");
        sub_10002595C( v46,  v81,  @"TDMS_txaTimeoutCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA Timeout Count");
        sub_10002595C( v46,  v81,  @"TDMS_txaPORCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"Path Off Requests");
        sub_10002595C( v46,  v81,  @"TDMS_txPathEnableReqCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"Path Unmute Requests");
        sub_10002595C( v46,  v81,  @"TDMS_txPathMuteCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"Path Mute Requests");
        sub_10002595C( v46,  v81,  @"TDMS_txMuteCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"Active Tx Muted");
        sub_10002595C( v46,  v81,  @"TDMS_ackTxPowerBackoffCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"Active Tx Power Backedoff");
        sub_10002595C( v46,  v81,  @"TDMS_txPriorityCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA Priority Taken");
        sub_10002595C( v46,  v81,  @"TDMS_txDeferredCount",  v53,  @"TDM Slice 1",  @"TDM Counters",  @"TXA Defer Count");

        goto LABEL_20;
      }

      id v367 = WALogCategoryDefaultHandle();
      v364 = (os_log_s *)objc_claimAutoreleasedReturnValue(v367);
      if (os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v448 = 136446466;
        v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
               "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong"
               ", NSDictionary * _Nonnull __strong)";
        __int16 v450 = 1024;
        int v451 = 1582;
        v365 = "%{public}s::%d:Bad sliceSpecificMessage";
        goto LABEL_237;
      }

LABEL_238:
      id v368 = WALogCategoryDefaultHandle();
      __int16 v369 = (os_log_s *)objc_claimAutoreleasedReturnValue(v368);
      if (os_log_type_enabled(v369, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v448 = 136446466;
        v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
               "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong"
               ", NSDictionary * _Nonnull __strong)";
        __int16 v450 = 1024;
        int v451 = 1623;
        _os_log_impl((void *)&_mh_execute_header, v369, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
      }

      goto LABEL_24;
    }

    id v366 = WALogCategoryDefaultHandle();
    v364 = (os_log_s *)objc_claimAutoreleasedReturnValue(v366);
    if (!os_log_type_enabled(v364, OS_LOG_TYPE_ERROR)) {
      goto LABEL_238;
    }
    *(_DWORD *)v448 = 136446466;
    v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMe"
           "ssageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDict"
           "ionary * _Nonnull __strong)";
    __int16 v450 = 1024;
    int v451 = 1579;
    v365 = "%{public}s::%d:TDM_sliceStats should exist when looking at slice 1";
LABEL_237:
    _os_log_impl((void *)&_mh_execute_header, v364, OS_LOG_TYPE_ERROR, v365, v448, 0x12u);
    goto LABEL_238;
  }

LABEL_20:
  id v82 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v53]);
  v83 = (void *)objc_claimAutoreleasedReturnValue([v82 objectForKeyedSubscript:@"RC1 Coex"]);
  BOOL v84 = v83 == 0LL;

  if (!v84)
  {
    sub_10002595C(v46, v48, @"NWAIF_rc1Request", v53, @"RC1 Coex", @"Counters", @"RC1 Request");
    sub_10002595C( v46,  v48,  @"NWAIF_rc1Duration",  v53,  @"RC1 Coex",  @"Counters",  @"RC1 Duration");
    sub_10002595C(v46, v48, @"NWAIF_rc1wlanCrit", v53, @"RC1 Coex", @"Counters", @"WLAN Crit");
    sub_10002595C( v46,  v48,  @"NWAIF_rc1wlanCritDuration",  v53,  @"RC1 Coex",  @"Counters",  @"WLAN Crit Duration");
  }

  v85 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v53]);
  id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKeyedSubscript:@"RC2 Coex"]);
  BOOL v87 = v86 == 0LL;

  if (!v87)
  {
    sub_10002595C(v46, v48, @"NWAIF_rc2Request", v53, @"RC1 Coex", @"Counters", @"RC2 Request");
    sub_10002595C( v46,  v48,  @"NWAIF_rc2Duration",  v53,  @"RC1 Coex",  @"Counters",  @"RC2 Duration");
    sub_10002595C( v46,  v48,  @"NWAIF_rc2LongGrant",  v53,  @"RC1 Coex",  @"Counters",  @"Grant Delay Larger than 4.5ms");
    sub_10002595C(v46, v48, @"NWAIF_rc2Grant", v53, @"RC1 Coex", @"Counters", @"Grant");
    sub_10002595C( v46,  v48,  @"NWAIF_rc2cts2a",  v53,  @"RC1 Coex",  @"Counters",  @"Successfully TXed CTS2A");
  }

  id v39 = WALogCategoryDefaultHandle();
  BOOL v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = (const __CFString *)v80[5];
    *(_DWORD *)buf = 136446722;
    id v88 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]";
    id v89 = 1024;
    id v90 = 4992;
    id v91 = 2112;
    id v92 = v41;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr will return %@",  buf,  0x1Cu);
  }

  v49[2](v49, v74[5], v80[5]);
  _Block_object_dispose(&v67, 8);

  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v79, 8);
}

  __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(-[WAMessageAWDSubmitter submissionDelegate](self, "submissionDelegate"));
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
  [v37 messsageWasSubmittedWithUUID:v38];

  id v39 = WALogCategoryDefaultHandle();
  BOOL v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_signpost_enabled(v40))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "WANWActivityMessageSubmitter submitMessage",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  return v17;
}

LABEL_24:
  objc_destroyWeak(v431);
  sub_100027878(v417, v45, v410, v46, a7);
  id v88 = v417;
  id v400 = v45;
  id v405 = v410;
  id v89 = v46;
  v394 = v88;
  id v90 = (void *)objc_claimAutoreleasedReturnValue([v88 fieldForKey:@"NWACS_btCoex"]);
  v411 = (void *)objc_claimAutoreleasedReturnValue([v90 subMessageValue]);

  id v91 = (void *)objc_claimAutoreleasedReturnValue([v411 fieldForKey:@"NWABC_btrequestReason"]);
  v418 = (void *)objc_claimAutoreleasedReturnValue([v91 subMessageValue]);

  id v92 = sub_10002575C(v89);
  v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
  id v94 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v93]);
  v95 = (void *)objc_claimAutoreleasedReturnValue([v94 objectForKeyedSubscript:@"BT Coex"]);
  BOOL v96 = v95 == 0LL;

  if (v96)
  {
    id v341 = WALogCategoryDefaultHandle();
    v342 = (os_log_s *)objc_claimAutoreleasedReturnValue(v341);
    if (os_log_type_enabled(v342, OS_LOG_TYPE_ERROR))
    {
      id v343 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v93]);
      id v344 = (__CFString *)objc_claimAutoreleasedReturnValue([v343 allKeys]);
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityBTCoex(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessageDele"
             "gate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary "
             "* _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1825;
      __int16 v452 = 2112;
      v453 = v344;
      _os_log_impl( (void *)&_mh_execute_header,  v342,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  v448,  0x1Cu);
    }

    id v345 = WALogCategoryDefaultHandle();
    v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v345);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v448 = 136446466;
      v449 = "void populateNWActivityBTCoex(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessageDele"
             "gate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary "
             "* _Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1867;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
    }
  }

  else
  {
    sub_10002595C( v89,  v411,  @"NWABC_request",  v93,  @"BT Coex",  @"Counters",  @"Antenna Requests");
    sub_10002595C(v89, v411, @"NWABC_grant", v93, @"BT Coex", @"Counters", @"Antenna Grants");
    sub_10002595C(v89, v411, @"NWABC_btabort", v93, @"BT Coex", @"Counters", @"WLAN Preempted");
    sub_10002595C( v89,  v411,  @"NWABC_psnullretrycount",  v93,  @"BT Coex",  @"Counters",  @"PSNULL exceeded");
    sub_10002595C( v89,  v411,  @"NWABC_ucodehighlatency",  v93,  @"BT Coex",  @"Counters",  @"High UCode Latency");
    v97 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v93]);
    v98 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKeyedSubscript:@"BT Coex"]);
    id v99 = (void *)objc_claimAutoreleasedReturnValue([v98 objectForKeyedSubscript:@"Extra Counters"]);

    if (v99)
    {
      sub_10002595C( v89,  v411,  @"NWABC_pm",  v93,  @"BT Coex",  @"Extra Counters",  @"PM Protection Success");
      sub_10002595C( v89,  v411,  @"NWABC_wlantxpreempt",  v93,  @"BT Coex",  @"Extra Counters",  @"WLAN Tx Preemption");
      sub_10002595C( v89,  v411,  @"NWABC_wlanrxpreempt",  v93,  @"BT Coex",  @"Extra Counters",  @"WLAN Rx Preemption");
      sub_10002595C( v89,  v411,  @"NWABC_aptxafterpm",  v93,  @"BT Coex",  @"Extra Counters",  @"AP Tx after PM Protection");
      sub_10002595C( v89,  v411,  @"NWABC_audiogrant",  v93,  @"BT Coex",  @"Extra Counters",  @"Periodic Audio Grant Count");
      sub_10002595C( v89,  v411,  @"NWABC_audiodeny",  v93,  @"BT Coex",  @"Extra Counters",  @"Periodic Audio Deny Count");
      sub_10002595C( v89,  v411,  @"NWABC_a2dpgrant",  v93,  @"BT Coex",  @"Extra Counters",  @"A2DP Grant Count");
      sub_10002595C( v89,  v411,  @"NWABC_a2dpdeny",  v93,  @"BT Coex",  @"Extra Counters",  @"A2DP Deny Count");
      sub_10002595C( v89,  v411,  @"NWABC_sniffgrant",  v93,  @"BT Coex",  @"Extra Counters",  @"Sniff Grant Count");
      sub_10002595C( v89,  v411,  @"NWABC_sniffdeny",  v93,  @"BT Coex",  @"Extra Counters",  @"Sniff Deny Count");
    }

    sub_10002595C(v89, v418, @"NWABCRR_acl", v93, @"BT Coex", @"Antenna Request Reason", @"ACL");
    sub_10002595C(v89, v418, @"NWABCRR_sco", v93, @"BT Coex", @"Antenna Request Reason", @"SCO");
    sub_10002595C( v89,  v418,  @"NWABCRR_esco",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"eSCO");
    sub_10002595C( v89,  v418,  @"NWABCRR_a2dp",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"A2DP");
    sub_10002595C( v89,  v418,  @"NWABCRR_sniff",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"Sniff");
    sub_10002595C( v89,  v418,  @"NWABCRR_pagescan",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"Page Scan");
    sub_10002595C( v89,  v418,  @"NWABCRR_inquiryscan",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"Inquity Scan");
    sub_10002595C( v89,  v418,  @"NWABCRR_page",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"Page");
    sub_10002595C( v89,  v418,  @"NWABCRR_inquiry",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"Inquiry");
    sub_10002595C(v89, v418, @"NWABCRR_mss", v93, @"BT Coex", @"Antenna Request Reason", @"MSS");
    sub_10002595C( v89,  v418,  @"NWABCRR_park",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"PARK");
    sub_10002595C( v89,  v418,  @"NWABCRR_blescan",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"BLE Scan");
    sub_10002595C(v89, v418, @"NWABCRR_ble", v93, @"BT Coex", @"Antenna Request Reason", @"BLE");
    sub_10002595C( v89,  v418,  @"NWABCRR_other",  v93,  @"BT Coex",  @"Antenna Request Reason",  @"Other");
    v100 = v411;
    v387 = v93;
    v101 = sub_100026554( v89,  v387,  @"BT Coex",  @"Antenna Ownership",  @"Antenna Ownership while on 2GHz");
    unsigned __int8 v102 = v101;
    if (v101)
    {
      int Count = IOReportStateGetCount(v101);
      if (Count >= 1)
      {
        uint64_t v104 = 0LL;
        do
        {
          uint64_t NameForIndex = IOReportStateGetNameForIndex(v102, v104);
          id v106 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
          if ([v106 containsString:@"BT"])
          {
            uint64_t Residency = IOReportStateGetResidency(v102, v104);
            uint64_t Unit = IOReportChannelGetUnit(v102);
            double v109 = IOReportScaleValue(Residency, Unit, 0x100007C00000000LL);
            v110 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s fieldForKey:](v100, "fieldForKey:", @"NWABC_duration"));
            [v110 setUint32Value:v109];
          }

          uint64_t v104 = (v104 + 1);
        }

        while (Count != (_DWORD)v104);
      }
    }

    else
    {
      id v361 = WALogCategoryDefaultHandle();
      int v362 = (os_log_s *)objc_claimAutoreleasedReturnValue(v361);
      if (os_log_type_enabled(v362, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v448 = 136447490;
        v449 = "_Bool fillUInt32FieldFromState(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSStr"
               "ing * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull "
               "__strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
        __int16 v450 = 1024;
        int v451 = 346;
        __int16 v452 = 2112;
        v453 = v387;
        __int16 v454 = 2112;
        v455 = @"BT Coex";
        __int16 v456 = 2112;
        v457 = @"Antenna Ownership";
        __int16 v458 = 2112;
        v459 = @"Antenna Ownership while on 2GHz";
        _os_log_impl( (void *)&_mh_execute_header,  v362,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  v448,  0x3Au);
      }
    }
  }

  id v111 = v394;
  id v373 = v400;
  id v374 = v405;
  id v419 = v89;
  v372 = v111;
  v112 = (void *)objc_claimAutoreleasedReturnValue([v111 fieldForKey:@"NWACS_phyrate"]);
  v377 = (void *)objc_claimAutoreleasedReturnValue([v112 subMessageValue]);

  id v113 = sub_10002575C(v419);
  v412 = (void *)objc_claimAutoreleasedReturnValue(v113);
  context = objc_autoreleasePoolPush();
  __int128 v433 = 0u;
  __int128 v434 = 0u;
  *(_OWORD *)v431 = 0u;
  __int128 v432 = 0u;
  id v114 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
  id obj = (id)objc_claimAutoreleasedReturnValue([v114 allKeys]);

  id v115 = [obj countByEnumeratingWithState:v431 objects:v448 count:16];
  if (v115)
  {
    uint64_t v395 = *(void *)v432;
LABEL_36:
    uint64_t v116 = 0LL;
    while (1)
    {
      if (*(void *)v432 != v395) {
        objc_enumerationMutation(obj);
      }
      v117 = (void *)*((void *)v431[1] + v116);
      id v118 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
      v119 = (void *)objc_claimAutoreleasedReturnValue([v118 objectForKeyedSubscript:v117]);
      v120 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:@"Tx MCS Success"]);
      if (v120
        || (id v405 = (id)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]),
            id v400 = (id)objc_claimAutoreleasedReturnValue([v405 objectForKeyedSubscript:v117]),
            (id v114 = (void *)objc_claimAutoreleasedReturnValue([v400 objectForKeyedSubscript:@"Tx VHT Success"])) != 0))
      {
        int v121 = 0;
      }

      else
      {
        v381 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
        v382 = (void *)objc_claimAutoreleasedReturnValue([v381 objectForKeyedSubscript:v117]);
        v387 = (__CFString *)objc_claimAutoreleasedReturnValue([v382 objectForKeyedSubscript:@"Tx HE Success"]);
        if (!v387)
        {

          id v114 = 0LL;
          v387 = 0LL;
          char v123 = 0;
LABEL_51:

          if ((v123 & 1) != 0)
          {
LABEL_55:
            id v124 = v117;
            goto LABEL_56;
          }

          goto LABEL_52;
        }

        id v114 = 0LL;
        int v121 = 1;
      }

      unsigned __int8 v122 = [v117 containsString:@"awdl"];
      char v123 = v122 ^ 1;
      if (v121)
      {

        if (!v120) {
          goto LABEL_51;
        }
      }

      else if (!v120)
      {
        goto LABEL_51;
      }

      if ((v122 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_52:
      if (v115 == (id)++v116)
      {
        id v115 = [obj countByEnumeratingWithState:v431 objects:v448 count:16];
        if (v115) {
          goto LABEL_36;
        }
        break;
      }
    }
  }

  id v124 = 0LL;
LABEL_56:

  id v125 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
  id v126 = (void *)objc_claimAutoreleasedReturnValue([v125 objectForKeyedSubscript:v124]);

  if (v126)
  {
    v127 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    v128 = (void *)objc_claimAutoreleasedReturnValue([v127 objectForKeyedSubscript:v124]);
    v129 = (void *)objc_claimAutoreleasedReturnValue([v128 objectForKeyedSubscript:@"Tx MPDU in AMPDU Usage"]);

    if (v129) {
      sub_100029640( v419,  v377,  @"NWARAA_ampduAGGs",  v412,  v124,  @"Tx MPDU in AMPDU Usage",  @"Tx MPDU in AMPDU Usage",  64LL,  1u);
    }
    id v130 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    id v131 = (void *)objc_claimAutoreleasedReturnValue([v130 objectForKeyedSubscript:v124]);
    id v132 = (void *)objc_claimAutoreleasedReturnValue([v131 objectForKeyedSubscript:@"Rx MCS Success"]);

    if (v132) {
      sub_100029640( v419,  v377,  @"NWARAA_rxMCSSuccess",  v412,  v124,  @"Rx MCS Success",  @"Rx MCS Success",  33LL,  0);
    }
    v133 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    id v134 = (void *)objc_claimAutoreleasedReturnValue([v133 objectForKeyedSubscript:v124]);
    v135 = (void *)objc_claimAutoreleasedReturnValue([v134 objectForKeyedSubscript:@"Tx MCS Success"]);

    if (v135) {
      sub_100029640( v419,  v377,  @"NWARAA_txMCSSuccess",  v412,  v124,  @"Tx MCS Success",  @"Tx MCS Success",  33LL,  0);
    }
    id v136 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    id v137 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v124]);
    char v138 = (void *)objc_claimAutoreleasedReturnValue([v137 objectForKeyedSubscript:@"Rx VHT Success"]);

    if (v138) {
      sub_100029640( v419,  v377,  @"NWARAA_rxVHTSuccess",  v412,  v124,  @"Rx VHT Success",  @"Rx VHT Success",  33LL,  0);
    }
    id v139 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    id v140 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v124]);
    id v141 = (void *)objc_claimAutoreleasedReturnValue([v140 objectForKeyedSubscript:@"Tx VHT Success"]);

    if (v141) {
      sub_100029640( v419,  v377,  @"NWARAA_txVHTSuccess",  v412,  v124,  @"Tx VHT Success",  @"Tx VHT Success",  33LL,  0);
    }
    v142 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v142 objectForKeyedSubscript:v124]);
    __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v143 objectForKeyedSubscript:@"Rx HE Success"]);

    if (v144) {
      sub_100029640( v419,  v377,  @"NWARAA_rxHESuccess",  v412,  v124,  @"Rx HE Success",  @"Rx HE Success",  33LL,  0);
    }
    __int128 v145 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int128 v146 = (void *)objc_claimAutoreleasedReturnValue([v145 objectForKeyedSubscript:v124]);
    __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v146 objectForKeyedSubscript:@"Tx HE Success"]);

    if (v147) {
      sub_100029640( v419,  v377,  @"NWARAA_txHESuccess",  v412,  v124,  @"Tx HE Success",  @"Tx HE Success",  33LL,  0);
    }
    __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int128 v149 = (void *)objc_claimAutoreleasedReturnValue([v148 objectForKeyedSubscript:v124]);
    __int128 v150 = (void *)objc_claimAutoreleasedReturnValue([v149 objectForKeyedSubscript:@"Rx MPDU in SU AMPDU Usage"]);

    if (v150) {
      sub_100029640( v419,  v377,  @"NWARAA_rxampduSUs",  v412,  v124,  @"Rx MPDU in SU AMPDU Usage",  @"Rx MPDU in SU AMPDU Usage",  64LL,  1u);
    }
    v151 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int128 v152 = (void *)objc_claimAutoreleasedReturnValue([v151 objectForKeyedSubscript:v124]);
    __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v152 objectForKeyedSubscript:@"Tx MPDU in SU AMPDU Usage"]);

    if (v153) {
      sub_100029640( v419,  v377,  @"NWARAA_txampduSUs",  v412,  v124,  @"Tx MPDU in SU AMPDU Usage",  @"Tx MPDU in SU AMPDU Usage",  64LL,  1u);
    }
    __int128 v154 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int128 v155 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v124]);
    __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([v155 objectForKeyedSubscript:@"Rx MPDU in OFDMA AMPDU Usage"]);

    if (v156) {
      sub_100029640( v419,  v377,  @"NWARAA_rxampduOFDMAs",  v412,  v124,  @"Rx MPDU in OFDMA AMPDU Usage",  @"Rx MPDU in OFDMA AMPDU Usage",  64LL,  1u);
    }
    __int128 v157 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int128 v158 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKeyedSubscript:v124]);
    __int128 v159 = (void *)objc_claimAutoreleasedReturnValue([v158 objectForKeyedSubscript:@"Tx MPDU in OFDMA AMPDU Usage"]);

    if (v159) {
      sub_100029640( v419,  v377,  @"NWARAA_txampduOFDMAs",  v412,  v124,  @"Tx MPDU in OFDMA AMPDU Usage",  @"Tx MPDU in OFDMA AMPDU Usage",  64LL,  1u);
    }
    v160 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    v161 = (void *)objc_claimAutoreleasedReturnValue([v160 objectForKeyedSubscript:v124]);
    v162 = (void *)objc_claimAutoreleasedReturnValue([v161 objectForKeyedSubscript:@"Rx MPDU in MU-MIMO AMPDU Usage"]);

    if (v162) {
      sub_100029640( v419,  v377,  @"NWARAA_rxampduMUMIMOs",  v412,  v124,  @"Rx MPDU in MU-MIMO AMPDU Usage",  @"Rx MPDU in MU-MIMO AMPDU Usage",  64LL,  1u);
    }
    v163 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
    __int16 v164 = (void *)objc_claimAutoreleasedReturnValue([v163 objectForKeyedSubscript:v124]);
    int v165 = (void *)objc_claimAutoreleasedReturnValue([v164 objectForKeyedSubscript:@"Tx MPDU in MU-MIMO AMPDU Usage"]);

    if (v165) {
      sub_100029640( v419,  v377,  @"NWARAA_txampduMUMIMOs",  v412,  v124,  @"Tx MPDU in MU-MIMO AMPDU Usage",  @"Tx MPDU in MU-MIMO AMPDU Usage",  64LL,  1u);
    }
  }

  else
  {
    id v357 = WALogCategoryDefaultHandle();
    id v358 = (os_log_s *)objc_claimAutoreleasedReturnValue(v357);
    if (os_log_type_enabled(v358, OS_LOG_TYPE_ERROR))
    {
      v359 = (void *)objc_claimAutoreleasedReturnValue([v419 objectForKeyedSubscript:v412]);
      v360 = (void *)objc_claimAutoreleasedReturnValue([v359 allKeys]);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "void populateNWActivityRateAndAgg(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPo"
                           "pulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * "
                           "_Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v437 = 1024;
      int v438 = 1983;
      __int16 v439 = 2112;
      v440 = @"Tx MCS Success";
      __int16 v441 = 2112;
      v442 = @"Tx VHT Success";
      __int16 v443 = 2112;
      v444 = @"Tx HE Success";
      __int16 v445 = 2112;
      v446 = v360;
      _os_log_impl( (void *)&_mh_execute_header,  v358,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group that contains subgroup %@ or %@ or %@, we have %@",  buf,  0x3Au);
    }
  }

  objc_autoreleasePoolPop(context);
  if (!v126)
  {
    id v166 = WALogCategoryDefaultHandle();
    v167 = (os_log_s *)objc_claimAutoreleasedReturnValue(v166);
    if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "void populateNWActivityRateAndAgg(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPo"
                           "pulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * "
                           "_Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v437 = 1024;
      int v438 = 2041;
      _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

    if (!*a7)
    {
      id v447 = NSLocalizedFailureReasonErrorKey;
      *(void *)buf = @"WAErrorCodeHEVHTMCSMissing";
      v168 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  &v447,  1LL));
      *a7 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9026LL,  v168));
    }
  }

  id v413 = v372;
  objc_initWeak(&v447, val);
  id v396 = v373;
  id v383 = v374;
  id v406 = v419;
  id v388 = objc_loadWeakRetained(&v447);
  id v169 = sub_10002575C(v406);
  v401 = (void *)objc_claimAutoreleasedReturnValue(v169);
  __int16 v170 = 0LL;
  uint64_t v171 = 0LL;
  char v172 = 1;
  while (1)
  {
    char v420 = v172;
    __int128 v433 = 0u;
    __int128 v434 = 0u;
    *(_OWORD *)v431 = 0u;
    __int128 v432 = 0u;
    v173 = (void *)objc_claimAutoreleasedReturnValue([v406 objectForKeyedSubscript:v401]);
    __int16 v174 = (void *)objc_claimAutoreleasedReturnValue([v173 allKeys]);

    v175 = (char *)[v174 countByEnumeratingWithState:v431 objects:v448 count:16];
    if (v175)
    {
      uint64_t v176 = *(void *)v432;
      while (2)
      {
        for (i = 0LL; i != v175; ++i)
        {
          if (*(void *)v432 != v176) {
            objc_enumerationMutation(v174);
          }
          __int16 v178 = (void *)*((void *)v431[1] + (void)i);
          int v179 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%lu", v171);
          if ([v178 containsString:@"Tx MPDU WME Slice "]
            && ([v178 containsString:v179] & 1) != 0)
          {
            id v180 = v178;

            __int16 v170 = v180;
            goto LABEL_100;
          }
        }

        v175 = (char *)[v174 countByEnumeratingWithState:v431 objects:v448 count:16];
        if (v175) {
          continue;
        }
        break;
      }
    }

                [v154 setObject:v38 forKeyedSubscript:v31];
                id v35 = 1;
              }

              id v34 = [v33 countByEnumeratingWithState:&v160 objects:v178 count:16];
            }

            while (v34);

            if ((v35 & 1) != 0) {
              goto LABEL_40;
            }
          }

          else
          {
          }

          id v47 = (void *)objc_claimAutoreleasedReturnValue( [v142 getNewMessageForKey:@"NWAPACTC" groupType:a4 forProcessWithToken:v144]);
          v48 = [v47 copy];
          [v154 setObject:v48 forKeyedSubscript:v31];

          if ([v31 containsString:@"DataPath BE"])
          {
            id v49 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v31]);
            v50 = (void *)objc_claimAutoreleasedReturnValue([v49 fieldForKey:@"NWAPACTC_ac"]);
            [v50 setInt32Value:3];
            goto LABEL_38;
          }

          if ([v31 containsString:@"DataPath BK"])
          {
            id v49 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v31]);
            v50 = (void *)objc_claimAutoreleasedReturnValue([v49 fieldForKey:@"NWAPACTC_ac"]);
            [v50 setInt32Value:2];
            goto LABEL_38;
          }

          if ([v31 containsString:@"DataPath VO"])
          {
            id v49 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v31]);
            v50 = (void *)objc_claimAutoreleasedReturnValue([v49 fieldForKey:@"NWAPACTC_ac"]);
            [v50 setInt32Value:4];
            goto LABEL_38;
          }

          if ([v31 containsString:@"DataPath VI"])
          {
            id v49 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v31]);
            v50 = (void *)objc_claimAutoreleasedReturnValue([v49 fieldForKey:@"NWAPACTC_ac"]);
            [v50 setInt32Value:5];
LABEL_38:
          }

          id v51 = (void *)objc_claimAutoreleasedReturnValue([v151 fieldForKey:@"NWAPS_acCompletions"]);
          id v52 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v31]);
          [v51 addRepeatableSubMessageValue:v52];

LABEL_40:
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v31]);
          sub_10002595C(v150, v53, @"NWAPACTC_success", v145, v148, v31, @"Total Successfull Completions");
          sub_10002595C( v150,  v53,  @"NWAPACTC_durSinceLastSuccessfulComp",  v145,  v148,  v31,  @"Duration Since Last Successful Completion");
          sub_10002595C(v150, v53, @"NWAPACTC_failedComp", v145, v148, v31, @"Total Failed Completions");
          sub_10002595C( v150,  v53,  @"NWAPACTC_durSinceLastFailedComp",  v145,  v148,  v31,  @"Duration Since Last Failed Completion");
          sub_10002595C(v150, v53, @"NWAPACTC_expiredComp", v145, v148, v31, @"Expired Completions");
          sub_10002595C(v150, v53, @"NWAPACTC_noAckComp", v145, v148, v31, @"NoACK Completions");
          sub_10002595C(v150, v53, @"NWAPACTC_otherErrComp", v145, v148, v31, @"OtherErr Completions");
          sub_10002595C( v150,  v53,  @"NWAPACTC_durSinceLastEnqueue",  v145,  v148,  v31,  @"Duration Since Last Enqueue");
          sub_10002595C( v150,  v53,  @"NWAPACTC_qeuedPackets",  v145,  v148,  v31,  @"Queued Packets Waiting For Completion");
          sub_10002595C( v150,  v53,  @"NWAPACTC_sinceLastEnqueueHowManyFailed",  v145,  v148,  v31,  @"Since Last Enqueue How Many Failed Completions");
          sub_10002595C( v150,  v53,  @"NWAPACTC_sinceLastEnqueueHowManySuccess",  v145,  v148,  v31,  @"Since Last Enqueue How Many Successfull Completions");
          sub_10002595C( v150,  v53,  @"NWAPACTC_sinceLastSuccessHowManyFailed",  v145,  v148,  v31,  @"Since Last Success How Many Failed Completions");
          sub_10002595C( v150,  v53,  @"NWAPACTC_durSinceLastEnqueueAtLastCheck",  v145,  v148,  v31,  @"Duration Since Last Enqueue At Last Check");
          sub_10002595C( v150,  v53,  @"NWAPACTC_successfulCompletionsAtLastCheck",  v145,  v148,  v31,  @"Successfull Completions Since Last Check");
          sub_10002595C( v150,  v53,  @"NWAPACTC_failedCompletionsAtLastCheck",  v145,  v148,  v31,  @"Failed Completions Since Last Check");
          sub_10002595C( v150,  v53,  @"NWAPACTC_dpsNotifications",  v145,  v148,  v31,  @"Data Path Stuck Notifications");
        }

        objc_autoreleasePoolPop(context);
        id v28 = v147;
        id v30 = v153 + 1;
      }

      while ((id)(v153 + 1) != v149);
      BOOL v29 = [v147 countByEnumeratingWithState:&v164 objects:buf count:16];
      if (!v29) {
        goto LABEL_43;
      }
    }
  }

  id v131 = WALogCategoryDefaultHandle();
  id v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
  if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
  {
    v133 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v23]);
    id v134 = (void *)objc_claimAutoreleasedReturnValue([v133 allKeys]);
    *(_DWORD *)buf = 136446722;
    id v180 = "void populateNWActivityPerACCompletions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    uint64_t v181 = 1024;
    __int16 v182 = 589;
    BOOL v183 = 2112;
    id v184 = v134;
    _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  buf,  0x1Cu);
  }

  v135 = WALogCategoryDefaultHandle();
  id v28 = (void *)objc_claimAutoreleasedReturnValue(v135);
  if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    id v180 = "void populateNWActivityPerACCompletions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    uint64_t v181 = 1024;
    __int16 v182 = 670;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v28, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

  id v17 = 0;
LABEL_17:

  return v17;
}
  }

  BOOL v40 = WALogCategoryDefaultHandle();
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v42 = (void *)v55[5];
    *(_DWORD *)buf = 136446722;
    id v61 = "-[WAEngine _triggerSlowWiFiStudy:forProcessToken:waMessage:andReply:]";
    BOOL v62 = 1024;
    id v63 = 5066;
    id v64 = 2112;
    BOOL v65 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:gatherConsecutiveLinkQualitySamples reply err %@",  buf,  0x1Cu);
  }

  v12[2](v12, 0LL, v55[5]);
  _Block_object_dispose(&v54, 8);
}

  id v39 = WALogCategoryDefaultHandle();
  BOOL v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    id v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke_2";
    id v239 = 1024;
    id v240 = 303;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Invalid DPS data Population",  buf,  0x12u);
  }

  id v34 = 0LL;
  id v35 = 0LL;
  id v36 = 0LL;
  id v209 = 0LL;
  v210 = 0LL;
LABEL_27:
  uint64_t v41 = *((unsigned __int8 *)v234 + 24);
  unsigned __int8 v42 = WALogCategoryDefaultHandle();
  id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  BOOL v44 = v43;
  if (!v41)
  {
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke_2";
      id v239 = 1024;
      id v240 = 438;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Submitting DPS metric (CA) aborted due to validation Error",  buf,  0x12u);
    }

LABEL_34:
    id v46 = 0LL;
    goto LABEL_35;
  }

  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    id v45 = [(id)v228[5] count];
    *(_DWORD *)buf = 136446722;
    id v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    id v239 = 1024;
    id v240 = 441;
    id v241 = 2048;
    id v242 = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS metricDict fieldCount: %lu",  buf,  0x1Cu);
  }

  id v46 = (id)v228[5];
LABEL_35:

  _Block_object_dispose(&v227, 8);
  _Block_object_dispose(&v233, 8);
  return v46;
}

LABEL_100:
    if (!v170) {
      goto LABEL_105;
    }
    uint64_t v181 = (void *)objc_claimAutoreleasedReturnValue([v413 fieldForKey:@"NWACS_txmpduWMEs"]);
    __int16 v182 = (void *)objc_claimAutoreleasedReturnValue([v181 repeatableValues]);
    BOOL v183 = v182 == 0LL;

    if (v183)
    {
      id v184 = (void *)objc_claimAutoreleasedReturnValue( [v388 getNewMessageForKey:@"NWAMWME" groupType:a3 forProcessWithToken:v396]);
      v185 = (void *)objc_claimAutoreleasedReturnValue([v413 fieldForKey:@"NWACS_txmpduWMEs"]);
      [v185 addRepeatableSubMessageValue:v184];

      id v186 = (void *)objc_claimAutoreleasedReturnValue([v413 fieldForKey:@"NWACS_txmpduWMEs"]);
      id v187 = [v184 copy];
      [v186 addRepeatableSubMessageValue:v187];
    }

    id v188 = (void *)objc_claimAutoreleasedReturnValue([v413 fieldForKey:@"NWACS_txmpduWMEs"]);
    id v189 = (void *)objc_claimAutoreleasedReturnValue([v188 repeatableValues]);
    id v190 = (void *)objc_claimAutoreleasedReturnValue([v189 objectAtIndex:v171]);

    if (!v190) {
      break;
    }
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid0",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid0");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid1",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid1");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid2",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid2");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid3",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid3");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid4",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid4");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid5",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid5");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid6",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid6");
    sub_1000292E0( v406,  v190,  @"NWAMWME_tid7",  v401,  v170,  @"Counters",  @"                        Tx MPDU Tid7");

LABEL_105:
    char v172 = 0;
    uint64_t v171 = 1LL;
    if ((v420 & 1) == 0) {
      goto LABEL_106;
    }
  }

  id v321 = WALogCategoryDefaultHandle();
  v322 = (os_log_s *)objc_claimAutoreleasedReturnValue(v321);
  if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateNWActivityTxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    __int16 v437 = 1024;
    int v438 = 2084;
    _os_log_impl( (void *)&_mh_execute_header,  v322,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad sliceSpecificMessage",  buf,  0x12u);
  }

  id v323 = WALogCategoryDefaultHandle();
  v324 = (os_log_s *)objc_claimAutoreleasedReturnValue(v323);
  if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateNWActivityTxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    __int16 v437 = 1024;
    int v438 = 2101;
    _os_log_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_106:
  objc_destroyWeak(&v447);

  id v414 = v413;
  objc_initWeak(&v447, val);
  id v397 = v396;
  id v384 = v383;
  id v407 = v406;
  id v389 = objc_loadWeakRetained(&v447);
  id v191 = sub_10002575C(v407);
  v402 = (void *)objc_claimAutoreleasedReturnValue(v191);
  v192 = 0LL;
  uint64_t v193 = 0LL;
  char v194 = 1;
  while (2)
  {
    char v421 = v194;
    __int128 v433 = 0u;
    __int128 v434 = 0u;
    *(_OWORD *)v431 = 0u;
    __int128 v432 = 0u;
    v195 = (void *)objc_claimAutoreleasedReturnValue([v407 objectForKeyedSubscript:v402]);
    uint64_t v196 = (void *)objc_claimAutoreleasedReturnValue([v195 allKeys]);

    v197 = (char *)[v196 countByEnumeratingWithState:v431 objects:v448 count:16];
    if (v197)
    {
      uint64_t v198 = *(void *)v432;
      while (2)
      {
        for (j = 0LL; j != v197; ++j)
        {
          if (*(void *)v432 != v198) {
            objc_enumerationMutation(v196);
          }
          v200 = (void *)*((void *)v431[1] + (void)j);
          v201 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%lu", v193);
          if ([v200 containsString:@"Rx MPDU WME Slice "]
            && ([v200 containsString:v201] & 1) != 0)
          {
            id v202 = v200;

            v192 = v202;
            goto LABEL_118;
          }
        }

        v197 = (char *)[v196 countByEnumeratingWithState:v431 objects:v448 count:16];
        if (v197) {
          continue;
        }
        break;
      }
    }

LABEL_118:
    if (!v192)
    {
LABEL_123:
      char v194 = 0;
      uint64_t v193 = 1LL;
      if ((v421 & 1) == 0) {
        goto LABEL_124;
      }
      continue;
    }

    break;
  }

  id v203 = (void *)objc_claimAutoreleasedReturnValue([v414 fieldForKey:@"NWACS_rxmpduWMEs"]);
  v204 = (void *)objc_claimAutoreleasedReturnValue([v203 repeatableValues]);
  BOOL v205 = v204 == 0LL;

  if (v205)
  {
    v206 = (void *)objc_claimAutoreleasedReturnValue( [v389 getNewMessageForKey:@"NWAMWME" groupType:a3 forProcessWithToken:v397]);
    v207 = (void *)objc_claimAutoreleasedReturnValue([v414 fieldForKey:@"NWACS_rxmpduWMEs"]);
    [v207 addRepeatableSubMessageValue:v206];

    v208 = (void *)objc_claimAutoreleasedReturnValue([v414 fieldForKey:@"NWACS_rxmpduWMEs"]);
    id v209 = [v206 copy];
    [v208 addRepeatableSubMessageValue:v209];
  }

  v210 = (void *)objc_claimAutoreleasedReturnValue([v414 fieldForKey:@"NWACS_rxmpduWMEs"]);
  v211 = (void *)objc_claimAutoreleasedReturnValue([v210 repeatableValues]);
  v212 = (void *)objc_claimAutoreleasedReturnValue([v211 objectAtIndex:v193]);

  if (v212)
  {
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid0",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid0");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid1",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid1");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid2",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid2");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid3",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid3");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid4",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid4");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid5",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid5");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid6",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid6");
    sub_1000292E0( v407,  v212,  @"NWAMWME_tid7",  v402,  v192,  @"Counters",  @"                        Rx MPDU Tid7");

    goto LABEL_123;
  }

  id v325 = WALogCategoryDefaultHandle();
  id v326 = (os_log_s *)objc_claimAutoreleasedReturnValue(v325);
  if (os_log_type_enabled(v326, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateNWActivityRxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    __int16 v437 = 1024;
    int v438 = 2139;
    _os_log_impl( (void *)&_mh_execute_header,  v326,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad sliceSpecificMessage",  buf,  0x12u);
  }

  id v327 = WALogCategoryDefaultHandle();
  id v328 = (os_log_s *)objc_claimAutoreleasedReturnValue(v327);
  if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateNWActivityRxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    __int16 v437 = 1024;
    int v438 = 2156;
    _os_log_impl((void *)&_mh_execute_header, v328, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_124:
  objc_destroyWeak(&v447);

  id v415 = v414;
  objc_initWeak(&v447, val);
  id v398 = v397;
  id v385 = v384;
  id v408 = v407;
  id v390 = objc_loadWeakRetained(&v447);
  id v213 = sub_10002575C(v408);
  v403 = (void *)objc_claimAutoreleasedReturnValue(v213);
  v214 = 0LL;
  uint64_t v215 = 0LL;
  char v216 = 1;
  while (2)
  {
    char v422 = v216;
    __int128 v433 = 0u;
    __int128 v434 = 0u;
    *(_OWORD *)v431 = 0u;
    __int128 v432 = 0u;
    v217 = (void *)objc_claimAutoreleasedReturnValue([v408 objectForKeyedSubscript:v403]);
    v218 = (void *)objc_claimAutoreleasedReturnValue([v217 allKeys]);

    v219 = (char *)[v218 countByEnumeratingWithState:v431 objects:v448 count:16];
    if (v219)
    {
      uint64_t v220 = *(void *)v432;
      while (2)
      {
        for (k = 0LL; k != v219; ++k)
        {
          if (*(void *)v432 != v220) {
            objc_enumerationMutation(v218);
          }
          v222 = (void *)*((void *)v431[1] + (void)k);
          v223 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%lu", v215);
          if ([v222 containsString:@"Rx MPDU Lost Slice "]
            && ([v222 containsString:v223] & 1) != 0)
          {
            id v224 = v222;

            v214 = v224;
            goto LABEL_136;
          }
        }

        v219 = (char *)[v218 countByEnumeratingWithState:v431 objects:v448 count:16];
        if (v219) {
          continue;
        }
        break;
      }
    }

LABEL_136:
    if (!v214)
    {
LABEL_141:
      char v216 = 0;
      uint64_t v215 = 1LL;
      if ((v422 & 1) == 0) {
        goto LABEL_142;
      }
      continue;
    }

    break;
  }

  v225 = (void *)objc_claimAutoreleasedReturnValue([v415 fieldForKey:@"NWACS_rxmdpuLosts"]);
  v226 = (void *)objc_claimAutoreleasedReturnValue([v225 repeatableValues]);
  BOOL v227 = v226 == 0LL;

  if (v227)
  {
    v228 = (void *)objc_claimAutoreleasedReturnValue([v390 getNewMessageForKey:@"NWAML" groupType:a3 forProcessWithToken:v398]);
    v229 = (void *)objc_claimAutoreleasedReturnValue([v415 fieldForKey:@"NWACS_rxmdpuLosts"]);
    [v229 addRepeatableSubMessageValue:v228];

    v230 = (void *)objc_claimAutoreleasedReturnValue([v415 fieldForKey:@"NWACS_rxmdpuLosts"]);
    id v231 = [v228 copy];
    [v230 addRepeatableSubMessageValue:v231];
  }

  v232 = (void *)objc_claimAutoreleasedReturnValue([v415 fieldForKey:@"NWACS_rxmdpuLosts"]);
  v233 = (void *)objc_claimAutoreleasedReturnValue([v232 repeatableValues]);
  id v234 = (void *)objc_claimAutoreleasedReturnValue([v233 objectAtIndex:v215]);

  if (v234)
  {
    id v235 = (void *)objc_claimAutoreleasedReturnValue([v234 fieldForKey:@"NWAML_nonBALost"]);
    v236 = (void *)objc_claimAutoreleasedReturnValue([v235 subMessageValue]);

    v237 = (void *)objc_claimAutoreleasedReturnValue([v234 fieldForKey:@"NWAML_bALost"]);
    id v238 = (void *)objc_claimAutoreleasedReturnValue([v237 subMessageValue]);

    sub_1000292E0( v408,  v238,  @"NWAMWME_tid0",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid0");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid1",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid1");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid2",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid2");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid3",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid3");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid4",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid4");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid5",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid5");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid6",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid6");
    sub_1000292E0( v408,  v238,  @"NWAMWME_tid7",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU BA Tid7");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid0",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid0");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid1",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid1");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid2",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid2");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid3",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid3");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid4",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid4");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid5",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid5");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid6",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid6");
    sub_1000292E0( v408,  v236,  @"NWAMWME_tid7",  v403,  v214,  @"Counters",  @"                        Rx LOST MPDU NonBA Tid7");

    goto LABEL_141;
  }

  id v329 = WALogCategoryDefaultHandle();
  id v330 = (os_log_s *)objc_claimAutoreleasedReturnValue(v329);
  if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateNWActivityLostMpdu(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                         "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnu"
                         "ll __strong, NSDictionary * _Nonnull __strong)";
    __int16 v437 = 1024;
    int v438 = 2195;
    _os_log_impl( (void *)&_mh_execute_header,  v330,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad sliceSpecificMessage",  buf,  0x12u);
  }

  id v331 = WALogCategoryDefaultHandle();
  v332 = (os_log_s *)objc_claimAutoreleasedReturnValue(v331);
  if (os_log_type_enabled(v332, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateNWActivityLostMpdu(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                         "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnu"
                         "ll __strong, NSDictionary * _Nonnull __strong)";
    __int16 v437 = 1024;
    int v438 = 2224;
    _os_log_impl((void *)&_mh_execute_header, v332, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_142:
  objc_destroyWeak(&v447);

  id v239 = v415;
  id v423 = v398;
  id v240 = v385;
  id v241 = v408;
  id v242 = (void *)objc_claimAutoreleasedReturnValue([v239 fieldForKey:@"NWACS_omi"]);
  id v243 = (void *)objc_claimAutoreleasedReturnValue([v242 subMessageValue]);

  id v244 = sub_10002575C(v241);
  v245 = (void *)objc_claimAutoreleasedReturnValue(v244);
  v246 = (void *)objc_claimAutoreleasedReturnValue([v241 objectForKeyedSubscript:v245]);
  id v247 = (void *)objc_claimAutoreleasedReturnValue([v246 objectForKeyedSubscript:@"Slice 0"]);
  if (v247)
  {
    id v248 = (void *)objc_claimAutoreleasedReturnValue([v241 objectForKeyedSubscript:v245]);
    id v249 = (void *)objc_claimAutoreleasedReturnValue([v248 objectForKeyedSubscript:@"Slice 0"]);
    v250 = (void *)objc_claimAutoreleasedReturnValue([v249 objectForKeyedSubscript:@"OMI Counters"]);
    BOOL v251 = v250 == 0LL;

    if (v251) {
      goto LABEL_151;
    }
    uint64_t v252 = (void *)objc_claimAutoreleasedReturnValue([v241 objectForKeyedSubscript:v245]);
    char v253 = (void *)objc_claimAutoreleasedReturnValue([v252 objectForKeyedSubscript:@"Slice 1"]);
    if (v253)
    {
      char v254 = (void *)objc_claimAutoreleasedReturnValue([v241 objectForKeyedSubscript:v245]);
      v255 = (void *)objc_claimAutoreleasedReturnValue([v254 objectForKeyedSubscript:@"Slice 1"]);
      v256 = (void *)objc_claimAutoreleasedReturnValue([v255 objectForKeyedSubscript:@"OMI Counters"]);
      BOOL v257 = v256 == 0LL;

      if (!v257)
      {
        sub_10002998C(v241, v243, @"NWAOMI_scheduled", v245, @"Total number of OMIs scheduled");
        sub_10002998C(v241, v243, @"NWAOMI_success", v245, @"OMI Tx Success");
        sub_10002998C(v241, v243, @"NWAOMI_retries", v245, @"OMI retries as TxDone not set");
        sub_10002998C( v241,  v243,  @"NWAOMI_completionDelay",  v245,  @"Accumulated duration of OMI completion time(ms)");
        sub_10002998C(v241, v243, @"NWAOMI_uLMUReq", v245, @"UL MU enable/disable change request");
        sub_10002998C( v241,  v243,  @"NWAOMI_uLMUAck",  v245,  @"UL MU enable/disable request txed successfully");
        sub_10002998C(v241, v243, @"NWAOMI_txNSTSReq", v245, @"Tx NSTS change request");
        sub_10002998C(v241, v243, @"NWAOMI_txNSTSAck", v245, @"Tx NSTS change request txed successfully");
        sub_10002998C(v241, v243, @"NWAOMI_rxNSSReq", v245, @"Rx NSS change request");
        sub_10002998C(v241, v243, @"NWAOMI_rxNSSAck", v245, @"Rx NSS change request txed successfully");
        sub_10002998C(v241, v243, @"NWAOMI_chBWReq", v245, @"Channel Width change request");
        sub_10002998C(v241, v243, @"NWAOMI_chBWAck", v245, @"Channel Width hange request txed successfully");
        sub_10002998C(v241, v243, @"NWAOMI_eRSUReq", v245, @"ER SU enable/disable req");
        sub_10002998C(v241, v243, @"NWAOMI_eRSUAck", v245, @"ER SU enable/disable req txed successfully");
        sub_10002998C( v241,  v243,  @"NWAOMI_dLResoundReq",  v245,  @"DL MU-MIMO Resound recommendation change req");
        sub_10002998C( v241,  v243,  @"NWAOMI_dLResoundAck",  v245,  @"DL MU-MIMO Resound recommendation request txed successfully");
        goto LABEL_151;
      }
    }

    else
    {
    }

    id v258 = WALogCategoryDefaultHandle();
    v246 = (void *)objc_claimAutoreleasedReturnValue(v258);
    if (os_log_type_enabled((os_log_t)v246, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v448 = 136446466;
      v449 = "void populateNWActivityOMI(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessageDelegat"
             "e> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary * _"
             "Nonnull __strong)";
      __int16 v450 = 1024;
      int v451 = 1903;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v246,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Missing Slice 1 OMI Counters",  v448,  0x12u);
    }
  }

LABEL_151:
  id v399 = v239;
  objc_initWeak((id *)v448, val);
  id v378 = v423;
  id v375 = v240;
  id v416 = v241;
  id v259 = objc_loadWeakRetained((id *)v448);
  v260 = (void *)objc_claimAutoreleasedReturnValue([v399 fieldForKey:@"NWACS_ruUsage"]);
  v261 = (void *)objc_claimAutoreleasedReturnValue([v260 subMessageValue]);

  id v262 = sub_10002575C(v416);
  v263 = (void *)objc_claimAutoreleasedReturnValue(v262);
  v264 = objc_autoreleasePoolPush();
  BOOL v265 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
  v266 = (void *)objc_claimAutoreleasedReturnValue([v265 objectForKeyedSubscript:@"Slice 0"]);
  if (!v266) {
    goto LABEL_156;
  }
  v267 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
  v268 = (void *)objc_claimAutoreleasedReturnValue([v267 objectForKeyedSubscript:@"Slice 0"]);
  id v269 = (void *)objc_claimAutoreleasedReturnValue([v268 objectForKeyedSubscript:@"Tx OFDMA RU Counters"]);
  BOOL v270 = v269 == 0LL;

  if (v270) {
    goto LABEL_157;
  }
  BOOL v265 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
  v271 = (void *)objc_claimAutoreleasedReturnValue([v265 objectForKeyedSubscript:@"Slice 1"]);
  if (v271)
  {
    v272 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
    char v273 = (void *)objc_claimAutoreleasedReturnValue([v272 objectForKeyedSubscript:@"Slice 1"]);
    id v274 = (void *)objc_claimAutoreleasedReturnValue([v273 objectForKeyedSubscript:@"Tx OFDMA RU Counters"]);
    BOOL v275 = v274 == 0LL;

    if (!v275) {
      sub_100029BF4(v416, v261, v259, a3, v378, @"NWARU_txs", v263, @"Tx OFDMA RU Counters");
    }
  }

  else
  {
LABEL_156:
  }

LABEL_157:
  id v276 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
  id v277 = (void *)objc_claimAutoreleasedReturnValue([v276 objectForKeyedSubscript:@"Slice 0"]);
  if (!v277) {
    goto LABEL_162;
  }
  id v278 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
  v279 = (void *)objc_claimAutoreleasedReturnValue([v278 objectForKeyedSubscript:@"Slice 0"]);
  uint64_t v280 = (void *)objc_claimAutoreleasedReturnValue([v279 objectForKeyedSubscript:@"Rx OFDMA RU Counters"]);
  BOOL v281 = v280 == 0LL;

  if (v281) {
    goto LABEL_163;
  }
  id v276 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
  char v282 = (void *)objc_claimAutoreleasedReturnValue([v276 objectForKeyedSubscript:@"Slice 1"]);
  if (v282)
  {
    v283 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v263]);
    v284 = (void *)objc_claimAutoreleasedReturnValue([v283 objectForKeyedSubscript:@"Slice 1"]);
    v285 = (void *)objc_claimAutoreleasedReturnValue([v284 objectForKeyedSubscript:@"Rx OFDMA RU Counters"]);
    BOOL v286 = v285 == 0LL;

    if (!v286) {
      sub_100029BF4(v416, v261, v259, a3, v378, @"NWARU_rxs", v263, @"Rx OFDMA RU Counters");
    }
  }

  else
  {
LABEL_162:
  }

LABEL_163:
  objc_autoreleasePoolPop(v264);
  objc_destroyWeak((id *)v448);

  v287 = (void *)objc_claimAutoreleasedReturnValue([v399 fieldForKey:@"NWACS_channelsVisited0"]);
  [v287 setUint32Value:0];

  v288 = (void *)objc_claimAutoreleasedReturnValue([v399 fieldForKey:@"NWACS_channelsVisited1"]);
  [v288 setUint32Value:0];

  id v289 = sub_10002575C(v416);
  v409 = (__CFString *)objc_claimAutoreleasedReturnValue(v289);
  *(_OWORD *)v431 = 0u;
  __int128 v432 = 0u;
  __int128 v433 = 0u;
  __int128 v434 = 0u;
  v290 = (void *)objc_claimAutoreleasedReturnValue([v416 allKeys]);
  v291 = (char *)[v290 countByEnumeratingWithState:v431 objects:v448 count:16];
  if (v291)
  {
    uint64_t v292 = *(void *)v432;
    while (2)
    {
      for (m = 0LL; m != v291; ++m)
      {
        if (*(void *)v432 != v292) {
          objc_enumerationMutation(v290);
        }
        v294 = (void *)*((void *)v431[1] + (void)m);
        if ([v294 containsString:@"CCPipe"])
        {
          id obja = v294;

          v290 = obja;
          goto LABEL_173;
        }
      }

      v291 = (char *)[v290 countByEnumeratingWithState:v431 objects:v448 count:16];
      if (v291) {
        continue;
      }
      break;
    }
  }

  id obja = 0LL;
LABEL_173:

  sub_10002595C( v416,  v399,  @"NWACS_controllerResets",  v409,  @"Controller",  @"Driver Availability",  @"Driver Transitioned to Unavailable");
  v295 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v409]);
  v296 = (void *)objc_claimAutoreleasedReturnValue([v295 objectForKeyedSubscript:@"TX STATUS"]);
  char v297 = (void *)objc_claimAutoreleasedReturnValue([v296 objectForKeyedSubscript:@"TX Backoff Stuck"]);

  id v298 = v416;
  if (v297) {
    sub_10002595C( v416,  v399,  @"NWACS_backoffStuck",  v409,  @"TX STATUS",  @"TX Backoff Stuck",  @"Backoff Stuck Detected");
  }
  uint64_t v299 = 0LL;
  char v300 = 1;
  v404 = @"NWACS_channelsVisited0";
  do
  {
    char v386 = v300;
    v424 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Channel Switch: Slice %lu",  v299);
    v301 = (void *)objc_claimAutoreleasedReturnValue([v298 objectForKeyedSubscript:v409]);
    id v302 = (void *)objc_claimAutoreleasedReturnValue([v301 objectForKeyedSubscript:v424]);
    BOOL v303 = v302 == 0LL;

    if (!v303)
    {
      __int128 v428 = 0u;
      __int128 v429 = 0u;
      __int128 v426 = 0u;
      __int128 v427 = 0u;
      id v304 = (void *)objc_claimAutoreleasedReturnValue([v416 objectForKeyedSubscript:v409]);
      v305 = (void *)objc_claimAutoreleasedReturnValue([v304 objectForKeyedSubscript:v424]);
      v306 = (void *)objc_claimAutoreleasedReturnValue([v305 objectForKeyedSubscript:@"Channels Visited"]);
      id v391 = (id)objc_claimAutoreleasedReturnValue([v306 allKeys]);

      id v307 = [v391 countByEnumeratingWithState:&v426 objects:v435 count:16];
      if (v307)
      {
        uint64_t v393 = *(void *)v427;
        do
        {
          v308 = 0LL;
          do
          {
            if (*(void *)v427 != v393) {
              objc_enumerationMutation(v391);
            }
            id v309 = *(void **)(*((void *)&v426 + 1) + 8LL * (void)v308);
            id v310 = v399;
            v311 = v404;
            v312 = v409;
            v313 = v424;
            v314 = v309;
            id v315 = sub_100026554(v416, v312, v313, @"Channels Visited", v314);
            if (v315)
            {
              int IntegerValue = IOReportSimpleGetIntegerValue(v315, 0LL);
              v317 = (void *)objc_claimAutoreleasedReturnValue([v310 fieldForKey:v311]);
              v318 = (void *)objc_claimAutoreleasedReturnValue([v310 fieldForKey:v311]);
              objc_msgSend(v317, "setUint32Value:", objc_msgSend(v318, "uint32Value") + IntegerValue);
            }

            else
            {
              id v319 = WALogCategoryDefaultHandle();
              v317 = (void *)objc_claimAutoreleasedReturnValue(v319);
              if (os_log_type_enabled((os_log_t)v317, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v448 = 136447490;
                v449 = "_Bool addUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __stron"
                       "g, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSSt"
                       "ring * _Nonnull __strong, NSString * _Nonnull __strong)";
                __int16 v450 = 1024;
                int v451 = 154;
                __int16 v452 = 2112;
                v453 = v409;
                __int16 v454 = 2112;
                v455 = (const __CFString *)v424;
                __int16 v456 = 2112;
                v457 = @"Channels Visited";
                __int16 v458 = 2112;
                v459 = v314;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v317,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  v448,  0x3Au);
              }
            }

            v308 = (char *)v308 + 1;
          }

          while (v307 != v308);
          id v320 = [v391 countByEnumeratingWithState:&v426 objects:v435 count:16];
          id v307 = v320;
        }

        while (v320);
      }
    }

    char v300 = 0;
    v404 = @"NWACS_channelsVisited1";
    uint64_t v299 = 1LL;
    id v298 = v416;
  }

  while ((v386 & 1) != 0);
  sub_1000292E0( v416,  v399,  @"NWACS_commandsIssued",  v409,  @"Commander",  @"Counters",  @"Commands Issued");
  sub_10002595C( v416,  v399,  @"NWACS_commanderHalted",  v409,  @"Commander",  @"Counters",  @"Commander Quiesce");
  sub_10002595C( v416,  v399,  @"NWACS_iorSuccess",  v409,  @"IOReporter API",  @"UpdateReport Calls",  @"Success");
  sub_10002595C( v416,  v399,  @"NWACS_iorWA",  v409,  @"IOReporter API",  @"UpdateReport Calls",  @"wifianalyticsd");
  sub_10002595C( v416,  v399,  @"NWACS_ccCaptureDriverLogs",  obja,  @"CoreCapture",  @"Pipe DriverLogs",  @"                       Capture Requests");

  objc_destroyWeak(&location);
}

  __int128 v157 = 0LL;
  __int128 v158 = 0LL;
  char v123 = 0LL;
  v168 = 0LL;
LABEL_132:

  id v124 = WALogCategoryDefaultHandle();
  id v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
  if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1065;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v158;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v157;
    _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Finished finding IOReporter channels... Error - added %lu duplicate %lu",  buf,  0x26u);
  }

  id v126 = WALogCategoryDefaultHandle();
  v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
  if (os_signpost_enabled(v127))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v127,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR addDriverChannelsMatchingPredicateList",  "Error",  buf,  2u);
  }

  id obj = v123;
LABEL_142:

  return v158;
}

void sub_10000FA6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id location)
{
}

void sub_10000FB9C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v57 = a1;
  id v54 = a2;
  id v55 = a3;
  id v8 = a4;
  context = objc_autoreleasePoolPush();
  BOOL v59 = v8;
  id v9 = sub_10002575C(v8);
  v58 = (void *)objc_claimAutoreleasedReturnValue(v9);
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v58]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allKeys]);

  id v12 = [v11 countByEnumeratingWithState:&v68 objects:v76 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v69;
LABEL_3:
    uint64_t v14 = 0LL;
    while (1)
    {
      if (*(void *)v69 != v13) {
        objc_enumerationMutation(v11);
      }
      id v15 = *(void **)(*((void *)&v68 + 1) + 8 * v14);
      if ([v15 containsString:@"Interface en"])
      {
      }

      if (v12 == (id)++v14)
      {
        id v12 = [v11 countByEnumeratingWithState:&v68 objects:v76 count:16];
        if (v12) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }

    id v26 = v15;

    if (!v26) {
      goto LABEL_11;
    }
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    v27 = (void *)objc_claimAutoreleasedReturnValue([v59 objectForKeyedSubscript:v58]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v26]);
    BOOL v29 = (void *)objc_claimAutoreleasedReturnValue([v28 allKeys]);

    id v30 = [v29 countByEnumeratingWithState:&v64 objects:v75 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v65;
LABEL_24:
      uint64_t v32 = 0LL;
      while (1)
      {
        if (*(void *)v65 != v31) {
          objc_enumerationMutation(v29);
        }
        id v33 = *(void **)(*((void *)&v64 + 1) + 8 * v32);
        if (v30 == (id)++v32)
        {
          id v30 = [v29 countByEnumeratingWithState:&v64 objects:v75 count:16];
          if (v30) {
            goto LABEL_24;
          }
          goto LABEL_30;
        }
      }

      id v34 = v33;

      if (!v34)
      {

        objc_autoreleasePoolPop(context);
        goto LABEL_48;
      }

      sub_1000292E0(v59, v57, @"WFAAWDLQM_cCA", v58, v26, v34, @"CCA (%) excluding own traffic");
      id v35 = v59;
      id v36 = v57;
      id v37 = v58;
      id v20 = v26;
      id v38 = v34;
      id v39 = objc_autoreleasePoolPush();
      BOOL v40 = sub_100026554(v35, v37, v20, v38, @"RSSI (dB)");
      if (v40)
      {
        uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v40, 0LL);
        unsigned __int8 v42 = (void *)objc_claimAutoreleasedReturnValue([v36 fieldForKey:@"WFAAWDLQM_rSSI"]);
        [v42 setInt64Value:IntegerValue];
      }

      else
      {
        id v52 = WALogCategoryDefaultHandle();
        unsigned __int8 v42 = (void *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled((os_log_t)v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          BOOL v78 = "_Bool fillInt64FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSSt"
                "ring * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnul"
                "l __strong, NSString * _Nonnull __strong)";
          __int16 v79 = 1024;
          int v80 = 223;
          __int16 v81 = 2112;
          id v82 = v37;
          __int16 v83 = 2112;
          id v84 = v20;
          __int16 v85 = 2112;
          id v86 = v38;
          __int16 v87 = 2112;
          id v88 = @"RSSI (dB)";
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v42,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
        }
      }

      objc_autoreleasePoolPop(v39);
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txPhyRate", v37, v20, v38, @"Avg Tx Phy Rate (Mbps)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxPhyRate", v37, v20, v38, @"Avg Rx Phy Rate (Mbps)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txAMPDUDensity", v37, v20, v38, @"Mode Tx AMPDU Density");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_measurementDurMS",  v37,  v20,  v38,  @"Time since last measurement (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_concurrentIntDurMS",  v37,  v20,  v38,  @"Concurrent interfaces active duration (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_tVPMActiveDurationMS",  v37,  v20,  v38,  @"TVPM active duration (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_phyTxActivityDurMS",  v37,  v20,  v38,  @"Actual Tx activity duration (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_phyRxActivityDurMS",  v37,  v20,  v38,  @"Actual Rx activity duration (ms)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txSubBytes", v37, v20, v38, @"Submitted Tx bytes");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txCompBytes", v37, v20, v38, @"Successfully completed Tx bytes");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_txDelayBytes",  v37,  v20,  v38,  @"Delayed Tx bytes from last measurement");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_offChanDurMS", v37, v20, v38, @"Off channel duration (ms)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txSubPkts", v37, v20, v38, @"Submitted Tx packet count");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_txCompPkts",  v37,  v20,  v38,  @"Successfully completed Tx packet (host reported) count");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_maxQueueFullDurMS",  v37,  v20,  v38,  @"Max Tx queue full duration (ms) across all AC's");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_avgTxLatencyMS", v37, v20, v38, @"Average Tx latency (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_bTAntennaDurMS",  v37,  v20,  v38,  @"BT antenna shared duration (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_outputThroughput",  v37,  v20,  v38,  @"Tx output throughput from WiFi chipset (Mbps)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_inputThroughput",  v37,  v20,  v38,  @"Tx input throughput from NW stack (Mbps)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_expectedThroughput",  v37,  v20,  v38,  @"Tx expected throughput for given channel conditions (Mbps)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_delayedThroughput",  v37,  v20,  v38,  @"Tx delayed throughput from last measurement period (Mbps)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_availWLANDurMS",  v37,  v20,  v38,  @"Available duration for WLAN activity (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_availWLANTxDurMS",  v37,  v20,  v38,  @"Available duration for WLAN Tx activity (ms)");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_availWLANRxDurMS",  v37,  v20,  v38,  @"Available duration for WLAN Rx activity (ms)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txRetries", v37, v20, v38, @"Tx retry count");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txFails", v37, v20, v38, @"Tx failure count");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_txFrames", v37, v20, v38, @"Tx packet (FW reported) count");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxOvflErrs", v37, v20, v38, @"Rx overflow errors");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxFCSErrs", v37, v20, v38, @"Rx FCS errors");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxPLCPErrs", v37, v20, v38, @"Rx PLCP errors");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxCRSErrs", v37, v20, v38, @"Rx CRS glitches");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxDupErrs", v37, v20, v38, @"Rx duplicate errors");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxReplayErrs", v37, v20, v38, @"Rx replay errors");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxDecryErrs", v37, v20, v38, @"Rx decrypt errors");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxRetries", v37, v20, v38, @"Rx retry count");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxGoodPlcps", v37, v20, v38, @"Rx good PLCP count");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxFrames", v37, v20, v38, @"Rx packet (FW reported) count");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_sNR", v37, v20, v38, @"SNR");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_txExpectedAMPDUDensity",  v37,  v20,  v38,  @"Expected Tx AMPDU density");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rC1CoexDurationMS", v37, v20, v38, @"RC1 coex durations (ms)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rC2CoexDurationMS", v37, v20, v38, @"RC2 coex durations (ms)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_lTECoexDurationMS", v37, v20, v38, @"LTE coex durations (ms)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxThroughput", v37, v20, v38, @"Rx throughput (Mbps)");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_aPTxDataStall", v37, v20, v38, @"AP Tx data stall");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_rxAmpduTxBaMismatch", v37, v20, v38, @"Rx AMPDU TxBA mismatch");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_symptomsFails", v37, v20, v38, @"Symptoms fails");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_is2GBand", v37, v20, v38, @"Is 2G band");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_isFGTraffic", v37, v20, v38, @"Is FG traffic");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_baselineThroughput", v37, v20, v38, @"Throughput test baseline");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_testThroughput", v37, v20, v38, @"Throughput test result");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_infraDutyCycle", v37, v20, v38, @"Infra duty cycle");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_lastScanReason", v37, v20, v38, @"Last scan reason");
      sub_1000292E0(v35, v36, @"WFAAWDLQM_accessPointOUI", v37, v20, v38, @"AP MAC address");
      sub_1000292E0( v35,  v36,  @"WFAAWDLQM_timeSinceLastRecovery",  v37,  v20,  v38,  @"Time since last recovery");

      __int128 v62 = 0u;
      __int128 v63 = 0u;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKeyedSubscript:v37]);
      BOOL v44 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v20]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 allKeys]);

      id v46 = [v45 countByEnumeratingWithState:&v60 objects:v74 count:16];
      if (!v46)
      {
LABEL_42:

LABEL_43:
        id v50 = WALogCategoryDefaultHandle();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulator"
                "MessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
                " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
          __int16 v79 = 1024;
          int v80 = 2741;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup with contains Link quality monitor measurements",  buf,  0x12u);
        }

        goto LABEL_14;
      }

      uint64_t v47 = *(void *)v61;
LABEL_36:
      uint64_t v48 = 0LL;
      while (1)
      {
        if (*(void *)v61 != v47) {
          objc_enumerationMutation(v45);
        }
        id v49 = *(void **)(*((void *)&v60 + 1) + 8 * v48);
        if (v46 == (id)++v48)
        {
          id v46 = [v45 countByEnumeratingWithState:&v60 objects:v74 count:16];
          if (v46) {
            goto LABEL_36;
          }
          goto LABEL_42;
        }
      }

      id v51 = v49;

      if (!v51) {
        goto LABEL_43;
      }
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txOutputBelowExpectedTrue",  v37,  v20,  v51,  @"Tx output throughput is below expected throughput",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txOutputBelowExpectedFalse",  v37,  v20,  v51,  @"Tx output throughput is below expected throughput",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txOutputBelowInputTrue",  v37,  v20,  v51,  @"Tx output throughput is below input throughput",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txOutputBelowInputFalse",  v37,  v20,  v51,  @"Tx output throughput is below input throughput",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txLowFrameCountTrue",  v37,  v20,  v51,  @"Tx frame count is too low for LQM analysis",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txLowFrameCountFalse",  v37,  v20,  v51,  @"Tx frame count is too low for LQM analysis",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_rxLowFrameCountTrue",  v37,  v20,  v51,  @"Rx frame count is too low for LQM analysis",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_rxLowFrameCountFalse",  v37,  v20,  v51,  @"Rx frame count is too low for LQM analysis",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highTxLatencyTrue",  v37,  v20,  v51,  @"Tx latency is too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highTxLatencyFalse",  v37,  v20,  v51,  @"Tx latency is too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowTxPhyRateTrue",  v37,  v20,  v51,  @"Tx phy rate is below expectation",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowTxPhyRateFalse",  v37,  v20,  v51,  @"Tx phy rate is below expectation",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highTxPerTrue",  v37,  v20,  v51,  @"Tx PER is too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highTxPerFalse",  v37,  v20,  v51,  @"Tx PER is too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highTxRetriesTrue",  v37,  v20,  v51,  @"Tx retries are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highTxRetriesFalse",  v37,  v20,  v51,  @"Tx retries are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txQueueFullTrue",  v37,  v20,  v51,  @"Atleast one tx queue is mostly full",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_txQueueFullFalse",  v37,  v20,  v51,  @"Atleast one tx queue is mostly full",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowTxAMPDUDensityTrue",  v37,  v20,  v51,  @"Tx AMPDU density is too low",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowTxAMPDUDensityFalse",  v37,  v20,  v51,  @"Tx AMPDU density is too low",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxRetriesTrue",  v37,  v20,  v51,  @"Rx retries are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxRetriesFalse",  v37,  v20,  v51,  @"Rx retries are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxPhyPERTrue",  v37,  v20,  v51,  @"Rx PHY PER is too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxPhyPERFalse",  v37,  v20,  v51,  @"Rx PHY PER is too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxFCSErrsTrue",  v37,  v20,  v51,  @"Rx FCS errors are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxFCSErrsFalse",  v37,  v20,  v51,  @"Rx FCS errors are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxOverflowsTrue",  v37,  v20,  v51,  @"Rx overflows are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxOverflowsFalse",  v37,  v20,  v51,  @"Rx overflows are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxDupsTrue",  v37,  v20,  v51,  @"Rx duplicates are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxDupsFalse",  v37,  v20,  v51,  @"Rx duplicates are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxReplaysTrue",  v37,  v20,  v51,  @"Rx replays are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxReplaysFalse",  v37,  v20,  v51,  @"Rx replays are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxDecryptErrsTrue",  v37,  v20,  v51,  @"Rx decrypt errors are too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxDecryptErrsFalse",  v37,  v20,  v51,  @"Rx decrypt errors are too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxDataPERTrue",  v37,  v20,  v51,  @"Rx data PER is too high",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_highRxDataPERFalse",  v37,  v20,  v51,  @"Rx data PER is too high",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowAvailWLANDurTrue",  v37,  v20,  v51,  @"Available WLAN duration is too low",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowAvailWLANDurFalse",  v37,  v20,  v51,  @"Available WLAN duration is too low",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowAvailWLANTxDurTrue",  v37,  v20,  v51,  @"Available WLAN Tx duration is too low",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowAvailWLANTxDurFalse",  v37,  v20,  v51,  @"Available WLAN Tx duration is too low",  @"FALSE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowAvailWLANRxDurTrue",  v37,  v20,  v51,  @"Available WLAN Rx duration is too low",  @"TRUE");
      sub_10002A4DC( v35,  v36,  @"WFAAWDLQM_lowAvailWLANRxDurFalse",  v37,  v20,  v51,  @"Available WLAN Rx duration is too low",  @"FALSE");

      objc_autoreleasePoolPop(context);
    }

    else
    {
LABEL_30:

      objc_autoreleasePoolPop(context);
    }
  }

  else
  {
LABEL_10:

LABEL_11:
    id v16 = WALogCategoryDefaultHandle();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v59 objectForKeyedSubscript:v58]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 allKeys]);
      *(_DWORD *)buf = 136446722;
      BOOL v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
            "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
            "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v79 = 1024;
      int v80 = 2661;
      __int16 v81 = 2112;
      id v82 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group Interface en0 Peer 00:... we have %@",  buf,  0x1Cu);
    }

    id v20 = 0LL;
LABEL_14:

    objc_autoreleasePoolPop(context);
    id v21 = WALogCategoryDefaultHandle();
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
            "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
            "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v79 = 1024;
      int v80 = 2814;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Mandatory IOReporter TxOutputBelowExpected is missing",  buf,  0x12u);
    }

    if (!*a5)
    {
      NSErrorUserInfoKey v72 = NSLocalizedFailureReasonErrorKey;
      id v73 = @"WAErrorCodeTxOutputBelowExpectedMissing";
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v73,  &v72,  1LL));
      *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9029LL,  v23));
    }

    id v24 = WALogCategoryDefaultHandle();
    BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
            "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
            "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v79 = 1024;
      int v80 = 2818;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }
  }

LABEL_48:
}

LABEL_49:
  id v52 = WALogCategoryDefaultHandle();
  uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v58 = "-[WAApple80211 getIOReportLegendItemsMatching:retErr:]";
    BOOL v59 = 1024;
    *(_DWORD *)__int128 v60 = 823;
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)&v60[6] = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to getIOReportLegendItemsMatching error %d",  buf,  0x18u);
  }

  unsigned int v22 = 0LL;
  *a4 = 1;
  return v22;
}

void sub_100011380( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  objc_initWeak(&location, a5);
  id v18 = a7;
  id v30 = a8;
  id v19 = a9;
  id v20 = objc_loadWeakRetained(&location);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v15 fieldForKey:@"DPSCS_controllerStats"]);
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 subMessageValue]);

  id v32 = 0LL;
  sub_10000B154(v22, v20, a6, v18, v16, v17, &v32);
  BOOL v29 = v16;
  uint64_t v23 = a6;
  id v24 = v32;
  BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v15 fieldForKey:@"DPSCS_peerStats"]);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 subMessageValue]);

  v27 = (void *)objc_claimAutoreleasedReturnValue([v26 fieldForKey:@"NWAPS_hashID"]);
  [v27 setStringValue:@"00:00:00:00:00:00"];

  id v31 = v24;
  sub_100011574(v15, v26, v20, v23, v18, v29, v17, v30, &v31);
  id v28 = v31;

  v19[2](v19, v15, v28);
  objc_destroyWeak(&location);
}

void sub_10001155C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100011574( void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v136 = a1;
  id v15 = a2;
  objc_initWeak(&location, a3);
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Interface %@ Peer %@",  v19,  @"00:00:00:00:00:00"));
  id v141 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Interface %@",  v19));
  id v137 = v19;
  id v139 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Interface %@ Chip",  v19));
  id val = objc_loadWeakRetained(&location);
  id v151 = v15;
  objc_initWeak(&v168, val);
  id v21 = v20;
  id v144 = v16;
  id v138 = v17;
  id v150 = v18;
  __int128 v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v142 = objc_loadWeakRetained(&v168);
  id v22 = sub_10002575C(v150);
  uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);
  id v148 = v21;
  __int128 v145 = (void *)v23;
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v23]);
  BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v148]);
  LODWORD(v1_Block_object_dispose(va, 8) = v25 == 0LL;

  if (!(_DWORD)v18)
  {
    __int128 v166 = 0u;
    __int128 v167 = 0u;
    __int128 v164 = 0u;
    __int128 v165 = 0u;
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v23]);
    v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v148]);
    __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v27 allKeys]);

    id v28 = v147;
    id v29 = [v147 countByEnumeratingWithState:&v164 objects:buf count:16];
    if (!v29) {
      goto LABEL_43;
    }
    uint64_t v146 = *(void *)v165;
    while (1)
    {
      uint64_t v30 = 0LL;
      id v149 = v29;
      do
      {
        if (*(void *)v165 != v146) {
          objc_enumerationMutation(v28);
        }
        uint64_t v153 = v30;
        id v31 = *(void **)(*((void *)&v164 + 1) + 8 * v30);
        context = objc_autoreleasePoolPush();
        if (([v31 isEqualToString:@"DataPath BE"] & 1) != 0
          || ([v31 isEqualToString:@"DataPath BK"] & 1) != 0
          || ([v31 isEqualToString:@"DataPath VO"] & 1) != 0
          || ([v31 isEqualToString:@"DataPath VI"] & 1) != 0)
        {
          __int128 v162 = 0u;
          __int128 v163 = 0u;
          __int128 v160 = 0u;
          __int128 v161 = 0u;
          id v32 = (void *)objc_claimAutoreleasedReturnValue([v151 fieldForKey:@"NWAPS_acCompletions"]);
          id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 repeatableValues]);

          id v34 = [v33 countByEnumeratingWithState:&v160 objects:v178 count:16];
          if (v34)
          {
            char v35 = 0;
            uint64_t v36 = *(void *)v161;
            do
            {
              for (i = 0LL; i != v34; i = (char *)i + 1)
              {
                if (*(void *)v161 != v36) {
                  objc_enumerationMutation(v33);
                }
                id v38 = *(void **)(*((void *)&v160 + 1) + 8LL * (void)i);
                if ([v31 containsString:@"DataPath BE"])
                {
                  id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 fieldForKey:@"NWAPACTC_ac"]);
                  BOOL v40 = [v39 int32Value] == 3;

                  if (v40) {
                    goto LABEL_24;
                  }
                }

                if ([v31 containsString:@"DataPath BK"])
                {
                  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v38 fieldForKey:@"NWAPACTC_ac"]);
                  BOOL v42 = [v41 int32Value] == 2;

                  if (v42) {
                    goto LABEL_24;
                  }
                }

                if (![v31 containsString:@"DataPath VO"]
                  || (id v43 = (void *)objc_claimAutoreleasedReturnValue([v38 fieldForKey:@"NWAPACTC_ac"]),
                      BOOL v44 = [v43 int32Value] == 4,
                      v43,
                      !v44))
                {
                  id v45 = (void *)objc_claimAutoreleasedReturnValue([v38 fieldForKey:@"NWAPACTC_ac"]);
                  BOOL v46 = [v45 int32Value] == 5;

                  if (!v46) {
                    continue;
                  }
                }

LABEL_43:
  objc_destroyWeak(&v168);
  id v54 = (void *)objc_claimAutoreleasedReturnValue([v151 fieldForKey:@"NWAPS_completions"]);
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 subMessageValue]);

  id v56 = sub_10002575C(v150);
  id v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
  __int128 v157 = 0u;
  __int128 v158 = 0u;
  __int128 v155 = 0u;
  __int128 v156 = 0u;
  v58 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
  BOOL v59 = (void *)objc_claimAutoreleasedReturnValue([v58 allKeys]);

  id v60 = [v59 countByEnumeratingWithState:&v155 objects:v177 count:16];
  if (v60)
  {
    uint64_t v61 = *(void *)v156;
LABEL_45:
    uint64_t v62 = 0LL;
    while (1)
    {
      if (*(void *)v156 != v61) {
        objc_enumerationMutation(v59);
      }
      __int128 v63 = *(void **)(*((void *)&v155 + 1) + 8 * v62);
      if (v60 == (id)++v62)
      {
        id v60 = [v59 countByEnumeratingWithState:&v155 objects:v177 count:16];
        if (v60) {
          goto LABEL_45;
        }
        goto LABEL_51;
      }
    }

    id v70 = v63;

    if (!v70) {
      goto LABEL_52;
    }
    if ((sub_100025B1C( v150,  v151,  val,  a4,  v144,  @"NWAPS_ccas",  v57,  v141,  @"Average CCA State",  @"Interface Average CCA State") & 1) == 0)
    {
      id v71 = WALogCategoryDefaultHandle();
      NSErrorUserInfoKey v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v181 = 1024;
        int v182 = 703;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Mandatory IOReporter Interface Average CCA State is missing",  buf,  0x12u);
      }

      if (!*a9)
      {
        NSErrorUserInfoKey v175 = NSLocalizedFailureReasonErrorKey;
        uint64_t v176 = @"WAErrorCodeCCAMissing";
        id v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v176,  &v175,  1LL));
        *a9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9021LL,  v73));
      }
    }

    sub_100025B1C( v150,  v151,  val,  a4,  v144,  @"NWAPS_snrs",  v57,  v141,  @"LQM SNR State",  @"LQM SNR State");
    if ((sub_100025B1C( v150,  v151,  val,  a4,  v144,  @"NWAPS_rssis",  v57,  v141,  @"LQM RSSI State",  @"LQM RSSI State") & 1) == 0)
    {
      id v74 = WALogCategoryDefaultHandle();
      BOOL v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v181 = 1024;
        int v182 = 711;
        _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Mandatory IOReporter LQM RSSI State is missing",  buf,  0x12u);
      }

      if (!*a9)
      {
        NSErrorUserInfoKey v173 = NSLocalizedFailureReasonErrorKey;
        __int16 v174 = @"WAErrorCodeRSSIMissing";
        v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v174,  &v173,  1LL));
        *a9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9022LL,  v76));
      }
    }

    v77 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    BOOL v78 = (void *)objc_claimAutoreleasedReturnValue([v77 objectForKeyedSubscript:v148]);
    __int16 v79 = (void *)objc_claimAutoreleasedReturnValue([v78 objectForKeyedSubscript:@"TxCompletion Latency"]);
    int v80 = (void *)objc_claimAutoreleasedReturnValue([v79 objectForKeyedSubscript:@"Completion Latency Be"]);

    if (v80)
    {
      sub_10002734C(v150, v151, val, a4, v144, @"NWAPS_txLatencyBEs", v57, v148, @"Completion Latency Be");
    }

    else
    {
      id v81 = WALogCategoryDefaultHandle();
      id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v181 = 1024;
        int v182 = 720;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Mandatory IOReporter TxCompletion Latency, Completion Latency Be is missing",  buf,  0x12u);
      }

      if (*a9) {
        *a9 = 0LL;
      }
      NSErrorUserInfoKey v171 = NSLocalizedFailureReasonErrorKey;
      char v172 = @"WAErrorCodeTxLatencyBeMissing";
      __int16 v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v172,  &v171,  1LL));
      *a9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9024LL,  v83));
    }

    id v84 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    __int16 v85 = (void *)objc_claimAutoreleasedReturnValue([v84 objectForKeyedSubscript:v148]);
    id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKeyedSubscript:@"TxCompletion Latency"]);
    __int16 v87 = (void *)objc_claimAutoreleasedReturnValue([v86 objectForKeyedSubscript:@"Completion Latency Bk"]);

    if (v87) {
      sub_10002734C(v150, v151, val, a4, v144, @"NWAPS_txLatencyBKs", v57, v148, @"Completion Latency Bk");
    }
    id v88 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForKeyedSubscript:v148]);
    id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:@"TxCompletion Latency"]);
    id v91 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKeyedSubscript:@"Completion Latency Vo"]);

    if (v91) {
      sub_10002734C(v150, v151, val, a4, v144, @"NWAPS_txLatencyVOs", v57, v148, @"Completion Latency Vo");
    }
    id v92 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    v93 = (void *)objc_claimAutoreleasedReturnValue([v92 objectForKeyedSubscript:v148]);
    id v94 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKeyedSubscript:@"TxCompletion Latency"]);
    v95 = (void *)objc_claimAutoreleasedReturnValue([v94 objectForKeyedSubscript:@"Completion Latency Vi"]);

    if (v95) {
      sub_10002734C(v150, v151, val, a4, v144, @"NWAPS_txLatencyVIs", v57, v148, @"Completion Latency Vi");
    }
    sub_100025FC8(v150, v151, val, a4, v144, 0, @"NWAPS_bytes", v57, v141, @"Data Bytes", @"Rx Bytes");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  3u,  @"NWAPS_bytes",  v57,  v141,  @"Data Bytes",  @"BE Tx Bytes");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  2u,  @"NWAPS_bytes",  v57,  v141,  @"Data Bytes",  @"BK Tx Bytes");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  5u,  @"NWAPS_bytes",  v57,  v141,  @"Data Bytes",  @"VI Tx Bytes");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  4u,  @"NWAPS_bytes",  v57,  v141,  @"Data Bytes",  @"VO Tx Bytes");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  1u,  @"NWAPS_bytes",  v57,  v141,  @"Data Bytes",  @"Tx Bytes");
    BOOL v96 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    v97 = (void *)objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:v139]);
    v98 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKeyedSubscript:@"Rx Data Byte Counters"]);

    if (v98)
    {
      sub_100025FC8( v150,  v151,  val,  a4,  v144,  6u,  @"NWAPS_bytes",  v57,  v139,  @"Rx Data Byte Counters",  @"SU MPDU Bytes");
      sub_100025FC8( v150,  v151,  val,  a4,  v144,  8u,  @"NWAPS_bytes",  v57,  v139,  @"Rx Data Byte Counters",  @"OFDMA MPDU Bytes");
      sub_100025FC8( v150,  v151,  val,  a4,  v144,  0xAu,  @"NWAPS_bytes",  v57,  v139,  @"Rx Data Byte Counters",  @"MU MIMO MPDU Bytes");
    }

    id v99 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    v100 = (void *)objc_claimAutoreleasedReturnValue([v99 objectForKeyedSubscript:v139]);
    v101 = (void *)objc_claimAutoreleasedReturnValue([v100 objectForKeyedSubscript:@"Tx Data Byte Counters"]);

    if (v101)
    {
      sub_100025FC8( v150,  v151,  val,  a4,  v144,  7u,  @"NWAPS_bytes",  v57,  v139,  @"Tx Data Byte Counters",  @"SU MPDU Bytes");
      sub_100025FC8( v150,  v151,  val,  a4,  v144,  9u,  @"NWAPS_bytes",  v57,  v139,  @"Tx Data Byte Counters",  @"OFDMA MPDU Bytes");
    }

    sub_100025FC8( v150,  v151,  val,  a4,  v144,  0,  @"NWAPS_packets",  v57,  v141,  @"Data Packets",  @"Rx Packets");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  3u,  @"NWAPS_packets",  v57,  v141,  @"Data Packets",  @"BE Tx Packets");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  2u,  @"NWAPS_packets",  v57,  v141,  @"Data Packets",  @"BK Tx Packets");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  5u,  @"NWAPS_packets",  v57,  v141,  @"Data Packets",  @"VI Tx Packets");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  4u,  @"NWAPS_packets",  v57,  v141,  @"Data Packets",  @"VO Tx Packets");
    sub_100025FC8( v150,  v151,  val,  a4,  v144,  1u,  @"NWAPS_packets",  v57,  v141,  @"Data Packets",  @"Tx Packets");
    unsigned __int8 v102 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 objectForKeyedSubscript:v139]);
    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([v103 objectForKeyedSubscript:@"Rx Data Frame Counters"]);

    if (v104)
    {
      sub_100026348( v150,  v151,  val,  a4,  v144,  6LL,  @"NWAPS_packets",  v57,  v139,  @"Rx Data Frame Counters",  @"SU MPDU Data");
      sub_100026348( v150,  v151,  val,  a4,  v144,  8LL,  @"NWAPS_packets",  v57,  v139,  @"Rx Data Frame Counters",  @"MU MIMO MPDU Data");
      sub_100026348( v150,  v151,  val,  a4,  v144,  10LL,  @"NWAPS_packets",  v57,  v139,  @"Rx Data Frame Counters",  @"OFDMA MPDU Data");
    }

    v105 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    id v106 = (void *)objc_claimAutoreleasedReturnValue([v105 objectForKeyedSubscript:v139]);
    v107 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:@"Tx Data Frame Counters"]);

    if (v107)
    {
      sub_100026348( v150,  v151,  val,  a4,  v144,  7LL,  @"NWAPS_packets",  v57,  v139,  @"Tx Data Frame Counters",  @"SU MPDU Data");
      sub_100026348( v150,  v151,  val,  a4,  v144,  9LL,  @"NWAPS_packets",  v57,  v139,  @"Tx Data Frame Counters",  @"OFDMA MPDU Data");
    }

    sub_10002595C(v150, v55, @"NWATC_success", v57, v148, @"Completions", @"Success");
    sub_10002595C(v150, v55, @"NWATC_expired", v57, v148, @"Completions", @"Expired");
    sub_10002595C(v150, v55, @"NWATC_nobuf", v57, v148, @"Completions", @"No Buffers");
    sub_10002595C(v150, v55, @"NWATC_noack", v57, v148, @"Completions", @"No ACK");
    sub_10002595C(v150, v55, @"NWATC_txfailure", v57, v148, @"Completions", @"Tx Failure");
    sub_10002595C(v150, v55, @"NWATC_noresources", v57, v148, @"Completions", @"No Resources");
    sub_10002595C(v150, v55, @"NWATC_ioerror", v57, v148, @"Completions", @"IO Error");
    sub_10002595C(v150, v55, @"NWATC_mbfree", v57, v148, @"Completions", @"MB Free");
    sub_10002595C(v150, v55, @"NWATC_mbfree", v57, v148, @"Completions", @"MB Free");
    sub_10002595C(v150, v55, @"NWATC_chipmodeerror", v57, v148, @"Completions", @"Chip Mode Error");
    sub_10002595C(v150, v55, @"NWATC_noremotepeer", v57, v148, @"Completions", @"No Remote Peer");
    sub_10002595C(v150, v55, @"NWATC_internalerror", v57, v148, @"Completions", @"Internal Error");
    if (!sub_10002A2C0(v150, v151, @"NWAPS_rssiValue", v57, v141, @"LQM RSSI", @"LQM RSSI value"))
    {
      id v108 = WALogCategoryDefaultHandle();
      double v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v181 = 1024;
        int v182 = 789;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Mandatory IOReporter LQM RSSI value is missing",  buf,  0x12u);
      }

      if (!*a9)
      {
        NSErrorUserInfoKey v169 = NSLocalizedFailureReasonErrorKey;
        __int16 v170 = @"WAErrorCodeRSSIMissing";
        v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v170,  &v169,  1LL));
        *a9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9022LL,  v110));
      }
    }

    id v111 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    v112 = (void *)objc_claimAutoreleasedReturnValue([v111 objectForKeyedSubscript:v148]);
    id v113 = (void *)objc_claimAutoreleasedReturnValue([v112 objectForKeyedSubscript:@"RSSI"]);
    id v114 = (void *)objc_claimAutoreleasedReturnValue([v113 objectForKeyedSubscript:@"Core 0 RSSI value"]);

    if (v114) {
      sub_10002A2C0(v150, v151, @"NWAPS_rssiValue0", v57, v148, @"RSSI", @"Core 0 RSSI value");
    }
    id v115 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 objectForKeyedSubscript:v148]);
    v117 = (void *)objc_claimAutoreleasedReturnValue([v116 objectForKeyedSubscript:@"RSSI"]);
    id v118 = (void *)objc_claimAutoreleasedReturnValue([v117 objectForKeyedSubscript:@"Core 1 RSSI value"]);

    if (v118) {
      sub_10002A2C0(v150, v151, @"NWAPS_rssiValue1", v57, v148, @"RSSI", @"Core 1 RSSI value");
    }
    sub_10002A2C0(v150, v151, @"NWAPS_snrValue", v57, v141, @"LQM SNR", @"LQM SNR value");
    sub_10002595C(v150, v151, @"NWAPS_ccaValue", v57, v141, @"Average CCA", @"Interface Avgerage CCA");
    v119 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    v120 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:v141]);
    int v121 = (void *)objc_claimAutoreleasedReturnValue([v120 objectForKeyedSubscript:@"Noise Floor"]);
    unsigned __int8 v122 = (void *)objc_claimAutoreleasedReturnValue([v121 objectForKeyedSubscript:@"Noise Floor Value"]);

    if (v122) {
      sub_10002A2C0(v150, v151, @"NWAPS_nfValue", v57, v141, @"Noise Floor", @"Noise Floor Value");
    }
    char v123 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    id v124 = (void *)objc_claimAutoreleasedReturnValue([v123 objectForKeyedSubscript:v141]);
    id v125 = (void *)objc_claimAutoreleasedReturnValue([v124 objectForKeyedSubscript:@"OFDM Desense"]);
    id v126 = (void *)objc_claimAutoreleasedReturnValue([v125 objectForKeyedSubscript:@"OFDM Desense Value"]);

    if (v126) {
      sub_10002595C( v150,  v151,  @"NWAPS_ofdmDesense",  v57,  v141,  @"OFDM Desense",  @"OFDM Desense Value");
    }
    v127 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
    v128 = (void *)objc_claimAutoreleasedReturnValue([v127 objectForKeyedSubscript:v141]);
    v129 = (void *)objc_claimAutoreleasedReturnValue([v128 objectForKeyedSubscript:@"IBSS CCA"]);
    id v130 = (void *)objc_claimAutoreleasedReturnValue([v129 objectForKeyedSubscript:@"Interface IBSS CCA"]);

    if (v130)
    {
      sub_10002595C(v150, v151, @"NWAPS_ibssCCA", v57, v141, @"IBSS CCA", @"Interface IBSS CCA");
      sub_10002595C(v150, v151, @"NWAPS_obssCCA", v57, v141, @"OBSS CCA", @"Interface OBSS CCA");
      sub_10002595C( v150,  v151,  @"NWAPS_interferenceCCA",  v57,  v141,  @"Interference CCA",  @"Interface Interference CCA");
    }

    sub_10002595C(v150, v151, @"NWAPS_qbssCCA", v57, v141, @"QBSS Values", @"Channel Utilization");
    sub_10002595C(v150, v151, @"NWAPS_qbssSTACount", v57, v141, @"QBSS Values", @"Station Count");
  }

  else
  {
LABEL_51:

LABEL_52:
    id v64 = WALogCategoryDefaultHandle();
    __int128 v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v57]);
      __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 allKeys]);
      *(_DWORD *)buf = 136446722;
      id v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __we"
             "ak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDiction"
             "ary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnul"
             "l __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v181 = 1024;
      int v182 = 699;
      __int16 v183 = 2112;
      id v184 = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  buf,  0x1Cu);
    }

    id v68 = WALogCategoryDefaultHandle();
    __int128 v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __we"
             "ak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDiction"
             "ary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnul"
             "l __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v181 = 1024;
      int v182 = 822;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

    id v70 = 0LL;
  }

  objc_destroyWeak(&location);
}

    uint64_t v41 = WALogCategoryDefaultHandle();
    BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v46 = 136446466;
      uint64_t v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      id v48 = 1024;
      id v49 = 3648;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan was not successful",  (uint8_t *)&v46,  0x12u);
    }
  }

  else
  {
    id v17 = WALogCategoryDefaultHandle();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v46 = 136446466;
      uint64_t v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      id v48 = 1024;
      id v49 = 3641;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan was successful",  (uint8_t *)&v46,  0x12u);
    }

    id v19 = WALogCategoryDefaultHandle();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_signpost_enabled(v20))
    {
      LOWORD(v46) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity GetChannelApInfo",  (const char *)&unk_1000B76E7,  (uint8_t *)&v46,  2u);
    }

    id v21 = *(void **)(a1 + 32);
    id v22 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) fieldForKey:@"NWA_controllerStats"]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 subMessageValue]);
    [v21 populateChannelInfo:v23];

    [*(id *)(a1 + 32) populateApProfile:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    id v24 = WALogCategoryDefaultHandle();
    BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_signpost_enabled(v25))
    {
      LOWORD(v46) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity GetChannelApInfo",  (const char *)&unk_1000B76E7,  (uint8_t *)&v46,  2u);
    }
  }

  BOOL v42 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v43 = *(void **)(v42 + 40);
  *(void *)(v42 + 40) = v7;

  BOOL v44 = WALogCategoryDefaultHandle();
  id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
  if (os_signpost_enabled(v45))
  {
    LOWORD(v46) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v45,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity MissingChannelsRepopulate",  (const char *)&unk_1000B76E7,  (uint8_t *)&v46,  2u);
  }
}

void sub_100013384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, id a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id location)
{
}

void sub_1000133FC( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  objc_initWeak(&location, a5);
  id v17 = a7;
  id v103 = a8;
  unsigned __int8 v102 = a9;
  id v100 = objc_loadWeakRetained(&location);
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Interface %@ Peer 00:00:00:00:00:00",  v103));
  id v19 = v14;
  id v20 = v18;
  id v21 = v17;
  id v22 = v15;
  id v23 = v16;
  id v24 = sub_10002575C(v23);
  BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v25]);
  v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v20]);
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:@"TxCompletion Snapshot BE"]);

  if (v28)
  {
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v19 fieldForKey:@"DPSS_txCompletionSnapshotBE"]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 subMessageValue]);

    sub_10002595C(v23, v30, @"DPSPACTCS_success", v25, v20, @"TxCompletion Snapshot BE", @"Success");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_dropped",  v25,  v20,  @"TxCompletion Snapshot BE",  @"Miscellaneous Drops");
    sub_10002595C(v23, v30, @"DPSPACTCS_noBuf", v25, v20, @"TxCompletion Snapshot BE", @"NoBuff");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_noResources",  v25,  v20,  @"TxCompletion Snapshot BE",  @"NoResources");
    sub_10002595C(v23, v30, @"DPSPACTCS_noAck", v25, v20, @"TxCompletion Snapshot BE", @"NoAck");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_chipModeError",  v25,  v20,  @"TxCompletion Snapshot BE",  @"ChipModeError");
    sub_10002595C(v23, v30, @"DPSPACTCS_expired", v25, v20, @"TxCompletion Snapshot BE", @"Expired");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_txFailure",  v25,  v20,  @"TxCompletion Snapshot BE",  @"TxFailure");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_firmwareFreePacket",  v25,  v20,  @"TxCompletion Snapshot BE",  @"FirmwareFreePacket");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_maxRetries",  v25,  v20,  @"TxCompletion Snapshot BE",  @"MaxRetries");
    sub_10002595C( v23,  v30,  @"DPSPACTCS_forceLifetimeExp",  v25,  v20,  @"TxCompletion Snapshot BE",  @"ForceLifetimeExpired");

    int v31 = 1;
  }

  else
  {
    int v31 = 0;
  }

  id v32 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v25]);
  id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v20]);
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:@"TxCompletion Snapshot BK"]);

  if (v34)
  {
    char v35 = (void *)objc_claimAutoreleasedReturnValue([v19 fieldForKey:@"DPSS_txCompletionSnapshotBK"]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 subMessageValue]);

    sub_10002595C(v23, v36, @"DPSPACTCS_success", v25, v20, @"TxCompletion Snapshot BK", @"Success");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_dropped",  v25,  v20,  @"TxCompletion Snapshot BK",  @"Miscellaneous Drops");
    sub_10002595C(v23, v36, @"DPSPACTCS_noBuf", v25, v20, @"TxCompletion Snapshot BK", @"NoBuff");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_noResources",  v25,  v20,  @"TxCompletion Snapshot BK",  @"NoResources");
    sub_10002595C(v23, v36, @"DPSPACTCS_noAck", v25, v20, @"TxCompletion Snapshot BK", @"NoAck");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_chipModeError",  v25,  v20,  @"TxCompletion Snapshot BK",  @"ChipModeError");
    sub_10002595C(v23, v36, @"DPSPACTCS_expired", v25, v20, @"TxCompletion Snapshot BK", @"Expired");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_txFailure",  v25,  v20,  @"TxCompletion Snapshot BK",  @"TxFailure");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_firmwareFreePacket",  v25,  v20,  @"TxCompletion Snapshot BK",  @"FirmwareFreePacket");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_maxRetries",  v25,  v20,  @"TxCompletion Snapshot BK",  @"MaxRetries");
    sub_10002595C( v23,  v36,  @"DPSPACTCS_forceLifetimeExp",  v25,  v20,  @"TxCompletion Snapshot BK",  @"ForceLifetimeExpired");

    int v31 = 1;
  }

  id v37 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v25]);
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v20]);
  id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 objectForKeyedSubscript:@"TxCompletion Snapshot VO"]);

  if (v39)
  {
    BOOL v40 = (void *)objc_claimAutoreleasedReturnValue([v19 fieldForKey:@"DPSS_txCompletionSnapshotVO"]);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 subMessageValue]);

    sub_10002595C(v23, v41, @"DPSPACTCS_success", v25, v20, @"TxCompletion Snapshot VO", @"Success");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_dropped",  v25,  v20,  @"TxCompletion Snapshot VO",  @"Miscellaneous Drops");
    sub_10002595C(v23, v41, @"DPSPACTCS_noBuf", v25, v20, @"TxCompletion Snapshot VO", @"NoBuff");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_noResources",  v25,  v20,  @"TxCompletion Snapshot VO",  @"NoResources");
    sub_10002595C(v23, v41, @"DPSPACTCS_noAck", v25, v20, @"TxCompletion Snapshot VO", @"NoAck");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_chipModeError",  v25,  v20,  @"TxCompletion Snapshot VO",  @"ChipModeError");
    sub_10002595C(v23, v41, @"DPSPACTCS_expired", v25, v20, @"TxCompletion Snapshot VO", @"Expired");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_txFailure",  v25,  v20,  @"TxCompletion Snapshot VO",  @"TxFailure");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_firmwareFreePacket",  v25,  v20,  @"TxCompletion Snapshot VO",  @"FirmwareFreePacket");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_maxRetries",  v25,  v20,  @"TxCompletion Snapshot VO",  @"MaxRetries");
    sub_10002595C( v23,  v41,  @"DPSPACTCS_forceLifetimeExp",  v25,  v20,  @"TxCompletion Snapshot VO",  @"ForceLifetimeExpired");

    int v31 = 1;
  }

  BOOL v42 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v25]);
  id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKeyedSubscript:v20]);
  BOOL v44 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:@"TxCompletion Snapshot VI"]);

  if (v44)
  {
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v19 fieldForKey:@"DPSS_txCompletionSnapshotVI"]);
    BOOL v46 = (void *)objc_claimAutoreleasedReturnValue([v45 subMessageValue]);

    sub_10002595C(v23, v46, @"DPSPACTCS_success", v25, v20, @"TxCompletion Snapshot VI", @"Success");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_dropped",  v25,  v20,  @"TxCompletion Snapshot VI",  @"Miscellaneous Drops");
    sub_10002595C(v23, v46, @"DPSPACTCS_noBuf", v25, v20, @"TxCompletion Snapshot VI", @"NoBuff");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_noResources",  v25,  v20,  @"TxCompletion Snapshot VI",  @"NoResources");
    sub_10002595C(v23, v46, @"DPSPACTCS_noAck", v25, v20, @"TxCompletion Snapshot VI", @"NoAck");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_chipModeError",  v25,  v20,  @"TxCompletion Snapshot VI",  @"ChipModeError");
    sub_10002595C(v23, v46, @"DPSPACTCS_expired", v25, v20, @"TxCompletion Snapshot VI", @"Expired");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_txFailure",  v25,  v20,  @"TxCompletion Snapshot VI",  @"TxFailure");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_firmwareFreePacket",  v25,  v20,  @"TxCompletion Snapshot VI",  @"FirmwareFreePacket");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_maxRetries",  v25,  v20,  @"TxCompletion Snapshot VI",  @"MaxRetries");
    sub_10002595C( v23,  v46,  @"DPSPACTCS_forceLifetimeExp",  v25,  v20,  @"TxCompletion Snapshot VI",  @"ForceLifetimeExpired");
    id v47 = 0LL;
LABEL_10:

    goto LABEL_13;
  }

  if (!v31)
  {
    id v78 = WALogCategoryDefaultHandle();
    __int16 v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "void populateDPSPerACTxCompletionSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIORe"
                           "porterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSStrin"
                           "g * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NS"
                           "Error * _Nullable __autoreleasing * _Nullable)";
      __int16 v107 = 1024;
      int v108 = 2559;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Mandatory IOReporter TxCompletion Snapshot XX not found",  buf,  0x12u);
    }

    NSErrorUserInfoKey v105 = NSLocalizedFailureReasonErrorKey;
    *(void *)buf = @"WAErrorCodeTxCompletionSnapshotMissing";
    BOOL v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  &v105,  1LL));
    id v47 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9033LL,  v46));
    goto LABEL_10;
  }

  id v47 = 0LL;
LABEL_13:

  id v101 = v47;
  id v48 = v19;
  id v49 = v21;
  id v50 = v22;
  id v51 = v23;
  id v52 = (void *)objc_claimAutoreleasedReturnValue([v48 fieldForKey:@"DPSS_btSnapshot"]);
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 subMessageValue]);

  id v54 = sub_10002575C(v51);
  id v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
  id v56 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v55]);
  id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:@"BT Coex"]);
  BOOL v58 = v57 == 0LL;

  if (v58)
  {
    id v80 = WALogCategoryDefaultHandle();
    id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      id v82 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v55]);
      __int16 v83 = (void *)objc_claimAutoreleasedReturnValue([v82 allKeys]);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "void populateDPSBTCoexSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                           "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _No"
                           "nnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v107 = 1024;
      int v108 = 2579;
      __int16 v109 = 2112;
      v110 = v83;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  buf,  0x1Cu);
    }
  }

  else
  {
    BOOL v59 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v55]);
    id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 objectForKeyedSubscript:@"BT Coex"]);
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:@"Coex Snapshot"]);
    BOOL v62 = v61 == 0LL;

    if (!v62)
    {
      sub_10002595C( v51,  v53,  @"DPSBTS_duration",  v55,  @"BT Coex",  @"Coex Snapshot",  @"BTDuration(s)");
      sub_10002595C(v51, v53, @"DPSBTS_use", v55, @"BT Coex", @"Coex Snapshot", @"BTUse(%)");
      sub_1000292E0(v51, v53, @"DPSBTS_ts", v55, @"BT Coex", @"Coex Snapshot", @"TS(ms)");
      goto LABEL_16;
    }

    id v88 = WALogCategoryDefaultHandle();
    id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      id v89 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v55]);
      id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:@"BT Coex"]);
      v98 = (void *)objc_claimAutoreleasedReturnValue([v90 allKeys]);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "void populateDPSBTCoexSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                           "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _No"
                           "nnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v107 = 1024;
      int v108 = 2581;
      __int16 v109 = 2112;
      v110 = v98;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup, we have %@",  buf,  0x1Cu);
    }
  }

  id v91 = WALogCategoryDefaultHandle();
  id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateDPSBTCoexSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
                         "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnul"
                         "l __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    __int16 v107 = 1024;
    int v108 = 2590;
    _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_16:
  id v63 = v48;
  id v64 = v49;
  id v65 = v50;
  id v66 = v51;
  __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v63 fieldForKey:@"DPSS_awdlSnapshot"]);
  id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 subMessageValue]);

  id v69 = sub_10002575C(v66);
  id v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
  id v71 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v70]);
  NSErrorUserInfoKey v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:@"AWDL Metrics"]);
  BOOL v73 = v72 == 0LL;

  if (v73)
  {
    id v84 = WALogCategoryDefaultHandle();
    __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      id v86 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v70]);
      __int16 v87 = (void *)objc_claimAutoreleasedReturnValue([v86 allKeys]);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "void populateDPSAWDLSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
                           "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                           "ull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v107 = 1024;
      int v108 = 2604;
      __int16 v109 = 2112;
      v110 = v87;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find group, we have %@",  buf,  0x1Cu);
    }
  }

  else
  {
    id v74 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v70]);
    BOOL v75 = (void *)objc_claimAutoreleasedReturnValue([v74 objectForKeyedSubscript:@"AWDL Metrics"]);
    v76 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:@"AWDL Snapshot"]);
    BOOL v77 = v76 == 0LL;

    if (!v77)
    {
      sub_10002595C( v66,  v68,  @"DPSAWDLS_duration",  v70,  @"AWDL Metrics",  @"AWDL Snapshot",  @"AWDLDuration(s)");
      sub_10002595C( v66,  v68,  @"DPSAWDLS_use",  v70,  @"AWDL Metrics",  @"AWDL Snapshot",  @"AWDLUse(%)");
      sub_10002595C(v66, v68, @"DPSAWDLS_sdb", v70, @"AWDL Metrics", @"AWDL Snapshot", @"SDB");
      sub_1000292E0(v66, v68, @"DPSAWDLS_ts", v70, @"AWDL Metrics", @"AWDL Snapshot", @"TS(ms)");
      goto LABEL_19;
    }

    id v93 = WALogCategoryDefaultHandle();
    __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      id v94 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v70]);
      v95 = (void *)objc_claimAutoreleasedReturnValue([v94 objectForKeyedSubscript:@"AWDL Metrics"]);
      id v99 = (void *)objc_claimAutoreleasedReturnValue([v95 allKeys]);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "void populateDPSAWDLSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
                           "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                           "ull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v107 = 1024;
      int v108 = 2606;
      __int16 v109 = 2112;
      v110 = v99;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup, we have %@",  buf,  0x1Cu);
    }
  }

  id v96 = WALogCategoryDefaultHandle();
  v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "void populateDPSAWDLSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulator"
                         "MessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull "
                         "__strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    __int16 v107 = 1024;
    int v108 = 2616;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_19:
  v102[2](v102, v63, v101);

  objc_destroyWeak(&location);
}

void sub_1000146A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000146C4( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  objc_initWeak(&location, a5);
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = objc_loadWeakRetained(&location);
  id v22 = 0LL;
  sub_10000FB9C(v14, v17, v15, v16, &v22);
  id v21 = v22;

  v19[2](v19, v14, v21);
  objc_destroyWeak(&location);
}

void sub_1000147C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1000147D4(id a1)
{
  uint64_t v1 = (void *)qword_1000ECEF8;
  qword_1000ECEF8 = (uint64_t)&off_1000E0348;
}

void sub_1000147EC(id a1)
{
  uint64_t v1 = (void *)qword_1000ECF08;
  qword_1000ECF08 = (uint64_t)&off_1000E0360;
}

void sub_100014804(id a1)
{
  uint64_t v1 = (void *)qword_1000ECF00;
  qword_1000ECF00 = (uint64_t)&off_1000E0378;
}

void sub_10001481C(id a1)
{
  uint64_t v1 = (void *)qword_1000ECEE8;
  qword_1000ECEE8 = (uint64_t)&off_1000DFF08;
}

LABEL_30:
LABEL_31:
    id v4 = 0;
    goto LABEL_21;
  }

  v3 = v2;
  if (IOMainPort(0, &mainPort))
  {
    id v15 = WALogCategoryDefaultHandle();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v21 = "-[WAIOReporterMessagePopulator _getCCPipeDriverForWLAN]";
      id v22 = 1024;
      id v23 = 378;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:IOMasterPort failed",  buf,  0x12u);
    }

    CFRelease(v3);
    goto LABEL_31;
  }

  if (IOServiceGetMatchingServices(mainPort, v3, &existing))
  {
    id v17 = WALogCategoryDefaultHandle();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v21 = "-[WAIOReporterMessagePopulator _getCCPipeDriverForWLAN]";
      id v22 = 1024;
      id v23 = 381;
      id v14 = "%{public}s::%d:IOServiceGetMatchingServices failed";
      goto LABEL_29;
    }

    goto LABEL_30;
  }

  id v4 = IOIteratorNext(existing);
  if (v4)
  {
    while (1)
    {
      v5 = (const __CFString *)IORegistryEntrySearchCFProperty( v4,  "IOService",  @"LogIdentifier",  kCFAllocatorDefault,  3u);
      id v6 = CFGetTypeID(v5);
      if (v6 == CFStringGetTypeID() && CFStringCompare(v5, @"wlan0", 0LL) == kCFCompareEqualTo)
      {
        id v8 = WALogCategoryDefaultHandle();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446722;
        id v21 = "-[WAIOReporterMessagePopulator _getCCPipeDriverForWLAN]";
        id v22 = 1024;
        id v23 = 390;
        id v24 = 2112;
        BOOL v25 = v5;
        goto LABEL_19;
      }

      if (v5) {
        CFRelease(v5);
      }
      v5 = (const __CFString *)IORegistryEntrySearchCFProperty(v4, "IOService", @"Owner", kCFAllocatorDefault, 3u);
      int64_t v7 = CFGetTypeID(v5);
      if (v7 == CFStringGetTypeID()
        && CFStringCompare(v5, @"com.apple.driver.ACIWiFiDriver", 0LL) == kCFCompareEqualTo)
      {
        break;
      }

      if (v5) {
        CFRelease(v5);
      }
      id v4 = IOIteratorNext(existing);
      if (!v4) {
        goto LABEL_21;
      }
    }

    uint64_t v10 = WALogCategoryDefaultHandle();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446722;
    id v21 = "-[WAIOReporterMessagePopulator _getCCPipeDriverForWLAN]";
    id v22 = 1024;
    id v23 = 403;
    id v24 = 2112;
    BOOL v25 = v5;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Found Match %@", buf, 0x1Cu);
LABEL_20:

    CFRelease(v5);
  }
}

  id v22 = 0;
LABEL_19:

  return v22;
}

  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  id v20 = *(void *)(a1 + 104);
  id v21 = *(void **)(a1 + 32);
  id v22 = *(void *)(a1 + 40);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_10005F31C;
  v26[3] = &unk_1000CD578;
  objc_copyWeak(v32, (id *)buf);
  id v23 = *(void **)(a1 + 104);
  uint64_t v30 = *(void *)(a1 + 72);
  v32[1] = v23;
  v27 = *(id *)(a1 + 40);
  id v24 = *(id *)(a1 + 48);
  id v33 = *(_DWORD *)(a1 + 112);
  int v31 = *(void *)(a1 + 80);
  BOOL v25 = *(void *)(a1 + 32);
  id v28 = v24;
  id v29 = v25;
  [v21 _getNewMessageForKey:@"DPSCS" groupType:v20 forProcessToken:v22 shouldCheckForPrePopulation:1 andReply:v26];

  objc_destroyWeak(v32);
  objc_destroyWeak((id *)buf);
}

LABEL_21:
  IOObjectRelease(existing);
  return v4;
}
}

    id v4 = 0;
    goto LABEL_22;
  }

  if ((byte_1000ECF40 & 1) != 0)
  {
    id v4 = 1;
    goto LABEL_22;
  }

  v5 = 7;
  while (1)
  {
    id v6 = Apple80211Get(-[WAApple80211 apple80211Ref](self, "apple80211Ref"), 9LL, 0LL, v3, 8LL);
    int64_t v7 = v6;
    if (v6 <= 15)
    {
      if (v6 != -3905) {
        break;
      }
    }

    else if (v6 != 61 && v6 != 16)
    {
      goto LABEL_26;
    }

    if (!--v5) {
      break;
    }
    usleep(0x7A120u);
  }

  if (v6) {
    goto LABEL_26;
  }
  if (![v3 length])
  {
    uint64_t v10 = WALogCategoryDefaultHandle();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v18 = 136446722;
      id v19 = "-[WAApple80211 everAssociated]";
      id v20 = 1024;
      id v21 = 638;
      id v22 = 2112;
      id v23 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find APPLE80211KEY_BSSID in currentBSSID curBSSID %@",  (uint8_t *)&v18,  0x1Cu);
    }

    id v12 = WALogCategoryDefaultHandle();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      id v18 = 138412290;
      id v19 = v3;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Failed to find APPLE80211KEY_BSSID in currentBSSID curBSSID %@",  (uint8_t *)&v18,  0xCu);
    }

    goto LABEL_21;
  }

  byte_1000ECF40 = 1;
  id v8 = WALogCategoryDefaultHandle();
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = 136446722;
    id v19 = "-[WAApple80211 everAssociated]";
    id v20 = 1024;
    id v21 = 636;
    id v22 = 2112;
    id v23 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:everAssociated curBSSID %@",  (uint8_t *)&v18,  0x1Cu);
  }

  id v4 = byte_1000ECF40;
LABEL_22:

  return v4;
}

  objc_destroyWeak(&location);
}

void sub_100015100(_Unwind_Exception *a1)
{
}

void sub_100015114(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _freeIORCaches];
  id v3 = WALogCategoryDefaultHandle();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  os_signpost_id_t v6 = *(void *)(a1 + 40);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)int64_t v7 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_INTERVAL_END,  v6,  "IOR freeIORCaches",  (const char *)&unk_1000B76E7,  v7,  2u);
  }
}

void sub_100015884( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1000158A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [WeakRetained _runIOLegendTest];
}

void sub_100015F54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100015F74(id *a1)
{
}

LABEL_14:
LABEL_15:
    id v19 = 0LL;
    goto LABEL_16;
  }

  BOOL v25 = objc_claimAutoreleasedReturnValue([v13 objectAtIndex:2]);
  if (!v25)
  {
    id v37 = WALogCategoryDefaultHandle();
    char v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "-[WAIOReporterMessagePopulator doesChannelExistInStructuredDict:providerName:legCh:groupName:subgroupName:chinfo:]";
      BOOL v42 = 1024;
      id v43 = 573;
      uint64_t v36 = "%{public}s::%d:chName not valid";
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  id v19 = (void *)v25;
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v12]);
  v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v14]);
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v15]);
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:v19]);

  if (!v29)
  {
LABEL_16:
    LOBYTE(v21) = 0;
    goto LABEL_17;
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v13 objectAtIndex:0]);
  id v39 = [v30 unsignedLongLongValue];

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v12]);
  int v31 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v14]);
  id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v15]);
  id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v19]);

  LOBYTE(v21) = v39 == (id)IOReportChannelGetChannelID(v33);
LABEL_17:

  return v21;
}

    v5 = 0LL;
    goto LABEL_18;
  }

  v5 = v4;
  if (![v4 count])
  {
LABEL_18:
    id v9 = 1;
    goto LABEL_19;
  }

  os_signpost_id_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);

  if (!v6)
  {
    uint64_t v13 = WALogCategoryDefaultHandle();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[DPSQuickRecoveryRecommendationEngine isForegroundTrafficPresent]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 177;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:DeviceClient not present! Defaulting to screen state for decision!",  buf,  0x12u);
    }

    goto LABEL_18;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  int64_t v7 = off_1000ECFB8;
  id v19 = off_1000ECFB8;
  if (!off_1000ECFB8)
  {
    uint64_t v8 = (void *)sub_10003CC78();
    int64_t v7 = dlsym(v8, "WiFiDeviceClientGetAppState");
    *(void *)(*(void *)&buf[8] + 24LL) = v7;
    off_1000ECFB8 = v7;
  }

  _Block_object_dispose(buf, 8);
  if (!v7)
  {
    id v17 = dlerror();
    abort_report_np("%s", v17);
    __break(1u);
  }

  id v9 = ((unsigned int (*)(void *))v7)(v6) != 0;
LABEL_19:
  id v15 = CFRunLoopGetCurrent();
  sub_100035FAC((uint64_t)v2, (uint64_t)v15);
  if (v2) {
    CFRelease(v2);
  }

  return v9;
}
}

    int64_t v7 = 0LL;
    goto LABEL_5;
  }

  -[__CFDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kSecReturnData);
  id v4 = SecItemCopyMatching(v3, &result);
  if (v4)
  {
    id v11 = v4;
    id v12 = WALogCategoryDefaultHandle();
    os_signpost_id_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      id v18 = "-[WAEngine _getObscureKey]";
      id v19 = 1024;
      id v20 = 1712;
      id v21 = 1024;
      id v22 = v11;
      uint64_t v10 = "%{public}s::%d:Error back from SecItemCopyMatching(): %d";
      uint64_t v13 = v6;
      id v14 = 24;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v10, buf, v14);
      goto LABEL_14;
    }

    goto LABEL_14;
  }

  if (!result)
  {
    id v15 = WALogCategoryDefaultHandle();
    os_signpost_id_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v18 = "-[WAEngine _getObscureKey]";
      id v19 = 1024;
      id v20 = 1713;
      uint64_t v10 = "%{public}s::%d:Keychain didn't return any key data";
      goto LABEL_12;
    }

    goto LABEL_14;
  }

  v5 = objc_alloc(&OBJC_CLASS___NSString);
  os_signpost_id_t v6 = (os_log_s *)result;
  int64_t v7 = -[NSString initWithData:encoding:](v5, "initWithData:encoding:", result, 4LL);
LABEL_5:

  return v7;
}

LABEL_51:
        goto LABEL_52;
      }

      if ([v23 containsString:v57])
      {
        BOOL v25 = WALogCategoryDefaultHandle();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446978;
          id v64 = "-[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]";
          id v65 = 1024;
          id v66 = 641;
          __int128 v67 = 2112;
          id v68 = (int64_t)v57;
          id v69 = 2112;
          id v70 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found matching driver name %@ in dict as %@",  buf,  0x26u);
        }

        *a4 = 1;
      }

      v27 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v23]);
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectEnumerator]);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 nextObject]);

      if (!v29)
      {
        id v45 = WALogCategoryDefaultHandle();
        id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          id v64 = "-[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]";
          id v65 = 1024;
          id v66 = 646;
          __int128 v67 = 2112;
          id v68 = (int64_t)v23;
          BOOL v44 = "%{public}s::%d:Issue firstGroup %@ doesnt have value";
LABEL_44:
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v44, buf, 0x1Cu);
        }

        goto LABEL_51;
      }

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectEnumerator](v29, "objectEnumerator"));
      int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue([v30 nextObject]);

      if (!v31)
      {
        BOOL v46 = WALogCategoryDefaultHandle();
        int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          id v64 = "-[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]";
          id v65 = 1024;
          id v66 = 649;
          __int128 v67 = 2112;
          id v68 = 0LL;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Issue firstSubGroup %@ doesnt have value",  buf,  0x1Cu);
        }

        goto LABEL_50;
      }

      id v32 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectEnumerator](v31, "objectEnumerator"));
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 nextObject]);

      if (!v33)
      {
        id v47 = WALogCategoryDefaultHandle();
        id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          id v64 = "-[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]";
          id v65 = 1024;
          id v66 = 652;
          __int128 v67 = 2112;
          id v68 = 0LL;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Issue firstChannel %@ doesnt have value",  buf,  0x1Cu);
        }

LABEL_50:
        goto LABEL_51;
      }

      id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:@"DriverID"]);
      char v35 = [v34 unsignedLongLongValue];
      uint64_t v36 = entryID;

      if (v35 == (id)v36)
      {
        id v37 = WALogCategoryDefaultHandle();
        id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          id v64 = "-[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]";
          id v65 = 1024;
          id v66 = 655;
          __int128 v67 = 2112;
          id v68 = (int64_t)v33;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Found matching firstChannel %@ with matching drvID",  buf,  0x1Cu);
        }

        *a4 = 0;
        LOBYTE(v6) = 1;
        return v6;
      }
    }

    id v20 = [obj countByEnumeratingWithState:&v58 objects:v71 count:16];
    if (v20) {
      continue;
    }
    break;
  }

LABEL_52:
LABEL_53:
  LOBYTE(v6) = 0;
  return v6;
}

  return v18;
}

  uint64_t v53 = WALogCategoryDefaultHandle();
  id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    id v55 = "None";
    *(_DWORD *)buf = *((void *)v20 + 357);
    __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptoms"
          "Condition:isLANPingSuccessful:appUsage:averageCCA:]";
    if (!v48) {
      id v55 = v49;
    }
    id v80 = 1024;
    id v81 = 1023;
    id v82 = 2080;
    __int16 v83 = (id)v55;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: Recommendation for DNS Symptoms Recovery: %s",  buf,  0x1Cu);
  }

  if (v48)
  {
    id v56 = WALogCategoryDefaultHandle();
    id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v58 = objc_claimAutoreleasedReturnValue([v16 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
      BOOL v59 = (void *)v58;
      if (v58 >= 0xB) {
        id v60 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v58));
      }
      else {
        id v60 = off_1000CD060[(int)v58];
      }
      *(_DWORD *)buf = *((void *)v20 + 357);
      __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSympto"
            "msCondition:isLANPingSuccessful:appUsage:averageCCA:]";
      id v80 = 1024;
      id v81 = 1025;
      id v82 = 2112;
      __int16 v83 = v60;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: Suppressed Reason: %@",  buf,  0x1Cu);
    }
  }

  return v47;
}

LABEL_105:
      result = v6;
      break;
    default:
      result = 0LL;
      break;
  }

  return result;
}
                      }

                      __int128 v152 = [v161 countByEnumeratingWithState:&v179 objects:v203 count:16];
                    }

                    while (v152);
                  }

                  id v101 = WALogCategoryDefaultHandle();
                  unsigned __int8 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
                  if (os_signpost_enabled(v102))
                  {
                    *(_WORD *)id v189 = 0;
                    id v103 = v102;
                    uint64_t v104 = (const char *)&unk_1000B76E7;
                    NSErrorUserInfoKey v105 = 2;
LABEL_122:
                    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v103,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR Query and append IOReportLegend",  v104,  v189,  v105);
                  }

LABEL_25:
            if (v6->_drvPath && v6->_wlanType)
            {
              id v186 = 0u;
              id v187 = 0u;
              id v184 = 0u;
              v185 = 0u;
              id obj = (id)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator _buildPredicateList:wlan:]( v6,  "_buildPredicateList:wlan:",  a3));
              __int128 v159 = [obj countByEnumeratingWithState:&v184 objects:v206 count:16];
              if (!v159)
              {
                __int128 v157 = 0LL;
                __int128 v158 = 0LL;
                id v168 = 0LL;
                goto LABEL_138;
              }

              __int128 v157 = 0LL;
              __int128 v158 = 0LL;
              id v168 = 0LL;
              id v150 = *(void *)v185;
              *(void *)&id v24 = 136447490LL;
              id v148 = v24;
              while (1)
              {
                for (i = 0LL; i != v159; i = (char *)i + 1)
                {
                  if (*(void *)v185 != v150) {
                    objc_enumerationMutation(obj);
                  }
                  BOOL v25 = *(void **)(*((void *)&v184 + 1) + 8LL * (void)i);
                  BOOL v205 = 0u;
                  memset(buf, 0, sizeof(buf));
                  __int16 v183 = 0;
                  id v26 = WALogCategoryDefaultHandle();
                  v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
                  if (os_signpost_enabled(v27))
                  {
                    *(_WORD *)id v189 = 0;
                    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v27,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR Query and append IOReportLegend",  (const char *)&unk_1000B76E7,  v189,  2u);
                  }

                  id v28 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gbegin"]);
                  id v29 = v28 == 0LL;

                  if (!v29)
                  {
                    uint64_t v30 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gbegin"]);
                    int v31 = *(void **)buf;
                    *(void *)buf = v30;
                  }

                  id v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", @"gcont", v148));
                  id v33 = v32 == 0LL;

                  if (!v33)
                  {
                    id v34 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gcont"]);
                    char v35 = *(void **)&buf[8];
                    *(void *)&buf[8] = v34;
                  }

                  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gends"]);
                  id v37 = v36 == 0LL;

                  if (!v37)
                  {
                    id v38 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gends"]);
                    id v39 = *(void **)&buf[16];
                    *(void *)&buf[16] = v38;
                  }

                  BOOL v40 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gis"]);
                  uint64_t v41 = v40 == 0LL;

                  if (!v41)
                  {
                    BOOL v42 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"gis"]);
                    id v43 = *(void **)&buf[24];
                    *(void *)&buf[24] = v42;
                  }

                  BOOL v44 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgbegin"]);
                  id v45 = v44 == 0LL;

                  if (!v45)
                  {
                    BOOL v46 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgbegin"]);
                    id v47 = *(void **)&buf[32];
                    *(void *)&buf[32] = v46;
                  }

                  id v48 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgcont"]);
                  id v49 = v48 == 0LL;

                  if (!v49)
                  {
                    id v50 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgcont"]);
                    id v51 = *(void **)&buf[40];
                    *(void *)&buf[40] = v50;
                  }

                  id v52 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgends"]);
                  uint64_t v53 = v52 == 0LL;

                  if (!v53)
                  {
                    id v54 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgends"]);
                    id v55 = (void *)v205;
                    *(void *)&BOOL v205 = v54;
                  }

                  id v56 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgis"]);
                  id v57 = v56 == 0LL;

                  if (!v57)
                  {
                    BOOL v58 = objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"sgis"]);
                    BOOL v59 = (void *)*((void *)&v205 + 1);
                    *((void *)&v205 + 1) = v58;
                  }

                  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Legend Query Calls",  self->_cachedUsage,  self->_queue);
                  __int128 v167 = (void *)objc_claimAutoreleasedReturnValue([v169 getIOReportLegendItemsMatching:buf retErr:&v183]);
                  if (v183 == 1)
                  {
                    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Legend Query Failed",  self->_cachedUsage,  self->_queue);
                    -[WAIOReporterMessagePopulator _incrementPredicateCachedUsageWithPrefix:q:]( self,  "_incrementPredicateCachedUsageWithPrefix:q:",  @"Failed Pred: ",  buf);
                    id v60 = WALogCategoryDefaultHandle();
                    uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
                    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)id v189 = 136446722;
                      id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                      id v191 = 1024;
                      v192 = 949;
                      uint64_t v193 = 2112;
                      char v194 = (uint64_t)v25;
                      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:legendFetchError with getIOReportLegendItemsMatching pred %@",  v189,  0x1Cu);
                    }
                  }

                  if (![v167 count])
                  {
                    -[WAIOReporterMessagePopulator _incrementPredicateCachedUsageWithPrefix:q:]( self,  "_incrementPredicateCachedUsageWithPrefix:q:",  @"Zero Results Pred: ",  buf);
                    if ((-[NSMutableArray containsObject:]( self->_cachedPredicatesNotYetFound,  "containsObject:",  v25) & 1) != 0)
                    {
                      id v106 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"rare"]);
                      __int16 v107 = v106 == 0LL;

                      int v108 = WALogCategoryDefaultHandle();
                      __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
                      v110 = os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT);
                      if (!v107)
                      {
                        if (v110)
                        {
                          *(_DWORD *)id v189 = 136446722;
                          id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                          id v191 = 1024;
                          v192 = 964;
                          uint64_t v193 = 2112;
                          char v194 = (uint64_t)v25;
                          id v111 = v109;
                          v112 = "%{public}s::%d:Failed to discover known missing rare pred %@";
                          goto LABEL_119;
                        }
}

LABEL_120:
                        id v118 = WALogCategoryDefaultHandle();
                        unsigned __int8 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
                        if (!os_signpost_enabled(v102)) {
                          goto LABEL_123;
                        }
                        *(_DWORD *)id v189 = 138412290;
                        id v190 = (const char *)v25;
                        id v103 = v102;
                        uint64_t v104 = "Failed Dictionary %@";
                        NSErrorUserInfoKey v105 = 12;
                        goto LABEL_122;
                      }

                      if (!v110) {
                        goto LABEL_120;
                      }
                      *(_DWORD *)id v189 = 136446722;
                      id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                      id v191 = 1024;
                      v192 = 962;
                      uint64_t v193 = 2112;
                      char v194 = (uint64_t)v25;
                      id v111 = v109;
                      v112 = "%{public}s::%d:Failed to discover known missing pred %@";
                    }

                    else
                    {
                      id v113 = WALogCategoryDefaultHandle();
                      id v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
                      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
                      {
                        id v115 = -[NSMutableArray count](self->_cachedPredicatesNotYetFound, "count");
                        *(_DWORD *)id v189 = 136446978;
                        id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                        id v191 = 1024;
                        v192 = 956;
                        uint64_t v193 = 2048;
                        char v194 = (uint64_t)v115;
                        v195 = 2112;
                        uint64_t v196 = v25;
                        _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Adding _cachedPredicatesNotYetFound existing count %lu %@",  v189,  0x26u);
                      }

                      -[NSMutableArray addObject:](self->_cachedPredicatesNotYetFound, "addObject:", v25);
                      uint64_t v116 = WALogCategoryDefaultHandle();
                      __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
                      if (!os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT)) {
                        goto LABEL_120;
                      }
                      cachedPredicatesNotYetFound = self->_cachedPredicatesNotYetFound;
                      *(_DWORD *)id v189 = 136446722;
                      id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                      id v191 = 1024;
                      v192 = 959;
                      uint64_t v193 = 2112;
                      char v194 = (uint64_t)cachedPredicatesNotYetFound;
                      id v111 = v109;
                      v112 = "%{public}s::%d:_cachedPredicatesNotYetFound is now %@";
                    }

LABEL_119:
                    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, v112, v189, 0x1Cu);
                    goto LABEL_120;
                  }

                  BOOL v62 = WALogCategoryDefaultHandle();
                  id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                  {
                    id v64 = [v167 count];
                    *(_DWORD *)id v189 = 136446978;
                    id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                    id v191 = 1024;
                    v192 = 972;
                    uint64_t v193 = 2048;
                    char v194 = (uint64_t)v64;
                    v195 = 2112;
                    uint64_t v196 = v25;
                    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found %lu legends pred %@",  v189,  0x26u);
                  }

                  if (-[NSMutableArray containsObject:]( self->_cachedPredicatesNotYetFound,  "containsObject:",  v25))
                  {
                    id v65 = WALogCategoryDefaultHandle();
                    id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
                    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)id v189 = 136446722;
                      id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                      id v191 = 1024;
                      v192 = 975;
                      uint64_t v193 = 2112;
                      char v194 = (uint64_t)v25;
                      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found a previously missing pred %@",  v189,  0x1Cu);
                    }

                    -[NSMutableArray removeObject:](self->_cachedPredicatesNotYetFound, "removeObject:", v25);
                    __int128 v67 = WALogCategoryDefaultHandle();
                    id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
                    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                    {
                      id v69 = self->_cachedPredicatesNotYetFound;
                      *(_DWORD *)id v189 = 136446722;
                      id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                      id v191 = 1024;
                      v192 = 977;
                      uint64_t v193 = 2112;
                      char v194 = (uint64_t)v69;
                      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_cachedPredicatesNotYetFound is now %@",  v189,  0x1Cu);
                    }
                  }

                  __int16 v181 = 0u;
                  int v182 = 0u;
                  int v179 = 0u;
                  id v180 = 0u;
                  __int128 v161 = v167;
                  __int128 v152 = [v161 countByEnumeratingWithState:&v179 objects:v203 count:16];
                  if (v152)
                  {
                    __int128 v155 = *(void *)v180;
                    do
                    {
                      for (j = 0LL; j != v152; j = (char *)j + 1)
                      {
                        if (*(void *)v180 != v155) {
                          objc_enumerationMutation(v161);
                        }
                        id v70 = *(void **)(*((void *)&v179 + 1) + 8LL * (void)j);
                        __int128 v163 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:@"IOReportChannels"]);
                        __int128 v165 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:@"IOReportChannelInfo"]);
                        id v71 = objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:@"IOReportGroupName"]);
                        NSErrorUserInfoKey v72 = objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:@"IOReportSubGroupName"]);
                        if (v72) {
                          BOOL v73 = v71 == 0;
                        }
                        else {
                          BOOL v73 = 0;
                        }
                        if (!v73)
                        {
                          v177 = 0u;
                          __int16 v178 = 0u;
                          NSErrorUserInfoKey v175 = 0u;
                          uint64_t v176 = 0u;
                          __int128 v160 = v163;
                          id v74 = [v160 countByEnumeratingWithState:&v175 objects:v202 count:16];
                          uint64_t v153 = (void *)v71;
                          __int128 v154 = (void *)v72;
                          if (!v74) {
                            goto LABEL_101;
                          }
                          id v151 = *(void *)v176;
                          while (1)
                          {
                            id v149 = v74;
                            for (k = 0LL; k != v149; k = (char *)k + 1)
                            {
                              if (*(void *)v176 != v151) {
                                objc_enumerationMutation(v160);
                              }
                              v76 = *(void **)(*((void *)&v175 + 1) + 8LL * (void)k);
                              BOOL v77 = v168;
                              if (!v168)
                              {
                                id v90 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                                id v91 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKeyedSubscript:&off_1000DFFD0]);
                                id v92 = v91 == 0LL;

                                if (v92)
                                {
                                  Aggregate = (void *)IOReportCreateAggregate(0LL);
                                  id v94 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                                  [v94 setObject:Aggregate forKeyedSubscript:&off_1000DFFD0];
                                }

                                v95 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                                id v96 = objc_claimAutoreleasedReturnValue([v95 objectForKeyedSubscript:&off_1000DFFD0]);

                                BOOL v77 = (void *)v96;
                                if (!v96)
                                {
                                  v119 = WALogCategoryDefaultHandle();
                                  v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
                                  if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)id v189 = 136446466;
                                    id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                                    id v191 = 1024;
                                    v192 = 1014;
                                    _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to alloc drvchs",  v189,  0x12u);
                                  }

                                  int v121 = WALogCategoryDefaultHandle();
                                  unsigned __int8 v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
                                  if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)id v189 = 136446466;
                                    id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                                    id v191 = 1024;
                                    v192 = 1016;
                                    _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to alloc drvchs",  v189,  0x12u);
                                  }

                                  id v168 = 0LL;
                                  goto LABEL_131;
                                }
                              }

                              id v168 = v77;
                              id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 objectForKeyedSubscript:@"IOReportChannels"]);
                              if (!v78)
                              {
                                __int16 v79 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                                [v168 setObject:v79 forKeyedSubscript:@"IOReportChannels"];

                                id v78 = (void *)objc_claimAutoreleasedReturnValue( [v168 objectForKeyedSubscript:@"IOReportChannels"]);
                                if (!v78)
                                {
                                  id v140 = WALogCategoryDefaultHandle();
                                  unsigned __int8 v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
                                  if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)id v189 = 136446466;
                                    id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                                    id v191 = 1024;
                                    v192 = 1024;
                                    _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to retrieve or alloc chlist",  v189,  0x12u);
                                  }

LABEL_131:
                                  sub_100015F74((id *)buf);
                                  id v14 = (os_log_s *)obj;
                                  char v123 = obj;
                                  goto LABEL_132;
                                }
                              }

                              NSErrorUserInfoKey v173 = 0u;
                              __int16 v174 = 0u;
                              NSErrorUserInfoKey v171 = 0u;
                              char v172 = 0u;
                              id v80 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                              id v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:&off_1000DFFD0]);
                              id v82 = (void *)objc_claimAutoreleasedReturnValue([v81 objectForKeyedSubscript:@"IOReportChannels"]);

                              __int16 v83 = [v82 countByEnumeratingWithState:&v171 objects:v201 count:16];
                              if (v83)
                              {
                                id v84 = *(void *)v172;
                                while (2)
                                {
                                  for (m = 0LL; m != v83; m = (char *)m + 1)
                                  {
                                    if (*(void *)v172 != v84) {
                                      objc_enumerationMutation(v82);
                                    }
                                    ChannelID = IOReportChannelGetChannelID(*(void *)(*((void *)&v171 + 1)
                                                                                      + 8LL * (void)m));
                                    __int16 v87 = (void *)objc_claimAutoreleasedReturnValue([v76 objectAtIndex:0]);
                                    id v88 = [v87 unsignedLongLongValue];

                                    if (v88 == (id)ChannelID)
                                    {
                                      ++v157;
                                      goto LABEL_91;
                                    }
                                  }

                                  __int16 v83 = [v82 countByEnumeratingWithState:&v171 objects:v201 count:16];
                                  if (v83) {
                                    continue;
                                  }
                                  break;
                                }
                              }

                              id v89 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator createChannelWithProviderID:providerName:legCh:groupName:subgroupName:chinfo:]( self,  "createChannelWithProviderID:providerName:legCh:groupName:subgroupName:chinfo:",  self->_providerNum,  self->_drvName,  v76,  v153,  v154,  v165));
                              if (v89)
                              {
                                [v78 addObject:v89];
                                ++v158;
                              }

                              else
                              {
                                v97 = WALogCategoryDefaultHandle();
                                id v82 = (void *)objc_claimAutoreleasedReturnValue(v97);
                                if (os_log_type_enabled((os_log_t)v82, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)id v189 = v148;
                                  id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                                  id v191 = 1024;
                                  v192 = 1042;
                                  uint64_t v193 = 2112;
                                  char v194 = (uint64_t)v153;
                                  v195 = 2112;
                                  uint64_t v196 = v154;
                                  v197 = 2112;
                                  uint64_t v198 = v76;
                                  id v199 = 2112;
                                  v200 = v165;
                                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v82,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to create channel groupName %@ subgroup %@ legCh %@ chinfo %@, continuing",  v189,  0x3Au);
                                }

LABEL_91:
                                id v89 = 0LL;
                              }
                            }

                            id v74 = [v160 countByEnumeratingWithState:&v175 objects:v202 count:16];
                            if (!v74)
                            {
LABEL_101:

                              id v99 = v153;
                              v98 = (os_log_s *)v154;
                              goto LABEL_105;
                            }
                          }
                        }

                        id v100 = WALogCategoryDefaultHandle();
                        v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
                        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)id v189 = 136446722;
                          id v190 = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                          id v191 = 1024;
                          v192 = 989;
                          uint64_t v193 = 2112;
                          id v99 = (void *)v72;
                          char v194 = v72;
                          _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Unpacking legend yields subgroupName %@ with no groupName, continuing",  v189,  0x1Cu);
                        }

                        else
                        {
                          id v99 = (void *)v72;
                        }

LABEL_123:
                  sub_100015F74((id *)buf);
                }

                __int128 v159 = [obj countByEnumeratingWithState:&v184 objects:v206 count:16];
                if (!v159)
                {
LABEL_138:

                  v128 = WALogCategoryDefaultHandle();
                  v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
                  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1057;
                    *(_WORD *)&buf[18] = 2048;
                    *(void *)&buf[20] = v158;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = v157;
                    _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Finished finding IOReporter channels... Success - added %lu duplicate %lu",  buf,  0x26u);
                  }

                  id v130 = WALogCategoryDefaultHandle();
                  v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
                  if (os_signpost_enabled(v127))
                  {
                    *(_DWORD *)buf = 134217984;
                    *(void *)&uint8_t buf[4] = a3;
                    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v127,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR addDriverChannelsMatchingPredicateList",  "Mode %ld",  buf,  0xCu);
                  }

                  goto LABEL_142;
                }
              }
            }

            goto LABEL_143;
          }

          uint64_t v146 = WALogCategoryDefaultHandle();
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            goto LABEL_163;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 899;
          id v137 = "%{public}s::%d:failed to get _wlanType through getDriverType";
        }

        else
        {
          __int128 v145 = WALogCategoryDefaultHandle();
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            goto LABEL_163;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 896;
          id v137 = "%{public}s::%d:failed to get _drvPath through getIOReportingClassPath";
        }
      }

      else
      {
        id v144 = WALogCategoryDefaultHandle();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 893;
        id v137 = "%{public}s::%d:failed to alloc providerNum";
      }
    }

    else
    {
      __int128 v143 = WALogCategoryDefaultHandle();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 890;
      id v137 = "%{public}s::%d:Failed to get _drvName through getIOReportingDriverName";
    }

    goto LABEL_161;
  }

  __int128 v147 = WALogCategoryDefaultHandle();
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "-[WAIOReporterMessagePopulator _addDriverChannelsMatchingPredicateList:]";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 886;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = entryID;
    id v137 = "%{public}s::%d:Failed to convert IORegistryEntryGetRegistryEntryID %llx";
    id v138 = v14;
    id v139 = 28;
    goto LABEL_162;
  }

void sub_100019100(_Unwind_Exception *a1)
{
}

void sub_100019288(_Unwind_Exception *a1)
{
}

void sub_10001929C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 11LL)) {
    [WeakRetained _unpersistIORObjects];
  }
  [v3 _signalPotentialNewIORChannels];
  id v4 = WALogCategoryDefaultHandle();
  v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  os_signpost_id_t v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "IOR signalPotentialNewIORChannels",  (const char *)&unk_1000B76E7,  v8,  2u);
  }
}

LABEL_94:
            +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Denied",  self->_cachedUsage,  self->_queue);
            id v100 = WALogCategoryDefaultHandle();
            id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
            {
              unsigned __int8 v102 = self->_cachedUsage;
              *(_DWORD *)buf = 136446722;
              __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
              uint64_t v153 = 1024;
              __int128 v154 = 1358;
              __int128 v155 = 2112;
              __int128 v156 = *(double *)&v102;
              _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan not performed: %@",  buf,  0x1Cu);
            }

            goto LABEL_132;
          }

          if (v60)
          {
            id v92 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Rescan Reason: Low Channel Count"));
            *(_DWORD *)buf = 136446978;
            __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
            uint64_t v153 = 1024;
            __int128 v154 = 1249;
            __int128 v155 = 2112;
            __int128 v156 = *(double *)&v92;
            __int128 v157 = 2048;
            __int128 v158 = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan Budget OK: Missing Channels - previous rescans %@ - last check was %f s ago",  buf,  0x26u);
          }
        }

        else
        {
          id v91 = WALogCategoryDefaultHandle();
          BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
            uint64_t v153 = 1024;
            __int128 v154 = 1252;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan Budget OK: Missing Channels - first rescan",  buf,  0x12u);
          }
        }

        BOOL v46 = v27;

        +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Reason: Low Channel Count",  self->_cachedUsage,  self->_queue);
        cachedUsage = self->_cachedUsage;
        id v50 = @"Rescan Reason: Low Channel Date";
      }
    }

    else
    {
      id v51 = WALogCategoryDefaultHandle();
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
        uint64_t v153 = 1024;
        __int128 v154 = 1232;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan Budget OK: New Phy - granted",  buf,  0x12u);
      }

      BOOL v46 = v27;

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Reason: New Phy Count",  self->_cachedUsage,  self->_queue);
      cachedUsage = self->_cachedUsage;
      id v50 = @"Rescan Reason: New Phy Date";
    }
  }

  else
  {
    id v47 = WALogCategoryDefaultHandle();
    id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
      uint64_t v153 = 1024;
      __int128 v154 = 1223;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan Budget OK: New Interface - granted",  buf,  0x12u);
    }

    BOOL v46 = v27;

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Reason: New Interface Count",  self->_cachedUsage,  self->_queue);
    cachedUsage = self->_cachedUsage;
    id v50 = @"Rescan Reason: New Interface Date";
  }

  -[NSMutableDictionary removeObjectForKey:](cachedUsage, "removeObjectForKey:", v50);
  -[NSMutableDictionary setObject:forKey:](self->_cachedUsage, "setObject:forKey:", v3, v50);
LABEL_103:
  -[NSMutableDictionary removeObjectForKey:]( self->_cachedUsage,  "removeObjectForKey:",  @"Rescan Permitted: Last Rescan Date");
  -[NSMutableDictionary setObject:forKey:]( self->_cachedUsage,  "setObject:forKey:",  v3,  @"Rescan Permitted: Last Rescan Date");
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Permitted: Last Rescan Count",  self->_cachedUsage,  self->_queue);
  NSErrorUserInfoKey v105 = WALogCategoryDefaultHandle();
  id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
  __int16 v107 = v106;
  if ((v26 & 1) == 0)
  {
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
      uint64_t v153 = 1024;
      __int128 v154 = 1297;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:IORescan: New Interface found - rescanning",  buf,  0x12u);
    }

    int v108 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Interface Types Found after signal API"));
    __int16 v109 = (void *)objc_claimAutoreleasedReturnValue([v108 objectForKeyedSubscript:v24]);

    if (!v109)
    {
      v110 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v111 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Interface Types Found after signal API"));
      [v111 setObject:v110 forKeyedSubscript:v24];
    }

    v112 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Interface Types Found after signal API"));
    id v113 = (void *)objc_claimAutoreleasedReturnValue([v112 objectForKeyedSubscript:v24]);
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Permitted: Last Rescan Count",  v113,  self->_queue);

    id v114 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Interface Types Found after signal API"));
    id v115 = (void *)objc_claimAutoreleasedReturnValue([v114 objectForKeyedSubscript:v24]);
    uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 objectForKeyedSubscript:@"Rescan Permitted: Last Rescan Date"]);

    if (v116)
    {
      v117 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Interface Types Found after signal API"));
      id v118 = (void *)objc_claimAutoreleasedReturnValue([v117 objectForKeyedSubscript:v24]);
      [v118 setObject:0 forKeyedSubscript:@"Rescan Permitted: Last Rescan Date"];
    }

    v119 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Interface Types Found after signal API"));
    v120 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:v24]);
    [v120 setObject:v3 forKeyedSubscript:@"Rescan Permitted: Last Rescan Date"];

    int v121 = WALogCategoryDefaultHandle();
    unsigned __int8 v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
    if (!os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_130;
    }
    *(_DWORD *)buf = 136446466;
    __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
    uint64_t v153 = 1024;
    __int128 v154 = 1311;
    goto LABEL_129;
  }

  if (v12)
  {
    if ((v150 & 1) != 0)
    {
      if ((v46 & 1) != 0)
      {
        if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
          uint64_t v153 = 1024;
          __int128 v154 = 1349;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Rescan granted with no reason",  buf,  0x12u);
        }

        goto LABEL_132;
      }

      if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
        uint64_t v153 = 1024;
        __int128 v154 = 1340;
        _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:IORescan: Performing exploratory scan - rescanning",  buf,  0x12u);
      }

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Reason: Explore Count",  self->_cachedUsage,  self->_queue);
      -[NSMutableDictionary removeObjectForKey:]( self->_cachedUsage,  "removeObjectForKey:",  @"Rescan Reason: Explore Date");
      -[NSMutableDictionary setObject:forKey:]( self->_cachedUsage,  "setObject:forKey:",  v3,  @"Rescan Reason: Explore Date");
      __int128 v145 = WALogCategoryDefaultHandle();
      uint64_t v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
      if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
        uint64_t v153 = 1024;
        __int128 v154 = 1345;
        _os_log_impl( (void *)&_mh_execute_header,  v146,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _buildOrRescanToBuildChannelAvailabilityCaches:kWAIORIOReporterSearchUnfoundAndMutablePredicates",  buf,  0x12u);
      }

      -[WAIOReporterMessagePopulator _buildOrRescanToBuildChannelAvailabilityCaches:]( self,  "_buildOrRescanToBuildChannelAvailabilityCaches:",  1LL);
      __int128 v143 = self;
      id v144 = 1LL;
LABEL_131:
      -[WAIOReporterMessagePopulator _iorPreparedForSampling:](v143, "_iorPreparedForSampling:", v144);
      goto LABEL_132;
    }

    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
      uint64_t v153 = 1024;
      __int128 v154 = 1331;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:IORescan: Max channels still not found - rescanning",  buf,  0x12u);
    }

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Reason: Low Channel Count",  self->_cachedUsage,  self->_queue);
    -[NSMutableDictionary removeObjectForKey:]( self->_cachedUsage,  "removeObjectForKey:",  @"Rescan Reason: Low Channel Date");
    -[NSMutableDictionary setObject:forKey:]( self->_cachedUsage,  "setObject:forKey:",  v3,  @"Rescan Reason: Low Channel Date");
    id v142 = WALogCategoryDefaultHandle();
    unsigned __int8 v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
    if (!os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
    {
LABEL_130:

      -[WAIOReporterMessagePopulator _buildOrRescanToBuildChannelAvailabilityCaches:]( self,  "_buildOrRescanToBuildChannelAvailabilityCaches:",  1LL);
      __int128 v143 = self;
      id v144 = 0LL;
      goto LABEL_131;
    }

    *(_DWORD *)buf = 136446466;
    __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
    uint64_t v153 = 1024;
    __int128 v154 = 1336;
LABEL_129:
    _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _buildOrRescanToBuildChannelAvailabilityCaches:kWAIORIOReporterSearchUnfoundAndMutablePredicates",  buf,  0x12u);
    goto LABEL_130;
  }

  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int128 v152 = "-[WAIOReporterMessagePopulator _signalPotentialNewIORChannels]";
    uint64_t v153 = 1024;
    __int128 v154 = 1315;
    _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:IORescan: New Phy Type in use - scheduling rescanning",  buf,  0x12u);
  }

  char v123 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Phy Types Found after signal API"));
  id v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v149));
  id v125 = (void *)objc_claimAutoreleasedReturnValue([v123 objectForKeyedSubscript:v124]);

  if (!v125)
  {
    id v126 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v127 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Phy Types Found after signal API"));
    v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v149));
    [v127 setObject:v126 forKeyedSubscript:v128];
  }

  v129 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Phy Types Found after signal API"));
  id v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v149));
  id v131 = (void *)objc_claimAutoreleasedReturnValue([v129 objectForKeyedSubscript:v130]);
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Permitted: Last Rescan Count",  v131,  self->_queue);

  id v132 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Phy Types Found after signal API"));
  v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v149));
  id v134 = (void *)objc_claimAutoreleasedReturnValue([v132 objectForKeyedSubscript:v133]);
  id v135 = (void *)objc_claimAutoreleasedReturnValue([v134 objectForKeyedSubscript:@"Rescan Permitted: Last Rescan Date"]);

  if (v135)
  {
    id v136 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Phy Types Found after signal API"));
    id v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v149));
    id v138 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:v137]);
    [v138 setObject:0 forKeyedSubscript:@"Rescan Permitted: Last Rescan Date"];
  }

  id v139 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_cachedUsage,  "objectForKeyedSubscript:",  @"Phy Types Found after signal API"));
  id v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v149));
  id v141 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v140]);
  [v141 setObject:v3 forKeyedSubscript:@"Rescan Permitted: Last Rescan Date"];

  -[WAIOReporterMessagePopulator _delayedInvocationForRescan](self, "_delayedInvocationForRescan");
LABEL_132:
}

  v353 = (void *)objc_claimAutoreleasedReturnValue([v347 dpsCounterSampleAtIndex:v502]);
  v354 = (void *)objc_claimAutoreleasedReturnValue([v353 controllerStats]);
  id v355 = (void *)objc_claimAutoreleasedReturnValue([v354 aggregateMetrics]);
  __int128 v356 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v355 kRxGoodPLCP]));
  [v501 setObject:v356 forKeyedSubscript:@"RxGoodPLCPBeforeDecision"];

  id v357 = (void *)objc_claimAutoreleasedReturnValue([v347 dpsCounterSamples]);
  id v358 = (void *)objc_claimAutoreleasedReturnValue([v357 lastObject]);
  v359 = (void *)objc_claimAutoreleasedReturnValue([v358 controllerStats]);
  v360 = (void *)objc_claimAutoreleasedReturnValue([v359 aggregateMetrics]);
  id v361 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v360 kRxGoodPLCP]));
  [v501 setObject:v361 forKeyedSubscript:@"RxGoodPLCPAfterDecision"];

  int v362 = (void *)objc_claimAutoreleasedReturnValue([v347 dpsCounterSampleAtIndex:v502]);
  id v363 = (void *)objc_claimAutoreleasedReturnValue([v362 controllerStats]);
  v364 = (void *)objc_claimAutoreleasedReturnValue([v363 aggregateMetrics]);
  v365 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v364 kRxBadPLCP]));
  [v501 setObject:v365 forKeyedSubscript:@"RxBadPLCPBeforeDecision"];

  id v366 = (void *)objc_claimAutoreleasedReturnValue([v347 dpsCounterSamples]);
  id v367 = (void *)objc_claimAutoreleasedReturnValue([v366 lastObject]);
  id v368 = (void *)objc_claimAutoreleasedReturnValue([v367 controllerStats]);
  __int16 v369 = (void *)objc_claimAutoreleasedReturnValue([v368 aggregateMetrics]);
  v370 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v369 kRxBadPLCP]));
  [v501 setObject:v370 forKeyedSubscript:@"RxBadPLCPAfterDecision"];

  v371 = *(void **)(v500 + 40);
  v372 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadPLCPBeforeDecision"]);
  id v373 = [v372 integerValue];
  id v374 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxGoodPLCPBeforeDecision"]);
  id v375 = (char *)[v374 integerValue];
  v376 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadPLCPBeforeDecision"]);
  objc_msgSend(v371, "computePercentage:denomenator:", v373, &v375[(void)objc_msgSend(v376, "integerValue")]);
  id v378 = v377;

  v379 = *(void **)(v500 + 40);
  v380 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadPLCPAfterDecision"]);
  v381 = [v380 integerValue];
  v382 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxGoodPLCPAfterDecision"]);
  id v383 = (char *)[v382 integerValue];
  id v384 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadPLCPAfterDecision"]);
  objc_msgSend(v379, "computePercentage:denomenator:", v381, &v383[(void)objc_msgSend(v384, "integerValue")]);
  char v386 = v385;

  v387 = [*(id *)(v500 + 40) compareValues:(unint64_t)v378 second:(unint64_t)v386];
  if (v387 == (id)2)
  {
    [v501 setObject:@"AfterHigher" forKeyedSubscript:@"RxBadPLCPComparison"];
    id v389 = v386 - v378;
LABEL_100:
    id v390 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v389));
    [v501 setObject:v390 forKeyedSubscript:@"RxBadPLCPDifference"];

    id v388 = v503;
    goto LABEL_104;
  }

  if (v387 == (id)1)
  {
    [v501 setObject:@"BeforeHigher" forKeyedSubscript:@"RxBadPLCPComparison"];
    id v389 = v378 - v386;
    goto LABEL_100;
  }

  id v388 = v503;
  if (v387)
  {
    id v391 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v387));
    [v501 setObject:v391 forKeyedSubscript:@"RxBadPLCPComparison"];

    v392 = WALogCategoryDefaultHandle();
    uint64_t v393 = (os_log_s *)objc_claimAutoreleasedReturnValue(v392);
    if (os_log_type_enabled(v393, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v514 = 1024;
      v515 = 735;
      v516 = 2048;
      v517 = v378;
      v518 = 2048;
      v519 = v386;
      _os_log_impl( (void *)&_mh_execute_header,  v393,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Invalid Comparison result for Rx BadPLCP before:%f after:%f",  buf,  0x26u);
    }
  }

  else
  {
    [v501 setObject:@"Same" forKeyedSubscript:@"RxBadPLCPComparison"];
    [v501 setObject:&off_1000E0330 forKeyedSubscript:@"RxBadPLCPDifference"];
  }

LABEL_17:
    id v19 = WALogCategoryDefaultHandle();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v45 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]";
      BOOL v46 = 1024;
      id v47 = 1391;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Setting dispatch_source_set_event_handler",  buf,  0x12u);
    }

    id v21 = self->_rescanTimer;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10001B414;
    handler[3] = &unk_1000CCD80;
    handler[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)v21, handler);
    id v22 = WALogCategoryDefaultHandle();
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      id v45 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]";
      BOOL v46 = 1024;
      id v47 = 1402;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting block Done", buf, 0x12u);
    }

    goto LABEL_22;
  }

  uint64_t v13 = WALogCategoryDefaultHandle();
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v45 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]";
    BOOL v46 = 1024;
    id v47 = 1385;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Creating _rescanTimer",  buf,  0x12u);
  }

  id v15 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_queue);
  id v16 = self->_rescanTimer;
  self->_rescanTimer = v15;

  id v17 = WALogCategoryDefaultHandle();
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    id v45 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]";
    BOOL v46 = 1024;
    id v47 = 1387;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Creating _rescanTimer Done",  buf,  0x12u);
  }

  if (self->_rescanTimer) {
    goto LABEL_17;
  }
  BOOL v42 = WALogCategoryDefaultHandle();
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "Failed to create _timer", buf, 2u);
  }

LABEL_36:
}

LABEL_37:
  v119 = WALogCategoryDefaultHandle();
  v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
  if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v127 = "-[WAEngine init]";
    v128 = 1024;
    v129 = 551;
    _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:FAILED to initialize!",  buf,  0x12u);
  }

  __int16 v109 = 0LL;
LABEL_20:

  return v109;
}
}

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    return;
  }

  id v22 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    uint64_t v53 = 1024;
    id v54 = 4840;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attempting Rescan", buf, 0x12u);
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  BOOL v25 = v24;
  if (*(void *)(*(void *)(a1 + 32) + 664) && (objc_msgSend(v24, "timeIntervalSinceDate:"), v26 > 30.0))
  {
    v27 = WALogCategoryDefaultHandle();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      uint64_t v53 = 1024;
      id v54 = 4844;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Attemping determineChannelsPerIORPopulatable",  buf,  0x12u);
    }

    id v29 = WALogCategoryDefaultHandle();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_signpost_enabled(v30))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine LinkQualitySamples MissingChannelsRepopulate",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    int v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) iorMessagePopulator]);
    [v31 determineChannelsPerIORPopulatable];

    id v32 = *(void **)(a1 + 32);
    id v33 = *(void *)(a1 + 88);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    v46[2] = sub_10006786C;
    v46[3] = &unk_1000CD708;
    id v34 = *(void *)(a1 + 64);
    id v49 = *(void *)(a1 + 72);
    char v35 = *(id *)(a1 + 48);
    uint64_t v36 = *(void *)(a1 + 80);
    id v47 = v35;
    id v50 = v36;
    id v48 = *(id *)(a1 + 56);
    [v32 _getNewMessageForKey:@"WFAAWDLQM" groupType:v33 forProcessToken:v34 shouldCheckForPrePopulation:1 andReply:v46];
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 664LL), v25);
  }

  else
  {
    id v37 = WALogCategoryDefaultHandle();
    id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      id v39 = *(void *)(*(void *)(a1 + 32) + 664LL);
      *(_DWORD *)buf = 136446722;
      id v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      uint64_t v53 = 1024;
      id v54 = 4882;
      id v55 = 2112;
      id v56 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Rescanned too recently, waiting for 30s to elapse since last check at %@",  buf,  0x1Cu);
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  }

  BOOL v40 = WALogCategoryDefaultHandle();
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    uint64_t v53 = 1024;
    id v54 = 4885;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan Attempt Complete",  buf,  0x12u);
  }
}

id sub_10001B414(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446466;
    uint64_t v10 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]_block_invoke";
    __int16 v11 = 1024;
    int v12 = 1393;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:New Phy Type in use - rescanning",  (uint8_t *)&v9,  0x12u);
  }

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Rescan Reason: New Phy Count",  *(void *)(*(void *)(a1 + 32) + 80LL),  *(void *)(*(void *)(a1 + 32) + 48LL));
  [*(id *)(*(void *)(a1 + 32) + 80) removeObjectForKey:@"Rescan Reason: New Phy Date"];
  id v4 = *(void **)(*(void *)(a1 + 32) + 80LL);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v4 setObject:v5 forKey:@"Rescan Reason: New Phy Date"];

  id v6 = WALogCategoryDefaultHandle();
  os_signpost_id_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446466;
    uint64_t v10 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]_block_invoke";
    __int16 v11 = 1024;
    int v12 = 1398;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _buildOrRescanToBuildChannelAvailabilityCaches:kWAIORIOReporterSearchUnfoundAndMutablePredicates",  (uint8_t *)&v9,  0x12u);
  }

  [*(id *)(a1 + 32) _buildOrRescanToBuildChannelAvailabilityCaches:1];
  return [*(id *)(a1 + 32) _iorPreparedForSampling:0];
}

void sub_10001B664(_Unwind_Exception *a1)
{
}

void sub_10001B678(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 11LL)) {
    [WeakRetained _unpersistIORObjects];
  }
  id v4 = WALogCategoryDefaultHandle();
  v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446466;
    os_signpost_id_t v7 = "-[WAIOReporterMessagePopulator scanPredicatesNotYetFoundAndMutable]_block_invoke";
    __int16 v8 = 1024;
    int v9 = 1432;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _scanPredicatesWithMode:kWAIORIOReporterSearchUnfoundAndMutablePredicates",  (uint8_t *)&v6,  0x12u);
  }

  [v3 _scanPredicatesWithMode:1];
}

LABEL_9:
  if (a3 == 2)
  {
    int v12 = objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedPredicatesNotYetFound](self, "cachedPredicatesNotYetFound"));
    if (v12)
    {
      uint64_t v13 = (void *)v12;
      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedPredicatesNotYetFound](self, "cachedPredicatesNotYetFound"));
      id v15 = [v14 count];

      if (!v15)
      {
        id v39 = WALogCategoryDefaultHandle();
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        BOOL v40 = 136446466;
        uint64_t v41 = "-[WAIOReporterMessagePopulator _scanPredicatesWithMode:]";
        BOOL v42 = 1024;
        id v43 = 1454;
        id v38 = "%{public}s::%d:predicateSearch kWAIORIOReporterSearchUnfoundPredicates when cachedPredicatesNotYetFound co"
              "unt == 0 returning without scanning";
        goto LABEL_29;
      }
    }

    a3 = 2LL;
  }

  objc_autoreleasePoolPop(context);
  objc_destroyWeak(&location);
}

    goto LABEL_3;
  }

  SecItemDelete(v5);
  os_signpost_id_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 dataUsingEncoding:4]);
  -[__CFDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v7, kSecValueData);

  -[__CFDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  kSecAttrAccessibleAlways,  kSecAttrAccessible);
  __int16 v8 = SecItemAdd(v6, 0LL);
  if (v8)
  {
    id v16 = v8;
    id v17 = WALogCategoryDefaultHandle();
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v18 = 136446722;
      *(void *)&v18[4] = "-[WAEngine _rotateObscureKey]";
      *(_WORD *)&v18[12] = 1024;
      *(_DWORD *)&v18[14] = 1694;
      *(_WORD *)&v18[18] = 1024;
      *(_DWORD *)&v18[20] = v16;
      uint64_t v13 = "%{public}s::%d:Error back from SecItemUpdate()/SecItemAdd(): %d";
      id v14 = v12;
      id v15 = 24;
      goto LABEL_8;
    }

    goto LABEL_9;
  }

    goto LABEL_3;
  }

  __int16 v11 = SecItemAdd(v9, 0LL);
  if (v11)
  {
    id v16 = v11;
    id v17 = WALogCategoryDefaultHandle();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      id v20 = "-[WAEngine _saveKeyIVData:andTagData:]";
      id v21 = 1024;
      id v22 = 1753;
      id v23 = 1024;
      id v24 = v16;
      id v15 = "%{public}s::%d:Error back from SecItemUpdate()/SecItemAdd(): %d for Tag data";
      goto LABEL_8;
    }

    goto LABEL_9;
  }

    os_signpost_id_t v7 = 0LL;
    goto LABEL_3;
  }

  os_signpost_id_t v7 = (void *)result;
  if (!result)
  {
    id v15 = WALogCategoryDefaultHandle();
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      id v18 = "-[WAEngine _getDataFromKeychain:]";
      id v19 = 1024;
      id v20 = 1774;
      id v21 = 2112;
      v22[0] = v3;
      int v12 = "%{public}s::%d:Keychain didn't return any key data for %@";
      uint64_t v13 = v11;
      id v14 = 28;
      goto LABEL_8;
    }

    goto LABEL_9;
  }

LABEL_70:
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v49, @"IOReportChannels", (const void **)&value);
          if (value && CFArrayGetCount((CFArrayRef)value))
          {
            id v64 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
            if ([v64 isEqualToString:@"dunno"])
            {
            }

            else
            {
              id v65 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));

              if (v65)
              {
LABEL_77:
                id v69 = WALogCategoryDefaultHandle();
                id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
                if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
                {
                  id v71 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
                  *(_DWORD *)buf = 136446722;
                  id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                  id v131 = 1024;
                  id v132 = 1616;
                  v133 = 2112;
                  *(void *)id v134 = v71;
                  _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:InterfaceName is %@",  buf,  0x1Cu);
                }

                NSErrorUserInfoKey v72 = WALogCategoryDefaultHandle();
                BOOL v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                {
                  id v74 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                  BOOL v75 = (void *)objc_claimAutoreleasedReturnValue([v74 objectForKeyedSubscript:&off_1000DFFD0]);
                  v76 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:@"IOReportChannels"]);
                  BOOL v77 = [v76 count];
                  *(_DWORD *)buf = 136446978;
                  id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                  id v131 = 1024;
                  id v132 = 1619;
                  v133 = 2112;
                  *(void *)id v134 = &off_1000DFFD0;
                  *(_WORD *)&v134[8] = 2048;
                  id v135 = (unint64_t)v77;
                  _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Cached group %@ has size %lu",  buf,  0x26u);
                }

                int Count = CFArrayGetCount((CFArrayRef)value);
                __int16 v79 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                id v80 = (void *)objc_claimAutoreleasedReturnValue([v79 objectForKeyedSubscript:&off_1000DFFD0]);
                id v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:@"IOReportChannels"]);
                id v82 = [v81 count];

                if (v82 != (id)Count)
                {
                  __int16 v83 = WALogCategoryDefaultHandle();
                  id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
                  {
                    __int16 v85 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
                    id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKeyedSubscript:&off_1000DFFD0]);
                    __int16 v87 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                    id v88 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKeyedSubscript:&off_1000DFFD0]);
                    id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForKeyedSubscript:@"IOReportChannels"]);
                    id v90 = [v89 count];
                    *(_DWORD *)buf = 136447490;
                    id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                    id v131 = 1024;
                    id v132 = 1625;
                    v133 = 2112;
                    *(void *)id v134 = &off_1000DFFD0;
                    *(_WORD *)&v134[8] = 2112;
                    id v135 = (unint64_t)v86;
                    id v136 = 2048;
                    id v137 = (unint64_t)v90;
                    id v138 = 2048;
                    id v139 = Count;
                    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Found New Channels to add to cache for group %@, we know we should have %@, current cached channel size %lu new size %lu",  buf,  0x3Au);
                  }

                  self->_ioReportersCacheNeedsUpdating = 1;
                  -[WAIOReporterMessagePopulator _freeSubscriptionSample:]( self,  "_freeSubscriptionSample:",  &off_1000DFFD0);
                  id v91 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
                  id v92 = (void *)objc_claimAutoreleasedReturnValue([v91 objectForKeyedSubscript:&off_1000DFFD0]);
                  id v93 = [v92 unsignedIntValue];

                  if (Count > v93)
                  {
                    id v94 = WALogCategoryDefaultHandle();
                    v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
                    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                    {
                      id v96 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
                      v97 = (void *)objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:&off_1000DFFD0]);
                      *(_DWORD *)buf = 136447234;
                      id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                      id v131 = 1024;
                      id v132 = 1632;
                      v133 = 2112;
                      *(void *)id v134 = &off_1000DFFD0;
                      *(_WORD *)&v134[8] = 2112;
                      id v135 = (unint64_t)v97;
                      id v136 = 2048;
                      id v137 = Count;
                      _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Increasing max known channel count for group %@ from %@ to %lu",  buf,  0x30u);
                    }

                    v98 = -[NSNumber initWithUnsignedLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedLong:",  Count);
                    id v99 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
                    [v99 setObject:v98 forKeyedSubscript:&off_1000DFFD0];

                    goto LABEL_95;
                  }

                  id v100 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
                  id v101 = (void *)objc_claimAutoreleasedReturnValue([v100 objectForKeyedSubscript:&off_1000DFFD0]);
                  unsigned __int8 v102 = [v101 unsignedIntValue];

                  id v103 = WALogCategoryDefaultHandle();
                  uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
                  NSErrorUserInfoKey v105 = os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG);
                  if (Count == v102)
                  {
                    if (v105)
                    {
                      *(_DWORD *)buf = 136446722;
                      id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                      id v131 = 1024;
                      id v132 = 1635;
                      v133 = 2112;
                      *(void *)id v134 = &off_1000DFFD0;
                      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:All known channels for group %@ have been found",  buf,  0x1Cu);
                    }
                  }

                  else if (v105)
                  {
                    id v106 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedChannelsCountPerIORPopulatable]( self,  "cachedChannelsCountPerIORPopulatable"));
                    __int16 v107 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:&off_1000DFFD0]);
                    *(_DWORD *)buf = 136447234;
                    id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                    id v131 = 1024;
                    id v132 = 1637;
                    v133 = 2112;
                    *(void *)id v134 = &off_1000DFFD0;
                    *(_WORD *)&v134[8] = 2048;
                    id v135 = Count;
                    id v136 = 2112;
                    id v137 = (unint64_t)v107;
                    _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:There are still missing channels for group %@ have %lu expect %@",  buf,  0x30u);
                  }
                }

                if (Count)
                {
LABEL_95:
                  int v108 = (void *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator cachedIOPopAvailableChannels]( self,  "cachedIOPopAvailableChannels"));
                  [v108 setObject:v49 forKeyedSubscript:&off_1000DFFD0];

                  CFRelease(v49);
                  id v49 = 0LL;
                  __int16 v109 = "Success";
LABEL_96:
                  v110 = WALogCategoryDefaultHandle();
                  id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136446722;
                    id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                    id v131 = 1024;
                    id v132 = 1651;
                    v133 = 2080;
                    *(void *)id v134 = v109;
                    _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Finished Finding Channels and Building Caches... %s",  buf,  0x1Cu);
                  }

                  if (v49) {
                    CFRelease(v49);
                  }
                  -[WAIOReporterMessagePopulator _delayedInvocationForPersist](self, "_delayedInvocationForPersist");
                  v112 = WALogCategoryDefaultHandle();
                  id v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
                  if (os_signpost_enabled(v113))
                  {
                    *(_WORD *)buf = 0;
                    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v113,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR FindChannelsAndBuildChannelCaches",  (const char *)&unk_1000B76E7,  buf,  2u);
                  }

                  goto LABEL_102;
                }

                v120 = WALogCategoryDefaultHandle();
                id v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
                if (!os_log_type_enabled(v118, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_117;
                }
                *(_DWORD *)buf = 136446722;
                id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
                id v131 = 1024;
                id v132 = 1641;
                v133 = 2112;
                *(void *)id v134 = &off_1000DFFD0;
                v119 = "%{public}s::%d:Didn't find any channels for populatable: %@ ";
                int v121 = v118;
                unsigned __int8 v122 = 28;
                goto LABEL_116;
              }
            }

            id v66 = (void *)objc_claimAutoreleasedReturnValue(+[WAApple80211Manager sharedObject](&OBJC_CLASS___WAApple80211Manager, "sharedObject"));
            __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 getInfraApple80211]);

            if (v67)
            {
              id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 ifName]);
              -[WAIOReporterMessagePopulator setInfraInterfaceName:](self, "setInfraInterfaceName:", v68);

              goto LABEL_77;
            }

            char v123 = WALogCategoryDefaultHandle();
            id v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
            if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
              id v131 = 1024;
              id v132 = 1612;
              v119 = "%{public}s::%d:invalid apple80211API";
              goto LABEL_115;
            }
          }

          else
          {
            v117 = WALogCategoryDefaultHandle();
            id v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
            if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
              id v131 = 1024;
              id v132 = 1608;
              v119 = "%{public}s::%d:Failed to copy any channels (via IOReportCopyChannelsForDrivers())... all IOReporter"
                     " metrics disabled";
LABEL_115:
              int v121 = v118;
              unsigned __int8 v122 = 18;
LABEL_116:
              _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, v119, buf, v122);
            }
          }

  v233 = WALogCategoryDefaultHandle();
  id v234 = (os_log_s *)objc_claimAutoreleasedReturnValue(v233);
  if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
  {
    id v235 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxRetriesAfterDecision"]);
    v236 = [v235 integerValue];
    v237 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxFramesAfterDecision"]);
    id v238 = [v237 integerValue];
    *(_DWORD *)buf = 136446978;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 630;
    v516 = 2048;
    v517 = *(double *)&v236;
    v518 = 2048;
    v519 = *(double *)&v238;
    _os_log_impl( (void *)&_mh_execute_header,  v234,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Tx Retry after:%llu Tx Frames after:%llu",  buf,  0x26u);
  }

  id v239 = WALogCategoryDefaultHandle();
  id v240 = (os_log_s *)objc_claimAutoreleasedReturnValue(v239);
  if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 631;
    v516 = 2048;
    v517 = v219;
    v518 = 2048;
    v519 = v225;
    _os_log_impl( (void *)&_mh_execute_header,  v240,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Comparison result for Tx Retry before:%f after:%f",  buf,  0x26u);
  }

  id v241 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  id v242 = (void *)objc_claimAutoreleasedReturnValue([v241 peerStats]);
  id v243 = (void *)objc_claimAutoreleasedReturnValue([v242 completions]);
  id v244 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v243 success]));
  [v501 setObject:v244 forKeyedSubscript:@"TxCompletionSuccessBeforeDecision"];

  v245 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSamples]);
  v246 = (void *)objc_claimAutoreleasedReturnValue([v245 lastObject]);
  id v247 = (void *)objc_claimAutoreleasedReturnValue([v246 peerStats]);
  id v248 = (void *)objc_claimAutoreleasedReturnValue([v247 completions]);
  id v249 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v248 success]));
  [v501 setObject:v249 forKeyedSubscript:@"TxCompletionSuccessAfterDecision"];

  v250 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  BOOL v251 = (void *)objc_claimAutoreleasedReturnValue([v250 peerStats]);
  uint64_t v252 = (void *)objc_claimAutoreleasedReturnValue([v251 completions]);
  char v253 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v252 noack]));
  [v501 setObject:v253 forKeyedSubscript:@"TxCompletionNoAckBeforeDecision"];

  char v254 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSamples]);
  v255 = (void *)objc_claimAutoreleasedReturnValue([v254 lastObject]);
  v256 = (void *)objc_claimAutoreleasedReturnValue([v255 peerStats]);
  BOOL v257 = (void *)objc_claimAutoreleasedReturnValue([v256 completions]);
  id v258 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v257 noack]));
  [v501 setObject:v258 forKeyedSubscript:@"TxCompletionNoAckAfterDecision"];

  id v259 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  v260 = (void *)objc_claimAutoreleasedReturnValue([v259 peerStats]);
  v261 = (void *)objc_claimAutoreleasedReturnValue([v260 completions]);
  id v262 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v261 expired]));
  [v501 setObject:v262 forKeyedSubscript:@"TxCompletionExpiryBeforeDecision"];

  v263 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSamples]);
  v264 = (void *)objc_claimAutoreleasedReturnValue([v263 lastObject]);
  BOOL v265 = (void *)objc_claimAutoreleasedReturnValue([v264 peerStats]);
  v266 = (void *)objc_claimAutoreleasedReturnValue([v265 completions]);
  v267 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v266 expired]));
  [v501 setObject:v267 forKeyedSubscript:@"TxCompletionExpiryAfterDecision"];

  v497 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  v495 = (void *)objc_claimAutoreleasedReturnValue([v497 peerStats]);
  v493 = (void *)objc_claimAutoreleasedReturnValue([v495 completions]);
  LODWORD(v267) = [v493 chipmodeerror];
  v491 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  v489 = (void *)objc_claimAutoreleasedReturnValue([v491 peerStats]);
  v487 = (void *)objc_claimAutoreleasedReturnValue([v489 completions]);
  v268 = [v487 mbfree] + (_DWORD)v267;
  v485 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  v483 = (void *)objc_claimAutoreleasedReturnValue([v485 peerStats]);
  v481 = (void *)objc_claimAutoreleasedReturnValue([v483 completions]);
  LODWORD(v267) = [v481 noremotepeer];
  v478 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  v476 = (void *)objc_claimAutoreleasedReturnValue([v478 peerStats]);
  v475 = (void *)objc_claimAutoreleasedReturnValue([v476 completions]);
  v471 = v268 + (_DWORD)v267 + [v475 txfailure];
  id v269 = v227;
  v473 = (void *)objc_claimAutoreleasedReturnValue([v227 dpsCounterSampleAtIndex:v502]);
  BOOL v270 = (void *)objc_claimAutoreleasedReturnValue([v473 peerStats]);
  v271 = (void *)objc_claimAutoreleasedReturnValue([v270 completions]);
  LODWORD(v264) = [v271 noresources];
  v272 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSampleAtIndex:v502]);
  char v273 = (void *)objc_claimAutoreleasedReturnValue([v272 peerStats]);
  id v274 = (void *)objc_claimAutoreleasedReturnValue([v273 completions]);
  LODWORD(v266) = (_DWORD)v264 + [v274 ioerror];
  BOOL v275 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSampleAtIndex:v502]);
  id v276 = (void *)objc_claimAutoreleasedReturnValue([v275 peerStats]);
  id v277 = (void *)objc_claimAutoreleasedReturnValue([v276 completions]);
  id v278 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v471 + (_DWORD)v266 + [v277 internalerror]));
  [v501 setObject:v278 forKeyedSubscript:@"TxCompletionAllOtherErrorsBeforeDecision"];

  v498 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  v496 = (void *)objc_claimAutoreleasedReturnValue([v498 lastObject]);
  v494 = (void *)objc_claimAutoreleasedReturnValue([v496 peerStats]);
  v492 = (void *)objc_claimAutoreleasedReturnValue([v494 completions]);
  LODWORD(v277) = [v492 chipmodeerror];
  v490 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  v488 = (void *)objc_claimAutoreleasedReturnValue([v490 lastObject]);
  v486 = (void *)objc_claimAutoreleasedReturnValue([v488 peerStats]);
  v484 = (void *)objc_claimAutoreleasedReturnValue([v486 completions]);
  LODWORD(v274) = [v484 mbfree] + (_DWORD)v277;
  v482 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  v480 = (void *)objc_claimAutoreleasedReturnValue([v482 lastObject]);
  v479 = (void *)objc_claimAutoreleasedReturnValue([v480 peerStats]);
  v477 = (void *)objc_claimAutoreleasedReturnValue([v479 completions]);
  LODWORD(v277) = [v477 noremotepeer];
  v474 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  v472 = (void *)objc_claimAutoreleasedReturnValue([v474 lastObject]);
  v470 = (void *)objc_claimAutoreleasedReturnValue([v472 peerStats]);
  v469 = (void *)objc_claimAutoreleasedReturnValue([v470 completions]);
  v465 = (_DWORD)v274 + (_DWORD)v277 + [v469 txfailure];
  v468 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  v467 = (void *)objc_claimAutoreleasedReturnValue([v468 lastObject]);
  v466 = (void *)objc_claimAutoreleasedReturnValue([v467 peerStats]);
  v279 = (void *)objc_claimAutoreleasedReturnValue([v466 completions]);
  LODWORD(v277) = [v279 noresources];
  uint64_t v280 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  BOOL v281 = (void *)objc_claimAutoreleasedReturnValue([v280 lastObject]);
  char v282 = (void *)objc_claimAutoreleasedReturnValue([v281 peerStats]);
  v283 = (void *)objc_claimAutoreleasedReturnValue([v282 completions]);
  LODWORD(v275) = (_DWORD)v277 + [v283 ioerror];
  v284 = (void *)objc_claimAutoreleasedReturnValue([v269 dpsCounterSamples]);
  v285 = (void *)objc_claimAutoreleasedReturnValue([v284 lastObject]);
  BOOL v286 = (void *)objc_claimAutoreleasedReturnValue([v285 peerStats]);
  v287 = (void *)objc_claimAutoreleasedReturnValue([v286 completions]);
  v288 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v465 + (_DWORD)v275 + [v287 internalerror]));
  [v501 setObject:v288 forKeyedSubscript:@"TxCompletionAllOtherErrorsAfterDecision"];

  id v2 = v501;
  id v289 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionNoAckBeforeDecision"]);
  v290 = (char *)[v289 integerValue];
  v291 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionExpiryBeforeDecision"]);
  uint64_t v292 = &v290[(void)[v291 integerValue]];
  id v293 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionAllOtherErrorsBeforeDecision"]);
  v294 = (char *)[v293 integerValue] + (void)v292;

  v295 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionSuccessBeforeDecision"]);
  v296 = &v294[(void)[v295 integerValue]];

  [*(id *)(v500 + 40) computePercentage:v294 denomenator:v296];
  id v298 = v297;
  uint64_t v299 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionNoAckAfterDecision"]);
  char v300 = (char *)[v299 integerValue];
  v301 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionExpiryAfterDecision"]);
  id v302 = &v300[(void)[v301 integerValue]];
  BOOL v303 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionAllOtherErrorsAfterDecision"]);
  id v304 = (char *)[v303 integerValue] + (void)v302;

  v305 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxCompletionSuccessAfterDecision"]);
  v306 = &v304[(void)[v305 integerValue]];

  [*(id *)(v500 + 40) computePercentage:v304 denomenator:v306];
  v308 = v307;
  id v309 = [*(id *)(v500 + 40) compareValues:(unint64_t)v298 second:(unint64_t)v307];
  if (v309 == (id)2)
  {
    [v501 setObject:@"AfterHigher" forKeyedSubscript:@"TxCompletionFailureComparison"];
    v311 = v308 - v298;
LABEL_80:
    v312 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v311));
    [v501 setObject:v312 forKeyedSubscript:@"TxCompletionFailureDifference"];

    id v310 = v503;
    goto LABEL_84;
  }

  if (v309 == (id)1)
  {
    [v501 setObject:@"BeforeHigher" forKeyedSubscript:@"TxCompletionFailureComparison"];
    v311 = v298 - v308;
    goto LABEL_80;
  }

  id v310 = v503;
  if (v309)
  {
    v313 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v309));
    [v501 setObject:v313 forKeyedSubscript:@"TxCompletionFailureComparison"];

    v314 = WALogCategoryDefaultHandle();
    id v315 = (os_log_s *)objc_claimAutoreleasedReturnValue(v314);
    if (os_log_type_enabled(v315, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v514 = 1024;
      v515 = 680;
      v516 = 2048;
      v517 = v219;
      v518 = 2048;
      v519 = v225;
      _os_log_impl( (void *)&_mh_execute_header,  v315,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Invalid Comparison result for Tx Retry before:%f after:%f",  buf,  0x26u);
    }
  }

  else
  {
    [v501 setObject:@"Same" forKeyedSubscript:@"TxCompletionFailureComparison"];
    [v501 setObject:&off_1000E0330 forKeyedSubscript:@"TxCompletionFailureDifference"];
  }

LABEL_117:
LABEL_118:
          __int16 v109 = "Failure";
          goto LABEL_96;
        }

        BOOL v42 = WALogCategoryDefaultHandle();
        id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
          id v131 = 1024;
          id v132 = 1564;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:No WiFi Channels exist in cache",  buf,  0x12u);
        }

        BOOL v44 = WALogCategoryDefaultHandle();
        id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
          id v131 = 1024;
          id v132 = 1566;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _scanPredicatesWithMode:kWAIORIOReporterSearchAllStaticPredicates",  buf,  0x12u);
        }

        -[WAIOReporterMessagePopulator _scanPredicatesWithMode:](self, "_scanPredicatesWithMode:", 0LL);
        goto LABEL_55;
      }

      id v23 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](self, "cachedIOReportSample"));
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:&off_1000DFFD0]);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"structuredDict"]);

      if (v25)
      {
        id v26 = -[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]( self,  "doesDriverHaveChannelsInStructuredDict:containsStale:",  1LL,  &v126);
        LODWORD(v22) = -[WAIOReporterMessagePopulator doesDriverHaveChannelsInStructuredDict:containsStale:]( self,  "doesDriverHaveChannelsInStructuredDict:containsStale:",  0LL,  (char *)&v126 + 1);
        v27 = WALogCategoryDefaultHandle();
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
        {
          id v28 = "is found";
          id v29 = "is";
          if ((_DWORD)v22) {
            uint64_t v30 = "is found";
          }
          else {
            uint64_t v30 = "is not found";
          }
          id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
          id v131 = 1024;
          id v132 = 1550;
          *(void *)id v134 = v30;
          if (HIBYTE(v126)) {
            int v31 = "is";
          }
          else {
            int v31 = "is not";
          }
          *(_DWORD *)buf = 136447490;
          if (!v26) {
            id v28 = "is not found";
          }
          v133 = 2080;
          *(_WORD *)&v134[8] = 2080;
          id v135 = (unint64_t)v31;
          if (!(_BYTE)v126) {
            id v29 = "is not";
          }
          id v136 = 2080;
          id v137 = (unint64_t)v28;
          id v138 = 2080;
          id v139 = (unint64_t)v29;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WiFi %s and %s stale, CoreCapture %s and %s stale",  buf,  0x3Au);
        }

        goto LABEL_34;
      }
    }

    id v26 = 0;
    LODWORD(v22) = 0;
    goto LABEL_35;
  }

  if (a3 != 2) {
    goto LABEL_15;
  }
  uint64_t v13 = objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedPredicatesNotYetFound](self, "cachedPredicatesNotYetFound"));
  if (!v13
    || (id v14 = (void *)v13,
        id v15 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedPredicatesNotYetFound](self, "cachedPredicatesNotYetFound")),
        id v16 = [v15 count],
        v15,
        v14,
        v16))
  {
    a3 = 2LL;
    goto LABEL_15;
  }

  id v114 = WALogCategoryDefaultHandle();
  id v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v130 = "-[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]";
    id v131 = 1024;
    id v132 = 1539;
    _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:predicateSearch kWAIORIOReporterSearchUnfoundPredicates when cachedPredicatesNotYetFound count == 0 returning without scanning",  buf,  0x12u);
  }

LABEL_102:
}
}

LABEL_126:
        uint64_t v30 = 0LL;
        LOBYTE(updated) = 0;
        goto LABEL_96;
      }

LABEL_133:
      uint64_t v30 = 0LL;
      id v168 = 0;
LABEL_97:
      id v125 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](v4, "cachedIOReportSubbedChannels"));
      id v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
      v127 = (void *)objc_claimAutoreleasedReturnValue([v125 objectForKeyedSubscript:v126]);
      v128 = objc_claimAutoreleasedReturnValue([v127 objectForKeyedSubscript:@"iorsub"]);
      if (v128)
      {
        v129 = (void *)v128;
        id v130 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
        id v131 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
        __int128 v167 = v130;
        id v132 = (void *)objc_claimAutoreleasedReturnValue([v130 objectForKeyedSubscript:v131]);
        v133 = objc_claimAutoreleasedReturnValue([v132 objectForKeyedSubscript:@"sampleValues"]);
        if (v133)
        {
          id v134 = (void *)v133;
          __int128 v166 = v125;
          id v135 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
          id v136 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
          id v137 = v30;
          id v138 = (void *)objc_claimAutoreleasedReturnValue([v135 objectForKeyedSubscript:v136]);
          __int128 v165 = v126;
          id v139 = (void *)objc_claimAutoreleasedReturnValue([v138 objectForKeyedSubscript:@"structuredDict"]);

          uint64_t v30 = v137;
          int v6 = &AnalyticsSendEventLazy_ptr;
          if (v139)
          {
            int v31 = 1;
LABEL_104:
            __int128 v143 = WALogCategoryDefaultHandle();
            id v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
            if (os_signpost_enabled(v144))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v144,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR Prepare IOReporter",  (const char *)&unk_1000B76E7,  buf,  2u);
            }

            goto LABEL_107;
          }

LABEL_103:
          id v140 = (void *)objc_claimAutoreleasedReturnValue([v6[107] numberWithUnsignedInteger:5]);
          -[WAIOReporterMessagePopulator _freeSubscriptionSample:](v169, "_freeSubscriptionSample:", v140);

          +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Unprepared For Sample Count",  v169->_cachedUsage,  v169->_queue);
          -[NSMutableDictionary removeObjectForKey:]( v169->_cachedUsage,  "removeObjectForKey:",  @"IOR Unprepared For Sample Date");
          cachedUsage = v169->_cachedUsage;
          id v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          -[NSMutableDictionary setObject:forKey:]( cachedUsage,  "setObject:forKey:",  v142,  @"IOR Unprepared For Sample Date");

          int v31 = v168;
          goto LABEL_104;
        }

        int v6 = &AnalyticsSendEventLazy_ptr;
      }

      goto LABEL_103;
    }

    id v43 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](v4, "cachedIOReportSubbedChannels"));
    BOOL v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v44]);

    if (!v45)
    {
      BOOL v46 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v47 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](v4, "cachedIOReportSubbedChannels"));
      id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
      [v47 setObject:v46 forKeyedSubscript:v48];
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](v4, "cachedIOReportSubbedChannels"));
    id v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
    id v51 = (void *)objc_claimAutoreleasedReturnValue([v49 objectForKeyedSubscript:v50]);
    [v51 setObject:v40 forKeyedSubscript:@"iorsub"];

    id v52 = WALogCategoryDefaultHandle();
    uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_signpost_enabled(v53))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v53,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportCreateSubscription",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

LABEL_33:
    id v54 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](v4, "cachedIOReportSubbedChannels"));
    id v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
    id v56 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:v55]);
    id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:@"iorsub"]);

    if (!v57)
    {
      uint64_t v146 = WALogCategoryDefaultHandle();
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
        __int16 v174 = 1024;
        NSErrorUserInfoKey v175 = 1740;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Don't have iorsub, bailing",  buf,  0x12u);
      }

      goto LABEL_126;
    }

    BOOL v58 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
    BOOL v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
    id v60 = objc_claimAutoreleasedReturnValue([v58 objectForKeyedSubscript:v59]);
    if (v60)
    {
      uint64_t v61 = (void *)v60;
      BOOL v62 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
      id v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
      id v64 = (void *)objc_claimAutoreleasedReturnValue([v62 objectForKeyedSubscript:v63]);
      id v65 = (void *)objc_claimAutoreleasedReturnValue([v64 objectForKeyedSubscript:@"sampleValues"]);

      if (v65)
      {
        id v66 = 0LL;
        int v6 = &AnalyticsSendEventLazy_ptr;
        __int128 v67 = &AnalyticsSendEventLazy_ptr;
        goto LABEL_63;
      }
    }

    else
    {
    }

    id v68 = cf;
    id v69 = WALogCategoryDefaultHandle();
    id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    id v71 = v70;
    if (!v68)
    {
      int v6 = &AnalyticsSendEventLazy_ptr;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
        __int16 v174 = 1024;
        NSErrorUserInfoKey v175 = 1745;
        uint64_t v176 = 2112;
        v177 = @"WAIORPopSuperSet";
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:sampleValues not yet saved, but subbedChannelsRef isn't set - state mismatch for: %@, clearing cache",  buf,  0x1Cu);
      }

      uint64_t v30 = 0LL;
      LOBYTE(updated) = 0;
      id v4 = v169;
      goto LABEL_96;
    }

    int v6 = &AnalyticsSendEventLazy_ptr;
    __int128 v67 = &AnalyticsSendEventLazy_ptr;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
      __int16 v174 = 1024;
      NSErrorUserInfoKey v175 = 1747;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:cachedIOReportSample nil - running and caching IOReportCreateSamples",  buf,  0x12u);
    }

    NSErrorUserInfoKey v72 = WALogCategoryDefaultHandle();
    BOOL v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
    id v4 = v169;
    if (os_signpost_enabled(v73))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v73,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportCreateSamples",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"CreateSamples Calls",  v169->_cachedUsage,  v169->_queue);
    id v74 = (void *)IOReportCreateSamples(v57, cf, &v170);
    if (cf)
    {
      CFRelease(cf);
      cf = 0LL;
    }

    BOOL v75 = WALogCategoryDefaultHandle();
    v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
    if (os_signpost_enabled(v76))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v76,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportCreateSamples",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    if (v169->_failNextCreateOrUpdateSample)
    {
      BOOL v77 = WALogCategoryDefaultHandle();
      id v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
        __int16 v174 = 1024;
        NSErrorUserInfoKey v175 = 1762;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Injecting Error to IOReportCreateSamples due to _failNextCreateOrUpdateSample",  buf,  0x12u);
      }

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Fault Injection: Create or Update Sample Error",  v169->_cachedUsage,  v169->_queue);
      __int16 v79 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainPOSIX, 1LL, 0LL);
      __int16 v170 = v79;
      v169->_failNextCreateOrUpdateSample = 0;
      if (!v74) {
        goto LABEL_55;
      }
    }

    else
    {
      __int16 v79 = v170;
      if (!v74) {
        goto LABEL_55;
      }
    }

    if (!v79)
    {
      id v80 = 0LL;
LABEL_56:
      if (v74 && !v80)
      {
        id v81 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v169, "cachedIOReportSample"));
        id v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
        __int16 v83 = (void *)objc_claimAutoreleasedReturnValue([v81 objectForKeyedSubscript:v82]);

        if (!v83)
        {
          id v84 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          __int16 v85 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v169, "cachedIOReportSample"));
          id v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
          [v85 setObject:v84 forKeyedSubscript:v86];
        }

        __int16 v87 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v169, "cachedIOReportSample"));
        id v88 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
        id v89 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKeyedSubscript:v88]);
        [v89 setObject:v74 forKeyedSubscript:@"sampleValues"];

        id v90 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v169, "cachedIOReportSample"));
        id v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
        id v92 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKeyedSubscript:v91]);
        id v66 = (void *)objc_claimAutoreleasedReturnValue([v92 objectForKeyedSubscript:@"sampleValues"]);

        id v93 = WALogCategoryDefaultHandle();
        id v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
          __int16 v174 = 1024;
          NSErrorUserInfoKey v175 = 1782;
          uint64_t v176 = 2112;
          v177 = @"WAIORPopSuperSet";
          _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Stored new sampleValues for enum %@",  buf,  0x1Cu);
        }

        id v3 = 0;
LABEL_63:
        v95 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
        id v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
        v97 = (void *)objc_claimAutoreleasedReturnValue([v95 objectForKeyedSubscript:v96]);
        v98 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKeyedSubscript:@"structuredDict"]);

        if (v98)
        {
          uint64_t v30 = 0LL;
        }

        else
        {
          id v99 = WALogCategoryDefaultHandle();
          id v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
          if (os_signpost_enabled(v100))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v100,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR createStructuredIOReportDictionary",  (const char *)&unk_1000B76E7,  buf,  2u);
          }

          id v101 = WALogCategoryDefaultHandle();
          unsigned __int8 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446722;
            NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
            __int16 v174 = 1024;
            NSErrorUserInfoKey v175 = 1789;
            uint64_t v176 = 2112;
            v177 = @"WAIORPopSuperSet";
            _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Making createStructuredIOReportDictionary for %@",  buf,  0x1Cu);
          }

          uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]( v4,  "_createStructuredIOReportDictionary:",  v66));
          id v103 = WALogCategoryDefaultHandle();
          uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
          if (os_signpost_enabled(v104))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v104,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR createStructuredIOReportDictionary",  (const char *)&unk_1000B76E7,  buf,  2u);
          }

          NSErrorUserInfoKey v105 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
          id v106 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
          __int16 v107 = (void *)objc_claimAutoreleasedReturnValue([v105 objectForKeyedSubscript:v106]);
          [v107 setObject:v30 forKeyedSubscript:@"structuredDict"];
        }

        if (v3 != 1)
        {
          LOBYTE(updated) = 0;
          goto LABEL_89;
        }

        int v108 = WALogCategoryDefaultHandle();
        __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
        if (os_signpost_enabled(v109))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v109,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportUpdateSamples",  (const char *)&unk_1000B76E7,  buf,  2u);
        }

        v110 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](v4, "cachedIOReportSample"));
        id v111 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  5LL));
        v112 = (void *)objc_claimAutoreleasedReturnValue([v110 objectForKeyedSubscript:v111]);
        id v113 = (void *)objc_claimAutoreleasedReturnValue([v112 objectForKeyedSubscript:@"sampleValues"]);

        [v67[126] incrementValueForKey:@"UpdateSamples Calls" inMutableDict:v4->_cachedUsage onQueue:v4->_queue];
        updated = IOReportUpdateSamples(v113, v57, &v170);
        id v115 = WALogCategoryDefaultHandle();
        uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
        if (os_signpost_enabled(v116))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v116,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportUpdateSamples",  (const char *)&unk_1000B76E7,  buf,  2u);
        }

        if (v4->_failNextCreateOrUpdateSample)
        {
          v117 = WALogCategoryDefaultHandle();
          id v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
          if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
            __int16 v174 = 1024;
            NSErrorUserInfoKey v175 = 1812;
            _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Injecting Error to IOReportUpdateSamples due to _failNextCreateOrUpdateSample",  buf,  0x12u);
          }

          [v67[126] incrementValueForKey:@"Fault Injection: Create or Update Sample Error" inMutableDict:v4->_cachedUsage onQueue:v4->_queue];
          v119 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainPOSIX, 1LL, 0LL);
          __int16 v170 = v119;
          v4->_failNextCreateOrUpdateSample = 0;
          if (!v113) {
            goto LABEL_86;
          }
        }

        else
        {
          v119 = v170;
          if (!v113) {
            goto LABEL_86;
          }
        }

        if (!v119)
        {
          v120 = 1;
LABEL_87:
          if (!updated || !v120)
          {
            __int128 v161 = WALogCategoryDefaultHandle();
            __int128 v162 = (os_log_s *)objc_claimAutoreleasedReturnValue(v161);
            if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
              __int16 v174 = 1024;
              NSErrorUserInfoKey v175 = 1822;
              uint64_t v176 = 2112;
              v177 = @"WAIORPopSuperSet";
              _os_log_impl( (void *)&_mh_execute_header,  v162,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:IOReportUpdateSamples failed for populatable: %@",  buf,  0x1Cu);
            }

            if (v170)
            {
              __int128 v163 = WALogCategoryDefaultHandle();
              id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
              if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
                goto LABEL_96;
              }
              __int128 v164 = (const __CFString *)v170;
              id v124 = (void *)objc_claimAutoreleasedReturnValue(-[__CFError localizedDescription](v170, "localizedDescription"));
              *(_DWORD *)buf = 136446978;
              NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
              __int16 v174 = 1024;
              NSErrorUserInfoKey v175 = 1822;
              uint64_t v176 = 2112;
              v177 = v164;
              __int16 v178 = 2112;
              int v179 = v124;
              id v148 = "%{public}s::%d:Error returned from IOReportUpdateSamples(): %@ - localized description: %@";
              id v149 = v71;
              id v150 = 38;
              goto LABEL_132;
            }

            goto LABEL_92;
          }

LABEL_89:
          int v121 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](v4, "infraInterfaceName"));
          if ([v121 isEqualToString:@"dunno"])
          {

LABEL_93:
            char v123 = (void *)objc_claimAutoreleasedReturnValue(+[WAApple80211Manager sharedObject](&OBJC_CLASS___WAApple80211Manager, "sharedObject"));
            id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue([v123 getInfraApple80211]);

            if (v71)
            {
              id v124 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ifName](v71, "ifName"));
              -[WAIOReporterMessagePopulator setInfraInterfaceName:](v4, "setInfraInterfaceName:", v124);
LABEL_95:

LABEL_96:
              id v168 = updated;

              goto LABEL_97;
            }

            __int128 v147 = WALogCategoryDefaultHandle();
            id v124 = (void *)objc_claimAutoreleasedReturnValue(v147);
            if (!os_log_type_enabled((os_log_t)v124, OS_LOG_TYPE_ERROR)) {
              goto LABEL_95;
            }
            *(_DWORD *)buf = 136446466;
            NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
            __int16 v174 = 1024;
            NSErrorUserInfoKey v175 = 1827;
            id v148 = "%{public}s::%d:invalid apple80211API";
            id v149 = (os_log_s *)v124;
            id v150 = 18;
LABEL_132:
            _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, v148, buf, v150);
            goto LABEL_95;
          }

          unsigned __int8 v122 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](v4, "infraInterfaceName"));

          if (!v122) {
            goto LABEL_93;
          }
LABEL_92:
          id v168 = updated;
          goto LABEL_97;
        }

LABEL_86:
        [v67[126] incrementValueForKey:@"UpdateSamples Failed Calls" inMutableDict:v4->_cachedUsage onQueue:v4->_queue];
        v120 = v170 == 0LL;
        goto LABEL_87;
      }

      __int128 v157 = WALogCategoryDefaultHandle();
      __int128 v158 = (os_log_s *)objc_claimAutoreleasedReturnValue(v157);
      if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
        __int16 v174 = 1024;
        NSErrorUserInfoKey v175 = 1772;
        uint64_t v176 = 2112;
        v177 = @"WAIORPopSuperSet";
        _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:IOReportCreateSamples Failed for populatable: %@",  buf,  0x1Cu);
      }

      if (v170)
      {
        __int128 v159 = WALogCategoryDefaultHandle();
        id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          __int128 v160 = (const __CFString *)v170;
          __int128 v155 = (void *)objc_claimAutoreleasedReturnValue(-[__CFError localizedDescription](v170, "localizedDescription"));
          *(_DWORD *)buf = 136446978;
          NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
          __int16 v174 = 1024;
          NSErrorUserInfoKey v175 = 1772;
          uint64_t v176 = 2112;
          v177 = v160;
          __int16 v178 = 2112;
          int v179 = v155;
          __int128 v156 = "%{public}s::%d:Error returned from IOReportCreateSamples(): %@ - localized description: %@";
          goto LABEL_125;
        }

        goto LABEL_126;
      }

      goto LABEL_133;
    }

LABEL_55:
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"CreateSamples Failed Calls",  v169->_cachedUsage,  v169->_queue);
    id v80 = v170;
    goto LABEL_56;
  }

  id v29 = WALogCategoryDefaultHandle();
  uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    NSErrorUserInfoKey v173 = "-[WAIOReporterMessagePopulator _iorPreparedForSampling:]";
    __int16 v174 = 1024;
    NSErrorUserInfoKey v175 = 1691;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:No Channels to build into subscriptions, find channels first",  buf,  0x12u);
  }

  int v31 = 0;
LABEL_107:

  return v31;
}

void sub_10001E9C4(_Unwind_Exception *a1)
{
}

void sub_10001E9D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 11LL)) {
    [WeakRetained _unpersistIORObjects];
  }
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"External: Determine Channels Calls",  v3[10],  v3[6]);
  [v3 _findChannelsAndBuildChannelCaches:1];
  id v4 = WALogCategoryDefaultHandle();
  v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  int v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)__int16 v8 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "IOR determineChannelsPerIORPopulatable",  (const char *)&unk_1000B76E7,  v8,  2u);
  }
}

void sub_10001EDB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10001EDD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v3 = WeakRetained;
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 11LL)) {
    [WeakRetained _unpersistIORObjects];
  }
  [v3 _prepopulateMessage:*(void *)(a1 + 40) forProcess:*(void *)(a1 + 48) groupType:*(void *)(a1 + 72) andReply:*(void *)(a1 + 56) isResubscribe:0];
  id v4 = WALogCategoryDefaultHandle();
  v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  int v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 80);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)__int16 v8 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "IOR prepopulateMessage",  (const char *)&unk_1000B76E7,  v8,  2u);
  }
}

LABEL_111:
LABEL_56:
    id v65 = 0LL;
    id v57 = v153;
    goto LABEL_57;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOPopAvailableChannels](self, "cachedIOPopAvailableChannels"));
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v20]);

  if (!v21)
  {
    id v22 = WALogCategoryDefaultHandle();
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 1942;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _findChannelsAndBuildChannelCaches:kWAIORIOReporterSearchAllStaticPredicates",  buf,  0x12u);
    }

    -[WAIOReporterMessagePopulator _findChannelsAndBuildChannelCaches:]( self,  "_findChannelsAndBuildChannelCaches:",  0LL);
  }

  if (!-[WAIOReporterMessagePopulator _iorPreparedForSampling:](self, "_iorPreparedForSampling:", 0LL))
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Full Teardown Count",  self->_cachedUsage,  self->_queue);
    -[NSMutableDictionary removeObjectForKey:]( self->_cachedUsage,  "removeObjectForKey:",  @"IOR Full Teardown Date");
    cachedUsage = self->_cachedUsage;
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    -[NSMutableDictionary setObject:forKey:](cachedUsage, "setObject:forKey:", v25, @"IOR Full Teardown Date");

    -[WAIOReporterMessagePopulator _removeIORChannelsPersistenceFiles](self, "_removeIORChannelsPersistenceFiles");
    -[WAIOReporterMessagePopulator _freeIORCaches](self, "_freeIORCaches");
    id v26 = WALogCategoryDefaultHandle();
    v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 1957;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _buildOrRescanToBuildChannelAvailabilityCaches:kWAIORIOReporterSearchAllStaticPredicates",  buf,  0x12u);
    }

    -[WAIOReporterMessagePopulator _buildOrRescanToBuildChannelAvailabilityCaches:]( self,  "_buildOrRescanToBuildChannelAvailabilityCaches:",  0LL);
    if (!-[WAIOReporterMessagePopulator _iorPreparedForSampling:](self, "_iorPreparedForSampling:", 0LL))
    {
      id v91 = WALogCategoryDefaultHandle();
      id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
        NSErrorUserInfoKey v171 = 1024;
        char v172 = 1961;
        _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed second to _prepopulateMessage, bailing",  buf,  0x12u);
      }

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Full Teardown Failed Count",  self->_cachedUsage,  self->_queue);
      goto LABEL_56;
    }

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Full Teardown Recovered Count",  self->_cachedUsage,  self->_queue);
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOPopAvailableChannels](self, "cachedIOPopAvailableChannels"));
  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:v29]);

  if (!v30)
  {
    id v136 = WALogCategoryDefaultHandle();
    id v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_ERROR)) {
      goto LABEL_111;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
    NSErrorUserInfoKey v171 = 1024;
    char v172 = 1970;
    id v132 = "%{public}s::%d:XPC: Didn't have cachedIOPopAvailableChannels, bailing";
    goto LABEL_107;
  }

  int v31 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](self, "cachedIOReportSubbedChannels"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  id v33 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v32]);
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:@"iorsub"]);

  if (!v34)
  {
    id v137 = WALogCategoryDefaultHandle();
    id v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_ERROR)) {
      goto LABEL_111;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
    NSErrorUserInfoKey v171 = 1024;
    char v172 = 1975;
    id v132 = "%{public}s::%d:XPC: Didn't have cachedIOReportSubbedChannels iorsub, bailing";
    goto LABEL_107;
  }

  char v35 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSubbedChannels](self, "cachedIOReportSubbedChannels"));
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  id v37 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKeyedSubscript:v36]);
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:@"iorsub"]);

  id v39 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](self, "cachedIOReportSample"));
  BOOL v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v39 objectForKeyedSubscript:v40]);
  BOOL v42 = (void *)objc_claimAutoreleasedReturnValue([v41 objectForKeyedSubscript:@"sampleValues"]);

  if (!v42)
  {
    id v138 = WALogCategoryDefaultHandle();
    id v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      id v134 = (__CFString *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](self, "cachedIOReportSample"));
      id v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
      id v140 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", v139));
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 1980;
      NSErrorUserInfoKey v173 = 2112;
      __int16 v174 = v140;
      _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Dont have cachedIOReportSample sampleValues %@",  buf,  0x1Cu);

      goto LABEL_110;
    }

    goto LABEL_111;
  }

  id v43 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](self, "cachedIOReportSample"));
  BOOL v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  id v45 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v44]);
  BOOL v46 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKeyedSubscript:@"sampleValues"]);

  id v47 = WALogCategoryDefaultHandle();
  id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
  if (os_signpost_enabled(v48))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v48,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportUpdateSamples",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  updated = IOReportUpdateSamples(v46, v38, &v168);
  id v50 = WALogCategoryDefaultHandle();
  id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  if (os_signpost_enabled(v51))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v51,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR IOReportUpdateSamples",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  if (self->_failNextCreateOrUpdateSample)
  {
    id v52 = WALogCategoryDefaultHandle();
    uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 1993;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Injecting Error to IOReportUpdateSamples due to _failNextCreateOrUpdateSample",  buf,  0x12u);
    }

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Fault Injection: Create or Update Sample Error",  self->_cachedUsage,  self->_queue);
    id v54 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainPOSIX, 1LL, 0LL);
    id v168 = v54;
    self->_failNextCreateOrUpdateSample = 0;
  }

  else
  {
    id v54 = v168;
  }

  if ((updated & (v54 == 0LL)) != 0) {
    id v55 = @"UpdateSamples Calls";
  }
  else {
    id v55 = @"UpdateSamples Failed Calls";
  }
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  v55,  self->_cachedUsage,  self->_queue);
  if (v168) {
    id v56 = 0;
  }
  else {
    id v56 = updated;
  }
  if ((v56 & 1) == 0)
  {
    id v141 = WALogCategoryDefaultHandle();
    id v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    id v57 = v153;
    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2005;
      NSErrorUserInfoKey v173 = 2112;
      __int16 v174 = @"WAIORPopSuperSet";
      _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:IOReportUpdateSamples failed for populatable: %@",  buf,  0x1Cu);
    }

    if (!v168) {
      goto LABEL_39;
    }
    __int128 v143 = WALogCategoryDefaultHandle();
    id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
    if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    id v144 = (const __CFString *)v168;
    __int128 v145 = (void *)objc_claimAutoreleasedReturnValue(-[__CFError localizedDescription](v168, "localizedDescription"));
    *(_DWORD *)buf = 136446978;
    __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
    NSErrorUserInfoKey v171 = 1024;
    char v172 = 2005;
    NSErrorUserInfoKey v173 = 2112;
    __int16 v174 = v144;
    NSErrorUserInfoKey v175 = 2112;
    uint64_t v176 = v145;
    uint64_t v146 = "%{public}s::%d:Error returned from IOReportUpdateSamples(): %@ - localized description: %@";
    goto LABEL_122;
  }

  id v57 = v153;
  if (!v46)
  {
    __int128 v147 = WALogCategoryDefaultHandle();
    id v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
    if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2022;
      NSErrorUserInfoKey v173 = 2112;
      __int16 v174 = @"WAIORPopSuperSet";
      _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:XPC: Failed to get sample values for populatable type: %@",  buf,  0x1Cu);
    }

    if (!v168) {
      goto LABEL_39;
    }
    id v149 = WALogCategoryDefaultHandle();
    id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
    if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
LABEL_38:

LABEL_39:
      id v65 = 0LL;
      goto LABEL_57;
    }

    id v150 = (const __CFString *)v168;
    __int128 v145 = (void *)objc_claimAutoreleasedReturnValue(-[__CFError localizedDescription](v168, "localizedDescription"));
    *(_DWORD *)buf = 136446978;
    __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
    NSErrorUserInfoKey v171 = 1024;
    char v172 = 2022;
    NSErrorUserInfoKey v173 = 2112;
    __int16 v174 = v150;
    NSErrorUserInfoKey v175 = 2112;
    uint64_t v176 = v145;
    uint64_t v146 = "%{public}s::%d:Error returned from IOReportCreateSamples(): %@ - localized description: %@";
LABEL_122:
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, v146, buf, 0x26u);

    goto LABEL_38;
  }

  BOOL v58 = objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
  if (!v58
    || (BOOL v59 = (void *)v58,
        id v60 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName")),
        uint64_t v61 = [v60 isEqualToString:@"dunno"],
        v60,
        v59,
        v61))
  {
    BOOL v62 = WALogCategoryDefaultHandle();
    id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      id v64 = (__CFString *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2024;
      NSErrorUserInfoKey v173 = 2112;
      __int16 v174 = v64;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad infraInterfaceName: %@",  buf,  0x1Cu);
    }

    goto LABEL_38;
  }

  id v66 = WALogCategoryDefaultHandle();
  __int128 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
  {
    id v68 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](self, "cachedIOReportSample"));
    id v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
    id v70 = (void *)objc_claimAutoreleasedReturnValue([v68 objectForKeyedSubscript:v69]);
    id v71 = (const __CFString *)[v70 count];
    *(_DWORD *)buf = 136446722;
    __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
    NSErrorUserInfoKey v171 = 1024;
    char v172 = 2026;
    NSErrorUserInfoKey v173 = 2048;
    __int16 v174 = v71;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:cachedIOReportSample has %lu entries in dictionary",  buf,  0x1Cu);
  }

  NSErrorUserInfoKey v72 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOReportSample](self, "cachedIOReportSample"));
  BOOL v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
  id v74 = (void *)objc_claimAutoreleasedReturnValue([v72 objectForKeyedSubscript:v73]);
  id v65 = (__CFString *)objc_claimAutoreleasedReturnValue([v74 objectForKeyedSubscript:@"structuredDict"]);

  if (v65)
  {
    BOOL v75 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString allKeys](v65, "allKeys"));
    v76 = [v75 count];

    if (v76)
    {
      BOOL v77 = WALogCategoryDefaultHandle();
      id v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_signpost_enabled(v78))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v78,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR PopulationGroup",  (const char *)&unk_1000B76E7,  buf,  2u);
      }

      __int16 v79 = (void *)qword_1000ECEE8;
      id v80 = (void *)objc_claimAutoreleasedReturnValue([v13 originalClassName]);
      id v81 = (void *)objc_claimAutoreleasedReturnValue([v79 objectForKeyedSubscript:v80]);
      id v82 = [v81 unsignedIntegerValue];

      __int16 v83 = dispatch_group_create();
      dispatch_group_enter(v83);
      dispatch_group_enter(v83);
      id v84 = v154;
      switch((unint64_t)v82)
      {
        case 0uLL:
        case 6uLL:
          __int16 v85 = WALogCategoryDefaultHandle();
          id v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
          if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
          {
            __int16 v87 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 key]);
            id v88 = (void *)objc_claimAutoreleasedReturnValue([v13 originalClassName]);
            *(_DWORD *)buf = 136446978;
            __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
            NSErrorUserInfoKey v171 = 1024;
            char v172 = 2103;
            NSErrorUserInfoKey v173 = 2112;
            __int16 v174 = v87;
            NSErrorUserInfoKey v175 = 2112;
            uint64_t v176 = v88;
            _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:unhandled WAIOReporterPopulatableType type! not populating message with key: %@ and classname: %@",  buf,  0x26u);
          }

          dispatch_group_leave(v83);
          break;
        case 1uLL:
          id v113 = WALogCategoryDefaultHandle();
          id v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
          if (os_signpost_enabled(v114))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v114,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR WAIORPopNWActivity Iterator",  (const char *)&unk_1000B76E7,  buf,  2u);
          }

          id v115 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
          v165[0] = _NSConcreteStackBlock;
          v165[1] = 3221225472LL;
          v165[2] = sub_100020674;
          v165[3] = &unk_1000CCDD0;
          v165[4] = self;
          __int128 v167 = v154;
          __int128 v166 = v83;
          sub_100005D94((uint64_t)v166, v13, v46, v65, v155, v151, v153, v115, v165);

          uint64_t v116 = v167;
          goto LABEL_91;
        case 2uLL:
          v117 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
          v162[0] = _NSConcreteStackBlock;
          v162[1] = 3221225472LL;
          v162[2] = sub_100020808;
          v162[3] = &unk_1000CCDD0;
          uint8_t v162[4] = self;
          __int128 v164 = v154;
          __int128 v163 = v83;
          sub_100011380((uint64_t)v163, v13, v46, v65, v155, v151, v153, v117, v162);

          uint64_t v116 = v164;
          goto LABEL_91;
        case 3uLL:
          id v118 = WALogCategoryDefaultHandle();
          v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
          if (os_signpost_enabled(v119))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v119,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR WAIORPopSlowWiFiDiagnosticsCounterSample Iterator",  (const char *)&unk_1000B76E7,  buf,  2u);
          }

          v120 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
          v156[0] = _NSConcreteStackBlock;
          v156[1] = 3221225472LL;
          v156[2] = sub_100020920;
          v156[3] = &unk_1000CCDD0;
          v156[4] = self;
          __int128 v158 = v154;
          __int128 v157 = v83;
          sub_1000146C4((uint64_t)v157, v13, v46, v65, v155, v121, v153, v120, v156);

          uint64_t v116 = v158;
          goto LABEL_91;
        case 4uLL:
          unsigned __int8 v122 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator infraInterfaceName](self, "infraInterfaceName"));
          v159[0] = _NSConcreteStackBlock;
          v159[1] = 3221225472LL;
          v159[2] = sub_100020894;
          v159[3] = &unk_1000CCDD0;
          v159[4] = self;
          __int128 v161 = v154;
          __int128 v160 = v83;
          sub_1000133FC((uint64_t)v160, v13, v46, v65, v155, v123, v153, v122, v159);

          uint64_t v116 = v161;
LABEL_91:

          break;
        case 5uLL:
          v128 = WALogCategoryDefaultHandle();
          v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
          if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
            NSErrorUserInfoKey v171 = 1024;
            char v172 = 2044;
            _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:WAIORPopSuperSet does not map to a message, replace enumToPopulate of WAIORPopSuperSet back to the intended enumToPopulate",  buf,  0x12u);
          }

          break;
        default:
          break;
      }

      global_queue = dispatch_get_global_queue(2LL, 0LL);
      id v125 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      dispatch_group_notify(v83, v125, &stru_1000CCDF0);

      dispatch_group_leave(v83);
      id v126 = WALogCategoryDefaultHandle();
      v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
      if (os_signpost_enabled(v127))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v127,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR PrepopulateIOReporterChannels",  (const char *)&unk_1000B76E7,  buf,  2u);
      }

      goto LABEL_95;
    }
  }

  id v89 = WALogCategoryDefaultHandle();
  id v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
  if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
    NSErrorUserInfoKey v171 = 1024;
    char v172 = 2032;
    NSErrorUserInfoKey v173 = 2112;
    __int16 v174 = v65;
    _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Bad structuredIOReportSample %@",  buf,  0x1Cu);
  }

LABEL_57:
  id v93 = WALogCategoryDefaultHandle();
  id v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
  if (os_signpost_enabled(v94))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v94,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR PrepopulateExiting",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  if (v168)
  {
    v95 = WALogCategoryDefaultHandle();
    id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2123;
      NSErrorUserInfoKey v173 = 2112;
      __int16 v174 = (const __CFString *)v168;
      _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Encountered an IOReporter error trying to prepopulate a message. Error: %@",  buf,  0x1Cu);
    }

    v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL));
    -[WAIOReporterMessagePopulator _freeSubscriptionSample:](self, "_freeSubscriptionSample:", v97);

    if (v168)
    {
      CFRelease(v168);
      id v168 = 0LL;
    }

    -[WAIOReporterMessagePopulator _removeIORChannelsPersistenceFiles](self, "_removeIORChannelsPersistenceFiles");
    -[WAIOReporterMessagePopulator _clearIOReporterCache](self, "_clearIOReporterCache");
    v98 = WALogCategoryDefaultHandle();
    id v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
    id v84 = v154;
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2135;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Running _buildOrRescanToBuildChannelAvailabilityCaches:kWAIORIOReporterSearchAllStaticPredicates",  buf,  0x12u);
    }

    -[WAIOReporterMessagePopulator _buildOrRescanToBuildChannelAvailabilityCaches:]( self,  "_buildOrRescanToBuildChannelAvailabilityCaches:",  0LL);
    id v100 = WALogCategoryDefaultHandle();
    id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
    unsigned __int8 v102 = v101;
    if (v152)
    {
      if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2143;
      id v103 = "%{public}s::%d:Already attempted a resubscription - returning without success";
      uint64_t v104 = v102;
      NSErrorUserInfoKey v105 = OS_LOG_TYPE_ERROR;
    }

    else
    {
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
        NSErrorUserInfoKey v171 = 1024;
        char v172 = 2139;
        _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Will attempt a resubscription",  buf,  0x12u);
      }

      -[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]( self,  "_prepopulateMessage:forProcess:groupType:andReply:isResubscribe:",  v13,  v57,  v151,  v154,  1LL);
      __int16 v109 = WALogCategoryDefaultHandle();
      unsigned __int8 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
      if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
LABEL_78:

        v110 = WALogCategoryDefaultHandle();
        id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
        if (os_signpost_enabled(v111))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v111,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR PrepopulateIOReporterChannels",  (const char *)&unk_1000B76E7,  buf,  2u);
        }

        v112 = WALogCategoryDefaultHandle();
        __int16 v83 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v112);
        if (os_signpost_enabled((os_log_t)v83))
        {
          *(_WORD *)buf = 0;
          goto LABEL_82;
        }

        goto LABEL_95;
      }

      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]";
      NSErrorUserInfoKey v171 = 1024;
      char v172 = 2141;
      id v103 = "%{public}s::%d:Resubscription attempt done";
      uint64_t v104 = v102;
      NSErrorUserInfoKey v105 = OS_LOG_TYPE_DEFAULT;
    }

    _os_log_impl((void *)&_mh_execute_header, v104, v105, v103, buf, 0x12u);
    goto LABEL_78;
  }

  id v84 = v154;
  (*((void (**)(id, void, void))v154 + 2))(v154, 0LL, 0LL);
  id v106 = WALogCategoryDefaultHandle();
  __int16 v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
  if (os_signpost_enabled(v107))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v107,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR PrepopulateIOReporterChannels",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  int v108 = WALogCategoryDefaultHandle();
  __int16 v83 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v108);
  if (os_signpost_enabled((os_log_t)v83))
  {
    *(_WORD *)buf = 0;
LABEL_82:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v83,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR PrepopulateExiting",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

LABEL_95:
}

void sub_100020674(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 48);
  id v8 = a3;
  id v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Population via Dict",  v6,  v7);
  id v10 = WALogCategoryDefaultHandle();
  __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR WAIORPopNWActivity Iterator",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v12 = WALogCategoryDefaultHandle();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_signpost_enabled(v13))
  {
    *(_WORD *)id v17 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "IOR WAIORPopNWActivity Reply",  (const char *)&unk_1000B76E7,  v17,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  id v14 = WALogCategoryDefaultHandle();
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_signpost_enabled(v15))
  {
    *(_WORD *)id v16 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR WAIORPopNWActivity Reply",  (const char *)&unk_1000B76E7,  v16,  2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100020808(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 48);
  id v8 = a3;
  id v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Population via Dict",  v6,  v7);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100020894(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 48);
  id v8 = a3;
  id v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Population via Dict",  v6,  v7);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100020920(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 48);
  id v8 = a3;
  id v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"IOR Population via Dict",  v6,  v7);
  id v10 = WALogCategoryDefaultHandle();
  __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_signpost_enabled(v11))
  {
    *(_WORD *)id v12 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR WAIORPopSlowWiFiDiagnosticsCounterSample Iterator",  (const char *)&unk_1000B76E7,  v12,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100020A0C(id a1)
{
  id v1 = WALogCategoryDefaultHandle();
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136446466;
    uint64_t v6 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 2109;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Population done",  (uint8_t *)&v5,  0x12u);
  }

  id v3 = WALogCategoryDefaultHandle();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    LOWORD(v5) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR PopulationGroup",  (const char *)&unk_1000B76E7,  (uint8_t *)&v5,  2u);
  }
}

LABEL_11:
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[WAIOReporterMessagePopulator getUnavailablePredTempFile]( &OBJC_CLASS___WAIOReporterMessagePopulator,  "getUnavailablePredTempFile"));
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v15, 0LL));

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v28 = v6;
  id v18 = [v17 removeItemAtURL:v16 error:&v28];
  id v19 = v28;

  if ((v18 & 1) == 0)
  {
    if (v19 && [v19 code] != (id)2)
    {
      v27 = WALogCategoryDefaultHandle();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v19 underlyingErrors]);
      *(_DWORD *)buf = 136446978;
      int v31 = "-[WAIOReporterMessagePopulator _removeIORChannelsPersistenceFiles]";
      id v32 = 1024;
      id v33 = 2190;
      id v34 = 2112;
      char v35 = v16;
      uint64_t v36 = 2112;
      id v37 = v23;
      id v24 = "%{public}s::%d:WAIOReporterMessagePopulator _removePersistenceFile error removing file %@: %@";
      BOOL v25 = v21;
      id v26 = OS_LOG_TYPE_ERROR;
    }

    else
    {
      id v22 = WALogCategoryDefaultHandle();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_21;
      }
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v19 description]);
      *(_DWORD *)buf = 136446978;
      int v31 = "-[WAIOReporterMessagePopulator _removeIORChannelsPersistenceFiles]";
      id v32 = 1024;
      id v33 = 2192;
      id v34 = 2112;
      char v35 = v16;
      uint64_t v36 = 2112;
      id v37 = v23;
      id v24 = "%{public}s::%d:WAIOReporterMessagePopulator _removePersistenceFile successful or does not exist %@: %@";
      BOOL v25 = v21;
      id v26 = OS_LOG_TYPE_DEBUG;
    }

    _os_log_impl((void *)&_mh_execute_header, v25, v26, v24, buf, 0x26u);

    goto LABEL_21;
  }

  id v20 = WALogCategoryDefaultHandle();
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v31 = "-[WAIOReporterMessagePopulator _removeIORChannelsPersistenceFiles]";
    id v32 = 1024;
    id v33 = 2195;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:WAIOReporterMessagePopulator _removePersistenceFile file is not deletable",  buf,  0x12u);
  }

  if (v34)
  {

    if (!v33) {
      goto LABEL_13;
    }
  }

  else if (!v33)
  {
LABEL_13:
    if (!v32) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  if (v32)
  {
LABEL_14:
  }

  switch(a3)
  {
    case 0uLL:
      int v31 = WALogCategoryDefaultHandle();
      id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3115;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandReloadViaUnpersist start",  buf,  0x12u);
      }

      -[WAEngine setIorMessagePopulator:](self, "setIorMessagePopulator:", 0LL);
      uint64_t v196 = 0LL;
      id v33 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine _getObscureKey](self, "_getObscureKey"));
      self->_readingPersistFile = 1;
      id v34 = objc_alloc(&OBJC_CLASS___NSData);
      char v35 = NSHomeDirectory();
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@t.out",  v36,  @"/Library/com.apple.wifianalyticsd/.wa/"));
      id v38 = -[NSData initWithContentsOfFile:options:error:](v34, "initWithContentsOfFile:options:error:", v37, 1LL, 0LL);

      id v39 = -[NSData length](v38, "length");
      memset(key, 0, 33);
      v192 = v38;
      if (!v38)
      {
        v117 = WALogCategoryDefaultHandle();
        id v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
        if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
        {
          v119 = NSHomeDirectory();
          v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
          int v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@t.out",  v120,  @"/Library/com.apple.wifianalyticsd/.wa/"));
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3134;
          v217 = 2112;
          v218 = (uint64_t)v121;
          _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:No persistence file %@",  buf,  0x1Cu);
        }

        id v213 = NSLocalizedFailureReasonErrorKey;
        v214 = @"WAErrorCodeNoPersistenceFile";
        unsigned __int8 v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v214,  &v213,  1LL));
        id v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9031LL,  v122));

        char v123 = @"No persistence file";
        goto LABEL_93;
      }

      if (!v33)
      {
        id v124 = WALogCategoryDefaultHandle();
        id v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3141;
          _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Couldn't get key to unobscure persistence file, triggering removal of persistence file",  buf,  0x12u);
        }

        -[WAEngine _removePersistenceFile](self, "_removePersistenceFile");
        v211 = NSLocalizedFailureReasonErrorKey;
        v212 = @"WAErrorCodeNoObscureKeyFile";
        id v126 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v212,  &v211,  1LL));
        id v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9032LL,  v126));

        char v123 = @"No unobscure persistence file";
        goto LABEL_93;
      }

      id v188 = v39;
      dataOutAvailable = v39 + 16;
      [v33 getCString:key maxLength:33 encoding:4];
      uint64_t v41 = WALogCategoryDefaultHandle();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        id v43 = [v33 length];
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3150;
        v217 = 2048;
        v218 = (uint64_t)v43;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:kWAIORCommandReloadViaUnpersist got unobscuring key %lu bytes",  buf,  0x1Cu);
      }

      BOOL v44 = malloc(dataOutAvailable);
      id v45 = WALogCategoryDefaultHandle();
      BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      id v47 = v46;
      dataOut = v44;
      if (!v44)
      {
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3154;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Couldn't allocate buffer to unobscure persistence data",  buf,  0x12u);
        }

        id v209 = NSLocalizedFailureReasonErrorKey;
        v210 = @"WAErrorCodeInternalError";
        v127 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v210,  &v209,  1LL));
        id v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v127));

        char v123 = @"malloc failed";
LABEL_93:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v123, @"Details");
        uint64_t v53 = v192;
        id v65 = (void (**)(void, void, void))v193;
        goto LABEL_128;
      }

      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3160;
        v217 = 2048;
        v218 = dataOutAvailable;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:kWAIORCommandReloadViaUnpersist malloced %lu bytes",  buf,  0x1Cu);
      }

      id v48 = (void *)objc_claimAutoreleasedReturnValue( -[WAEngine _getDataFromKeychain:]( self,  "_getDataFromKeychain:",  @"com.apple.wifi.analytics.persistence-iv"));
      id v49 = objc_claimAutoreleasedReturnValue( -[WAEngine _getDataFromKeychain:]( self,  "_getDataFromKeychain:",  @"com.apple.wifi.analytics.persistence-tag"));
      id v186 = (void *)v49;
      id v187 = v48;
      if (v48 && (id v50 = (void *)v49) != 0LL)
      {
        id v51 = [v48 bytes];
        id v52 = v51[2];
        v207 = *(void *)v51;
        v208 = v52;
        *(_OWORD *)buf = *(_OWORD *)[v50 bytes];
        uint64_t v53 = v192;
        id v54 = dataOut;
        id v55 = CCCryptorGCMOneshotDecrypt( 0LL, key, 32LL, &v207, 12LL, 0LL, 0LL, -[NSData bytes](v192, "bytes"), v188, dataOut, buf, 16LL);
        uint64_t v196 = v188;
      }

      else
      {
        v128 = WALogCategoryDefaultHandle();
        v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
        if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3178;
          v217 = 2080;
          v218 = (uint64_t)"-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:%s: IV and tag not found",  buf,  0x1Cu);
        }

        uint64_t v53 = v192;
        id v54 = dataOut;
        id v55 = CCCrypt( 1u, 0, 1u, key, 0x20uLL, 0LL, -[NSData bytes](v192, "bytes"), v188, dataOut, dataOutAvailable, &v196);
      }

      self->_readingPersistFile = 0;
      if (v55)
      {
        id v130 = WALogCategoryDefaultHandle();
        id v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
        if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3186;
          v217 = 2080;
          v218 = (uint64_t)"-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          v219 = 1024;
          LODWORD(v220) = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:%s: Failed to unobscure: %d",  buf,  0x22u);
        }

        free(v54);
        BOOL v205 = NSLocalizedFailureReasonErrorKey;
        v206 = @"WAErrorCodeInternalError";
        id v132 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v206,  &v205,  1LL));
        id v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v132));

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  @"CCCrypt failed",  @"Details");
        id v65 = (void (**)(void, void, void))v193;
        v133 = v186;
        goto LABEL_127;
      }

      id v189 = v33;
      id v134 = objc_alloc(&OBJC_CLASS___NSData);
      id v135 = -[NSData initWithBytes:length:](v134, "initWithBytes:length:", v54, v196);
      id v184 = objc_opt_class(&OBJC_CLASS___WAMessageAWD);
      __int16 v183 = objc_opt_class(&OBJC_CLASS___NSError);
      int v182 = objc_opt_class(&OBJC_CLASS___NSString);
      __int16 v181 = objc_opt_class(&OBJC_CLASS___WAField);
      id v136 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary);
      id v137 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      id v138 = objc_opt_class(&OBJC_CLASS___NSData);
      id v139 = objc_opt_class(&OBJC_CLASS___NSMutableArray);
      id v140 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v184,  v183,  v182,  v181,  v136,  v137,  v138,  v139,  objc_opt_class(&OBJC_CLASS___NSNumber),  0LL);
      id v141 = (void *)objc_claimAutoreleasedReturnValue(v140);
      v195 = 0LL;
      v185 = v135;
      id v142 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v141,  v135,  &v195));
      __int128 v143 = v195;

      if (v143)
      {
        id v144 = WALogCategoryDefaultHandle();
        __int128 v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
        if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3197;
          v217 = 2112;
          v218 = (uint64_t)v143;
          _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to unarchive root persistence dict: %@",  buf,  0x1Cu);
        }

        id v203 = NSLocalizedFailureReasonErrorKey;
        v204 = @"WAErrorCodeInternalError";
        uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v204,  &v203,  1LL));
        id v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v146));

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  @"Failed to unarchive root persistence",  @"Details");
      }

      else
      {
        id v101 = 0LL;
      }

      free(dataOut);
      __int128 v147 = WALogCategoryDefaultHandle();
      id v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3205;
        _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:kWAIORCommandReloadViaUnpersist NSKeyedUnarchiver complete",  buf,  0x12u);
      }

      id v191 = v142;
      id v149 = (void *)objc_claimAutoreleasedReturnValue([v142 objectForKeyedSubscript:@"WA_PERSIST_IOREPORTER_REGISTRATIONS"]);
      if (!v149) {
        goto LABEL_121;
      }
      id v150 = WALogCategoryDefaultHandle();
      id v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v152 = [v149 length];
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3210;
        v217 = 2048;
        v218 = (uint64_t)v152;
        _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:iorReporterWrapperData size: %lu",  buf,  0x1Cu);
      }

      uint64_t v153 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v149 length]));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  v153,  @"iorReporterWrapperData size");

      char v194 = 0LL;
      __int128 v154 = v149;
      __int128 v155 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___WAIOReporterMessagePopulator),  v149,  &v194);
      __int128 v156 = (WAIOReporterMessagePopulator *)objc_claimAutoreleasedReturnValue(v155);
      __int128 v157 = v194;
      if (v157)
      {
        __int128 v158 = v157;
        __int128 v159 = WALogCategoryDefaultHandle();
        __int128 v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
        if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3215;
          v217 = 2112;
          v218 = (uint64_t)v158;
          _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to unarchive WAIOReporterMessagePopulator: %@",  buf,  0x1Cu);
        }

        v201 = NSLocalizedFailureReasonErrorKey;
        id v202 = @"WAErrorCodeInternalError";
        __int128 v161 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v202,  &v201,  1LL));
        __int128 v162 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v161));

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  @"Failed to unarchive WAIOReporterMessagePopulator",  @"Details");
        id v101 = (void *)v162;
      }

      if (!v156)
      {
        id v149 = v154;
LABEL_121:
        __int128 v154 = v149;
        __int128 v165 = WALogCategoryDefaultHandle();
        __int128 v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(v165);
        if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3227;
          _os_log_impl( (void *)&_mh_execute_header,  v166,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to unpersist, alloc new WAIOReporterMessagePopulator",  buf,  0x12u);
        }

        __int128 v156 = objc_alloc_init(&OBJC_CLASS___WAIOReporterMessagePopulator);
        -[WAEngine setIorMessagePopulator:](self, "setIorMessagePopulator:", v156);
        goto LABEL_124;
      }

      __int128 v163 = WALogCategoryDefaultHandle();
      __int128 v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
      if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3223;
        _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Unpersisting Success",  buf,  0x12u);
      }

      -[WAEngine setIorMessagePopulator:](self, "setIorMessagePopulator:", v156);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
LABEL_124:
      id v65 = (void (**)(void, void, void))v193;

      __int128 v167 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v167 setMessageDelegate:self];

      id v168 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v168 setPersistenceDelegate:self];

      NSErrorUserInfoKey v169 = WALogCategoryDefaultHandle();
      __int16 v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
      v133 = v186;
      if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3234;
        _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:kWAIORCommandReloadViaUnpersist end",  buf,  0x12u);
      }

      id v33 = v189;
      uint64_t v53 = v192;
LABEL_127:

LABEL_128:
LABEL_129:
      NSErrorUserInfoKey v171 = WALogCategoryDefaultHandle();
      char v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
      if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3332;
        v217 = 2112;
        v218 = (uint64_t)v9;
        _os_log_impl( (void *)&_mh_execute_header,  v172,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Replying Now msg %@",  buf,  0x1Cu);
      }

      if (v65) {
        ((void (**)(void, NSMutableDictionary *, void *))v65)[2](v65, v9, v101);
      }
LABEL_133:

      return;
    case 1uLL:
      uint64_t v61 = WALogCategoryDefaultHandle();
      BOOL v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3238;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandBuildSubscription start",  buf,  0x12u);
      }

      id v63 = WALogCategoryDefaultHandle();
      id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3240;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandBuildSubscription running [self.iorMessagePopulator determineChannelsPerIORPopulatable];",
          buf,
          0x12u);
      }

      id v66 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v66 determineChannelsPerIORPopulatable];

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      __int128 v67 = WALogCategoryDefaultHandle();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3244;
      id v69 = "%{public}s::%d:kWAIORCommandBuildSubscription end";
      goto LABEL_70;
    case 2uLL:
      id v70 = WALogCategoryDefaultHandle();
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3248;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandErrorNextCreateOrUpdateSample start",  buf,  0x12u);
      }

      NSErrorUserInfoKey v72 = WALogCategoryDefaultHandle();
      BOOL v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3250;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandErrorNextCreateOrUpdateSample running [self.iorMessagePopulator injectErrorOnNextC reateOrUpdateSample];",
          buf,
          0x12u);
      }

      id v74 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v74 injectErrorOnNextCreateOrUpdateSample];

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      BOOL v75 = WALogCategoryDefaultHandle();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3254;
      id v69 = "%{public}s::%d:kWAIORCommandErrorNextCreateOrUpdateSample end";
      goto LABEL_70;
    case 3uLL:
      v76 = WALogCategoryDefaultHandle();
      BOOL v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3258;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandPersist start",  buf,  0x12u);
      }

      id v78 = WALogCategoryDefaultHandle();
      __int16 v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3260;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandPersist running [self _persist];",
          buf,
          0x12u);
      }

      -[WAEngine _persist](self, "_persist");
      id v80 = WALogCategoryDefaultHandle();
      id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3263;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandPersist running [self.iorMessagePopulator persistIORObjects];",
          buf,
          0x12u);
      }

      id v82 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v82 persistIORObjects:0];

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      __int16 v83 = WALogCategoryDefaultHandle();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3267;
      id v69 = "%{public}s::%d:kWAIORCommandPersist end";
      goto LABEL_70;
    case 4uLL:
      id v84 = WALogCategoryDefaultHandle();
      __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3271;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandClearCaches start",  buf,  0x12u);
      }

      id v86 = WALogCategoryDefaultHandle();
      __int16 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3273;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandClearCaches running [self.iorMessagePopulator freeIORCaches];",
          buf,
          0x12u);
      }

      id v88 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v88 freeIORCaches];

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      id v89 = WALogCategoryDefaultHandle();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3277;
      id v69 = "%{public}s::%d:kWAIORCommandClearCaches end";
      goto LABEL_70;
    case 5uLL:
      id v90 = WALogCategoryDefaultHandle();
      id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3281;
        _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandRemovePersistFiles start",  buf,  0x12u);
      }

      id v92 = WALogCategoryDefaultHandle();
      id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3283;
        _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandClearCaches running [self _removePersistenceFile];",
          buf,
          0x12u);
      }

      -[WAEngine _removePersistenceFile](self, "_removePersistenceFile");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      id v94 = WALogCategoryDefaultHandle();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3287;
      id v69 = "%{public}s::%d:kWAIORCommandRemovePersistFiles end";
      goto LABEL_70;
    case 6uLL:
      v95 = WALogCategoryDefaultHandle();
      id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3291;
        _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandRunIOLegendTest start",  buf,  0x12u);
      }

      v97 = WALogCategoryDefaultHandle();
      v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3293;
        _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandRunIOLegendTest running [self.iorMessagePopulator runIOLegendTest];",
          buf,
          0x12u);
      }

      id v99 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      id v100 = [v99 runIOLegendTest];

      if ((v100 & 1) != 0)
      {
        id v101 = 0LL;
        unsigned __int8 v102 = &__kCFBooleanTrue;
      }

      else
      {
        id v199 = NSLocalizedFailureReasonErrorKey;
        v200 = @"WAErrorCodeInternalError";
        id v114 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v200,  &v199,  1LL));
        id v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v114));

        unsigned __int8 v102 = &__kCFBooleanFalse;
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v102, @"Success");
      id v115 = WALogCategoryDefaultHandle();
      uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3301;
        _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandRunIOLegendTest end",  buf,  0x12u);
      }

      goto LABEL_129;
    case 7uLL:
      id v103 = WALogCategoryDefaultHandle();
      uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3305;
        _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandScanPredicatesNotYetFound start",  buf,  0x12u);
      }

      NSErrorUserInfoKey v105 = WALogCategoryDefaultHandle();
      id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
      id v65 = (void (**)(void, void, void))v193;
      if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3307;
        _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandScanPredicatesNotYetFound running [self.iorMessagePopulator scanPredicatesNotYetFound];",
          buf,
          0x12u);
      }

      __int16 v107 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
      [v107 scanPredicatesNotYetFoundAndMutable];

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      int v108 = WALogCategoryDefaultHandle();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3312;
      id v69 = "%{public}s::%d:kWAIORCommandScanPredicatesNotYetFound end";
LABEL_70:
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, v69, buf, 0x12u);
LABEL_71:

      id v101 = 0LL;
      goto LABEL_129;
    case 8uLL:
      __int16 v109 = WALogCategoryDefaultHandle();
      v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3316;
        _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandForceStudyErrorFromMsg start",  buf,  0x12u);
      }

      id v111 = WALogCategoryDefaultHandle();
      v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3318;
        _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:kWAIORCommandForceStudyErrorFromMsg seetting _forceStudyErrorFromMsg true",  buf,  0x12u);
      }

      self->_forceStudyErrorFromMsg = 1;
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Success");
      id v113 = WALogCategoryDefaultHandle();
      id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3323;
      BOOL v58 = "%{public}s::%d:kWAIORCommandForceStudyErrorFromMsg end";
      BOOL v59 = v57;
      id v60 = OS_LOG_TYPE_DEBUG;
      goto LABEL_78;
    default:
      id v56 = WALogCategoryDefaultHandle();
      id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAEngine _issueIOReportManagementCommand:forProcessToken:andReply:]";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3327;
      BOOL v58 = "%{public}s::%d:Unknown command";
      BOOL v59 = v57;
      id v60 = OS_LOG_TYPE_ERROR;
LABEL_78:
      _os_log_impl((void *)&_mh_execute_header, v59, v60, v58, buf, 0x12u);
LABEL_79:

      id v101 = 0LL;
      id v65 = (void (**)(void, void, void))v193;
      goto LABEL_129;
  }
}

void sub_100021350(_Unwind_Exception *a1)
{
}

void sub_100021364(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setFailNextCreateOrUpdateSample:1];
}

void sub_100021858(_Unwind_Exception *a1)
{
}

void sub_10002186C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained unpersistIORObjects];
}

LABEL_22:
  uint64_t v36 = v6[90];
  id v37 = (void *)objc_claimAutoreleasedReturnValue([v7 + 184 getUnavailablePredTempFile]);
  id v113 = 0LL;
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v36 dataWithContentsOfFile:v37 options:8 error:&v113]);
  id v39 = v113;

  BOOL v40 = WALogCategoryDefaultHandle();
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
  if (!v38)
  {
    if (!v42) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446466;
    v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
    id v118 = 1024;
    v119 = 2358;
    id v45 = "%{public}s::%d:unpersist cachedPredicatesNotYetFound file not available";
    BOOL v46 = v41;
    id v47 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_30;
  }

  if (v42)
  {
    id v43 = [v38 length];
    *(_DWORD *)buf = 136446722;
    v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
    id v118 = 1024;
    v119 = 2341;
    v120 = 2048;
    int v121 = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:from file: cachedUnavailableArrayData NSData sizeof is %lu",  buf,  0x1Cu);
  }

  if (v39)
  {
    BOOL v44 = WALogCategoryDefaultHandle();
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446466;
    v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
    id v118 = 1024;
    v119 = 2355;
    id v45 = "%{public}s::%d:Failed to unpersist cachedPredicatesNotYetFound";
    BOOL v46 = v41;
    id v47 = OS_LOG_TYPE_ERROR;
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v46, v47, v45, buf, 0x12u);
    goto LABEL_41;
  }

  int v108 = v5;
  id v48 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  id v49 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary);
  id v50 = objc_opt_class(&OBJC_CLASS___NSArray);
  id v51 = objc_opt_class(&OBJC_CLASS___NSMutableArray);
  id v52 = objc_opt_class(v6[90]);
  uint64_t v53 = objc_opt_class(&OBJC_CLASS___NSMutableData);
  id v54 = objc_opt_class(&OBJC_CLASS___NSString);
  id v55 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v48,  v49,  v50,  v51,  v52,  v53,  v54,  objc_opt_class(&OBJC_CLASS___NSNumber),  0LL);
  id v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
  v112 = 0LL;
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v56,  v38,  &v112));
  id v57 = v112;

  BOOL v58 = WALogCategoryDefaultHandle();
  BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
  id v60 = v59;
  if (v57 || !v41)
  {
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
      id v118 = 1024;
      v119 = 2346;
      v120 = 2112;
      int v121 = v57;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to unarchive cachedPredicatesNotYetFound: %@",  buf,  0x1Cu);
    }

    int v5 = v108;
    uint64_t v6 = &AnalyticsSendEventLazy_ptr;
    __int16 v7 = &OBJC_IVAR___WAEngine__tmpFilesHaveAttemptedProcessingInDataStreamPath;
  }

  else
  {
    __int16 v7 = &OBJC_IVAR___WAEngine__tmpFilesHaveAttemptedProcessingInDataStreamPath;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v61 = (void *)objc_opt_class(v41);
      *(_DWORD *)buf = 136446722;
      v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
      id v118 = 1024;
      v119 = 2349;
      v120 = 2112;
      int v121 = v61;
      BOOL v62 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:unpersist cachedUnavailableArray class is %@",  buf,  0x1Cu);
    }

    -[WAIOReporterMessagePopulator setCachedPredicatesNotYetFound:](self, "setCachedPredicatesNotYetFound:", v41);
    id v63 = WALogCategoryDefaultHandle();
    id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    uint64_t v6 = &AnalyticsSendEventLazy_ptr;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
      id v118 = 1024;
      v119 = 2352;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:unpersist cachedPredicatesNotYetFound success",  buf,  0x12u);
    }

    int v5 = v108;
  }

  id v21 = v10;
  id v22 = WALogCategoryDefaultHandle();
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
  {
    id v23 = 67109120;
    LODWORD(v24) = v21;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "Failed to currentChannelInfo error %d",  (uint8_t *)&v23,  8u);
  }

  return profileMegaEnabledSeconds;
}

      id v12 = v31;
      int v8 = v38;
      a5 = v35;
    }

    else
    {
      id v54 = NSLocalizedFailureReasonErrorKey;
      id v55 = @"WAErrorCodeFileSystemError";
      int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));
      id v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9015LL,  v31));
      id v16 = 0LL;
      id v17 = 0LL;
    }
  }

  else
  {
    id v56 = NSLocalizedFailureReasonErrorKey;
    id v57 = @"WAErrorCodeFileSystemError";
    int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
    id v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9015LL,  v31));
    id v16 = 0LL;
    id v17 = 0LL;
    id v12 = 0LL;
  }

  if (a5 && v18) {
    *a5 = [v18 copy];
  }
  uint64_t v13 = v12;
LABEL_27:

  return v39;
}

LABEL_41:
  id v65 = v6[90];
  id v66 = (void *)objc_claimAutoreleasedReturnValue([v7 + 184 getUsageTempFile]);
  id v111 = 0LL;
  __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v65 dataWithContentsOfFile:v66 options:8 error:&v111]);
  id v68 = v111;

  id v69 = WALogCategoryDefaultHandle();
  id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
  id v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
  if (v67)
  {
    if (v71)
    {
      NSErrorUserInfoKey v72 = [v67 length];
      *(_DWORD *)buf = 136446722;
      v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
      id v118 = 1024;
      v119 = 2367;
      v120 = 2048;
      int v121 = v72;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:from file: usageDictData NSData sizeof is %lu",  buf,  0x1Cu);
    }

    self->_persistFileExistedAtPIDLoad = 1;
    if (v68)
    {
      BOOL v73 = WALogCategoryDefaultHandle();
      id v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
        id v118 = 1024;
        v119 = 2382;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to unpersist cachedUsage",  buf,  0x12u);
      }
    }

    else
    {
      __int16 v109 = v5;
      id v106 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      BOOL v75 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary);
      v76 = objc_opt_class(&OBJC_CLASS___NSArray);
      BOOL v77 = objc_opt_class(&OBJC_CLASS___NSMutableArray);
      id v78 = objc_opt_class(v6[90]);
      __int16 v79 = objc_opt_class(&OBJC_CLASS___NSDate);
      id v80 = objc_opt_class(&OBJC_CLASS___NSMutableData);
      id v81 = objc_opt_class(&OBJC_CLASS___NSString);
      id v82 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v106,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  objc_opt_class(&OBJC_CLASS___NSNumber),  0LL);
      __int16 v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
      v110 = 0LL;
      id v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v83,  v67,  &v110));
      __int16 v85 = v110;

      id v86 = WALogCategoryDefaultHandle();
      __int16 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      id v88 = v87;
      if (v85 || !v84)
      {
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
          id v118 = 1024;
          v119 = 2373;
          v120 = 2112;
          int v121 = v85;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to unarchive cachedUsage: %@",  buf,  0x1Cu);
        }
      }

      else
      {
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          id v89 = (void *)objc_opt_class(v84);
          *(_DWORD *)buf = 136446722;
          v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
          id v118 = 1024;
          v119 = 2376;
          v120 = 2112;
          int v121 = v89;
          id v90 = v89;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:unpersist usageDict class is %@",  buf,  0x1Cu);
        }

        -[WAIOReporterMessagePopulator setCachedUsage:](self, "setCachedUsage:", v84);
        id v91 = WALogCategoryDefaultHandle();
        id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
          id v118 = 1024;
          v119 = 2379;
          _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:unpersist cachedUsage success",  buf,  0x12u);
        }
      }

      int v5 = v109;
    }
  }

  else
  {
    if (v71)
    {
      *(_DWORD *)buf = 136446466;
      v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
      id v118 = 1024;
      v119 = 2385;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:unpersist cachedUsage file not available",  buf,  0x12u);
    }

    self->_persistFileExistedAtPIDLoad = 0;
  }

  objc_autoreleasePoolPop(v5);
  id v93 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOPopAvailableChannels](self, "cachedIOPopAvailableChannels"));
  if (v93
    || (id v93 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedPredicatesNotYetFound](self, "cachedPredicatesNotYetFound"))) != 0LL)
  {

LABEL_65:
    id v94 = WALogCategoryDefaultHandle();
    v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
    if (!os_signpost_enabled(v95)) {
      goto LABEL_68;
    }
    *(_WORD *)buf = 0;
    id v96 = "Success";
    goto LABEL_67;
  }

  uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedUsage](self, "cachedUsage"));

  if (v104) {
    goto LABEL_65;
  }
  NSErrorUserInfoKey v105 = WALogCategoryDefaultHandle();
  v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
  if (os_signpost_enabled(v95))
  {
    *(_WORD *)buf = 0;
    id v96 = "Fail";
LABEL_67:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v95,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR Unpersist",  v96,  buf,  2u);
  }

LABEL_68:
  v97 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedPredicatesNotYetFound](self, "cachedPredicatesNotYetFound"));
  if (!v97)
  {
    v98 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    -[WAIOReporterMessagePopulator setCachedPredicatesNotYetFound:](self, "setCachedPredicatesNotYetFound:", v98);
  }

  id v99 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedUsage](self, "cachedUsage"));

  if (!v99)
  {
    id v100 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[WAIOReporterMessagePopulator setCachedUsage:](self, "setCachedUsage:", v100);
  }

  id v101 = (void *)objc_claimAutoreleasedReturnValue(-[WAIOReporterMessagePopulator cachedIOPopAvailableChannels](self, "cachedIOPopAvailableChannels"));

  if (v101)
  {
    unsigned __int8 v102 = WALogCategoryDefaultHandle();
    id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v117 = "-[WAIOReporterMessagePopulator _unpersistIORObjects]";
      id v118 = 1024;
      v119 = 2412;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:unpersist cachedIOPopAvailableChannels exists, running _iorPreparedForSampling to build reliant objects",  buf,  0x12u);
    }

    -[WAIOReporterMessagePopulator _iorPreparedForSampling:](self, "_iorPreparedForSampling:", 0LL);
  }

  -[WAIOReporterMessagePopulator _handleUnpersistForUsageData](self, "_handleUnpersistForUsageData");
  self->_hasAttemptedUnpersisting = 1;
}

void sub_100022834(_Unwind_Exception *a1)
{
}

void sub_100022848(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _persistIORObjects:*(unsigned __int8 *)(a1 + 40)];
}

LABEL_53:
    goto LABEL_38;
  }

  BOOL v58 = WALogCategoryDefaultHandle();
  BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v81 = "-[WAIOReporterMessagePopulator _persistIORObjects:]";
    id v82 = 1024;
    __int16 v83 = 2503;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DONE", buf, 0x12u);
  }

  id v60 = WALogCategoryDefaultHandle();
  uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
  if (!os_signpost_enabled(v61)) {
    goto LABEL_37;
  }
  *(_WORD *)buf = 0;
  BOOL v62 = "Success";
LABEL_36:
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v61,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "IOR Persist",  v62,  buf,  2u);
LABEL_37:

  self->_ioReportersCacheNeedsUpdating = 0;
LABEL_38:
  objc_autoreleasePoolPop(v20);
}

LABEL_34:
  uint64_t v41 = WALogCategoryDefaultHandle();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v42 = self->_persistTimerRunning;
    id v43 = -[RecommendationPreferences ior_persist_delay_seconds](self->_preferences, "ior_persist_delay_seconds");
    BOOL v44 = self->_persistTimer;
    if (v44) {
      id v45 = dispatch_source_testcancel((dispatch_source_t)v44) == 0;
    }
    else {
      id v45 = 0;
    }
    *(_DWORD *)buf = 136447234;
    id v49 = "-[WAIOReporterMessagePopulator _delayedInvocationForPersist]";
    id v50 = 1024;
    id v51 = 2572;
    id v52 = 1024;
    *(_DWORD *)uint64_t v53 = v42;
    *(_WORD *)&v53[4] = 2048;
    *(void *)&v53[6] = v43;
    id v54 = 1024;
    id v55 = v45;
    __int16 v7 = "%{public}s::%d:Timer State : Enabled %d Period(ms) %lu valid %d";
    int v8 = v5;
    id v9 = 40;
    goto LABEL_39;
  }

  context = objc_autoreleasePoolPush();
  BOOL v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v60 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine cachedUsage](self, "cachedUsage"));
  char v216 = v48;
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v60,  1LL,  &v216));
  BOOL v62 = (char *)v216;

  if (v62)
  {
    id v63 = WALogCategoryDefaultHandle();
    id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1829;
      v223 = 2112;
      id v224 = v62;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive cachedUsage: %@",  buf,  0x1Cu);
    }
  }

  if (v61)
  {
    id v65 = WALogCategoryDefaultHandle();
    id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      __int128 v67 = (const char *)[v61 length];
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1833;
      v223 = 2048;
      id v224 = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:cachedUsage archive size %lu",  buf,  0x1Cu);
    }

    [v59 setObject:v61 forKey:@"WA_PERSIST_USAGE"];
  }

  v201 = v61;
  id v68 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine messageStore](self, "messageStore"));
  uint64_t v215 = 0LL;
  id v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v68,  1LL,  &v215));
  id v70 = (char *)v215;

  if (v70)
  {
    id v71 = WALogCategoryDefaultHandle();
    NSErrorUserInfoKey v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1840;
      v223 = 2112;
      id v224 = v70;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive WAMessageStore: %@",  buf,  0x1Cu);
    }
  }

  if (v69)
  {
    BOOL v73 = WALogCategoryDefaultHandle();
    id v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      BOOL v75 = (const char *)[v69 length];
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1845;
      v223 = 2048;
      id v224 = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:messageStoreData size: %lu",  buf,  0x1Cu);
    }

    [v59 setObject:v69 forKey:@"WA_PERSIST_MESSAGE_STORE"];
  }

  v76 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine processTokenToGroupTypeMap](self, "processTokenToGroupTypeMap"));
  v214 = 0LL;
  BOOL v77 = objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v76,  1LL,  &v214));
  id v78 = (char *)v214;

  if (v78)
  {
    __int16 v79 = WALogCategoryDefaultHandle();
    id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1852;
      v223 = 2112;
      id v224 = v78;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive process registration: %@",  buf,  0x1Cu);
    }
  }

  if (v77) {
    [v59 setObject:v77 forKey:@"WA_PERSIST_PROCESS_REGISTRATION"];
  }
  id v81 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
  id v213 = 0LL;
  id v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v81,  1LL,  &v213));
  __int16 v83 = (char *)v213;

  if (v83)
  {
    id v84 = WALogCategoryDefaultHandle();
    __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1862;
      v223 = 2112;
      id v224 = v83;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive WAIOReporterPopuator: %@",  buf,  0x1Cu);
    }
  }

  if (v82)
  {
    id v86 = WALogCategoryDefaultHandle();
    __int16 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      id v88 = (const char *)[v82 length];
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1866;
      v223 = 2048;
      id v224 = v88;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:WAIOReporterPopuator archive size %lu",  buf,  0x1Cu);
    }

    [v59 setObject:v82 forKey:@"WA_PERSIST_IOREPORTER_REGISTRATIONS"];
  }

  v200 = v69;
  id v89 = WALogCategoryDefaultHandle();
  id v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
  {
    id v91 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine recommendationEngine](self, "recommendationEngine"));
    id v92 = (char *)objc_claimAutoreleasedReturnValue([v91 dpsWDBudgetDict]);
    *(_DWORD *)buf = 136446722;
    uint64_t v220 = "-[WAEngine _persist]";
    v221 = 1024;
    v222 = 1871;
    v223 = 2112;
    id v224 = v92;
    _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:self.recommendationEngine.dpsWDBudgetDict %@",  buf,  0x1Cu);
  }

  id v93 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine recommendationEngine](self, "recommendationEngine"));
  id v94 = (void *)objc_claimAutoreleasedReturnValue([v93 dpsWDBudgetDict]);
  v212 = 0LL;
  v204 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v94,  1LL,  &v212));
  v95 = (char *)v212;

  if (v95)
  {
    id v96 = WALogCategoryDefaultHandle();
    v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1874;
      v223 = 2112;
      id v224 = v95;
      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive dpsWDBudgetData: %@",  buf,  0x1Cu);
    }
  }

  if (v204) {
    [v59 setObject:v204 forKey:@"WA_PERSIST_DPS_WD_BUDGET"];
  }
  appleCaptiveServerIP = self->_appleCaptiveServerIP;
  if (appleCaptiveServerIP)
  {
    v211 = 0LL;
    id v99 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  appleCaptiveServerIP,  1LL,  &v211));
    id v100 = (char *)v211;
    id v101 = WALogCategoryDefaultHandle();
    unsigned __int8 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
    {
      id v103 = self->_appleCaptiveServerIP;
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1883;
      v223 = 2112;
      id v224 = (const char *)v103;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:dps/dns: persisting self->_appleCaptiveServerIP %@",  buf,  0x1Cu);
    }

    if (v100)
    {
      uint64_t v104 = WALogCategoryDefaultHandle();
      NSErrorUserInfoKey v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v220 = "-[WAEngine _persist]";
        v221 = 1024;
        v222 = 1885;
        v223 = 2112;
        id v224 = v100;
        _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:dps/dns: Failed to archive dnsPersistenceData: %@",  buf,  0x1Cu);
      }
    }

    if (v99) {
      [v59 setObject:v99 forKey:@"WA_PERSIST_DNS_PERSISTDATA"];
    }
  }

  id v106 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine dpsQuickRecoveryEngine](self, "dpsQuickRecoveryEngine"));

  uint64_t v198 = v82;
  id v199 = (void *)v77;
  if (v106)
  {
    __int16 v107 = WALogCategoryDefaultHandle();
    int v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v109 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine dpsQuickRecoveryEngine](self, "dpsQuickRecoveryEngine"));
      v110 = (char *)objc_claimAutoreleasedReturnValue([v109 dpsQuickRecoveryWDBudgetDict]);
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1894;
      v223 = 2112;
      id v224 = v110;
      _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:self.dpsQuickRecoveryEngine.dpsQuickRecoveryWDBudgetDict %@",  buf,  0x1Cu);
    }

    id v111 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine dpsQuickRecoveryEngine](self, "dpsQuickRecoveryEngine"));
    v112 = (void *)objc_claimAutoreleasedReturnValue([v111 dpsQuickRecoveryWDBudgetDict]);
    v210 = 0LL;
    id v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v112,  1LL,  &v210));
    id v114 = (char *)v210;

    if (v114)
    {
      id v115 = WALogCategoryDefaultHandle();
      uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v220 = "-[WAEngine _persist]";
        v221 = 1024;
        v222 = 1897;
        v223 = 2112;
        id v224 = v114;
        _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive dpsQuickRecoveryWDBudgetDict: %@",  buf,  0x1Cu);
      }
    }

    if (v113) {
      [v59 setObject:v113 forKey:@"WA_PERSIST_DPS_QUICK_RECOVERY_WD_BUDGET"];
    }
    v117 = v59;
    id v118 = WALogCategoryDefaultHandle();
    v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v120 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine dpsQuickRecoveryEngine](self, "dpsQuickRecoveryEngine"));
      int v121 = (char *)objc_claimAutoreleasedReturnValue([v120 dpsStats]);
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1905;
      v223 = 2112;
      id v224 = v121;
      _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:self.dpsQuickRecoveryEngine.dpsStats %@",  buf,  0x1Cu);
    }

    unsigned __int8 v122 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine dpsQuickRecoveryEngine](self, "dpsQuickRecoveryEngine"));
    char v123 = (void *)objc_claimAutoreleasedReturnValue([v122 dpsStats]);
    id v209 = 0LL;
    id v124 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v123,  1LL,  &v209));
    id v125 = (char *)v209;

    BOOL v59 = v117;
    if (v125)
    {
      id v126 = WALogCategoryDefaultHandle();
      v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v220 = "-[WAEngine _persist]";
        v221 = 1024;
        v222 = 1908;
        v223 = 2112;
        id v224 = v125;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive dpsStats: %@",  buf,  0x1Cu);
      }
    }

    if (v124) {
      [v117 setObject:v124 forKey:@"WA_PERSIST_DPS_QUICK_RECOVERY_STATS"];
    }
  }

  if (self->_infraInterfaceName
    && (v128 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine infraInterfaceName](self, "infraInterfaceName")),
        v129 = [v128 isEqualToString:@"dunno"],
        v128,
        v129))
  {
    id v130 = WALogCategoryDefaultHandle();
    id v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
    {
      id v132 = (char *)objc_claimAutoreleasedReturnValue(-[WAEngine infraInterfaceName](self, "infraInterfaceName"));
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1918;
      v223 = 2112;
      id v224 = v132;
      _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:self.infrainterfacename %@",  buf,  0x1Cu);
    }

    v133 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine infraInterfaceName](self, "infraInterfaceName"));
    v208 = 0LL;
    id v134 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v133,  1LL,  &v208));
    id v135 = (char *)v208;

    if (v135)
    {
      id v136 = WALogCategoryDefaultHandle();
      id v137 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v220 = "-[WAEngine _persist]";
        v221 = 1024;
        v222 = 1921;
        v223 = 2112;
        id v224 = v135;
        _os_log_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive infraInterfaceName: %@",  buf,  0x1Cu);
      }
    }

    if (v134) {
      [v59 setObject:v134 forKey:@"WA_PERSIST_INFRA_INTERFACE"];
    }
  }

  else
  {
    id v138 = WALogCategoryDefaultHandle();
    id v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);
    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
    {
      id v139 = (char *)objc_claimAutoreleasedReturnValue(-[WAEngine infraInterfaceName](self, "infraInterfaceName"));
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1928;
      v223 = 2112;
      id v224 = v139;
      _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:self.infrainterfacename is %@, not persisting",  buf,  0x1Cu);
    }
  }

  id v140 = WALogCategoryDefaultHandle();
  id v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
  if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
  {
    id v142 = (char *)objc_claimAutoreleasedReturnValue(-[WAEngine wifiChipSet](self, "wifiChipSet"));
    *(_DWORD *)buf = 136446722;
    uint64_t v220 = "-[WAEngine _persist]";
    v221 = 1024;
    v222 = 1932;
    v223 = 2112;
    id v224 = v142;
    _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEBUG, "%{public}s::%d:self.wifiChipSet %@", buf, 0x1Cu);
  }

  __int128 v143 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine wifiChipSet](self, "wifiChipSet"));
  v207 = 0LL;
  id v144 = objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v143,  1LL,  &v207));
  __int128 v145 = (char *)v207;

  if (v145)
  {
    uint64_t v146 = WALogCategoryDefaultHandle();
    __int128 v147 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1935;
      v223 = 2112;
      id v224 = v145;
      _os_log_impl( (void *)&_mh_execute_header,  v147,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive wifiChipSet: %@",  buf,  0x1Cu);
    }
  }

  if (v144) {
    [v59 setObject:v144 forKey:@"WA_PERSIST_CHIPSET"];
  }
  id v148 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%s%s%s",  "WiFiAnalytics_executables-680.21",  "WiFiAnalytics_executables-680.21",  "Nov 10 2024 01:54:15");
  [v59 setObject:v148 forKey:@"WA_BUILD_VERSION_PERSIST_KEY"];

  v206 = 0LL;
  id v202 = v59;
  id v149 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v59,  1LL,  &v206));
  id v150 = (char *)v206;
  if (v150)
  {
    id v151 = v150;
    __int128 v152 = WALogCategoryDefaultHandle();
    uint64_t v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1947;
      v223 = 2112;
      id v224 = v151;
      _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to archive root persistence dictionary: %@",  buf,  0x1Cu);
    }
  }

  __int128 v154 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine _rotateObscureKey](self, "_rotateObscureKey"));
  memset(key, 0, sizeof(key));
  v230 = 0;
  [v154 getCString:key maxLength:33 encoding:4];
  __int128 v155 = [v149 length];
  dataOutMoved = 0LL;
  __int128 v156 = malloc((size_t)v155 + 16);
  v197 = (void *)v144;
  if (!v156)
  {
    v192 = WALogCategoryDefaultHandle();
    uint64_t v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(v192);
    if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1965;
      _os_log_impl( (void *)&_mh_execute_header,  v193,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:malloc failed during persistence",  buf,  0x12u);
    }

    goto LABEL_152;
  }

  dataOut = v156;
  if (CCRandomGenerateBytes(bytes, 0xCuLL))
  {
    char v194 = WALogCategoryDefaultHandle();
    v195 = (os_log_s *)objc_claimAutoreleasedReturnValue(v194);
    if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1970;
      v223 = 2080;
      id v224 = "-[WAEngine _persist]";
      _os_log_impl( (void *)&_mh_execute_header,  v195,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:CCRandomGenerateBytes failed in %s",  buf,  0x1Cu);
    }

    free(dataOut);
LABEL_152:
    __int128 v165 = v201;
    __int128 v166 = v198;
LABEL_153:

    objc_autoreleasePoolPop(context);
    goto LABEL_12;
  }

  uint64_t v196 = v154;
  __int128 v158 = v149;
  __int128 v159 = CCCryptorGCMOneshotEncrypt( 0,  key,  32,  bytes,  12,  0,  0,  [v158 bytes],  v155,  dataOut,  v227,  16);
  if (v159)
  {
    __int128 v160 = v159;
    __int128 v161 = WALogCategoryDefaultHandle();
    __int128 v162 = (os_log_s *)objc_claimAutoreleasedReturnValue(v161);
    if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1985;
      v223 = 2080;
      id v224 = "-[WAEngine _persist]";
      v225 = 1024;
      v226 = v160;
      _os_log_impl( (void *)&_mh_execute_header,  v162,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:%s: CCCryptorGCMOneshotEncrypt failed with error %d",  buf,  0x22u);
    }

    uint64_t v6 = &OBJC_IVAR___WAEngine__tmpFilesHaveAttemptedProcessingInDataStreamPath;
    if (CCCrypt( 0, 0, 1u, key, 0x20uLL, 0, [v158 bytes], (size_t)v155, dataOut, (size_t)v155 + 16, (size_t *)&dataOutMoved))
    {
      __int128 v163 = WALogCategoryDefaultHandle();
      __int128 v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
      if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v220 = "-[WAEngine _persist]";
        v221 = 1024;
        v222 = 1990;
        _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to obscure file",  buf,  0x12u);
      }

      free(dataOut);
      __int128 v165 = v201;
      __int128 v166 = v198;
      __int128 v154 = v196;
      goto LABEL_153;
    }
  }

  else
  {
    __int128 v167 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", bytes, 12LL));
    id v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v227, 16LL));
    NSErrorUserInfoKey v169 = WALogCategoryDefaultHandle();
    __int16 v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v220 = "-[WAEngine _persist]";
      v221 = 1024;
      v222 = 1978;
      v223 = 2080;
      id v224 = "-[WAEngine _persist]";
      _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:%s: writing IV and tag data",  buf,  0x1Cu);
    }

    -[WAEngine _saveKeyIVData:andTagData:](self, "_saveKeyIVData:andTagData:", v167, v168);
    dataOutMoved = v155;
  }

  NSErrorUserInfoKey v171 = objc_alloc(&OBJC_CLASS___NSData);
  char v172 = -[NSData initWithBytes:length:](v171, "initWithBytes:length:", dataOut, dataOutMoved);
  free(dataOut);
  self->_writingPersistFile = 1;
  NSErrorUserInfoKey v173 = NSHomeDirectory();
  __int16 v174 = (void *)objc_claimAutoreleasedReturnValue(v173);
  NSErrorUserInfoKey v175 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@t.out",  v174,  @"/Library/com.apple.wifianalyticsd/.wa/"));
  uint64_t v176 = -[NSData writeToFile:atomically:](v172, "writeToFile:atomically:", v175, 1LL);

  v177 = WALogCategoryDefaultHandle();
  __int16 v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
  int v179 = v178;
  if ((v176 & 1) != 0)
  {
    if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_142;
    }
    id v180 = NSHomeDirectory();
    __int16 v181 = (void *)objc_claimAutoreleasedReturnValue(v180);
    int v182 = (char *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@t.out",  v181,  @"/Library/com.apple.wifianalyticsd/.wa/"));
    *(_DWORD *)buf = 136446722;
    uint64_t v220 = "-[WAEngine _persist]";
    v221 = 1024;
    v222 = 2001;
    v223 = 2112;
    id v224 = v182;
    __int16 v183 = "%{public}s::%d:Wrote persistence file %@";
    id v184 = v179;
    v185 = OS_LOG_TYPE_DEFAULT;
  }

  else
  {
    if (!os_log_type_enabled(v178, OS_LOG_TYPE_ERROR)) {
      goto LABEL_142;
    }
    id v186 = NSHomeDirectory();
    __int16 v181 = (void *)objc_claimAutoreleasedReturnValue(v186);
    int v182 = (char *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@t.out",  v181,  @"/Library/com.apple.wifianalyticsd/.wa/"));
    *(_DWORD *)buf = 136446722;
    uint64_t v220 = "-[WAEngine _persist]";
    v221 = 1024;
    v222 = 1999;
    v223 = 2112;
    id v224 = v182;
    __int16 v183 = "%{public}s::%d:Failed to write persistence file %@";
    id v184 = v179;
    v185 = OS_LOG_TYPE_ERROR;
  }

  _os_log_impl((void *)&_mh_execute_header, v184, v185, v183, buf, 0x1Cu);

LABEL_142:
  self->_writingPersistFile = 0;

  objc_autoreleasePoolPop(context);
  id v187 = WALogCategoryDefaultHandle();
  id v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v187);
  if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
  {
    id v189 = os_transaction_get_description(v8);
    *(_DWORD *)buf = 136446722;
    uint64_t v220 = "-[WAEngine _persist]";
    v221 = 1024;
    v222 = 2006;
    v223 = 2080;
    id v224 = (const char *)v189;
    _os_log_impl( (void *)&_mh_execute_header,  v188,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Ending transaction %s",  buf,  0x1Cu);
  }

  id v190 = (void *)objc_claimAutoreleasedReturnValue([v6 + 464 sharedActivityManager]);
  [v190 osTransactionComplete:v8];

  id v191 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v191);
  if (os_signpost_enabled(v23))
  {
    *(_WORD *)buf = 0;
    id v24 = (const char *)&unk_1000B76E7;
    goto LABEL_18;
  }

  uint64_t v41 = WALogCategoryDefaultHandle();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v42 = self->_workReportTimerRunning;
    id v43 = -[RecommendationPreferences work_report_seconds](self->_preferences, "work_report_seconds");
    BOOL v44 = self->_workReportTimer;
    if (v44) {
      id v45 = dispatch_source_testcancel((dispatch_source_t)v44) == 0;
    }
    else {
      id v45 = 0;
    }
    *(_DWORD *)buf = 136447234;
    id v49 = "-[WAEngine _enableWorkReportRecurringTimer]";
    id v50 = 1024;
    id v51 = 2503;
    id v52 = 1024;
    *(_DWORD *)uint64_t v53 = v42;
    *(_WORD *)&v53[4] = 2048;
    *(void *)&v53[6] = v43;
    id v54 = 1024;
    id v55 = v45;
    __int16 v7 = "%{public}s::%d:Timer State : Enabled %d Period(ms) %lu valid %d";
    int v8 = v5;
    id v9 = 40;
    goto LABEL_39;
  }

LABEL_40:
}
}

  objc_autoreleasePoolPop(v2);
}

id sub_100023D10(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446466;
    uint64_t v6 = "-[WAIOReporterMessagePopulator _delayedInvocationForPersist]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 2553;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Performing scheduled persist",  (uint8_t *)&v5,  0x12u);
  }

  id result = [*(id *)(a1 + 32) _persistIORObjects:0];
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  return result;
}

LABEL_18:
}

    goto LABEL_19;
  }

  id v9 = Apple80211BindToInterface(v7->_apple80211Ref, *p_ifName);
  if ((_DWORD)v9)
  {
    id v29 = WALogCategoryDefaultHandle();
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *p_ifName;
      int v31 = Apple80211ErrToStr(v9);
      *(_DWORD *)buf = 136447234;
      *(void *)id v38 = "-[WAApple80211 initWithInterfaceName:]";
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)&v38[10] = 157;
      id v39 = 2112;
      BOOL v40 = v30;
      uint64_t v41 = 1024;
      BOOL v42 = v9;
      id v43 = 2080;
      BOOL v44 = v31;
      id v26 = "%{public}s::%d:Apple80211BindToInterface (for interface with name: %@) failed with: %d - %s";
      v27 = v24;
      id v28 = 44;
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  id v10 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  lastDateChannelQueried = v7->_lastDateChannelQueried;
  v7->_lastDateChannelQueried = (NSDate *)v10;

  dword_1000ECF70 = 0;
  qword_1000ECF68 = 0LL;
  id v12 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  lastDateBSSIDQueried = v7->_lastDateBSSIDQueried;
  v7->_lastDateBSSIDQueried = (NSDate *)v12;

  id v14 = (void *)qword_1000ECF48;
  qword_1000ECF48 = (uint64_t)@"00:00:00:00:00:00";

  id v15 = (void *)qword_1000ECF50;
  qword_1000ECF50 = (uint64_t)@"Uninit lastSSID";

  id v16 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_BACKGROUND, 0);
  id v17 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = dispatch_queue_create("com.apple.wifi.recoveryMO.queue", v17);
  analyticsMOCQueue = v7->analyticsMOCQueue;
  v7->analyticsMOCQueue = (OS_dispatch_queue *)v18;

  byte_1000ECF40 = 0;
  if (!v7->_dummyWAMessage)
  {
    id v20 = objc_alloc_init(&OBJC_CLASS___WAMessage);
    dummyWAMessage = v7->_dummyWAMessage;
    v7->_dummyWAMessage = v20;
LABEL_7:
  }

  return v7;
}

    id v9 = 0LL;
    goto LABEL_19;
  }

  id v4 = 7;
  while (1)
  {
    int v5 = Apple80211Get(-[WAApple80211 apple80211Ref](self, "apple80211Ref"), 14LL, 0LL, v3, 8LL);
    uint64_t v6 = v5;
    if (v5 <= 15)
    {
      if (v5 != -3905) {
        break;
      }
    }

    else if (v5 != 61 && v5 != 16)
    {
      goto LABEL_23;
    }

    if (!--v4) {
      break;
    }
    usleep(0x7A120u);
  }

  if (v5) {
    goto LABEL_23;
  }
  if (![v3 count]
    || (__int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"PHYMODE_ACTIVE"]),
        v7,
        !v7))
  {
    id v10 = WALogCategoryDefaultHandle();
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v18 = 136446722;
      id v19 = "-[WAApple80211 getPhyMode]";
      id v20 = 1024;
      id v21 = 724;
      id v22 = 2112;
      id v23 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find APPLE80211KEY_PHYMODE_ACTIVE in APPLE80211_IOC_PHY_MODE dict %@",  (uint8_t *)&v18,  0x1Cu);
    }

    id v12 = WALogCategoryDefaultHandle();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      id v18 = 138412290;
      id v19 = v3;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Failed to find APPLE80211KEY_PHYMODE_ACTIVE in APPLE80211_IOC_PHY_MODE dict %@",  (uint8_t *)&v18,  0xCu);
    }

    goto LABEL_18;
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"PHYMODE_ACTIVE"]);
  id v9 = [v8 unsignedIntValue];

LABEL_19:
  return v9;
}

  return v18;
}
}

LABEL_35:
        uint64_t v30 = v94 + 1;
      }

      while ((id)(v94 + 1) != v29);
      __int16 v87 = [v26 countByEnumeratingWithState:&v103 objects:v126 count:16];
      id v29 = v87;
    }

    while (v87);
  }

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Unpersisted Count",  v2->_cachedUsage,  v2->_queue);
  cachedUsage = v2->_cachedUsage;
  id v89 = (void *)objc_claimAutoreleasedReturnValue([v28[91] date]);
  -[NSMutableDictionary setObject:forKey:](cachedUsage, "setObject:forKey:", v89, @"PID Unpersisted Date");

  +[WAUtil logNestedDictionary:indent:prefix:]( &OBJC_CLASS___WAUtil,  "logNestedDictionary:indent:prefix:",  v2->_cachedUsage,  0LL,  @"Unpersist ior _cachedUsage");
}

        uint64_t v30 = (char *)v30 + 1;
      }

      while (v29 != v30);
      BOOL v59 = [v27 countByEnumeratingWithState:&v66 objects:v84 count:16];
      id v29 = v59;
    }

    while (v59);
  }

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Unpersisted Count",  self->_cachedUsage,  self->_engineQ);
  cachedUsage = self->_cachedUsage;
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  -[NSMutableDictionary setObject:forKey:](cachedUsage, "setObject:forKey:", v61, @"PID Unpersisted Date");

  +[WAUtil logNestedDictionary:indent:prefix:]( &OBJC_CLASS___WAUtil,  "logNestedDictionary:indent:prefix:",  self->_cachedUsage,  0LL,  @"Handle Unpersist Engine _cachedUsage");
}

  if (!v83[5]) {
    goto LABEL_53;
  }
  id v49 = (_BYTE *)*(unsigned int *)(a1 + 104);
  if ((_DWORD)v49 == 1
    || (id v50 = *(void *)(a1 + 48), *(_BYTE *)(v50 + 42))
    && (id v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v50 + 176) preferences]),
        id v52 = (char *)objc_msgSend(v51, "dns_symptoms_trap_evaluated_at_sample") - 1 == v49,
        v51,
        v52))
  {
    uint64_t v53 = *(void *)(a1 + 96);
    id v54 = *(void **)(a1 + 48);
    id v55 = *(void *)(a1 + 56);
    id v69 = _NSConcreteStackBlock;
    id v70 = 3221225472LL;
    id v71 = sub_100060044;
    NSErrorUserInfoKey v72 = &unk_1000CD528;
    id v56 = v54;
    id v57 = *(void *)(a1 + 88);
    v76 = *(_DWORD *)(a1 + 104);
    BOOL v58 = *(void *)(a1 + 72);
    BOOL v73 = v56;
    id v74 = v58;
    BOOL v75 = v57;
    [v56 _getNewMessageForKey:@"DPSS" groupType:v53 forProcessToken:v55 shouldCheckForPrePopulation:1 andReply:&v69];
  }

  if (!*(_BYTE *)(*(void *)(a1 + 48) + 42LL))
  {
    if (*(_DWORD *)(a1 + 104) >= 2u) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }

  BOOL v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 72) + 176) preferences]);
  if (objc_msgSend(v59, "dns_symptoms_trap_evaluated_at_sample") != (id)1)
  {

LABEL_48:
    uint64_t v61 = *(void **)(a1 + 48);
    BOOL v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v83[5], "fieldForKey:", @"DPSCS_controllerStats", v69, v70, v71, v72));
    BOOL v62 = (void *)objc_claimAutoreleasedReturnValue([v59 subMessageValue]);
    [v61 populateChannelInfo:v62];

    goto LABEL_49;
  }

  if (!*(_BYTE *)(*(void *)(a1 + 48) + 42LL))
  {
    id v60 = *(_DWORD *)(a1 + 104) < 2u;

    if (!v60) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }

      if ((id)++v10 == v48)
      {
        id v48 = [v9 countByEnumeratingWithState:&v54 objects:v59 count:16];
        if (!v48)
        {
LABEL_37:

          id v2 = v44;
          goto LABEL_38;
        }

        goto LABEL_8;
      }
    }

    id v12 = v10;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 info]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"PingResult"]);

    id v15 = [v14 count];
    id v16 = (double)(uint64_t)[v14 count];
    [v14 packetLoss];
    id obj = v14;
    id v18 = (v16 + v17 / -100.0 * (double)(uint64_t)[v14 count]);
    id v19 = *(unsigned int *)(a1 + 56);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 176) preferences]);
    id v21 = objc_msgSend(v20, "dns_symptoms_trap_evaluated_at_sample");

    id v22 = *(void *)(a1 + 48);
    if ((unint64_t)v21 <= v19)
    {
      *(void *)(v22 + 288) += v18;
    }

    else
    {
      *(void *)(v22 + 256) += v18;
      if ((_DWORD)v18) {
        *(_BYTE *)(*(void *)(a1 + 48) + 46LL) = 1;
      }
    }

    uint64_t v41 = WALogCategoryDefaultHandle();
    BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    id v10 = v12;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      id v43 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447234;
      uint64_t v61 = "-[WAEngine triggerDiagnosticPingWithrequestId:]_block_invoke";
      BOOL v62 = 1024;
      id v63 = 6191;
      id v64 = 1024;
      id v65 = v43;
      id v66 = 1024;
      *(_DWORD *)__int128 v67 = v15;
      *(_WORD *)&v67[4] = 1024;
      *(_DWORD *)&v67[6] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:LANPingResults: instanceId:%u pingCount:%u successCount:%u",  buf,  0x24u);
    }

LABEL_34:
    goto LABEL_35;
  }

  *(_BYTE *)(*(void *)(a1 + 48) + 40LL) = 1;
LABEL_38:
  objc_autoreleasePoolPop(v2);
}

void sub_100024E94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100024EB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100024EC4(uint64_t a1)
{
}

void sub_100024ECC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([WeakRetained _getCachedUsage]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100025100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100025118(uint64_t a1, uint64_t a2)
{
  uint64_t DriverName = IOReportChannelGetDriverName(a2);
  int v5 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(DriverName);
  uint64_t Group = IOReportChannelGetGroup(a2);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(Group);
  Subuint64_t Group = IOReportChannelGetSubGroup(a2);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(SubGroup);
  uint64_t ChannelName = IOReportChannelGetChannelName(a2);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(ChannelName);
  id v12 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectForKeyedSubscript:v5]);
  if (!v12)
  {
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setValue:v13 forKey:v5];
    goto LABEL_14;
  }

  uint64_t v13 = v12;
  id v14 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v7));
  if (!v14)
  {
LABEL_14:
    id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setValue:forKey:](v13, "setValue:forKey:", v15, v7);
    goto LABEL_15;
  }

  id v15 = v14;
  id v16 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", v9));
  if (!v16)
  {
LABEL_15:
    id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setValue:forKey:](v15, "setValue:forKey:", v17, v9);
    goto LABEL_16;
  }

  id v17 = v16;
  uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", v11));
  if (!v18)
  {
LABEL_16:
    -[NSMutableDictionary setValue:forKey:](v17, "setValue:forKey:", a2, v11);
    goto LABEL_12;
  }

  id v19 = (NSMutableDictionary *)v18;
  id v20 = WALogCategoryDefaultHandle();
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    int v27 = 136446722;
    id v28 = "-[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]_block_invoke";
    __int16 v29 = 1024;
    int v30 = 2810;
    __int16 v31 = 2112;
    id v32 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Existing subgroupDict %@",  (uint8_t *)&v27,  0x1Cu);
  }

  id v22 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    int v27 = 136446722;
    id v28 = "-[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]_block_invoke";
    __int16 v29 = 1024;
    int v30 = 2811;
    __int16 v31 = 2112;
    id v32 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Existing channelDict %@",  (uint8_t *)&v27,  0x1Cu);
  }

  id v24 = WALogCategoryDefaultHandle();
  BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    int v27 = 136447746;
    id v28 = "-[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]_block_invoke";
    __int16 v29 = 1024;
    int v30 = 2812;
    __int16 v31 = 2112;
    id v32 = v5;
    __int16 v33 = 2112;
    id v34 = v7;
    __int16 v35 = 2112;
    uint64_t v36 = v9;
    __int16 v37 = 2112;
    id v38 = v11;
    __int16 v39 = 2112;
    uint64_t v40 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:how is there already a channel here? %@ %@ %@ %@ %@",  (uint8_t *)&v27,  0x44u);
  }

LABEL_12:
  return 0LL;
}

id sub_10002575C(void *a1)
{
  id v1 = a1;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allKeys]);
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v24;
    uint64_t v18 = *(void *)v24;
    while (2)
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v24 != v5) {
          objc_enumerationMutation(v2);
        }
        __int16 v7 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        if ([v7 containsString:@"WLAN"])
        {
          id v17 = v7;
LABEL_19:

          id v14 = v7;
          goto LABEL_20;
        }

        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:v7]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 allKeys]);

        id v10 = [v9 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v20;
          while (2)
          {
            for (j = 0LL; j != v11; j = (char *)j + 1)
            {
              if (*(void *)v20 != v12) {
                objc_enumerationMutation(v9);
              }
              if ([*(id *)(*((void *)&v19 + 1) + 8 * (void)j) containsString:@"WLAN"])
              {
                id v15 = v7;

                goto LABEL_19;
              }
            }

            id v11 = [v9 countByEnumeratingWithState:&v19 objects:v27 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

        uint64_t v5 = v18;
      }

      id v4 = [v2 countByEnumeratingWithState:&v23 objects:v28 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v14 = 0LL;
  __int16 v7 = v2;
LABEL_20:

  return v14;
}

void sub_10002595C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  __int128 v20 = objc_autoreleasePoolPush();
  __int128 v21 = sub_100026554(v13, v16, v17, v18, v19);
  if (v21)
  {
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v21, 0LL);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:v15]);
    [v23 setUint32Value:IntegerValue];
  }

  else
  {
    id v24 = WALogCategoryDefaultHandle();
    __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136447490;
      int v27 = "_Bool fillUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSStrin"
            "g * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __str"
            "ong, NSString * _Nonnull __strong)";
      __int16 v28 = 1024;
      int v29 = 242;
      __int16 v30 = 2112;
      id v31 = v16;
      __int16 v32 = 2112;
      id v33 = v17;
      __int16 v34 = 2112;
      id v35 = v18;
      __int16 v36 = 2112;
      id v37 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  (uint8_t *)&v26,  0x3Au);
    }
  }

  objc_autoreleasePoolPop(v20);
}

uint64_t sub_100025B1C( void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v42 = a1;
  id v50 = a2;
  objc_initWeak(&location, a3);
  id v49 = a5;
  id v48 = a6;
  id v43 = a7;
  id v44 = a8;
  id v45 = a9;
  id v46 = a10;
  id val = objc_loadWeakRetained(&location);
  id v16 = sub_100026554(v42, v43, v44, v45, v46);
  if (v16)
  {
    id v56 = v16;
    unsigned int v57 = 0;
    char v17 = 0;
    while ((int)v57 < (int)IOReportStateGetCount(v56))
    {
      context = objc_autoreleasePoolPush();
      uint64_t NameForIndex = IOReportStateGetNameForIndex(v56, v57);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
      uint64_t Residency = IOReportStateGetResidency(v56, v57);
      uint64_t Unit = IOReportChannelGetUnit(v56);
      double v22 = IOReportScaleValue(Residency, Unit, 0x100007C00000000LL);
      id v55 = v50;
      objc_initWeak(&v63, val);
      id v53 = v49;
      id v23 = v19;
      id v24 = v48;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      __int128 v62 = 0u;
      id v54 = v24;
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "fieldForKey:"));
      int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 repeatableValues]);

      id v27 = [v26 countByEnumeratingWithState:&v59 objects:buf count:16];
      if (v27)
      {
        uint64_t v28 = *(void *)v60;
        while (2)
        {
          for (i = 0LL; i != v27; i = (char *)i + 1)
          {
            if (*(void *)v60 != v28) {
              objc_enumerationMutation(v26);
            }
            __int16 v30 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)i);
            id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 fieldForKey:@"NWASB_state"]);
            __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 stringValue]);
            unsigned __int8 v33 = [v32 isEqualToString:v23];

            if ((v33 & 1) != 0)
            {
              id v36 = v30;
              goto LABEL_14;
            }
          }

          id v27 = [v26 countByEnumeratingWithState:&v59 objects:buf count:16];
          if (v27) {
            continue;
          }
          break;
        }
      }

      id v34 = objc_loadWeakRetained(&v63);
      id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 getNewMessageForKey:@"NWASB" groupType:a4 forProcessWithToken:v53]);
      id v36 = [v35 copy];

      int v26 = (void *)objc_claimAutoreleasedReturnValue([v55 fieldForKey:v54]);
      [v26 addRepeatableSubMessageValue:v36];
LABEL_14:

      id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 fieldForKey:@"NWASB_residentTime"]);
      [v37 setUint64Value:(unint64_t)v22];

      id v38 = (void *)objc_claimAutoreleasedReturnValue([v36 fieldForKey:@"NWASB_state"]);
      [v38 setStringValue:v23];

      objc_destroyWeak(&v63);
      objc_autoreleasePoolPop(context);
      ++v57;
      char v17 = 1;
    }
  }

  else
  {
    id v39 = WALogCategoryDefaultHandle();
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      id v65 = "_Bool fillStatesFromState(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak id<WAI"
            "OReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull"
            " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSStrin"
            "g * _Nonnull __strong)";
      __int16 v66 = 1024;
      int v67 = 372;
      __int16 v68 = 2112;
      id v69 = v43;
      __int16 v70 = 2112;
      id v71 = v44;
      __int16 v72 = 2112;
      id v73 = v45;
      __int16 v74 = 2112;
      id v75 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
    }

    char v17 = 0;
  }

  objc_destroyWeak(&location);
  return v17 & 1;
}

void sub_100025F88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id location, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
}

void sub_100025FC8( void *a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned int a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v39 = a1;
  id v37 = a2;
  objc_initWeak(&location, a3);
  id v38 = a5;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  context = objc_autoreleasePoolPush();
  double v22 = sub_100026554(v39, v18, v19, v20, v21);
  if (!v22)
  {
    id v34 = WALogCategoryDefaultHandle();
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_DWORD *)buf = 136447490;
    id v42 = "_Bool fillNWTrafficStatsFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak"
          " id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, WiFiAnalyticsA"
          "WDWiFiNWActivityTcategory, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __s"
          "trong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    __int16 v43 = 1024;
    int v44 = 283;
    __int16 v45 = 2112;
    id v46 = v18;
    __int16 v47 = 2112;
    id v48 = v19;
    __int16 v49 = 2112;
    id v50 = v20;
    __int16 v51 = 2112;
    id v52 = v21;
    id v31 = "%{public}s::%d:Failed to find %@ %@ %@ %@";
    __int16 v32 = v27;
    uint32_t v33 = 58;
    goto LABEL_8;
  }

  uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v22, 0LL);
  id v24 = v17;
  id v25 = v21;
  unsigned int v26 = objc_msgSend(v24, "characterAtIndex:", (char *)objc_msgSend(v24, "length") - 1);
  if (v26 == objc_msgSend(v25, "characterAtIndex:", (char *)objc_msgSend(v25, "length") - 1))
  {

    id v27 = (os_log_s *)objc_loadWeakRetained(&location);
    sub_1000270E0(v37, v27, a4, v38, IntegerValue, a6, v24);
    goto LABEL_9;
  }

  id v28 = WALogCategoryDefaultHandle();
  int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446978;
    id v42 = "_Bool sanityCheckBetweenFieldAndChannelName(NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    __int16 v43 = 1024;
    int v44 = 109;
    __int16 v45 = 2112;
    id v46 = v24;
    __int16 v47 = 2112;
    id v48 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Potential field / channel mismatch for %@ and %@",  buf,  0x26u);
  }

  id v30 = WALogCategoryDefaultHandle();
  id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447746;
    id v42 = "_Bool fillNWTrafficStatsFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak"
          " id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, WiFiAnalyticsA"
          "WDWiFiNWActivityTcategory, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __s"
          "trong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    __int16 v43 = 1024;
    int v44 = 287;
    __int16 v45 = 2112;
    id v46 = v24;
    __int16 v47 = 2112;
    id v48 = v18;
    __int16 v49 = 2112;
    id v50 = v19;
    __int16 v51 = 2112;
    id v52 = v20;
    __int16 v53 = 2112;
    id v54 = v25;
    id v31 = "%{public}s::%d:Sanity Failed field-channel mismatch %@ %@ %@ %@ %@";
    __int16 v32 = v27;
    uint32_t v33 = 68;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);
  }

void sub_100026328( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100026348( void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v29 = a1;
  id v28 = a2;
  objc_initWeak(&location, a3);
  id v18 = a5;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a10;
  id v23 = a11;
  id v24 = sub_100026554(v29, v20, v21, v22, v23);
  if (v24)
  {
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v24, 0LL);
    id v26 = objc_loadWeakRetained(&location);
    sub_1000270E0(v28, v26, a4, v18, IntegerValue, a6, v19);
  }

  else
  {
    id v27 = WALogCategoryDefaultHandle();
    id v26 = (id)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      __int16 v32 = "_Bool fillNWTrafficStatsFromSimpleNoCheck(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __stron"
            "g, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, WiF"
            "iAnalyticsAWDWiFiNWActivityTcategory, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString *"
            " _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
      __int16 v33 = 1024;
      int v34 = 305;
      __int16 v35 = 2112;
      id v36 = v20;
      __int16 v37 = 2112;
      id v38 = v21;
      __int16 v39 = 2112;
      id v40 = v22;
      __int16 v41 = 2112;
      id v42 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v26,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
    }
  }

  objc_destroyWeak(&location);
}

void sub_100026538( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void *sub_100026554(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v11]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v12]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v13]);

  if (!v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);

    if (v18)
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v11]);

      id v103 = v9;
      if (v20)
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v11]);
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v12]);

        if (v23)
        {
          id v24 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v11]);
          id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v12]);
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v13]);

          if (v27)
          {
            id v17 = 0LL;
            goto LABEL_66;
          }

          id v70 = WALogCategoryDefaultHandle();
          id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
          {
            __int16 v72 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
            id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 objectForKeyedSubscript:v11]);
            __int16 v74 = (void *)objc_claimAutoreleasedReturnValue([v73 objectForKeyedSubscript:v12]);
            id v75 = (void *)objc_claimAutoreleasedReturnValue([v74 allKeys]);
            *(_DWORD *)buf = 136446978;
            v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __st"
                   "rong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
            __int16 v121 = 1024;
            int v122 = 81;
            __int16 v123 = 2112;
            id v124 = v13;
            __int16 v125 = 2112;
            id v126 = v75;
            _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Looking for channel %@, choices are %@",  buf,  0x26u);
          }

          __int128 v106 = 0u;
          __int128 v107 = 0u;
          __int128 v104 = 0u;
          __int128 v105 = 0u;
          v76 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
          BOOL v77 = (void *)objc_claimAutoreleasedReturnValue([v76 objectForKeyedSubscript:v11]);
          id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 objectForKeyedSubscript:v12]);
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v78 allKeys]);

          id v79 = [v29 countByEnumeratingWithState:&v104 objects:v116 count:16];
          if (v79)
          {
            id v80 = v79;
            id v98 = v11;
            id v100 = v12;
            id v81 = v10;
            id v82 = v13;
            uint64_t v83 = *(void *)v105;
            while (2)
            {
              for (i = 0LL; i != v80; i = (char *)i + 1)
              {
                if (*(void *)v105 != v83) {
                  objc_enumerationMutation(v29);
                }
                __int16 v85 = *(void **)(*((void *)&v104 + 1) + 8LL * (void)i);
                if (objc_msgSend(v85, "containsString:", v82, v98))
                {
                  id v86 = v29;
                  id v87 = WALogCategoryDefaultHandle();
                  id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
                  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonn"
                           "ull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                    __int16 v121 = 1024;
                    int v122 = 84;
                    __int16 v123 = 2112;
                    id v124 = v85;
                    _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Found match with contains %@",  buf,  0x1Cu);
                  }

                  id v89 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v81]);
                  id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKeyedSubscript:v98]);
                  id v91 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKeyedSubscript:v100]);
                  id v17 = (void *)objc_claimAutoreleasedReturnValue([v91 objectForKeyedSubscript:v85]);

                  id v9 = v103;
                  id v29 = v86;
                  if (v17)
                  {
                    id v94 = WALogCategoryDefaultHandle();
                    v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
                    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446466;
                      v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _No"
                             "nnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                      __int16 v121 = 1024;
                      int v122 = 87;
                      _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Using match",  buf,  0x12u);
                    }

                    goto LABEL_63;
                  }
                }
              }

              id v80 = [v29 countByEnumeratingWithState:&v104 objects:v116 count:16];
              if (v80) {
                continue;
              }
              break;
            }

            id v17 = 0LL;
LABEL_63:
            id v13 = v82;
            id v10 = v81;
            id v12 = v100;
LABEL_64:
            id v11 = v98;
            goto LABEL_65;
          }
        }

        else
        {
          id v48 = WALogCategoryDefaultHandle();
          __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            id v50 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
            __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 objectForKeyedSubscript:v11]);
            id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 allKeys]);
            *(_DWORD *)buf = 136446978;
            v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __st"
                   "rong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
            __int16 v121 = 1024;
            int v122 = 69;
            __int16 v123 = 2112;
            id v124 = v12;
            __int16 v125 = 2112;
            id v126 = v52;
            _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Looking for subgroup %@, choices are %@",  buf,  0x26u);
          }

          __int128 v110 = 0u;
          __int128 v111 = 0u;
          __int128 v108 = 0u;
          __int128 v109 = 0u;
          __int16 v53 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
          id v54 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:v11]);
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v54 allKeys]);

          id v55 = [v29 countByEnumeratingWithState:&v108 objects:v117 count:16];
          if (v55)
          {
            id v56 = v55;
            id v98 = v11;
            id v57 = v12;
            id v102 = v10;
            id v58 = v13;
            uint64_t v59 = *(void *)v109;
            while (2)
            {
              for (j = 0LL; j != v56; j = (char *)j + 1)
              {
                if (*(void *)v109 != v59) {
                  objc_enumerationMutation(v29);
                }
                __int128 v61 = *(void **)(*((void *)&v108 + 1) + 8LL * (void)j);
                if (objc_msgSend(v61, "containsString:", v57, v98))
                {
                  __int128 v62 = v29;
                  id v63 = WALogCategoryDefaultHandle();
                  id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonn"
                           "ull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                    __int16 v121 = 1024;
                    int v122 = 72;
                    __int16 v123 = 2112;
                    id v124 = v61;
                    _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Found match with contains %@",  buf,  0x1Cu);
                  }

                  id v65 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v102]);
                  __int16 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKeyedSubscript:v98]);
                  int v67 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v61]);
                  id v17 = (void *)objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:v58]);

                  id v9 = v103;
                  id v29 = v62;
                  if (v17)
                  {
                    id v92 = WALogCategoryDefaultHandle();
                    id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
                    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446466;
                      v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _No"
                             "nnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                      __int16 v121 = 1024;
                      int v122 = 75;
                      _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Using match",  buf,  0x12u);
                    }

                    goto LABEL_59;
                  }
                }
              }

              id v56 = [v29 countByEnumeratingWithState:&v108 objects:v117 count:16];
              if (v56) {
                continue;
              }
              break;
            }

            id v17 = 0LL;
LABEL_59:
            id v13 = v58;
            id v10 = v102;
            id v12 = v57;
            goto LABEL_64;
          }
        }
      }

      else
      {
        id v31 = WALogCategoryDefaultHandle();
        __int16 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
          int v34 = (void *)objc_claimAutoreleasedReturnValue([v33 allKeys]);
          *(_DWORD *)buf = 136446978;
          v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __stro"
                 "ng, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
          __int16 v121 = 1024;
          int v122 = 57;
          __int16 v123 = 2112;
          id v124 = v11;
          __int16 v125 = 2112;
          id v126 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Looking for group %@, choices are %@",  buf,  0x26u);
        }

        __int128 v114 = 0u;
        __int128 v115 = 0u;
        __int128 v112 = 0u;
        __int128 v113 = 0u;
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v35 allKeys]);

        id v36 = [v29 countByEnumeratingWithState:&v112 objects:v118 count:16];
        if (v36)
        {
          id v37 = v36;
          id v99 = v12;
          id v101 = v10;
          id v38 = v13;
          uint64_t v39 = *(void *)v113;
          uint64_t v97 = 136446722LL;
          while (2)
          {
            for (k = 0LL; k != v37; k = (char *)k + 1)
            {
              if (*(void *)v113 != v39) {
                objc_enumerationMutation(v29);
              }
              __int16 v41 = *(void **)(*((void *)&v112 + 1) + 8LL * (void)k);
              if (objc_msgSend(v41, "containsString:", v11, v97))
              {
                id v42 = v29;
                id v43 = WALogCategoryDefaultHandle();
                int v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = v97;
                  v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnul"
                         "l __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                  __int16 v121 = 1024;
                  int v122 = 60;
                  __int16 v123 = 2112;
                  id v124 = v41;
                  _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Found match with contains %@",  buf,  0x1Cu);
                }

                __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v101]);
                id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKeyedSubscript:v41]);
                __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v99]);
                id v17 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v38]);

                id v9 = v103;
                id v29 = v42;
                if (v17)
                {
                  id v68 = WALogCategoryDefaultHandle();
                  id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446466;
                    v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonn"
                           "ull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                    __int16 v121 = 1024;
                    int v122 = 63;
                    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Using match",  buf,  0x12u);
                  }

                  goto LABEL_40;
                }
              }
            }

            id v37 = [v29 countByEnumeratingWithState:&v112 objects:v118 count:16];
            if (v37) {
              continue;
            }
            break;
          }

          id v17 = 0LL;
LABEL_40:
          id v13 = v38;
          id v10 = v101;
          id v12 = v99;
          goto LABEL_65;
        }
      }
    }

    else
    {
      id v28 = WALogCategoryDefaultHandle();
      id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEBUG))
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v9 allKeys]);
        *(_DWORD *)buf = 136446978;
        v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong"
               ", NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
        __int16 v121 = 1024;
        int v122 = 55;
        __int16 v123 = 2112;
        id v124 = v10;
        __int16 v125 = 2112;
        id v126 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Looking for driver %@, choices are %@",  buf,  0x26u);
      }
    }

    id v17 = 0LL;
LABEL_65:
  }

LABEL_66:
  return v17;
}

void sub_1000270E0(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v25 = a3;
  id v28 = a1;
  objc_initWeak(&location, a2);
  id v27 = a4;
  id v11 = a7;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v28 fieldForKey:v11]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 repeatableValues]);

  id v14 = [v13 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v30;
    while (2)
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v30 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "fieldForKey:", @"NWAT_traffic", v25));
        BOOL v19 = [v18 int32Value] == (_DWORD)a6;

        if (v19)
        {
          id v22 = v17;
          goto LABEL_11;
        }
      }

      id v14 = [v13 countByEnumeratingWithState:&v29 objects:v34 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }

  id v20 = objc_loadWeakRetained(&location);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 getNewMessageForKey:@"NWAT" groupType:v25 forProcessWithToken:v27]);
  id v22 = [v21 copy];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v28 fieldForKey:v11]);
  [v13 addRepeatableSubMessageValue:v22];
LABEL_11:

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 fieldForKey:@"NWAT_traffic"]);
  [v23 setInt32Value:a6];

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v22 fieldForKey:@"NWAT_value"]);
  [v24 setUint64Value:a5];

  objc_destroyWeak(&location);
}

void sub_100027324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_10002734C( void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v26 = a1;
  id v32 = a2;
  objc_initWeak(&location, a3);
  id v31 = a5;
  id v30 = a6;
  id v27 = a7;
  id v28 = a8;
  id v29 = a9;
  id v16 = objc_loadWeakRetained(&location);
  id v17 = sub_100026554(v26, v27, v28, @"TxCompletion Latency", v29);
  id v18 = v17;
  if (v17)
  {
    uint64_t UnitLabel = IOReportChannelGetUnitLabel(v17);
    for (uint64_t i = 0LL; (int)i < (int)IOReportHistogramGetBucketCount(v18); uint64_t i = (i + 1))
    {
      id v21 = objc_autoreleasePoolPush();
      IOReportHistogramGetBucketBounds(v18, i, &v34, &v33);
      uint64_t BucketHits = IOReportHistogramGetBucketHits(v18, i);
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lld - %lld %@",  v34,  v33,  UnitLabel));
      sub_1000275F0(v32, v16, a4, v31, v23, BucketHits, v30);

      objc_autoreleasePoolPop(v21);
    }
  }

  else
  {
    id v24 = WALogCategoryDefaultHandle();
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      id v37 = "_Bool fillHistogramFromHistogram(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak"
            " id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _"
            "Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, "
            "NSString * _Nonnull __strong)";
      __int16 v38 = 1024;
      int v39 = 396;
      __int16 v40 = 2112;
      id v41 = v27;
      __int16 v42 = 2112;
      id v43 = v28;
      __int16 v44 = 2112;
      __int16 v45 = @"TxCompletion Latency";
      __int16 v46 = 2112;
      id v47 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
    }
  }

  objc_destroyWeak(&location);
}

void sub_1000275CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_1000275F0(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v30 = a1;
  objc_initWeak(&location, a2);
  id v28 = a4;
  id v11 = a5;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id v29 = a7;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 repeatableValues]);

  id v14 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v32;
    while (2)
    {
      for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 fieldForKey:@"NWAHB_bin"]);
        BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v18 stringValue]);
        unsigned __int8 v20 = [v19 isEqualToString:v11];

        if ((v20 & 1) != 0)
        {
          id v23 = v17;
          goto LABEL_11;
        }
      }

      id v14 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }

  id v21 = objc_loadWeakRetained(&location);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 getNewMessageForKey:@"NWAHB" groupType:a3 forProcessWithToken:v28]);
  id v23 = [v22 copy];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v30 fieldForKey:v29]);
  [v13 addRepeatableSubMessageValue:v23];
LABEL_11:

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 fieldForKey:@"NWAHB_hits"]);
  [v24 setUint64Value:a6];

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 fieldForKey:@"NWAHB_bin"]);
  [v25 setStringValue:v11];

  objc_destroyWeak(&location);
}

void sub_100027850( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

void sub_100027878(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a1;
  id v154 = a2;
  id v155 = a3;
  id v9 = a4;
  uint64_t v153 = v8;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 fieldForKey:@"NWACS_aggregateMetrics"]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 subMessageValue]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxDataErrors"]);
  [v12 setUint64Value:0];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxFrames"]);
  [v13 setUint64Value:0];

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxRetryBitSet"]);
  [v14 setUint64Value:0];

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxDataFrameMatchingRA"]);
  [v15 setUint64Value:0];

  id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxDataFrameOtherRA"]);
  [v16 setUint64Value:0];

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxControlFrameMatchingRA"]);
  [v17 setUint32Value:0];

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxControlFrameOtherRA"]);
  [v18 setUint32Value:0];

  BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxGoodPLCP"]);
  [v19 setUint64Value:0];

  unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxBadPLCP"]);
  [v20 setUint64Value:0];

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxBadFCS"]);
  [v21 setUint64Value:0];

  id v22 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kTxFrames"]);
  [v22 setUint64Value:0];

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kTxRetransmission"]);
  [v23 setUint64Value:0];

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kdot11RetryCount"]);
  [v24 setUint64Value:0];

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kdot11MultipleRetryCount"]);
  [v25 setUint64Value:0];

  id v26 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kdot11RTSSuccessCount"]);
  [v26 setUint64Value:0];

  id v27 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kdot11RTSFailureCount"]);
  [v27 setUint64Value:0];

  id v28 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kCtlTxRTS"]);
  [v28 setUint64Value:0];

  id v29 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxCRCGlitch"]);
  [v29 setUint64Value:0];

  id v30 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxUnicastCTStoMAC"]);
  [v30 setUint64Value:0];

  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxUnicastCTStoOther"]);
  [v31 setUint64Value:0];

  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxUnicastRTStoMAC"]);
  [v32 setUint64Value:0];

  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kMACRxUnicastRTStoOther"]);
  [v33 setUint64Value:0];

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kCtlTxCTS"]);
  [v34 setUint64Value:0];

  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v11 fieldForKey:@"NWAAM_kRxBadOther"]);
  [v35 setUint64Value:0];

  id v36 = sub_10002575C(v9);
  id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  int v157 = 0;
  uint64_t v38 = 0LL;
  char v39 = 1;
  do
  {
    char v40 = v39;
    id v41 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"Slice %lu", v38);
    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKeyedSubscript:v41]);

    if (!v43) {
      goto LABEL_8;
    }
    __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 objectForKeyedSubscript:v41]);
    __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKeyedSubscript:@"Rx Counters"]);

    if (!v46)
    {
      id v102 = WALogCategoryDefaultHandle();
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        __int128 v104 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
        __int128 v105 = (void *)objc_claimAutoreleasedReturnValue([v104 objectForKeyedSubscript:v41]);
        __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([v105 allKeys]);
        *(_DWORD *)buf = 136446978;
        __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v162 = 1024;
        int v163 = 1695;
        __int16 v164 = 2112;
        *(void *)__int128 v165 = @"Rx Counters";
        *(_WORD *)&v165[8] = 2112;
        __int128 v166 = v106;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
      }

      LOBYTE(v6_Block_object_dispose(va, 8) = v157;
      LOBYTE(v151) = v157;
      LOBYTE(v152) = v157;
      goto LABEL_58;
    }

    sub_10002947C(v9, v11, @"NWAAM_kRxDataErrors", v37, v41, @"Rx Counters", @"Rx Data Errors");
    sub_10002947C(v9, v11, @"NWAAM_kRxFrames", v37, v41, @"Rx Counters", @"Rx Data Frames");
    sub_10002947C(v9, v11, @"NWAAM_kRxRetryBitSet", v37, v41, @"Rx Counters", @"Rx Retry bit set");
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    id v48 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v41]);
    __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKeyedSubscript:@"Rx Error Counters"]);

    if (!v49)
    {
      id v107 = WALogCategoryDefaultHandle();
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
        __int128 v109 = (void *)objc_claimAutoreleasedReturnValue([v108 objectForKeyedSubscript:v41]);
        __int128 v110 = (void *)objc_claimAutoreleasedReturnValue([v109 allKeys]);
        *(_DWORD *)buf = 136446978;
        __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v162 = 1024;
        int v163 = 1702;
        __int16 v164 = 2112;
        *(void *)__int128 v165 = @"Rx Error Counters";
        *(_WORD *)&v165[8] = 2112;
        __int128 v166 = v110;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
      }

      LOBYTE(v6_Block_object_dispose(va, 8) = 1;
      LOBYTE(v151) = v157;
      LOBYTE(v152) = v157;
      goto LABEL_58;
    }

    sub_10002947C(v9, v11, @"NWAAM_kRxGoodPLCP", v37, v41, @"Rx Error Counters", @"Rx Good PLCP");
    sub_10002947C(v9, v11, @"NWAAM_kRxBadPLCP", v37, v41, @"Rx Error Counters", @"Rx Bad PLCP");
    sub_10002947C(v9, v11, @"NWAAM_kRxBadFCS", v37, v41, @"Rx Error Counters", @"Rx Bad FCS");
    sub_10002947C(v9, v11, @"NWAAM_kRxCRCGlitch", v37, v41, @"Rx Error Counters", @"Rx CRC Glitch");
    sub_10002947C( v9,  v11,  @"NWAAM_kRxBadOther",  v37,  v41,  @"Rx Error Counters",  @"Any Other Rx Errors");
    id v50 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 objectForKeyedSubscript:v41]);
    id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:@"Tx Counters"]);

    if (!v52)
    {
      id v111 = WALogCategoryDefaultHandle();
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
        __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v112 objectForKeyedSubscript:v41]);
        __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([v113 allKeys]);
        *(_DWORD *)buf = 136446978;
        __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v162 = 1024;
        int v163 = 1711;
        __int16 v164 = 2112;
        *(void *)__int128 v165 = @"Tx Counters";
        *(_WORD *)&v165[8] = 2112;
        __int128 v166 = v114;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
      }

      LOBYTE(v151) = 1;
      LOBYTE(v152) = v157;
      goto LABEL_57;
    }

    sub_10002947C(v9, v11, @"NWAAM_kTxFrames", v37, v41, @"Tx Counters", @"Tx Data Frames");
    sub_10002947C( v9,  v11,  @"NWAAM_kTxRetransmission",  v37,  v41,  @"Tx Counters",  @"Tx Retransmissions");
    __int16 v53 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    id v54 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:v41]);
    id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:@"dot11 MIB Counters"]);

    if (!v55)
    {
      id v115 = WALogCategoryDefaultHandle();
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
        v117 = (void *)objc_claimAutoreleasedReturnValue([v116 objectForKeyedSubscript:v41]);
        id v118 = (void *)objc_claimAutoreleasedReturnValue([v117 allKeys]);
        *(_DWORD *)buf = 136446978;
        __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v162 = 1024;
        int v163 = 1717;
        __int16 v164 = 2112;
        *(void *)__int128 v165 = @"dot11 MIB Counters";
        *(_WORD *)&v165[8] = 2112;
        __int128 v166 = v118;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
      }

      LOBYTE(v151) = 1;
      LOBYTE(v152) = 1;
LABEL_57:
      LOBYTE(v6_Block_object_dispose(va, 8) = 1;
LABEL_58:

      int v95 = 0;
      BOOL v149 = 0;
      BOOL v96 = 0;
      goto LABEL_37;
    }

    sub_10002947C( v9,  v11,  @"NWAAM_kdot11MultipleRetryCount",  v37,  v41,  @"dot11 MIB Counters",  @"MSDU successfully transmits >= 1 attempt");
    sub_10002947C( v9,  v11,  @"NWAAM_kdot11RetryCount",  v37,  v41,  @"dot11 MIB Counters",  @"MSDU successfully transmits > 1 attempt");
    sub_10002947C( v9,  v11,  @"NWAAM_kdot11RTSSuccessCount",  v37,  v41,  @"dot11 MIB Counters",  @"CTS Rxd in response to RTS");
    sub_10002947C( v9,  v11,  @"NWAAM_kdot11RTSFailureCount",  v37,  v41,  @"dot11 MIB Counters",  @"CTS not Rxd in response to RTS");
    int v157 = 1;
LABEL_8:

    char v39 = 0;
    uint64_t v38 = 1LL;
  }

  while ((v40 & 1) != 0);
  int v156 = 0;
  uint64_t v56 = 0LL;
  char v57 = 1;
  do
  {
    char v58 = v57;
    uint64_t v59 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Slice Frames: slice  %lu",  v56);
    __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v59]);

    if (v61)
    {
      __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
      id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 objectForKeyedSubscript:v59]);
      id v64 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKeyedSubscript:@"Tx Control Frame Counters"]);

      if (!v64)
      {
        id v119 = WALogCategoryDefaultHandle();
        v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          __int16 v121 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
          int v122 = (void *)objc_claimAutoreleasedReturnValue([v121 objectForKeyedSubscript:v59]);
          __int16 v123 = (void *)objc_claimAutoreleasedReturnValue([v122 allKeys]);
          *(_DWORD *)buf = 136446978;
          __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                 "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __str"
                 "ong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
          __int16 v162 = 1024;
          int v163 = 1732;
          __int16 v164 = 2112;
          *(void *)__int128 v165 = @"Tx Control Frame Counters";
          *(_WORD *)&v165[8] = 2112;
          __int128 v166 = v123;
          _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
        }

        BOOL v149 = 0;
        goto LABEL_62;
      }

      sub_10002947C(v9, v11, @"NWAAM_kCtlTxRTS", v37, v59, @"Tx Control Frame Counters", @"Tx RTS");
      int v156 = 1;
    }

    char v57 = 0;
    uint64_t v56 = 1LL;
  }

  while ((v58 & 1) != 0);
  id v65 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
  __int16 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKeyedSubscript:@"Chip Frames"]);
  int v67 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:@"Tx Control Frame Counters"]);

  BOOL v149 = v67 != 0LL;
  if (v67) {
    sub_1000292E0( v9,  v11,  @"NWAAM_kCtlTxCTS",  v37,  @"Chip Frames",  @"Tx Control Frame Counters",  @"Tx CTS");
  }
  int v68 = v157;
  if ((v157 & 1) != 0)
  {
LABEL_28:
    int v151 = v68;
    int v152 = v68;
LABEL_29:
    id v90 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    id v91 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKeyedSubscript:@"Chip"]);

    if (v91)
    {
      id v92 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
      id v93 = (void *)objc_claimAutoreleasedReturnValue([v92 objectForKeyedSubscript:@"Chip"]);
      id v94 = (void *)objc_claimAutoreleasedReturnValue([v93 objectForKeyedSubscript:@"Rx MAC Counters"]);

      if (!v94)
      {
        id v124 = WALogCategoryDefaultHandle();
        __int16 v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          id v126 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
          v127 = (void *)objc_claimAutoreleasedReturnValue([v126 objectForKeyedSubscript:@"Chip"]);
          v128 = (void *)objc_claimAutoreleasedReturnValue([v127 allKeys]);
          *(_DWORD *)buf = 136446978;
          __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                 "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __str"
                 "ong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
          __int16 v162 = 1024;
          int v163 = 1783;
          __int16 v164 = 2112;
          *(void *)__int128 v165 = @"Rx MAC Counters";
          *(_WORD *)&v165[8] = 2112;
          __int128 v166 = v128;
          _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
        }

        BOOL v96 = 0;
        goto LABEL_36;
      }

      sub_1000292E0( v9,  v11,  @"NWAAM_kMACRxDataFrameMatchingRA",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx Data Frame matching RA");
      sub_1000292E0( v9,  v11,  @"NWAAM_kMACRxDataFrameOtherRA",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx Data Frame other RA");
      sub_10002595C( v9,  v11,  @"NWAAM_kMACRxControlFrameMatchingRA",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx Control Frame matching RA");
      sub_10002595C( v9,  v11,  @"NWAAM_kMACRxControlFrameOtherRA",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx Control Frame other RA");
      sub_1000292E0( v9,  v11,  @"NWAAM_kMACRxUnicastCTStoMAC",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx CTS to MAC");
      sub_1000292E0( v9,  v11,  @"NWAAM_kMACRxUnicastCTStoOther",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx CTS to Other");
      sub_1000292E0( v9,  v11,  @"NWAAM_kMACRxUnicastRTStoMAC",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx RTS to MAC");
      sub_1000292E0( v9,  v11,  @"NWAAM_kMACRxUnicastRTStoOther",  v37,  @"Chip",  @"Rx MAC Counters",  @"Rx RTS to Other");
      if (v67 && (v68 & v151 & v152 & v157 & 1) != 0)
      {
        if ((v156 & 1) != 0) {
          goto LABEL_44;
        }
        int v95 = v156;
        BOOL v149 = 1;
        LOBYTE(v157) = 1;
        LOBYTE(v152) = 1;
        BOOL v96 = 1;
        goto LABEL_78;
      }
    }

    BOOL v96 = v91 != 0LL;
LABEL_36:
    int v95 = v156;
    goto LABEL_37;
  }

  id v69 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
  id v70 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:@"Chip Frames"]);
  id v71 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:@"Tx Control Frame Counters"]);

  if (v71)
  {
    sub_1000292E0( v9,  v11,  @"NWAAM_kCtlTxRTS",  v37,  @"Chip Frames",  @"Tx Control Frame Counters",  @"Tx RTS");
    int v156 = 1;
  }

  __int16 v72 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
  id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 objectForKeyedSubscript:@"Chip"]);

  if (!v73)
  {
    int v68 = v157;
    goto LABEL_28;
  }

  __int16 v74 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
  id v75 = (void *)objc_claimAutoreleasedReturnValue([v74 objectForKeyedSubscript:@"Chip"]);
  v76 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:@"Rx Counters"]);

  if (!v76)
  {
    id v129 = WALogCategoryDefaultHandle();
    id v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      id v131 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
      id v132 = (void *)objc_claimAutoreleasedReturnValue([v131 objectForKeyedSubscript:@"Chip"]);
      v133 = (void *)objc_claimAutoreleasedReturnValue([v132 allKeys]);
      *(_DWORD *)buf = 136446978;
      __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
             "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSD"
             "ictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v162 = 1024;
      int v163 = 1749;
      __int16 v164 = 2112;
      *(void *)__int128 v165 = @"Rx Counters";
      *(_WORD *)&v165[8] = 2112;
      __int128 v166 = v133;
      _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
    }

LABEL_62:
    BOOL v96 = 0;
    LOBYTE(v6_Block_object_dispose(va, 8) = v157;
    int v95 = v156 & 1;
    LOBYTE(v151) = v157;
    LOBYTE(v152) = v157;
    goto LABEL_37;
  }

  sub_1000292E0( v9,  v11,  @"NWAAM_kRxDataErrors",  v37,  @"Chip",  @"Rx Counters",  @"Rx Data Errors");
  sub_1000292E0(v9, v11, @"NWAAM_kRxFrames", v37, @"Chip", @"Rx Counters", @"Rx Data Frames");
  sub_1000292E0( v9,  v11,  @"NWAAM_kRxRetryBitSet",  v37,  @"Chip",  @"Rx Counters",  @"Rx Retry bit set");
  BOOL v77 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
  id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 objectForKeyedSubscript:@"Chip"]);
  id v79 = (void *)objc_claimAutoreleasedReturnValue([v78 objectForKeyedSubscript:@"Rx Error Counters"]);

  if (v79)
  {
    sub_1000292E0( v9,  v11,  @"NWAAM_kRxGoodPLCP",  v37,  @"Chip",  @"Rx Error Counters",  @"Rx Good PLCP");
    sub_1000292E0( v9,  v11,  @"NWAAM_kRxBadPLCP",  v37,  @"Chip",  @"Rx Error Counters",  @"Rx Bad PLCP");
    sub_1000292E0( v9,  v11,  @"NWAAM_kRxBadFCS",  v37,  @"Chip",  @"Rx Error Counters",  @"Rx Bad FCS");
    sub_1000292E0( v9,  v11,  @"NWAAM_kRxCRCGlitch",  v37,  @"Chip",  @"Rx Error Counters",  @"Rx CRC Glitch");
    id v80 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    id v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:@"Chip"]);
    id v82 = (void *)objc_claimAutoreleasedReturnValue([v81 objectForKeyedSubscript:@"Rx Error Counters"]);
    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 objectForKeyedSubscript:@"Any Other Rx Errors"]);

    if (v83) {
      sub_1000292E0( v9,  v11,  @"NWAAM_kRxBadOther",  v37,  @"Chip",  @"Rx Error Counters",  @"Any Other Rx Errors");
    }
    id v84 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
    __int16 v85 = (void *)objc_claimAutoreleasedReturnValue([v84 objectForKeyedSubscript:@"Chip"]);
    id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKeyedSubscript:@"Tx Counters"]);

    if (v86)
    {
      sub_10002947C( v9,  v11,  @"NWAAM_kTxFrames",  v37,  @"Chip",  @"Tx Counters",  @"Tx Data Frames");
      sub_10002947C( v9,  v11,  @"NWAAM_kTxRetransmission",  v37,  @"Chip",  @"Tx Counters",  @"Tx Retransmissions");
      id v87 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
      id v88 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKeyedSubscript:@"Chip"]);
      id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForKeyedSubscript:@"dot11 MIB Counters"]);

      if (v89)
      {
        sub_10002947C( v9,  v11,  @"NWAAM_kdot11MultipleRetryCount",  v37,  @"Chip",  @"dot11 MIB Counters",  @"MSDU successfully transmits >= 1 attempt");
        sub_10002947C( v9,  v11,  @"NWAAM_kdot11RetryCount",  v37,  @"Chip",  @"dot11 MIB Counters",  @"MSDU successfully transmits > 1 attempt");
        sub_10002947C( v9,  v11,  @"NWAAM_kdot11RTSSuccessCount",  v37,  @"Chip",  @"dot11 MIB Counters",  @"CTS Rxd in response to RTS");
        sub_10002947C( v9,  v11,  @"NWAAM_kdot11RTSFailureCount",  v37,  @"Chip",  @"dot11 MIB Counters",  @"CTS not Rxd in response to RTS");
        int v157 = 1;
        int v151 = 1;
        int v152 = 1;
        int v68 = 1;
        goto LABEL_29;
      }

      id v144 = WALogCategoryDefaultHandle();
      __int128 v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
      {
        uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
        __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v146 objectForKeyedSubscript:@"Chip"]);
        id v148 = (void *)objc_claimAutoreleasedReturnValue([v147 allKeys]);
        *(_DWORD *)buf = 136446978;
        __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v162 = 1024;
        int v163 = 1773;
        __int16 v164 = 2112;
        *(void *)__int128 v165 = @"dot11 MIB Counters";
        *(_WORD *)&v165[8] = 2112;
        __int128 v166 = v148;
        _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
      }

      BOOL v96 = 0;
      int v95 = v156 & 1;
      LOBYTE(v152) = 1;
LABEL_78:
      LOBYTE(v151) = 1;
    }

    else
    {
      id v139 = WALogCategoryDefaultHandle();
      id v140 = (os_log_s *)objc_claimAutoreleasedReturnValue(v139);
      if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
      {
        id v141 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
        id v142 = (void *)objc_claimAutoreleasedReturnValue([v141 objectForKeyedSubscript:@"Chip"]);
        __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v142 allKeys]);
        *(_DWORD *)buf = 136446978;
        __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        __int16 v162 = 1024;
        int v163 = 1767;
        __int16 v164 = 2112;
        *(void *)__int128 v165 = @"Tx Counters";
        *(_WORD *)&v165[8] = 2112;
        __int128 v166 = v143;
        _os_log_impl( (void *)&_mh_execute_header,  v140,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
      }

      BOOL v96 = 0;
      int v95 = v156 & 1;
      LOBYTE(v151) = 1;
      LOBYTE(v152) = v157;
    }

    LOBYTE(v6_Block_object_dispose(va, 8) = 1;
  }

  else
  {
    id v134 = WALogCategoryDefaultHandle();
    id v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      id v136 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v37]);
      id v137 = (void *)objc_claimAutoreleasedReturnValue([v136 objectForKeyedSubscript:@"Chip"]);
      id v138 = (void *)objc_claimAutoreleasedReturnValue([v137 allKeys]);
      *(_DWORD *)buf = 136446978;
      __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
             "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSD"
             "ictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      __int16 v162 = 1024;
      int v163 = 1756;
      __int16 v164 = 2112;
      *(void *)__int128 v165 = @"Rx Error Counters";
      *(_WORD *)&v165[8] = 2112;
      __int128 v166 = v138;
      _os_log_impl( (void *)&_mh_execute_header,  v135,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find subgroup %@, we have %@",  buf,  0x26u);
    }

    BOOL v96 = 0;
    int v95 = v156 & 1;
    LOBYTE(v6_Block_object_dispose(va, 8) = 1;
    LOBYTE(v151) = v157;
    LOBYTE(v152) = v157;
  }

LABEL_37:
  id v97 = WALogCategoryDefaultHandle();
  id v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
  if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136448258;
    __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
           "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    __int16 v162 = 1024;
    int v163 = 1801;
    __int16 v164 = 1024;
    *(_DWORD *)__int128 v165 = v68 & 1;
    *(_WORD *)&v165[4] = 1024;
    *(_DWORD *)&v165[6] = v151 & 1;
    LOWORD(v166) = 1024;
    *(_DWORD *)((char *)&v166 + 2) = v96;
    HIWORD(v166) = 1024;
    int v167 = v152 & 1;
    __int16 v168 = 1024;
    int v169 = v157 & 1;
    __int16 v170 = 1024;
    BOOL v171 = v149;
    __int16 v172 = 1024;
    int v173 = v95;
    _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:hasRxCounters %d hasRxErrorCounters %d hasRxMAC %d hasTxCounters %d hasdot11 %d hasTxCTS %d hasTxRTS %d",  buf,  0x3Cu);
  }

  if (!*a5)
  {
    NSErrorUserInfoKey v158 = NSLocalizedFailureReasonErrorKey;
    __int128 v159 = @"WAErrorCodeTxRxFrameCountersMissing";
    id v99 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v159,  &v158,  1LL));
    *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9023LL,  v99));
  }

  id v100 = WALogCategoryDefaultHandle();
  id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
  if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int128 v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
           "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    __int16 v162 = 1024;
    int v163 = 1806;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_44:
}

        uint64_t v25 = 0LL;
        goto LABEL_38;
      }

      id v13 = objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v4));
      id v14 = (void *)qword_1000ECF48;
      qword_1000ECF48 = v13;

      uint64_t v15 = 7;
      while (1)
      {
        id v16 = Apple80211Get(-[WAApple80211 apple80211Ref](self, "apple80211Ref"), 1LL, 0LL, v5, 8LL);
        id v12 = v16;
        if (v16 <= 15)
        {
          if (v16 != -3905) {
            break;
          }
        }

        else if (v16 != 61 && v16 != 16)
        {
          goto LABEL_39;
        }

        if (!--v15) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!v16)
      {
        if (v5)
        {
          id v17 = -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  v5,  4LL);
          id v18 = (void *)qword_1000ECF50;
          qword_1000ECF50 = (uint64_t)v17;

          goto LABEL_27;
        }

        id v30 = WALogCategoryDefaultHandle();
        __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          __int16 v35 = 136446466;
          id v36 = "-[WAApple80211 currentBSSIDandSSID]";
          id v37 = 1024;
          uint64_t v38 = 575;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to fetch APPLE80211_IOC_SSID",  (uint8_t *)&v35,  0x12u);
        }

        __int128 v32 = WALogCategoryDefaultHandle();
        id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v35) = 0;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "Failed to fetch APPLE80211_IOC_SSID",  (uint8_t *)&v35,  2u);
        }

        goto LABEL_37;
      }
    }

          __int128 v61 = WALogCategoryDefaultHandle();
          __int128 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            id v73 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s awdReport](v20, "awdReport"));
            logb = (os_log_t)objc_claimAutoreleasedReturnValue([v73 dictionaryRepresentation]);
            int v68 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s allKeys](logb, "allKeys"));
            id v63 = [v68 count];
            id v64 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s awdReport](v20, "awdReport"));
            id v65 = (void *)objc_claimAutoreleasedReturnValue([v64 dictionaryRepresentation]);
            __int16 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 allKeys]);
            *(_DWORD *)buf = 136447490;
            id v81 = "-[DatapathMetricStream streamPBCodeable:additionalDictionaryItems:]";
            id v82 = 1024;
            uint64_t v83 = 323;
            id v84 = 1024;
            *(_DWORD *)__int16 v85 = v60;
            *(_WORD *)&v85[4] = 2048;
            *(void *)&v85[6] = v63;
            *(_WORD *)&v85[14] = 2112;
            *(void *)&v85[16] = v66;
            id v86 = 2112;
            id v87 = v39;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:bad flattenedAndTransformed %d %lu %@ or invalid JSON %@",  buf,  0x36u);

            uint64_t v6 = v76;
            __int16 v7 = v75;

            id v8 = v77;
          }

          id v11 = v74;
          goto LABEL_40;
        }
      }

      else
      {
      }

      char v39 = 0LL;
      __int128 v60 = 1;
      __int16 v7 = v75;
      uint64_t v6 = v76;
      id v8 = v77;
      goto LABEL_37;
    }

    char v39 = 0LL;
    __int128 v60 = 1;
    __int16 v7 = v75;
    uint64_t v6 = v76;
    id v8 = v77;
    __int128 v32 = v72;
    goto LABEL_37;
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    id v81 = "-[DatapathMetricStream streamPBCodeable:additionalDictionaryItems:]";
    id v82 = 1024;
    uint64_t v83 = 330;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to make NSData initWithBytesNoCopy",  buf,  0x12u);
  }

  __int128 v32 = 0LL;
LABEL_41:

  int v67 = (void *)objc_claimAutoreleasedReturnValue(-[DatapathMetricStream lastPBLock](self, "lastPBLock"));
  [v67 unlock];

  objc_autoreleasePoolPop(v8);
}

          goto LABEL_38;
        }

        if ((uint64_t)[v22 stall] < 1)
        {
          uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v17 fieldForKey:@"WFAAWDWAQDS_suppressedReason"]);
          [v59 setInt32Value:1];
        }

        else
        {
          uint64_t v56 = (double)v36;
          char v57 = WALogCategoryDefaultHandle();
          char v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446978;
            id v90 = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnap"
                  "shot:originalCCA:]";
            id v91 = 1024;
            id v92 = 782;
            id v93 = 2048;
            id v94 = v35;
            int v95 = 2048;
            BOOL v96 = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS ML Prediction probability: %lf threshold: %lf",  buf,  0x26u);
          }

          if (v35 >= v56) {
            goto LABEL_27;
          }
          uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v17 fieldForKey:@"WFAAWDWAQDS_suppressedReason"]);
          [v59 setInt32Value:2];
        }
      }

      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          id v90 = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnapsh"
                "ot:originalCCA:]";
          id v91 = 1024;
          id v92 = 761;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:ML model output is nil",  buf,  0x12u);
        }
      }

      __int128 v62 = 0LL;
      id v18 = 0LL;
      goto LABEL_37;
    }

    id v80 = WALogCategoryDefaultHandle();
    id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v90 = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnapshot:originalCCA:]";
      id v91 = 1024;
      id v92 = 754;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Error WiFiStallDetect init",  buf,  0x12u);
    }

    id v82 = WALogCategoryDefaultHandle();
    uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "Error WiFiStallDetect init", buf, 2u);
    }
  }

  else
  {
    char v40 = WALogCategoryDefaultHandle();
    id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v90 = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnapshot:originalCCA:]";
      id v91 = 1024;
      id v92 = 734;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS Fast Reset Recovery Validations Failed!",  buf,  0x12u);
    }

    id v18 = 0LL;
  }

  _Block_object_dispose(&v53, 8);

  _Block_object_dispose(&v59, 8);
}

void sub_1000292E0(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  BOOL v19 = sub_100026554(a1, v15, v16, v17, v18);
  if (v19)
  {
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v19, 0LL);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v13 fieldForKey:v14]);
    [v21 setUint64Value:IntegerValue];
  }

  else
  {
    id v22 = WALogCategoryDefaultHandle();
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136447490;
      uint64_t v25 = "_Bool fillUInt64FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSStrin"
            "g * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __str"
            "ong, NSString * _Nonnull __strong)";
      __int16 v26 = 1024;
      int v27 = 120;
      __int16 v28 = 2112;
      id v29 = v15;
      __int16 v30 = 2112;
      id v31 = v16;
      __int16 v32 = 2112;
      id v33 = v17;
      __int16 v34 = 2112;
      id v35 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  (uint8_t *)&v24,  0x3Au);
    }
  }
}

void sub_10002947C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  BOOL v19 = sub_100026554(a1, v15, v16, v17, v18);
  if (v19)
  {
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v19, 0LL);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v13 fieldForKey:v14]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v13 fieldForKey:v14]);
    objc_msgSend(v21, "setUint64Value:", (char *)objc_msgSend(v22, "uint64Value") + IntegerValue);
  }

  else
  {
    id v23 = WALogCategoryDefaultHandle();
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136447490;
      __int16 v26 = "_Bool addUInt64FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSString"
            " * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
            "ng, NSString * _Nonnull __strong)";
      __int16 v27 = 1024;
      int v28 = 137;
      __int16 v29 = 2112;
      id v30 = v15;
      __int16 v31 = 2112;
      id v32 = v16;
      __int16 v33 = 2112;
      id v34 = v17;
      __int16 v35 = 2112;
      id v36 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  (uint8_t *)&v25,  0x3Au);
    }
  }
}

void sub_100029640( void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, unsigned __int8 a9)
{
  id v43 = a1;
  id v42 = a2;
  id v41 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  BOOL v19 = 0LL;
  unint64_t v20 = 0LL;
  uint64_t v39 = (a9 ^ 1u) + a8;
  id v40 = a7;
  id v38 = v18;
  while (1)
  {
    id v21 = v19;
    id v22 = objc_autoreleasePoolPush();
    BOOL v19 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@ %lu", v40, v20);

    id v23 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v16]);
    int v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v17]);
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v18]);
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v19]);

    if (v26) {
      break;
    }
LABEL_13:
    objc_autoreleasePoolPop(v22);
    if (v39 == ++v20) {
      goto LABEL_14;
    }
  }

  __int16 v27 = sub_100026554(v43, v16, v17, v18, v19);
  if (v27)
  {
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v27, 0LL);
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v42 fieldForKey:v41]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 repeatableValues]);

    id v31 = [v30 count];
    if ((a9 & 1) != 0)
    {
      if (!v31)
      {
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v42 fieldForKey:v41]);
        [v32 addRepeatableUInt64Value:0];

        __int16 v33 = v42;
        id v34 = v41;
        id v18 = v38;
LABEL_11:
        __int16 v35 = (NSNumber *)objc_claimAutoreleasedReturnValue([v33 fieldForKey:v34]);
        -[NSNumber addRepeatableUInt64Value:](v35, "addRepeatableUInt64Value:", IntegerValue);
        goto LABEL_12;
      }
    }

    else if (!v31)
    {
LABEL_10:
      id v34 = v41;
      __int16 v33 = v42;
      goto LABEL_11;
    }

    if ((unint64_t)[v30 count] > v20)
    {
      __int16 v35 = -[NSNumber initWithUnsignedLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedLongLong:",  IntegerValue);
      [v30 replaceObjectAtIndex:v20 withObject:v35];
LABEL_12:

      goto LABEL_13;
    }

    goto LABEL_10;
  }

  id v36 = WALogCategoryDefaultHandle();
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447490;
    __int16 v45 = "_Bool fillUInt64ArrayFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NS"
          "String * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __"
          "strong, NSString * _Nonnull __strong, NSUInteger, _Bool)";
    __int16 v46 = 1024;
    int v47 = 428;
    __int16 v48 = 2112;
    id v49 = v16;
    __int16 v50 = 2112;
    id v51 = v17;
    __int16 v52 = 2112;
    id v53 = v18;
    __int16 v54 = 2112;
    id v55 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
  }

  objc_autoreleasePoolPop(v22);
LABEL_14:
}

void sub_10002998C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a1;
  id v14 = sub_100026554(v13, v11, @"Slice 0", @"OMI Counters", v12);
  id v15 = sub_100026554(v13, v11, @"Slice 1", @"OMI Counters", v12);

  if (!v14)
  {
    id v19 = WALogCategoryDefaultHandle();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136447490;
      id v23 = "_Bool sum2GroupsUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, N"
            "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull"
            " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
      __int16 v24 = 1024;
      int v25 = 172;
      __int16 v26 = 2112;
      id v27 = v11;
      __int16 v28 = 2112;
      __int16 v29 = @"Slice 0";
      __int16 v30 = 2112;
      id v31 = @"OMI Counters";
      __int16 v32 = 2112;
      id v33 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  (uint8_t *)&v22,  0x3Au);
    }

    goto LABEL_4;
  }

  if (v15)
  {
    int IntegerValue = IOReportSimpleGetIntegerValue(v14, 0LL);
    int v17 = IOReportSimpleGetIntegerValue(v15, 0LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 fieldForKey:v10]);
    -[os_log_s setUint32Value:](v18, "setUint32Value:", (v17 + IntegerValue));
LABEL_4:

    goto LABEL_5;
  }

  id v20 = WALogCategoryDefaultHandle();
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    int v22 = 136447490;
    id v23 = "_Bool sum2GroupsUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSS"
          "tring * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __s"
          "trong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    __int16 v24 = 1024;
    int v25 = 173;
    __int16 v26 = 2112;
    id v27 = v11;
    __int16 v28 = 2112;
    __int16 v29 = @"Slice 1";
    __int16 v30 = 2112;
    id v31 = @"OMI Counters";
    __int16 v32 = 2112;
    id v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  (uint8_t *)&v22,  0x3Au);
  }

LABEL_5:
}

void sub_100029BF4(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  id v14 = a1;
  id v60 = a2;
  objc_initWeak(&location, a3);
  id v61 = a5;
  id v62 = a6;
  id v15 = a7;
  id v16 = a8;
  id v63 = objc_loadWeakRetained(&location);
  int v17 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"Slice 0"]);
  LODWORD(a6) = v18 == 0LL;

  if ((_DWORD)a6)
  {
    id v51 = WALogCategoryDefaultHandle();
    __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136446978;
    id v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    __int16 v71 = 1024;
    int v72 = 191;
    __int16 v73 = 2112;
    id v74 = v15;
    __int16 v75 = 2112;
    v76 = @"Slice 0";
    __int16 v52 = "%{public}s::%d:Failed to find %@ %@";
    goto LABEL_31;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"Slice 0"]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v16]);
  BOOL v22 = v21 == 0LL;

  if (v22)
  {
    id v53 = WALogCategoryDefaultHandle();
    __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136447234;
    id v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    __int16 v71 = 1024;
    int v72 = 192;
    __int16 v73 = 2112;
    id v74 = v15;
    __int16 v75 = 2112;
    v76 = @"Slice 0";
    __int16 v77 = 2112;
    id v78 = v16;
    __int16 v52 = "%{public}s::%d:Failed to find %@ %@ %@";
    goto LABEL_34;
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"Slice 1"]);
  BOOL v25 = v24 == 0LL;

  if (v25)
  {
    id v54 = WALogCategoryDefaultHandle();
    __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136446978;
    id v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    __int16 v71 = 1024;
    int v72 = 193;
    __int16 v73 = 2112;
    id v74 = v15;
    __int16 v75 = 2112;
    v76 = @"Slice 1";
    __int16 v52 = "%{public}s::%d:Failed to find %@ %@";
LABEL_31:
    id v55 = v50;
    uint32_t v56 = 38;
LABEL_35:
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, v52, buf, v56);
    goto LABEL_24;
  }

  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);
  id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:@"Slice 1"]);
  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v16]);
  BOOL v29 = v28 == 0LL;

  if (v29)
  {
    id v57 = WALogCategoryDefaultHandle();
    __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136447234;
    id v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    __int16 v71 = 1024;
    int v72 = 194;
    __int16 v73 = 2112;
    id v74 = v15;
    __int16 v75 = 2112;
    v76 = @"Slice 1";
    __int16 v77 = 2112;
    id v78 = v16;
    __int16 v52 = "%{public}s::%d:Failed to find %@ %@ %@";
LABEL_34:
    id v55 = v50;
    uint32_t v56 = 48;
    goto LABEL_35;
  }

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);
  id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:@"Slice 0"]);
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v16]);
  id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 allKeys]);

  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  id obj = v33;
  id v34 = [obj countByEnumeratingWithState:&v64 objects:v81 count:16];
  if (!v34) {
    goto LABEL_23;
  }
  uint64_t v35 = *(void *)v65;
  do
  {
    id v36 = 0LL;
    do
    {
      if (*(void *)v65 != v35) {
        objc_enumerationMutation(obj);
      }
      id v37 = *(void **)(*((void *)&v64 + 1) + 8LL * (void)v36);
      id v38 = objc_autoreleasePoolPush();
      uint64_t v39 = sub_100026554(v14, v15, @"Slice 0", v16, v37);
      id v40 = sub_100026554(v14, v15, @"Slice 1", v16, v37);
      if (v39)
      {
        id v41 = v40;
        if (v40)
        {
          uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v39, 0LL);
          uint64_t v43 = IOReportSimpleGetIntegerValue(v41, 0LL);
          sub_1000275F0(v60, v63, a4, v61, v37, v43 + IntegerValue, v62);
          int v44 = 1;
          goto LABEL_13;
        }

        id v48 = WALogCategoryDefaultHandle();
        __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          id v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullab"
                "le __strong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull"
                " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSS"
                "tring * _Nonnull __strong, NSString * _Nonnull __strong)";
          __int16 v71 = 1024;
          int v72 = 204;
          __int16 v73 = 2112;
          id v74 = v15;
          __int16 v75 = 2112;
          v76 = @"Slice 1";
          __int16 v77 = 2112;
          id v78 = v16;
          __int16 v79 = 2112;
          id v80 = v37;
          int v47 = v46;
          goto LABEL_20;
        }
      }

      else
      {
        id v45 = WALogCategoryDefaultHandle();
        __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          id v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullab"
                "le __strong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull"
                " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSS"
                "tring * _Nonnull __strong, NSString * _Nonnull __strong)";
          __int16 v71 = 1024;
          int v72 = 203;
          __int16 v73 = 2112;
          id v74 = v15;
          __int16 v75 = 2112;
          v76 = @"Slice 0";
          __int16 v77 = 2112;
          id v78 = v16;
          __int16 v79 = 2112;
          id v80 = v37;
          int v47 = v46;
LABEL_20:
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
        }
      }

      int v44 = 0;
LABEL_13:
      objc_autoreleasePoolPop(v38);
      if (!v44) {
        goto LABEL_23;
      }
      id v36 = (char *)v36 + 1;
    }

    while (v34 != v36);
    id v49 = [obj countByEnumeratingWithState:&v64 objects:v81 count:16];
    id v34 = v49;
  }

  while (v49);
LABEL_23:

  __int16 v50 = (os_log_s *)obj;
LABEL_24:

  objc_destroyWeak(&location);
}

void sub_10002A28C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id location)
{
}

BOOL sub_10002A2C0(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = objc_autoreleasePoolPush();
  id v21 = sub_100026554(v13, v16, v17, v18, v19);
  BOOL v22 = v21;
  if (v21)
  {
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(v21, 0LL);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:v15]);
    id v37 = v22;
    id v25 = v19;
    id v26 = v18;
    id v27 = v17;
    id v28 = v16;
    id v29 = v15;
    id v30 = v14;
    id v31 = v20;
    id v32 = v13;
    id v33 = v24;
    [v24 setInt32Value:IntegerValue];

    id v13 = v32;
    id v20 = v31;
    id v14 = v30;
    id v15 = v29;
    id v16 = v28;
    id v17 = v27;
    id v18 = v26;
    id v19 = v25;
    BOOL v22 = v37;
  }

  else
  {
    id v35 = WALogCategoryDefaultHandle();
    id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      uint64_t v39 = "_Bool fillInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSString"
            " * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
            "ng, NSString * _Nonnull __strong)";
      __int16 v40 = 1024;
      int v41 = 262;
      __int16 v42 = 2112;
      id v43 = v16;
      __int16 v44 = 2112;
      id v45 = v17;
      __int16 v46 = 2112;
      id v47 = v18;
      __int16 v48 = 2112;
      id v49 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
    }
  }

  objc_autoreleasePoolPop(v20);

  return v22 != 0LL;
}

void sub_10002A4DC(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  BOOL v22 = sub_100026554(a1, v17, v18, v19, v20);
  id v36 = v18;
  id v37 = v17;
  id v35 = v19;
  if (v22)
  {
    id v23 = v22;
    int Count = IOReportStateGetCount(v22);
    if (Count >= 1)
    {
      int v25 = Count;
      uint64_t v26 = 0LL;
      do
      {
        uint64_t NameForIndex = IOReportStateGetNameForIndex(v23, v26);
        id v28 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
        if ([v28 containsString:v21])
        {
          uint64_t Residency = IOReportStateGetResidency(v23, v26);
          uint64_t Unit = IOReportChannelGetUnit(v23);
          unint64_t v31 = (unint64_t)IOReportScaleValue(Residency, Unit, 0x100007C00000000LL);
          id v32 = (void *)objc_claimAutoreleasedReturnValue([v15 fieldForKey:v16]);
          [v32 setUint64Value:v31];
        }

        uint64_t v26 = (v26 + 1);
      }

      while (v25 != (_DWORD)v26);
    }
  }

  else
  {
    id v33 = WALogCategoryDefaultHandle();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      uint64_t v39 = "_Bool fillUInt64FieldFromState(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSString"
            " * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
            "ng, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
      __int16 v40 = 1024;
      int v41 = 323;
      __int16 v42 = 2112;
      id v43 = v17;
      __int16 v44 = 2112;
      id v45 = v18;
      __int16 v46 = 2112;
      id v47 = v19;
      __int16 v48 = 2112;
      id v49 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find %@ %@ %@ %@",  buf,  0x3Au);
    }
  }
}

LABEL_42:
                  *(_DWORD *)buf = v27;
                  [v8 setArgument:buf atIndex:2];
                  break;
                case 6uLL:
                  if ([v12 isRepeatable])
                  {
                    id v43 = (void *)objc_claimAutoreleasedReturnValue([v12 repeatableValues]);
                    __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v43 objectAtIndexedSubscript:v13]);
                    id v34 = [v44 unsignedLongLongValue];
                  }

                  else
                  {
                    id v34 = [v12 uint64Value];
                  }

    __int16 v44 = WALogCategoryDefaultHandle();
    id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v46 = self->_megawifiprofile_diagnostic_metrics_enabled;
      id v47 = self->_megawifiprofile_diagnostic_metrics_period_ms;
      __int16 v48 = self->_timer;
      if (v48) {
        id v49 = dispatch_source_testcancel((dispatch_source_t)v48) == 0;
      }
      else {
        id v49 = 0;
      }
      *(_DWORD *)buf = 136447234;
      id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
      id v54 = 1024;
      id v55 = 254;
      uint32_t v56 = 1024;
      *(_DWORD *)id v57 = v46;
      *(_WORD *)&v57[4] = 2048;
      *(void *)&v57[6] = v47;
      char v58 = 1024;
      uint64_t v59 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Timer State : Enabled %d Period(ms) %lu valid %d",  buf,  0x28u);
    }

    goto LABEL_47;
  }

  if (!self->_megawifiprofile_diagnostic_metrics_enabled || !self->_megawifiprofile_diagnostic_metrics_period_ms) {
    goto LABEL_42;
  }
  id v19 = WALogCategoryDefaultHandle();
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
    id v54 = 1024;
    id v55 = 214;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting timer", buf, 0x12u);
  }

  id v21 = self->_timer;
  if (v21)
  {
    if (!dispatch_source_testcancel((dispatch_source_t)v21))
    {
LABEL_32:
      id v33 = WALogCategoryDefaultHandle();
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        id v35 = -[DatapathMetricStream megawifiprofile_diagnostic_metrics_period_ms]( self,  "megawifiprofile_diagnostic_metrics_period_ms");
        *(_DWORD *)buf = 136446722;
        id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
        id v54 = 1024;
        id v55 = 234;
        uint32_t v56 = 2048;
        *(void *)id v57 = 1000000 * v35;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Starting dispatch_source_set_timer fire in %llu ns",  buf,  0x1Cu);
      }

      id v36 = self->_timer;
      id v37 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 0LL);
      dispatch_source_set_timer( (dispatch_source_t)v36,  v37,  1000000 * -[DatapathMetricStream megawifiprofile_diagnostic_metrics_period_ms]( self,  "megawifiprofile_diagnostic_metrics_period_ms"),  0x5F5E100uLL);
      id v38 = WALogCategoryDefaultHandle();
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
        id v54 = 1024;
        id v55 = 236;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Starting dispatch_source_set_timer Done",  buf,  0x12u);
      }

      __int16 v40 = WALogCategoryDefaultHandle();
      int v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
        id v54 = 1024;
        id v55 = 238;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:dispatch_resume _timer",  buf,  0x12u);
      }

      dispatch_resume((dispatch_object_t)self->_timer);
      self->_timerRunning = 1;
      __int16 v42 = WALogCategoryDefaultHandle();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_41;
      }
      id v43 = self->_timerRunning;
      *(_DWORD *)buf = 136446722;
      id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
      id v54 = 1024;
      id v55 = 242;
      uint32_t v56 = 1024;
      *(_DWORD *)id v57 = v43;
      goto LABEL_40;
    }

        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
        goto LABEL_43;
      }

      [*(id *)(a1 + 32) medianCCA:*(void *)(a1 + 40)];
      id v27 = v26;
      id v28 = WALogCategoryDefaultHandle();
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 136446722;
        __int16 v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        id v43 = 1024;
        __int16 v44 = 310;
        id v45 = 2048;
        __int16 v46 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:floatCCA %f",  (uint8_t *)&v41,  0x1Cu);
      }

      id v30 = (float)(unint64_t)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "dps_wd_cca");
      unint64_t v31 = *(void **)(a1 + 32);
      if (v27 >= v30)
      {
        [v31 addNumSuppressedWD];
        id v37 = WALogCategoryDefaultHandle();
        id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446722;
          __int16 v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          id v43 = 1024;
          __int16 v44 = 314;
          id v45 = 2048;
          __int16 v46 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:sDPS: aborting watchdog since cca > limit (%f)",  (uint8_t *)&v41,  0x1Cu);
        }

        uint64_t v39 = WALogCategoryDefaultHandle();
        __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446466;
          __int16 v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          id v43 = 1024;
          __int16 v44 = 315;
          int v25 = "%{public}s::%d:WARecommendTrapWatchdog WARecommendNull dps_wd_cca";
LABEL_41:
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v41, 0x12u);
        }

        goto LABEL_42;
      }

      if (([v31 canWDforDPS] & 1) == 0)
      {
        [*(id *)(a1 + 32) addNumSuppressedWD];
        __int16 v40 = WALogCategoryDefaultHandle();
        __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446466;
          __int16 v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          id v43 = 1024;
          __int16 v44 = 322;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendTrapWatchdog WARecommendNoneNoWatchdogBudget canWDforDPS",  (uint8_t *)&v41,  0x12u);
        }

        goto LABEL_42;
      }

      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [*(id *)(*(void *)(a1 + 32) + 8) setObject:v14 forKey:@"dps_lastWD"];
      id v32 = WALogCategoryDefaultHandle();
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        id v34 = *(double *)(*(void *)(a1 + 32) + 8LL);
        int v41 = 136446722;
        __int16 v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        id v43 = 1024;
        __int16 v44 = 329;
        id v45 = 2112;
        __int16 v46 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:dpsWDBudgetDict %@",  (uint8_t *)&v41,  0x1Cu);
      }

      id v35 = WALogCategoryDefaultHandle();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 136446722;
        __int16 v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        id v43 = 1024;
        __int16 v44 = 330;
        id v45 = 2112;
        __int16 v46 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendTrapWatchdog classification: %@",  (uint8_t *)&v41,  0x1Cu);
      }

LABEL_47:
                  *(void *)buf = v34;
                  [v8 setArgument:buf atIndex:2];
                  break;
                case 7uLL:
                  if ([v12 isRepeatable])
                  {
                    id v45 = (void *)objc_claimAutoreleasedReturnValue([v12 repeatableValues]);
                    __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v45 objectAtIndexedSubscript:v13]);
                    id v47 = [v46 BOOLValue];
                  }

                  else
                  {
                    id v47 = [v12 BOOLValue];
                  }

                  buf[0] = v47;
                  [v8 setArgument:buf atIndex:2];
                  break;
                case 8uLL:
                case 9uLL:
                  if ([v12 isRepeatable])
                  {
                    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v12 repeatableValues]);
                    *(void *)buf = objc_claimAutoreleasedReturnValue([v24 objectAtIndexedSubscript:v13]);
                  }

                  else
                  {
                    if ([v12 type] == (id)9) {
                      __int16 v50 = objc_claimAutoreleasedReturnValue([v12 bytesValue]);
                    }
                    else {
                      __int16 v50 = objc_claimAutoreleasedReturnValue([v12 stringValue]);
                    }
                    *(void *)buf = v50;
                  }

                  [v8 setArgument:buf atIndex:2];
                  [v8 retainArguments];

                  break;
                case 0xAuLL:
                  if ([v12 isRepeatable])
                  {
                    id v28 = (void *)objc_claimAutoreleasedReturnValue([v12 repeatableValues]);
                    id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v13]);
                    *(void *)buf = objc_claimAutoreleasedReturnValue( -[WAProtobufMessageSubmitter instantiateAWDProtobufAndPopulateValues:]( self,  "instantiateAWDProtobufAndPopulateValues:",  v29));
                  }

                  else
                  {
                    id v28 = (void *)objc_claimAutoreleasedReturnValue([v12 subMessageValue]);
                    *(void *)buf = objc_claimAutoreleasedReturnValue( -[WAProtobufMessageSubmitter instantiateAWDProtobufAndPopulateValues:]( self,  "instantiateAWDProtobufAndPopulateValues:",  v28));
                  }

                  [v8 setArgument:buf atIndex:2];
                  [v8 retainArguments];

                  break;
                default:
                  __int16 v48 = WALogCategoryDefaultHandle();
                  id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
                  if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "-[WAProtobufMessageSubmitter instantiateAWDProtobufAndPopulateValues:]";
                    int v72 = 1024;
                    __int16 v73 = 95;
                    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:PARSER: unexpected type",  buf,  0x12u);
                  }

                  break;
              }

              *(void *)buf = 0LL;
              [v8 getArgument:buf atIndex:2];
              id v53 = [v12 type] == (id)10
                 || [v12 type] == (id)9
                 || [v12 type] == (id)8;
              if (*(void *)buf || !v53) {
                [v8 invoke];
              }
              ++v13;
            }

            if (!v13) {
              goto LABEL_13;
            }
LABEL_66:

            objc_autoreleasePoolPop(context);
            id v9 = v64 + 1;
          }

          while ((id)(v64 + 1) != v62);
          __int16 v7 = -[os_log_s countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v67,  v66,  16LL);
          if (!v7) {
            goto LABEL_74;
          }
        }
      }
    }

    else
    {
      uint32_t v56 = WALogCategoryDefaultHandle();
      id obj = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
      {
        id v57 = (void *)objc_claimAutoreleasedReturnValue([v4 key]);
        char v58 = (void *)objc_claimAutoreleasedReturnValue([v4 originalClassName]);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "-[WAProtobufMessageSubmitter instantiateAWDProtobufAndPopulateValues:]";
        int v72 = 1024;
        __int16 v73 = 21;
        id v74 = 2112;
        __int16 v75 = v57;
        v76 = 2112;
        __int16 v77 = v58;
        id v78 = 2112;
        __int16 v79 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  obj,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:PARSER: Didn't get an instantiated instance of AWD implementation in order to populate filed wi th key: %@ (%@). Bailing to avoid a crash. *** This is likely due to an out of date WirelessDiagnostics framew ork on the build (WiFiAnalytics model references classes contained in a newer version of WirelessDiagnostics framework). %@",  buf,  0x30u);
      }
    }
  }

  else
  {
    id v54 = WALogCategoryDefaultHandle();
    id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    id obj = v55;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[WAProtobufMessageSubmitter instantiateAWDProtobufAndPopulateValues:]";
      int v72 = 1024;
      __int16 v73 = 20;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:PARSER: Told to submit a NULL MESSAGE",  buf,  0x12u);
    }
  }

  id v8 = 0LL;
LABEL_74:

  return v6;
}
}

void sub_10002B008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10002B6B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_10002B888(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B8A8()
{
}

void sub_10002B8B4()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10002B8FC(exception);
}

void sub_10002B8E8(_Unwind_Exception *a1)
{
}

std::logic_error *sub_10002B8FC(std::logic_error *a1)
{
  id result = std::logic_error::logic_error(a1, "basic_string");
  return result;
}

uint64_t sub_10002B928(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10002B8A8();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

void sub_10002BA1C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  int v2 = (void *)qword_1000ECF30;
  qword_1000ECF30 = (uint64_t)v1;
}

uint64_t sub_10002BC40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002BC50(uint64_t a1)
{
}

void sub_10002BC58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([WeakRetained _getInfraApple80211]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10002C074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_29:
    goto LABEL_30;
  }

  id v10 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  lastDateChannelQueried = v3->_lastDateChannelQueried;
  v3->_lastDateChannelQueried = (NSDate *)v10;

  dword_1000ECF70 = 0;
  qword_1000ECF68 = 0LL;
  id v12 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  lastDateBSSIDQueried = v3->_lastDateBSSIDQueried;
  v3->_lastDateBSSIDQueried = (NSDate *)v12;

  id v14 = (void *)qword_1000ECF48;
  qword_1000ECF48 = (uint64_t)@"00:00:00:00:00:00";

  id v15 = (void *)qword_1000ECF50;
  qword_1000ECF50 = (uint64_t)@"Uninit lastSSID";

  id v16 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_BACKGROUND, 0);
  id v17 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = dispatch_queue_create("com.apple.wifi.recoveryMO.queue", v17);
  analyticsMOCQueue = v3->analyticsMOCQueue;
  v3->analyticsMOCQueue = (OS_dispatch_queue *)v18;

  byte_1000ECF40 = 0;
  if (v3->_dummyWAMessage) {
    goto LABEL_12;
  }
  id v20 = objc_alloc_init(&OBJC_CLASS___WAMessage);
  dummyWAMessage = v3->_dummyWAMessage;
  v3->_dummyWAMessage = v20;
LABEL_11:

LABEL_12:
  if (theArray) {
    CFRelease(theArray);
  }

  return v3;
}
    }
  }

  id v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[DatapathMetricStream queue](self, "queue"));
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_100031C98;
  v35[3] = &unk_1000CCF20;
  v35[4] = self;
  v35[5] = &v36;
  dispatch_async(v34, v35);

  _Block_object_dispose(&v36, 8);
}

void sub_10002C674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002CAD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002CB78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
}

void sub_10002CBC0(void *a1)
{
}

void sub_10002CD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002CF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002D114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002D2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_12:
  id v10 = WALogCategoryDefaultHandle();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    id v12 = 136446722;
    id v13 = "-[WAApple80211 currentPHYMode]";
    id v14 = 1024;
    id v15 = 305;
    id v16 = 1024;
    id v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Apple80211Get(APPLE80211_IOC_PHY_MODE) failed: %d",  (uint8_t *)&v12,  0x18u);
  }

  __int16 v7 = 0LL;
  id v8 = 0;
LABEL_11:

  return v8;
}

    return 0;
  }

  uint64_t v5 = [v4 getDriverType];
  self->_driverType = (int64_t)v5;
  if (!v5)
  {
    id v10 = WALogCategoryDefaultHandle();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v11 = 136446466;
      id v12 = "-[WAEngine _isDPSQuickRecoveryEngineUsed]";
      id v13 = 1024;
      id v14 = 619;
      id v9 = "%{public}s::%d:invalid _driverType kWAWIFIDriverUnknown";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  return 1;
}

void sub_10002D480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002D910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002DC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002DD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002DF88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10002E394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E3E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002E3F8(uint64_t a1)
{
}

id sub_10002E400(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeAttemptedRecovery:@"CHIP_RESET_TRIGGER" reason:@"DPSQuickTriggeredChipReset" fromSSID:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) fromBSSID:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) commandResult:*(unsigned int *)(a1 + 56)];
}

void sub_10002E7F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

id sub_10002E854(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeAttemptedRecovery:@"CHIP_RESET_TRIGGER" reason:*(void *)(a1 + 40) fromSSID:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) fromBSSID:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) commandResult:*(unsigned int *)(a1 + 64)];
}

void sub_10002EC40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

id sub_10002ECA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeAttemptedRecovery:@"REASSOC_CC_TRIGGER" reason:*(void *)(a1 + 40) fromSSID:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) fromBSSID:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) commandResult:*(unsigned int *)(a1 + 64)];
}

void sub_10002EFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_39:
    id v34 = WALogCategoryDefaultHandle();
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      id v35 = 136446722;
      id v36 = "-[WAApple80211 currentBSSIDandSSID]";
      id v37 = 1024;
      id v38 = 586;
      uint64_t v39 = 1024;
      LODWORD(v40) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to fetch currentBSSID or SSID with error %d",  (uint8_t *)&v35,  0x18u);
    }

    goto LABEL_37;
  }

  id v19 = WALogCategoryDefaultHandle();
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    BOOL v22 = qword_1000ECF48;
    id v21 = qword_1000ECF50;
    id v23 = *p_lastDateBSSIDQueried;
    [v7 timeIntervalSinceDate:*p_lastDateBSSIDQueried];
    id v35 = 136447746;
    id v36 = "-[WAApple80211 currentBSSIDandSSID]";
    id v37 = 1024;
    id v38 = 552;
    uint64_t v39 = 2112;
    __int16 v40 = v22;
    int v41 = 2112;
    __int16 v42 = v21;
    id v43 = 2112;
    __int16 v44 = v23;
    id v45 = 2112;
    __int16 v46 = v7;
    id v47 = 2048;
    __int16 v48 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Using Cached instead of new query %@,%@ last %@ now %@ diff %f",  (uint8_t *)&v35,  0x44u);
  }

LABEL_27:
  [v3 setObject:qword_1000ECF48 forKeyedSubscript:@"bssid"];
  [v3 setObject:qword_1000ECF50 forKeyedSubscript:@"ssid"];
  int v25 = v3;
LABEL_38:

  return v25;
}

  id v80 = WALogCategoryDefaultHandle();
  id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 402;
    id v410 = 2048;
    *(void *)v411 = v353;
    *(_WORD *)&v411[8] = 2048;
    v412 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:snrBinCount:%llu snrBin:%.2f",  buf,  0x26u);
  }

  id v398 = 0u;
  id v399 = 0u;
  id v396 = 0u;
  id v397 = 0u;
  id v82 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 subMessageValue]);
  id v84 = (void *)objc_claimAutoreleasedReturnValue([v83 fieldForKey:@"NWAPS_acCompletions"]);
  __int16 v85 = (void *)objc_claimAutoreleasedReturnValue([v84 repeatableValues]);

  id obj = v85;
  id v339 = [v85 countByEnumeratingWithState:&v396 objects:v405 count:16];
  if (v339)
  {
    id v333 = 0LL;
    id v334 = 0LL;
    id v86 = 0;
    id v331 = 0LL;
    v332 = 0LL;
    id v87 = 0;
    id v329 = 0LL;
    id v330 = 0LL;
    id v88 = 0;
    id v89 = 0LL;
    id v337 = *(void *)v397;
    do
    {
      for (j = 0LL; j != v339; j = (char *)j + 1)
      {
        id v91 = v89;
        id v390 = v86;
        if (*(void *)v397 != v337) {
          objc_enumerationMutation(obj);
        }
        id v92 = *(void **)(*((void *)&v396 + 1) + 8LL * (void)j);
        v392 = 0u;
        uint64_t v393 = 0u;
        v394 = 0u;
        uint64_t v395 = 0u;
        id v93 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
        id v94 = (void *)objc_claimAutoreleasedReturnValue([v93 subMessageValue]);
        int v95 = (void *)objc_claimAutoreleasedReturnValue([v94 fieldForKey:@"NWAPS_acCompletions"]);
        BOOL v96 = (void *)objc_claimAutoreleasedReturnValue([v95 repeatableValues]);

        id v97 = [v96 countByEnumeratingWithState:&v392 objects:v404 count:16];
        if (v97)
        {
          id v98 = v97;
          id v363 = v87;
          v372 = v88;
          id v378 = v91;
          id v385 = j;
          id v99 = *(void *)v393;
          while (2)
          {
            for (k = 0LL; k != v98; k = (char *)k + 1)
            {
              if (*(void *)v393 != v99) {
                objc_enumerationMutation(v96);
              }
              id v101 = *(void **)(*((void *)&v392 + 1) + 8LL * (void)k);
              id v102 = (void *)objc_claimAutoreleasedReturnValue([v92 fieldForKey:@"NWAPACTC_ac"]);
              id v103 = [v102 int32Value];

              __int128 v104 = (void *)objc_claimAutoreleasedReturnValue([v101 fieldForKey:@"NWAPACTC_ac"]);
              __int128 v105 = [v104 int32Value];

              if (v105 == v103)
              {
                __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([v101 fieldForKey:@"NWAPACTC_expiredComp"]);
                v354 = [v106 uint32Value];
                id v107 = (void *)objc_claimAutoreleasedReturnValue([v92 fieldForKey:@"NWAPACTC_expiredComp"]);
                id v347 = [v107 uint32Value];

                __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v101 fieldForKey:@"NWAPACTC_failedComp"]);
                v342 = [v108 uint32Value];
                __int128 v109 = (void *)objc_claimAutoreleasedReturnValue([v92 fieldForKey:@"NWAPACTC_failedComp"]);
                __int128 v110 = [v109 uint32Value];

                id v111 = (void *)objc_claimAutoreleasedReturnValue([v101 fieldForKey:@"NWAPACTC_noAckComp"]);
                LODWORD(v10_Block_object_dispose(va, 8) = [v111 uint32Value];
                __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v92 fieldForKey:@"NWAPACTC_noAckComp"]);
                LODWORD(v109) = [v112 uint32Value];

                __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v101 fieldForKey:@"NWAPACTC_otherErrComp"]);
                __int128 v114 = [v113 uint32Value];
                id v115 = (void *)objc_claimAutoreleasedReturnValue([v92 fieldForKey:@"NWAPACTC_otherErrComp"]);
                uint64_t v116 = [v115 uint32Value];

                v117 = v103 - 2;
                id v89 = v354 - v347;
                id v88 = v342 - v110;
                id v87 = (_DWORD)v108 - (_DWORD)v109;
                id v86 = v114 - v116;
                j = v385;
                switch(v117)
                {
                  case 0u:
                    LODWORD(v333) = v86;
                    id v86 = v390;
                    HIDWORD(v331) = v87;
                    id v87 = v363;
                    LODWORD(v330) = v342 - v110;
                    id v88 = v372;
                    LODWORD(v329) = v354 - v347;
                    goto LABEL_61;
                  case 1u:
                    goto LABEL_62;
                  case 2u:
                    HIDWORD(v334) = v86;
                    id v86 = v390;
                    HIDWORD(v333) = v87;
                    id v87 = v363;
                    LODWORD(v332) = v342 - v110;
                    id v88 = v372;
                    HIDWORD(v330) = v354 - v347;
                    goto LABEL_61;
                  case 3u:
                    LODWORD(v334) = v86;
                    id v86 = v390;
                    HIDWORD(v332) = v87;
                    id v87 = v363;
                    LODWORD(v331) = v342 - v110;
                    id v88 = v372;
                    HIDWORD(v329) = v354 - v347;
LABEL_61:
                    id v89 = v378;
                    break;
                  default:
                    goto LABEL_58;
                }

                goto LABEL_62;
              }
            }

            id v98 = [v96 countByEnumeratingWithState:&v392 objects:v404 count:16];
            if (v98) {
              continue;
            }
            break;
          }

    if (a3 != 1)
    {
LABEL_50:
      self->_isNWActivityInProgress = 0;
      id v69 = WALogCategoryDefaultHandle();
      id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
      if (!os_signpost_enabled(v57)) {
        goto LABEL_33;
      }
      *(_WORD *)buf = 0;
      goto LABEL_32;
    }

    id v62 = WALogCategoryDefaultHandle();
    id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_signpost_enabled(v63))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v63,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity Reply",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    v9[2](v9, v84[5], v78[5]);
    __int128 v64 = WALogCategoryDefaultHandle();
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    if (os_signpost_enabled(v29))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity Reply",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

void sub_10002F4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F974( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_10002FD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002FF90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_26:
    if (!i) {
      goto LABEL_28;
    }
    usleep(0x7A120u);
  }

  if (v17 != -536870175)
  {
    if (v17 != -3905) {
      goto LABEL_49;
    }
    goto LABEL_26;
  }

  id v23 = WALogCategoryDefaultHandle();
  __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    var0 = a3->var0;
    uint64_t v26 = a3->var1;
    id v27 = a3->var2;
    id v28 = a3->var3;
    id v29 = a3->var4;
    id v30 = a3->var5;
    unint64_t v31 = a3->var6;
    id v32 = a3->var7;
    *(_DWORD *)buf = 136448514;
    char v58 = "-[WAApple80211 getIOReportLegendItemsMatching:retErr:]";
    uint64_t v59 = 1024;
    *(_DWORD *)id v60 = 790;
    *(_WORD *)&v60[4] = 2112;
    *(void *)&v60[6] = var0;
    *(_WORD *)&v60[14] = 2112;
    *(void *)&v60[16] = v26;
    *(_WORD *)&v60[24] = 2112;
    *(void *)&v60[26] = v27;
    *(_WORD *)&v60[34] = 2112;
    *(void *)&v60[36] = v28;
    *(_WORD *)&v60[44] = 2112;
    *(void *)&v60[46] = v29;
    *(_WORD *)&v60[54] = 2112;
    *(void *)&v60[56] = v30;
    *(_WORD *)&v60[64] = 2112;
    *(void *)&v60[66] = v31;
    id v61 = 2112;
    id v62 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Apple80211Get APPLE80211_IOR_LEGEND too large, query %@,%@,%@,%@ %@,%@,%@,%@",  buf,  0x62u);
  }

  id v18 = -536870175;
  id v33 = WALogCategoryDefaultHandle();
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
  {
    id v35 = (const char *)a3->var0;
    id v36 = a3->var1;
    id v37 = a3->var2;
    id v38 = a3->var3;
    uint64_t v39 = a3->var4;
    __int16 v40 = a3->var5;
    int v41 = a3->var6;
    __int16 v42 = a3->var7;
    *(_DWORD *)buf = 138414082;
    char v58 = v35;
    uint64_t v59 = 2112;
    *(void *)id v60 = v36;
    *(_WORD *)&v60[8] = 2112;
    *(void *)&v60[10] = v37;
    *(_WORD *)&v60[18] = 2112;
    *(void *)&v60[20] = v38;
    *(_WORD *)&v60[28] = 2112;
    *(void *)&v60[30] = v39;
    *(_WORD *)&v60[38] = 2112;
    *(void *)&v60[40] = v40;
    *(_WORD *)&v60[48] = 2112;
    *(void *)&v60[50] = v41;
    *(_WORD *)&v60[58] = 2112;
    *(void *)&v60[60] = v42;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_FAULT,  "Apple80211Get APPLE80211_IOR_LEGEND too large, query %@,%@,%@,%@ %@,%@,%@,%@",  buf,  0x52u);
  }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v22, 0x26u);
    goto LABEL_27;
  }

  if (v12)
  {
    -[ManagedConfiguration setMegawifiprofile_diagnostic_metrics_enabled:]( self,  "setMegawifiprofile_diagnostic_metrics_enabled:",  [v12 BOOLValue]);
    id v13 = WALogCategoryDefaultHandle();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = -[ManagedConfiguration megawifiprofile_diagnostic_metrics_enabled]( self,  "megawifiprofile_diagnostic_metrics_enabled");
      id v16 = "NO";
      id v23 = "-[ManagedConfiguration observeValueForKeyPath:ofObject:change:context:]";
      __int16 v24 = 1024;
      int v25 = 187;
      BOOL v22 = 136446978;
      if (v15) {
        id v16 = "YES";
      }
      uint64_t v26 = 2112;
      id v27 = @"megawifiprofile_diagnostic_metrics_enabled";
      id v28 = 2080;
      id v29 = (unint64_t)v16;
      id v17 = "%{public}s::%d:%@ Preference is %s";
      goto LABEL_26;
    }

    id v18 = 0;
    goto LABEL_18;
  }

  id v16 = WALogCategoryDefaultHandle();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = 1;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v24 = 136446722;
    int v25 = "-[WAEngine queryInfraInterfaceInstanceAndChip]";
    uint64_t v26 = 1024;
    id v27 = 888;
    id v28 = 1024;
    LODWORD(v29) = 1;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:queryInfraInterfaceInstanceAndChip returning %d",  (uint8_t *)&v24,  0x18u);
  }

void sub_100030CA0(id a1)
{
  qword_1000ECF60 = (uint64_t)malloc(0x3988uLL);
}

void sub_1000311D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100031318(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___DatapathMetricStream);
  uint64_t v2 = (void *)qword_1000ECF78;
  qword_1000ECF78 = (uint64_t)v1;
}

void sub_100031C68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100031C98(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v2 = objc_msgSend(*(id *)(a1 + 32), "megawifiprofile_diagnostic_metrics_enabled");
    id v3 = WALogCategoryDefaultHandle();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136446722;
      id v9 = "-[DatapathMetricStream observeValueForKeyPath:ofObject:change:context:]_block_invoke";
      __int16 v10 = 1024;
      int v11 = 146;
      __int16 v12 = 1024;
      int v13 = (int)v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Disabling and reenabling timer, to ensure new kMegaProfileDiagnosticMetricsPeriod_ms takes immedi ate effect, curr state %d, disabling",  (uint8_t *)&v8,  0x18u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", 0);
    [*(id *)(a1 + 32) updateTimerConfiguration];
    id v5 = WALogCategoryDefaultHandle();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136446722;
      id v9 = "-[DatapathMetricStream observeValueForKeyPath:ofObject:change:context:]_block_invoke";
      __int16 v10 = 1024;
      int v11 = 151;
      __int16 v12 = 1024;
      int v13 = (int)v2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Applying previous state %d",  (uint8_t *)&v8,  0x18u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", v2);
  }

  return [*(id *)(a1 + 32) updateTimerConfiguration];
}

void sub_1000320D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = WALogCategoryDefaultHandle();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      id v27 = "-[DatapathMetricStream fetchMetrics]_block_invoke";
      __int16 v28 = 1024;
      int v29 = 201;
      __int16 v30 = 2112;
      id v31 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:DatapathMetricGetter get message error: %@",  buf,  0x1Cu);
    }
  }

  else
  {
    int v8 = (os_log_s *)v5;
    id v9 = objc_autoreleasePoolPush();
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pbConverter]);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 instantiateAWDProtobufAndPopulateValues:v8]);

    [*(id *)(a1 + 32) streamPBCodeable:v11 additionalDictionaryItems:0];
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 data]);
    id v13 = [v12 length];

    if ((unint64_t)v13 > 0x2800)
    {
      id v22 = WALogCategoryDefaultHandle();
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v11 data]);
        *(_DWORD *)buf = 136446722;
        id v27 = "-[DatapathMetricStream fetchMetrics]_block_invoke";
        __int16 v28 = 1024;
        int v29 = 196;
        __int16 v30 = 2048;
        id v31 = [v24 length];
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to cache lastPB - len %lu",  buf,  0x1Cu);
      }
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastPBLock]);
      [v14 lock];

      id v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastPB]);
      id v16 = [v15 mutableBytes];
      int v25 = v9;
      id v17 = objc_claimAutoreleasedReturnValue([v11 data]);
      id v18 = [v17 bytes];
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v11 data]);
      memcpy(v16, v18, (size_t)[v19 length]);

      id v9 = v25;
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v11 data]);
      objc_msgSend(*(id *)(a1 + 32), "setLastPBLength:", objc_msgSend(v20, "length"));

      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastPBLock]);
      [v21 unlock];
    }

    objc_autoreleasePoolPop(v9);
  }
}

LABEL_27:
    __int16 v28 = WALogCategoryDefaultHandle();
    int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
      id v54 = 1024;
      id v55 = 226;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Setting dispatch_source_set_event_handler",  buf,  0x12u);
    }

    __int16 v30 = self->_timer;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100032B68;
    handler[3] = &unk_1000CCD80;
    handler[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)v30, handler);
    id v31 = WALogCategoryDefaultHandle();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
      id v54 = 1024;
      id v55 = 231;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting block Done", buf, 0x12u);
    }

    goto LABEL_32;
  }

  id v22 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
    id v54 = 1024;
    id v55 = 220;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Creating _timer", buf, 0x12u);
  }

  __int16 v24 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_queue);
  int v25 = self->_timer;
  self->_timer = v24;

  uint64_t v26 = WALogCategoryDefaultHandle();
  id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    id v53 = "-[DatapathMetricStream updateTimerConfiguration]";
    id v54 = 1024;
    id v55 = 222;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Creating _timer Done", buf, 0x12u);
  }

  if (self->_timer) {
    goto LABEL_27;
  }
  __int16 v50 = WALogCategoryDefaultHandle();
  id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "Failed to create _timer", buf, 2u);
  }
  }

    id v20 = dlerror();
    abort_report_np("%s", v20);
    __break(1u);
  }

  id v18 = WALogCategoryDefaultHandle();
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "-[DPSQuickRecoveryRecommendationEngine isPriorityNetwork]";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 231;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:DeviceClient not present! Defaulting to screen state for decision!",  buf,  0x12u);
  }

LABEL_26:
  __int16 v12 = 0;
LABEL_14:

  id v13 = CFRunLoopGetCurrent();
  sub_100035FAC((uint64_t)v2, (uint64_t)v13);
  if (v2) {
    CFRelease(v2);
  }
  return v12;
}

id sub_100032B68(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchMetrics];
}

void sub_100033918(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ManagedConfiguration);
  id v2 = (void *)qword_1000ECF88;
  qword_1000ECF88 = (uint64_t)v1;
}

LABEL_28:
}

id sub_1000343DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) MCSettingsDidChange:0];
}

id sub_100034768(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) profileChangedCallback:a2];
}

id sub_100034774(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = WALogCategoryDefaultHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136446722;
    id v9 = "void __DarwinCenterChangeNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)";
    __int16 v10 = 1024;
    int v11 = 302;
    __int16 v12 = 2112;
    uint64_t v13 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:__DarwinCenterChangeNotification %@",  (uint8_t *)&v8,  0x1Cu);
  }

  return [a2 profileChangedCallback:0];
}

void sub_100034850(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  id v3 = WALogCategoryDefaultHandle();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446466;
    __int16 v10 = "-[ManagedConfiguration startMonitoring]_block_invoke";
    __int16 v11 = 1024;
    int v12 = 275;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Woken up by notifyd.\n",  (uint8_t *)&v9,  0x12u);
  }

  if (xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary && &_xpc_type_error != &_xpc_type_dictionary)
  {
    xpc_object_t value = xpc_dictionary_get_value(v2, _xpc_event_key_name);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(value);
    int v8 = v7;
    if (v7 && xpc_get_type(v7) == (xpc_type_t)&_xpc_type_string) {
      xpc_string_get_string_ptr(v8);
    }
  }
}

void sub_1000349E4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned __int8 v4 = [v3 fileExistsAtPath:@"/private/var/Managed Preferences/mobile/com.apple.wifianalyticsd.plist"];

  context = v2;
  if ((v4 & 1) == 0)
  {
    [*(id *)(a1 + 32) setProfileLoaded:0];
    id v5 = 0LL;
    id v45 = 0LL;
LABEL_20:
    id v7 = 0LL;
    goto LABEL_21;
  }

  id v47 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfFile:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfFile:options:error:",  @"/private/var/Managed Preferences/mobile/com.apple.wifianalyticsd.plist",  0LL,  &v47));
  id v6 = v47;
  id v45 = v6;
  if (!v5)
  {
    id v20 = v6;
    id v21 = WALogCategoryDefaultHandle();
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v20 underlyingErrors]);
      *(_DWORD *)buf = 136446978;
      id v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
      __int16 v52 = 1024;
      int v53 = 325;
      __int16 v54 = 2112;
      id v55 = @"/private/var/Managed Preferences/mobile/com.apple.wifianalyticsd.plist";
      __int16 v56 = 2112;
      id v57 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Unable to open %@, error %@",  buf,  0x26u);
    }

    [*(id *)(a1 + 32) setProfileLoaded:0];
    id v5 = 0LL;
    goto LABEL_20;
  }

  [*(id *)(a1 + 32) setProfileLoaded:1];
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v5,  0LL,  0LL,  0LL));
  if (!v7)
  {
LABEL_21:
    id v19 = 0LL;
    id v17 = 0LL;
    id v43 = 0LL;
    __int16 v44 = 0LL;
    __int16 v11 = 0LL;
    goto LABEL_22;
  }

  id v8 = WALogCategoryDefaultHandle();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
    __int16 v52 = 1024;
    int v53 = 331;
    __int16 v54 = 2112;
    id v55 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Found dictionary %@", buf, 0x1Cu);
  }

  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", @"megawifiprofile_diagnostic_metrics_enabled"));
  __int16 v11 = v10;
  if (v10) {
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", objc_msgSend(v10, "BOOLValue"));
  }
  int v12 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", @"megawifiprofile_diagnostic_metrics_period_ms"));
  uint64_t v13 = v12;
  if (v12) {
    objc_msgSend( *(id *)(a1 + 32),  "setMegawifiprofile_diagnostic_metrics_period_ms:",  objc_msgSend(v12, "unsignedIntValue"));
  }
  id v14 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", @"coredata_diagnostic_metrics_enabled"));
  id v15 = v14;
  if (v14) {
    objc_msgSend(*(id *)(a1 + 32), "setCoredata_diagnostic_metrics_enabled:", objc_msgSend(v14, "BOOLValue"));
  }
  id v43 = v15;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", @"coredata_diagnostic_metrics_enabled"));
  id v17 = v16;
  if (v16) {
    objc_msgSend( *(id *)(a1 + 32),  "setMegawifiprofile_diagnostic_metrics_before_first_assoc:",  objc_msgSend(v16, "BOOLValue"));
  }
  id v18 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", @"coredata_diagnostic_metrics_enabled"));
  id v19 = v18;
  __int16 v44 = v13;
  if (v18) {
    objc_msgSend( *(id *)(a1 + 32),  "setMegawifiprofile_diagnostic_metrics_while_unassoc:",  objc_msgSend(v18, "BOOLValue"));
  }
LABEL_22:
  id v24 = WALogCategoryDefaultHandle();
  int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
    __int16 v52 = 1024;
    int v53 = 361;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Exiting", buf, 0x12u);
  }

  id v26 = [v11 isEqualToNumber:&off_1000E0060];
  if ((v26 & 1) != 0)
  {
    id v27 = @"Mega Profile Installed";
  }

  else if ([v11 isEqualToNumber:&off_1000E0078])
  {
    id v27 = @"No Logging Profile Installed";
  }

  else
  {
    id v27 = @"No Profile";
  }

  __int16 v28 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v48[0] = WADeviceAnalyticsDiagnosticStateInfo[1];
  int v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  v49[0] = v29;
  v49[1] = v27;
  v48[1] = @"desc";
  v48[2] = @"enabled";
  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v26));
  v48[3] = @"name";
  v49[2] = v30;
  v49[3] = @"WiFi Profile State";
  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v49,  v48,  4LL));
  -[NSMutableDictionary addEntriesFromDictionary:](v28, "addEntriesFromDictionary:", v31);

  id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dbDelegate]);
  [v32 processMetricDictOffEngine:@"com.apple.wifi.DiagnosticState" data:v28];

  LODWORD(v32) = [*(id *)(a1 + 32) profileLoaded];
  id v33 = WALogCategoryDefaultHandle();
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v32)
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446722;
      id v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
      __int16 v52 = 1024;
      int v53 = 387;
      __int16 v54 = 2112;
      id v55 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:We think profileLoaded, copying prefs %@",  buf,  0x1Cu);
    }

    id v36 = -[__CFString copy](v7, "copy");
    uint64_t v37 = *(void *)(a1 + 32);
    id v38 = *(void **)(v37 + 48);
    *(void *)(v37 + 4_Block_object_dispose(va, 8) = v36;
  }

  else
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      id v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
      __int16 v52 = 1024;
      int v53 = 390;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:profileLoaded false, assigning defaults",  buf,  0x12u);
    }

    uint64_t v39 = *(void *)(a1 + 32);
    __int16 v40 = *(void **)(v39 + 48);
    *(void *)(v39 + 4_Block_object_dispose(va, 8) = 0LL;

    id v41 = +[WAUtil isWiFiFragmentSamplingEnabled](&OBJC_CLASS___WAUtil, "isWiFiFragmentSamplingEnabled");
    if ((_DWORD)v41) {
      uint64_t v42 = 600000LL;
    }
    else {
      uint64_t v42 = 5000LL;
    }
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_period_ms:", v42);
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", v41);
    objc_msgSend(*(id *)(a1 + 32), "setCoredata_diagnostic_metrics_enabled:", v41);
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_before_first_assoc:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_while_unassoc:", 1);
  }

  objc_autoreleasePoolPop(context);
}

void sub_100035D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100035D7C(uint64_t a1)
{
  uint64_t v7 = 0LL;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  id v2 = off_1000ECF98;
  __int16 v10 = off_1000ECF98;
  if (!off_1000ECF98)
  {
    id v3 = (void *)sub_10003CC78();
    id v2 = dlsym(v3, "WiFiManagerClientCreate");
    v8[3] = (uint64_t)v2;
    off_1000ECF98 = v2;
  }

  _Block_object_dispose(&v7, 8);
  if (!v2)
  {
    id v5 = dlerror();
    id v6 = (_Unwind_Exception *)abort_report_np("%s", v5);
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }

  return ((uint64_t (*)(uint64_t, void))v2)(a1, 0LL);
}

uint64_t sub_100035E34(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0LL;
  __int16 v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  unsigned __int8 v4 = off_1000ECFA8;
  int v12 = off_1000ECFA8;
  if (!off_1000ECFA8)
  {
    id v5 = (void *)sub_10003CC78();
    unsigned __int8 v4 = dlsym(v5, "WiFiManagerClientScheduleWithRunLoop");
    v10[3] = (uint64_t)v4;
    off_1000ECFA8 = v4;
  }

  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    uint64_t v7 = dlerror();
    id v8 = (_Unwind_Exception *)abort_report_np("%s", v7);
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }

  return ((uint64_t (*)(uint64_t, uint64_t, const __CFString *))v4)( a1,  a2,  @"managerClient entering runloop mode");
}

uint64_t sub_100035EF8(uint64_t a1)
{
  uint64_t v7 = 0LL;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  id v2 = off_1000ECFB0;
  __int16 v10 = off_1000ECFB0;
  if (!off_1000ECFB0)
  {
    id v3 = (void *)sub_10003CC78();
    id v2 = dlsym(v3, "WiFiManagerClientCopyDevices");
    v8[3] = (uint64_t)v2;
    off_1000ECFB0 = v2;
  }

  _Block_object_dispose(&v7, 8);
  if (!v2)
  {
    id v5 = dlerror();
    id v6 = (_Unwind_Exception *)abort_report_np("%s", v5);
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t sub_100035FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0LL;
  __int16 v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  unsigned __int8 v4 = off_1000ECFC0;
  int v12 = off_1000ECFC0;
  if (!off_1000ECFC0)
  {
    id v5 = (void *)sub_10003CC78();
    unsigned __int8 v4 = dlsym(v5, "WiFiManagerClientUnscheduleFromRunLoop");
    v10[3] = (uint64_t)v4;
    off_1000ECFC0 = v4;
  }

  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    uint64_t v7 = dlerror();
    id v8 = (_Unwind_Exception *)abort_report_np("%s", v7);
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }

  return ((uint64_t (*)(uint64_t, uint64_t, const __CFString *))v4)( a1,  a2,  @"managerClient exiting runloop mode");
}

void sub_1000365E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

LABEL_8:
    -[DPSQuickRecoveryRecommendationEngine addNumRecommendedScreenOnQuickRecoveryWD]( self,  "addNumRecommendedScreenOnQuickRecoveryWD");
    return 1;
  }

  if (-[DPSQuickRecoveryRecommendationEngine isResetAllowedForKey:forPrefSelector:]( self,  "isResetAllowedForKey:forPrefSelector:",  @"dps_lastScreenOnQuickRecoveryWD",  "minutes_between_fast_dps_wd_screen_on"))
  {
    goto LABEL_8;
  }

  if (-[DPSQuickRecoveryRecommendationEngine isResetAllowedForKey:forPrefSelector:]( self,  "isResetAllowedForKey:forPrefSelector:",  @"dps_lastScreenOffQuickRecoveryWD",  "minutes_between_fast_dps_wd_screen_off"))
  {
LABEL_6:
    -[DPSQuickRecoveryRecommendationEngine addNumRecommendedScreenOffQuickRecoveryWD]( self,  "addNumRecommendedScreenOffQuickRecoveryWD");
    return 1;
  }

  -[DPSQuickRecoveryRecommendationEngine addNumSuppressedScreenOnQuickRecoveryWD]( self,  "addNumSuppressedScreenOnQuickRecoveryWD");
  return 0;
}
  }

  id v22 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_signpost_enabled(v23))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "_writeWiFiAnalyticsMessageToJSONFile",  (const char *)&unk_1000B76E7,  buf,  2u);
  }
}
    }
  }

  objc_destroyWeak(&location);
}

LABEL_31:
  id v61 = WALogCategoryDefaultHandle();
  id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 388;
    id v410 = 2048;
    *(void *)v411 = v352;
    *(_WORD *)&v411[8] = 2048;
    v412 = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:rssiBinCount:%llu rssiBin:%.2f",  buf,  0x26u);
  }

  id v63 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v63 subMessageValue]);
  __int128 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 fieldForKey:@"NWAPS_snrs"]);
  __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 repeatableValues]);
  __int128 v67 = [v66 count];

  int v68 = 0.0;
  v353 = (unint64_t)v67;
  if ((unint64_t)v67 >= 2)
  {
    id v69 = 0;
    id v70 = 1LL;
    while (1)
    {
      id v389 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
      id v384 = (void *)objc_claimAutoreleasedReturnValue([v389 subMessageValue]);
      v377 = (void *)objc_claimAutoreleasedReturnValue([v384 fieldForKey:@"NWAPS_snrs"]);
      v371 = (void *)objc_claimAutoreleasedReturnValue([v377 repeatableValues]);
      __int16 v71 = (void *)objc_claimAutoreleasedReturnValue([v371 objectAtIndex:v70]);
      int v72 = (void *)objc_claimAutoreleasedReturnValue([v71 fieldForKey:@"NWASB_residentTime"]);
      int v362 = [v72 uint64Value];
      __int16 v73 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
      id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 subMessageValue]);
      __int16 v75 = (void *)objc_claimAutoreleasedReturnValue([v74 fieldForKey:@"NWAPS_snrs"]);
      v76 = (void *)objc_claimAutoreleasedReturnValue([v75 repeatableValues]);
      __int16 v77 = (void *)objc_claimAutoreleasedReturnValue([v76 objectAtIndex:v70]);
      id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 fieldForKey:@"NWASB_residentTime"]);
      __int16 v79 = [v78 uint64Value];

      if (v362 != v79) {
        break;
      }
      id v70 = v69 + 2;
      ++v69;
      if (v353 <= v70) {
        goto LABEL_39;
      }
    }

    int v68 = (double)v69;
  }

    id v49 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[WAEngine engineQ](self, "engineQ"));
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472LL;
    v73[2] = sub_100061E58;
    v73[3] = &unk_1000CD640;
    v76 = &v120;
    v73[4] = self;
    __int16 v79 = v72;
    id v74 = v68;
    __int16 v77 = &v112;
    id v80 = 4LL;
    id v78 = v118;
    __int16 v50 = v63;
    __int16 v75 = v50;
    dispatch_group_notify(v61, v49, v73);

    _Block_object_dispose(v101, 8);
    _Block_object_dispose(v103, 8);

    if (a3 == 1)
    {
      id v51 = (void *)objc_claimAutoreleasedReturnValue(-[RecommendationEngine preferences](self->_recommendationEngine, "preferences"));
      __int16 v52 = dispatch_time(0, 1000000000 * (void)objc_msgSend(v51, "dps_report_sent_after") + 5000000000);
      dispatch_semaphore_wait(v50, v52);

      int v53 = WALogCategoryDefaultHandle();
      __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v127 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]";
        v128 = 1024;
        id v129 = 4477;
        id v55 = "%{public}s::%d:unblocking is complete... returning";
LABEL_36:
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, v55, buf, 0x12u);
      }
    }

    else
    {
      __int16 v56 = WALogCategoryDefaultHandle();
      __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v127 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]";
        v128 = 1024;
        id v129 = 4479;
        id v55 = "%{public}s::%d:returning immediatley";
        goto LABEL_36;
      }
    }
  }

  else
  {
    id v57 = WALogCategoryDefaultHandle();
    char v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v127 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]";
      v128 = 1024;
      id v129 = 3918;
      id v130 = 2112;
      *(void *)id v131 = @"DPSR";
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:No model class found for key: %@. This is a CRITICAL error",  buf,  0x1Cu);
    }

    id v132 = NSLocalizedFailureReasonErrorKey;
    v133 = @"WAErrorCodeNotRegistered";
    __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v133,  &v132,  1LL));
    uint64_t v59 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v54));
    id v60 = (void *)v113[5];
    v113[5] = v59;

    id v69 = 0LL;
  }

  (*((void (**)(id, uint64_t, uint64_t))v70 + 2))(v70, v121[5], v113[5]);
  _Block_object_dispose(v110, 8);

  _Block_object_dispose(&v112, 8);
  _Block_object_dispose(v118, 8);

  _Block_object_dispose(&v120, 8);
}

LABEL_58:
          id v86 = v390;
          id v87 = v363;
          id v88 = v372;
          id v89 = v378;
          j = v385;
        }

        else
        {
          id v86 = v390;
          id v89 = v91;
        }

      ++v56;
LABEL_59:
      if (++v20 >= (unint64_t)v17)
      {
        id v17 = [obj countByEnumeratingWithState:&v60 objects:v91 count:16];
        if (!v17) {
          goto LABEL_64;
        }
        id v20 = 0LL;
      }
    }
  }

  __int16 v54 = 0;
  id v55 = 0LL;
  __int16 v56 = 0LL;
  id v19 = 0LL;
LABEL_64:

  v58->_totalDnsServers = (unint64_t)v50;
  v58->_numIPv4DnsServers = v55;
  v58->_numIPv6DnsServers = v56;
  v58->_numLocalDnsServers = v19;
  v58->_numRemoteDnsServers = (unint64_t)&v50[-v19];
  id v45 = WALogCategoryDefaultHandle();
  __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    id v47 = "NO";
    *(_DWORD *)buf = 136448002;
    *(void *)&uint8_t buf[4] = "-[WAEngine fetchConfiguredDnsInfo]";
    *(_WORD *)&_BYTE buf[12] = 1024;
    if ((v54 & 1) != 0) {
      id v47 = "YES";
    }
    *(_DWORD *)&buf[14] = 5871;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v47;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v50;
    *(_WORD *)&buf[38] = 2048;
    *(void *)&buf[40] = v55;
    int v72 = 2048;
    __int16 v73 = v56;
    id v74 = 2048;
    __int16 v75 = v19;
    v76 = 2048;
    __int16 v77 = &v50[-v19];
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DNS-config: validDNSConfig:%s totalDnsServers:%lu numv4DnsServers:%lu numv6DnsServers:%lu numLocalD nsServers:%lu numRemoteDnsServers:%lu",  buf,  0x4Eu);
  }

  _Block_object_dispose(&v65, 8);
  return v54 & 1;
}

LABEL_62:
      }

      id v339 = [obj countByEnumeratingWithState:&v396 objects:v405 count:16];
    }

    while (v339);
  }

  else
  {
    id v333 = 0LL;
    id v334 = 0LL;
    id v86 = 0;
    id v331 = 0LL;
    v332 = 0LL;
    id v87 = 0;
    id v329 = 0LL;
    id v330 = 0LL;
    id v88 = 0;
    LODWORD(v89) = 0;
  }

  id v391 = v89;

  id v118 = WALogCategoryDefaultHandle();
  id v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447490;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 462;
    id v410 = 1024;
    *(_DWORD *)v411 = v89;
    *(_WORD *)&v411[4] = 1024;
    *(_DWORD *)&v411[6] = v329;
    LOWORD(v412) = 1024;
    *(_DWORD *)((char *)&v412 + 2) = HIDWORD(v329);
    HIWORD(v412) = 1024;
    id v413 = HIDWORD(v330);
    _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:txBEExpComp: %u txBKExpComp: %u txVIExpComp: %u txVOExpComp: %u",  buf,  0x2Au);
  }

  v120 = WALogCategoryDefaultHandle();
  __int16 v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
  if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447490;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 464;
    id v410 = 1024;
    *(_DWORD *)v411 = v88;
    *(_WORD *)&v411[4] = 1024;
    *(_DWORD *)&v411[6] = v330;
    LOWORD(v412) = 1024;
    *(_DWORD *)((char *)&v412 + 2) = v331;
    HIWORD(v412) = 1024;
    id v413 = v332;
    _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:txBEFailComp: %u txBKFailComp: %u txVIFailComp: %u txVOFailComp: %u",  buf,  0x2Au);
  }

  int v122 = WALogCategoryDefaultHandle();
  __int16 v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
  if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447490;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 466;
    id v410 = 1024;
    *(_DWORD *)v411 = v87;
    *(_WORD *)&v411[4] = 1024;
    *(_DWORD *)&v411[6] = HIDWORD(v331);
    LOWORD(v412) = 1024;
    *(_DWORD *)((char *)&v412 + 2) = HIDWORD(v332);
    HIWORD(v412) = 1024;
    id v413 = HIDWORD(v333);
    _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:txBENoAckComp: %u txBKNoAckComp: %u txVINoAckComp: %u txVONoAckComp: %u",  buf,  0x2Au);
  }

  id obja = v88;
  id v338 = v87;

  id v124 = WALogCategoryDefaultHandle();
  __int16 v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
  if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447490;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 468;
    id v410 = 1024;
    *(_DWORD *)v411 = v86;
    *(_WORD *)&v411[4] = 1024;
    *(_DWORD *)&v411[6] = v333;
    LOWORD(v412) = 1024;
    *(_DWORD *)((char *)&v412 + 2) = v334;
    HIWORD(v412) = 1024;
    id v413 = HIDWORD(v334);
    _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:txBEOErrComp: %u txBKOErrComp: %u txVIOErrComp: %u txVOOErrComp: %u",  buf,  0x2Au);
  }

  v340 = v86;

  v379 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  id v126 = (void *)objc_claimAutoreleasedReturnValue([v379 subMessageValue]);
  v127 = (void *)objc_claimAutoreleasedReturnValue([v126 fieldForKey:@"NWAPS_completions"]);
  v128 = (void *)objc_claimAutoreleasedReturnValue([v127 subMessageValue]);
  id v129 = (void *)objc_claimAutoreleasedReturnValue([v128 fieldForKey:@"NWATC_chipmodeerror"]);
  id v130 = [v129 uint32Value];
  id v131 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  id v132 = (void *)objc_claimAutoreleasedReturnValue([v131 subMessageValue]);
  v133 = (void *)objc_claimAutoreleasedReturnValue([v132 fieldForKey:@"NWAPS_completions"]);
  id v134 = (void *)objc_claimAutoreleasedReturnValue([v133 subMessageValue]);
  id v135 = (void *)objc_claimAutoreleasedReturnValue([v134 fieldForKey:@"NWATC_chipmodeerror"]);
  char v386 = v130 - [v135 uint32Value];

  v364 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  id v355 = (void *)objc_claimAutoreleasedReturnValue([v364 subMessageValue]);
  id v136 = (void *)objc_claimAutoreleasedReturnValue([v355 fieldForKey:@"NWAPS_completions"]);
  id v137 = (void *)objc_claimAutoreleasedReturnValue([v136 subMessageValue]);
  id v138 = (void *)objc_claimAutoreleasedReturnValue([v137 fieldForKey:@"NWATC_expired"]);
  v380 = [v138 uint32Value];
  id v139 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  id v140 = (void *)objc_claimAutoreleasedReturnValue([v139 subMessageValue]);
  id v141 = (void *)objc_claimAutoreleasedReturnValue([v140 fieldForKey:@"NWAPS_completions"]);
  id v142 = (void *)objc_claimAutoreleasedReturnValue([v141 subMessageValue]);
  __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v142 fieldForKey:@"NWATC_expired"]);
  id v373 = [v143 uint32Value];

  id v348 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  id v144 = (void *)objc_claimAutoreleasedReturnValue([v348 subMessageValue]);
  __int128 v145 = (void *)objc_claimAutoreleasedReturnValue([v144 fieldForKey:@"NWAPS_completions"]);
  uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue([v145 subMessageValue]);
  __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v146 fieldForKey:@"NWATC_internalerror"]);
  v365 = [v147 uint32Value];
  id v148 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  BOOL v149 = (void *)objc_claimAutoreleasedReturnValue([v148 subMessageValue]);
  id v150 = (void *)objc_claimAutoreleasedReturnValue([v149 fieldForKey:@"NWAPS_completions"]);
  int v151 = (void *)objc_claimAutoreleasedReturnValue([v150 subMessageValue]);
  int v152 = (void *)objc_claimAutoreleasedReturnValue([v151 fieldForKey:@"NWATC_internalerror"]);
  __int128 v356 = [v152 uint32Value];

  id v323 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  uint64_t v153 = (void *)objc_claimAutoreleasedReturnValue([v323 subMessageValue]);
  id v154 = (void *)objc_claimAutoreleasedReturnValue([v153 fieldForKey:@"NWAPS_completions"]);
  id v155 = (void *)objc_claimAutoreleasedReturnValue([v154 subMessageValue]);
  int v156 = (void *)objc_claimAutoreleasedReturnValue([v155 fieldForKey:@"NWATC_ioerror"]);
  v349 = [v156 uint32Value];
  int v157 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  NSErrorUserInfoKey v158 = (void *)objc_claimAutoreleasedReturnValue([v157 subMessageValue]);
  __int128 v159 = (void *)objc_claimAutoreleasedReturnValue([v158 fieldForKey:@"NWAPS_completions"]);
  __int128 v160 = (void *)objc_claimAutoreleasedReturnValue([v159 subMessageValue]);
  __int128 v161 = (void *)objc_claimAutoreleasedReturnValue([v160 fieldForKey:@"NWATC_ioerror"]);
  id v343 = [v161 uint32Value];

  v318 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  __int16 v162 = (void *)objc_claimAutoreleasedReturnValue([v318 subMessageValue]);
  int v163 = (void *)objc_claimAutoreleasedReturnValue([v162 fieldForKey:@"NWAPS_completions"]);
  __int16 v164 = (void *)objc_claimAutoreleasedReturnValue([v163 subMessageValue]);
  __int128 v165 = (void *)objc_claimAutoreleasedReturnValue([v164 fieldForKey:@"NWATC_noack"]);
  v324 = [v165 uint32Value];
  __int128 v166 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  int v167 = (void *)objc_claimAutoreleasedReturnValue([v166 subMessageValue]);
  __int16 v168 = (void *)objc_claimAutoreleasedReturnValue([v167 fieldForKey:@"NWAPS_completions"]);
  int v169 = (void *)objc_claimAutoreleasedReturnValue([v168 subMessageValue]);
  __int16 v170 = (void *)objc_claimAutoreleasedReturnValue([v169 fieldForKey:@"NWATC_noack"]);
  id v321 = [v170 uint32Value];

  v313 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  BOOL v171 = (void *)objc_claimAutoreleasedReturnValue([v313 subMessageValue]);
  __int16 v172 = (void *)objc_claimAutoreleasedReturnValue([v171 fieldForKey:@"NWAPS_completions"]);
  int v173 = (void *)objc_claimAutoreleasedReturnValue([v172 subMessageValue]);
  __int16 v174 = (void *)objc_claimAutoreleasedReturnValue([v173 fieldForKey:@"NWATC_nobuf"]);
  id v319 = [v174 uint32Value];
  NSErrorUserInfoKey v175 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  uint64_t v176 = (void *)objc_claimAutoreleasedReturnValue([v175 subMessageValue]);
  v177 = (void *)objc_claimAutoreleasedReturnValue([v176 fieldForKey:@"NWAPS_completions"]);
  __int16 v178 = (void *)objc_claimAutoreleasedReturnValue([v177 subMessageValue]);
  int v179 = (void *)objc_claimAutoreleasedReturnValue([v178 fieldForKey:@"NWATC_nobuf"]);
  v316 = [v179 uint32Value];

  v308 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  v305 = (void *)objc_claimAutoreleasedReturnValue([v308 subMessageValue]);
  id v180 = (void *)objc_claimAutoreleasedReturnValue([v305 fieldForKey:@"NWAPS_completions"]);
  __int16 v181 = (void *)objc_claimAutoreleasedReturnValue([v180 subMessageValue]);
  int v182 = (void *)objc_claimAutoreleasedReturnValue([v181 fieldForKey:@"NWATC_noremotepeer"]);
  v314 = [v182 uint32Value];
  __int16 v183 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  id v184 = (void *)objc_claimAutoreleasedReturnValue([v183 subMessageValue]);
  v185 = (void *)objc_claimAutoreleasedReturnValue([v184 fieldForKey:@"NWAPS_completions"]);
  id v186 = (void *)objc_claimAutoreleasedReturnValue([v185 subMessageValue]);
  id v187 = (void *)objc_claimAutoreleasedReturnValue([v186 fieldForKey:@"NWATC_noremotepeer"]);
  v311 = [v187 uint32Value];

  id v188 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  id v189 = (void *)objc_claimAutoreleasedReturnValue([v188 subMessageValue]);
  id v190 = (void *)objc_claimAutoreleasedReturnValue([v189 fieldForKey:@"NWAPS_completions"]);
  id v191 = (void *)objc_claimAutoreleasedReturnValue([v190 subMessageValue]);
  v192 = (void *)objc_claimAutoreleasedReturnValue([v191 fieldForKey:@"NWATC_noresources"]);
  id v309 = [v192 uint32Value];
  uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  char v194 = (void *)objc_claimAutoreleasedReturnValue([v193 subMessageValue]);
  v195 = (void *)objc_claimAutoreleasedReturnValue([v194 fieldForKey:@"NWAPS_completions"]);
  uint64_t v196 = (void *)objc_claimAutoreleasedReturnValue([v195 subMessageValue]);
  v197 = (void *)objc_claimAutoreleasedReturnValue([v196 fieldForKey:@"NWATC_noresources"]);
  v306 = [v197 uint32Value];

  uint64_t v198 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_peerStats"]);
  id v199 = (void *)objc_claimAutoreleasedReturnValue([v198 subMessageValue]);
  v200 = (void *)objc_claimAutoreleasedReturnValue([v199 fieldForKey:@"NWAPS_completions"]);
  v201 = (void *)objc_claimAutoreleasedReturnValue([v200 subMessageValue]);
  id v202 = (void *)objc_claimAutoreleasedReturnValue([v201 fieldForKey:@"NWATC_txfailure"]);
  id v302 = [v202 uint32Value];
  id v203 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_peerStats"]);
  v204 = (void *)objc_claimAutoreleasedReturnValue([v203 subMessageValue]);
  BOOL v205 = (void *)objc_claimAutoreleasedReturnValue([v204 fieldForKey:@"NWAPS_completions"]);
  v206 = (void *)objc_claimAutoreleasedReturnValue([v205 subMessageValue]);
  v207 = (void *)objc_claimAutoreleasedReturnValue([v206 fieldForKey:@"NWATC_txfailure"]);
  char v300 = [v207 uint32Value];

  v208 = WALogCategoryDefaultHandle();
  id v209 = (os_log_s *)objc_claimAutoreleasedReturnValue(v208);
  if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 490;
    id v410 = 1024;
    *(_DWORD *)v411 = v386;
    _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:chipModeError: %u", buf, 0x18u);
  }

  v210 = v380 - v373;

  v211 = WALogCategoryDefaultHandle();
  v212 = (os_log_s *)objc_claimAutoreleasedReturnValue(v211);
  if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 491;
    id v410 = 1024;
    *(_DWORD *)v411 = v380 - v373;
    _os_log_impl((void *)&_mh_execute_header, v212, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:expired: %u", buf, 0x18u);
  }

  id v213 = WALogCategoryDefaultHandle();
  v214 = (os_log_s *)objc_claimAutoreleasedReturnValue(v213);
  if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 492;
    id v410 = 1024;
    *(_DWORD *)v411 = v365 - v356;
    _os_log_impl((void *)&_mh_execute_header, v214, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:internalError: %u", buf, 0x18u);
  }

  uint64_t v215 = WALogCategoryDefaultHandle();
  char v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);
  if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 493;
    id v410 = 1024;
    *(_DWORD *)v411 = v349 - v343;
    _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:ioError: %u", buf, 0x18u);
  }

  v217 = WALogCategoryDefaultHandle();
  v218 = (os_log_s *)objc_claimAutoreleasedReturnValue(v217);
  if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 494;
    id v410 = 1024;
    *(_DWORD *)v411 = v324 - v321;
    _os_log_impl((void *)&_mh_execute_header, v218, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:noAck: %u", buf, 0x18u);
  }

  v219 = WALogCategoryDefaultHandle();
  uint64_t v220 = (os_log_s *)objc_claimAutoreleasedReturnValue(v219);
  if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 495;
    id v410 = 1024;
    *(_DWORD *)v411 = v319 - v316;
    _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:noBuf: %u", buf, 0x18u);
  }

  v221 = WALogCategoryDefaultHandle();
  v222 = (os_log_s *)objc_claimAutoreleasedReturnValue(v221);
  if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 496;
    id v410 = 1024;
    *(_DWORD *)v411 = v314 - v311;
    _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:noRemotePeer: %u", buf, 0x18u);
  }

  v381 = v309 - v306;

  v223 = WALogCategoryDefaultHandle();
  id v224 = (os_log_s *)objc_claimAutoreleasedReturnValue(v223);
  if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 497;
    id v410 = 1024;
    *(_DWORD *)v411 = v309 - v306;
    _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:noResources: %u", buf, 0x18u);
  }

  v312 = v314 - v311;
  id v315 = v319 - v316;
  v317 = v324 - v321;
  id v320 = v349 - v343;
  v322 = v365 - v356;
  id v325 = v210;

  v225 = WALogCategoryDefaultHandle();
  v226 = (os_log_s *)objc_claimAutoreleasedReturnValue(v225);
  if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 498;
    id v410 = 1024;
    *(_DWORD *)v411 = v302 - v300;
    _os_log_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:txFailure: %u", buf, 0x18u);
  }

  id v310 = v302 - v300;

  id v366 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v227 = (void *)objc_claimAutoreleasedReturnValue([v366 subMessageValue]);
  v228 = (void *)objc_claimAutoreleasedReturnValue([v227 fieldForKey:@"NWACS_scanActivity"]);
  v229 = (void *)objc_claimAutoreleasedReturnValue([v228 subMessageValue]);
  v230 = (void *)objc_claimAutoreleasedReturnValue([v229 fieldForKey:@"NWASA_roamDur"]);
  id v231 = [v230 uint32Value];
  v232 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_controllerStats"]);
  v233 = (void *)objc_claimAutoreleasedReturnValue([v232 subMessageValue]);
  id v234 = (void *)objc_claimAutoreleasedReturnValue([v233 fieldForKey:@"NWACS_scanActivity"]);
  id v235 = (void *)objc_claimAutoreleasedReturnValue([v234 subMessageValue]);
  v236 = (void *)objc_claimAutoreleasedReturnValue([v235 fieldForKey:@"NWASA_roamDur"]);
  id v374 = v231 - [v236 uint32Value];

  v237 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_controllerStats"]);
  id v238 = (void *)objc_claimAutoreleasedReturnValue([v237 subMessageValue]);
  id v239 = (void *)objc_claimAutoreleasedReturnValue([v238 fieldForKey:@"NWACS_scanActivity"]);
  id v240 = (void *)objc_claimAutoreleasedReturnValue([v239 subMessageValue]);
  id v241 = (void *)objc_claimAutoreleasedReturnValue([v240 fieldForKey:@"NWASA_roamCount"]);
  id v367 = [v241 uint32Value];
  id v242 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_controllerStats"]);
  id v243 = (void *)objc_claimAutoreleasedReturnValue([v242 subMessageValue]);
  id v244 = (void *)objc_claimAutoreleasedReturnValue([v243 fieldForKey:@"NWACS_scanActivity"]);
  v245 = (void *)objc_claimAutoreleasedReturnValue([v244 subMessageValue]);
  v246 = (void *)objc_claimAutoreleasedReturnValue([v245 fieldForKey:@"NWASA_roamCount"]);
  id v357 = [v246 uint32Value];

  id v247 = WALogCategoryDefaultHandle();
  id v248 = (os_log_s *)objc_claimAutoreleasedReturnValue(v247);
  if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 506;
    id v410 = 1024;
    *(_DWORD *)v411 = v374;
    _os_log_impl((void *)&_mh_execute_header, v248, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:roamDuration: %u", buf, 0x18u);
  }

  id v249 = WALogCategoryDefaultHandle();
  v250 = (os_log_s *)objc_claimAutoreleasedReturnValue(v249);
  if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 507;
    id v410 = 1024;
    *(_DWORD *)v411 = v367 - v357;
    _os_log_impl((void *)&_mh_execute_header, v250, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:roamCount: %u", buf, 0x18u);
  }

  id v307 = v367 - v357;

  id v358 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v251 = (void *)objc_claimAutoreleasedReturnValue([v358 subMessageValue]);
  uint64_t v252 = (void *)objc_claimAutoreleasedReturnValue([v251 fieldForKey:@"NWACS_btCoex"]);
  char v253 = (void *)objc_claimAutoreleasedReturnValue([v252 subMessageValue]);
  char v254 = (void *)objc_claimAutoreleasedReturnValue([v253 fieldForKey:@"NWABC_btabort"]);
  v255 = [v254 uint32Value];
  v256 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v257 = (void *)objc_claimAutoreleasedReturnValue([v256 subMessageValue]);
  id v258 = (void *)objc_claimAutoreleasedReturnValue([v257 fieldForKey:@"NWACS_btCoex"]);
  id v259 = (void *)objc_claimAutoreleasedReturnValue([v258 subMessageValue]);
  v260 = (void *)objc_claimAutoreleasedReturnValue([v259 fieldForKey:@"NWABC_btabort"]);
  id v368 = v255 - [v260 uint32Value];

  id v344 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v303 = (void *)objc_claimAutoreleasedReturnValue([v344 subMessageValue]);
  v261 = (void *)objc_claimAutoreleasedReturnValue([v303 fieldForKey:@"NWACS_btCoex"]);
  id v262 = (void *)objc_claimAutoreleasedReturnValue([v261 subMessageValue]);
  v263 = (void *)objc_claimAutoreleasedReturnValue([v262 fieldForKey:@"NWABC_grant"]);
  v359 = [v263 uint32Value];
  v264 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v265 = (void *)objc_claimAutoreleasedReturnValue([v264 subMessageValue]);
  v266 = (void *)objc_claimAutoreleasedReturnValue([v265 fieldForKey:@"NWACS_btCoex"]);
  v267 = (void *)objc_claimAutoreleasedReturnValue([v266 subMessageValue]);
  v268 = (void *)objc_claimAutoreleasedReturnValue([v267 fieldForKey:@"NWABC_grant"]);
  id v350 = [v268 uint32Value];

  id v269 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v270 = (void *)objc_claimAutoreleasedReturnValue([v269 subMessageValue]);
  v271 = (void *)objc_claimAutoreleasedReturnValue([v270 fieldForKey:@"NWACS_btCoex"]);
  v272 = (void *)objc_claimAutoreleasedReturnValue([v271 subMessageValue]);
  char v273 = (void *)objc_claimAutoreleasedReturnValue([v272 fieldForKey:@"NWABC_request"]);
  id v345 = [v273 uint32Value];
  id v274 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_controllerStats"]);
  BOOL v275 = (void *)objc_claimAutoreleasedReturnValue([v274 subMessageValue]);
  id v276 = (void *)objc_claimAutoreleasedReturnValue([v275 fieldForKey:@"NWACS_btCoex"]);
  id v277 = (void *)objc_claimAutoreleasedReturnValue([v276 subMessageValue]);
  id v278 = (void *)objc_claimAutoreleasedReturnValue([v277 fieldForKey:@"NWABC_request"]);
  id v304 = [v278 uint32Value];

  v279 = (void *)objc_claimAutoreleasedReturnValue([v341 fieldForKey:@"DPSCS_controllerStats"]);
  uint64_t v280 = (void *)objc_claimAutoreleasedReturnValue([v279 subMessageValue]);
  BOOL v281 = (void *)objc_claimAutoreleasedReturnValue([v280 fieldForKey:@"NWACS_btCoex"]);
  char v282 = (void *)objc_claimAutoreleasedReturnValue([v281 subMessageValue]);
  v283 = (void *)objc_claimAutoreleasedReturnValue([v282 fieldForKey:@"NWABC_ucodehighlatency"]);
  v301 = [v283 uint32Value];
  v284 = (void *)objc_claimAutoreleasedReturnValue([v328 fieldForKey:@"DPSCS_controllerStats"]);
  v285 = (void *)objc_claimAutoreleasedReturnValue([v284 subMessageValue]);
  BOOL v286 = (void *)objc_claimAutoreleasedReturnValue([v285 fieldForKey:@"NWACS_btCoex"]);
  v287 = (void *)objc_claimAutoreleasedReturnValue([v286 subMessageValue]);
  v288 = (void *)objc_claimAutoreleasedReturnValue([v287 fieldForKey:@"NWABC_ucodehighlatency"]);
  uint64_t v299 = [v288 uint32Value];

  id v289 = WALogCategoryDefaultHandle();
  v290 = (os_log_s *)objc_claimAutoreleasedReturnValue(v289);
  if (os_log_type_enabled(v290, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 517;
    id v410 = 1024;
    *(_DWORD *)v411 = v368;
    _os_log_impl((void *)&_mh_execute_header, v290, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:bt_abort: %u", buf, 0x18u);
  }

  v291 = WALogCategoryDefaultHandle();
  uint64_t v292 = (os_log_s *)objc_claimAutoreleasedReturnValue(v291);
  if (os_log_type_enabled(v292, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 518;
    id v410 = 1024;
    *(_DWORD *)v411 = v359 - v350;
    _os_log_impl((void *)&_mh_execute_header, v292, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:bt_grant: %u", buf, 0x18u);
  }

  id v293 = WALogCategoryDefaultHandle();
  v294 = (os_log_s *)objc_claimAutoreleasedReturnValue(v293);
  if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 519;
    id v410 = 1024;
    *(_DWORD *)v411 = v345 - v304;
    _os_log_impl((void *)&_mh_execute_header, v294, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:bt_request: %u", buf, 0x18u);
  }

  v295 = WALogCategoryDefaultHandle();
  v296 = (os_log_s *)objc_claimAutoreleasedReturnValue(v295);
  if (os_log_type_enabled(v296, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    id v407 = "-[DPSQuickRecoveryRecommendationEngine computeFeatures:currentSample:acList:]";
    id v408 = 1024;
    v409 = 520;
    id v410 = 1024;
    *(_DWORD *)v411 = v301 - v299;
    _os_log_impl( (void *)&_mh_execute_header,  v296,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:bt_uch_latency: %u",  buf,  0x18u);
  }

  char v297 =  -[WiFiStallDetectInput initWithAC_problem_bitfield:TxBE_expiredCompletions:TxBE_failedCompletions:TxBE_noAckCompletions:TxBE_otherErrCompletions:TxBK_expiredCompletions:TxBK_failedCompletions:TxBK_noAckCompletions:TxBK_otherErrCompletions:TxVI_expiredCompletions:TxVI_failedCompletions:TxVI_noAckCompletions:TxVI_otherErrCompletions:TxVO_expiredCompletions:TxVO_failedCompletions:TxVO_noAckCompletions:TxVO_otherErrCompletions:bt_abort:bt_grant:bt_request:bt_uch_latency:cca_bin:completions_chipmodeerror:completions_expired:completions_internalerror:completions_ioerror:completions_noack:completions_nobuf:completions_noremotepeer:completions_noresources:completions_txfailure:roam_count:roam_duration:rssi_bin:snr_bin:]( objc_alloc(&OBJC_CLASS___WiFiStallDetectInput),  "initWithAC_problem_bitfield:TxBE_expiredCompletions:TxBE_failedCompletions:TxBE_noAckCompletions:TxBE_other ErrCompletions:TxBK_expiredCompletions:TxBK_failedCompletions:TxBK_noAckCompletions:TxBK_otherErrCompletion s:TxVI_expiredCompletions:TxVI_failedCompletions:TxVI_noAckCompletions:TxVI_otherErrCompletions:TxVO_expire dCompletions:TxVO_failedCompletions:TxVO_noAckCompletions:TxVO_otherErrCompletions:bt_abort:bt_grant:bt_req uest:bt_uch_latency:cca_bin:completions_chipmodeerror:completions_expired:completions_internalerror:complet ions_ioerror:completions_noack:completions_nobuf:completions_noremotepeer:completions_noresources:completio ns_txfailure:roam_count:roam_duration:rssi_bin:snr_bin:",  (double)v326,  (double)v391,  (double)obja,  (double)v338,  (double)v340,  (double)v329,  (double)v330,  (double)HIDWORD(v331),  (double)v333,  (double)HIDWORD(v329),  (double)v331,  (double)HIDWORD(v332),  (double)v334,  (double)HIDWORD(v330),  (double)v332,  (double)HIDWORD(v333),  (double)HIDWORD(v334),  (double)v368,  (double)(v359 - v350),  (double)(v345 - v304),  (double)(v301 - v299),  *(void *)&v29,  (double)v386,  (double)v325,  (double)v322,  (double)v320,  (double)v317,  (double)v315,  (double)v312,  (double)v381,  (double)v310,  (double)v307,  (double)v374,  *(void *)&v49,  *(void *)&v68);
  return v297;
}

LABEL_15:
  if (v37)
  {
  }

  if (v38)
  {
    uint64_t v39 = WALogCategoryDefaultHandle();
    __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      id v41 = -[RecommendationPreferences reset_rssi_bin_threshold](v121->_preferences, "reset_rssi_bin_threshold");
      *(_DWORD *)buf = 136446722;
      id v126 = "-[DPSQuickRecoveryRecommendationEngine isTriggerDisconnect:currentSample:]";
      v127 = 1024;
      v128 = 662;
      id v129 = 2048;
      *(void *)id v130 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:rssi-bin threshold: %ld",  buf,  0x1Cu);
    }

    uint64_t v42 = WALogCategoryDefaultHandle();
    id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v126 = "-[DPSQuickRecoveryRecommendationEngine isTriggerDisconnect:currentSample:]";
      v127 = 1024;
      v128 = 663;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Trigger Disconnect suspected!",  buf,  0x12u);
    }
  }

  return v38;
}

  id v8 = 0LL;
LABEL_16:
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"NWACS_channel"]);
  [v14 setUint32Value:HIDWORD(v19)];

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"NWACS_channelBandwidth"]);
  [v15 setUint32Value:v8];

  id v16 = WALogCategoryDefaultHandle();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    id v22 = "-[WAEngine populateChannelInfo:]";
    id v23 = 1024;
    id v24 = 3790;
    int v25 = 1024;
    id v26 = HIDWORD(v19);
    id v27 = 1024;
    __int16 v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:channel: %u channelBandwidth: %u",  buf,  0x1Eu);
  }
}

void sub_10003B6D0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v18 = objc_begin_catch(a1);
      id v19 = WALogCategoryDefaultHandle();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136446466;
        *(void *)((char *)&buf + 4) = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDpsS"
                                        "tat:chipNumber:dpsSnapshot:originalCCA:]";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 747;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:ML modelc files not found in frameworks.. checking executable path",  (uint8_t *)&buf,  0x12u);
      }

      id v21 = objc_alloc_init(&OBJC_CLASS___WiFiStallDetect);
      id v22 = *(void **)(v17 + 16);
      *(void *)(v17 + 16) = v21;

      if (!*(void *)(v17 + 16))
      {
        id v23 = WALogCategoryDefaultHandle();
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136446466;
          *(void *)((char *)&buf + 4) = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDp"
                                          "sStat:chipNumber:dpsSnapshot:originalCCA:]";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 749;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Error WiFiStallDetect init",  (uint8_t *)&buf,  0x12u);
        }
      }

      objc_end_catch();
      JUMPOUT(0x10003B0ECLL);
    }

    objc_begin_catch(a1);
    if (*(void *)(v17 + 16))
    {
      objc_exception_rethrow();
      __break(1u);
    }

    JUMPOUT(0x10003B610LL);
  }

  _Unwind_Resume(a1);
}

LABEL_71:
    id v47 = 0LL;
    id v49 = "NoBudget";
    __int16 v48 = 1;
LABEL_51:

    goto LABEL_52;
  }

  id v21 = WALogCategoryDefaultHandle();
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  id v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446722;
      __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSympto"
            "msCondition:isLANPingSuccessful:appUsage:averageCCA:]";
      id v80 = 1024;
      id v81 = 968;
      id v82 = 2112;
      uint64_t v83 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: all:%@",  buf,  0x1Cu);
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([v15 firstObject]);
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 info]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"PeerDiagnosticsResults"]);

    __int16 v75 = 0u;
    v76 = 0u;
    __int16 v73 = 0u;
    id v74 = 0u;
    id v22 = v26;
    id v27 = -[os_log_s countByEnumeratingWithState:objects:count:]( v22,  "countByEnumeratingWithState:objects:count:",  &v73,  v77,  16LL);
    __int16 v28 = v15;
    if (v27)
    {
      int v29 = v27;
      id v69 = v12;
      id v70 = v10;
      __int16 v71 = v28;
      __int16 v30 = *(void *)v74;
      int v72 = 1LL;
      while (2)
      {
        for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v74 != v30) {
            objc_enumerationMutation(v22);
          }
          id v32 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)i);
          id v33 = WALogCategoryDefaultHandle();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:current"
                  "SymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:]";
            id v80 = 1024;
            id v81 = 971;
            id v82 = 2112;
            uint64_t v83 = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: parsing results...peer:%@",  buf,  0x1Cu);
          }

          if (v32)
          {
            BOOL v35 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:@"LQMSummary"]);
            id v36 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:@"LocalDevice"]);
            uint64_t v37 = [v36 isEqualToString:@"YES"];

            id v38 = WALogCategoryDefaultHandle();
            uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
            __int16 v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
            if (v37)
            {
              if (v40)
              {
                *(_DWORD *)buf = 136446466;
                __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:cur"
                      "rentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:]";
                id v80 = 1024;
                id v81 = 976;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: self...",  buf,  0x12u);
              }

              -[DPSQuickRecoveryRecommendationEngine isScoreBelowThreshold:](self, "isScoreBelowThreshold:", v35);
            }

            else
            {
              if (v40)
              {
                *(_DWORD *)buf = 136446466;
                __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:cur"
                      "rentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:]";
                id v80 = 1024;
                id v81 = 982;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: peer...",  buf,  0x12u);
              }

              if (-[DPSQuickRecoveryRecommendationEngine isGoodWiFiCondition:](self, "isGoodWiFiCondition:", v35)
                && -[DPSQuickRecoveryRecommendationEngine isScoreBelowThreshold:](self, "isScoreBelowThreshold:", v35))
              {

                id v43 = (void *)objc_claimAutoreleasedReturnValue([v16 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
                [v43 setInt32Value:3];

                __int16 v44 = WALogCategoryDefaultHandle();
                id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136446466;
                  __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:c"
                        "urrentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:]";
                  id v80 = 1024;
                  id v81 = 994;
                  _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: Peer Devices are also experiencing issues",  buf,  0x12u);
                }

                int v72 = 0LL;
                id v15 = v71;
                goto LABEL_33;
              }
            }
          }

          else
          {
            BOOL v35 = 0LL;
          }
        }

        int v29 = -[os_log_s countByEnumeratingWithState:objects:count:]( v22,  "countByEnumeratingWithState:objects:count:",  &v73,  v77,  16LL);
        if (v29) {
          continue;
        }
        break;
      }

      id v41 = v22;
      id v15 = v71;
LABEL_33:
      id v20 = &off_100092000;
      int v12 = v69;
      __int16 v10 = v70;
    }

    else
    {
      int v72 = 1LL;
      id v41 = v22;
    }

    uint64_t v42 = v72;
  }

  else
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSympto"
            "msCondition:isLANPingSuccessful:appUsage:averageCCA:]";
      id v80 = 1024;
      id v81 = 966;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: Data not received from peerDiagnostics",  buf,  0x12u);
    }

    uint64_t v42 = 1LL;
  }

  if (v42 && !v12 && -[DPSQuickRecoveryRecommendationEngine checkForPriorityNetwork](self, "checkForPriorityNetwork"))
  {
    if (-[DPSQuickRecoveryRecommendationEngine isResetAllowedForSymptomsDPS](self, "isResetAllowedForSymptomsDPS"))
    {
      id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue([v16 fieldForKey:@"WFAAWDWASDS_symptomsDnsRecommendation"]);
      __int16 v46 = v45;
      if (v10)
      {
        id v47 = 2LL;
        -[os_log_s setInt32Value:](v45, "setInt32Value:", 2LL);
        __int16 v48 = 0;
        id v49 = "Reassoc";
      }

      else
      {
        id v47 = 1LL;
        -[os_log_s setInt32Value:](v45, "setInt32Value:", 1LL);
        __int16 v48 = 0;
        id v49 = "Reset";
      }
    }

    else
    {
      id v51 = (void *)objc_claimAutoreleasedReturnValue([v16 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
      [v51 setInt32Value:1];

      __int16 v52 = WALogCategoryDefaultHandle();
      __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymp"
              "tomsCondition:isLANPingSuccessful:appUsage:averageCCA:]";
        id v80 = 1024;
        id v81 = 1012;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: No budget",  buf,  0x12u);
      }

      __int16 v48 = 0;
      id v49 = "NoBudget";
      id v47 = 3LL;
    }

    goto LABEL_51;
  }

  id v47 = 0LL;
  id v49 = "NoBudget";
  __int16 v48 = 1;
  if (v42 && v12)
  {
    __int16 v50 = WALogCategoryDefaultHandle();
    __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v79 = "-[DPSQuickRecoveryRecommendationEngine recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSympto"
            "msCondition:isLANPingSuccessful:appUsage:averageCCA:]";
      id v80 = 1024;
      id v81 = 1016;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: DNS symptoms recovery suppressed due to AWDL activity",  buf,  0x12u);
    }

    id v47 = 0LL;
    goto LABEL_51;
  }

uint64_t sub_10003CC78()
{
  id v3 = 0LL;
  if (!qword_1000ECFA0)
  {
    __int128 v4 = off_1000CCFF0;
    uint64_t v5 = 0LL;
    qword_1000ECFA0 = _sl_dlopen(&v4, &v3);
    id v1 = v3;
    uint64_t v0 = qword_1000ECFA0;
    if (qword_1000ECFA0)
    {
      if (!v3) {
        return v0;
      }
    }

    else
    {
      id v1 = (char *)abort_report_np("%s", v3);
    }

    free(v1);
    return v0;
  }

  return qword_1000ECFA0;
}

uint64_t CCSubmitLogToCrashTracer(const char *a1, int a2)
{
  if (!a1 || !sub_10003D054()) {
    return 0LL;
  }
  __int128 v4 = CFUUIDCreate(kCFAllocatorDefault);
  CFStringRef v5 = CFUUIDCreateString(kCFAllocatorDefault, v4);
  CFTypeRef v6 = (id)CFMakeCollectable(v5);
  CFRelease(v4);
  uint64_t v7 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s", a1);
  id v8 = (uint64_t (*)(const __CFString *, void))off_1000ECFE0;
  int v29 = v7;
  CFTypeRef v30 = v6;
  if (off_1000ECFE0
    || (id v8 = (uint64_t (*)(const __CFString *, void))sub_10003D054(), (off_1000ECFE0 = v8) != 0LL))
  {
    uint64_t v9 = (const void *)v8(@"InverseDeviceID", 0LL);
    __int16 v10 = (uint64_t (*)(const __CFString *, void))off_1000ECFE0;
    if (off_1000ECFE0) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  int v12 = sub_10003D054();
  off_1000ECFE0 = v12;
  if (v12)
  {
    __int16 v10 = (uint64_t (*)(const __CFString *, void))v12;
LABEL_11:
    uint64_t v13 = (const void *)v10(@"ProductType", 0LL);
    id v14 = (uint64_t (*)(const __CFString *, void))off_1000ECFE0;
    if (off_1000ECFE0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }

  uint64_t v13 = 0LL;
LABEL_14:
  id v15 = sub_10003D054();
  off_1000ECFE0 = v15;
  if (!v15)
  {
    id v16 = 0LL;
    goto LABEL_17;
  }

  id v14 = (uint64_t (*)(const __CFString *, void))v15;
LABEL_16:
  id v16 = (const void *)v14(@"UniqueDeviceID", 0LL);
LABEL_17:
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v17, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss.SSS Z");
  id v18 = -[NSDateFormatter stringFromDate:](v17, "stringFromDate:", +[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v19 = (const void *)_CFCopySystemVersionDictionary();
  id v20 = (id)CFMakeCollectable(v19);
  id v21 = (const __CFString *)[v20 objectForKeyedSubscript:_kCFSystemVersionProductVersionKey];
  id v22 = (const __CFString *)[v20 objectForKeyedSubscript:_kCFSystemVersionProductNameKey];
  id v23 = (const __CFString *)[v20 objectForKeyedSubscript:_kCFSystemVersionBuildVersionKey];
  id v24 = @"???";
  if (v22) {
    int v25 = v22;
  }
  else {
    int v25 = @"???";
  }
  if (v21) {
    id v26 = v21;
  }
  else {
    id v26 = @"???";
  }
  if (v23) {
    id v24 = v23;
  }
  id v27 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"\nIncident Identifier:     %@\nCrashReporter Key:       %@\nHardware Model:          %@\nProcess:                 WiFi Firmware\nPath:                    NA\nIdentifier:              WiFi Firmware Trap\nVersion:                 NA\nCode Type:               ARM-32\nRole                     NA\nParent Process:          NA\nCoalition:               NA\n\n\nDate/Time:               %@\nLauch Time:              NA\nOS Version:              %@\nBaseband Version:        NA\nUDID:                    %@\nReport Version:          NA\n",  v30,  v9,  v13,  v18,  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ %@ (%@)", v25, v26, v24),  v16);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_10003D134;
  v31[3] = &unk_1000CD0C0;
  v31[4] = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@\n%@\n", v27, v29);
  v31[5] = v27;
  int v32 = a2;
  uint64_t v11 = OSAWriteLogForSubmission(@"209", @"WiFiFWTrap", 0LL, 0LL, v31);
  if (v9) {
    CFRelease(v9);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v11;
}

void *sub_10003D054()
{
  id result = (void *)qword_1000ECFD8;
  if (!qword_1000ECFD8)
  {
    id v1 = getenv("DYLD_IMAGE_SUFFIX");
    if (!v1)
    {
      id v2 = "/usr/lib/libMobileGestalt.dylib";
      goto LABEL_8;
    }

    strcpy(v3, "/usr/lib/libMobileGestalt.dylib");
    if (strlcat(v3, v1, 0x400uLL) >= 0x400) {
      return 0LL;
    }
    if ((stat(v3, &v4) & 0x80000000) == 0)
    {
      id v2 = v3;
LABEL_8:
      id result = dlopen(v2, 6);
      qword_1000ECFD8 = (uint64_t)result;
      if (!result) {
        return result;
      }
      return dlsym(result, "MGCopyAnswer");
    }

    id result = (void *)qword_1000ECFD8;
    if (!qword_1000ECFD8) {
      return result;
    }
  }

  return dlsym(result, "MGCopyAnswer");
}

id sub_10003D134(uint64_t a1, void *a2)
{
  return objc_msgSend( a2,  "writeData:",  +[NSData dataWithBytes:length:]( NSData,  "dataWithBytes:length:",  objc_msgSend(*(id *)(a1 + 32), "UTF8String"),  (char *)objc_msgSend(*(id *)(a1 + 40), "length") + *(int *)(a1 + 48)));
}

uint64_t CCSubmitBinaryToCrashTracer(uint64_t result, int a2)
{
  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_10003D230;
    v2[3] = &unk_1000CD0E0;
    v2[4] = result;
    int v3 = a2;
    return OSAWriteLogForSubmission(@"221", @"WiFiFWTrapBinary", 0LL, 0LL, v2);
  }

  return result;
}

id sub_10003D230(uint64_t a1, void *a2)
{
  return objc_msgSend( a2,  "writeData:",  +[NSData dataWithBytes:length:]( NSData,  "dataWithBytes:length:",  *(void *)(a1 + 32),  *(int *)(a1 + 40)));
}

uint64_t CCSubmitLqmMetricsTLVBlockToCrashTracer(uint64_t result, int a2)
{
  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_10003D308;
    v2[3] = &unk_1000CD0E0;
    v2[4] = result;
    int v3 = a2;
    return OSAWriteLogForSubmission(@"221", @"WiFiLQMMetrics", 0LL, 0LL, v2);
  }

  return result;
}

id sub_10003D308(uint64_t a1, void *a2)
{
  return objc_msgSend( a2,  "writeData:",  +[NSData dataWithBytes:length:]( NSData,  "dataWithBytes:length:",  *(void *)(a1 + 32),  *(int *)(a1 + 40)));
}

void sub_10003D3B8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1000ECFE8;
  qword_1000ECFE8 = (uint64_t)v1;
}

LABEL_200:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v21, buf, 0x1Cu);
      goto LABEL_201;
    }

    if (v16)
    {
      -[RecommendationPreferences setDisable_dps_wd:](self, "setDisable_dps_wd:", [v16 BOOLValue]);
      id v22 = WALogCategoryDefaultHandle();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = -[RecommendationPreferences disable_dps_wd](self, "disable_dps_wd");
        id v24 = "NO";
        id v84 = "-[RecommendationPreferences observeValueForKeyPath:ofObject:change:context:]";
        *(_DWORD *)buf = 136446722;
        if (v23) {
          id v24 = "YES";
        }
        __int16 v85 = 1024;
        id v86 = 489;
        id v87 = 2080;
        id v88 = (int64_t)v24;
        id v21 = "%{public}s::%d:disable_dps_wd Preference is %s";
        goto LABEL_200;
      }

      goto LABEL_201;
    }
  }

LABEL_202:
}

void sub_100040408(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  *(void *)buf = 0LL;
  id v16 = buf;
  uint64_t v17 = 0x2020000000LL;
  int v3 = off_1000ED000;
  id v18 = off_1000ED000;
  if (!off_1000ED000)
  {
    stat v4 = (void *)sub_1000405E0();
    int v3 = dlsym(v4, "CoreCaptureControlCreate");
    *((void *)v16 + 3) = v3;
    off_1000ED000 = v3;
  }

  _Block_object_dispose(buf, 8);
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v5 = ((uint64_t (*)(const CFAllocatorRef))v3)(kCFAllocatorDefault);
  if (v5)
  {
    CFTypeRef v6 = (const void *)v5;
    id v7 = [@"WiFi" UTF8String];
    id v8 = [*(id *)(a1 + 32) UTF8String];
    *(void *)buf = 0LL;
    id v16 = buf;
    uint64_t v17 = 0x2020000000LL;
    uint64_t v9 = off_1000ED008;
    id v18 = off_1000ED008;
    if (!off_1000ED008)
    {
      __int16 v10 = (void *)sub_1000405E0();
      uint64_t v9 = dlsym(v10, "CoreCaptureControlCaptureWithComponentDirectory");
      *((void *)v16 + 3) = v9;
      off_1000ED008 = v9;
    }

    _Block_object_dispose(buf, 8);
    if (v9)
    {
      ((void (*)(const void *, id, id))v9)(v6, v7, v8);
      CFRelease(v6);
      goto LABEL_12;
    }

uint64_t sub_1000405E0()
{
  int v3 = 0LL;
  if (!qword_1000ECFF8)
  {
    __int128 v4 = off_1000CD100;
    uint64_t v5 = 0LL;
    qword_1000ECFF8 = _sl_dlopen(&v4, &v3);
    id v1 = v3;
    uint64_t v0 = qword_1000ECFF8;
    if (qword_1000ECFF8)
    {
      if (!v3) {
        return v0;
      }
    }

    else
    {
      id v1 = (char *)abort_report_np("%s", v3);
    }

    free(v1);
    return v0;
  }

  return qword_1000ECFF8;
}

LABEL_10:
    uint64_t v5 = 0LL;
    goto LABEL_4;
  }

  int v3 = objc_claimAutoreleasedReturnValue(+[RecommendationPreferences sharedObject](&OBJC_CLASS___RecommendationPreferences, "sharedObject"));
  preferences = v2->_preferences;
  v2->_preferences = (RecommendationPreferences *)v3;

  if (!v2->_preferences)
  {
    __int16 v10 = WALogCategoryDefaultHandle();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v13 = "-[RecommendationEngine init]";
      id v14 = 1024;
      id v15 = 38;
      uint64_t v9 = "%{public}s::%d:Error RecommendationPreferences init";
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  uint64_t v5 = v2;
LABEL_4:

  return v5;
}

LABEL_11:
    __int16 v10 = v9;
  }

  id v11 = WALogCategoryDefaultHandle();
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "WAEngine RemovePersistenceFile",  (const char *)&unk_1000B76E7,  buf,  2u);
  }
}
  }

  id v22 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_signpost_enabled(v23))
  {
    LOWORD(v24) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine DPSCS MissingChannelsRepopulate",  (const char *)&unk_1000B76E7,  (uint8_t *)&v24,  2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

    goto LABEL_11;
  }

  if (*(_DWORD *)(a1 + 56) == 1)
  {
    id v15 = WALogCategoryDefaultHandle();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = 136446466;
      id v19 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      id v20 = 1024;
      id v21 = 4075;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding DPSR_snapshot",  (uint8_t *)&v18,  0x12u);
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(*(void *)(a1 + 40) + 168) setObject:v17 forKeyedSubscript:@"snapshotInstance"];

    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) fieldForKey:@"DPSR_snapshot"]);
    -[os_log_s setSubMessageValue:](v14, "setSubMessageValue:", v5);
    goto LABEL_10;
  }

void sub_1000424F8(uint64_t a1, uint64_t a2, void *a3)
{
  double v5 = COERCE_DOUBLE(a3);
  switch(a2)
  {
    case 0LL:
      id v6 = WALogCategoryDefaultHandle();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 136446466;
        uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        __int16 v43 = 1024;
        int v44 = 366;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendNull",  (uint8_t *)&v41,  0x12u);
      }

      goto LABEL_42;
    case 1LL:
      [*(id *)(a1 + 32) addNumRecommendedCapture];
      [*(id *)(a1 + 32) medianCCA:*(void *)(a1 + 40)];
      float v9 = v8;
      id v10 = WALogCategoryDefaultHandle();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 136446722;
        uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        __int16 v43 = 1024;
        int v44 = 340;
        __int16 v45 = 2048;
        double v46 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:floatCCA %f",  (uint8_t *)&v41,  0x1Cu);
      }

      float v12 = (float)(unint64_t)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "dps_wd_cca");
      uint64_t v13 = *(void **)(a1 + 32);
      if (v9 >= v12)
      {
        [v13 addNumSuppressedCapture];
        id v22 = WALogCategoryDefaultHandle();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446722;
          uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          __int16 v43 = 1024;
          int v44 = 344;
          __int16 v45 = 2048;
          double v46 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:sDPS: aborting FullCapture since cca > limit (%f)",  (uint8_t *)&v41,  0x1Cu);
        }

        id v24 = WALogCategoryDefaultHandle();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446466;
          uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          __int16 v43 = 1024;
          int v44 = 345;
          int v25 = "%{public}s::%d:WARecommendFullCapture WARecommendNull dps_wd_cca";
          goto LABEL_41;
        }
      }

      else
      {
        if ([v13 canCaptureforDPS])
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [*(id *)(*(void *)(a1 + 32) + 8) setObject:v14 forKey:@"dps_lastCapture"];
          id v15 = WALogCategoryDefaultHandle();
          id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            double v17 = *(double *)(*(void *)(a1 + 32) + 8LL);
            int v41 = 136446722;
            uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
            __int16 v43 = 1024;
            int v44 = 358;
            __int16 v45 = 2112;
            double v46 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:dpsWDBudgetDict %@",  (uint8_t *)&v41,  0x1Cu);
          }

          id v18 = WALogCategoryDefaultHandle();
          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int v41 = 136446722;
            uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
            __int16 v43 = 1024;
            int v44 = 359;
            __int16 v45 = 2112;
            double v46 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendFullCapture classification %@",  (uint8_t *)&v41,  0x1Cu);
          }

          goto LABEL_33;
        }

        [*(id *)(a1 + 32) addNumSuppressedCapture];
        id v36 = WALogCategoryDefaultHandle();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446466;
          uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          __int16 v43 = 1024;
          int v44 = 352;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendFullCapture WARecommendNull canWDforDPS",  (uint8_t *)&v41,  0x12u);
        }
      }

      goto LABEL_42;
    case 2LL:
      [*(id *)(a1 + 32) addNumRecommendedWD];
      if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "disable_dps_wd"))
      {
        id v20 = WALogCategoryDefaultHandle();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = 136446466;
          uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          __int16 v43 = 1024;
          int v44 = 304;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendTrapWatchdog WARecommendNull disable_dps_wd",  (uint8_t *)&v41,  0x12u);
        }

LABEL_33:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_43:

      return;
    case 3LL:
      id v21 = WALogCategoryDefaultHandle();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 136446466;
        uint64_t v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        __int16 v43 = 1024;
        int v44 = 372;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendNoneNoWatchdogBudget",  (uint8_t *)&v41,  0x12u);
      }

      goto LABEL_42;
    default:
      goto LABEL_43;
  }

  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v83, 8);
}

id sub_100043924(uint64_t a1)
{
  return [*(id *)(a1 + 32) keyBagLockStateChangeNotification];
}

id sub_10004392C(uint64_t a1)
{
  return [*(id *)(a1 + 32) prepareToTerminateViaEagerExit];
}

id sub_100043B3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "_updateProfileStateDate:", objc_msgSend(*(id *)(a1 + 32), "BOOLValue"));
}

id sub_100043C9C()
{
  uint64_t v4 = 0LL;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1000ED028;
  uint64_t v7 = qword_1000ED028;
  if (!qword_1000ED028)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100071BF4;
    v3[3] = &unk_1000CD9A0;
    v3[4] = &v4;
    sub_100071BF4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100043D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000442D4(_Unwind_Exception *a1)
{
}

void sub_1000442F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained engineQ]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000443D0;
  v9[3] = &unk_1000CD170;
  objc_copyWeak(v11, (id *)(a1 + 40));
  v11[1] = a2;
  v9[4] = *(void *)(a1 + 32);
  id v10 = v5;
  id v8 = v5;
  dispatch_async(v7, v9);

  objc_destroyWeak(v11);
}

void sub_1000443D0(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = WeakRetained;
  if (*(void *)(a1 + 56) == 1LL)
  {
    objc_msgSend(WeakRetained, "setIsAssociated:", objc_msgSend(WeakRetained, "isAssociated"));
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v5 + 50)
      || (objc_msgSend(*(id *)(v5 + 640), "megawifiprofile_diagnostic_metrics_while_unassoc") & 1) != 0
      || (unsigned __int8 v6 = objc_msgSend( *(id *)(*(void *)(a1 + 32) + 640),  "megawifiprofile_diagnostic_metrics_before_first_assoc"),  !*(_BYTE *)(*(void *)(a1 + 32) + 49))
      || (v6 & 1) != 0)
    {
      float v9 = (void *)os_transaction_create("com.apple.wifianalytics.DatapathMetricStream");
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[WAActivityManager sharedActivityManager]( &OBJC_CLASS___WAActivityManager,  "sharedActivityManager"));
      [v10 osTransactionCreate:"com.apple.wifianalytics.DatapathMetricStream" transaction:v9];

      id v11 = WALogCategoryDefaultHandle();
      float v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_signpost_enabled(v12))
      {
        LOWORD(v21) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "DatapathMetricGetter",  (const char *)&unk_1000B76E7,  (uint8_t *)&v21,  2u);
      }

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Log: DatapathMetricStream Trigger",  v4[86],  v4[11]);
      [v4 _triggerQueryForNWActivity:*(void *)(a1 + 56) forProcessToken:@"DatapathMetricStream" andReply:*(void *)(a1 + 40)];
      id v13 = WALogCategoryDefaultHandle();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_signpost_enabled(v14))
      {
        LOWORD(v21) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "DatapathMetricGetter",  (const char *)&unk_1000B76E7,  (uint8_t *)&v21,  2u);
      }

      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[WAActivityManager sharedActivityManager]( &OBJC_CLASS___WAActivityManager,  "sharedActivityManager"));
      [v15 osTransactionComplete:v9];
    }

    else
    {
      id v7 = WALogCategoryDefaultHandle();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136446978;
        id v22 = "-[WAEngine initDatapathMetricGetterAndFetcher]_block_invoke";
        __int16 v23 = 1024;
        int v24 = 734;
        __int16 v25 = 1024;
        unsigned int v26 = [v4 isAssociated];
        __int16 v27 = 1024;
        unsigned int v28 = [v4 isAssociatedStateKnown];
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:initDatapathMetricGetterAndFetcher _isAssociated %d _isAssociatedStateKnown %d",  (uint8_t *)&v21,  0x1Eu);
      }
    }

    id v16 = 0LL;
  }

  else
  {
    id v17 = WALogCategoryDefaultHandle();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136446466;
      id v22 = "-[WAEngine initDatapathMetricGetterAndFetcher]_block_invoke_2";
      __int16 v23 = 1024;
      int v24 = 727;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Only replyStyle = 1 supported",  (uint8_t *)&v21,  0x12u);
    }

    NSErrorUserInfoKey v29 = NSLocalizedFailureReasonErrorKey;
    float v30 = @"WAErrorCodeNotRegistered";
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v19));

    uint64_t v20 = *(void *)(a1 + 40);
    if (v20) {
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0LL, v16);
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100044804(uint64_t a1)
{
  uint64_t v2 = (void *)os_transaction_create("com.apple.wifianalytics.migratestore");
  int v3 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v3 osTransactionCreate:"com.apple.wifianalytics.migratestore" transaction:v2];

  id v4 = WALogCategoryDeviceStoreHandle();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136446466;
    id v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
    __int16 v18 = 1024;
    int v19 = 767;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Alloc AnalyticsProcessor with AnalyticsProcessorMigrationCapable",  (uint8_t *)&v16,  0x12u);
  }

  if (+[WAUtil shouldEnableXPCStore](&OBJC_CLASS___WAUtil, "shouldEnableXPCStore"))
  {
    id v6 = WALogCategoryDeviceStoreHandle();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136446466;
      id v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 771;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:[WAUtil shouldEnableXPCStore] true, also setting AnalyticsProcessorEnableXPCStore",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v8 = 3LL;
  }

  else
  {
    uint64_t v8 = 2LL;
  }

  float v9 = -[AnalyticsProcessor initWithOptions:](objc_alloc(&OBJC_CLASS___AnalyticsProcessor), "initWithOptions:", v8);
  [*(id *)(a1 + 32) setAnalyticsProcessor:v9];

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) analyticsProcessor]);
  if (v10)
  {
    [*(id *)(a1 + 32) setAnalyticsProcessorIsReady:1];
    id v11 = WALogCategoryDeviceStoreHandle();
    float v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136446466;
      id v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 780;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AnalyticsProcessor ready after first unlock",  (uint8_t *)&v16,  0x12u);
    }

    notify_cancel((int)[*(id *)(a1 + 32) keybagToken]);
  }

  else
  {
    id v13 = WALogCategoryDeviceStoreHandle();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136446466;
      id v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 777;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Unable to alloc analyticsProcessor. Will not be processing any metrics for AnalyticsStore!",  (uint8_t *)&v16,  0x12u);
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v15 osTransactionComplete:v2];
}

void sub_100044D84(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  id v4 = -[NSNumber initWithBool:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithBool:", a2);
  id v5 = WALogCategoryDeviceStoreHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136446722;
    float v9 = "-[WAEngine _triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 808;
    __int16 v12 = 1024;
    int v13 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Result for triggerDeviceAnalyticsStoreMigrationAndReply via XPC - Status: %d",  (uint8_t *)&v8,  0x18u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, NSNumber *, void))(v7 + 16))(v7, v4, 0LL);
  }
}

id sub_1000451C0(uint64_t a1)
{
  id v2 = WALogCategoryDeviceStoreHandle();
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446466;
    id v6 = "-[WAEngine createAndStartJsonReaderTimer]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 840;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Calling processWiFiAnalyticsMessageJSONFilesInTmpDir from _jsonFilerReaderTimer",  (uint8_t *)&v5,  0x12u);
  }

  return [*(id *)(a1 + 32) processWiFiAnalyticsMessageJSONFilesInTmpDir:1];
}

id sub_100045390(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unpersist];
}

void sub_100045D84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13, id *a14, id *a15, id *location)
{
}

void sub_100045E14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WALogCategoryDefaultHandle();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained token]);
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v6));
    int v8 = 136447490;
    float v9 = "-[WAEngine xpcConnection:establishConnectionWithToken:andReply:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 944;
    __int16 v12 = 2112;
    int v13 = v7;
    __int16 v14 = 1024;
    unsigned int v15 = [v3 processIdentifier];
    __int16 v16 = 1024;
    unsigned int v17 = [v3 effectiveUserIdentifier];
    __int16 v18 = 1024;
    unsigned int v19 = [v3 effectiveGroupIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:XPC: INTERRUPTED XPC CONNECTION with token=%@ [pid=%d, euid=%d, egid=%d]",  (uint8_t *)&v8,  0x2Eu);
  }
}

void sub_100045F7C(id *a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] engineQ]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100046048;
  block[3] = &unk_1000CD210;
  objc_copyWeak(&v4, a1 + 5);
  objc_copyWeak(&v5, a1 + 6);
  objc_copyWeak(&v6, a1 + 7);
  dispatch_async(v2, block);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&v4);
}

void sub_100046048(id *a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = objc_loadWeakRetained(a1 + 5);
  id v5 = WALogCategoryDefaultHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained token]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v7));
    int v13 = 136447490;
    __int16 v14 = "-[WAEngine xpcConnection:establishConnectionWithToken:andReply:]_block_invoke_2";
    __int16 v15 = 1024;
    int v16 = 952;
    __int16 v17 = 2112;
    __int16 v18 = v8;
    __int16 v19 = 1024;
    unsigned int v20 = [v4 processIdentifier];
    __int16 v21 = 1024;
    unsigned int v22 = [v4 effectiveUserIdentifier];
    __int16 v23 = 1024;
    unsigned int v24 = [v4 effectiveGroupIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:XPC: INVALIDATED XPC CONNECTION with token=%@ [pid=%d, euid=%d, egid=%d]",  (uint8_t *)&v13,  0x2Eu);
  }

  [v4 setExportedObject:0];
  [v4 setInterruptionHandler:0];
  [v4 setInvalidationHandler:0];
  float v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained token]);

  if (v9)
  {
    id v10 = objc_loadWeakRetained(a1 + 6);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 processTokenToXPCConnectionMap]);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained token]);
    [v11 removeObjectForKey:v12];
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100046244(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Establish Connection",  WeakRetained[86],  WeakRetained[11]);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processTokenToXPCConnectionMap]);
  [v5 setObject:v4 forKeyedSubscript:*(void *)(a1 + 32)];

  objc_autoreleasePoolPop(v2);
}

void sub_1000463E8(_Unwind_Exception *a1)
{
}

void sub_1000463FC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:submitMessage:groupType:andReply:]_block_invoke"));

  id v6 = v5;
  __int16 v7 = (void *)os_transaction_create([v6 UTF8String]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:*(void *)(a1 + 64)])
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Submit Message",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 40);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _submitMessage:v11 groupType:v10 forProcessToken:v12]);
  }

  else
  {
    id v16 = WALogCategoryDefaultHandle();
    __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v22 = "-[WAEngine xpcConnection:submitMessage:groupType:andReply:]_block_invoke";
      __int16 v23 = 1024;
      int v24 = 983;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v19 = NSLocalizedFailureReasonErrorKey;
    unsigned int v20 = @"WAErrorCodeNotRegistered";
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v18));
  }

  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v13);
  }
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v15 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_1000467A0(_Unwind_Exception *a1)
{
}

void sub_1000467B4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:submitWiFiAnalyticsMessageAdvanced:andReply:]_block_invoke"));

  id v6 = v5;
  __int16 v7 = (void *)os_transaction_create([v6 UTF8String]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:5])
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Submit WiFi Analytics Message Advanced",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _submitWiFiAnalyticsMessageAdvanced:*(void *)(a1 + 40)]);
  }

  else
  {
    id v13 = WALogCategoryDefaultHandle();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      NSErrorUserInfoKey v19 = "-[WAEngine xpcConnection:submitWiFiAnalyticsMessageAdvanced:andReply:]_block_invoke";
      __int16 v20 = 1024;
      int v21 = 1007;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v16 = NSLocalizedFailureReasonErrorKey;
    __int16 v17 = @"WAErrorCodeNotRegistered";
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v15));
  }

  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v10);
  }
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v12 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_100046B14(_Unwind_Exception *a1)
{
}

void sub_100046B28(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:*(void *)(a1 + 56)])
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Get Message Model For Group",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    uint64_t v5 = *(void *)(a1 + 56);
    id v11 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _getMessagesModelForProcessToken:v4 groupType:v5 andError:&v11]);
    id v7 = v11;
  }

  else
  {
    id v9 = WALogCategoryDefaultHandle();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v15 = "-[WAEngine xpcConnection:getMessagesModelForGroupType:andReply:]_block_invoke";
      __int16 v16 = 1024;
      int v17 = 1027;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v12 = NSLocalizedFailureReasonErrorKey;
    id v13 = @"WAErrorCodeNotRegistered";
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v4));
    id v6 = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, v6, v7);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100046DFC(_Unwind_Exception *a1)
{
}

void sub_100046E10(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained submitterMap]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

    if (v9)
    {
      id v39 = WALogCategoryDefaultHandle();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_9;
      }
      NSErrorUserInfoKey v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      float v30 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v29));
      int v42 = 136446722;
      __int16 v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
      __int16 v44 = 1024;
      int v45 = 1046;
      __int16 v46 = 2112;
      id v47 = v30;
      id v31 = "%{public}s::%d:token is already registered (token: %@)";
      id v32 = v27;
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
      uint32_t v34 = 28;
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processTokenToGroupTypeMap]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      NSErrorUserInfoKey v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
      unsigned int v14 = [v12 containsObject:v13];

      if (v14)
      {
        id v40 = WALogCategoryDefaultHandle();
        __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          int v41 = *(void **)(a1 + 56);
          int v42 = 136446722;
          __int16 v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
          __int16 v44 = 1024;
          int v45 = 1047;
          __int16 v46 = 2048;
          id v47 = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:XPC: processTokenToGroupTypeMap seems to think this process token has already registered group type: %ld",  (uint8_t *)&v42,  0x1Cu);
        }

        goto LABEL_9;
      }

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Register Message Group",  WeakRetained[86],  WeakRetained[11]);
      [WeakRetained _purgeGroupTypeIfNecessary:*(void *)(a1 + 56)];
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processTokenToGroupTypeMap]);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      int v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v16]);

      if (!v17)
      {
        __int16 v18 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        NSErrorUserInfoKey v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processTokenToGroupTypeMap]);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
        [v19 setObject:v18 forKeyedSubscript:v20];
      }

      int v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processTokenToGroupTypeMap]);
      unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v22]);
      int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
      [v23 addObject:v24];

      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      [WeakRetained _initSubmitterAndQueryableRegistrationForProcessToken:v25 andGroupType:*(void *)(a1 + 56)];

      [WeakRetained _persist];
      id v26 = WALogCategoryDefaultHandle();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
LABEL_9:
        id v35 = 0LL;
        goto LABEL_10;
      }

      unsigned int v28 = *(void **)(a1 + 56);
      NSErrorUserInfoKey v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      float v30 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v29));
      int v42 = 136446978;
      __int16 v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
      __int16 v44 = 1024;
      int v45 = 1057;
      __int16 v46 = 2048;
      id v47 = v28;
      __int16 v48 = 2112;
      id v49 = v30;
      id v31 = "%{public}s::%d:XPC: registering message group type: %ld for process: %@";
      id v32 = v27;
      os_log_type_t v33 = OS_LOG_TYPE_DEBUG;
      uint32_t v34 = 38;
    }

    _os_log_impl((void *)&_mh_execute_header, v32, v33, v31, (uint8_t *)&v42, v34);

    goto LABEL_9;
  }

  id v37 = WALogCategoryDefaultHandle();
  id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    int v42 = 136446466;
    __int16 v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
    __int16 v44 = 1024;
    int v45 = 1045;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:couldn't get process name for connection",  (uint8_t *)&v42,  0x12u);
  }

  NSErrorUserInfoKey v50 = NSLocalizedFailureReasonErrorKey;
  id v51 = @"WAErrorCodeInternalError";
  __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v51,  &v50,  1LL));
  id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v27));
LABEL_10:

  uint64_t v36 = *(void *)(a1 + 40);
  if (v36) {
    (*(void (**)(uint64_t, void, void *))(v36 + 16))(v36, 0LL, v35);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000474DC(_Unwind_Exception *a1)
{
}

void sub_1000474F0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:*(void *)(a1 + 72)])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:getNewMessageForKey:groupType:withCopy:andReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Get New Message For Key",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 48) BOOLValue];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100047808;
    v22[3] = &unk_1000CD2B0;
    id v23 = *(id *)(a1 + 56);
    [WeakRetained _getNewMessageForKey:v11 groupType:v10 withCopy:v12 forProcessToken:v13 shouldCheckForPrePopulation:1 andReply:v22];

    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v14 osTransactionComplete:v7];

    __int16 v15 = 0LL;
  }

  else
  {
    id v16 = WALogCategoryDefaultHandle();
    int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      uint64_t v19 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 136446978;
      __int16 v27 = "-[WAEngine xpcConnection:getNewMessageForKey:groupType:withCopy:andReply:]_block_invoke";
      __int16 v28 = 1024;
      int v29 = 1074;
      __int16 v30 = 2112;
      id v31 = v18;
      __int16 v32 = 2048;
      uint64_t v33 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:token %@ group %ld not registered, bailing",  buf,  0x26u);
    }

    NSErrorUserInfoKey v24 = NSLocalizedFailureReasonErrorKey;
    __int16 v25 = @"WAErrorCodeNotRegistered";
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v20));

    uint64_t v21 = *(void *)(a1 + 56);
    if (v21) {
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v15);
    }
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100047808(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100047AB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_100047AD0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) listener]);
  [v3 suspend];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v5 processIdentifier],  "-[WAEngine xpcConnection:killDaemonAndReply:]_block_invoke"));

  id v7 = v6;
  uint64_t v8 = (void *)os_transaction_create([v7 UTF8String]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v10 = v7;
  objc_msgSend(v9, "osTransactionCreate:transaction:", objc_msgSend(v10, "UTF8String"), v8);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Kill Daemon",  WeakRetained[86],  WeakRetained[11]);
  [WeakRetained _killDaemonAndReply:*(void *)(a1 + 48)];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v11 osTransactionComplete:v8];

  objc_autoreleasePoolPop(v2);
}

void sub_100047EB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100047ED8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:clearMessageStoreAndReply:]_block_invoke"));

  id v6 = v5;
  id v7 = (void *)os_transaction_create([v6 UTF8String]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Clear Message Store",  WeakRetained[86],  WeakRetained[11]);
  [WeakRetained _clearMessageStoreAndReply:*(void *)(a1 + 40)];
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v10 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_1000482D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000482F4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:trapCrashMiniTracerDumpReadyForInterfaceWithName:andReply:]_block_invoke"));

  id v6 = v5;
  id v7 = (void *)os_transaction_create([v6 UTF8String]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Trap Crash Mini Tracer Dump",  WeakRetained[86],  WeakRetained[11]);
  [WeakRetained _trapCrashMiniTracerDumpReadyForInterfaceWithName:*(void *)(a1 + 40) andReply:*(void *)(a1 + 48)];
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v10 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_1000486F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_100048710(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:lqmCrashTracerNotifyForInterfaceWithName:andReply:]_block_invoke"));

  id v6 = v5;
  id v7 = (void *)os_transaction_create([v6 UTF8String]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: LQM Crash Tracer Notify",  WeakRetained[86],  WeakRetained[11]);
  [WeakRetained _lqmCrashTracerNotifyForInterfaceWithName:*(void *)(a1 + 40) andReply:*(void *)(a1 + 48)];
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v10 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_100048B30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_100048B50(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:lqmCrashTracerReceiveBlock:forInterfaceWithName:andReply:]_block_invoke"));

  id v6 = v5;
  id v7 = (void *)os_transaction_create([v6 UTF8String]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: LQM Crash Tracer Receive",  WeakRetained[86],  WeakRetained[11]);
  [WeakRetained _lqmCrashTracerReceiveBlock:*(void *)(a1 + 40) forInterfaceWithName:*(void *)(a1 + 48) andReply:*(void *)(a1 + 56)];
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v10 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_100048D84(_Unwind_Exception *a1)
{
}

void sub_100048D98(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = WeakRetained;
  if (*(void *)(a1 + 56) == 1LL
    && ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:3] & 1) == 0)
  {
    id v18 = WALogCategoryDefaultHandle();
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v28 = "-[WAEngine xpcConnection:triggerQueryForNWActivity:andReply:]_block_invoke";
      __int16 v29 = 1024;
      int v30 = 1218;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v25 = NSLocalizedFailureReasonErrorKey;
    id v26 = @"WAErrorCodeNotRegistered";
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v20));

    id v21 = WALogCategoryDefaultHandle();
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_signpost_enabled(v22))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "XPC NWActivity Reply",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    uint64_t v23 = *(void *)(a1 + 40);
    if (v23) {
      (*(void (**)(uint64_t, void, id))(v23 + 16))(v23, 0LL, v10);
    }
    id v24 = WALogCategoryDefaultHandle();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "XPC NWActivity Reply",  (const char *)&unk_1000B76E7,  buf,  2u);
    }
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v5 processIdentifier],  "-[WAEngine xpcConnection:triggerQueryForNWActivity:andReply:]_block_invoke"));

    id v7 = v6;
    uint64_t v8 = (os_log_s *)os_transaction_create([v7 UTF8String]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v10 = v7;
    objc_msgSend(v9, "osTransactionCreate:transaction:", objc_msgSend(v10, "UTF8String"), v8);

    id v11 = WALogCategoryDefaultHandle();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "XPC NWActivity",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Trigger Query for NW Activity",  v4[86],  v4[11]);
    uint64_t v13 = *(void *)(a1 + 56);
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    [v4 _triggerQueryForNWActivity:v13 forProcessToken:v14 andReply:*(void *)(a1 + 40)];

    id v15 = WALogCategoryDefaultHandle();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "XPC NWActivity",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v17 osTransactionComplete:v8];
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000492B8(_Unwind_Exception *a1)
{
}

void sub_1000492CC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:3])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:andReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Convert WiFi Stats into Percentile",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1000495A4;
    v19[3] = &unk_1000CD2B0;
    id v20 = *(id *)(a1 + 56);
    [WeakRetained _convertWiFiStatsIntoPercentile:v12 analysisGroup:v10 groupTarget:v11 forProcessToken:v13 andReply:v19];

    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v14 osTransactionComplete:v7];

    id v15 = 0LL;
  }

  else
  {
    id v17 = WALogCategoryDefaultHandle();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v24 = "-[WAEngine xpcConnection:convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:andReply:]_block_invoke";
      __int16 v25 = 1024;
      int v26 = 1252;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v21 = NSLocalizedFailureReasonErrorKey;
    unsigned int v22 = @"WAErrorCodeNotRegistered";
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v9));
  }

  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0LL, v15);
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000495A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000496CC(_Unwind_Exception *a1)
{
}

void sub_1000496E0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = WeakRetained;
  if (*(void *)(a1 + 64) != 1LL) {
    goto LABEL_3;
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained submitterMap]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:&off_1000E0300]);

  if (!v8)
  {
    id v19 = WALogCategoryDefaultHandle();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v26 = "-[WAEngine xpcConnection:triggerDatapathDiagnosticsAndCollectUpdates:waMessage:andReply:]_block_invoke";
      __int16 v27 = 1024;
      int v28 = 1281;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v23 = NSLocalizedFailureReasonErrorKey;
    id v24 = @"WAErrorCodeNotRegistered";
    NSErrorUserInfoKey v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v21));

    uint64_t v22 = *(void *)(a1 + 48);
    if (v22) {
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v18);
    }
  }

  else
  {
LABEL_3:
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v9 processIdentifier],  "-[WAEngine xpcConnection:triggerDatapathDiagnosticsAndCollectUpdates:waMessage:andReply:]_block_invoke"));

    id v11 = v10;
    uint64_t v12 = (void *)os_transaction_create([v11 UTF8String]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v14 = v11;
    objc_msgSend(v13, "osTransactionCreate:transaction:", objc_msgSend(v14, "UTF8String"), v12);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Trigger Datapath Diagnostic",  v4[86],  v4[11]);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    [v4 _triggerDatapathDiagnosticsAndCollectUpdates:v15 forProcessToken:v16 waMessage:*(void *)(a1 + 40) andReply:*(void *)(a1 + 48)];

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v17 osTransactionComplete:v12];

    id v18 = 0LL;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100049AA8(_Unwind_Exception *a1)
{
}

void sub_100049ABC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueForEntitlement:@"com.apple.private.wifianalytics"]);
  unsigned __int8 v6 = [v5 BOOLValue];

  if ((v6 & 1) != 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v7 processIdentifier],  "-[WAEngine xpcConnection:getDpsStatsandReply:]_block_invoke"));

    id v9 = v8;
    uint64_t v10 = (void *)os_transaction_create([v9 UTF8String]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v12 = v9;
    objc_msgSend(v11, "osTransactionCreate:transaction:", objc_msgSend(v12, "UTF8String"), v10);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Get DPS Stats",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _DPSQuickRecoveryEngineObj]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained recommendationEngine]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dpsWDBudgetDict]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 updateDpsStats:v15]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  v16));

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v18 osTransactionComplete:v10];
  }

  else
  {
    id v20 = WALogCategoryDefaultHandle();
    NSErrorUserInfoKey v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      NSErrorUserInfoKey v23 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v22));
      id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
      *(_DWORD *)buf = 136447234;
      int v26 = "-[WAEngine xpcConnection:getDpsStatsandReply:]_block_invoke";
      __int16 v27 = 1024;
      int v28 = 1311;
      __int16 v29 = 2112;
      int v30 = v23;
      __int16 v31 = 1024;
      unsigned int v32 = [v24 processIdentifier];
      __int16 v33 = 2112;
      uint32_t v34 = @"com.apple.private.wifianalytics";
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:XPC: ERROR: %@ (%d) is not entitled with WA_XPC_ENTITLEMENT for %@, rejecting connection!!!",  buf,  0x2Cu);
    }

    id v12 = 0LL;
    id v17 = 0LL;
  }

  uint64_t v19 = *(void *)(a1 + 40);
  if (v19) {
    (*(void (**)(uint64_t, void *, void))(v19 + 16))(v19, v17, 0LL);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100049EB8(_Unwind_Exception *a1)
{
}

void sub_100049ECC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueForEntitlement:@"com.apple.private.wifianalytics"]);
  unsigned __int8 v6 = [v5 BOOLValue];

  if ((v6 & 1) != 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v7 processIdentifier],  "-[WAEngine xpcConnection:getUsageStatsandReply:]_block_invoke"));

    id v9 = v8;
    uint64_t v10 = (void *)os_transaction_create([v9 UTF8String]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v12 = v9;
    objc_msgSend(v11, "osTransactionCreate:transaction:", objc_msgSend(v12, "UTF8String"), v10);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Get Usage Stats",  *((void *)WeakRetained + 86),  *((void *)WeakRetained + 11));
    [WeakRetained _calculateEstimatedUptime];
    [WeakRetained _calculateProcessUsage];
    [WeakRetained _calculateProfileUptime];
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:]( v13,  "setObject:forKey:",  *((void *)WeakRetained + 86),  @"Module_Engine");
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*((id *)WeakRetained + 13) getCachedUsage]);
    id v15 = [v14 copy];

    if (v15) {
      -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v15, @"Module_IOR");
    }
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nowCacheUsageForTelemetry]);
    +[WAUtil logNestedDictionary:indent:prefix:]( &OBJC_CLASS___WAUtil,  "logNestedDictionary:indent:prefix:",  v16,  0LL,  @"getUsageStatsandReply ");

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v17 osTransactionComplete:v10];
  }

  else
  {
    id v19 = WALogCategoryDefaultHandle();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      NSErrorUserInfoKey v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v21));
      NSErrorUserInfoKey v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
      *(_DWORD *)buf = 136447234;
      __int16 v25 = "-[WAEngine xpcConnection:getUsageStatsandReply:]_block_invoke";
      __int16 v26 = 1024;
      int v27 = 1341;
      __int16 v28 = 2112;
      __int16 v29 = v22;
      __int16 v30 = 1024;
      unsigned int v31 = [v23 processIdentifier];
      __int16 v32 = 2112;
      __int16 v33 = @"com.apple.private.wifianalytics";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:XPC: ERROR: %@ (%d) is not entitled with WA_XPC_ENTITLEMENT for %@, rejecting connection!!!",  buf,  0x2Cu);
    }

    id v12 = 0LL;
    id v15 = 0LL;
    uint64_t v13 = 0LL;
  }

  uint64_t v18 = *(void *)(a1 + 48);
  if (v18) {
    (*(void (**)(uint64_t, NSMutableDictionary *, void))(v18 + 16))(v18, v13, 0LL);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004A31C(_Unwind_Exception *a1)
{
}

void sub_10004A330(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:5])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:setDeviceAnalyticsConfiguration:andReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Set Device Analytics Config",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _setDeviceAnalyticsConfiguration:*(void *)(a1 + 40)]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v11 osTransactionComplete:v7];
  }

  else
  {
    id v13 = WALogCategoryDefaultHandle();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v18 = "-[WAEngine xpcConnection:setDeviceAnalyticsConfiguration:andReply:]_block_invoke";
      __int16 v19 = 1024;
      int v20 = 1383;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v15 = NSLocalizedFailureReasonErrorKey;
    uint64_t v16 = @"WAErrorCodeNotRegistered";
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v9));
  }

  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v10);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004A680(_Unwind_Exception *a1)
{
}

void sub_10004A694(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:5])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:getDeviceAnalyticsConfigurationAndReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Get Device Analytics Config",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _getDeviceAnalyticsConfiguration]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v11 osTransactionComplete:v7];

    uint64_t v12 = 0LL;
  }

  else
  {
    id v14 = WALogCategoryDefaultHandle();
    NSErrorUserInfoKey v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v20 = "-[WAEngine xpcConnection:getDeviceAnalyticsConfigurationAndReply:]_block_invoke";
      __int16 v21 = 1024;
      int v22 = 1410;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v17 = NSLocalizedFailureReasonErrorKey;
    uint64_t v18 = @"WAErrorCodeNotRegistered";
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v16));

    id v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v10, v12);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004AA28(_Unwind_Exception *a1)
{
}

void sub_10004AA3C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:5])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:summarizeDeviceAnalyticsForNetwork:maxAgeInDays:andReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Summarize Device Analytics For Network",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained _summarizeDeviceAnalyticsForNetwork:*(void *)(a1 + 40) maxAgeInDays:*(void *)(a1 + 64)]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v11 osTransactionComplete:v7];

    uint64_t v12 = 0LL;
  }

  else
  {
    id v14 = WALogCategoryDefaultHandle();
    NSErrorUserInfoKey v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v20 = "-[WAEngine xpcConnection:summarizeDeviceAnalyticsForNetwork:maxAgeInDays:andReply:]_block_invoke";
      __int16 v21 = 1024;
      int v22 = 1438;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v17 = NSLocalizedFailureReasonErrorKey;
    uint64_t v18 = @"WAErrorCodeNotRegistered";
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v16));

    id v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v10, v12);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004AE48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10004AE64(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:5])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Trigger Device Analytics Store Migration",  WeakRetained[86],  WeakRetained[11]);
    [WeakRetained triggerDeviceAnalyticsStoreMigrationAndReply:*(void *)(a1 + 40)];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v10 osTransactionComplete:v7];

    id v11 = 0LL;
  }

  else
  {
    id v12 = WALogCategoryDeviceStoreHandle();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v21 = "-[WAEngine xpcConnection:triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke";
      __int16 v22 = 1024;
      int v23 = 1466;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v18 = NSLocalizedFailureReasonErrorKey;
    __int16 v19 = @"WAErrorCodeNotRegistered";
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v14));

    id v15 = WALogCategoryDeviceStoreHandle();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v21 = "-[WAEngine xpcConnection:triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke";
      __int16 v22 = 1024;
      int v23 = 1480;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Result for triggerDeviceAnalyticsStoreMigrationAndReply via XPC - Error: WAErrorCodeNotRegistered",  buf,  0x12u);
    }

    uint64_t v17 = *(void *)(a1 + 40);
    if (v17) {
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v11);
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004B3C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10004B3E0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:sendMemoryPressureRequestAndReply:]_block_invoke"));

  id v6 = v5;
  id v7 = (void *)os_transaction_create([v6 UTF8String]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  id v9 = v6;
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Send Memory Pressure Request",  WeakRetained[86],  WeakRetained[11]);
  [WeakRetained _sendMemoryPressureRequestAndReply:*(void *)(a1 + 40)];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v10 osTransactionComplete:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_10004B898( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

uint64_t sub_10004B8C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004B8D4(uint64_t a1)
{
}

void sub_10004B8DC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([WeakRetained submitterMapCheck:*(void *)(a1 + 32) group:3])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.wifianalytics.pid_%d.%s",  [v4 processIdentifier],  "-[WAEngine xpcConnection:issueIOReportManagementCommand:andReply:]_block_invoke"));

    id v6 = v5;
    id v7 = (void *)os_transaction_create([v6 UTF8String]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v9 = v6;
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Client: Issue IOReport Managemen Command",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v10 = *(void *)(a1 + 64);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10004BC1C;
    v22[3] = &unk_1000CD2B0;
    id v23 = *(id *)(a1 + 40);
    [WeakRetained _issueIOReportManagementCommand:v10 forProcessToken:v11 andReply:v22];

    id v12 = WALogCategoryDefaultHandle();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v27 = "-[WAEngine xpcConnection:issueIOReportManagementCommand:andReply:]_block_invoke";
      __int16 v28 = 1024;
      int v29 = 1535;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:xpcConnection _issueIOReportManagementCommand complete",  buf,  0x12u);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v14 osTransactionComplete:v7];
  }

  else
  {
    id v15 = WALogCategoryDefaultHandle();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v27 = "-[WAEngine xpcConnection:issueIOReportManagementCommand:andReply:]_block_invoke";
      __int16 v28 = 1024;
      int v29 = 1526;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
    }

    NSErrorUserInfoKey v24 = NSLocalizedFailureReasonErrorKey;
    __int16 v25 = @"WAErrorCodeNotRegistered";
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    uint64_t v18 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v17));
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    uint64_t v21 = *(void *)(a1 + 40);
    if (v21) {
      (*(void (**)(uint64_t, void, void))(v21 + 16))( v21,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
    }
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_10004BC1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004BEF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10004BF0C(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 120) objectForKeyedSubscript:a1[5]]);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  objc_autoreleasePoolPop(v2);
}

void sub_10004BFF0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processTokenToXPCConnectionMap]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v4)
  {
    id v5 = WALogCategoryDefaultHandle();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", *(void *)(a1 + 40)));
      int v8 = 136446722;
      id v9 = "-[WAEngine sendWakeUpNotificationForProcessWithName:]_block_invoke";
      __int16 v10 = 1024;
      int v11 = 1578;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:It appears the XPC connection is still valid (no invalidation handler called). No need to send wa ke up notification for process with token ending: %@",  (uint8_t *)&v8,  0x1Cu);
    }
  }

  else
  {
    notify_post((const char *)[*(id *)(a1 + 40) UTF8String]);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004C1C8(_Unwind_Exception *a1)
{
}

void sub_10004C1DC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WALogCategoryDefaultHandle();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446466;
    id v7 = "-[WAEngine prepareToTerminateViaEagerExit]_block_invoke";
    __int16 v8 = 1024;
    int v9 = 1594;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:prepareToTerminateAnyReply...",  (uint8_t *)&v6,  0x12u);
  }

  [WeakRetained _prepareToTerminateViaEagerExit];
  objc_autoreleasePoolPop(v2);
}

void sub_10004C4CC(_Unwind_Exception *a1)
{
}

void sub_10004C4E0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WALogCategoryDefaultHandle();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446466;
    __int16 v8 = "-[WAEngine prepareToTerminateAnyReply:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 1613;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:prepareToTerminateAnyReply...",  (uint8_t *)&v7,  0x12u);
  }

  [WeakRetained _prepareToTerminate];
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0LL, 0LL);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004C948( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10004C964(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*(_BYTE *)(a1 + 40)) {
    id v4 = @"Dispatch: Received Memory Critical";
  }
  else {
    id v4 = @"Dispatch: Received Memory Warning";
  }
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  v4,  WeakRetained[86],  WeakRetained[11]);
  if (([WeakRetained dpsStudyInProgress] & 1) != 0
    || ([WeakRetained slowWiFiStudyInProgress] & 1) != 0
    || ([WeakRetained dnsStudyInProgress] & 1) != 0)
  {
    unsigned int v5 = 1;
  }

  else
  {
    unsigned int v5 = [WeakRetained isNWActivityInProgress];
  }

  if (([WeakRetained isMemoryPressureRequestDeferred] & 1) == 0 && v5)
  {
    [WeakRetained setIsMemoryPressureRequestDeferred:1];
    id v6 = WALogCategoryDefaultHandle();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      uint64_t v18 = "-[WAEngine handleMemoryWarning:]_block_invoke";
      __int16 v19 = 1024;
      int v20 = 1655;
      __int16 v21 = 2080;
      __int16 v22 = "-[WAEngine handleMemoryWarning:]_block_invoke";
      __int16 v23 = 1024;
      unsigned int v24 = [WeakRetained dpsStudyInProgress];
      __int16 v25 = 1024;
      unsigned int v26 = [WeakRetained slowWiFiStudyInProgress];
      __int16 v27 = 1024;
      unsigned int v28 = [WeakRetained dnsStudyInProgress];
      __int16 v29 = 1024;
      unsigned int v30 = [WeakRetained isNWActivityInProgress];
      __int16 v8 = "%{public}s::%d:%s: deferred (DPS in progress=%d, SlowWiFi in progress=%d, DNS-SlowWiFi in progress=%d, NWActi"
           "vity in progress=%d.";
      __int16 v9 = v7;
      uint32_t v10 = 52;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
      goto LABEL_16;
    }

    goto LABEL_16;
  }

  if ((v5 & 1) == 0)
  {
    int v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained mutexQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004CC20;
    block[3] = &unk_1000CCD80;
    __int16 v12 = WeakRetained;
    id v16 = v12;
    dispatch_sync(v11, block);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 iorMessagePopulator]);
    [v13 freeIORCaches];

    [v12 setIsMemoryPressureRequestDeferred:0];
    id v14 = WALogCategoryDefaultHandle();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "-[WAEngine handleMemoryWarning:]_block_invoke_2";
      __int16 v19 = 1024;
      int v20 = 1663;
      __int16 v21 = 2080;
      __int16 v22 = "-[WAEngine handleMemoryWarning:]_block_invoke_2";
      __int16 v8 = "%{public}s::%d:%s: caches freed.";
      __int16 v9 = v7;
      uint32_t v10 = 28;
      goto LABEL_15;
    }

LABEL_16:
  }

  objc_autoreleasePoolPop(v2);
}
  }

  __int16 v22 = WALogCategoryDefaultHandle();
  __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_signpost_enabled(v23))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "_processWAMessageForLogging",  (const char *)&unk_1000B76E7,  buf,  2u);
  }
}
      }

      int v7 = [obj countByEnumeratingWithState:&v32 objects:v45 count:16];
    }

    while (v7);

    if (v8)
    {
      __int16 v19 = WALogCategoryDefaultHandle();
      int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](&OBJC_CLASS___WAUtil, "trimTokenForLogging:", v8));
        *(_DWORD *)buf = 136446978;
        id v37 = "-[WAEngine _purgeGroupTypeIfNecessary:]";
        id v38 = 1024;
        id v39 = 3070;
        id v40 = 2048;
        int v41 = a3;
        int v42 = 2112;
        __int16 v43 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:XPC: Found an old token for WAGroupType: %ld (%@). Purging it now as a process is trying to reg ister for the same group type",  buf,  0x26u);
      }

      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine processTokenToGroupTypeMap](self, "processTokenToGroupTypeMap"));
      [v22 removeObjectForKey:v8];

      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine submitterMap](self, "submitterMap"));
      [v23 removeObjectForKey:v8];

      unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine processTokenToXPCConnectionMap](self, "processTokenToXPCConnectionMap"));
      [v24 removeObjectForKey:v8];

      goto LABEL_25;
    }
  }

  else
  {
  }

  __int16 v25 = WALogCategoryDefaultHandle();
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    id v37 = "-[WAEngine _purgeGroupTypeIfNecessary:]";
    id v38 = 1024;
    id v39 = 3069;
    id v40 = 2048;
    int v41 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:XPC: No old tokens for newly registered WAGroupType: %ld - no purge necessary.",  buf,  0x1Cu);
  }

void sub_10004CC20(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedModelObjectsKeyToMessageMap]);
  [v3 removeAllObjects];

  objc_autoreleasePoolPop(v2);
}

LABEL_3:
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine _getObscureKey](self, "_getObscureKey", *(_OWORD *)v18, *(void *)&v18[16]));
  return v9;
}
}

  return v7;
}

LABEL_19:
}

  unsigned int v26 = WALogCategoryDefaultHandle();
  __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v28 = "NO";
    unsigned int v30 = 136448002;
    unsigned int v31 = "-[WAEngine isScoreBelowThreshold:type:instanceId:]";
    __int16 v33 = 6311;
    __int16 v32 = 1024;
    if (v23) {
      unsigned int v28 = "YES";
    }
    uint32_t v34 = 1024;
    id v35 = a5;
    uint64_t v36 = 2048;
    id v37 = a4;
    id v38 = 1024;
    id v39 = v16;
    id v40 = 1024;
    int v41 = v12;
    int v42 = 1024;
    __int16 v43 = v14;
    __int16 v44 = 2080;
    int v45 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:InstanceId:%u scoreType:%lu score:%d totalServers:%d impactedDnsServers:%d isBelowThreshold-result:%s",  (uint8_t *)&v30,  0x3Eu);
  }

  return v23;
}

void sub_100052AE4(id a1)
{
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000ECB90 = (double)v1 / (double)v2;
  }

id sub_100053510(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446466;
    id v6 = "-[WAEngine _enableWorkReportRecurringTimer]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 2484;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Performing scheduled _reportHourlyWorkReport",  (uint8_t *)&v5,  0x12u);
  }

  id result = [*(id *)(a1 + 32) _reportWorkReportInterval];
  *(_BYTE *)(*(void *)(a1 + 32) + 58LL) = 0;
  return result;
}

void sub_100054E9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
}

id sub_100054ECC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"Telemetry: Work Report Accepted",  WeakRetained[86],  WeakRetained[11]);
    uint64_t v3 = objc_claimAutoreleasedReturnValue([WeakRetained _createWorkReportDictionaryForTelemetryAndRollBucket]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  id v6 = WALogCategoryDefaultHandle();
  __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136446466;
    int v11 = "-[WAEngine _reportWorkReportInterval]_block_invoke";
    __int16 v12 = 1024;
    int v13 = 2723;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Sending telemetry for com.apple.wifianalyticsd.workreport",  (uint8_t *)&v10,  0x12u);
  }

  id v8 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  return v8;
}

void sub_100055B50(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedModelObjectsKeyToMessageMap]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue( +[WAUtil getMessageInstanceForKey:andGroupType:]( &OBJC_CLASS___WAUtil,  "getMessageInstanceForKey:andGroupType:",  *(void *)(a1 + 40),  *(void *)(a1 + 56)));
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedModelObjectsKeyToMessageMap]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v13]);

    if (!v14)
    {
      id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedModelObjectsKeyToMessageMap]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
      [v16 setObject:v15 forKeyedSubscript:v17];
    }

    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedModelObjectsKeyToMessageMap]);
    int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v20]);
    [v21 setObject:v18 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100056004(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1000562F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_100056608(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100057784(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) processWiFiAnalyticsMessageJSONFilesInTmpDir:1];
  objc_autoreleasePoolPop(v2);
}

LABEL_5:
  return v12;
}

LABEL_32:
}

LABEL_49:
    goto LABEL_50;
  }

  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    id v51 = (void *)objc_claimAutoreleasedReturnValue([(id)v84[5] key]);
    *(_DWORD *)buf = 136446722;
    id v92 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]";
    id v93 = 1024;
    id v94 = 3507;
    int v95 = 2112;
    BOOL v96 = (uint64_t)v51;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Send WAMessageAWD %@ for population... ",  buf,  0x1Cu);
  }

  __int16 v52 = WALogCategoryDefaultHandle();
  int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_signpost_enabled(v53))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v53,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity Poplulate",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine iorMessagePopulator](self, "iorMessagePopulator"));
  id v55 = v84[5];
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v70[2] = sub_10005B7E0;
  v70[3] = &unk_1000CD4B0;
  __int16 v73 = &v83;
  v70[4] = self;
  id v74 = &v77;
  __int16 v71 = v8;
  __int16 v75 = 3LL;
  v76 = a3;
  int v72 = v9;
  [v54 prepopulateMessage:v55 forProcess:v71 groupType:3 andReply:v70];

  self->_isNWActivityInProgress = 0;
  __int16 v56 = WALogCategoryDefaultHandle();
  id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
  if (os_signpost_enabled(v57))
  {
    *(_WORD *)buf = 0;
LABEL_32:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v57,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

LABEL_50:
  id v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v83[5], "fieldForKey:", @"DPSCS_timestamp", v69, v70, v71, v72));
  objc_msgSend(v63, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  __int128 v64 = WALogCategoryDefaultHandle();
  __int128 v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v66 = (void *)v83[5];
    *(_DWORD *)buf = 136446722;
    id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    id v92 = 1024;
    id v93 = 4091;
    id v94 = 2112;
    int v95 = v66;
    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding dpsStatsContainer %@ ",  buf,  0x1Cu);
  }

  __int128 v67 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) fieldForKey:@"DPSR_dpsCounterSamples"]);
  [v67 addRepeatableSubMessageValue:v83[5]];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
LABEL_53:
  _Block_object_dispose(&v82, 8);
}

void sub_10005B7AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10005B7E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v134 = a3;
  uint64_t v135 = a1;
  __int128 v159 = 0u;
  __int128 v160 = 0u;
  __int128 v161 = 0u;
  __int128 v162 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"NWA_interfaceStats"]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 repeatableValues]);

  id obj = v5;
  id v138 = [v5 countByEnumeratingWithState:&v159 objects:v182 count:16];
  if (v138)
  {
    uint64_t v142 = 0LL;
    int v141 = 0;
    uint64_t v137 = *(void *)v160;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v160 != v137) {
          objc_enumerationMutation(obj);
        }
        uint64_t v139 = v6;
        uint64_t v7 = *(void **)(*((void *)&v159 + 1) + 8 * v6);
        __int128 v155 = 0u;
        __int128 v156 = 0u;
        __int128 v157 = 0u;
        __int128 v158 = 0u;
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 fieldForKey:@"NWAIS_peers"]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 repeatableValues]);

        id v10 = [v9 countByEnumeratingWithState:&v155 objects:v181 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v156;
          do
          {
            for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v156 != v12) {
                objc_enumerationMutation(v9);
              }
              id v14 = *(void **)(*((void *)&v155 + 1) + 8LL * (void)i);
              id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:@"NWAPS_hashID"]);
              id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stringValue]);
              unsigned int v17 = [v16 isEqualToString:@"00:00:00:00:00:00"];

              if (v17)
              {
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:@"NWAPS_ccas"]);
                __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 repeatableValues]);
                BOOL v20 = [v19 count] != 0;

                v141 |= v20;
                __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:@"NWAPS_acCompletions"]);
                __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 repeatableValues]);
                BOOL v23 = [v22 count] != 0;

                LODWORD(v142) = v23 | v142;
                unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:@"NWAPS_txLatencyBEs"]);
                __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 repeatableValues]);
                BOOL v26 = [v25 count] != 0;

                HIDWORD(v142) |= v26;
              }

              __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v14 fieldForKey:@"NWAPS_hashID"]);
              unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v27 stringValue]);
              [v28 isEqualToString:@"00:00:00:00:00:00"];
            }

            id v11 = [v9 countByEnumeratingWithState:&v155 objects:v181 count:16];
          }

          while (v11);
        }

        uint64_t v6 = v139 + 1;
      }

      while ((id)(v139 + 1) != v138);
      id v138 = [obj countByEnumeratingWithState:&v159 objects:v182 count:16];
    }

    while (v138);
  }

  else
  {
    uint64_t v142 = 0LL;
    int v141 = 0;
  }

  __int128 v153 = 0u;
  __int128 v154 = 0u;
  __int128 v151 = 0u;
  __int128 v152 = 0u;
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v135 + 56) + 8) + 40) fieldForKey:@"NWA_interfaceStats"]);
  unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([v29 repeatableValues]);

  id v31 = [v30 countByEnumeratingWithState:&v151 objects:v180 count:16];
  if (v31)
  {
    id v32 = v31;
    uint64_t v33 = *(void *)v152;
    do
    {
      for (j = 0LL; j != v32; j = (char *)j + 1)
      {
        if (*(void *)v152 != v33) {
          objc_enumerationMutation(v30);
        }
        id v35 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v151 + 1) + 8 * (void)j) fieldForKey:@"NWAIS_assoc"]);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 subMessageValue]);
        id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 fieldForKey:@"NWAA_linkChanged"]);
        unsigned int v38 = [v37 uint32Value];
      }

      id v32 = [v30 countByEnumeratingWithState:&v151 objects:v180 count:16];
    }

    while (v32);
    uint64_t v39 = v38 != 0;
  }

  else
  {
    uint64_t v39 = 0LL;
  }

  __int128 v149 = 0u;
  __int128 v150 = 0u;
  __int128 v147 = 0u;
  __int128 v148 = 0u;
  id v40 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v135 + 56) + 8) + 40) fieldForKey:@"NWA_interfaceStats"]);
  int v41 = (void *)objc_claimAutoreleasedReturnValue([v40 repeatableValues]);

  id v42 = [v41 countByEnumeratingWithState:&v147 objects:v179 count:16];
  if (v42)
  {
    id v43 = v42;
    unsigned int v140 = v39;
    uint64_t v44 = *(void *)v148;
    do
    {
      for (k = 0LL; k != v43; k = (char *)k + 1)
      {
        if (*(void *)v148 != v44) {
          objc_enumerationMutation(v41);
        }
        __int16 v46 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v147 + 1) + 8 * (void)k) fieldForKey:@"NWAIS_assoc"]);
        id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 subMessageValue]);
        __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v47 fieldForKey:@"NWAA_assocDoneSuccess"]);
        unsigned int v49 = [v48 uint32Value];
      }

      id v43 = [v41 countByEnumeratingWithState:&v147 objects:v179 count:16];
    }

    while (v43);
    BOOL v50 = v49 != 0;
    uint64_t v39 = v140;
  }

  else
  {
    BOOL v50 = 0LL;
  }

  uint64_t v51 = v135;
  [*(id *)(v135 + 32) setIsAssociatedStateKnown:1];
  objc_msgSend(*(id *)(v135 + 32), "setIsAssociated:", objc_msgSend(*(id *)(v135 + 32), "isAssociated"));
  id v52 = WALogCategoryDefaultHandle();
  int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_signpost_enabled(v53))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v53,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity Poplulate",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  unsigned int v54 = [*(id *)(v135 + 32) forceStudyErrorFromMsg];
  if (v54)
  {
    id v55 = WALogCategoryDefaultHandle();
    __int16 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      __int16 v171 = 1024;
      int v172 = 3557;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Setting attemptRescan to true due to debug command kWAIORCommandForceStudyErrorFromMsg",  buf,  0x12u);
    }

    [*(id *)(v135 + 32) setForceStudyErrorFromMsg:0];
  }

  if ([v134 code] == (id)9021
    || [v134 code] == (id)9022
    || [v134 code] == (id)9023
    || [v134 code] == (id)9024
    || [v134 code] == (id)9025
    || [v134 code] == (id)9026
    || ((v141 ^ 1) & 1) != 0
    || ((v39 ^ 1) & 1) != 0
    || ((v142 ^ 1) & 1) != 0
    || ((HIDWORD(v142) ^ 1) & 1) != 0)
  {
    id v57 = WALogCategoryDefaultHandle();
    char v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      __int16 v171 = 1024;
      int v172 = 3570;
      __int16 v173 = 1024;
      *(_DWORD *)__int16 v174 = v141 & 1;
      *(_WORD *)&v174[4] = 1024;
      *(_DWORD *)&v174[6] = v39;
      LOWORD(v175) = 1024;
      *(_DWORD *)((char *)&v175 + 2) = v142 & 1;
      HIWORD(v175) = 1024;
      int v176 = BYTE4(v142) & 1;
      __int16 v177 = 2112;
      id v178 = v134;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:NWA Doesn't have all fields hasCCA %u hasLinkChanged %u hasAcCompletions %u hastxLatencyBE %u error %@",  buf,  0x34u);
    }

    if ([*(id *)(v135 + 32) everAssociated:v39 assocDoneSuccess:v50])
    {
      if (v134)
      {
        uint64_t v59 = *(void *)(*(void *)(v135 + 64) + 8LL);
        id v60 = v134;
        id v61 = *(void **)(v59 + 40);
        *(void *)(v59 + 40) = v60;
      }

      else
      {
        NSErrorUserInfoKey v167 = NSLocalizedFailureReasonErrorKey;
        __int16 v168 = @"WAErrorCodeOtherMissing";
        id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v168,  &v167,  1LL));
        uint64_t v77 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9028LL,  v61));
        uint64_t v78 = *(void *)(*(void *)(v135 + 64) + 8LL);
        __int16 v79 = *(void **)(v78 + 40);
        *(void *)(v78 + 40) = v77;
      }

      id v80 = WALogCategoryDefaultHandle();
      id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        __int16 v171 = 1024;
        int v172 = 3582;
        __int16 v173 = 2112;
        *(void *)__int16 v174 = v134;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:NWActivity missing mandatory fields due to %@, everAssociated true, attemptRescan true",  buf,  0x1Cu);
      }

      uint64_t v51 = v135;
      goto LABEL_67;
    }

    NSErrorUserInfoKey v165 = NSLocalizedFailureReasonErrorKey;
    __int128 v166 = @"WAErrorCodeNeverAssociated";
    id v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v166,  &v165,  1LL));
    uint64_t v63 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9027LL,  v62));
    uint64_t v64 = *(void *)(*(void *)(v135 + 64) + 8LL);
    __int128 v65 = *(void **)(v64 + 40);
    *(void *)(v64 + 40) = v63;

    id v66 = WALogCategoryDefaultHandle();
    __int128 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      __int16 v171 = 1024;
      int v172 = 3587;
      __int16 v173 = 2112;
      *(void *)__int16 v174 = v134;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:NWActivity missing mandatory fields due to %@, everAssociated false, attemptRescan false",  buf,  0x1Cu);
    }

    uint64_t v51 = v135;
  }

  if (v54)
  {
LABEL_67:
    id v82 = WALogCategoryDefaultHandle();
    uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      __int16 v171 = 1024;
      int v172 = 3591;
      _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Attempting Rescan",  buf,  0x12u);
    }

    id v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    v76 = v84;
    if (*(void *)(*(void *)(v51 + 32) + 664) && (objc_msgSend(v84, "timeIntervalSinceDate:"), v85 > 30.0))
    {
      id v86 = WALogCategoryDefaultHandle();
      id v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        __int16 v171 = 1024;
        int v172 = 3595;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Attemping determineChannelsPerIORPopulatable",  buf,  0x12u);
      }

      id v88 = WALogCategoryDefaultHandle();
      id v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
      if (os_signpost_enabled(v89))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v89,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity MissingChannelsRepopulate",  (const char *)&unk_1000B76E7,  buf,  2u);
      }

      id v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v51 + 32) iorMessagePopulator]);
      [v90 determineChannelsPerIORPopulatableWithinPopulatorBlock];

      id v91 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v51 + 32) iorMessagePopulator]);
      uint64_t v92 = *(void *)(v51 + 72);
      v143[0] = _NSConcreteStackBlock;
      uint64_t v94 = *(void *)(v51 + 32);
      uint64_t v93 = *(void *)(v51 + 40);
      __int128 v95 = *(_OWORD *)(v51 + 56);
      uint64_t v96 = *(void *)(*(void *)(*(void *)(v51 + 56) + 8LL) + 40LL);
      v143[1] = 3221225472LL;
      v143[2] = sub_10005C9B8;
      v143[3] = &unk_1000CD488;
      char v145 = v39;
      BOOL v146 = v50;
      v143[4] = v94;
      __int128 v144 = v95;
      [v91 prepopulateMessageWithinPopulatorBlock:v96 forProcess:v93 groupType:v92 andReply:v143];

      objc_storeStrong((id *)(*(void *)(v51 + 32) + 664LL), v76);
    }

    else
    {
      id v97 = WALogCategoryDefaultHandle();
      id v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        uint64_t v99 = *(void *)(*(void *)(v51 + 32) + 664LL);
        *(_DWORD *)buf = 136446722;
        __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        __int16 v171 = 1024;
        int v172 = 3658;
        __int16 v173 = 2112;
        *(void *)__int16 v174 = v99;
        _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Rescanned too recently, waiting for 30s to elapse since last check at %@",  buf,  0x1Cu);
      }
    }

    id v100 = WALogCategoryDefaultHandle();
    id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      __int16 v171 = 1024;
      int v172 = 3660;
      _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Rescan Attempt Complete",  buf,  0x12u);
    }

    goto LABEL_82;
  }

  if (v134) {
    goto LABEL_83;
  }
  id v68 = WALogCategoryDefaultHandle();
  id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
  if (os_signpost_enabled(v69))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v69,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity GetChannelApInfo",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  id v70 = *(void **)(v51 + 32);
  __int16 v71 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v51 + 56) + 8) + 40) fieldForKey:@"NWA_controllerStats"]);
  int v72 = (void *)objc_claimAutoreleasedReturnValue([v71 subMessageValue]);
  [v70 populateChannelInfo:v72];

  uint64_t v51 = v135;
  [*(id *)(v135 + 32) populateApProfile:*(void *)(*(void *)(*(void *)(v135 + 56) + 8) + 40)];
  id v73 = WALogCategoryDefaultHandle();
  id v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
  if (os_signpost_enabled(v74))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v74,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity GetChannelApInfo",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  uint64_t v75 = *(void *)(*(void *)(v135 + 64) + 8LL);
  v76 = *(void **)(v75 + 40);
  *(void *)(v75 + 40) = 0LL;
LABEL_82:

LABEL_83:
  uint64_t v102 = *(void *)(v51 + 80);
  if (v102 == 1)
  {
    uint64_t v118 = *(void *)(*(void *)(*(void *)(v51 + 64) + 8LL) + 40LL);
    id v119 = WALogCategoryDefaultHandle();
    v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
    __int16 v121 = v120;
    if (v118)
    {
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        uint64_t v123 = *(void *)(*(void *)(*(void *)(v135 + 64) + 8LL) + 40LL);
        *(_DWORD *)buf = 136446978;
        __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        __int16 v171 = 1024;
        int v172 = 3678;
        __int16 v173 = 2112;
        *(void *)__int16 v174 = v122;
        *(_WORD *)&v174[8] = 2112;
        uint64_t v175 = v123;
        id v124 = "%{public}s::%d:Reply style 1, returning with %@ status %@";
        __int16 v125 = v121;
        os_log_type_t v126 = OS_LOG_TYPE_ERROR;
        uint32_t v127 = 38;
LABEL_95:
        _os_log_impl((void *)&_mh_execute_header, v125, v126, v124, buf, v127);
      }
    }

    else if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      __int16 v171 = 1024;
      int v172 = 3680;
      __int16 v173 = 2112;
      *(void *)__int16 v174 = v122;
      id v124 = "%{public}s::%d:Reply style 1, returning with %@ status Success";
      __int16 v125 = v121;
      os_log_type_t v126 = OS_LOG_TYPE_DEBUG;
      uint32_t v127 = 28;
      goto LABEL_95;
    }

    id v128 = WALogCategoryDefaultHandle();
    id v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
    if (os_signpost_enabled(v129))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v129,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity Reply",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(v135 + 48) + 16LL))();
    id v130 = WALogCategoryDefaultHandle();
    uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
    if (!os_signpost_enabled(v116)) {
      goto LABEL_101;
    }
    *(_WORD *)buf = 0;
    v117 = "Engine NWActivity Reply";
    goto LABEL_100;
  }

  if (!v102)
  {
    id v103 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v51 + 32) submitterMap]);
    uint64_t v104 = objc_claimAutoreleasedReturnValue([v103 objectForKeyedSubscript:*(void *)(v51 + 40)]);
    uint64_t v105 = v51;
    __int128 v106 = (void *)v104;
    id v107 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(v105 + 72)));
    __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:v107]);

    id v109 = WALogCategoryDefaultHandle();
    __int128 v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
    id v111 = v110;
    if (!v108)
    {
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        __int16 v171 = 1024;
        int v172 = 3672;
        _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:not registered, bailing",  buf,  0x12u);
      }

      NSErrorUserInfoKey v163 = NSLocalizedFailureReasonErrorKey;
      __int16 v164 = @"WAErrorCodeNotRegistered";
      uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v164,  &v163,  1LL));
      uint64_t v131 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9009LL,  v116));
      uint64_t v132 = *(void *)(*(void *)(v135 + 64) + 8LL);
      v133 = *(void **)(v132 + 40);
      *(void *)(v132 + 40) = v131;

      goto LABEL_101;
    }

    if (os_signpost_enabled(v110))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v111,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine NWActivity _submitMessage",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    uint64_t v112 = objc_claimAutoreleasedReturnValue( [*(id *)(v135 + 32) _submitMessage:*(void *)(*(void *)(*(void *)(v135 + 56) + 8) + 40) groupType:*(void *)(v135 + 72) forProcessToken:*(void *)(v135 + 40)]);
    uint64_t v113 = *(void *)(*(void *)(v135 + 64) + 8LL);
    __int128 v114 = *(void **)(v113 + 40);
    *(void *)(v113 + 40) = v112;

    id v115 = WALogCategoryDefaultHandle();
    uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
    if (!os_signpost_enabled(v116))
    {
LABEL_101:

      goto LABEL_102;
    }

    *(_WORD *)buf = 0;
    v117 = "Engine NWActivity _submitMessage";
LABEL_100:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v116,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  v117,  (const char *)&unk_1000B76E7,  buf,  2u);
    goto LABEL_101;
  }

void sub_10005C9B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if ([v6 code] == (id)9021
      || [v7 code] == (id)9022
      || [v7 code] == (id)9023
      || [v7 code] == (id)9024
      || [v7 code] == (id)9025
      || [v7 code] == (id)9026)
    {
      id v8 = WALogCategoryDefaultHandle();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = *(unsigned __int8 *)(a1 + 56);
        int v11 = *(unsigned __int8 *)(a1 + 57);
        int v46 = 136447234;
        id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        __int16 v48 = 1024;
        int v49 = 3609;
        __int16 v50 = 1024;
        int v51 = v10;
        __int16 v52 = 1024;
        int v53 = v11;
        __int16 v54 = 2112;
        id v55 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan, hasLinkChanged %d, hasAssocDoneSuccess %d: %@",  (uint8_t *)&v46,  0x28u);
      }

      switch((unint64_t)[v7 code])
      {
        case 0x233DuLL:
          id v12 = WALogCategoryDefaultHandle();
          int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            int v46 = 136446466;
            id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            __int16 v48 = 1024;
            int v49 = 3612;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeCCAMissing",  (uint8_t *)&v46,  0x12u);
          }

          id v14 = WALogCategoryDefaultHandle();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
            goto LABEL_42;
          }
          LOWORD(v46) = 0;
          id v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeCCAMissing";
          break;
        case 0x233EuLL:
          id v35 = WALogCategoryDefaultHandle();
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            int v46 = 136446466;
            id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            __int16 v48 = 1024;
            int v49 = 3616;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeRSSIMissing",  (uint8_t *)&v46,  0x12u);
          }

          id v37 = WALogCategoryDefaultHandle();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
            goto LABEL_42;
          }
          LOWORD(v46) = 0;
          id v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeRSSIMissing";
          break;
        case 0x233FuLL:
          id v26 = WALogCategoryDefaultHandle();
          __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            int v46 = 136446466;
            id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            __int16 v48 = 1024;
            int v49 = 3620;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeTxRxFrameCountersMissing",  (uint8_t *)&v46,  0x12u);
          }

          id v28 = WALogCategoryDefaultHandle();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
            goto LABEL_42;
          }
          LOWORD(v46) = 0;
          id v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeTxRxFrameCountersMissing";
          break;
        case 0x2340uLL:
          id v29 = WALogCategoryDefaultHandle();
          unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            int v46 = 136446466;
            id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            __int16 v48 = 1024;
            int v49 = 3624;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeTxLatencyBeMissing",  (uint8_t *)&v46,  0x12u);
          }

          id v31 = WALogCategoryDefaultHandle();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
            goto LABEL_42;
          }
          LOWORD(v46) = 0;
          id v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeTxLatencyBeMissing";
          break;
        case 0x2341uLL:
          id v32 = WALogCategoryDefaultHandle();
          uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            int v46 = 136446466;
            id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            __int16 v48 = 1024;
            int v49 = 3628;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeTxCompletionsMissing",  (uint8_t *)&v46,  0x12u);
          }

          id v34 = WALogCategoryDefaultHandle();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
            goto LABEL_42;
          }
          LOWORD(v46) = 0;
          id v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeTxCompletionsMissing";
          break;
        case 0x2342uLL:
          id v38 = WALogCategoryDefaultHandle();
          uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            int v46 = 136446466;
            id v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            __int16 v48 = 1024;
            int v49 = 3632;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeHEVHTMCSMissing",  (uint8_t *)&v46,  0x12u);
          }

          id v40 = WALogCategoryDefaultHandle();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
            goto LABEL_42;
          }
          LOWORD(v46) = 0;
          id v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeHEVHTMCSMissing";
          break;
        default:
          goto LABEL_43;
      }

      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, v16, (uint8_t *)&v46, 2u);
LABEL_42:
    }

void sub_10005D7F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10005D81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  0LL);
  }
  id v4 = WALogCategoryDefaultHandle();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    id v14 = "-[WAEngine _convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:forProcessToken:andReply:]_block_invoke";
    __int16 v15 = 1024;
    int v16 = 3743;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to reply percentileWiFiStats",  buf,  0x12u);
  }

  NSErrorUserInfoKey v11 = NSLocalizedFailureReasonErrorKey;
  id v12 = @"WAErrorCodeInternalError";
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v6));
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005ED4C(_Unwind_Exception *a1)
{
}

void sub_10005EDBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = WALogCategoryDefaultHandle();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446722;
    int v10 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v11 = 1024;
    int v12 = 3910;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:made DPSR %@ ",  (uint8_t *)&v9,  0x1Cu);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v3;
  id v8 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10005EEB8(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136446466;
    id v5 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = 3935;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:kSendReportAfterDelay expired",  (uint8_t *)&v4,  0x12u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10005EF78(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)buf = 136446722;
    id v35 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v36 = 1024;
    int v37 = 3966;
    __int16 v38 = 1024;
    int v39 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS Study: Instance %d : start",  buf,  0x18u);
  }

  uint64_t v5 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v5)
  {
    if (*(void *)(a1 + 88) == v5)
    {
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [*(id *)(*(void *)(a1 + 32) + 168) setObject:v6 forKeyedSubscript:@"decisionInstance"];
    }

    else
    {
      if (*(void *)(a1 + 96) - 1LL != v5) {
        goto LABEL_10;
      }
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [*(id *)(*(void *)(a1 + 32) + 168) setObject:v6 forKeyedSubscript:@"LastInstance"];
    }
  }

  else
  {
    __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(*(void *)(a1 + 32) + 168) setObject:v6 forKeyedSubscript:@"firstInstance"];
  }

LABEL_10:
  int v7 = (id *)(a1 + 32);
  unsigned __int8 v8 = [*(id *)(a1 + 32) isWiFiAssociatedToNetwork];
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  if (*(_BYTE *)(v9 + 24)) {
    unsigned __int8 v10 = v8;
  }
  else {
    unsigned __int8 v10 = 0;
  }
  *(_BYTE *)(v9 + 24) = v10;
  unsigned __int8 v11 = [*v7 isWiFiInterfacePrimary];
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  if (*(_BYTE *)(v12 + 24)) {
    unsigned __int8 v13 = v11;
  }
  else {
    unsigned __int8 v13 = 0;
  }
  *(_BYTE *)(v12 + 24) = v13;
  id v14 = (id *)*v7;
  if (*((_BYTE *)*v7 + 42))
  {
    unint64_t v15 = *(unsigned int *)(a1 + 112);
    if ((v15 & 1) != 0)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 112);
    }

    else
    {
      int v7 = (id *)objc_claimAutoreleasedReturnValue([v14[22] preferences]);
      if ((unint64_t)objc_msgSend(v7, "dns_symptoms_trap_evaluated_at_sample") > v15)
      {

        goto LABEL_29;
      }

      unsigned int v16 = *(_DWORD *)(a1 + 112);
      id v14 = *(id **)(a1 + 32);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v14[22] preferences]);
    if ((unint64_t)objc_msgSend(v17, "dns_symptoms_trap_evaluated_at_sample") <= v16)
    {
      BOOL v18 = (v15 & 1) == 0;
      unsigned int v19 = [*(id *)(a1 + 32) isWiFiInterfacePrimary];

      if (v18)
      {

        if ((v19 & 1) == 0) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }

      if (v19)
      {
LABEL_29:
        [*(id *)(a1 + 32) triggerDiagnosticPingWithrequestId:*(unsigned int *)(a1 + 112)];
        [*(id *)(a1 + 32) fetchSymptomsScores:*(unsigned int *)(a1 + 112)];
      }
    }

    else
    {

      if ((v15 & 1) == 0) {
    }
      }
  }

void sub_10005F2F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10005F31C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  unsigned __int8 v8 = (dispatch_queue_s *)WeakRetained[65];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10005F43C;
  v15[3] = &unk_1000CD550;
  id v16 = v6;
  id v17 = v5;
  uint64_t v9 = *(void *)(a1 + 56);
  id v18 = WeakRetained;
  uint64_t v22 = v9;
  uint64_t v24 = *(void *)(a1 + 80);
  id v19 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  int v25 = *(_DWORD *)(a1 + 88);
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 48);
  id v20 = v10;
  uint64_t v21 = v11;
  uint64_t v12 = WeakRetained;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v8, v15);
}

void sub_10005F43C(uint64_t a1)
{
  uint64_t v82 = 0LL;
  uint64_t v83 = &v82;
  uint64_t v84 = 0x3032000000LL;
  double v85 = sub_10004B8C4;
  id v86 = sub_10004B8D4;
  id v87 = 0LL;
  if (*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fieldForKey:@"DPSCS_peerStats"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 subMessageValue]);
  BOOL v4 = v3 == 0LL;

  if (!v4)
  {
    id v5 = *(void **)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fieldForKey:@"DPSCS_peerStats"]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 subMessageValue]);
    [v5 _examinePeerMessageForIntegrity:v7];
  }

  if (*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fieldForKey:@"DPSCS_peerStats"]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 subMessageValue]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 fieldForKey:@"NWAPS_ccas"]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 repeatableValues]);
  BOOL v12 = [v11 count] == 0;

  if (v12)
  {
    id v14 = WALogCategoryDefaultHandle();
    unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fieldForKey:@"DPSCS_peerStats"]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 subMessageValue]);
      *(_DWORD *)buf = 136446722;
      id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke_2";
      __int16 v92 = 1024;
      int v93 = 4005;
      __int16 v94 = 2112;
      __int128 v95 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to get CCA %@",  buf,  0x1Cu);
    }

    NSErrorUserInfoKey v88 = NSLocalizedFailureReasonErrorKey;
    id v89 = @"WAErrorCodeCCAMissing";
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v89,  &v88,  1LL));
    uint64_t v19 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9021LL,  v18));
    uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;

    int v13 = 1;
  }

  else
  {
    int v13 = 0;
  }

  if (*(void *)(a1 + 32))
  {
LABEL_11:
    id v22 = WALogCategoryDefaultHandle();
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v92 = 1024;
      int v93 = 4012;
      __int16 v94 = 2112;
      __int128 v95 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Got error retrieving DPSCS due to %@",  buf,  0x1Cu);
    }

    uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v27 = *(void *)(v25 + 40);
    id v26 = (id *)(v25 + 40);
    if (!v27)
    {
      objc_storeStrong(v26, *(id *)(a1 + 32));
      id v28 = WALogCategoryDefaultHandle();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
        *(_DWORD *)buf = 136446722;
        id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v92 = 1024;
        int v93 = 4016;
        __int16 v94 = 2112;
        __int128 v95 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr will return %@",  buf,  0x1Cu);
      }
    }

    int v13 = 1;
  }

  if (*(_BYTE *)(*(void *)(a1 + 48) + 51LL))
  {
    id v31 = WALogCategoryDefaultHandle();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v92 = 1024;
      int v93 = 4022;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Setting shouldRetry to true due to debug command kWAIORCommandForceStudyErrorFromMsg",  buf,  0x12u);
    }

    *(_BYTE *)(*(void *)(a1 + 48) + 51LL) = 0;
  }

  else if (!v13)
  {
    id v68 = [*(id *)(a1 + 40) copy];
    __int16 v36 = (void *)v83[5];
    v83[5] = (uint64_t)v68;
    goto LABEL_35;
  }

  id v33 = WALogCategoryDefaultHandle();
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v92 = 1024;
    int v93 = 4030;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attempting Rescan", buf, 0x12u);
  }

  id v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  __int16 v36 = v35;
  if (*(void *)(*(void *)(a1 + 48) + 664) && (objc_msgSend(v35, "timeIntervalSinceDate:"), v37 > 30.0))
  {
    id v38 = WALogCategoryDefaultHandle();
    int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v92 = 1024;
      int v93 = 4034;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Attemping determineChannelsPerIORPopulatable",  buf,  0x12u);
    }

    id v40 = WALogCategoryDefaultHandle();
    id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_signpost_enabled(v41))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "Engine DPSCS MissingChannelsRepopulate",  (const char *)&unk_1000B76E7,  buf,  2u);
    }

    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) iorMessagePopulator]);
    [v42 determineChannelsPerIORPopulatable];

    uint64_t v43 = *(void *)(a1 + 96);
    int v45 = *(void **)(a1 + 48);
    uint64_t v44 = *(void *)(a1 + 56);
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472LL;
    v77[2] = sub_10005FDAC;
    v77[3] = &unk_1000CD708;
    uint64_t v80 = *(void *)(a1 + 80);
    id v81 = &v82;
    id v78 = *(id *)(a1 + 40);
    id v79 = *(id *)(a1 + 64);
    [v45 _getNewMessageForKey:@"DPSCS" groupType:v43 forProcessToken:v44 shouldCheckForPrePopulation:1 andReply:v77];
    objc_storeStrong((id *)(*(void *)(a1 + 48) + 664LL), v36);
  }

  else
  {
    id v46 = WALogCategoryDefaultHandle();
    id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      __int16 v48 = *(void **)(*(void *)(a1 + 48) + 664LL);
      *(_DWORD *)buf = 136446722;
      id v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v92 = 1024;
      int v93 = 4060;
      __int16 v94 = 2112;
      __int128 v95 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Rescanned too recently, waiting for 30s to elapse since last check at %@",  buf,  0x1Cu);
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
  }

void sub_10005FD84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10005FDAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = 0LL;

    id v17 = WALogCategoryDefaultHandle();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      int v24 = 136446722;
      uint64_t v25 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v26 = 1024;
      int v27 = 4043;
      __int16 v28 = 2112;
      id v29 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr reset %@",  (uint8_t *)&v24,  0x1Cu);
    }

    id v20 = [*(id *)(a1 + 32) copy];
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8LL);
    int v13 = *(os_log_s **)(v21 + 40);
    *(void *)(v21 + 40) = v20;
    goto LABEL_10;
  }

  id v7 = WALogCategoryDefaultHandle();
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    int v24 = 136446722;
    uint64_t v25 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v26 = 1024;
    int v27 = 4047;
    __int16 v28 = 2112;
    id v29 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:DPSCS retry still has error %@",  (uint8_t *)&v24,  0x1Cu);
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v11 = *(void *)(v9 + 40);
  id v10 = (id *)(v9 + 40);
  if (!v11)
  {
    objc_storeStrong(v10, a3);
    id v12 = WALogCategoryDefaultHandle();
    int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      int v24 = 136446722;
      uint64_t v25 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v26 = 1024;
      int v27 = 4051;
      __int16 v28 = 2112;
      id v29 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr will return %@",  (uint8_t *)&v24,  0x1Cu);
    }

void sub_100060044(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v7 + 42))
  {
    unsigned __int8 v8 = *(void **)(v7 + 184);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 subMessageValue]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 fieldForKey:@"DPSE_symptomsDnsStats"]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 subMessageValue]);
    *(_BYTE *)(*(void *)(a1 + 32) + 47) |= [v8 checkAWDLActivity:v5 symptomsDnsStats:v12];
  }

  if (v6)
  {
    id v13 = WALogCategoryDefaultHandle();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136446466;
      uint64_t v19 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v20 = 1024;
      int v21 = 4080;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:error populating DPSR_snapshot",  (uint8_t *)&v18,  0x12u);
    }

void sub_100060290(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = (char *)*(unsigned int *)(a1 + 88);
    if (*(_BYTE *)(v4 + 42))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 176) preferences]);
      uint64_t v7 = (char *)objc_msgSend(v6, "dns_symptoms_trap_evaluated_at_sample") - 1;

      if (v7 != v5) {
        goto LABEL_111;
      }
      unsigned int v8 = [*(id *)(a1 + 32) isWiFiNetworkCaptive];
      [*(id *)(a1 + 32) computeAverageCcaSinceStudyStart:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      id v9 = WALogCategoryDefaultHandle();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = "YES";
        if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)) {
          id v12 = "YES";
        }
        else {
          id v12 = "NO";
        }
        if (*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)) {
          id v13 = "YES";
        }
        else {
          id v13 = "NO";
        }
        if (v8) {
          id v14 = "YES";
        }
        else {
          id v14 = "NO";
        }
        if (!*(_BYTE *)(a1 + 92)) {
          uint64_t v11 = "NO";
        }
        *(_DWORD *)buf = 136447490;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v134 = 1024;
        int v135 = 4235;
        __int16 v136 = 2080;
        uint64_t v137 = v12;
        __int16 v138 = 2080;
        uint64_t v139 = v13;
        __int16 v140 = 2080;
        int v141 = (void *)v14;
        __int16 v142 = 2080;
        __int128 v143 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DNS Symptoms pre-decision check:: Associated:%s Primary:%s isCaptive:%s isValidDnsConfig:%s",  buf,  0x3Au);
      }

      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
      {
        id v55 = WALogCategoryDefaultHandle();
        id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v134 = 1024;
          int v135 = 4248;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: WiFi Not Associated - setting suppressedReason kSymptomsDnsWiFiDisassociatedDuringStudy",  buf,  0x12u);
        }

        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s subMessageValue](v19, "subMessageValue"));
        int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 fieldForKey:@"DPSE_symptomsDnsStats"]);
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 subMessageValue]);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
        int v24 = v23;
        uint64_t v25 = 6LL;
        goto LABEL_60;
      }

      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)) {
        char v15 = v8;
      }
      else {
        char v15 = 1;
      }
      if ((v15 & 1) != 0)
      {
        if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL))
        {
          id v66 = WALogCategoryDefaultHandle();
          __int128 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            __int16 v134 = 1024;
            int v135 = 4252;
            _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: WiFi Not Primary - setting suppressedReason kSymptomsDnsWiFiInterfaceNotPrimary",  buf,  0x12u);
          }

          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s subMessageValue](v19, "subMessageValue"));
          int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 fieldForKey:@"DPSE_symptomsDnsStats"]);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 subMessageValue]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
          int v24 = v23;
          uint64_t v25 = 8LL;
          goto LABEL_60;
        }

        int v16 = *(unsigned __int8 *)(a1 + 92);
        id v17 = WALogCategoryDefaultHandle();
        int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        uint64_t v19 = v18;
        if (v16)
        {
          if (!v8)
          {
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              __int16 v134 = 1024;
              int v135 = 4263;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:SDNS: Unhandled running conditions",  buf,  0x12u);
            }

            goto LABEL_61;
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            __int16 v134 = 1024;
            int v135 = 4260;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: WiFi is Captive - setting suppressedReason kSymptomsDnsWiFiNetworkIsCaptive",  buf,  0x12u);
          }

          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s subMessageValue](v19, "subMessageValue"));
          int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 fieldForKey:@"DPSE_symptomsDnsStats"]);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 subMessageValue]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
          int v24 = v23;
          uint64_t v25 = 9LL;
LABEL_60:
          [v23 setInt32Value:v25];

LABEL_61:
          id v65 = 0LL;
          goto LABEL_62;
        }
      }

      else
      {
        int v57 = *(unsigned __int8 *)(a1 + 92);
        id v58 = WALogCategoryDefaultHandle();
        uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
        uint64_t v19 = v59;
        if (v57)
        {
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            __int16 v134 = 1024;
            int v135 = 4238;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: WiFi Not Primary - setting suppressedReason kSymptomsDnsWiFiInterfaceNotPrimary",  buf,  0x12u);
          }

          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dpsQuickRecoveryEngine]);
          BOOL v60 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
          id v61 = (void *)objc_claimAutoreleasedReturnValue([v60 subMessageValue]);
          id v62 = (void *)objc_claimAutoreleasedReturnValue([v61 fieldForKey:@"DPSE_symptomsDnsStats"]);
          uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v62 subMessageValue]);
          uint64_t v64 = *(void *)(a1 + 32);
          LODWORD(v119) = *(void *)(v64 + 240);
          id v65 = -[os_log_s recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:]( v19,  "recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptomsCondition:isLANPingSuccessful:a ppUsage:averageCCA:",  0LL,  v63,  *(unsigned __int8 *)(v64 + 47),  *(unsigned __int8 *)(v64 + 44),  *(unsigned __int8 *)(v64 + 46),  *(unsigned __int8 *)(v64 + 41),  v119);

LABEL_62:
          id v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceNameToApple80211InstanceMap]);
          id v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v68 objectForKeyedSubscript:v69]);

          if (!v70) {
            [*(id *)(a1 + 32) queryInfraInterfaceInstanceAndChip];
          }
          if (v65 == (id)2)
          {
            id v78 = WALogCategoryDefaultHandle();
            id v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              __int16 v134 = 1024;
              int v135 = 4276;
              _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: Triggering Reassoc for symptoms-dps",  buf,  0x12u);
            }

            id v80 = WALogCategoryDefaultHandle();
            id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              __int16 v134 = 1024;
              int v135 = 4277;
              _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: Recommendation - kSymptomsdDPSReassoc, triggering reassoc wiith reason ReassociateOnDNSSymptoms",  buf,  0x12u);
            }

            *(_DWORD *)(*(void *)(a1 + 32) + 60LL) |= 0x80u;
            uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceNameToApple80211InstanceMap]);
            int v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
            uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:v76]);
            [v77 triggerReassociation:@"ReassociateOnDNSSymptoms"];
          }

          else
          {
            if (v65 != (id)1)
            {
              id v84 = WALogCategoryDefaultHandle();
              double v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446466;
                v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
                __int16 v134 = 1024;
                int v135 = 4281;
                _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: No Recovery Action recommended for symptoms-dps",  buf,  0x12u);
              }

              id v86 = WALogCategoryDefaultHandle();
              uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(v86);
              if (os_log_type_enabled((os_log_t)v75, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446466;
                v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
                __int16 v134 = 1024;
                int v135 = 4282;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v75,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: No Recommendation",  buf,  0x12u);
              }

              goto LABEL_77;
            }

            id v71 = WALogCategoryDefaultHandle();
            int v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              __int16 v134 = 1024;
              int v135 = 4271;
              _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiagnostics: Triggering Trap for symptoms-dps",  buf,  0x12u);
            }

            id v73 = WALogCategoryDefaultHandle();
            uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              __int16 v134 = 1024;
              int v135 = 4272;
              _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: Recommendation - WASymptomsDpsRecommendDoReset, triggering DpsReset with reason TrapOnDNSSymptoms",  buf,  0x12u);
            }

            *(_DWORD *)(*(void *)(a1 + 32) + 60LL) |= 0x40u;
            uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceNameToApple80211InstanceMap]);
            int v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
            uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:v76]);
            [v77 triggerDpsReset:@"TrapOnDNSSymptoms"];
          }

LABEL_77:
          id v82 = WALogCategoryDefaultHandle();
          uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            __int16 v134 = 1024;
            int v135 = 4284;
            _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Persisting after DNS symptoms recovery decision",  buf,  0x12u);
          }

          [*(id *)(a1 + 32) persist];
          goto LABEL_111;
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v134 = 1024;
        int v135 = 4256;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDNS: DNS Config Not Valid - setting suppressedReason kSymptomsDnsServerConfigurationInvalid",  buf,  0x12u);
      }

      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s subMessageValue](v19, "subMessageValue"));
      int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 fieldForKey:@"DPSE_symptomsDnsStats"]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 subMessageValue]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 fieldForKey:@"WFAAWDWASDS_suppressedReason"]);
      int v24 = v23;
      uint64_t v25 = 10LL;
      goto LABEL_60;
    }

    __int16 v28 = &off_100092000;
    if ((_DWORD)v5 != 1
      || !*(void *)(a1 + 40)
      || (id v29 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"DPSR_dpsCounterSamples"]),
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 repeatableValues]),
          id v31 = [v30 count],
          v30,
          v29,
          uint64_t v4 = *(void *)(a1 + 32),
          (unint64_t)v31 < 2))
    {
LABEL_110:
      uint64_t v116 = *(void **)(v4 + 176);
      v117 = *(void **)(a1 + 48);
      uint64_t v118 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      v128[0] = _NSConcreteStackBlock;
      v128[1] = *((void *)v28 + 355);
      v128[2] = sub_1000616C0;
      v128[3] = &unk_1000CD5C8;
      uint64_t v130 = *(void *)(a1 + 72);
      v128[4] = v4;
      id v129 = v117;
      [v116 recommendActionFromData:v118 andReply:v128];

      goto LABEL_111;
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100061660;
    block[3] = &unk_1000CCD80;
    void block[4] = v4;
    if (qword_1000ED020 != -1) {
      dispatch_once(&qword_1000ED020, block);
    }
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      id v92 = WALogCategoryDefaultHandle();
      int v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v134 = 1024;
        int v135 = 4166;
        _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Aborting DPS recovery since WiFi got disassociated atleast once since initial trigger",  buf,  0x12u);
      }

      __int16 v94 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
      __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v94 subMessageValue]);
      uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v95 fieldForKey:@"DPSE_qDpsStats"]);
      id v97 = (void *)objc_claimAutoreleasedReturnValue([v96 subMessageValue]);
      id v98 = (void *)objc_claimAutoreleasedReturnValue([v97 fieldForKey:@"WFAAWDWAQDS_suppressedReason"]);
      [v98 setInt32Value:4];

      goto LABEL_109;
    }

    uint64_t v123 = *(void **)(a1 + 40);
    uint32_t v127 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsCounterSamples"]);
    os_log_type_t v126 = (void *)objc_claimAutoreleasedReturnValue([v127 repeatableValues]);
    v120 = (void *)objc_claimAutoreleasedReturnValue([v126 objectAtIndex:0]);
    __int16 v125 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsCounterSamples"]);
    id v124 = (void *)objc_claimAutoreleasedReturnValue([v125 repeatableValues]);
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v124 objectAtIndex:1]);
    uint64_t v121 = *(void *)(*(void *)(a1 + 32) + 536LL);
    int v122 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v122 subMessageValue]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 fieldForKey:@"DPSE_qDpsStats"]);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 subMessageValue]);
    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiChipSet]);
    double v37 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_snapshot"]);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 subMessageValue]);
    LODWORD(v119) = [*(id *)(a1 + 32) dpsNotificationCCA];
    id v39 = [v123 recommendReset:v120 currentSample:v32 acList:v121 qDpsStat:v35 chipNumber:v36 dpsSnapshot:v38 originalCCA:v119];

    id v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v40 timeIntervalSince1970];
    double v42 = v41;

    unint64_t v43 = *(void *)(*(void *)(a1 + 32) + 200LL);
    if (v42 > (double)v43)
    {
      unint64_t v44 = (unint64_t)v42 - v43;
      id v45 = WALogCategoryDefaultHandle();
      id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke_2";
        __int16 v134 = 1024;
        int v135 = 4138;
        __int16 v136 = 1024;
        LODWORD(v137) = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Time elapsed since original dps detection: %d seconds",  buf,  0x18u);
      }

      if (v39 == (id)1 && v44 <= 5)
      {
        id v47 = WALogCategoryDefaultHandle();
        __int16 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v134 = 1024;
          int v135 = 4142;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Reseting (fast reset recovery)... to recover from DPS at 6s stall checkpoint.",  buf,  0x12u);
        }

        int v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceNameToApple80211InstanceMap]);
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
        uint64_t v51 = objc_claimAutoreleasedReturnValue([v49 objectForKeyedSubscript:v50]);
        __int16 v28 = &off_100092000;
        if (v51)
        {
          BOOL v52 = (void *)v51;
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiChipSet]);
          unsigned int v54 = [v53 isEqualToString:&stru_1000CF610];

          if (!v54) {
            goto LABEL_99;
          }
        }

        else
        {
        }

        [*(id *)(a1 + 32) queryInfraInterfaceInstanceAndChip];
LABEL_99:
        *(_DWORD *)(*(void *)(a1 + 32) + 60LL) |= 4u;
        id v102 = WALogCategoryDefaultHandle();
        id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v104 = (char *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiChipSet]);
          uint64_t v105 = (char *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
          __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceNameToApple80211InstanceMap]);
          id v107 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
          __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:v107]);
          *(_DWORD *)buf = 136447234;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          id v109 = @"Yes";
          __int16 v134 = 1024;
          int v135 = 4150;
          if (!v108) {
            id v109 = @"No";
          }
          __int16 v136 = 2112;
          uint64_t v137 = v104;
          __int16 v138 = 2112;
          uint64_t v139 = v105;
          __int16 v140 = 2112;
          int v141 = (void *)v109;
          _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Triggering Trap for Quick DPS in chip:%@ interface:%@ apple80211InstanceValid:%@",  buf,  0x30u);
        }

        id v110 = WALogCategoryDefaultHandle();
        id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v134 = 1024;
          int v135 = 4152;
          _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:QDPS: Recommendation - kFastDPSWatchdog, triggering DpsReset with reason TrapOnQuickDPS",  buf,  0x12u);
        }

        NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceNameToApple80211InstanceMap]);
        uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) infraInterfaceName]);
        uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForKeyedSubscript:v112]);
        [v113 triggerDpsReset:@"TrapOnQuickDPS"];

        goto LABEL_106;
      }
    }

    if (v39 == (id)2)
    {
      *(_DWORD *)(*(void *)(a1 + 32) + 60LL) |= 0x10u;
      id v87 = WALogCategoryDefaultHandle();
      NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
      __int16 v28 = &off_100092000;
      if (!os_log_type_enabled((os_log_t)v88, OS_LOG_TYPE_DEFAULT))
      {
LABEL_106:

        id v114 = WALogCategoryDefaultHandle();
        id v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v134 = 1024;
          int v135 = 4163;
          _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Persisting after Quick DPS recovery decision",  buf,  0x12u);
        }

        [*(id *)(a1 + 32) persist];
LABEL_109:
        uint64_t v4 = *(void *)(a1 + 32);
        goto LABEL_110;
      }

      *(_DWORD *)buf = 136446466;
      v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v134 = 1024;
      int v135 = 4157;
      id v89 = "%{public}s::%d:QDPS: No Watchdog Budget";
      id v90 = (os_log_s *)v88;
      os_log_type_t v91 = OS_LOG_TYPE_DEFAULT;
    }

    else
    {
      id v99 = WALogCategoryDefaultHandle();
      id v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
      __int16 v28 = &off_100092000;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v134 = 1024;
        int v135 = 4159;
        _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Aborting Quick DPS recovery action due to notification/study delay",  buf,  0x12u);
      }

      id v101 = WALogCategoryDefaultHandle();
      NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue(v101);
      if (!os_log_type_enabled((os_log_t)v88, OS_LOG_TYPE_ERROR)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446466;
      v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v134 = 1024;
      int v135 = 4161;
      id v89 = "%{public}s::%d:QDPS: Unhandled case";
      id v90 = (os_log_s *)v88;
      os_log_type_t v91 = OS_LOG_TYPE_ERROR;
    }

    _os_log_impl((void *)&_mh_execute_header, v90, v91, v89, buf, 0x12u);
    goto LABEL_106;
  }

  id v26 = WALogCategoryDefaultHandle();
  int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "nil message passed in to recommendActionFromData",  buf,  2u);
  }

LABEL_111:
  objc_autoreleasePoolPop(v2);
}

void sub_100061660(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiChipSet]);
  unsigned int v3 = [v2 isEqualToString:&stru_1000CF610];

  if (v3) {
    [*(id *)(a1 + 32) queryInfraInterfaceInstanceAndChip];
  }
}

void sub_1000616C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  switch(a2)
  {
    case 0LL:
      id v6 = WALogCategoryDefaultHandle();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v33 = 136446466;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4175;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendNull", v33, 0x12u);
      }

      if ([v5 isEqualToString:@"dps_wd_cca"])
      {
        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:@"SlowDpsCcaThreshold" forKeyedSubscript:@"sDpsSuppressionReason"];
        id v8 = WALogCategoryDefaultHandle();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_23;
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:@"sDpsSuppressionReason"]);
        *(_DWORD *)id v33 = 136446722;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4179;
        *(_WORD *)&v33[18] = 2112;
        *(void *)&v33[20] = v10;
        uint64_t v11 = "%{public}s::%d:SDPS: No Recommendation - setting suppressedReason %@";
      }

      else
      {
        if (![v5 isEqualToString:&stru_1000CF610])
        {
          id v32 = WALogCategoryDefaultHandle();
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v33 = 136446466;
            *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            *(_WORD *)&v33[12] = 1024;
            *(_DWORD *)&v33[14] = 4184;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDPS: No Recommendation",  v33,  0x12u);
          }

          goto LABEL_23;
        }

        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:@"SlowDpsRecoveryObserved" forKeyedSubscript:@"sDpsSuppressionReason"];
        id v28 = WALogCategoryDefaultHandle();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_23;
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:@"sDpsSuppressionReason"]);
        *(_DWORD *)id v33 = 136446722;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4182;
        *(_WORD *)&v33[18] = 2112;
        *(void *)&v33[20] = v10;
        uint64_t v11 = "%{public}s::%d:SDPS: No Recommendation - setting suppressedReason %@";
      }

      goto LABEL_22;
    case 1LL:
      id v12 = WALogCategoryDefaultHandle();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v33 = 136446466;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4189;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendFullCapture",  v33,  0x12u);
      }

      id v14 = WALogCategoryDefaultHandle();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v33 = 136446722;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4190;
        *(_WORD *)&v33[18] = 2112;
        *(void *)&v33[20] = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDPS: Recommend Full Capture, with classification %@",  v33,  0x1Cu);
      }

      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 504), "__dumpCoreCaptureLogsWithReason:", v5);
      goto LABEL_24;
    case 2LL:
      id v16 = WALogCategoryDefaultHandle();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v33 = 136446466;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4195;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendTrapWatchdog",  v33,  0x12u);
      }

      int v18 = *(_DWORD *)(*(void *)(a1 + 32) + 60LL);
      id v19 = WALogCategoryDefaultHandle();
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      int v21 = v20;
      if ((v18 & 4) != 0)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)id v33 = 136446466;
          *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 4197;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Fast DPS already triggered, not proceeding with WARecommendTrapWatchdog",  v33,  0x12u);
        }

        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:@"SlowDpsAbortedSinceQDpsTriggered" forKeyedSubscript:@"sDpsSuppressionReason"];
        id v29 = WALogCategoryDefaultHandle();
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:@"sDpsSuppressionReason"]);
          *(_DWORD *)id v33 = 136446722;
          *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 4200;
          *(_WORD *)&v33[18] = 2112;
          *(void *)&v33[20] = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDPS: Recommendation WARecommendTrapWatchdog - setting suppressedReason %@",  v33,  0x1Cu);
        }
      }

      else
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v33 = 136446722;
          *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 4202;
          *(_WORD *)&v33[18] = 2112;
          *(void *)&v33[20] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SDPS: Recommendation WARecommendTrapWatchdog - triggering DpsReset with reason %@",  v33,  0x1Cu);
        }

        [*(id *)(a1 + 32) _trapFWWithReason:v5 andReply:*(void *)(a1 + 40)];
        *(_DWORD *)(*(void *)(a1 + 32) + 60LL) |= 2u;
      }

      uint64_t v25 = &__kCFBooleanTrue;
      goto LABEL_25;
    case 3LL:
      id v22 = WALogCategoryDefaultHandle();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v33 = 136446466;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4210;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WARecommendNoneNoWatchdogBudget",  v33,  0x12u);
      }

      *(_DWORD *)(*(void *)(a1 + 32) + 60LL) |= 8u;
      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:@"SlowDpsNoBudget" forKeyedSubscript:@"sDpsSuppressionReason"];
      id v24 = WALogCategoryDefaultHandle();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:@"sDpsSuppressionReason"]);
        *(_DWORD *)id v33 = 136446722;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4215;
        *(_WORD *)&v33[18] = 2112;
        *(void *)&v33[20] = v10;
        uint64_t v11 = "%{public}s::%d:SDPS: No Watchdog Budget - setting suppressedReason %@";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, v33, 0x1Cu);
      }

LABEL_23:
      goto LABEL_24;
    default:
LABEL_24:
      uint64_t v25 = &__kCFBooleanFalse;
LABEL_25:
      objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  "setObject:forKeyedSubscript:",  v25,  @"sDpsStudyRecommendation",  *(_OWORD *)v33,  *(_OWORD *)&v33[16]);
      id v26 = WALogCategoryDefaultHandle();
      int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v33 = 136446466;
        *(void *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4223;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Persisting after Slow DPS recovery decision",  v33,  0x12u);
      }

      [*(id *)(a1 + 32) persist];
      return;
  }

void sub_100061E58(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 subMessageValue]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"DPSE_isAssociatedAtStudyEnd"]);
  objc_msgSend(v4, "setBoolValue:", objc_msgSend(*(id *)(a1 + 32), "isWiFiAssociatedToNetwork"));

  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 subMessageValue]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 fieldForKey:@"DPSE_discoveredPeerInfo"]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 subMessageValue]);
  [v5 gatherDiscoveredPeerInfo:v9];

  __int128 v178 = 0u;
  __int128 v179 = 0u;
  __int128 v176 = 0u;
  __int128 v177 = 0u;
  uint64_t v158 = a1;
  id v10 = *(id *)(*(void *)(a1 + 32) + 536LL);
  id v11 = [v10 countByEnumeratingWithState:&v176 objects:v194 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v177;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v177 != v13) {
          objc_enumerationMutation(v10);
        }
        char v15 = *(void **)(*((void *)&v176 + 1) + 8LL * (void)i);
        id v16 = WALogCategoryDefaultHandle();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v182 = 1024;
          int v183 = 4304;
          __int16 v184 = 2112;
          uint64_t v185 = (uint64_t)v15;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached DPSR_stallNotifications: %@",  buf,  0x1Cu);
        }

        int v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_stallNotifications"]);
        [v18 addRepeatableSubMessageValue:v15];
      }

      id v12 = [v10 countByEnumeratingWithState:&v176 objects:v194 count:16];
    }

    while (v12);
  }

  __int128 v174 = 0u;
  __int128 v175 = 0u;
  __int128 v172 = 0u;
  __int128 v173 = 0u;
  id v19 = *(id *)(*(void *)(v158 + 32) + 544LL);
  id v20 = [v19 countByEnumeratingWithState:&v172 objects:v193 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v173;
    do
    {
      for (j = 0LL; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v173 != v22) {
          objc_enumerationMutation(v19);
        }
        id v24 = *(void **)(*((void *)&v172 + 1) + 8LL * (void)j);
        id v25 = WALogCategoryDefaultHandle();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v182 = 1024;
          int v183 = 4309;
          __int16 v184 = 2112;
          uint64_t v185 = (uint64_t)v24;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached DPSR_probeResults: %@",  buf,  0x1Cu);
        }

        int v27 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_probeResults"]);
        [v27 addRepeatableSubMessageValue:v24];
      }

      id v21 = [v19 countByEnumeratingWithState:&v172 objects:v193 count:16];
    }

    while (v21);
  }

  uint64_t v28 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v158 + 32) + 552) lastObject]);
  if (v28)
  {
    id v29 = WALogCategoryDefaultHandle();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v182 = 1024;
      int v183 = 4317;
      __int16 v184 = 2112;
      uint64_t v185 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached DPSR_dpsCounterSamples: %@",  buf,  0x1Cu);
    }

    id v31 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsCounterSamples"]);
    [v31 addRepeatableSubMessageValue:v28];
  }

  id v32 = WALogCategoryDefaultHandle();
  id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4321;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DatapathStall Summary!",  buf,  0x12u);
  }

  id v34 = WALogCategoryDefaultHandle();
  id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_stallNotifications"]);
    double v37 = (void *)objc_claimAutoreleasedReturnValue([v36 repeatableValues]);
    id v38 = [v37 count];
    *(_DWORD *)buf = 136446722;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4322;
    __int16 v184 = 2048;
    uint64_t v185 = (uint64_t)v38;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPSR_stallNotifications: %lu",  buf,  0x1Cu);
  }

  id v39 = WALogCategoryDefaultHandle();
  id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    double v41 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_probeResults"]);
    double v42 = (void *)objc_claimAutoreleasedReturnValue([v41 repeatableValues]);
    id v43 = [v42 count];
    *(_DWORD *)buf = 136446722;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4323;
    __int16 v184 = 2048;
    uint64_t v185 = (uint64_t)v43;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPSR_probeResults: %lu",  buf,  0x1Cu);
  }

  __int128 v157 = (void *)v28;

  id v44 = WALogCategoryDefaultHandle();
  id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    id v46 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsCounterSamples"]);
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 repeatableValues]);
    id v48 = [v47 count];
    *(_DWORD *)buf = 136446722;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4324;
    __int16 v184 = 2048;
    uint64_t v185 = (uint64_t)v48;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPSR_dpsCounterSamples: %lu",  buf,  0x1Cu);
  }

  __int128 v170 = 0u;
  __int128 v171 = 0u;
  __int128 v168 = 0u;
  __int128 v169 = 0u;
  id v49 = *(id *)(*(void *)(v158 + 32) + 560LL);
  id v50 = [v49 countByEnumeratingWithState:&v168 objects:v192 count:16];
  if (v50)
  {
    id v51 = v50;
    uint64_t v52 = *(void *)v169;
    do
    {
      for (k = 0LL; k != v51; k = (char *)k + 1)
      {
        if (*(void *)v169 != v52) {
          objc_enumerationMutation(v49);
        }
        unsigned int v54 = *(void **)(*((void *)&v168 + 1) + 8LL * (void)k);
        id v55 = WALogCategoryDefaultHandle();
        id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v182 = 1024;
          int v183 = 4328;
          __int16 v184 = 2112;
          uint64_t v185 = (uint64_t)v54;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached DPSE_associationChanges: %@",  buf,  0x1Cu);
        }

        int v57 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
        id v58 = (void *)objc_claimAutoreleasedReturnValue([v57 subMessageValue]);
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 fieldForKey:@"DPSE_associationChanges"]);
        [v59 addRepeatableSubMessageValue:v54];
      }

      id v51 = [v49 countByEnumeratingWithState:&v168 objects:v192 count:16];
    }

    while (v51);
  }

  __int128 v166 = 0u;
  __int128 v167 = 0u;
  __int128 v165 = 0u;
  __int128 v164 = 0u;
  id v60 = *(id *)(*(void *)(v158 + 32) + 480LL);
  id v61 = [v60 countByEnumeratingWithState:&v164 objects:v191 count:16];
  if (v61)
  {
    id v62 = v61;
    uint64_t v63 = *(void *)v165;
    do
    {
      for (m = 0LL; m != v62; m = (char *)m + 1)
      {
        if (*(void *)v165 != v63) {
          objc_enumerationMutation(v60);
        }
        id v65 = *(void **)(*((void *)&v164 + 1) + 8LL * (void)m);
        id v66 = WALogCategoryDefaultHandle();
        __int128 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v182 = 1024;
          int v183 = 4333;
          __int16 v184 = 2112;
          uint64_t v185 = (uint64_t)v65;
          _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached DPSE_accessPointInfo: %@",  buf,  0x1Cu);
        }

        id v68 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
        id v69 = (void *)objc_claimAutoreleasedReturnValue([v68 subMessageValue]);
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 fieldForKey:@"DPSE_accessPointInfos"]);
        [v70 addRepeatableSubMessageValue:v65];
      }

      id v62 = [v60 countByEnumeratingWithState:&v164 objects:v191 count:16];
    }

    while (v62);
  }

  __int128 v162 = 0u;
  __int128 v163 = 0u;
  __int128 v160 = 0u;
  __int128 v161 = 0u;
  uint64_t v71 = v158;
  id v72 = *(id *)(*(void *)(v158 + 32) + 496LL);
  id v73 = [v72 countByEnumeratingWithState:&v160 objects:v190 count:16];
  if (v73)
  {
    id v74 = v73;
    uint64_t v75 = *(void *)v161;
    do
    {
      for (n = 0LL; n != v74; n = (char *)n + 1)
      {
        if (*(void *)v161 != v75) {
          objc_enumerationMutation(v72);
        }
        uint64_t v77 = *(void **)(*((void *)&v160 + 1) + 8LL * (void)n);
        id v78 = WALogCategoryDefaultHandle();
        id v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          __int16 v182 = 1024;
          int v183 = 4338;
          __int16 v184 = 2112;
          uint64_t v185 = (uint64_t)v77;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached DPSR_usbEvent: %@",  buf,  0x1Cu);
        }

        uint64_t v71 = v158;
        id v80 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v158 + 56) + 8) + 40) fieldForKey:@"DPSR_usbEvents"]);
        [v80 addRepeatableSubMessageValue:v77];
      }

      id v74 = [v72 countByEnumeratingWithState:&v160 objects:v190 count:16];
    }

    while (v74);
  }

  uint64_t v81 = *(void *)(v71 + 32);
  if (*(_BYTE *)(v81 + 42))
  {
    id v82 = *(dispatch_queue_s **)(v81 + 488);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000633A8;
    block[3] = &unk_1000CD618;
    uint64_t v83 = *(void *)(v71 + 80);
    uint64_t v84 = *(void *)(v71 + 56);
    void block[4] = v81;
    void block[5] = v84;
    block[6] = v83;
    dispatch_sync(v82, block);
  }

  else
  {
    double v85 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
    id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 subMessageValue]);
    id v87 = (void *)objc_claimAutoreleasedReturnValue([v86 fieldForKey:@"DPSE_studyType"]);
    [v87 setInt32Value:0];
  }

  NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 subMessageValue]);
  id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 fieldForKey:@"DPSE_action"]);
  [v90 setInt32Value:*(unsigned int *)(*(void *)(v71 + 32) + 60)];

  os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v92 = (void *)objc_claimAutoreleasedReturnValue([v91 subMessageValue]);
  int v93 = (void *)objc_claimAutoreleasedReturnValue([v92 fieldForKey:@"DPSE_actionIntVal"]);
  [v93 setUint32Value:*(unsigned int *)(*(void *)(v71 + 32) + 60)];

  __int16 v94 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v94 subMessageValue]);
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v95 fieldForKey:@"DPSE_timestamp"]);
  objc_msgSend(v96, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  id v97 = WALogCategoryDefaultHandle();
  id v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
  {
    id v99 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
    *(_DWORD *)buf = 136446722;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4404;
    __int16 v184 = 2112;
    uint64_t v185 = (uint64_t)v99;
    _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPSR_dpsEpiloge: %@",  buf,  0x1Cu);
  }

  [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) setMetricID:589928];
  if (*(void *)(v71 + 40))
  {
    id v100 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) submitterMap]);
    id v101 = (void *)objc_claimAutoreleasedReturnValue([v100 objectForKeyedSubscript:*(void *)(v71 + 40)]);
    id v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v71 + 88)));
    id v103 = (void *)objc_claimAutoreleasedReturnValue([v101 objectForKeyedSubscript:v102]);

    if (!v103)
    {
      id v104 = WALogCategoryDefaultHandle();
      uint64_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v182 = 1024;
        int v183 = 4412;
        _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Registration somehow was cleared",  buf,  0x12u);
      }

      [*(id *)(v71 + 32) _purgeGroupTypeIfNecessary:*(void *)(v71 + 88)];
      __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) processTokenToGroupTypeMap]);
      id v107 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:*(void *)(v71 + 40)]);

      if (!v107)
      {
        __int128 v108 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        id v109 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) processTokenToGroupTypeMap]);
        [v109 setObject:v108 forKeyedSubscript:*(void *)(v71 + 40)];
      }

      id v110 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) processTokenToGroupTypeMap]);
      id v111 = (void *)objc_claimAutoreleasedReturnValue([v110 objectForKeyedSubscript:*(void *)(v71 + 40)]);
      uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(v71 + 88)));
      [v111 addObject:v112];

      [*(id *)(v71 + 32) _initSubmitterAndQueryableRegistrationForProcessToken:*(void *)(v71 + 40) andGroupType:*(void *)(v71 + 88)];
      id v113 = WALogCategoryDefaultHandle();
      id v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v115 = *(void *)(v71 + 88);
        uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue( +[WAUtil trimTokenForLogging:]( &OBJC_CLASS___WAUtil,  "trimTokenForLogging:",  *(void *)(v71 + 40)));
        *(_DWORD *)buf = 136446978;
        __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v182 = 1024;
        int v183 = 4423;
        __int16 v184 = 2048;
        uint64_t v185 = v115;
        __int16 v186 = 2112;
        id v187 = v116;
        _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:registering message group type: %ld for process: %@",  buf,  0x26u);
      }
    }

    uint64_t v117 = objc_claimAutoreleasedReturnValue( [*(id *)(v71 + 32) _submitMessage:*(void *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) groupType:*(void *)(v71 + 88) forProcessToken:*(void *)(v71 + 40)]);
    uint64_t v118 = *(void *)(*(void *)(v71 + 64) + 8LL);
    uint64_t v119 = *(void **)(v118 + 40);
    *(void *)(v118 + 40) = v117;

    v120 = v157;
    if (*(void *)(*(void *)(*(void *)(v71 + 64) + 8LL) + 40LL))
    {
      id v121 = WALogCategoryDefaultHandle();
      int v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        __int16 v182 = 1024;
        int v183 = 4435;
        _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Not sending incomplete DPSR to AWD",  buf,  0x12u);
      }

      id v123 = WALogCategoryDefaultHandle();
      id v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
      if (os_log_type_enabled(v124, OS_LOG_TYPE_FAULT))
      {
        __int128 v150 = *(const char **)(*(void *)(*(void *)(v71 + 64) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        __int16 v181 = v150;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_FAULT,  "Not sending incomplete DPSR to AWD %@",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v125 = *(void *)(v71 + 32);
      uint64_t v126 = *(void *)(*(void *)(*(void *)(v71 + 56) + 8LL) + 40LL);
      uint64_t v127 = *(void *)(*(void *)(*(void *)(v71 + 72) + 8LL) + 40LL);
      id v128 = *(void **)(v125 + 160);
      uint64_t v129 = *(void *)(v125 + 168);
      if (*(_BYTE *)(v125 + 42)) {
        [v128 transformAndSubmitDNSMessageToCA:v126 additionalInfo:v127 timestamps:v129];
      }
      else {
        [v128 transformAndSubmitDPSMessageToCA:v126 additionalInfo:v127 timestamps:v129];
      }
    }
  }

  else
  {
    id v151 = WALogCategoryDefaultHandle();
    __int128 v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(v151);
    if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      __int16 v182 = 1024;
      int v183 = 4410;
      _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_ERROR, "%{public}s::%d:nil processToken", buf, 0x12u);
    }

    NSErrorUserInfoKey v188 = NSLocalizedFailureReasonErrorKey;
    id v189 = @"WAErrorCodeLacksRequiredArgument";
    __int128 v153 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v189,  &v188,  1LL));
    uint64_t v154 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9010LL,  v153));
    uint64_t v155 = *(void *)(*(void *)(v71 + 64) + 8LL);
    __int128 v156 = *(void **)(v155 + 40);
    *(void *)(v155 + 40) = v154;

    v120 = v157;
  }

  uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_stallNotifications"]);
  uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue([v130 repeatableValues]);
  [v131 removeAllObjects];

  uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_probeResults"]);
  v133 = (void *)objc_claimAutoreleasedReturnValue([v132 repeatableValues]);
  [v133 removeAllObjects];

  __int16 v134 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsCounterSamples"]);
  int v135 = (void *)objc_claimAutoreleasedReturnValue([v134 repeatableValues]);
  [v135 removeAllObjects];

  __int16 v136 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v71 + 56) + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue([v136 subMessageValue]);
  __int16 v138 = (void *)objc_claimAutoreleasedReturnValue([v137 fieldForKey:@"DPSE_associationChanges"]);
  uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue([v138 repeatableValues]);
  [v139 removeAllObjects];

  [*(id *)(*(void *)(v71 + 32) + 536) removeAllObjects];
  [*(id *)(*(void *)(v71 + 32) + 544) removeAllObjects];
  [*(id *)(*(void *)(v71 + 32) + 552) removeAllObjects];
  [*(id *)(*(void *)(v71 + 32) + 560) removeAllObjects];
  [*(id *)(*(void *)(v71 + 32) + 480) removeAllObjects];
  [*(id *)(*(void *)(v71 + 32) + 496) removeAllObjects];
  [*(id *)(*(void *)(v71 + 32) + 168) removeAllObjects];
  id v140 = WALogCategoryDefaultHandle();
  int v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
  if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4453;
    _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_dpsCurrentlyGatheringConsecutiveSamples FALSE",  buf,  0x12u);
  }

  *(_BYTE *)(*(void *)(v71 + 32) + 33LL) = 0;
  id v142 = WALogCategoryDefaultHandle();
  __int128 v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v182 = 1024;
    int v183 = 4455;
    _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_dpsStudyInProgress False",  buf,  0x12u);
  }

  *(_BYTE *)(*(void *)(v71 + 32) + 42LL) = 0;
  *(_BYTE *)(*(void *)(v71 + 32) + 32LL) = 0;
  __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) dpsStudyTransaction]);

  if (v144)
  {
    char v145 = (void *)objc_claimAutoreleasedReturnValue( +[WAActivityManager sharedActivityManager]( &OBJC_CLASS___WAActivityManager,  "sharedActivityManager"));
    BOOL v146 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) dpsStudyTransaction]);
    [v145 osTransactionComplete:v146];

    [*(id *)(v71 + 32) setDpsStudyTransaction:0];
  }

  __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) dnsStudyTransaction]);

  if (v147)
  {
    __int128 v148 = (void *)objc_claimAutoreleasedReturnValue( +[WAActivityManager sharedActivityManager]( &OBJC_CLASS___WAActivityManager,  "sharedActivityManager"));
    __int128 v149 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) dnsStudyTransaction]);
    [v148 osTransactionComplete:v149];

    [*(id *)(v71 + 32) setDnsStudyTransaction:0];
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v71 + 48));
}

void sub_1000633A8(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  unsigned int v3 = (void *)a1[4];
  unint64_t v4 = v3[31];
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4) {
    double v6 = (double)(unint64_t)v3[32] / (double)v4 * 100.0;
  }
  unint64_t v7 = v3[33];
  if (v7) {
    double v5 = (double)(unint64_t)v3[34] / (double)v7 * 100.0;
  }
  unint64_t v8 = v3[35];
  double v9 = 0.0;
  double v10 = 0.0;
  if (v8) {
    double v10 = (double)(unint64_t)v3[36] / (double)v8 * 100.0;
  }
  unint64_t v11 = v3[37];
  if (v11) {
    double v9 = (double)(unint64_t)v3[38] / (double)v11 * 100.0;
  }
  id v12 = WALogCategoryDefaultHandle();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = a1[4];
    uint64_t v15 = *(void *)(v14 + 248);
    uint64_t v16 = *(void *)(v14 + 280);
    int v163 = 136447490;
    __int128 v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v165 = 1024;
    int v166 = 4352;
    __int16 v167 = 2048;
    double v168 = v6;
    __int16 v169 = 2048;
    double v170 = v10;
    __int16 v171 = 2048;
    uint64_t v172 = v15;
    __int16 v173 = 2048;
    uint64_t v174 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:LANPingResultSummary: LANHealth-before-trap:%.2f%% LANHealth-after-trap:%.2f%% totalPingsBeforeTrap :%lu totalPingsAfterTrap:%lu",  (uint8_t *)&v163,  0x3Au);
  }

  id v17 = WALogCategoryDefaultHandle();
  int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = a1[4];
    uint64_t v20 = *(void *)(v19 + 264);
    uint64_t v21 = *(void *)(v19 + 296);
    int v163 = 136447490;
    __int128 v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v165 = 1024;
    int v166 = 4353;
    __int16 v167 = 2048;
    double v168 = v5;
    __int16 v169 = 2048;
    double v170 = v9;
    __int16 v171 = 2048;
    uint64_t v172 = v20;
    __int16 v173 = 2048;
    uint64_t v174 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WANPingResultSummary: WANHealth-before-trap:%.2f%% WANHealth-after-trap:%.2f%% totalPingsBeforeTrap :%lu totalPingsAfterTrap:%lu",  (uint8_t *)&v163,  0x3Au);
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 176) preferences]);
  unint64_t v23 = (unint64_t)objc_msgSend(v22, "dns_symptoms_trap_evaluated_at_sample");
  unint64_t v24 = v23 >> 1;

  id v25 = (_BYTE *)a1[6];
  id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 176) preferences]);
  int v27 = objc_msgSend(v26, "dns_symptoms_trap_evaluated_at_sample");

  double v28 = 0.0;
  double v29 = 0.0;
  if (v23 >= 2) {
    double v29 = (double)(v24 - *(void *)(a1[4] + 312LL)) / (double)v24 * 100.0;
  }
  unint64_t v30 = v25 - v27;
  if (v25 != v27) {
    double v28 = (double)(v30 - *(void *)(a1[4] + 320LL)) / (double)v30 * 100.0;
  }
  double v31 = 0.0;
  double v32 = 0.0;
  if (v23 >= 2) {
    double v32 = (double)(100 * ((v24 - *(void *)(a1[4] + 328LL)) / v24));
  }
  if (v25 != v27) {
    double v31 = (double)(100 * ((v30 - *(void *)(a1[4] + 336LL)) / v30));
  }
  id v33 = WALogCategoryDefaultHandle();
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = *(void *)(a1[4] + 312LL);
    int v163 = 136447234;
    __int128 v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v165 = 1024;
    int v166 = 4363;
    __int16 v167 = 2048;
    double v168 = *(double *)&v24;
    __int16 v169 = 2048;
    *(void *)&double v170 = v25 - v27;
    __int16 v171 = 2048;
    uint64_t v172 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:totalInstancesBeforeTrap:%lu totalInstancesAfterTrap:%lu times-netscore-below-threshold-before-trap:%lu",  (uint8_t *)&v163,  0x30u);
  }

  id v36 = WALogCategoryDefaultHandle();
  double v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    int v163 = 136446978;
    __int128 v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v165 = 1024;
    int v166 = 4364;
    __int16 v167 = 2048;
    double v168 = v29;
    __int16 v169 = 2048;
    double v170 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:NetScoreSummary: NetScore Health-before-trap:%.2f%% Health-after-trap:%.2f%%",  (uint8_t *)&v163,  0x26u);
  }

  id v38 = WALogCategoryDefaultHandle();
  id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    int v163 = 136446978;
    __int128 v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    __int16 v165 = 1024;
    int v166 = 4365;
    __int16 v167 = 2048;
    double v168 = v32;
    __int16 v169 = 2048;
    double v170 = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DataStallScoreSummary: DataStallScore Health-before-trap:%.2f%% Health-after-trap:%.2f%%",  (uint8_t *)&v163,  0x26u);
  }

  id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  double v41 = (void *)objc_claimAutoreleasedReturnValue([v40 subMessageValue]);
  double v42 = (void *)objc_claimAutoreleasedReturnValue([v41 fieldForKey:@"DPSE_studyType"]);
  [v42 setInt32Value:1];

  id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 subMessageValue]);
  id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 subMessageValue]);
  id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 fieldForKey:@"WFAAWDWASDS_totalDnsServers"]);
  [v47 setUint32Value:*(unsigned int *)(a1[4] + 344)];

  id v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 subMessageValue]);
  id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 subMessageValue]);
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 fieldForKey:@"WFAAWDWASDS_numIpv4DnsServers"]);
  [v52 setUint32Value:*(unsigned int *)(a1[4] + 352)];

  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  unsigned int v54 = (void *)objc_claimAutoreleasedReturnValue([v53 subMessageValue]);
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v56 = (void *)objc_claimAutoreleasedReturnValue([v55 subMessageValue]);
  int v57 = (void *)objc_claimAutoreleasedReturnValue([v56 fieldForKey:@"WFAAWDWASDS_numIpv6DnsServers"]);
  [v57 setUint32Value:*(unsigned int *)(a1[4] + 360)];

  id v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 subMessageValue]);
  id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v61 = (void *)objc_claimAutoreleasedReturnValue([v60 subMessageValue]);
  id v62 = (void *)objc_claimAutoreleasedReturnValue([v61 fieldForKey:@"WFAAWDWASDS_numLocalDnsServers"]);
  [v62 setUint32Value:*(unsigned int *)(a1[4] + 368)];

  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 subMessageValue]);
  id v65 = (void *)objc_claimAutoreleasedReturnValue([v64 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v66 = (void *)objc_claimAutoreleasedReturnValue([v65 subMessageValue]);
  __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 fieldForKey:@"WFAAWDWASDS_numRemoteDnsServers"]);
  [v67 setUint32Value:*(unsigned int *)(a1[4] + 376)];

  id v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v69 = (void *)objc_claimAutoreleasedReturnValue([v68 subMessageValue]);
  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 fieldForKey:@"DPSE_symptomsDnsStats"]);
  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v70 subMessageValue]);
  id v72 = (void *)objc_claimAutoreleasedReturnValue([v71 fieldForKey:@"WFAAWDWASDS_configType"]);
  [v72 setInt32Value:*(unsigned int *)(a1[4] + 384)];

  id v73 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 subMessageValue]);
  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v74 fieldForKey:@"DPSE_symptomsDnsStats"]);
  int v76 = (void *)objc_claimAutoreleasedReturnValue([v75 subMessageValue]);
  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 fieldForKey:@"WFAAWDWASDS_netscoreAtStudyStart"]);
  [v77 setUint32Value:*(unsigned int *)(a1[4] + 392)];

  id v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v79 = (void *)objc_claimAutoreleasedReturnValue([v78 subMessageValue]);
  id v80 = (void *)objc_claimAutoreleasedReturnValue([v79 fieldForKey:@"DPSE_symptomsDnsStats"]);
  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v80 subMessageValue]);
  id v82 = (void *)objc_claimAutoreleasedReturnValue([v81 fieldForKey:@"WFAAWDWASDS_stallscoreAtStudyStart"]);
  [v82 setUint32Value:*(unsigned int *)(a1[4] + 400)];

  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v83 subMessageValue]);
  double v85 = (void *)objc_claimAutoreleasedReturnValue([v84 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 subMessageValue]);
  id v87 = (void *)objc_claimAutoreleasedReturnValue([v86 fieldForKey:@"WFAAWDWASDS_impactedServersAtStudyStart"]);
  [v87 setUint32Value:*(unsigned int *)(a1[4] + 408)];

  NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 subMessageValue]);
  id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 fieldForKey:@"DPSE_symptomsDnsStats"]);
  os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue([v90 subMessageValue]);
  id v92 = (void *)objc_claimAutoreleasedReturnValue([v91 fieldForKey:@"WFAAWDWASDS_netscoreHealthBeforeDecision"]);
  [v92 setUint32Value:v29];

  int v93 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  __int16 v94 = (void *)objc_claimAutoreleasedReturnValue([v93 subMessageValue]);
  __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v94 fieldForKey:@"DPSE_symptomsDnsStats"]);
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v95 subMessageValue]);
  id v97 = (void *)objc_claimAutoreleasedReturnValue([v96 fieldForKey:@"WFAAWDWASDS_stallscoreHealthBeforeDecision"]);
  [v97 setUint32Value:v32];

  id v98 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v99 = (void *)objc_claimAutoreleasedReturnValue([v98 subMessageValue]);
  id v100 = (void *)objc_claimAutoreleasedReturnValue([v99 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v101 = (void *)objc_claimAutoreleasedReturnValue([v100 subMessageValue]);
  id v102 = (void *)objc_claimAutoreleasedReturnValue([v101 fieldForKey:@"WFAAWDWASDS_lanHealthBeforeDecision"]);
  [v102 setUint32Value:v6];

  id v103 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v104 = (void *)objc_claimAutoreleasedReturnValue([v103 subMessageValue]);
  uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue([v104 fieldForKey:@"DPSE_symptomsDnsStats"]);
  __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([v105 subMessageValue]);
  id v107 = (void *)objc_claimAutoreleasedReturnValue([v106 fieldForKey:@"WFAAWDWASDS_wanHealthBeforeDecision"]);
  [v107 setUint32Value:v5];

  __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v109 = (void *)objc_claimAutoreleasedReturnValue([v108 subMessageValue]);
  id v110 = (void *)objc_claimAutoreleasedReturnValue([v109 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v111 = (void *)objc_claimAutoreleasedReturnValue([v110 subMessageValue]);
  uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([v111 fieldForKey:@"WFAAWDWASDS_isCaptiveServerIPResolved"]);
  [v112 setBoolValue:*(unsigned __int8 *)(a1[4] + 43)];

  id v113 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v114 = (void *)objc_claimAutoreleasedReturnValue([v113 subMessageValue]);
  uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue([v114 fieldForKey:@"DPSE_symptomsDnsStats"]);
  uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 subMessageValue]);
  uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([v116 fieldForKey:@"WFAAWDWASDS_netscoreAtStudyEnd"]);
  [v117 setUint32Value:*(unsigned int *)(a1[4] + 416)];

  uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue([v118 subMessageValue]);
  v120 = (void *)objc_claimAutoreleasedReturnValue([v119 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v121 = (void *)objc_claimAutoreleasedReturnValue([v120 subMessageValue]);
  int v122 = (void *)objc_claimAutoreleasedReturnValue([v121 fieldForKey:@"WFAAWDWASDS_stallscoreAtStudyEnd"]);
  [v122 setUint32Value:*(unsigned int *)(a1[4] + 424)];

  id v123 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  id v124 = (void *)objc_claimAutoreleasedReturnValue([v123 subMessageValue]);
  uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v124 fieldForKey:@"DPSE_symptomsDnsStats"]);
  uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([v125 subMessageValue]);
  uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v126 fieldForKey:@"WFAAWDWASDS_impactedServersAtStudyEnd"]);
  [v127 setUint32Value:*(unsigned int *)(a1[4] + 432)];

  id v128 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue([v128 subMessageValue]);
  uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue([v129 fieldForKey:@"DPSE_symptomsDnsStats"]);
  uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue([v130 subMessageValue]);
  uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v131 fieldForKey:@"WFAAWDWASDS_netscoreHealthAfterDecision"]);
  [v132 setUint32Value:v28];

  v133 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  __int16 v134 = (void *)objc_claimAutoreleasedReturnValue([v133 subMessageValue]);
  int v135 = (void *)objc_claimAutoreleasedReturnValue([v134 fieldForKey:@"DPSE_symptomsDnsStats"]);
  __int16 v136 = (void *)objc_claimAutoreleasedReturnValue([v135 subMessageValue]);
  uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue([v136 fieldForKey:@"WFAAWDWASDS_stallscoreHealthAfterDecision"]);
  [v137 setUint32Value:v31];

  __int16 v138 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue([v138 subMessageValue]);
  id v140 = (void *)objc_claimAutoreleasedReturnValue([v139 fieldForKey:@"DPSE_symptomsDnsStats"]);
  int v141 = (void *)objc_claimAutoreleasedReturnValue([v140 subMessageValue]);
  id v142 = (void *)objc_claimAutoreleasedReturnValue([v141 fieldForKey:@"WFAAWDWASDS_lanHealthAfterDecision"]);
  [v142 setUint32Value:v10];

  __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v143 subMessageValue]);
  char v145 = (void *)objc_claimAutoreleasedReturnValue([v144 fieldForKey:@"DPSE_symptomsDnsStats"]);
  BOOL v146 = (void *)objc_claimAutoreleasedReturnValue([v145 subMessageValue]);
  __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v146 fieldForKey:@"WFAAWDWASDS_wanHealthAfterDecision"]);
  [v147 setUint32Value:v9];

  __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  __int128 v149 = (void *)objc_claimAutoreleasedReturnValue([v148 subMessageValue]);
  __int128 v150 = (void *)objc_claimAutoreleasedReturnValue([v149 fieldForKey:@"DPSE_symptomsDnsStats"]);
  id v151 = (void *)objc_claimAutoreleasedReturnValue([v150 subMessageValue]);
  __int128 v152 = (void *)objc_claimAutoreleasedReturnValue([v151 fieldForKey:@"WFAAWDWASDS_dpsNotificationReceivedDuringStudy"]);
  [v152 setBoolValue:*(unsigned __int8 *)(a1[4] + 38)];

  __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v153 subMessageValue]);
  uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue([v154 fieldForKey:@"DPSE_symptomsDnsStats"]);
  __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([v155 subMessageValue]);
  __int128 v157 = (void *)objc_claimAutoreleasedReturnValue([v156 fieldForKey:@"WFAAWDWASDS_slowWiFiNotificationReceivedDuringStudy"]);
  [v157 setBoolValue:*(unsigned __int8 *)(a1[4] + 39)];

  uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) fieldForKey:@"DPSR_dpsEpiloge"]);
  __int128 v159 = (void *)objc_claimAutoreleasedReturnValue([v158 subMessageValue]);
  __int128 v160 = (void *)objc_claimAutoreleasedReturnValue([v159 fieldForKey:@"DPSE_symptomsDnsStats"]);
  __int128 v161 = (void *)objc_claimAutoreleasedReturnValue([v160 subMessageValue]);
  __int128 v162 = (void *)objc_claimAutoreleasedReturnValue([v161 fieldForKey:@"WFAAWDWASDS_isPingEnqueueFailing"]);
  [v162 setBoolValue:*(unsigned __int8 *)(a1[4] + 40)];

  objc_autoreleasePoolPop(v2);
}

LABEL_107:
  }

  (*((void (**)(id, void, void))v12 + 2))(v12, 0LL, 0LL);
}

void sub_100065770(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) initializeProbeCxt];
  objc_autoreleasePoolPop(v2);
}

void sub_1000657A0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) triggerPeerDiagnosticsStudy:*(void *)(a1 + 40) symptomsDnsStats:0];
  objc_autoreleasePoolPop(v2);
}

void sub_1000657D4(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"DPSCS_timestamp"]);
  objc_msgSend(v4, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  id v5 = WALogCategoryDefaultHandle();
  double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136446722;
    double v9 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 4564;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding dpsStatsContainer while _dpsStudyInProgress %@ ",  (uint8_t *)&v8,  0x1Cu);
  }

  [*(id *)(*(void *)(a1 + 32) + 552) addObject:v3];
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [*(id *)(*(void *)(a1 + 32) + 168) setObject:v7 forKeyedSubscript:@"end"];
}

void sub_100065920(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"DPSCS_timestamp"]);
  objc_msgSend(v4, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  id v5 = WALogCategoryDefaultHandle();
  double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446722;
    int v8 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 4628;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding dpsStatsContainer while _dpsStudyInProgress %@ ",  (uint8_t *)&v7,  0x1Cu);
  }

  [*(id *)(*(void *)(a1 + 32) + 552) addObject:v3];
}

void sub_100065A3C(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 fieldForKey:@"DPSCS_timestamp"]);
  objc_msgSend(v4, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  id v5 = WALogCategoryDefaultHandle();
  double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446722;
    int v8 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 4656;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding dpsStatsContainer while _dpsStudyInProgress %@ ",  (uint8_t *)&v7,  0x1Cu);
  }

  [*(id *)(*(void *)(a1 + 32) + 552) addObject:v3];
}

void sub_100065B58(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100065BEC;
  v5[3] = &unk_1000CCF48;
  id v6 = *(id *)(a1 + 48);
  [v3 gatherConsecutiveDatapathReadings:0 forProcessToken:v4 andReply:v5];

  objc_autoreleasePoolPop(v2);
}

void sub_100065BEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = WALogCategoryDefaultHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446722;
    int v8 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke_2";
    __int16 v9 = 1024;
    int v10 = 4680;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:gatherConsecutiveDatapathReadings replied err %@",  (uint8_t *)&v7,  0x1Cu);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100066558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

id sub_100066590()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1000ED038;
  uint64_t v7 = qword_1000ED038;
  if (!qword_1000ED038)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100071D1C;
    v3[3] = &unk_1000CD9A0;
    v3[4] = &v4;
    sub_100071D1C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10006662C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100066644(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  id v9 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100066E28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

void sub_100066E68(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136446466;
    id v5 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = 4797;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:slow_wifi_report_sent_after expired",  (uint8_t *)&v4,  0x12u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100066F28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100067038;
  v10[3] = &unk_1000CD758;
  objc_copyWeak(v15, &location);
  id v5 = *(void **)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  id v6 = v5;
  int v7 = *(void **)(a1 + 72);
  id v11 = v6;
  v15[1] = v7;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 64);
  id v12 = v8;
  uint64_t v14 = v9;
  [v3 _getNewMessageForKey:@"WFAAWDLQM" groupType:v2 forProcessToken:v4 shouldCheckForPrePopulation:1 andReply:v10];

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
}

void sub_10006701C(_Unwind_Exception *a1)
{
}

void sub_100067038(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100067160;
  v18[3] = &unk_1000CD730;
  id v19 = WeakRetained;
  id v20 = v6;
  uint64_t v10 = *(void *)(a1 + 48);
  id v21 = v5;
  uint64_t v24 = v10;
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 72);
  id v22 = v11;
  uint64_t v26 = v12;
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  id v23 = v13;
  uint64_t v25 = v14;
  id v15 = v5;
  id v16 = v6;
  id v17 = WeakRetained;
  dispatch_async(v9, v18);
}

void sub_100067160(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 51LL))
  {
    id v2 = WALogCategoryDefaultHandle();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke_3";
      __int16 v53 = 1024;
      int v54 = 4819;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Setting error due to debug command kWAIORCommandForceStudyErrorFromMsg",  buf,  0x12u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 51LL) = 0;
    uint64_t v4 = (id *)(a1 + 40);
  }

  else
  {
    uint64_t v4 = (id *)(a1 + 40);
    if (!*(void *)(a1 + 40))
    {
      double v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) fieldForKey:@"WFAAWDLQM_timestamp"]);
      objc_msgSend(v42, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

      id v43 = WALogCategoryDefaultHandle();
      id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        __int16 v53 = 1024;
        int v54 = 4890;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding linkQualSample",  buf,  0x12u);
      }

      id v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) fieldForKey:@"SWFR_linkQualSamples"]);
      id v45 = [*(id *)(a1 + 48) copy];
      [v20 addRepeatableSubMessageValue:v45];

      goto LABEL_36;
    }
  }

  id v5 = WALogCategoryDefaultHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 136446978;
    uint64_t v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v53 = 1024;
    int v54 = 4826;
    __int16 v55 = 2112;
    uint64_t v56 = v7;
    __int16 v57 = 2112;
    uint64_t v58 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to find Slow WiFi values properly populated %@ err: %@",  buf,  0x26u);
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t v10 = (id *)(v9 + 40);
  if (!v11)
  {
    objc_storeStrong(v10, *v4);
    id v12 = WALogCategoryDefaultHandle();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      *(_DWORD *)buf = 136446722;
      uint64_t v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v53 = 1024;
      int v54 = 4830;
      __int16 v55 = 2112;
      uint64_t v56 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr will return %@",  buf,  0x1Cu);
    }
  }

  if ([*v4 code] == (id)9029 && objc_msgSend(*(id *)(a1 + 32), "isAXAssociatoin"))
  {
    id v15 = WALogCategoryDefaultHandle();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v53 = 1024;
      int v54 = 4834;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:LinkQualitySamples missing mandatory fields: WAErrorCodeTxOutputBelowExpectedMissing, but PHY MOD E is APPLE80211_MODE_11AX rdar://80134615, clearing error",  buf,  0x12u);
    }

    uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8LL);
    int v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = 0LL;

    id v19 = WALogCategoryDefaultHandle();
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      *(_DWORD *)buf = 136446722;
      uint64_t v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v53 = 1024;
      int v54 = 4836;
      __int16 v55 = 2112;
      uint64_t v56 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr reset %@",  buf,  0x1Cu);
    }

void sub_10006786C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v7 + 40);
  uint64_t v8 = (id *)(v7 + 40);
  uint64_t v9 = v10;
  if (v6)
  {
    if (!v9)
    {
      objc_storeStrong(v8, a3);
      id v11 = WALogCategoryDefaultHandle();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        int v29 = 136446722;
        unint64_t v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        __int16 v31 = 1024;
        int v32 = 4862;
        __int16 v33 = 2112;
        id v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr will return %@",  (uint8_t *)&v29,  0x1Cu);
      }
    }

    id v14 = [v6 code];
    id v15 = WALogCategoryDefaultHandle();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v14 == (id)9029)
    {
      if (v17)
      {
        int v29 = 136446466;
        unint64_t v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        __int16 v31 = 1024;
        int v32 = 4867;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:LinkQualitySample missing mandatory fields on rescan: WAErrorCodeTxOutputBelowExpectedMissing",  (uint8_t *)&v29,  0x12u);
      }

      id v18 = WALogCategoryDefaultHandle();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v29) = 0;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "LinkQualitySample missing mandatory fields on rescan: WAErrorCodeTxOutputBelowExpectedMissing",  (uint8_t *)&v29,  2u);
      }
    }

    else if (v17)
    {
      int v29 = 136446722;
      unint64_t v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v31 = 1024;
      int v32 = 4871;
      __int16 v33 = 2112;
      id v34 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:LinkQualitySample error %@",  (uint8_t *)&v29,  0x1Cu);
    }
  }

  else
  {
    id *v8 = 0LL;

    id v19 = WALogCategoryDefaultHandle();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      int v29 = 136446722;
      unint64_t v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v31 = 1024;
      int v32 = 4853;
      __int16 v33 = 2112;
      id v34 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr reset %@",  (uint8_t *)&v29,  0x1Cu);
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldForKey:@"WFAAWDLQM_timestamp"]);
    objc_msgSend(v22, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

    id v23 = WALogCategoryDefaultHandle();
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      int v29 = 136446722;
      unint64_t v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v31 = 1024;
      int v32 = 4856;
      __int16 v33 = 2112;
      id v34 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding retry linkQualSample %@",  (uint8_t *)&v29,  0x1Cu);
    }

    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_linkQualSamples"]);
    id v26 = [v5 copy];
    -[os_log_s addRepeatableSubMessageValue:](v16, "addRepeatableSubMessageValue:", v26);
  }

  id v27 = WALogCategoryDefaultHandle();
  double v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_signpost_enabled(v28))
  {
    LOWORD(v29) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "Engine LinkQualitySamples MissingChannelsRepopulate",  (const char *)&unk_1000B76E7,  (uint8_t *)&v29,  2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_100067C78(uint64_t a1)
{
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  __int128 v114 = 0u;
  __int128 v115 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 568LL);
  id v3 = [v2 countByEnumeratingWithState:&v112 objects:v127 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v113;
    *(void *)&__int128 v4 = 136446722LL;
    __int128 v107 = v4;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v113 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v112 + 1) + 8LL * (void)i);
        id v9 = WALogCategoryDefaultHandle();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v107;
          uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          __int16 v118 = 1024;
          int v119 = 4910;
          __int16 v120 = 2112;
          unint64_t v121 = (unint64_t)v8;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached SWFR_slowNotice: %@",  buf,  0x1Cu);
        }

        id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_slowNotice"]);
        [v11 setSubMessageValue:v8];
      }

      id v5 = [v2 countByEnumeratingWithState:&v112 objects:v127 count:16];
    }

    while (v5);
  }

  __int128 v110 = 0u;
  __int128 v111 = 0u;
  __int128 v108 = 0u;
  __int128 v109 = 0u;
  id v12 = *(id *)(*(void *)(a1 + 32) + 496LL);
  id v13 = [v12 countByEnumeratingWithState:&v108 objects:v126 count:16];
  if (v13)
  {
    id v15 = v13;
    uint64_t v16 = *(void *)v109;
    *(void *)&__int128 v14 = 136446722LL;
    __int128 v107 = v14;
    do
    {
      for (j = 0LL; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v109 != v16) {
          objc_enumerationMutation(v12);
        }
        id v18 = *(void **)(*((void *)&v108 + 1) + 8LL * (void)j);
        id v19 = WALogCategoryDefaultHandle();
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v107;
          uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          __int16 v118 = 1024;
          int v119 = 4915;
          __int16 v120 = 2112;
          unint64_t v121 = (unint64_t)v18;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Adding cached SWFR_usbEvent: %@",  buf,  0x1Cu);
        }

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_usbEvents"]);
        [v21 setSubMessageValue:v18];
      }

      id v15 = [v12 countByEnumeratingWithState:&v108 objects:v126 count:16];
    }

    while (v15);
  }

  id v22 = WALogCategoryDefaultHandle();
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4919;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SlowWiFi Summary!", buf, 0x12u);
  }

  id v24 = WALogCategoryDefaultHandle();
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_linkQualSamples"]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 repeatableValues]);
    id v28 = [v27 count];
    *(_DWORD *)buf = 136446722;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4920;
    __int16 v120 = 2048;
    unint64_t v121 = (unint64_t)v28;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SWFR_linkQualSamples: %lu",  buf,  0x1Cu);
  }

  id v29 = WALogCategoryDefaultHandle();
  unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_slowNotice"]);
    int v32 = (void *)objc_claimAutoreleasedReturnValue([v31 subMessageValue]);
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 fieldForKey:@"WFAAWDSWFN_actionField"]);
    unsigned int v34 = [v33 uint32Value];
    *(_DWORD *)buf = 136446722;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4921;
    __int16 v120 = 2048;
    unint64_t v121 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WFAAWDSWFN_actionField: %lx",  buf,  0x1Cu);
  }

  id v35 = WALogCategoryDefaultHandle();
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    id v37 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_slowNotice"]);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 subMessageValue]);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 fieldForKey:@"WFAAWDSWFN_recoveryAction"]);
    unsigned int v40 = [v39 uint32Value];
    *(_DWORD *)buf = 136446722;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4922;
    __int16 v120 = 2048;
    unint64_t v121 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WFAAWDSWFN_recoveryAction: %lx",  buf,  0x1Cu);
  }

  id v41 = WALogCategoryDefaultHandle();
  double v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    id v43 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_slowNotice"]);
    id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 subMessageValue]);
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 fieldForKey:@"WFAAWDSWFN_recoveryReason"]);
    unsigned int v46 = [v45 uint32Value];
    *(_DWORD *)buf = 136446722;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4923;
    __int16 v120 = 2048;
    unint64_t v121 = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WFAAWDSWFN_recoveryReason: %lx",  buf,  0x1Cu);
  }

  id v47 = WALogCategoryDefaultHandle();
  id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_slowNotice"]);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 subMessageValue]);
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 fieldForKey:@"WFAAWDSWFN_userInput"]);
    unsigned int v52 = [v51 uint32Value];
    *(_DWORD *)buf = 136446722;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4924;
    __int16 v120 = 2048;
    unint64_t v121 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WFAAWDSWFN_userInput: %lx",  buf,  0x1Cu);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setMetricID:589931];
  __int16 v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) submitterMap]);
  int v54 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKeyedSubscript:v55]);

  if (!v56)
  {
    id v57 = WALogCategoryDefaultHandle();
    uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v118 = 1024;
      int v119 = 4929;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Caller did not register",  buf,  0x12u);
    }

    if (*(void *)(a1 + 40))
    {
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processTokenToGroupTypeMap]);
      id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 objectForKeyedSubscript:*(void *)(a1 + 40)]);
      id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
      unsigned int v62 = [v60 containsObject:v61];

      if (v62)
      {
        id v105 = WALogCategoryDefaultHandle();
        uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          unint64_t v106 = *(void *)(a1 + 80);
          *(_DWORD *)buf = 136446722;
          uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          __int16 v118 = 1024;
          int v119 = 4931;
          __int16 v120 = 2048;
          unint64_t v121 = v106;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:XPC: processTokenToGroupTypeMap seems to think this process token has already registered group type: %ld",  buf,  0x1Cu);
        }
      }

      else
      {
        [*(id *)(a1 + 32) _purgeGroupTypeIfNecessary:*(void *)(a1 + 80)];
        uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processTokenToGroupTypeMap]);
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKeyedSubscript:*(void *)(a1 + 40)]);

        if (!v64)
        {
          id v65 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          id v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processTokenToGroupTypeMap]);
          [v66 setObject:v65 forKeyedSubscript:*(void *)(a1 + 40)];
        }

        __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processTokenToGroupTypeMap", v107, (void)v108));
        id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:*(void *)(a1 + 40)]);
        id v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(a1 + 80)));
        [v68 addObject:v69];

        [*(id *)(a1 + 32) _initSubmitterAndQueryableRegistrationForProcessToken:*(void *)(a1 + 40) andGroupType:*(void *)(a1 + 80)];
        [*(id *)(a1 + 32) _persist];
        id v70 = WALogCategoryDefaultHandle();
        uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v72 = *(void *)(a1 + 80);
          id v73 = (void *)objc_claimAutoreleasedReturnValue( +[WAUtil trimTokenForLogging:]( &OBJC_CLASS___WAUtil,  "trimTokenForLogging:",  *(void *)(a1 + 40)));
          *(_DWORD *)buf = 136446978;
          uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          __int16 v118 = 1024;
          int v119 = 4942;
          __int16 v120 = 2048;
          unint64_t v121 = v72;
          __int16 v122 = 2112;
          id v123 = v73;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:XPC: registering message group type: %ld for process: %@",  buf,  0x26u);
        }
      }
    }

    else
    {
      id v100 = WALogCategoryDefaultHandle();
      id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        __int16 v118 = 1024;
        int v119 = 4930;
        _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:couldn't get process name for connection",  buf,  0x12u);
      }

      NSErrorUserInfoKey v124 = NSLocalizedFailureReasonErrorKey;
      uint64_t v125 = @"WAErrorCodeInternalError";
      uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v125,  &v124,  1LL));
      uint64_t v102 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9003LL,  v71));
      uint64_t v103 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v104 = *(void **)(v103 + 40);
      *(void *)(v103 + 40) = v102;
    }
  }

  uint64_t v74 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_submitMessage:groupType:forProcessToken:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40),  4,  *(void *)(a1 + 40),  v107));
  uint64_t v75 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v76 = *(void **)(v75 + 40);
  *(void *)(v75 + 40) = v74;

  uint64_t v77 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (v77)
  {
    uint64_t v78 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v80 = *(void *)(v78 + 40);
    id v79 = (id *)(v78 + 40);
    if (!v80)
    {
      objc_storeStrong(v79, v77);
      id v81 = WALogCategoryDefaultHandle();
      id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v83 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        __int16 v118 = 1024;
        int v119 = 4955;
        __int16 v120 = 2112;
        unint64_t v121 = v83;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:retErr will return %@",  buf,  0x1Cu);
      }
    }

    id v84 = WALogCategoryDefaultHandle();
    double v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      unint64_t v86 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      *(_DWORD *)buf = 136446722;
      uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v118 = 1024;
      int v119 = 4958;
      __int16 v120 = 2112;
      unint64_t v121 = v86;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Not sending incomplete SWF to AWD %@",  buf,  0x1Cu);
    }

    id v87 = WALogCategoryDefaultHandle();
    NSErrorUserInfoKey v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
    {
      id v99 = *(const char **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v117 = v99;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_FAULT,  "Not sending incomplete SWF to AWD %@",  buf,  0xCu);
    }
  }

  else
  {
    id v89 = WALogCategoryDefaultHandle();
    id v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      __int16 v118 = 1024;
      int v119 = 4949;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Sending SWF to transformEngine",  buf,  0x12u);
    }

    [*(id *)(*(void *)(a1 + 32) + 160) transformAndSubmitSWMessageToCA:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) additionalInfo:0 timestamps:0];
  }

  os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fieldForKey:@"SWFR_linkQualSamples"]);
  id v92 = (void *)objc_claimAutoreleasedReturnValue([v91 repeatableValues]);
  [v92 removeAllObjects];

  [*(id *)(*(void *)(a1 + 32) + 568) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 496) removeAllObjects];
  id v93 = WALogCategoryDefaultHandle();
  __int16 v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    __int16 v118 = 1024;
    int v119 = 4968;
    _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_slowWiFiStudyInProgress False",  buf,  0x12u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 34LL) = 0;
  __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) slowwifiStudyTransaction]);

  if (v95)
  {
    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    id v97 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) slowwifiStudyTransaction]);
    [v96 osTransactionComplete:v97];

    [*(id *)(a1 + 32) setSlowwifiStudyTransaction:0];
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100069228( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100069250(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) triggerPeerDiagnosticsStudy:2 symptomsDnsStats:0];
  objc_autoreleasePoolPop(v2);
}

void sub_100069288(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100069328;
  v7[3] = &unk_1000CD7D0;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v6;
  __int128 v8 = v6;
  [v3 gatherConsecutiveLinkQualitySamples:0 forProcessToken:v4 andReply:v7];

  objc_autoreleasePoolPop(v2);
}

void sub_100069328(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = WALogCategoryDefaultHandle();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136446722;
      id v9 = "-[WAEngine _triggerSlowWiFiStudy:forProcessToken:waMessage:andReply:]_block_invoke_2";
      __int16 v10 = 1024;
      int v11 = 5050;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:gatherConsecutiveLinkQualitySamples replied err %@",  (uint8_t *)&v8,  0x1Cu);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000696E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1000696F8(uint64_t a1, void *a2, id obj)
{
  id v6 = obj;
  id v7 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006976C(uint64_t a1, void *a2, id obj)
{
  id v6 = obj;
  id v7 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000699BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000699D4(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100069C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100069C1C(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100069CC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _persist];
}

id sub_10006A90C(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"AnalyticsProcessor: Save WA Message Metric",  *(void *)(*(void *)(a1 + 32) + 688LL),  *(void *)(*(void *)(a1 + 32) + 88LL));
}

id sub_10006A9E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) processMetricDictOnEngine:*(void *)(a1 + 40) data:*(void *)(a1 + 48)];
}

void sub_10006AD04(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = WALogCategoryDeviceStoreHandle();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446466;
    int v8 = "-[WAEngine _summarizeDeviceAnalyticsForNetwork:maxAgeInDays:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 5298;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Forcing flush of JSON files in Tmp Dir....",  (uint8_t *)&v7,  0x12u);
  }

  [*(id *)(a1 + 32) processWiFiAnalyticsMessageJSONFilesInTmpDir:1];
  id v5 = WALogCategoryDeviceStoreHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446466;
    int v8 = "-[WAEngine _summarizeDeviceAnalyticsForNetwork:maxAgeInDays:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 5300;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Forcing flush of JSON files in Tmp Dir complete",  (uint8_t *)&v7,  0x12u);
  }

  objc_autoreleasePoolPop(v2);
}

LABEL_80:
    int v11 = 0LL;
    __int128 v14 = 0LL;
    uint64_t v78 = 0LL;
    id v82 = 0LL;
    __int16 v9 = 0LL;
    goto LABEL_72;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine analyticsProcessor](self, "analyticsProcessor"));

  if (!v5)
  {
    id v73 = WALogCategoryDefaultHandle();
    id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
      id v99 = 1024;
      id v100 = 5427;
      id v101 = 1024;
      LODWORD(v102) = v3;
      id v69 = "%{public}s::%d:analyticsProcessor nil. processImmediately=%d";
      id v70 = v65;
      uint64_t v71 = OS_LOG_TYPE_ERROR;
      unint64_t v72 = 24;
      goto LABEL_79;
    }

    goto LABEL_80;
  }

  id v6 = WALogCategoryDeviceStoreHandle();
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "processWiFiAnalyticsMessageJSONFilesInTmpDir",  (const char *)&unk_1000B76E7,  buf,  2u);
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine wifianalyticsTmpDir](self, "wifianalyticsTmpDir"));
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);

  __int128 v95 = 0LL;
  id v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v82 contentsOfDirectoryAtPath:v9 error:&v95]);
  int v11 = v95;
  __int16 v12 = WALogCategoryDefaultHandle();
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
    id v99 = 1024;
    id v100 = 5435;
    id v101 = 2112;
    uint64_t v102 = v9;
    uint64_t v103 = 2112;
    id v104 = v10;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:files at %@: %@", buf, 0x26u);
  }

  if (v11)
  {
    uint64_t v74 = WALogCategoryDefaultHandle();
    id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
      id v99 = 1024;
      id v100 = 5436;
      id v101 = 2112;
      uint64_t v102 = v9;
      uint64_t v103 = 2112;
      id v104 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Unable to list files at %@: %@",  buf,  0x26u);
    }

    __int128 v14 = 0LL;
    uint64_t v78 = v10;
  }

  else
  {
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"SELF EndsWith '.json'"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 filteredArrayUsingPredicate:v14]);

    if (v15)
    {
      uint64_t v78 = v15;
      if (v3
        || -[WAEngine canProcessWiFiAnalyticsMessageJSONFiles:](self, "canProcessWiFiAnalyticsMessageJSONFiles:", v15))
      {
        uint64_t v77 = v14;
        engineQ = (dispatch_queue_s *)self->_engineQ;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10006C5AC;
        block[3] = &unk_1000CCD80;
        void block[4] = self;
        dispatch_sync(engineQ, block);
        BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine analyticsProcessor](self, "analyticsProcessor"));
        id v79 = self;
        -[WAEngine analyticsAgeOutTimeIntervalSecs](self, "analyticsAgeOutTimeIntervalSecs");
        objc_msgSend(v17, "ageOutAnalytics:");

        id v92 = 0u;
        id v93 = 0u;
        id v90 = 0u;
        os_log_type_t v91 = 0u;
        id obj = (id)objc_claimAutoreleasedReturnValue([v15 sortedArrayUsingSelector:"compare:"]);
        id v18 = [obj countByEnumeratingWithState:&v90 objects:v96 count:16];
        if (!v18)
        {
          int v11 = 0LL;
          goto LABEL_69;
        }

        id v19 = v18;
        int v11 = 0LL;
        id v84 = *(void *)v91;
        uint64_t v80 = v9;
        while (1)
        {
          id v20 = 0LL;
          id v81 = v19;
          do
          {
            if (*(void *)v91 != v84) {
              objc_enumerationMutation(obj);
            }
            uint64_t v21 = *(void *)(*((void *)&v90 + 1) + 8LL * (void)v20);
            id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByAppendingPathComponent:", v21, v77, v78));
            id v23 = WALogCategoryDeviceStoreHandle();
            id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
              id v99 = 1024;
              id v100 = 5458;
              id v101 = 2112;
              uint64_t v102 = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Reading %@",  buf,  0x1Cu);
            }

            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v22));
            if (v25)
            {
              id v89 = v11;
              id v26 = (id)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v25,  0LL,  &v89));
              id v27 = v89;

              if (v27)
              {
                id v57 = WALogCategoryDeviceStoreHandle();
                uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
                if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                  id v99 = 1024;
                  id v100 = 5464;
                  id v101 = 2112;
                  uint64_t v102 = v22;
                  _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Malformed json from file: %@",  buf,  0x1Cu);
                }

                int v11 = v27;
                goto LABEL_53;
              }

              if (v26)
              {
                id v28 = objc_opt_class(&OBJC_CLASS___NSDictionary);
                if ((objc_opt_isKindOfClass(v26, v28) & 1) != 0)
                {
                  id v26 = v26;
                  id v29 = (void *)objc_claimAutoreleasedReturnValue([v26 allKeys]);
                  unint64_t v30 = v29;
                  if (v29 && [v29 count] == (id)1)
                  {
                    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectAtIndex:0]);
                    if (v31
                      && (int v32 = objc_opt_class(&OBJC_CLASS___NSString), (objc_opt_isKindOfClass(v31, v32) & 1) != 0))
                    {
                      __int16 v33 = WALogCategoryDeviceStoreHandle();
                      unsigned int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136446978;
                        id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                        id v99 = 1024;
                        id v100 = 5475;
                        id v101 = 2112;
                        uint64_t v102 = v22;
                        uint64_t v103 = 2112;
                        id v104 = v31;
                        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:%@ contains %@",  buf,  0x26u);
                      }

                      if ([v31 isEqualToString:@"WA_DEVICE_ANALYTICS_DATAPATH_METRIC_STREAM"])
                      {
                        id v35 = objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v31]);
                        uint64_t v36 = v9;
                        id v37 = (void *)v35;
                        id v38 = (void *)objc_claimAutoreleasedReturnValue([v36 stringByAppendingPathComponent:v35]);

                        if (v38)
                        {
                          uint64_t v39 = WALogCategoryDeviceStoreHandle();
                          unsigned int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
                          if (os_signpost_enabled(v40))
                          {
                            *(_WORD *)buf = 0;
                            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "processWiFiAnalyticsMessageWAMFile",  (const char *)&unk_1000B76E7,  buf,  2u);
                          }

                          -[WAEngine processWiFiAnalyticsMessageWAMFile:file:]( v79,  "processWiFiAnalyticsMessageWAMFile:file:",  v38,  v21);
                          id v41 = WALogCategoryDeviceStoreHandle();
                          double v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
                          if (os_signpost_enabled(v42))
                          {
                            *(_WORD *)buf = 0;
                            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "processWiFiAnalyticsMessageWAMFile",  (const char *)&unk_1000B76E7,  buf,  2u);
                          }
                        }

                        NSErrorUserInfoKey v88 = 0LL;
                        [v82 removeItemAtPath:v38 error:&v88];
                        id v43 = (os_log_s *)v88;
                        if (v43)
                        {
                          id v44 = WALogCategoryDefaultHandle();
                          id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136446722;
                            id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                            id v99 = 1024;
                            id v100 = 5487;
                            id v101 = 2112;
                            uint64_t v102 = v38;
                            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to remove file at path: %@",  buf,  0x1Cu);
                          }
                        }
                      }

                      else
                      {
                        id v48 = WALogCategoryDeviceStoreHandle();
                        uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
                        if (os_signpost_enabled(v49))
                        {
                          *(_WORD *)buf = 0;
                          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "processWAMessageMetric",  (const char *)&unk_1000B76E7,  buf,  2u);
                        }

                        uint64_t v50 = (dispatch_queue_s *)v79->_engineQ;
                        v87[0] = _NSConcreteStackBlock;
                        v87[1] = 3221225472LL;
                        v87[2] = sub_10006C5D0;
                        v87[3] = &unk_1000CCD80;
                        v87[4] = v79;
                        dispatch_sync(v50, v87);
                        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[WAEngine analyticsProcessor](v79, "analyticsProcessor"));
                        unsigned int v52 = (void *)objc_claimAutoreleasedReturnValue([v26 valueForKey:v31]);
                        [v51 processWAMessageMetric:v31 data:v52];

                        __int16 v53 = WALogCategoryDeviceStoreHandle();
                        id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
                        if (os_signpost_enabled(v43))
                        {
                          *(_WORD *)buf = 0;
                          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v43,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "processWAMessageMetric",  (const char *)&unk_1000B76E7,  buf,  2u);
                        }
                      }

                      __int16 v9 = v80;
                    }

                    else
                    {
                      id v60 = WALogCategoryDeviceStoreHandle();
                      id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136446722;
                        id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                        id v99 = 1024;
                        id v100 = 5474;
                        id v101 = 2112;
                        uint64_t v102 = v26;
                        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Object for metricName not NSString %@",  buf,  0x1Cu);
                      }
                    }
                  }

                  else
                  {
                    uint64_t v59 = WALogCategoryDeviceStoreHandle();
                    id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446722;
                      id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                      id v99 = 1024;
                      id v100 = 5471;
                      id v101 = 2112;
                      uint64_t v102 = v26;
                      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Unexpected metric dict %@",  buf,  0x1Cu);
                    }

                    __int16 v31 = 0LL;
                  }

                  unint64_t v86 = 0LL;
                  [v82 removeItemAtPath:v22 error:&v86];
                  int v11 = v86;
                  if (v11)
                  {
                    int v54 = WALogCategoryDefaultHandle();
                    __int16 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446722;
                      id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                      id v99 = 1024;
                      id v100 = 5504;
                      id v101 = 2112;
                      uint64_t v102 = v22;
                      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to remove file at path: %@",  buf,  0x1Cu);
                    }
                  }

LABEL_53:
                  id v19 = v81;
                  goto LABEL_54;
                }
              }

              unsigned int v46 = WALogCategoryDefaultHandle();
              id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                id v99 = 1024;
                id v100 = 5507;
                id v101 = 2112;
                uint64_t v102 = v22;
                _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Cannot get dict from json file: %@",  buf,  0x1Cu);
              }

              int v11 = 0LL;
            }

            else
            {
              uint64_t v56 = WALogCategoryDeviceStoreHandle();
              id v26 = (id)objc_claimAutoreleasedReturnValue(v56);
              if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
                id v99 = 1024;
                id v100 = 5461;
                id v101 = 2112;
                uint64_t v102 = v22;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v26,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:fileData nil: %@",  buf,  0x1Cu);
              }
            }

LABEL_54:
            id v20 = (char *)v20 + 1;
          }

          while (v19 != v20);
          id v61 = [obj countByEnumeratingWithState:&v90 objects:v96 count:16];
          id v19 = v61;
          if (!v61)
          {
LABEL_69:

            unsigned int v62 = (dispatch_queue_s *)v79->_engineQ;
            v85[0] = _NSConcreteStackBlock;
            v85[1] = 3221225472LL;
            v85[2] = sub_10006C5F4;
            v85[3] = &unk_1000CCD80;
            v85[4] = v79;
            dispatch_sync(v62, v85);
            uint64_t v63 = WALogCategoryDeviceStoreHandle();
            uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
              id v99 = 1024;
              id v100 = 5519;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:performPruneBasedOnStoreSizeAndSave",  buf,  0x12u);
            }

            id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[WAEngine analyticsProcessor](v79, "analyticsProcessor"));
            -[os_log_s performPruneBasedOnStoreSizeAndSave](v65, "performPruneBasedOnStoreSizeAndSave");
            __int128 v14 = v77;
            goto LABEL_72;
          }
        }
      }

      int v76 = WALogCategoryDeviceStoreHandle();
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
        id v99 = 1024;
        id v100 = 5444;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Cannot process the files",  buf,  0x12u);
      }

      int v11 = 0LL;
    }

    else
    {
      uint64_t v75 = WALogCategoryDeviceStoreHandle();
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v98 = "-[WAEngine processWiFiAnalyticsMessageJSONFilesInTmpDir:]";
        id v99 = 1024;
        id v100 = 5441;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:No files to process",  buf,  0x12u);
      }

      int v11 = 0LL;
      uint64_t v78 = 0LL;
    }
  }

LABEL_72:
  id v66 = WALogCategoryDeviceStoreHandle();
  __int128 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
  if (os_signpost_enabled(v67))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v67,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "processWiFiAnalyticsMessageJSONFilesInTmpDir",  (const char *)&unk_1000B76E7,  buf,  2u);
  }
}

id sub_10006C5AC(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"AnalyticsProcessor: Age Out Analytics",  *(void *)(*(void *)(a1 + 32) + 688LL),  *(void *)(*(void *)(a1 + 32) + 88LL));
}

id sub_10006C5D0(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"AnalyticsProcessor: Process WA Message Metric",  *(void *)(*(void *)(a1 + 32) + 688LL),  *(void *)(*(void *)(a1 + 32) + 88LL));
}

id sub_10006C5F4(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"AnalyticsProcessor: Prune",  *(void *)(*(void *)(a1 + 32) + 688LL),  *(void *)(*(void *)(a1 + 32) + 88LL));
}

void sub_10006C8C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) datapathMetricStream]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 getPBCodableNSDataFromNSKeyedArchive:*(void *)(a1 + 40)]);

  if (v3)
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:]( &OBJC_CLASS___WAUtil,  "incrementValueForKey:inMutableDict:onQueue:",  @"AnalyticsProcessor: Datapath Metrics Stream",  *(void *)(*(void *)(a1 + 32) + 688LL),  *(void *)(*(void *)(a1 + 32) + 88LL));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) analyticsProcessor]);
    [v4 processDatapathMetricStream:v3 withDate:*(void *)(a1 + 48)];
  }

  else
  {
    id v5 = WALogCategoryDeviceStoreHandle();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136446466;
      int v8 = "-[WAEngine processWiFiAnalyticsMessageWAMFile:file:]_block_invoke";
      __int16 v9 = 1024;
      int v10 = 5546;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Failed to getPBCodableNSDataFromNSKeyedArchive",  (uint8_t *)&v7,  0x12u);
    }
  }
}

void sub_10006CE8C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "__dnsSetupConfig"));
  if (v3) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10006D83C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_10006D870(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "__dnsStateConfig"));
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kSCPropNetDNSServerAddresses]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "__ipv4SetupConfig"));
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:kSCPropNetDNSServerAddresses]);
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
      int v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
  }

  objc_autoreleasePoolPop(v2);
}

LABEL_6:
    }
  }

void sub_10006E1FC(id a1, NSError *a2, NSArray *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  id v6 = WALogCategoryDefaultHandle();
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136446978;
    uint64_t v9 = "-[WAEngine triggerPeerDiscovery]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 5986;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiscovery: Initiate Study.. result:%@ error:%@",  (uint8_t *)&v8,  0x26u);
  }
}

void sub_10006E9B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10006E9F8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
  id v8 = WALogCategoryDefaultHandle();
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    int v12 = 136446978;
    uint64_t v13 = "-[WAEngine gatherDiscoveredPeerInfo:]_block_invoke";
    __int16 v14 = 1024;
    int v15 = 6016;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:PeerDiscovery: result:%@ error:%@",  (uint8_t *)&v12,  0x26u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10006ED54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10006ED88(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = (dispatch_queue_s *)WeakRetained[61];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006EE2C;
  block[3] = &unk_1000CD148;
  id v10 = v4;
  id v11 = WeakRetained;
  id v7 = WeakRetained;
  id v8 = v4;
  dispatch_sync(v6, block);
}

void sub_10006EE2C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = v2;
  id v4 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v19 = v2;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v20 objects:v30 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v21;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v20 + 1) + 8 * (void)i) info]);
          uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"DNSResolution"]);
          uint64_t v12 = *(void *)(a1 + 40);
          uint64_t v13 = *(void **)(v12 + 472);
          *(void *)(v12 + 472) = v11;

          id v14 = WALogCategoryDefaultHandle();
          int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 472LL);
            *(_DWORD *)buf = 136446722;
            uint64_t v25 = "-[WAEngine resolveAppleCaptiveServer]_block_invoke_2";
            __int16 v26 = 1024;
            int v27 = 6072;
            __int16 v28 = 2112;
            uint64_t v29 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DNSResolution: result : %@",  buf,  0x1Cu);
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v20 objects:v30 count:16];
      }

      while (v7);
    }

    id v3 = v19;
  }

  uint64_t v17 = *(void *)(a1 + 40);
  if (*(void *)(v17 + 440) || *(void *)(v17 + 448) || *(void *)(v17 + 464) || *(void *)(v17 + 456))
  {
    uint64_t v18 = *(void *)(v17 + 472);
    [*(id *)(v17 + 456) setObject:v18 forKeyedSubscript:@"IPAddress"];
    [*(id *)(*(void *)(a1 + 40) + 464) setObject:v18 forKeyedSubscript:@"IPAddress"];
    [*(id *)(*(void *)(a1 + 40) + 448) setObject:v18 forKeyedSubscript:@"IPAddress"];
    [*(id *)(*(void *)(a1 + 40) + 440) setObject:v18 forKeyedSubscript:@"IPAddress"];
  }

  else
  {
    [(id)v17 initializeProbeCxt];
  }

  objc_autoreleasePoolPop(v3);
}

void sub_10006FA20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id location)
{
}

void sub_10006FA90(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1[4] + 440LL)));
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1[4] + 448LL)));
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1[4] + 456LL)));
  uint64_t v10 = *(void *)(a1[7] + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1[4] + 464LL)));
  uint64_t v13 = *(void *)(a1[8] + 8LL);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  objc_autoreleasePoolPop(v2);
}

void sub_10006FB64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = (dispatch_queue_s *)WeakRetained[61];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006FC34;
  block[3] = &unk_1000CD900;
  int v16 = *(_DWORD *)(a1 + 40);
  id v13 = v5;
  id v14 = v6;
  id v15 = WeakRetained;
  uint64_t v9 = WeakRetained;
  id v10 = v6;
  id v11 = v5;
  dispatch_sync(v8, block);
}

void sub_10006FC34(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = WALogCategoryDefaultHandle();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136447234;
    id v61 = "-[WAEngine triggerDiagnosticPingWithrequestId:]_block_invoke_2";
    __int16 v62 = 1024;
    int v63 = 6174;
    __int16 v64 = 1024;
    int v65 = v5;
    __int16 v66 = 2112;
    *(void *)__int128 v67 = v6;
    *(_WORD *)&v67[8] = 2112;
    uint64_t v68 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Ping: instanceId:%u error:%@ ProbeResults:: %@",  buf,  0x2Cu);
  }

  if (!*(void *)(a1 + 32))
  {
    uint64_t v8 = *(void **)(a1 + 40);
    if (!v8) {
      goto LABEL_38;
    }
    id v44 = v2;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    id v9 = v8;
    id v48 = [v9 countByEnumeratingWithState:&v54 objects:v59 count:16];
    if (!v48) {
      goto LABEL_37;
    }
    uint64_t v47 = *(void *)v55;
    id v45 = v9;
LABEL_8:
    uint64_t v10 = 0LL;
    while (1)
    {
      if (*(void *)v55 != v47) {
        objc_enumerationMutation(v9);
      }
      id v11 = *(void **)(*((void *)&v54 + 1) + 8 * v10);
      if ([v11 testID] == (id)3) {
        break;
      }
      if ([v11 testID] == (id)6)
      {
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        __int128 v50 = 0u;
        __int128 v51 = 0u;
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v11 info]);
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"PingResults"]);

        id obj = v24;
        id v25 = [v24 countByEnumeratingWithState:&v50 objects:v58 count:16];
        if (v25)
        {
          id v26 = v25;
          uint64_t v46 = v10;
          uint64_t v27 = *(void *)v51;
          do
          {
            for (uint64_t i = 0LL; i != v26; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v51 != v27) {
                objc_enumerationMutation(obj);
              }
              uint64_t v29 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
              unsigned int v30 = [v29 count];
              double v31 = (double)(uint64_t)[v29 count];
              [v29 packetLoss];
              uint64_t v33 = (v31 + v32 / -100.0 * (double)(uint64_t)[v29 count]);
              unint64_t v34 = *(unsigned int *)(a1 + 56);
              id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 176) preferences]);
              id v36 = objc_msgSend(v35, "dns_symptoms_trap_evaluated_at_sample");

              uint64_t v37 = *(void *)(a1 + 48);
              if ((unint64_t)v36 <= v34)
              {
                *(void *)(v37 + 304) += v33;
              }

              else
              {
                *(void *)(v37 + 272) += v33;
                if ((_DWORD)v33) {
                  *(_BYTE *)(*(void *)(a1 + 48) + 46LL) = 1;
                }
              }

              id v38 = WALogCategoryDefaultHandle();
              uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
              {
                int v40 = *(_DWORD *)(a1 + 56);
                *(_DWORD *)buf = 136447234;
                id v61 = "-[WAEngine triggerDiagnosticPingWithrequestId:]_block_invoke";
                __int16 v62 = 1024;
                int v63 = 6204;
                __int16 v64 = 1024;
                int v65 = v40;
                __int16 v66 = 1024;
                *(_DWORD *)__int128 v67 = v30;
                *(_WORD *)&v67[4] = 1024;
                *(_DWORD *)&v67[6] = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:WANPingResults: instanceId:%u pingCount:%u successCount:%u",  buf,  0x24u);
              }
            }

            id v26 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
          }

          while (v26);
          id v9 = v45;
          uint64_t v10 = v46;
        }

        goto LABEL_34;
      }

void sub_100070384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000703A8(uint64_t a1, int a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = (dispatch_queue_s *)WeakRetained[61];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100070440;
  block[3] = &unk_1000CD950;
  id v11 = WeakRetained;
  uint64_t v12 = a3;
  int v8 = *(_DWORD *)(a1 + 40);
  int v13 = a2;
  int v14 = v8;
  id v9 = WeakRetained;
  dispatch_sync(v7, block);
}

void sub_100070440(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (!*(_DWORD *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      id v7 = *(id *)(v8 + 48);
      if (v7)
      {
        unsigned int v9 = [*(id *)(a1 + 32) isScoreBelowThreshold:v7 type:0 instanceId:*(unsigned int *)(a1 + 52)];
        unsigned int v10 = [*(id *)(a1 + 32) isScoreBelowThreshold:v7 type:1 instanceId:*(unsigned int *)(a1 + 52)];
        unint64_t v11 = *(unsigned int *)(a1 + 52);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 176) preferences]);
        id v13 = objc_msgSend(v12, "dns_symptoms_trap_evaluated_at_sample");

        uint64_t v14 = *(void *)(a1 + 32);
        if ((unint64_t)v13 <= v11)
        {
          if (v9)
          {
            if (!*(_BYTE *)(v14 + 45))
            {
              uint64_t v21 = *(unsigned int *)(a1 + 52);
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v14 + 176) preferences]);
              *(void *)(*(void *)(a1 + 32) + 320LL) = v21
                                                        - (void)objc_msgSend( v22,  "dns_symptoms_trap_evaluated_at_sample")
                                                        + 1;
            }
          }

          else
          {
            if (!*(_BYTE *)(v14 + 45))
            {
              uint64_t v24 = *(unsigned int *)(a1 + 52);
              id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v14 + 176) preferences]);
              *(void *)(*(void *)(a1 + 32) + 320LL) = v24
                                                        - (void)objc_msgSend( v25,  "dns_symptoms_trap_evaluated_at_sample");

              uint64_t v14 = *(void *)(a1 + 32);
            }

            *(_BYTE *)(v14 + 45) = 1;
          }

          uint64_t v23 = 336LL;
        }

        else
        {
          if (v9)
          {
            if (*(_BYTE *)(v14 + 44)) {
              ++*(void *)(v14 + 312);
            }
          }

          else
          {
            *(_BYTE *)(v14 + 44) = 0;
          }

          uint64_t v23 = 328LL;
        }

        *(void *)(*(void *)(a1 + 32) + v23) += v10;
        id v26 = WALogCategoryDefaultHandle();
        double v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_38;
        }
        int v27 = *(_DWORD *)(a1 + 52);
        __int16 v28 = "NO";
        uint64_t v29 = *(void *)(a1 + 32);
        id v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke_2";
        if (v9) {
          unsigned int v30 = "YES";
        }
        else {
          unsigned int v30 = "NO";
        }
        int v31 = *(unsigned __int8 *)(v29 + 44);
        if (v10) {
          double v32 = "YES";
        }
        else {
          double v32 = "NO";
        }
        int v33 = *(unsigned __int8 *)(v29 + 45);
        if (v31) {
          unint64_t v34 = "YES";
        }
        else {
          unint64_t v34 = "NO";
        }
        int v35 = 136447746;
        __int16 v37 = 1024;
        if (v33) {
          __int16 v28 = "YES";
        }
        int v38 = 6259;
        __int16 v39 = 1024;
        int v40 = v27;
        __int16 v41 = 2080;
        double v42 = v30;
        __int16 v43 = 2080;
        id v44 = v32;
        char v45 = 32;
        char v46 = 8;
        uint64_t v47 = v34;
        __int16 v48 = 2080;
        uint64_t v49 = v28;
        double v17 = "%{public}s::%d:Netscore: instanceId:%u isNetScoreBelowThreshold:%s isDataStallScoreBelowThreshold:%s _isPo"
              "orSymptomsDnsConditions:%s _didSymptomsConditionRecoverAfterDecision:%s";
        uint64_t v18 = v16;
        os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
        uint32_t v20 = 64;
      }

      else
      {
        id v15 = WALogCategoryDefaultHandle();
        double v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
LABEL_38:

LABEL_39:
          goto LABEL_40;
        }

        int v35 = 136446466;
        id v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke";
        __int16 v37 = 1024;
        int v38 = 6261;
        double v17 = "%{public}s::%d:empty eventInfo";
        uint64_t v18 = v16;
        os_log_type_t v19 = OS_LOG_TYPE_ERROR;
        uint32_t v20 = 18;
      }

      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, (uint8_t *)&v35, v20);
      goto LABEL_38;
    }
  }

  id v3 = WALogCategoryDefaultHandle();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(_DWORD *)(a1 + 48);
    int v35 = 136446722;
    id v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke";
    __int16 v37 = 1024;
    int v38 = 6264;
    __int16 v39 = 1024;
    int v40 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Error:%d from Managed Event Fetch",  (uint8_t *)&v35,  0x18u);
  }

  if (!*(void *)(a1 + 40))
  {
    id v6 = WALogCategoryDefaultHandle();
    id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      int v35 = 136446466;
      id v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke";
      __int16 v37 = 1024;
      int v38 = 6266;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Fetched managed event is null",  (uint8_t *)&v35,  0x12u);
    }

    goto LABEL_39;
  }

void sub_100071BF4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("W5Client");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1000ED028 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    abort_report_np("Unable to find class %s", "W5Client");
    sub_100071C60();
  }

void sub_100071C60()
{
  id v1 = 0LL;
  if (!qword_1000ED030)
  {
    __int128 v2 = off_1000CD9C0;
    uint64_t v3 = 0LL;
    qword_1000ED030 = _sl_dlopen(&v2, &v1);
    uint64_t v0 = v1;
    if (qword_1000ED030)
    {
      if (!v1) {
        return;
      }
    }

    else
    {
      uint64_t v0 = (char *)abort_report_np("%s", v1);
    }

    free(v0);
  }

CADataTransformEngine *sub_100071D1C(uint64_t a1)
{
  id result = (CADataTransformEngine *)objc_getClass("W5DiagnosticsTestRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1000ED038 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (CADataTransformEngine *)abort_report_np("Unable to find class %s", "W5DiagnosticsTestRequest");
    return -[CADataTransformEngine init](v3, v4);
  }

  return result;
}

id sub_1000729DC(uint64_t a1)
{
  uint64_t v233 = 0LL;
  id v234 = &v233;
  uint64_t v235 = 0x2020000000LL;
  char v236 = 1;
  dispatch_semaphore_t v211 = dispatch_semaphore_create(0LL);
  uint64_t v227 = 0LL;
  v228 = &v227;
  uint64_t v229 = 0x3032000000LL;
  v230 = sub_1000744BC;
  id v231 = sub_1000744CC;
  id v232 = (id)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 32)));
  uint64_t v212 = a1;
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) instantiateAWDProtobufAndPopulateValues:*(void *)(a1 + 48)]);
  id v213 = v2;
  if (!v2)
  {
    id v32 = WALogCategoryDefaultHandle();
    int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v239 = 1024;
      int v240 = 284;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Error creating DPS data to send to CA",  buf,  0x12u);
    }

    unint64_t v34 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
    id v209 = 0LL;
    v210 = 0LL;
    goto LABEL_34;
  }

  id v3 = v2;
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stallNotifications]);
  if (![v4 count])
  {

    goto LABEL_21;
  }

  unint64_t v5 = (unint64_t)[v3 dpsCounterSamplesCount];
  LOBYTE(v5) = v5 < (unint64_t)objc_msgSend( *(id *)(*(void *)(v212 + 40) + 16),  "dps_interrogation_sample_count");

  if ((v5 & 1) != 0)
  {
LABEL_21:
    id v37 = WALogCategoryDefaultHandle();
    int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v239 = 1024;
      int v240 = 290;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}s::%d:Invalid DPS data", buf, 0x12u);
    }

    *((_BYTE *)v234 + 24) = 0;
    goto LABEL_24;
  }

  if (*((_BYTE *)v234 + 24))
  {
    id v6 = *(void **)(v212 + 40);
    uint64_t v7 = *(void *)(v212 + 56);
    v223[0] = _NSConcreteStackBlock;
    v223[1] = 3221225472LL;
    v223[2] = sub_1000744D4;
    v223[3] = &unk_1000CD9E0;
    v225 = &v227;
    v226 = &v233;
    dispatch_semaphore_t dsema = v211;
    dispatch_semaphore_t v224 = dsema;
    [v6 computeDPSRecoveryIndex:v3 timestamps:v7 andReply:v223];

    if (*((_BYTE *)v234 + 24))
    {
      __int128 v221 = 0u;
      __int128 v222 = 0u;
      __int128 v219 = 0u;
      __int128 v220 = 0u;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 stallNotifications]);
      char v9 = 0;
      int v10 = 0;
      uint64_t v11 = 0LL;
      id v12 = [v8 countByEnumeratingWithState:&v219 objects:v244 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v220;
        do
        {
          for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v220 != v13) {
              objc_enumerationMutation(v8);
            }
            id v15 = *(void **)(*((void *)&v219 + 1) + 8LL * (void)i);
            if (![v15 symptom])
            {
              uint64_t v11 = [v15 problemAC] | v11;
              v10 |= [v15 facetimeCallInProgress];
            }

            v9 |= [v15 symptom] == 2;
          }

          id v12 = [v8 countByEnumeratingWithState:&v219 objects:v244 count:16];
        }

        while (v12);
      }

      double v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11));
      [(id)v228[5] setObject:v16 forKeyedSubscript:@"problematicACs"];

      double v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v10 & 1));
      [(id)v228[5] setObject:v17 forKeyedSubscript:@"isCriticalAppRunning"];

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9 & 1));
      [(id)v228[5] setObject:v18 forKeyedSubscript:@"didUserToggleWiFiOff"];

      os_log_type_t v19 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      uint32_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 qDpsStats]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v20 isDpsValidationDisabled]));
      [(id)v228[5] setObject:v21 forKeyedSubscript:@"isDpsValidationDisabled"];

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 qDpsStats]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 quickDpsTimeSincePreviousTriggerMinutes]));
      [(id)v228[5] setObject:v24 forKeyedSubscript:@"timeSincePreviousStudy"];

      id v25 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 qDpsStats]);
      int v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v26 quickDpsResetRecommendation]));
      [(id)v228[5] setObject:v27 forKeyedSubscript:@"qDpsStudyRecommendation"];

      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 qDpsStats]);
      id v30 = [v29 suppressedReason];
      if (v30 >= 0xB) {
        int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v30));
      }
      else {
        int v31 = *(&off_1000CDA78 + (int)v30);
      }
      [(id)v228[5] setObject:v31 forKeyedSubscript:@"qDpsSuppressionReason"];

      __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 qDpsStats]);
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v49 screenStateOn]));
      [(id)v228[5] setObject:v50 forKeyedSubscript:@"qDpsScreenStateOnAtDecision"];

      __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v51 qDpsStats]);
      __int128 v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v52 screenStateOn]));
      [(id)v228[5] setObject:v53 forKeyedSubscript:@"MLDecisionPath"];

      __int128 v54 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      __int128 v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v54 isAssociatedAtStudyEnd]));
      [(id)v228[5] setObject:v55 forKeyedSubscript:@"isAssociatedAtStudyEnd"];

      __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([v56 controllerStats]);
      v210 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d",  [v57 channel]));

      uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 controllerStats]);
      id v209 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d",  [v59 channelBandwidth]));

      [(id)v228[5] setObject:v210 forKeyedSubscript:@"channel"];
      [(id)v228[5] setObject:v209 forKeyedSubscript:@"channelBandwidth"];
      if ([v3 usbEventsCount])
      {
        id v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v60 usbAction]));
        [(id)v228[5] setObject:v61 forKeyedSubscript:@"usbAction"];

        __int16 v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        int v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v62 usbTotal]));
        [(id)v228[5] setObject:v63 forKeyedSubscript:@"usbTotal"];

        __int16 v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        int v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v64 durationSinceUSBEventInSeconds]));
        [(id)v228[5] setObject:v65 forKeyedSubscript:@"timeSinceUSBEvent"];

        __int16 v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        __int128 v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v66 smartCCADesenseSupported]));
        [(id)v228[5] setObject:v67 forKeyedSubscript:@"isSmartCCADesenseSupported"];

        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        id v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v68 isVendorApple]));
        [(id)v228[5] setObject:v69 forKeyedSubscript:@"isUSBDeviceVendorApple"];
      }

      id v70 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      id v71 = [v70 accessPointInfosCount];

      if (v71)
      {
        unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
        id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 accessPointInfoAtIndex:0]);
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v73 modelName]);
        [(id)v228[5] setObject:v74 forKeyedSubscript:@"APModelName"];

        uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
        int v76 = (void *)objc_claimAutoreleasedReturnValue([v75 accessPointInfoAtIndex:0]);
        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 modelNumber]);
        [(id)v228[5] setObject:v77 forKeyedSubscript:@"APModelNumber"];

        uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
        id v79 = (void *)objc_claimAutoreleasedReturnValue([v78 accessPointInfoAtIndex:0]);
        uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 manufacturerElement]);
        [(id)v228[5] setObject:v80 forKeyedSubscript:@"APManufacturerElement"];

        id v81 = &__kCFBooleanTrue;
      }

      else
      {
        id v81 = &__kCFBooleanFalse;
      }

      [(id)v228[5] setObject:v81 forKeyedSubscript:@"IsAPInfoPresent"];
      id v82 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);
      unint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 btSnapshot]);
      id v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v83 use]));
      [(id)v228[5] setObject:v84 forKeyedSubscript:@"btUse"];

      double v85 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);
      unint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v85 awdlSnapshot]);
      id v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v86 use]));
      [(id)v228[5] setObject:v87 forKeyedSubscript:@"awdlUse"];

      NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);
      id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 awdlSnapshot]);
      id v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v89 sdb]));
      [(id)v228[5] setObject:v90 forKeyedSubscript:@"awdlSdb"];

      os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      id v92 = (void *)objc_claimAutoreleasedReturnValue([v91 peerStats]);
      id v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v92 ccaValue]));
      [(id)v228[5] setObject:v93 forKeyedSubscript:@"ccaValue"];

      __int16 v94 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v94 peerStats]);
      uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v95 rssiValue]));
      [(id)v228[5] setObject:v96 forKeyedSubscript:@"rssiValue"];

      id v97 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      id v98 = (void *)objc_claimAutoreleasedReturnValue([v97 peerStats]);
      id v99 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v98 snrValue]));
      [(id)v228[5] setObject:v99 forKeyedSubscript:@"snrValue"];

      id v100 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      id v101 = (void *)objc_claimAutoreleasedReturnValue([v100 qDpsStats]);
      uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v101 quickDpsTimeSincePreviousTriggerMinutes]));
      [(id)v228[5] setObject:v102 forKeyedSubscript:@"timeSincePreviousStudy"];

      uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      id v104 = (void *)objc_claimAutoreleasedReturnValue([v103 peerStats]);
      id v105 = (void *)objc_claimAutoreleasedReturnValue([v104 completions]);
      LODWORD(v102) = [v105 nobuf];
      unint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      __int128 v107 = (void *)objc_claimAutoreleasedReturnValue([v106 peerStats]);
      __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v107 completions]);
      __int128 v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v102 - [v108 nobuf]));
      [(id)v228[5] setObject:v109 forKeyedSubscript:@"nobufStatusCountComputedAtDecision"];

      __int128 v110 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int128 v111 = (void *)objc_claimAutoreleasedReturnValue([v110 peerStats]);
      __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v111 completions]);
      LODWORD(v109) = [v112 chipmodeerror];
      __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([v113 peerStats]);
      __int128 v115 = (void *)objc_claimAutoreleasedReturnValue([v114 completions]);
      uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v109 - [v115 chipmodeerror]));
      [(id)v228[5] setObject:v116 forKeyedSubscript:@"chipmodeerrorStatusCountComputedAtDecision"];

      uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int16 v118 = (void *)objc_claimAutoreleasedReturnValue([v117 peerStats]);
      int v119 = (void *)objc_claimAutoreleasedReturnValue([v118 completions]);
      LODWORD(v116) = [v119 expired];
      __int16 v120 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      unint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v120 peerStats]);
      __int16 v122 = (void *)objc_claimAutoreleasedReturnValue([v121 completions]);
      id v123 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v116 - [v122 expired]));
      [(id)v228[5] setObject:v123 forKeyedSubscript:@"expiredStatusCountComputedAtDecision"];

      NSErrorUserInfoKey v124 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v124 peerStats]);
      uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([v125 completions]);
      LODWORD(v123) = [v126 mbfree];
      uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      id v128 = (void *)objc_claimAutoreleasedReturnValue([v127 peerStats]);
      uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue([v128 completions]);
      uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v123 - [v129 mbfree]));
      [(id)v228[5] setObject:v130 forKeyedSubscript:@"mbfreeStatusCountComputedAtDecision"];

      uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v131 peerStats]);
      v133 = (void *)objc_claimAutoreleasedReturnValue([v132 completions]);
      LODWORD(v130) = [v133 noremotepeer];
      __int16 v134 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      int v135 = (void *)objc_claimAutoreleasedReturnValue([v134 peerStats]);
      __int16 v136 = (void *)objc_claimAutoreleasedReturnValue([v135 completions]);
      uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v130 - [v136 noremotepeer]));
      [(id)v228[5] setObject:v137 forKeyedSubscript:@"noremotepeerStatusCountComputedAtDecision"];

      __int16 v138 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue([v138 peerStats]);
      id v140 = (void *)objc_claimAutoreleasedReturnValue([v139 completions]);
      LODWORD(v137) = [v140 noack];
      int v141 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      id v142 = (void *)objc_claimAutoreleasedReturnValue([v141 peerStats]);
      __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v142 completions]);
      __int128 v144 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v137 - [v143 noack]));
      [(id)v228[5] setObject:v144 forKeyedSubscript:@"noackStatusCountComputedAtDecision"];

      char v145 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      BOOL v146 = (void *)objc_claimAutoreleasedReturnValue([v145 peerStats]);
      __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v146 completions]);
      LODWORD(v144) = [v147 txfailure];
      __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      __int128 v149 = (void *)objc_claimAutoreleasedReturnValue([v148 peerStats]);
      __int128 v150 = (void *)objc_claimAutoreleasedReturnValue([v149 completions]);
      id v151 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v144 - [v150 txfailure]));
      [(id)v228[5] setObject:v151 forKeyedSubscript:@"txfailureStatusCountComputedAtDecision"];

      __int128 v152 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v152 peerStats]);
      uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v153 completions]);
      LODWORD(v151) = [v154 noresources];
      uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([v155 peerStats]);
      __int128 v157 = (void *)objc_claimAutoreleasedReturnValue([v156 completions]);
      uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v151 - [v157 noresources]));
      [(id)v228[5] setObject:v158 forKeyedSubscript:@"noresourcesStatusCountComputedAtDecision"];

      __int128 v159 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int128 v160 = (void *)objc_claimAutoreleasedReturnValue([v159 peerStats]);
      __int128 v161 = (void *)objc_claimAutoreleasedReturnValue([v160 completions]);
      LODWORD(v15_Block_object_dispose((const void *)(v43 - 176), 8) = [v161 ioerror];
      __int128 v162 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      int v163 = (void *)objc_claimAutoreleasedReturnValue([v162 peerStats]);
      __int128 v164 = (void *)objc_claimAutoreleasedReturnValue([v163 completions]);
      __int16 v165 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v158 - [v164 ioerror]));
      [(id)v228[5] setObject:v165 forKeyedSubscript:@"ioerrorStatusCountComputedAtDecision"];

      int v166 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:1]);
      __int16 v167 = (void *)objc_claimAutoreleasedReturnValue([v166 peerStats]);
      double v168 = (void *)objc_claimAutoreleasedReturnValue([v167 completions]);
      LODWORD(v165) = [v168 internalerror];
      __int16 v169 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsCounterSampleAtIndex:0]);
      double v170 = (void *)objc_claimAutoreleasedReturnValue([v169 peerStats]);
      __int16 v171 = (void *)objc_claimAutoreleasedReturnValue([v170 completions]);
      uint64_t v172 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v165 - [v171 internalerror]));
      [(id)v228[5] setObject:v172 forKeyedSubscript:@"internalerrorStatusCountComputedAtDecision"];

      __int16 v173 = *(void **)(v212 + 40);
      uint64_t v174 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);
      __int128 v175 = (void *)objc_claimAutoreleasedReturnValue([v174 btSnapshot]);
      unint64_t v176 = (unint64_t)[v175 ts];
      __int128 v177 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v212 + 56) objectForKeyedSubscript:@"snapshotInstance"]);
      __int128 v178 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v173 computeSnapshotValidity:v176 / 0x3E8 snapshotTimestamp:v177 validityThreshold:7]));
      [(id)v228[5] setObject:v178 forKeyedSubscript:@"isBtSnapshotValid"];

      __int128 v179 = *(void **)(v212 + 40);
      id v180 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);
      __int16 v181 = (void *)objc_claimAutoreleasedReturnValue([v180 awdlSnapshot]);
      unint64_t v182 = (unint64_t)[v181 ts];
      int v183 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v212 + 56) objectForKeyedSubscript:@"snapshotInstance"]);
      __int16 v184 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v179 computeSnapshotValidity:v182 / 0x3E8 snapshotTimestamp:v183 validityThreshold:7]));
      [(id)v228[5] setObject:v184 forKeyedSubscript:@"isAwdlSnapshotValid"];

      uint64_t v185 = *(void **)(v212 + 40);
      __int16 v186 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v212 + 56) objectForKeyedSubscript:@"start"]);
      id v187 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v212 + 56) objectForKeyedSubscript:@"userToggle"]);
      NSErrorUserInfoKey v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v185 computeDifferenceBetweenDates:v186 end:v187]));
      [(id)v228[5] setObject:v188 forKeyedSubscript:@"userToggleAt"];

      id v189 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
      id v190 = [v189 associationChangesCount];

      id v191 = (void *)v228[5];
      if (v190)
      {
        [v191 setObject:&__kCFBooleanTrue forKeyedSubscript:@"isAssociationChangesValid"];
        __int128 v217 = 0u;
        __int128 v218 = 0u;
        __int128 v215 = 0u;
        __int128 v216 = 0u;
        v192 = (void *)objc_claimAutoreleasedReturnValue([v3 dpsEpiloge]);
        uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue([v192 associationChanges]);

        id v194 = [v193 countByEnumeratingWithState:&v215 objects:v243 count:16];
        int v195 = 0;
        int v196 = 0;
        if (v194)
        {
          uint64_t v197 = *(void *)v216;
          do
          {
            for (j = 0LL; j != v194; j = (char *)j + 1)
            {
              if (*(void *)v216 != v197) {
                objc_enumerationMutation(v193);
              }
              id v199 = *(void **)(*((void *)&v215 + 1) + 8LL * (void)j);
              v195 |= [v199 changedChannel];
              v196 |= [v199 newBSSID];
            }

            id v194 = [v193 countByEnumeratingWithState:&v215 objects:v243 count:16];
          }

          while (v194);
        }

        v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v195 & 1));
        [(id)v228[5] setObject:v200 forKeyedSubscript:@"didAssociateToNewChannel"];

        v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v196 & 1));
        [(id)v228[5] setObject:v201 forKeyedSubscript:@"didAssociateToNewBSSID"];
      }

      else
      {
        [v191 setObject:&__kCFBooleanFalse forKeyedSubscript:@"isAssociationChangesValid"];
      }

      id v202 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);

      if (v202)
      {
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v3 snapshot]);
        uint64_t v203 = 0LL;
        id v35 = 0LL;
        unint64_t v34 = 0LL;
        do
        {
          switch(v203)
          {
            case 0LL:
              uint64_t v204 = objc_claimAutoreleasedReturnValue([v36 txCompletionSnapshotBE]);
              goto LABEL_59;
            case 1LL:
              uint64_t v204 = objc_claimAutoreleasedReturnValue([v36 txCompletionSnapshotBK]);
              goto LABEL_59;
            case 2LL:
              uint64_t v204 = objc_claimAutoreleasedReturnValue([v36 txCompletionSnapshotVI]);
              goto LABEL_59;
            case 3LL:
              uint64_t v204 = objc_claimAutoreleasedReturnValue([v36 txCompletionSnapshotVO]);
LABEL_59:
              BOOL v205 = (void *)v204;

              unint64_t v34 = v205;
              break;
            default:
              break;
          }

          if (v34)
          {
            if (v35) {
              [*(id *)(v212 + 40) computeAggregateTxCompletionStatus:v35 source:v34];
            }
            else {
              id v35 = v34;
            }
          }

          ++v203;
        }

        while (v203 != 4);
        v206 = *(void **)(v212 + 40);
        v214[0] = _NSConcreteStackBlock;
        v214[1] = 3221225472LL;
        v214[2] = sub_100074584;
        v214[3] = &unk_1000CDA08;
        v214[4] = &v227;
        [v206 findTxCompletionFailureWithMaxCount:v35 andReply:v214];
      }

      else
      {
        unint64_t v34 = 0LL;
        id v35 = 0LL;
        id v36 = 0LL;
      }

      dispatch_time_t v207 = dispatch_time(0LL, 15000000000LL);
      dispatch_semaphore_wait(dsema, v207);
      goto LABEL_27;
    }
  }

void sub_100074460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

uint64_t sub_1000744BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000744CC(uint64_t a1)
{
}

uint64_t sub_1000744D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v7 forKeyedSubscript:@"recoveryObservedDuringStudy"];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v8 forKeyedSubscript:@"recoveryAt"];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a4;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100074584(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v9 = a4;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v7 forKeyedSubscript:@"majorTxFailureTypeAmongAllACs"];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v8 forKeyedSubscript:@"majorTxFailureCountAmongAllACs"];

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v9 forKeyedSubscript:@"aggregateTxFailureTypeAmongAllACs"];
}

id sub_100074834(uint64_t a1)
{
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 32)));
  id v3 = (char *)objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "dns_symptoms_trap_evaluated_at_sample");
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) instantiateAWDProtobufAndPopulateValues:*(void *)(a1 + 48)]);
  unint64_t v5 = v4;
  if (!v4)
  {
    id v459 = WALogCategoryDefaultHandle();
    __int16 v450 = (os_log_s *)objc_claimAutoreleasedReturnValue(v459);
    if (!os_log_type_enabled(v450, OS_LOG_TYPE_ERROR)) {
      goto LABEL_125;
    }
    *(_DWORD *)buf = 136446466;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    __int16 v514 = 1024;
    int v515 = 479;
    v460 = "%{public}s::%d:Error creating DPS data to send to CA";
LABEL_134:
    _os_log_impl((void *)&_mh_execute_header, v450, OS_LOG_TYPE_ERROR, v460, buf, 0x12u);
    goto LABEL_125;
  }

  id v6 = v4;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 stallNotifications]);
  id v8 = [v7 count];

  if (!v8)
  {
    id v461 = WALogCategoryDefaultHandle();
    __int16 v450 = (os_log_s *)objc_claimAutoreleasedReturnValue(v461);
    if (!os_log_type_enabled(v450, OS_LOG_TYPE_ERROR)) {
      goto LABEL_125;
    }
    *(_DWORD *)buf = 136446466;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    __int16 v514 = 1024;
    int v515 = 482;
    v460 = "%{public}s::%d:Invalid DNS data: no samples";
    goto LABEL_134;
  }

  id v9 = [v6 dpsCounterSamplesCount];
  if (v9 < objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "dns_symptoms_interrogation_sample_count"))
  {
    id v462 = WALogCategoryDefaultHandle();
    __int16 v450 = (os_log_s *)objc_claimAutoreleasedReturnValue(v462);
    if (!os_log_type_enabled(v450, OS_LOG_TYPE_ERROR)) {
      goto LABEL_125;
    }
    *(_DWORD *)buf = 136446466;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    __int16 v514 = 1024;
    int v515 = 483;
    v460 = "%{public}s::%d:Invalid DNS data: less samples";
    goto LABEL_134;
  }

  v499 = v5;
  uint64_t v500 = a1;
  __int128 v510 = 0u;
  __int128 v511 = 0u;
  __int128 v508 = 0u;
  __int128 v509 = 0u;
  v503 = v6;
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v6 stallNotifications]);
  id v11 = [v10 countByEnumeratingWithState:&v508 objects:v521 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    int v14 = 0;
    uint64_t v15 = *(void *)v509;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v509 != v15) {
          objc_enumerationMutation(v10);
        }
        double v17 = *(void **)(*((void *)&v508 + 1) + 8LL * (void)i);
        v13 |= [v17 symptom] == 2;
      }

      id v12 = [v10 countByEnumeratingWithState:&v508 objects:v521 count:16];
    }

    while (v12);
  }

  else
  {
    char v13 = 0;
    LOBYTE(v14) = 0;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v14 & 1));
  [v2 setObject:v18 forKeyedSubscript:@"IsCriticalAppRunning"];

  os_log_type_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v13 & 1));
  [v2 setObject:v19 forKeyedSubscript:@"DidUserToggleWiFiOff"];

  uint64_t v20 = objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"UserToggleBeforeDecision"]);
  if (v20
    && (uint64_t v21 = (void *)v20,
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"UserToggleBeforeDecision"]),
        unsigned __int8 v23 = [v22 BOOLValue],
        v22,
        v21,
        (v23 & 1) != 0))
  {
    uint64_t v24 = &__kCFBooleanTrue;
  }

  else
  {
    uint64_t v24 = &__kCFBooleanFalse;
  }

  [v2 setObject:v24 forKeyedSubscript:@"UserToggleBeforeDecision"];
  uint64_t v25 = objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"LinkUpBeforeDecision"]);
  if (v25
    && (id v26 = (void *)v25,
        int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"LinkUpBeforeDecision"]),
        unsigned __int8 v28 = [v27 BOOLValue],
        v27,
        v26,
        (v28 & 1) != 0))
  {
    uint64_t v29 = &__kCFBooleanTrue;
  }

  else
  {
    uint64_t v29 = &__kCFBooleanFalse;
  }

  [v2 setObject:v29 forKeyedSubscript:@"LinkUpBeforeDecision"];
  uint64_t v30 = objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"UserToggleAfterDecision"]);
  if (v30
    && (int v31 = (void *)v30,
        id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"UserToggleAfterDecision"]),
        unsigned __int8 v33 = [v32 BOOLValue],
        v32,
        v31,
        (v33 & 1) != 0))
  {
    unint64_t v34 = &__kCFBooleanTrue;
  }

  else
  {
    unint64_t v34 = &__kCFBooleanFalse;
  }

  [v2 setObject:v34 forKeyedSubscript:@"UserToggleAfterDecision"];
  uint64_t v35 = objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"LinkUpAfterDecision"]);
  if (v35
    && (id v36 = (void *)v35,
        id v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"LinkUpAfterDecision"]),
        unsigned __int8 v38 = [v37 BOOLValue],
        v37,
        v36,
        (v38 & 1) != 0))
  {
    id v39 = &__kCFBooleanTrue;
  }

  else
  {
    id v39 = &__kCFBooleanFalse;
  }

  v502 = v3 - 1;
  [v2 setObject:v39 forKeyedSubscript:@"LinkUpAfterDecision"];
  int v40 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v503,  "dpsCounterSampleAtIndex:",  (char *)objc_msgSend( *(id *)(*(void *)(v500 + 40) + 16),  "dns_symptoms_trap_evaluated_at_sample")
                  - 1));
  int v41 = (void *)objc_claimAutoreleasedReturnValue([v40 controllerStats]);
  uint64_t v42 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d",  [v41 channel]));

  __int16 v43 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v503,  "dpsCounterSampleAtIndex:",  (char *)objc_msgSend( *(id *)(*(void *)(v500 + 40) + 16),  "dns_symptoms_trap_evaluated_at_sample")
                  - 1));
  id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 controllerStats]);
  uint64_t v45 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d",  [v44 channelBandwidth]));

  v464 = (os_log_s *)v42;
  [v2 setObject:v42 forKeyedSubscript:@"Channel"];
  v463 = (void *)v45;
  [v2 setObject:v45 forKeyedSubscript:@"ChannelBandwidth"];
  if ([v503 usbEventsCount])
  {
    id v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend( v503,  "usbEventsCount") - 1));
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v46 usbAction]));
    [v2 setObject:v47 forKeyedSubscript:@"usbAction"];

    __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend( v503,  "usbEventsCount") - 1));
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v48 usbTotal]));
    [v2 setObject:v49 forKeyedSubscript:@"usbTotal"];

    __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend( v503,  "usbEventsCount") - 1));
    __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v50 durationSinceUSBEventInSeconds]));
    [v2 setObject:v51 forKeyedSubscript:@"timeSinceUSBEvent"];

    __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend( v503,  "usbEventsCount") - 1));
    __int128 v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v52 smartCCADesenseSupported]));
    [v2 setObject:v53 forKeyedSubscript:@"isSmartCCADesenseSupported"];

    __int128 v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend( v503,  "usbEventsCount") - 1));
    __int128 v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v54 isVendorApple]));
    [v2 setObject:v55 forKeyedSubscript:@"isUSBDeviceVendorApple"];
  }

  __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsEpiloge]);
  id v57 = [v56 accessPointInfosCount];

  if (v57)
  {
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsEpiloge]);
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 accessPointInfoAtIndex:0]);
    id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 modelName]);
    [v2 setObject:v60 forKeyedSubscript:@"APModelName"];

    id v61 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsEpiloge]);
    __int16 v62 = (void *)objc_claimAutoreleasedReturnValue([v61 accessPointInfoAtIndex:0]);
    int v63 = (void *)objc_claimAutoreleasedReturnValue([v62 modelNumber]);
    [v2 setObject:v63 forKeyedSubscript:@"APModelNumber"];

    __int16 v64 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsEpiloge]);
    int v65 = (void *)objc_claimAutoreleasedReturnValue([v64 accessPointInfoAtIndex:0]);
    __int16 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 manufacturerElement]);
    [v2 setObject:v66 forKeyedSubscript:@"APManufacturerElement"];

    __int128 v67 = &__kCFBooleanTrue;
  }

  else
  {
    __int128 v67 = &__kCFBooleanFalse;
  }

  [v2 setObject:v67 forKeyedSubscript:@"IsAPInfoPresent"];
  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v503 snapshot]);
  id v69 = (void *)objc_claimAutoreleasedReturnValue([v68 btSnapshot]);
  id v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v69 use]));
  [v2 setObject:v70 forKeyedSubscript:@"BtUse"];

  id v71 = (void *)objc_claimAutoreleasedReturnValue([v503 snapshot]);
  unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v71 awdlSnapshot]);
  id v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v72 use]));
  [v2 setObject:v73 forKeyedSubscript:@"AwdlUse"];

  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v503 snapshot]);
  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v74 awdlSnapshot]);
  int v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v75 sdb]));
  [v2 setObject:v76 forKeyedSubscript:@"AwdlSdb"];

  uint64_t v77 = *(void **)(v500 + 40);
  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v503 snapshot]);
  id v79 = (void *)objc_claimAutoreleasedReturnValue([v78 btSnapshot]);
  unint64_t v80 = (unint64_t)[v79 ts] / 0x3E8;
  id v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"snapshotInstance"]);
  id v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v77 computeSnapshotValidity:v80 snapshotTimestamp:v81 validityThreshold:7]));
  [v2 setObject:v82 forKeyedSubscript:@"BtSnapshotValidity"];

  unint64_t v83 = *(void **)(v500 + 40);
  id v84 = (void *)objc_claimAutoreleasedReturnValue([v503 snapshot]);
  double v85 = (void *)objc_claimAutoreleasedReturnValue([v84 awdlSnapshot]);
  unint64_t v86 = (unint64_t)[v85 ts] / 0x3E8;
  id v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"snapshotInstance"]);
  NSErrorUserInfoKey v88 = v503;
  id v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v83 computeSnapshotValidity:v86 snapshotTimestamp:v87 validityThreshold:7]));
  [v2 setObject:v89 forKeyedSubscript:@"AwdlSnapshotValidity"];

  id v90 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsCounterSampleAtIndex:v502]);
  os_log_type_t v91 = (void *)objc_claimAutoreleasedReturnValue([v90 peerStats]);
  id v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v91 ccaValue]));
  [v2 setObject:v92 forKeyedSubscript:@"ccaValue"];

  id v93 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsCounterSampleAtIndex:v502]);
  __int16 v94 = (void *)objc_claimAutoreleasedReturnValue([v93 peerStats]);
  __int128 v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v94 rssiValue]));
  [v2 setObject:v95 forKeyedSubscript:@"rssiValue"];

  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsCounterSampleAtIndex:v502]);
  id v97 = (void *)objc_claimAutoreleasedReturnValue([v96 peerStats]);
  id v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v97 snrValue]));
  [v2 setObject:v98 forKeyedSubscript:@"snrValue"];

  id v99 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsEpiloge]);
  id v100 = [v99 associationChangesCount];

  if (v100)
  {
    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"IsAssociationChangesValid"];
    __int128 v506 = 0u;
    __int128 v507 = 0u;
    __int128 v504 = 0u;
    __int128 v505 = 0u;
    id v101 = (void *)objc_claimAutoreleasedReturnValue([v503 dpsEpiloge]);
    uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([v101 associationChanges]);

    id v103 = [v102 countByEnumeratingWithState:&v504 objects:v520 count:16];
    if (v103)
    {
      id v104 = v103;
      int v105 = 0;
      int v106 = 0;
      uint64_t v107 = *(void *)v505;
      do
      {
        for (j = 0LL; j != v104; j = (char *)j + 1)
        {
          if (*(void *)v505 != v107) {
            objc_enumerationMutation(v102);
          }
          __int128 v109 = *(void **)(*((void *)&v504 + 1) + 8LL * (void)j);
          v106 |= [v109 changedChannel];
          v105 |= [v109 newBSSID];
        }

        id v104 = [v102 countByEnumeratingWithState:&v504 objects:v520 count:16];
      }

      while (v104);
    }

    else
    {
      LOBYTE(v105) = 0;
      LOBYTE(v106) = 0;
    }

    __int128 v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v106 & 1));
    [v2 setObject:v110 forKeyedSubscript:@"IsAssociatedToNewChannel"];

    __int128 v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v105 & 1));
    [v2 setObject:v111 forKeyedSubscript:@"IsAssociatedToNewBSSID"];

    NSErrorUserInfoKey v88 = v503;
  }

  else
  {
    [v2 setObject:&__kCFBooleanFalse forKeyedSubscript:@"IsAssociationChangesValid"];
  }

  __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int128 v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v112 isAssociatedAtStudyEnd]));
  [v2 setObject:v113 forKeyedSubscript:@"IsAssociatedAtStudyEnd"];

  __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int128 v115 = (void *)objc_claimAutoreleasedReturnValue([v114 symptomsDnsStats]);
  uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v115 isCaptiveServerIPResolved]));
  [v2 setObject:v116 forKeyedSubscript:@"IsCaptiveServerResolved"];

  uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int16 v118 = (void *)objc_claimAutoreleasedReturnValue([v117 symptomsDnsStats]);
  int v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v118 symptomsDnsscreenStateOn]));
  [v2 setObject:v119 forKeyedSubscript:@"IsScreenStateOn"];

  __int16 v120 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  unint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v120 symptomsDnsStats]);
  __int16 v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v121 totalDnsServers]));
  [v2 setObject:v122 forKeyedSubscript:@"TotalDnsServers"];

  id v123 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  NSErrorUserInfoKey v124 = (void *)objc_claimAutoreleasedReturnValue([v123 symptomsDnsStats]);
  uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v124 numIpv4DnsServers]));
  [v2 setObject:v125 forKeyedSubscript:@"NumIpv4DnsServers"];

  uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v126 symptomsDnsStats]);
  id v128 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v127 numIpv6DnsServers]));
  [v2 setObject:v128 forKeyedSubscript:@"NumIpv6DnsServers"];

  uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue([v129 symptomsDnsStats]);
  uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v130 numLocalDnsServers]));
  [v2 setObject:v131 forKeyedSubscript:@"NumLocalDnsServers"];

  uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  v133 = (void *)objc_claimAutoreleasedReturnValue([v132 symptomsDnsStats]);
  __int16 v134 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v133 numRemoteDnsServers]));
  [v2 setObject:v134 forKeyedSubscript:@"NumRemoteDnsServers"];

  int v135 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int16 v136 = (void *)objc_claimAutoreleasedReturnValue([v135 symptomsDnsStats]);
  uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v136 lanHealthBeforeDecision]));
  [v2 setObject:v137 forKeyedSubscript:@"LanHealthBeforeDecision"];

  __int16 v138 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue([v138 symptomsDnsStats]);
  id v140 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v139 lanHealthAfterDecision]));
  [v2 setObject:v140 forKeyedSubscript:@"LanHealthAfterDecision"];

  int v141 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  id v142 = (void *)objc_claimAutoreleasedReturnValue([v141 symptomsDnsStats]);
  __int128 v143 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v142 wanHealthBeforeDecision]));
  [v2 setObject:v143 forKeyedSubscript:@"WanHealthBeforeDecision"];

  __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  char v145 = (void *)objc_claimAutoreleasedReturnValue([v144 symptomsDnsStats]);
  BOOL v146 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v145 wanHealthAfterDecision]));
  [v2 setObject:v146 forKeyedSubscript:@"WanHealthAfterDecision"];

  __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v147 symptomsDnsStats]);
  __int128 v149 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v148 netscoreHealthBeforeDecision]));
  [v2 setObject:v149 forKeyedSubscript:@"NetscoreHealthBeforeDecision"];

  __int128 v150 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  id v151 = (void *)objc_claimAutoreleasedReturnValue([v150 symptomsDnsStats]);
  __int128 v152 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v151 netscoreHealthAfterDecision]));
  [v2 setObject:v152 forKeyedSubscript:@"NetscoreHealthAfterDecision"];

  __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v153 symptomsDnsStats]);
  uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v154 netscoreAtStudyStart]));
  [v2 setObject:v155 forKeyedSubscript:@"NetscoreAtStudyStart"];

  __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int128 v157 = (void *)objc_claimAutoreleasedReturnValue([v156 symptomsDnsStats]);
  uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v157 netscoreAtStudyEnd]));
  [v2 setObject:v158 forKeyedSubscript:@"NetscoreAtStudyEnd"];

  __int128 v159 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int128 v160 = (void *)objc_claimAutoreleasedReturnValue([v159 symptomsDnsStats]);
  __int128 v161 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v160 impactedServersAtStudyStart]));
  [v2 setObject:v161 forKeyedSubscript:@"ImpactedServersAtStudyStart"];

  __int128 v162 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  int v163 = (void *)objc_claimAutoreleasedReturnValue([v162 symptomsDnsStats]);
  __int128 v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v163 impactedServersAtStudyEnd]));
  [v2 setObject:v164 forKeyedSubscript:@"ImpactedServersAtStudyEnd"];

  __int16 v165 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  int v166 = (void *)objc_claimAutoreleasedReturnValue([v165 symptomsDnsStats]);
  __int16 v167 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v166 symptomsDnsTimeSincePreviousTriggerMinutes]));
  [v2 setObject:v167 forKeyedSubscript:@"TimeSincePreviousTriggerInMin"];

  double v168 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int16 v169 = (void *)objc_claimAutoreleasedReturnValue([v168 symptomsDnsStats]);
  id v170 = [v169 configType];
  if (v170 >= 3) {
    __int16 v171 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v170));
  }
  else {
    __int16 v171 = *(&off_1000CDAD0 + (int)v170);
  }
  [v2 setObject:v171 forKeyedSubscript:@"DnsConfigType"];

  uint64_t v172 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int16 v173 = (void *)objc_claimAutoreleasedReturnValue([v172 symptomsDnsStats]);
  id v174 = [v173 suppressedReason];
  if (v174 >= 0xB) {
    __int128 v175 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v174));
  }
  else {
    __int128 v175 = *(&off_1000CDAE8 + (int)v174);
  }
  [v2 setObject:v175 forKeyedSubscript:@"DnsRecoverySuppressedReason"];

  unint64_t v176 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int128 v177 = (void *)objc_claimAutoreleasedReturnValue([v176 symptomsDnsStats]);
  id v178 = [v177 symptomsDnsRecommendation];
  if (v178 >= 3) {
    __int128 v179 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v178));
  }
  else {
    __int128 v179 = *(&off_1000CDB40 + (int)v178);
  }
  [v2 setObject:v179 forKeyedSubscript:@"DnsRecoveryRecommendation"];

  id v180 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int16 v181 = (void *)objc_claimAutoreleasedReturnValue([v180 symptomsDnsStats]);
  unint64_t v182 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v181 dpsNotificationReceivedDuringStudy]));
  [v2 setObject:v182 forKeyedSubscript:@"IsDPSNotificationReceivedDuringDNSStudy"];

  int v183 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  __int16 v184 = (void *)objc_claimAutoreleasedReturnValue([v183 symptomsDnsStats]);
  uint64_t v185 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v184 slowWiFiNotificationReceivedDuringStudy]));
  [v2 setObject:v185 forKeyedSubscript:@"IsSlowWiFiNotificationReceivedDuringDNSStudy"];

  __int16 v186 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsEpiloge]);
  id v187 = (void *)objc_claimAutoreleasedReturnValue([v186 symptomsDnsStats]);
  NSErrorUserInfoKey v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v187 isPingEnqueueFailing]));
  [v2 setObject:v188 forKeyedSubscript:@"IsPingEnqueueFailing"];

  id v189 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"IPConfiguredEventTimeStamp"]);
  if (v189)
  {
    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"IsIPConfiguredEventReceived"];
    id v190 = *(void **)(v500 + 40);
    id v191 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"decisionInstance"]);
    v192 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKeyedSubscript:@"IPConfiguredEventTimeStamp"]);
    uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v190 computeDifferenceBetweenDates:v191 end:v192]));
    [v2 setObject:v193 forKeyedSubscript:@"IPAcquiredTimeSinceDecisionPoint"];

    id v194 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v500 + 56) objectForKey:@"IPAddressTypeOnInterface"]);
    int v195 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v194 integerValue]));
    [v2 setObject:v195 forKeyedSubscript:@"IPAddressTypeOnInterface"];
  }

  else
  {
    [v2 setObject:&__kCFBooleanFalse forKeyedSubscript:@"IsIPConfiguredEventReceived"];
  }

  int v196 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsCounterSampleAtIndex:v502]);
  uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue([v196 controllerStats]);
  uint64_t v198 = (void *)objc_claimAutoreleasedReturnValue([v197 aggregateMetrics]);
  id v199 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v198 kTxFrames]));
  [v2 setObject:v199 forKeyedSubscript:@"TxFramesBeforeDecision"];

  v200 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsCounterSamples]);
  v201 = (void *)objc_claimAutoreleasedReturnValue([v200 lastObject]);
  id v202 = (void *)objc_claimAutoreleasedReturnValue([v201 controllerStats]);
  uint64_t v203 = (void *)objc_claimAutoreleasedReturnValue([v202 aggregateMetrics]);
  uint64_t v204 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v203 kTxFrames]));
  [v2 setObject:v204 forKeyedSubscript:@"TxFramesAfterDecision"];

  BOOL v205 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsCounterSampleAtIndex:v502]);
  v206 = (void *)objc_claimAutoreleasedReturnValue([v205 controllerStats]);
  dispatch_time_t v207 = (void *)objc_claimAutoreleasedReturnValue([v206 aggregateMetrics]);
  v208 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v207 kTxRetransmission]));
  [v2 setObject:v208 forKeyedSubscript:@"TxRetriesBeforeDecision"];

  id v209 = (void *)objc_claimAutoreleasedReturnValue([v88 dpsCounterSamples]);
  v210 = (void *)objc_claimAutoreleasedReturnValue([v209 lastObject]);
  dispatch_semaphore_t v211 = (void *)objc_claimAutoreleasedReturnValue([v210 controllerStats]);
  uint64_t v212 = (void *)objc_claimAutoreleasedReturnValue([v211 aggregateMetrics]);
  v501 = v2;
  id v213 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v212 kTxRetransmission]));
  [v501 setObject:v213 forKeyedSubscript:@"TxRetriesAfterDecision"];

  v214 = *(void **)(v500 + 40);
  __int128 v215 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxRetriesBeforeDecision"]);
  id v216 = [v215 integerValue];
  __int128 v217 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxFramesBeforeDecision"]);
  objc_msgSend(v214, "computePercentage:denomenator:", v216, objc_msgSend(v217, "integerValue"));
  double v219 = v218;

  __int128 v220 = *(void **)(v500 + 40);
  __int128 v221 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxRetriesAfterDecision"]);
  id v222 = [v221 integerValue];
  v223 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"TxFramesAfterDecision"]);
  objc_msgSend(v220, "computePercentage:denomenator:", v222, objc_msgSend(v223, "integerValue"));
  double v225 = v224;

  id v226 = [*(id *)(v500 + 40) compareValues:(unint64_t)v219 second:(unint64_t)v225];
  if (v226 == (id)2)
  {
    [v501 setObject:@"AfterHigher" forKeyedSubscript:@"TxRetryComparison"];
    double v228 = v225 - v219;
LABEL_66:
    uint64_t v229 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v228));
    [v501 setObject:v229 forKeyedSubscript:@"TxRetryDifference"];

    uint64_t v227 = v503;
    goto LABEL_70;
  }

  if (v226 == (id)1)
  {
    [v501 setObject:@"BeforeHigher" forKeyedSubscript:@"TxRetryComparison"];
    double v228 = v219 - v225;
    goto LABEL_66;
  }

  uint64_t v227 = v503;
  if (v226)
  {
    v230 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v226));
    [v501 setObject:v230 forKeyedSubscript:@"TxRetryComparison"];

    id v231 = WALogCategoryDefaultHandle();
    id v232 = (os_log_s *)objc_claimAutoreleasedReturnValue(v231);
    if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v514 = 1024;
      int v515 = 627;
      __int16 v516 = 2048;
      double v517 = v219;
      __int16 v518 = 2048;
      double v519 = v225;
      _os_log_impl( (void *)&_mh_execute_header,  v232,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Invalid Comparison result for Tx Retry before:%f after:%f",  buf,  0x26u);
    }
  }

  else
  {
    [v501 setObject:@"Same" forKeyedSubscript:@"TxRetryComparison"];
    [v501 setObject:&off_1000E0330 forKeyedSubscript:@"TxRetryDifference"];
  }

LABEL_84:
  v316 = (void *)objc_claimAutoreleasedReturnValue([v310 dpsCounterSampleAtIndex:v502]);
  v317 = (void *)objc_claimAutoreleasedReturnValue([v316 controllerStats]);
  v318 = (void *)objc_claimAutoreleasedReturnValue([v317 aggregateMetrics]);
  id v319 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v318 kRxFrames]));
  [v501 setObject:v319 forKeyedSubscript:@"RxFramesBeforeDecision"];

  id v320 = (void *)objc_claimAutoreleasedReturnValue([v310 dpsCounterSamples]);
  id v321 = (void *)objc_claimAutoreleasedReturnValue([v320 lastObject]);
  v322 = (void *)objc_claimAutoreleasedReturnValue([v321 controllerStats]);
  id v323 = (void *)objc_claimAutoreleasedReturnValue([v322 aggregateMetrics]);
  v324 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v323 kRxFrames]));
  [v501 setObject:v324 forKeyedSubscript:@"RxFramesAfterDecision"];

  id v325 = (void *)objc_claimAutoreleasedReturnValue([v310 dpsCounterSampleAtIndex:v502]);
  id v326 = (void *)objc_claimAutoreleasedReturnValue([v325 controllerStats]);
  id v327 = (void *)objc_claimAutoreleasedReturnValue([v326 aggregateMetrics]);
  id v328 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v327 kRxRetryBitSet]));
  [v501 setObject:v328 forKeyedSubscript:@"RxRetriesBeforeDecision"];

  id v329 = (void *)objc_claimAutoreleasedReturnValue([v310 dpsCounterSamples]);
  id v330 = (void *)objc_claimAutoreleasedReturnValue([v329 lastObject]);
  id v331 = (void *)objc_claimAutoreleasedReturnValue([v330 controllerStats]);
  v332 = (void *)objc_claimAutoreleasedReturnValue([v331 aggregateMetrics]);
  id v333 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v332 kRxRetryBitSet]));
  [v501 setObject:v333 forKeyedSubscript:@"RxRetriesAfterDecision"];

  id v334 = *(void **)(v500 + 40);
  id v335 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxRetriesBeforeDecision"]);
  id v336 = [v335 integerValue];
  id v337 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxFramesBeforeDecision"]);
  objc_msgSend(v334, "computePercentage:denomenator:", v336, objc_msgSend(v337, "integerValue"));
  double v339 = v338;

  v340 = *(void **)(v500 + 40);
  id v341 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxRetriesAfterDecision"]);
  id v342 = [v341 integerValue];
  id v343 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxFramesAfterDecision"]);
  objc_msgSend(v340, "computePercentage:denomenator:", v342, objc_msgSend(v343, "integerValue"));
  double v345 = v344;

  id v346 = [*(id *)(v500 + 40) compareValues:(unint64_t)v339 second:(unint64_t)v345];
  if (v346 == (id)2)
  {
    [v501 setObject:@"AfterHigher" forKeyedSubscript:@"RxRetryComparison"];
    double v348 = v345 - v339;
LABEL_90:
    v349 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v348));
    [v501 setObject:v349 forKeyedSubscript:@"RxRetryDifference"];

    id v347 = v503;
    goto LABEL_94;
  }

  if (v346 == (id)1)
  {
    [v501 setObject:@"BeforeHigher" forKeyedSubscript:@"RxRetryComparison"];
    double v348 = v339 - v345;
    goto LABEL_90;
  }

  id v347 = v503;
  if (v346)
  {
    id v350 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v346));
    [v501 setObject:v350 forKeyedSubscript:@"RxRetryComparison"];

    id v351 = WALogCategoryDefaultHandle();
    id v352 = (os_log_s *)objc_claimAutoreleasedReturnValue(v351);
    if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v514 = 1024;
      int v515 = 708;
      __int16 v516 = 2048;
      double v517 = v339;
      __int16 v518 = 2048;
      double v519 = v345;
      _os_log_impl( (void *)&_mh_execute_header,  v352,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Invalid Comparison result for Rx Retry before:%f after:%f",  buf,  0x26u);
    }
  }

  else
  {
    [v501 setObject:@"Same" forKeyedSubscript:@"RxRetryComparison"];
    [v501 setObject:&off_1000E0330 forKeyedSubscript:@"RxRetryDifference"];
  }

LABEL_104:
  v394 = (void *)objc_claimAutoreleasedReturnValue([v388 dpsCounterSampleAtIndex:v502]);
  uint64_t v395 = (void *)objc_claimAutoreleasedReturnValue([v394 controllerStats]);
  id v396 = (void *)objc_claimAutoreleasedReturnValue([v395 aggregateMetrics]);
  id v397 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v396 kRxBadFCS]));
  [v501 setObject:v397 forKeyedSubscript:@"RxBadFCSBeforeDecision"];

  id v398 = (void *)objc_claimAutoreleasedReturnValue([v388 dpsCounterSamples]);
  id v399 = (void *)objc_claimAutoreleasedReturnValue([v398 lastObject]);
  id v400 = (void *)objc_claimAutoreleasedReturnValue([v399 controllerStats]);
  v401 = (void *)objc_claimAutoreleasedReturnValue([v400 aggregateMetrics]);
  v402 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v401 kRxBadFCS]));
  [v501 setObject:v402 forKeyedSubscript:@"RxBadFCSAfterDecision"];

  v403 = *(void **)(v500 + 40);
  v404 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadFCSBeforeDecision"]);
  id v405 = [v404 integerValue];
  id v406 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxGoodPLCPBeforeDecision"]);
  objc_msgSend(v403, "computePercentage:denomenator:", v405, objc_msgSend(v406, "integerValue"));
  double v408 = v407;

  v409 = *(void **)(v500 + 40);
  id v410 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadFCSAfterDecision"]);
  id v411 = [v410 integerValue];
  v412 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxGoodPLCPAfterDecision"]);
  objc_msgSend(v409, "computePercentage:denomenator:", v411, objc_msgSend(v412, "integerValue"));
  double v414 = v413;

  id v415 = [*(id *)(v500 + 40) compareValues:(unint64_t)v408 second:(unint64_t)v414];
  if (v415 == (id)2)
  {
    [v501 setObject:@"AfterHigher" forKeyedSubscript:@"RxBadFCSComparison"];
    double v417 = v414 - v408;
  }

  else
  {
    if (v415 != (id)1)
    {
      id v416 = v503;
      if (v415)
      {
        id v419 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v415));
        [v501 setObject:v419 forKeyedSubscript:@"RxBadFCSComparison"];

        id v420 = WALogCategoryDefaultHandle();
        char v421 = (os_log_s *)objc_claimAutoreleasedReturnValue(v420);
        if (os_log_type_enabled(v421, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446978;
          v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
          __int16 v514 = 1024;
          int v515 = 759;
          __int16 v516 = 2048;
          double v517 = v408;
          __int16 v518 = 2048;
          double v519 = v414;
          _os_log_impl( (void *)&_mh_execute_header,  v421,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Invalid Comparison result for Rx BadFCS before:%f after:%f",  buf,  0x26u);
        }
      }

      else
      {
        [v501 setObject:@"Same" forKeyedSubscript:@"RxBadFCSComparison"];
        [v501 setObject:&off_1000E0330 forKeyedSubscript:@"RxBadFCSDifference"];
      }

      goto LABEL_114;
    }

    [v501 setObject:@"BeforeHigher" forKeyedSubscript:@"RxBadFCSComparison"];
    double v417 = v408 - v414;
  }

  v418 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v417));
  [v501 setObject:v418 forKeyedSubscript:@"RxBadFCSDifference"];

  id v416 = v503;
LABEL_114:
  char v422 = (void *)objc_claimAutoreleasedReturnValue([v416 dpsCounterSampleAtIndex:v502]);
  id v423 = (void *)objc_claimAutoreleasedReturnValue([v422 controllerStats]);
  v424 = (void *)objc_claimAutoreleasedReturnValue([v423 aggregateMetrics]);
  v425 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v424 kRxCRCGlitch]));
  [v501 setObject:v425 forKeyedSubscript:@"RxCRCGlitchBeforeDecision"];

  __int128 v426 = (void *)objc_claimAutoreleasedReturnValue([v416 dpsCounterSamples]);
  __int128 v427 = (void *)objc_claimAutoreleasedReturnValue([v426 lastObject]);
  __int128 v428 = (void *)objc_claimAutoreleasedReturnValue([v427 controllerStats]);
  __int128 v429 = (void *)objc_claimAutoreleasedReturnValue([v428 aggregateMetrics]);
  v430 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v429 kRxCRCGlitch]));
  [v501 setObject:v430 forKeyedSubscript:@"RxCRCGlitchAfterDecision"];

  v431 = *(void **)(v500 + 40);
  __int128 v432 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxCRCGlitchBeforeDecision"]);
  id v433 = [v432 integerValue];
  __int128 v434 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxGoodPLCPBeforeDecision"]);
  v435 = (char *)[v434 integerValue];
  v436 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadPLCPBeforeDecision"]);
  objc_msgSend(v431, "computePercentage:denomenator:", v433, &v435[(void)objc_msgSend(v436, "integerValue")]);
  double v438 = v437;

  __int16 v439 = *(void **)(v500 + 40);
  v440 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxCRCGlitchAfterDecision"]);
  id v441 = [v440 integerValue];
  v442 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxGoodPLCPAfterDecision"]);
  __int16 v443 = (char *)[v442 integerValue];
  v444 = (void *)objc_claimAutoreleasedReturnValue([v501 objectForKeyedSubscript:@"RxBadPLCPAfterDecision"]);
  objc_msgSend(v439, "computePercentage:denomenator:", v441, &v443[(void)objc_msgSend(v444, "integerValue")]);
  double v446 = v445;

  id v447 = [*(id *)(v500 + 40) compareValues:(unint64_t)v438 second:(unint64_t)v446];
  if (v447 == (id)2)
  {
    [v501 setObject:@"AfterHigher" forKeyedSubscript:@"RxCRCGlitchComparison"];
    v448 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v446 - v438));
    [v501 setObject:v448 forKeyedSubscript:@"RxCRCGlitchDifference"];

    unint64_t v5 = v499;
LABEL_121:
    __int16 v450 = v464;
    goto LABEL_125;
  }

  unint64_t v5 = v499;
  if (v447 == (id)1)
  {
    [v501 setObject:@"BeforeHigher" forKeyedSubscript:@"RxCRCGlitchComparison"];
    v449 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v438 - v446));
    [v501 setObject:v449 forKeyedSubscript:@"RxCRCGlitchDifference"];

    goto LABEL_120;
  }

  if (!v447)
  {
    [v501 setObject:@"Same" forKeyedSubscript:@"RxCRCGlitchComparison"];
    [v501 setObject:&off_1000E0330 forKeyedSubscript:@"RxCRCGlitchDifference"];
LABEL_120:

    goto LABEL_121;
  }

  int v451 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v447));
  [v501 setObject:v451 forKeyedSubscript:@"RxCRCGlitchComparison"];

  id v452 = WALogCategoryDefaultHandle();
  v453 = (os_log_s *)objc_claimAutoreleasedReturnValue(v452);
  __int16 v450 = v464;
  if (os_log_type_enabled(v453, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    __int16 v514 = 1024;
    int v515 = 783;
    __int16 v516 = 2048;
    double v517 = v438;
    __int16 v518 = 2048;
    double v519 = v446;
    _os_log_impl( (void *)&_mh_execute_header,  v453,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Invalid Comparison result for Rx CRCGlitch before:%f after:%f",  buf,  0x26u);
  }

LABEL_125:
  id v454 = WALogCategoryDefaultHandle();
  v455 = (os_log_s *)objc_claimAutoreleasedReturnValue(v454);
  if (os_log_type_enabled(v455, OS_LOG_TYPE_DEFAULT))
  {
    id v456 = [v2 count];
    *(_DWORD *)buf = 136446722;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    __int16 v514 = 1024;
    int v515 = 787;
    __int16 v516 = 2048;
    double v517 = *(double *)&v456;
    _os_log_impl( (void *)&_mh_execute_header,  v455,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DNS metric dict fieldCount: %lu",  buf,  0x1Cu);
  }

  id v457 = v2;
  return v457;
}

id sub_1000781B0(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    uint64_t v2 = objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:"));
  }
  else {
    uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  }
  id v3 = (void *)v2;
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) instantiateAWDProtobufAndPopulateValues:*(void *)(a1 + 48)]);
  unint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    id v327 = v5;
    if ([v6 hasSlowNotice])
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 slowNotice]);
      [v7 recoveryReason];
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 actionField]));
    [v3 setObject:v8 forKeyedSubscript:@"actionField"];

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 recoveryAction]));
    [v3 setObject:v9 forKeyedSubscript:@"recoveryAction"];

    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 recoveryReason]));
    [v3 setObject:v10 forKeyedSubscript:@"recoveryReason"];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 userInput]));
    [v3 setObject:v11 forKeyedSubscript:@"userInput"];

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v7 facetimeCallInProgress]));
    [v3 setObject:v12 forKeyedSubscript:@"IsCriticalAppInUse"];

    if ([v6 usbEventsCount])
    {
      char v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend( v6,  "usbEventsCount") - 1));
      int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v13 usbAction]));
      [v3 setObject:v14 forKeyedSubscript:@"usbAction"];

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend( v6,  "usbEventsCount") - 1));
      double v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v15 usbTotal]));
      [v3 setObject:v16 forKeyedSubscript:@"usbTotal"];

      double v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend( v6,  "usbEventsCount") - 1));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v17 durationSinceUSBEventInSeconds]));
      [v3 setObject:v18 forKeyedSubscript:@"timeSinceUSBEvent"];

      os_log_type_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend( v6,  "usbEventsCount") - 1));
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v19 smartCCADesenseSupported]));
      [v3 setObject:v20 forKeyedSubscript:@"isSmartCCADesenseSupported"];

      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend( v6,  "usbEventsCount") - 1));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v21 isVendorApple]));
      [v3 setObject:v22 forKeyedSubscript:@"isUSBDeviceVendorApple"];
    }

    unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([v6 linkQualSampleAtIndex:0]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v6 linkQualSamples]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 lastObject]);

    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 cCA]));
    [v3 setObject:v26 forKeyedSubscript:@"CCABeforeRecovery"];

    int v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v25 cCA]));
    [v3 setObject:v27 forKeyedSubscript:@"CCAAfterRecovery"];

    unsigned __int8 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v23 rSSI]));
    [v3 setObject:v28 forKeyedSubscript:@"RSSIBeforeRecovery"];

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v25 rSSI]));
    [v3 setObject:v29 forKeyedSubscript:@"RSSIAfterRecovery"];

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 sNR]));
    [v3 setObject:v30 forKeyedSubscript:@"SNRBeforeRecovery"];

    int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v25 sNR]));
    [v3 setObject:v31 forKeyedSubscript:@"SNRAfterRecovery"];

    id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 txExpectedAMPDUDensity]));
    [v3 setObject:v32 forKeyedSubscript:@"TxExpectedAMPDUDensityBeforeRecovery"];

    id v328 = v25;
    unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v25 txExpectedAMPDUDensity]));
    [v3 setObject:v33 forKeyedSubscript:@"TxExpectedAMPDUDensityAfterRecovery"];

    unint64_t v34 = *(void **)(a1 + 40);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxExpectedAMPDUDensityBeforeRecovery"]);
    id v36 = [v35 integerValue];
    id v37 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxExpectedAMPDUDensityAfterRecovery"]);
    id v38 = objc_msgSend(v34, "compareValues:second:", v36, objc_msgSend(v37, "integerValue"));

    id v326 = (os_log_s *)v7;
    if ((unint64_t)v38 >= 3) {
      id v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v38));
    }
    else {
      id v39 = *(&off_1000CDB58 + (void)v38);
    }
    [v3 setObject:v39 forKeyedSubscript:@"TxExpectedAMPDUDensityComparison"];

    id v40 = WALogCategoryDefaultHandle();
    int v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxExpectedAMPDUDensityBeforeRecovery"]);
      id v43 = [v42 integerValue];
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxExpectedAMPDUDensityAfterRecovery"]);
      id v45 = [v44 integerValue];
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxExpectedAMPDUDensityComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 859;
      __int16 v333 = 2048;
      id v334 = v43;
      __int16 v335 = 2048;
      id v336 = v45;
      __int16 v337 = 2112;
      double v338 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:TxExpectedAMPDUDensity before:%ld after:%ld comparison:%@",  buf,  0x30u);
    }

    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 aPTxDataStall]));
    [v3 setObject:v47 forKeyedSubscript:@"APTxDataStallBeforeRecovery"];

    __int16 v48 = v25;
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v25 aPTxDataStall]));
    [v3 setObject:v49 forKeyedSubscript:@"APTxDataStallAfterRecovery"];

    __int128 v50 = *(void **)(a1 + 40);
    __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"APTxDataStallBeforeRecovery"]);
    id v52 = [v51 integerValue];
    __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"APTxDataStallAfterRecovery"]);
    id v54 = objc_msgSend(v50, "compareValues:second:", v52, objc_msgSend(v53, "integerValue"));

    if ((unint64_t)v54 >= 3) {
      __int128 v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v54));
    }
    else {
      __int128 v55 = *(&off_1000CDB58 + (void)v54);
    }
    [v3 setObject:v55 forKeyedSubscript:@"APTxDataStallComparison"];

    id v56 = WALogCategoryDefaultHandle();
    id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"APTxDataStallBeforeRecovery"]);
      id v59 = [v58 integerValue];
      id v60 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"APTxDataStallAfterRecovery"]);
      id v61 = [v60 integerValue];
      __int16 v62 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"APTxDataStallComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 865;
      __int16 v333 = 2048;
      id v334 = v59;
      __int16 v335 = 2048;
      id v336 = v61;
      __int16 v337 = 2112;
      double v338 = v62;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:APTxStall before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    int v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxAmpduTxBaMismatch]));
    [v3 setObject:v63 forKeyedSubscript:@"RxAmpduTxBaMismatchBeforeRecovery"];

    __int16 v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxAmpduTxBaMismatch]));
    [v3 setObject:v64 forKeyedSubscript:@"RxAmpduTxBaMismatchAfterRecovery"];

    int v65 = *(void **)(a1 + 40);
    __int16 v66 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxAmpduTxBaMismatchBeforeRecovery"]);
    id v67 = [v66 integerValue];
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxAmpduTxBaMismatchAfterRecovery"]);
    id v69 = objc_msgSend(v65, "compareValues:second:", v67, objc_msgSend(v68, "integerValue"));

    if ((unint64_t)v69 >= 3) {
      id v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v69));
    }
    else {
      id v70 = *(&off_1000CDB58 + (void)v69);
    }
    [v3 setObject:v70 forKeyedSubscript:@"RxAmpduTxBaMismatchComparison"];

    id v71 = WALogCategoryDefaultHandle();
    unint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      id v73 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxAmpduTxBaMismatchBeforeRecovery"]);
      id v74 = [v73 integerValue];
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxAmpduTxBaMismatchAfterRecovery"]);
      id v76 = [v75 integerValue];
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxAmpduTxBaMismatchComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 871;
      __int16 v333 = 2048;
      id v334 = v74;
      __int16 v335 = 2048;
      id v336 = v76;
      __int16 v337 = 2112;
      double v338 = v77;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:RxAmpduTxBaMismatch before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 symptomsFails]));
    [v3 setObject:v78 forKeyedSubscript:@"SymptomsFailsBeforeRecovery"];

    id v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 symptomsFails]));
    [v3 setObject:v79 forKeyedSubscript:@"SymptomsFailsAfterRecovery"];

    unint64_t v80 = *(void **)(a1 + 40);
    id v81 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"SymptomsFailsBeforeRecovery"]);
    id v82 = [v81 integerValue];
    unint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"SymptomsFailsAfterRecovery"]);
    id v84 = objc_msgSend(v80, "compareValues:second:", v82, objc_msgSend(v83, "integerValue"));

    if ((unint64_t)v84 >= 3) {
      double v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v84));
    }
    else {
      double v85 = *(&off_1000CDB58 + (void)v84);
    }
    [v3 setObject:v85 forKeyedSubscript:@"SymptomsFailsComparison"];

    id v86 = WALogCategoryDefaultHandle();
    id v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      NSErrorUserInfoKey v88 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"SymptomsFailsBeforeRecovery"]);
      id v89 = [v88 integerValue];
      id v90 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"SymptomsFailsAfterRecovery"]);
      id v91 = [v90 integerValue];
      id v92 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"SymptomsFailsComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 877;
      __int16 v333 = 2048;
      id v334 = v89;
      __int16 v335 = 2048;
      id v336 = v91;
      __int16 v337 = 2112;
      double v338 = v92;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SymptomsFails before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    id v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 infraDutyCycle]));
    [v3 setObject:v93 forKeyedSubscript:@"InfraDutyCycleBeforeRecovery"];

    __int16 v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 infraDutyCycle]));
    [v3 setObject:v94 forKeyedSubscript:@"InfraDutyCycleAfterRecovery"];

    __int128 v95 = *(void **)(a1 + 40);
    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"InfraDutyCycleBeforeRecovery"]);
    id v97 = [v96 integerValue];
    id v98 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"InfraDutyCycleAfterRecovery"]);
    id v99 = objc_msgSend(v95, "compareValues:second:", v97, objc_msgSend(v98, "integerValue"));

    if ((unint64_t)v99 >= 3) {
      id v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v99));
    }
    else {
      id v100 = *(&off_1000CDB58 + (void)v99);
    }
    [v3 setObject:v100 forKeyedSubscript:@"InfraDutyCycleComparison"];

    id v101 = WALogCategoryDefaultHandle();
    uint64_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
    {
      id v103 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"InfraDutyCycleBeforeRecovery"]);
      id v104 = [v103 integerValue];
      int v105 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"InfraDutyCycleAfterRecovery"]);
      id v106 = [v105 integerValue];
      uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"InfraDutyCycleComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 883;
      __int16 v333 = 2048;
      id v334 = v104;
      __int16 v335 = 2048;
      id v336 = v106;
      __int16 v337 = 2112;
      double v338 = v107;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:InfraDutyCycle before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    __int128 v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 lastScanReason]));
    [v3 setObject:v108 forKeyedSubscript:@"LastScanReasonBeforeRecovery"];

    __int128 v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 lastScanReason]));
    [v3 setObject:v109 forKeyedSubscript:@"LastScanReasonAfterRecovery"];

    __int128 v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 accessPointOUI]));
    [v3 setObject:v110 forKeyedSubscript:@"AccessPointOUIBeforeRecovery"];

    __int128 v111 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 accessPointOUI]));
    [v3 setObject:v111 forKeyedSubscript:@"AccessPointOUIAfterRecovery"];

    id v112 = [v23 accessPointOUI];
    else {
      __int128 v113 = &__kCFBooleanFalse;
    }
    [v3 setObject:v113 forKeyedSubscript:@"IsAccessPointOUISameAfterRecovery"];
    if ([v23 is2GBand]) {
      __int128 v114 = &__kCFBooleanTrue;
    }
    else {
      __int128 v114 = &__kCFBooleanFalse;
    }
    [v3 setObject:v114 forKeyedSubscript:@"Is2GBandBeforeRecovery"];
    if ([v48 is2GBand]) {
      __int128 v115 = &__kCFBooleanTrue;
    }
    else {
      __int128 v115 = &__kCFBooleanFalse;
    }
    [v3 setObject:v115 forKeyedSubscript:@"Is2GBandAfterRecovery"];
    if ([v23 isFGTraffic]) {
      uint64_t v116 = &__kCFBooleanTrue;
    }
    else {
      uint64_t v116 = &__kCFBooleanFalse;
    }
    [v3 setObject:v116 forKeyedSubscript:@"IsFGTrafficBeforeRecovery"];
    if ([v48 isFGTraffic]) {
      uint64_t v117 = &__kCFBooleanTrue;
    }
    else {
      uint64_t v117 = &__kCFBooleanFalse;
    }
    [v3 setObject:v117 forKeyedSubscript:@"IsFGTrafficAfterRecovery"];
    __int16 v118 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxThroughput]));
    [v3 setObject:v118 forKeyedSubscript:@"RxThroughputBeforeRecovery"];

    int v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxThroughput]));
    [v3 setObject:v119 forKeyedSubscript:@"RxThroughputAfterRecovery"];

    __int16 v120 = *(void **)(a1 + 40);
    unint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxThroughputBeforeRecovery"]);
    id v122 = [v121 integerValue];
    id v123 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxThroughputAfterRecovery"]);
    id v124 = objc_msgSend(v120, "compareValues:second:", v122, objc_msgSend(v123, "integerValue"));

    if ((unint64_t)v124 >= 3) {
      uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v124));
    }
    else {
      uint64_t v125 = *(&off_1000CDB58 + (void)v124);
    }
    [v3 setObject:v125 forKeyedSubscript:@"RxThroughputComparison"];

    id v126 = WALogCategoryDefaultHandle();
    uint64_t v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      id v128 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxThroughputBeforeRecovery"]);
      id v129 = [v128 integerValue];
      uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxThroughputAfterRecovery"]);
      id v131 = [v130 integerValue];
      uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxThroughputComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 902;
      __int16 v333 = 2048;
      id v334 = v129;
      __int16 v335 = 2048;
      id v336 = v131;
      __int16 v337 = 2112;
      double v338 = v132;
      _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:RxThroughput before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    v133 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 baselineThroughput]));
    [v3 setObject:v133 forKeyedSubscript:@"BaselineThroughputBeforeRecovery"];

    __int16 v134 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 baselineThroughput]));
    [v3 setObject:v134 forKeyedSubscript:@"BaselineThroughputAfterRecovery"];

    int v135 = *(void **)(a1 + 40);
    __int16 v136 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"BaselineThroughputBeforeRecovery"]);
    id v137 = [v136 integerValue];
    __int16 v138 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"BaselineThroughputAfterRecovery"]);
    id v139 = objc_msgSend(v135, "compareValues:second:", v137, objc_msgSend(v138, "integerValue"));

    if ((unint64_t)v139 >= 3) {
      id v140 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v139));
    }
    else {
      id v140 = *(&off_1000CDB58 + (void)v139);
    }
    [v3 setObject:v140 forKeyedSubscript:@"BaselineThroughputComparison"];

    id v141 = WALogCategoryDefaultHandle();
    id v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"BaselineThroughputBeforeRecovery"]);
      id v144 = [v143 integerValue];
      char v145 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"BaselineThroughputAfterRecovery"]);
      id v146 = [v145 integerValue];
      __int128 v147 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"BaselineThroughputComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 908;
      __int16 v333 = 2048;
      id v334 = v144;
      __int16 v335 = 2048;
      id v336 = v146;
      __int16 v337 = 2112;
      double v338 = v147;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:BaselineThroughput before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    __int128 v148 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 testThroughput]));
    [v3 setObject:v148 forKeyedSubscript:@"TestThroughputBeforeRecovery"];

    __int128 v149 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 testThroughput]));
    [v3 setObject:v149 forKeyedSubscript:@"TestThroughputAfterRecovery"];

    __int128 v150 = *(void **)(a1 + 40);
    id v151 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TestThroughputBeforeRecovery"]);
    id v152 = [v151 integerValue];
    __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TestThroughputAfterRecovery"]);
    id v154 = objc_msgSend(v150, "compareValues:second:", v152, objc_msgSend(v153, "integerValue"));

    if ((unint64_t)v154 >= 3) {
      uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v154));
    }
    else {
      uint64_t v155 = *(&off_1000CDB58 + (void)v154);
    }
    [v3 setObject:v155 forKeyedSubscript:@"TestThroughputComparison"];

    id v156 = WALogCategoryDefaultHandle();
    __int128 v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TestThroughputBeforeRecovery"]);
      id v159 = [v158 integerValue];
      __int128 v160 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TestThroughputAfterRecovery"]);
      id v161 = [v160 integerValue];
      __int128 v162 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TestThroughputComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 914;
      __int16 v333 = 2048;
      id v334 = v159;
      __int16 v335 = 2048;
      id v336 = v161;
      __int16 v337 = 2112;
      double v338 = v162;
      _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:TestThroughput before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    int v163 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 txAMPDUDensity]));
    [v3 setObject:v163 forKeyedSubscript:@"TxAMPDUDensityBeforeRecovery"];

    __int128 v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 txAMPDUDensity]));
    [v3 setObject:v164 forKeyedSubscript:@"TxAMPDUDensityAfterRecovery"];

    __int16 v165 = *(void **)(a1 + 40);
    int v166 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxAMPDUDensityBeforeRecovery"]);
    id v167 = [v166 integerValue];
    double v168 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxAMPDUDensityAfterRecovery"]);
    id v169 = objc_msgSend(v165, "compareValues:second:", v167, objc_msgSend(v168, "integerValue"));

    if ((unint64_t)v169 >= 3) {
      id v170 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v169));
    }
    else {
      id v170 = *(&off_1000CDB58 + (void)v169);
    }
    [v3 setObject:v170 forKeyedSubscript:@"TxAMPDUDensityComparison"];

    id v171 = WALogCategoryDefaultHandle();
    uint64_t v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
    if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v173 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxAMPDUDensityBeforeRecovery"]);
      id v174 = [v173 integerValue];
      __int128 v175 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxAMPDUDensityAfterRecovery"]);
      id v176 = [v175 integerValue];
      __int128 v177 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxAMPDUDensityComparison"]);
      *(_DWORD *)buf = 136447234;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 920;
      __int16 v333 = 2048;
      id v334 = v174;
      __int16 v335 = 2048;
      id v336 = v176;
      __int16 v337 = 2112;
      double v338 = v177;
      _os_log_impl( (void *)&_mh_execute_header,  v172,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:TxAMPDU before:%ld after:%ld comparison:%@",  buf,  0x30u);

      __int16 v48 = v25;
    }

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  (char *)objc_msgSend(v23, "rxFCSErrs") + (void)objc_msgSend(v23, "rxPLCPErrs"),  (char *)objc_msgSend(v23, "rxFCSErrs")
    + (void)[v23 rxPLCPErrs]
    + (unint64_t)[v23 rxGoodPlcps]);
    id v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v178 forKeyedSubscript:@"PhyErrPercentBeforeRecovery"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  (char *)objc_msgSend(v48, "rxFCSErrs") + (void)objc_msgSend(v48, "rxPLCPErrs"),  (char *)objc_msgSend(v48, "rxFCSErrs")
    + (void)[v48 rxPLCPErrs]
    + (unint64_t)[v48 rxGoodPlcps]);
    __int128 v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v179 forKeyedSubscript:@"PhyErrPercentAfterRecovery"];

    id v180 = *(void **)(a1 + 40);
    __int16 v181 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"PhyErrPercentBeforeRecovery"]);
    id v182 = [v181 integerValue];
    int v183 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"PhyErrPercentBeforeRecovery"]);
    id v184 = objc_msgSend(v180, "compareValues:second:", v182, objc_msgSend(v183, "integerValue"));

    if ((unint64_t)v184 >= 3) {
      uint64_t v185 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v184));
    }
    else {
      uint64_t v185 = *(&off_1000CDB58 + (void)v184);
    }
    [v3 setObject:v185 forKeyedSubscript:@"PhyErrPercentComparison"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  objc_msgSend(v23, "txCompPkts"),  objc_msgSend(v23, "txSubPkts"));
    __int16 v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v186 forKeyedSubscript:@"CompletionPercentBeforeRecovery"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  objc_msgSend(v48, "txCompPkts"),  objc_msgSend(v48, "txSubPkts"));
    id v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v187 forKeyedSubscript:@"CompletionPercentAfterRecovery"];

    NSErrorUserInfoKey v188 = *(void **)(a1 + 40);
    id v189 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"CompletionPercentBeforeRecovery"]);
    id v190 = [v189 integerValue];
    id v191 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"CompletionPercentAfterRecovery"]);
    id v192 = objc_msgSend(v188, "compareValues:second:", v190, objc_msgSend(v191, "integerValue"));

    if ((unint64_t)v192 >= 3) {
      uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v192));
    }
    else {
      uint64_t v193 = *(&off_1000CDB58 + (void)v192);
    }
    [v3 setObject:v193 forKeyedSubscript:@"CompletionPercentComparison"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  objc_msgSend(v23, "txRetries"),  objc_msgSend(v23, "txFrames"));
    id v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v194 forKeyedSubscript:@"TxRetryPercentBeforeRecovery"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  objc_msgSend(v48, "txRetries"),  objc_msgSend(v48, "txFrames"));
    int v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v195 forKeyedSubscript:@"TxRetryPercentAfterRecovery"];

    int v196 = *(void **)(a1 + 40);
    uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxRetryPercentBeforeRecovery"]);
    id v198 = [v197 integerValue];
    id v199 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxRetryPercentAfterRecovery"]);
    id v200 = objc_msgSend(v196, "compareValues:second:", v198, objc_msgSend(v199, "integerValue"));

    if ((unint64_t)v200 >= 3) {
      v201 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v200));
    }
    else {
      v201 = *(&off_1000CDB58 + (void)v200);
    }
    [v3 setObject:v201 forKeyedSubscript:@"TxRetryPercentComparison"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  objc_msgSend(v23, "txFails"),  objc_msgSend(v23, "txFrames"));
    id v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v202 forKeyedSubscript:@"TxFailPercentBeforeRecovery"];

    objc_msgSend( *(id *)(a1 + 40),  "computePercentage:denomenator:",  objc_msgSend(v48, "txFails"),  objc_msgSend(v48, "txFrames"));
    uint64_t v203 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v203 forKeyedSubscript:@"TxFailPercentAfterRecovery"];

    uint64_t v204 = *(void **)(a1 + 40);
    BOOL v205 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxFailPercentBeforeRecovery"]);
    id v206 = [v205 integerValue];
    dispatch_time_t v207 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxFailPercentAfterRecovery"]);
    id v208 = objc_msgSend(v204, "compareValues:second:", v206, objc_msgSend(v207, "integerValue"));

    if ((unint64_t)v208 >= 3) {
      id v209 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v208));
    }
    else {
      id v209 = *(&off_1000CDB58 + (void)v208);
    }
    [v3 setObject:v209 forKeyedSubscript:@"TxFailPercentComparison"];

    v210 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxOvflErrs]));
    [v3 setObject:v210 forKeyedSubscript:@"RxOvflErrsBeforeRecovery"];

    dispatch_semaphore_t v211 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxOvflErrs]));
    [v3 setObject:v211 forKeyedSubscript:@"RxOvflErrsAfterRecovery"];

    uint64_t v212 = *(void **)(a1 + 40);
    id v213 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxOvflErrsBeforeRecovery"]);
    id v214 = [v213 integerValue];
    __int128 v215 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxOvflErrsAfterRecovery"]);
    id v216 = objc_msgSend(v212, "compareValues:second:", v214, objc_msgSend(v215, "integerValue"));

    if ((unint64_t)v216 >= 3) {
      __int128 v217 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v216));
    }
    else {
      __int128 v217 = *(&off_1000CDB58 + (void)v216);
    }
    [v3 setObject:v217 forKeyedSubscript:@"RxOvflErrsComparison"];

    double v218 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxReplayErrs]));
    [v3 setObject:v218 forKeyedSubscript:@"RxReplayErrsBeforeRecovery"];

    double v219 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxReplayErrs]));
    [v3 setObject:v219 forKeyedSubscript:@"RxReplayErrsAfterRecovery"];

    __int128 v220 = *(void **)(a1 + 40);
    __int128 v221 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxReplayErrsBeforeRecovery"]);
    id v222 = [v221 integerValue];
    v223 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxReplayErrsAfterRecovery"]);
    id v224 = objc_msgSend(v220, "compareValues:second:", v222, objc_msgSend(v223, "integerValue"));

    if ((unint64_t)v224 >= 3) {
      double v225 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v224));
    }
    else {
      double v225 = *(&off_1000CDB58 + (void)v224);
    }
    [v3 setObject:v225 forKeyedSubscript:@"RxReplayErrsComparison"];

    id v226 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxDecryErrs]));
    [v3 setObject:v226 forKeyedSubscript:@"RxDecryErrsBeforeRecovery"];

    uint64_t v227 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxDecryErrs]));
    [v3 setObject:v227 forKeyedSubscript:@"RxDecryErrsAfterRecovery"];

    double v228 = *(void **)(a1 + 40);
    uint64_t v229 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxDecryErrsBeforeRecovery"]);
    id v230 = [v229 integerValue];
    id v231 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxDecryErrsAfterRecovery"]);
    id v232 = objc_msgSend(v228, "compareValues:second:", v230, objc_msgSend(v231, "integerValue"));

    if ((unint64_t)v232 >= 3) {
      id v233 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v232));
    }
    else {
      id v233 = *(&off_1000CDB58 + (void)v232);
    }
    [v3 setObject:v233 forKeyedSubscript:@"RxDecryErrsComparison"];

    id v234 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxCRSErrs]));
    [v3 setObject:v234 forKeyedSubscript:@"RxCRSErrsBeforeRecovery"];

    uint64_t v235 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxCRSErrs]));
    [v3 setObject:v235 forKeyedSubscript:@"RxCRSErrsAfterRecovery"];

    id v236 = *(void **)(a1 + 40);
    v237 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxCRSErrsBeforeRecovery"]);
    id v238 = [v237 integerValue];
    id v239 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxCRSErrsAfterRecovery"]);
    id v240 = objc_msgSend(v236, "compareValues:second:", v238, objc_msgSend(v239, "integerValue"));

    if ((unint64_t)v240 >= 3) {
      __int16 v241 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v240));
    }
    else {
      __int16 v241 = *(&off_1000CDB58 + (void)v240);
    }
    [v3 setObject:v241 forKeyedSubscript:@"RxCRSErrsComparison"];

    id v242 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 txPhyRate]));
    [v3 setObject:v242 forKeyedSubscript:@"TxPhyRateBeforeRecovery"];

    id v243 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 txPhyRate]));
    [v3 setObject:v243 forKeyedSubscript:@"TxPhyRateAfterRecovery"];

    id v244 = *(void **)(a1 + 40);
    v245 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxPhyRateBeforeRecovery"]);
    id v246 = [v245 integerValue];
    id v247 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"TxPhyRateAfterRecovery"]);
    id v248 = objc_msgSend(v244, "compareValues:second:", v246, objc_msgSend(v247, "integerValue"));

    if ((unint64_t)v248 >= 3) {
      id v249 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v248));
    }
    else {
      id v249 = *(&off_1000CDB58 + (void)v248);
    }
    [v3 setObject:v249 forKeyedSubscript:@"TxPhyRateComparison"];

    v250 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 rxPhyRate]));
    [v3 setObject:v250 forKeyedSubscript:@"RxPhyRateBeforeRecovery"];

    BOOL v251 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 rxPhyRate]));
    [v3 setObject:v251 forKeyedSubscript:@"RxPhyRateAfterRecovery"];

    uint64_t v252 = *(void **)(a1 + 40);
    char v253 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxPhyRateBeforeRecovery"]);
    id v254 = [v253 integerValue];
    v255 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"RxPhyRateAfterRecovery"]);
    id v256 = objc_msgSend(v252, "compareValues:second:", v254, objc_msgSend(v255, "integerValue"));

    uint64_t v325 = a1;
    if ((unint64_t)v256 >= 3) {
      BOOL v257 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v256));
    }
    else {
      BOOL v257 = *(&off_1000CDB58 + (void)v256);
    }
    [v3 setObject:v257 forKeyedSubscript:@"RxPhyRateComparison"];

    id v258 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 outputThroughput]));
    [v3 setObject:v258 forKeyedSubscript:@"OutputThroughputBeforeRecovery"];

    id v259 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 outputThroughput]));
    [v3 setObject:v259 forKeyedSubscript:@"OutputThroughputAfterRecovery"];

    v260 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 inputThroughput]));
    [v3 setObject:v260 forKeyedSubscript:@"InputThroughputBeforeRecovery"];

    v261 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 inputThroughput]));
    [v3 setObject:v261 forKeyedSubscript:@"InputThroughputAfterRecovery"];

    id v262 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 expectedThroughput]));
    [v3 setObject:v262 forKeyedSubscript:@"ExpectedThroughputBeforeRecovery"];

    v263 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v48 expectedThroughput]));
    [v3 setObject:v263 forKeyedSubscript:@"ExpectedThroughputAfterRecovery"];

    v264 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"OutputThroughputBeforeRecovery"]);
    BOOL v265 = v48;
    v266 = [v264 integerValue];
    v267 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"InputThroughputBeforeRecovery"]);
    unsigned int v268 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  v266 - (_BYTE *)[v267 integerValue]));
    [v3 setObject:v268 forKeyedSubscript:@"OutputInputThroughputDiffBeforeRecovery"];

    id v269 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"ExpectedThroughputBeforeRecovery"]);
    BOOL v270 = [v269 integerValue];
    v271 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"OutputThroughputBeforeRecovery"]);
    v272 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  v270 - (_BYTE *)[v271 integerValue]));
    [v3 setObject:v272 forKeyedSubscript:@"ExpectedOutputThroughputDiffBeforeRecovery"];

    objc_msgSend( *(id *)(v325 + 40),  "computePercentage:denomenator:",  objc_msgSend(v23, "rxDupErrs"),  objc_msgSend(v23, "rxFrames"));
    char v273 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v273 forKeyedSubscript:@"RxDupPercentBeforeRecovery"];

    objc_msgSend( *(id *)(v325 + 40),  "computePercentage:denomenator:",  objc_msgSend(v23, "rxRetries"),  objc_msgSend(v23, "rxRetries"));
    id v274 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v274 forKeyedSubscript:@"RxRetriesPercentBeforeRecovery"];

    BOOL v275 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 timeSinceLastRecovery]));
    [v3 setObject:v275 forKeyedSubscript:@"TimeSinceLastSWRecovery"];

    id v276 = [v23 measurementDurMS];
    id v277 = [v265 measurementDurMS];
    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "maxQueueFullDurMS"), v276);
    id v278 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v278 forKeyedSubscript:@"MaxQueueFullDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v265, "maxQueueFullDurMS"), v277);
    v279 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v279 forKeyedSubscript:@"MaxQueueFullDurMSPercentAfterRecovery"];

    uint64_t v280 = *(void **)(v325 + 40);
    BOOL v281 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"MaxQueueFullDurMSPercentBeforeRecovery"]);
    id v282 = [v281 integerValue];
    v283 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"MaxQueueFullDurMSPercentAfterRecovery"]);
    id v284 = objc_msgSend(v280, "compareValues:second:", v282, objc_msgSend(v283, "integerValue"));

    if ((unint64_t)v284 >= 3) {
      v285 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v284));
    }
    else {
      v285 = *(&off_1000CDB58 + (void)v284);
    }
    [v3 setObject:v285 forKeyedSubscript:@"MaxQueueFullDurMSPercentComparison"];

    BOOL v286 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v23 avgTxLatencyMS]));
    [v3 setObject:v286 forKeyedSubscript:@"AvgTxLatencyMSBeforeRecovery"];

    v287 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v328 avgTxLatencyMS]));
    [v3 setObject:v287 forKeyedSubscript:@"AvgTxLatencyMSAfterRecovery"];

    v288 = *(void **)(v325 + 40);
    id v289 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"AvgTxLatencyMSBeforeRecovery"]);
    id v290 = [v289 integerValue];
    v291 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"AvgTxLatencyMSAfterRecovery"]);
    id v292 = objc_msgSend(v288, "compareValues:second:", v290, objc_msgSend(v291, "integerValue"));

    if ((unint64_t)v292 >= 3) {
      id v293 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %lu)",  v292));
    }
    else {
      id v293 = *(&off_1000CDB58 + (void)v292);
    }
    [v3 setObject:v293 forKeyedSubscript:@"AvgTxLatencyMSComparison"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "rC1CoexDurationMS"), v276);
    v294 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v294 forKeyedSubscript:@"RC1CoexDurationMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "rC1CoexDurationMS"), v277);
    v295 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v295 forKeyedSubscript:@"RC1CoexDurationMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "rC2CoexDurationMS"), v276);
    v296 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v296 forKeyedSubscript:@"RC2CoexDurationMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "rC2CoexDurationMS"), v277);
    double v297 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v297 forKeyedSubscript:@"RC2CoexDurationMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "lTECoexDurationMS"), v276);
    double v298 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v298 forKeyedSubscript:@"LTECoexDurationMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "lTECoexDurationMS"), v277);
    uint64_t v299 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v299 forKeyedSubscript:@"LTECoexDurationMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "tVPMActiveDurationMS"), v276);
    char v300 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v300 forKeyedSubscript:@"TVPMActiveDurationMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "tVPMActiveDurationMS"), v277);
    v301 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v301 forKeyedSubscript:@"TVPMActiveDurationMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "availWLANDurMS"), v276);
    id v302 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v302 forKeyedSubscript:@"AvailWLANDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "availWLANDurMS"), v277);
    BOOL v303 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v303 forKeyedSubscript:@"AvailWLANDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "availWLANRxDurMS"), v276);
    id v304 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v304 forKeyedSubscript:@"AvailWLANRxDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "availWLANRxDurMS"), v277);
    v305 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v305 forKeyedSubscript:@"AvailWLANRxDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "availWLANTxDurMS"), v276);
    v306 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v306 forKeyedSubscript:@"AvailWLANTxDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "availWLANTxDurMS"), v277);
    double v307 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v307 forKeyedSubscript:@"AvailWLANTxDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "concurrentIntDurMS"), v276);
    double v308 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v308 forKeyedSubscript:@"ConcurrentIntDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "concurrentIntDurMS"), v277);
    id v309 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v309 forKeyedSubscript:@"ConcurrentIntDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "phyTxActivityDurMS"), v276);
    id v310 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v310 forKeyedSubscript:@"PhyTxActivityDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "phyTxActivityDurMS"), v277);
    double v311 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v311 forKeyedSubscript:@"PhyTxActivityDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "phyRxActivityDurMS"), v276);
    v312 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v312 forKeyedSubscript:@"PhyRxActivityDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "phyRxActivityDurMS"), v277);
    v313 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v313 forKeyedSubscript:@"PhyRxActivityDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "offChanDurMS"), v276);
    id v314 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v314 forKeyedSubscript:@"OffChanDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "offChanDurMS"), v277);
    id v315 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v315 forKeyedSubscript:@"OffChanDurMSPercentAfterRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "bTAntennaDurMS"), v276);
    v316 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v316 forKeyedSubscript:@"BTAntennaDurMSPercentBeforeRecovery"];

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "bTAntennaDurMS"), v277);
    v317 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v3 setObject:v317 forKeyedSubscript:@"BTAntennaDurMSPercentAfterRecovery"];

    v318 = v326;
    unint64_t v5 = v327;
  }

  else
  {
    id v324 = WALogCategoryDefaultHandle();
    v318 = (os_log_s *)objc_claimAutoreleasedReturnValue(v324);
    if (os_log_type_enabled(v318, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      __int16 v331 = 1024;
      int v332 = 824;
      _os_log_impl( (void *)&_mh_execute_header,  v318,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Error creating SW data to send to CA",  buf,  0x12u);
    }
  }

  id v319 = WALogCategoryDefaultHandle();
  id v320 = (os_log_s *)objc_claimAutoreleasedReturnValue(v319);
  if (os_log_type_enabled(v320, OS_LOG_TYPE_DEFAULT))
  {
    id v321 = [v3 count];
    *(_DWORD *)buf = 136446722;
    id v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
    __int16 v331 = 1024;
    int v332 = 1038;
    __int16 v333 = 2048;
    id v334 = v321;
    _os_log_impl( (void *)&_mh_execute_header,  v320,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SW metricDict fieldCount: %lu",  buf,  0x1Cu);
  }

  id v322 = v3;
  return v322;
}

void sub_10007B704(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___WAActivityManager);
  uint64_t v2 = (void *)qword_1000ED048;
  qword_1000ED048 = (uint64_t)v1;
}

void sub_10007BD6C(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10007BE8C;
  v7[3] = &unk_1000CDB98;
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:repeats:block:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:repeats:block:",  1LL,  v7,  5.0));
  uint64_t v3 = *(void *)(a1 + 32);
  SEL v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
  id v5 = WALogActivityManagerHandle();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    id v9 = "-[WAActivityManager debugTimer]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 160;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:configured _periodicActiveListTimer",  buf,  0x12u);
  }
}

void sub_10007BE8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007BEE4;
  block[3] = &unk_1000CCD80;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10007BEE4(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  id v2 = WALogActivityManagerHandle();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v19 = "-[WAActivityManager debugTimer]_block_invoke_3";
    __int16 v20 = 1024;
    int v21 = 149;
    __int16 v22 = 2048;
    id v23 = [v1 count];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:activeTransactions %lu",  buf,  0x1Cu);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = v1;
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v10 = WALogActivityManagerHandle();
        int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t description = os_transaction_get_description(v9);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v19 = "-[WAActivityManager debugTimer]_block_invoke";
          __int16 v20 = 1024;
          int v21 = 152;
          __int16 v22 = 2080;
          id v23 = (id)description;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:activeTransaction %s",  buf,  0x1Cu);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v6);
  }
}

void sub_10007C180(void *a1)
{
  id v2 = (void *)a1[4];
  if (!v2[2])
  {
    unsigned int v3 = [v2 debugTimerEnabled];
    id v2 = (void *)a1[4];
    if (v3)
    {
      [v2 debugTimer];
      id v2 = (void *)a1[4];
    }
  }

  if (!v2[9])
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v5 = a1[4];
    id v6 = *(void **)(v5 + 80);
    *(void *)(v5 + 80) = v4;

    id v2 = (void *)a1[4];
  }

  uint64_t v7 = (void *)v2[1];
  if (v7 && [v7 isValid])
  {
    id v8 = WALogActivityManagerHandle();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136446466;
      uint64_t v18 = "-[WAActivityManager osTransactionCreate:transaction:]_block_invoke";
      __int16 v19 = 1024;
      int v20 = 184;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:osTransactionCreate, timer was running, invalidating and freeing",  (uint8_t *)&v17,  0x12u);
    }

    [*(id *)(a1[4] + 8) invalidate];
    uint64_t v10 = a1[4];
    int v11 = *(void **)(v10 + 8);
    *(void *)(v10 + _Block_object_dispose((const void *)(v43 - 176), 8) = 0LL;
  }

  [*(id *)(a1[4] + 32) addObject:a1[5]];
  ++*(void *)(a1[4] + 72LL);
  id v12 = WALogActivityManagerHandle();
  __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = a1[6];
    id v15 = [*(id *)(a1[4] + 32) count];
    uint64_t v16 = *(void *)(a1[4] + 72LL);
    int v17 = 136447234;
    uint64_t v18 = "-[WAActivityManager osTransactionCreate:transaction:]_block_invoke";
    __int16 v19 = 1024;
    int v20 = 192;
    __int16 v21 = 2080;
    uint64_t v22 = v14;
    __int16 v23 = 2048;
    id v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:osTransactionCreate %s, active count is now %lu, total started is now %lu",  (uint8_t *)&v17,  0x30u);
  }
}

void sub_10007C4D0(void *a1)
{
  id v2 = WALogActivityManagerHandle();
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t description = os_transaction_get_description(a1[4]);
    *(_DWORD *)buf = 136446722;
    __int16 v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
    __int16 v26 = 1024;
    int v27 = 208;
    __int16 v28 = 2080;
    uint64_t v29 = (const __CFString *)description;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:osTransactionComplete %s",  buf,  0x1Cu);
  }

  if (([*(id *)(a1[5] + 32) containsObject:a1[4]] & 1) == 0)
  {
    id v5 = WALogActivityManagerHandle();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = os_transaction_get_description(a1[4]);
      id v8 = (const __CFString *)[*(id *)(a1[5] + 32) count];
      *(_DWORD *)buf = 136446978;
      __int16 v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
      __int16 v26 = 1024;
      int v27 = 211;
      __int16 v28 = 2080;
      uint64_t v29 = (const __CFString *)v7;
      __int16 v30 = 2048;
      int v31 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:osTransactionComplete %s, TRANSACTION NOT FOUND, active count before completing %lu",  buf,  0x26u);
    }

    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  [*(id *)(a1[5] + 32) removeObject:a1[4]];
  ++*(void *)(a1[5] + 88LL);
  if (![*(id *)(a1[5] + 32) count])
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 persistentDomainForName:@"com.apple.wifianalyticsd"]);

    int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"eager-exit-timeout"]);
    if (v11)
    {
      id v12 = WALogActivityManagerHandle();
      __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        __int16 v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
        __int16 v26 = 1024;
        int v27 = 224;
        __int16 v28 = 2112;
        uint64_t v29 = @"com.apple.wifianalyticsd";
        __int16 v30 = 2112;
        int v31 = @"eager-exit-timeout";
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found preference value in domain: %@ key: %@",  buf,  0x26u);
      }

      int v14 = [v11 intValue];
      if (v14 < 1)
      {
        id v21 = WALogActivityManagerHandle();
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
          __int16 v26 = 1024;
          int v27 = 263;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_active_transactions empty, eager exit timer disabled via defaults write",  buf,  0x12u);
        }

        goto LABEL_26;
      }

      double v15 = (double)v14;
    }

    else
    {
      double v15 = 300.0;
    }

    uint64_t v16 = *(void *)(a1[5] + 8LL);
    id v17 = WALogActivityManagerHandle();
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446722;
        __int16 v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
        __int16 v26 = 1024;
        int v27 = 232;
        __int16 v28 = 2048;
        uint64_t v29 = *(const __CFString **)&v15;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_active_transactions empty, extending running eager exit timer to %f seconds",  buf,  0x1Cu);
      }

      uint64_t v20 = a1[5];
      uint64_t v18 = *(os_log_s **)(v20 + 8);
      *(void *)(v20 + _Block_object_dispose((const void *)(v43 - 176), 8) = 0LL;
    }

    else if (v19)
    {
      *(_DWORD *)buf = 136446722;
      __int16 v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
      __int16 v26 = 1024;
      int v27 = 230;
      __int16 v28 = 2048;
      uint64_t v29 = *(const __CFString **)&v15;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:_active_transactions empty, configuring eager exit timer in %f seconds",  buf,  0x1Cu);
    }

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10007C94C;
    v23[3] = &unk_1000CD668;
    v23[4] = a1[5];
    *(double *)&v23[5] = v15;
    dispatch_async(&_dispatch_main_q, v23);
LABEL_26:
  }

void sub_10007C94C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10007C9D4;
  v6[3] = &unk_1000CDBE8;
  v6[4] = *(void *)(a1 + 32);
  v6[5] = v2;
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:repeats:block:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:repeats:block:",  0LL,  v6));
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + _Block_object_dispose((const void *)(v43 - 176), 8) = v3;
}

void sub_10007C9D4(uint64_t a1)
{
  id v2 = WALogActivityManagerHandle();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(v4 + 88);
    [*(id *)(v4 + 80) timeIntervalSinceNow];
    int v13 = 136446978;
    int v14 = "-[WAActivityManager osTransactionComplete:]_block_invoke_2";
    __int16 v15 = 1024;
    int v16 = 242;
    __int16 v17 = 2048;
    uint64_t v18 = v5;
    __int16 v19 = 2048;
    double v20 = -v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Completed %lu transactions within uptime of %f seconds",  (uint8_t *)&v13,  0x26u);
  }

  id v7 = WALogActivityManagerHandle();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v13 = 136446722;
    int v14 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
    __int16 v15 = 1024;
    int v16 = 247;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Attempting Daemon Eager Exit due to inactivity timeout of %f seconds",  (uint8_t *)&v13,  0x1Cu);
  }

  [*(id *)(a1 + 32) _executeBeforePossibleEagerExit];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateExecutionBlockForCleanExit]);

  if (v10)
  {
    [*(id *)(a1 + 32) _executeTimerBlock];
  }

  else if ((xpc_transaction_try_exit_clean() & 1) == 0)
  {
    id v11 = WALogActivityManagerHandle();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136446466;
      int v14 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
      __int16 v15 = 1024;
      int v16 = 254;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Cannot eager exit, still outstanding transactions",  (uint8_t *)&v13,  0x12u);
    }
  }

id sub_10007CD24(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 32) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  uint64_t v4 = getpid();
  int v5 = sandbox_check(v4, 0LL, SANDBOX_CHECK_NO_REPORT);
  id v6 = WALogCategoryDefaultHandle();
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = v5 == 0;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    unsigned int v10 = [v9 processIdentifier];
    if (v8) {
      id v11 = @"NO";
    }
    else {
      id v11 = @"YES";
    }
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 processName]);
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "int main(int, const char **)";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 116;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v10;
    *(_WORD *)uint64_t v35 = 2112;
    *(void *)&v35[2] = v11;
    *(_WORD *)&v35[10] = 2112;
    *(void *)&v35[12] = v13;
    *(_WORD *)&v35[20] = 2080;
    *(void *)&v35[22] = "WiFiAnalytics_executables-680.21 Nov 10 2024 01:54:13";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:STARTUP (%d) isSandboxed: %@ -- %@ version: %s",  buf,  0x36u);
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  *(void *)uint64_t v35 = sub_10007D238;
  *(void *)&v35[8] = sub_10007D248;
  *(void *)&v35[16] = 0LL;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_10007D250;
  v33[3] = &unk_1000CD9A0;
  v33[4] = buf;
  int v14 = objc_retainBlock(v33);
  __int16 v15 = &_dispatch_main_q;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10007D424;
  handler[3] = &unk_1000CDC38;
  int v16 = v14;
  id v32 = v16;
  xpc_set_event_stream_handler("com.apple.notifyd.matching", &_dispatch_main_q, handler);

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_10007D508;
  v29[3] = &unk_1000CDC38;
  __int16 v17 = v16;
  id v30 = v17;
  xpc_set_event_stream_handler("com.apple.awd.launch.wifi", &_dispatch_main_q, v29);

  uint64_t v18 = objc_alloc_init(&OBJC_CLASS___WAEngine);
  v28.__sigaction_u.__sa_handler = (void (__cdecl *)(int))1;
  *(void *)&v28.sa_mask = 0LL;
  sigaction(15, &v28, 0LL);
  dispatch_source_t v19 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0LL, &_dispatch_main_q);
  double v20 = (void *)qword_1000ED050;
  qword_1000ED050 = (uint64_t)v19;

  id v21 = (dispatch_source_s *)qword_1000ED050;
  if (qword_1000ED050)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10007D5EC;
    v25[3] = &unk_1000CCD80;
    uint64_t v22 = v18;
    __int16 v26 = v22;
    dispatch_source_set_event_handler(v21, v25);
    dispatch_resume((dispatch_object_t)qword_1000ED050);
    -[WAEngine run](v22, "run");
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v27 = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "FAILED to setup SIGTERM catcher",  v27,  2u);
  }

  _Block_object_dispose(buf, 8);
  objc_autoreleasePoolPop(v3);
  if (v21)
  {
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
    [v23 run];
  }

  return 0;
}

void sub_10007D214(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D238(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007D248(uint64_t a1)
{
}

void sub_10007D250(uint64_t a1)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    uint64_t v2 = os_transaction_create("com.apple.wifianalytics.keepalive");
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
    [v3 osTransactionCreate:"com.apple.wifianalytics.keepalive" transaction:v2];

    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v2;

    dispatch_time_t v6 = dispatch_time(0LL, 30000000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007D330;
    block[3] = &unk_1000CD9A0;
    void block[4] = *(void *)(a1 + 32);
    dispatch_after(v6, &_dispatch_main_q, block);
  }

void sub_10007D330(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446466;
    BOOL v8 = "int main(int, const char **)_block_invoke_2";
    __int16 v9 = 1024;
    int v10 = 123;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Transaction hold expired",  (uint8_t *)&v7,  0x12u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](&OBJC_CLASS___WAActivityManager, "sharedActivityManager"));
  [v4 osTransactionComplete:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  dispatch_time_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0LL;
}

uint64_t sub_10007D424(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446978;
    dispatch_time_t v6 = "int main(int, const char **)_block_invoke";
    __int16 v7 = 1024;
    int v8 = 131;
    __int16 v9 = 2080;
    int v10 = "com.apple.notifyd.matching";
    __int16 v11 = 1024;
    int v12 = 30;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Wake notify received (%s), staying dirty (holding a transsaction) for %d seconds",  (uint8_t *)&v5,  0x22u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10007D508(uint64_t a1)
{
  id v2 = WALogCategoryDefaultHandle();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446978;
    dispatch_time_t v6 = "int main(int, const char **)_block_invoke";
    __int16 v7 = 1024;
    int v8 = 135;
    __int16 v9 = 2080;
    int v10 = "com.apple.awd.launch.wifi";
    __int16 v11 = 1024;
    int v12 = 30;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Wake notify received (%s), staying dirty (holding a transsaction) for %d seconds",  (uint8_t *)&v5,  0x22u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10007D5EC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    exit(1);
  }
  return [v1 prepareToTerminateAnyReply:&stru_1000CDC78];
}

void sub_10007D614(id a1, id a2, NSError *a3)
{
  id v4 = a2;
  int v5 = a3;
  id v6 = WALogCategoryDefaultHandle();
  __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136446466;
    __int16 v9 = "int main(int, const char **)_block_invoke_2";
    __int16 v10 = 1024;
    int v11 = 156;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:Now exit(143)",  (uint8_t *)&v8,  0x12u);
  }

  exit(143);
}

void sub_10007E15C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10007E764(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = WALogCategoryDefaultHandle();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 136447234;
    __int16 v9 = "-[WADatapathDiagnosticsMessageSubmitter submitSlowWiFiMessage:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 139;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:[WiFi Slow WiFi - %@ %@] ABC snapshot response = %@",  (uint8_t *)&v8,  0x30u);
  }
}

void sub_10007F5EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10007F628(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007F638(uint64_t a1)
{
}

void sub_10007F640(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = WALogCategoryDefaultHandle();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v8 = 136447234;
    __int16 v9 = "-[WADatapathDiagnosticsMessageSubmitter submitDPEMessage:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 369;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:[WiFi DatapathStall - %@ %@] ABC snapshot response = %@",  (uint8_t *)&v8,  0x30u);
  }
}

LABEL_149:
    id v441 = (v468 & 2) == 0;
    uint64_t v58 = v35;
    goto LABEL_150;
  }

  id v441 = 0;
LABEL_150:
  v466 = [log action];
  if ((v466 & 8) != 0)
  {
    int v63 = WALogCategoryDefaultHandle();
    __int16 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 583;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Action - DPS Watchdog but No WD Budget",  buf,  0x12u);
    }

    uint64_t v58 = v35;
  }

  v464 = [log action];
  if ((v464 & 0x10) != 0)
  {
    int v65 = WALogCategoryDefaultHandle();
    __int16 v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 588;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Action - Fast DPS Watchdog but No WD Budget",  buf,  0x12u);
    }

    uint64_t v58 = v35;
  }

  if (([log action] & 0x20) != 0)
  {
    id v67 = WALogCategoryDefaultHandle();
    uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 593;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Action - User Changed",  buf,  0x12u);
    }

    uint64_t v58 = 1;
  }

  if (![log action])
  {
    id v69 = WALogCategoryDefaultHandle();
    id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 597;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Action - None",  buf,  0x12u);
    }
  }

  id v71 = (void *)objc_claimAutoreleasedReturnValue([log associationChanges]);
  id v457 = v58;

  if (!v71)
  {
    v476 = 0;
    id v74 = 0;
    v472 = 0;
    id obj = 0;
    v483 = 0;
    goto LABEL_212;
  }

  __int128 v510 = 0u;
  __int128 v511 = 0u;
  __int128 v508 = 0u;
  __int128 v509 = 0u;
  unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([log associationChanges]);
  id v73 = [v72 countByEnumeratingWithState:&v508 objects:v548 count:16];
  if (!v73)
  {
    v476 = 0;
    id v74 = 0;
    v472 = 0;
    id obj = 0;
    v483 = 0;
    goto LABEL_211;
  }

  v476 = 0;
  id v74 = 0;
  v472 = 0;
  id obj = 0;
  v483 = 0;
  v489 = *(void *)v509;
  do
  {
    for (j = 0LL; j != v73; j = (char *)j + 1)
    {
      if (*(void *)v509 != v489) {
        objc_enumerationMutation(v72);
      }
      id v76 = *(void **)(*((void *)&v508 + 1) + 8LL * (void)j);
      uint64_t v77 = WALogCategoryDefaultHandle();
      uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        id v79 = (void *)objc_claimAutoreleasedReturnValue([log associationChanges]);
        unint64_t v80 = [v79 indexOfObject:v76];
        id v81 = (void *)objc_claimAutoreleasedReturnValue([log associationChanges]);
        id v82 = [v81 count];
        *(_DWORD *)buf = 136446978;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 602;
        v538 = 2048;
        *(void *)v539 = v80;
        *(_WORD *)&v539[8] = 2048;
        *(void *)v540 = v82;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Change %lu of %lu",  buf,  0x26u);
      }

      unint64_t v83 = [v76 newBSSID];
      id v84 = WALogCategoryDefaultHandle();
      double v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      id v86 = os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT);
      if (v83)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
          v536 = 1024;
          v537 = 604;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Change - newBSSID - after link up we are associated to a different BSSID",  buf,  0x12u);
        }

        id v74 = 1;
        v483 = 1;
      }

      else if (v86)
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 608;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:No change in BSSID",  buf,  0x12u);
      }

      if ([v76 changedChannel])
      {
        id v87 = WALogCategoryDefaultHandle();
        NSErrorUserInfoKey v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
          v536 = 1024;
          v537 = 612;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Change - changedChannel",  buf,  0x12u);
        }

        id obj = 1;
      }

      if ([v76 changedMAC])
      {
        id v89 = WALogCategoryDefaultHandle();
        id v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
          v536 = 1024;
          v537 = 617;
          _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Change - changedMAC - meaning user toggled WiFi",  buf,  0x12u);
        }

        id v91 = (void *)objc_claimAutoreleasedReturnValue([v474 probeResults]);
        id v92 = (unint64_t)[v91 count] > 1;

        if (v92)
        {
          id v93 = WALogCategoryDefaultHandle();
          __int16 v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
            v536 = 1024;
            v537 = 619;
            _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Multiple probe results as well",  buf,  0x12u);
          }
        }

        if ((v457 & 1) != 0)
        {
          id v457 = 1;
          id v74 = 1;
          goto LABEL_202;
        }

        id v99 = WALogCategoryDefaultHandle();
        id v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
          v536 = 1024;
          v537 = 622;
          _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:changedMAC but userToggled isn't True?!",  buf,  0x12u);
        }

        id v457 = 1;
        id v74 = 1;
      }

      else
      {
        __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v474 probeResults]);
        uint64_t v96 = [v95 count] == (id)1;

        if (v96)
        {
          v476 = 1;
          goto LABEL_202;
        }

        id v97 = WALogCategoryDefaultHandle();
        id v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
          v536 = 1024;
          v537 = 630;
          _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Change - changedMAC is false - probably involuntary link down",  buf,  0x12u);
        }

        v476 = 1;
      }

LABEL_202:
      if ([v76 changedDNSPrimary])
      {
        id v100 = WALogCategoryDefaultHandle();
        id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
          v536 = 1024;
          v537 = 636;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found Change - networkDidChange",  buf,  0x12u);
        }

        id v74 = 1;
        v472 = 1;
      }
    }

    id v73 = [v72 countByEnumeratingWithState:&v508 objects:v548 count:16];
  }

  while (v73);
LABEL_211:

LABEL_212:
  uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([log qDpsStats]);

  if (v102)
  {
    id v103 = (void *)objc_claimAutoreleasedReturnValue([log qDpsStats]);
    LODWORD(v431) = [v103 quickDpsResetRecommendation];
    id v104 = WALogCategoryDefaultHandle();
    int v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      id v106 = @"NO";
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      *(_DWORD *)buf = 136446722;
      if ((_DWORD)v431) {
        id v106 = @"YES";
      }
      v536 = 1024;
      v537 = 648;
      v538 = 2112;
      *(void *)v539 = v106;
      _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found qDpsStat -- quickDpsResetRecommendation -- %@",  buf,  0x1Cu);
    }

    else {
      uint64_t v107 = @"OFF";
    }
    id v447 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v107));

    __int128 v108 = WALogCategoryDefaultHandle();
    __int128 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 651;
      v538 = 2112;
      *(void *)v539 = v447;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found qDpsStat -- screenState -- %@",  buf,  0x1Cu);
    }

    __int128 v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "suppressedReasonAsString:", objc_msgSend(v103, "suppressedReason")));
    double v445 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v110));

    __int128 v111 = WALogCategoryDefaultHandle();
    id v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 654;
      v538 = 2112;
      *(void *)v539 = v445;
      _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found qDpsStat -- suppressionReason -- %@",  buf,  0x1Cu);
    }
  }

  else
  {
    LODWORD(v431) = 0;
    id v447 = 0LL;
    double v445 = 0LL;
  }

  __int16 v443 = (v468 >> 1) & 1;
  HIDWORD(v431) = v476 & 1;
  LODWORD(v430) = (v464 >> 4) & 1;
  HIDWORD(v430) = (v466 >> 3) & 1;
  LODWORD(v427) = obj & 1;
  HIDWORD(v427) = v472 & 1;
  LODWORD(v426) = v74 & 1;
  HIDWORD(v426) = v483 & 1;
  uint64_t v35 = v457;
LABEL_227:
  __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v474 snapshot]);
  __int16 v458 = v35;

  if (v113)
  {
    __int128 v114 = WALogCategoryDefaultHandle();
    __int128 v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 659;
      _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Found - snapshot submessage",  buf,  0x12u);
    }
  }

  uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSamples]);
  uint64_t v117 = [v116 count];

  __int16 v118 = (uint64_t)v117 - 1;
  uint64_t v500 = v118;
  int v119 = WALogCategoryDefaultHandle();
  __int16 v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
  if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
    v536 = 1024;
    v537 = 671;
    v538 = 2048;
    *(void *)v539 = v117;
    _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Iterating through %lu dpsCounterSamples",  buf,  0x1Cu);
  }

  unint64_t v121 = (unint64_t)v117 > 5;

  if ((unint64_t)v117 <= 5)
  {
    __int128 v432 = 0LL;
    id v433 = 0LL;
    __int128 v434 = 0LL;
    v435 = 0LL;
    id v139 = 0;
    id v140 = 0;
    id v454 = 0LL;
    v455 = 0LL;
    id v456 = 0LL;
    id v141 = 0;
    v449 = 0;
    id v142 = v117 == 0LL;
    __int128 v143 = 1LL;
  }

  else
  {
    id v122 = 0;
    id v456 = 0LL;
    v490 = 0LL;
    while (1)
    {
      id v123 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      id v124 = (void *)objc_claimAutoreleasedReturnValue([v123 peerStats]);
      uint64_t v125 = (unint64_t)[v124 ccasCount] > v122;

      if (!v125) {
        break;
      }
      id v126 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
      uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v126 peerStats]);
      id v128 = (void *)objc_claimAutoreleasedReturnValue([v127 ccaAtIndex:v122]);
      id v129 = [v128 residentTime];
      uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      id v131 = (void *)objc_claimAutoreleasedReturnValue([v130 peerStats]);
      uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v131 ccaAtIndex:v122]);
      v133 = [v132 residentTime];

      __int16 v134 = v129 - v133;
      if (v129 - v133 > v490)
      {
        int v135 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        __int16 v136 = (void *)objc_claimAutoreleasedReturnValue([v135 peerStats]);
        id v137 = (void *)objc_claimAutoreleasedReturnValue([v136 ccaAtIndex:v122]);
        __int16 v138 = objc_claimAutoreleasedReturnValue([v137 state]);

        id v456 = (void *)v138;
        v490 = v134;
      }

      ++v122;
    }

    if (!v456)
    {
      v266 = WALogCategoryDefaultHandle();
      v267 = (os_log_s *)objc_claimAutoreleasedReturnValue(v266);
      if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
      {
        unsigned int v268 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        id v269 = (void *)objc_claimAutoreleasedReturnValue([v268 peerStats]);
        BOOL v270 = [v269 ccasCount];
        v271 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        v272 = (void *)objc_claimAutoreleasedReturnValue([v271 peerStats]);
        char v273 = (void *)objc_claimAutoreleasedReturnValue([v272 ccas]);
        id v274 = (id)objc_claimAutoreleasedReturnValue([v273 description]);
        *(_DWORD *)buf = 136446978;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 687;
        v538 = 2048;
        *(void *)v539 = v270;
        *(_WORD *)&v539[8] = 2112;
        *(void *)v540 = v274;
        _os_log_impl( (void *)&_mh_execute_header,  v267,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Median CCA not found nCCA %lu %@",  buf,  0x26u);
      }

      for (k = 0; ; ++k)
      {
        BOOL v275 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        id v276 = (void *)objc_claimAutoreleasedReturnValue([v275 peerStats]);
        id v277 = (unint64_t)[v276 ccasCount] > k;

        if (!v277) {
          break;
        }
        id v278 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
        v279 = (void *)objc_claimAutoreleasedReturnValue([v278 peerStats]);
        uint64_t v280 = (void *)objc_claimAutoreleasedReturnValue([v279 ccaAtIndex:k]);
        BOOL v281 = [v280 residentTime];
        id v282 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        v283 = (void *)objc_claimAutoreleasedReturnValue([v282 peerStats]);
        id v284 = (void *)objc_claimAutoreleasedReturnValue([v283 ccaAtIndex:k]);
        v285 = [v284 residentTime];

        if (v500)
        {
          BOOL v286 = 0LL;
          objb = v281 - v285;
          v287 = 1;
          do
          {
            v288 = WALogCategoryDefaultHandle();
            id v289 = (os_log_s *)objc_claimAutoreleasedReturnValue(v288);
            if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
            {
              logc = v289;
              id v290 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v286]);
              v291 = (void *)objc_claimAutoreleasedReturnValue([v290 peerStats]);
              id v292 = (void *)objc_claimAutoreleasedReturnValue([v291 ccaAtIndex:k]);
              id v293 = [v292 residentTime];
              v294 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v286]);
              v295 = (void *)objc_claimAutoreleasedReturnValue([v294 peerStats]);
              v296 = (id)objc_claimAutoreleasedReturnValue([v295 ccaAtIndex:k]);
              *(_DWORD *)buf = 136448002;
              v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
              v536 = 1024;
              v537 = 691;
              v538 = 1024;
              *(_DWORD *)v539 = k;
              *(_WORD *)&v539[4] = 1024;
              *(_DWORD *)&v539[6] = v287 - 1;
              *(_WORD *)v540 = 2048;
              *(void *)&v540[2] = v490;
              *(_WORD *)&v540[10] = 2048;
              *(void *)&v540[12] = objb;
              *(_WORD *)v541 = 2048;
              *(void *)&v541[2] = v293;
              *(_WORD *)v542 = 2112;
              *(void *)&v542[2] = v296;
              id v289 = logc;
              _os_log_impl( (void *)&_mh_execute_header,  logc,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:CCA index %d itwo %d maxTimeInState %llu deltaTimeInState %llu time %llu peerStatsAtIndex %@ ",  buf,  0x46u);
            }

            BOOL v286 = v287;
            double v297 = v500 > v287++;
          }

          while (v297);
        }
      }
    }

    id v144 = 0;
    v455 = 0LL;
    v491 = 0LL;
    while (1)
    {
      char v145 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      id v146 = (void *)objc_claimAutoreleasedReturnValue([v145 peerStats]);
      __int128 v147 = (unint64_t)[v146 rssisCount] > v144;

      if (!v147) {
        break;
      }
      __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
      __int128 v149 = (void *)objc_claimAutoreleasedReturnValue([v148 peerStats]);
      __int128 v150 = (void *)objc_claimAutoreleasedReturnValue([v149 rssiAtIndex:v144]);
      id v151 = [v150 residentTime];
      id v152 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v152 peerStats]);
      id v154 = (void *)objc_claimAutoreleasedReturnValue([v153 rssiAtIndex:v144]);
      uint64_t v155 = [v154 residentTime];

      id v156 = v151 - v155;
      if (v151 - v155 > v491)
      {
        __int128 v157 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue([v157 peerStats]);
        id v159 = (void *)objc_claimAutoreleasedReturnValue([v158 rssiAtIndex:v144]);
        __int128 v160 = objc_claimAutoreleasedReturnValue([v159 state]);

        v455 = (void *)v160;
        v491 = v156;
      }

      ++v144;
    }

    if (!v455)
    {
      double v298 = WALogCategoryDefaultHandle();
      uint64_t v299 = (os_log_s *)objc_claimAutoreleasedReturnValue(v298);
      if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
      {
        char v300 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        v301 = (void *)objc_claimAutoreleasedReturnValue([v300 peerStats]);
        id v302 = [v301 rssisCount];
        BOOL v303 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        id v304 = (void *)objc_claimAutoreleasedReturnValue([v303 peerStats]);
        v305 = (void *)objc_claimAutoreleasedReturnValue([v304 rssis]);
        v306 = (id)objc_claimAutoreleasedReturnValue([v305 description]);
        *(_DWORD *)buf = 136446978;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 709;
        v538 = 2048;
        *(void *)v539 = v302;
        *(_WORD *)&v539[8] = 2112;
        *(void *)v540 = v306;
        _os_log_impl( (void *)&_mh_execute_header,  v299,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Median RSSI not found nRSSI %lu %@",  buf,  0x26u);
      }

      for (m = 0; ; ++m)
      {
        double v307 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        double v308 = (void *)objc_claimAutoreleasedReturnValue([v307 peerStats]);
        id v309 = (unint64_t)[v308 rssisCount] > m;

        if (!v309) {
          break;
        }
        id v310 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
        double v311 = (void *)objc_claimAutoreleasedReturnValue([v310 peerStats]);
        v312 = (void *)objc_claimAutoreleasedReturnValue([v311 rssiAtIndex:m]);
        v313 = [v312 residentTime];
        id v314 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        id v315 = (void *)objc_claimAutoreleasedReturnValue([v314 peerStats]);
        v316 = (void *)objc_claimAutoreleasedReturnValue([v315 rssiAtIndex:m]);
        v317 = [v316 residentTime];

        if (v500)
        {
          v318 = 0LL;
          objc = v313 - v317;
          id v319 = 1;
          do
          {
            id v320 = WALogCategoryDefaultHandle();
            id v321 = (os_log_s *)objc_claimAutoreleasedReturnValue(v320);
            if (os_log_type_enabled(v321, OS_LOG_TYPE_DEFAULT))
            {
              logd = v321;
              id v322 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v318]);
              id v323 = (void *)objc_claimAutoreleasedReturnValue([v322 peerStats]);
              id v324 = (void *)objc_claimAutoreleasedReturnValue([v323 rssiAtIndex:m]);
              uint64_t v325 = [v324 residentTime];
              id v326 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v318]);
              id v327 = (void *)objc_claimAutoreleasedReturnValue([v326 peerStats]);
              id v328 = (id)objc_claimAutoreleasedReturnValue([v327 rssiAtIndex:m]);
              *(_DWORD *)buf = 136448002;
              v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
              v536 = 1024;
              v537 = 713;
              v538 = 1024;
              *(_DWORD *)v539 = m;
              *(_WORD *)&v539[4] = 1024;
              *(_DWORD *)&v539[6] = v319 - 1;
              *(_WORD *)v540 = 2048;
              *(void *)&v540[2] = v491;
              *(_WORD *)&v540[10] = 2048;
              *(void *)&v540[12] = objc;
              *(_WORD *)v541 = 2048;
              *(void *)&v541[2] = v325;
              *(_WORD *)v542 = 2112;
              *(void *)&v542[2] = v328;
              id v321 = logd;
              _os_log_impl( (void *)&_mh_execute_header,  logd,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:RSSI index %d itwo %d maxTimeInState %llu deltaTimeInState %llu time %llu peerStatsAtIndex %@ ",  buf,  0x46u);
            }

            v318 = v319;
            double v297 = v500 > v319++;
          }

          while (v297);
        }
      }
    }

    id v161 = 0;
    id v454 = 0LL;
    v492 = 0LL;
    while (1)
    {
      __int128 v162 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      int v163 = (void *)objc_claimAutoreleasedReturnValue([v162 peerStats]);
      __int128 v164 = (unint64_t)[v163 snrsCount] > v161;

      if (!v164) {
        break;
      }
      __int16 v165 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
      int v166 = (void *)objc_claimAutoreleasedReturnValue([v165 peerStats]);
      id v167 = (void *)objc_claimAutoreleasedReturnValue([v166 snrAtIndex:v161]);
      double v168 = [v167 residentTime];
      id v169 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      id v170 = (void *)objc_claimAutoreleasedReturnValue([v169 peerStats]);
      id v171 = (void *)objc_claimAutoreleasedReturnValue([v170 snrAtIndex:v161]);
      uint64_t v172 = [v171 residentTime];

      __int16 v173 = v168 - v172;
      if (v168 - v172 > v492)
      {
        id v174 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        __int128 v175 = (void *)objc_claimAutoreleasedReturnValue([v174 peerStats]);
        id v176 = (void *)objc_claimAutoreleasedReturnValue([v175 snrAtIndex:v161]);
        __int128 v177 = objc_claimAutoreleasedReturnValue([v176 state]);

        id v454 = (void *)v177;
        v492 = v173;
      }

      ++v161;
    }

    if (!v454)
    {
      id v329 = WALogCategoryDefaultHandle();
      id v330 = (os_log_s *)objc_claimAutoreleasedReturnValue(v329);
      if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
      {
        __int16 v331 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        int v332 = (void *)objc_claimAutoreleasedReturnValue([v331 peerStats]);
        __int16 v333 = [v332 snrsCount];
        id v334 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        __int16 v335 = (void *)objc_claimAutoreleasedReturnValue([v334 peerStats]);
        id v336 = (void *)objc_claimAutoreleasedReturnValue([v335 snrs]);
        __int16 v337 = (id)objc_claimAutoreleasedReturnValue([v336 description]);
        *(_DWORD *)buf = 136446978;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 731;
        v538 = 2048;
        *(void *)v539 = v333;
        *(_WORD *)&v539[8] = 2112;
        *(void *)v540 = v337;
        _os_log_impl( (void *)&_mh_execute_header,  v330,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:Median SNR not found nSNR %lu %@",  buf,  0x26u);
      }

      for (n = 0; ; ++n)
      {
        double v338 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        double v339 = (void *)objc_claimAutoreleasedReturnValue([v338 peerStats]);
        v340 = (unint64_t)[v339 snrsCount] > n;

        if (!v340) {
          break;
        }
        id v341 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
        id v342 = (void *)objc_claimAutoreleasedReturnValue([v341 peerStats]);
        id v343 = (void *)objc_claimAutoreleasedReturnValue([v342 snrAtIndex:n]);
        double v344 = [v343 residentTime];
        double v345 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
        id v346 = (void *)objc_claimAutoreleasedReturnValue([v345 peerStats]);
        id v347 = (void *)objc_claimAutoreleasedReturnValue([v346 snrAtIndex:n]);
        double v348 = [v347 residentTime];

        if (v500)
        {
          v349 = 0LL;
          objd = v344 - v348;
          id v350 = 1;
          do
          {
            id v351 = WALogCategoryDefaultHandle();
            id v352 = (os_log_s *)objc_claimAutoreleasedReturnValue(v351);
            if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
            {
              loge = v352;
              v353 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v349]);
              v354 = (void *)objc_claimAutoreleasedReturnValue([v353 peerStats]);
              id v355 = (void *)objc_claimAutoreleasedReturnValue([v354 snrAtIndex:n]);
              __int128 v356 = [v355 residentTime];
              id v357 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v349]);
              id v358 = (void *)objc_claimAutoreleasedReturnValue([v357 peerStats]);
              v359 = (id)objc_claimAutoreleasedReturnValue([v358 snrAtIndex:n]);
              *(_DWORD *)buf = 136448002;
              v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
              v536 = 1024;
              v537 = 735;
              v538 = 1024;
              *(_DWORD *)v539 = n;
              *(_WORD *)&v539[4] = 1024;
              *(_DWORD *)&v539[6] = v350 - 1;
              *(_WORD *)v540 = 2048;
              *(void *)&v540[2] = v492;
              *(_WORD *)&v540[10] = 2048;
              *(void *)&v540[12] = objd;
              *(_WORD *)v541 = 2048;
              *(void *)&v541[2] = v356;
              *(_WORD *)v542 = 2112;
              *(void *)&v542[2] = v359;
              id v352 = loge;
              _os_log_impl( (void *)&_mh_execute_header,  loge,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:SNR index %d itwo %d maxTimeInState %llu deltaTimeInState %llu time %llu peerStatsAtIndex %@ ",  buf,  0x46u);
            }

            v349 = v350;
            double v297 = v500 > v350++;
          }

          while (v297);
        }
      }
    }

    id v178 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
    __int128 v179 = (void *)objc_claimAutoreleasedReturnValue([v178 controllerStats]);
    id v180 = (void *)objc_claimAutoreleasedReturnValue([v179 aggregateMetrics]);
    __int16 v181 = [v180 kRxCRCGlitch];
    id v182 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
    int v183 = (void *)objc_claimAutoreleasedReturnValue([v182 controllerStats]);
    id v184 = (void *)objc_claimAutoreleasedReturnValue([v183 aggregateMetrics]);
    uint64_t v185 = [v184 kRxCRCGlitch];

    v435 = (unint64_t)(v181 - v185) > 0xE15;
    __int16 v186 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
    id v187 = (void *)objc_claimAutoreleasedReturnValue([v186 controllerStats]);
    NSErrorUserInfoKey v188 = (void *)objc_claimAutoreleasedReturnValue([v187 scanActivity]);
    LODWORD(v181) = [v188 roamCount];
    id v189 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
    id v190 = (void *)objc_claimAutoreleasedReturnValue([v189 controllerStats]);
    id v191 = (void *)objc_claimAutoreleasedReturnValue([v190 scanActivity]);
    LODWORD(v185) = [v191 roamCount];

    __int128 v434 = (_DWORD)v181 != (_DWORD)v185;
    id v192 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
    uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue([v192 controllerStats]);
    id v194 = (void *)objc_claimAutoreleasedReturnValue([v193 btCoex]);
    LODWORD(v181) = [v194 duration];
    int v195 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
    int v196 = (void *)objc_claimAutoreleasedReturnValue([v195 controllerStats]);
    uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue([v196 btCoex]);
    LODWORD(v185) = [v197 duration];

    id v433 = (_DWORD)v181 != (_DWORD)v185;
    id v198 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
    id v199 = (void *)objc_claimAutoreleasedReturnValue([v198 controllerStats]);
    logb = [v199 channelsVisited0];
    id v200 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:v500]);
    v201 = (void *)objc_claimAutoreleasedReturnValue([v200 controllerStats]);
    v501 = [v201 channelsVisited1];
    id v202 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
    uint64_t v203 = (void *)objc_claimAutoreleasedReturnValue([v202 controllerStats]);
    LODWORD(v185) = [v203 channelsVisited0];
    uint64_t v204 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
    BOOL v205 = (void *)objc_claimAutoreleasedReturnValue([v204 controllerStats]);
    LODWORD(v197) = [v205 channelsVisited1];

    id v206 = 0;
    id v459 = 0LL;
    v460 = 0LL;
    v463 = 0LL;
    unsigned int v465 = 0LL;
    id v461 = 0LL;
    id v462 = 0LL;
    v484 = 0;
    __int128 v432 = v501 + logb != (_DWORD)v197 + (_DWORD)v185;
    while (1)
    {
      dispatch_time_t v207 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      id v208 = (void *)objc_claimAutoreleasedReturnValue([v207 peerStats]);
      v502 = v206;
      id v209 = (unint64_t)[v208 acCompletionsCount] > v206;

      if (!v209) {
        break;
      }
      v210 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      dispatch_semaphore_t v211 = (void *)objc_claimAutoreleasedReturnValue([v210 peerStats]);
      uint64_t v212 = (void *)objc_claimAutoreleasedReturnValue([v211 acCompletionsAtIndex:v502]);
      v473 = [v212 success];

      id v213 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
      v469 = [v213 timestamp];

      __int128 v506 = 0u;
      __int128 v507 = 0u;
      __int128 v504 = 0u;
      __int128 v505 = 0u;
      id v214 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSamples]);
      __int128 v215 = [v214 countByEnumeratingWithState:&v504 objects:v547 count:16];
      if (v215)
      {
        v493 = *(void *)v505;
        id obja = v214;
        do
        {
          loga = v215;
          for (iuint64_t i = 0LL; ii != loga; iuint64_t i = (char *)ii + 1)
          {
            if (*(void *)v505 != v493) {
              objc_enumerationMutation(obja);
            }
            __int128 v217 = *(void **)(*((void *)&v504 + 1) + 8LL * (void)ii);
            double v218 = (void *)objc_claimAutoreleasedReturnValue([v217 peerStats]);
            double v219 = (unint64_t)[v218 acCompletionsCount] > v502;

            if (v219)
            {
              __int128 v220 = (void *)objc_claimAutoreleasedReturnValue([v217 peerStats]);
              __int128 v221 = (void *)objc_claimAutoreleasedReturnValue([v220 acCompletionsAtIndex:v502]);
              id v222 = [v221 qeuedPackets];

              v223 = (void *)objc_claimAutoreleasedReturnValue([v217 peerStats]);
              id v224 = (void *)objc_claimAutoreleasedReturnValue([v223 acCompletionsAtIndex:v502]);
              double v225 = [v224 success];

              id v226 = [v217 timestamp];
              uint64_t v227 = (void *)objc_claimAutoreleasedReturnValue([v217 peerStats]);
              double v228 = (void *)objc_claimAutoreleasedReturnValue([v227 acCompletionsAtIndex:v502]);
              uint64_t v229 = [v228 ac];

              id v230 = WALogCategoryDefaultHandle();
              id v231 = (os_log_s *)objc_claimAutoreleasedReturnValue(v230);
              if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
              {
                id v232 = (void *)objc_claimAutoreleasedReturnValue([v217 peerStats]);
                id v233 = (void *)objc_claimAutoreleasedReturnValue([v232 acCompletionsAtIndex:v502]);
                id v234 = (id)objc_claimAutoreleasedReturnValue([v233 acAsString:v229]);
                *(_DWORD *)buf = 136447234;
                v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                v536 = 1024;
                v537 = 783;
                v538 = 2112;
                *(void *)v539 = v234;
                *(_WORD *)&v539[8] = 1024;
                *(_DWORD *)v540 = v225;
                *(_WORD *)&v540[4] = 1024;
                *(_DWORD *)&v540[6] = v222;
                _os_log_impl( (void *)&_mh_execute_header,  v231,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d: %@ TxSuccess %d qp %d",  buf,  0x28u);
              }

              if ((v484 & 1) == 0)
              {
                uint64_t v235 = (void *)objc_claimAutoreleasedReturnValue([v217 peerStats]);
                id v236 = (void *)objc_claimAutoreleasedReturnValue([v235 acCompletionsAtIndex:v502]);
                v237 = (void *)objc_claimAutoreleasedReturnValue([v236 acAsString:v229]);
                id v238 = [v237 length] == 0;

                if (v238)
                {
                  id v239 = WALogCategoryDefaultHandle();
                  id v240 = (os_log_s *)objc_claimAutoreleasedReturnValue(v239);
                  if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                    v536 = 1024;
                    v537 = 786;
                    _os_log_impl( (void *)&_mh_execute_header,  v240,  OS_LOG_TYPE_ERROR,  "%{public}s::%d: Caught bad data in perAC counterSample - setting missingValidCounterSample",  buf,  0x12u);
                  }

                  v484 = 1;
                }
              }

              switch((int)v229)
              {
                case 2:
                  if (!((v225 <= v473) | v462 & 1))
                  {
                    __int16 v241 = WALogCategoryDefaultHandle();
                    id v242 = (os_log_s *)objc_claimAutoreleasedReturnValue(v241);
                    if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 805;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v242,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC BK Successful Tx status after %llu ms",  buf,  0x1Cu);
                    }

                    LODWORD(v462) = 1;
                  }

                  if (!((v222 == 0) | BYTE4(v463) & 1))
                  {
                    id v259 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v259);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 809;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC BK Tx has Queued Data at %llu ms",  buf,  0x1Cu);
                    }

                    goto LABEL_319;
                  }

                  if (v222 == 0 && (v463 & 0x100000000LL) != 0)
                  {
                    if ((v459 & 0x100000000LL) == 0)
                    {
                      id v262 = WALogCategoryDefaultHandle();
                      id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v262);
                      if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136446722;
                        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                        v536 = 1024;
                        v537 = 813;
                        v538 = 2048;
                        *(void *)v539 = v226 - v469;
                        _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC BK Tx Queue has emptied queue at %llu ms",  buf,  0x1Cu);
                      }

                      BYTE4(v459) = 1;
LABEL_319:
                      BYTE4(v463) = 1;
                      goto LABEL_284;
                    }

                    BYTE4(v459) = 1;
                    BYTE4(v463) = 1;
                  }

                  break;
                case 3:
                  if (!((v225 <= v473) | BYTE4(v461) & 1))
                  {
                    v255 = WALogCategoryDefaultHandle();
                    id v256 = (os_log_s *)objc_claimAutoreleasedReturnValue(v255);
                    if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 792;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v256,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC BE Successful Tx status after %llu ms",  buf,  0x1Cu);
                    }

                    HIDWORD(v461) = 1;
                  }

                  if ((v222 == 0) | v463 & 1)
                  {
                    if (v222 != 0 || (v463 & 1) == 0) {
                      continue;
                    }
                    if ((v459 & 1) != 0)
                    {
                      LOBYTE(v459) = 1;
                      LOBYTE(v463) = 1;
                      continue;
                    }

                    v264 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v264);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 800;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC BE Tx Queue has emptied queue at %llu ms",  buf,  0x1Cu);
                    }

                    LOBYTE(v459) = 1;
                  }

                  else
                  {
                    v260 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v260);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 796;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC BE Tx has Queued Data at %llu ms",  buf,  0x1Cu);
                    }
                  }

                  LOBYTE(v463) = 1;
                  goto LABEL_284;
                case 4:
                  if (!((v225 <= v473) | BYTE4(v462) & 1))
                  {
                    BOOL v251 = WALogCategoryDefaultHandle();
                    uint64_t v252 = (os_log_s *)objc_claimAutoreleasedReturnValue(v251);
                    if (os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 818;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v252,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC VO Successful Tx status after %llu ms",  buf,  0x1Cu);
                    }

                    HIDWORD(v462) = 1;
                  }

                  if ((v222 == 0) | v465 & 1)
                  {
                    if (v222 != 0 || (v465 & 1) == 0) {
                      continue;
                    }
                    if ((v460 & 1) != 0)
                    {
                      LOBYTE(v460) = 1;
                      LOBYTE(v465) = 1;
                      continue;
                    }

                    v261 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v261);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 826;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC VO Tx Queue has emptied queue at %llu ms",  buf,  0x1Cu);
                    }

                    LOBYTE(v460) = 1;
                  }

                  else
                  {
                    BOOL v257 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v257);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 822;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC VO Tx has Queued Data at %llu ms",  buf,  0x1Cu);
                    }
                  }

                  LOBYTE(v465) = 1;
                  goto LABEL_284;
                case 5:
                  if (!((v225 <= v473) | v461 & 1))
                  {
                    char v253 = WALogCategoryDefaultHandle();
                    id v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(v253);
                    if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 831;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC VI Successful Tx status after %llu ms",  buf,  0x1Cu);
                    }

                    LODWORD(v461) = 1;
                  }

                  if ((v222 == 0) | BYTE4(v465) & 1)
                  {
                    if (v222 != 0 || (v465 & 0x100000000LL) == 0) {
                      continue;
                    }
                    if ((v460 & 0x100000000LL) != 0)
                    {
                      BYTE4(v460) = 1;
                      BYTE4(v465) = 1;
                      continue;
                    }

                    v263 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v263);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 839;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC VI Tx Queue has emptied queue at %llu ms",  buf,  0x1Cu);
                    }

                    BYTE4(v460) = 1;
                  }

                  else
                  {
                    id v258 = WALogCategoryDefaultHandle();
                    id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v258);
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136446722;
                      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                      v536 = 1024;
                      v537 = 835;
                      v538 = 2048;
                      *(void *)v539 = v226 - v469;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:AC VO Tx has Queued Data at %llu ms",  buf,  0x1Cu);
                    }
                  }

                  BYTE4(v465) = 1;
                  goto LABEL_284;
                default:
                  continue;
              }
            }

            else
            {
              id v243 = WALogCategoryDefaultHandle();
              id v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v243);
              if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
              {
                v245 = (void *)objc_claimAutoreleasedReturnValue([v474 dpsCounterSampleAtIndex:0]);
                id v246 = (void *)objc_claimAutoreleasedReturnValue([v245 peerStats]);
                id v247 = (void *)objc_claimAutoreleasedReturnValue([v246 acCompletionsAtIndex:v502]);
                id v248 = [v247 ac];
                if (v248 >= 0xC) {
                  id v249 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v248));
                }
                else {
                  id v249 = off_1000CDD00[(int)v248];
                }
                v250 = v249;
                *(_DWORD *)buf = 136446722;
                v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
                v536 = 1024;
                v537 = 773;
                v538 = 2112;
                *(void *)v539 = v250;
                _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:%@ doesn't exist at this counterSample history",  buf,  0x1Cu);
              }

LABEL_284:
            }
          }

          id v214 = obja;
          __int128 v215 = [obja countByEnumeratingWithState:&v504 objects:v547 count:16];
        }

        while (v215);
      }

      id v206 = v502 + 1;
    }

    if (BYTE4(v461) & 1 | ((v446 & 0x100000000LL) == 0) | v463 & 1)
    {
      BOOL v265 = 0;
    }

    else
    {
      v360 = WALogCategoryDefaultHandle();
      id v361 = (os_log_s *)objc_claimAutoreleasedReturnValue(v360);
      if (os_log_type_enabled(v361, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 847;
        _os_log_impl( (void *)&_mh_execute_header,  v361,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS on BE has insufficient usage to determine recovery state",  buf,  0x12u);
      }

      BOOL v265 = 1;
    }

    if (!(v462 & 1 | ((v446 & 1) == 0) | BYTE4(v463) & 1))
    {
      int v362 = WALogCategoryDefaultHandle();
      id v363 = (os_log_s *)objc_claimAutoreleasedReturnValue(v362);
      if (os_log_type_enabled(v363, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 851;
        _os_log_impl( (void *)&_mh_execute_header,  v363,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS on BK has insufficient usage to determine recovery state",  buf,  0x12u);
      }

      BOOL v265 = 1;
    }

    if (!(BYTE4(v462) & 1 | ((v444 & 1) == 0) | v465 & 1))
    {
      v364 = WALogCategoryDefaultHandle();
      v365 = (os_log_s *)objc_claimAutoreleasedReturnValue(v364);
      if (os_log_type_enabled(v365, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 855;
        _os_log_impl( (void *)&_mh_execute_header,  v365,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS on VO has insufficient usage to determine recovery state",  buf,  0x12u);
      }

      BOOL v265 = 1;
    }

    id v366 = v442;
    if (v461 & 1 | ((v442 & 1) == 0) | BYTE4(v465) & 1)
    {
      id v367 = v442 & v461;
    }

    else
    {
      id v368 = WALogCategoryDefaultHandle();
      __int16 v369 = (os_log_s *)objc_claimAutoreleasedReturnValue(v368);
      if (os_log_type_enabled(v369, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 859;
        _os_log_impl( (void *)&_mh_execute_header,  v369,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS on VI has insufficient usage to determine recovery state",  buf,  0x12u);
      }

      id v367 = 0;
      BOOL v265 = 1;
      id v366 = v442;
    }

    v370 = v444 + v366 + v446 + HIDWORD(v446);
    id v140 = (v446 & v462) + (v444 & HIDWORD(v462)) + (HIDWORD(v446) & HIDWORD(v461)) + v367;
    unint64_t v121 = v370 == v140;
    if (v370 == v140)
    {
      v371 = WALogCategoryDefaultHandle();
      v372 = (os_log_s *)objc_claimAutoreleasedReturnValue(v371);
      if (os_log_type_enabled(v372, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 868;
        id v373 = "%{public}s::%d:DPS Full Recovery on all stalled ACs";
        goto LABEL_391;
      }

      goto LABEL_392;
    }

    if (v140)
    {
      id v374 = WALogCategoryDefaultHandle();
      v372 = (os_log_s *)objc_claimAutoreleasedReturnValue(v374);
      if (os_log_type_enabled(v372, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
        v536 = 1024;
        v537 = 872;
        id v373 = "%{public}s::%d:DPS Partially Recovered on stalled ACs";
LABEL_391:
        _os_log_impl((void *)&_mh_execute_header, v372, OS_LOG_TYPE_DEFAULT, v373, buf, 0x12u);
      }

LABEL_392:
      id v140 = v370 != v140;
    }

    __int128 v143 = 0LL;
    id v142 = 0LL;
    id v139 = v265 != 0;
    id v141 = v484 & 1;
  }

  if (v438)
  {
    id v375 = WALogCategoryDefaultHandle();
    v376 = (os_log_s *)objc_claimAutoreleasedReturnValue(v375);
    if (os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 888;
      v538 = 1024;
      *(_DWORD *)v539 = v425;
      *(_WORD *)&v539[4] = 1024;
      *(_DWORD *)&v539[6] = HIDWORD(v446);
      *(_WORD *)v540 = 1024;
      *(_DWORD *)&v540[2] = v446;
      *(_WORD *)&v540[6] = 1024;
      *(_DWORD *)&v540[8] = v444;
      *(_WORD *)&v540[12] = 1024;
      *(_DWORD *)&v540[14] = v442;
      _os_log_impl( (void *)&_mh_execute_header,  v376,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS reported on AC bitfeild %x and later on BE %d BK %d VO %d VI %d",  buf,  0x30u);
    }
  }

  double v377 = WALogCategoryDefaultHandle();
  double v378 = (os_log_s *)objc_claimAutoreleasedReturnValue(v377);
  if (os_log_type_enabled(v378, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448514;
    v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
    v536 = 1024;
    v537 = 892;
    v538 = 2048;
    *(void *)v539 = 6LL;
    *(_WORD *)&v539[8] = 2112;
    *(void *)v540 = v456;
    *(_WORD *)&v540[8] = 2112;
    *(void *)&v540[10] = v455;
    *(_WORD *)&v540[18] = 2112;
    *(void *)v541 = v454;
    *(_WORD *)&v541[8] = 1024;
    *(_DWORD *)v542 = v435;
    *(_WORD *)&v542[4] = 1024;
    *(_DWORD *)&v542[6] = v434;
    v543 = 1024;
    v544 = v433;
    v545 = 1024;
    v546 = v432;
    _os_log_impl( (void *)&_mh_execute_header,  v378,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:DPS %llu second medianCCA %@, medianRSSI %@ medianSNR %@: highCRS %d roamScan %d btActive %d channelChanges %d",  buf,  0x52u);
  }

  if (v455) {
    v379 = v456 == 0LL;
  }
  else {
    v379 = 1;
  }
  v380 = v379 || v454 == 0LL;
  id v381 = v380;
  if (v380) {
    v382 = 1;
  }
  else {
    v382 = v141;
  }
  id v383 = WALogCategoryDefaultHandle();
  id v384 = (os_log_s *)objc_claimAutoreleasedReturnValue(v383);
  if (os_log_type_enabled(v384, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446978;
    v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
    v536 = 1024;
    v537 = 917;
    v538 = 1024;
    *(_DWORD *)v539 = v437;
    *(_WORD *)&v539[4] = 1024;
    *(_DWORD *)&v539[6] = v436;
    _os_log_impl( (void *)&_mh_execute_header,  v384,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:didFirstProbeShowAllACGatewayBlocked %d didFirstProbeConfirmDPS %d",  buf,  0x1Eu);
  }

  double v385 = WALogCategoryDefaultHandle();
  double v386 = (os_log_s *)objc_claimAutoreleasedReturnValue(v385);
  if (os_log_type_enabled(v386, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136448258;
    v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
    v536 = 1024;
    v537 = 919;
    v538 = 1024;
    *(_DWORD *)v539 = v443;
    *(_WORD *)&v539[4] = 1024;
    *(_DWORD *)&v539[6] = v458 & 1;
    *(_WORD *)v540 = 1024;
    *(_DWORD *)&v540[2] = v441;
    *(_WORD *)&v540[6] = 1024;
    *(_DWORD *)&v540[8] = v440;
    *(_WORD *)&v540[12] = 1024;
    *(_DWORD *)&v540[14] = HIDWORD(v430);
    *(_WORD *)&v540[18] = 1024;
    *(_DWORD *)v541 = v430;
    *(_WORD *)&v541[4] = 1024;
    *(_DWORD *)&v541[6] = HIDWORD(v431);
    _os_log_impl( (void *)&_mh_execute_header,  v386,  OS_LOG_TYPE_ERROR,  "%{public}s::%d:isDPSReset %d userToggled %d isFastDPSReset %d userDisconnected %d issDSPWDSpent %d isfDSPWDSpent % d involuntaryToggled %d",  buf,  0x3Cu);
  }

  if ((v449 & ~v382) == 0)
  {
    id v391 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Incomplete DPS Report"));
    id v392 = (void *)v527[5];
    v527[5] = v391;

    uint64_t v393 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"missingDSPNotification %d, missingProbe %d missingEnoughCounters %d missingAllCounters %d missingPhyStates %d invalidCounterReading %d",  v429,  v428,  v143,  v142,  v381,  v141));
    v394 = (void *)v521[5];
    v521[5] = v393;

    v532 = NSLocalizedFailureReasonErrorKey;
    v533 = @"WAErrorCodeIncompleteSampleData";
    double v389 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v533,  &v532,  1LL));
    uint64_t v395 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.wifi.analytics.errordomain",  9019LL,  v389));
    goto LABEL_478;
  }

  id v387 = @"All Probe Success";
  if (v436) {
    id v387 = @"Confirmed";
  }
  if (v437) {
    id v388 = @"Confirmed All AC";
  }
  else {
    id v388 = v387;
  }
  double v389 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v388));
  if (!(v458 & 1 | ((v443 & 1) == 0)))
  {
    id v396 = @"sDPS";
    goto LABEL_439;
  }

  if (!(v458 & 1 | !v441))
  {
    id v396 = @"fDPS";
    goto LABEL_439;
  }

  if (!(v440 & 1 | ((v458 & 1) == 0)))
  {
    if (v443) {
      id v396 = @"UserToggled + sDPS";
    }
    else {
      id v396 = @"UserToggled + fDPS";
    }
    if (((v443 | v441) & 1) == 0)
    {
      if ((v430 | HIDWORD(v430) ^ 1) == 1)
      {
        if ((HIDWORD(v430) | v430 ^ 1) == 1)
        {
          if (v430) {
            id v396 = @"UserToggled + No WD Budget";
          }
          else {
            id v396 = @"UserToggled";
          }
        }

        else
        {
          id v396 = @"UserToggled + fDPSNoBudget";
        }
      }

      else
      {
        id v396 = @"UserToggled + sDPSNoBudget";
      }
    }

LABEL_439:
    id v397 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v396));
    if (v440) {
      goto LABEL_440;
    }
    goto LABEL_461;
  }

  if (!v440)
  {
    if (HIDWORD(v431))
    {
      id v397 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Involuntary"));
      goto LABEL_462;
    }

    id v399 = @"No Action";
    if ((_DWORD)v430) {
      id v399 = @"fDPSNoBudget";
    }
    id v400 = @"No WD Budget";
    if (!(_DWORD)v430) {
      id v400 = @"sDPSNoBudget";
    }
    if (HIDWORD(v430)) {
      v401 = v400;
    }
    else {
      v401 = v399;
    }
    id v397 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v401));
LABEL_461:
    if (((v443 | v441 | v458 | HIDWORD(v431)) & 1) == 0)
    {
      if (v140) {
        v403 = @"Unstuck";
      }
      else {
        v403 = @"Unsure";
      }
LABEL_470:
      id v398 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v403));
      goto LABEL_471;
    }

LABEL_462:
    v402 = @"Still Stuck";
    if (v139) {
      v402 = @"Unsure";
    }
    if ((v424 || v448) | v121 | v140) {
      v403 = @"Unstuck";
    }
    else {
      v403 = v402;
    }
    goto LABEL_470;
  }

  if (v443) {
    id v390 = @"UserDisconnect + sDPS";
  }
  else {
    id v390 = @"UserDisconnect + fDPS";
  }
  if (((v443 | v441) & 1) == 0)
  {
    if ((v430 | HIDWORD(v430) ^ 1) == 1)
    {
      if ((HIDWORD(v430) | v430 ^ 1) == 1)
      {
        if (v430) {
          id v390 = @"UserDisconnect + No WD Budget";
        }
        else {
          id v390 = @"UserDisconnect";
        }
      }

      else
      {
        id v390 = @"UserDisconnect + fDPSNoBudget";
      }
    }

    else
    {
      id v390 = @"UserDisconnect + sDPSNoBudget";
    }
  }

  id v397 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v390));
LABEL_440:
  id v398 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Disconnected"));
LABEL_471:
  v404 = (void *)v398;
  if (((HIDWORD(v426) | v427 | HIDWORD(v427) | v426) & 1) != 0) {
    id v405 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ -  %@ - %@: change bssid %d channel %d network %d link %d",  v389,  v397,  v398,  HIDWORD(v426),  v427,  HIDWORD(v427),  v426));
  }
  else {
    id v405 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ - %@ - %@",  v389,  v397,  v398));
  }
  id v406 = (void *)v527[5];
  v527[5] = v405;

  if ((_DWORD)v431) {
    double v407 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"medianCCA %@, medianRSSI %@ medianSNR %@ highCRS %d roamScan %d btActive %d channelChanges %d screenState %@",  v456,  v455,  v454,  v435,  v434,  v433,  v432,  v447));
  }
  else {
    double v407 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"medianCCA %@, medianRSSI %@ medianSNR %@ highCRS %d roamScan %d btActive %d channelChanges %d screenState %@ quickDpsSuppressedReason %@",  v456,  v455,  v454,  v435,  v434,  v433,  v432,  v447,  v445));
  }
  double v408 = (void *)v521[5];
  v521[5] = v407;

  uint64_t v395 = 0LL;
LABEL_478:

  v409 = (void *)objc_claimAutoreleasedReturnValue( [(id)v527[5] stringByReplacingOccurrencesOfString:@"%" withString:&stru_1000CF610]);
  id v410 = (void *)objc_claimAutoreleasedReturnValue( [(id)v521[5] stringByReplacingOccurrencesOfString:@"%" withString:&stru_1000CF610]);
  id v411 = (void *)objc_claimAutoreleasedReturnValue( -[SDRDiagnosticReporter signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:]( self->_ABCReporter,  "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:",  @"WiFi",  @"WiFi DatapathStall",  v409,  v410,  @"wifianalyticsd",  0LL));
  v412 = objc_alloc(&OBJC_CLASS___NSArray);
  double v413 = (void *)objc_claimAutoreleasedReturnValue([v474 dictionaryRepresentation]);
  double v414 = -[NSArray initWithObjects:](v412, "initWithObjects:", v413, 0LL);

  ABCReporter = self->_ABCReporter;
  v503[0] = _NSConcreteStackBlock;
  v503[1] = 3221225472LL;
  v503[2] = sub_100083D7C;
  v503[3] = &unk_1000CDCC8;
  v503[4] = &v526;
  v503[5] = &v520;
  -[SDRDiagnosticReporter snapshotWithSignature:duration:events:payload:actions:reply:]( ABCReporter,  "snapshotWithSignature:duration:events:payload:actions:reply:",  v411,  v414,  0LL,  0LL,  v503,  10.0);

LABEL_479:
  _Block_object_dispose(&v520, 8);

  _Block_object_dispose(&v526, 8);
  objc_autoreleasePoolPop(context);
  if (v452)
  {
    id v416 = WALogCategoryDefaultHandle();
    double v417 = (os_log_s *)objc_claimAutoreleasedReturnValue(v416);
    if (os_log_type_enabled(v417, OS_LOG_TYPE_DEFAULT))
    {
      v418 = (void *)objc_claimAutoreleasedReturnValue([v450 key]);
      *(_DWORD *)buf = 136446722;
      v535 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]";
      v536 = 1024;
      v537 = 1034;
      v538 = 2112;
      *(void *)v539 = v418;
      _os_log_impl( (void *)&_mh_execute_header,  v417,  OS_LOG_TYPE_DEFAULT,  "%{public}s::%d:Submit complete: %@",  buf,  0x1Cu);
    }
  }

  id v419 = v395;

  return v419;
}

void sub_100083C88(_Unwind_Exception *a1)
{
}

void sub_100083D7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = WALogCategoryDefaultHandle();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v8 = 136447234;
    __int16 v9 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = 1030;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s::%d:[WiFi DatapathStall - %@ %@] ABC snapshot response = %@",  (uint8_t *)&v8,  0x30u);
  }
}

Class sub_100083ED0(uint64_t a1)
{
  int v5 = 0LL;
  id v2 = (const char *)&off_1000ED000;
  if (!qword_1000ED068)
  {
    __int128 v6 = off_1000CDCE8;
    uint64_t v7 = 0LL;
    qword_1000ED068 = _sl_dlopen(&v6, &v5);
    id v3 = v5;
    if (!qword_1000ED068)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }

    if (v5) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    id v2 = "SDRDiagnosticReporter";
    Class result = objc_getClass("SDRDiagnosticReporter");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    id v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }

  qword_1000ED060 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10008646C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = -[WiFiStallDetect initWithMLModel:](objc_alloc(&OBJC_CLASS___WiFiStallDetect), "initWithMLModel:", v4);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100086704(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  if (v14)
  {
    id v5 = a3;
    __int128 v6 = objc_alloc(&OBJC_CLASS___WiFiStallDetectOutput);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v14 featureValueForName:@"stall"]);
    id v8 = [v7 int64Value];
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v14 featureValueForName:@"stallProbability"]);
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dictionaryValue]);
    int v11 = -[WiFiStallDetectOutput initWithStall:stallProbability:](v6, "initWithStall:stallProbability:", v8, v10);

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void (**)(uint64_t, void, WiFiStallDetectOutput *))(v12 + 16);
    int v11 = a3;
    v13(v12, 0LL, v11);
  }
}

void sub_1000868D4(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  if (v14)
  {
    id v5 = a3;
    __int128 v6 = objc_alloc(&OBJC_CLASS___WiFiStallDetectOutput);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v14 featureValueForName:@"stall"]);
    id v8 = [v7 int64Value];
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v14 featureValueForName:@"stallProbability"]);
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dictionaryValue]);
    int v11 = -[WiFiStallDetectOutput initWithStall:stallProbability:](v6, "initWithStall:stallProbability:", v8, v10);

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void (**)(uint64_t, void, WiFiStallDetectOutput *))(v12 + 16);
    int v11 = a3;
    v13(v12, 0LL, v11);
  }
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend__convertWiFiStatsIntoPercentile_analysisGroup_groupTarget_forProcessToken_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:forProcessToken:andReply:");
}

id objc_msgSend__getNewMessageForKey_groupType_forProcessToken_shouldCheckForPrePopulation_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:");
}

id objc_msgSend__getNewMessageForKey_groupType_withCopy_forProcessToken_shouldCheckForPrePopulation_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_getNewMessageForKey:groupType:withCopy:forProcessToken:shouldCheckForPrePopulation:andReply:");
}

id objc_msgSend__triggerDatapathDiagnosticsAndCollectUpdates_forProcessToken_waMessage_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_triggerDatapathDiagnosticsAndCollectUpdates:forProcessToken:waMessage:andReply:");
}

id objc_msgSend_addDeltaNSNumberForTelemetryKey_dictKey_dictModule_telDict_recentDict_oldDict_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDeltaNSNumberForTelemetryKey:dictKey:dictModule:telDict:recentDict:oldDict:");
}

id objc_msgSend_checkParameterThresholds_currentSample_qDpsStat_chipNumber_dpsSnapshot_originalCCA_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkParameterThresholds:currentSample:qDpsStat:chipNumber:dpsSnapshot:originalCCA:");
}

id objc_msgSend_createChannelWithProviderID_providerName_legCh_groupName_subgroupName_chinfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createChannelWithProviderID:providerName:legCh:groupName:subgroupName:chinfo:");
}

id objc_msgSend_initWithAC_problem_bitfield_TxBE_expiredCompletions_TxBE_failedCompletions_TxBE_noAckCompletions_TxBE_otherErrCompletions_TxBK_expiredCompletions_TxBK_failedCompletions_TxBK_noAckCompletions_TxBK_otherErrCompletions_TxVI_expiredCompletions_TxVI_failedCompletions_TxVI_noAckCompletions_TxVI_otherErrCompletions_TxVO_expiredCompletions_TxVO_failedCompletions_TxVO_noAckCompletions_TxVO_otherErrCompletions_bt_abort_bt_grant_bt_request_bt_uch_latency_cca_bin_completions_chipmodeerror_completions_expired_completions_internalerror_completions_ioerror_completions_noack_completions_nobuf_completions_noremotepeer_completions_noresources_completions_txfailure_roam_count_roam_duration_rssi_bin_snr_bin_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAC_problem_bitfield:TxBE_expiredCompletions:TxBE_failedCompletions:TxBE_noAckCompletions:TxBE_otherEr rCompletions:TxBK_expiredCompletions:TxBK_failedCompletions:TxBK_noAckCompletions:TxBK_otherErrCompletions:Tx VI_expiredCompletions:TxVI_failedCompletions:TxVI_noAckCompletions:TxVI_otherErrCompletions:TxVO_expiredCompl etions:TxVO_failedCompletions:TxVO_noAckCompletions:TxVO_otherErrCompletions:bt_abort:bt_grant:bt_request:bt_ uch_latency:cca_bin:completions_chipmodeerror:completions_expired:completions_internalerror:completions_ioerr or:completions_noack:completions_nobuf:completions_noremotepeer:completions_noresources:completions_txfailure :roam_count:roam_duration:rssi_bin:snr_bin:");
}

id objc_msgSend_recommendReset_currentSample_acList_qDpsStat_chipNumber_dpsSnapshot_originalCCA_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnapshot:originalCCA:");
}

id objc_msgSend_recommendSymptomsDpsRecovery_symptomsDnsStats_awdlState_currentSymptomsCondition_isLANPingSuccessful_appUsage_averageCCA_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}