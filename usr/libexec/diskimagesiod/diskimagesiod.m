uint64_t sub_100004700(uint64_t a1, io_connect_t a2, uint32_t a3)
{
  uint64_t v6;
  kern_return_t v7;
  kern_return_t inserted;
  unsigned int v10;
  const char *v11;
  void *exception;
  const std::error_category *v13;
  v6 = sub_1000047F4(a1);
  *(void *)v6 = off_100165488;
  v7 = IOConnectSetNotificationPort(a2, a3, *(_DWORD *)(v6 + 8), 0LL);
  if (v7)
  {
    v10 = v7;
    v11 = "Can't register notification port";
    goto LABEL_6;
  }

  inserted = mach_port_insert_right(mach_task_self_, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8), 0x14u);
  if (inserted)
  {
    v10 = inserted;
    v11 = "Can't get send rights";
LABEL_6:
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_100189E78;
    v13 = std::generic_category();
    exception[1] = v10;
    exception[2] = v13;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = v11;
  }

  return a1;
}

void sub_1000047E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000047F4(uint64_t a1)
{
  kern_return_t v2;
  unsigned int v4;
  void *exception;
  void *v6;
  *(void *)a1 = &off_1001654D0;
  *(_DWORD *)(a1 + 8) = 0;
  v2 = mach_port_allocate(mach_task_self_, 1u, (mach_port_name_t *)(a1 + 8));
  if (v2)
  {
    v4 = v2;
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Can't allocate mach port", v4);
  }

  return a1;
}

uint64_t sub_100004870(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_100189E78;
  v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  return a1;
}

uint64_t sub_1000048C8(uint64_t a1)
{
  *(void *)a1 = &off_1001654D0;
  mach_port_name_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    mach_port_mod_refs(mach_task_self_, v2, 1u, -1);
  }
  return a1;
}

void sub_10000491C(void *a1)
{
}

uint64_t *sub_10000492C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32LL))(v2);
  }
  return a1;
}

void sub_100004968(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100005194(a1);
  operator delete(v1);
}

void sub_100004980(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000048C8(a1);
  operator delete(v1);
}

void sub_100004994(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_100189E78;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

uint64_t sub_1000049D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100004A74(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100004AC0();
  }
  v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000LL;
    *a2 = v9;
    a2 = v9;
  }

  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }

  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t sub_100004A74(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }

  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }

  else
  {
    return 0LL;
  }
}

void sub_100004AC0()
{
}

void sub_100004AD4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100004B24(exception, a1);
}

void sub_100004B10(_Unwind_Exception *a1)
{
}

std::logic_error *sub_100004B24(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100004B48(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 64;
  __int128 v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  sub_100004BA0(a1);
}

void sub_100004BA0(uint64_t a1)
{
  *(void *)(a1 + 88) = 0LL;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }

      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }

void *sub_100004CB0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100004AC0();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_100004D60(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v4;
  size_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0LL;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100004E24(_Unwind_Exception *a1)
{
}

void *sub_100004E4C(void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      unint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100004FB0(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100004F54( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_100004F9C(_Unwind_Exception *a1)
{
}

uint64_t sub_100004FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      sub_1000050EC(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_1000050D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000050EC(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100004AC0();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_100005194(uint64_t a1)
{
  *(void *)a1 = off_100165488;
  mach_port_name_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    mach_port_deallocate(mach_task_self_, v2);
  }
  return sub_1000048C8(a1);
}

void sub_1000052D4(id a1)
{
  int v1 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v9 = 0LL;
    uint64_t v2 = sub_1000B85DC();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v11 = 51;
    __int16 v12 = 2080;
    v13 = "-[DIIOCacheDelete setupSigtermHandler]_block_invoke";
    LODWORD(vstd::ostream::~ostream(v2, v3 + 8) = 18;
    size_t v5 = (char *)_os_log_send_and_compose_impl( v4,  &v9,  0LL,  0LL,  &_mh_execute_header,  v3,  16LL,  "%.*s: Terminating cache delete instance due to SIGTERM",  (int)buf,  v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }

  else
  {
    uint64_t v6 = sub_1000B85DC();
    size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v11 = 51;
      __int16 v12 = 2080;
      v13 = "-[DIIOCacheDelete setupSigtermHandler]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%.*s: Terminating cache delete instance due to SIGTERM",  buf,  0x12u);
    }
  }

  *__error() = v1;
  exit(0);
}

void sub_10000556C(_Unwind_Exception *a1)
{
}

void sub_100005588(uint64_t a1, void *a2)
{
  id v13 = a2;
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_sync_enter(v3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exitTimer]);

  if (v4)
  {
    int v5 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v14 = 0LL;
      uint64_t v6 = sub_1000B85DC();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v8 = 3LL;
      }
      else {
        uint64_t v8 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v16 = 47;
      __int16 v17 = 2080;
      char v18 = "-[DIIOCacheDelete setupExitTimer:]_block_invoke";
      LODWORD(v12) = 18;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl( v8,  &v14,  0LL,  0LL,  &_mh_execute_header,  v7,  0LL,  "%.*s: Shutting down cache delete instance",  (int)buf,  v12);

      if (v9)
      {
        fprintf(__stderrp, "%s\n", v9);
        free(v9);
      }
    }

    else
    {
      uint64_t v10 = sub_1000B85DC();
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        int v16 = 47;
        __int16 v17 = 2080;
        char v18 = "-[DIIOCacheDelete setupExitTimer:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%.*s: Shutting down cache delete instance",  buf,  0x12u);
      }
    }

    *__error() = v5;
    exit(0);
  }

  objc_sync_exit(v3);
}

void sub_10000576C(_Unwind_Exception *exception_object)
{
}

LABEL_31:
          }

          *__error() = v29;
LABEL_33:
        }

        uint64_t v10 = (char *)v10 + 1;
      }

      while (v7 != v10);
      v54 = [obj countByEnumeratingWithState:&v90 objects:v103 count:16];
      size_t v7 = v54;
      if (!v54)
      {
LABEL_68:

        v60 = *__error();
        if (sub_1000B8654())
        {
          v94 = 0LL;
          v61 = sub_1000B85DC();
          v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
          v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
          *(_DWORD *)buf = 68158978;
          v96 = 37;
          if (v63) {
            v64 = 3LL;
          }
          else {
            v64 = 2LL;
          }
          v97 = 2080;
          v65 = v78;
          v98 = "-[DIIOCacheDelete eraseOldCacheFiles]";
          v99 = 1024;
          *(_DWORD *)v100 = HIDWORD(v77);
          *(_WORD *)&v100[4] = 2048;
          *(void *)&v100[6] = v78 >> 20;
          *(_WORD *)&v100[14] = 1024;
          *(_DWORD *)&v100[16] = v80;
          v101 = 2048;
          v102 = v79 >> 20;
          LODWORD(v73) = 50;
          v66 = (char *)_os_log_send_and_compose_impl( v64,  &v94,  0LL,  0LL,  &_mh_execute_header,  v62,  0LL,  "%.*s: Summary: removed %u files (%llu MB) out of %u files (%llu MB) of cache",  (int)buf,  v73,  v74,  v75,  (_DWORD)v76,  v77);

          if (v66)
          {
            fprintf(__stderrp, "%s\n", v66);
            free(v66);
          }
        }

        else
        {
          v67 = sub_1000B85DC();
          v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
          v65 = v78;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68158978;
            v96 = 37;
            v97 = 2080;
            v98 = "-[DIIOCacheDelete eraseOldCacheFiles]";
            v99 = 1024;
            *(_DWORD *)v100 = HIDWORD(v77);
            *(_WORD *)&v100[4] = 2048;
            *(void *)&v100[6] = v78 >> 20;
            *(_WORD *)&v100[14] = 1024;
            *(_DWORD *)&v100[16] = v80;
            v101 = 2048;
            v102 = v79 >> 20;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "%.*s: Summary: removed %u files (%llu MB) out of %u files (%llu MB) of cache",  buf,  0x32u);
          }
        }

        *__error() = v60;

        return v65;
      }
    }
  }

  v55 = *__error();
  if (sub_1000B8654())
  {
    v94 = 0LL;
    v56 = sub_1000B85DC();
    v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
      v58 = 3LL;
    }
    else {
      v58 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    v96 = 37;
    v97 = 2080;
    v98 = "-[DIIOCacheDelete eraseOldCacheFiles]";
    LODWORD(v72) = 18;
    v59 = (char *)_os_log_send_and_compose_impl( v58,  &v94,  0LL,  0LL,  &_mh_execute_header,  v57,  16LL,  "%.*s: Could not determine cache dir",  (int)buf,  v72);

    if (v59)
    {
      fprintf(__stderrp, "%s\n", v59);
      free(v59);
    }
  }

  else
  {
    v69 = sub_1000B85DC();
    v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      v96 = 37;
      v97 = 2080;
      v98 = "-[DIIOCacheDelete eraseOldCacheFiles]";
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "%.*s: Could not determine cache dir",  buf,  0x12u);
    }
  }

  v65 = 0LL;
  *__error() = v55;
  return v65;
}

  sub_1000506D8((uint64_t)v362, (uint64_t)&v314);
  v255 = a8;
  sub_10005080C((uint64_t)v362, (uint64_t)v313);
  v254 = 0LL;
  v248 = a5 + 1;
  v250 = v12;
  v251 = a5;
  while (1)
  {
    if (!sub_1000E47F0((uint64_t)&v314, (uint64_t)v313))
    {
      v123 = 2;
LABEL_267:
      v184 = v255;
      goto LABEL_268;
    }

    v41 = v315;
    v42 = v316;
    v43 = v317;
    v44 = v342;
    v45 = v12[5];
    v46 = v342 / v45;
    if ((v317 & 2) != 0) {
      v47 = v315;
    }
    else {
      v47 = v315 + 1;
    }
    v310 = v342 / v45;
    v311 = v47;
    v312 = 2;
    v48 = v47 >= v46;
    v49 = v47 - v46;
    if (v49 == 0 || !v48) {
      v49 = qword_1001985E0;
    }
    if (v49) {
      break;
    }
LABEL_150:
    v115 = (v43 & 1) + v42 - v41 + (int)(((v43 >> 1) & 1) - 1);
    v116 = v45 * v115 - v17;
    if (v331 - v44 < v116) {
      v116 = v331 - v44;
    }
    if ((void)v325 - (void)v337 < v116)
    {
      v123 = 4;
      goto LABEL_267;
    }

    *(void *)&v346 = v45 * v47;
    *((void *)&v346 + 1) = v45 * (v115 + v47);
    v347[0] = 2;
    sub_10002C8E0((uint64_t)&v333, (uint64_t)&v346, (uint64_t)&v320, (uint64_t)&__p);
    v344 = -78LL;
    v117 = a2;
    if (((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) - 1 != v251 || *(_BYTE *)(a2 + 56) == 0 || a7)
    {
LABEL_157:
      v120 = sub_1000127FC(*(void *)(*(void *)(v117 + 16) + 16 * v251));
      v122 = v121;
      v344 = v120;
      v345 = v121;
      goto LABEL_158;
    }

    (*(void (**)(__int128 *__return_ptr))(**(void **)(v12[2] + 48 * v251 + 24) + 72LL))(&v346);
    if ((void)v346)
    {
      v118 = v346 + ((v287 - v283) & ~((uint64_t)(v287 - v283) >> 63)) - 1;
      v119 = 1
           - (v346
            + ((v287 - v283) & ~((uint64_t)(v287 - v283) >> 63)))
           + v118 / (unint64_t)v346 * v346
           + *((void *)&v346 + 1) * v346
           + v118;
      v117 = a2;
      if (v285 - v281 < v119) {
        goto LABEL_157;
      }
    }

    else
    {
      v117 = a2;
      if ((a6 & 1) == 0) {
        goto LABEL_157;
      }
    }

    v182 = sub_1000127FC(*(void *)(*(void *)(*(void *)(v117 + 16) + 16 * v251) + 16LL));
    v120 = v182;
    v122 = v183;
    v344 = v182;
    v345 = v183;
    a7 = v183 < v283 || v182 > ((*v247 - *v249) & ~((uint64_t)(*v247 - *v249) >> 63));
LABEL_158:
    if (v120 < 0 && (_DWORD)v120)
    {
      v123 = 1;
    }

    else
    {
      v124 = v283;
      v125 = v287;
      if ((a6 & 1) != 0)
      {
        if (a7)
        {
          v126 = *v247 - *v249;
          if (v126 <= v120) {
            v126 = v120;
          }
          v267 = v333;
          if (*((void *)&v333 + 1))
          {
            v127 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
            do
              v128 = __ldxr(v127);
            while (__stxr(v128 + 1, v127));
          }

          v268[0] = v334[0];
          *(_OWORD *)((char *)v268 + 9) = *(_OWORD *)((char *)v334 + 9);
          v269 = v335;
          v270 = v336;
          v271 = v337;
          v272 = v338;
          v273 = v339;
          v274 = v340;
          if (*((void *)&v340 + 1))
          {
            v129 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }

          v275 = v341;
          v276 = v342;
          v277 = v343;
          sub_10005D610( (uint64_t *)&v267,  (uint64_t)&v320,  v126 & ~(v126 >> 63),  v122,  0xFFFFFFFFFFFFFFFFLL,  (uint64_t)&v346);
          sub_10004D6EC(v255);
          sub_10002D79C(v255, (uint64_t)&v346);
          *(_BYTE *)(v255 + 52std::ostream::~ostream(v2, v3 + 8) = 1;
          v131 = v361;
          if (v361)
          {
            v132 = (unint64_t *)&v361->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }

          v134 = v360;
          if (v360)
          {
            v135 = (unint64_t *)&v360->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }

          v137 = v359;
          if (v359)
          {
            v138 = (unint64_t *)&v359->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }

          v140 = v358;
          if (v358)
          {
            v141 = (unint64_t *)&v358->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }

          v143 = v357;
          if (v357)
          {
            v144 = (unint64_t *)&v357->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }

          v146 = (std::__shared_weak_count *)v350;
          if ((void)v350)
          {
            v147 = (unint64_t *)(v350 + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }

          v149 = (std::__shared_weak_count *)*((void *)&v274 + 1);
          if (*((void *)&v274 + 1))
          {
            v150 = (unint64_t *)(*((void *)&v274 + 1) + 8LL);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }

          v152 = (std::__shared_weak_count *)*((void *)&v267 + 1);
          if (*((void *)&v267 + 1))
          {
            v153 = (unint64_t *)(*((void *)&v267 + 1) + 8LL);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }

          sub_10002B7D4(v255, (uint64_t)&v346);
          sub_100035F24((uint64_t)&v333, (uint64_t)&v346);
          v155 = (std::__shared_weak_count *)*((void *)&v353 + 1);
          if (*((void *)&v353 + 1))
          {
            v156 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }

          v158 = (std::__shared_weak_count *)*((void *)&v346 + 1);
          if (*((void *)&v346 + 1))
          {
            v159 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }

          sub_10002B3A4(v255, (uint64_t)&v346);
          sub_100035F24((uint64_t)&v320, (uint64_t)&v346);
          v161 = (std::__shared_weak_count *)*((void *)&v353 + 1);
          if (*((void *)&v353 + 1))
          {
            v162 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }

          v164 = (std::__shared_weak_count *)*((void *)&v346 + 1);
          if (*((void *)&v346 + 1))
          {
            v165 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }

          a7 = 1;
          v167 = v344;
        }

        else
        {
          a7 = 0;
          v167 = v120;
        }

        v252 = v122;
      }

      else if (v122 == v342)
      {
        v167 = v120;
      }

      else
      {
        v167 = sub_100118F5C((uint64_t)&v333, (uint64_t)&v320, v12[5] * v115, &v344);
        v344 = v167;
        v345 = v168;
        a7 = v167 != v12[5] * v115;
      }

      v169 = v125;
      sub_10002C354((uint64_t)&v333, v167);
      __int16 v17 = 0LL;
      a6 = 0;
      v254 += v344;
      v123 = 4 * (v122 + v120 < ((v169 - v124) & ~((uint64_t)(v169 - v124) >> 63)) + v124);
    }

    v170 = v286;
    if (v286)
    {
      v171 = (unint64_t *)&v286->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }

    v173 = v284;
    if (v284)
    {
      v174 = (unint64_t *)&v284->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }

    v176 = v282;
    if (v282)
    {
      v177 = (unint64_t *)&v282->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }

    v179 = v279;
    if (v279)
    {
      v180 = (unint64_t *)&v279->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }

    if (v123) {
      goto LABEL_267;
    }
    sub_1000E4A20(&v314);
  }

  v50 = sub_100059B50((uint64_t)v12, a2, (uint64_t)&v333, (uint64_t)&v320, v248, (uint64_t *)&v310, a6 & 1, a7, v255, v362);
  v344 = v50;
  v345 = v51;
  if ((v50 & 0x8000000000000000LL) != 0 && (_DWORD)v50)
  {
    v123 = 1;
    goto LABEL_267;
  }

  v52 = v252;
  if (v51 < v44) {
    v52 = v51;
  }
  v252 = v52;
  v53 = v342;
  if (v51 >= v342)
  {
    v54 = v51 + v50 > v12[5] * (v47 - 1);
    v55 = v255;
    if (v50 <= ((*v247 - *v249) & ~((uint64_t)(*v247 - *v249) >> 63)))
    {
      a7 = 0;
      goto LABEL_114;
    }
  }

  else
  {
    v54 = v51 + v50 > v12[5] * (v47 - 1);
    v55 = v255;
  }

  v299 = v333;
  if (*((void *)&v333 + 1))
  {
    v56 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }

  v300[0] = v334[0];
  *(_OWORD *)((char *)v300 + 9) = *(_OWORD *)((char *)v334 + 9);
  v302 = v336;
  v303 = v337;
  v304 = v338;
  v305 = v339;
  v301 = v335;
  v306 = v340;
  if (*((void *)&v340 + 1))
  {
    v58 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }

  v307 = v341;
  v308 = v342;
  v309 = v343;
  sub_10005D610((uint64_t *)&v299, (uint64_t)&v320, v50, v345, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v346);
  sub_10004D6EC(v55);
  sub_10002D79C(v55, (uint64_t)&v346);
  *(_BYTE *)(v55 + 52std::ostream::~ostream(v2, v3 + 8) = 1;
  v60 = v361;
  if (v361)
  {
    v61 = (unint64_t *)&v361->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }

  v63 = v360;
  if (v360)
  {
    v64 = (unint64_t *)&v360->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  v66 = v359;
  if (v359)
  {
    v67 = (unint64_t *)&v359->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  v69 = v358;
  if (v358)
  {
    v70 = (unint64_t *)&v358->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  v72 = v357;
  if (v357)
  {
    v73 = (unint64_t *)&v357->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

  v75 = (std::__shared_weak_count *)v350;
  if ((void)v350)
  {
    v76 = (unint64_t *)(v350 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }

  v78 = (std::__shared_weak_count *)*((void *)&v306 + 1);
  if (*((void *)&v306 + 1))
  {
    v79 = (unint64_t *)(*((void *)&v306 + 1) + 8LL);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

  v81 = (std::__shared_weak_count *)*((void *)&v299 + 1);
  if (*((void *)&v299 + 1))
  {
    v82 = (unint64_t *)(*((void *)&v299 + 1) + 8LL);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }

  sub_10002B7D4(v55, (uint64_t)&v346);
  sub_100035F24((uint64_t)&v333, (uint64_t)&v346);
  v84 = (std::__shared_weak_count *)*((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    v85 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

  v87 = (std::__shared_weak_count *)*((void *)&v346 + 1);
  if (*((void *)&v346 + 1))
  {
    v88 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }

  sub_10002B3A4(v55, (uint64_t)&v346);
  sub_100035F24((uint64_t)&v320, (uint64_t)&v346);
  v90 = (std::__shared_weak_count *)*((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    v91 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }

  v93 = (std::__shared_weak_count *)*((void *)&v346 + 1);
  if (*((void *)&v346 + 1))
  {
    v94 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }

  a7 = 1;
  v53 = v342;
LABEL_114:
  v288 = v333;
  if (*((void *)&v333 + 1))
  {
    v96 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }

  *(_OWORD *)v289 = v334[0];
  *(_OWORD *)&v289[9] = *(_OWORD *)((char *)v334 + 9);
  v291 = v336;
  v292 = v337;
  v293 = v338;
  v294 = v339;
  v290 = v335;
  v295 = v340;
  if (*((void *)&v340 + 1))
  {
    v98 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }

  v296 = v341;
  v297 = v342;
  v298 = v343;
  if (a7) {
    v100 = 0LL;
  }
  else {
    v100 = (v311 - v310 + (v312 & 1) + ((v312 >> 1) & 1) - 1) * v250[5];
  }
  v101 = v100 - v345 + *(void *)&v289[8];
  if (v344 < v101) {
    v101 = v344;
  }
  if (v100) {
    v102 = v101;
  }
  else {
    v102 = v344;
  }
  sub_10002C354((uint64_t)&v288, v102);
  sub_10002B060(&v291);
  v346 = v288;
  v288 = 0uLL;
  *(_OWORD *)v347 = *(_OWORD *)v289;
  *(_OWORD *)&v347[9] = *(_OWORD *)&v289[9];
  v348 = v290;
  v349 = v291;
  v350 = v292;
  v351 = v293;
  v352 = v294;
  v353 = v295;
  v295 = 0uLL;
  v354 = v296;
  v356 = v298;
  v355 = v297;
  sub_100035F24((uint64_t)&v333, (uint64_t)&v346);
  v103 = (std::__shared_weak_count *)*((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    v104 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }

  v106 = (std::__shared_weak_count *)*((void *)&v346 + 1);
  if (*((void *)&v346 + 1))
  {
    v107 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }

  v109 = (std::__shared_weak_count *)*((void *)&v295 + 1);
  if (*((void *)&v295 + 1))
  {
    v110 = (unint64_t *)(*((void *)&v295 + 1) + 8LL);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }

  v112 = (std::__shared_weak_count *)*((void *)&v288 + 1);
  if (*((void *)&v288 + 1))
  {
    v113 = (unint64_t *)(*((void *)&v288 + 1) + 8LL);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  v44 = v342;
  v254 += v342 - v53;
  if (v54)
  {
    __int16 v17 = 0LL;
    a6 = 0;
    __int16 v12 = v250;
    v45 = v250[5];
    goto LABEL_150;
  }

  a6 = 0;
  v123 = 4;
  v184 = v255;
  __int16 v12 = v250;
LABEL_268:
  v185 = v313[0];
  v313[0] = 0LL;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 24LL))(v185);
  }
  v186 = v314;
  v314 = 0LL;
  if (v186) {
    (*(void (**)(uint64_t))(*(void *)v186 + 24LL))(v186);
  }
  if (v123 != 2)
  {
    if (v123 != 4) {
      goto LABEL_350;
    }
LABEL_349:
    v344 = v254;
    v345 = v252;
    goto LABEL_350;
  }

  if (!sub_10005D768((uint64_t)v362))
  {
    sub_1000E4B80((uint64_t)v362, (uint64_t)&v346);
  }

  v187 = sub_100059D30((uint64_t)v12, a2, (uint64_t)&v333, (uint64_t)&v320, v248, a6 & 1, a7, v184, v362);
  v188 = v187;
  v190 = v189;
  v344 = v187;
  v345 = v189;
  if ((v187 & 0x8000000000000000LL) == 0 || !(_DWORD)v187)
  {
    if ((a6 & 1) != 0)
    {
      v256 = v333;
      if (*((void *)&v333 + 1))
      {
        v191 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
      }

      v257[0] = v334[0];
      *(_OWORD *)((char *)v257 + 9) = *(_OWORD *)((char *)v334 + 9);
      v259 = v336;
      v260 = v337;
      v258 = v335;
      v261 = v338;
      v262 = v339;
      v263 = v340;
      if (*((void *)&v340 + 1))
      {
        v193 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
      }

      v264 = v341;
      v265 = v342;
      v266 = v343;
      sub_10005D610((uint64_t *)&v256, (uint64_t)&v320, v187, v345, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v346);
      sub_10004D6EC(v184);
      sub_10002D79C(v184, (uint64_t)&v346);
      *(_BYTE *)(v184 + 52std::ostream::~ostream(v2, v3 + 8) = 1;
      v195 = v361;
      if (v361)
      {
        v196 = (unint64_t *)&v361->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }

      v198 = v360;
      if (v360)
      {
        v199 = (unint64_t *)&v360->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v198);
        }
      }

      v201 = v359;
      if (v359)
      {
        v202 = (unint64_t *)&v359->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }

      v204 = v358;
      if (v358)
      {
        v205 = (unint64_t *)&v358->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }

      v207 = v357;
      if (v357)
      {
        v208 = (unint64_t *)&v357->__shared_owners_;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }

      v210 = (std::__shared_weak_count *)v350;
      if ((void)v350)
      {
        v211 = (unint64_t *)(v350 + 8);
        do
          v212 = __ldaxr(v211);
        while (__stlxr(v212 - 1, v211));
        if (!v212)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
        }
      }

      v213 = (std::__shared_weak_count *)*((void *)&v263 + 1);
      if (*((void *)&v263 + 1))
      {
        v214 = (unint64_t *)(*((void *)&v263 + 1) + 8LL);
        do
          v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (!v215)
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
      }

      v216 = (std::__shared_weak_count *)*((void *)&v256 + 1);
      if (*((void *)&v256 + 1))
      {
        v217 = (unint64_t *)(*((void *)&v256 + 1) + 8LL);
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
        }
      }

      sub_10002B7D4(v184, (uint64_t)&v346);
      sub_100035F24((uint64_t)&v333, (uint64_t)&v346);
      v219 = (std::__shared_weak_count *)*((void *)&v353 + 1);
      if (*((void *)&v353 + 1))
      {
        v220 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }

      v222 = (std::__shared_weak_count *)*((void *)&v346 + 1);
      if (*((void *)&v346 + 1))
      {
        v223 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }

      sub_10002B3A4(v184, (uint64_t)&v346);
      sub_100035F24((uint64_t)&v320, (uint64_t)&v346);
      v225 = (std::__shared_weak_count *)*((void *)&v353 + 1);
      if (*((void *)&v353 + 1))
      {
        v226 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }

      v228 = (std::__shared_weak_count *)*((void *)&v346 + 1);
      if (*((void *)&v346 + 1))
      {
        v229 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
        do
          v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
        }
      }

      v188 = v344;
      v252 = v190;
    }

    sub_10002C354((uint64_t)&v333, v188);
    v254 += v344;
    goto LABEL_349;
  }

BOOL sub_100006418(id a1, NSURL *a2, NSError *a3)
{
  uint64_t v4 = a2;
  int v5 = a3;
  int v6 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v15 = 0LL;
    uint64_t v7 = sub_1000B85DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 68158466;
    int v17 = 50;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    __int16 v18 = 2080;
    v19 = "-[DIIOCacheDelete eraseOldCacheFiles]_block_invoke";
    __int16 v20 = 2114;
    v21 = v4;
    __int16 v22 = 2114;
    v23 = v5;
    int v14 = 38;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl( v9,  &v15,  0LL,  0LL,  &_mh_execute_header,  v8,  16LL,  "%.*s: Failed looking up %{public}@: %{public}@",  buf,  v14);

    if (v10)
    {
      fprintf(__stderrp, "%s\n", v10);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = sub_1000B85DC();
    __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158466;
      int v17 = 50;
      __int16 v18 = 2080;
      v19 = "-[DIIOCacheDelete eraseOldCacheFiles]_block_invoke";
      __int16 v20 = 2114;
      v21 = v4;
      __int16 v22 = 2114;
      v23 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%.*s: Failed looking up %{public}@: %{public}@",  buf,  0x26u);
    }
  }

  *__error() = v6;

  return 1;
}

LABEL_32:
    *__error() = v4;
    objc_destroyWeak(&v26);
    goto LABEL_33;
  }

  uint64_t v9 = *__error();
  if (sub_1000B8654())
  {
    v27[0] = 0LL;
    uint64_t v10 = sub_1000B85DC();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      __int16 v12 = 3LL;
    }
    else {
      __int16 v12 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    v30 = 43;
    v31 = 2080;
    v32 = "-[DIIOCacheDelete registerPeriodicCallback]";
    LODWORD(v24) = 18;
    id v13 = (char *)_os_log_send_and_compose_impl( v12,  v27,  0LL,  0LL,  &_mh_execute_header,  v11,  16LL,  "%.*s: CacheDelete is not supported, daemon was launched unexpectedly without an instance ID",  (int)buf,  v24);

    if (v13)
    {
      fprintf(__stderrp, "%s\n", v13);
      free(v13);
    }
  }

  else
  {
    v19 = sub_1000B85DC();
    __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      v30 = 43;
      v31 = 2080;
      v32 = "-[DIIOCacheDelete registerPeriodicCallback]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%.*s: CacheDelete is not supported, daemon was launched unexpectedly without an instance ID",  buf,  0x12u);
    }
  }

  id v3 = 0;
  *__error() = v9;
LABEL_33:
  objc_destroyWeak(&location);
  return v3;
}

  if ((*(_BYTE *)(a2 + 16) & 2) != 0) {
    v27 = v15;
  }
  else {
    v27 = v15 + 1;
  }
  sub_1000506D8((uint64_t)v49, (uint64_t)v44);
  v28 = v46;
  v29 = v44[0];
  v44[0] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  sub_1000506D8((uint64_t)v49, (uint64_t)v44);
  sub_10005080C((uint64_t)v49, (uint64_t)&__p);
  v30 = a3 + 1;
  while (sub_1000E47F0((uint64_t)v44, (uint64_t)&__p))
  {
    v31 = v45;
    if ((_DWORD)v46)
    {
      if ((_DWORD)v46 != v28) {
        break;
      }
    }

    else
    {
      v36[0] = v27;
      v36[1] = v45;
      v37 = 2;
      sub_10005D9F0(&v38, v9, v36, v30);
      if (v28)
      {
        if (v40 != v28) {
          break;
        }
      }

      else
      {
        v28 = v40;
      }

      v27 = v39;
      if (v39 != v31) {
        break;
      }
    }

    sub_1000E4A20(v44);
    v27 = v31;
  }

  v32 = __p;
  __p = 0LL;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 24LL))(v32);
  }
  v33 = v44[0];
  v44[0] = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
  }
  v34 = *(void *)a2;
  if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
    ++v34;
  }
  *(void *)a4 = v34;
  *(void *)(a4 + std::ostream::~ostream(v2, v3 + 8) = v27;
  *(_BYTE *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v28;
  if (v55 == v54)
  {
    v35 = 4LL;
  }

  else
  {
    if (!v55) {
      goto LABEL_59;
    }
    v35 = 5LL;
    __int16 v20 = v55;
  }

  (*(void (**)(void *))(*v20 + 8 * v35))(v20);
LABEL_59:
  uint64_t result = v51;
  v51 = 0LL;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40LL))(result);
  }
  return result;
}

  v23 = v39;
  v24 = v40;
  uint64_t result = sub_1000AC794((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      goto LABEL_40;
    }

    v21 = *((void *)&v25 + 1);
    __int16 v22 = v25;
  }

  else
  {
    v21 = *((void *)&v25 + 1);
    __int16 v22 = v25 + 1;
  }

  if (v22 < v21)
  {
LABEL_40:
    v29 = v25;
    v30 = v26;
    v31 = *a3;
    v32 = *(_OWORD *)(a3 + 2);
    *(void *)&v29 = sub_100026FEC(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_1000F59B0(a1, (uint64_t **)&v29);
    uint64_t result = (uint64_t)sub_1000F5ADC(a1, (uint64_t ***)&v29);
    uint64_t v15 = (uint64_t *)result;
  }

void sub_100006CE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

uint64_t sub_100006D40(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(v5);
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 onPeriodicWithInfo:v6 urgency:a2]);

  objc_sync_exit(v5);
  return v7;
}

void sub_100006DB4(_Unwind_Exception *a1)
{
}

uint64_t sub_100006FE0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -[DIIOCacheDelete initWithDebugServiceName:]( objc_alloc(&OBJC_CLASS___DIIOCacheDelete),  "initWithDebugServiceName:",  v1);

  -[DIBaseServiceDelegate enterSandbox](v2, "enterSandbox");
  if (-[DIIOCacheDelete registerPeriodicCallback](v2, "registerPeriodicCallback"))
  {
    -[DIBaseServiceDelegate startXPClistener](v2, "startXPClistener");
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
    [v3 run];
  }

  return 78LL;
}

uint64_t start()
{
  int v0 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v62 = 0LL;
    uint64_t v1 = sub_1000B85DC();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v3 = 3LL;
    }
    else {
      uint64_t v3 = 2LL;
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 executablePath]);
    *(_DWORD *)buf = 68158210;
    int v64 = 28;
    __int16 v65 = 2080;
    v66 = "int main(int, const char **)";
    __int16 v67 = 2114;
    *(void *)v68 = v5;
    id v6 = (char *)_os_log_send_and_compose_impl( v3,  &v62,  0LL,  0LL,  &_mh_execute_header,  v2,  0LL,  "%.*s: IO daemon path: %{public}@",  buf,  28);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000B85DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 executablePath]);
      *(_DWORD *)buf = 68158210;
      int v64 = 28;
      __int16 v65 = 2080;
      v66 = "int main(int, const char **)";
      __int16 v67 = 2114;
      *(void *)v68 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: IO daemon path: %{public}@", buf, 0x1Cu);
    }
  }

  *__error() = v0;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 arguments]);

  id v13 = [v12 count];
  if ((unint64_t)v13 >= 2)
  {
    if ((unint64_t)[v12 count] > 2
      || (int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:1]),
          unsigned __int8 v15 = [v14 isEqualToString:@"--ram"],
          v14,
          (v15 & 1) == 0))
    {
      int v25 = *__error();
      if (sub_1000B8654())
      {
        uint64_t v62 = 0LL;
        uint64_t v26 = sub_1000B85DC();
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          uint64_t v28 = 3LL;
        }
        else {
          uint64_t v28 = 2LL;
        }
        *(_DWORD *)buf = 68157954;
        int v64 = 28;
        __int16 v65 = 2080;
        v66 = "int main(int, const char **)";
        LODWORD(v60) = 18;
        uint64_t v29 = _os_log_send_and_compose_impl( v28,  &v62,  0LL,  0LL,  &_mh_execute_header,  v27,  16LL,  "%.*s: Invalid arguments specified",  buf,  v60);
LABEL_25:
        v30 = (char *)v29;

        if (v30)
        {
          fprintf(__stderrp, "%s\n", v30);
          free(v30);
        }

        goto LABEL_46;
      }

      uint64_t v45 = sub_1000B85DC();
      v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v64 = 28;
        __int16 v65 = 2080;
        v66 = "int main(int, const char **)";
        v47 = "%.*s: Invalid arguments specified";
LABEL_44:
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, v47, buf, 0x12u);
      }

LABEL_45:
LABEL_46:
      *__error() = v25;
      uint64_t v32 = 1LL;
      goto LABEL_67;
    }
  }

  if (!getenv("LaunchInstanceID"))
  {
    if (getuid())
    {
      else {
        v31 = @"com.apple.diskimagesiod.ram";
      }
      sub_100006FE0(v31);
      uint64_t v32 = 78LL;
      goto LABEL_67;
    }

    int v25 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v62 = 0LL;
      uint64_t v54 = sub_1000B85DC();
      v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        uint64_t v55 = 3LL;
      }
      else {
        uint64_t v55 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v64 = 28;
      __int16 v65 = 2080;
      v66 = "int main(int, const char **)";
      LODWORD(v60) = 18;
      uint64_t v29 = _os_log_send_and_compose_impl( v55,  &v62,  0LL,  0LL,  &_mh_execute_header,  v27,  16LL,  "%.*s: Root daemon must be launched with an instance",  buf,  v60);
      goto LABEL_25;
    }

    uint64_t v59 = sub_1000B85DC();
    v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v64 = 28;
      __int16 v65 = 2080;
      v66 = "int main(int, const char **)";
      v47 = "%.*s: Root daemon must be launched with an instance";
      goto LABEL_44;
    }

    goto LABEL_45;
  }

  int v16 = getiopolicy_np(0, 0);
  int v17 = getiopolicy_np(0, 1);
  int v18 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v62 = 0LL;
    uint64_t v19 = sub_1000B85DC();
    __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v21 = 3LL;
    }
    else {
      uint64_t v21 = 2LL;
    }
    uid_t v22 = geteuid();
    pid_t v23 = getpid();
    *(_DWORD *)buf = 68159234;
    int v64 = 28;
    __int16 v65 = 2080;
    v66 = "int main(int, const char **)";
    __int16 v67 = 1024;
    *(_DWORD *)v68 = v22;
    *(_WORD *)&v68[4] = 1024;
    *(_DWORD *)&v68[6] = v23;
    __int16 v69 = 1024;
    BOOL v70 = (unint64_t)v13 > 1;
    __int16 v71 = 1024;
    int v72 = v16;
    __int16 v73 = 1024;
    int v74 = v17;
    LODWORD(v60) = 48;
    v24 = (char *)_os_log_send_and_compose_impl( v21,  &v62,  0LL,  0LL,  &_mh_execute_header,  v20,  0LL,  "%.*s: IO daemon euid: %d, pid: %d, isRAM: %d, IOpolicy process=%d thread=%d",  (int)buf,  v60,  v61);

    if (v24)
    {
      fprintf(__stderrp, "%s\n", v24);
      free(v24);
    }
  }

  else
  {
    uint64_t v33 = sub_1000B85DC();
    v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uid_t v35 = geteuid();
      pid_t v36 = getpid();
      *(_DWORD *)buf = 68159234;
      int v64 = 28;
      __int16 v65 = 2080;
      v66 = "int main(int, const char **)";
      __int16 v67 = 1024;
      *(_DWORD *)v68 = v35;
      *(_WORD *)&v68[4] = 1024;
      *(_DWORD *)&v68[6] = v36;
      __int16 v69 = 1024;
      BOOL v70 = (unint64_t)v13 > 1;
      __int16 v71 = 1024;
      int v72 = v16;
      __int16 v73 = 1024;
      int v74 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%.*s: IO daemon euid: %d, pid: %d, isRAM: %d, IOpolicy process=%d thread=%d",  buf,  0x30u);
    }
  }

  *__error() = v18;
  v37 = -[DIIODaemonDelegate initWithIsRAM:]( objc_alloc(&OBJC_CLASS___DIIODaemonDelegate),  "initWithIsRAM:",  (unint64_t)v13 > 1);
  v38 = v37;
  if (v37)
  {
    -[DIBaseServiceDelegate enterSandbox](v37, "enterSandbox");
    -[DIBaseServiceDelegate startXPClistener](v38, "startXPClistener");
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
    [v39 run];

    int v40 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v62 = 0LL;
      uint64_t v41 = sub_1000B85DC();
      v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        uint64_t v43 = 3LL;
      }
      else {
        uint64_t v43 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v64 = 28;
      __int16 v65 = 2080;
      v66 = "int main(int, const char **)";
      LODWORD(v60) = 18;
      v44 = (char *)_os_log_send_and_compose_impl( v43,  &v62,  0LL,  0LL,  &_mh_execute_header,  v42,  16LL,  "%.*s: Run loop aborted",  (int)buf,  v60);

      if (v44)
      {
        fprintf(__stderrp, "%s\n", v44);
        free(v44);
      }
    }

    else
    {
      uint64_t v52 = sub_1000B85DC();
      v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v64 = 28;
        __int16 v65 = 2080;
        v66 = "int main(int, const char **)";
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%.*s: Run loop aborted", buf, 0x12u);
      }
    }

    uint64_t v32 = 0LL;
  }

  else
  {
    int v40 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v62 = 0LL;
      uint64_t v48 = sub_1000B85DC();
      v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
        uint64_t v50 = 3LL;
      }
      else {
        uint64_t v50 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v64 = 28;
      __int16 v65 = 2080;
      v66 = "int main(int, const char **)";
      LODWORD(v60) = 18;
      v51 = (char *)_os_log_send_and_compose_impl( v50,  &v62,  0LL,  0LL,  &_mh_execute_header,  v49,  16LL,  "%.*s: IO daemon initialization failed. Quitting.",  (int)buf,  v60);

      if (v51)
      {
        fprintf(__stderrp, "%s\n", v51);
        free(v51);
      }
    }

    else
    {
      uint64_t v56 = sub_1000B85DC();
      v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v64 = 28;
        __int16 v65 = 2080;
        v66 = "int main(int, const char **)";
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "%.*s: IO daemon initialization failed. Quitting.",  buf,  0x12u);
      }
    }

    uint64_t v32 = 1LL;
  }

  *__error() = v40;

LABEL_67:
  return v32;
}

      *__error() = v19;
      [v14 setObject:v13 forKeyedSubscript:@"DIErrorVerboseInfo"];
      goto LABEL_54;
    }

    v27 = *__error();
    if (!sub_1000B8654())
    {
      uint64_t v41 = sub_1000B85DC();
      v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158466;
        uint64_t v48 = 62;
        v49 = 2080;
        uint64_t v50 = "+[DIError errorWithDomain:code:description:verboseInfo:error:]";
        v51 = 2114;
        uint64_t v52 = v11;
        v53 = 2114;
        uint64_t v54 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "%.*s: %{public}@ error %{public}@",  buf,  0x26u);
      }

      goto LABEL_53;
    }

    v46 = 0LL;
    v34 = sub_1000B85DC();
    uid_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    *(_DWORD *)buf = 68158466;
    uint64_t v48 = 62;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      pid_t v36 = 3LL;
    }
    else {
      pid_t v36 = 2LL;
    }
    v49 = 2080;
    uint64_t v50 = "+[DIError errorWithDomain:code:description:verboseInfo:error:]";
    v51 = 2114;
    uint64_t v52 = v11;
    v53 = 2114;
    uint64_t v54 = v18;
    v31 = (char *)_os_log_send_and_compose_impl( v36,  &v46,  0LL,  0LL,  &_mh_execute_header,  v35,  16LL,  "%.*s: %{public}@ error %{public}@",  buf,  38);

    if (v31)
    {
LABEL_41:
      fprintf(__stderrp, "%s\n", v31);
      free(v31);
    }
  }

    v46 = (std::__shared_weak_count *)*((void *)&v147 + 1);
    if (*((void *)&v147 + 1))
    {
      v47 = (unint64_t *)(*((void *)&v147 + 1) + 8LL);
      do
        uint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    if (!v36)
    {
      v19 += 64;
      if (v19 != v128) {
        continue;
      }
    }

    goto LABEL_126;
  }

  *(void *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((void *)&v147 + 1) = 75LL;
  *(_DWORD *)v148 = 16;
  sub_10003A690(&v130, &v147);
  sub_100004E4C(&v137, (uint64_t)"Udif: needs to read ", 20LL);
  sub_1000F0528(&v137, (int *)v19);
  sub_100004E4C(&v137, (uint64_t)" but buffer is full", 19LL);
  std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
  v98 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
  v99 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10LL);
  std::locale::~locale((std::locale *)&v143);
  std::ostream::put(&v137, v99);
  std::ostream::flush(&v137);
  std::ostream::~ostream(&v137, off_10016AE08);
  sub_10003A7F4((uint64_t)&v130);
LABEL_125:
  std::ios::~ios(&v138);
  uint64_t v28 = -28LL;
LABEL_126:
  v100 = *(void **)(v124 + 16);
  if (v100 != (void *)(v124 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v100[5] + 144LL))(v100[5]);
      v101 = (void *)v100[1];
      if (v101)
      {
        do
        {
          v102 = v101;
          v101 = (void *)*v101;
        }

        while (v101);
      }

      else
      {
        do
        {
          v102 = (void *)v100[2];
          v103 = *v102 == (void)v100;
          v100 = v102;
        }

        while (!v103);
      }

      v100 = v102;
    }

    while (v102 != (void *)(v124 + 24));
  }

  if (v28 < 0)
  {
LABEL_144:
    v129 = v28;
  }

  else if ((void)v178)
  {
    v104 = (unsigned int *)__p;
    v105 = (unsigned int *)((char *)__p + 40 * v178);
    v106 = v180;
    while (1)
    {
      do
      {
        v107 = v106[16];
        v106 += 16;
      }

      while (!v107);
      v108 = sub_100038120(v104);
      uint64_t v28 = v108;
      if (v108 < 0) {
        goto LABEL_144;
      }
      if (*(_BYTE *)(v124 + 56) && (int)v106[8] > (uint64_t)v108)
      {
        *(void *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((void *)&v147 + 1) = 75LL;
        *(_DWORD *)v148 = 16;
        sub_10004C0B0(&v130, &v147);
        sub_100004E4C(&v137, (uint64_t)"Error: Not enough data read. expected: ", 39LL);
        std::ostream::operator<<(&v137, *((void *)v106 + 4));
        sub_100004E4C(&v137, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<(&v137, v28);
        sub_100004E4C(&v137, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<(&v137, *(void *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
        v109 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
        v110 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10LL);
        std::locale::~locale((std::locale *)&v143);
        std::ostream::put(&v137, v110);
        std::ostream::flush(&v137);
        std::ostream::~ostream(&v137, off_10016CEB0);
        sub_10004DA64((uint64_t)&v130);
        std::ios::~ios(&v138);
        uint64_t v28 = -5LL;
        goto LABEL_144;
      }

      v104 += 10;
      if (v104 == v105)
      {
        if ((v108 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_144;
      }
    }
  }

  v111 = v157;
  if (v157)
  {
    v112 = (unint64_t *)&v157->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }

  v114 = (std::__shared_weak_count *)*((void *)&v149 + 1);
  if (*((void *)&v149 + 1))
  {
    v115 = (unint64_t *)(*((void *)&v149 + 1) + 8LL);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }

  sub_10002D8BC((uint64_t)v161);
  v117 = v172;
  if (v172)
  {
    v118 = (unint64_t *)&v172->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }

  v120 = v164;
  if (v164)
  {
    v121 = (unint64_t *)&v164->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }

  if (*((void *)&v178 + 1) && v179 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v181 + 1) && v182 != v180) {
    operator delete(v180);
  }
  return v129;
}

void sub_1000083E4(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = -[DIIOIterator initWithIOIterator:retain:]( objc_alloc(&OBJC_CLASS___DIIOIterator),  "initWithIOIterator:retain:",  a2,  1LL);
  uint64_t v3 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v9);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = 0LL;
    do
    {
      id v6 = -[DIIOObject newIteratorWithOptions:error:](v4, "newIteratorWithOptions:error:", 3LL, 0LL);
      if (v6)
      {
        while (1)
        {
          uint64_t v7 = v5;
          id v5 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v6);

          if (!v5 || IOObjectConformsTo(-[DIIOObject ioObj](v5, "ioObj"), "IOMedia")) {
            break;
          }
          if (IOObjectIsEqualTo(-[DIIOObject ioObj](v5, "ioObj"), *(_DWORD *)(a1 + 8)))
          {
            **(_BYTE **)a1 = 1;

            goto LABEL_9;
          }
        }
      }

      uint64_t v8 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v9);
      uint64_t v4 = v8;
    }

    while (v8);
LABEL_9:
  }
}

void sub_100008FDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location, id a26)
{
}

void sub_100009050(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v13 = 0LL;
    uint64_t v3 = sub_1000B85DC();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v5 = 3LL;
    }
    else {
      uint64_t v5 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v15 = 54;
    __int16 v16 = 2080;
    int v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
    LODWORD(v12) = 18;
    id v6 = (char *)_os_log_send_and_compose_impl( v5,  &v13,  0LL,  0LL,  &_mh_execute_header,  v4,  0LL,  "%.*s: Reached an invalidation handler for an attached client",  (int)buf,  v12);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000B85DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v15 = 54;
      __int16 v16 = 2080;
      int v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%.*s: Reached an invalidation handler for an attached client",  buf,  0x12u);
    }
  }

  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained weakDaemon]);
  id v11 = objc_loadWeakRetained((id *)(a1 + 40));
  [v10 onClientInvalidateWithConnection:v11];
}

void sub_10000921C(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v13 = 0LL;
    uint64_t v3 = sub_1000B85DC();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v5 = 3LL;
    }
    else {
      uint64_t v5 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v15 = 54;
    __int16 v16 = 2080;
    int v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
    LODWORD(v12) = 18;
    id v6 = (char *)_os_log_send_and_compose_impl( v5,  &v13,  0LL,  0LL,  &_mh_execute_header,  v4,  0LL,  "%.*s: Reached an interruption handler for an attached client",  (int)buf,  v12);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000B85DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v15 = 54;
      __int16 v16 = 2080;
      int v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%.*s: Reached an interruption handler for an attached client",  buf,  0x12u);
    }
  }

  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained weakDaemon]);
  id v11 = objc_loadWeakRetained((id *)(a1 + 40));
  [v10 onClientInvalidateWithConnection:v11];
}

void sub_1000095B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000962C(id a1)
{
  int v1 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v10 = 0LL;
    uint64_t v2 = sub_1000B85DC();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 2LL;
    }
    int v12 = 58;
    __int16 v13 = 2080;
    *(_DWORD *)buf = 68158210;
    int v14 = "-[DIIODaemonDelegate setupExitDaemonWatchdog]_block_invoke";
    __int16 v15 = 1024;
    int v16 = 8;
    LODWORD(vstd::ostream::~ostream(v2, v3 + 8) = 24;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( v4,  &v10,  0LL,  0LL,  &_mh_execute_header,  v3,  16LL,  "%.*s: Exit daemon timeout (%d sec) expired",  (int)buf,  v8,  v9);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }

  else
  {
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      int v12 = 58;
      __int16 v13 = 2080;
      int v14 = "-[DIIODaemonDelegate setupExitDaemonWatchdog]_block_invoke";
      __int16 v15 = 1024;
      int v16 = 8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%.*s: Exit daemon timeout (%d sec) expired",  buf,  0x18u);
    }
  }

  *__error() = v1;
  exit(0);
}

id sub_100009854(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v11 = 0LL;
    uint64_t v3 = sub_1000B85DC();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v5 = 3LL;
    }
    else {
      uint64_t v5 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v13 = 54;
    __int16 v14 = 2080;
    __int16 v15 = "-[DIIODaemonDelegate setupSigtermHandler]_block_invoke";
    LODWORD(v10) = 18;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( v5,  &v11,  0LL,  0LL,  &_mh_execute_header,  v4,  0LL,  "%.*s: Terminating due to SIGTERM",  (int)buf,  v10);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000B85DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v13 = 54;
      __int16 v14 = 2080;
      __int16 v15 = "-[DIIODaemonDelegate setupSigtermHandler]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: Terminating due to SIGTERM", buf, 0x12u);
    }
  }

  *__error() = v2;
  return [*(id *)(a1 + 32) exitWithUnmount];
}

void sub_100009C04(void *a1, uint64_t a2)
{
  id v3 = a1;
  objc_sync_enter(v3);
  uint64_t v4 = -[DIIOIterator initWithIOIterator:retain:]( objc_alloc(&OBJC_CLASS___DIIOIterator),  "initWithIOIterator:retain:",  a2,  1LL);
  uint64_t v5 = 0LL;
  while (1)
  {
    uint64_t v6 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v4);

    if (!v6) {
      break;
    }
    id v7 = -[DIIOObject registryEntryIDWithError:](v6, "registryEntryIDWithError:", 0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceHandle]);
    LODWORD(v7) = v7 == [v8 regEntryID];

    uint64_t v5 = v6;
    if ((_DWORD)v7)
    {
      int v9 = *__error();
      if (sub_1000B8654())
      {
        uint64_t v18 = 0LL;
        uint64_t v10 = sub_1000B85DC();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        *(_DWORD *)buf = 68157954;
        if (v12) {
          uint64_t v13 = 3LL;
        }
        else {
          uint64_t v13 = 2LL;
        }
        int v20 = 47;
        __int16 v21 = 2080;
        uid_t v22 = "void terminationCallback(void *, io_iterator_t)";
        LODWORD(v17) = 18;
        __int16 v14 = (char *)_os_log_send_and_compose_impl( v13,  &v18,  0LL,  0LL,  &_mh_execute_header,  v11,  0LL,  "%.*s: Reached termination callback, stopping the daemon.",  (int)buf,  v17);

        if (v14)
        {
          fprintf(__stderrp, "%s\n", v14);
          free(v14);
        }
      }

      else
      {
        uint64_t v15 = sub_1000B85DC();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68157954;
          int v20 = 47;
          __int16 v21 = 2080;
          uid_t v22 = "void terminationCallback(void *, io_iterator_t)";
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%.*s: Reached termination callback, stopping the daemon.",  buf,  0x12u);
        }
      }

      *__error() = v9;

      uint64_t v5 = 0LL;
      [v3 exitDaemon];
    }
  }

  objc_sync_exit(v3);
}

void sub_100009E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000A494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_51:
}

void sub_10000AF18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
}

void sub_10000B4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000B52C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

LABEL_34:
    *__error() = v17;
    objc_sync_exit(v5);

    goto LABEL_35;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[DIIODaemonDelegate activeConnections](v5, "activeConnections"));
  int v16 = [v15 count] == 0;

  if (!v16)
  {
    int v17 = *__error();
    if (!sub_1000B8654())
    {
      uint64_t v33 = sub_1000B85DC();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uid_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[DIIODaemonDelegate activeConnections](v5, "activeConnections"));
        pid_t v36 = [v35 count];
        *(_DWORD *)buf = 68158210;
        uint64_t v41 = 55;
        v42 = 2080;
        uint64_t v43 = "-[DIIODaemonDelegate onClientInvalidateWithConnection:]";
        v44 = 2048;
        uint64_t v45 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%.*s: XPC connection closed for a managed attach, # open connections left: %lu",  buf,  0x1Cu);
      }

      goto LABEL_34;
    }

    v39 = 0LL;
    uint64_t v18 = sub_1000B85DC();
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      int v20 = 3LL;
    }
    else {
      int v20 = 2LL;
    }
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(-[DIIODaemonDelegate activeConnections](v5, "activeConnections"));
    uid_t v22 = [v21 count];
    *(_DWORD *)buf = 68158210;
    uint64_t v41 = 55;
    v42 = 2080;
    uint64_t v43 = "-[DIIODaemonDelegate onClientInvalidateWithConnection:]";
    v44 = 2048;
    uint64_t v45 = v22;
    LODWORD(v37) = 28;
    pid_t v23 = (char *)_os_log_send_and_compose_impl( v20,  &v39,  0LL,  0LL,  &_mh_execute_header,  v19,  0LL,  "%.*s: XPC connection closed for a managed attach, # open connections left: %lu",  (int)buf,  v37,  v38);

    if (v23) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  objc_sync_exit(v5);

  -[DIIODaemonDelegate exitWithUnmount](v5, "exitWithUnmount");
LABEL_35:
}

  id v3 = 0LL;
LABEL_35:
  if (v11)
  {
    uid_t v22 = (unint64_t *)&v11->__shared_owners_;
    do
      pid_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      int v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v3;
}

        while (1)
        {
          uint64_t v26 = *v4;
          if (atomic_load(v9)) {
            break;
          }
          uint64_t v28 = __ldaxr(v4);
          if (v28 != v26) {
            goto LABEL_39;
          }
          if (!__stlxr(0, v4))
          {
            LODWORD(v17) = v26 >> 1;
            LODWORD(v1std::ostream::~ostream(v2, v3 + 8) = v26 & 1;
            if (v26 > 1) {
              goto LABEL_24;
            }
            break;
          }
        }
      }

  std::mutex::unlock(v4);
  return v15;
}

#error "10000BC88: call analysis failed (funcsize=111)"
void __cdecl -[DIIODaemonDelegate runIOmanager](DIIODaemonDelegate *self, SEL a2)
{
  void *v3;
  int v4;
  uint64_t v5;
  os_log_s *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_s *v10;
  const char *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  sub_100010EA4((uint64_t *)self->_ioManager);
  if (self->_ioManager)
  {
    id v3 = (void *)sub_100010EA0();
    operator delete(v3);
    self->_ioManager = 0LL;
  }

  uint64_t v4 = *__error();
  if (sub_1000B8654())
  {
    BOOL v12 = 0LL;
    uint64_t v5 = sub_1000B85DC();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      id v7 = 3LL;
    }
    else {
      id v7 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    __int16 v14 = 34;
    uint64_t v15 = 2080;
    int v16 = "-[DIIODaemonDelegate runIOmanager]";
    LODWORD(v11) = 18;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl( v7,  &v12,  0LL,  0LL,  &_mh_execute_header,  v6,  0LL,  "%.*s: Shutdown is complete",  (int)buf,  v11);

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }

  else
  {
    int v9 = sub_1000B85DC();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      __int16 v14 = 34;
      uint64_t v15 = 2080;
      int v16 = "-[DIIODaemonDelegate runIOmanager]";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%.*s: Shutdown is complete", buf, 0x12u);
    }
  }

  *__error() = v4;
  -[DIIODaemonDelegate setAttachedTransaction:](self, "setAttachedTransaction:", 0LL);
  exit(0);
}

void sub_10000C3F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location, uint8_t buf, int a22, __int16 a23, uint64_t a24, __int16 a25, uint64_t a26, __int16 a27, int a28)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10000C748(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained runIOmanager];
}

void sub_10000C77C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10000C818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000CB64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  _Unwind_Resume(a1);
}

void sub_10000CBD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_sync_enter(v4);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceHandle]);

    if (v5)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[DIError errorWithEnumValue:verboseInfo:]( &OBJC_CLASS___DIError,  "errorWithEnumValue:verboseInfo:",  155LL,  @"A second controller XPC service attempted to create a new device"));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      objc_sync_exit(v4);
    }

    else
    {
      uint64_t v7 = *(void *)(a1 + 32);
      id v12 = 0LL;
      unsigned int v8 = [v4 tryAttachWithParams:v7 error:&v12];
      id v9 = v12;
      uint64_t v10 = *(void *)(a1 + 40);
      if (v8)
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceHandle]);
        (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0LL);
      }

      else
      {
        (*(void (**)(void, void, id))(v10 + 16))(*(void *)(a1 + 40), 0LL, v9);
        [v4 exitDaemon];
      }

      objc_sync_exit(v4);
    }
  }
}

void sub_10000CD24(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v8 = objc_begin_catch(a1);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 reason]);
    objc_claimAutoreleasedReturnValue(+[DIError errorWithEnumValue:verboseInfo:](&OBJC_CLASS___DIError, "errorWithEnumValue:verboseInfo:", 150LL, v9));

    (*(void (**)(void))(*(void *)(v4 + 40) + 16LL))();
    [v2 exitDaemon];

    objc_end_catch();
    JUMPOUT(0x10000CCF4LL);
  }

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_10000D5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DE5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location, id a25)
{
  _Unwind_Resume(a1);
}

void sub_10000DF34(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v12 = 0LL;
    uint64_t v3 = sub_1000B85DC();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      uint64_t v5 = 3LL;
    }
    else {
      uint64_t v5 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v14 = 54;
    __int16 v15 = 2080;
    int v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
    LODWORD(v11) = 18;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( v5,  &v12,  0LL,  0LL,  &_mh_execute_header,  v4,  16LL,  "%.*s: Reached an interruption handler for an attached controller service",  (int)buf,  v11);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000B85DC();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v14 = 54;
      __int16 v15 = 2080;
      int v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%.*s: Reached an interruption handler for an attached controller service",  buf,  0x12u);
    }
  }

  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained onClientInvalidateWithConnection:v10];
}

void sub_10000E0F0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_10000E110(uint64_t a1)
{
  int v2 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v12 = 0LL;
    uint64_t v3 = sub_1000B85DC();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v5 = 3LL;
    }
    else {
      uint64_t v5 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v14 = 54;
    __int16 v15 = 2080;
    int v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
    LODWORD(v11) = 18;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( v5,  &v12,  0LL,  0LL,  &_mh_execute_header,  v4,  0LL,  "%.*s: Reached an invalidation handler for an attached controller service",  (int)buf,  v11);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000B85DC();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v14 = 54;
      __int16 v15 = 2080;
      int v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%.*s: Reached an invalidation handler for an attached controller service",  buf,  0x12u);
    }
  }

  *__error() = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained onClientInvalidateWithConnection:v10];
}

void sub_10000E2CC(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_10000E494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E6BC()
{
}

void sub_10000E6C4()
{
}

uint64_t sub_10000E8BC(const void **a1)
{
  int v1 = *a1;
  if (!*a1
  {
    if (!result) {
      return result;
    }
    uint64_t result = sub_10000EA38(result);
    if (!(_DWORD)result) {
      return result;
    }
LABEL_9:
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v7 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Unsupported UDIF with SLA found", 0x2Du);
  }

  uint64_t v3 = result;
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v4 = *(void *)(result + 24);
  if (v5 != v4)
  {
    while (1)
    {
      if (result) {
        break;
      }
      v5 += 48LL;
      if (v5 == v4) {
        goto LABEL_20;
      }
    }
  }

  if (v5 != v4)
  {
    while (1)
    {
      if (!v8) {
        __cxa_bad_cast();
      }
      uint64_t result = sub_10000EA38((uint64_t)v8);
      if ((result & 1) != 0) {
        break;
      }
      v5 += 48LL;
      uint64_t v9 = *(void *)(v3 + 24);
      if (v5 != v9)
      {
        while (1)
        {
          if (result) {
            break;
          }
          v5 += 48LL;
          if (v5 == v9)
          {
            uint64_t v5 = v9;
            break;
          }
        }
      }

      if (v5 == v4) {
        goto LABEL_20;
      }
    }

    uint64_t v4 = v5;
  }

LABEL_20:
  if (v4 != *(void *)(v3 + 24)) {
    goto LABEL_9;
  }
  return result;
}

  if (*(_DWORD *)v14 && (sub_10001E4C4(&v60, a1, a2, v14, a4) & 0x80000000) != 0)
  {
    uint64_t v26 = __stderrp;
    v27 = "Failed to sign request\n";
    uint64_t v28 = 23LL;
    goto LABEL_42;
  }

  __int16 v21 = curl_easy_setopt(v16, CURLOPT_URL, a2);
  uid_t v22 = curl_easy_setopt(v16, CURLOPT_HTTPHEADER, v60);
  pid_t v23 = curl_easy_setopt(v16, CURLOPT_BUFFERSIZE, 102400LL);
  v24 = (curl_easy_setopt(v16, CURLOPT_TCP_KEEPALIVE, 1LL) | v23 | v22 | v21) == 0;
  if (*(void *)(v14 + 2784) && curl_easy_setopt(v16, CURLOPT_USERAGENT, *(void *)(v14 + 2784))) {
    v24 = 0;
  }
  if (*(void *)(v14 + 2760) && curl_easy_setopt(v16, CURLOPT_PROXY, *(void *)(v14 + 2760))) {
    v24 = 0;
  }
  if (*(void *)(v14 + 2768) && curl_easy_setopt(v16, CURLOPT_PINNEDPUBLICKEY, *(void *)(v14 + 2768))) {
    v24 = 0;
  }
  if (*(void *)(v14 + 2776) && curl_easy_setopt(v16, CURLOPT_PROXY_PINNEDPUBLICKEY, *(void *)(v14 + 2776))) {
    v24 = 0;
  }
  if (*(void *)(v14 + 2800) && curl_easy_setopt(v16, CURLOPT_PROXYHEADER, *(void *)(v14 + 2800))) {
    v24 = 0;
  }
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      uint64_t v33 = curl_easy_setopt(v16, CURLOPT_CUSTOMREQUEST, "GET");
      int v25 = (curl_easy_setopt(v16, CURLOPT_FOLLOWLOCATION, 1LL) | v33) == 0;
    }

    else
    {
      if (a1) {
        goto LABEL_53;
      }
      int v25 = curl_easy_setopt(v16, CURLOPT_PUT, 1LL) == CURLE_OK;
    }

    if (!v25) {
      v24 = 0;
    }
LABEL_53:
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }

  if (curl_easy_setopt(v16, CURLOPT_POST, 1LL)) {
    v24 = 0;
  }
  if (!a4)
  {
    v31 = curl_easy_setopt(v16, CURLOPT_POSTFIELDS, "");
    uint64_t v32 = curl_easy_setopt(v16, CURLOPT_POSTFIELDSIZE, 0LL) | v31;
    goto LABEL_55;
  }

  if (self->_header.__ptr_.__value_)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    int v20 = v19;
    if (v19)
    {
      [v19 backend];
    }

    else
    {
      v85 = 0LL;
      v86 = 0LL;
    }

    sub_100116E98((uint64_t)&v85, &v92);
    if ((void)v92
    {
      *(void *)&v90 = v31;
      *((void *)&v90 + 1) = *((void *)&v92 + 1);
      uint64_t v32 = &v92;
    }

    else
    {
      uint64_t v32 = &v90;
    }

    *(void *)uint64_t v32 = 0LL;
    *((void *)v32 + 1) = 0LL;
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v92 + 1);
    if (*((void *)&v92 + 1))
    {
      v34 = (unint64_t *)(*((void *)&v92 + 1) + 8LL);
      do
        uid_t v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    pid_t v36 = v86;
    if (v86)
    {
      v37 = (unint64_t *)&v86->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    v39 = v90;
    if ((void)v90)
    {
      sub_1000FAD34(*(void *)(v90 + 40));
      atomic_store(*(void *)(*(void *)(v39 + 40) + 16LL), (unint64_t *)(*(void *)(v39 + 40) + 64LL));
    }

    int v40 = (std::__shared_weak_count *)*((void *)&v90 + 1);
    if (*((void *)&v90 + 1))
    {
      uint64_t v41 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    [v43 backend];
    v44 = (*(uint64_t (**)(void))(*(void *)v90 + 40LL))(v90);
    uint64_t v45 = (std::__shared_weak_count *)*((void *)&v90 + 1);
    if (*((void *)&v90 + 1))
    {
      v46 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    if (v44)
    {
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
      v49 = v48;
      if (v48)
      {
        [v48 backend];
        uint64_t v50 = v90;
      }

      else
      {
        uint64_t v50 = 0LL;
        v90 = 0uLL;
      }

      v51 = (header *)operator new(0x50uLL);
      sub_1000CA580(v51, v50);
      value = self->_header.__ptr_.__value_;
      self->_header.__ptr_.__value_ = v51;
      if (value) {
        operator delete(value);
      }
      v53 = (std::__shared_weak_count *)*((void *)&v90 + 1);
      if (*((void *)&v90 + 1))
      {
        uint64_t v54 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
        do
          uint64_t v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }

    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    v57 = v56;
    if (v56) {
      [v56 backend];
    }
    else {
      v90 = 0uLL;
    }
    v58 = self->_header.__ptr_.__value_;
    uint64_t v59 = operator new(0xFF0uLL);
    v60 = sub_1000CDAB8(v90, (uint64_t)v58);
    sub_1000CD364(v59, &v90, v58, v60, v61, &qword_100139290);
    *uint64_t v4 = v59;
    uint64_t v62 = (std::__shared_weak_count *)*((void *)&v90 + 1);
    if (*((void *)&v90 + 1))
    {
      v63 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
      do
        int v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }

  else
  {
    v27 = (unsigned __int16)-[DiskImageParamsXPC blockSize](self, "blockSize");
    uint64_t v28 = -[DiskImageParamsXPC blockSize](self, "blockSize");
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    v30 = v29;
    if (v29)
    {
      [v29 backend];
    }

    else
    {
      v85 = 0LL;
      v86 = 0LL;
    }

    v66 = (char *)operator new(0xFF0uLL);
    *(void *)&v92 = sub_100118D8C();
    *((void *)&v92 + 1) = v67;
    LOBYTE(v90) = 0;
    v91 = 0;
    sub_1000CDAAC((uint64_t)v66, v27, 0x100000u, 0LL, 0x10000000000000LL / v28, &v85, &qword_100139290, &v92, &v90);
    v68 = v86;
    if (v86)
    {
      __int16 v69 = (unint64_t *)&v86->__shared_owners_;
      do
        BOOL v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }

    __int16 v71 = *(void *)(v66 + 36);
    int v72 = *((_DWORD *)v66 + 11);
    __int16 v73 = *((void *)v66 + 13);
    int v74 = (char *)operator new(0x50uLL);
    *(_DWORD *)int v74 = 2003069043;
    *(void *)(v74 + 4) = v71;
    *((_DWORD *)v74 + 3) = v72;
    v75 = *((_OWORD *)v66 + 4);
    *((_OWORD *)v74 + 1) = *((_OWORD *)v66 + 3);
    *((_OWORD *)v74 + 2) = v75;
    *((_OWORD *)v74 + 3) = *((_OWORD *)v66 + 5);
    *(void *)(v74 + 62) = *(void *)(v66 + 94);
    *((_WORD *)v74 + 35) = 0;
    *((void *)v74 + 9) = v73;
    v76 = self->_header.__ptr_.__value_;
    self->_header.__ptr_.__value_ = (header *)v74;
    if (v76)
    {
      operator delete(v76);
      int v74 = (char *)self->_header.__ptr_.__value_;
    }

    v77 = *((unsigned __int16 *)v74 + 34);
    v84.receiver = self;
    v84.super_class = (Class)&OBJC_CLASS___DiskImageParamsASIF_XPC;
    __int16 v65 = -[DiskImageParamsXPC setBlockSize:](&v84, "setBlockSize:", v77);
    *uint64_t v4 = v66;
  }

  v78 = v88;
  if (v88)
  {
    v79 = (unint64_t *)&v88->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

  v81 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v82 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }

  return (unique_ptr<DiskImage, std::default_delete<DiskImage>>)v65;
}

BOOL sub_10000EA38(uint64_t a1)
{
  int v1 = sub_1000F6698(@"LPic");
  sub_100011548((uint64_t)&v24, &v32);
  sub_100011548((uint64_t)v20, &v36);
  for (; !sub_1000F08B8((uint64_t)&v24, (uint64_t)v20); ++v27)
  {
    int v2 = sub_1000F076C(&v24);
    sub_1000F0860((uint64_t)&v24);
    if (v2 == v1) {
      break;
    }
  }

  __int128 v28 = v24;
  __int128 v24 = 0uLL;
  LOBYTE(v29) = 0;
  char v30 = 0;
  if (v26)
  {
    uint64_t v29 = v25;
    int v25 = 0LL;
    char v30 = 1;
  }

  uint64_t v31 = v27;
  BOOL v3 = sub_1000F08B8((uint64_t)&v28, (uint64_t)&v36);
  if (v30) {
    sub_1000114C0(&v29);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v23) {
    sub_1000114C0(&v22);
  }
  uint64_t v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v26) {
    sub_1000114C0(&v25);
  }
  id v10 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v11 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v39) {
    sub_1000114C0(&v38);
  }
  uint64_t v13 = v37;
  if (v37)
  {
    int v14 = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v35) {
    sub_1000114C0(&v34);
  }
  int v16 = v33;
  if (v33)
  {
    int v17 = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  return !v3;
}

void sub_10000ECAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  sub_100011444((uint64_t)va2);
  sub_100011444((uint64_t)va);
  sub_100011444((uint64_t)va1);
  sub_100011474(v2 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_10000ECF8(uint64_t a1, int a2, void *a3)
{
  void (****v6)(uint64_t *__return_ptr);
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (***v21)(uint64_t *__return_ptr);
  void (***v22)(uint64_t *__return_ptr);
  void (***v23)(uint64_t *__return_ptr);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  void *exception;
  uint64_t v30;
  void *v31;
  void (***v32)(uint64_t *__return_ptr);
  uint64_t v33;
  uint64_t v34[3];
  uint64_t *v35;
  id v5 = a3;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  uint64_t v6 = (void (****)(uint64_t *__return_ptr))(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  byte_100198568 = 1;
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 diskImageParamsXPC]);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;

  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = [v5 onDiskCache];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 shadowChain]);
  uint64_t v12 = [v11 shouldValidate];
  if (v9) {
    [v9 createDiskImageWithCache:v10 shadowValidation:v12];
  }
  else {
    uint64_t v33 = 0LL;
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 40LL))(v33))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 inputStatFS]);
    if (v13)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 inputStatFS]);
      LODWORD(v14) = v14 > (unint64_t)[v15 blockSize];

      if ((_DWORD)v14)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_100004D60((uint64_t)v34);
        sub_100004E4C(v34, (uint64_t)"The underlying file system doesn't support writable images with ", 64LL);
        char v30 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
        std::ostream::operator<<(v34, v30);
        sub_100004E4C(v34, (uint64_t)"-bytes block size", 17LL);
        sub_10001161C((uint64_t)exception, (uint64_t)v34, 0x13u);
      }
    }
  }

  sub_10000E8BC((const void **)&v33);
  sub_10000F29C((io_service_t *)a1);
  sub_10000F490(a1, v5, v33);
  sub_1000105A0(a1, (uint64_t)v34);
  uint64_t v16 = operator new(0x30uLL);
  sub_1000116D0(v16, &v33, (uint64_t)v34);
  int v17 = v35;
  if (v35 == v34)
  {
    unint64_t v18 = 4LL;
    int v17 = v34;
    goto LABEL_11;
  }

  if (v35)
  {
    unint64_t v18 = 5LL;
LABEL_11:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }

  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v31 = v16;
  int v20 = *(unsigned int *)(a1 + 4);
  v34[0] = (uint64_t)&off_100167260;
  v34[1] = (uint64_t)sub_1000E4D94;
  v34[2] = v20;
  char v35 = v34;
  sub_100010AB4(v19, (void *)(a1 + 48), (uint64_t *)&v31, (uint64_t)v34, &v32);
  __int16 v21 = v32;
  uint64_t v32 = 0LL;
  uid_t v22 = *v6;
  void *v6 = v21;
  if (v22)
  {
    (*v22)[3]((uint64_t *)v22);
    char v23 = v32;
    uint64_t v32 = 0LL;
    if (v23) {
      (*v23)[3]((uint64_t *)v23);
    }
  }

  __int128 v24 = v35;
  if (v35 == v34)
  {
    int v25 = 4LL;
    __int128 v24 = v34;
  }

  else
  {
    if (!v35) {
      goto LABEL_20;
    }
    int v25 = 5LL;
  }

  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_20:
  char v26 = (uint64_t)v31;
  uint64_t v31 = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 16LL))(v26);
  }
  (***v6)(v34);
  if (*(_BYTE *)(a1 + 32)) {
    sub_10000492C((uint64_t *)(a1 + 24));
  }
  *(void *)(a1 + 24) = v34[0];
  v34[0] = 0LL;
  *(_BYTE *)(a1 + 32) = 1;
  sub_10000492C(v34);
  uint64_t v27 = (const void *)v33;
  uint64_t v33 = 0LL;
  if (v27) {
    (*(void (**)(const void *))(*(void *)v27 + 16LL))(v27);
  }

  return a1;
}

void sub_10000F09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16LL))(a4);
  }
  sub_100016DE0(v8);
  sub_100016E84((void ***)va);

  if (*(_BYTE *)(v5 + 32)) {
    sub_10000492C(v7);
  }
  sub_100016F10(v6, 0LL);
  uint64_t v11 = *v9;
  uint64_t *v9 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10000F218(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

uint64_t sub_10000F29C(io_service_t *a1)
{
  uint64_t result = IOServiceOpen(*a1, mach_task_self_, 0, a1 + 1);
  if ((_DWORD)result)
  {
    int v2 = result;
    int v3 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v14 = 0LL;
      uint64_t v4 = sub_1000B85DC();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        uint64_t v6 = 3LL;
      }
      else {
        uint64_t v6 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      int v16 = 31;
      __int16 v17 = 2080;
      unint64_t v18 = "void DIIOManager::setupDriver()";
      __int16 v19 = 1024;
      int v20 = v2;
      LODWORD(v12) = 24;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( v6,  &v14,  0LL,  0LL,  &_mh_execute_header,  v5,  16LL,  "%.*s: IOServiceOpen returned %d",  (int)buf,  v12,  v13);

      if (v7)
      {
        fprintf(__stderrp, "%s\n", v7);
        free(v7);
      }
    }

    else
    {
      uint64_t v8 = sub_1000B85DC();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158210;
        int v16 = 31;
        __int16 v17 = 2080;
        unint64_t v18 = "void DIIOManager::setupDriver()";
        __int16 v19 = 1024;
        int v20 = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%.*s: IOServiceOpen returned %d", buf, 0x18u);
      }
    }

    *__error() = v3;
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v11 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"IOServiceOpen failed", 0x9Bu);
  }

  return result;
}

void sub_10000F490(uint64_t a1, void *a2, uint64_t a3)
{
  id v90 = a2;
  unsigned int v5 = sub_1000E4384(a3);
  unsigned int v6 = sub_1000E43D4(a3);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a3 + 72LL))(inputStruct, a3);
  unsigned __int16 v7 = *(_WORD *)&inputStruct[8];
  uint64_t v8 = sub_100037420();
  unint64_t v9 = (unint64_t)v8[3];
  unsigned int v10 = sub_10003734C();
  if (!v10)
  {
    int v11 = *((_DWORD *)v8 + 2);
    if (v11 == 1)
    {
      unsigned int v10 = (*v8)();
    }

    else
    {
      if (v11) {
        sub_100017130();
      }
      unsigned int v10 = *(_DWORD *)v8;
    }
  }

  uint64_t v12 = v9 / (v6 + v6 * v7);
  else {
    uint64_t v12 = v12;
  }
  uint32_t outputCnt = 1;
  uint64_t input = v12;
  uint64_t output = 0LL;
  unsigned int v13 = IOConnectCallMethod(*(_DWORD *)(a1 + 4), 2u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
  if (v13)
  {
    int v64 = *__error();
    if (sub_1000B8654())
    {
      *(void *)buf = 0LL;
      uint64_t v65 = sub_1000B85DC();
      v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
        uint64_t v67 = 3LL;
      }
      else {
        uint64_t v67 = 2LL;
      }
      *(void *)inputStruct = 0x4C04100302LL;
      *(_WORD *)&inputStruct[8] = 2080;
      *(void *)&inputStruct[10] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      *(_WORD *)&inputStruct[18] = 1024;
      *(_DWORD *)&inputStruct[20] = v13;
      LODWORD(v86) = 24;
      v68 = (char *)_os_log_send_and_compose_impl( v67,  buf,  0LL,  0LL,  &_mh_execute_header,  v66,  16LL,  "%.*s: IOAllocatePortsArrayCallMethod returned %d",  (int)inputStruct,  v86,  v88);

      if (v68)
      {
        fprintf(__stderrp, "%s\n", v68);
        free(v68);
      }
    }

    else
    {
      uint64_t v80 = sub_1000B85DC();
      v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        *(void *)inputStruct = 0x4C04100302LL;
        *(_WORD *)&inputStruct[8] = 2080;
        *(void *)&inputStruct[10] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
        *(_WORD *)&inputStruct[18] = 1024;
        *(_DWORD *)&inputStruct[20] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "%.*s: IOAllocatePortsArrayCallMethod returned %d",  inputStruct,  0x18u);
      }
    }

    *__error() = v64;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100189E78;
    v83 = std::generic_category();
    exception[1] = v13;
    exception[2] = v83;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::ostream::~ostream(v2, v3 + 8) = 0;
    exception[7] = "Can't allocate ports array in driver";
  }

  unsigned __int16 v14 = output;
  uint64_t v15 = (unsigned __int16)output;
  sub_100010EE4(a1, (unsigned __int16)output, (uint64_t *)inputStruct);
  sub_100017168((void **)(a1 + 48));
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = *(_OWORD *)inputStruct;
  *(void *)(a1 + 64) = *(void *)&inputStruct[16];
  memset(inputStruct, 0, sizeof(inputStruct));
  *(void *)buf = inputStruct;
  sub_100016E84((void ***)buf);
  int v16 = (void **)operator new(0x18uLL);
  v89 = (const char *)(16 * ((v5 + (unint64_t)v6 - 1) / v6 + v7) + 24);
  sub_1000171DC(v16, v15, (uint64_t)v89);
  sub_100016F10((void ***)(a1 + 16), v16);
  char v17 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 80LL))(a3);
  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v90 diskImageParamsXPC]);
  if ([v18 isSparseFormat])
  {
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40LL))(a3);

    if (v19) {
      v17 |= 2u;
    }
  }

  else
  {
  }

  bzero(inputStruct, 0x440uLL);
  *(_DWORD *)inputStruct = 8;
  uint64_t v106 = **(void **)(a1 + 16);
  unsigned int v108 = v5;
  unsigned int v109 = v6;
  unsigned __int16 v110 = v7;
  __int16 v111 = 1;
  char v113 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40LL))(a3) ^ 1;
  char v114 = v17;
  int v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cacheURL]);
  if (v20)
  {
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cacheURL]);
    unsigned __int8 v22 = +[DIAttachParams copyWithURL:outURLStr:maxLen:error:]( &OBJC_CLASS___DIAttachParams,  "copyWithURL:outURLStr:maxLen:error:",  v21,  &v115,  1024LL,  0LL);

    if ((v22 & 1) == 0)
    {
      v76 = __cxa_allocate_exception(0x40uLL);
      v77 = "Failed copying cache URL";
      uint64_t v78 = 22LL;
      goto LABEL_96;
    }
  }

  if ([v90 RAMdisk])
  {
    [v90 backend];
    char v23 = *(void **)buf;
    __int128 v24 = *(std::__shared_weak_count **)v97;
    if (*(void *)v97)
    {
      int v25 = (unint64_t *)(*(void *)v97 + 8LL);
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    char v105 = 3;
    *(void *)&inputStruct[8] = v23[8];
    *(void *)&inputStruct[16] = (*(uint64_t (**)(void *))(*v23 + 40LL))(v23);
    char v104 = 1;
  }

  unsigned __int16 v112 = ((v108 + v109 - 1) / v109 + (v110 >> 1)) * v14;
  size_t v95 = 8LL;
  if (sysctlbyname("debug.didevice_cache_size_default", v116, &v95, 0LL, 0LL))
  {
    int v27 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v94 = 0LL;
      uint64_t v28 = sub_1000B85DC();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        uint64_t v30 = 3LL;
      }
      else {
        uint64_t v30 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 28;
      *(_WORD *)v97 = 2080;
      *(void *)&v97[2] = "unsigned long getCacheSize()";
      LODWORD(v86) = 18;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl( v30,  &v94,  0LL,  0LL,  &_mh_execute_header,  v29,  16LL,  "%.*s: Failed reading default cache size",  (int)buf,  v86);

      if (v31)
      {
        fprintf(__stderrp, "%s\n", v31);
        free(v31);
      }
    }

    else
    {
      uint64_t v32 = sub_1000B85DC();
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        *(_DWORD *)&uint8_t buf[4] = 28;
        *(_WORD *)v97 = 2080;
        *(void *)&v97[2] = "unsigned long getCacheSize()";
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%.*s: Failed reading default cache size",  buf,  0x12u);
      }
    }

    *__error() = v27;
  }

  else {
    int v34 = v112;
  }
  unsigned __int16 v112 = v34;
  char v35 = valloc(v108 * v34);
  if (!v35)
  {
    __int16 v69 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    BOOL v70 = std::bad_alloc::bad_alloc(v69);
  }

  v116[0] = &off_100166920;
  v117 = v116;
  *(void *)buf = v35;
  sub_1000172D0((uint64_t)v97, (uint64_t)v116);
  uint64_t v36 = v117;
  if (v117 == v116)
  {
    uint64_t v37 = 4LL;
    uint64_t v36 = v116;
  }

  else
  {
    if (!v117) {
      goto LABEL_48;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_48:
  sub_100010FDC((uint64_t *)(a1 + 72), (uint64_t *)buf);
  sub_100016DE0((uint64_t *)buf);
  int v38 = *__error();
  if (sub_1000B8654())
  {
    v116[0] = 0LL;
    uint64_t v39 = sub_1000B85DC();
    int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68158466;
    *(_DWORD *)&uint8_t buf[4] = 76;
    if (v41) {
      uint64_t v42 = 3LL;
    }
    else {
      uint64_t v42 = 2LL;
    }
    *(_WORD *)v97 = 2080;
    *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
    __int16 v98 = 1024;
    unsigned int v99 = v14;
    __int16 v100 = 1024;
    *(_DWORD *)v101 = 8;
    LODWORD(v86) = 30;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl( v42,  v116,  0LL,  0LL,  &_mh_execute_header,  v40,  0LL,  "%.*s: Queue depth:        %-10u ABI version:        %d",  (int)buf,  v86,  v88,  (_DWORD)v89);

    if (v43)
    {
      fprintf(__stderrp, "%s\n", v43);
      free(v43);
    }
  }

  else
  {
    uint64_t v44 = sub_1000B85DC();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68158466;
      *(_DWORD *)&uint8_t buf[4] = 76;
      *(_WORD *)v97 = 2080;
      *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      __int16 v98 = 1024;
      unsigned int v99 = v14;
      __int16 v100 = 1024;
      *(_DWORD *)v101 = 8;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%.*s: Queue depth:        %-10u ABI version:        %d",  buf,  0x1Eu);
    }
  }

  *__error() = v38;
  int v46 = *__error();
  if (sub_1000B8654())
  {
    v116[0] = 0LL;
    uint64_t v47 = sub_1000B85DC();
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v49 = 3LL;
    }
    else {
      uint64_t v49 = 2LL;
    }
    *(_DWORD *)buf = 68158722;
    *(_DWORD *)&uint8_t buf[4] = 76;
    *(_WORD *)v97 = 2080;
    *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
    __int16 v98 = 1024;
    unsigned int v99 = v108;
    __int16 v100 = 1024;
    *(_DWORD *)v101 = v112;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v110;
    LODWORD(v86) = 36;
    uint64_t v50 = (char *)_os_log_send_and_compose_impl( v49,  v116,  0LL,  0LL,  &_mh_execute_header,  v48,  0LL,  "%.*s: Max IO size:        %-10d Num shared buffers: %-6d Extra buffers: %d",  (int)buf,  v86,  v88,  (_DWORD)v89,  (_DWORD)v90);

    if (v50)
    {
      fprintf(__stderrp, "%s\n", v50);
      free(v50);
    }
  }

  else
  {
    uint64_t v51 = sub_1000B85DC();
    uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68158722;
      *(_DWORD *)&uint8_t buf[4] = 76;
      *(_WORD *)v97 = 2080;
      *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      __int16 v98 = 1024;
      unsigned int v99 = v108;
      __int16 v100 = 1024;
      *(_DWORD *)v101 = v112;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v110;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "%.*s: Max IO size:        %-10d Num shared buffers: %-6d Extra buffers: %d",  buf,  0x24u);
    }
  }

  *__error() = v46;
  int v53 = *__error();
  if (sub_1000B8654())
  {
    v116[0] = 0LL;
    uint64_t v54 = sub_1000B85DC();
    uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    BOOL v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    v57 = "YES";
    *(_DWORD *)&uint8_t buf[4] = 76;
    *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
    __int16 v98 = 1024;
    if (v56) {
      uint64_t v58 = 3LL;
    }
    else {
      uint64_t v58 = 2LL;
    }
    *(_DWORD *)buf = 68158722;
    *(_WORD *)v97 = 2080;
    if (!v113) {
      v57 = "NO";
    }
    unsigned int v99 = v109;
    __int16 v100 = 2080;
    *(void *)v101 = v57;
    *(_WORD *)&v101[8] = 2048;
    v102 = v89;
    LODWORD(v86) = 44;
    uint64_t v59 = (char *)_os_log_send_and_compose_impl( v58,  v116,  0LL,  0LL,  &_mh_execute_header,  v55,  0LL,  "%.*s: Shared buffer size: %-10d Read only:          %-6s Command size:  %ld",  (int)buf,  v86,  v88,  v89,  v90);

    if (v59)
    {
      fprintf(__stderrp, "%s\n", v59);
      free(v59);
    }
  }

  else
  {
    uint64_t v60 = sub_1000B85DC();
    int v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      if (v113) {
        uint64_t v62 = "YES";
      }
      else {
        uint64_t v62 = "NO";
      }
      *(_DWORD *)buf = 68158722;
      *(_DWORD *)&uint8_t buf[4] = 76;
      *(_WORD *)v97 = 2080;
      *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      __int16 v98 = 1024;
      unsigned int v99 = v109;
      __int16 v100 = 2080;
      *(void *)v101 = v62;
      *(_WORD *)&v101[8] = 2048;
      v102 = v89;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "%.*s: Shared buffer size: %-10d Read only:          %-6s Command size:  %ld",  buf,  0x2Cu);
    }
  }

  *__error() = v53;
  uint64_t v107 = *(void *)(a1 + 72);
  uint64_t v63 = IOConnectCallMethod(*(_DWORD *)(a1 + 4), 0, 0LL, 0, inputStruct, 0x440uLL, 0LL, 0LL, 0LL, 0LL);
  if ((_DWORD)v63)
  {
    int v71 = *__error();
    if (sub_1000B8654())
    {
      v116[0] = 0LL;
      uint64_t v72 = sub_1000B85DC();
      __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        uint64_t v74 = 3LL;
      }
      else {
        uint64_t v74 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 76;
      *(_WORD *)v97 = 2080;
      *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      __int16 v98 = 1024;
      unsigned int v99 = v63;
      LODWORD(v87) = 24;
      v75 = (char *)_os_log_send_and_compose_impl( v74,  v116,  0LL,  0LL,  &_mh_execute_header,  v73,  16LL,  "%.*s: IOConnectCallMethod returned %d",  (int)buf,  v87,  v88);

      if (v75)
      {
        fprintf(__stderrp, "%s\n", v75);
        free(v75);
      }
    }

    else
    {
      uint64_t v84 = sub_1000B85DC();
      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 76;
        *(_WORD *)v97 = 2080;
        *(void *)&v97[2] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
        __int16 v98 = 1024;
        unsigned int v99 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "%.*s: IOConnectCallMethod returned %d",  buf,  0x18u);
      }
    }

    *__error() = v71;
    v76 = __cxa_allocate_exception(0x40uLL);
    if (v63 >> 26 == 56)
    {
      sub_100004D60((uint64_t)buf);
      sub_100004E4C(buf, (uint64_t)"Driver returned error code ", 27LL);
      std::ostream::operator<<(buf, v63);
      sub_10001161C((uint64_t)v76, (uint64_t)buf, 0x96u);
    }

    v77 = "Can't connect to driver";
    uint64_t v78 = 155LL;
LABEL_96:
    void *v76 = &off_100189E78;
    v79 = std::generic_category();
    v76[1] = v78;
    v76[2] = v79;
    *((_BYTE *)v76 + 24) = 0;
    *((_BYTE *)v76 + 4std::ostream::~ostream(v2, v3 + 8) = 0;
    v76[7] = v77;
  }
}

void sub_1000102F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

void sub_100010300( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  JUMPOUT(0x100010598LL);
}

void sub_100010350( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x100010598LL);
}

void sub_100010510( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x100010598LL);
}

void sub_100010528(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000491C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100010538( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x100010598LL);
}

void sub_100010560( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x100010598LL);
}

void sub_1000105A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v56 = 0LL;
  v57 = 0LL;
  uint64_t v58 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) backendXPC]);
  unsigned int v5 = v4;
  if (v4) {
    [v4 backend];
  }
  else {
    __int128 v53 = 0uLL;
  }
  sub_100116E98((uint64_t)&v53, &lpsrc);
  unsigned int v6 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  if (*((void *)&v53 + 1))
  {
    unsigned __int16 v7 = (unint64_t *)(*((void *)&v53 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (lpsrc
  {
    *(void *)&__int128 v53 = v9;
    *((void *)&v53 + 1) = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    sub_100010B2C(&v56, &v53);
  }

  else
  {
    __int128 v53 = 0uLL;
  }

  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  if (*((void *)&v53 + 1))
  {
    unsigned int v13 = (unint64_t *)(*((void *)&v53 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  __int128 v53 = 0uLL;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shadowChain]);
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 nodes]);

  id v17 = [v16 countByEnumeratingWithState:&v49 objects:v59 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v50;
    do
    {
      for (i = 0LL; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v50 != v18) {
          objc_enumerationMutation(v16);
        }
        int v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v49 + 1) + 8 * (void)i) fileBackend]);
        __int16 v21 = v20;
        if (v20) {
          [v20 backend];
        }
        else {
          __int128 v46 = 0uLL;
        }
        sub_100116E98((uint64_t)&v46, &v47);
        unsigned __int8 v22 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        if (*((void *)&v46 + 1))
        {
          char v23 = (unint64_t *)(*((void *)&v46 + 1) + 8LL);
          do
            unint64_t v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        if (v47
        {
          *(void *)&__int128 v46 = v25;
          *((void *)&v46 + 1) = v48;
          if (v48)
          {
            unint64_t v26 = (unint64_t *)&v48->__shared_owners_;
            do
              unint64_t v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }

          sub_100010B2C(&v56, &v46);
        }

        else
        {
          __int128 v46 = 0uLL;
        }

        uint64_t v28 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        if (*((void *)&v46 + 1))
        {
          uint64_t v29 = (unint64_t *)(*((void *)&v46 + 1) + 8LL);
          do
            unint64_t v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }

        uint64_t v31 = v48;
        if (v48)
        {
          uint64_t v32 = (unint64_t *)&v48->__shared_owners_;
          do
            unint64_t v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }

      id v17 = [v16 countByEnumeratingWithState:&v49 objects:v59 count:16];
    }

    while (v17);
  }

  __int128 v43 = 0uLL;
  uint64_t v44 = 0LL;
  sub_100016FE0((char *)&v43, v56, v57, (v57 - v56) >> 4);
  uint64_t v34 = a1 + 112;
  uint64_t v45 = v34;
  *(void *)(a2 + 24) = 0LL;
  char v35 = (char *)operator new(0x28uLL);
  *(void *)char v35 = off_100167350;
  *(_OWORD *)(v35 + std::ostream::~ostream(v2, v3 + 8) = v43;
  uint64_t v36 = v44;
  __int128 v43 = 0uLL;
  uint64_t v44 = 0LL;
  *((void *)v35 + 3) = v36;
  *((void *)v35 + 4) = v34;
  *(void *)(a2 + 24) = v35;
  uint64_t v47 = &v43;
  sub_1000170C0((void ***)&v47);
  uint64_t v37 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  if (*((void *)&v53 + 1))
  {
    int v38 = (unint64_t *)(*((void *)&v53 + 1) + 8LL);
    do
      unint64_t v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  int v40 = v55;
  if (v55)
  {
    BOOL v41 = (unint64_t *)&v55->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  lpsrc = &v56;
  sub_1000170C0((void ***)&lpsrc);
}

void sub_1000109E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, void **a28, uint64_t a29, char a30)
{
  a28 = (void **)&a30;
  sub_1000170C0(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100010AB4@<X0>( uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = operator new(0xF8uLL);
  uint64_t result = sub_100017638((uint64_t)v10, a1, a3, a2, a4);
  *a5 = v10;
  return result;
}

void sub_100010B14(_Unwind_Exception *a1)
{
}

uint64_t sub_100010B2C(char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unsigned __int16 v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v31 = result;
    int v16 = (char *)sub_100016F60(result, v15);
    uint64_t v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)uint64_t v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      int v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    char v23 = *a1;
    unsigned __int8 v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      unint64_t v24 = &v16[16 * v12];
    }

    else
    {
      unint64_t v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)unsigned __int8 v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    unint64_t v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v29 = v26;
    unint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    unint64_t v30 = v27;
    uint64_t v28 = v26.i64[0];
    uint64_t result = sub_100016F94((uint64_t)&v28);
  }

  else
  {
    *(void *)unsigned __int16 v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      unint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    unint64_t v11 = v7 + 16;
  }

  a1[1] = v11;
  return result;
}

uint64_t sub_100010C6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  int v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;

  int v4 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v14 = 0LL;
    uint64_t v5 = sub_1000B85DC();
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v7 = 3LL;
    }
    else {
      uint64_t v7 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 27;
    __int16 v16 = 2080;
    uint64_t v17 = "DIIOManager::~DIIOManager()";
    LODWORD(v13) = 18;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl( v7,  &v14,  0LL,  0LL,  &_mh_execute_header,  v6,  0LL,  "%.*s: Closing IO user client",  (int)buf,  v13);

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }

  else
  {
    uint64_t v9 = sub_1000B85DC();
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 27;
      __int16 v16 = 2080;
      uint64_t v17 = "DIIOManager::~DIIOManager()";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%.*s: Closing IO user client", buf, 0x12u);
    }
  }

  *__error() = v4;
  IOServiceClose(*(_DWORD *)(a1 + 4));
  if (*(_DWORD *)a1)
  {
    IOObjectRelease(*(_DWORD *)a1);
    *(_DWORD *)a1 = 0;
  }

  sub_100016DE0((uint64_t *)(a1 + 72));
  *(void *)buf = a1 + 48;
  sub_100016E84((void ***)buf);

  if (*(_BYTE *)(a1 + 32)) {
    sub_10000492C((uint64_t *)(a1 + 24));
  }
  sub_100016F10((void ***)(a1 + 16), 0LL);
  uint64_t v11 = *(void *)(a1 + 8);
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  return a1;
}

void sub_100010E94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000491C(a1);
}

uint64_t *sub_100010EA4(uint64_t *result)
{
  if (*((_BYTE *)result + 32))
  {
    int v1 = result;
    uint64_t result = sub_10000492C(result + 3);
    *((_BYTE *)v1 + 32) = 0;
  }

  return result;
}

uint64_t sub_100010ED4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8LL))(*(void *)(a1 + 8));
}

uint64_t sub_100010EE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t result = sub_10001101C(a3, a2);
  if (a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      sub_100004918((uint64_t)&v10, *(_DWORD *)(a1 + 4), v7);
      unint64_t v8 = a3[1];
      if (v8 >= a3[2])
      {
        uint64_t v9 = sub_100017540(a3, (uint64_t)&v10);
      }

      else
      {
        sub_1000047F4(a3[1]);
        *(void *)unint64_t v8 = off_100165488;
        *(_DWORD *)(v8 + std::ostream::~ostream(v2, v3 + 8) = v11;
        int v11 = 0;
        uint64_t v9 = v8 + 16;
        a3[1] = v8 + 16;
      }

      a3[1] = v9;
      uint64_t result = sub_100005194((uint64_t)&v10);
      ++v7;
    }

    while (a2 != v7);
  }

  return result;
}

void sub_100010FA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *sub_100010FDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  sub_100016E38(a1, v4);
  sub_100017334(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t sub_10001101C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100016F4C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100016F60(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_1000173C4(a1, v7);
    return sub_1000174F0((uint64_t)v7);
  }

  return result;
}

void sub_100011098(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000110AC(uint64_t a1, void *a2, uint64_t *a3)
{
  kern_return_t v5;
  int v6;
  uint64_t v7;
  os_log_s *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_s *v13;
  const char *v15;
  uint64_t v16;
  uint32_t outputCnt;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t output[2];
  uint32_t outputCnt = 2;
  uint64_t v5 = IOConnectCallScalarMethod(*(_DWORD *)(a1 + 4), 3u, 0LL, 0, output, &outputCnt);
  if (v5)
  {
    uint64_t v6 = *__error();
    if (sub_1000B8654())
    {
      __int16 v16 = 0LL;
      uint64_t v7 = sub_1000B85DC();
      unint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v9 = 3LL;
      }
      else {
        uint64_t v9 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      __int128 v19 = 56;
      int v20 = 2080;
      unint64_t v21 = "BOOL DIIOManager::fetchCacheStat(uint64_t &, uint64_t &)";
      LODWORD(v15) = 18;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( v9,  &v16,  0LL,  0LL,  &_mh_execute_header,  v8,  0LL,  "%.*s: fetch failed",  (int)buf,  v15);

      if (v10)
      {
        fprintf(__stderrp, "%s\n", v10);
        free(v10);
      }
    }

    else
    {
      uint64_t v12 = sub_1000B85DC();
      unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        __int128 v19 = 56;
        int v20 = 2080;
        unint64_t v21 = "BOOL DIIOManager::fetchCacheStat(uint64_t &, uint64_t &)";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%.*s: fetch failed", buf, 0x12u);
      }
    }

    *__error() = v6;
  }

  else
  {
    int v11 = output[1];
    *a2 = output[0];
    *a3 = v11;
  }

  return v5 == 0;
}

BOOL sub_100011284(uint64_t a1, void *outputStruct)
{
  kern_return_t v2;
  int v3;
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_s *v9;
  const char *v11;
  uint64_t v12;
  size_t outputStructCnt;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  outputStructCnt = 1924LL;
  uint64_t v2 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 4), 4u, 0LL, 0LL, outputStruct, &outputStructCnt);
  if (v2)
  {
    int v3 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v12 = 0LL;
      uint64_t v4 = sub_1000B85DC();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v6 = 3LL;
      }
      else {
        uint64_t v6 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      unint64_t v15 = 59;
      __int16 v16 = 2080;
      uint64_t v17 = "BOOL DIIOManager::fetchRequestsStat(DIRequestsStatsArray *)";
      LODWORD(v11) = 18;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( v6,  &v12,  0LL,  0LL,  &_mh_execute_header,  v5,  0LL,  "%.*s: fetch failed",  (int)buf,  v11);

      if (v7)
      {
        fprintf(__stderrp, "%s\n", v7);
        free(v7);
      }
    }

    else
    {
      unint64_t v8 = sub_1000B85DC();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        unint64_t v15 = 59;
        __int16 v16 = 2080;
        uint64_t v17 = "BOOL DIIOManager::fetchRequestsStat(DIRequestsStatsArray *)";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%.*s: fetch failed", buf, 0x12u);
      }
    }

    *__error() = v3;
  }

  return v2 == 0;
}

uint64_t sub_100011444(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24)) {
    sub_1000114C0((const void **)(a1 + 16));
  }
  return sub_1000114F0(a1);
}

uint64_t sub_100011474(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  if (*(_BYTE *)(a1 + 64)) {
    sub_1000114C0((const void **)(a1 + 56));
  }
  sub_1000114F0(v2);
  if (*(_BYTE *)(a1 + 24)) {
    sub_1000114C0((const void **)(a1 + 16));
  }
  return sub_1000114F0(a1);
}

const void **sub_1000114C0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1000114F0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

uint64_t sub_100011548(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_1000115B4((_BYTE *)(a1 + 16), (uint64_t)(a2 + 2));
  *(void *)(a1 + 32) = a2[4];
  return a1;
}

void sub_1000115A0(_Unwind_Exception *a1)
{
}

_BYTE *sub_1000115B4(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    *(void *)a1 = 0LL;
    int v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }

  return a1;
}

void sub_100011600(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 8)) {
    sub_1000114C0((const void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001161C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_100189E78;
  unint64_t v6 = std::generic_category();
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  sub_1000049D8(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 1;
  return a1;
}

void sub_100011694(_Unwind_Exception *a1)
{
}

void sub_1000116A8()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_1000116D0(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *a1 = off_1001656D0;
  a1[1] = v4;
  sub_1000118C0((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_10001170C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100011730@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = sub_100011924(v4, *(void *)(a1 + 8), a1);
  *a2 = v4;
  return result;
}

void sub_100011774(_Unwind_Exception *a1)
{
}

void *sub_100011788(void *a1)
{
  *a1 = off_1001656D0;
  uint64_t v2 = a1 + 2;
  uint64_t v3 = (void *)a1[5];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = a1[1];
  a1[1] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
  }
  return a1;
}

void sub_1000117FC(char *__p)
{
  *(void *)__p = off_1001656D0;
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = *((void *)__p + 1);
  *((void *)__p + 1) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
  }
  operator delete(__p);
}

uint64_t sub_100011870(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100011878(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
  }
  return result;
}

uint64_t sub_1000118C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void *sub_100011924(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_100165730;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136LL))(a2);
  sub_100012460(a1 + 4);
  return a1;
}

void sub_100011974(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100011998(void *a1)
{
  *a1 = off_100165730;
  sub_1000114F0((uint64_t)(a1 + 4));
  uint64_t v2 = a1[3];
  a1[3] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  return a1;
}

void sub_1000119E0(void *a1)
{
  *a1 = off_100165730;
  sub_1000114F0((uint64_t)(a1 + 4));
  uint64_t v2 = a1[3];
  a1[3] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  operator delete(a1);
}

uint64_t sub_100011A28(uint64_t a1, uint64_t a2)
{
  if (sub_1000B866C())
  {
    *(void *)&__int128 v82 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
    *((void *)&v82 + 1) = 64LL;
    int v83 = 2;
    sub_100012568(v92, &v82);
    uint64_t v4 = v98;
    *(_DWORD *)((char *)&v98 + *(void *)(v98 - 24) + std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v98 + *(void *)(v98 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v98 + *(void *)(v4 - 24) + 8) |= 0x200u;
    sub_100004E4C(&v98, (uint64_t)"buffer[0]=[ptr=", 15LL);
    std::ostream::operator<<(&v98, *(void *)(a2 + 24));
    sub_100004E4C(&v98, (uint64_t)", size=", 7LL);
    std::ostream::operator<<(&v98, *(unsigned int *)(a2 + 32));
    sub_100004E4C(&v98, (uint64_t)"], cmd=", 7LL);
    sub_10003FBCC(&v98, a2);
    std::ostream::~ostream(&v98, off_1001658B0);
    sub_100012C44((uint64_t)v92);
    std::ios::~ios(&v99);
  }

  uint64_t v5 = 0xFFFFFFFFLL;
  switch(*(_BYTE *)(a2 + 16))
  {
    case 0:
    case 1:
      v91[0] = a2;
      v91[1] = a1 + 32;
      uint64_t v6 = a2 + 24;
      sub_100014830( v92,  (uint64_t *)(a2 + 24),  v91,  (uint64_t *)(a2 + 24 + 16LL * *(unsigned __int16 *)(a2 + 18)),  (uint64_t)v91,  *(void *)a2,  *(void *)(a2 + 8));
      uint64_t v7 = *(void **)(a1 + 24);
      if (*(_BYTE *)(a2 + 16))
      {
        sub_10002B7D4((uint64_t)v96, (uint64_t)&v82);
        sub_10002B3A4((uint64_t)v96, (uint64_t)&v88);
        uint64_t v5 = sub_1000128C0(v7);
        unint64_t v9 = v8;
        uint64_t v10 = v90;
        if (v90)
        {
          p_shared_owners = (unint64_t *)&v90->__shared_owners_;
          do
            unint64_t v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }

        unint64_t v13 = (std::__shared_weak_count *)*((void *)&v88 + 1);
        if (*((void *)&v88 + 1))
        {
          uint64_t v14 = (unint64_t *)(*((void *)&v88 + 1) + 8LL);
          do
            unint64_t v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        __int16 v16 = v85;
        if (v85)
        {
          uint64_t v17 = (unint64_t *)&v85->__shared_owners_;
          do
            unint64_t v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }

        __int128 v19 = (std::__shared_weak_count *)*((void *)&v82 + 1);
        if (*((void *)&v82 + 1))
        {
          int v20 = (unint64_t *)(*((void *)&v82 + 1) + 8LL);
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          goto LABEL_46;
        }

LABEL_47:
        if ((v5 & 0x8000000000000000LL) == 0) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }

      sub_10002B7D4((uint64_t)v96, (uint64_t)&v82);
      sub_10002B3A4((uint64_t)v96, (uint64_t)&v88);
      uint64_t v5 = sub_1000127FC((uint64_t)v7);
      unint64_t v9 = v23;
      unint64_t v24 = v90;
      if (v90)
      {
        __int128 v25 = (unint64_t *)&v90->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      unint64_t v27 = (std::__shared_weak_count *)*((void *)&v88 + 1);
      if (*((void *)&v88 + 1))
      {
        uint64_t v28 = (unint64_t *)(*((void *)&v88 + 1) + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }

      unint64_t v30 = v85;
      if (v85)
      {
        uint64_t v31 = (unint64_t *)&v85->__shared_owners_;
        do
          unint64_t v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }

      __int128 v19 = (std::__shared_weak_count *)*((void *)&v82 + 1);
      if (!*((void *)&v82 + 1)) {
        goto LABEL_47;
      }
      unint64_t v33 = (unint64_t *)(*((void *)&v82 + 1) + 8LL);
      do
        unint64_t v21 = __ldaxr(v33);
      while (__stlxr(v21 - 1, v33));
LABEL_46:
      if (v21) {
        goto LABEL_47;
      }
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v5 & 0x8000000000000000LL) == 0) {
        goto LABEL_49;
      }
LABEL_48:
      if ((_DWORD)v5)
      {
        *(void *)&__int128 v88 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
        *((void *)&v88 + 1) = 64LL;
        int v89 = 16;
        sub_100012984(&v82, &v88);
        sub_100004E4C(v87, (uint64_t)"IO returned an error for command ", 33LL);
        std::ostream::operator<<(v87, v5);
        sub_100012A2C((uint64_t)&v82);
        goto LABEL_90;
      }

  sub_1000CB468(a1, (uint64_t)v90, a3);
  for (unint64_t i = 28LL; i != 512; ++i)
  {
    if (v90[i])
    {
      uint64_t v60 = __cxa_allocate_exception(0x40uLL);
      unint64_t *v60 = &off_100189E78;
      unint64_t v61 = std::generic_category();
      v60[1] = 152LL;
      v60[2] = v61;
      *((_BYTE *)v60 + 24) = 0;
      *((_BYTE *)v60 + 4std::ostream::~ostream(v2, v3 + 8) = 0;
      v60[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }

  BOOL v41 = v89;
  if (v89)
  {
    unint64_t v42 = (unint64_t *)&v89->__shared_owners_;
    do
      __int128 v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  uint64_t v44 = v88;
  if (v88)
  {
    unint64_t v45 = (unint64_t *)&v88->__shared_owners_;
    do
      uint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  unint64_t v47 = v87;
  if (v87)
  {
    unint64_t v48 = (unint64_t *)&v87->__shared_owners_;
    do
      __int128 v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  __int128 v50 = v86;
  if (v86)
  {
    __int128 v51 = (unint64_t *)&v86->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  __int128 v53 = v85;
  if (v85)
  {
    uint64_t v54 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  BOOL v56 = v84;
  if (v84)
  {
    v57 = (unint64_t *)&v84->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  if (v81 && &v82 != __p) {
    operator delete(__p);
  }
  sub_100014E54((uint64_t)v78);
  sub_100016DE0((uint64_t *)&v90);
  return a1;
}

      unint64_t v32 = v4 + 7;
      do
      {
        unint64_t v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19) {
            unint64_t v33 = v19;
          }
          else {
            unint64_t v33 = *(v32 - 5);
          }
        }

        __n128 v34 = *v32;
        *(_DWORD *)__n128 v34 = v33;
        *(_BYTE *)(v34 + 4) = 1;
        sub_10003C758((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        char v35 = v32 + 8;
        uint64_t v36 = v32 + 1;
        v32 += 8;
      }

      while ((unint64_t)v36 <= v8);
      if (*((void *)&v42 + 1))
      {
        if (v43 != (void *)v41) {
          operator delete(v41);
        }
      }

      uint64_t v4 = v35 - 7;
      uint64_t v3 = (void *)v2[8];
      uint64_t v1 = v2[9];
      if (v35 - 7 == &v3[8 * v1]) {
        return sub_100106188(v37);
      }
    }
  }

  return result;
}

LABEL_49:
      sub_10002B3A4((uint64_t)v96, (uint64_t)&v88);
      v34.n128_f64[0] = sub_10002B7D4((uint64_t)v96, (uint64_t)&v82);
      for (unint64_t i = a2 + 24; i < v6 + 16 * (unint64_t)*(unsigned __int16 *)(a2 + 18); i += 16LL)
      {
        sub_100016640((uint64_t)&v84);
        uint64_t v36 = v85;
        if (v85)
        {
          uint64_t v37 = (unint64_t *)&v85->__shared_owners_;
          do
            unint64_t v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          *(_DWORD *)(i + std::ostream::~ostream(v2, v3 + 8) = v86;
          do
            unint64_t v39 = __ldaxr(v37);
          while (__stlxr(v39 - 1, v37));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }

        else
        {
          *(_DWORD *)(i + std::ostream::~ostream(v2, v3 + 8) = v86;
        }

        sub_10002C704((uint64_t)&v82);
      }

      int v40 = v85;
      if (v85)
      {
        BOOL v41 = (unint64_t *)&v85->__shared_owners_;
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v40->__on_zero_shared)(v40, v34);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      __int128 v43 = (std::__shared_weak_count *)*((void *)&v82 + 1);
      if (*((void *)&v82 + 1))
      {
        uint64_t v44 = (unint64_t *)(*((void *)&v82 + 1) + 8LL);
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v34);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      uint64_t v46 = sub_10002B6A4((uint64_t)v96);
      unint64_t v47 = *(void *)a2;
      if (v101 >= *(void *)a2 + v46 - v100) {
        unint64_t v48 = *(void *)a2 + v46 - v100;
      }
      else {
        unint64_t v48 = v101;
      }
      if (v9 <= v47 && v48 >= *(void *)(a2 + 8))
      {
        unint64_t v77 = v48 - v9;
        uint64_t v78 = i - v6;
      }

      else
      {
        *(void *)&__int128 v80 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
        *((void *)&v80 + 1) = 64LL;
        int v81 = 16;
        sub_100012A6C(&v82, &v80);
        sub_100004E4C(v87, (uint64_t)"Can't fulfill kernel's request. command: ", 41LL);
        sub_10003FBCC(v87, a2);
        *(_DWORD *)((char *)&v87[1] + *(void *)(v87[0] - 24LL)) = *(_DWORD *)((_BYTE *)&v87[1]
                                                                              + *(void *)(v87[0] - 24LL)) & 0xFFFFFFB5 | 8;
        char v79 = 48;
        sub_1000166BC(v87, &v79);
        uint64_t v75 = v87[0];
        *(void *)((char *)&v87[3] + *(void *)(v87[0] - 24LL)) = 2LL;
        *(_DWORD *)((char *)&v87[1] + *(void *)(v75 - 24)) |= 0x200u;
        sub_100004E4C(v87, (uint64_t)" io_start_offset: ", 18LL);
        std::ostream::operator<<(v87, v9);
        uint64_t v76 = v87[0];
        *(_DWORD *)((char *)&v87[1] + *(void *)(v87[0] - 24LL)) = *(_DWORD *)((_BYTE *)&v87[1]
                                                                              + *(void *)(v87[0] - 24LL)) & 0xFFFFFFB5 | 2;
        *(void *)((char *)&v87[3] + *(void *)(v76 - 24)) = 0LL;
        *(_DWORD *)((char *)&v87[1] + *(void *)(v76 - 24)) &= ~0x200u;
        sub_100004E4C(v87, (uint64_t)" io_size: ", 10LL);
        unint64_t v77 = v48 - v9;
        std::ostream::operator<<(v87, v77 + *(void *)a2);
        sub_100004E4C(v87, (uint64_t)" num_buffers: ", 14LL);
        uint64_t v78 = i - v6;
        std::ostream::operator<<(v87, v78 >> 4);
        sub_100012B14((uint64_t)&v82);
        unint64_t v47 = *(void *)a2;
      }

      *(void *)a2 = v9;
      *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v77 + v47;
      *(_WORD *)(a2 + 1std::ostream::~ostream(v2, v3 + 8) = (unint64_t)v78 >> 4;
      __int128 v50 = v90;
      if (v90)
      {
        __int128 v51 = (unint64_t *)&v90->__shared_owners_;
        do
          unint64_t v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }

      __int128 v53 = (std::__shared_weak_count *)*((void *)&v88 + 1);
      if (*((void *)&v88 + 1))
      {
        uint64_t v54 = (unint64_t *)(*((void *)&v88 + 1) + 8LL);
        do
          unint64_t v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }

      uint64_t v5 = 0LL;
LABEL_90:
      BOOL v56 = v105;
      if (v105)
      {
        v57 = (unint64_t *)&v105->__shared_owners_;
        do
          unint64_t v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }

      uint64_t v59 = v104;
      if (v104)
      {
        uint64_t v60 = (unint64_t *)&v104->__shared_owners_;
        do
          unint64_t v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }

      uint64_t v62 = v103;
      if (v103)
      {
        uint64_t v63 = (unint64_t *)&v103->__shared_owners_;
        do
          unint64_t v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }

      uint64_t v65 = v102;
      if (v102)
      {
        v66 = (unint64_t *)&v102->__shared_owners_;
        do
          unint64_t v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }

      v68 = v99;
      if (v99)
      {
        __int16 v69 = (unint64_t *)&v99->__shared_owners_;
        do
          unint64_t v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }

      int v71 = v97;
      if (v97)
      {
        uint64_t v72 = (unint64_t *)&v97->__shared_owners_;
        do
          unint64_t v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }

      if (v94 && &v95 != v93) {
        operator delete(v93);
      }
      sub_100014E54((uint64_t)v92);
      return v5;
    case 3:
    case 4:
      return sub_100012650(*(void **)(a1 + 24));
    case 5:
      (*(void (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
      return 0LL;
    case 6:
      return sub_100012720(a1, a2);
    default:
      return v5;
  }

void sub_100012374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100012460(void *a1)
{
  *a1 = 0LL;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &off_100165780;
  v2[1] = 0LL;
  v2[2] = 0LL;
  v2[3] = 0LL;
  a1[1] = v2;
  return a1;
}

void sub_1000124A0(void *a1)
{
}

void sub_1000124AC(_Unwind_Exception *a1)
{
}

void sub_1000124C4(std::__shared_weak_count *a1)
{
}

uint64_t sub_1000124DC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

BOOL sub_10001251C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

void *sub_100012568(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100012BC8((uint64_t)a1, a2);
  *a1 = off_1001657E8;
  a1[45] = &off_1001658E8;
  a1[46] = &off_100165910;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_1001657E8;
  a1[45] = off_100165870;
  a1[46] = off_100165898;
  return a1;
}

void sub_1000125EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100012610(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012650(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  }
  if (sub_1000B866C())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::flush(di_flush_mode)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    sub_100013200(v4, &v2);
    sub_100004E4C(&v5, (uint64_t)"Disk image is terminated, skipping flush", 40LL);
    std::ostream::~ostream(&v5, off_100165AD0);
    sub_100013364((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return 4294967290LL;
}

void sub_10001270C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100012720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8) >> 4;
  if (sub_1000B866C())
  {
    *(void *)&__int128 v5 = "CommandDispatcherImpl::CommandDispatcherContextImpl::unmap(const Command &)";
    *((void *)&v5 + 1) = 58LL;
    int v6 = 2;
    sub_100013920(v7, &v5);
    sub_100004E4C(&v8, (uint64_t)"Num extents: ", 13LL);
    std::ostream::operator<<(&v8, v3);
    std::ostream::~ostream(&v8, off_100165CF0);
    sub_100013B54((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  return sub_100013A08(*(void **)(a1 + 24));
}

void sub_1000127E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000127FC(uint64_t a1)
{
  if ((*(_BYTE *)(*(void *)(a1 + 8) + 8LL) & 1) == 0) {
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (sub_1000B866C())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 24LL;
    int v3 = 2;
    sub_1000151C8(v4, &v2);
    sub_100004E4C(&v5, (uint64_t)"Disk image is terminated, skipping read", 39LL);
    std::ostream::~ostream(&v5, off_100166130);
    sub_10001532C((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return -6LL;
}

void sub_1000128AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000128C0(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 8LL))(a1);
  }
  if (sub_1000B866C())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    sub_1000158E8(v4, &v2);
    sub_100004E4C(&v5, (uint64_t)"Disk image is terminated, skipping write", 40LL);
    std::ostream::~ostream(&v5, off_100166350);
    sub_100015A4C((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return -6LL;
}

void sub_100012970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100012984(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100016008((uint64_t)a1, a2);
  *a1 = off_1001664A8;
  a1[45] = &off_1001665A8;
  a1[46] = &off_1001665D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_1001664A8;
  a1[45] = off_100166530;
  a1[46] = off_100166558;
  return a1;
}

void sub_100012A08(_Unwind_Exception *a1)
{
}

uint64_t sub_100012A2C(uint64_t a1)
{
  return a1;
}

void *sub_100012A6C(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10001675C((uint64_t)a1, a2);
  *a1 = off_1001666C8;
  a1[45] = &off_1001667C8;
  a1[46] = &off_1001667F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_1001666C8;
  a1[45] = off_100166750;
  a1[46] = off_100166778;
  return a1;
}

void sub_100012AF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100012B14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012B54(uint64_t a1)
{
  uint64_t v2 = a1 + 576;
  sub_1000114F0(a1 + 688);
  sub_1000114F0(v2);
  sub_1000114F0(a1 + 528);
  sub_1000114F0(a1 + 416);
  sub_1000114F0(a1 + 360);
  sub_1000114F0(a1 + 272);
  if (*(void *)(a1 + 160))
  {
    int v3 = *(void **)(a1 + 144);
  }

  return sub_100014E54(a1);
}

uint64_t sub_100012BC8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100165980;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100012C30(_Unwind_Exception *a1)
{
}

uint64_t sub_100012C44(uint64_t a1)
{
  *(void *)a1 = off_100165980;
  sub_100012EBC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100012CE0(char *a1)
{
}

uint64_t sub_100012D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100012D58(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100012DA4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001658B0);
  sub_100012C44(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100012DDC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001658B0);
  sub_100012C44((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100012E1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001658B0);
  sub_100012C44(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100012E5C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001658B0);
  sub_100012C44((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100012EA8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100012C44(a1);
  operator delete(v1);
}

uint64_t sub_100012EBC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10001300C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100012FE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001300C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 69LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 69LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100013200(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000132E8((uint64_t)a1, a2);
  *a1 = off_100165A08;
  a1[45] = &off_100165B08;
  a1[46] = &off_100165B30;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100165A08;
  a1[45] = off_100165A90;
  a1[46] = off_100165AB8;
  return a1;
}

void sub_100013284(_Unwind_Exception *a1)
{
}

uint64_t sub_1000132A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000132E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100165BA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100013350(_Unwind_Exception *a1)
{
}

uint64_t sub_100013364(uint64_t a1)
{
  *(void *)a1 = off_100165BA0;
  sub_1000135DC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100013400(char *a1)
{
}

uint64_t sub_100013444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100013478(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000134C4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100165AD0);
  sub_100013364(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000134FC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100165AD0);
  sub_100013364((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001353C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100165AD0);
  sub_100013364(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001357C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100165AD0);
  sub_100013364((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000135C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100013364(a1);
  operator delete(v1);
}

uint64_t sub_1000135DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10001372C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100013704( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001372C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 191LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 191LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100013920(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100013AD8((uint64_t)a1, a2);
  *a1 = off_100165C28;
  a1[45] = &off_100165D28;
  a1[46] = &off_100165D50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100165C28;
  a1[45] = off_100165CB0;
  a1[46] = off_100165CD8;
  return a1;
}

void sub_1000139A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000139C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100013A08(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  }
  if (sub_1000B866C())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    sub_100014110(v4, &v2);
    sub_100004E4C(&v5, (uint64_t)"Disk image is terminated, skipping unmap", 40LL);
    std::ostream::~ostream(&v5, off_100165F10);
    sub_100014274((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return 4294967290LL;
}

void sub_100013AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100013AD8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100165DC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100013B40(_Unwind_Exception *a1)
{
}

uint64_t sub_100013B54(uint64_t a1)
{
  *(void *)a1 = off_100165DC0;
  sub_100013DCC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100013BF0(char *a1)
{
}

uint64_t sub_100013C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100013C68(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100013CB4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100165CF0);
  sub_100013B54(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100013CEC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100165CF0);
  sub_100013B54((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100013D2C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100165CF0);
  sub_100013B54(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100013D6C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100165CF0);
  sub_100013B54((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100013DB8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100013B54(a1);
  operator delete(v1);
}

uint64_t sub_100013DCC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100013F1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100013EF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100013F1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 156LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 156LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100014110(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000141F8((uint64_t)a1, a2);
  *a1 = off_100165E48;
  a1[45] = &off_100165F48;
  a1[46] = &off_100165F70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100165E48;
  a1[45] = off_100165ED0;
  a1[46] = off_100165EF8;
  return a1;
}

void sub_100014194(_Unwind_Exception *a1)
{
}

uint64_t sub_1000141B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000141F8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100165FE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100014260(_Unwind_Exception *a1)
{
}

uint64_t sub_100014274(uint64_t a1)
{
  *(void *)a1 = off_100165FE0;
  sub_1000144EC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100014310(char *a1)
{
}

uint64_t sub_100014354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100014388(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000143D4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100165F10);
  sub_100014274(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001440C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100165F10);
  sub_100014274((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001444C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100165F10);
  sub_100014274(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001448C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100165F10);
  sub_100014274((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000144D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100014274(a1);
  operator delete(v1);
}

uint64_t sub_1000144EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10001463C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100014614( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001463C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 173LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 173LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t *sub_100014830( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = sub_1000148C0((uint64_t)a1, a2, a3, a4);
  uint64_t v11 = a1[1];
  uint64_t v18 = *a1;
  uint64_t v12 = v18 + 24 * v11;
  uint64_t v13 = a1[19];
  uint64_t v16 = (unint64_t *)a1[18];
  uint64_t v17 = v12;
  os_log_type_t v15 = &v16[v13];
  sub_10002B504(v10 + 208, &v18, &v17, &v16, &v15, a6, a7);
  return a1;
}

void sub_1000148AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000148C0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = xmmword_1001380F0;
  sub_1000149A8((uint64_t *)a1, a2, a3, a4);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_1001380F0;
  sub_100014EAC(a1 + 144, v5);
  return a1;
}

void sub_100014938(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 160))
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }

  sub_100014E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001496C(uint64_t a1)
{
  if (*(void *)(a1 + 160))
  {
    uint64_t v2 = *(void **)(a1 + 144);
  }

  return sub_100014E54(a1);
}

void sub_1000149A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a4 == a2) {
    unint64_t v7 = 0LL;
  }
  else {
    unint64_t v7 = ((unint64_t)((char *)a4 - (char *)a2 - 16) >> 4) + 1;
  }
  if (v7 <= a1[2])
  {
    sub_100014BC0((uint64_t)a1, a2, a3, v7, (void *)*a1, a1[1]);
    a1[1] = v7;
  }

  else
  {
    if (v7 >= 0x555555555555556LL) {
      sub_100014AD4("get_next_capacity, allocator's max size reached");
    }
    uint64_t v9 = operator new(24 * v7);
    uint64_t v10 = (uint64_t *)*a1;
    if (*a1)
    {
      uint64_t v11 = a1[1];
      if (v11)
      {
        uint64_t v12 = *a1;
        do
        {
          --v11;
          uint64_t v12 = sub_1000114F0(v12) + 24;
        }

        while (v11);
      }

      a1[1] = 0LL;
      if (a1 + 3 != v10) {
        operator delete(v10);
      }
    }

    a1[1] = 0LL;
    a1[2] = v7;
    *a1 = (uint64_t)v9;
    sub_100014B24(a1, a2, a3, a4);
  }

void sub_100014AD4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100004B24(exception, a1);
}

void sub_100014B10(_Unwind_Exception *a1)
{
}

void *sub_100014B24(void *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = result[1];
  uint64_t v5 = *result + 24 * v4;
  if (a2 == a4)
  {
    unint64_t v7 = (void *)(*result + 24 * v4);
  }

  else
  {
    uint64_t v6 = *a3;
    unint64_t v7 = (void *)v5;
    do
    {
      _X11 = *a2;
      if (*(_BYTE *)(v6 + 16)) {
        __asm { PRFM            #0, [X11] }
      }

      else {
        __asm { PRFM            #0x10, [X11] }
      }

      uint64_t v15 = *(void *)(a3[1] + 8);
      if (v15)
      {
        uint64_t v16 = (unint64_t *)(v15 + 8);
        do
          unint64_t v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        uint64_t v6 = *a3;
      }

      uint64_t v18 = *(unsigned int *)(v6 + 20);
      *unint64_t v7 = _X11;
      v7[1] = v15;
      v7[2] = v18;
      a2 += 2;
      v7 += 3;
    }

    while (a2 != a4);
    uint64_t v4 = result[1];
  }

  result[1] = v4 - 0x5555555555555555LL * (((uint64_t)v7 - v5) >> 3);
  return result;
}

void sub_100014BC0( uint64_t a1, uint64_t *a2, void *a3, unint64_t a4, void *a5, unint64_t a6)
{
  unint64_t v11 = a4 - a6;
  if (a4 <= a6)
  {
    if (a4)
    {
      unint64_t v37 = a4;
      do
      {
        uint64_t v38 = *a3;
        _X8 = *a2;
        if (*(_BYTE *)(*a3 + 16LL)) {
          __asm { PRFM            #0, [X8] }
        }

        else {
          __asm { PRFM            #0x10, [X8] }
        }

        uint64_t v42 = *(void *)(a3[1] + 8LL);
        if (v42)
        {
          __int128 v43 = (unint64_t *)(v42 + 8);
          do
            unint64_t v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          uint64_t v38 = *a3;
        }

        uint64_t v45 = *(unsigned int *)(v38 + 20);
        *(void *)&__int128 v49 = _X8;
        *((void *)&v49 + 1) = v42;
        uint64_t v50 = v45;
        sub_100014DF0((uint64_t)a5, &v49);
        uint64_t v46 = (std::__shared_weak_count *)*((void *)&v49 + 1);
        a5[2] = v50;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            unint64_t v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }

        a2 += 2;
        a5 += 3;
        --v37;
      }

      while (v37);
    }

    if (a6 != a4)
    {
      do
      {
        sub_1000114F0((uint64_t)a5);
        a5 += 3;
      }

      while (!__CFADD__(v11++, 1LL));
    }
  }

  else
  {
    if (a6)
    {
      unint64_t v12 = a6;
      do
      {
        uint64_t v13 = *a3;
        _X8 = *a2;
        if (*(_BYTE *)(*a3 + 16LL)) {
          __asm { PRFM            #0, [X8] }
        }

        else {
          __asm { PRFM            #0x10, [X8] }
        }

        uint64_t v21 = *(void *)(a3[1] + 8LL);
        if (v21)
        {
          __int16 v22 = (unint64_t *)(v21 + 8);
          do
            unint64_t v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          uint64_t v13 = *a3;
        }

        uint64_t v24 = *(unsigned int *)(v13 + 20);
        *(void *)&__int128 v49 = _X8;
        *((void *)&v49 + 1) = v21;
        uint64_t v50 = v24;
        sub_100014DF0((uint64_t)a5, &v49);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)&v49 + 1);
        a5[2] = v50;
        if (v25)
        {
          __int16 v26 = (unint64_t *)&v25->__shared_owners_;
          do
            unint64_t v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }

        a2 += 2;
        a5 += 3;
        --v12;
      }

      while (v12);
    }

    unint64_t v28 = a4 - a6;
    if (a4 != a6)
    {
      uint64_t v29 = *a3;
      do
      {
        _X10 = *a2;
        if (*(_BYTE *)(v29 + 16)) {
          __asm { PRFM            #0, [X10] }
        }

        else {
          __asm { PRFM            #0x10, [X10] }
        }

        uint64_t v33 = *(void *)(a3[1] + 8LL);
        if (v33)
        {
          __n128 v34 = (unint64_t *)(v33 + 8);
          do
            unint64_t v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          uint64_t v29 = *a3;
        }

        uint64_t v36 = *(unsigned int *)(v29 + 20);
        *a5 = _X10;
        a5[1] = v33;
        a5[2] = v36;
        a2 += 2;
        a5 += 3;
        --v28;
      }

      while (v28);
    }
  }

uint64_t sub_100014DF0(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

uint64_t sub_100014E54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    __int128 v3 = *(void **)a1;
    do
    {
      --v2;
      __int128 v3 = (void *)(sub_1000114F0((uint64_t)v3) + 24);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100014EAC(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 >= v3)
  {
    uint64_t v5 = (char *)(*(void *)a1 + 8 * v3);
    if (*(void *)(a1 + 16) - v3 < v4)
    {
      sub_100014F2C((void **)a1, v5, v4, &v6);
    }

    else
    {
      sub_100014FB8(a1, v5, v5, v4);
      *(void *)(a1 + 8) += v4;
    }
  }

  else
  {
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a2;
  }

void sub_100014F2C(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v9 = sub_100015088((uint64_t)a1, a3);
  if (v9 >> 60) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  uint64_t v10 = (char *)v9;
  unint64_t v11 = (char *)operator new(8 * v9);
  sub_1000150FC(a1, v11, v10, a2, a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void sub_100014FB8(int a1, _BYTE *__src, _BYTE *__dst, unint64_t a4)
{
  if (a4)
  {
    int64_t v7 = __dst - __src;
    if (__dst == __src)
    {
      size_t v9 = 8 * a4;
      goto LABEL_9;
    }

    if (a4 <= v7 >> 3)
    {
      uint64_t v11 = 8 * a4;
      unint64_t v12 = &__dst[-8 * a4];
      memmove(__dst, v12, 8 * a4);
      if (v12 != __src) {
        memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
      }
      uint64_t v10 = __src;
      size_t v9 = v11;
      goto LABEL_13;
    }

    uint64_t v8 = v7 >> 3;
    if (__src) {
      memmove(&__src[8 * a4], __src, __dst - __src);
    }
    bzero(__src, v7);
    if (a4 != v8)
    {
      size_t v9 = 8 * (a4 - v8);
LABEL_9:
      uint64_t v10 = __dst;
LABEL_13:
      bzero(v10, v9);
    }
  }

unint64_t sub_100015088(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000150FC(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (*a1) {
    BOOL v12 = __dst == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = v12 || v10 == __src;
  uint64_t v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    uint64_t v14 = &__dst[__src - v10];
  }

  if (a5) {
    bzero(v14, 8 * a5);
  }
  if (__src)
  {
    uint64_t v15 = &v10[8 * (void)v11];
    if (v15 != __src && v14 != 0LL) {
      memmove(&v14[8 * a5], __src, v15 - __src);
    }
  }

  if (v10 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  unint64_t v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

void *sub_1000151C8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000152B0((uint64_t)a1, a2);
  *a1 = off_100166068;
  a1[45] = &off_100166168;
  a1[46] = &off_100166190;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100166068;
  a1[45] = off_1001660F0;
  a1[46] = off_100166118;
  return a1;
}

void sub_10001524C(_Unwind_Exception *a1)
{
}

uint64_t sub_100015270(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000152B0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100166200;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100015318(_Unwind_Exception *a1)
{
}

uint64_t sub_10001532C(uint64_t a1)
{
  *(void *)a1 = off_100166200;
  sub_1000155A4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000153C8(char *a1)
{
}

uint64_t sub_10001540C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100015440(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001548C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100166130);
  sub_10001532C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000154C4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100166130);
  sub_10001532C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100015504(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166130);
  sub_10001532C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100015544(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166130);
  sub_10001532C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100015590(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001532C(a1);
  operator delete(v1);
}

uint64_t sub_1000155A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000156F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000156CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000156F4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 159LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    BOOL v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 159LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000158E8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000159D0((uint64_t)a1, a2);
  *a1 = off_100166288;
  a1[45] = &off_100166388;
  a1[46] = &off_1001663B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100166288;
  a1[45] = off_100166310;
  a1[46] = off_100166338;
  return a1;
}

void sub_10001596C(_Unwind_Exception *a1)
{
}

uint64_t sub_100015990(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000159D0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100166420;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100015A38(_Unwind_Exception *a1)
{
}

uint64_t sub_100015A4C(uint64_t a1)
{
  *(void *)a1 = off_100166420;
  sub_100015CC4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100015AE8(char *a1)
{
}

uint64_t sub_100015B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100015B60(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100015BAC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100166350);
  sub_100015A4C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100015BE4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100166350);
  sub_100015A4C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100015C24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166350);
  sub_100015A4C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100015C64(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166350);
  sub_100015A4C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100015CB0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100015A4C(a1);
  operator delete(v1);
}

uint64_t sub_100015CC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100015E14((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100015DEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100015E14(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 166LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    BOOL v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 166LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100016008(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100166640;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100016070(_Unwind_Exception *a1)
{
}

uint64_t sub_100016084(uint64_t a1)
{
  *(void *)a1 = off_100166640;
  sub_1000162FC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100016120(char *a1)
{
}

uint64_t sub_100016164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100016198(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000161E4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100166570);
  sub_100016084(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001621C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100166570);
  sub_100016084((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001625C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166570);
  sub_100016084(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001629C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166570);
  sub_100016084((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000162E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100016084(a1);
  operator delete(v1);
}

uint64_t sub_1000162FC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10001644C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100016424( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001644C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 117LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    BOOL v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 117LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100016640(uint64_t a1)
{
  *(_OWORD *)(a1 + 72) = v5[1];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v5[0] + 1);
  if (*((void *)&v5[0] + 1))
  {
    uint64_t v3 = (unint64_t *)(*((void *)&v5[0] + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void *sub_1000166BC(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_100016748( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10001675C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100166860;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000167C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000167D8(uint64_t a1)
{
  *(void *)a1 = off_100166860;
  sub_100016A50(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100016874(char *a1)
{
}

uint64_t sub_1000168B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000168EC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100016938(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100166790);
  sub_1000167D8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100016970(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100166790);
  sub_1000167D8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000169B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166790);
  sub_1000167D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000169F0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166790);
  sub_1000167D8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100016A3C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000167D8(a1);
  operator delete(v1);
}

uint64_t sub_100016A50(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100016BA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100016B78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100016BA0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 133LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    BOOL v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 133LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100016D94()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_1001668F8;
}

void sub_100016DCC(std::exception *a1)
{
}

uint64_t *sub_100016DE0(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *sub_100016E38(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      sub_100016D94();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

void sub_100016E84(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }

      while (!v9);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100016F10(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    free(*v2);
    operator delete(v2);
  }

void sub_100016F4C()
{
}

void *sub_100016F60(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1000116A8();
  }
  return operator new(16 * a2);
}

uint64_t sub_100016F94(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_1000114F0(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_100016FE0(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100017080(result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        BOOL v9 = (unint64_t *)(v8 + 8);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      a2 += 2;
      v7 += 2;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_10001706C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_100017080(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100016F4C();
  }
  uint64_t result = (char *)sub_100016F60((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_1000170C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1000114F0(v4 - 16);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100017130()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_100017168(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      int v5 = v3 - 16;
      uint64_t v6 = v3 - 16;
      do
      {
        uint64_t v7 = *(void (***)(char *))v6;
        v6 -= 16;
        (*v7)(v5);
        BOOL v8 = v5 == v1;
        int v5 = v6;
      }

      while (!v8);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void *sub_1000171DC(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a3;
  a1[2] = a2;
  size_t v4 = a3 * a2;
  int v5 = valloc(a3 * a2);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    BOOL v8 = std::bad_alloc::bad_alloc(exception);
  }

  bzero(v5, v4);
  return a1;
}

void *sub_100017244()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_100166920;
  return result;
}

void sub_100017268(uint64_t a1, void *a2)
{
  *a2 = &off_100166920;
}

void sub_100017280(uint64_t a1, void **a2)
{
}

uint64_t sub_100017288(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000172C4()
{
  return &off_100166990;
}

uint64_t sub_1000172D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void *sub_100017334(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3] = v6;
      *(void *)(a2 + 24) = 0LL;
    }
  }

  else
  {
    a1[3] = 0LL;
  }

  return a1;
}

uint64_t sub_1000173C4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100017438((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100017438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      *(void *)sub_1000047F4(a7 + v11 - 16) = off_100165488;
      *(_DWORD *)(a7 + v11 - std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)(a3 + v11 - 8);
      *(_DWORD *)(a3 + v11 - std::ostream::~ostream(v2, v3 + 8) = 0;
      v11 -= 16LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_1000174C8(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 16LL)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000174F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100017540(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_100016F60(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  uint64_t v14 = v10;
  os_log_type_t v15 = &v10[16 * v4];
  uint64_t v16 = (uint64_t)v15;
  unint64_t v17 = &v10[16 * v9];
  uint64_t v11 = sub_1000047F4((uint64_t)v15);
  *(void *)uint64_t v11 = off_100165488;
  *(_DWORD *)(v11 + std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + std::ostream::~ostream(v2, v3 + 8) = 0;
  v16 += 16LL;
  sub_1000173C4(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000174F0((uint64_t)&v14);
  return v12;
}

void sub_100017624(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100017638(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  *(void *)a1 = off_1001669B0;
  uint64_t v8 = *a3;
  *a3 = 0LL;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v72 = (void *)(a1 + 16);
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v8;
  *(void *)(a1 + 64) = 1018212795LL;
  unint64_t v70 = (int64x2_t *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 850045863LL;
  int v71 = (void *)(a1 + 176);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 200) = a4;
  sub_1000118C0(a1 + 208, a5);
  *(void *)(a1 + 240) = 0LL;
  __int16 v69 = (uint64_t *)(a1 + 240);
  if (a4[1] != *a4)
  {
    unint64_t v9 = 0LL;
    do
    {
      sub_100004D60((uint64_t)&v79);
      sub_100004E4C(&v79, (uint64_t)"com.apple.diskimagesio_", 23LL);
      std::ostream::operator<<(&v79, v9);
      sub_100017EE8((uint64_t)&v87, (uint64_t)&v79);
      char v79 = v10;
      *(uint64_t (***)())((char *)&v79 + (void)*(v10 - 3)) = v11;
      if (v85 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf(&v80);
      unint64_t v12 = v5;
      std::ostream::~ostream(&v79, v5 + 8);
      std::ios::~ios(&v86);
      sub_1000049D8((uint64_t)&v88, v77);
      if (cap >= 0) {
        uint64_t v13 = (char *)v77;
      }
      else {
        uint64_t v13 = (char *)v77[0];
      }
      unint64_t v15 = *(void *)(a1 + 24);
      unint64_t v14 = *(void *)(a1 + 32);
      if (v15 >= v14)
      {
        uint64_t v17 = (uint64_t)(v15 - *v72) >> 3;
        uint64_t v18 = v14 - *v72;
        uint64_t v19 = v18 >> 2;
        else {
          unint64_t v20 = v19;
        }
        uint64_t v83 = a1 + 32;
        if (v20) {
          int v21 = (uint64_t (**)())sub_10001848C(a1 + 32, v20);
        }
        else {
          int v21 = 0LL;
        }
        char v79 = v21;
        __int128 v80 = (void (__cdecl **)(std::stringbuf *__hidden))&v21[v17];
        int v81 = v80;
        __int128 v82 = (char *)&v21[v20];
        sub_1000F969C((_DWORD)v21 + 8 * v17, v13);
        ++v81;
        sub_100018408(v72, &v79);
        unint64_t v16 = *(void *)(a1 + 24);
        sub_1000184C0((uint64_t)&v79);
      }

      else
      {
        sub_1000F969C(*(void *)(a1 + 24), v13);
        unint64_t v16 = v15 + 8;
        *(void *)(a1 + 24) = v15 + 8;
      }

      unint64_t v5 = v12;
      *(void *)(a1 + 24) = v16;
      if (SHIBYTE(cap) < 0) {
        operator delete(v77[0]);
      }
      v87 = v10;
      *(uint64_t (***)())((char *)&v87 + (void)*(v10 - 3)) = v11;
      if (v92 < 0) {
        operator delete(v91);
      }
      std::streambuf::~streambuf(&v88);
      std::ostream::~ostream(&v87, v12 + 8);
      std::ios::~ios(&v93);
      ++v9;
    }

    while (v9 < (uint64_t)(a4[1] - *a4) >> 4);
  }

  unint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = v22 >> 61 != 0;
  if (8 * v22 >= 0xFFFFFFFFFFFFFFF0LL) {
    BOOL v23 = 1;
  }
  if (v23) {
    size_t v24 = -1LL;
  }
  else {
    size_t v24 = 8 * v22 + 16;
  }
  uint64_t v25 = operator new[](v24);
  *uint64_t v25 = 8LL;
  v25[1] = v22;
  __int16 v26 = v25 + 2;
  if (v22) {
    bzero(v25 + 2, 8 * v22);
  }
  v87 = 0LL;
  uint64_t v27 = *v69;
  *__int16 v69 = (uint64_t)v26;
  if (v27)
  {
    sub_10001850C((uint64_t)v69, v27);
    uint64_t v28 = (uint64_t)v87;
    v87 = 0LL;
    if (v28) {
      sub_10001850C((uint64_t)&v87, v28);
    }
  }

  LODWORD(v79) = 500;
  sub_10001856C((int *)&v79, &v87);
  sub_100014DF0((uint64_t)v71, (__int128 *)&v87);
  uint64_t v29 = (std::__shared_weak_count *)v88.i64[0];
  if (v88.i64[0])
  {
    unint64_t v30 = (unint64_t *)(v88.i64[0] + 8);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  if (a4[1] != *a4)
  {
    uint64_t v32 = 0LL;
    unsigned int v33 = 0;
    do
    {
      sub_100004CB0(&v76, "com.apple.mach_rcvd");
      std::to_string(&v75, v33);
      if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __n128 v34 = &v75;
      }
      else {
        __n128 v34 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v75.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v76, (const std::string::value_type *)v34, size);
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      int64_t cap = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v77 = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v38 = *v72 + 8 * v32;
      unint64_t v39 = (void *)*v71;
      int v40 = (unint64_t *)(*v71 + 128LL);
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      sub_100019244(&v73, v39);
      uint64_t v42 = operator new(0x38uLL);
      unint64_t v5 = v32 | v5 & 0xFFFFFFFF00000000LL;
      v87 = &off_100166A60;
      v88.i64[0] = a1;
      v88.i64[1] = v5;
      int v89 = &v87;
      __int128 v82 = 0LL;
      sub_1000F9C40(v42, v77, v38, &v73, &v87, &v79);
      uint64_t v45 = v82;
      if (v82 == (char *)&v79)
      {
        uint64_t v45 = (char *)&v79;
        uint64_t v46 = 4LL;
      }

      else
      {
        if (!v82) {
          goto LABEL_55;
        }
        uint64_t v46 = 5LL;
      }

      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v45 + 8 * v46))(v45, v43, v44);
LABEL_55:
      unint64_t v47 = v89;
      if (v89 == &v87)
      {
        unint64_t v47 = &v87;
        uint64_t v48 = 4LL;
        goto LABEL_59;
      }

      if (v89)
      {
        uint64_t v48 = 5LL;
LABEL_59:
        ((void (*)(uint64_t (***)(), uint64_t, uint64_t))(*v47)[v48])(v47, v43, v44);
      }

      uint64_t v50 = *(void **)(a1 + 48);
      unint64_t v49 = *(void *)(a1 + 56);
      if ((unint64_t)v50 >= v49)
      {
        uint64_t v52 = ((uint64_t)v50 - v70->i64[0]) >> 3;
        uint64_t v53 = v49 - v70->i64[0];
        uint64_t v54 = v53 >> 2;
        else {
          unint64_t v55 = v54;
        }
        uint64_t v90 = a1 + 56;
        if (v55) {
          BOOL v56 = (char *)sub_10001848C(a1 + 56, v55);
        }
        else {
          BOOL v56 = 0LL;
        }
        v57 = &v56[8 * v52];
        unint64_t v58 = (uint64_t (***)())&v56[8 * v55];
        int v89 = v58;
        *(void *)v57 = v42;
        __int128 v51 = v57 + 8;
        v88.i64[1] = (uint64_t)(v57 + 8);
        uint64_t v60 = *(void **)(a1 + 40);
        uint64_t v59 = *(void **)(a1 + 48);
        if (v59 == v60)
        {
          int64x2_t v62 = vdupq_n_s64((unint64_t)v59);
        }

        else
        {
          do
          {
            uint64_t v61 = *--v59;
            *uint64_t v59 = 0LL;
            *((void *)v57 - 1) = v61;
            v57 -= 8;
          }

          while (v59 != v60);
          int64x2_t v62 = *v70;
          __int128 v51 = (void *)v88.i64[1];
          unint64_t v58 = v89;
        }

        *(void *)(a1 + 40) = v57;
        *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = v51;
        int64x2_t v88 = v62;
        uint64_t v63 = *(uint64_t (****)())(a1 + 56);
        *(void *)(a1 + 56) = v58;
        int v89 = v63;
        v87 = (uint64_t (**)())v62.i64[0];
        sub_100018824((uint64_t)&v87);
      }

      else
      {
        *uint64_t v50 = v42;
        __int128 v51 = v50 + 1;
      }

      *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = v51;
      unint64_t v64 = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }

      if (SHIBYTE(cap) < 0) {
        operator delete(v77[0]);
      }
      uint64_t v32 = ++v33;
    }

    while (v33 < (unint64_t)((uint64_t)(a4[1] - *a4) >> 4));
  }

  return a1;
}

void sub_100017D14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, std::condition_variable *a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *__p)
{
  uint64_t v31 = *a13;
  *a13 = 0LL;
  if (v31) {
    sub_10001850C((uint64_t)a13, v31);
  }
  uint64_t v32 = *(void **)(v29 + 232);
  if (v32 == (void *)a9)
  {
    uint64_t v33 = 4LL;
    uint64_t v32 = (void *)a9;
  }

  else
  {
    if (!v32) {
      goto LABEL_8;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_8:
  sub_1000114F0(a19);
  std::mutex::~mutex(a10);
  std::condition_variable::~condition_variable(a11);
  __p = a15;
  sub_1000192B8((void ***)&__p);
  __p = a20;
  sub_100019334((void ***)&__p);
  uint64_t v34 = *(void *)(v29 + 8);
  *(void *)(v29 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 16LL))(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100017EE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  uint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  uint64_t v7 = (std::ios_base *)(a2 + *(void *)(*(void *)a2 - 24LL));
  std::ios_base::move(v6, v7);
  v6[1].__vftable = v7[1].__vftable;
  v7[1].__vftable = 0LL;
  v6[1].__fmtflags_ = v7[1].__fmtflags_;
  *(void *)(a1 + *(void *)(*(void *)a1 - 24LL) + 40) = std::stringbuf::basic_stringbuf( (std::stringbuf *)(a1 + 8),  (std::stringbuf *)(a2 + 8));
  return a1;
}

void sub_100017FB4(_Unwind_Exception *a1)
{
}

uint64_t sub_100017FDC@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v4 = **(void **)(result + 200);
  if (*(void *)(*(void *)(result + 200) + 8LL) != v4)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    do
    {
      uint64_t result = sub_1000F9C44(*(void *)(*(void *)(v2 + 40) + 8 * v6++), v4 + v5, 0LL);
      uint64_t v4 = **(void **)(v2 + 200);
      v5 += 16LL;
    }

    while (v6 < (*(void *)(*(void *)(v2 + 200) + 8LL) - v4) >> 4);
  }

  *a2 = v2;
  return result;
}

void *sub_100018050(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[5];
  uint64_t v3 = (uint64_t *)a1[6];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    sub_1000F9C60(v4);
  }

  *(void *)&__int128 v7 = "void ExecutionEngineCommand<CommandQueue, MachPort>::signal_terminate() [Container = CommandQueue, Port = MachPort]";
  *((void *)&v7 + 1) = 69LL;
  int v8 = 0;
  sub_1000193A4(v9, &v7);
  sub_100004E4C(&v11, (uint64_t)"Cancelling mach ports...", 24LL);
  std::ostream::~ostream(&v11, off_100166DE0);
  sub_100019760((uint64_t)v9);
  std::ios::~ios(v12);
  sub_100018668(a1[22]);
  *(void *)&__int128 v7 = "void ExecutionEngineCommand<CommandQueue, MachPort>::signal_terminate() [Container = CommandQueue, Port = MachPort]";
  *((void *)&v7 + 1) = 69LL;
  int v8 = 0;
  sub_10001948C(v9, &v7);
  sub_100004E4C(&v11, (uint64_t)"Waiting for barrier to complete", 31LL);
  std::ostream::~ostream(&v11, off_100167000);
  sub_100019D98((uint64_t)v9);
  std::ios::~ios(v12);
  v9[0] = &off_1001671D0;
  v9[1] = a1;
  unint64_t v10 = v9;
  sub_100019574((uint64_t)a1, (uint64_t)v9);
  uint64_t result = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v9;
  }

  else
  {
    if (!v10) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1000181C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v18 = a16;
  if (a16 == v16)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018228(uint64_t a1)
{
  *(void *)a1 = off_1001669B0;
  uint64_t v4 = *(void *)(a1 + 240);
  uint64_t v2 = (void *)(a1 + 240);
  uint64_t v3 = v4;
  *uint64_t v2 = 0LL;
  if (v4) {
    sub_10001850C((uint64_t)v2, v3);
  }
  uint64_t v5 = *(void **)(a1 + 232);
  if (v5 == (void *)(a1 + 208))
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = (void *)(a1 + 208);
  }

  else
  {
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  sub_1000114F0(a1 + 176);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  unint64_t v9 = (void **)(a1 + 40);
  sub_1000192B8(&v9);
  unint64_t v9 = (void **)(a1 + 16);
  sub_100019334(&v9);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
  }
  return a1;
}

void sub_1000182EC(char *a1)
{
  *(void *)a1 = off_1001669B0;
  uint64_t v4 = *((void *)a1 + 30);
  uint64_t v2 = a1 + 240;
  uint64_t v3 = v4;
  *uint64_t v2 = 0LL;
  if (v4) {
    sub_10001850C((uint64_t)v2, v3);
  }
  uint64_t v5 = (char *)*((void *)a1 + 29);
  if (v5 == a1 + 208)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = a1 + 208;
  }

  else
  {
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*(void *)v5 + 8 * v6))();
LABEL_8:
  sub_1000114F0((uint64_t)(a1 + 176));
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  int v8 = (void **)(a1 + 40);
  sub_1000192B8(&v8);
  int v8 = (void **)(a1 + 16);
  sub_100019334(&v8);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
  }
  operator delete(a1);
}

void sub_1000183B4(uint64_t a1)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 112);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 112));
  std::condition_variable::wait((std::condition_variable *)(a1 + 64), &v2);
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

void *sub_100018408(void *a1, void *a2)
{
  uint64_t v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
    uint64_t result = sub_1000F96A0(result - 1, --v4);
  a2[1] = result;
  uint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_10001848C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1000116A8();
  }
  return operator new(8 * a2);
}

uint64_t sub_1000184C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_1000F95F0((dispatch_object_s **)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10001850C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v2 = *(void *)(a2 - 8);
    uint64_t v4 = (void *)(a2 - 16);
    if (v2)
    {
      uint64_t v5 = 8 * v2;
      do
      {
        uint64_t v6 = *(void *)(v3 + v5);
        *(void *)(v3 + v5) = 0LL;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        }
        v5 -= 8LL;
      }

      while (v5);
    }

    operator delete[](v4);
  }

void sub_10001856C(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[1] = 0LL;
  v4[2] = 0LL;
  *uint64_t v4 = off_100166A10;
  uint64_t v5 = *a1;
  v4[4] = 0LL;
  v4[5] = 1018212795LL;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0LL;
  v4[11] = 850045863LL;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + std::ostream::~ostream(v2, v3 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  v4[20] = v5;
  v4[3] = 0LL;
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_100018774((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_1000185E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100166A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000185F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100166A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100018618(uint64_t a1)
{
  return sub_100018624(a1 + 24);
}

uint64_t sub_100018624(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100018668(uint64_t a1)
{
  v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v11.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 < 1) {
    goto LABEL_17;
  }
  uint64_t v4 = (std::condition_variable *)(a1 + 16);
  std::chrono::steady_clock::now();
  v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (!v5.__d_.__rep_)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 0LL;
    goto LABEL_11;
  }

  if (v5.__d_.__rep_ < 1)
  {
    if ((unint64_t)v5.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 0x8000000000000000LL;
      goto LABEL_11;
    }

LABEL_10:
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 1000 * v5.__d_.__rep_;
    goto LABEL_11;
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_11:
  uint64_t v7 = 1000000 * v3;
  uint64_t v8 = v7 ^ 0x7FFFFFFFFFFFFFFFLL;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = v6 + v7;
  if (v6 <= v8) {
    v10.__d_.__rep_ = v9;
  }
  else {
    v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
  }
  std::condition_variable::__do_timed_wait(v4, &v11, v10);
  std::chrono::steady_clock::now();
LABEL_17:
  if (v11.__owns_) {
    std::mutex::unlock(v11.__m_);
  }
}

void sub_100018774(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      std::chrono::system_clock::time_point v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

uint64_t sub_100018824(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - std::ostream::~ostream(v2, v3 + 8) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_10001888C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100166A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v2, v3 + 8) = result;
  return result;
}

__n128 sub_1000188C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100166A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::ostream::~ostream(v2, v3 + 8) = result;
  return result;
}

uint64_t sub_1000188E4(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)a2 + 20LL) != 1) {
    return sub_100018954(*(void *)(result + 8), *(_DWORD *)(result + 16), 1);
  }
  return result;
}

uint64_t sub_10001890C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100018948()
{
  return &off_100166CF0;
}

uint64_t sub_100018954(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a1 + 240);
  uint64_t v8 = **(void **)(a1 + 192) + *(void *)(*(void *)(a1 + 192) + 8LL) * a2;
  uint64_t v9 = *(void *)(v7 + 8LL * a2);
  if (!v9)
  {
    (***(void (****)(void *__return_ptr))(a1 + 8))(v15);
    uint64_t v12 = v15[0];
    v15[0] = 0LL;
    uint64_t v13 = *(void *)(v7 + 8 * v6);
    *(void *)(v7 + 8 * v6) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      uint64_t v14 = v15[0];
      v15[0] = 0LL;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
      }
    }

    uint64_t v9 = *(void *)(v7 + 8 * v6);
  }

  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16LL))(v9, v8);
  if (a3) {
    sub_100018BCC(a1 + 208, v8, a2, v10);
  }
  return v10;
}

void *sub_100018AE4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100018C0C((uint64_t)a1, a2);
  *a1 = off_100166AE8;
  a1[45] = &off_100166BE8;
  a1[46] = &off_100166C10;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100166AE8;
  a1[45] = off_100166B70;
  a1[46] = off_100166B98;
  return a1;
}

void sub_100018B68(_Unwind_Exception *a1)
{
}

uint64_t sub_100018B8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100018BCC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7 = a3;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100016D94();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *))(*(void *)v4 + 48LL))(v4, a2, &v7, &v6);
}

uint64_t sub_100018C0C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100166C80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100018C74(_Unwind_Exception *a1)
{
}

uint64_t sub_100018C88(uint64_t a1)
{
  *(void *)a1 = off_100166C80;
  sub_100018F00(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100018D24(char *a1)
{
}

uint64_t sub_100018D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100018D9C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100018DE8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100166BB0);
  sub_100018C88(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100018E20(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100166BB0);
  sub_100018C88((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100018E60(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166BB0);
  sub_100018C88(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100018EA0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166BB0);
  sub_100018C88((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100018EEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100018C88(a1);
  operator delete(v1);
}

uint64_t sub_100018F00(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100019050((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100019028( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100019050(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 232LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 232LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *sub_100019244(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_5:
    sub_100019284();
  }

  int v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_100019284()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_1000192B8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *int v4 = 0LL;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        }
      }

      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100019334(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (dispatch_object_s **)**a1;
  if (v2)
  {
    int v4 = (dispatch_object_s **)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        int v4 = sub_1000F95F0(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_1000193A4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000196E4((uint64_t)a1, a2);
  *a1 = off_100166D18;
  a1[45] = &off_100166E18;
  a1[46] = &off_100166E40;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100166D18;
  a1[45] = off_100166DA0;
  a1[46] = off_100166DC8;
  return a1;
}

void sub_100019428(_Unwind_Exception *a1)
{
}

uint64_t sub_10001944C(uint64_t a1)
{
  return a1;
}

void *sub_10001948C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100019D1C((uint64_t)a1, a2);
  *a1 = off_100166F38;
  a1[45] = &off_100167038;
  a1[46] = &off_100167060;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100166F38;
  a1[45] = off_100166FC0;
  a1[46] = off_100166FE8;
  return a1;
}

void sub_100019510(_Unwind_Exception *a1)
{
}

uint64_t sub_100019534(uint64_t a1)
{
  return a1;
}

void sub_100019574(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  sub_10001A3D4(a1, &v15, a2, &v16);
  uint64_t v3 = *(dispatch_queue_t **)(a1 + 16);
  for (uint64_t i = *(dispatch_queue_t **)(a1 + 24); v3 != i; ++v3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768LL;
    v13[2] = sub_10001A354;
    v13[3] = &unk_100167140;
    v13[4] = v16;
    uint64_t v14 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    sub_1000F9730(v3, v13);
    uint64_t v7 = v14;
    if (v14)
    {
      uint64_t v8 = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  uint64_t v10 = v17;
  if (v17)
  {
    unint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

void sub_1000196C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1000196E4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100166EB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10001974C(_Unwind_Exception *a1)
{
}

uint64_t sub_100019760(uint64_t a1)
{
  *(void *)a1 = off_100166EB0;
  sub_1000199D8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000197FC(char *a1)
{
}

uint64_t sub_100019840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100019874(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000198C0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100166DE0);
  sub_100019760(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000198F8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100166DE0);
  sub_100019760((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100019938(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166DE0);
  sub_100019760(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100019978(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100166DE0);
  sub_100019760((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000199C4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100019760(a1);
  operator delete(v1);
}

uint64_t sub_1000199D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100019B28((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100019B00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100019B28(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 182LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 182LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100019D1C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001670D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100019D84(_Unwind_Exception *a1)
{
}

uint64_t sub_100019D98(uint64_t a1)
{
  *(void *)a1 = off_1001670D0;
  sub_10001A010(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100019E34(char *a1)
{
}

uint64_t sub_100019E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100019EAC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100019EF8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100167000);
  sub_100019D98(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100019F30(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100167000);
  sub_100019D98((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100019F70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100167000);
  sub_100019D98(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100019FB0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100167000);
  sub_100019D98((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100019FFC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100019D98(a1);
  operator delete(v1);
}

uint64_t sub_10001A010(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10001A160((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001A138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001A160(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 185LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        uint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 185LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *sub_10001A354(uint64_t a1)
{
  return sub_10001A35C(*(void **)(a1 + 32));
}

void *sub_10001A35C(void *result)
{
  uint64_t v1 = (unsigned int *)(result + 5);
  do
  {
    unsigned int v2 = __ldaxr(v1);
    unsigned int v3 = v2 - 1;
  }

  while (__stlxr(v3, v1));
  if (!v3)
  {
    uint64_t v4 = result[4];
    if (!v4) {
      sub_100016D94();
    }
    return (void *)(*(uint64_t (**)(void, void))(*(void *)v4 + 48LL))(result[4], *result);
  }

  return result;
}

uint64_t sub_10001A3A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    unsigned int v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_10001A3CC(uint64_t a1)
{
  return sub_1000114F0(a1 + 32);
}

uint64_t sub_10001A3D4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x48uLL);
  uint64_t result = sub_10001A444((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_10001A430(_Unwind_Exception *a1)
{
}

uint64_t sub_10001A444(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = off_100167180;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v5 = *a3;
  *(void *)(a1 + 24) = a2;
  sub_1000118C0(a1 + 32, a4);
  *(_DWORD *)(a1 + 64) = v5;
  return a1;
}

void sub_10001A48C(_Unwind_Exception *a1)
{
}

void sub_10001A4A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100167180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001A4B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100167180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void *sub_10001A4D0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void *sub_10001A510(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1001671D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10001A544(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001671D0;
  a2[1] = v2;
  return result;
}

void sub_10001A560(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 112));
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 64));
  std::mutex::unlock((std::mutex *)(v1 + 112));
}

uint64_t sub_10001A594(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10001A5D0()
{
  return &off_100167240;
}

__n128 sub_10001A5E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100167260;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v2, v3 + 8) = result;
  return result;
}

__n128 sub_10001A61C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100167260;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::ostream::~ostream(v2, v3 + 8) = result;
  return result;
}

uint64_t sub_10001A63C(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *a3, *a4);
}

uint64_t sub_10001A650(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10001A68C()
{
}

uint64_t sub_10001A698(uint64_t a1)
{
  *(void *)a1 = off_100167350;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1000170C0(&v3);
  return a1;
}

void sub_10001A6DC(char *a1)
{
  *(void *)a1 = off_100167350;
  uint64_t v2 = (void **)(a1 + 8);
  sub_1000170C0(&v2);
  operator delete(a1);
}

void *sub_10001A724(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = off_100167350;
  *((void *)v2 + 2) = 0LL;
  *((void *)v2 + 3) = 0LL;
  *((void *)v2 + 1) = 0LL;
  sub_100016FE0( (char *)v2 + 8,  *(void **)(a1 + 8),  *(void **)(a1 + 16),  (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  *((void *)v2 + 4) = *(void *)(a1 + 32);
  return v2;
}

void sub_10001A77C(_Unwind_Exception *a1)
{
}

char *sub_10001A790(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100167350;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  __n128 result = sub_100016FE0( (char *)(a2 + 8),  *(void **)(a1 + 8),  *(void **)(a1 + 16),  (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return result;
}

void sub_10001A7E0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  sub_1000170C0(&v1);
}

void sub_10001A808(void **a1)
{
  uint64_t v2 = a1 + 1;
  sub_1000170C0(&v2);
  operator delete(a1);
}

uint64_t sub_10001A844(uint64_t result)
{
  **(_BYTE **)(result + 32) = 1;
  uint64_t v1 = *(uint64_t **)(result + 8);
  uint64_t v2 = *(uint64_t **)(result + 16);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    v1 += 2;
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }

  return result;
}

uint64_t sub_10001A888(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10001A8C4()
{
}

id frk_unwrapped_symmetric_key_with_shipping_private_key(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([a1 objectForKey:@"com.apple.wkms.fcs-response"]);
  uint64_t v7 = (void *)v6;
  if (!v5)
  {
    uint64_t v29 = a3;
    NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
    uint64_t v42 = @"ERROR: Shipping private key is NULL.";
    uint64_t v16 = (NSData *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
    uint64_t v22 = 26LL;
LABEL_14:
    id v19 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.internal.fetchrestorekeys",  v22,  v16));
    uint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
    unint64_t v12 = 0LL;
LABEL_16:
    uint64_t v18 = 0LL;
    unint64_t v20 = 0LL;
    goto LABEL_17;
  }

  if (!v6)
  {
    uint64_t v29 = a3;
    NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
    int v40 = @"ERROR: This archive does not contain a shipping key response.";
    uint64_t v16 = (NSData *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
    uint64_t v22 = 25LL;
    goto LABEL_14;
  }

  id v32 = 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v6,  0LL,  &v32));
  id v9 = v32;
  if (!v8)
  {
    uint64_t v10 = 0LL;
    unint64_t v12 = 0LL;
    uint64_t v18 = 0LL;
    unint64_t v20 = 0LL;
    if (!a3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"wrapped-key"]);
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"enc-request"]);
  uint64_t v29 = a3;
  if (!v10
    || (uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString, v11), (objc_opt_isKindOfClass(v10, v13) & 1) == 0)
    || !v12
    || (uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString, v14), (objc_opt_isKindOfClass(v12, v15) & 1) == 0))
  {
    NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
    uint64_t v38 = @"ERROR: Response dictionary is missing required keys. Will fail";
    uint64_t v16 = (NSData *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
    id v19 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.internal.fetchrestorekeys",  23LL,  v16));

    goto LABEL_16;
  }

  uint64_t v16 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v10,  0LL);
  uint64_t v17 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v12,  0LL);
  uint64_t v28 = v17;
  if (!v16)
  {
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    uint64_t v36 = @"ERROR: shipping key wrapped-key failed base64 decode";
    uint64_t v25 = &v36;
    __int16 v26 = &v35;
LABEL_24:
    id v19 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v26,  1LL,  v17));
    uint64_t v27 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.internal.fetchrestorekeys",  19LL,  v19));

    id v21 = (id)v27;
    uint64_t v18 = 0LL;
    unint64_t v20 = 0LL;
    goto LABEL_25;
  }

  if (!v17)
  {
    NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
    uint64_t v34 = @"ERROR: shipping key enc-request failed base64 decode";
    uint64_t v25 = &v34;
    __int16 v26 = &v33;
    goto LABEL_24;
  }

  id v31 = v9;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[CryptoKitWrapper convertPrivateKeyTox963WithPemPrivateKey:error:]( &OBJC_CLASS____TtC16FetchRestoreKeys16CryptoKitWrapper,  "convertPrivateKeyTox963WithPemPrivateKey:error:",  v5,  &v31));
  id v19 = v31;

  if (!v18)
  {
    unint64_t v20 = 0LL;
    goto LABEL_26;
  }

  id v30 = v19;
  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[CryptoKitWrapper unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:]( &OBJC_CLASS____TtC16FetchRestoreKeys16CryptoKitWrapper,  "unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:",  v16,  v28,  v18,  &v30));
  id v21 = v30;
LABEL_25:

  id v19 = v21;
LABEL_26:

LABEL_17:
  id v9 = v19;
  a3 = v29;
  if (v29) {
LABEL_18:
  }
    *a3 = v9;
LABEL_19:
  id v23 = v20;

  return v23;
}

id frk_metadata_from_aea_auth_data(AEAAuthData_impl *a1, void *a2)
{
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint32_t EntryCount = AEAAuthDataGetEntryCount(a1);
  if (!EntryCount)
  {
LABEL_12:
    id v16 = [v4 copy];
    uint64_t v17 = 0LL;
    if (a2) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }

  uint32_t v6 = EntryCount;
  uint32_t v7 = 0;
  while (1)
  {
    data_std::string::size_type size = 0LL;
    size_t key_length = 0LL;
    if (AEAAuthDataGetEntry(a1, v7, 0LL, 0LL, &key_length, 0LL, 0LL, &data_size))
    {
      NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
      __int16 v26 = @"Failed to parse auth data blob.";
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.internal.fetchrestorekeys",  17LL,  v18));

      goto LABEL_22;
    }

    if (!key_length)
    {
      NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
      uint64_t v38 = @"Failed to parse key in KVS (zero size key).";
      id v19 = &v38;
      unint64_t v20 = &v37;
LABEL_20:
      uint64_t v13 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v20,  1LL));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.internal.fetchrestorekeys",  17LL,  v13));
      goto LABEL_21;
    }

    size_t v8 = ++key_length;
    if (!data_size)
    {
      NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
      uint64_t v36 = @"Failed to parse key in KVS (zero size data).";
      id v19 = &v36;
      unint64_t v20 = &v35;
      goto LABEL_20;
    }

    id v9 = calloc(1uLL, v8);
    if (!v9)
    {
      NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
      uint64_t v34 = @"KVS keyBuffer allocation failure.";
      id v19 = &v34;
      unint64_t v20 = &v33;
      goto LABEL_20;
    }

    uint64_t v10 = v9;
    uint64_t v11 = (uint8_t *)calloc(1uLL, data_size);
    if (!v11)
    {
      free(v10);
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      id v32 = @"KVS dataBuffer allocation failure.";
      id v19 = &v32;
      unint64_t v20 = &v31;
      goto LABEL_20;
    }

    unint64_t v12 = v11;
    if (AEAAuthDataGetEntry(a1, v7, key_length, (char *)v10, &key_length, data_size, v11, &data_size))
    {
      free(v10);
      free(v12);
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      id v30 = @"KVS data fetch failure.";
      id v19 = &v30;
      unint64_t v20 = &v29;
      goto LABEL_20;
    }

    uint64_t v13 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v10);
    uint64_t v14 = objc_alloc(&OBJC_CLASS___NSData);
    uint64_t v15 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( v14,  "initWithBytesNoCopy:length:freeWhenDone:",  v12,  data_size,  1LL);
    free(v10);
    if (!v13 || !v15) {
      break;
    }
    [v4 setObject:v15 forKey:v13];

    if (v6 == ++v7) {
      goto LABEL_12;
    }
  }

  NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
  uint64_t v28 = @"KVS key value - parse failure.";
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.internal.fetchrestorekeys",  17LL,  v22));

LABEL_21:
LABEL_22:
  id v16 = 0LL;
  if (a2) {
LABEL_23:
  }
    *a2 = v17;
LABEL_24:

  return v16;
}

void *sub_10001B174(uint64_t a1, void *a2)
{
  return sub_10001B97C(a1, a2);
}

unint64_t sub_10001B188(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    unint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10001CDCC(&qword_1001985B8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  unint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001CE94(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10001B838(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10001CEDC(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001B2B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    unint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10001CDCC(&qword_1001985B0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  unint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_10001B838(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_10001B3DC(uint64_t a1, uint64_t a2)
{
  return sub_10001BC00(a1, a2);
}

Class sub_10001B3FC( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  id v7 = a3;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v10 = v9;

  uint64_t v11 = a5(v8, v10);
  unint64_t v13 = v12;
  sub_10001CD88(v8, v10);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CD88(v11, v13);
  return isa;
}

uint64_t *sub_10001B4E4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  return sub_10001BE60(a1, a2, a3, a4, a5, a6);
}

Class static CryptoKitWrapper.wrappedDataDictionaryWithCert(plainText:certificate:)( uint64_t a1, uint64_t a2, __SecCertificate *a3)
{
  return sub_10001C354(a1, a2, a3);
}

id CryptoKitWrapper.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id CryptoKitWrapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return objc_msgSendSuper2(&v2, "init");
}

id CryptoKitWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_10001B838(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10001B89C(a1, a2, v5);
}

unint64_t sub_10001B89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

void *sub_10001B97C(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v30[0] = a1;
  v30[1] = a2;
  sub_10001CE50(a1, (unint64_t)a2);
  uint64_t v13 = P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)( v30,  &type metadata for Data,  &protocol witness table for Data);
  if (!v2)
  {
    uint64_t v31 = v9;
    uint64_t v14 = P256.KeyAgreement.PrivateKey.pemRepresentation.getter(v13);
    uint64_t v16 = v15;
    static String.Encoding.ascii.getter();
    a2 = (void *)String.data(using:allowLossyConversion:)(v8, 0LL, v14, v16);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease(v16);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    if (v18 >> 60 == 15)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.internal.fetchrestorekeys");
      uint64_t v20 = v19;
      uint64_t v21 = sub_10001CDCC(&qword_100198598);
      uint64_t inited = swift_initStackObject(v21, v29);
      *(_OWORD *)(inited + 16) = xmmword_100138100;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(void *)(inited + 40) = v23;
      a2 = &type metadata for String;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 4std::ostream::~ostream(v2, v3 + 8) = 0xD000000000000017LL;
      *(void *)(inited + 56) = 0x8000000100144030LL;
      unint64_t v24 = sub_10001B188(inited);
      id v25 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v24);
      [v25 initWithDomain:v26 code:31 userInfo:isa];

      swift_willThrow();
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v31);
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v31);
    }
  }

  return a2;
}

Class sub_10001BC00(uint64_t a1, uint64_t a2)
{
  Class isa = v2;
  type metadata accessor for String.Encoding(0LL);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  static String.Encoding.ascii.getter(v11);
  uint64_t v13 = String.init(data:encoding:)(a1, a2, v7);
  if (v14)
  {
    uint64_t v15 = __chkstk_darwin(v13);
    P256.KeyAgreement.PrivateKey.init(pemRepresentation:)(v15);
    if (!v2)
    {
      uint64_t v24 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(&v26[-v12], &v26[-v12], v8);
      Class isa = (Class)P256.KeyAgreement.PrivateKey.x963Representation.getter(v24);
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(&v26[-v12], v8);
    }
  }

  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.internal.fetchrestorekeys");
    uint64_t v17 = v16;
    uint64_t v18 = sub_10001CDCC(&qword_100198598);
    uint64_t inited = swift_initStackObject(v18, v26);
    *(_OWORD *)(inited + 16) = xmmword_100138100;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4std::ostream::~ostream(v2, v3 + 8) = 0xD000000000000017LL;
    *(void *)(inited + 56) = 0x8000000100144030LL;
    unint64_t v21 = sub_10001B188(inited);
    id v22 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    [v22 initWithDomain:v23 code:31 userInfo:isa];

    swift_willThrow();
  }

  return isa;
}

uint64_t *sub_10001BE60( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (&type metadata accessor for HPKE) {
    BOOL v7 = &type metadata for HPKE == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || &nominal type descriptor for HPKE == 0LL)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.internal.fetchrestorekeys");
    uint64_t v17 = v16;
    uint64_t v18 = sub_10001CDCC(&qword_100198598);
    uint64_t inited = swift_initStackObject(v18, v61);
    *(_OWORD *)(inited + 16) = xmmword_100138100;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4std::ostream::~ostream(v2, v3 + 8) = 0xD000000000000027LL;
    *(void *)(inited + 56) = 0x8000000100144000LL;
    unint64_t v21 = sub_10001B188(inited);
    uint64_t v13 = (uint64_t *)objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    [v13 initWithDomain:v22 code:12 userInfo:isa];

    swift_willThrow();
  }

  else
  {
    unint64_t v57 = a2;
    unint64_t v58 = (char *)a4;
    uint64_t v56 = a1;
    uint64_t v12 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
    uint64_t v13 = &v44;
    uint64_t v62 = *(void *)(v12 - 8);
    uint64_t v14 = *(void *)(v62 + 64);
    __chkstk_darwin(v12);
    unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v59 = a5;
    unint64_t v60 = a6;
    sub_10001CE50(a5, a6);
    P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)( &v59,  &type metadata for Data,  &protocol witness table for Data);
    if (!v6)
    {
      unint64_t v49 = &v44;
      uint64_t v54 = type metadata accessor for HPKE.Ciphersuite(0LL);
      uint64_t v48 = &v44;
      uint64_t v24 = *(void *)(v54 - 8);
      uint64_t v25 = *(void *)(v24 + 64);
      uint64_t v26 = __chkstk_darwin(v54);
      uint64_t v55 = a3;
      NSErrorUserInfoKey v27 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(v26);
      uint64_t v28 = type metadata accessor for HPKE.Recipient(0LL);
      unint64_t v47 = &v44;
      uint64_t v45 = v28;
      uint64_t v44 = *(void *)(v28 - 8);
      uint64_t v29 = __chkstk_darwin(v28);
      uint64_t v31 = (char *)&v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v53 = &v44;
      __chkstk_darwin(v29);
      id v32 = (char *)&v44 - v15;
      NSErrorUserInfoKey v33 = *(uint64_t (**)(char *))(v62 + 16);
      uint64_t v51 = v34;
      uint64_t v35 = v33((char *)&v44 - v15);
      uint64_t v50 = &v44;
      __chkstk_darwin(v35);
      uint64_t v36 = v54;
      uint64_t v52 = v24;
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v27, v54);
      uint64_t v37 = v55;
      unint64_t v38 = (unint64_t)v58;
      sub_10001CE50(v55, (unint64_t)v58);
      uint64_t v46 = v31;
      HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)( v32,  v27,  0LL,  0xC000000000000000LL,  v37,  v38,  v12,  &protocol witness table for P256.KeyAgreement.PrivateKey);
      unint64_t v58 = v27;
      uint64_t v39 = v51;
      uint64_t v40 = v52;
      uint64_t v59 = v56;
      unint64_t v60 = v57;
      unint64_t v41 = sub_10001CEEC();
      uint64_t v42 = v46;
      uint64_t v13 = (uint64_t *)HPKE.Recipient.open<A>(_:)(&v59, &type metadata for Data, v41);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v45);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v58, v36);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v39, v12);
    }
  }

  return v13;
}

Class sub_10001C354(uint64_t a1, uint64_t a2, SecCertificateRef certificate)
{
  if (&type metadata accessor for HPKE) {
    BOOL v4 = &type metadata for HPKE == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || &nominal type descriptor for HPKE == 0LL)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.internal.fetchrestorekeys");
    uint64_t v16 = v15;
    uint64_t v17 = sub_10001CDCC(&qword_100198598);
    uint64_t inited = swift_initStackObject(v17, v53);
    *(_OWORD *)(inited + 16) = xmmword_100138100;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v19;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4std::ostream::~ostream(v2, v3 + 8) = 0xD000000000000027LL;
    *(void *)(inited + 56) = 0x8000000100144000LL;
    unint64_t v20 = sub_10001B188(inited);
    id v21 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
    [v21 initWithDomain:v22 code:12 userInfo:isa];

    swift_willThrow();
    return isa;
  }

  uint64_t v50 = a2;
  uint64_t v49 = a1;
  uint64_t v6 = SecCertificateCopyKey(certificate);
  if (!v6)
  {
    __break(1u);
    goto LABEL_18;
  }

  BOOL v7 = v6;
  CFDataRef v8 = SecKeyCopyExternalRepresentation(v6, 0LL);
  if (!v8)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x10001CD58LL);
  }

  CFDataRef v9 = v8;
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  Class isa = *(Class *)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v13 = ((unint64_t)&isa[1].isa + 7) & 0xFFFFFFFFFFFFFFF0LL;
  v52[0] = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v52[1] = v14;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)( v52,  &type metadata for Data,  &protocol witness table for Data);
  if (v3)
  {
  }

  else
  {
    CFDataRef v39 = v9;
    uint64_t v40 = v7;
    unint64_t v47 = v38;
    uint64_t v48 = type metadata accessor for HPKE.Ciphersuite(0LL);
    unint64_t v41 = v38;
    uint64_t v24 = *(void *)(v48 - 8);
    uint64_t v25 = v11;
    uint64_t v46 = 0LL;
    uint64_t v26 = *(void *)(v24 + 64);
    uint64_t v27 = __chkstk_darwin(v48);
    uint64_t v51 = v10;
    uint64_t v28 = (char *)v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(v27);
    uint64_t v29 = type metadata accessor for HPKE.Sender(0LL);
    uint64_t v42 = v38;
    v38[4] = v29;
    v38[3] = *(void *)(v29 - 8);
    uint64_t v30 = __chkstk_darwin(v29);
    id v32 = (char *)v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v45 = v38;
    __chkstk_darwin(v30);
    Class isa = (Class)((char *)v38 - v13);
    uint64_t v44 = v25;
    NSErrorUserInfoKey v33 = *(uint64_t (**)(char *, char *, uint64_t))(v25 + 16);
    uint64_t v34 = v48;
    uint64_t v43 = (char *)v38 - v13;
    uint64_t v35 = v33((char *)v38 - v13, (char *)v38 - v13, v51);
    __chkstk_darwin(v35);
    uint64_t v36 = v51;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v28, v34);
    uint64_t v37 = v46;
    HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)( (char *)v38 - v13,  v28,  0LL,  0xC000000000000000LL,  v36,  &protocol witness table for P256.KeyAgreement.PublicKey);
    if (!v37)
    {
      v38[2] = v32;
      v38[1] = (char *)v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v46 = v24;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v34);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v36);
  }

  return isa;
}

uint64_t type metadata accessor for CryptoKitWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC16FetchRestoreKeys16CryptoKitWrapper);
}

uint64_t sub_10001CD88(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_release)();
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001CDCC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10001CE0C()
{
  unint64_t result = qword_1001985A0;
  if (!qword_1001985A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UnsafeRawBufferPointer,  &type metadata for UnsafeRawBufferPointer);
    atomic_store(result, (unint64_t *)&qword_1001985A0);
  }

  return result;
}

uint64_t sub_10001CE50(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001CDCC(&qword_1001985C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10001CEDC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10001CEEC()
{
  unint64_t result = qword_1001985C8;
  if (!qword_1001985C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001985C8);
  }

  return result;
}

uint64_t sub_10001CF30(uint64_t a1)
{
  __int128 v2 = malloc(0xAF8uLL);
  uint64_t v3 = (uint64_t)v2;
  if (!v2)
  {
    __int16 v7 = 192;
LABEL_36:
    NSErrorUserInfoKey v33 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"aaS3ContextClone",  v7,  80,  *v33,  "malloc",  v34,  v35,  v46);
    AAS3ContextDestroy(v3);
    return 0LL;
  }

  memset_s(v2, 0xAF8uLL, 0, 0xAF8uLL);
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)uint64_t v3 = 1;
    memcpy((void *)(v3 + 4), (const void *)(a1 + 4), 0xAC4uLL);
  }

  uint64_t v4 = *(const void **)(a1 + 2760);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a1 + 2760));
    size_t v6 = v5 + 1;
    if (v5 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_13:
      unint64_t v13 = (void *)(v3 + 2760);
      __int16 v7 = 198;
LABEL_35:
      void *v13 = 0LL;
      goto LABEL_36;
    }

    CFDataRef v8 = malloc(v5 + 1);
    if (!v8) {
      goto LABEL_13;
    }
    CFDataRef v9 = v8;
    memcpy(v8, v4, v6);
    *(void *)(v3 + 2760) = v9;
  }

  uint64_t v10 = *(const void **)(a1 + 2768);
  if (v10)
  {
    size_t v11 = strlen(*(const char **)(a1 + 2768));
    size_t v12 = v11 + 1;
    if (v11 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_19:
      unint64_t v13 = (void *)(v3 + 2768);
      __int16 v7 = 199;
      goto LABEL_35;
    }

    uint64_t v14 = malloc(v11 + 1);
    if (!v14) {
      goto LABEL_19;
    }
    uint64_t v15 = v14;
    memcpy(v14, v10, v12);
    *(void *)(v3 + 276std::ostream::~ostream(v2, v3 + 8) = v15;
  }

  uint64_t v16 = *(const void **)(a1 + 2776);
  if (v16)
  {
    size_t v17 = strlen(*(const char **)(a1 + 2776));
    size_t v18 = v17 + 1;
    if (v17 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_25:
      unint64_t v13 = (void *)(v3 + 2776);
      __int16 v7 = 200;
      goto LABEL_35;
    }

    uint64_t v19 = malloc(v17 + 1);
    if (!v19) {
      goto LABEL_25;
    }
    unint64_t v20 = v19;
    memcpy(v19, v16, v18);
    *(void *)(v3 + 2776) = v20;
  }

  id v21 = *(const void **)(a1 + 2784);
  if (v21)
  {
    size_t v22 = strlen(*(const char **)(a1 + 2784));
    size_t v23 = v22 + 1;
    if (v22 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_34:
      unint64_t v13 = (void *)(v3 + 2784);
      __int16 v7 = 201;
      goto LABEL_35;
    }

    uint64_t v24 = malloc(v22 + 1);
    if (!v24) {
      goto LABEL_34;
    }
    uint64_t v25 = v24;
    memcpy(v24, v21, v23);
    *(void *)(v3 + 2784) = v25;
  }

  uint64_t v26 = *(void *)(a1 + 2792);
  if (v26)
  {
    list = 0LL;
    p_list = &list;
    while (1)
    {
      uint64_t v28 = (curl_slist *)malloc(0x10uLL);
      if (!v28) {
        break;
      }
      p_data = &v28->data;
      v28->data = 0LL;
      v28->next = 0LL;
      *p_list = v28;
      uint64_t v30 = strdup(*(const char **)v26);
      *p_data = v30;
      if (!v30) {
        break;
      }
      p_list = (curl_slist **)(p_data + 1);
      uint64_t v26 = *(void *)(v26 + 8);
      if (!v26)
      {
        BOOL v31 = 1;
        id v32 = list;
        goto LABEL_39;
      }
    }

    curl_slist_free_all(list);
    id v32 = 0LL;
    BOOL v31 = *(void *)(a1 + 2792) != 0LL;
LABEL_39:
    *(void *)(v3 + 2792) = v32;
    if (v31 && v32 == 0LL)
    {
      __int16 v7 = 202;
      goto LABEL_36;
    }
  }

  else
  {
    *(void *)(v3 + 2792) = 0LL;
  }

  uint64_t v38 = *(void *)(a1 + 2800);
  if (!v38)
  {
    *(void *)(v3 + 2800) = 0LL;
    return v3;
  }

  list = 0LL;
  CFDataRef v39 = &list;
  while (1)
  {
    uint64_t v40 = (curl_slist *)malloc(0x10uLL);
    if (!v40) {
      break;
    }
    unint64_t v41 = &v40->data;
    v40->data = 0LL;
    v40->next = 0LL;
    void *v39 = v40;
    uint64_t v42 = strdup(*(const char **)v38);
    *unint64_t v41 = v42;
    if (!v42) {
      break;
    }
    CFDataRef v39 = (curl_slist **)(v41 + 1);
    uint64_t v38 = *(void *)(v38 + 8);
    if (!v38)
    {
      BOOL v43 = 1;
      uint64_t v44 = list;
      goto LABEL_53;
    }
  }

  curl_slist_free_all(list);
  uint64_t v44 = 0LL;
  BOOL v43 = *(void *)(a1 + 2800) != 0LL;
LABEL_53:
  *(void *)(v3 + 2800) = v44;
  if (v43 && v44 == 0LL)
  {
    __int16 v7 = 203;
    goto LABEL_36;
  }

  return v3;
}

void AAS3ContextDestroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 2760));
    free(*(void **)(a1 + 2768));
    free(*(void **)(a1 + 2776));
    free(*(void **)(a1 + 2784));
    curl_slist_free_all(*(curl_slist **)(a1 + 2792));
    curl_slist_free_all(*(curl_slist **)(a1 + 2800));
    memset_s((void *)a1, 0xAF8uLL, 0, 0xAF8uLL);
    free((void *)a1);
  }

void *AAS3ContextCreate()
{
  int v0 = malloc(0xAF8uLL);
  uint64_t v1 = v0;
  if (!v0)
  {
    CFDataRef v9 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextCreate",  355,  80,  *v9,  "malloc",  v10,  v11,  v13);
    goto LABEL_5;
  }

  memset_s(v0, 0xAF8uLL, 0, 0xAF8uLL);
  if ((AAS3ContextSetFieldString((uint64_t)v1, 5, "Not A Ninja/1.0", v2, v3, v4, v5, v6) & 0x80000000) != 0)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextCreate",  358,  80,  0,  "set context",  v7,  v8,  v13);
    memset_s(v1, 0xAF8uLL, 0, 0xAF8uLL);
LABEL_5:
    free(v1);
    return 0LL;
  }

  return v1;
}

uint64_t AAS3ContextSetFieldString( uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0:
      CFDataRef v9 = (void **)(a1 + 2760);
      if (__s) {
        goto LABEL_17;
      }
      goto LABEL_20;
    case 1:
      CFDataRef v9 = (void **)(a1 + 2768);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 2:
      CFDataRef v9 = (void **)(a1 + 2776);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 3:
      uint64_t v10 = (curl_slist **)(a1 + 2792);
      if (!__s) {
        return 0LL;
      }
      goto LABEL_12;
    case 4:
      uint64_t v10 = (curl_slist **)(a1 + 2800);
      if (!__s) {
        return 0LL;
      }
LABEL_12:
      if (!*__s) {
        return 0LL;
      }
      uint64_t v11 = curl_slist_append(*v10, __s);
      if (v11)
      {
        size_t v12 = v11;
        uint64_t result = 0LL;
        *uint64_t v10 = v12;
        return result;
      }

      int v18 = *__error();
      __int16 v21 = 407;
      goto LABEL_26;
    case 5:
      CFDataRef v9 = (void **)(a1 + 2784);
      if (!__s) {
        goto LABEL_20;
      }
LABEL_17:
      if (!*__s)
      {
LABEL_20:
        uint64_t v16 = 0LL;
LABEL_21:
        free(*v9);
        uint64_t result = 0LL;
        int *v9 = v16;
        return result;
      }

      size_t v14 = strlen(__s);
      size_t v15 = v14 + 1;
      if (v14 + 1 >= 0x2000000001LL)
      {
        *__error() = 12;
        goto LABEL_24;
      }

      size_t v17 = malloc(v14 + 1);
      if (v17)
      {
        uint64_t v16 = v17;
        memcpy(v17, __s, v15);
        goto LABEL_21;
      }

LABEL_24:
      int v18 = *__error();
      __int16 v21 = 399;
LABEL_26:
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextSetFieldString",  v21,  80,  v18,  "malloc",  v19,  v20,  v22);
      return 0xFFFFFFFFLL;
    default:
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextSetFieldString",  391,  80,  0,  "invalid field %u",  a7,  a8,  a2);
      return 0xFFFFFFFFLL;
  }

      char v13 = sub_100072278(a1, v7);
      *((_BYTE *)&v17 + vstd::ostream::~ostream(v2, v3 + 8) = v13;
      size_t v14 = *v5++;
      uint64_t v7 = v14;
      *((_BYTE *)&v17 + v8++) = sub_100072278(a1, v14) | (16 * v13);
    }

    while (!v8);
    if (v8 == 16) {
      break;
    }
    uint64_t v10 = *v5++;
    uint64_t v7 = v10;
  }

  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (size_t v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100072214();
  }

  return v17;
}

    *__error() = v10;
    -[DIBaseParams setDiskImageParamsXPC:](self, "setDiskImageParamsXPC:", v8);
    goto LABEL_25;
  }

  return 0;
}

  size_t v23 = shadowStats;
  shadowStats = self->_shadowStats;
  self->_shadowStats = v23;
LABEL_29:

  return v23;
}

    char v22 = v73;
    if (v73)
    {
      size_t v23 = (unint64_t *)&v73->__shared_owners_;
      do
        uint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    uint64_t v25 = v72;
    if (v72)
    {
      uint64_t v26 = (unint64_t *)&v72->__shared_owners_;
      do
        uint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    uint64_t v28 = v71;
    if (v71)
    {
      uint64_t v29 = (unint64_t *)&v71->__shared_owners_;
      do
        uint64_t v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

    BOOL v31 = v70;
    if (v70)
    {
      id v32 = (unint64_t *)&v70->__shared_owners_;
      do
        NSErrorUserInfoKey v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    uint64_t v34 = v69;
    if (v69)
    {
      uint64_t v35 = (unint64_t *)&v69->__shared_owners_;
      do
        uint64_t v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    uint64_t v37 = v68;
    if (v68)
    {
      uint64_t v38 = (unint64_t *)&v68->__shared_owners_;
      do
        CFDataRef v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    if (v65 && &v66 != __p) {
      operator delete(__p);
    }
    sub_100014E54((uint64_t)&keys);
    v6 += 6;
  }

  while (v6 != v7);
  uint64_t v40 = (uint64_t *)v56;
  if (v56 == (std::__shared_weak_count *)v57) {
    goto LABEL_65;
  }
  unint64_t v41 = 0;
  do
  {
    v41 += *((_DWORD *)v40 + 4);
    v40 += 6;
  }

  while (v40 != v57);
LABEL_66:
  uint64_t v42 = v41;
  BOOL v43 = valloc(v41);
  if (!v43)
  {
    uint64_t v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v52 = std::bad_alloc::bad_alloc(v51);
  }

  values = &off_10017F7E0;
  p_values = &values;
  keys = v43;
  sub_1000172D0((uint64_t)&v63, (uint64_t)&values);
  uint64_t v44 = p_values;
  if (p_values == &values)
  {
    uint64_t v45 = 4LL;
    uint64_t v44 = &values;
LABEL_72:
    (*((void (**)(void))*v44 + v45))();
  }

  else if (p_values)
  {
    uint64_t v45 = 5LL;
    goto LABEL_72;
  }

  char v46 = v56;
  unint64_t v47 = v57;
  if (v56 != (std::__shared_weak_count *)v57)
  {
    uint64_t v48 = 0;
    do
    {
      memcpy((char *)keys + v48, v46->__vftable, v46->__shared_weak_owners_);
      v48 += LODWORD(v46->__shared_weak_owners_);
      v46 += 2;
    }

    while (v46 != (std::__shared_weak_count *)v47);
  }

  sub_1000F6AA8((UInt8 *)keys, v42, a3);
  sub_100016DE0((uint64_t *)&keys);
  keys = &v56;
  sub_1000D94DC((void ***)&keys);
}

uint64_t sub_10001D564(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1 >> 62)
    {
      gettimeofday(&v9, 0LL);
      double v2 = (double)v9.tv_sec + (double)v9.tv_usec * 0.000001 - *(double *)(a1 + 40);
      fwrite("AAS3DownloadStream (curl)\n", 0x1AuLL, 1uLL, __stderrp);
      uint64_t v3 = __stderrp;
      unint64_t v4 = atomic_load((unint64_t *)(a1 + 32));
      unint64_t v5 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v3, "%12llu bytes downloaded (%.2f MB)\n", v4, (double)v5 * 0.000000953674316);
      uint64_t v6 = __stderrp;
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v6, "%12.2f MB/s download speed\n", (double)v7 / v2 * 0.000000953674316);
    }

    sub_10001F278(a1);
    memset_s((void *)a1, 0x30uLL, 0, 0x30uLL);
    free((void *)a1);
  }

  return 0LL;
}

AAByteStream_impl *sub_10001D678(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = AACustomByteStreamOpen();
  unint64_t v7 = (double *)malloc(0x30uLL);
  if (!v7 || (uint64_t v8 = v7, memset_s(v7, 0x30uLL, 0, 0x30uLL), !v6))
  {
    perror("malloc");
    goto LABEL_7;
  }

  if ((sub_10001F14C(v8, a1, a2, a3) & 0x80000000) != 0)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c",  (uint64_t)"s3DownloadStreamOpen_curl",  132,  83,  0,  "s3StreamBaseInit",  v9,  v10,  v12.tv_sec);
LABEL_7:
    AAByteStreamClose(v6);
    return 0LL;
  }

  gettimeofday(&v12, 0LL);
  v8[5] = (double)v12.tv_sec + (double)v12.tv_usec * 0.000001;
  AACustomByteStreamSetData(v6, v8);
  AACustomByteStreamSetCloseProc(v6, (AAByteStreamCloseProc)sub_10001D564);
  AACustomByteStreamSetPReadProc(v6, (AAByteStreamPReadProc)sub_10001D7B4);
  AACustomByteStreamSetReadProc(v6, (AAByteStreamReadProc)sub_10001D97C);
  return v6;
}

uint64_t sub_10001D7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&__int128 v21 = a2;
  *((void *)&v21 + 1) = a3;
  uint64_t v22 = 0LL;
  uint64_t v5 = a2;
  if (a3)
  {
    uint64_t v18 = a2;
    uint64_t v6 = a4 + a3;
    uint64_t v7 = a4 + a3 - 1;
    while (1)
    {
      snprintf(__str, 0xC8uLL, "Range: bytes=%llu-%llu", v6 - a3, v7);
      unsigned int v11 = 0;
      v23[0] = __str;
      v23[1] = 0LL;
      __int128 v19 = v21;
      uint64_t v20 = v22;
      useconds_t v12 = 125000;
      do
      {
        if (v11)
        {
          sub_100023608( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c",  (uint64_t)"downloadStreamPRead",  65,  83,  "s3Perform retry after %u ms",  v8,  v9,  v10,  v12 / 0x3E8);
          usleep(v12);
          v12 *= 2;
        }

        __int128 v21 = v19;
        uint64_t v22 = v20;
        int v13 = sub_10001DEA0(1u, *(char **)(a1 + 8), a1, 0LL, &v21, 0LL, v23);
        if ((v13 & 0x80000000) == 0) {
          break;
        }
      }

      while (v11++ < 3);
      if (v13 < 0) {
        break;
      }
      a3 = *((void *)&v21 + 1);
      if (!*((void *)&v21 + 1))
      {
        uint64_t v5 = v21;
        a2 = v18;
        goto LABEL_12;
      }
    }

    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c",  (uint64_t)"downloadStreamPRead",  81,  83,  0,  "s3Perform failed (after retry), %s",  v9,  v10,  (char)__str);
    return -1LL;
  }

  else
  {
LABEL_12:
    uint64_t result = v5 - a2;
    uint64_t v16 = (unint64_t *)(a1 + 32);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + result, v16));
  }

  return result;
}

uint64_t sub_10001D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (unint64_t *)(a1 + 24);
  do
    uint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 + a3, v3));
  return sub_10001D7B4(a1, a2, a3, v4);
}

uint64_t sub_10001D994(_DWORD *a1, unsigned int *a2, const void *a3, size_t a4)
{
  *a1 = 32;
  memset_s(a1 + 9, 0xE0uLL, 0, 0xE0uLL);
  memset_s(&v8, 0x180uLL, 0, 0x180uLL);
  return 0LL;
}

uint64_t sub_10001DA2C(uint64_t a1, const void *a2, CC_LONG a3)
{
  *(_DWORD *)a1 = 32;
  memset_s((void *)(a1 + 36), 0xE0uLL, 0, 0xE0uLL);
  return memset_s(&c, 0x68uLL, 0, 0x68uLL);
}

size_t sub_10001DAB4(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = __src;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 24))
    {
      uint64_t v7 = 0LL;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 24))(*(void *)v6, v4, v5);
          if (v8 < 1) {
            break;
          }
          v4 += v8;
          v7 += v8;
          v5 -= v8;
          if (!v5) {
            return v7 & ~(v7 >> 63);
          }
        }

        uint64_t v7 = v8;
      }
    }

    else
    {
      uint64_t v7 = -1LL;
    }

    return v7 & ~(v7 >> 63);
  }

  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(*(void **)a4, __src, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + std::ostream::~ostream(v2, v3 + 8) = v10;
    return v5;
  }

size_t sub_10001DB68(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = __dst;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 16))
    {
      uint64_t v7 = 0LL;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 16))(*(void *)v6, v4, v5);
          if (v8 < 0) {
            break;
          }
          if (v8)
          {
            v4 += v8;
            v7 += v8;
            v5 -= v8;
            if (v5) {
              continue;
            }
          }

          return v7 & ~(v7 >> 63);
        }

        uint64_t v7 = v8;
      }
    }

    else
    {
      uint64_t v7 = -1LL;
    }

    return v7 & ~(v7 >> 63);
  }

  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(__dst, *(const void **)a4, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + std::ostream::~ostream(v2, v3 + 8) = v10;
    return v5;
  }

uint64_t sub_10001DC1C(curl_slist **a1, char *__format, ...)
{
  int v4 = vsnprintf(0LL, 0LL, __format, va);
  if (v4 < 0)
  {
    unsigned int v11 = 0LL;
LABEL_8:
    useconds_t v12 = "vsnprintf";
    __int16 v13 = 156;
    int v14 = 0;
LABEL_12:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3HeaderAppendWithFormat",  v13,  84,  v14,  v12,  v5,  v6,  v20);
    uint64_t v18 = 0xFFFFFFFFLL;
    uint64_t v7 = v11;
  }

  else
  {
    uint64_t v7 = 0LL;
    char v8 = 1;
    while ((v8 & 1) != 0)
    {
      size_t v9 = (v4 + 1);
      size_t v10 = (char *)realloc(v7, v9);
      unsigned int v11 = v10;
      if (!v10)
      {
        free(v7);
        int v14 = *__error();
        useconds_t v12 = "malloc";
        __int16 v13 = 161;
        goto LABEL_12;
      }

      int v4 = vsnprintf(v10, v9, __format, va);
      char v8 = 0;
      uint64_t v7 = v11;
      if (v4 < 0) {
        goto LABEL_8;
      }
    }

    size_t v15 = curl_slist_append(*a1, v7);
    if (v15)
    {
      uint64_t v18 = 0LL;
      *a1 = v15;
    }

    else
    {
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3HeaderAppendWithFormat",  168,  84,  0,  "curl_slist_append failed\n",  v16,  v17,  v20);
      uint64_t v18 = 0xFFFFFFFFLL;
    }
  }

  free(v7);
  return v18;
}

uint64_t sub_10001DD80(curl_slist **a1, const char *a2)
{
  uint64_t v3 = curl_slist_append(*a1, a2);
  uint64_t v6 = v3;
  if (v3) {
    *a1 = v3;
  }
  else {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3HeaderAppend",  182,  84,  0,  "curl_slist_append failed\n",  v4,  v5,  v8);
  }
  if (v6) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

unint64_t sub_10001DDE4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 * a2;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0)
  {
    uint64_t v11 = 499LL;
    curl_easy_getinfo(*(CURL **)a4, CURLINFO_RESPONSE_CODE, &v11);
    int v7 = v11;
    *(_DWORD *)(a4 + std::ostream::~ostream(v2, v3 + 8) = v11;
    if (v7 == 200)
    {
      if (*(_DWORD *)(a4 + 12)) {
        *(void *)(a4 + 24) = *(void *)(a4 + 16);
      }
    }
  }

  unint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = v6 - v8;
  if (v6 >= v8)
  {
    if (v8)
    {
      a1 += v8;
      *(void *)(a4 + 24) = 0LL;
    }

    else
    {
      uint64_t v9 = v6;
    }

    sub_10001DAB4(a1, v9, 1LL, *(void *)(a4 + 32));
  }

  else
  {
    *(void *)(a4 + 24) = v8 - v6;
  }

  return v6;
}

uint64_t sub_10001DEA0( unsigned int a1, char *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, const char **a7)
{
  uint64_t v14 = *(void *)(a3 + 16);
  unint64_t v60 = 0LL;
  if (a4) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  else {
    uint64_t v15 = -1LL;
  }
  __int128 v58 = 0uLL;
  uint64_t v59 = 0LL;
  if (a5)
  {
    __int128 v58 = *a5;
    uint64_t v59 = *((void *)a5 + 2);
  }

  unint64_t v57 = 0LL;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  uint64_t v16 = curl_easy_init();
  if (!v16)
  {
    uint64_t v26 = __stderrp;
    uint64_t v27 = "curl_easy_init failed\n";
    size_t v28 = 22LL;
LABEL_42:
    fwrite(v27, v28, 1uLL, v26);
    goto LABEL_43;
  }

  if ((sub_10001DD80(&v60, "Content-Type:") & 0x80000000) != 0
    || (sub_10001DD80(&v60, "Transfer-Encoding:") & 0x80000000) != 0
    || (sub_10001DD80(&v60, "Accept: application/xml") & 0x80000000) != 0
    || (v15 & 0x8000000000000000LL) == 0 && (sub_10001DC1C(&v60, "Content-Length: %zd", v15) & 0x80000000) != 0)
  {
    goto LABEL_43;
  }

  uint64_t v17 = *(void *)(*(void *)(a3 + 16) + 2792LL);
  if (v17)
  {
    while ((sub_10001DD80(&v60, *(const char **)v17) & 0x80000000) == 0)
    {
      uint64_t v17 = *(void *)(v17 + 8);
      if (!v17) {
        goto LABEL_15;
      }
    }

    goto LABEL_43;
  }

LABEL_15:
  if (a7)
  {
    uint64_t v18 = *a7;
    if (*a7)
    {
      __int128 v19 = a7 + 1;
      while ((sub_10001DD80(&v60, v18) & 0x80000000) == 0)
      {
        char v20 = *v19++;
        uint64_t v18 = v20;
        if (!v20) {
          goto LABEL_20;
        }
      }

      goto LABEL_43;
    }
  }

  return v15;
}

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

LABEL_54:
  CURLcode v34 = curl_easy_setopt(v16, CURLOPT_READFUNCTION, sub_10001DB68);
  unsigned __int32 v32 = curl_easy_setopt(v16, CURLOPT_READDATA, a4) | v34;
LABEL_55:
  if (v32) {
    BOOL v24 = 0;
  }
LABEL_57:
  if (a5)
  {
    *(void *)&__int128 v55 = v16;
    unint64_t v57 = a5;
    DWORD2(v55) = -1;
    if (a7)
    {
      uint64_t v35 = *a7;
      if (*a7)
      {
        uint64_t v36 = 0LL;
        do
        {
          if (!strncmp(v35, "Range:", 6uLL))
          {
            int v39 = *((unsigned __int8 *)v35 + 6);
            uint64_t v38 = v35 + 6;
            char v37 = v39;
            if (v39)
            {
              do
              {
                if (v37 < 0)
                {
                  if (!__maskrune(v37, 0x4000uLL)) {
                    break;
                  }
                }

                else if ((_DefaultRuneLocale.__runetype[v37] & 0x4000) == 0)
                {
                  break;
                }

                int v40 = *(unsigned __int8 *)++v38;
                char v37 = v40;
              }

              while (v40);
            }

            if (!strncmp(v38, "bytes=", 6uLL))
            {
              int v43 = *((unsigned __int8 *)v38 + 6);
              uint64_t v42 = v38 + 6;
              char v41 = v43;
              if (v43)
              {
                do
                {
                  if (v41 < 0)
                  {
                    if (!__maskrune(v41, 0x4000uLL)) {
                      break;
                    }
                  }

                  else if ((_DefaultRuneLocale.__runetype[v41] & 0x4000) == 0)
                  {
                    break;
                  }

                  int v44 = *(unsigned __int8 *)++v42;
                  char v41 = v44;
                }

                while (v44);
              }

              HIDWORD(v55) = 1;
              *(void *)&__int128 v56 = strtoull(v42, 0LL, 0);
            }
          }

          uint64_t v35 = a7[++v36];
        }

        while (v35);
      }
    }

    CURLcode v45 = curl_easy_setopt(v16, CURLOPT_WRITEFUNCTION, sub_10001DDE4);
    if (curl_easy_setopt(v16, CURLOPT_WRITEDATA, &v55) | v45) {
      BOOL v24 = 0;
    }
  }

  if (a6)
  {
    if (curl_easy_setopt(v16, CURLOPT_HEADERFUNCTION, sub_10001DAB4)) {
      BOOL v24 = 0;
    }
    if (curl_easy_setopt(v16, CURLOPT_HEADERDATA, a6)) {
      goto LABEL_86;
    }
  }

  if (!v24)
  {
LABEL_86:
    uint64_t v26 = __stderrp;
    uint64_t v27 = "curl_easy_setopt failed\n";
    size_t v28 = 24LL;
    goto LABEL_42;
  }

  CURLcode v46 = curl_easy_perform(v16);
  if (v46 == CURLE_OK)
  {
    uint64_t v54 = 499LL;
    curl_easy_getinfo(v16, CURLINFO_RESPONSE_CODE, &v54);
    if ((unint64_t)(v54 - 400) <= 0xC7)
    {
      if (a1 != 1 || v54 != 416)
      {
        sub_100023608( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Perform",  401,  84,  "HTTP %u\n",  v51,  v52,  v53,  v54);
        goto LABEL_43;
      }

      if (a5)
      {
        uint64_t v29 = 0LL;
        *a5 = v58;
        *((void *)a5 + 2) = v59;
        goto LABEL_44;
      }
    }

    uint64_t v29 = 0LL;
    goto LABEL_44;
  }

  char v47 = v46;
  curl_easy_strerror(v46);
  sub_100023608( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Perform",  379,  84,  "> %d %s\n",  v48,  v49,  v50,  v47);
LABEL_43:
  uint64_t v29 = 0xFFFFFFFFLL;
LABEL_44:
  curl_slist_free_all(v60);
  curl_easy_cleanup(v16);
  return v29;
}

      uint64_t v29 = (void **)&v33;
      sub_1000D0BF0(&v29);
    }
  }

      sub_100116BAC(v82);
LABEL_55:
      uint64_t v17 = 2;
      goto LABEL_56;
    }

    if ((_DWORD)v33 == 3)
    {
      v94[0] = sub_1000C67C8(a1, v26, v25);
      sub_1000BD8C4(a1, a2, &v104, (unsigned int *)v94, 1u, v33 | (unint64_t)&_mh_execute_header);
      if (!v23) {
        goto LABEL_40;
      }
    }

    else
    {
      sub_100116AA0((uint64_t)v92, 0LL, (uint64_t)v82);
      if (!v83)
      {
        *(void *)&__int128 v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v80 + 1) = 30LL;
        int v81 = 16;
        sub_1000C3774(v94, &v80);
        sub_100004E4C(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28LL);
        sub_1000BFD20(&v96, &v104);
        sub_1000C381C((uint64_t)v94);
        unint64_t v77 = __cxa_allocate_exception(0x40uLL);
        const char *v77 = &off_100189E78;
        uint64_t v78 = std::generic_category();
        v77[1] = 4294967282LL;
        v77[2] = v78;
        *((_BYTE *)v77 + 24) = 0;
        *((_BYTE *)v77 + 4std::ostream::~ostream(v2, v3 + 8) = 0;
        v77[7] = "Couldn't upgrade lock entry";
      }

      int v40 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      char v41 = v40 >> 62;
      if (v40 >> 62 == 1) {
        goto LABEL_54;
      }
      v94[0] = sub_1000C67C8(a1, v27, v18);
      sub_1000BD8C4(a1, a2, &v104, (unsigned int *)v94, 1u, v41 | (unint64_t)&_mh_execute_header);
      sub_100116BAC(v82);
      if (!v23)
      {
LABEL_40:
        uint64_t v17 = 0;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        goto LABEL_56;
      }
    }

    uint64_t v17 = 0;
LABEL_56:
    v79 += v18;
    sub_1000C385C((uint64_t *)&v84);
LABEL_72:
    sub_100116A88(v92);
LABEL_73:
    uint64_t v49 = v103;
    if (v103)
    {
      uint64_t v50 = (unint64_t *)&v103->__shared_owners_;
      do
        uint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    uint64_t v52 = v102;
    if (v102)
    {
      uint64_t v53 = (unint64_t *)&v102->__shared_owners_;
      do
        uint64_t v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }

    __int128 v55 = v100;
    if (v100)
    {
      __int128 v56 = (unint64_t *)&v100->__shared_owners_;
      do
        unint64_t v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }

    __int128 v58 = v99;
    if (v99)
    {
      uint64_t v59 = (unint64_t *)&v99->__shared_owners_;
      do
        unint64_t v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }

    if ((v17 | 2) != 2) {
      goto LABEL_102;
    }
  }

  if (v121)
  {
    uint64_t v61 = sub_1000BCA84(a1, a2, &v119[1]);
    uint64_t v18 = v79;
    if (v119[0]) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = v61;
    }
    v119[0] = v62;
    if (v62 == 1)
    {
      uint64_t v63 = *(void *)(*(void *)&v119[1] + 8LL);
      unint64_t v64 = *(void *)(a1 + 8);
      uint64_t v65 = *(void *)(v64 + 48);
      sub_1000BF87C( (void *)a1,  a2,  v65 + (v65 + 1)
      * (((*(void *)(*(void *)&v119[1] + 352LL)
         + (*(void *)(v63 + 48) + *(void *)(v63 + 48) * v120)
         / (unint64_t)(*(void *)(v63 + 48) + 1LL)
         * *(unsigned int *)(v63 + 20))
        / *(unsigned __int16 *)(v63 + 18)
        - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v64 + 18))
       / (v65
        * (unint64_t)(*(_DWORD *)(v64 + 20) / *(unsigned __int16 *)(v64 + 18)))));
    }
  }

  else
  {
    uint64_t v18 = v79;
  }

uint64_t sub_10001E4C4(curl_slist **a1, unsigned int a2, char *__s, uint64_t a4, uint64_t a5)
{
  v116[0] = 0LL;
  v116[1] = 0LL;
  v117 = 0LL;
  v114[0] = 0LL;
  v114[1] = 0LL;
  uint64_t v115 = 0LL;
  v112[0] = 0LL;
  v112[1] = 0LL;
  char v113 = 0LL;
  v110[0] = 0LL;
  v110[1] = 0LL;
  __int16 v111 = 0LL;
  int v121 = 0;
  memset(__sa, 0, sizeof(__sa));
  size_t v10 = strlen(__s);
  if (v10 < 7) {
    goto LABEL_8;
  }
  if (*(_DWORD *)__s == 1886680168 && *(_DWORD *)(__s + 3) == 791624304)
  {
    uint64_t v19 = 7LL;
  }

  else
  {
    if (v10 < 8 || *(void *)__s != 0x2F2F3A7370747468LL)
    {
LABEL_8:
      uint64_t v14 = "Invalid URL";
      __int16 v15 = 486;
LABEL_9:
      int v16 = 0;
LABEL_10:
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Sign",  v15,  84,  v16,  v14,  v11,  v12,  v98);
LABEL_11:
      BOOL v17 = 0;
      goto LABEL_12;
    }

    uint64_t v19 = 8LL;
  }

  char v20 = &__s[v19];
  CURLcode v21 = strchr(&__s[v19], 47);
  if (!v21)
  {
    uint64_t v14 = "Invalid URL";
    __int16 v15 = 488;
    goto LABEL_9;
  }

  CURLcode v22 = v21;
  unsigned int v108 = v20;
  unsigned int v106 = a2;
  CURLcode v23 = strchr(v21, 63);
  BOOL v24 = "/";
  uint64_t v107 = v22;
  if (!v23)
  {
    size_t v30 = strlen(v22);
    if (v30 <= 1) {
      uint64_t v29 = 1LL;
    }
    else {
      uint64_t v29 = v30;
    }
    if (v30) {
      BOOL v24 = v22;
    }
    goto LABEL_32;
  }

  BOOL v25 = v23;
  uint64_t v26 = v23 + 1;
  size_t v27 = strlen(v23 + 1);
  BOOL v28 = v25 == v22;
  if (v25 == v22) {
    uint64_t v29 = 1LL;
  }
  else {
    uint64_t v29 = v25 - v22;
  }
  if (!v28) {
    BOOL v24 = v22;
  }
  if (!v27)
  {
LABEL_32:
    size_t v27 = 0LL;
    uint64_t v26 = "";
  }

  size_t __n = v27;
  char v105 = (char *)v26;
  if ((sub_10001DC1C(a1, "X-Amz-Date: %s", (const char *)(a4 + 68)) & 0x80000000) != 0
    || *(_BYTE *)(a4 + 452)
    && (sub_10001DC1C(a1, "X-Amz-Security-Token: %s", (const char *)(a4 + 452)) & 0x80000000) != 0)
  {
    goto LABEL_11;
  }

  __srCC_SHA256_CTX c = (char *)v24;
  if (a5)
  {
    sub_10001DA2C((uint64_t)&v122, *(const void **)a5, *(void *)(a5 + 8));
    if (v122)
    {
      uint64_t v31 = v29;
      unsigned __int32 v32 = v123;
      uint64_t v33 = 2LL * v122;
      size_t v34 = v33 | 1;
      uint64_t v35 = __str;
      do
      {
        int v36 = *v32++;
        snprintf(v35, v34, "%02x", v36);
        v34 -= 2LL;
        v35 += 2;
      }

      while (v34 != 1);
LABEL_44:
      uint64_t v29 = v31;
      goto LABEL_46;
    }
  }

  else
  {
    sub_10001DA2C((uint64_t)&v122, 0LL, 0);
    if (v122)
    {
      uint64_t v31 = v29;
      char v37 = v123;
      uint64_t v33 = 2LL * v122;
      size_t v38 = v33 | 1;
      int v39 = __str;
      do
      {
        int v40 = *v37++;
        snprintf(v39, v38, "%02x", v40);
        v38 -= 2LL;
        v39 += 2;
      }

      while (v38 != 1);
      goto LABEL_44;
    }
  }

  uint64_t v33 = 0LL;
LABEL_46:
  __str[v33] = 0;
  memset_s(&v122, 0x104uLL, 0, 0x104uLL);
  if ((sub_10001DC1C(a1, "X-Amz-Content-Sha256: %s", __str) & 0x80000000) != 0) {
    goto LABEL_11;
  }
  char v41 = *a1;
  if (*a1)
  {
    uint64_t v42 = 0LL;
    do
    {
      ++v42;
      char v41 = v41->next;
    }

    while (v41);
  }

  else
  {
    uint64_t v42 = 0LL;
  }

  unsigned int v109 = calloc(v42 + 1, 8uLL);
  if (!v109)
  {
    int v16 = *__error();
    uint64_t v14 = "malloc";
    __int16 v15 = 520;
    goto LABEL_10;
  }

  unint64_t v101 = (char *)(a4 + 68);
  size_t v102 = v29;
  unsigned int v99 = a1;
  uint64_t v100 = a4;
  int v43 = *a1;
  if (!v43)
  {
    uint64_t v44 = 0LL;
LABEL_77:
    size_t v53 = v22 - v108;
    size_t v54 = v107 - v108 + 6;
    if (v54 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_82:
      int v58 = *__error();
      __int16 v61 = 554;
      goto LABEL_85;
    }

    __int128 v55 = (char *)malloc(v54);
    if (!v55) {
      goto LABEL_82;
    }
    __int128 v56 = &v55[v53];
    v109[v44] = v55;
    v55[4] = 58;
    *(_DWORD *)__int128 v55 = 1953722216;
    memcpy(v55 + 5, v108, v53);
    v56[5] = 0;
    qsort(v109, v44 + 1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_10001F000);
    if (v106 > 3) {
      unint64_t v57 = "???";
    }
    else {
      unint64_t v57 = off_100167458[v106];
    }
    size_t v62 = strlen(v57);
    if ((sub_10001F00C(v116, v57, v62) & 0x80000000) == 0
      && (sub_10001F00C(v116, "\n", 1uLL) & 0x80000000) == 0
      && (sub_10001F00C(v116, __src, v102) & 0x80000000) == 0
      && (sub_10001F00C(v116, "\n", 1uLL) & 0x80000000) == 0
      && (sub_10001F00C(v116, v105, __n) & 0x80000000) == 0
      && (sub_10001F00C(v116, "\n", 1uLL) & 0x80000000) == 0)
    {
      if (v44 == -1)
      {
LABEL_102:
        if ((sub_10001F00C(v116, "\n", 1uLL) & 0x80000000) == 0)
        {
          unint64_t v70 = v115;
          size_t v71 = strlen(v115);
          if ((sub_10001F00C(v116, v115, v71) & 0x80000000) == 0 && (sub_10001F00C(v116, "\n", 1uLL) & 0x80000000) == 0)
          {
            size_t v72 = strlen(__str);
            if ((sub_10001F00C(v116, __str, v72) & 0x80000000) == 0
              && (sub_10001F00C(v112, "AWS4-HMAC-SHA256\n", 0x11uLL) & 0x80000000) == 0)
            {
              size_t v73 = strlen(v101);
              if ((sub_10001F00C(v112, v101, v73) & 0x80000000) == 0
                && (sub_10001F00C(v112, "\n", 1uLL) & 0x80000000) == 0)
              {
                uint64_t v74 = (char *)(v100 + 4);
                size_t v75 = strlen((const char *)(v100 + 4));
                if ((sub_10001F00C(v112, (void *)(v100 + 4), v75) & 0x80000000) == 0
                  && (sub_10001F00C(v112, "/", 1uLL) & 0x80000000) == 0)
                {
                  std::string v76 = (char *)(v100 + 132);
                  size_t v77 = strlen((const char *)(v100 + 132));
                  if ((sub_10001F00C(v112, (void *)(v100 + 132), v77) & 0x80000000) == 0
                    && (sub_10001F00C(v112, "/s3/aws4_request\n", 0x11uLL) & 0x80000000) == 0)
                  {
                    CC_LONG v78 = strlen(v117);
                    sub_10001DA2C((uint64_t)&v122, v117, v78);
                    if (v122)
                    {
                      char v79 = v123;
                      uint64_t v80 = 2LL * v122;
                      size_t v81 = v80 | 1;
                      __int128 v82 = v118;
                      do
                      {
                        int v83 = *v79++;
                        snprintf(v82, v81, "%02x", v83);
                        v81 -= 2LL;
                        v82 += 2;
                      }

                      while (v81 != 1);
                    }

                    else
                    {
                      uint64_t v80 = 0LL;
                    }

                    v118[v80] = 0;
                    memset_s(&v122, 0x104uLL, 0, 0x104uLL);
                    size_t v86 = strlen(v118);
                    if ((sub_10001F00C(v112, v118, v86) & 0x80000000) == 0)
                    {
                      size_t v87 = strlen(v113);
                      sub_10001D994(__sa, (unsigned int *)(v100 + 2500), v113, v87);
                      if (LODWORD(__sa[0]))
                      {
                        int64x2_t v88 = (unsigned __int8 *)__sa + 4;
                        uint64_t v89 = 2LL * LODWORD(__sa[0]);
                        size_t v90 = v89 | 1;
                        v91 = v118;
                        do
                        {
                          int v92 = *v88++;
                          snprintf(v91, v90, "%02x", v92);
                          v90 -= 2LL;
                          v91 += 2;
                        }

                        while (v90 != 1);
                      }

                      else
                      {
                        uint64_t v89 = 0LL;
                      }

                      v118[v89] = 0;
                      if ((sub_10001F00C(v110, "AWS4-HMAC-SHA256 Credential=", 0x1CuLL) & 0x80000000) == 0)
                      {
                        size_t v93 = strlen((const char *)(v100 + 196));
                        if ((sub_10001F00C(v110, (void *)(v100 + 196), v93) & 0x80000000) == 0
                          && (sub_10001F00C(v110, "/", 1uLL) & 0x80000000) == 0)
                        {
                          size_t v94 = strlen(v74);
                          if ((sub_10001F00C(v110, v74, v94) & 0x80000000) == 0
                            && (sub_10001F00C(v110, "/", 1uLL) & 0x80000000) == 0)
                          {
                            size_t v95 = strlen(v76);
                            if ((sub_10001F00C(v110, v76, v95) & 0x80000000) == 0
                              && (sub_10001F00C(v110, "/s3/aws4_request,SignedHeaders=", 0x1FuLL) & 0x80000000) == 0)
                            {
                              size_t v96 = strlen(v70);
                              if ((sub_10001F00C(v110, v70, v96) & 0x80000000) == 0
                                && (sub_10001F00C(v110, ",Signature=", 0xBuLL) & 0x80000000) == 0)
                              {
                                size_t v97 = strlen(v118);
                                if ((sub_10001F00C(v110, v118, v97) & 0x80000000) == 0)
                                {
                                  BOOL v17 = (int)sub_10001DC1C(v99, "Authorization: %s", v111) >= 0;
                                  goto LABEL_119;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        uint64_t v63 = 0LL;
        while (1)
        {
          unint64_t v64 = (char *)v109[v63];
          uint64_t v65 = strchr(v64, 58);
          if (!v65) {
            break;
          }
          v68 = v65;
          size_t v69 = strlen(v64);
          if ((sub_10001F00C(v116, v64, v69) & 0x80000000) != 0
            || (sub_10001F00C(v116, "\n", 1uLL) & 0x80000000) != 0
            || v63 && (sub_10001F00C(v114, ";", 1uLL) & 0x80000000) != 0
            || (sub_10001F00C(v114, v64, v68 - v64) & 0x80000000) != 0)
          {
            goto LABEL_118;
          }

          if (v44 + 1 == ++v63) {
            goto LABEL_102;
          }
        }

        sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Sign",  580,  84,  0,  "Invalid header: %s",  v66,  v67,  (char)v64);
      }
    }

LABEL_118:
    BOOL v17 = 0;
LABEL_119:
    ++v44;
    goto LABEL_120;
  }

  uint64_t v44 = 0LL;
  while (1)
  {
    data = v43->data;
    if (strncasecmp(v43->data, "x-amz-", 6uLL)) {
      goto LABEL_73;
    }
    size_t v46 = strlen(data);
    if (v46 + 1 >= 0x2000000001LL) {
      break;
    }
    char v47 = malloc(v46 + 1);
    if (!v47) {
      goto LABEL_84;
    }
    uint64_t v48 = v47;
    v109[v44] = v47;
    if (v46)
    {
      uint64_t v49 = 0LL;
      uint64_t v50 = 0LL;
      int v51 = 1;
      while (1)
      {
        __darwin_ct_rune_t v52 = v43->data[v49];
        if (v52 < 0)
        {
          if (!__maskrune(v43->data[v49], 0x4000uLL))
          {
LABEL_64:
            if (v52 == 58) {
              int v51 = 0;
            }
            if (v51) {
              LOBYTE(v52) = __tolower(v52);
            }
            v48[v50++] = v52;
          }
        }

        else if ((_DefaultRuneLocale.__runetype[v52] & 0x4000) == 0)
        {
          goto LABEL_64;
        }

        if (v46 == ++v49) {
          goto LABEL_72;
        }
      }
    }

    uint64_t v50 = 0LL;
LABEL_72:
    ++v44;
    v48[v50] = 0;
LABEL_73:
    int v43 = v43->next;
    if (!v43) {
      goto LABEL_77;
    }
  }

  *__error() = 12;
LABEL_84:
  int v58 = *__error();
  __int16 v61 = 538;
LABEL_85:
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Sign",  v61,  84,  v58,  "malloc",  v59,  v60,  v98);
  BOOL v17 = 0;
LABEL_120:
  if (v44)
  {
    uint64_t v84 = (void **)v109;
    do
    {
      char v85 = *v84++;
      free(v85);
      --v44;
    }

    while (v44);
  }

  free(v109);
LABEL_12:
  memset_s(__sa, 0x104uLL, 0, 0x104uLL);
  memset_s(v118, 0x80uLL, 0, 0x80uLL);
  memset_s(__str, 0x80uLL, 0, 0x80uLL);
  sub_10001F114((uint64_t)v116);
  sub_10001F114((uint64_t)v114);
  sub_10001F114((uint64_t)v112);
  sub_10001F114((uint64_t)v110);
  if (v17) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10001F000(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_10001F00C(unint64_t *a1, void *__src, size_t __n)
{
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  size_t v8 = v6 + __n + 1;
  BOOL v9 = v8 >= *a1;
  size_t v10 = v8 - *a1;
  if (!v9) {
    size_t v10 = 0LL;
  }
  unint64_t v11 = (v10 + 255) & 0xFFFFFFFFFFFFFF00LL;
  unint64_t v12 = v7 + v11;
  __int16 v13 = (char *)a1[2];
  if (v7 + v11 <= v7) {
    goto LABEL_8;
  }
  if (v12 < 0x2000000001LL)
  {
    uint64_t v14 = (char *)realloc((void *)a1[2], v7 + v11);
    if (!v14)
    {
      free(v13);
      goto LABEL_10;
    }

    a1[2] = (unint64_t)v14;
    *a1 = v12;
    __int16 v13 = v14;
    unint64_t v6 = a1[1];
LABEL_8:
    memcpy(&v13[v6], __src, __n);
    uint64_t result = 0LL;
    unint64_t v16 = a1[2];
    uint64_t v17 = a1[1] + __n;
    a1[1] = v17;
    *(_BYTE *)(v16 + v17) = 0;
    return result;
  }

  *__error() = 12;
LABEL_10:
  a1[2] = 0LL;
  uint64_t v18 = __error();
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3StringBufferAppend",  431,  84,  *v18,  "malloc",  v19,  v20,  v21);
  *a1 = 0LL;
  a1[1] = 0LL;
  return 0xFFFFFFFFLL;
}

void sub_10001F114(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1) {
    memset_s(*(void **)(a1 + 16), *(void *)a1, 0, *(void *)a1);
  }
  free(v1);
}

uint64_t sub_10001F14C(void *__s, char *a2, uint64_t a3, uint64_t a4)
{
  if (__s) {
    memset_s(__s, 0x18uLL, 0, 0x18uLL);
  }
  *__s = a4;
  if (a2)
  {
    size_t v8 = strlen(a2);
    size_t v9 = v8 + 1;
    if (v8 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_10:
      __s[1] = 0LL;
      int v13 = *__error();
      unint64_t v16 = "strdup";
      __int16 v17 = 653;
      goto LABEL_15;
    }

    size_t v10 = malloc(v8 + 1);
    if (!v10) {
      goto LABEL_10;
    }
    unint64_t v11 = v10;
    memcpy(v10, a2, v9);
    __s[1] = v11;
  }

  if (a3) {
    uint64_t v12 = sub_10001CF30(a3);
  }
  else {
    uint64_t v12 = (uint64_t)AAS3ContextCreate();
  }
  __s[2] = v12;
  if (v12) {
    return 0LL;
  }
  int v13 = *__error();
  unint64_t v16 = "malloc";
  __int16 v17 = 656;
LABEL_15:
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3StreamBaseInit",  v17,  84,  v13,  v16,  v14,  v15,  v19);
  sub_10001F278((uint64_t)__s);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10001F278(uint64_t a1)
{
  return memset_s((void *)a1, 0x18uLL, 0, 0x18uLL);
}

AAByteStream_impl *AAS3DownloadStreamOpen(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && *(_DWORD *)a2) {
    return sub_10001D678(a1, a2, a3);
  }
  else {
    return sub_100020BF4(a1, a2, a3, a4);
  }
}

void sub_10001F620( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10001F64C(uint64_t a1, void *a2, void *a3, id a4)
{
  unint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  +[AAS3DownloadSession completeRequest:data:response:error:]( &OBJC_CLASS___AAS3DownloadSession,  "completeRequest:data:response:error:",  WeakRetained,  v9,  v8,  v7);
}

void sub_10001F6EC(uint64_t a1, uint64_t a2)
{
}

void sub_10001F6F8(uint64_t a1)
{
}

LABEL_13:
  return v22;
}

  char v21 = v31;
  if (v31)
  {
    CURLcode v22 = (unint64_t *)&v31->__shared_owners_;
    do
      CURLcode v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  return v20;
}

    uint64_t v3 = v2[2];
    v2[2] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v2[1];
    v2[1] = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    operator delete(v2);
    goto LABEL_18;
  }

  if (sub_1000B866C())
  {
    *(void *)&unint64_t v6 = "sparse_bundles::Band::~Band()";
    *((void *)&v6 + 1) = 27LL;
    id v7 = 2;
    sub_100060BDC(v8, &v6);
    sub_100004E4C(&v9, (uint64_t)"Closing an unchanged ", 21LL);
    sub_100074930(&v9, a1);
    std::ostream::~ostream(&v9, off_1001709D8);
    sub_100066270((uint64_t)v8);
    std::ios::~ios(v10);
  }

  sub_100026AC4((uint64_t)&v14, v15);
}

uint64_t sub_100020A68(void *a1)
{
  if (a1)
  {
    double v2 = (void *)a1[3];
    if (v2)
    {
      a1[3] = 0LL;
      atomic_store((unint64_t)[v2 bytesDownloaded], a1 + 5);
      [v2 invalidateAndCancel];
    }

    if (*a1 >> 62)
    {
      gettimeofday(&v10, 0LL);
      double v3 = (double)v10.tv_sec + (double)v10.tv_usec * 0.000001 - *((double *)a1 + 6);
      fwrite("AAS3DownloadStream (NSURLSession)\n", 0x22uLL, 1uLL, __stderrp);
      fprintf(__stderrp, "%12u max attempts for a request\n", *((_DWORD *)a1 + 14));
      fprintf(__stderrp, "%12u max requests in flight\n", *((_DWORD *)a1 + 16));
      fprintf(__stderrp, "%12.2f initial interval between retries (s)\n", *((float *)a1 + 15));
      uint64_t v4 = __stderrp;
      unint64_t v5 = atomic_load(a1 + 5);
      unint64_t v6 = atomic_load(a1 + 5);
      fprintf(v4, "%12llu bytes downloaded (%.2f MB)\n", v5, (double)v6 * 0.000000953674316);
      id v7 = __stderrp;
      unint64_t v8 = atomic_load(a1 + 5);
      fprintf(v7, "%12.2f MB/s download speed\n", (double)v8 / v3 * 0.000000953674316);
    }

    sub_10001F278((uint64_t)a1);
    memset_s(a1, 0x48uLL, 0, 0x48uLL);
    free(a1);
  }

  return 0LL;
}

AAByteStream sub_100020BF4(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  AAByteStream v8 = AACustomByteStreamOpen();
  id v9 = (double *)malloc(0x48uLL);
  timeval v10 = v9;
  if (!v9 || (memset_s(v9, 0x48uLL, 0, 0x48uLL), !v8))
  {
    perror("malloc");
    goto LABEL_12;
  }

  if ((sub_10001F14C(v10, a1, a2, a3) & 0x80000000) != 0)
  {
    char v19 = "s3StreamBaseInit";
    __int16 v20 = 697;
LABEL_11:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamURLSession.m",  (uint64_t)"s3DownloadStreamOpen_urlsession",  v20,  121,  0,  v19,  v11,  v12,  v22.tv_sec);
LABEL_12:
    free(v8);
    sub_100020A68(v10);
    return 0LL;
  }

  gettimeofday(&v22, 0LL);
  v10[6] = (double)v22.tv_sec + (double)v22.tv_usec * 0.000001;
  v10[7] = 32.0;
  if (a4) {
    int v13 = a4;
  }
  else {
    int v13 = 16;
  }
  *((_DWORD *)v10 + 16) = v13;
  uint64_t v14 = objc_alloc(&OBJC_CLASS___AAS3DownloadSession);
  uint64_t v15 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1);
  unint64_t v16 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v15);
  LODWORD(v17) = *((_DWORD *)v10 + 15);
  uint64_t v18 = -[AAS3DownloadSession initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:]( v14,  "initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:",  v16,  v10,  *((unsigned int *)v10 + 14),  *((unsigned int *)v10 + 16),  v17);

  if (!v18)
  {
    char v19 = "creating session";
    __int16 v20 = 710;
    goto LABEL_11;
  }

  *((void *)v10 + 3) = v18;
  *(void *)AAByteStream v8 = v10;
  *((void *)v8 + 1) = sub_100020A68;
  *((void *)v8 + 4) = sub_100020DEC;
  *((void *)v8 + 2) = sub_100020E60;
  *((void *)v8 + 10) = sub_100020E78;
  return v8;
}

id sub_100020DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a1 >> 62 == 3LL) {
    fprintf(__stderrp, "NSURLSession read to buffer nbyte=%zx offset=%llx\n", a3, a4);
  }
  return _[*(id *)(a1 + 24) readToBuffer:a2 size:a3 atOffset:a4];
}

id sub_100020E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = (unint64_t *)(a1 + 32);
  do
    uint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 + a3, v3));
  return sub_100020DEC(a1, a2, a3, v4);
}

id sub_100020E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a1 >> 62 == 3LL) {
    fprintf(__stderrp, "NSURLSession read to stream nbyte=%zx offset=%llx\n", a3, a4);
  }
  return _[*(id *)(a1 + 24) readToAsyncByteStream:a2 size:a3 atOffset:a4];
}

uint64_t sub_100020EEC(char **a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x58uLL);
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    int v7 = *__error();
    timeval v10 = "malloc";
    __int16 v11 = 308;
LABEL_12:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextCreate",  v11,  125,  v7,  v10,  v8,  v9,  v16);
    goto LABEL_13;
  }

  memset_s(v4, 0x58uLL, 0, 0x58uLL);
  *(void *)(v5 + 80) = a2;
  if (a1)
  {
    if ((sub_100022F28(v5, 0, *a1, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0
      || (sub_100022F28(v5, 1u, a1[1], "KNOX_KEYTAB_FILE") & 0x80000000) != 0
      || (sub_100022F28(v5, 2u, a1[2], "KNOX_DAW_TOKEN") & 0x80000000) != 0
      || (sub_100022F28(v5, 3u, a1[3], "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0
      || (sub_100022F28(v5, 4u, a1[4], "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0
      || (sub_100022F28(v5, 5u, a1[5], "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0
      || (sub_100022F28(v5, 8u, a1[6], "KNOX_USER_AGENT") & 0x80000000) != 0)
    {
      goto LABEL_13;
    }

    unint64_t v6 = a1[7];
  }

  else
  {
    if ((sub_100022F28(v5, 0, 0LL, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100022F28(v5, 1u, 0LL, "KNOX_KEYTAB_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100022F28(v5, 2u, 0LL, "KNOX_DAW_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100022F28(v5, 3u, 0LL, "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100022F28(v5, 4u, 0LL, "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100022F28(v5, 5u, 0LL, "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    int v13 = sub_100022F28(v5, 8u, 0LL, "KNOX_USER_AGENT");
    unint64_t v6 = 0LL;
    if (v13 < 0) {
      goto LABEL_13;
    }
  }

  if ((sub_100022F28(v5, 9u, v6, "KNOX_PROXY") & 0x80000000) != 0)
  {
LABEL_13:
    sub_100021E74((char *)v5);
    return 0LL;
  }

  if (!*(void *)(v5 + 16))
  {
    uint64_t v15 = *(char **)(v5 + 24);
    if (v15)
    {
      if ((sub_100023008(v5, 2u, v15) & 0x80000000) != 0)
      {
        timeval v10 = "loading daw token";
        __int16 v11 = 324;
        goto LABEL_31;
      }
    }
  }

  if (!*(void *)(v5 + 32))
  {
    uint64_t v14 = *(char **)(v5 + 40);
    if (v14)
    {
      if ((sub_100023008(v5, 4u, v14) & 0x80000000) != 0)
      {
        timeval v10 = "loading westgate token";
        __int16 v11 = 327;
LABEL_31:
        int v7 = 0;
        goto LABEL_12;
      }
    }
  }

  return v5;
}

uint64_t sub_1000211B0(void *a1, char *__s)
{
  if (a1[4]) {
    return 0LL;
  }
  uint64_t v5 = (const char *)a1[2];
  if (v5) {
    goto LABEL_4;
  }
  size_t v11 = strlen(__s);
  size_t v12 = v11 + 200;
  if (v11 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_72:
    unint64_t v64 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetServiceName",  345,  125,  *v64,  "malloc",  v65,  v66,  v115);
    size_t v27 = 0LL;
    size_t v38 = 0LL;
    size_t v30 = 0LL;
LABEL_101:
    sub_100023CE8(v38);
    AAByteStreamClose(v30);
    free(v27);
    BOOL v24 = "getting service name and realm";
    __int16 v25 = 649;
    goto LABEL_102;
  }

  uint64_t v26 = malloc(v11 + 200);
  if (!v26) {
    goto LABEL_72;
  }
  size_t v27 = v26;
  size_t v30 = (AAByteStream_impl *)AATempStreamOpen(0x100000LL);
  if (!v30)
  {
    size_t v87 = "AATempStreamOpen";
    __int16 v88 = 348;
LABEL_94:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetServiceName",  v88,  125,  0,  v87,  v28,  v29,  v115);
    size_t v38 = 0LL;
    goto LABEL_101;
  }

  snprintf((char *)v27, v12, "https://%s/westgate/appinfo", __s);
  if ((sub_100021EB4((uint64_t)a1, 1u, (char *)v27, 0LL, (uint64_t)v30) & 0x80000000) != 0)
  {
    char v115 = (char)v27;
    size_t v87 = "Knox request failed: %s";
    __int16 v88 = 351;
    goto LABEL_94;
  }

  AAByteStreamSeek(v30, 0LL, 0);
  uint64_t v31 = (void **)sub_100023C00((uint64_t)v30);
  size_t v38 = v31;
  if (!v31)
  {
    unsigned int v99 = "AAJSONInputStreamOpen";
    __int16 v100 = 356;
    goto LABEL_100;
  }

  if ((sub_100023D30((uint64_t)v31, (int *)&__sa, v32, v33, v34, v35, v36, v37) & 0x80000000) != 0)
  {
LABEL_95:
    unsigned int v99 = "parsing JSON";
    __int16 v100 = 363;
    goto LABEL_100;
  }

  int v43 = 0;
  int v44 = 0;
  while (1)
  {
    if (__sa < 2)
    {
      if (v44 == 1 && __s1 && !strcmp(__s1, "idms")) {
        int v43 = 1;
      }
      ++v44;
      goto LABEL_41;
    }

    if ((_DWORD)__sa != 2)
    {
      if ((_DWORD)__sa == 3)
      {
        if (v43)
        {
          CURLcode v45 = __s1;
          if (__s1)
          {
            if (strcmp(__s1, "realm"))
            {
LABEL_33:
              if (!strcmp(v45, "serviceName") && (sub_100022F28((uint64_t)a1, 7u, v119, 0LL) & 0x80000000) != 0)
              {
                unsigned int v99 = "serviceName";
                __int16 v100 = 378;
                goto LABEL_100;
              }

              goto LABEL_41;
            }

            if ((sub_100022F28((uint64_t)a1, 6u, v119, 0LL) & 0x80000000) == 0)
            {
              CURLcode v45 = __s1;
              goto LABEL_33;
            }

            unsigned int v99 = "realm";
            __int16 v100 = 377;
LABEL_100:
            sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetServiceName",  v100,  125,  0,  v99,  v36,  v37,  v116);
            goto LABEL_101;
          }
        }
      }

LABEL_41:
      if (!v44) {
        break;
      }
      goto LABEL_42;
    }

    int v43 = 0;
    if (!--v44) {
      break;
    }
LABEL_42:
  }

  if (!a1[6] || !a1[7])
  {
    unsigned int v99 = "could not parse service name and realm";
    __int16 v100 = 389;
    goto LABEL_100;
  }

  sub_100023CE8(v38);
  AAByteStreamClose(v30);
  free(v27);
  uint64_t __sa = 0LL;
  __s1 = 0LL;
  v119 = 0LL;
  uint64_t v48 = (const char *)a1[6];
  if (!v48 || (uint64_t v49 = (const char *)a1[7]) == 0LL)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  411,  125,  0,  "missing service name or realm",  v46,  v47,  v116);
    __darwin_ct_rune_t v52 = 0LL;
LABEL_111:
    int v93 = 0;
    size_t v54 = 0LL;
    goto LABEL_156;
  }

  uint64_t v50 = a1[10] >> 62;
  if (v50)
  {
    fwrite("  obtaining a DAW token from the appleconnect CLI\n", 0x32uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  - realm: %s\n", v48);
    fprintf(__stderrp, "  - service name: %s\n", v49);
  }

  int v51 = (char *)malloc(0x4000uLL);
  __darwin_ct_rune_t v52 = v51;
  if (!v51)
  {
    uint64_t __sa = 0LL;
    __s1 = 0LL;
    v119 = 0LL;
    size_t v90 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  420,  125,  *v90,  "malloc",  v91,  v92,  v116);
    goto LABEL_111;
  }

  __s1 = (char *)0x4000;
  v119 = v51;
  size_t v53 = (char *)malloc(0x4000uLL);
  size_t v54 = v53;
  if (!v53)
  {
    int v94 = *__error();
    size_t v97 = "malloc";
    __int16 v98 = 422;
LABEL_115:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v98,  125,  v94,  v97,  v95,  v96,  v116);
    int v93 = 0;
    goto LABEL_156;
  }

  snprintf( v53,  0x4000uLL,  "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken --realm %s --serviceName %s",  v48,  v49);
  if (*a1)
  {
    if (v50) {
      fprintf(__stderrp, "  - account: %s\n", (const char *)*a1);
    }
    __strlcat_chk(v54, " --account ", 0x4000LL, 0x4000LL);
    __strlcat_chk(v54, *a1, 0x4000LL, 0x4000LL);
  }

  if (a1[1])
  {
    if (v50) {
      fprintf(__stderrp, "  - keytab file: %s\n", (const char *)a1[1]);
    }
    __strlcat_chk(v54, " --keytab ", 0x4000LL, 0x4000LL);
    __strlcat_chk(v54, a1[1], 0x4000LL, 0x4000LL);
  }

  __int128 v55 = popen(v54, "r");
  if (!v55)
  {
    int v94 = *__error();
    char v116 = (char)v54;
    size_t v97 = "%s";
    __int16 v98 = 444;
    goto LABEL_115;
  }

  __int128 v56 = v55;
  unint64_t v57 = 0LL;
  while (1)
  {
    size_t v58 = fread(&v52[v57], 1uLL, 0x4000 - v57, v56);
    if (v58)
    {
      unint64_t v61 = v57 + v58;
      if (__CFADD__(v57, v58) || v61 > 0x4000)
      {
        uint64_t __sa = v57;
        size_t v62 = "invalid read";
        __int16 v63 = 454;
        goto LABEL_153;
      }

      goto LABEL_70;
    }

    if (feof(v56)) {
      break;
    }
    if (ferror(v56))
    {
      uint64_t __sa = v57;
      int v109 = *__error();
      size_t v62 = "fread";
      __int16 v63 = 452;
      goto LABEL_154;
    }

    unint64_t v61 = v57;
LABEL_70:
    unint64_t v57 = v61;
    if (v61 == 0x4000)
    {
      uint64_t __sa = 0x4000LL;
      size_t v62 = "token is too long";
      __int16 v63 = 447;
      goto LABEL_153;
    }
  }

  uint64_t __sa = v57;
  if (v57)
  {
    unint64_t v101 = v52 - 1;
    do
    {
      uint64_t v102 = v101[v57];
      if (v101[v57] < 0) {
        __uint32_t v103 = __maskrune(v102, 0x4000uLL);
      }
      else {
        __uint32_t v103 = _DefaultRuneLocale.__runetype[v102] & 0x4000;
      }
      if (!v103) {
        break;
      }
      --v57;
    }

    while (v57);
    uint64_t __sa = v57;
  }

  unint64_t v104 = v57 + 1;
  uint64_t v105 = v57 == -1LL;
  uint64_t v106 = v105 << 63 >> 63;
  if (v106 != v105 || v106 < 0 || (v104 & 0x8000000000000000LL) != 0) {
    goto LABEL_152;
  }
  if (v104 <= 0x4000)
  {
    unsigned __int16 v110 = v119;
LABEL_140:
    uint64_t __sa = v57 + 1;
    v52[v57] = 0;
    if (v57 + 1 >= 6
      && (*(_DWORD *)v110 == 1415004484 ? (BOOL v112 = *((unsigned __int16 *)v110 + 2) == 20043) : (BOOL v112 = 0), v112))
    {
      if ((sub_100022F28((uint64_t)a1, 2u, v110, 0LL) & 0x80000000) == 0)
      {
        int v93 = 1;
        goto LABEL_147;
      }

      char v113 = "daw token";
      __int16 v114 = 463;
    }

    else
    {
      char v113 = "invalid token format";
      __int16 v114 = 460;
    }

    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v114,  125,  0,  v113,  v59,  v60,  v115);
    int v93 = 0;
LABEL_147:
    __darwin_ct_rune_t v52 = v110;
    goto LABEL_155;
  }

  for (size_t i = 0x4000LL; i < v104; i += v108)
  {
    size_t v108 = i >> 1;
    if ((i & (i >> 1)) != 0) {
      size_t v108 = i & (i >> 1);
    }
  }

  if (i >= 0x2000000001LL)
  {
    *__error() = 12;
    goto LABEL_151;
  }

  __int16 v111 = (char *)realloc(v52, i);
  if (v111)
  {
    unsigned __int16 v110 = v111;
    __s1 = (char *)i;
    v119 = v111;
    __darwin_ct_rune_t v52 = v111;
    goto LABEL_140;
  }

  free(v52);
LABEL_151:
  __darwin_ct_rune_t v52 = 0LL;
  uint64_t __sa = 0LL;
  __s1 = 0LL;
  v119 = 0LL;
LABEL_152:
  size_t v62 = "token is too long";
  __int16 v63 = 459;
LABEL_153:
  int v109 = 0;
LABEL_154:
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v63,  125,  v109,  v62,  v59,  v60,  v115);
  int v93 = 0;
LABEL_155:
  pclose(v56);
LABEL_156:
  free(v54);
  free(v52);
  memset_s(&__sa, 0x18uLL, 0, 0x18uLL);
  if (!v93)
  {
    BOOL v24 = "getting DAW token";
    __int16 v25 = 650;
    goto LABEL_102;
  }

  if (a1[4]) {
    return 0LL;
  }
  uint64_t v5 = (const char *)a1[2];
  if (!v5)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  486,  125,  0,  "missing host or DAW token",  v22,  v23,  v115);
    __int16 v20 = 0LL;
    uint64_t v8 = 0LL;
LABEL_17:
    char v21 = 0LL;
    double v17 = 0LL;
LABEL_18:
    sub_100023CE8(v20);
    AAByteStreamClose(v8);
    free(v17);
    free(v21);
    BOOL v24 = "getting Westgate token";
    __int16 v25 = 655;
LABEL_102:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextResolveWestgateToken",  v25,  125,  0,  v24,  v22,  v23,  v115);
    return 0xFFFFFFFFLL;
  }

  uint64_t v41 = v29;
  uint64_t v42 = v30;
  LOBYTE(v43) = 0;
  size_t v53 = 0;
  if (*((_BYTE *)a3 + 140))
  {
    int v43 = *a3;
    int v44 = *((_DWORD *)a3 + 2);
    uint64_t v49 = *(_OWORD *)((char *)a3 + 76);
    uint64_t v50 = *(_OWORD *)((char *)a3 + 92);
    int v51 = *(_OWORD *)((char *)a3 + 108);
    __darwin_ct_rune_t v52 = *(_OWORD *)((char *)a3 + 124);
    CURLcode v45 = *(_OWORD *)((char *)a3 + 12);
    uint64_t v46 = *(_OWORD *)((char *)a3 + 28);
    uint64_t v47 = *(_OWORD *)((char *)a3 + 44);
    uint64_t v48 = *(_OWORD *)((char *)a3 + 60);
    size_t v53 = 1;
  }

  uint64_t result = (uint64_t)sub_1000F5334(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  int v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

  *a4 = v15;
  return result;
}

LABEL_4:
  if (a1[10] >> 62) {
    fwrite("  requesting Westgate token from the Knox server\n", 0x31uLL, 1uLL, __stderrp);
  }
  uint64_t v8 = (AAByteStream_impl *)AATempStreamOpen(0x100000LL);
  if (!v8)
  {
    int v13 = "AATempStreamOpen";
    __int16 v14 = 491;
    int v15 = 0;
LABEL_16:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  v14,  125,  v15,  v13,  v6,  v7,  v115);
    __int16 v20 = 0LL;
    goto LABEL_17;
  }

  size_t v9 = strlen(__s);
  size_t v10 = v9 + 200;
  if (v9 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
    goto LABEL_15;
  }

  char v16 = malloc(v9 + 200);
  if (!v16)
  {
LABEL_15:
    int v15 = *__error();
    int v13 = "malloc";
    __int16 v14 = 495;
    goto LABEL_16;
  }

  double v17 = v16;
  size_t v18 = strlen(v5);
  size_t v19 = v18 + 200;
  if (v18 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_91:
    uint64_t v84 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  498,  125,  *v84,  "malloc",  v85,  v86,  v115);
    __int16 v20 = 0LL;
    char v21 = 0LL;
    goto LABEL_18;
  }

  uint64_t v67 = (char *)malloc(v18 + 200);
  if (!v67) {
    goto LABEL_91;
  }
  char v21 = v67;
  snprintf(v67, v19, "Authorization: Bearer %s", v5);
  v120[0] = v21;
  v120[1] = 0LL;
  snprintf((char *)v17, v10, "https://%s/westgate/token", __s);
  if ((sub_100021EB4((uint64_t)a1, 2u, (char *)v17, v120, (uint64_t)v8) & 0x80000000) != 0)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  505,  125,  0,  "Knox request failed: %s",  v68,  v69,  (char)v17);
    __int16 v20 = 0LL;
    goto LABEL_18;
  }

  AAByteStreamSeek(v8, 0LL, 0);
  unint64_t v70 = (void **)sub_100023C00((uint64_t)v8);
  __int16 v20 = v70;
  if (!v70)
  {
    __int128 v82 = "AAJSONInputStreamOpen";
    __int16 v83 = 510;
    goto LABEL_106;
  }

  if ((sub_100023D30((uint64_t)v70, (int *)&__sa, v71, v72, v73, v74, v75, v76) & 0x80000000) != 0)
  {
LABEL_90:
    __int128 v82 = "parsing JSON";
    __int16 v83 = 516;
LABEL_106:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  v83,  125,  0,  v82,  v75,  v76,  v115);
    goto LABEL_18;
  }

  int v81 = 0;
  while (1)
  {
    if (__sa < 2)
    {
      ++v81;
      goto LABEL_88;
    }

    if ((_DWORD)__sa == 2) {
      break;
    }
    if ((_DWORD)__sa != 3 || v81 != 1 || !__s1) {
      goto LABEL_88;
    }
    if (!strcasecmp(__s1, "password") && (sub_100022F28((uint64_t)a1, 4u, v119, 0LL) & 0x80000000) != 0)
    {
      __int128 v82 = "password";
      __int16 v83 = 529;
      goto LABEL_106;
    }

    int v81 = 1;
LABEL_89:
  }

  --v81;
LABEL_88:
  if (v81) {
    goto LABEL_89;
  }
  uint64_t v89 = (const char *)a1[4];
  if (!v89 || strncmp(v89, "WGTKN", 5uLL))
  {
    __int128 v82 = "invalid/missing token";
    __int16 v83 = 537;
    goto LABEL_106;
  }

  sub_100023CE8(v20);
  AAByteStreamClose(v8);
  free(v17);
  free(v21);
  if (!a1[4])
  {
    BOOL v24 = "invalid Westgate token";
    __int16 v25 = 658;
    goto LABEL_102;
  }

  return 0LL;
}

  return v12;
}

  uint64_t v6 = *((unsigned __int8 *)result + 16);
  if (!*((_BYTE *)result + 16))
  {
    uint64_t v8 = (uint64_t *)*result;
    uint64_t v7 = result[1];
    if (*result < v7 && *result + 1 < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  if (v6 != 3)
  {
    uint64_t v8 = (uint64_t *)*result;
    uint64_t v7 = result[1];
    if (*result < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  uint64_t v8 = (uint64_t *)*result;
  uint64_t v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    int v15 = a2[2];
    goto LABEL_33;
  }

void sub_100021E74(char *a1)
{
  if (a1)
  {
    for (uint64_t i = 0LL; i != 80; i += 8LL)
      free(*(void **)&a1[i]);
    free(a1);
  }

uint64_t sub_100021EB4(uint64_t a1, unsigned int a2, char *a3, const char **a4, uint64_t a5)
{
  v77[0] = 0LL;
  v77[1] = 0LL;
  __int128 v75 = 0uLL;
  uint64_t v76 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  size_t v10 = AAS3ContextCreate();
  uint64_t v78 = (uint64_t)v10;
  if (!v10)
  {
    unint64_t v57 = "AAS3ContextCreate";
    __int16 v58 = 189;
LABEL_41:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  v58,  125,  0,  v57,  v11,  v12,  v68);
    uint64_t v22 = 0LL;
LABEL_42:
    uint64_t v29 = 0LL;
    uint64_t v28 = 0LL;
LABEL_43:
    uint64_t v59 = 0xFFFFFFFFLL;
    goto LABEL_44;
  }

  uint64_t v13 = (uint64_t)v10;
  __int16 v14 = malloc(0x18uLL);
  int v15 = v14;
  if (!v14)
  {
    uint64_t v22 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
    goto LABEL_40;
  }

  memset_s(v14, 0x18uLL, 0, 0x18uLL);
  char v16 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
  uint64_t v22 = v16;
  if (!v16)
  {
LABEL_40:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamOpen",  165,  125,  0,  "malloc",  v20,  v21,  v68);
    free(v15);
    free(v22);
    unint64_t v57 = "open page stream";
    __int16 v58 = 192;
    goto LABEL_41;
  }

  *int v15 = a5;
  *char v16 = (uint64_t (*)(int *))v15;
  v16[1] = sub_10002322C;
  v16[3] = (uint64_t (*)(int *))sub_1000232C4;
  if ((AAS3ContextSetFieldString(v13, 5, *(char **)(a1 + 64), v17, v18, v19, v20, v21) & 0x80000000) != 0)
  {
    __int16 v61 = 194;
LABEL_47:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  v61,  125,  0,  "setup context",  v26,  v27,  v68);
    goto LABEL_42;
  }

  if ((AAS3ContextSetFieldString(v13, 0, *(char **)(a1 + 72), v23, v24, v25, v26, v27) & 0x80000000) != 0)
  {
    __int16 v61 = 195;
    goto LABEL_47;
  }

  uint64_t v28 = (char *)malloc(0x800uLL);
  if (!v28)
  {
    int v62 = *__error();
    __int16 v63 = 200;
LABEL_53:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  v63,  125,  v62,  "malloc",  v55,  v56,  v68);
    uint64_t v29 = 0LL;
    goto LABEL_43;
  }

  uint64_t v29 = 0LL;
  size_t v30 = "link:";
  unint64_t v70 = a3;
  uint64_t v71 = a4;
  while (2)
  {
    memset_s(v28, 0x800uLL, 0, 0x800uLL);
    __int128 v75 = 0uLL;
    uint64_t v76 = v22;
    uint64_t v72 = v28;
    uint64_t v73 = 2047LL;
    uint64_t v33 = a3;
    uint64_t v74 = 0LL;
    if (v29)
    {
      if (v22[1] == sub_10002322C)
      {
        uint64_t v34 = *v22;
        if (!*((_DWORD *)v34 + 5) || AAByteStreamWrite(*(AAByteStream *)v34, ",", 1uLL) == 1)
        {
          *(void *)((char *)v34 + 12) = 1LL;
LABEL_15:
          *((_DWORD *)v34 + 5) = 0;
          uint64_t v33 = v29;
          goto LABEL_16;
        }

        unint64_t v64 = "writing ','";
        __int16 v65 = 146;
      }

      else
      {
        unint64_t v64 = "invalid stream";
        __int16 v65 = 132;
      }

      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamEndPage",  v65,  125,  0,  v64,  v31,  v32,  v68);
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  209,  125,  0,  "page stream next page",  v66,  v67,  v69);
      goto LABEL_43;
    }

LABEL_16:
    if ((sub_10001DEA0(a2, v33, (uint64_t)v77, 0LL, &v75, (uint64_t)&v72, a4) & 0x80000000) != 0)
    {
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  212,  125,  0,  "request: %s",  v35,  v36,  (char)v33);
      goto LABEL_43;
    }

    free(v29);
    size_t v37 = strlen(v28);
    if (v37)
    {
      unint64_t v38 = v37;
      uint64_t v29 = 0LL;
      unint64_t v39 = 0LL;
      do
      {
        if (v38 <= v39 + 1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v38;
        }
        unint64_t v41 = v39;
        while (v28[v41] != 10)
        {
          if (v40 == ++v41)
          {
            unint64_t v41 = v40;
            break;
          }
        }

        v28[v41] = 0;
        if (v41 - v39 >= 5)
        {
          uint64_t v42 = &v28[v39];
          if (!strncmp(&v28[v39], v30, 5uLL))
          {
            int v43 = v30;
            int v44 = strchr(v42, 60);
            CURLcode v45 = strrchr(v42, 62);
            if (!v44 || (uint64_t v48 = v45) == 0LL || v45 <= v44)
            {
              sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  231,  125,  0,  "invalid link header (1): %s",  v46,  v47,  (char)v42);
              goto LABEL_43;
            }

            if (!strstr(v45, "rel=next"))
            {
              sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  233,  125,  0,  "invalid link header (2): %s",  v49,  v50,  (char)v42);
              goto LABEL_43;
            }

            *uint64_t v48 = 0;
            int v51 = v44 + 1;
            size_t v52 = strlen(v51);
            size_t v53 = v52 + 1;
            if (v52 + 1 >= 0x2000000001LL)
            {
              *__error() = 12;
LABEL_52:
              __int16 v63 = 236;
              int v62 = 0;
              goto LABEL_53;
            }

            size_t v54 = (char *)malloc(v52 + 1);
            if (!v54) {
              goto LABEL_52;
            }
            uint64_t v29 = v54;
            memcpy(v54, v51, v53);
            size_t v30 = v43;
          }
        }

        unint64_t v39 = v41 + 1;
      }

      while (v41 + 1 < v38);
      a3 = v70;
      a4 = v71;
      if (v29) {
        continue;
      }
    }

    else
    {
      uint64_t v29 = 0LL;
    }

    break;
  }

  uint64_t v59 = 0LL;
LABEL_44:
  free(v29);
  free(v28);
  AAByteStreamClose((AAByteStream)v22);
  AAS3ContextDestroy(v78);
  return v59;
}

    uint64_t v12 = (v12 + 1);
    if ((_DWORD)v12 == 13) {
      goto LABEL_17;
    }
  }

uint64_t sub_100022408( uint64_t a1, const char *a2, const char *a3, const char *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(char **)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 80);
  *a5 = 0LL;
  *a6 = 0LL;
  if (!v8)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  568,  125,  0,  "missing Westgate token",  a7,  a8,  v64);
    uint64_t v21 = 0LL;
    uint64_t v18 = 0LL;
LABEL_14:
    uint64_t v27 = 0LL;
    goto LABEL_15;
  }

  if (v9 >> 62) {
    fwrite("  requesting decryption components from the Knox server\n", 0x38uLL, 1uLL, __stderrp);
  }
  uint64_t v18 = (AAByteStream_impl *)AATempStreamOpen(0x100000LL);
  if (!v18)
  {
    uint64_t v22 = "AATempStreamOpen";
    __int16 v23 = 573;
    int v24 = 0;
LABEL_13:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  v23,  125,  v24,  v22,  v16,  v17,  v64);
    uint64_t v21 = 0LL;
    uint64_t v8 = 0LL;
    goto LABEL_14;
  }

  size_t v19 = strlen(a2);
  size_t v20 = v19 + 200;
  if (v19 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_12:
    int v24 = *__error();
    uint64_t v22 = "malloc";
    __int16 v23 = 577;
    goto LABEL_13;
  }

  __str = (char *)malloc(v19 + 200);
  if (!__str) {
    goto LABEL_12;
  }
  size_t v25 = strlen(v8);
  size_t v26 = v25 + 200;
  if (v25 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_54:
    uint64_t v59 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  580,  125,  *v59,  "malloc",  v60,  v61,  v64);
    uint64_t v21 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v28 = 0xFFFFFFFFLL;
    uint64_t v27 = __str;
    goto LABEL_16;
  }

  size_t v30 = (char *)malloc(v25 + 200);
  if (!v30) {
    goto LABEL_54;
  }
  __int16 v65 = v8;
  uint64_t v8 = v30;
  snprintf(v30, v26, "Authorization: Bearer %s", v65);
  v75[0] = v8;
  v75[1] = 0LL;
  uint64_t v67 = a4;
  uint64_t v27 = __str;
  snprintf(__str, v20, "https://%s/spaces/%s/files/%s/decryption-components", a2, a3, v67);
  if ((sub_100021EB4(a1, 2u, __str, v75, (uint64_t)v18) & 0x80000000) != 0)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  587,  125,  0,  "Knox request failed: %s",  v31,  v32,  (char)__str);
    uint64_t v21 = 0LL;
    goto LABEL_15;
  }

  AAByteStreamSeek(v18, 0LL, 0);
  uint64_t v33 = (void **)sub_100023C00((uint64_t)v18);
  uint64_t v21 = v33;
  if (!v33)
  {
    int v62 = "AAJSONInputStreamOpen";
    __int16 v63 = 592;
    goto LABEL_62;
  }

  if ((sub_100023D30((uint64_t)v33, (int *)&v72, v34, v35, v36, v37, v38, v39) & 0x80000000) != 0)
  {
LABEL_56:
    int v62 = "parsing JSON";
    __int16 v63 = 600;
    goto LABEL_62;
  }

  int v44 = 0;
  int v45 = 0;
  int v46 = 0;
  unint64_t v70 = v8;
  while (v72 >= 2)
  {
    if (v72 == 2)
    {
      int v45 = 0;
      int v44 = 0;
      --v46;
      goto LABEL_47;
    }

    if (v72 != 3) {
      goto LABEL_47;
    }
    uint64_t v47 = __s1;
    if (v46 == 2 && v45 && __s1 && !strcmp(__s1, "key"))
    {
      int v68 = v44;
      uint64_t v48 = __s;
      if (!__s) {
        goto LABEL_64;
      }
      size_t v49 = strlen(__s);
      size_t v50 = v49 + 1;
      if (v49 + 1 >= 0x2000000001LL)
      {
        *__error() = 12;
LABEL_64:
        *a6 = 0LL;
        sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  618,  125,  0,  "key",  v38,  v39,  v66);
        uint64_t v8 = v70;
        uint64_t v27 = __str;
        goto LABEL_15;
      }

      int v51 = malloc(v49 + 1);
      if (!v51) {
        goto LABEL_64;
      }
      size_t v52 = v51;
      memcpy(v51, v48, v50);
      *a6 = v52;
      uint64_t v27 = __str;
      int v44 = v68;
    }

    if (v46 != 2 || !v44 || !v47)
    {
      uint64_t v8 = v70;
      goto LABEL_47;
    }

    if (!strcmp(v47, "uri"))
    {
      int v69 = v44;
      size_t v54 = __s;
      uint64_t v8 = v70;
      if (!__s) {
        goto LABEL_66;
      }
      size_t v55 = strlen(__s);
      size_t v56 = v55 + 1;
      if (v55 + 1 >= 0x2000000001LL)
      {
        *__error() = 12;
LABEL_66:
        *a5 = 0LL;
        sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  623,  125,  0,  "uri",  v38,  v39,  v66);
        uint64_t v27 = __str;
        goto LABEL_15;
      }

      unint64_t v57 = malloc(v55 + 1);
      if (!v57) {
        goto LABEL_66;
      }
      __int16 v58 = v57;
      memcpy(v57, v54, v56);
      *a5 = v58;
      int v46 = 2;
      uint64_t v27 = __str;
      int v44 = v69;
    }

    else
    {
      int v46 = 2;
      uint64_t v8 = v70;
    }

LABEL_48:
  }

  if (v46 == 1)
  {
    size_t v53 = __s1;
    if (__s1)
    {
      if (!strcmp(__s1, "encryption")) {
        int v45 = 1;
      }
      if (!strcmp(v53, "location")) {
        int v44 = 1;
      }
    }
  }

  ++v46;
LABEL_47:
  if (v46) {
    goto LABEL_48;
  }
  if (*a5 && *a6)
  {
    uint64_t v28 = 0LL;
    goto LABEL_16;
  }

  int v62 = "invalid/missing decryption components";
  __int16 v63 = 631;
LABEL_62:
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  v63,  125,  0,  v62,  v38,  v39,  v66);
LABEL_15:
  uint64_t v28 = 0xFFFFFFFFLL;
LABEL_16:
  sub_100023CE8(v21);
  AAByteStreamClose(v18);
  free(v27);
  free(v8);
  return v28;
}

            uint64_t v40 = (void *)v16[1];
            if (v40)
            {
              do
              {
                uint64_t v41 = v40;
                uint64_t v40 = (void *)*v40;
              }

              while (v40);
            }

            else
            {
              do
              {
                uint64_t v41 = (void *)v16[2];
                uint64_t v42 = *v41 == (void)v16;
                uint64_t v16 = v41;
              }

              while (!v42);
            }

            uint64_t v16 = v41;
          }

          while (v41 != (void *)(v12 + 24));
        }

        *(_BYTE *)(v12 + 56) = 0;
        uint64_t v43 = v58;
        a1 = v52;
        uint64_t v8 = v53;
        uint64_t v11 = a4;
        if (v58)
        {
          int v44 = (unint64_t *)&v58->__shared_owners_;
          do
            int v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }

      sub_1000952C4(v8, &v61, &v60);
      int v46 = (std::__shared_weak_count *)*((void *)&v59 + 1);
      if (*((void *)&v59 + 1))
      {
        uint64_t v47 = (unint64_t *)(*((void *)&v59 + 1) + 8LL);
        do
          uint64_t v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }

      size_t v49 = (std::__shared_weak_count *)*((void *)&v60 + 1);
      if (*((void *)&v60 + 1))
      {
        size_t v50 = (unint64_t *)(*((void *)&v60 + 1) + 8LL);
        do
          int v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      uint64_t result = v61;
      uint64_t v61 = 0LL;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
      }
      ++v10;
    }

    while (v10 != v11);
  }

  return result;
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

uint64_t AAS3KnoxResolveURL( const char *a1, char **a2, void *a3, size_t a4, _BYTE *a5, size_t *a6, unint64_t a7)
{
  __s = 0LL;
  if (strncmp(a1, "knox://", 7uLL))
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  854,  125,  0,  "invalid Knox scheme: %s",  v14,  v15,  (char)a1);
LABEL_13:
    __int16 v23 = 0LL;
    int v24 = 0LL;
    size_t v20 = 0LL;
    goto LABEL_14;
  }

  uint64_t v16 = a1 + 7;
  uint64_t v17 = strchr(a1 + 7, 47);
  size_t v20 = v17;
  if (!v17)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  859,  125,  0,  "invalid Knox host: %s",  v18,  v19,  (char)a1);
    __int16 v23 = 0LL;
    int v24 = 0LL;
LABEL_14:
    uint64_t v32 = 0LL;
    size_t v26 = 0LL;
    goto LABEL_15;
  }

  uint64_t v21 = (char *)(v17 - v16);
  size_t v22 = v17 - v16 + 1;
  if (v22 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_12:
    int v33 = *__error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  863,  125,  v33,  "malloc",  v34,  v35,  v71);
    goto LABEL_13;
  }

  unsigned int v72 = a6;
  size_t v25 = (char *)malloc(v22);
  if (!v25) {
    goto LABEL_12;
  }
  size_t v26 = v25;
  memcpy(v25, a1 + 7, v20 - v16);
  v21[(void)v26] = 0;
  if (strncmp(v20 + 1, "download/", 9uLL))
  {
    char v71 = (char)a1;
    uint64_t v29 = "invalid Knox action: %s";
    __int16 v30 = 869;
LABEL_10:
    int v31 = 0;
LABEL_11:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  v30,  125,  v31,  v29,  v27,  v28,  v71);
    __int16 v23 = 0LL;
    int v24 = 0LL;
    size_t v20 = 0LL;
    uint64_t v32 = 0LL;
    goto LABEL_15;
  }

  uint64_t v38 = v20 + 10;
  uint64_t v39 = strchr(v38, 47);
  if (!v39)
  {
    char v71 = (char)a1;
    uint64_t v29 = "invalid Knox space: %s";
    __int16 v30 = 874;
    goto LABEL_10;
  }

  uint64_t v40 = v39;
  size_t v41 = v39 - v38;
  size_t v42 = v39 - v38 + 1;
  if (v42 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_37:
    int v31 = *__error();
    uint64_t v29 = "malloc";
    __int16 v30 = 878;
    goto LABEL_11;
  }

  uint64_t v43 = (char *)malloc(v42);
  if (!v43) {
    goto LABEL_37;
  }
  uint64_t v32 = v43;
  memcpy(v43, v38, v41);
  size_t v44 = 0LL;
  v32[v41] = 0;
  int v45 = v40 + 1;
  int v46 = v40 + 1;
  do
  {
    size_t v47 = v44;
    int v48 = (char)v45[v44];
    if (!v45[v44]) {
      break;
    }
    if (v48 < 0)
    {
      __uint32_t v49 = __maskrune((char)v45[v44], 0x4000uLL);
      int v45 = v46;
    }

    else
    {
      __uint32_t v49 = _DefaultRuneLocale.__runetype[v48] & 0x4000;
    }

    if (v48 == 35) {
      break;
    }
    size_t v44 = v47 + 1;
  }

  while (!v49);
  if (v47 + 1 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_48:
    char v66 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  895,  125,  *v66,  "malloc",  v67,  v68,  v71);
    __int16 v23 = 0LL;
    int v24 = 0LL;
    size_t v20 = 0LL;
    goto LABEL_15;
  }

  int v51 = (char *)malloc(v47 + 1);
  if (!v51) {
    goto LABEL_48;
  }
  size_t v20 = v51;
  memcpy(v51, v46, v47);
  v20[v47] = 0;
  if (a7 >> 62)
  {
    fwrite("Knox resolve URL\n", 0x11uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  host: %s\n", v26);
    fprintf(__stderrp, "  space: %s\n", v32);
    fprintf(__stderrp, "  file digest: %s\n", v20);
  }

  size_t v52 = (char *)sub_100020EEC(a2, a7);
  int v24 = v52;
  if (!v52)
  {
    int v69 = "contextInit failed";
    __int16 v70 = 909;
LABEL_51:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  v70,  125,  0,  v69,  v53,  v54,  v71);
    __int16 v23 = 0LL;
    goto LABEL_15;
  }

  if ((sub_1000211B0(v52, v26) & 0x80000000) != 0)
  {
    int v69 = "getting Westgate token";
    __int16 v70 = 912;
    goto LABEL_51;
  }

  if ((sub_100022408((uint64_t)v24, v26, v32, v20, a3, &__s, v53, v54) & 0x80000000) != 0)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  915,  125,  0,  "getting decryption credentials",  v55,  v56,  v71);
    uint64_t v36 = 0xFFFFFFFFLL;
    __int16 v23 = __s;
    goto LABEL_16;
  }

  __int16 v23 = __s;
  size_t v57 = strlen(__s);
  if (!v57 || (v57 & 1) != 0)
  {
    char v71 = v57;
    char v64 = "invalid key length: %zu";
    __int16 v65 = 919;
  }

  else
  {
    size_t v63 = v57 >> 1;
    if (v57 >> 1 <= a4)
    {
      if ((sub_1000239AC(v57 >> 1, a5, (uint64_t)__s, v58, v59, v60, v61, v62) & 0x80000000) == 0)
      {
        uint64_t v36 = 0LL;
        *unsigned int v72 = v63;
        goto LABEL_16;
      }

      char v64 = "invalid hex key";
      __int16 v65 = 922;
    }

    else
    {
      char v64 = "key_capacity is too low";
      __int16 v65 = 921;
    }
  }

  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  v65,  125,  0,  v64,  v61,  v62,  v71);
LABEL_15:
  uint64_t v36 = 0xFFFFFFFFLL;
LABEL_16:
  free(v26);
  free(v32);
  free(v20);
  free(v23);
  sub_100021E74(v24);
  return v36;
}

uint64_t sub_100022F28(uint64_t a1, unsigned int a2, char *__s, char *a4)
{
  uint64_t v4 = __s;
  if (!__s)
  {
    if (a4) {
      uint64_t v4 = getenv(a4);
    }
  }

  if (!v4)
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 8LL * a2) = 0LL;
    return result;
  }

  size_t v7 = strlen(v4);
  size_t v8 = v7 + 1;
  if (v7 + 1 < 0x2000000001LL)
  {
    size_t v10 = malloc(v7 + 1);
    if (v10)
    {
      uint64_t v11 = v10;
      memcpy(v10, v4, v8);
      uint64_t result = 0LL;
      *(void *)(a1 + 8LL * a2) = v11;
      return result;
    }
  }

  else
  {
    *__error() = 12;
  }

  *(void *)(a1 + 8LL * a2) = 0LL;
  uint64_t v12 = __error();
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextSetString",  259,  125,  *v12,  "malloc",  v13,  v14,  v15);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100023008(uint64_t a1, unsigned int a2, char *a3)
{
  int v6 = open(a3, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v32) < 0
      || ((st_size = v32.st_size, (v32.st_mode & 0xF000) == 0x8000) ? (BOOL v11 = v32.st_size == 0) : (BOOL v11 = 1), v11))
    {
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  274,  125,  0,  "invalid file: %s",  v8,  v9,  (char)a3);
    }

    else
    {
      if ((unint64_t)(v32.st_size + 1) < 0x2000000001LL)
      {
        uint64_t v16 = malloc(v32.st_size + 1);
        if (v16)
        {
          uint64_t v17 = v16;
          ssize_t v18 = read(v7, v16, st_size);
          if (v18 < 0)
          {
            int v28 = *__error();
            __int16 v29 = 280;
            __int16 v30 = a3;
          }

          else
          {
            if (v18 == st_size)
            {
              do
              {
                off_t v21 = st_size;
                if (!st_size) {
                  break;
                }
                __darwin_ct_rune_t v22 = (char)v17[st_size - 1];
                __uint32_t v23 = v22 < 0 ? __maskrune(v22, 0x4000uLL) : _DefaultRuneLocale.__runetype[v22] & 0x4000;
                --st_size;
              }

              while (v23);
              uint64_t v15 = 0LL;
              v17[v21] = 0;
              *(void *)(a1 + 8LL * a2) = v17;
              goto LABEL_24;
            }

            __int16 v30 = "truncated read";
            __int16 v29 = 281;
            int v28 = 0;
          }

          sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  v29,  125,  v28,  v30,  v19,  v20,  v31);
LABEL_23:
          free(v17);
          uint64_t v15 = 0xFFFFFFFFLL;
LABEL_24:
          close(v7);
          return v15;
        }
      }

      else
      {
        *__error() = 12;
      }

      int v24 = *__error();
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  277,  125,  v24,  "malloc",  v25,  v26,  v31);
    }

    uint64_t v17 = 0LL;
    goto LABEL_23;
  }

  uint64_t v12 = __error();
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  273,  125,  *v12,  a3,  v13,  v14,  v31);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10002322C(int *a1)
{
  if (!a1) {
    return 0LL;
  }
  if (a1[2] >= 1 && a1[4] && AAByteStreamWrite(*(AAByteStream *)a1, "]\n", 2uLL) != 2)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamClose",  67,  125,  0,  "writing final ']'",  v2,  v3,  v6);
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  free(a1);
  return v4;
}

uint64_t sub_1000232C4( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  int v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    if (v11 < 1)
    {
      uint64_t v12 = 0LL;
      goto LABEL_28;
    }
  }

  else
  {
    if (!a3 || *a2 != 91)
    {
      uint64_t v12 = 0LL;
      *(_DWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = -1;
      goto LABEL_28;
    }

    *(_DWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 1;
  }

  uint64_t v12 = 0LL;
  if (a3 && *(_DWORD *)(a1 + 12))
  {
    if (*a2 != 91)
    {
      uint64_t v14 = "expected '['";
      __int16 v15 = 93;
LABEL_41:
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamWrite",  v15,  125,  0,  v14,  a7,  a8,  v22);
      return -1LL;
    }

    *(_DWORD *)(a1 + 12) = 0;
    uint64_t v9 = a2 + 1;
    uint64_t v8 = a3 - 1;
    uint64_t v12 = 1LL;
  }

  if (!v8) {
    goto LABEL_35;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    uint64_t v13 = 0LL;
    goto LABEL_18;
  }

  if (AAByteStreamWrite(*(AAByteStream *)a1, "]", 1uLL) != 1)
  {
    uint64_t v14 = "writing ']'";
    __int16 v15 = 105;
    goto LABEL_41;
  }

  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v13 = 1LL;
LABEL_18:
  uint64_t v16 = v12 + 1;
  uint64_t v17 = v8 - 1;
  while (1)
  {
    __darwin_ct_rune_t v18 = (char)v9[v17];
    if (v18 < 0) {
      break;
    }
    if ((_DefaultRuneLocale.__runetype[v18] & 0x4000) == 0) {
      goto LABEL_25;
    }
LABEL_23:
    ++v16;
    if (--v17 == -1) {
      goto LABEL_27;
    }
  }

  if (__maskrune(v18, 0x4000uLL)) {
    goto LABEL_23;
  }
LABEL_25:
  if (v9[v17] == 93)
  {
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v12 = v16;
    uint64_t v8 = v17;
  }

LABEL_27:
  if (v8)
  {
LABEL_28:
    *(_DWORD *)(a1 + 20) = 1;
    AAByteStream v19 = *(AAByteStream *)a1;
    if (*((void *)v19 + 3))
    {
      if (v8)
      {
        uint64_t v13 = 0LL;
        while (1)
        {
          uint64_t v20 = (*((uint64_t (**)(void, _BYTE *, uint64_t))v19 + 3))(*(void *)v19, v9, v8);
          if (v20 < 1) {
            break;
          }
          v9 += v20;
          v13 += v20;
          v8 -= v20;
          if (!v8)
          {
            if ((v13 & 0x8000000000000000LL) == 0) {
              goto LABEL_39;
            }
            goto LABEL_37;
          }
        }

        uint64_t v13 = v20;
        if (v20 < 0) {
          goto LABEL_37;
        }
        goto LABEL_39;
      }

    *int v11 = 0LL;
    v11[1] = 0LL;
    goto LABEL_28;
  }

  __int16 v29 = 0LL;
  if (!+[DICryptoHelper getPublicKeyWithCertificate:key:error:]( &OBJC_CLASS___DICryptoHelper,  "getPublicKeyWithCertificate:key:error:",  v12,  &v29,  a6)) {
    goto LABEL_27;
  }
  uint64_t v13 = v29;
  if (!((unint64_t)a4 | (unint64_t)v29))
  {
    off_t v21 =  +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  @"No passphrase or certificate was supplied.",  a6);
    goto LABEL_27;
  }

  -[BackendXPC cryptoHeader](self, "cryptoHeader");
  sub_1000B6F30(v49);
  uint64_t v14 = *(void *)v49;
  __int16 v15 = *(void *)&v49[8];

LABEL_25:
  *int v11 = v14;
  v11[1] = v15;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
LABEL_28:
  char v22 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      int v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  result.var1 = v26;
  result.var0 = v25;
  return result;
}

LABEL_35:
      uint64_t v13 = 0LL;
      goto LABEL_39;
    }

    uint64_t v13 = -1LL;
LABEL_37:
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamWrite",  124,  125,  0,  "write",  a7,  a8,  v22);
  }

  else
  {
LABEL_39:
    v13 += v12;
  }

  return v13;
}

size_t sub_1000234F8( uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5, const char *a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = (_WORD *)(((a3 & 0x3FFF) << 10) | (a4 << 24) | a5 & 0x3FF | 0x80000000);
  if (a5 >= 1)
  {
    uint64_t v14 = strerror(a5);
    snprintf(__str, 0x400uLL, "%s: ", v14);
  }

  size_t v15 = strlen(__str);
  vsnprintf(&__str[v15], 1024 - v15, a6, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10002371C((uint64_t)__str, (int)v13);
  }
  return ParallelCompressionUpdateError(v13, (size_t)__str);
}

uint64_t sub_100023608( uint64_t a1, uint64_t a2, __int16 a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = ((a3 & 0x3FFF) << 10) | (a4 << 24) | 0x80000000;
  size_t v13 = strlen(__s);
  vsnprintf(&__s[v13], 1024 - v13, a5, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109378;
    int v16 = v12;
    __int16 v17 = 2080;
    __darwin_ct_rune_t v18 = __s;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "[0x%08x](warning) %s",  buf,  0x12u);
  }

  return ParallelCompressionUpdateWarning(v12, __s);
}

void sub_10002371C(uint64_t a1, int a2)
{
  v2[0] = 67109378;
  v2[1] = a2;
  __int16 v3 = 2080;
  uint64_t v4 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "[0x%08x] %s",  (uint8_t *)v2,  0x12u);
}

size_t sub_1000237A4(size_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    uint64_t result = strlen((const char *)result);
    if (result - 8193 >= 0xFFFFFFFFFFFFE000LL)
    {
      size_t v2 = result;
      pthread_key_t v3 = sub_1000238FC();
      uint64_t result = (size_t)pthread_getspecific(v3);
      if (result)
      {
        size_t v4 = result;
        __int16 v5 = v2 + 3;
        uint64_t v6 = *(unsigned __int16 *)(result + 72);
        if (v6 + (unsigned __int16)(v2 + 3) <= *(unsigned __int16 *)(result + 74))
        {
          size_t v7 = result + v6;
          *(_WORD *)(v7 + 76) = v5;
          size_t v8 = v7 + 78;
          uint64_t result = (size_t)memcpy((void *)(v7 + 78), v1, v2);
          *(_BYTE *)(v8 + v2) = 0;
          *(_WORD *)(v4 + 72) += v5;
        }
      }
    }
  }

  return result;
}

_WORD *sub_100023840(_WORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_1000238FC();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*(_DWORD *)result & 0x80000000) == 0)
      {
        *(_DWORD *)uint64_t result = v1;
        result[3] = 0;
      }
    }
  }

  return result;
}

_DWORD *sub_100023880(_DWORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_1000238FC();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*result & 0x80000000) == 0)
      {
        uint64_t v3 = *((unsigned __int16 *)result + 3);
        if (v3 <= 0xF)
        {
          result[v3 + 2] = v1;
          *((_WORD *)result + 3) = v3 + 1;
        }
      }
    }
  }

  return result;
}

size_t ParallelCompressionUpdateError(_WORD *a1, size_t a2)
{
  return sub_1000237A4(a2);
}

uint64_t sub_1000238FC()
{
  if (pthread_once(&stru_1001985D0, (void (*)(void))sub_100023958))
  {
    int v0 = __error();
    sub_1000234F8( "/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c",  "getErrorContextKey",  53LL,  5LL,  *v0,  "pthread_once");
  }

  return qword_100198F28;
}

uint64_t sub_100023958()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&qword_100198F28, 0LL);
  if ((_DWORD)result)
  {
    int v1 = __error();
    return sub_1000234F8( "/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c",  "createErrorContextKey",  42LL,  5LL,  *v1,  "pthread_key_create");
  }

  return result;
}

uint64_t sub_1000239AC( int a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = (2 * a1);
  if (!(_DWORD)v8)
  {
LABEL_13:
    int v11 = 0;
    return (v11 << 31 >> 31);
  }

  char v9 = 0;
  uint64_t v10 = 0LL;
  int v11 = 1;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a3 + v10);
    if (!*(_BYTE *)(a3 + v10))
    {
      uint64_t v14 = "truncated hex string";
      __int16 v15 = 13;
      goto LABEL_16;
    }

    char v13 = -48;
LABEL_10:
    char v9 = v13 + 16 * v9 + v12;
    if ((v10 & 1) != 0)
    {
      *a2++ = v9;
      char v9 = 0;
    }

    int v11 = ++v10 < v8;
    if (v8 == v10) {
      goto LABEL_13;
    }
  }

  if ((v12 - 97) < 6)
  {
    char v13 = -87;
    goto LABEL_10;
  }

  if ((v12 - 65) < 6)
  {
    char v13 = -55;
    goto LABEL_10;
  }

  uint64_t v14 = "invalid hex string";
  __int16 v15 = 18;
LABEL_16:
  sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AASerialization.c",  (uint64_t)"aaParseHexString",  v15,  106,  0,  v14,  a7,  a8,  v17);
  return (v11 << 31 >> 31);
}

uint64_t sub_100023A98(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = (void *)(a1 + 72);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256LL;
    }
    *(void *)(a1 + 72) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 88), v8);
    *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = v7;
    if (!v7)
    {
      uint64_t v10 = __error();
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"jsonPushLabel",  358,  109,  *v10,  "malloc",  v11,  v12,  v14);
      void *v6 = 0LL;
      v6[1] = 0LL;
      return 0xFFFFFFFFLL;
    }

    unint64_t v5 = *(void *)(a1 + 80);
  }

  else
  {
    size_t v7 = *(_BYTE **)(a1 + 88);
  }

  uint64_t v9 = 0LL;
  *(void *)(a1 + 80) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

uint64_t sub_100023B4C(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 96);
  unint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 96);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256LL;
    }
    *(void *)(a1 + 96) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 112), v8);
    *(void *)(a1 + 112) = v7;
    if (!v7)
    {
      uint64_t v10 = __error();
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"jsonPushValue",  372,  109,  *v10,  "malloc",  v11,  v12,  v14);
      void *v6 = 0LL;
      v6[1] = 0LL;
      return 0xFFFFFFFFLL;
    }

    unint64_t v5 = *(void *)(a1 + 104);
  }

  else
  {
    size_t v7 = *(_BYTE **)(a1 + 112);
  }

  uint64_t v9 = 0LL;
  *(void *)(a1 + 104) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

void *sub_100023C00(uint64_t a1)
{
  pthread_key_t v2 = malloc(0x78uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    memset_s(v2, 0x78uLL, 0, 0x78uLL);
    v3[1] = a1;
    v3[5] = 0x10000LL;
    unint64_t v4 = malloc(0x10000uLL);
    v3[8] = v4;
    if (v4)
    {
      *(void *)((char *)v3 + 20) = 32LL;
      v3[4] = calloc(0x20uLL, 4uLL);
    }

    else
    {
      size_t v8 = __error();
      sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamOpen",  387,  109,  *v8,  "malloc",  v9,  v10,  v12);
      sub_100023CE8((void **)v3);
      return 0LL;
    }
  }

  else
  {
    unint64_t v5 = __error();
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamOpen",  382,  109,  *v5,  "malloc",  v6,  v7,  v12);
  }

  return v3;
}

void sub_100023CE8(void **a1)
{
  if (a1)
  {
    free(a1[4]);
    free(a1[11]);
    free(a1[14]);
    free(a1[8]);
    free(a1);
  }

uint64_t sub_100023D30( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10 == 9 || v10 == -1)
  {
    sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamRead",  418,  109,  0,  "unexpected read call",  a7,  a8,  v45);
    return 0xFFFFFFFFLL;
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  while (2)
  {
    unint64_t v14 = *(void *)(a1 + 56);
    __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    if (v14 >= *(void *)(a1 + 48))
    {
      ssize_t v16 = AAByteStreamRead(*(AAByteStream *)(a1 + 8), v15, *(void *)(a1 + 40));
      if (v16 < 0)
      {
        sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamRead",  430,  109,  0,  "read error: %zd",  a7,  a8,  v16);
LABEL_104:
        uint64_t result = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 16) = -1;
        return result;
      }

      if (!v16)
      {
        __int16 v29 = "EOF reached";
        __int16 v30 = 431;
        goto LABEL_103;
      }

      unint64_t v14 = 0LL;
      *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = v16;
      __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    }

    *(void *)(a1 + 56) = v14 + 1;
    int v17 = v15[v14];
    char v18 = v15[v14];
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0:
        *(void *)(a1 + 104) = 0LL;
        if ((char)v17 < 0)
        {
        }

        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }

        if (v17 == 34) {
          goto LABEL_68;
        }
        if (v17 == 43 || v17 == 45 || ((char)v17 - 48) <= 9)
        {
          if ((sub_100023B4C(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 3;
            goto LABEL_69;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 451;
          goto LABEL_103;
        }

        if (v17 == 123)
        {
          uint64_t v31 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v31 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 465;
            goto LABEL_103;
          }

          int v26 = 0;
          uint64_t v43 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v31 + 1;
          *(_DWORD *)(v43 + 4 * v31) = 0;
          int v36 = 6;
          goto LABEL_125;
        }

        if (v17 == 91)
        {
          uint64_t v32 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v32 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 457;
            goto LABEL_103;
          }

          int v36 = 0;
          uint64_t v44 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v32 + 1;
          int v26 = 1;
          *(_DWORD *)(v44 + 4 * v32) = 1;
          goto LABEL_125;
        }

        if (((char)v17 - 97) <= 0x19)
        {
          if ((sub_100023B4C(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 4;
            goto LABEL_69;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 473;
          goto LABEL_103;
        }

        unsigned int v24 = *(_DWORD *)(a1 + 24) - 1;
        BOOL v33 = (*(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24) & 1) == 0 || (char)v17 != 93;
        BOOL v34 = (*(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24) & 1) == 0 && (char)v17 == 125;
        if (v33 && !v34) {
          goto LABEL_102;
        }
        goto LABEL_121;
      case 1:
        if (v17 == 92)
        {
          int v22 = 2;
          goto LABEL_69;
        }

        if (v17 == 34)
        {
          *(_DWORD *)(a1 + 16) = 5;
          if ((sub_100023B4C(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 3;
            goto LABEL_126;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 499;
          goto LABEL_103;
        }

        if ((sub_100023B4C(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 503;
          goto LABEL_103;
        }

        continue;
      case 2:
        HIDWORD(v20) = (char)v17;
        LODWORD(v20) = ((char)v17 << 24) - 1644167168;
        unsigned __int8 v19 = v20 >> 25;
        if (v19 < 0xAu && ((0x341u >> v19) & 1) != 0)
        {
          char v21 = aN4info7details[(char)v19];
        }

        else if ((char)v17 == 102)
        {
          char v21 = 12;
        }

        else
        {
          char v21 = v18;
        }

        if ((sub_100023B4C(a1, v21) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 512;
          goto LABEL_103;
        }

LABEL_68:
        int v22 = 1;
        goto LABEL_69;
      case 3:
        if (((char)v17 - 48) > 9)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_100023B4C(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 4;
            goto LABEL_126;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 539;
          goto LABEL_103;
        }

        if ((sub_100023B4C(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 533;
          goto LABEL_103;
        }

        continue;
      case 4:
        if (((char)v17 - 97) > 0x19)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_100023B4C(a1, 0) & 0x80000000) == 0)
          {
            uint64_t v27 = *(const char **)(a1 + 112);
            if (!strcmp(v27, "false") || !strcmp(v27, "true"))
            {
              int v26 = 6;
            }

            else
            {
              if (strcmp(v27, "null")) {
                goto LABEL_102;
              }
              int v26 = 7;
            }

            goto LABEL_126;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 524;
          goto LABEL_103;
        }

        if ((sub_100023B4C(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 519;
          goto LABEL_103;
        }

        continue;
      case 5:
        if ((char)v17 < 0)
        {
        }

        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }

        int v23 = *(_DWORD *)(a1 + 24);
        if (!v23)
        {
          __int16 v29 = "invalid JSON state";
          __int16 v30 = 546;
          goto LABEL_103;
        }

        unsigned int v24 = v23 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24);
        if (v17 != 44)
        {
          if (v17 == 93)
          {
            if ((v25 & 1) != 0) {
              goto LABEL_121;
            }
            char v18 = 93;
          }

          else if (v17 == 125)
          {
            goto LABEL_91;
          }

LABEL_102:
          char v45 = v18;
          __int16 v29 = "invalid char %c %s";
          __int16 v30 = 610;
          goto LABEL_103;
        }

        if ((v25 & 1) != 0) {
          int v22 = 0;
        }
        else {
          int v22 = 6;
        }
LABEL_69:
        *(_DWORD *)(a1 + 16) = v22;
        continue;
      case 6:
        *(void *)(a1 + 80) = 0LL;
        if (((char)v17 & 0x80000000) == 0)
        {
          continue;
        }

  char v66 = v115;
  if (v115)
  {
    uint64_t v67 = (unint64_t *)&v115->__shared_owners_;
    do
      uint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  int v69 = v107;
  if (v107)
  {
    __int16 v70 = (unint64_t *)&v107->__shared_owners_;
    do
      char v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  return v18;
}

LABEL_61:
        if (v17 == 34)
        {
          int v22 = 7;
          goto LABEL_69;
        }

        if (v17 != 125) {
          goto LABEL_102;
        }
        int v28 = *(_DWORD *)(a1 + 24);
        if (!v28) {
          goto LABEL_92;
        }
        unsigned int v24 = v28 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24);
LABEL_91:
        if ((v25 & 1) != 0)
        {
LABEL_92:
          char v18 = 125;
          goto LABEL_102;
        }

LABEL_121:
        *(_DWORD *)(a1 + 24) = v24;
        if (v24) {
          int v36 = 5;
        }
        else {
          int v36 = 9;
        }
        int v26 = 2;
LABEL_125:
        *(_DWORD *)(a1 + 16) = v36;
LABEL_126:
        if (a2) {
          memset_s(a2, 0x38uLL, 0, 0x38uLL);
        }
        *a2 = v26;
        uint64_t v37 = *(void *)(a1 + 80);
        if (v37) {
          uint64_t v37 = *(void *)(a1 + 88);
        }
        *((void *)a2 + 1) = v37;
        a2[12] = *(_DWORD *)(a1 + 24);
        if (v26 == 6)
        {
          int v38 = strcmp(*(const char **)(a1 + 112), "true");
          uint64_t result = 0LL;
          a2[9] = v38 == 0;
        }

        else if (v26 == 4)
        {
          uint64_t v39 = *(const char **)(a1 + 112);
          if (*v39 == 45)
          {
            unint64_t v40 = strtoull(v39 + 1, 0LL, 10);
            uint64_t result = 0LL;
            *((void *)a2 + 3) = v40;
            int v41 = -1;
          }

          else
          {
            unint64_t v42 = strtoull(v39, 0LL, 0);
            uint64_t result = 0LL;
            *((void *)a2 + 3) = v42;
            int v41 = v42 != 0;
          }

          a2[8] = v41;
        }

        else
        {
          uint64_t result = 0LL;
          if (v26 == 3) {
            *((void *)a2 + 2) = *(void *)(a1 + 112);
          }
        }

        return result;
      case 7:
        if ((char)v17 == 34)
        {
          if ((sub_100023A98(a1, 0) & 0x80000000) == 0)
          {
            int v22 = 8;
            goto LABEL_69;
          }

          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 587;
LABEL_103:
          sub_1000234F8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamRead",  v30,  109,  0,  v29,  a7,  a8,  v45);
          goto LABEL_104;
        }

        if ((sub_100023A98(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 591;
          goto LABEL_103;
        }

        continue;
      case 8:
        if ((char)v17 < 0)
        {
        }

        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }

        int v22 = 0;
        goto LABEL_69;
      default:
        goto LABEL_102;
    }
  }

BOOL sub_10002455C(const char *a1)
{
  return !strcmp(a1, "lifs") || strcmp(a1, "fskit") == 0;
}

uint64_t _FSGetLocationFromStatfs(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6 = calloc(1uLL, 0x400uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_10002455C((const char *)(a1 + 72)))
    {
      size_t v8 = strstr((const char *)(a1 + 1112), "://");
      if (!v8 || (uint64_t v9 = v8 + 3, (v10 = strchr(v8 + 3, 47)) == 0LL))
      {
        uint64_t v12 = 22LL;
LABEL_20:
        free(v7);
        return v12;
      }

      if (v10 - v9 >= 1023) {
        uint64_t v11 = 1023LL;
      }
      else {
        uint64_t v11 = v10 - v9;
      }
      __memcpy_chk(v7, v9, v11, 1024LL);
      *((_BYTE *)v7 + v11) = 0;
      if (!a2)
      {
LABEL_19:
        uint64_t v12 = 0LL;
        goto LABEL_20;
      }
    }

    else
    {
      if (!strncmp((const char *)(a1 + 1112), "/dev/disk", 9uLL))
      {
        uint64_t v13 = a1 + 1117;
      }

      else if (!strncmp((const char *)(a1 + 1112), "/dev/rdisk", 0xAuLL))
      {
        uint64_t v13 = a1 + 1118;
      }

      else
      {
        uint64_t v13 = a1 + 1112;
      }

      __strlcpy_chk(v7, v13, 1024LL, 1024LL);
      if (!a2) {
        goto LABEL_19;
      }
    }

    strlcpy(a2, (const char *)v7, a3);
    goto LABEL_19;
  }

  return 12LL;
}

void sub_1000246DC(void *a1, uint64_t a2)
{
  uint64_t v3 = v14;
  if (v14 != v15)
  {
    unint64_t v4 = a1 + 1;
    uint64_t v5 = *a1;
    do
    {
      uint64_t v6 = *(void *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        int v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          int v8 = dword_100138550[v7];
          int v9 = dword_100138560[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *unint64_t v4 = v9;
        }
      }

      int64_t v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(void *)((char *)a1 + *(void *)(v5 - 128) + 16) += v3[9];
      *(void *)((char *)a1 + *(void *)(v5 - 112) + 56) -= v10 << 9;
      uint64_t v11 = v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void **)v3[2];
          BOOL v13 = *v12 == v3;
          uint64_t v3 = v12;
        }

        while (!v13);
      }

      uint64_t v3 = v12;
    }

    while (v12 != v15);
  }

  sub_100026AC4((uint64_t)&v14, v15[0]);
}

uint64_t sub_1000247FC(void *a1, uint64_t a2)
{
  int v24 = *(_DWORD *)(*(void *)(a2 + 136) + 352LL);
  sub_10002538C(&v25, &v24);
  sub_1000049D8((uint64_t)v26, __p);
  unint64_t v4 = (char *)a1 + *(void *)(*a1 - 136LL);
  uint64_t v5 = v4 + 8;
  if (v4[31] < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *((void *)v5 + 2) = v23;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v23 = 0LL;
  sub_100004B48((uint64_t)v26, (__int128 *)__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a2 + 136);
  unint64_t v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    int v8 = (unsigned __int8 *)(v6 + 360);
    unint64_t v9 = v7 >> 3;
    uint64_t v10 = *(void *)(v25 - 24);
    int v11 = *(_DWORD *)((char *)v26 + v10);
    unint64_t v12 = v9 - 1;
    if (v9 == 1)
    {
      int v17 = *(_DWORD *)((char *)v26 + v10);
    }

    else
    {
      BOOL v13 = v8;
      unint64_t v14 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v26 + *(void *)(v25 - 24)) = *(_DWORD *)((_BYTE *)v26 + *(void *)(v25 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        __int16 v15 = sub_1000166BC(&v25, (char *)__p);
        *(void *)((char *)v15 + *(void *)(*v15 - 24LL) + 24) = 2LL;
        ssize_t v16 = (void *)std::ostream::operator<<(v15, *v13);
        sub_100004E4C(v16, (uint64_t)" ", 1LL);
        ++v13;
        --v14;
      }

      while (v14);
      uint64_t v10 = *(void *)(v25 - 24);
      int v17 = *(_DWORD *)((char *)v26 + v10);
    }

    *(_DWORD *)((char *)v26 + v10) = v17 & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    char v18 = sub_1000166BC(&v25, (char *)__p);
    *(void *)((char *)v18 + *(void *)(*v18 - 24LL) + 24) = 2LL;
    std::ostream::operator<<(v18, v8[v12]);
    *(_DWORD *)((char *)v26 + *(void *)(v25 - 24)) = v11;
  }

  sub_1000049D8((uint64_t)v26, __p);
  unsigned __int8 v19 = (char *)a1 + *(void *)(*a1 - 136LL);
  unint64_t v20 = v19 + 32;
  if (v19[55] < 0) {
    operator delete(*(void **)v20);
  }
  *(_OWORD *)unint64_t v20 = *(_OWORD *)__p;
  *((void *)v20 + 2) = v23;
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_100024A94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void sub_100024ACC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_100026A1C(&v24, (uint64_t *)&v26);
    sub_1001171D0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    BOOL v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      __int16 v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  int v17 = v25;
  if (v25)
  {
    char v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    char v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_100024C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000114F0((uint64_t)va);
  sub_1000114F0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100024C78(uint64_t a1, uint64_t a2)
{
  while (!sub_1000F08B8((uint64_t)&v18, (uint64_t)&v23))
  {
    int v3 = sub_1000F076C(&v18);
    sub_1000F0860((uint64_t)&v18);
    if (v3 == 1651272568)
    {
      sub_1000F076C(&v18);
      uint64_t v4 = (const __CFArray *)sub_1000F0860((uint64_t)&v18);
      sub_1000253D0(a1, v4);
    }

    sub_100011548((uint64_t)v14, &v18);
    ++v22;
    if (v17) {
      sub_1000114C0(&v16);
    }
    uint64_t v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  if (v26) {
    sub_1000114C0(&v25);
  }
  __int128 v8 = v24;
  if (v24)
  {
    unint64_t v9 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v21) {
    sub_1000114C0(&v20);
  }
  unint64_t v11 = v19;
  if (v19)
  {
    uint64_t v12 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100024E14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100024E30(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = off_100167B20;
  *(void *)(a1 + 56) = off_100167C88;
  *(void *)(a1 + 64) = off_100167CD0;
  *(void *)(a1 + 72) = &off_100168078;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = off_100168220;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = &off_1001683C8;
  *(void *)(a1 + 24) = off_1001680D0;
  *(void *)(a1 + 32) = off_100168420;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = &off_100168570;
  *(void *)(a1 + 40) = off_100168278;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = off_1001685C8;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 20std::ostream::~ostream(v2, v3 + 8) = 0u;
  sub_100025160((uint64_t *)(a1 + 256), (uint64_t *)&off_100167AA0, (uint64_t)a2);
  *(void *)a1 = off_100167538;
  *(void *)(a1 + 24) = off_100167580;
  *(void *)(a1 + 32) = off_1001675C8;
  *(void *)(a1 + 40) = off_100167610;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = off_100167658;
  *(void *)(a1 + 56) = off_1001676A0;
  *(void *)(a1 + 64) = off_1001676E8;
  *(void *)(a1 + 72) = off_100167748;
  *(void *)(a1 + 136) = off_1001677B8;
  *(void *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = off_100167828;
  *(void *)(a1 + 200) = off_100167898;
  *(void *)(a1 + 256) = off_100167908;
  *(_DWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 2;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  uint64_t v8 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 16) = v7;
  uint64_t v9 = *(void *)(a1 + *(void *)(v8 - 112) + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 24))(a2);
  uint64_t v11 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + std::ostream::~ostream(v2, v3 + 8) = v10 * v9;
  uint64_t v12 = a1 + *(void *)(v11 - 112);
  *(void *)(v12 + 40) = *(void *)(v12 + 8);
  *(_BYTE *)(v12 + 4std::ostream::~ostream(v2, v3 + 8) = 1;
  uint64_t v13 = a1 + *(void *)(*(void *)a1 - 112LL);
  *(void *)(v13 + 24) = *(void *)(v13 + 8);
  *(_BYTE *)(v13 + 32) = 1;
  uint64_t v14 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 56) = *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 8);
  *(void *)(a1 + *(void *)(v14 - 128) + 16) = 0LL;
  sub_1000246DC((void *)a1, (uint64_t)a2);
  sub_1000247FC((void *)a1, (uint64_t)a2);
  uint64_t v15 = *(void *)a1;
  unint64_t v16 = *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 8)
      - *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 56);
  uint64_t v17 = *(void *)(*(void *)a1 - 128LL);
  if (v16) {
    float v18 = (float)*(unint64_t *)(a1 + v17 + 16) / (float)v16;
  }
  else {
    float v18 = 1.0;
  }
  *(float *)(a1 + v17 + 24) = v18;
  sub_100024ACC(a2 + 6, a1 + *(void *)(v15 - 104));
  if ((a3 & 1) != 0)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    char v21 = Mutable;
    if (*v6)
    {
      CFRelease(*v6);
      CFMutableArrayRef Mutable = v21;
    }

    *(void *)(a1 + 16) = Mutable;
    char v21 = 0LL;
    sub_100026EB4((const void **)&v21);
    sub_100024C78(a1, (uint64_t)a2);
  }

  return a1;
}

void sub_1000250F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + 136) = v7;
  *(void *)(v2 + 40) = v7 + 88;
  sub_100026A94(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_100025160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100168D68;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v7 = sub_1000EF92C(a3 + 64);
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  uint64_t v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  uint64_t v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }

  a1[1] = (uint64_t)v10;
  uint64_t v12 = 0LL;
  sub_100026A94((const void **)&v12);
  sub_100026EE4((const void **)&v13);
  return a1;
}

void sub_10002523C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_100025288(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - sub_100026A94((const void **)(v10 + 24)) = a2[3];
  sub_100026A94((const void **)(a1 + 24));
  sub_100026A94((const void **)(a1 + 16));
  sub_100026A94((const void **)(a1 + 8));
  return a1;
}

uint64_t sub_1000252D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - sub_100026A94((const void **)(v10 + 24)) = a2[3];
  return a1;
}

CFStringRef sub_100025328(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100168D88[v1];
  }
}

CFStringRef sub_100025354(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48LL) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100168D88[v1];
  }
}

void *sub_10002538C(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_1001688F8[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 66)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_100004E4C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_1001688F8[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100004E4C(a1, (uint64_t)v3, v4);
}

void sub_1000253D0(uint64_t a1, CFArrayRef theArray)
{
  unint64_t Count = CFArrayGetCount(theArray);
  CFIndex v5 = Count;
  if (Count >> 61) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8 * Count;
  }
  uint64_t v7 = operator new[](v6);
  bzero(v7, v6);
  v30.location = 0LL;
  v30.length = v5;
  CFArrayGetValues(theArray, v30, (const void **)v7);
  if (v5 >= 1)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      Value = (const void *)*((void *)v7 + i);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value && (uint64_t v11 = TypeID, CFGetTypeID(Value) != TypeID)
        || (Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"Data"), CFTypeID v12 = CFDataGetTypeID(), Value)
        && (uint64_t v11 = v12, CFGetTypeID(Value) != v12))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        CFTypeID v18 = CFGetTypeID(Value);
        unint64_t v19 = sub_100026B08(exception, v18, v11);
      }

      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      CFUUIDBytes v14 = operator new[](Length);
      bzero(v14, Length);
      v31.length = CFDataGetLength((CFDataRef)Value);
      v31.location = 0LL;
      CFDataGetBytes((CFDataRef)Value, v31, (UInt8 *)v14);
      sub_1000EE8C0((uint64_t)v28, (uint64_t)v14);
      if (v29)
      {
        unsigned int v15 = 0;
        uint64_t v16 = (uint64_t)v14 + 204;
        do
        {
          sub_1000EE9AC((uint64_t)&v24, v16);
          int v20 = v24;
          __int128 v21 = v25;
          __int128 v22 = v26;
          int v23 = v27;
          sub_100025650(a1, &v20);
          ++v15;
          v16 += 40LL;
        }

        while (v15 < v29);
      }

      operator delete[](v14);
    }
  }

  operator delete[](v7);
}

void sub_100025604(_Unwind_Exception *a1)
{
}

void sub_100025650(uint64_t a1, int *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int v5 = *a2;
  sub_100026C20((uint64_t)v13);
  int v12 = v5;
  sub_100026D4C(&v14, &v12);
  sub_1000049D8((uint64_t)v15, __p);
  if (v10 >= 0) {
    size_t v6 = __p;
  }
  else {
    size_t v6 = (void **)__p[0];
  }
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v6, 0x8000100u);
  CFStringRef v11 = v7;
  sub_100026A94((const void **)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v13
  uint64_t v14 = v8;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf(v15);
  std::ios::~ios(&v17);
  CFDictionaryAddValue(Mutable, @"Type", v7);
  CFRelease(v7);
  sub_1000F67DC(Mutable, @"Reserved", a2[1]);
  sub_1000F67DC(Mutable, @"Sector Count", *((void *)a2 + 2));
  sub_1000F67DC(Mutable, @"Start Offset", *((void *)a2 + 1));
  sub_1000F67DC(Mutable, @"Compressed Offset", *((void *)a2 + 3));
  sub_1000F67DC(Mutable, @"Compressed Length", *((void *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_10002581C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void (__cdecl **a21)(std::stringbuf *__hidden this), uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(uint64_t *)((char *)&a18
  a20 = v38;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf(&a21);
  std::ios::~ios(&a37);
  _Unwind_Resume(a1);
}

const void **sub_1000258AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v8 = (const __CFString **)@"Total Bytes";
  uint64_t v9 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  char v10 = @"Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v11 = 0LL;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  int v12 = @"Empty Bytes";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v13 = 0LL;
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v14 = (const __CFString *)&v8;
  uint64_t v15 = 3LL;
  sub_1000F6EC0((CFMutableDictionaryRef *)&v6, (uint64_t *)&v14);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    sub_100026D90((const void **)&(&v8)[i]);
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v14 = @"Max Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 40);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1LL;
    sub_1000F6EC0((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100026D90((const void **)&v15);
  }

  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v14 = @"Min Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 24);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1LL;
    sub_1000F6EC0((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100026D90((const void **)&v15);
  }

  *a2 = v6;
  size_t v6 = 0LL;
  return sub_100026DC0(&v6);
}

void sub_100025A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100025B10()
{
}

CFStringRef sub_100025B18()
{
  return @"Size Info";
}

void sub_100025B28(void *a1)
{
}

uint64_t sub_100025B38(uint64_t a1)
{
  *(void *)a1 = off_100168BC0;
  *(void *)(a1 + 32) = off_100168C18;
  sub_100026A94((const void **)(a1 + 24));
  return a1;
}

void sub_100025B74(void *a1)
{
  *(void *)a1 = off_100168BC0;
  *((void *)a1 + 4) = off_100168C18;
  sub_100026A94((const void **)a1 + 3);
  operator delete(a1);
}

const void **sub_100025BB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 16)) {
    uint64_t v4 = &kCFBooleanTrue;
  }
  else {
    uint64_t v4 = &kCFBooleanFalse;
  }
  CFBooleanRef v5 = *v4;
  uint64_t v15 = (uint64_t *)@"Is Encrypted";
  uint64_t v16 = (uint64_t)v5;
  uint64_t valuePtr = 0LL;
  CFNumberRef v11 = &v15;
  uint64_t v12 = 1LL;
  sub_1000F6F08((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  sub_100026D90((const void **)&v16);
  sub_100026DF0(&valuePtr);
  if (*(_BYTE *)(a1 + 16))
  {
    uint64_t valuePtr = *(const void **)(a1 + 8);
    CFNumberRef v11 = (uint64_t **)@"Key Size";
    uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    CFNumberRef v13 = @"UUID";
    size_t v6 = *(const void **)(a1 + 24);
    uint64_t v14 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v15 = (uint64_t *)&v11;
    uint64_t v16 = 2LL;
    sub_1000F6EC0((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (uint64_t i = 3LL; i != -1; i -= 2LL)
      sub_100026D90((const void **)&(&v11)[i]);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return sub_100026DC0(&v9);
}

void sub_100025D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFStringRef sub_100025D60()
{
  return @"Encryption Info";
}

const void **sub_100025D6C(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)unsigned int v1 = off_100168BC0;
  *((void *)v1 + 4) = off_100168C18;
  return sub_100026A94((const void **)v1 + 3);
}

void sub_100025D94(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)unsigned int v1 = off_100168BC0;
  *((void *)v1 + 4) = off_100168C18;
  sub_100026A94((const void **)v1 + 3);
  operator delete(v1);
}

const void **sub_100025DE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 16);
  v11[0] = @"Compressed Bytes";
  v11[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *(_DWORD *)(a1 + 24);
  v11[2] = @"Compression Ratio";
  CFNumberRef v12 = 0LL;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  unsigned int v4 = *(_DWORD *)(a1 + 8) - 1;
  if (v4 > 3) {
    CFBooleanRef v5 = @"raw";
  }
  else {
    CFBooleanRef v5 = off_100168DC8[v4];
  }
  CFNumberRef v13 = @"Compression Type";
  uint64_t v14 = v5;
  v8[0] = (uint64_t)v11;
  v8[1] = 3LL;
  sub_1000F6F08(v8, (CFMutableDictionaryRef *)&v9);
  *a2 = v9;
  uint64_t v9 = 0LL;
  sub_100026DC0(&v9);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    uint64_t result = sub_100026D90((const void **)&v11[i]);
  return result;
}

void sub_100025F14(_Unwind_Exception *a1)
{
  for (uint64_t i = 40LL; i != -8; i -= 16LL)
    sub_100026D90((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_100025F50()
{
  return @"Compression Info";
}

void sub_100025F60(void *a1)
{
}

uint64_t sub_100025F70(uint64_t a1)
{
  *(void *)a1 = &off_100168C50;
  *(void *)(a1 + 56) = off_100168CA8;
  return a1;
}

void sub_100025FC4(char *__p)
{
  *(void *)__p = &off_100168C50;
  *((void *)__p + 7) = off_100168CA8;
  if (__p[55] < 0) {
    operator delete(*((void **)__p + 4));
  }
  if (__p[31] < 0) {
    operator delete(*((void **)__p + 1));
  }
  operator delete(__p);
}

const void **sub_100026018@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    unsigned int v4 = *(const UInt8 **)(a1 + 32);
    CFIndex v5 = *(void *)(a1 + 40);
  }

  else
  {
    unsigned int v4 = (const UInt8 *)(a1 + 32);
    CFIndex v5 = *(unsigned __int8 *)(a1 + 55);
  }

  CFTypeRef cf = CFStringCreateWithBytes(kCFAllocatorDefault, v4, v5, 0x8000100u, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    size_t v6 = *(const UInt8 **)(a1 + 8);
    CFIndex v7 = *(void *)(a1 + 16);
  }

  else
  {
    size_t v6 = (const UInt8 *)(a1 + 8);
    CFIndex v7 = *(unsigned __int8 *)(a1 + 31);
  }

  uint64_t v8 = CFStringCreateWithBytes(kCFAllocatorDefault, v6, v7, 0x8000100u, 0);
  CFTypeRef v13 = v8;
  v15[0] = @"Checksum Value";
  v15[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    uint64_t v8 = v13;
  }

  v15[2] = @"Checksum Type";
  v15[3] = v8;
  if (v8) {
    CFRetain(v8);
  }
  v11[0] = (uint64_t)v15;
  v11[1] = 2LL;
  sub_1000F6F08(v11, (CFMutableDictionaryRef *)&v12);
  *a2 = v12;
  CFNumberRef v12 = 0LL;
  sub_100026DC0(&v12);
  for (uint64_t i = 3LL; i != -1; i -= 2LL)
    sub_100026D90((const void **)&v15[i]);
  sub_100026A94(&v13);
  return sub_100026A94(&cf);
}

void sub_100026170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  size_t v6 = va_arg(va1, const void *);
  sub_100026D90(v4);
  sub_100026A94((const void **)va);
  sub_100026A94((const void **)va1);
  _Unwind_Resume(a1);
}

CFStringRef sub_1000261C4()
{
  return @"Master Checksum Info";
}

void sub_1000261D0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = &off_100168C50;
  *((void *)v1 + 7) = off_100168CA8;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
}

void sub_100026228(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = &off_100168C50;
  *((void *)v1 + 7) = off_100168CA8;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  operator delete(v1);
}

uint64_t sub_100026284(uint64_t a1)
{
  *(void *)a1 = off_100168CE0;
  *(void *)(a1 + 32) = off_100168D38;
  sub_100026A94((const void **)(a1 + 24));
  sub_100026A94((const void **)(a1 + 16));
  sub_100026A94((const void **)(a1 + 8));
  return a1;
}

void sub_1000262D0(void *a1)
{
  *(void *)a1 = off_100168CE0;
  *((void *)a1 + 4) = off_100168D38;
  sub_100026A94((const void **)a1 + 3);
  sub_100026A94((const void **)a1 + 2);
  sub_100026A94((const void **)a1 + 1);
  operator delete(a1);
}

const void **sub_10002631C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (const void *)a1[1];
  CFNumberRef v11 = @"UUID";
  CFNumberRef v12 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v8 = &v11;
  uint64_t v9 = 1LL;
  sub_1000F6F08((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  sub_100026D90(&v12);
  CFIndex v5 = (const void *)a1[3];
  if (v5)
  {
    CFNumberRef v11 = @"Parent UUID";
    CFNumberRef v12 = v5;
    CFRetain(v5);
    uint64_t v8 = &v11;
    uint64_t v9 = 1LL;
    sub_1000F6EC0((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100026D90(&v12);
  }

  size_t v6 = (const void *)a1[2];
  if (v6)
  {
    CFNumberRef v11 = @"Stable UUID";
    CFNumberRef v12 = v6;
    CFRetain(v6);
    uint64_t v8 = &v11;
    uint64_t v9 = 1LL;
    sub_1000F6EC0((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100026D90(&v12);
  }

  *a2 = v10;
  char v10 = 0LL;
  return sub_100026DC0(&v10);
}

void sub_100026440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

CFStringRef sub_10002648C()
{
  return @"Identity Info";
}

const void **sub_100026498(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_100168CE0;
  *((void *)v1 + 4) = off_100168D38;
  sub_100026A94((const void **)v1 + 3);
  sub_100026A94((const void **)v1 + 2);
  return sub_100026A94((const void **)v1 + 1);
}

void sub_1000264E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_100168CE0;
  *((void *)v1 + 4) = off_100168D38;
  sub_100026A94((const void **)v1 + 3);
  sub_100026A94((const void **)v1 + 2);
  sub_100026A94((const void **)v1 + 1);
  operator delete(v1);
}

uint64_t sub_100026538(uint64_t a1)
{
  *(void *)a1 = off_100167538;
  *(void *)(a1 + 24) = off_100167580;
  *(void *)(a1 + 32) = off_1001675C8;
  *(void *)(a1 + 40) = off_100167610;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = off_100167658;
  *(void *)(a1 + 56) = off_1001676A0;
  *(void *)(a1 + 64) = off_1001676E8;
  *(void *)(a1 + 72) = off_100167748;
  *(void *)(a1 + 136) = off_1001677B8;
  *(void *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = off_100167828;
  *(void *)(a1 + 200) = off_100167898;
  *(void *)(a1 + 256) = off_100167908;
  sub_100026EB4((const void **)(a1 + 16));
  *(void *)(a1 + 256) = off_100168718;
  *(void *)(a1 + 64) = off_100168770;
  sub_100026A94((const void **)(a1 + 280));
  sub_100026A94((const void **)(a1 + 272));
  sub_100026A94((const void **)(a1 + 264));
  *(void *)(a1 + 200) = &off_100168570;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = off_1001685C8;
  *(void *)(a1 + 136) = off_100168220;
  *(void *)(a1 + 40) = off_100168278;
  sub_100026A94((const void **)(a1 + 160));
  return a1;
}

void sub_100026634(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100026538(a1);
  operator delete(v1);
}

const void **sub_100026648@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  CFNumberRef v11 = (uint64_t **)@"Image Format";
  uint64_t v12 = v4;
  sub_100026E20(a1, (CFStringRef *)&cf);
  CFTypeRef v13 = @"Format Description";
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_1000258AC((uint64_t)a1 + *(void *)(*a1 - 112LL), &v10);
  uint64_t v15 = @"Size Info";
  uint64_t v16 = v10;
  char v10 = 0LL;
  sub_1000114C0(&v10);
  sub_100025BB0((uint64_t)a1 + *(void *)(*a1 - 120LL), &v10);
  uint64_t v17 = @"Encryption Info";
  CFTypeID v18 = v10;
  char v10 = 0LL;
  sub_1000114C0(&v10);
  sub_100025DE0((uint64_t)a1 + *(void *)(*a1 - 128LL), &v10);
  unint64_t v19 = @"Compression Info";
  int v20 = v10;
  char v10 = 0LL;
  sub_1000114C0(&v10);
  sub_100026018((uint64_t)a1 + *(void *)(*a1 - 136LL), &v10);
  __int128 v21 = @"Master Checksum Info";
  __int128 v22 = v10;
  char v10 = 0LL;
  sub_1000114C0(&v10);
  sub_10002631C((void *)((char *)a1 + *(void *)(*a1 - 144LL)), &v10);
  int v23 = @"Identity Info";
  int v24 = v10;
  char v10 = 0LL;
  sub_1000114C0(&v10);
  __int128 v25 = (uint64_t *)&v11;
  uint64_t v26 = 7LL;
  sub_1000F6F08((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 13LL; i != -1; i -= 2LL)
    sub_100026D90((const void **)&(&v11)[i]);
  sub_100026A94(&cf);
  size_t v6 = (const void *)a1[2];
  if (v6)
  {
    __int128 v25 = (uint64_t *)@"Runs";
    uint64_t v26 = (uint64_t)v6;
    CFRetain(v6);
    CFNumberRef v11 = &v25;
    uint64_t v12 = 1LL;
    sub_1000F6EC0((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100026D90((const void **)&v26);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return sub_100026DC0(&v9);
}

void sub_100026880(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10002690C(void *a1)
{
  return sub_100026538((uint64_t)a1 + *(void *)(*a1 - 24LL));
}

void sub_10002691C(void *a1)
{
  uint64_t v1 = (void *)sub_100026538((uint64_t)a1 + *(void *)(*a1 - 24LL));
  operator delete(v1);
}

uint64_t sub_10002693C(void *a1)
{
  return sub_100026538((uint64_t)a1 + *(void *)(*a1 - 32LL));
}

void sub_10002694C(void *a1)
{
  uint64_t v1 = (void *)sub_100026538((uint64_t)a1 + *(void *)(*a1 - 32LL));
  operator delete(v1);
}

const void **sub_10002696C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100026648((void *)((char *)a1 + *(void *)(*a1 - 40LL)), a2);
}

char *sub_10002697C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_10002698C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_10002699C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_1000269AC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_1000269BC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_1000269CC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_1000269DC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_1000269EC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_1000269FC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_100026A0C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

void *sub_100026A1C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    CFIndex v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  CFIndex v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

const void **sub_100026A94(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_100026AC4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100026AC4(a1, *a2);
    sub_100026AC4(a1, a2[1]);
    operator delete(a2);
  }

void *sub_100026B08(void *a1, uint64_t a2, uint64_t a3)
{
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf(v8);
  std::ios::~ios(&v10);
  *a1 = &off_100168A28;
  return a1;
}

void sub_100026C0C(std::exception *a1)
{
}

uint64_t sub_100026C20(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - sub_100026A94((const void **)(v10 + 24)) = v5;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  unint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - sub_100026A94((const void **)(v10 + 24)) = v8;
  *(void *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_100026D24(_Unwind_Exception *a1)
{
}

void *sub_100026D4C(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100168A40[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 90)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_100004E4C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_100168A40[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100004E4C(a1, (uint64_t)v3, v4);
}

const void **sub_100026D90(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_100026DC0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_100026DF0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFStringRef sub_100026E20@<X0>(void *a1@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 128LL) + 8);
  if (v3)
  {
    if (v3 > 4) {
      uint64_t v4 = @"raw";
    }
    else {
      uint64_t v4 = off_100168DC8[v3 - 1];
    }
    CFStringRef result = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%s (%@)", "UDIF read-only compressed image", v4);
  }

  else
  {
    CFStringRef result = @"UDIF uncompressed read-only image";
  }

  *a2 = result;
  return result;
}

const void **sub_100026EB4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_100026EE4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100026F14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_100026F68((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100026F50(_Unwind_Exception *a1)
{
}

_OWORD *sub_100026F68(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = (uint64_t *)result + 1;
    do
    {
      CFStringRef result = sub_100026FEC(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

_OWORD *sub_100026FEC(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = sub_100027088(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    sub_100027200(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_100027088(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  char v5 = *(_BYTE *)(a5 + 16);
  unint64_t v6 = (v5 & 1) + *(void *)(a5 + 8) - 1LL;
  unint64_t v7 = a2[4];
  if ((a2[6] & 2) == 0) {
    ++v7;
  }
  if (v6 < v7)
  {
LABEL_5:
    uint64_t v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v11 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }

      while (v11);
    }

    unint64_t v16 = *(void *)a5;
    if ((*(_BYTE *)(a5 + 16) & 2) == 0) {
      ++v16;
    }
    return sub_100027254((uint64_t)a1, a3, a5);
  }

  BOOL v11 = (v5 & 2) == 0;
  unint64_t v12 = *(void *)a5;
  if (v11) {
    ++v12;
  }
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    uint64_t v13 = a2[1];
    if (v13)
    {
      CFTypeRef v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        CFTypeRef v14 = (uint64_t *)*v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v11 = *a4 == v17;
        uint64_t v17 = (uint64_t *)a4;
      }

      while (!v11);
    }

    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unint64_t v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0) {
      ++v18;
    }
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }

      else
      {
        *a3 = a2;
        return a2 + 1;
      }

      return (uint64_t *)a4;
    }

    return sub_100027254((uint64_t)a1, a3, a5);
  }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_100027200(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  char v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  CFStringRef result = sub_1000272D8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *sub_100027254(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  CFStringRef result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
      unint64_t v6 = *(void *)a3;
    }
    else {
      unint64_t v6 = *(void *)a3 + 1LL;
    }
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        char v8 = *(_BYTE *)(v4 + 48);
        unint64_t v9 = v7[4];
        if ((v8 & 2) == 0) {
          ++v9;
        }
        uint64_t v4 = *v7;
        CFStringRef result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }

      CFStringRef result = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    unint64_t v7 = result;
  }

LABEL_14:
  *a2 = v7;
  return result;
}

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams shadowChain](self, "shadowChain"));
  unint64_t v18 = [v17 isEmpty];

  if ((v18 & 1) != 0) {
    return 1;
  }
  int v20 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams shadowChain](self, "shadowChain"));
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 statWithError:a3]);
  unint64_t v19 = v21 != 0LL;

  return v19;
}

uint64_t *sub_1000272D8(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      unsigned int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unsigned int v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            _DWORD v2[2] = (uint64_t)v9;
            unsigned int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unsigned int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          _DWORD v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unsigned int v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          _DWORD v2[2] = (uint64_t)a2;
          unsigned int v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        _DWORD v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      _BYTE *v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

uint64_t sub_100027490()
{
  return 0LL;
}

uint64_t sub_100027498()
{
  return 0LL;
}

uint64_t sub_1000274A8()
{
  return 0LL;
}

uint64_t sub_1000274B0()
{
  return 0LL;
}

uint64_t sub_1000274B8()
{
  return 0LL;
}

uint64_t sub_1000274C0()
{
  return 0LL;
}

uint64_t sub_1000274C8()
{
  return 0LL;
}

uint64_t sub_1000274D0()
{
  return 0LL;
}

uint64_t sub_1000274D8()
{
  return 0LL;
}

uint64_t sub_1000274E0()
{
  return 0LL;
}

uint64_t sub_1000274E8()
{
  return 0LL;
}

uint64_t sub_1000274F0()
{
  return 0LL;
}

void sub_100027690( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_1000276A4(uint64_t a1, void *a2)
{
  return _[a2 onDiskDisappearedWithDisk:a1];
}

LABEL_56:
      }
    }
  }

  else
  {
    uint64_t v12 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v56 = 0LL;
      uint64_t v13 = sub_1000B85DC();
      CFTypeRef v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v15 = 3LL;
      }
      else {
        uint64_t v15 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      uint64_t v59 = 39;
      uint64_t v60 = 2080;
      uint64_t v61 = "-[DIDiskArb onDiskDisappearedWithDisk:]";
      LODWORD(v51) = 18;
      unint64_t v16 = (char *)_os_log_send_and_compose_impl( v15,  &v56,  0LL,  0LL,  &_mh_execute_header,  v14,  0LL,  "%.*s: Ignoring, during shutdown",  (int)buf,  v51);

      if (v16)
      {
        fprintf(__stderrp, "%s\n", v16);
        free(v16);
      }
    }

    else
    {
      uint64_t v17 = sub_1000B85DC();
      unint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        uint64_t v59 = 39;
        uint64_t v60 = 2080;
        uint64_t v61 = "-[DIDiskArb onDiskDisappearedWithDisk:]";
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%.*s: Ignoring, during shutdown",  buf,  0x12u);
      }
    }

    *__error() = v12;
  }

id sub_100028188(void *a1, const char *a2)
{
  return [a1 setCallbackReached:1];
}

void sub_100028AAC(uint64_t a1, const __DADissenter *a2, void *a3)
{
  id v8 = a3;
  if (a2)
  {
    uint64_t Status = DADissenterGetStatus(a2);
    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Dissented with status 0x%X, pid %d",  Status,  DADissenterGetProcessID(a2));
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[DIError errorWithEnumValue:verboseInfo:]( &OBJC_CLASS___DIError,  "errorWithEnumValue:verboseInfo:",  156LL,  v6));
    [v8 setOperationError:v7];
  }

  [v8 setCallbackReached:1];
}

uint64_t sub_10002ABAC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 24) == *(void *)(result + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }

  uint64_t v3 = **(void **)result + *(void *)(result + 32);
  if (*(void *)(result + 56)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(*(void *)result + 8LL);
    if (!v5) {
      goto LABEL_12;
    }
LABEL_10:
    int v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    goto LABEL_12;
  }

  uint64_t v5 = *(void *)(result + 64);
  if (v5) {
    goto LABEL_10;
  }
LABEL_12:
  *(void *)a3 = v3;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  unint64_t v8 = *(void *)(result + 32);
  unint64_t v9 = *(void *)(*(void *)result + 16LL) - v8;
  if (v9 >= *(void *)(result + 24) - *(void *)(result + 16)) {
    unint64_t v9 = *(void *)(result + 24) - *(void *)(result + 16);
  }
  unint64_t v10 = **(void **)(result + 8);
  BOOL v11 = v10 >= v8;
  unint64_t v12 = v10 - v8;
  if (!v11) {
    unint64_t v12 = 0LL;
  }
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = v12;
  return result;
}

uint64_t sub_10002AC44( uint64_t a1, void *a2, unint64_t **a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v8 = 0LL;
  *(void *)a1 = *a2;
  unint64_t v9 = *a3;
  *(void *)(a1 + 56) = 0LL;
  uint64_t v10 = a1 + 56;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = a7;
  *(void *)(a1 + 64) = 0LL;
  if (a4 < a5)
  {
    unint64_t v8 = **a3;
    if (v8 >= a6) {
      unint64_t v8 = a6;
    }
  }

  *(void *)(a1 + 40) = v8;
  sub_10002ABAC(a1, 1, (uint64_t)v15);
  sub_100014DF0(v10, v15);
  *(_OWORD *)(a1 + 72) = v15[1];
  BOOL v11 = (std::__shared_weak_count *)*((void *)&v15[0] + 1);
  if (*((void *)&v15[0] + 1))
  {
    unint64_t v12 = (unint64_t *)(*((void *)&v15[0] + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  return a1;
}

uint64_t sub_10002AD0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(*(void *)a1 + 16LL) + v2 - *(void *)(a1 + 32);
    uint64_t v6 = *(void *)a1 + 24LL;
    *(void *)(a1 + 32) = 0LL;
    *(void *)(a1 + 40) = 0LL;
    *(void *)a1 = v6;
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v4 + 8;
    *(void *)(a1 + 16) = v5;
  }

  sub_10002ABAC(a1, v2 != v3, (uint64_t)v11);
  sub_100014DF0(a1 + 56, v11);
  *(_OWORD *)(a1 + 72) = v11[1];
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v11[0] + 1);
  if (*((void *)&v11[0] + 1))
  {
    unint64_t v8 = (unint64_t *)(*((void *)&v11[0] + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

uint64_t sub_10002ADC8(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void *)(a1 + 24) - v3;
    if (*(void *)(*(void *)a1 + 16LL) - *(void *)(a1 + 32) < v4) {
      unint64_t v4 = *(void *)(*(void *)a1 + 16LL) - *(void *)(a1 + 32);
    }
    BOOL v5 = v4 <= a2;
    if (v4 <= a2)
    {
      int v6 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 8) + 8LL;
      uint64_t v8 = *(void *)a1 + 24LL;
      do
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        if (v6)
        {
          *(void *)(v7 - std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a1 + 40) + v4;
          uint64_t v3 = *(void *)(a1 + 16);
        }

        *(void *)(a1 + 32) = 0LL;
        *(void *)(a1 + 40) = 0LL;
        v3 += v4;
        *(void *)(a1 + 16) = v3;
        a2 -= v4;
        if (!a2) {
          break;
        }
        unint64_t v4 = *(void *)(v8 + 16);
        if (v4 >= *(void *)(a1 + 24) - v3) {
          unint64_t v4 = *(void *)(a1 + 24) - v3;
        }
        v7 += 8LL;
        v8 += 24LL;
        BOOL v11 = v4 > a2;
        if (v4 >= a2) {
          unint64_t v4 = a2;
        }
      }

      while (!v11);
      *(void *)a1 = v10;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v9;
    }
  }

  else
  {
    BOOL v5 = 0;
  }

  unint64_t v12 = *(void *)(a1 + 40) + a2;
  *(void *)(a1 + 40) = v12;
  if (v12 && *(_BYTE *)(a1 + 48)) {
    **(void **)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  }
  *(void *)(a1 + 16) += a2;
  *(void *)(a1 + 32) += a2;
  sub_10002ABAC(a1, v5, (uint64_t)v17);
  sub_100014DF0(a1 + 56, v17);
  *(_OWORD *)(a1 + 72) = v17[1];
  unint64_t v13 = (std::__shared_weak_count *)*((void *)&v17[0] + 1);
  if (*((void *)&v17[0] + 1))
  {
    CFTypeRef v14 = (unint64_t *)(*((void *)&v17[0] + 1) + 8LL);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return a1;
}

uint64_t sub_10002AF2C(uint64_t a1, unint64_t a2)
{
  char v3 = 0;
  if (a2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 8) + 8LL;
    uint64_t v8 = *(void *)a1 + 24LL;
    while (1)
    {
      unint64_t v9 = v6 - v5;
      if (*(void *)(v8 - 8) - v4 < v6 - v5) {
        unint64_t v9 = *(void *)(v8 - 8) - v4;
      }
      unint64_t v10 = *(void *)(v7 - 8);
      BOOL v11 = v10 >= v4;
      unint64_t v12 = v10 - v4;
      unint64_t v13 = v11 ? v12 : 0LL;
      unint64_t v14 = v13 >= v9 ? v9 : v13;
      if (v14 >= a2 && (v9 > v13 || a2 != v14)) {
        break;
      }
      unint64_t v4 = 0LL;
      v5 += v9;
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v7;
      *(void *)(a1 + 16) = v5;
      *(void *)a1 = v8;
      if (a2 >= v14) {
        unint64_t v16 = a2 - v14;
      }
      else {
        unint64_t v16 = 0LL;
      }
      v7 += 8LL;
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 0LL;
      char v3 = 1;
      v8 += 24LL;
      BOOL v11 = v14 >= a2;
      a2 = v16;
      if (v11) {
        goto LABEL_22;
      }
    }

    unint64_t v17 = *(void *)(a1 + 40) + a2;
    *(void *)(a1 + 16) = v5 + a2;
    *(void *)(a1 + 32) = v4 + a2;
    *(void *)(a1 + 40) = v17;
  }

LABEL_22:
  sub_10002ABAC(a1, v3 & 1, (uint64_t)v22);
  sub_100014DF0(a1 + 56, v22);
  *(_OWORD *)(a1 + 72) = v22[1];
  unint64_t v18 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
  if (*((void *)&v22[0] + 1))
  {
    unint64_t v19 = (unint64_t *)(*((void *)&v22[0] + 1) + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return a1;
}

          int v23 = sub_1000A26FC(v9, a2);
          if ((v24 & 1) == 0) {
            goto LABEL_25;
          }
          __int128 v25 = sub_1000A2864(v9, v23);
          unint64_t v9 = v23 + 2;
          CFStringRef result = sub_1000A2864(v23 + 2, a2);
          if (!(_DWORD)result)
          {
            unint64_t v10 = v11 + 1;
            if (v25) {
              continue;
            }
LABEL_25:
            CFStringRef result = sub_1000A1F3C(v8, v23, a3, -v11, a5 & 1);
            unint64_t v9 = v23 + 2;
LABEL_27:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v23;
          if (v25) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2) {
          return (uint64_t)sub_1000A2CB0((char *)v9, (char *)a2, (char *)a2, a3);
        }
        return result;
    }
  }

      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_) {
        break;
      }
    }

    *(_BYTE *)(a1 + 3672) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v9 = 0LL;
      unint64_t v10 = 0;
      do
      {
        if (*(_BYTE *)(a1 + 16)) {
          break;
        }
        v10 |= sub_1000BE4F4(a1, (uint64_t)v18, v9) == 0;
        sub_1000BE844(a1, (uint64_t)v18, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8]) {
            BOOL v11 = &__lk.__m_->__m_.__opaque[32];
          }
          else {
            BOOL v11 = 0LL;
          }
          v10 |= sub_1000BE940((uint64_t)v11, (uint64_t)v18);
        }

        sub_1000BB354((unint64_t *)&__lk);
        ++v9;
      }

      while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      if ((v10 & 1) != 0)
      {
        unint64_t v12 = *(void *)(a2 + 24);
        if (!v12) {
          sub_100016D94();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 48LL))(v12, v18);
      }
    }
  }

  while (!*(_BYTE *)(a1 + 16));
LABEL_41:
  v18[0] = off_10017E998;
  unint64_t v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

    CFRange v31 = *a3;
    uint64_t v32 = *v17;
    *(void *)&unsigned int v29 = sub_100026FEC(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_1000F59B0(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)sub_1000F5ADC(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }

void *sub_10002B060(void *result)
{
  uint64_t v1 = result[2];
  if (v1 != result[3])
  {
    uint64_t v2 = result[4];
    char v3 = (void *)result[1];
    unint64_t v4 = (uint64_t *)(*result + 16LL);
    do
    {
      *v3++ = v2;
      uint64_t v5 = *v4;
      v4 += 3;
      uint64_t v6 = result[3];
      unint64_t v7 = v5 - v2;
      if (v7 >= v6 - v1) {
        unint64_t v7 = v6 - v1;
      }
      v1 += v7;
      uint64_t v2 = 0LL;
    }

    while (v1 != v6);
  }

  return result;
}

void sub_10002B0A8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[6];
  if (sub_10002B1FC((uint64_t)a1, a2))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  else
  {
    sub_100016640((uint64_t)(a1 + 7));
    uint64_t v7 = a1[14];
    uint64_t v8 = (std::__shared_weak_count *)a1[15];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      unint64_t v11 = a1[16];
      uint64_t v12 = a1[18];
      unint64_t v13 = *(void *)(a2 + 144) - v12;
      if (v13 >= v11) {
        unint64_t v13 = a1[16];
      }
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      char v15 = *(_BYTE *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
      do
        unint64_t v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      *(void *)(a3 + 16) = v13;
      *(void *)(a3 + 24) = v12;
      *(void *)(a3 + 32) = v11;
      *(_BYTE *)(a3 + 40) = v15;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }

      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    else
    {
      unint64_t v19 = a1[16];
      uint64_t v20 = a1[18];
      unint64_t v21 = *(void *)(a2 + 144) - v20;
      if (v21 >= v19) {
        unint64_t v21 = a1[16];
      }
      char v22 = *(_BYTE *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v20;
      *(void *)(a3 + 32) = v19;
      *(_BYTE *)(a3 + 40) = v22;
    }
  }

BOOL sub_10002B1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 != *(void **)(a2 + 48)) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 152)) {
    BOOL v4 = *(_BYTE *)(a2 + 152) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return *(void *)(a1 + 144) == *(void *)(a2 + 144);
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[27];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  uint64_t v8 = v2[33];
  uint64_t v9 = v2[34];
  uint64_t v10 = v2[35];
  unint64_t v11 = (std::__shared_weak_count *)v2[41];
  if (v11)
  {
    uint64_t v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v14 = *(void *)(a1 + 56);
  BOOL v15 = v14 == v8 && *(void *)(a1 + 64) == v9 && *(void *)(a1 + 72) == v10;
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  if (v17 == v8 && v16 == v9)
  {
    int v20 = v15 ^ (*(void *)(a2 + 72) != v10);
    if (v14 != v8 || v20 == 0) {
      goto LABEL_34;
    }
  }

  else
  {
    char v19 = v14 != v17 || v15;
    if ((v19 & 1) != 0) {
      goto LABEL_34;
    }
  }

  if (*(void *)(a1 + 64) == v16 && *(void *)(a1 + 72) == *(void *)(a2 + 72))
  {
    BOOL v3 = *(void *)(a1 + 144) == *(void *)(a2 + 144);
    goto LABEL_35;
  }

double sub_10002B3A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10002D61C(a2, a1 + 208).n128_u64[0];
  return result;
}

uint64_t sub_10002B3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)a2;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = v7 - *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  __int128 v11 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = v12;
  if (v12)
  {
    unint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)a3;
  *(void *)(a1 + 104) = *(void *)(a3 + 8);
  __int128 v15 = *(_OWORD *)(a3 + 16);
  __int128 v16 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a3 + 48);
  *(_OWORD *)(a1 + 112) = v15;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v16;
  uint64_t v17 = *(void *)(a3 + 64);
  *(void *)(a1 + 152) = *(void *)(a3 + 56);
  *(void *)(a1 + 160) = v17;
  if (v17)
  {
    unint64_t v18 = (unint64_t *)(v17 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 192) = a5;
  *(_BYTE *)(a1 + 200) = a6;
  sub_10002D02C(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10002D02C(a1 + 368, a1, v8, 1);
  return a1;
}

void sub_10002B4C8(_Unwind_Exception *a1)
{
}

uint64_t sub_10002B504( uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *a3;
  if (*a2 == *a3)
  {
    unint64_t v14 = 0LL;
  }

  else
  {
    unint64_t v14 = 0LL;
    do
    {
      __int128 v15 = *(std::__shared_weak_count **)(v12 + 8);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        uint64_t v18 = *(void *)(v12 + 16);
        do
          unint64_t v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }

      else
      {
        uint64_t v18 = *(void *)(v12 + 16);
      }

      v14 += v18;
      v12 += 24LL;
    }

    while (v12 != v13);
  }

  *(void *)a1 = v14;
  sub_10002AC44(a1 + 8, a2, a4, 0LL, v14, 0LL, 1);
  sub_10002AC44(a1 + 96, a3, a5, *(void *)a1, *(void *)a1, 0LL, 1);
  *(void *)(a1 + 184) = a6;
  *(void *)(a1 + 192) = a7;
  *(_BYTE *)(a1 + 200) = 0;
  sub_10002D02C(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10002D02C(a1 + 368, a1, (uint64_t *)(a1 + 8), 1);
  return a1;
}

void sub_10002B668(_Unwind_Exception *a1)
{
}

uint64_t sub_10002B6A4(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)unint64_t v14 = v2;
  *(_OWORD *)&v14[16] = v3;
  __int128 v15 = *(_OWORD *)(a1 + 40);
  char v16 = *(_BYTE *)(a1 + 56);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  uint64_t v7 = 0LL;
  __int128 v19 = *(_OWORD *)(a1 + 80);
  for (uint64_t i = v2; i != *(void *)(a1 + 96) || *(_OWORD *)&v14[8] != *(_OWORD *)(a1 + 104); uint64_t i = *(void *)v14)
  {
    sub_100016640((uint64_t)v14);
    uint64_t v9 = *((void *)&v19 + 1);
    if (*((void *)&v19 + 1)) {
      sub_10002AF2C((uint64_t)v14, *((unint64_t *)&v19 + 1));
    }
    else {
      sub_10002AD0C((uint64_t)v14);
    }
    v7 += v9;
  }

  __int128 v10 = v18;
  if (v18)
  {
    __int128 v11 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return v7;
}

void sub_10002B7C0(_Unwind_Exception *a1)
{
}

double sub_10002B7D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10002D61C(a2, a1 + 368).n128_u64[0];
  return result;
}

void sub_10002B7E0( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 216);
  *(void *)&__int128 v141 = *(void *)(a1 + 208);
  *((void *)&v141 + 1) = v10;
  if (v10)
  {
    __int128 v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v142[0] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
  uint64_t v13 = (__int128 *)(a1 + 264);
  __int128 v144 = *(_OWORD *)(a1 + 264);
  __int128 v14 = *(_OWORD *)(a1 + 296);
  __int128 v145 = *(_OWORD *)(a1 + 280);
  uint64_t v143 = *(void *)(a1 + 256);
  char v147 = *(_BYTE *)(a1 + 312);
  __int128 v146 = v14;
  __int128 v15 = *(std::__shared_weak_count **)(a1 + 328);
  uint64_t v148 = *(void *)(a1 + 320);
  v149 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }

  __n128 v150 = *(__n128 *)(a1 + 336);
  unint64_t v151 = *(void *)(a1 + 352);
  char v152 = *(_BYTE *)(a1 + 360);
  BOOL v18 = sub_10002B1FC(a2, (uint64_t)&v141);
  if (v15)
  {
    __int128 v19 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  unint64_t v21 = (std::__shared_weak_count *)*((void *)&v141 + 1);
  if (*((void *)&v141 + 1))
  {
    char v22 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  int v24 = (_OWORD *)(a1 + 224);
  unint64_t v25 = (__int128 *)(a1 + 280);
  v125 = (__n128 *)(a1 + 336);
  uint64_t v26 = (uint64_t *)(a1 + 352);
  if (v18)
  {
    uint64_t v27 = *(void *)(a1 + 216);
    *(void *)&__int128 v141 = *(void *)(a1 + 208);
    *((void *)&v141 + 1) = v27;
    if (v27)
    {
      uint64_t v28 = (unint64_t *)(v27 + 8);
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }

    v142[0] = *v24;
    *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
    __int128 v144 = *v13;
    __int128 v30 = *(_OWORD *)(a1 + 296);
    __int128 v145 = *v25;
    uint64_t v143 = *(void *)(a1 + 256);
    __int128 v146 = v30;
    char v147 = *(_BYTE *)(a1 + 312);
    CFRange v31 = *(std::__shared_weak_count **)(a1 + 328);
    uint64_t v148 = *(void *)(a1 + 320);
    v149 = v31;
    if (v31)
    {
      uint64_t v32 = (unint64_t *)&v31->__shared_owners_;
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    __n128 v150 = *v125;
    unint64_t v151 = *v26;
    char v152 = *(_BYTE *)(a1 + 360);
    BOOL v34 = *(std::__shared_weak_count **)(a1 + 216);
    uint64_t v128 = *(void *)(a1 + 208);
    v129 = v34;
    if (v34)
    {
      uint64_t v35 = (unint64_t *)&v34->__shared_owners_;
      do
        unint64_t v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }

    v130[0] = *v24;
    *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
    __int128 v132 = *v13;
    __int128 v37 = *(_OWORD *)(a1 + 296);
    __int128 v133 = *v25;
    uint64_t v131 = *(void *)(a1 + 256);
    __int128 v134 = v37;
    char v135 = *(_BYTE *)(a1 + 312);
    uint64_t v38 = *(std::__shared_weak_count **)(a1 + 328);
    uint64_t v136 = *(void *)(a1 + 320);
    v137 = v38;
    if (v38)
    {
      uint64_t v39 = (unint64_t *)&v38->__shared_owners_;
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    __n128 v138 = *v125;
    unint64_t v139 = *v26;
    char v140 = *(_BYTE *)(a1 + 360);
    __n128 v41 = sub_10002D6B8(a5, (uint64_t)&v141, (uint64_t)&v128);
    unint64_t v42 = v137;
    if (v137)
    {
      uint64_t v43 = (unint64_t *)&v137->__shared_owners_;
      do
        unint64_t v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    char v45 = v129;
    if (v129)
    {
      int v46 = (unint64_t *)&v129->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v45->__on_zero_shared)(v45, v41);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    int v48 = v149;
    if (v149)
    {
      __uint32_t v49 = (unint64_t *)&v149->__shared_owners_;
      do
        unint64_t v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v41);
        std::__shared_weak_count::__release_weak(v48);
      }
    }

    int v51 = (std::__shared_weak_count *)*((void *)&v141 + 1);
    if (*((void *)&v141 + 1))
    {
      size_t v52 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
LABEL_144:
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v41);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }

  else
  {
    uint64_t v54 = *(void *)(a1 + 192);
    if (v54 + *(void *)(a1 + 184) >= a3) {
      unint64_t v55 = a3;
    }
    else {
      unint64_t v55 = v54 + *(void *)(a1 + 184);
    }
    if (v55 >= *(void *)(a2 + 144))
    {
      uint64_t v80 = *(void *)(a2 + 8);
      *(void *)&__int128 v141 = *(void *)a2;
      *((void *)&v141 + 1) = v80;
      if (v80)
      {
        int v81 = (unint64_t *)(v80 + 8);
        do
          unint64_t v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }

      v142[0] = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a2 + 25);
      uint64_t v143 = *(void *)(a2 + 48);
      __int128 v144 = *(_OWORD *)(a2 + 56);
      __int128 v145 = *(_OWORD *)(a2 + 72);
      __int128 v146 = *(_OWORD *)(a2 + 88);
      char v147 = *(_BYTE *)(a2 + 104);
      __int16 v83 = *(std::__shared_weak_count **)(a2 + 120);
      uint64_t v148 = *(void *)(a2 + 112);
      v149 = v83;
      if (v83)
      {
        uint64_t v84 = (unint64_t *)&v83->__shared_owners_;
        do
          unint64_t v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }

      __n128 v150 = *(__n128 *)(a2 + 128);
      unint64_t v151 = *(void *)(a2 + 144);
      char v152 = *(_BYTE *)(a2 + 152);
      if (a4)
      {
        unint64_t v86 = sub_10002C1FC(&v144, a1 + 96);
        unint64_t v87 = v86;
        if (v86 >= a4) {
          unint64_t v88 = a4;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88) {
          sub_10002C354((uint64_t)&v141, v88);
        }
        if (v87 < a4) {
          sub_10002C52C((uint64_t)&v141, a4 - v88);
        }
      }

      uint64_t v89 = *(std::__shared_weak_count **)(a1 + 216);
      uint64_t v128 = *(void *)(a1 + 208);
      v129 = v89;
      if (v89)
      {
        size_t v90 = (unint64_t *)&v89->__shared_owners_;
        do
          unint64_t v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }

      v130[0] = *v24;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
      __int128 v132 = *v13;
      __int128 v92 = *(_OWORD *)(a1 + 296);
      __int128 v133 = *v25;
      uint64_t v131 = *(void *)(a1 + 256);
      __int128 v134 = v92;
      char v135 = *(_BYTE *)(a1 + 312);
      int v93 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v136 = *(void *)(a1 + 320);
      v137 = v93;
      if (v93)
      {
        int v94 = (unint64_t *)&v93->__shared_owners_;
        do
          unint64_t v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }

      __n128 v138 = *v125;
      char v140 = *(_BYTE *)(a1 + 360);
      unint64_t v139 = v55;
      sub_10002B0A8(&v141, (uint64_t)&v128, (uint64_t)&v126);
      __int128 v96 = v126;
      __int128 v126 = 0uLL;
      size_t v97 = (std::__shared_weak_count *)*((void *)&v141 + 1);
      __int128 v141 = v96;
      if (v97)
      {
        __int16 v98 = (unint64_t *)&v97->__shared_owners_;
        do
          unint64_t v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }

      v142[0] = v127[0];
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)((char *)v127 + 9);
      __int16 v100 = (std::__shared_weak_count *)*((void *)&v126 + 1);
      if (*((void *)&v126 + 1))
      {
        unint64_t v101 = (unint64_t *)(*((void *)&v126 + 1) + 8LL);
        do
          unint64_t v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }

      uint64_t v103 = *((void *)&v141 + 1);
      *(void *)a5 = v141;
      *(void *)(a5 + std::iostream::~basic_iostream(v2, v3 + 8) = v103;
      if (v103)
      {
        unint64_t v104 = (unint64_t *)(v103 + 8);
        do
          unint64_t v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }

      *(_OWORD *)(a5 + 16) = v142[0];
      *(_OWORD *)(a5 + 25) = *(_OWORD *)((char *)v142 + 9);
      *(_OWORD *)(a5 + 56) = v144;
      __int128 v106 = v146;
      *(_OWORD *)(a5 + 72) = v145;
      *(void *)(a5 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v143;
      *(_OWORD *)(a5 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v106;
      *(_BYTE *)(a5 + 104) = v147;
      uint64_t v107 = v149;
      *(void *)(a5 + 112) = v148;
      *(void *)(a5 + 120) = v107;
      if (v107)
      {
        size_t v108 = (unint64_t *)&v107->__shared_owners_;
        do
          unint64_t v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }

      *(__n128 *)(a5 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v150;
      *(void *)(a5 + 144) = v151;
      *(_BYTE *)(a5 + sub_1000114F0(v1 + 152) = v152;
      unsigned __int16 v110 = v129;
      *(void *)(a5 + 160) = v128;
      *(void *)(a5 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v110;
      if (v110)
      {
        __int16 v111 = (unint64_t *)&v110->__shared_owners_;
        do
          unint64_t v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }

      *(_OWORD *)(a5 + 176) = v130[0];
      *(_OWORD *)(a5 + 185) = *(_OWORD *)((char *)v130 + 9);
      *(_OWORD *)(a5 + 216) = v132;
      __int128 v113 = v134;
      *(_OWORD *)(a5 + 232) = v133;
      *(void *)(a5 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v131;
      *(_OWORD *)(a5 + 24std::iostream::~basic_iostream(v2, v3 + 8) = v113;
      *(_BYTE *)(a5 + 2sub_1000114F0(v1 + 64) = v135;
      __int16 v114 = v137;
      *(void *)(a5 + 272) = v136;
      *(void *)(a5 + 280) = v114;
      if (v114)
      {
        char v115 = (unint64_t *)&v114->__shared_owners_;
        do
          unint64_t v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
        __n128 v41 = v138;
        *(__n128 *)(a5 + 28std::iostream::~basic_iostream(v2, v3 + 8) = v138;
        *(void *)(a5 + 304) = v139;
        *(_BYTE *)(a5 + 312) = v140;
        do
          unint64_t v117 = __ldaxr(v115);
        while (__stlxr(v117 - 1, v115));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }

      else
      {
        __n128 v41 = v138;
        *(__n128 *)(a5 + 28std::iostream::~basic_iostream(v2, v3 + 8) = v138;
        *(void *)(a5 + 304) = v139;
        *(_BYTE *)(a5 + 312) = v140;
      }

      v118 = v129;
      if (v129)
      {
        v119 = (unint64_t *)&v129->__shared_owners_;
        do
          unint64_t v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }

      int v121 = v149;
      if (v149)
      {
        unsigned int v122 = (unint64_t *)&v149->__shared_owners_;
        do
          unint64_t v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }

      int v51 = (std::__shared_weak_count *)*((void *)&v141 + 1);
      if (*((void *)&v141 + 1))
      {
        v124 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
        do
          unint64_t v53 = __ldaxr(v124);
        while (__stlxr(v53 - 1, v124));
        goto LABEL_144;
      }
    }

    else
    {
      uint64_t v56 = *(void *)(a1 + 216);
      *(void *)&__int128 v141 = *(void *)(a1 + 208);
      *((void *)&v141 + 1) = v56;
      if (v56)
      {
        size_t v57 = (unint64_t *)(v56 + 8);
        do
          unint64_t v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }

      v142[0] = *v24;
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
      __int128 v144 = *v13;
      __int128 v59 = *(_OWORD *)(a1 + 296);
      __int128 v145 = *v25;
      uint64_t v143 = *(void *)(a1 + 256);
      __int128 v146 = v59;
      char v147 = *(_BYTE *)(a1 + 312);
      uint64_t v60 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v148 = *(void *)(a1 + 320);
      v149 = v60;
      if (v60)
      {
        uint64_t v61 = (unint64_t *)&v60->__shared_owners_;
        do
          unint64_t v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }

      __n128 v150 = *v125;
      unint64_t v151 = *v26;
      char v152 = *(_BYTE *)(a1 + 360);
      size_t v63 = *(std::__shared_weak_count **)(a1 + 216);
      uint64_t v128 = *(void *)(a1 + 208);
      v129 = v63;
      if (v63)
      {
        char v64 = (unint64_t *)&v63->__shared_owners_;
        do
          unint64_t v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }

      v130[0] = *v24;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
      __int128 v132 = *v13;
      __int128 v66 = *(_OWORD *)(a1 + 296);
      __int128 v133 = *v25;
      uint64_t v131 = *(void *)(a1 + 256);
      __int128 v134 = v66;
      char v135 = *(_BYTE *)(a1 + 312);
      uint64_t v67 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v136 = *(void *)(a1 + 320);
      v137 = v67;
      if (v67)
      {
        uint64_t v68 = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }

      __n128 v138 = *v125;
      unint64_t v139 = *v26;
      char v140 = *(_BYTE *)(a1 + 360);
      __n128 v41 = sub_10002D6B8(a5, (uint64_t)&v141, (uint64_t)&v128);
      __int16 v70 = v137;
      if (v137)
      {
        char v71 = (unint64_t *)&v137->__shared_owners_;
        do
          unint64_t v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v41);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

      uint64_t v73 = v129;
      if (v129)
      {
        uint64_t v74 = (unint64_t *)&v129->__shared_owners_;
        do
          unint64_t v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v73->__on_zero_shared)(v73, v41);
          std::__shared_weak_count::__release_weak(v73);
        }
      }

      uint64_t v76 = v149;
      if (v149)
      {
        uint64_t v77 = (unint64_t *)&v149->__shared_owners_;
        do
          unint64_t v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v41);
          std::__shared_weak_count::__release_weak(v76);
        }
      }

      int v51 = (std::__shared_weak_count *)*((void *)&v141 + 1);
      if (*((void *)&v141 + 1))
      {
        uint64_t v79 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
        do
          unint64_t v53 = __ldaxr(v79);
        while (__stlxr(v53 - 1, v79));
        goto LABEL_144;
      }
    }
  }

void sub_10002C1B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
}

uint64_t sub_10002C1FC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = a1 + 1;
  unint64_t v3 = *(void *)(a2 + 16);
  if (*((void *)a1 + 2) > v3) {
    return 0LL;
  }
  __int128 v6 = *v2;
  __int128 v7 = a1[2];
  __int128 v15 = *a1;
  __int128 v16 = v6;
  __int128 v17 = v7;
  char v18 = *((_BYTE *)a1 + 48);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 8);
  uint64_t v19 = *((void *)a1 + 7);
  unint64_t v20 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    unint64_t v3 = *(void *)(a2 + 16);
  }

  __int128 v21 = *(__int128 *)((char *)a1 + 72);
  if ((unint64_t)v16 >= v3)
  {
    uint64_t v4 = 0LL;
    if (!v8) {
      return v4;
    }
    goto LABEL_19;
  }

  uint64_t v4 = 0LL;
  do
  {
    sub_100016640((uint64_t)&v15);
    if (*(void *)(a2 + 16) - *(void *)v2 >= *((void *)&v21 + 1)) {
      unint64_t v11 = *((void *)&v21 + 1);
    }
    else {
      unint64_t v11 = *(void *)(a2 + 16) - *(void *)v2;
    }
    if (v11) {
      sub_10002AF2C((uint64_t)&v15, v11);
    }
    else {
      sub_10002AD0C((uint64_t)&v15);
    }
    v4 += v11;
  }

  while ((unint64_t)v16 < *(void *)(a2 + 16));
  uint64_t v8 = v20;
  if (v20)
  {
LABEL_19:
    unint64_t v12 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v4;
}

void sub_10002C340(_Unwind_Exception *a1)
{
}

uint64_t sub_10002C354(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_10002AF2C(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    uint64_t v20 = *(void *)(v3 + 208);
    __int128 v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    v22[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v23 = *(void *)(v3 + 256);
    __int128 v24 = *(_OWORD *)(v3 + 264);
    char v27 = *(_BYTE *)(v3 + 312);
    __int128 v25 = *(_OWORD *)(v3 + 280);
    __int128 v26 = *(_OWORD *)(v3 + 296);
    __int128 v7 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v28 = *(void *)(v3 + 320);
    unint64_t v29 = v7;
    if (v7)
    {
      uint64_t v8 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    __int128 v30 = *(_OWORD *)(v3 + 336);
    uint64_t v31 = *(void *)(v3 + 352);
    char v32 = *(_BYTE *)(v3 + 360);
    sub_10002B0A8((void *)a1, (uint64_t)&v20, (uint64_t)&v33);
    sub_100014DF0(a1, &v33);
    *(_OWORD *)(a1 + 16) = v34[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v34 + 9);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      unint64_t v11 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    unint64_t v13 = v29;
    if (v29)
    {
      __int128 v14 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    __int128 v16 = v21;
    if (v21)
    {
      __int128 v17 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  return a1;
}

void sub_10002C510( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10002C52C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_10002ADC8(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    uint64_t v20 = *(void *)(v3 + 208);
    __int128 v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    v22[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v23 = *(void *)(v3 + 256);
    __int128 v24 = *(_OWORD *)(v3 + 264);
    char v27 = *(_BYTE *)(v3 + 312);
    __int128 v25 = *(_OWORD *)(v3 + 280);
    __int128 v26 = *(_OWORD *)(v3 + 296);
    __int128 v7 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v28 = *(void *)(v3 + 320);
    unint64_t v29 = v7;
    if (v7)
    {
      uint64_t v8 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    __int128 v30 = *(_OWORD *)(v3 + 336);
    uint64_t v31 = *(void *)(v3 + 352);
    char v32 = *(_BYTE *)(v3 + 360);
    sub_10002B0A8((void *)a1, (uint64_t)&v20, (uint64_t)&v33);
    sub_100014DF0(a1, &v33);
    *(_OWORD *)(a1 + 16) = v34[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v34 + 9);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      unint64_t v11 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    unint64_t v13 = v29;
    if (v29)
    {
      __int128 v14 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    __int128 v16 = v21;
    if (v21)
    {
      __int128 v17 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  return a1;
}

void sub_10002C6E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10002C704(uint64_t a1)
{
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 216);
    uint64_t v19 = *(void *)(v2 + 208);
    uint64_t v20 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    v21[0] = *(_OWORD *)(v2 + 224);
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v2 + 233);
    uint64_t v22 = *(void *)(v2 + 256);
    __int128 v23 = *(_OWORD *)(v2 + 264);
    char v26 = *(_BYTE *)(v2 + 312);
    __int128 v24 = *(_OWORD *)(v2 + 280);
    __int128 v25 = *(_OWORD *)(v2 + 296);
    unint64_t v6 = *(std::__shared_weak_count **)(v2 + 328);
    uint64_t v27 = *(void *)(v2 + 320);
    uint64_t v28 = v6;
    if (v6)
    {
      __int128 v7 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }

    __int128 v29 = *(_OWORD *)(v2 + 336);
    uint64_t v30 = *(void *)(v2 + 352);
    char v31 = *(_BYTE *)(v2 + 360);
    sub_10002B0A8((void *)a1, (uint64_t)&v19, (uint64_t)&v32);
    sub_100014DF0(a1, &v32);
    *(_OWORD *)(a1 + 16) = v33[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v33 + 9);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v10 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    unint64_t v12 = v28;
    if (v28)
    {
      unint64_t v13 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    unint64_t v15 = v20;
    if (v20)
    {
      __int128 v16 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

  return a1;
}

void sub_10002C8B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10002C8D0(uint64_t a1)
{
  return *(void *)(a1 + 80) == *(void *)(a1 + 72);
}

void sub_10002C8E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 24);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v6 >= (unint64_t)(v7 & 1) + *(void *)(a2 + 8) - 1)
  {
    sub_10002D61C(a4, a3);
    sub_10002D61C(a4 + 160, a3);
    return;
  }

  unint64_t v10 = *(void *)(a1 + 16) + v6;
  char v11 = v7 & 2;
  unint64_t v12 = *(void *)a2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = *(void *)a2;
  }
  else {
    unint64_t v13 = v12 + 1;
  }
  if (v10 > v13)
  {
LABEL_91:
    if (v11) {
      unint64_t v81 = v12;
    }
    else {
      unint64_t v81 = v12 + 1;
    }
    unint64_t v82 = v81 - v6;
    if (v81 < v6)
    {
      if (v7)
      {
        if (v7 == 3)
        {
          unint64_t v83 = *(void *)(a2 + 8);
          if (v83 < v12) {
            goto LABEL_107;
          }
        }

        else
        {
          unint64_t v83 = *(void *)(a2 + 8);
          if (v12 >= v83)
          {
LABEL_107:
            uint64_t v85 = qword_1001985E0;
            goto LABEL_108;
          }
        }
      }

      else
      {
        unint64_t v83 = *(void *)(a2 + 8);
        if (v12 >= v83 || v12 + 1 >= v83) {
          goto LABEL_107;
        }
      }

      uint64_t v85 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v83;
LABEL_108:
      unint64_t v86 = v85 + v81;
      uint64_t v87 = *(void *)(a1 + 48);
      if (*(void *)(a3 + 144) >= v86) {
        unint64_t v88 = v86;
      }
      else {
        unint64_t v88 = *(void *)(a3 + 144);
      }
      uint64_t v89 = a4;
      uint64_t v90 = a1;
      unint64_t v82 = 0LL;
LABEL_121:
      sub_10002B7E0(v87, v90, v88, v82, v89);
      return;
    }

    if (v7)
    {
      if (v7 == 3)
      {
        unint64_t v84 = *(void *)(a2 + 8);
        if (v84 < v12) {
          goto LABEL_116;
        }
      }

      else
      {
        unint64_t v84 = *(void *)(a2 + 8);
        if (v12 >= v84)
        {
LABEL_116:
          uint64_t v91 = qword_1001985E0;
          goto LABEL_117;
        }
      }
    }

    else
    {
      unint64_t v84 = *(void *)(a2 + 8);
      if (v12 >= v84 || v12 + 1 >= v84) {
        goto LABEL_116;
      }
    }

    uint64_t v91 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v84;
LABEL_117:
    unint64_t v92 = v91 + v81;
    uint64_t v87 = *(void *)(a1 + 48);
    if (*(void *)(a3 + 144) >= v92) {
      unint64_t v88 = v92;
    }
    else {
      unint64_t v88 = *(void *)(a3 + 144);
    }
    uint64_t v89 = a4;
    uint64_t v90 = a1;
    goto LABEL_121;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v119 = *(void *)a1;
  unint64_t v120 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    uint64_t v18 = *(void *)(a1 + 48);
  }

  else
  {
    uint64_t v18 = v14;
  }

  v121[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v121 + 9) = *(_OWORD *)(a1 + 25);
  uint64_t v122 = v18;
  __int128 v123 = *(_OWORD *)(a1 + 56);
  __int128 v124 = *(_OWORD *)(a1 + 72);
  __int128 v125 = *(_OWORD *)(a1 + 88);
  char v126 = *(_BYTE *)(a1 + 104);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v127 = *(void *)(a1 + 112);
  uint64_t v128 = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v129 = *(_OWORD *)(a1 + 128);
  uint64_t v130 = *(void *)(a1 + 144);
  char v131 = *(_BYTE *)(a1 + 152);
  while (!sub_10002B1FC((uint64_t)&v119, a3))
  {
    v10 += *(void *)&v121[0];
    unint64_t v22 = *(void *)a2;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
      ++v22;
    }
    if (v10 >= v22) {
      break;
    }
    sub_10002C704((uint64_t)&v119);
  }

  __int128 v23 = *(std::__shared_weak_count **)(v14 + 216);
  uint64_t v106 = *(void *)(v14 + 208);
  uint64_t v107 = v23;
  if (v23)
  {
    __int128 v24 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  v108[0] = *(_OWORD *)(v14 + 224);
  *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)(v14 + 233);
  char v26 = (__int128 *)(v14 + 264);
  __int128 v110 = *(_OWORD *)(v14 + 264);
  __int128 v27 = *(_OWORD *)(v14 + 296);
  __int128 v111 = *(_OWORD *)(v14 + 280);
  uint64_t v109 = *(void *)(v14 + 256);
  char v113 = *(_BYTE *)(v14 + 312);
  __int128 v112 = v27;
  uint64_t v28 = *(std::__shared_weak_count **)(v14 + 328);
  uint64_t v114 = *(void *)(v14 + 320);
  char v115 = v28;
  if (v28)
  {
    __int128 v29 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }

  __int128 v116 = *(_OWORD *)(v14 + 336);
  uint64_t v117 = *(void *)(v14 + 352);
  char v118 = *(_BYTE *)(v14 + 360);
  BOOL v31 = sub_10002B1FC((uint64_t)&v119, (uint64_t)&v106);
  if (v28)
  {
    __int128 v32 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  BOOL v34 = v107;
  if (v107)
  {
    uint64_t v35 = (unint64_t *)&v107->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v31) {
        goto LABEL_37;
      }
      goto LABEL_80;
    }
  }

  if (!v31)
  {
LABEL_80:
    unint64_t v75 = v128;
    if (v128)
    {
      uint64_t v76 = (unint64_t *)&v128->__shared_owners_;
      do
        unint64_t v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }

    unint64_t v78 = v120;
    if (v120)
    {
      uint64_t v79 = (unint64_t *)&v120->__shared_owners_;
      do
        unint64_t v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }

    unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
    unint64_t v12 = *(void *)a2;
    unint64_t v6 = *(void *)(a1 + 24);
    char v11 = v7 & 2;
    goto LABEL_91;
  }

LABEL_37:
  __int128 v37 = (_OWORD *)(v14 + 224);
  uint64_t v38 = (__int128 *)(v14 + 280);
  uint64_t v39 = *(std::__shared_weak_count **)(v14 + 216);
  uint64_t v106 = *(void *)(v14 + 208);
  uint64_t v107 = v39;
  if (v39)
  {
    unint64_t v40 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }

  v108[0] = *v37;
  *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)(v14 + 233);
  __int128 v110 = *v26;
  __int128 v42 = *(_OWORD *)(v14 + 296);
  __int128 v111 = *v38;
  uint64_t v43 = (__int128 *)(v14 + 336);
  unint64_t v44 = (uint64_t *)(v14 + 352);
  uint64_t v109 = *(void *)(v14 + 256);
  __int128 v112 = v42;
  char v113 = *(_BYTE *)(v14 + 312);
  char v45 = *(std::__shared_weak_count **)(v14 + 328);
  uint64_t v114 = *(void *)(v14 + 320);
  char v115 = v45;
  if (v45)
  {
    int v46 = (unint64_t *)&v45->__shared_owners_;
    do
      unint64_t v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }

  __int128 v116 = *v43;
  uint64_t v117 = *v44;
  char v118 = *(_BYTE *)(v14 + 360);
  int v48 = *(std::__shared_weak_count **)(v14 + 216);
  uint64_t v93 = *(void *)(v14 + 208);
  int v94 = v48;
  if (v48)
  {
    __uint32_t v49 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }

  *(_OWORD *)unint64_t v95 = *v37;
  *(_OWORD *)&v95[9] = *(_OWORD *)(v14 + 233);
  __int128 v51 = *v38;
  __int128 v52 = *(_OWORD *)(v14 + 296);
  __int128 v97 = *v26;
  __int128 v98 = v51;
  uint64_t v96 = *(void *)(v14 + 256);
  __int128 v99 = v52;
  char v100 = *(_BYTE *)(v14 + 312);
  unint64_t v53 = *(std::__shared_weak_count **)(v14 + 328);
  uint64_t v101 = *(void *)(v14 + 320);
  unint64_t v102 = v53;
  if (v53)
  {
    uint64_t v54 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }

  __int128 v103 = *v43;
  uint64_t v104 = *v44;
  char v105 = *(_BYTE *)(v14 + 360);
  __n128 v56 = sub_10002D6B8(a4, (uint64_t)&v106, (uint64_t)&v93);
  size_t v57 = v102;
  if (v102)
  {
    unint64_t v58 = (unint64_t *)&v102->__shared_owners_;
    do
      unint64_t v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v56);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

  uint64_t v60 = v94;
  if (v94)
  {
    uint64_t v61 = (unint64_t *)&v94->__shared_owners_;
    do
      unint64_t v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, v56);
      std::__shared_weak_count::__release_weak(v60);
    }
  }

  size_t v63 = v115;
  if (v115)
  {
    char v64 = (unint64_t *)&v115->__shared_owners_;
    do
      unint64_t v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v63->__on_zero_shared)(v63, v56);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  __int128 v66 = v107;
  if (v107)
  {
    uint64_t v67 = (unint64_t *)&v107->__shared_owners_;
    do
      unint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v56);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  unint64_t v69 = v128;
  if (v128)
  {
    __int16 v70 = (unint64_t *)&v128->__shared_owners_;
    do
      unint64_t v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v56);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  unint64_t v72 = v120;
  if (v120)
  {
    uint64_t v73 = (unint64_t *)&v120->__shared_owners_;
    do
      unint64_t v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v72->__on_zero_shared)(v72, v56);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

    sub_1000BB354(&v31);
    if ((v12 | 2) != 2) {
      return v4;
    }
  }

  return 0LL;
}

      sub_1000E7750((unint64_t *)a3, (unint64_t *)&v26);
      *(_DWORD *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v15;
      return sub_1000E7B68((unint64_t *)&v26);
    }
  }

  sub_1000E7750((unint64_t *)&v24, (unint64_t *)&v26);
  unint64_t v25 = -2LL;
  *(void *)a3 = 0LL;
  do
    char v11 = __ldaxr((unint64_t *)&v24);
  while (__stlxr(0LL, (unint64_t *)&v24));
  atomic_store(v11, (unint64_t *)a3);
  *(_DWORD *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v25;
  sub_1000E7B68((unint64_t *)&v24);
  return sub_1000E7B68((unint64_t *)&v26);
}

void sub_10002CFDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_10002D010( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (*(void *)(a3 + 144) >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)(a3 + 144);
  }
  sub_10002B7E0(v6, a1, v7, a4, a5);
}

uint64_t sub_10002D02C(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  *(void *)(a1 + 56) = *a3;
  *(void *)(a1 + sub_1000114F0(v1 + 64) = a3[1];
  __int128 v6 = *((_OWORD *)a3 + 1);
  __int128 v7 = *((_OWORD *)a3 + 2);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a3 + 48);
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(void *)(a1 + 112) = a3[7];
  uint64_t v8 = a3[8];
  *(void *)(a1 + 120) = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  char v11 = (__int128 *)(a3 + 2);
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a3 + 9);
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 152) = a4;
  uint64_t v12 = *a3;
  if (*a3 == *(void *)(a2 + 96) && a3[1] == *(void *)(a2 + 104) && *(void *)v11 == *(void *)(a2 + 112))
  {
    *(void *)(a1 + 144) = *(void *)(a2 + 184) + *(void *)(a2 + 192);
  }

  else
  {
    __int128 v73 = *(_OWORD *)(a2 + 8);
    __int128 v74 = *(_OWORD *)(a2 + 24);
    __int128 v75 = *(_OWORD *)(a2 + 40);
    char v76 = *(_BYTE *)(a2 + 56);
    unint64_t v13 = *(std::__shared_weak_count **)(a2 + 72);
    uint64_t v77 = *(void *)(a2 + 64);
    unint64_t v78 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      uint64_t v12 = *a3;
    }

    __int128 v79 = *(_OWORD *)(a2 + 80);
    uint64_t v16 = a3[1];
    uint64_t v65 = v12;
    uint64_t v66 = v16;
    __int128 v17 = *((_OWORD *)a3 + 2);
    __int128 v67 = *v11;
    __int128 v68 = v17;
    char v69 = *((_BYTE *)a3 + 48);
    uint64_t v18 = (std::__shared_weak_count *)a3[8];
    uint64_t v70 = a3[7];
    unint64_t v71 = v18;
    if (v18)
    {
      uint64_t v19 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

    int v21 = 0;
    __int128 v72 = *(_OWORD *)(a3 + 9);
    while ((void)v73 != v65 || *((void *)&v73 + 1) != v66 || (void)v74 != (void)v67)
    {
      sub_100016640((uint64_t)&v73);
      unint64_t v22 = v78;
      if (v78)
      {
        __int128 v23 = (unint64_t *)&v78->__shared_owners_;
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        int v25 = DWORD2(v79);
        do
          unint64_t v26 = __ldaxr(v23);
        while (__stlxr(v26 - 1, v23));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }

      else
      {
        int v25 = DWORD2(v79);
      }

      v21 += v25;
      sub_10002AD0C((uint64_t)&v73);
    }

    *(void *)(a1 + 144) = *(void *)(a2 + 184) + v21;
    if (v71)
    {
      __int128 v27 = &v71->__shared_owners_;
      do
        unint64_t v28 = __ldaxr((unint64_t *)v27);
      while (__stlxr(v28 - 1, (unint64_t *)v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }

    __int128 v29 = v78;
    if (v78)
    {
      uint64_t v30 = (unint64_t *)&v78->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    __int128 v32 = *(std::__shared_weak_count **)(a2 + 216);
    uint64_t v50 = *(void *)(a2 + 208);
    __int128 v51 = v32;
    if (v32)
    {
      unint64_t v33 = (unint64_t *)&v32->__shared_owners_;
      do
        unint64_t v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }

    v52[0] = *(_OWORD *)(a2 + 224);
    *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)(a2 + 233);
    uint64_t v53 = *(void *)(a2 + 256);
    __int128 v35 = *(_OWORD *)(a2 + 264);
    char v57 = *(_BYTE *)(a2 + 312);
    __int128 v36 = *(_OWORD *)(a2 + 280);
    __int128 v54 = v35;
    __int128 v55 = v36;
    __int128 v56 = *(_OWORD *)(a2 + 296);
    __int128 v37 = *(std::__shared_weak_count **)(a2 + 328);
    uint64_t v58 = *(void *)(a2 + 320);
    unint64_t v59 = v37;
    if (v37)
    {
      uint64_t v38 = (unint64_t *)&v37->__shared_owners_;
      do
        unint64_t v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }

    __int128 v60 = *(_OWORD *)(a2 + 336);
    uint64_t v61 = *(void *)(a2 + 352);
    char v62 = *(_BYTE *)(a2 + 360);
    sub_10002B0A8((void *)a1, (uint64_t)&v50, (uint64_t)&v63);
    sub_100014DF0(a1, &v63);
    *(_OWORD *)(a1 + 16) = v64[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v64 + 9);
    unint64_t v40 = (std::__shared_weak_count *)*((void *)&v63 + 1);
    if (*((void *)&v63 + 1))
    {
      unint64_t v41 = (unint64_t *)(*((void *)&v63 + 1) + 8LL);
      do
        unint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    uint64_t v43 = v59;
    if (v59)
    {
      unint64_t v44 = (unint64_t *)&v59->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    int v46 = v51;
    if (v51)
    {
      unint64_t v47 = (unint64_t *)&v51->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }

  return a1;
}

void sub_10002D458(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10002D498(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 48) + 200LL);
}

uint64_t sub_10002D4A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = *(void *)(a2 + 144) - a3;
  if (v6 <= a4) {
    unint64_t v6 = a4;
  }
  if (v6 < a5) {
    a5 = v6;
  }
  return sub_10002B3B0(a6, a1 + 56, a2 + 56, a3, a5, *(_BYTE *)(*(void *)(a1 + 48) + 200LL));
}

BOOL sub_10002D4E0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 144);
  return v4 > a3 || *(void *)(a2 + 144) - v4 < a4;
}

uint64_t sub_10002D4FC(uint64_t a1)
{
  uint64_t v2 = a1 + 368;
  sub_1000114F0(a1 + 480);
  sub_1000114F0(v2);
  sub_1000114F0(a1 + 320);
  sub_1000114F0(a1 + 208);
  sub_1000114F0(a1 + 152);
  sub_1000114F0(a1 + 64);
  return a1;
}

uint64_t sub_10002D554@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    unint64_t v6 = (unint64_t *)(v4 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  char v11 = v13;
  v13[0] = v5;
  v13[1] = v4;
  void v13[2] = v9;
  __int128 v12 = xmmword_100138580;
  sub_10002D91C(a2, (uint64_t *)&v11, v8, a1[2]);
  return sub_100014E54((uint64_t)&v11);
}

void sub_10002D600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_100014E54((uint64_t)va1);
  sub_1000114F0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10002D61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + sub_1000114F0(v1 + 64) = *(void *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  __int128 v7 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = result;
  uint64_t v12 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  return result;
}

__n128 sub_10002D6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + sub_1000114F0(v1 + 64) = *(void *)(a2 + 64);
  __int128 v4 = *(_OWORD *)(a2 + 72);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  __int128 v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a3 + 25);
  *(_OWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a3 + 48);
  *(void *)(a1 + 216) = *(void *)(a3 + 56);
  *(void *)(a1 + 224) = *(void *)(a3 + 64);
  __int128 v8 = *(_OWORD *)(a3 + 72);
  __int128 v9 = *(_OWORD *)(a3 + 88);
  *(_BYTE *)(a1 + 2sub_1000114F0(v1 + 64) = *(_BYTE *)(a3 + 104);
  *(_OWORD *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  *(_OWORD *)(a1 + 232) = v8;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a3 + 112);
  *(void *)(a3 + 112) = 0LL;
  *(void *)(a3 + 120) = 0LL;
  __n128 result = *(__n128 *)(a3 + 128);
  *(__n128 *)(a1 + 28std::iostream::~basic_iostream(v2, v3 + 8) = result;
  uint64_t v11 = *(void *)(a3 + 144);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a3 + 152);
  *(void *)(a1 + 304) = v11;
  return result;
}

uint64_t sub_10002D79C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  __int128 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + sub_1000114F0(v1 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + sub_1000114F0(v1 + 152) = 0LL;
  *(void *)(a2 + 160) = 0LL;
  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  sub_10002D02C(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10002D02C(a1 + 368, a1, v4, 1);
  return a1;
}

void sub_10002D888(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D8BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_1000114F0(a1 + 480);
    sub_1000114F0(a1 + 368);
    sub_1000114F0(a1 + 320);
    sub_1000114F0(a1 + 208);
    sub_1000114F0(a1 + 152);
    sub_1000114F0(a1 + 64);
  }

  return a1;
}

uint64_t *sub_10002D91C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10002D9AC((uint64_t)a1, a2);
  uint64_t v8 = a1[1];
  uint64_t v15 = *a1;
  uint64_t v9 = v15 + 24 * v8;
  uint64_t v10 = a1[19];
  unint64_t v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  uint64_t v12 = &v13[v10];
  sub_10002B504(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_10002D998(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D9AC(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = xmmword_1001380F0;
  sub_10002DA54((void *)a1, a2);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 152) = xmmword_1001380F0;
  sub_100014EAC(a1 + 144, v3);
  return a1;
}

void sub_10002DA24(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 160))
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }

  sub_100014E54(v1);
  _Unwind_Resume(a1);
}

void *sub_10002DA54(void *result, uint64_t *a2)
{
  uint64_t v4 = a2 + 3;
  uint64_t v3 = *a2;
  if (v4 == (uint64_t *)v3)
  {
    __n128 result = sub_10002DACC(result, v3, v3 + 24 * a2[1]);
    uint64_t v5 = a2[1];
    if (v5)
    {
      __n128 result = (void *)*a2;
      do
      {
        --v5;
        __n128 result = (void *)(sub_1000114F0((uint64_t)result) + 24);
      }

      while (v5);
    }

    a2[1] = 0LL;
  }

  else
  {
    *__n128 result = v3;
    *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 1);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return result;
}

void *sub_10002DACC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  if (v5 <= a1[2])
  {
    __n128 result = (void *)sub_10002DC2C((uint64_t)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }

  else
  {
    if (v5 >= 0x555555555555556LL) {
      sub_100014AD4("get_next_capacity, allocator's max size reached");
    }
    uint64_t v7 = operator new(a3 - a2);
    uint64_t v8 = (uint64_t *)*a1;
    if (*a1)
    {
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = *a1;
        do
        {
          --v9;
          uint64_t v10 = sub_1000114F0(v10) + 24;
        }

        while (v9);
      }

      a1[1] = 0LL;
      if (a1 + 3 != v8) {
        operator delete(v8);
      }
    }

    a1[1] = 0LL;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    return sub_10002DBD0(a1, a2, a3);
  }

  return result;
}

void *sub_10002DBD0(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result + 24 * v3;
  uint64_t v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      *(void *)a2 = 0LL;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      v5 += 24LL;
      a2 += 24LL;
    }

    while (a2 != a3);
    uint64_t v3 = result[1];
  }

  result[1] = v3 - 0x5555555555555555LL * ((v5 - v4) >> 3);
  return result;
}

uint64_t sub_10002DC2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v14 = a3;
      do
      {
        --v14;
        uint64_t result = sub_100014DF0(a4, (__int128 *)v8);
        *(void *)(a4 + 16) = *(void *)(v8 + 16);
        a4 += 24LL;
        v8 += 24LL;
      }

      while (v14);
    }

    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      do
      {
        uint64_t result = sub_1000114F0(a4);
        a4 += 24LL;
        BOOL v13 = __CFADD__(v15++, 1LL);
      }

      while (!v13);
    }
  }

  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = a2 + 24 * a5;
      unint64_t v11 = a5;
      do
      {
        --v11;
        uint64_t result = sub_100014DF0(a4, (__int128 *)v10);
        *(void *)(a4 + 16) = *(void *)(v10 + 16);
        a4 += 24LL;
        v10 += 24LL;
      }

      while (v11);
    }

    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(void *)uint64_t v8 = 0LL;
        *(void *)(v8 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
        *(void *)(a4 + 16) = *(void *)(v8 + 16);
        v8 += 24LL;
        a4 += 24LL;
        BOOL v13 = __CFADD__(v9++, 1LL);
      }

      while (!v13);
    }
  }

  return result;
}

void sub_10002E490( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a2 == 1)
  {
    id v24 = objc_begin_catch(exception_object);
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 reason]);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v25,  v23);

    objc_end_catch();
    JUMPOUT(0x10002E454LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10002E55C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002E56C(uint64_t a1)
{
}

void sub_10002E574(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

void sub_10002E908( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 reason]);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v19,  v17);

    objc_end_catch();
    JUMPOUT(0x10002E8D0LL);
  }

  _Unwind_Resume(exception_object);
}

id sub_10002E9B8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

uint64_t sub_10002EA04(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v4 = *(void *)(a2 + 560);
  unint64_t v13 = (unint64_t)(*(void *)(v4 + 120) + *(void *)(v4 + 128) - 1LL) / *(void *)(v4 + 128);
  sub_10006B7E0(v4, &v12);
  uint64_t v15 = v12;
  uint64_t v5 = *(void *)(a2 + 560);
  uint64_t v17 = 0LL;
  id v6 = operator new(0x30uLL);
  void *v6 = &off_100169BA8;
  v6[1] = &v13;
  v6[2] = &v15;
  v6[3] = a2;
  v6[4] = &v14;
  v6[5] = a1;
  uint64_t v17 = v6;
  sub_10006B890(v5, (uint64_t)v16);
  id v7 = v17;
  if (v17 == v16)
  {
    uint64_t v8 = 4LL;
    id v7 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  uint64_t v10 = v14;
  uint64_t v9 = v15;
  uint64_t v15 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16LL))(v9);
  }
  return v10;
}

void sub_10002EB18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v19 = a17;
  if (a17 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 16LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002EBC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    int v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    int v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_100026A1C(&v24, (uint64_t *)&v26);
    sub_1001171D0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      uint64_t v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  uint64_t v17 = v25;
  if (v25)
  {
    id v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_10002ED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000114F0((uint64_t)va);
  sub_1000114F0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002ED6C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = off_100169490;
  *(void *)(a1 + 40) = off_1001694D8;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = off_100169520;
  *(void *)(a1 + 56) = &off_1001697A8;
  *(void *)a1 = off_100169370;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_100169800;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = off_1001698F0;
  *(void *)(a1 + 16) = off_100169400;
  *(void *)(a1 + 24) = off_100169948;
  *(_BYTE *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0LL;
  sub_10002F040((uint64_t *)(a1 + 152), (uint64_t *)&off_1001692F0, a2);
  *(void *)a1 = off_100168EB8;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_100168F00;
  *(void *)(a1 + 16) = off_100168F48;
  *(void *)(a1 + 24) = off_100168F90;
  *(void *)(a1 + 32) = off_100168FD8;
  *(void *)(a1 + 40) = off_100169020;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = off_100169068;
  *(void *)(a1 + 56) = off_1001690C8;
  *(void *)(a1 + 120) = off_100169138;
  *(void *)(a1 + sub_1000114F0(v1 + 152) = off_1001691A8;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 560) + 40LL))(*(void *)(a2 + 560));
  uint64_t v5 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  uint64_t v6 = *(void *)(a1 + *(void *)(v5 - 112) + 8);
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 56) = v6 - sub_10002EA04(a1, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32LL))(a2);
  uint64_t v8 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 16) = v7;
  uint64_t v9 = a1 + *(void *)(v8 - 112);
  uint64_t v10 = *(void *)(a2 + 64);
  if (!*(_BYTE *)(v9 + 32)) {
    *(_BYTE *)(v9 + 32) = 1;
  }
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = a1 + *(void *)(*(void *)a1 - 112LL);
  *(void *)(v11 + 40) = 0x200000000000000LL;
  *(_BYTE *)(v11 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 568);
  uint64_t v25 = *(void *)(a2 + 560);
  __int128 v26 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  sub_10002EBC0(&v25, a1 + *(void *)(*(void *)a1 - 104LL));
  if (v12)
  {
    uint64_t v15 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v17 = *(void *)(a2 + 560);
  uint64_t v18 = *(void *)(v17 + 96);
  unint64_t v19 = *(std::__shared_weak_count **)(v17 + 104);
  uint64_t v25 = v18;
  __int128 v26 = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  if (v18) {
    sub_10010F40C(v18, (char *)(a1 + *(void *)(*(void *)a1 - 104LL)));
  }
  if (v19)
  {
    unint64_t v22 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  return a1;
}

void sub_10002EFE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 120) = v12;
  *(void *)(v9 + 24) = v12 + 88;
  sub_100026A94(v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002F040(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100168D68;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - sub_100026A94((const void **)(v10 + 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - sub_100026A94((const void **)(v10 + 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v10 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(*(void *)(a3 + 560) + 136LL));
  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, v10);
  uint64_t v9 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v7 = v9;
  }

  a1[1] = (uint64_t)v7;
  uint64_t v9 = 0LL;
  sub_100026A94((const void **)&v9);
  sub_100026EE4((const void **)&v10);
  return a1;
}

void sub_10002F10C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10002F154(uint64_t a1)
{
  *(void *)(a1 + sub_1000114F0(v1 + 152) = off_100169A38;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = off_100169A90;
  sub_100026A94((const void **)(a1 + 176));
  sub_100026A94((const void **)(a1 + 168));
  sub_100026A94((const void **)(a1 + 160));
  *(void *)(a1 + 120) = off_1001698F0;
  *(void *)(a1 + 24) = off_100169948;
  sub_100026A94((const void **)(a1 + 144));
  return a1;
}

void sub_10002F1BC(uint64_t a1)
{
  *(void *)(a1 + sub_1000114F0(v1 + 152) = off_100169A38;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = off_100169A90;
  sub_100026A94((const void **)(a1 + 176));
  sub_100026A94((const void **)(a1 + 168));
  sub_100026A94((const void **)(a1 + 160));
  *(void *)(a1 + 120) = off_1001698F0;
  *(void *)(a1 + 24) = off_100169948;
  sub_100026A94((const void **)(a1 + 144));
  operator delete((void *)a1);
}

const void **sub_10002F224@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  v10[2] = @"Format Description";
  v10[3] = @"Sparse bundle image";
  sub_1000258AC(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_1000114C0(&v9);
  sub_100025BB0(a1 + *(void *)(*(void *)a1 - 120LL), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  sub_1000114C0(&v9);
  sub_10002631C((void *)(a1 + *(void *)(*(void *)a1 - 128LL)), &v9);
  v10[8] = @"Identity Info";
  v10[9] = v9;
  uint64_t v9 = 0LL;
  sub_1000114C0(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5LL;
  sub_1000F6F08(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100026DC0(&v8);
  for (uint64_t i = 9LL; i != -1; i -= 2LL)
    uint64_t result = sub_100026D90((const void **)&v10[i]);
  return result;
}

void sub_10002F39C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 72LL; i != -8; i -= 16LL)
    sub_100026D90((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10002F3E4()
{
  return @"UDSB";
}

const void **sub_10002F3F0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 19) = off_100169A38;
  *((void *)v1 + 6) = off_100169A90;
  sub_100026A94((const void **)v1 + 22);
  sub_100026A94((const void **)v1 + 21);
  sub_100026A94((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001698F0;
  *((void *)v1 + 3) = off_100169948;
  return sub_100026A94((const void **)v1 + 18);
}

void sub_10002F458(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 19) = off_100169A38;
  *((void *)v1 + 6) = off_100169A90;
  sub_100026A94((const void **)v1 + 22);
  sub_100026A94((const void **)v1 + 21);
  sub_100026A94((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001698F0;
  *((void *)v1 + 3) = off_100169948;
  sub_100026A94((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_10002F4C8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 19) = off_100169A38;
  *((void *)v1 + 6) = off_100169A90;
  sub_100026A94((const void **)v1 + 22);
  sub_100026A94((const void **)v1 + 21);
  sub_100026A94((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001698F0;
  *((void *)v1 + 3) = off_100169948;
  return sub_100026A94((const void **)v1 + 18);
}

void sub_10002F530(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 19) = off_100169A38;
  *((void *)v1 + 6) = off_100169A90;
  sub_100026A94((const void **)v1 + 22);
  sub_100026A94((const void **)v1 + 21);
  sub_100026A94((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001698F0;
  *((void *)v1 + 3) = off_100169948;
  sub_100026A94((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_10002F5A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10002F224((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_10002F5B0()
{
  return @"UDSB";
}

__n128 sub_10002F5C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &off_100169BA8;
  *(_OWORD *)(v2 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_10002F60C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100169BA8;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  return result;
}

uint64_t sub_10002F63C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (**(void **)(result + 8) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)&v14);
    sub_100004E4C(&v14, (uint64_t)"Bands folder contains an out of range band (", 44LL);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    sub_100004E4C(&v14, v12, v13);
    sub_100004E4C(&v14, (uint64_t)")", 1LL);
    sub_10001161C((uint64_t)exception, (uint64_t)&v14, 0x16u);
  }

  uint64_t v4 = result;
  uint64_t v5 = *(void **)(result + 16);
  if (*v5)
  {
    sub_1001146CC((uint64_t)&v14, *(void *)(result + 24) + 24LL, *a3, v5);
    **(void **)(v4 + 32) += sub_10008F9DC(v15) << 12;
    uint64_t v6 = v16;
    uint64_t v16 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    __n128 result = v15;
    uint64_t v15 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(result + 24);
    if ((unint64_t)(*(void *)(*(void *)(v7 + 560) + 120LL) + *(void *)(*(void *)(v7 + 560) + 128LL) - 1LL)
       / *(void *)(*(void *)(v7 + 560) + 128LL)
       - 1 == v3)
      uint64_t v8 = *(void *)(*(void *)(result + 40) + *(void *)(**(void **)(result + 40) - 112LL) + 8LL)
         - *(void *)(v7 + 64) * v3;
    else {
      uint64_t v8 = *(void *)(v7 + 64);
    }
    **(void **)(result + 32) += v8;
  }

  return result;
}

void sub_10002F7D4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

void sub_10002F95C()
{
}

uint64_t sub_10002F96C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10002F9A8()
{
}

uint64_t sub_10002F9B4@<X0>(uint64_t a1@<X8>)
{
  return std::ostream::~ostream(v1, a1 + 8);
}

void sub_10002FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002FAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002FC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000300D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100030920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100030FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003112C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000311E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_60:
    *__error() = v22;
    __uint32_t v49 = 1;
    -[DIEncryptionFrontend setAllowStoringInKeychain:](self, "setAllowStoringInKeychain:", 1LL);
    goto LABEL_66;
  }

  if (v20)
  {
    if (v20 == -25300)
    {
      unint64_t v22 = *__error();
      if (!sub_1000B8654())
      {
        uint64_t v50 = sub_1000B85DC();
        __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68157954;
          __int128 v63 = 65;
          char v64 = 2080;
          uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "%.*s: No matching item found in keychain",  buf,  0x12u);
        }

        goto LABEL_60;
      }

      __int128 v60 = 0LL;
      unint64_t v23 = sub_1000B85DC();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v25 = 3LL;
      }
      else {
        uint64_t v25 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      __int128 v63 = 65;
      char v64 = 2080;
      uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      LODWORD(v57) = 18;
      __int128 v26 = (char *)_os_log_send_and_compose_impl( v25,  &v60,  0LL,  0LL,  &_mh_execute_header,  v24,  0LL,  "%.*s: No matching item found in keychain",  (int)buf,  v57);

      if (v26) {
        goto LABEL_36;
      }
      goto LABEL_60;
    }

    __int128 v35 = *__error();
    if (sub_1000B8654())
    {
      __int128 v60 = 0LL;
      __int128 v36 = sub_1000B85DC();
      __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v38 = 3LL;
      }
      else {
        uint64_t v38 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      __int128 v63 = 65;
      char v64 = 2080;
      uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      uint64_t v66 = 1024;
      LODWORD(v67) = v21;
      LODWORD(v57) = 24;
      unint64_t v39 = (char *)_os_log_send_and_compose_impl( v38,  &v60,  0LL,  0LL,  &_mh_execute_header,  v37,  0LL,  "%.*s: Keychain lookup returned %d",  (int)buf,  v57,  (_DWORD)v58);

      if (v39)
      {
        fprintf(__stderrp, "%s\n", v39);
        free(v39);
      }
    }

    else
    {
      __int128 v54 = sub_1000B85DC();
      __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68158210;
        __int128 v63 = 65;
        char v64 = 2080;
        uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
        uint64_t v66 = 1024;
        LODWORD(v67) = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "%.*s: Keychain lookup returned %d",  buf,  0x18u);
      }
    }

    *__error() = v35;
LABEL_65:
    __uint32_t v49 = 1;
    goto LABEL_66;
  }

  __int128 v27 = *__error();
  if (sub_1000B8654())
  {
    __int128 v60 = 0LL;
    unint64_t v28 = sub_1000B85DC();
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v30 = 3LL;
    }
    else {
      uint64_t v30 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    __int128 v63 = 65;
    char v64 = 2080;
    uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
    LODWORD(v57) = 18;
    unint64_t v31 = (char *)_os_log_send_and_compose_impl( v30,  &v60,  0LL,  0LL,  &_mh_execute_header,  v29,  0LL,  "%.*s: Passphrase found in keychain, unlocking the image",  (int)buf,  v57);

    if (v31)
    {
      fprintf(__stderrp, "%s\n", v31);
      free(v31);
    }
  }

  else
  {
    unint64_t v40 = sub_1000B85DC();
    unint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      __int128 v63 = 65;
      char v64 = 2080;
      uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%.*s: Passphrase found in keychain, unlocking the image",  buf,  0x12u);
    }
  }

  *__error() = v27;
  unint64_t v42 = (void *)result;
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[DIEncryptionFrontend diParams](self, "diParams"));
  unint64_t v44 = v42;
  unint64_t v59 = 0LL;
  unint64_t v45 = objc_msgSend(v43, "setPassphrase:error:", objc_msgSend(v44, "bytes"), &v59);
  int v46 = v59;

  if ((v45 & 1) != 0 || ((v47 = (uint64_t)[v46 code], v47 >= 0) ? (unint64_t v48 = v47) : (unint64_t v48 = -v47), v48 == 80))
  {
    __uint32_t v49 = 1;
  }

  else
  {
    __uint32_t v49 = 0;
    if (a4) {
      *a4 = v46;
    }
  }

LABEL_66:
  return v49;
}

void sub_100031AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100031CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_43:
    uint64_t v9 = 0;
    goto LABEL_24;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[DIEncryptionFrontend diParams](self, "diParams"));
  uint64_t v15 = [v14 hasUnlockedBackend];

  if ((v15 & 1) == 0)
  {
    if (!-[DIEncryptionFrontend allowStoringInKeychain](self, "allowStoringInKeychain")) {
      goto LABEL_3;
    }
    if (-[DIEncryptionUnlocker lookupLegacyKeychainWithXpcHandler:error:]( self,  "lookupLegacyKeychainWithXpcHandler:error:",  v6,  a4))
    {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[DIEncryptionFrontend diParams](self, "diParams"));
      __int128 v26 = [v25 hasUnlockedBackend];

      if ((v26 & 1) == 0) {
        goto LABEL_3;
      }
      goto LABEL_18;
    }

LABEL_42:
    uint64_t v13 = 0LL;
    goto LABEL_43;
  }

  *__error() = v8;
}

LABEL_18:
  uint64_t v13 = 0LL;
LABEL_9:
  uint64_t v9 = 1;
LABEL_24:

  return v9;
}

  sub_100051780((void *)(a1 + 16));
  if (*(_BYTE *)(a1 + 69)) {
    sub_100073A68(*(void *)(a1 + 40), *(void *)(a1 + 32));
  }
  sub_10003D890(*(void *)(a1 + 40) + 184LL, *(void *)(a1 + 32));
  sub_100075D70(a1 + 72);
  sub_1000114F0(a1 + 16);
  return a1;
}

    sub_10002D554(&v81, (uint64_t *)v87);
    uint64_t v24 = *(void **)(*(void *)(a2 + 16) + v20);
    if (a3)
    {
      sub_10002B7D4((uint64_t)v91, (uint64_t)&v76);
      sub_10002B3A4((uint64_t)v91, (uint64_t)v73);
      uint64_t v4 = sub_1000128C0(v24);
      uint64_t v25 = v75;
      if (v75)
      {
        __int128 v26 = (unint64_t *)&v75->__shared_owners_;
        do
          __int128 v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }

      unint64_t v28 = v74;
      if (v74)
      {
        __int128 v29 = (unint64_t *)&v74->__shared_owners_;
        do
          uint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }

      unint64_t v31 = v78;
      if (v78)
      {
        __int128 v32 = (unint64_t *)&v78->__shared_owners_;
        do
          unint64_t v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }

      unint64_t v34 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1))
      {
        __int128 v35 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
        do
          __int128 v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        goto LABEL_59;
      }
    }

    else
    {
      sub_10002B7D4((uint64_t)v91, (uint64_t)&v76);
      sub_10002B3A4((uint64_t)v91, (uint64_t)v73);
      uint64_t v4 = sub_1000127FC((uint64_t)v24);
      __int128 v37 = v75;
      if (v75)
      {
        uint64_t v38 = (unint64_t *)&v75->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      unint64_t v40 = v74;
      if (v74)
      {
        unint64_t v41 = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      uint64_t v43 = v78;
      if (v78)
      {
        unint64_t v44 = (unint64_t *)&v78->__shared_owners_;
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      unint64_t v34 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1))
      {
        int v46 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
        do
          __int128 v36 = __ldaxr(v46);
        while (__stlxr(v36 - 1, v46));
LABEL_59:
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }

    unint64_t v47 = v98;
    if (v98)
    {
      unint64_t v48 = (unint64_t *)&v98->__shared_owners_;
      do
        __uint32_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    uint64_t v50 = v97;
    if (v97)
    {
      __int128 v51 = (unint64_t *)&v97->__shared_owners_;
      do
        __int128 v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }

    uint64_t v53 = v96;
    if (v96)
    {
      __int128 v54 = (unint64_t *)&v96->__shared_owners_;
      do
        __int128 v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }

    __int128 v56 = v95;
    if (v95)
    {
      char v57 = (unint64_t *)&v95->__shared_owners_;
      do
        uint64_t v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }

    unint64_t v59 = (std::__shared_weak_count *)v94[0];
    if (v94[0])
    {
      __int128 v60 = (unint64_t *)(v94[0] + 8LL);
      do
        uint64_t v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }

    char v62 = v92;
    if (v92)
    {
      __int128 v63 = (unint64_t *)&v92->__shared_owners_;
      do
        char v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }

    if (v89 && &v90 != __p) {
      operator delete(__p);
    }
    sub_100014E54((uint64_t)v87);
    if (v4 == v13)
    {
      uint64_t v4 = v13;
LABEL_96:
      uint64_t v12 = 0LL;
      v10 -= v13;
      v7 += v13;
      ++v11;
      uint64_t v65 = 1;
      goto LABEL_98;
    }

    uint64_t v65 = 0;
LABEL_98:
    sub_100074A00((uint64_t)&v79);
    uint64_t v66 = v82;
    if (v82)
    {
      __int128 v67 = (unint64_t *)&v82->__shared_owners_;
      do
        __int128 v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }

    if ((v65 & 1) == 0) {
      return v4;
    }
  }

  return a4[2];
}

void sub_100031F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000323EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000324BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003253C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032C04( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }

  if (a2 == 1)
  {
    id v17 = [objc_begin_catch(a1) reason];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v18,  v12);

    objc_end_catch();
    JUMPOUT(0x100032768LL);
  }

  _Unwind_Resume(a1);
}

void sub_100032FD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)sub_100118DDC() + 1);
  uint64_t v16 = a2;
  id v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  char v21 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v16);
  uint64_t v12 = v17;
  if (v17)
  {
    uint64_t v13 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v11;
}

void sub_1000330D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

LABEL_9:
  operator delete[](v13);
  return v19;
}

    uint64_t v5 = (void *)sub_100004870((uint64_t)exception, (uint64_t)v3, v4);
  }

  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = "Mandatory callbacks in the plugin's image struct are missing";
    uint64_t v4 = -22;
    goto LABEL_9;
  }

  return result;
}

  *a2 = v7;
  return v5;
}

    unint64_t v10 = v9;
LABEL_23:
    if (v9 != v10)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)(result + 24) + 16LL * (*(_DWORD *)(result + 44) & v9));
      id v17 = 1;
      goto LABEL_27;
    }
  }

  do
    uint64_t v5 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = atomic_load(*(unsigned int **)result);
    uint64_t v7 = atomic_load(*(unsigned int **)(result + 16));
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v8 = __ldaxr(v2);
        if (v8 != 1) {
          break;
        }
        if (!__stlxr(0, v2)) {
          goto LABEL_8;
        }
      }

      __clrex();
    }
  }

  id v17 = 0;
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 16) = v17;
  return result;
}

  *a2 = v7;
  return v5;
}

    __n128 result = sub_10009C848(a1, a2, a3);
  }

  while (!(_DWORD)result);
  return result;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

void sub_1000331D8(_Unwind_Exception *a1)
{
}

void sub_1000333B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  sub_1000114F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000337D0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    __int128 v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }

  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    __int128 v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(_BYTE *)(a1 + 5sub_1000114F0(v1 + 64) = 1;
  }

  return a1;
}

void sub_100033A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100033B20()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_100169C38;
  return result;
}

void sub_100033B44(uint64_t a1, void *a2)
{
  *a2 = &off_100169C38;
}

void sub_100033B5C(uint64_t a1, void **a2)
{
}

uint64_t sub_100033B64(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100033BA0()
{
  return &off_100169C98;
}

int64_t sub_100033BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t result = sub_1000127FC(*(void *)(a1 + 16));
  v11[0] = result;
  v11[1] = v6;
  if (result <= 0)
  {
    else {
      uint64_t v10 = -(int)result;
    }
    return -v10;
  }

  else
  {
    unint64_t v7 = *(void *)(a2 + 144);
    unint64_t v8 = (*(void *)(a3 + 144) - v7) & ~((uint64_t)(*(void *)(a3 + 144) - v7) >> 63);
    if (v7 > v6 || v8 < result) {
      return sub_100118F5C(a2, a3, v8, v11);
    }
  }

  return result;
}

int64_t sub_100033C24(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  if (!*(_BYTE *)(a1 + 56))
  {
    if (!a2[6]
      || (uint64_t v7 = *(void *)(a4 + 144) - *(void *)(a3 + 144),
          *(void *)(a4 + 72) - *(void *)(a3 + 72) >= (v7 & (unint64_t)~(v7 >> 63)) + a2[8]))
    {
      sub_1000127FC(a2[2]);
    }
  }

  unint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  v166 = *(void **)a3;
  v167 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  *(_OWORD *)v168 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v168[9] = *(_OWORD *)(a3 + 25);
  uint64_t v169 = *(void *)(a3 + 48);
  __int128 v170 = *(_OWORD *)(a3 + 56);
  __int128 v171 = *(_OWORD *)(a3 + 72);
  __int128 v172 = *(_OWORD *)(a3 + 88);
  char v173 = *(_BYTE *)(a3 + 104);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v174 = *(void *)(a3 + 112);
  v175 = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v16 = *(void *)(a3 + 144);
  uint64_t v14 = a3 + 144;
  uint64_t v15 = v16;
  __int128 v176 = *(_OWORD *)(v14 - 16);
  uint64_t v177 = v16;
  char v178 = *(_BYTE *)(v14 + 8);
  if (((*(void *)(v4 + 144) - v16) & (unint64_t)~((*(void *)(v4 + 144) - v16) >> 63)) + v6[8] <= *(void *)&v168[16])
  {
    int64_t v17 = sub_100033BAC((uint64_t)v6, (uint64_t)&v166, v4);
    uint64_t v15 = v18;
    sub_10002C354((uint64_t)&v166, v17);
    if (v17 < 0)
    {
      int64_t v19 = v17;
      goto LABEL_188;
    }
  }

  else
  {
    int64_t v17 = 0LL;
  }

  int64_t v19 = v17;
  uint64_t v135 = v4;
  v137 = v6;
  do
  {
    uint64_t v20 = *(void *)(v4 + 144);
    if (v19 == ((v20 - *(void *)v14) & ~((v20 - *(void *)v14) >> 63))) {
      break;
    }
    int64_t v161 = v17;
    uint64_t v162 = v15;
    char v21 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v163 = *(void *)(a1 + 64);
    v164 = v21;
    int64_t v138 = v19;
    if (v21)
    {
      unint64_t v22 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      uint64_t v20 = *(void *)(v4 + 144);
    }

    uint64_t v25 = v6[6];
    uint64_t v24 = v6[7];
    uint64_t v165 = v25;
    __int128 v27 = (char *)v6[3];
    __int128 v26 = (char *)v6[4];
    uint64_t v28 = v177;
    unint64_t v29 = (unint64_t)(v26 - v27 - 8) >> 3;
    if (v26 == v27) {
      unint64_t v30 = 0LL;
    }
    else {
      unint64_t v30 = v29 + 1;
    }
    unint64_t v31 = (v20 - v177) & ~((v20 - v177) >> 63);
    unint64_t v32 = v24 * v25;
    if (v32 >= v31) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = v32;
    }
    __p = v203;
    __int128 v202 = xmmword_1001380F0;
    if (v30 < 6)
    {
      if (v27 == v26)
      {
        unint64_t v30 = 0LL;
      }

      else
      {
        unint64_t v45 = v29 + 1;
        int v46 = (unint64_t *)&v21->__shared_owners_;
        unint64_t v47 = v203;
        do
        {
          uint64_t v48 = *(void *)v27;
          if (v21)
          {
            do
              unint64_t v49 = __ldxr(v46);
            while (__stxr(v49 + 1, v46));
          }

          void *v47 = v48;
          v47[1] = v21;
          v27 += 8;
          v47[2] = v25;
          v47 += 3;
          --v45;
        }

        while (v45);
      }
    }

    else
    {
      uint64_t v134 = v177;
      if (v30 >= 0x555555555555556LL) {
        sub_100014AD4("get_next_capacity, allocator's max size reached");
      }
      uint64_t v34 = v33;
      uint64_t v35 = v14;
      __int128 v36 = operator new(24 * v30);
      __int128 v37 = __p;
      if (__p)
      {
        uint64_t v38 = v202;
        if ((void)v202)
        {
          unint64_t v39 = __p;
          do
          {
            --v38;
            unint64_t v39 = (void *)(sub_1000114F0((uint64_t)v39) + 24);
          }

          while (v38);
        }

        *(void *)&__int128 v202 = 0LL;
        if (v203 != v37) {
          operator delete(v37);
        }
      }

      *((void *)&v202 + 1) = v30;
      __p = v36;
      *(void *)&__int128 v202 = 0LL;
      if (v27 == v26)
      {
        uint64_t v44 = 0LL;
        unint64_t v41 = (char *)v36;
        uint64_t v14 = v35;
        unint64_t v6 = v137;
        uint64_t v33 = v34;
        uint64_t v28 = v134;
      }

      else
      {
        unint64_t v40 = (unint64_t *)&v21->__shared_owners_;
        unint64_t v41 = (char *)v36;
        uint64_t v14 = v35;
        unint64_t v6 = v137;
        uint64_t v33 = v34;
        uint64_t v28 = v134;
        do
        {
          uint64_t v42 = *(void *)v27;
          if (v21)
          {
            do
              unint64_t v43 = __ldxr(v40);
            while (__stxr(v43 + 1, v40));
          }

          *(void *)unint64_t v41 = v42;
          *((void *)v41 + 1) = v21;
          *((void *)v41 + 2) = v25;
          v27 += 8;
          v41 += 24;
        }

        while (v27 != v26);
        uint64_t v44 = v202;
      }

      unint64_t v30 = v44 - 0x5555555555555555LL * ((v41 - (_BYTE *)v36) >> 3);
    }

    uint64_t v4 = v135;
    int64_t v19 = v138;
    *(void *)&__int128 v202 = v30;
    v204 = v206;
    __int128 v205 = xmmword_1001380F0;
    sub_100014EAC((uint64_t)&v204, v30);
    v181 = __p;
    __dst = (char *)__p + 24 * v202;
    char v152 = (unint64_t *)v204;
    v186[0] = (unint64_t *)((char *)v204 + 8 * v205);
    sub_10002B504((uint64_t)v207, (uint64_t *)&v181, (uint64_t *)&__dst, &v152, v186, v28, v33);
    sub_10002B7D4((uint64_t)v207, (uint64_t)&v181);
    sub_10002B3A4((uint64_t)v207, (uint64_t)&__dst);
    int64_t v17 = sub_100033BAC((uint64_t)v6, (uint64_t)&v181, (uint64_t)&__dst);
    uint64_t v15 = v50;
    __int128 v51 = v197;
    if (v197)
    {
      __int128 v52 = (unint64_t *)&v197->__shared_owners_;
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

    __int128 v54 = v189;
    if (v189)
    {
      __int128 v55 = (unint64_t *)&v189->__shared_owners_;
      do
        unint64_t v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }

    char v57 = v183;
    if (v183)
    {
      uint64_t v58 = (unint64_t *)&v183->__shared_owners_;
      do
        unint64_t v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }

    __int128 v60 = v182;
    if (v182)
    {
      uint64_t v61 = (unint64_t *)&v182->__shared_owners_;
      do
        unint64_t v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }

    if ((v17 & 0x8000000080000000LL) == 0x8000000080000000LL) {
      goto LABEL_147;
    }
    sub_10002B7D4((uint64_t)v207, (uint64_t)&__src);
    sub_10002B3A4((uint64_t)v207, (uint64_t)&v152);
    __int128 v63 = v166;
    unint64_t v139 = v166;
    char v140 = v167;
    if (v167)
    {
      char v64 = (unint64_t *)&v167->__shared_owners_;
      do
        unint64_t v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }

    v141[0] = *(_OWORD *)v168;
    *(_OWORD *)((char *)v141 + 9) = *(_OWORD *)&v168[9];
    uint64_t v142 = v169;
    __int128 v143 = v170;
    __int128 v144 = v171;
    __int128 v145 = v172;
    char v146 = v173;
    uint64_t v147 = v174;
    uint64_t v148 = v175;
    if (v175)
    {
      uint64_t v66 = (unint64_t *)&v175->__shared_owners_;
      do
        unint64_t v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }

    __int128 v149 = v176;
    uint64_t v150 = v177;
    char v151 = v178;
    __dst = v63;
    v189 = v140;
    if (v140)
    {
      __int128 v68 = (unint64_t *)&v140->__shared_owners_;
      do
        unint64_t v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }

    char v195 = v146;
    uint64_t v191 = v142;
    uint64_t v196 = v147;
    *(_OWORD *)v190 = v141[0];
    *(_OWORD *)&v190[9] = *(_OWORD *)((char *)v141 + 9);
    __int128 v192 = v143;
    __int128 v193 = v144;
    __int128 v194 = v145;
    v197 = v148;
    if (v148)
    {
      uint64_t v70 = (unint64_t *)&v148->__shared_owners_;
      do
        unint64_t v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }

    unint64_t v72 = 0LL;
    __int128 v198 = v149;
    uint64_t v199 = v150;
    char v200 = 0;
    while (!sub_10002B1FC((uint64_t)&__src, (uint64_t)&v152))
    {
      sub_100016640((uint64_t)v158);
      __int128 v73 = (std::__shared_weak_count *)v159;
      v186[0] = (unint64_t *)v158[7];
      v186[1] = v159;
      if (v159)
      {
        __int128 v74 = v159 + 1;
        do
          unint64_t v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }

      __int128 v187 = v160;
      if (*((void *)&v160 + 1))
      {
        unint64_t v76 = *(void *)&v190[16];
        if (v157 < *(void *)&v190[16]) {
          unint64_t v76 = v157;
        }
        if (v76 >= *((void *)&v187 + 1)) {
          int64_t v77 = *((void *)&v187 + 1);
        }
        else {
          int64_t v77 = v76;
        }
        memmove(__dst, __src, v77);
        if (v77 <= 0)
        {
          *(void *)&__int128 v179 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
          *((void *)&v179 + 1) = 97LL;
          int v180 = 16;
          sub_100036C3C(&v181, &v179);
          sub_100004E4C(&v184, (uint64_t)"IO error with sg: ", 18LL);
          sub_100116CB8(&v184, &__src);
          sub_100004E4C(&v184, (uint64_t)" dest ", 6LL);
          sub_100116CB8(&v184, &__dst);
          sub_100004E4C(&v184, (uint64_t)" returned status ", 17LL);
          std::ostream::operator<<(&v184, v77);
          std::ostream::~ostream(&v184, off_10016A110);
          sub_100036DA0((uint64_t)&v181);
          std::ios::~ios(&v185);
          int v78 = 1;
          if (v73)
          {
LABEL_97:
            __int128 v79 = (unint64_t *)&v73->__shared_owners_;
            do
              unint64_t v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }

        else
        {
          sub_10002C354((uint64_t)&__src, v77);
          sub_10002C52C((uint64_t)&__dst, v77);
          int v78 = 0;
          v72 += v77;
          if (v73) {
            goto LABEL_97;
          }
        }
      }

      else
      {
        sub_10002C704((uint64_t)&__src);
        int v78 = 2;
        if (v73) {
          goto LABEL_97;
        }
      }

      if ((v78 | 2) != 2) {
        goto LABEL_106;
      }
    }

    sub_10002C52C((uint64_t)&v139, v72);
LABEL_106:
    unint64_t v81 = v197;
    if (v197)
    {
      unint64_t v82 = (unint64_t *)&v197->__shared_owners_;
      do
        unint64_t v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }

    unint64_t v84 = v189;
    if (v189)
    {
      uint64_t v85 = (unint64_t *)&v189->__shared_owners_;
      do
        unint64_t v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }

    uint64_t v87 = v148;
    if (v148)
    {
      unint64_t v88 = (unint64_t *)&v148->__shared_owners_;
      do
        unint64_t v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }

    uint64_t v90 = v140;
    if (v140)
    {
      uint64_t v91 = (unint64_t *)&v140->__shared_owners_;
      do
        unint64_t v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }

    uint64_t v93 = v154;
    if (v154)
    {
      int v94 = (unint64_t *)&v154->__shared_owners_;
      do
        unint64_t v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }

    uint64_t v96 = v153;
    if (v153)
    {
      __int128 v97 = (unint64_t *)&v153->__shared_owners_;
      do
        unint64_t v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }

    __int128 v99 = (std::__shared_weak_count *)v159;
    if (v159)
    {
      char v100 = v159 + 1;
      do
        unint64_t v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }

    unint64_t v102 = v156;
    if (v156)
    {
      __int128 v103 = (unint64_t *)&v156->__shared_owners_;
      do
        unint64_t v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }

    sub_10002C354((uint64_t)&v166, v17);
    sub_10002B060(&v170);
    int64_t v19 = v17 + v138;
LABEL_147:
    char v105 = v213;
    if (v213)
    {
      uint64_t v106 = (unint64_t *)&v213->__shared_owners_;
      do
        unint64_t v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }

    size_t v108 = v212;
    if (v212)
    {
      uint64_t v109 = (unint64_t *)&v212->__shared_owners_;
      do
        unint64_t v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }

    __int128 v111 = v211;
    if (v211)
    {
      __int128 v112 = (unint64_t *)&v211->__shared_owners_;
      do
        unint64_t v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }

    uint64_t v114 = v210;
    if (v210)
    {
      char v115 = (unint64_t *)&v210->__shared_owners_;
      do
        unint64_t v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }

    uint64_t v117 = v209;
    if (v209)
    {
      char v118 = (unint64_t *)&v209->__shared_owners_;
      do
        unint64_t v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }

    unint64_t v120 = v208;
    if (v208)
    {
      int v121 = (unint64_t *)&v208->__shared_owners_;
      do
        unint64_t v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }

    if (*((void *)&v205 + 1) && v206 != v204) {
      operator delete(v204);
    }
    sub_100014E54((uint64_t)&__p);
    __int128 v123 = v164;
    if (v164)
    {
      __int128 v124 = (unint64_t *)&v164->__shared_owners_;
      do
        unint64_t v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }

    unint64_t v6 = v137;
  }

  while ((v17 & 0x8000000080000000LL) != 0x8000000080000000LL);
LABEL_188:
  char v126 = v175;
  if (v175)
  {
    uint64_t v127 = (unint64_t *)&v175->__shared_owners_;
    do
      unint64_t v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }

  __int128 v129 = v167;
  if (v167)
  {
    uint64_t v130 = (unint64_t *)&v167->__shared_owners_;
    do
      unint64_t v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }

  if (v17 < 0) {
    int v132 = v17;
  }
  else {
    int v132 = 0;
  }
  if (v132 >= 0) {
    return v19;
  }
  else {
    return v132;
  }
}

void sub_1000349B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t sub_100034AF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
}

  ;
}

void *sub_100034B08(void *a1)
{
  *a1 = off_100169CB8;
  sub_1000114F0((uint64_t)(a1 + 8));
  return a1;
}

void sub_100034B38(void *a1)
{
  *a1 = off_100169CB8;
  sub_1000114F0((uint64_t)(a1 + 8));
  operator delete(a1);
}

uint64_t sub_100034B68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
}

uint64_t sub_100034B78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
}

uint64_t sub_100034B88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
}

void sub_100034B98()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Image info is not supported for the given image type", 0x16u);
}

uint64_t sub_100034BCC()
{
  return 4294967218LL;
}

double sub_100034BD4@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100034BE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80LL))(*(void *)(a1 + 16));
}

uint64_t sub_100034BF0()
{
  return 0LL;
}

uint64_t sub_100034BF8()
{
  return 0LL;
}

uint64_t sub_100034C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 128LL))( *(void *)(a1 + 16),  a2,  *(void *)(a3 + 16));
}

void *sub_100034C18(uint64_t a1)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136LL))(*(void *)(a1 + 16));
  if (!v5) {
    return 0LL;
  }
  uint64_t v2 = operator new(0x48uLL);
  sub_10003531C(v2, a1, &v5);
  uint64_t v3 = v5;
  uint64_t v5 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }
  return v2;
}

void sub_100034C9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 40LL))(a10);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_100034CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v54 = xmmword_1001387B0;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&__int128 v42 = *(void *)a3;
  *((void *)&v42 + 1) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  v43[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v44 = *(void *)(a3 + 48);
  __int128 v45 = *(_OWORD *)(a3 + 56);
  __int128 v46 = *(_OWORD *)(a3 + 72);
  __int128 v47 = *(_OWORD *)(a3 + 88);
  char v48 = *(_BYTE *)(a3 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v49 = *(void *)(a3 + 112);
  uint64_t v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v51 = *(_OWORD *)(a3 + 128);
  uint64_t v52 = *(void *)(a3 + 144);
  char v53 = *(_BYTE *)(a3 + 152);
  uint64_t v10 = *(void *)(a4 + 8);
  *(void *)&__int128 v30 = *(void *)a4;
  *((void *)&v30 + 1) = v10;
  if (v10)
  {
    uint64_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v31[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v32 = *(void *)(a4 + 48);
  __int128 v33 = *(_OWORD *)(a4 + 56);
  __int128 v34 = *(_OWORD *)(a4 + 72);
  __int128 v35 = *(_OWORD *)(a4 + 88);
  char v36 = *(_BYTE *)(a4 + 104);
  unint64_t v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v37 = *(void *)(a4 + 112);
  uint64_t v38 = v13;
  if (v13)
  {
    uint64_t v14 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  __int128 v39 = *(_OWORD *)(a4 + 128);
  uint64_t v40 = *(void *)(a4 + 144);
  char v41 = *(_BYTE *)(a4 + 152);
  unint64_t v16 = sub_10003588C((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  int64_t v17 = v38;
  if (v38)
  {
    uint64_t v18 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    char v21 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  unint64_t v23 = v50;
  if (v50)
  {
    uint64_t v24 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  __int128 v26 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    __int128 v27 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v16;
}

void sub_100034F4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100034F78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5 = sub_10002B3A4((uint64_t)v48, (uint64_t)v38);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(void *)a1 + 144LL))( a1,  a2,  v41,  v38,  v5);
  uint64_t v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v39;
  if (v39)
  {
    uint64_t v11 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unint64_t v13 = v43;
  if (v43)
  {
    uint64_t v14 = (unint64_t *)&v43->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v42;
  if (v42)
  {
    int64_t v17 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = v54;
  if (v54)
  {
    uint64_t v20 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v53;
  if (v53)
  {
    unint64_t v23 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = v52;
  if (v52)
  {
    __int128 v26 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  unint64_t v28 = v51;
  if (v51)
  {
    uint64_t v29 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  unint64_t v31 = v50;
  if (v50)
  {
    uint64_t v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  __int128 v34 = v49;
  if (v49)
  {
    __int128 v35 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (v46 && &v47 != __p) {
    operator delete(__p);
  }
  sub_100014E54((uint64_t)v44);
  return v6;
}

void sub_100035288( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t sub_1000352D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  return sub_1000368E8((uint64_t)&v4, a3);
}

uint64_t sub_100035300(uint64_t a1, uint64_t a2)
{
  return sub_100012650(*(void **)(a2 + 16));
}

uint64_t sub_10003530C(uint64_t a1, uint64_t a2)
{
  return sub_100013A08(*(void **)(a2 + 16));
}

void *sub_10003531C(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = off_100169DB8;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0LL;
  a1[3] = 0LL;
  double v5 = a1 + 3;
  a1[2] = v4;
  a1[4] = 0LL;
  a1[5] = 0LL;
  unint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  unint64_t v8 = v6 + 1;
  a1[7] = v6 + 1;
  a1[8] = v7;
  unint64_t v9 = v7 + v6;
  a1[6] = v9 / (v6 + 1);
  if (v6 < v9)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = a1 + 5;
    unsigned int v12 = 1;
    do
    {
      size_t v13 = a1[6];
      uint64_t v14 = operator new[](v13);
      bzero(v14, v13);
      if ((unint64_t)v10 >= *v11)
      {
        uint64_t v15 = ((uint64_t)v10 - *v5) >> 3;
        uint64_t v16 = *v11 - *v5;
        uint64_t v17 = v16 >> 2;
        else {
          unint64_t v18 = v17;
        }
        v23[4] = a1 + 5;
        if (v18) {
          unint64_t v19 = (char *)sub_10001848C((uint64_t)(a1 + 5), v18);
        }
        else {
          unint64_t v19 = 0LL;
        }
        uint64_t v20 = &v19[8 * v15];
        v23[0] = v19;
        v23[1] = v20;
        v23[3] = &v19[8 * v18];
        *(void *)uint64_t v20 = v14;
        v23[2] = v20 + 8;
        sub_100035600(v5, v23);
        uint64_t v10 = (void *)a1[4];
        sub_100035780((uint64_t)v23);
        unint64_t v8 = a1[7];
      }

      else
      {
        *v10++ = v14;
        a1[4] = v10;
      }

      a1[4] = v10;
    }

    while (v8 > v12++);
  }

  return a1;
}

void sub_100035484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40LL))(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000354D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 144LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t sub_1000354F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 152LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t sub_100035510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 184LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t sub_10003552C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 176LL))( *(void *)(a1 + 8),  a1,  a2);
}

uint64_t sub_100035544(uint64_t a1)
{
  *(void *)a1 = off_100169DB8;
  uint64_t v4 = (void **)(a1 + 24);
  sub_100035804(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  return a1;
}

void sub_1000355A0(char *a1)
{
  *(void *)a1 = off_100169DB8;
  uint64_t v3 = (void **)(a1 + 24);
  sub_100035804(&v3);
  uint64_t v2 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  operator delete(a1);
}

uint64_t sub_100035600(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100035674((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100035674(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0LL;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8LL;
      uint64_t v8 = v9;
    }

    while (a3 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_100035708((uint64_t)v13);
  return v11;
}

uint64_t sub_100035708(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10003573C(a1);
  }
  return a1;
}

void sub_10003573C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0LL;
    if (v3) {
      operator delete[](v3);
    }
    ++v1;
  }

uint64_t sub_100035780(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000357B4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void **)(i - 8);
    *(void *)(i - std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    if (v5) {
      operator delete[](v5);
    }
  }

void sub_100035804(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100035844(v2);
    operator delete(**a1);
  }

void sub_100035844(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  while (v3 != v2)
  {
    uint64_t v5 = (void *)*--v3;
    uint64_t v4 = v5;
    *uint64_t v3 = 0LL;
    if (v5) {
      operator delete[](v4);
    }
  }

  a1[1] = v2;
}

unint64_t sub_10003588C(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  unint64_t v15 = sub_100035AA8(a1, &v40, (uint64_t)&v29, a4, 0);
  __int128 v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    uint64_t v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    unint64_t v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int128 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_100035A7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

unint64_t sub_100035AA8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v8 = 0LL;
  unint64_t v9 = *(void *)(a3 + 144);
  v37[0] = 0;
  v37[528] = 0;
  while (!sub_10002B1FC((uint64_t)a2, a3))
  {
    if (a2[18] >= v9 || v8 >= a4) {
      break;
    }
    if (sub_1000B866C())
    {
      *(void *)&__int128 v35 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((void *)&v35 + 1) = 142LL;
      int v36 = 2;
      sub_100035DF8(v30, &v35);
      sub_100004E4C(&v33, (uint64_t)"sg: ", 4LL);
      sub_100116CB8(&v33, a2);
      std::ostream::~ostream(&v33, off_100169EF0);
      sub_10003602C((uint64_t)v30);
      std::ios::~ios(&v34);
    }

    v30[0] = 0LL;
    v30[1] = v9;
    char v31 = 2;
    sub_100072C74(a2, (uint64_t)v30, (uint64_t)&v35);
    uint64_t v11 = *(void *)(a1 + 8);
    __int128 v12 = *(uint64_t (**)(void *, void, __int128 *))a1;
    __int128 v13 = (void *)(*(void *)(a1 + 16) + (v11 >> 1));
    if ((v11 & 1) != 0) {
      __int128 v12 = *(uint64_t (**)(void *, void, __int128 *))(*v13 + v12);
    }
    int64_t v14 = v12(v13, *(void *)(a1 + 24), &v35);
    unint64_t v16 = v14;
    BOOL v17 = v14 >= 0 || (_DWORD)v14 == 0;
    char v18 = v17;
    if (v17)
    {
      uint64_t v19 = v15;
      if (sub_10002D4E0((uint64_t)a2, a3, v15, v14))
      {
        sub_10002D61C((uint64_t)v28, (uint64_t)a2);
        sub_10002D4A4((uint64_t)v28, a3, v19, v16, a4, (uint64_t)v30);
        sub_100035EE0((uint64_t)v37, (uint64_t)v30);
        sub_10002D4FC((uint64_t)v30);
        sub_1000114F0((uint64_t)&v29);
        sub_1000114F0((uint64_t)v28);
        sub_10002B7D4((uint64_t)v37, (uint64_t)v30);
        sub_100035F24((uint64_t)a2, (uint64_t)v30);
        sub_1000114F0((uint64_t)v32);
        sub_1000114F0((uint64_t)v30);
        sub_10002B3A4((uint64_t)v37, (uint64_t)v30);
        sub_100035F24(a3, (uint64_t)v30);
        sub_1000114F0((uint64_t)v32);
        sub_1000114F0((uint64_t)v30);
      }

      if ((a5 & 1) != 0) {
        sub_10002C354((uint64_t)a2, v16);
      }
      else {
        sub_10002C52C((uint64_t)a2, v16);
      }
      v8 += v16;
    }

    else
    {
      else {
        uint64_t v23 = -(int)v14;
      }
      unint64_t v25 = -v23;
    }

    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      unint64_t v21 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    if ((v18 & 1) == 0) {
      goto LABEL_37;
    }
  }

  unint64_t v25 = v8;
LABEL_37:
  sub_10002D8BC((uint64_t)v37);
  return v25;
}

void sub_100035D84(_Unwind_Exception *a1)
{
}

void *sub_100035DF8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100035FB0((uint64_t)a1, a2);
  *a1 = off_100169E28;
  a1[45] = &off_100169F28;
  a1[46] = &off_100169F50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100169E28;
  a1[45] = off_100169EB0;
  a1[46] = off_100169ED8;
  return a1;
}

void sub_100035E7C(_Unwind_Exception *a1)
{
}

uint64_t sub_100035EA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100035EE0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_1000365D8(a1, a2);
  }

  else
  {
    sub_10002D79C(a1, a2);
    *(_BYTE *)(a1 + 52std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  }

  return a1;
}

uint64_t sub_100035F24(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + sub_1000114F0(v1 + 64) = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  sub_100014DF0(a1 + 112, (__int128 *)(a2 + 112));
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  return a1;
}

uint64_t sub_100035FB0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100169FC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100036018(_Unwind_Exception *a1)
{
}

uint64_t sub_10003602C(uint64_t a1)
{
  *(void *)a1 = off_100169FC0;
  sub_1000362A4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000360C8(char *a1)
{
}

uint64_t sub_10003610C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100036140(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10003618C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100169EF0);
  sub_10003602C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000361C4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100169EF0);
  sub_10003602C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100036204(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100169EF0);
  sub_10003602C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100036244(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100169EF0);
  sub_10003602C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100036290(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003602C(a1);
  operator delete(v1);
}

uint64_t sub_1000362A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000363F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000363CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000363F4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 545LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 545LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000365D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 8);
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  sub_100014DF0(a1 + 64, (__int128 *)(a2 + 64));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + sub_1000114F0(v50 + 112) = v8;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  sub_100014DF0(a1 + 152, (__int128 *)(a2 + 152));
  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  sub_10002B4FC((uint64_t)&v22, a1, v4, 1);
  sub_100035F24(a1 + 368, (uint64_t)&v22);
  uint64_t v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  __int128 v12 = v23;
  if (v23)
  {
    __int128 v13 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_10002B4FC((uint64_t)&v22, a1, (uint64_t *)(a1 + 96), 0);
  sub_100035F24(a1 + 208, (uint64_t)&v22);
  uint64_t v15 = v24;
  if (v24)
  {
    unint64_t v16 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  uint64_t v18 = v23;
  if (v23)
  {
    uint64_t v19 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return a1;
}

uint64_t *sub_1000367BC(uint64_t *a1, uint64_t *a2)
{
  int v4 = sub_100118DDC();
  uint64_t v5 = *a2;
  uint64_t v6 = v4[1];
  if (v6)
  {
    __int128 v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = a2[4];
  v17[0] = 0LL;
  v17[1] = 0LL;
  v18[2] = v9;
  uint64_t v19 = v21;
  v21[0] = v5;
  v21[1] = v6;
  v18[0] = 0LL;
  v18[1] = 0LL;
  _OWORD v21[2] = v9;
  __int128 v20 = xmmword_100138580;
  sub_10002D9AC((uint64_t)a1, (uint64_t *)&v19);
  sub_100014E54((uint64_t)&v19);
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  __int128 v13 = (unint64_t *)a1[18];
  uint64_t v12 = a1[19];
  uint64_t v14 = a1[1];
  uint64_t v19 = (void *)*a1;
  v18[0] = (uint64_t)&v19[3 * v14];
  unint64_t v16 = &v13[v12];
  v17[0] = v13;
  sub_10002B504((uint64_t)(a1 + 26), (uint64_t *)&v19, v18, v17, &v16, v10, v11);
  return a1;
}

void sub_1000368B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000368E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000128C0(*(void **)(*(void *)a1 + 16LL));
  int v4 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  __int128 v7 = v36;
  if (v36)
  {
    unint64_t v8 = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v40;
  if (v40)
  {
    uint64_t v11 = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  __int128 v13 = v39;
  if (v39)
  {
    uint64_t v14 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v51;
  if (v51)
  {
    unint64_t v17 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = v50;
  if (v50)
  {
    __int128 v20 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v49;
  if (v49)
  {
    __int16 v23 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = v48;
  if (v48)
  {
    __int128 v26 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  unint64_t v28 = v47;
  if (v47)
  {
    uint64_t v29 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  char v31 = v46;
  if (v46)
  {
    __int128 v32 = (unint64_t *)&v46->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  if (v43 && &v44 != __p) {
    operator delete(__p);
  }
  sub_100014E54((uint64_t)v41);
  return v3;
}

void sub_100036BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void *sub_100036C3C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100036D24((uint64_t)a1, a2);
  *a1 = off_10016A048;
  a1[45] = &off_10016A148;
  a1[46] = &off_10016A170;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016A048;
  a1[45] = off_10016A0D0;
  a1[46] = off_10016A0F8;
  return a1;
}

void sub_100036CC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100036CE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100036D24(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016A1E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100036D8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100036DA0(uint64_t a1)
{
  *(void *)a1 = off_10016A1E0;
  sub_100037018(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100036E3C(char *a1)
{
}

uint64_t sub_100036E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100036EB4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100036F00(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016A110);
  sub_100036DA0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100036F38(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016A110);
  sub_100036DA0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100036F78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016A110);
  sub_100036DA0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100036FB8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016A110);
  sub_100036DA0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100037004(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100036DA0(a1);
  operator delete(v1);
}

uint64_t sub_100037018(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100037168((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100037140( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100037168(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 615LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 615LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10003734C()
{
  unint64_t v0 = atomic_load(&qword_100198F30);
  if (v0 != -1LL)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_100198F30, &v3, (void (__cdecl *)(void *))sub_100037568);
  }

  return dword_100198F38;
}

uint64_t sub_1000373A8()
{
  unint64_t v0 = atomic_load(&qword_100198F40);
  if (v0 != -1LL)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_100198F40, &v3, (void (__cdecl *)(void *))sub_1000375B4);
  }

  return dword_100198F48;
}

uint64_t sub_100037404()
{
  return 2 * sub_1000373A8();
}

uint64_t (**sub_100037420())()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_100198F58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100198F58))
  {
    qword_100198F50 = (unint64_t)(sub_1000374C4() + 0x3FFFFFFF) >> 30;
    __cxa_guard_release(&qword_100198F58);
  }

  uint64_t v1 = (uint64_t (**)())&unk_100138898;
  else {
    return &off_10016A250;
  }
}

void sub_1000374AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000374C4()
{
  unint64_t v0 = atomic_load(&qword_100198F60);
  if (v0 != -1LL)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_100198F60, &v3, (void (__cdecl *)(void *))sub_100037520);
  }

  return qword_100198F68;
}

uint64_t sub_100037520()
{
  size_t v1 = 8LL;
  uint64_t v2 = 0LL;
  uint64_t result = sysctlbyname("hw.memsize", &v2, &v1, 0LL, 0LL);
  qword_100198F68 = v2;
  return result;
}

uint64_t sub_100037568()
{
  int v2 = 0;
  size_t v1 = 4LL;
  uint64_t result = sysctlbyname("debug.didevice_queue_depth", &v2, &v1, 0LL, 0LL);
  dword_100198F38 = v2;
  return result;
}

uint64_t sub_1000375B4()
{
  int v2 = 1;
  size_t v1 = 4LL;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0LL, 0LL);
  dword_100198F48 = v2;
  return result;
}

double sub_100037604@<D0>(void *a1@<X0>, int *a2@<X1>, size_t a3@<X2>, _OWORD *a4@<X8>)
{
  size_t v7 = a3;
  if (*a2 == 4) {
    sub_10003C82C(a1, &v7, &v6);
  }
  else {
    sub_10003C940(a1, a2, &v7, &v6);
  }
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

uint64_t sub_100037670(uint64_t a1, void *a2, _DWORD *a3, size_t a4)
{
  size_t v7 = sub_1000376FC((void *)a1, a2);
  *size_t v7 = off_10016A2B0;
  *((_DWORD *)v7 + 10) = *a3;
  v7[6] = a4;
  uint64_t v8 = operator new[](a4);
  bzero(v8, a4);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + sub_1000114F0(v1 + 64) = v8;
  *(void *)(a1 + 72) = a1 + 96;
  *(_OWORD *)(a1 + 80) = xmmword_1001388C0;
  return a1;
}

void sub_1000376E8(_Unwind_Exception *a1)
{
}

void *sub_1000376FC(void *a1, void *a2)
{
  double result = sub_100116E6C(a1);
  *double result = off_10016A598;
  uint64_t v4 = a2[1];
  result[3] = *a2;
  result[4] = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

void *sub_10003774C(void *a1)
{
  *a1 = off_10016A598;
  sub_1000114F0((uint64_t)(a1 + 3));
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_100037788(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = sub_1000376FC((void *)a1, a3);
  void *v5 = off_10016A2B0;
  *((_DWORD *)v5 + 10) = *(_DWORD *)(a2 + 40);
  size_t v6 = *(void *)(a2 + 48);
  v5[6] = v6;
  size_t v7 = operator new[](v6);
  bzero(v7, v6);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + sub_1000114F0(v1 + 64) = v7;
  *(void *)(a1 + 72) = a1 + 96;
  *(_OWORD *)(a1 + 80) = xmmword_1001388C0;
  return a1;
}

void sub_100037804(_Unwind_Exception *a1)
{
}

void *sub_100037818(void *a1)
{
  *a1 = off_10016A2B0;
  sub_10003940C((uint64_t)(a1 + 9));
  int v2 = (void *)a1[7];
  a1[7] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  *a1 = off_10016A598;
  sub_1000114F0((uint64_t)(a1 + 3));
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_100037880(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[8];
  if (v4 != a1[7])
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v4 = a1[7];
  }

  uint64_t v5 = sub_100033014(a1[3], v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = v5;
    *(void *)&__int128 v11 = "int CompressedBackend::read(const sg_entry &)";
    *((void *)&v11 + 1) = 27LL;
    int v12 = 16;
    sub_100037A6C(v13, &v11);
    sub_100004E4C(&v14, (uint64_t)"Internal backend read() failed. ret=", 36LL);
    std::ostream::operator<<(&v14, v7);
    std::ios_base::getloc((const std::ios_base *)&v15[*(void *)(v14 - 24) - 8]);
    uint64_t v8 = std::locale::use_facet(&v16, &std::ctype<char>::id);
    uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
    std::locale::~locale(&v16);
    std::ostream::put(&v14, v9);
    std::ostream::flush(&v14);
    std::ostream::~ostream(&v14, off_10016A730);
    sub_100039634((uint64_t)v13);
    std::ios::~ios(v15);
  }

  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, a1[7]);
    if (v6)
    {
      return v6;
    }

    else
    {
      *(void *)&__int128 v11 = "int CompressedBackend::read(const sg_entry &)";
      *((void *)&v11 + 1) = 27LL;
      int v12 = 16;
      sub_100037B54(v13, &v11);
      sub_100004E4C(&v14, (uint64_t)"Decompression failed", 20LL);
      std::ostream::~ostream(&v14, off_10016A950);
      sub_100039BE0((uint64_t)v13);
      std::ios::~ios(v15);
      return 4294967291LL;
    }
  }

  return v7;
}

void sub_100037A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100037A6C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003CA58((uint64_t)a1, a2);
  *a1 = off_10016A668;
  a1[45] = &off_10016A768;
  a1[46] = &off_10016A790;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016A668;
  a1[45] = off_10016A6F0;
  a1[46] = off_10016A718;
  return a1;
}

void sub_100037AF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100037B14(uint64_t a1)
{
  return a1;
}

void *sub_100037B54(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003CAD4((uint64_t)a1, a2);
  *a1 = off_10016A888;
  a1[45] = &off_10016A988;
  a1[46] = &off_10016A9B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016A888;
  a1[45] = off_10016A910;
  a1[46] = off_10016A938;
  return a1;
}

void sub_100037BD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100037BFC(uint64_t a1)
{
  return a1;
}

unint64_t sub_100037C3C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = a2 + 2;
  unint64_t v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v6 = a1[8];
    unint64_t v8 = *v7;
  }

  uint64_t v9 = a1[3];
  uint64_t v10 = a2[3];
  uint64_t v11 = *((void *)sub_100118DDC() + 1);
  *(void *)&__int128 v32 = v6;
  *((void *)&v32 + 1) = v11;
  if (v11)
  {
    int v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  *(void *)unint64_t v33 = v8;
  *(void *)&v33[8] = v10;
  *(void *)&v33[16] = v8;
  v33[24] = 0;
  (*(void (**)(void *__return_ptr, uint64_t, __int128 *))(*(void *)v9 + 128LL))(v39, v9, &v32);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    uint64_t v15 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if (BYTE4(v39[0])) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v39[4] == 0LL;
  }
  if (v17) {
    return sub_10003C7B8(a3, (uint64_t)v39);
  }
  LOBYTE(v32) = 0;
  BYTE4(v32) = 0;
  *((void *)&v32 + 1) = 0LL;
  *(void *)unint64_t v33 = sub_100116890((unint64_t)&v32);
  uint64_t v18 = sub_100116950((unint64_t)&v32);
  __int128 v40 = &v32;
  *(void *)&v33[8] = v18;
  *(void *)&v33[16] = &v40;
  sub_10003C7B8((unint64_t)v37, (uint64_t)&v32);
  uint64_t v19 = v40;
  uint64_t v38 = v40;
  *((void *)v40 + 4) = &v38;
  uint64_t v20 = a2[1];
  *(void *)&__int128 v32 = *a2;
  *((void *)&v32 + 1) = v20;
  if (v20)
  {
    __int16 v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    uint64_t v19 = v38;
  }

  *(_OWORD *)&v33[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v7;
  uint64_t v34 = v19;
  uint64_t v38 = 0LL;
  *((void *)v19 + 4) = &v34;
  sub_10003C7B8((unint64_t)v35, (uint64_t)v39);
  uint64_t v23 = a1[9];
  uint64_t v36 = a1[8];
  uint64_t v24 = a1[10];
  __int16 v25 = (_OWORD *)(v23 + 104 * v24);
  if (v24 == a1[11])
  {
    sub_10003CB50(a1 + 9, (void *)(v23 + 104 * v24), 1LL, (uint64_t)&v32, &v40);
  }

  else
  {
    *__int16 v25 = v32;
    __int128 v32 = 0uLL;
    __int128 v26 = *(_OWORD *)v33;
    *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)&v33[9];
    v25[1] = v26;
    unint64_t v27 = (void *)(v23 + 104 * v24);
    v27[6] = v34;
    v27 += 6;
    uint64_t v34 = 0LL;
    *(void *)(*v27 + 32LL) = v27;
    sub_10003C7B8((unint64_t)(v27 + 1), (uint64_t)v35);
    *(void *)(v23 + 104 * v24 + 96) = v36;
    ++a1[10];
  }

  if (v34) {
    *((void *)v34 + 4) = 0LL;
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    uint64_t v29 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  a1[8] += *v7;
  unint64_t result = sub_10003C7B8(a3, (uint64_t)v37);
  if (v38) {
    *((void *)v38 + 4) = 0LL;
  }
  return result;
}

void sub_100037F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (a15) {
    *(void *)(a15 + 32) = 0LL;
  }
  sub_1000114F0((uint64_t)&a9);
  if (a28) {
    *(void *)(a28 + 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

void *sub_100037F90(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v4 = v3 + 48;
    uint64_t v5 = 104 * v2;
    do
    {
      unsigned int v6 = sub_100038120((unsigned int *)(v4 + 8));
      unsigned int v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v10 = v3 + 48;
        uint64_t v11 = *(unsigned int **)v4;
        *uint64_t v11 = v7;
        uint64_t v9 = v11 + 1;
      }

      else if (*(void *)(v4 - 32) <= (unint64_t)v6)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 192LL))( a1,  v4 - 48,  *(void *)(v4 + 48));
        if (v12)
        {
          int v13 = v12;
          uint64_t v10 = v3 + 48;
          uint64_t v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = v13;
        }

        else
        {
          *(void *)&__int128 v16 = "void CompressedBackend::run_futures()";
          *((void *)&v16 + 1) = 35LL;
          int v17 = 16;
          sub_1000381F0(v18, &v16);
          sub_100004E4C(&v19, (uint64_t)"Decompression failed", 20LL);
          std::ostream::~ostream(&v19, off_10016AB70);
          sub_10003A18C((uint64_t)v18);
          std::ios::~ios(&v20);
          uint64_t v10 = v3 + 48;
          uint64_t v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = -5;
        }

        uint64_t v9 = v14 + 1;
      }

      else
      {
        unint64_t v8 = *(unsigned int **)v4;
        *unint64_t v8 = -5;
        uint64_t v9 = v8 + 1;
        uint64_t v10 = v4;
      }

      _BYTE *v9 = 1;
      sub_10003C758(v10);
      v3 += 104LL;
      v4 += 104LL;
      v5 -= 104LL;
    }

    while (v5);
  }

  *(void *)(a1 + sub_1000114F0(v1 + 64) = *(void *)(a1 + 56);
  return sub_10003CFC4((void *)(a1 + 72));
}

void sub_10003810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100038120(unsigned int *a1)
{
  if (*((_BYTE *)a1 + 4)) {
    return *a1;
  }
  uint64_t v4 = (unint64_t *)(a1 + 2);
  do
    unint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  unsigned int v6 = (std::mutex *)*((void *)a1 + 2);
  v9.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)a1 + 2);
  v9.__owns_ = 1;
  std::mutex::lock(v6);
  if (!*((_BYTE *)a1 + 4))
  {
    unsigned int v7 = (std::condition_variable *)*((void *)a1 + 3);
    do
      std::condition_variable::wait(v7, &v9);
    while (!*((_BYTE *)a1 + 4));
  }

  do
    unint64_t v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  sub_10003C718((uint64_t)&v9);
  uint64_t v2 = *a1;
  if (v9.__owns_) {
    std::mutex::unlock(v9.__m_);
  }
  return v2;
}

void sub_1000381D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000381F0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003CF48((uint64_t)a1, a2);
  *a1 = off_10016AAA8;
  a1[45] = &off_10016ABA8;
  a1[46] = &off_10016ABD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016AAA8;
  a1[45] = off_10016AB30;
  a1[46] = off_10016AB58;
  return a1;
}

void sub_100038274(_Unwind_Exception *a1)
{
}

uint64_t sub_100038298(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000382D8(uint64_t *a1, uint64_t a2)
{
  if (a1[8] != a1[7]) {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 184))(a1, a2);
  if (!v4) {
    return 4294967291LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_100038458(a1[3], a1[7], v4, *(void *)(a2 + 24));
  if ((v6 & 0x80000000) == 0) {
    return v5;
  }
  uint64_t v7 = v6;
  *(void *)&__int128 v11 = "int CompressedBackend::write(const sg_entry &)";
  *((void *)&v11 + 1) = 28LL;
  int v12 = 16;
  sub_100012984(v13, &v11);
  sub_100004E4C(&v14, (uint64_t)"Internal backend write() failed. ret=", 37LL);
  std::ostream::operator<<(&v14, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + *(void *)(v14 - 24)));
  unint64_t v8 = std::locale::use_facet(&v16, &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale(&v16);
  std::ostream::put(&v14, v9);
  std::ostream::flush(&v14);
  std::ostream::~ostream(&v14, off_100166570);
  sub_100016084((uint64_t)v13);
  std::ios::~ios(&v15);
  return v7;
}

void sub_100038434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100038458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (std::__shared_weak_count *)*((void *)sub_100118DDC() + 1);
  uint64_t v16 = a2;
  int v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  char v21 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 96LL))(a1, &v16);
  int v12 = v17;
  if (v17)
  {
    int v13 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v11;
}

void sub_100038514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100038528(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100004E4C(a2, (uint64_t)"Compressed(", 11LL);
  int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = sub_100038584(v3, &v6);
  return sub_100004E4C(v4, (uint64_t)")", 1LL);
}

void *sub_100038584(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_10016ACB0[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 30)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_100004E4C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_10016ACB0[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_100004E4C(a1, (uint64_t)v3, v4);
}

void *sub_1000385C8(void *a1, void *a2, int *a3, size_t a4)
{
  int v13 = *a3;
  int v6 = (void *)sub_100037670((uint64_t)a1, a2, &v13, a4);
  void *v6 = off_10016A388;
  v6[221] = 0LL;
  uint64_t v7 = (compression_algorithm *)operator new(4uLL);
  int v14 = *a3;
  sub_10003A574(v7, &v14);
  a1[222] = v7;
  size_t v8 = compression_encode_scratch_buffer_size(*v7);
  size_t v9 = compression_decode_scratch_buffer_size((compression_algorithm)*(_DWORD *)a1[222]);
  if (v8 <= v9) {
    size_t v8 = v9;
  }
  a1[220] = v8;
  unint64_t v10 = operator new[](v8);
  bzero(v10, v8);
  uint64_t v11 = (void *)a1[221];
  a1[221] = v10;
  if (v11) {
    operator delete[](v11);
  }
  return a1;
}

void sub_100038684(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[222];
  v1[222] = 0LL;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[221];
  v1[221] = 0LL;
  if (v4) {
    operator delete[](v4);
  }
  sub_100037818(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000386D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)sub_100037788(a1, a2, a3);
  void *v5 = off_10016A388;
  size_t v6 = *(void *)(a2 + 1760);
  v5[220] = v6;
  v5[221] = 0LL;
  uint64_t v7 = *(_DWORD **)(a2 + 1776);
  size_t v8 = operator new(4uLL);
  *size_t v8 = *v7;
  *(void *)(a1 + 1776) = v8;
  size_t v9 = operator new[](v6);
  bzero(v9, v6);
  *(void *)(a1 + 176std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  return a1;
}

void sub_100038750(_Unwind_Exception *a1)
{
  v1[222] = 0LL;
  operator delete(v2);
  uint64_t v4 = (void *)v1[221];
  v1[221] = 0LL;
  if (v4) {
    operator delete[](v4);
  }
  sub_100037818(v1);
  _Unwind_Resume(a1);
}

size_t sub_10003878C(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer( *(uint8_t **)a2,  *(void *)(a2 + 32),  a3,  *(void *)(a2 + 16),  *(void **)(a1 + 1768),  (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t sub_1000387B0(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer( *(uint8_t **)(a1 + 56),  *(void *)(a2 + 16),  *(const uint8_t **)a2,  *(void *)(a2 + 16),  *(void **)(a1 + 1768),  (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

double sub_1000387D4@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t sub_100038814(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned int destLen = *(void *)(a2 + 32);
  uint64_t v3 = BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0);
  if (!(_DWORD)v3) {
    return destLen;
  }
  uint64_t v4 = v3;
  *(void *)&__int128 v6 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((void *)&v6 + 1) = 40LL;
  int v7 = 16;
  sub_1000388F4(v8, &v6);
  sub_100004E4C(&v9, (uint64_t)"BZIP decompression failed, res=", 31LL);
  std::ostream::operator<<(&v9, v4);
  std::ostream::~ostream(&v9, off_10016B028);
  sub_10003AF64((uint64_t)v8);
  std::ios::~ios(&v10);
  return 0LL;
}

void sub_1000388E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_1000388F4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003D0BC((uint64_t)a1, a2);
  *a1 = off_10016AF60;
  a1[45] = &off_10016B060;
  a1[46] = &off_10016B088;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016AF60;
  a1[45] = off_10016AFE8;
  a1[46] = off_10016B010;
  return a1;
}

void sub_100038978(_Unwind_Exception *a1)
{
}

uint64_t sub_10003899C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000389DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  unsigned int destLen = v2;
  unint64_t v3 = v2 / 0x186A0;
  uint64_t v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if ((_DWORD)v4 != -8)
  {
    uint64_t v5 = v4;
    if (!(_DWORD)v4) {
      return destLen;
    }
    *(void *)&__int128 v7 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((void *)&v7 + 1) = 38LL;
    int v8 = 16;
    sub_100038AF0(v9, &v7);
    sub_100004E4C(&v10, (uint64_t)"BZIP compression failed, res=", 29LL);
    std::ostream::operator<<(&v10, v5);
    std::ostream::~ostream(&v10, off_10016B248);
    sub_10003B510((uint64_t)v9);
    std::ios::~ios(&v11);
  }

  return 0LL;
}

void sub_100038ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100038AF0(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003D138((uint64_t)a1, a2);
  *a1 = off_10016B180;
  a1[45] = &off_10016B280;
  a1[46] = &off_10016B2A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016B180;
  a1[45] = off_10016B208;
  a1[46] = off_10016B230;
  return a1;
}

void sub_100038B74(_Unwind_Exception *a1)
{
}

uint64_t sub_100038B98(uint64_t a1)
{
  return a1;
}

double sub_100038BD8@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void *sub_100038C18(void *a1)
{
  *a1 = off_10016A388;
  uint64_t v2 = (void *)a1[222];
  a1[222] = 0LL;
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[221];
  a1[221] = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  return sub_100037818(a1);
}

void sub_100038C68(void *a1)
{
  uint64_t v1 = sub_100038C18(a1);
  operator delete(v1);
}

uint64_t sub_100038C7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16LL))(*(void *)(a1 + 24));
}

uint64_t sub_100038C8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24));
}

uint64_t sub_100038C9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24));
}

uint64_t sub_100038CAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
}

uint64_t sub_100038CBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48LL))(*(void *)(a1 + 24));
}

uint64_t sub_100038CCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56LL))(*(void *)(a1 + 24));
}

void sub_100038CDC(void **a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[3] + 72LL))(&v5);
  ((void (*)(void **, uint64_t *))(*a1)[22])(a1, &v5);
  uint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_100038D68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100038D7C(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 80LL))(a1, &v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    __int128 v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_100038E00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100038E14(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, &v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    __int128 v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_100038E98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100038EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48LL;
    v5 -= 48LL;
    if (!v5) {
      return 0LL;
    }
  }

  uint64_t v7 = v6;
  *(void *)&__int128 v9 = "int Backend::read(const elements_t &)";
  *((void *)&v9 + 1) = 17LL;
  int v10 = 16;
  sub_10003B8F8(v11, &v9);
  sub_100004E4C(&v12, (uint64_t)"Backend: failed reading element in vector", 41LL);
  std::ostream::~ostream(&v12, off_10016B468);
  sub_10003BA5C((uint64_t)v11);
  std::ios::~ios(&v13);
  return v7;
}

void sub_100038F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100038F9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48LL;
    v5 -= 48LL;
    if (!v5) {
      return 0LL;
    }
  }

  uint64_t v7 = v6;
  *(void *)&__int128 v9 = "int Backend::write(const elements_t &)";
  *((void *)&v9 + 1) = 18LL;
  int v10 = 16;
  sub_10003C008(v11, &v9);
  sub_100004E4C(&v12, (uint64_t)"Backend: failed writing element in vector", 41LL);
  std::ostream::~ostream(&v12, off_10016B688);
  sub_10003C16C((uint64_t)v11);
  std::ios::~ios(&v13);
  return v7;
}

void sub_100039078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

unint64_t sub_10003908C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[4] = 0;
  uint64_t v13 = 0LL;
  int v14 = sub_100116890((unint64_t)v12);
  uint64_t v11 = v12;
  uint64_t v15 = sub_100116950((unint64_t)v12);
  uint64_t v16 = &v11;
  sub_10003C7B8((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_10003C758((uint64_t)&v10);
  unint64_t result = sub_10003C7B8(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0LL;
  }
  return result;
}

void sub_100039154( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

void *sub_100039174(void **a1)
{
  uint64_t v2 = (void *)((uint64_t (*)(void **))(*a1)[8])(a1);
  __int128 v3 = sub_100004E4C(v2, (uint64_t)"(", 1LL);
  uint64_t v4 = (void *)(*(uint64_t (**)(void *, void *))(*a1[3] + 64LL))(a1[3], v3);
  return sub_100004E4C(v4, (uint64_t)")", 1LL);
}

uint64_t sub_1000391CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160LL))(*(void *)(a1 + 24));
}

void sub_1000391E0(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100004D60((uint64_t)v3);
  sub_100004E4C(v3, (uint64_t)"Unexpected context construction by ", 35LL);
  sub_100116E80((uint64_t)v3, a1);
  sub_10001161C((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_100039268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  uint64_t v31 = v28 + 8;
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(v31);
  std::ios::~ios(&a27);
  if (v29) {
    __cxa_free_exception(v27);
  }
  _Unwind_Resume(a1);
}

void sub_1000392EC(void *a1)
{
  uint64_t v1 = sub_100037818(a1);
  operator delete(v1);
}

uint64_t sub_100039300(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80LL))(*(void *)(a1 + 24));
}

uint64_t sub_100039310(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88LL))(*(void *)(a1 + 24));
}

unint64_t sub_100039320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[4] = 0;
  uint64_t v13 = 0LL;
  int v14 = sub_100116890((unint64_t)v12);
  uint64_t v11 = v12;
  uint64_t v15 = sub_100116950((unint64_t)v12);
  uint64_t v16 = &v11;
  sub_10003C7B8((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_10003C758((uint64_t)&v10);
  unint64_t result = sub_10003C7B8(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0LL;
  }
  return result;
}

void sub_1000393E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003940C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    __int128 v3 = *(void **)a1;
    do
    {
      uint64_t v4 = v3[6];
      if (v4) {
        *(void *)(v4 + 32) = 0LL;
      }
      --v2;
      __int128 v3 = (void *)(sub_1000114F0((uint64_t)v3) + 104);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100039470(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016A730);
  sub_100039634(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000394A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016A730);
  sub_100039634(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000394E8(char *a1)
{
}

uint64_t sub_10003952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100039560(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000395AC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016A730);
  sub_100039634((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000395EC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016A730);
  sub_100039634((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100039634(uint64_t a1)
{
  *(void *)a1 = off_10016A800;
  sub_1000396D0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000396D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100039838((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000397F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100039824(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100039634(a1);
  operator delete(v1);
}

int *sub_100039838(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 49LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 49LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100039A1C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016A950);
  sub_100039BE0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100039A54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016A950);
  sub_100039BE0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100039A94(char *a1)
{
}

uint64_t sub_100039AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100039B0C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100039B58(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016A950);
  sub_100039BE0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100039B98(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016A950);
  sub_100039BE0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100039BE0(uint64_t a1)
{
  *(void *)a1 = off_10016AA20;
  sub_100039C7C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100039C7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100039DE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100039DA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100039DD0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100039BE0(a1);
  operator delete(v1);
}

int *sub_100039DE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 55LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 55LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100039FC8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016AB70);
  sub_10003A18C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003A000(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016AB70);
  sub_10003A18C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003A040(char *a1)
{
}

uint64_t sub_10003A084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003A0B8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10003A104(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016AB70);
  sub_10003A18C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10003A144(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016AB70);
  sub_10003A18C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10003A18C(uint64_t a1)
{
  *(void *)a1 = off_10016AC40;
  sub_10003A228(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003A228(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003A390((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003A350( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003A37C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003A18C(a1);
  operator delete(v1);
}

int *sub_10003A390(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 94LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 94LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

_DWORD *sub_10003A574(_DWORD *a1, int *a2)
{
  *a1 = dword_100138A44[*a2];
  if (sub_1000B866C())
  {
    *(void *)&__int128 v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((void *)&v5 + 1) = 39LL;
    int v6 = 2;
    sub_10003A690(v7, &v5);
    sub_100004E4C(&v8, (uint64_t)"Using compression ", 18LL);
    int v10 = *a2;
    sub_100038584(&v8, &v10);
    *(_DWORD *)((char *)&v8 + *(void *)(v8 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v8 + *(void *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    sub_100004E4C(&v8, (uint64_t)" constant ", 10LL);
    std::ostream::operator<<(&v8, *a1);
    std::ostream::~ostream(&v8, off_10016AE08);
    sub_10003A7F4((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  return a1;
}

void sub_10003A67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_10003A690(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003A778((uint64_t)a1, a2);
  *a1 = off_10016AD40;
  a1[45] = &off_10016AE40;
  a1[46] = &off_10016AE68;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016AD40;
  a1[45] = off_10016ADC8;
  a1[46] = off_10016ADF0;
  return a1;
}

void sub_10003A714(_Unwind_Exception *a1)
{
}

uint64_t sub_10003A738(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003A778(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016AED8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003A7E0(_Unwind_Exception *a1)
{
}

uint64_t sub_10003A7F4(uint64_t a1)
{
  *(void *)a1 = off_10016AED8;
  sub_10003AA6C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10003A890(char *a1)
{
}

uint64_t sub_10003A8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003A908(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10003A954(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016AE08);
  sub_10003A7F4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10003A98C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016AE08);
  sub_10003A7F4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10003A9CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016AE08);
  sub_10003A7F4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003AA0C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016AE08);
  sub_10003A7F4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10003AA58(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003A7F4(a1);
  operator delete(v1);
}

uint64_t sub_10003AA6C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003ABBC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003AB94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10003ABBC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 175LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 175LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10003ADA0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016B028);
  sub_10003AF64(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003ADD8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B028);
  sub_10003AF64(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003AE18(char *a1)
{
}

uint64_t sub_10003AE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003AE90(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10003AEDC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016B028);
  sub_10003AF64((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10003AF1C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B028);
  sub_10003AF64((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10003AF64(uint64_t a1)
{
  *(void *)a1 = off_10016B0F8;
  sub_10003B000(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003B000(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003B168((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003B128( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B154(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003AF64(a1);
  operator delete(v1);
}

int *sub_10003B168(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 242LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 242LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10003B34C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016B248);
  sub_10003B510(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003B384(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B248);
  sub_10003B510(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003B3C4(char *a1)
{
}

uint64_t sub_10003B408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003B43C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10003B488(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016B248);
  sub_10003B510((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10003B4C8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B248);
  sub_10003B510((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10003B510(uint64_t a1)
{
  *(void *)a1 = off_10016B318;
  sub_10003B5AC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003B5AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003B714((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003B6D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B700(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003B510(a1);
  operator delete(v1);
}

int *sub_10003B714(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 265LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 265LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_10003B8F8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003B9E0((uint64_t)a1, a2);
  *a1 = off_10016B3A0;
  a1[45] = &off_10016B4A0;
  a1[46] = &off_10016B4C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016B3A0;
  a1[45] = off_10016B428;
  a1[46] = off_10016B450;
  return a1;
}

void sub_10003B97C(_Unwind_Exception *a1)
{
}

uint64_t sub_10003B9A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003B9E0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016B538;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003BA48(_Unwind_Exception *a1)
{
}

uint64_t sub_10003BA5C(uint64_t a1)
{
  *(void *)a1 = off_10016B538;
  sub_10003BCD4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10003BAF8(char *a1)
{
}

uint64_t sub_10003BB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003BB70(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10003BBBC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016B468);
  sub_10003BA5C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10003BBF4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016B468);
  sub_10003BA5C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10003BC34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B468);
  sub_10003BA5C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003BC74(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B468);
  sub_10003BA5C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10003BCC0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003BA5C(a1);
  operator delete(v1);
}

uint64_t sub_10003BCD4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003BE24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003BDFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10003BE24(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 124LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 124LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_10003C008(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10003C0F0((uint64_t)a1, a2);
  *a1 = off_10016B5C0;
  a1[45] = &off_10016B6C0;
  a1[46] = &off_10016B6E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016B5C0;
  a1[45] = off_10016B648;
  a1[46] = off_10016B670;
  return a1;
}

void sub_10003C08C(_Unwind_Exception *a1)
{
}

uint64_t sub_10003C0B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003C0F0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016B758;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003C158(_Unwind_Exception *a1)
{
}

uint64_t sub_10003C16C(uint64_t a1)
{
  *(void *)a1 = off_10016B758;
  sub_10003C3E4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10003C208(char *a1)
{
}

uint64_t sub_10003C24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003C280(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10003C2CC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016B688);
  sub_10003C16C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10003C304(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016B688);
  sub_10003C16C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10003C344(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B688);
  sub_10003C16C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003C384(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B688);
  sub_10003C16C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10003C3D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003C16C(a1);
  operator delete(v1);
}

uint64_t sub_10003C3E4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003C534((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003C50C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10003C534(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 135LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 135LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_10003C718(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  }

  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_10003C758();
  }

void sub_10003C758(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 8LL))
  {
    uint64_t v2 = *(std::mutex **)(*(void *)a1 + 16LL);
    std::mutex::lock(v2);
    std::mutex::unlock(v2);
  }

unint64_t sub_10003C7B8(unint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = sub_100116890(a1);
  *(void *)(a1 + 24) = sub_100116950(a1);
  if (*(_BYTE *)(a2 + 4))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = 1;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0LL;
  int v4 = *(unint64_t **)(a1 + 32);
  if (v4) {
    *int v4 = a1;
  }
  return a1;
}

void sub_10003C82C(void *a1@<X1>, size_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x6F8uLL);
  sub_10003C894(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_100018774((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10003C880(_Unwind_Exception *a1)
{
}

void *sub_10003C894(void *a1, void *a2, size_t *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016B7D8;
  size_t v4 = *a3;
  int v6 = 4;
  sub_100037670((uint64_t)(a1 + 3), a2, &v6, v4);
  a1[3] = &off_10016A460;
  return a1;
}

void sub_10003C8EC(_Unwind_Exception *a1)
{
}

void sub_10003C900(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016B7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016B7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10003C930(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10003C940(void *a1@<X1>, int *a2@<X2>, size_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x710uLL);
  sub_10003C9B8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_100018774((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10003C9A4(_Unwind_Exception *a1)
{
}

void *sub_10003C9B8(void *a1, void *a2, int *a3, size_t *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016B828;
  int v6 = *a3;
  sub_1000385C8(a1 + 3, a2, &v6, *a4);
  return a1;
}

void sub_10003CA04(_Unwind_Exception *a1)
{
}

void sub_10003CA18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016B828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CA28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016B828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10003CA48(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10003CA58(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016A800;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003CAC0(_Unwind_Exception *a1)
{
}

uint64_t sub_10003CAD4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016AA20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003CB3C(_Unwind_Exception *a1)
{
}

void sub_10003CB50(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10003CC00((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(104 * v11);
  sub_10003CC80((uint64_t)a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_10003CC00(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x13B13B13B13B13BLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < a2 - v4 + v3) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x13B13B13B13B13BLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10003CC80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)a1;
  sub_10003CD54(a1, *(void **)a1, a4, (void *)(*(void *)a1 + 104LL * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (uint64_t i = *(void *)(a1 + 8); i; v10 += 104LL)
    {
      uint64_t v12 = *(void *)(v10 + 48);
      if (v12) {
        *(void *)(v12 + 32) = 0LL;
      }
      --i;
      sub_1000114F0(v10);
    }

    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }

  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_10003CD30(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10003CD54(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10003CE64(a1, a2, a3, a5);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a7;
  *(void *)a7 = 0LL;
  *(void *)(a7 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  __int128 v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(void *)(v12 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a7 + 48);
  *(void *)(a7 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(*(void *)(v12 + 48) + 32LL) = v12 + 48;
  sub_10003C7B8(v12 + 56, a7 + 56);
  *(void *)(v12 + 96) = *(void *)(a7 + 96);
  return sub_10003CE64(a1, a3, a4, v12 + 104 * a6);
}

void sub_10003CE10(_Unwind_Exception *a1)
{
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 32LL) = 0LL;
  }
  sub_1000114F0(v2);
  for (; v1 != v2; v1 += 104LL)
  {
    uint64_t v5 = *(void *)(v1 + 48);
    if (v5) {
      *(void *)(v5 + 32) = 0LL;
    }
    sub_1000114F0(v1);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10003CE64(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      unint64_t v8 = &a2[v7];
      uint64_t v9 = a4 + v7 * 8;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)&a2[v7];
      *unint64_t v8 = 0LL;
      v8[1] = 0LL;
      __int128 v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(a4 + v7 * 8 + 4std::iostream::~basic_iostream(v2, v3 + 8) = a2[v7 + 6];
      v8[6] = 0LL;
      *(void *)(*(void *)(a4 + v7 * 8 + 48) + 32LL) = a4 + v7 * 8 + 48;
      sub_10003C7B8(a4 + v7 * 8 + 56, (uint64_t)&a2[v7 + 7]);
      *(void *)(v9 + 96) = a2[v7 + 12];
      v7 += 13LL;
    }

    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }

  return a4;
}

void sub_10003CF0C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4) {
    *(void *)(v4 + 32) = 0LL;
  }
  sub_10011BB64(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_10003CF34(_Unwind_Exception *a1)
{
}

uint64_t sub_10003CF48(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016AC40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003CFB0(_Unwind_Exception *a1)
{
}

void *sub_10003CFC4(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2)
  {
    unint64_t result = (void *)*result;
    do
    {
      uint64_t v3 = result[6];
      if (v3) {
        *(void *)(v3 + 32) = 0LL;
      }
      --v2;
      unint64_t result = (void *)(sub_1000114F0((uint64_t)result) + 104);
    }

    while (v2);
  }

  v1[1] = 0LL;
  return result;
}

void sub_10003D00C(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x710uLL);
  sub_10003D074(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_100018774((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10003D060(_Unwind_Exception *a1)
{
}

void *sub_10003D074(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016B828;
  sub_1000386D4((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10003D0A8(_Unwind_Exception *a1)
{
}

uint64_t sub_10003D0BC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016B0F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003D124(_Unwind_Exception *a1)
{
}

uint64_t sub_10003D138(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016B318;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003D1A0(_Unwind_Exception *a1)
{
}

void sub_10003D1B4(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x6F8uLL);
  sub_10003D21C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_100018774((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10003D208(_Unwind_Exception *a1)
{
}

void *sub_10003D21C(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016B7D8;
  sub_100037788((uint64_t)(a1 + 3), a2, a3);
  a1[3] = &off_10016A460;
  return a1;
}

void sub_10003D25C(_Unwind_Exception *a1)
{
}

unint64_t *sub_10003D270(unint64_t *result)
{
  do
    unint64_t v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

void sub_10003D284(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  do
  {
    unint64_t v3 = __ldaxr((unint64_t *)a1);
    unint64_t v4 = v3 - 1;
  }

  while (__stlxr(v4, (unint64_t *)a1));
  if (!v4 && *(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }

  std::mutex::unlock(v2);
}

uint64_t sub_10003D2D8(uint64_t result)
{
  do
    unint64_t v1 = __ldaxr((unint64_t *)result);
  while (__stlxr(v1 + 1, (unint64_t *)result));
  *(_BYTE *)(result + 72) = 1;
  return result;
}

void sub_10003D2F4(uint64_t a1)
{
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  do
  {
    unint64_t v2 = __ldaxr((unint64_t *)a1);
    unint64_t v3 = v2 - 1;
  }

  while (__stlxr(v3, (unint64_t *)a1));
  if (v3)
  {
    while (*(_BYTE *)(a1 + 72))
      std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v4);
  }

  else
  {
    *(_BYTE *)(a1 + 72) = 0;
  }

  if (v4.__owns_) {
    std::mutex::unlock(v4.__m_);
  }
}

uint64_t sub_10003D378(uint64_t a1, unint64_t a2)
{
  unint64_t v19 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  LOBYTE(v15[0]) = 0;
  sub_10003F2C8((uint64_t **)a1, &v19, &v19, v15);
  char v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (sub_1000B866C())
    {
      *(void *)&__int128 v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36LL;
      int v14 = 2;
      sub_10003D630(v15, &v13);
      sub_100004E4C(&v16, (uint64_t)"Band ", 5LL);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v16, v19);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      sub_100004E4C(&v16, (uint64_t)" was opened in the background, waiting for it to become available", 65LL);
      std::ostream::~ostream(&v16, off_10016B970);
      sub_10003E298((uint64_t)v15);
      std::ios::~ios(v17);
    }

    uint64_t v7 = *(void **)(a1 + 8);
    uint64_t v6 = a1 + 8;
    __int128 v5 = v7;
    if (v7)
    {
      do
      {
        unint64_t v8 = (void *)v6;
        do
        {
          unint64_t v9 = v5[4];
          BOOL v10 = v9 >= v19;
          if (v9 >= v19) {
            unint64_t v11 = v5;
          }
          else {
            unint64_t v11 = v5 + 1;
          }
          if (v10) {
            unint64_t v8 = v5;
          }
          __int128 v5 = (void *)*v11;
        }

        while (*v11);
        if (v8 == (void *)v6) {
          break;
        }
        if (v19 < v8[4]) {
          break;
        }
        if (*((_BYTE *)v8 + 40)) {
          break;
        }
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        __int128 v5 = *(void **)v6;
      }

      while (*(void *)v6);
    }

    if (sub_1000B866C())
    {
      *(void *)&__int128 v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36LL;
      int v14 = 2;
      sub_10003D718(v15, &v13);
      sub_100004E4C(&v16, (uint64_t)"Band ", 5LL);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v16, v19);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      sub_100004E4C(&v16, (uint64_t)" is now available", 17LL);
      std::ostream::~ostream(&v16, off_10016BB90);
      sub_10003E844((uint64_t)v15);
      std::ios::~ios(v17);
    }
  }

  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v4 & 1;
}

void sub_10003D5E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(_BYTE *)(v13 - 64)) {
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *sub_10003D630(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10003F38C((uint64_t)a1, a2);
  *a1 = off_10016B8A8;
  a1[45] = &off_10016B9A8;
  a1[46] = &off_10016B9D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016B8A8;
  a1[45] = off_10016B930;
  a1[46] = off_10016B958;
  return a1;
}

void sub_10003D6B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10003D6D8(uint64_t a1)
{
  return a1;
}

void *sub_10003D718(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10003F408((uint64_t)a1, a2);
  *a1 = off_10016BAC8;
  a1[45] = &off_10016BBC8;
  a1[46] = &off_10016BBF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016BAC8;
  a1[45] = off_10016BB50;
  a1[46] = off_10016BB78;
  return a1;
}

void sub_10003D79C(_Unwind_Exception *a1)
{
}

uint64_t sub_10003D7C0(uint64_t a1)
{
  return a1;
}

void sub_10003D800(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = (void *)(a1 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v7 + 1;
    }
    if (v10) {
      unint64_t v8 = v7;
    }
    uint64_t v7 = (void *)*v11;
  }

  while (*v11);
  if (v8 == (void *)(a1 + 8) || v8[4] > a2) {
LABEL_12:
  }
    unint64_t v8 = (void *)(a1 + 8);
  *((_BYTE *)v8 + 40) = a3;
  if (a3) {
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  }
  std::mutex::unlock(v6);
}

void sub_10003D890(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  char v3 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_10003F484(a1, &v9);
  if (sub_1000B866C())
  {
    *(void *)&__int128 v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((void *)&v4 + 1) = 36LL;
    int v5 = 2;
    sub_10003D9E0(v6, &v4);
    sub_100004E4C(&v7, (uint64_t)"Band ", 5LL);
    *(_DWORD *)((char *)&v7 + *(void *)(v7 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v7 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v7, v9);
    *(_DWORD *)((char *)&v7 + *(void *)(v7 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v7 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_100004E4C(&v7, (uint64_t)" is closed, notifying waiters", 29LL);
    std::ostream::~ostream(&v7, off_10016BDB0);
    sub_10003EDF0((uint64_t)v6);
    std::ios::~ios(&v8);
  }

  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v3);
}

void sub_10003D9B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void *sub_10003D9E0(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10003F8F0((uint64_t)a1, a2);
  *a1 = off_10016BCE8;
  a1[45] = &off_10016BDE8;
  a1[46] = &off_10016BE10;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016BCE8;
  a1[45] = off_10016BD70;
  a1[46] = off_10016BD98;
  return a1;
}

void sub_10003DA64(_Unwind_Exception *a1)
{
}

uint64_t sub_10003DA88(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003DAC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  int v7 = 0;
  sub_10003F96C(&v7, __p);
  __int128 v3 = *(_OWORD *)__p;
  *(void *)(a1 + 192) = 0LL;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 136) = 1018212795LL;
  *(_OWORD *)(a1 + 56) = xmmword_100138CC0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = 850045863LL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(void *)(a1 + 2sub_1000114F0(v1 + 64) = 0LL;
  *(void *)(a1 + 272) = 1018212795LL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_100004CB0(__p, "com.apple.diskimages.band_management");
  sub_1000373A8();
  sub_10004001C((void *)(a1 + 328));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_100040300(a1 + 328, 0LL, a1 + 392);
  sub_100040020(a1 + 328, 3);
  return a1;
}

void sub_10003DBF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v21 = *(void *)(v14 + 320);
  *(void *)(v14 + sub_1000114F0(v2 + 320) = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  sub_10003DCF4(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)(v15 - 120));
  sub_1000114F0(v14 + 24);
  uint64_t v22 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16LL))(v22);
  }
  uint64_t v23 = *v19;
  uint64_t *v19 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003DCAC(uint64_t a1)
{
  __int128 v3 = (void **)(a1 + 24);
  sub_100019334(&v3);
  return a1;
}

uint64_t sub_10003DCF4(uint64_t a1)
{
  return a1;
}

void sub_10003DD34(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0LL;
  BOOL v10 = &v9;
  uint64_t v11 = 0x4802000000LL;
  uint64_t v12 = sub_10003DEDC;
  uint64_t v13 = sub_10003DF00;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  __p = 0LL;
  int v17 = 0;
  sub_100040300(a1 + 328, 0LL, (uint64_t)v18);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  uint64_t v8[2] = sub_10003DF14;
  v8[3] = &unk_10016B870;
  v8[4] = a2;
  v8[5] = &v9;
  sub_100040120(v18, v8);
  sub_100040280(v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v4 = v10;
    uint64_t v5 = *((unsigned int *)v10 + 16);
    *(void *)exception = &off_100189E78;
    char v6 = std::generic_category();
    *((void *)exception + 1) = v5;
    *((void *)exception + 2) = v6;
    uint64_t v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((void *)exception + 5) = v7;
    v4[6] = 0LL;
    v4[7] = 0LL;
    v4[5] = 0LL;
    exception[48] = 1;
  }

  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_10003DEA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10003DEDC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(_DWORD *)(a1 + sub_1000114F0(v1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_10003DF00(uint64_t a1)
{
}

uint64_t sub_10003DF14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10003DFE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(_DWORD *)((char *)v6 + *(void *)(v5 - sub_100026A94((const void **)(v10 + 24)) = *(_DWORD *)((_BYTE *)v6 + *(void *)(v5 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(&v5, a1);
  sub_1000049D8((uint64_t)v6, a2);
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf(v6);
  return std::ios::~ios(&v8);
}

void sub_10003E0C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003E0D4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016B970);
  sub_10003E298(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003E10C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B970);
  sub_10003E298(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003E14C(char *a1)
{
}

uint64_t sub_10003E190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003E1C4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10003E210(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016B970);
  sub_10003E298((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10003E250(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016B970);
  sub_10003E298((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10003E298(uint64_t a1)
{
  *(void *)a1 = off_10016BA40;
  sub_10003E334(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003E334(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003E49C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003E45C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003E488(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003E298(a1);
  operator delete(v1);
}

int *sub_10003E49C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      BOOL v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 72LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 72LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10003E680(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016BB90);
  sub_10003E844(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003E6B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016BB90);
  sub_10003E844(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003E6F8(char *a1)
{
}

uint64_t sub_10003E73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003E770(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10003E7BC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016BB90);
  sub_10003E844((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10003E7FC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016BB90);
  sub_10003E844((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10003E844(uint64_t a1)
{
  *(void *)a1 = off_10016BC60;
  sub_10003E8E0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003E8E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003EA48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003EA08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003EA34(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003E844(a1);
  operator delete(v1);
}

int *sub_10003EA48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      BOOL v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 79LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 79LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10003EC2C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016BDB0);
  sub_10003EDF0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003EC64(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016BDB0);
  sub_10003EDF0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003ECA4(char *a1)
{
}

uint64_t sub_10003ECE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10003ED1C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10003ED68(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016BDB0);
  sub_10003EDF0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10003EDA8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016BDB0);
  sub_10003EDF0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10003EDF0(uint64_t a1)
{
  *(void *)a1 = off_10016BE80;
  sub_10003EE8C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003EE8C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10003EFF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10003EFB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003EFE0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003EDF0(a1);
  operator delete(v1);
}

int *sub_10003EFF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      BOOL v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 98LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 98LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

std::string *sub_10003F1D8(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = (char)__dst->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = __dst->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }

    std::string::size_type v6 = HIBYTE(cap);
    uint64_t v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }

  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = __dst->__r_.__value_.__s.__size_;
      std::string::size_type v9 = 22LL;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0LL, size, __len, __src);
      return __dst;
    }
  }

  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = __dst->__r_.__value_.__s.__size_;
  }

  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    __dst->__r_.__value_.__s.__size_ = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_10003F294(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_10003F1D8(a1, __s, v4);
}

uint64_t **sub_10003F2C8(uint64_t **a1, unint64_t *a2, void *a3, _BYTE *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }

      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v10 = a1 + 1;
LABEL_10:
    uint64_t v12 = operator new(0x30uLL);
    v12[4] = *a3;
    *((_BYTE *)v12 + 40) = *a4;
    sub_100027200(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }

  return v10;
}

uint64_t sub_10003F38C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016BA40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003F3F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10003F408(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016BC60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003F470(_Unwind_Exception *a1)
{
}

uint64_t sub_10003F484(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  char v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      char v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }

  while (*v7);
  sub_10003F4FC((uint64_t **)a1, v4);
  operator delete(v4);
  return 1LL;
}

uint64_t *sub_10003F4FC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    char v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      char v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10003F56C(v6, a2);
  return v3;
}

uint64_t *sub_10003F56C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    char v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }

    do
    {
      unint64_t v3 = v4;
      char v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0LL;
      __n128 result = (uint64_t *)v2;
    }

    else
    {
      uint64_t v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + std::iostream::~basic_iostream(v2, v3 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }

    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        __int128 v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        uint64_t v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }

      else
      {
        uint64_t v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + std::iostream::~basic_iostream(v2, v3 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }

    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    uint64_t v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    uint64_t v7 = *(uint64_t **)v12;
  }

  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  int v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    int v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    *int v20 = (uint64_t)v7;
    uint64_t v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10003F8F0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016BE80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10003F958(_Unwind_Exception *a1)
{
}

void sub_10003F96C(int *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  sub_10003F9CC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_100018774((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10003F9B8(_Unwind_Exception *a1)
{
}

void *sub_10003F9CC(void *a1, int *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016BF00;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_100118D8C();
  uint64_t v6 = v5;
  sub_100116E6C(a1 + 3);
  a1[3] = &off_10016BF50;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_10003FA30(_Unwind_Exception *a1)
{
}

void sub_10003FA44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016BF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003FA54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016BF00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10003FA74(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10003FA84(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10003FAB0(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t sub_10003FADC()
{
  return 0LL;
}

uint64_t sub_10003FAE4()
{
  return 4294967251LL;
}

uint64_t sub_10003FAEC()
{
  return 0LL;
}

uint64_t sub_10003FAF4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_10003FAFC()
{
  return 1LL;
}

uint64_t sub_10003FB04(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 0LL;
}

void *sub_10003FB10(uint64_t a1, void *a2)
{
  return sub_100004E4C(a2, (uint64_t)"BackendNull", 11LL);
}

void *sub_10003FB24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100019244(a2, (void *)(a1 + 8));
}

uint64_t sub_10003FB30(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10003FB38(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10003FB40(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
}

uint64_t sub_10003FB4C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_10003FB58(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_10003FB74 + 4 * byte_100138E38[a2]))();
}

void *sub_10003FB74(void *a1)
{
  return sub_100004E4C(a1, (uint64_t)"read", 4LL);
}

void *sub_10003FB84(void *a1)
{
  return sub_100004E4C(a1, (uint64_t)"write", 5LL);
}

void *sub_10003FBCC(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 8);
  uint64_t v5 = sub_100004E4C(a1, (uint64_t)"device_command: ", 16LL);
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v5 + *(void *)(*v5 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  char v20 = 48;
  uint64_t v6 = sub_1000166BC(v5, &v20);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2LL;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) |= 0x200u;
  int v8 = sub_100004E4C(v6, (uint64_t)"[start: ", 8LL);
  uint64_t v9 = (uint64_t *)std::ostream::operator<<(v8, *(void *)a2);
  uint64_t v10 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 24) + 24) = 0LL;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) &= ~0x200u;
  uint64_t v11 = sub_100004E4C(v9, (uint64_t)" size: ", 7LL);
  uint64_t v12 = (void *)std::ostream::operator<<(v11, *(void *)(a2 + 8));
  uint64_t v13 = sub_100004E4C(v12, (uint64_t)" op_code: ", 10LL);
  uint64_t v14 = (void *)sub_10003FB58((uint64_t)v13, *(unsigned __int8 *)(a2 + 16));
  uint64_t v15 = sub_100004E4C(v14, (uint64_t)" num_buffers: ", 14LL);
  uint64_t v16 = (void *)std::ostream::operator<<(v15, *(unsigned __int16 *)(a2 + 18));
  int v17 = sub_100004E4C(v16, (uint64_t)" buffer_size: ", 14LL);
  uint64_t v18 = (void *)std::ostream::operator<<(v17, *(unsigned int *)(a2 + 20));
  sub_100004E4C(v18, (uint64_t)"]", 1LL);
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  return a1;
}

char *sub_10003FD4C(char *__dst, __int128 *a2, unint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100040504(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }

  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[56] = a3 != 0;
  if (a3)
  {
    sub_10003FE88((void *)__dst + 3, a3);
    do
    {
      uint64_t v6 = __dst;
      if (__dst[23] < 0) {
        uint64_t v6 = *(char **)__dst;
      }
      sub_1000F969C((int)&v9, v6);
      sub_10003FF18((void *)__dst + 3, &v9);
      sub_1000F95F0(&v9);
      --a3;
    }

    while (a3);
  }

  else
  {
    uint64_t v7 = __dst;
    if (__dst[23] < 0) {
      uint64_t v7 = *(char **)__dst;
    }
    sub_1000F969C((int)&v9, v7);
    sub_10003FF18((void *)__dst + 3, &v9);
    sub_1000F95F0(&v9);
  }

  return __dst;
}

void sub_10003FE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10003FE88(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100016F4C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10001848C(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    sub_100018408(a1, v7);
    return sub_1000184C0((uint64_t)v7);
  }

  return result;
}

void sub_10003FF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_10003FF18(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 3;
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_10001848C(v4, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[8 * v9];
    uint64_t v18 = &v13[8 * v12];
    sub_1000F96A0(v16, a2);
    int v17 = v16 + 8;
    sub_100018408(a1, &v15);
    unint64_t v8 = a1[1];
    sub_1000184C0((uint64_t)&v15);
  }

  else
  {
    sub_1000F96A0(*(void **)(v4 - 8), a2);
    unint64_t v8 = v7 + 8;
    a1[1] = v7 + 8;
  }

  a1[1] = v8;
  return v8 - 8;
}

void sub_100040008(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100040020(uint64_t result, int a2)
{
  uint64_t v2 = *(dispatch_object_t **)(result + 24);
  for (uint64_t i = *(dispatch_object_t **)(result + 32); v2 != i; ++v2)
    uint64_t result = sub_1000F9750(v2, a2);
  return result;
}

void sub_100040068(uint64_t a1)
{
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + sub_1000114F0(v50 + 112) = v2 - 1;
LABEL_5:
    std::mutex::unlock(v5.__m_);
    return;
  }

  do
  {
    std::condition_variable::wait((std::condition_variable *)a1, &v5);
    uint64_t v3 = *(void *)(a1 + 112);
  }

  while (!v3);
  BOOL owns = v5.__owns_;
  *(void *)(a1 + sub_1000114F0(v50 + 112) = v3 - 1;
  if (owns) {
    goto LABEL_5;
  }
}

void sub_1000400E0(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  ++*(void *)(a1 + 112);
  std::condition_variable::notify_one((std::condition_variable *)a1);
  std::mutex::unlock(v2);
}

void sub_100040120(dispatch_group_t *a1, void *a2)
{
  if (*((_BYTE *)a1 + 136))
  {
    sub_100040068((uint64_t)(a1 + 2));
    dispatch_group_t v4 = *a1;
    std::unique_lock<std::mutex> v5 = (unint64_t *)((char *)*a1 + 48);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    uint64_t v8 = (uint64_t)v4 + 24;
    uint64_t v7 = *((void *)v4 + 3);
    unint64_t v9 = v6 % ((*(void *)(v8 + 8) - v7) >> 3);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000LL;
    void v13[2] = sub_10004020C;
    void v13[3] = &unk_10016C020;
    v13[4] = a2;
    void v13[5] = a1;
    sub_1000F96B8((dispatch_queue_t *)(v7 + 8 * v9), a1 + 1, v13);
  }

  else
  {
    dispatch_group_t v10 = *a1;
    uint64_t v11 = (unint64_t *)((char *)*a1 + 48);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    sub_1000F96B8( (dispatch_queue_t *)(*((void *)v10 + 3)
                         + 8 * (v12 % ((uint64_t)(*((void *)v10 + 4) - *((void *)v10 + 3)) >> 3))),
      a1 + 1,
      a2);
  }

void sub_10004020C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  sub_1000400E0(v1 + 16);
}

uint64_t sub_100040234(uint64_t a1, dispatch_time_t a2)
{
  return sub_1000F961C((dispatch_group_t *)(a1 + 8), a2);
}

uint64_t sub_10004023C(uint64_t a1)
{
  uint64_t v2 = (dispatch_object_s **)(a1 + 8);
  sub_1000F961C((dispatch_group_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
  sub_100040590(a1 + 16);
  sub_1000F95F0(v2);
  return a1;
}

uint64_t sub_100040284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_1000F95C8((dispatch_group_t *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (a3)
  {
    sub_1000405C8(a1 + 16);
    *(void *)(a1 + 16) = 1018212795LL;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 56) = 0LL;
    *(void *)(a1 + sub_1000114F0(v1 + 64) = 850045863LL;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = 0LL;
    *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = a3;
    *(_BYTE *)(a1 + 136) = 1;
  }

  return a1;
}

uint64_t sub_100040300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100040284(a3, a1, a2);
}

uint64_t sub_100040310@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100040324(a4, a1, a2, a3);
}

uint64_t sub_100040324(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  unint64_t v6 = a2 + 6;
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2[3] + 8 * (v7 % ((uint64_t)(a2[4] - a2[3]) >> 3));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000LL;
  v9[2] = sub_100040408;
  void v9[3] = &unk_10016C048;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a4;
  sub_1000F9D10((dispatch_block_t *)(a1 + 16), v9);
  if (*(void *)(a1 + 16) && *(_BYTE *)(*(void *)a1 + 56LL)) {
    sub_1000F96C8(*(dispatch_queue_t **)(a1 + 8), (dispatch_block_t *)(a1 + 16), a4);
  }
  return a1;
}

void sub_1000403F4(_Unwind_Exception *a1)
{
}

void sub_100040408(void *a1)
{
  uint64_t v2 = a1[5];
  (*(void (**)(void))(a1[4] + 16LL))();
  sub_1000F96C8(*(dispatch_queue_t **)(v2 + 8), (dispatch_block_t *)(v2 + 16), a1[6]);
}

uint64_t sub_10004043C(uint64_t a1)
{
  return a1;
}

void sub_10004046C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (*(_BYTE *)(*(void *)a1 + 56LL))
    {
      uint64_t v2 = *(dispatch_queue_t **)(a1 + 8);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 0x40000000LL;
      v3[2] = sub_1000404F4;
      v3[3] = &unk_10016C068;
      v3[4] = a1;
      sub_1000F96B0(v2, v3);
      sub_1000F9728(*(dispatch_queue_t **)(a1 + 8), &stru_10016C0A8);
    }
  }

void sub_1000404F4(uint64_t a1)
{
}

void *sub_100040504(_BYTE *__dst, void *__src, unint64_t a3)
{
  std::unique_lock<std::mutex> v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_100004AC0();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    __int128 v5[2] = v7 | 0x8000000000000000LL;
    void *v5 = v8;
    std::unique_lock<std::mutex> v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_100040590(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
  }

  return a1;
}

void sub_1000405C8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
    *(_BYTE *)(a1 + 120) = 0;
  }

void sub_1000406EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004079C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100040A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000410B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000414CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000416CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

#error "100041E6C: call analysis failed (funcsize=223)"
BOOL __cdecl -[DIAttachParams updateStatFSWithError:](DIAttachParams *self, SEL a2, id *a3)
{
  void *v5;
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  DIStatFS *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  BOOL v19;
  void *v20;
  void *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::unique_lock<std::mutex> v5 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  uint64_t v6 = [v5 isFileURL];

  if (v6)
  {
    -[DIBaseParams backend](self, "backend");
    sub_100116E98((uint64_t)&v23, &v25);
    uint64_t v7 = sub_1000FDD34((uint64_t)&v25);
    uint64_t v8 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        dispatch_group_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    uint64_t v11 = v24;
    if (!v24) {
      goto LABEL_11;
    }
    unint64_t v12 = (unint64_t *)&v24->__shared_owners_;
    do
      uint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }

    else
    {
LABEL_11:
      if ((v7 & 0x80000000) == 0)
      {
LABEL_12:
        uint64_t v14 = -[DIStatFS initWithFileDescriptor:error:]( objc_alloc(&OBJC_CLASS___DIStatFS),  "initWithFileDescriptor:error:",  v7,  a3);
        -[DIAttachParams setInputStatFS:](self, "setInputStatFS:", v14);

        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[DIAttachParams inputStatFS](self, "inputStatFS"));
        if (!v15) {
          return 0;
        }
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[DIAttachParams inputStatFS](self, "inputStatFS"));
        [v16 logWithHeader:@"Input underlying FS"];

        goto LABEL_14;
      }
    }

    return +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  @"Unexpected backend type for file",  a3);
  }

void sub_100042340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_44:
    __int128 v32 = objc_claimAutoreleasedReturnValue( +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  v27,  a3));
    goto LABEL_45;
  }

  return (id)objc_claimAutoreleasedReturnValue( +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  @"Cache is not supported when using pstack.",  a3));
}

void sub_1000428EC(_Unwind_Exception *a1, int a2)
{
  uint64_t v7 = v5;

  if (a2 == 1)
  {
    id v10 = [objc_begin_catch(a1) reason];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_claimAutoreleasedReturnValue( +[DIError nilWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "nilWithEnumValue:verboseInfo:error:",  150LL,  v11,  v2));

    objc_end_catch();
    JUMPOUT(0x1000428A4LL);
  }

  _Unwind_Resume(a1);
}

void sub_100042B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000430D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000431B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000434A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  sub_1000114F0((uint64_t)&__p);
  sub_10004353C(&a20);

  _Unwind_Resume(a1);
}

void *sub_10004353C(void *a1)
{
  *a1 = off_100184F88;
  a1[3] = off_100185068;
  a1[4] = off_1001850A0;
  sub_1000458AC((uint64_t)(a1 + 8));
  sub_1000114F0((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

LABEL_38:
    int v29 = 0;
    *__error() = v30;
    goto LABEL_39;
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  uint64_t v15 = [v13 copyItemAtURL:v14 toURL:v12 error:a3];

  if ((v15 & 1) == 0)
  {
    unint64_t v30 = *__error();
    if (!sub_1000B8654())
    {
      __int128 v40 = sub_1000B85DC();
      char v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        char v46 = 51;
        __int128 v47 = 2080;
        __int128 v48 = "-[DIConvertParams prepareParamsForSquashWithError:]";
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%.*s: Failed to copy source disk image to temporary URL",  buf,  0x12u);
      }

      goto LABEL_38;
    }

    uint64_t v44 = 0LL;
    __int128 v37 = sub_1000B85DC();
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      char v39 = 3LL;
    }
    else {
      char v39 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    char v46 = 51;
    __int128 v47 = 2080;
    __int128 v48 = "-[DIConvertParams prepareParamsForSquashWithError:]";
    LODWORD(v43) = 18;
    uint64_t v34 = (char *)_os_log_send_and_compose_impl( v39,  &v44,  0LL,  0LL,  &_mh_execute_header,  v38,  16LL,  "%.*s: Failed to copy source disk image to temporary URL",  (int)buf,  v43);

    if (v34) {
      goto LABEL_34;
    }
    goto LABEL_38;
  }

  uint64_t v16 = -[DIBaseParams initWithURL:error:](objc_alloc(&OBJC_CLASS___DIBaseParams), "initWithURL:error:", v12, a3);
  -[DIConvertParams setOutputParams:](self, "setOutputParams:", v16);

  int v17 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertParams outputParams](self, "outputParams"));
  uint64_t v18 = [v17 openExistingImageWithFlags:2 error:a3];

  if ((v18 & 1) == 0)
  {
LABEL_18:
    int v29 = 0;
    goto LABEL_39;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_shadowURLs, "objectAtIndex:", 0LL));
  char v20 = +[DIURL newDIURLWithNSURL:](&OBJC_CLASS___DIURL, "newDIURLWithNSURL:", v19);
  -[DIBaseParams setInputURL:](self, "setInputURL:", v20);

  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 path]);
  if (!v22)
  {

    goto LABEL_41;
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents componentsWithURL:resolvingAgainstBaseURL:]( &OBJC_CLASS___NSURLComponents,  "componentsWithURL:resolvingAgainstBaseURL:",  v23,  1LL));
  uint64_t v25 = v24 == 0LL;

  if (v25)
  {
LABEL_41:
    int v29 = +[DIError failWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:description:error:",  22LL,  @"Malformed URL format",  a3);
    goto LABEL_39;
  }

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", self->_shadowURLs));
  [v26 removeObjectAtIndex:0];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams shadowChain](self, "shadowChain"));
  uint64_t v28 = [v27 addShadowURLs:v26 error:a3];

  if ((v28 & 1) != 0)
  {
    -[DIBaseParams setDiskImageParamsXPC:](self, "setDiskImageParamsXPC:", 0LL);
    int v29 = -[DIBaseParams openExistingImageWithFlags:error:](self, "openExistingImageWithFlags:error:", 0LL, a3);
  }

  else
  {
    int v29 = 0;
  }

LABEL_39:
  return v29;
}

        *__error() = v27;
      }

    sub_1000BB354(&v55);
    if (v20) {
      break;
    }
    if (v17 == v13) {
      goto LABEL_57;
    }
  }

  uint64_t v13 = v5;
LABEL_57:
  char v39 = v65;
  if (v65)
  {
    __int128 v40 = (unint64_t *)&v65->__shared_owners_;
    do
      char v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  uint64_t v42 = v57;
  if (v57)
  {
    uint64_t v43 = (unint64_t *)&v57->__shared_owners_;
    do
      uint64_t v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  return v13;
}

  uint64_t v34 = v77;
  if (v77)
  {
    __int128 v35 = (unint64_t *)&v77->__shared_owners_;
    do
      uint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  __int128 v37 = v76;
  if (v76)
  {
    uint64_t v38 = (unint64_t *)&v76->__shared_owners_;
    do
      char v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  __int128 v40 = v75;
  if (v75)
  {
    char v41 = (unint64_t *)&v75->__shared_owners_;
    do
      uint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  uint64_t v43 = v74;
  if (v74)
  {
    uint64_t v44 = (unint64_t *)&v74->__shared_owners_;
    do
      __int128 v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  char v46 = v73;
  if (v73)
  {
    __int128 v47 = (unint64_t *)&v73->__shared_owners_;
    do
      __int128 v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  uint64_t v49 = v72;
  if (v72)
  {
    uint64_t v50 = (unint64_t *)&v72->__shared_owners_;
    do
      __int128 v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

  if (v69 && &v70 != __p) {
    operator delete(__p);
  }
  sub_100014E54((uint64_t)v66);
  return sub_100016DE0((uint64_t *)&v78);
}

void sub_100043BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043F28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10004402C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000440E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004446C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22)
{
  if (a2 == 1)
  {
    id v25 = +[DIError nilWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"failed to open existing output file",  v22);
    objc_claimAutoreleasedReturnValue(v25);
    __cxa_end_catch();
    JUMPOUT(0x100044324LL);
  }

  _Unwind_Resume(a1);
}

LABEL_65:
      uint64_t v6 = 0;
      goto LABEL_66;
    }

LABEL_46:
    goto LABEL_65;
  }

  std::unique_lock<std::mutex> v5 = @"Invalid output format argument";
  return +[DIError failWithPOSIXCode:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:verboseInfo:error:",  22LL,  v5,  a3);
}

void sub_100044FB8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    id v30 = [objc_begin_catch(a1) reason];
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v31,  v22);

    objc_end_catch();
    JUMPOUT(0x1000445ECLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000452B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000452C4(uint64_t a1)
{
}

id sub_1000452CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_100045350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100045554(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4;
  uint64_t v7 = sub_100116E6C((void *)a1);
  *uint64_t v7 = off_100184F88;
  v7[3] = off_100185068;
  v7[4] = off_1001850A0;
  sub_1000FB128(v10, a2, a3);
  sub_100045650((uint64_t)v10, &v9, (void *)(a1 + 40));
  sub_1000FAB04((uint64_t)v10);
  *(void *)(a1 + 56) = *(void *)(a1 + 40) + 8LL;
  *(void *)(a1 + sub_1000114F0(v1 + 64) = a1 + 88;
  *(_OWORD *)(a1 + 72) = xmmword_1001388C0;
  return a1;
}

void sub_100045624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  dispatch_group_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_100045650@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  uint64_t result = sub_1000456B0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10004569C(_Unwind_Exception *a1)
{
}

void *sub_1000456B0(void *a1, uint64_t a2, char *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016C100;
  sub_100045738((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1000456E8(_Unwind_Exception *a1)
{
}

void sub_1000456FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016C100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004570C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016C100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10004572C(uint64_t a1)
{
  return sub_10004587C(a1 + 24);
}

uint64_t sub_100045738(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *(void *)a1 = off_10016C150;
  __int128 v4 = *(_OWORD *)(a2 + 12);
  __int128 v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = a3;
  *(_BYTE *)(a1 + 49) = sub_1000457D0(a1);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + sub_1000114F0(v1 + 64) = v6;
  *(void *)(a1 + 72) = 0LL;
  *(_BYTE *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(_BYTE *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0LL;
  return a1;
}

void sub_1000457BC(_Unwind_Exception *a1)
{
}

BOOL sub_1000457D0(uint64_t a1)
{
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1717726579 && v4 == 115;
  }

  else
  {
    BOOL v6 = 0LL;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }

  return v6;
}

uint64_t sub_100045860(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_100045868(uint64_t a1)
{
  unint64_t v1 = (void *)sub_1000FAB04(a1);
  operator delete(v1);
}

uint64_t sub_10004587C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136)) {
    sub_100016DE0((uint64_t *)(a1 + 96));
  }
  return sub_1000FAB04(a1);
}

uint64_t sub_1000458AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v3 = *(void **)a1;
    do
    {
      uint64_t v4 = v3[7];
      if (v4) {
        *(void *)(v4 + 32) = 0LL;
      }
      --v2;
      int v3 = (void *)(sub_1000114F0((uint64_t)v3) + 64);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

LABEL_53:
  *__error() = v27;
LABEL_54:
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  v17,  v14));
  uint64_t v44 = v43;
  if (a7) {
    *a7 = v43;
  }

  return v44;
}

void sub_1000460E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046590(id a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:",  @"/System/Library/PrivateFrameworks/DiskImages2.framework"));
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:"));
  uint64_t v2 = (void *)qword_100198F70;
  qword_100198F70 = v1;
}

void sub_1000465F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100046720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046B7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100046BA0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_100046FB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100046FDC(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t make_error_code(uint64_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_100198F80);
  if ((v1 & 1) == 0)
  {
    int v3 = result;
    int v2 = __cxa_guard_acquire(&qword_100198F80);
    LODWORD(result) = v3;
    if (v2)
    {
      __cxa_atexit( (void (*)(void *))std::error_category::~error_category,  &off_1001985E8,  (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100198F80);
      LODWORD(result) = v3;
    }
  }

  return result;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, std::__fs::filesystem::path *a2, int a3)
{
  BOOL v6 = operator new(0x270uLL);
  bzero(v6, 0x270uLL);
  *a1 = v6;
  sub_1000476D8(a2, (uint64_t)v6, a3, (uint64_t)v13);
  if (!v13[16])
  {
    uint64_t v7 = sub_100047874((uint64_t)v13);
    int error_code = make_error_code(162LL);
    if (*(void *)(v7 + 8) != v9 || *(_DWORD *)v7 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)sub_100047874((uint64_t)v13);
    }
  }

  return a1;
}

void sub_1000476C4(_Unwind_Exception *a1)
{
}

const std::error_category *sub_1000476D8@<X0>( std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (LOBYTE(v16[0]) == 255 || LOBYTE(v16[0]) == 0)
  {
    *(void *)&__int128 v14 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((void *)&v14 + 1) = 75LL;
    int v15 = 16;
    sub_1000508AC(v16, &v14);
    sub_100004E4C(&v17, (uint64_t)"Diskimageuio: path ", 19LL);
    if ((char)a1->__pn_.__r_.__value_.__s.__size_ < 0)
    {
      sub_100040504(__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    }

    else
    {
      *(_OWORD *)__p = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
      int64_t cap = a1->__pn_.__r_.__value_.__l.__cap_;
    }

    if (cap >= 0) {
      id v10 = __p;
    }
    else {
      id v10 = (void **)__p[0];
    }
    if (cap >= 0) {
      uint64_t v11 = HIBYTE(cap);
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_100004E4C(&v17, (uint64_t)v10, v11);
    sub_100004E4C(&v17, (uint64_t)" doesn't exist", 14LL);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    std::ostream::~ostream(&v17, off_10016D5C0);
    sub_1000511D4((uint64_t)v16);
    std::ios::~ios(&v18);
    uint64_t result = std::generic_category();
    *(void *)a4 = 2LL;
    *(void *)(a4 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
    *(_BYTE *)(a4 + 16) = 0;
  }

  else
  {
    *(_DWORD *)(a2 + 5sub_1000114F0(v1 + 64) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)sub_100050994(a2, 0LL, 1LL);
  }

  return result;
}

void sub_100047844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t sub_100047874(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_10016C288;
  }

  return result;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = operator new(0x270uLL);
  bzero(v8, 0x270uLL);
  *a1 = v8;
  sub_10004799C((uint64_t)v8, a2, a3, a4, v15);
  if (!v15[16])
  {
    uint64_t v9 = sub_100047874((uint64_t)v15);
    int error_code = make_error_code(162LL);
    if (*(void *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)sub_100047874((uint64_t)v15);
    }
  }

  return a1;
}

void sub_100047988(_Unwind_Exception *a1)
{
}

void sub_10004799C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  if (a4 == 1) {
    uint64_t v7 = &_mh_execute_header + 2;
  }
  else {
    uint64_t v7 = &_mh_execute_header;
  }
  sub_10006120C(&v11, a2, a3, v7, v15, 0LL);
  sub_100049194(a1 + 48, a1 + 48, (uint64_t)&v11);
  if (v14 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  *(_DWORD *)(a1 + 560) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, unsigned int a2, int a3, char a4)
{
  uint64_t v8 = operator new(0x270uLL);
  bzero(v8, 0x270uLL);
  *a1 = v8;
  sub_100047BE0((uint64_t)v8, a2, a3, a4, (uint64_t)v15);
  if (!v15[16])
  {
    uint64_t v9 = sub_100047874((uint64_t)v15);
    int error_code = make_error_code(162LL);
    if (*(void *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)sub_100047874((uint64_t)v15);
    }
  }

  return a1;
}

void sub_100047BCC(_Unwind_Exception *a1)
{
}

_OWORD *sub_100047BE0@<X0>( uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v17 = a2;
  char v16 = a4;
  *(_DWORD *)(a1 + 5sub_1000114F0(v1 + 64) = a3;
  *(_DWORD *)(a1 + 56std::iostream::~basic_iostream(v2, v3 + 8) = a3;
  int v14 = 2 * ((a3 - 1) < 2);
  sub_100056780(&v17, &v14, &v16, &v15);
  sub_100014DF0(a1 + 24, &v15);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v8 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = operator new(0x4CuLL);
  sub_10010D554(v11, v10);
  unint64_t v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v11;
  if (v12) {
    operator delete(v12);
  }
  return sub_100050994(a1, *(_DWORD *)(a1 + 564), 0, a5);
}

void sub_100047CD0(_Unwind_Exception *a1, int a2)
{
  __int128 v5 = v3;
  operator delete(v5);
  if (a2 == 2)
  {
    uint64_t v7 = *((unsigned int *)__cxa_begin_catch(a1) + 2);
    uint64_t v8 = std::generic_category();
    *(void *)uint64_t v2 = v7;
    *(void *)(v2 + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
    *(_BYTE *)(v2 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x100047CBCLL);
  }

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100047CA8LL);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::create( std::__fs::filesystem::path *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = v4;
  uint64_t v4 = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
}

void diskimage_uio::diskimage_open_params::create( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = v5;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

void diskimage_uio::diskimage_open_params::create( unsigned int a1@<W0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = v5;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    sub_1000114F0(v4 + 608);
    sub_1000114F0(v4 + 592);
    sub_1000114F0(v4 + 576);
    sub_100049A5C(v4 + 48);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0LL;
    if (v5) {
      operator delete(v5);
    }
    sub_1000114F0(v4 + 24);
    operator delete((void *)v4);
  }

  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params( diskimage_uio::diskimage_open_params *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    sub_1000114F0(v2 + 608);
    sub_1000114F0(v2 + 592);
    sub_1000114F0(v2 + 576);
    sub_100049A5C(v2 + 48);
    int v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;
    if (v3) {
      operator delete(v3);
    }
    sub_1000114F0(v2 + 24);
    operator delete((void *)v2);
  }

  *(void *)this = 0LL;
}

_OWORD *sub_100047F94@<X0>(const std::error_category *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = sub_10004FA44(a1, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = a1[5].__vftable != 0LL;
    char v5 = 1;
  }

  else
  {
    uint64_t result = (_OWORD *)sub_100047874((uint64_t)v6);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }

  a2[16] = v5;
  return result;
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>( diskimage_uio::diskimage_open_params *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100048004(*(void *)this, a2).n128_u64[0];
  return result;
}

__n128 sub_100048004@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if (v13[16])
  {
    uint64_t v4 = *(unsigned int *)(a1 + 552);
    if ((_DWORD)v4 == -1) {
      sub_100017130();
    }
    v10[0] = &v8;
    ((void (*)(void *, uint64_t))off_10016F390[v4])(v10, a1 + 48);
  }

  else
  {
    *(void *)&__int128 v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((void *)&v8 + 1) = 80LL;
    int v9 = 16;
    sub_100057A38(v10, &v8);
    sub_100004E4C(&v11, (uint64_t)"Diskimageuio: query format failed ", 34LL);
    BOOL v6 = (unsigned int *)sub_100047874((uint64_t)v13);
    sub_1000517DC((uint64_t)v10, v6);
    std::ostream::~ostream(&v11, off_10016F250);
    sub_100057B9C((uint64_t)v10);
    std::ios::~ios(&v12);
    uint64_t v7 = (__n128 *)sub_100047874((uint64_t)v13);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }

  return result;
}

void sub_100048108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *diskimage_uio::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "auto";
    uint64_t v3 = 4LL;
  }

  else if (a2 == 1)
  {
    uint64_t v2 = "read write";
    uint64_t v3 = 10LL;
  }

  else if (a2)
  {
    uint64_t v2 = "unknown";
    uint64_t v3 = 7LL;
  }

  else
  {
    uint64_t v2 = "read only";
    uint64_t v3 = 9LL;
  }

  return sub_100004E4C(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;
  switch(a2)
  {
    case 1:
      uint64_t v2 = "raw";
      uint64_t v3 = 3LL;
      return sub_100004E4C(a1, (uint64_t)v2, v3);
    case 2:
      uint64_t v2 = "udro";
      goto LABEL_11;
    case 3:
      uint64_t v2 = "udzo";
      goto LABEL_11;
    case 4:
      uint64_t v2 = "ulfo";
      goto LABEL_11;
    case 5:
      uint64_t v2 = "ulmo";
      goto LABEL_11;
    case 6:
      uint64_t v2 = "udzo_max";
      uint64_t v3 = 8LL;
      return sub_100004E4C(a1, (uint64_t)v2, v3);
    case 7:
      uint64_t v2 = "udsb";
      goto LABEL_11;
    case 8:
      uint64_t v2 = "asif";
LABEL_11:
      uint64_t v3 = 4LL;
      break;
    case 11:
      uint64_t v2 = "pstack";
      uint64_t v3 = 6LL;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7LL;
      break;
  }

  return sub_100004E4C(a1, (uint64_t)v2, v3);
}

void ***sub_100048220(void ***a1, const void **a2, char *a3, char a4)
{
  *a1 = 0LL;
  if (!*a2
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100189E78;
    uint64_t v38 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v38;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    exception[7] = "pstack_header";
    void *exception = &off_10016F5F0;
  }

  memset(v46, 0, sizeof(v46));
  uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v7 + 176LL))(v7);
  sub_100058C90(&__p, a3);
  sub_100106ED4(v8, (uint64_t *)&__p, a4, (uint64_t)&v44);
  if (v44 == v45)
  {
    char v39 = __cxa_allocate_exception(0x40uLL);
    void *v39 = &off_100189E78;
    __int128 v40 = std::generic_category();
    v39[1] = 22LL;
    v39[2] = v40;
    *((_BYTE *)v39 + 24) = 0;
    *((_BYTE *)v39 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v39[7] = "pstack_header";
    void *v39 = &off_10016F5F0;
  }

  int v9 = (void **)operator new(0x18uLL);
  dispatch_object_s *v9 = 0LL;
  v9[1] = 0LL;
  v9[2] = 0LL;
  __p.__r_.__value_.__r.__words[0] = 0LL;
  sub_100058A90(a1, v9);
  sub_100058A90((void ***)&__p, 0LL);
  sub_1000487AC((char **)*a1, v45 - v44);
  uint64_t v10 = v44;
  for (uint64_t i = v45; v10 != i; ++v10)
  {
    uint64_t v12 = std::generic_category();
    v42[0] = 22LL;
    v42[1] = v12;
    char v43 = 0;
    uint64_t v13 = (char *)*v10;
    uint64_t v14 = *((void *)*v10 + 7);
    if (v14)
    {
      diskimage_uio::diskimage_open_params::create((uint64_t)(v13 + 32), v14, *((_DWORD *)v13 + 1), (uint64_t)&__p);
      sub_100048868((diskimage_uio::diskimage_open_params *)v42, (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16]) {
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      }
    }

    else
    {
      sub_100058C90(&v41.__pn_, v13 + 8);
      diskimage_uio::diskimage_open_params::create(&v41, (*v10)[1], (uint64_t)&__p);
      sub_100048868((diskimage_uio::diskimage_open_params *)v42, (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16]) {
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      }
    }

    if (!v43)
    {
      __int128 v35 = (char *)__cxa_allocate_exception(0x40uLL);
      __int128 v36 = *(_OWORD *)sub_100047874((uint64_t)v42);
      *(void *)__int128 v35 = &off_100189E78;
      *(_OWORD *)(v35 + std::iostream::~basic_iostream(v2, v3 + 8) = v36;
      v35[24] = 0;
      v35[48] = 0;
      *((void *)v35 + 7) = "pstack: unsupported node";
    }

    __int128 v15 = *a1;
    int v16 = **v10;
    LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = v16;
    uint64_t v17 = v42[0];
    v41.__pn_.__r_.__value_.__l.__size_ = v42[0];
    v42[0] = 0LL;
    uint64_t v18 = (char *)v15[1];
    uint64_t v19 = (char *)v15[2];
    if (v18 >= v19)
    {
      uint64_t v21 = (v18 - (_BYTE *)*v15) >> 4;
      unint64_t v22 = v21 + 1;
      uint64_t v23 = v19 - (_BYTE *)*v15;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v49 = v15 + 2;
      id v25 = (char *)sub_100016F60((uint64_t)(v15 + 2), v24);
      uint64_t v27 = &v25[16 * v21];
      *(_DWORD *)uint64_t v27 = v41.__pn_.__r_.__value_.__l.__data_;
      *((void *)v27 + 1) = v41.__pn_.__r_.__value_.__l.__size_;
      v41.__pn_.__r_.__value_.__l.__size_ = 0LL;
      int v29 = *v15;
      std::string::size_type v28 = (std::string::size_type)v15[1];
      if ((void *)v28 == *v15)
      {
        std::string::size_type v32 = (std::string::size_type)v15[1];
        id v30 = &v25[16 * v21];
      }

      else
      {
        id v30 = &v25[16 * v21];
        do
        {
          int v31 = *(_DWORD *)(v28 - 16);
          v28 -= 16LL;
          *((_DWORD *)v30 - 4) = v31;
          v30 -= 16;
          *((void *)v30 + 1) = *(void *)(v28 + 8);
          *(void *)(v28 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
        }

        while ((void *)v28 != v29);
        std::string::size_type v32 = (std::string::size_type)*v15;
        std::string::size_type v28 = (std::string::size_type)v15[1];
      }

      char v20 = v27 + 16;
      *__int128 v15 = v30;
      __p.__r_.__value_.__r.__words[0] = v32;
      __p.__r_.__value_.__l.__size_ = v32;
      v15[1] = v27 + 16;
      __p.__r_.__value_.__l.__cap_ = v28;
      unint64_t v33 = v15[2];
      __int128 v15[2] = &v25[16 * v26];
      __int128 v48 = v33;
      sub_100058AD0((uint64_t)&__p);
    }

    else
    {
      *(_DWORD *)uint64_t v18 = v16;
      *((void *)v18 + 1) = v17;
      char v20 = v18 + 16;
      v41.__pn_.__r_.__value_.__l.__size_ = 0LL;
    }

    v15[1] = v20;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v41.__pn_.__r_.__value_.__r.__words[1]);
    if (v43) {
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v42);
    }
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  sub_100048AE8((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  sub_100058B20((void ***)&__p);
  return a1;
}

void sub_100048658( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, char a27, int a28, __int16 a29, char a30)
{
  a16 = &a19;
  sub_100048AE8((void ***)&a16);
  a19 = &a22;
  sub_100058B20((void ***)&a19);
  sub_100058A90(v30, 0LL);
  _Unwind_Resume(a1);
}

uint64_t sub_100048748(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_100189E78;
  BOOL v6 = std::generic_category();
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)(a1 + 56) = a2;
  *(void *)a1 = &off_10016F5F0;
  return a1;
}

uint64_t sub_1000487AC(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100016F4C();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    BOOL v6 = (char *)sub_100016F60(result, a2);
    int v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v8);
      uint64_t v10 = &v6[v5];
    }

    else
    {
      uint64_t v10 = &v6[v5];
      do
      {
        int v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16LL;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((void *)v10 + 1) = *(void *)(v8 + 8);
        *(void *)(v8 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      }

      while ((char *)v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }

    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_100058AD0((uint64_t)&v14);
  }

  return result;
}

diskimage_uio::diskimage_open_params *sub_100048868(diskimage_uio::diskimage_open_params *a1, __int128 *a2)
{
  char v5 = *((_BYTE *)a2 + 16);
  if (v5)
  {
    *(void *)&__int128 v4 = *(void *)a2;
    *(void *)a2 = 0LL;
  }

  else
  {
    __int128 v4 = *a2;
  }

  sub_100058F0C((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  return a1;
}

void sub_1000488D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node( uint64_t a1, int a2, int a3, __int128 *a4, __int128 *a5, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100040504((_BYTE *)(a1 + 8), *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v9 = *a4;
    *(void *)(a1 + 24) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  }

  if (*((char *)a5 + 23) < 0)
  {
    sub_100040504((_BYTE *)(a1 + 32), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v10 = *a5;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }

  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_100048990(_Unwind_Exception *exception_object)
{
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_100048A20(std::error_category *a1)
{
}

const char *sub_100048A34()
{
  return "disk image";
}

void *sub_100048A40@<X0>(int a1@<W1>, void *a2@<X8>)
{
  else {
    uint64_t v2 = off_10016F608[a1 - 150];
  }
  return sub_100004CB0(a2, v2);
}

uint64_t sub_100048A6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_100048ABC((diskimage_uio::stack_image_node **)(i - 8), 0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100048ABC(diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    diskimage_uio::stack_image_node::~stack_image_node(v3);
    operator delete(v4);
  }

void sub_100048AE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    __int128 v4 = (diskimage_uio::stack_image_node **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100048ABC(--v4, 0LL);
      while (v4 != v2);
      char v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100048B60(std::exception *a1)
{
}

uint64_t sub_100048B74(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 504);
  uint64_t v4 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1) {
      return result;
    }
  }

  else if ((_DWORD)v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10016C2A0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }

  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_10016C2D0[v4])(&v5, result, a2);
}

void sub_100048C10(uint64_t a1, void ***a2)
{
}

uint64_t sub_100048C1C(uint64_t a1, uint64_t a2)
{
  return sub_1000114F0(a2);
}

uint64_t sub_100048C4C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504)) {
    return sub_100048CD4(result);
  }
  return result;
}

void sub_100048C64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100048C6C(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 2) {
    return sub_100048FF4(result, (uint64_t)a3);
  }
  *a2 = *a3;
  __int128 v4 = a3[1];
  __int128 v5 = a3[2];
  __int128 v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_100048CA0(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 3) {
    return sub_100049098(result, a3);
  }
  *a2 = *a3;
  return result;
}

void sub_100048CC4(uint64_t *a1, void ***a2, uint64_t *a3)
{
}

void sub_100048CCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100048CD4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void sub_100048D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v3 = *(_OWORD *)(a3 + 16);
    __int128 v4 = *(_OWORD *)(a3 + 32);
    __int128 v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + sub_1000114F0(v1 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 32) = v4;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    __int128 v6 = *(_OWORD *)(a3 + 88);
    __int128 v7 = *(_OWORD *)(a3 + 104);
    __int128 v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v6;
    __int128 v9 = *(_OWORD *)(a3 + 152);
    __int128 v10 = *(_OWORD *)(a3 + 168);
    __int128 v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v10;
    *(_OWORD *)(a2 + sub_1000114F0(v1 + 152) = v9;
    __int128 v12 = *(_OWORD *)(a3 + 248);
    __int128 v13 = *(_OWORD *)(a3 + 264);
    __int128 v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 2sub_1000114F0(v1 + 64) = v13;
    *(_OWORD *)(a2 + 280) = v14;
    *(_OWORD *)(a2 + 24std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    __int128 v16 = *(_OWORD *)(a3 + 312);
    __int128 v15 = *(_OWORD *)(a3 + 328);
    __int128 v17 = *(_OWORD *)(a3 + 296);
    *(void *)(a2 + 344) = *(void *)(a3 + 344);
    *(_OWORD *)(a2 + 312) = v16;
    *(_OWORD *)(a2 + 32std::iostream::~basic_iostream(v2, v3 + 8) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 352) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    __int128 v18 = *(_OWORD *)(a3 + 360);
    __int128 v19 = *(_OWORD *)(a3 + 376);
    __int128 v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 40std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 392) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 360) = v18;
    __int128 v21 = *(_OWORD *)(a3 + 424);
    __int128 v22 = *(_OWORD *)(a3 + 440);
    __int128 v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 440) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    uint64_t v24 = *(void *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(void *)(a2 + 48std::iostream::~basic_iostream(v2, v3 + 8) = v24;
  }

  else
  {
    sub_100048E50(a1, a3);
  }

void sub_100048E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  sub_100048EBC(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 sub_100048EBC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 512;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 88);
  __int128 v5 = *(_OWORD *)(a2 + 104);
  __int128 v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 152);
  __int128 v8 = *(_OWORD *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 152) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 248);
  __int128 v11 = *(_OWORD *)(a2 + 264);
  __int128 v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 2sub_1000114F0(v1 + 64) = v11;
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  __int128 v14 = *(_OWORD *)(a2 + 312);
  __int128 v13 = *(_OWORD *)(a2 + 328);
  __int128 v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 32std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  __int128 v16 = *(_OWORD *)(a2 + 360);
  __int128 v17 = *(_OWORD *)(a2 + 376);
  __int128 v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 40std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  __n128 result = *(__n128 *)(a2 + 424);
  __int128 v20 = *(_OWORD *)(a2 + 440);
  __int128 v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 48std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 492) = *(void *)(a2 + 492);
  return result;
}

uint64_t sub_100048FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v4])(&v9, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 70) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t sub_100049098(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void sub_100049104(uint64_t a1, void ***a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 504) == 4)
  {
    __int128 v3 = (void **)*a3;
    *a3 = 0LL;
    sub_100058A90(a2, v3);
  }

  else
  {
    sub_10004912C(a1, a3);
  }

uint64_t sub_10004912C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void sub_100049194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 5)
  {
    sub_100014DF0(a2, (__int128 *)a3);
    uint64_t v5 = (void **)(a2 + 16);
    __int128 v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v5 = v6;
    *(_BYTE *)(a3 + 39) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }

  else
  {
    sub_100049214(a1, a3);
  }

uint64_t sub_100049214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void sub_10004929C(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)__p[0] + 3);
  __int128 v5 = *((_OWORD *)__p[0] + 2);
  __int128 v38 = *((_OWORD *)__p[0] + 1);
  __int128 v39 = v5;
  uint64_t v40 = *((void *)__p[0] + 6);
  uint64_t v6 = *((void *)__p[0] + 7);
  __int128 v7 = *((_OWORD *)__p[0] + 4);
  uint64_t v8 = *((void *)__p[0] + 10);
  __int128 v9 = *(_OWORD *)((char *)__p[0] + 88);
  __int128 v10 = *(_OWORD *)((char *)__p[0] + 104);
  __int128 v11 = *(_OWORD *)((char *)__p[0] + 136);
  __int128 v102 = *(_OWORD *)((char *)__p[0] + 120);
  __int128 v103 = v11;
  __int128 v100 = v9;
  __int128 v101 = v10;
  __int128 v12 = *(_OWORD *)((char *)__p[0] + 152);
  __int128 v13 = *(_OWORD *)((char *)__p[0] + 168);
  __int128 v14 = *(_OWORD *)((char *)__p[0] + 184);
  __int128 v107 = *(_OWORD *)((char *)__p[0] + 200);
  __int128 v108 = v7;
  __int128 v105 = v13;
  __int128 v106 = v14;
  __int128 v104 = v12;
  __int128 v15 = *(_OWORD *)((char *)__p[0] + 216);
  __int128 v16 = *(_OWORD *)((char *)__p[0] + 232);
  __int128 v17 = *(_OWORD *)((char *)__p[0] + 264);
  __int128 v18 = *(_OWORD *)((char *)__p[0] + 280);
  __int128 v93 = *(_OWORD *)((char *)__p[0] + 248);
  __int128 v94 = v17;
  __int128 v91 = v15;
  __int128 v92 = v16;
  __int128 v19 = *(_OWORD *)((char *)__p[0] + 296);
  __int128 v20 = *(_OWORD *)((char *)__p[0] + 312);
  __int128 v21 = *(_OWORD *)((char *)__p[0] + 328);
  uint64_t v99 = *((void *)__p[0] + 43);
  __int128 v97 = v20;
  __int128 v98 = v21;
  __int128 v95 = v18;
  __int128 v96 = v19;
  uint64_t v22 = *((void *)__p[0] + 44);
  __int128 v23 = *(_OWORD *)((char *)__p[0] + 440);
  __int128 v87 = *(_OWORD *)((char *)__p[0] + 424);
  __int128 v88 = v23;
  __int128 v24 = *(_OWORD *)((char *)__p[0] + 472);
  __int128 v89 = *(_OWORD *)((char *)__p[0] + 456);
  __int128 v90 = v24;
  __int128 v25 = *(_OWORD *)((char *)__p[0] + 376);
  __int128 v83 = *(_OWORD *)((char *)__p[0] + 360);
  __int128 v84 = v25;
  __int128 v26 = *(_OWORD *)((char *)__p[0] + 408);
  __int128 v85 = *(_OWORD *)((char *)__p[0] + 392);
  __int128 v86 = v26;
  int v27 = *((_DWORD *)__p[0] + 122);
  uint64_t v28 = *(void *)((char *)__p[0] + 492);
  int v29 = operator new(0xC8uLL);
  sub_10004A214(v29, (uint64_t *)__p, a1);
  (*(void (**)(void **__return_ptr, void *, void))(*v29 + 48LL))(&lpsrc, v29, 0LL);
  if (!v30) {
    __cxa_bad_cast();
  }
  int v31 = v30[2];
  uint64_t v43 = 0x4796C6F6BLL;
  int v44 = 512;
  int v45 = v4;
  __int128 v46 = v38;
  __int128 v47 = v39;
  uint64_t v48 = v40;
  uint64_t v49 = v6;
  __int128 v50 = v108;
  uint64_t v51 = v8;
  __int128 v55 = v103;
  __int128 v54 = v102;
  __int128 v53 = v101;
  __int128 v52 = v100;
  __int128 v59 = v107;
  __int128 v58 = v106;
  __int128 v57 = v105;
  __int128 v56 = v104;
  __int128 v63 = v94;
  __int128 v64 = v95;
  __int128 v66 = v97;
  __int128 v67 = v98;
  __int128 v65 = v96;
  __int128 v60 = v91;
  __int128 v62 = v93;
  __int128 v61 = v92;
  uint64_t v68 = v99;
  uint64_t v69 = v22;
  __int128 v74 = v87;
  __int128 v75 = v88;
  __int128 v76 = v89;
  __int128 v77 = v90;
  __int128 v70 = v83;
  __int128 v71 = v84;
  __int128 v72 = v85;
  __int128 v73 = v86;
  int v78 = v27;
  uint64_t v79 = v28;
  int v80 = 1;
  sub_1000498F4((uint64_t)v81, (uint64_t)&v43);
  int v82 = v31;
  sub_1000498F4(a2, (uint64_t)v81);
  *(_DWORD *)(a2 + 512) = v82;
  *(_BYTE *)(a2 + 520) = 1;
  sub_100049A5C((uint64_t)v81);
  sub_100049A5C((uint64_t)&v43);
  std::string::size_type v32 = lpsrc;
  lpsrCC_SHA256_CTX c = 0LL;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 8LL))(v32);
  }
  (*(void (**)(void *))(*v29 + 16LL))(v29);
  unint64_t v33 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  __int128 v36 = __p[0];
  __p[0] = 0LL;
  if (v36) {
    operator delete(v36);
  }
}

void sub_1000495F0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  __int128 v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a2)
  {
    sub_100049A5C((uint64_t)&STACK[0x258]);
    sub_100049A5C((uint64_t)va1);
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 8LL))(a4);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 16LL))(v10);
    sub_1000496C8((void **)va);
    __cxa_begin_catch(a1);
    sub_100049700();
  }

  _Unwind_Resume(a1);
}

void **sub_1000496C8(void **a1)
{
  __int128 v2 = *a1;
  *a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100049700()
{
}

void sub_100049730(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      __int128 v3 = (unsigned int *)__cxa_begin_catch(a1);
      *(void *)&__int128 v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((void *)&v5 + 1) = 146LL;
      int v6 = 16;
      sub_100049AB4(v8, &v5);
      sub_100118CE8(&v9, v3);
      std::ostream::~ostream(&v9, off_10016C428);
      sub_100049C18((uint64_t)v8);
      std::ios::~ios(&v10);
      *(void *)uint64_t v2 = make_error_code(161LL);
      *(void *)(v2 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
      *(_BYTE *)(v2 + 520) = 0;
      goto LABEL_7;
    }

LABEL_8:
    _Unwind_Resume(a1);
  }

  __cxa_begin_catch(a1);
  int v7 = 0;
  sub_1000498F4((uint64_t)v8, (uint64_t)&v5);
  int v11 = 0;
  sub_1000498F4(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v11;
  *(_BYTE *)(v2 + 520) = 1;
  sub_100049A5C((uint64_t)v8);
  sub_100049A5C((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

  int v11 = a2[1] << 9;
  __int128 v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  uint64_t v14 = *__error();
  if (sub_1000B8654())
  {
    int v27 = 0LL;
    uint64_t v15 = sub_1000B85DC();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    __int128 v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    __int128 v18 = *__error();
    if (v17) {
      __int128 v19 = 3LL;
    }
    else {
      __int128 v19 = 2LL;
    }
    *(_DWORD *)buf = 68158722;
    int v29 = 132;
    id v30 = 2080;
    int v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    std::string::size_type v32 = 2048;
    unint64_t v33 = v11;
    uint64_t v34 = 1024;
    unint64_t v35 = v6;
    __int128 v36 = 1024;
    __int128 v37 = v18;
    LODWORD(v25) = 40;
    __int128 v20 = (char *)_os_log_send_and_compose_impl( v19,  &v27,  0LL,  0LL,  &_mh_execute_header,  v16,  16LL,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  (int)buf,  v25,  v26);

    if (v20)
    {
      fprintf(__stderrp, "%s\n", v20);
      free(v20);
    }
  }

  else
  {
    __int128 v21 = sub_1000B85DC();
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int128 v23 = *__error();
      *(_DWORD *)buf = 68158722;
      int v29 = 132;
      id v30 = 2080;
      int v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      std::string::size_type v32 = 2048;
      unint64_t v33 = v11;
      uint64_t v34 = 1024;
      unint64_t v35 = v6;
      __int128 v36 = 1024;
      __int128 v37 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  buf,  0x28u);
    }
  }

  *__error() = v14;
  __int128 v24 = *__error();
  if (v24 < 0) {
    return v24;
  }
  else {
    return -v24;
  }
}

  int v11 = a2[1] << 9;
  __int128 v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  uint64_t v14 = *__error();
  if (sub_1000B8654())
  {
    int v27 = 0LL;
    uint64_t v15 = sub_1000B85DC();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    __int128 v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    __int128 v18 = *__error();
    if (v17) {
      __int128 v19 = 3LL;
    }
    else {
      __int128 v19 = 2LL;
    }
    *(_DWORD *)buf = 68158722;
    int v29 = 133;
    id v30 = 2080;
    int v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    std::string::size_type v32 = 2048;
    unint64_t v33 = v11;
    uint64_t v34 = 1024;
    unint64_t v35 = v6;
    __int128 v36 = 1024;
    __int128 v37 = v18;
    LODWORD(v25) = 40;
    __int128 v20 = (char *)_os_log_send_and_compose_impl( v19,  &v27,  0LL,  0LL,  &_mh_execute_header,  v16,  16LL,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  (int)buf,  v25,  v26);

    if (v20)
    {
      fprintf(__stderrp, "%s\n", v20);
      free(v20);
    }
  }

  else
  {
    __int128 v21 = sub_1000B85DC();
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int128 v23 = *__error();
      *(_DWORD *)buf = 68158722;
      int v29 = 133;
      id v30 = 2080;
      int v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      std::string::size_type v32 = 2048;
      unint64_t v33 = v11;
      uint64_t v34 = 1024;
      unint64_t v35 = v6;
      __int128 v36 = 1024;
      __int128 v37 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  buf,  0x28u);
    }
  }

  *__error() = v14;
  __int128 v24 = *__error();
  if (v24 < 0) {
    return v24;
  }
  else {
    return -v24;
  }
}

    __int128 v3 = 0LL;
  }

    __int128 v3 = 0LL;
  }

    __int128 v3 = 0LL;
  }

    __int128 v3 = 0LL;
  }

    __int128 v3 = 0LL;
  }

    __int128 v3 = 0LL;
  }

  return v9;
}

uint64_t sub_1000498F4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  sub_100049938(a1, a2);
  return a1;
}

void sub_100049924(_Unwind_Exception *a1)
{
}

uint64_t sub_100049938(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 504);
  if ((_DWORD)v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_10016C2A0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 504) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10016C300[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }

  return result;
}

double sub_1000499C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_100048EBC(a2, a3).n128_u64[0];
  return result;
}

__n128 sub_1000499D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 2003069043;
  *(void *)(a2 + 4) = *(void *)(a3 + 4);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  __n128 result = *(__n128 *)(a3 + 16);
  __int128 v4 = *(_OWORD *)(a3 + 32);
  __int128 v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 62) = *(void *)(a3 + 62);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 70) = 0;
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  return result;
}

__n128 sub_100049A18(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_100049A24(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0LL;
  *a2 = v3;
}

__n128 sub_100049A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  __n128 result = *(__n128 *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 32) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  return result;
}

uint64_t sub_100049A5C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_10016C2A0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

void *sub_100049AB4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100049B9C((uint64_t)a1, a2);
  *a1 = off_10016C360;
  a1[45] = &off_10016C460;
  a1[46] = &off_10016C488;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016C360;
  a1[45] = off_10016C3E8;
  a1[46] = off_10016C410;
  return a1;
}

void sub_100049B38(_Unwind_Exception *a1)
{
}

uint64_t sub_100049B5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100049B9C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016C4F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100049C04(_Unwind_Exception *a1)
{
}

uint64_t sub_100049C18(uint64_t a1)
{
  *(void *)a1 = off_10016C4F8;
  sub_100049E90(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100049CB4(char *a1)
{
}

uint64_t sub_100049CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100049D2C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100049D78(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016C428);
  sub_100049C18(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100049DB0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016C428);
  sub_100049C18((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100049DF0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016C428);
  sub_100049C18(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100049E30(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016C428);
  sub_100049C18((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100049E7C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100049C18(a1);
  operator delete(v1);
}

uint64_t sub_100049E90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100049FE0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100049FB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100049FE0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 393LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int128 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 393LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

BOOL sub_10004A1C4(_DWORD *a1, _DWORD *a2)
{
  else {
    return 0LL;
  }
}

void *sub_10004A214(void *a1, uint64_t *a2, void *a3)
{
  v6[0] = &off_10016C578;
  sub_10004A290((uint64_t)a1, (uint64_t)v6, a3);
  sub_10004E010((uint64_t)v6);
  *a1 = off_100177FC8;
  return a1;
}

void sub_10004A27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10004A290(uint64_t a1, uint64_t a2, void *a3)
{
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)a1 = &off_10016C5B8;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *a3;
  *(void *)(a1 + 56) = v5;
  if (v5)
  {
    char v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)sub_10004B88C(a1 + 64, a2) = &off_10016C578;
  if (*(_BYTE *)(a2 + 88))
  {
    uint64_t v8 = *(void *)(a2 + 96);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = 1LL;
    *(void *)(a1 + 32) = 2 * v8;
    *(void *)(a1 + 40) = 0LL;
  }

  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }

  return a1;
}

void sub_10004A334(_Unwind_Exception *a1)
{
}

void sub_10004A34C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004E010(a1);
  operator delete(v1);
}

  ;
}

uint64_t sub_10004A368()
{
  return 512LL;
}

uint64_t sub_10004A370(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_10004A378()
{
  return 1LL;
}

__n128 sub_10004A380@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10004A38C()
{
  return 0LL;
}

uint64_t sub_10004A394(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

__n128 sub_10004A39C@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unint64_t a5@<X4>, __n128 **a6@<X8>)
{
  __int128 v12 = (__n128 *)operator new(0x40uLL);
  __n128 result = *a4;
  v12[1] = *a4;
  v12[2].n128_u64[0] = a4[1].n128_u64[0];
  v12[2].n128_u64[1] = a5;
  v12[3].n128_u64[0] = a1;
  v12[3].n128_u64[1] = a3;
  v12->n128_u64[0] = (unint64_t)off_10016C6B8;
  v12->n128_u64[1] = a2;
  *a6 = v12;
  return result;
}

void *sub_10004A408(uint64_t a1)
{
  unint64_t v2 = operator new(0x40uLL);
  sub_10004B9E8((uint64_t)v2, a1);
  return v2;
}

void sub_10004A43C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004A450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v180 = v182;
  __int128 v181 = xmmword_1001388C0;
  std::string __p = v179;
  __int128 v178 = xmmword_1001388C0;
  unint64_t v7 = sub_10004BBD0(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_100014AD4("get_next_capacity, allocator's max size reached");
    }
    uint64_t v9 = operator new(40 * v7);
    sub_10004C198((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v178, 0LL, 0LL);
  }

  uint64_t v10 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  sub_1000EEC20(a1 + 64, *(void *)(a3 + 24), v10 & ~(v10 >> 63), (uint64_t *)&v180);
  int v11 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v163 = *(void *)a4;
  v164 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }

  __int128 v14 = *(_OWORD *)(a4 + 56);
  v165[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v165 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v166 = *(void *)(a4 + 48);
  __int128 v167 = v14;
  __int128 v15 = *(_OWORD *)(a4 + 88);
  __int128 v168 = *(_OWORD *)(a4 + 72);
  __int128 v169 = v15;
  char v170 = *(_BYTE *)(a4 + 104);
  __int128 v16 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v171 = *(void *)(a4 + 112);
  __int128 v172 = v16;
  if (v16)
  {
    __int128 v17 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  __int128 v173 = *(_OWORD *)(a4 + 128);
  uint64_t v174 = *(void *)(a4 + 144);
  char v175 = *(_BYTE *)(a4 + 152);
  v161[0] = 0;
  char v162 = 0;
  __int128 v19 = (char *)v180;
  uint64_t v126 = *((void *)v180 + 3);
  uint64_t v20 = *(void *)(a3 + 8);
  *(void *)&__int128 v149 = *(void *)a3;
  *((void *)&v149 + 1) = v20;
  if (v20)
  {
    __int16 v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  __int128 v23 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)uint64_t v150 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v150[9] = *(_OWORD *)(a3 + 25);
  uint64_t v151 = *(void *)(a3 + 48);
  __int128 v152 = v23;
  __int128 v24 = *(_OWORD *)(a3 + 88);
  __int128 v153 = *(_OWORD *)(a3 + 72);
  __int128 v154 = v24;
  char v155 = *(_BYTE *)(a3 + 104);
  __int16 v25 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v156 = *(void *)(a3 + 112);
  unint64_t v157 = v25;
  if (v25)
  {
    __int128 v26 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  __int128 v158 = *(_OWORD *)(a3 + 128);
  uint64_t v159 = *(void *)(a3 + 144);
  char v160 = *(_BYTE *)(a3 + 152);
  uint64_t v124 = a2;
  if (!(void)v181)
  {
    uint64_t v28 = 0LL;
    uint64_t v129 = 0LL;
    goto LABEL_126;
  }

  uint64_t v28 = 0LL;
  unint64_t v128 = &v19[64 * (void)v181];
  uint64_t v129 = 0LL;
  uint64_t v127 = (uint64_t **)(a2 + 16);
  while (1)
  {
    size_t v29 = *((void *)v19 + 4);
    if (v29)
    {
    }

    if (v29 > *(void *)&v150[16]) {
      sub_10002C704((uint64_t)&v149);
    }
    if (sub_10002B1FC((uint64_t)&v149, (uint64_t)&v163))
    {
      *(void *)&__int128 v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v147 + 1) = 75LL;
      *(_DWORD *)uint64_t v148 = 16;
      sub_10004BD64(&v130, &v147);
      sub_100004E4C(&v137, (uint64_t)"Udif: advanced buffer, needs to read ", 37LL);
      sub_1000F0528(&v137, (int *)v19);
      sub_100004E4C(&v137, (uint64_t)" but buffer is full", 19LL);
      std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
      __int128 v96 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
      uint64_t v97 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10LL);
      std::locale::~locale((std::locale *)&v143);
      std::ostream::put(&v137, v97);
      std::ostream::flush(&v137);
      std::ostream::~ostream(&v137, off_10016C850);
      sub_10004C3C8((uint64_t)&v130);
      goto LABEL_125;
    }

    __int128 v30 = v149;
    __int128 v147 = v149;
    if (*((void *)&v149 + 1))
    {
      int v31 = (unint64_t *)(*((void *)&v149 + 1) + 8LL);
      do
        unint64_t v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }

    *(_OWORD *)&v148[9] = *(_OWORD *)&v150[9];
    *(_OWORD *)uint64_t v148 = *(_OWORD *)v150;
    unint64_t v33 = *(_OWORD *)&v150[9] >> 56;
    if (v29 > v33)
    {
      *(void *)&__int128 v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v143 + 1) = 75LL;
      v144.i32[0] = 16;
      sub_10004BE4C(&v130, &v143);
      sub_100004E4C(&v137, (uint64_t)"Udif: needs to read ", 20LL);
      sub_1000F0528(&v137, (int *)v19);
      sub_100004E4C(&v137, (uint64_t)" but buffer is too small ", 25LL);
      std::ostream::operator<<(&v137, v33);
      std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
      uint64_t v34 = std::locale::use_facet((const std::locale *)&v141, &std::ctype<char>::id);
      uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
      std::locale::~locale((std::locale *)&v141);
      std::ostream::put(&v137, v35);
      std::ostream::flush(&v137);
      std::ostream::~ostream(&v137, off_10016CA70);
      sub_10004C9F0((uint64_t)&v130);
      std::ios::~ios(&v138);
      int v36 = 2;
      uint64_t v28 = -28LL;
      goto LABEL_45;
    }

    if (!*(_DWORD *)v19)
    {
      bzero((void *)v30, v29);
      sub_10002C52C((uint64_t)&v149, v29);
LABEL_44:
      int v36 = 0;
      v129 += v29;
      goto LABEL_45;
    }

    int8x16_t v37 = *(int8x16_t *)(v19 + 8);
    uint64_t v38 = *((void *)v19 + 4);
    __int128 v143 = v30;
    if (*((void *)&v30 + 1))
    {
      __int128 v39 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    int8x16_t v144 = vextq_s8(v37, v37, 8uLL);
    uint64_t v145 = v38;
    char v146 = 0;
    if (v129)
    {
      *(void *)&__int128 v141 = v19;
      std::__fs::filesystem::path v41 = sub_10004CF9C(v127, (unsigned int *)v19, (uint64_t)&unk_100139230, (_DWORD **)&v141);
      (*(void (**)(_DWORD **__return_ptr, uint64_t *, __int128 *))(*v41[5] + 128))(&v130, v41[5], &v143);
      if ((void)v178 == *((void *)&v178 + 1))
      {
        sub_10004D74C((uint64_t *)&__p, (uint64_t)__p + 40 * v178, 1LL, (uint64_t)&v130, &v141);
      }

      else
      {
        sub_10003C7B8((unint64_t)__p + 40 * v178, (uint64_t)&v130);
        *(void *)&__int128 v178 = v178 + 1;
      }

      sub_10002C52C((uint64_t)&v149, v29);
    }

    else
    {
      uint64_t v130 = v19;
      uint64_t v49 = sub_10004CF9C(v127, (unsigned int *)v19, (uint64_t)&unk_100139230, &v130);
      int v50 = (*(uint64_t (**)(uint64_t *, __int128 *))(*v49[5] + 88))(v49[5], &v143);
      uint64_t v28 = v50;
      if (v50 < 0)
      {
        char v42 = 0;
        int v36 = 2;
        goto LABEL_37;
      }

      if (*(_BYTE *)(v124 + 56) && *((int *)v19 + 8) > (uint64_t)v50)
      {
        *(void *)&__int128 v141 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((void *)&v141 + 1) = 75LL;
        int v142 = 16;
        sub_10004BF34(&v130, &v141);
        sub_100004E4C(&v137, (uint64_t)"Error: Not enough data read. expected: ", 39LL);
        std::ostream::operator<<(&v137, *((void *)v19 + 4));
        sub_100004E4C(&v137, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<(&v137, v28);
        sub_100004E4C(&v137, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<(&v137, *(void *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
        uint64_t v51 = std::locale::use_facet(&v176, &std::ctype<char>::id);
        uint64_t v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
        std::locale::~locale(&v176);
        std::ostream::put(&v137, v52);
        std::ostream::flush(&v137);
        std::ostream::~ostream(&v137, off_10016CC90);
        sub_10004D140((uint64_t)&v130);
        std::ios::~ios(&v138);
        char v42 = 0;
        int v36 = 2;
        uint64_t v28 = -5LL;
        goto LABEL_37;
      }

      uint64_t v53 = sub_10004C01C(a1, (void **)&v143, (uint64_t)v19, &v180, v33);
      v29 -= v53;
      sub_10002C52C((uint64_t)&v149, v29);
      if ((void)v181)
      {
        uint64_t v54 = 0LL;
        uint64_t v55 = 0LL;
        uint64_t v56 = (void)v181 << 6;
        __int128 v57 = (uint64_t *)((char *)v180 + 32);
        do
        {
          uint64_t v59 = *v57;
          v57 += 8;
          uint64_t v58 = v59;
          uint64_t v60 = v59 + v54;
          uint64_t v61 = v59 + v55;
          uint64_t v62 = v33 - v55;
          BOOL v63 = v59 + v55 > v33;
          if (v59 + v55 >= v33) {
            uint64_t v55 = 0LL;
          }
          else {
            uint64_t v55 = v61;
          }
          if (v63)
          {
            uint64_t v55 = v58;
            uint64_t v64 = v62;
          }

          else
          {
            uint64_t v64 = 0LL;
          }

          uint64_t v54 = v60 + v64;
          v56 -= 64LL;
        }

        while (v56);
      }

      else
      {
        uint64_t v54 = 0LL;
      }

      char v65 = sub_10002D498(a3);
      v126 += v53;
      sub_10002B500((uint64_t)&v130, a3 + 56, a4 + 56, v126, v54 - v53, v65);
      sub_10004D6EC((uint64_t)v161);
      sub_10002D79C((uint64_t)v161, (uint64_t)&v130);
      char v162 = 1;
      __int128 v66 = v140;
      if (v140)
      {
        __int128 v67 = (unint64_t *)&v140->__shared_owners_;
        do
          unint64_t v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }

      uint64_t v69 = v139;
      if (v139)
      {
        __int128 v70 = (unint64_t *)&v139->__shared_owners_;
        do
          unint64_t v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }

      __int128 v72 = v136;
      if (v136)
      {
        __int128 v73 = (unint64_t *)&v136->__shared_owners_;
        do
          unint64_t v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }

      __int128 v75 = v135;
      if (v135)
      {
        __int128 v76 = (unint64_t *)&v135->__shared_owners_;
        do
          unint64_t v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }

      int v78 = v134;
      if (v134)
      {
        uint64_t v79 = (unint64_t *)&v134->__shared_owners_;
        do
          unint64_t v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }

      unint64_t v81 = v132;
      if (v132)
      {
        int v82 = (unint64_t *)&v132->__shared_owners_;
        do
          unint64_t v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }

      sub_10002B7D4((uint64_t)v161, (uint64_t)&v130);
      sub_100035F24((uint64_t)&v149, (uint64_t)&v130);
      __int128 v84 = v133;
      if (v133)
      {
        __int128 v85 = (unint64_t *)&v133->__shared_owners_;
        do
          unint64_t v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }

      __int128 v87 = v131;
      if (v131)
      {
        __int128 v88 = (unint64_t *)&v131->__shared_owners_;
        do
          unint64_t v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }

      sub_10002C354((uint64_t)&v149, v29);
      sub_10002B3A4((uint64_t)v161, (uint64_t)&v130);
      sub_100035F24((uint64_t)&v163, (uint64_t)&v130);
      __int128 v90 = v133;
      if (v133)
      {
        __int128 v91 = (unint64_t *)&v133->__shared_owners_;
        do
          unint64_t v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }

      __int128 v93 = v131;
      if (v131)
      {
        __int128 v94 = (unint64_t *)&v131->__shared_owners_;
        do
          unint64_t v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
    }

    int v36 = 0;
    char v42 = 1;
LABEL_37:
    uint64_t v43 = (std::__shared_weak_count *)*((void *)&v143 + 1);
    if (!*((void *)&v143 + 1)) {
      goto LABEL_41;
    }
    int v44 = (unint64_t *)(*((void *)&v143 + 1) + 8LL);
    do
      unint64_t v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if ((v42 & 1) != 0) {
        goto LABEL_44;
      }
    }

    else
    {
LABEL_41:
      if ((v42 & 1) != 0) {
        goto LABEL_44;
      }
    }

void sub_10004B39C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (STACK[0x650] && a11 != STACK[0x640]) {
    operator delete((void *)STACK[0x640]);
  }
  if (STACK[0x8E8])
  {
    if (a12 != STACK[0x8D8]) {
      operator delete((void *)STACK[0x8D8]);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10004B51C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5 = sub_10002B3A4((uint64_t)v48, (uint64_t)v38);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(void *)a1 + 152LL))( a1,  a2,  v41,  v38,  v5);
  unint64_t v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v39;
  if (v39)
  {
    int v11 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unint64_t v13 = v43;
  if (v43)
  {
    __int128 v14 = (unint64_t *)&v43->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  __int128 v16 = v42;
  if (v42)
  {
    __int128 v17 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  __int128 v19 = v54;
  if (v54)
  {
    uint64_t v20 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v53;
  if (v53)
  {
    __int128 v23 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = v52;
  if (v52)
  {
    __int128 v26 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v51;
  if (v51)
  {
    size_t v29 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  int v31 = v50;
  if (v50)
  {
    unint64_t v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  uint64_t v34 = v49;
  if (v49)
  {
    uint64_t v35 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (v46 && &v47 != __p) {
    operator delete(__p);
  }
  sub_100014E54((uint64_t)v44);
  return v6;
}

void sub_10004B82C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t sub_10004B87C()
{
  return 4294967251LL;
}

uint64_t sub_10004B884()
{
  return 4294967251LL;
}

uint64_t sub_10004B88C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = off_1001837A0;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  __int128 v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v4;
  uint64_t v5 = result + 16;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    *__int128 v3 = 0LL;
    *(void *)(a2 + 24) = 0LL;
  }

  else
  {
    *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  }

  *(void *)(result + 32) = *(void *)(a2 + 32);
  unint64_t v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v8;
  uint64_t v9 = result + 40;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 32) = v7;
    *unint64_t v7 = 0LL;
    *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

  else
  {
    *(void *)(result + 32) = v9;
  }

  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + sub_1000114F0(v1 + 64) = 0LL;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0LL;
  *(void *)(result + 72) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(void *)(result + 104) = *(void *)(a2 + 104);
  unint64_t v13 = (void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + sub_1000114F0(v50 + 112) = v14;
  uint64_t v15 = result + 112;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(result + 120) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a2 + 104) = v13;
    void *v13 = 0LL;
    *(void *)(a2 + 120) = 0LL;
  }

  else
  {
    *(void *)(result + 104) = v15;
  }

  return result;
}

__n128 sub_10004B96C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

__n128 sub_10004B988@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v4 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 48);
  *((__n128 *)v4 + 3) = result;
  *(void *)uint64_t v4 = off_10016C6B8;
  *a2 = v4;
  return result;
}

uint64_t sub_10004B9E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10016C728;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 16) = a1 + 24;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  uint64_t v5 = a1 + 40;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  sub_1000EDBDC(a2 + 64, (uint64_t)&v12);
  sub_10004BB88((uint64_t)v4, *(void **)(a1 + 24));
  uint64_t v6 = v13;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = v14;
  *(void *)(a1 + 32) = v14;
  if (v7)
  {
    v6[2] = v3;
    __int128 v12 = &v13;
    unint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  else
  {
    *uint64_t v4 = v3;
  }

  sub_100014DF0(v5, &v15);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v9 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10004BB88((uint64_t)&v12, v13);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

void sub_10004BAF0(_Unwind_Exception *a1)
{
}

uint64_t sub_10004BB10(uint64_t a1)
{
  *(void *)a1 = off_10016C728;
  sub_1000114F0(a1 + 40);
  sub_10004BB88(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10004BB4C(void **a1)
{
  *a1 = off_10016C728;
  sub_1000114F0((uint64_t)(a1 + 5));
  sub_10004BB88((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void sub_10004BB88(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10004BB88(a1, *a2);
    sub_10004BB88(a1, a2[1]);
    sub_1000114F0((uint64_t)(a2 + 5));
    operator delete(a2);
  }

uint64_t sub_10004BBD0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 72);
  __int128 v20 = *(_OWORD *)(a1 + 56);
  __int128 v21 = v2;
  __int128 v22 = *(_OWORD *)(a1 + 88);
  char v23 = *(_BYTE *)(a1 + 104);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 112);
  __int16 v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v26 = *(_OWORD *)(a1 + 128);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  __int128 v19 = *(_OWORD *)(a2 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 120);
  if (v8)
  {
    uint64_t v9 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    BOOL v12 = (void)v20 == v6 && *((void *)&v20 + 1) == v7;
    if (v12 && (void)v21 == (void)v19) {
      break;
    }
    sub_10002AD0C((uint64_t)&v20);
  }

  if (v8)
  {
    unint64_t v13 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  __int128 v15 = v25;
  if (v25)
  {
    uint64_t v16 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return i;
}

void sub_10004BD48(_Unwind_Exception *a1)
{
}

void *sub_10004BD64(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004C34C((uint64_t)a1, a2);
  *a1 = off_10016C788;
  a1[45] = &off_10016C888;
  a1[46] = &off_10016C8B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016C788;
  a1[45] = off_10016C810;
  a1[46] = off_10016C838;
  return a1;
}

void sub_10004BDE8(_Unwind_Exception *a1)
{
}

uint64_t sub_10004BE0C(uint64_t a1)
{
  return a1;
}

void *sub_10004BE4C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004C974((uint64_t)a1, a2);
  *a1 = off_10016C9A8;
  a1[45] = &off_10016CAA8;
  a1[46] = &off_10016CAD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016C9A8;
  a1[45] = off_10016CA30;
  a1[46] = off_10016CA58;
  return a1;
}

void sub_10004BED0(_Unwind_Exception *a1)
{
}

uint64_t sub_10004BEF4(uint64_t a1)
{
  return a1;
}

void *sub_10004BF34(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004D0C4((uint64_t)a1, a2);
  *a1 = off_10016CBC8;
  a1[45] = &off_10016CCC8;
  a1[46] = &off_10016CCF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016CBC8;
  a1[45] = off_10016CC50;
  a1[46] = off_10016CC78;
  return a1;
}

void sub_10004BFB8(_Unwind_Exception *a1)
{
}

uint64_t sub_10004BFDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004C01C(uint64_t a1, void **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5 = a4[1];
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = v5 << 6;
  uint64_t v9 = (uint64_t *)(*a4 + 32LL);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 + v6;
    uint64_t v13 = v11 + v7;
    uint64_t v14 = a5 - v7;
    BOOL v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = v13;
    }
    if (v15)
    {
      uint64_t v7 = v10;
      uint64_t v16 = v14;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    unint64_t v6 = v12 + v16;
    v8 -= 64LL;
  }

  while (v8);
  if (v6 <= a5 + a5 * *(void *)(a1 + 24)) {
    return 0LL;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(void *)(a3 + 32) - v17);
  return v17;
}

void *sub_10004C0B0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004D9E8((uint64_t)a1, a2);
  *a1 = off_10016CDE8;
  a1[45] = &off_10016CEE8;
  a1[46] = &off_10016CF10;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016CDE8;
  a1[45] = off_10016CE70;
  a1[46] = off_10016CE98;
  return a1;
}

void sub_10004C134(_Unwind_Exception *a1)
{
}

uint64_t sub_10004C158(uint64_t a1)
{
  return a1;
}

void sub_10004C198(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10004C244((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10004C220(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_10004C244( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_10003C7B8(a5, v12);
      v12 += 40LL;
      a5 += 40LL;
    }

    while (v12 != v11);
  }

  if (a6)
  {
    uint64_t v13 = a6;
    unint64_t v14 = a5;
    do
    {
      unint64_t v15 = sub_10003C7B8(v14, a7);
      a7 += 40LL;
      unint64_t v14 = v15 + 40;
      --v13;
    }

    while (v13);
  }

  if (v11 != a4)
  {
    unint64_t v16 = a5 + 40 * a6;
    do
    {
      unint64_t v17 = sub_10003C7B8(v16, v11);
      v11 += 40LL;
      unint64_t v16 = v17 + 40;
    }

    while (v11 != a4);
  }

void sub_10004C2F4(void *a1)
{
}

void sub_10004C2FC()
{
}

void sub_10004C338()
{
}

uint64_t sub_10004C34C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016C920;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10004C3B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10004C3C8(uint64_t a1)
{
  *(void *)a1 = off_10016C920;
  sub_10004C640(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004C464(char *a1)
{
}

uint64_t sub_10004C4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004C4DC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10004C528(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016C850);
  sub_10004C3C8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004C560(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016C850);
  sub_10004C3C8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10004C5A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016C850);
  sub_10004C3C8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004C5E0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016C850);
  sub_10004C3C8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10004C62C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004C3C8(a1);
  operator delete(v1);
}

uint64_t sub_10004C640(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10004C790((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004C768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10004C790(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 184LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 184LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10004C974(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016CB40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10004C9DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10004C9F0(uint64_t a1)
{
  *(void *)a1 = off_10016CB40;
  sub_10004CC68(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004CA8C(char *a1)
{
}

uint64_t sub_10004CAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004CB04(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10004CB50(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016CA70);
  sub_10004C9F0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004CB88(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016CA70);
  sub_10004C9F0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10004CBC8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016CA70);
  sub_10004C9F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004CC08(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016CA70);
  sub_10004C9F0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10004CC54(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004C9F0(a1);
  operator delete(v1);
}

uint64_t sub_10004CC68(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10004CDB8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004CD90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10004CDB8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 193LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 193LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t **sub_10004CF9C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  char v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        char v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x38uLL);
    v14[1] = v7;
    _BYTE v12[8] = **a4;
    *((void *)v12 + 5) = 0LL;
    *((void *)v12 + 6) = 0LL;
    char v15 = 1;
    sub_100027200(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0LL;
    sub_10004D080((uint64_t)v14, 0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void sub_10004D080(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1000114F0((uint64_t)v2 + 40);
    }
    operator delete(v2);
  }

uint64_t sub_10004D0C4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016CD60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10004D12C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004D140(uint64_t a1)
{
  *(void *)a1 = off_10016CD60;
  sub_10004D3B8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004D1DC(char *a1)
{
}

uint64_t sub_10004D220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004D254(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10004D2A0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016CC90);
  sub_10004D140(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004D2D8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016CC90);
  sub_10004D140((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10004D318(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016CC90);
  sub_10004D140(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004D358(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016CC90);
  sub_10004D140((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10004D3A4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004D140(a1);
  operator delete(v1);
}

uint64_t sub_10004D3B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10004D508((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004D4E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10004D508(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      unsigned int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 214LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unsigned int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 214LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10004D6EC(uint64_t result)
{
  if (*(_BYTE *)(result + 528))
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 368;
    sub_1000114F0(result + 480);
    sub_1000114F0(v2);
    sub_1000114F0(v1 + 320);
    sub_1000114F0(v1 + 208);
    sub_1000114F0(v1 + 152);
    __n128 result = sub_1000114F0(v1 + 64);
    *(_BYTE *)(v1 + 52std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  }

  return result;
}

void sub_10004D74C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10004D7F8((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334LL) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(40 * v11);
  sub_10004D870(a1, (unint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10004D7F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x333333333333333LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x333333333333333LL - v4 < a2 - v4 + v3) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x333333333333333LL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10004D870(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10004D91C((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10004D8F8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

unint64_t sub_10004D91C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      unint64_t v13 = sub_10003C7B8(a5, v12);
      v12 += 40LL;
      a5 = v13 + 40;
    }

    while (v12 != v11);
  }

  unint64_t result = sub_10003C7B8(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      unint64_t v15 = sub_10003C7B8(result, v11);
      v11 += 40LL;
      unint64_t result = v15 + 40;
    }

    while (v11 != a4);
  }

  return result;
}

void sub_10004D9AC(void *a1)
{
}

void sub_10004D9B4()
{
}

void sub_10004D9D4()
{
}

uint64_t sub_10004D9E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016CF80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10004DA50(_Unwind_Exception *a1)
{
}

uint64_t sub_10004DA64(uint64_t a1)
{
  *(void *)a1 = off_10016CF80;
  sub_10004DCDC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004DB00(char *a1)
{
}

uint64_t sub_10004DB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004DB78(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10004DBC4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016CEB0);
  sub_10004DA64(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004DBFC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016CEB0);
  sub_10004DA64((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10004DC3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016CEB0);
  sub_10004DA64(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004DC7C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016CEB0);
  sub_10004DA64((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10004DCC8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004DA64(a1);
  operator delete(v1);
}

uint64_t sub_10004DCDC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10004DE2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004DE04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10004DE2C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 254LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 254LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10004E010(uint64_t a1)
{
  *(void *)a1 = off_1001837A0;
  sub_10004BB88(a1 + 104, *(void **)(a1 + 112));
  uint64_t v2 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  sub_1000114F0(a1 + 56);
  sub_100026AC4(a1 + 32, *(void **)(a1 + 40));
  sub_100026AC4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10004E078@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v10 = 2003069043;
  uint64_t v11 = *(void *)&v4[4];
  int v12 = v5;
  __int128 v13 = v6;
  __int128 v14 = v7;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v8;
  *(void *)&v15[14] = *(void *)&v8[14];
  __int16 v16 = 0;
  uint64_t v17 = v9;
  int v18 = 2;
  int v19 = 8;
  sub_1000498F4(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 512) = v19;
  *(_BYTE *)(a2 + 520) = 1;
  return sub_100049A5C((uint64_t)&v10);
}

void sub_10004E150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    sub_100049A5C((uint64_t)&a19);
    __cxa_begin_catch(exception_object);
    sub_100049700();
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10004E1B0@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v6[0] = v5;
  int v7 = 3;
  sub_1000498F4((uint64_t)v8, (uint64_t)v6);
  int v9 = 1;
  sub_1000498F4(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 512) = v9;
  *(_BYTE *)(a3 + 520) = 1;
  sub_100049A5C((uint64_t)v8);
  return sub_100049A5C((uint64_t)v6);
}

void sub_10004E264(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  if (a2)
  {
    sub_100049A5C((uint64_t)&STACK[0x210]);
    sub_100049A5C((uint64_t)va);
    __cxa_begin_catch(a1);
    sub_100049700();
  }

  _Unwind_Resume(a1);
}

unint64_t *sub_10004E2D8(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40LL))(a2);
  unint64_t v6 = 512LL;
  if (a3) {
    unint64_t v6 = a3;
  }
  if (v5 % v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100048748((uint64_t)exception, (uint64_t)"raw_header", 0x16u);
  }

  *a1 = v6;
  a1[1] = v5 / v6;
  return a1;
}

void sub_10004E35C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004E370(uint64_t a1, void *a2, unint64_t a3)
{
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)a1 = off_10016D000;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    unint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 40LL))(*a2) % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100189E78;
    int v9 = std::generic_category();
    exception[1] = 152LL;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    exception[7] = "Size is not a multiple of block size";
  }

  return a1;
}

void sub_10004E448(_Unwind_Exception *a1)
{
}

  ;
}

void *sub_10004E464(void *a1)
{
  *a1 = off_10016D000;
  sub_1000114F0((uint64_t)(a1 + 2));
  return a1;
}

void sub_10004E494(void *a1)
{
  *a1 = off_10016D000;
  sub_1000114F0((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_10004E4C4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_10004E4CC(uint64_t a1)
{
}

uint64_t sub_10004E500(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
}

uint64_t *sub_10004E510@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)operator new(0x98uLL);
  unint64_t result = sub_100086258(v4, a1);
  *a2 = (char *)v4 + *(void *)(*v4 - 104);
  return result;
}

void sub_10004E55C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004E570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
}

uint64_t sub_10004E580(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
}

void *sub_10004E590(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_10016D100;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_10004E5DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10004E5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string __p = v67;
  __int128 v66 = xmmword_1001388C0;
  unint64_t v7 = sub_10004BBD0(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_100014AD4("get_next_capacity, allocator's max size reached");
    }
    int v9 = operator new(40 * v7);
    sub_10004C198((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v66, 0LL, 0LL);
  }

  v64[0] = &__p;
  v64[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&__int128 v52 = *(void *)a3;
  *((void *)&v52 + 1) = v10;
  if (v10)
  {
    uint64_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v53[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v54 = *(void *)(a3 + 48);
  __int128 v55 = *(_OWORD *)(a3 + 56);
  __int128 v56 = *(_OWORD *)(a3 + 72);
  __int128 v57 = *(_OWORD *)(a3 + 88);
  char v58 = *(_BYTE *)(a3 + 104);
  __int128 v13 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v59 = *(void *)(a3 + 112);
  uint64_t v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }

  __int128 v61 = *(_OWORD *)(a3 + 128);
  uint64_t v62 = *(void *)(a3 + 144);
  char v63 = *(_BYTE *)(a3 + 152);
  uint64_t v16 = *(void *)(a4 + 8);
  *(void *)&__int128 v40 = *(void *)a4;
  *((void *)&v40 + 1) = v16;
  if (v16)
  {
    uint64_t v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  v41[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v42 = *(void *)(a4 + 48);
  __int128 v43 = *(_OWORD *)(a4 + 56);
  __int128 v44 = *(_OWORD *)(a4 + 72);
  __int128 v45 = *(_OWORD *)(a4 + 88);
  char v46 = *(_BYTE *)(a4 + 104);
  int v19 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v47 = *(void *)(a4 + 112);
  unint64_t v48 = v19;
  if (v19)
  {
    int v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v49 = *(_OWORD *)(a4 + 128);
  uint64_t v50 = *(void *)(a4 + 144);
  char v51 = *(_BYTE *)(a4 + 152);
  sub_10004EEB8((uint64_t)v64, &v52, &v40, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v22 = v48;
  if (v48)
  {
    __int16 v23 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int128 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v60;
  if (v60)
  {
    size_t v29 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  int v31 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1))
  {
    unint64_t v32 = (unint64_t *)(*((void *)&v52 + 1) + 8LL);
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  (*(void (**)(void))(**(void **)(a2 + 16) + 144LL))(*(void *)(a2 + 16));
  if ((void)v66)
  {
    int v34 = 0;
    uint64_t v35 = (unsigned int *)__p;
    uint64_t v36 = 40 * v66;
    do
    {
      int v37 = sub_100038120(v35);
      int v38 = v37;
      if (v37 < 0) {
        break;
      }
      v34 += v37;
      v35 += 10;
      int v38 = v34;
      v36 -= 40LL;
    }

    while (v36);
  }

  else
  {
    int v38 = 0;
  }

  if (*((void *)&v66 + 1) && v67 != __p) {
    operator delete(__p);
  }
  return v38;
}

void sub_10004E990( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  if (a53)
  {
    if (v55 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10004E9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string __p = v67;
  __int128 v66 = xmmword_1001388C0;
  unint64_t v7 = sub_10004BBD0(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_100014AD4("get_next_capacity, allocator's max size reached");
    }
    int v9 = operator new(40 * v7);
    sub_10004C198((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v66, 0LL, 0LL);
  }

  v64[0] = &__p;
  v64[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&__int128 v52 = *(void *)a3;
  *((void *)&v52 + 1) = v10;
  if (v10)
  {
    uint64_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v53[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v54 = *(void *)(a3 + 48);
  __int128 v55 = *(_OWORD *)(a3 + 56);
  __int128 v56 = *(_OWORD *)(a3 + 72);
  __int128 v57 = *(_OWORD *)(a3 + 88);
  char v58 = *(_BYTE *)(a3 + 104);
  __int128 v13 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v59 = *(void *)(a3 + 112);
  uint64_t v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }

  __int128 v61 = *(_OWORD *)(a3 + 128);
  uint64_t v62 = *(void *)(a3 + 144);
  char v63 = *(_BYTE *)(a3 + 152);
  uint64_t v16 = *(void *)(a4 + 8);
  *(void *)&__int128 v40 = *(void *)a4;
  *((void *)&v40 + 1) = v16;
  if (v16)
  {
    uint64_t v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  v41[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v42 = *(void *)(a4 + 48);
  __int128 v43 = *(_OWORD *)(a4 + 56);
  __int128 v44 = *(_OWORD *)(a4 + 72);
  __int128 v45 = *(_OWORD *)(a4 + 88);
  char v46 = *(_BYTE *)(a4 + 104);
  int v19 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v47 = *(void *)(a4 + 112);
  unint64_t v48 = v19;
  if (v19)
  {
    int v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v49 = *(_OWORD *)(a4 + 128);
  uint64_t v50 = *(void *)(a4 + 144);
  char v51 = *(_BYTE *)(a4 + 152);
  sub_10004F470((uint64_t)v64, &v52, &v40, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v22 = v48;
  if (v48)
  {
    __int16 v23 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int128 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v60;
  if (v60)
  {
    size_t v29 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  int v31 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1))
  {
    unint64_t v32 = (unint64_t *)(*((void *)&v52 + 1) + 8LL);
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  (*(void (**)(void))(**(void **)(a2 + 16) + 144LL))(*(void *)(a2 + 16));
  if ((void)v66)
  {
    int v34 = 0;
    uint64_t v35 = (unsigned int *)__p;
    uint64_t v36 = 40 * v66;
    do
    {
      int v37 = sub_100038120(v35);
      int v38 = v37;
      if (v37 < 0) {
        break;
      }
      v34 += v37;
      v35 += 10;
      int v38 = v34;
      v36 -= 40LL;
    }

    while (v36);
  }

  else
  {
    int v38 = 0;
  }

  if (*((void *)&v66 + 1) && v67 != __p) {
    operator delete(__p);
  }
  return v38;
}

void sub_10004ED80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  if (a53)
  {
    if (v55 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10004EDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), a3);
}

uint64_t sub_10004EDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a4;
  for (uint64_t i = (void *)(a3 + 8); ; i += 2)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 16) + 24LL))( *(void *)(a2 + 16),  *(void *)(a1 + 32) * *(i - 1),  *i * *(void *)(a1 + 32));
    if ((_DWORD)result) {
      break;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return result;
}

void *sub_10004EE58(void *a1)
{
  *a1 = off_10016D100;
  sub_1000114F0((uint64_t)(a1 + 2));
  return a1;
}

void sub_10004EE88(void *a1)
{
  *a1 = off_10016D100;
  sub_1000114F0((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_10004EEB8(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  uint64_t v15 = sub_10004F0D4(a1, &v40, (uint64_t)&v29, a4, 0);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  int v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    int v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    __int16 v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int128 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_10004F0A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10004F0D4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *(void *)(a3 + 144);
  v35[0] = 0;
  v35[528] = 0;
  while (!sub_10002B1FC((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000B866C())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((void *)&v32 + 1) = 104LL;
      LODWORD(v33) = 2;
      sub_100035DF8(v27, &v32);
      sub_100004E4C(&v30, (uint64_t)"sg: ", 4LL);
      sub_100116CB8(&v30, a2);
      std::ostream::~ostream(&v30, off_100169EF0);
      sub_10003602C((uint64_t)v27);
      std::ios::~ios(&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    sub_100072C74(a2, (uint64_t)v27, (uint64_t)&v32);
    __int128 v10 = *(uint64_t **)a1;
    (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(*(void *)(a1 + 8) + 16LL) + 128LL))( v27,  *(void *)(*(void *)(a1 + 8) + 16LL),  &v32);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10004D74C(v10, *v10 + 40 * v11, 1LL, (uint64_t)v27, &v36);
    }

    else
    {
      sub_10003C7B8(*v10 + 40 * v11, (uint64_t)v27);
      ++v10[1];
    }

    uint64_t v12 = (int)v33;
    if ((v33 & 0x80000000) != 0) {
      int64_t v13 = (int)v33;
    }
    else {
      int64_t v13 = v33;
    }
    BOOL v14 = v13 >= 0 || (_DWORD)v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v34;
      if (sub_10002D4E0((uint64_t)a2, a3, v34, v13))
      {
        sub_10002D61C((uint64_t)v25, (uint64_t)a2);
        sub_10002D4A4((uint64_t)v25, a3, v16, v13, a4, (uint64_t)v27);
        sub_100035EE0((uint64_t)v35, (uint64_t)v27);
        sub_10002D4FC((uint64_t)v27);
        sub_1000114F0((uint64_t)&v26);
        sub_1000114F0((uint64_t)v25);
        sub_10002B7D4((uint64_t)v35, (uint64_t)v27);
        sub_100035F24((uint64_t)a2, (uint64_t)v27);
        sub_1000114F0((uint64_t)v29);
        sub_1000114F0((uint64_t)v27);
        sub_10002B3A4((uint64_t)v35, (uint64_t)v27);
        sub_100035F24(a3, (uint64_t)v27);
        sub_1000114F0((uint64_t)v29);
        sub_1000114F0((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sub_10002C354((uint64_t)a2, v13);
      }
      else {
        sub_10002C52C((uint64_t)a2, v13);
      }
      v7 += v13;
    }

    else
    {
      uint64_t v21 = v12;
    }

    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v15 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = v7;
LABEL_40:
  sub_10002D8BC((uint64_t)v35);
  return v21;
}

void sub_10004F3FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10004F470(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  uint64_t v15 = sub_10004F68C(a1, &v40, (uint64_t)&v29, a4, 0);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    int v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    __int16 v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    uint64_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_10004F660( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10004F68C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *(void *)(a3 + 144);
  v35[0] = 0;
  v35[528] = 0;
  while (!sub_10002B1FC((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000B866C())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((void *)&v32 + 1) = 104LL;
      LODWORD(v33) = 2;
      sub_100035DF8(v27, &v32);
      sub_100004E4C(&v30, (uint64_t)"sg: ", 4LL);
      sub_100116CB8(&v30, a2);
      std::ostream::~ostream(&v30, off_100169EF0);
      sub_10003602C((uint64_t)v27);
      std::ios::~ios(&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    sub_100072C74(a2, (uint64_t)v27, (uint64_t)&v32);
    __int128 v10 = *(uint64_t **)a1;
    (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(*(void *)(a1 + 8) + 16LL) + 136LL))( v27,  *(void *)(*(void *)(a1 + 8) + 16LL),  &v32);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10004D74C(v10, *v10 + 40 * v11, 1LL, (uint64_t)v27, &v36);
    }

    else
    {
      sub_10003C7B8(*v10 + 40 * v11, (uint64_t)v27);
      ++v10[1];
    }

    uint64_t v12 = (int)v33;
    if ((v33 & 0x80000000) != 0) {
      int64_t v13 = (int)v33;
    }
    else {
      int64_t v13 = v33;
    }
    BOOL v14 = v13 >= 0 || (_DWORD)v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v34;
      if (sub_10002D4E0((uint64_t)a2, a3, v34, v13))
      {
        sub_10002D61C((uint64_t)v25, (uint64_t)a2);
        sub_10002D4A4((uint64_t)v25, a3, v16, v13, a4, (uint64_t)v27);
        sub_100035EE0((uint64_t)v35, (uint64_t)v27);
        sub_10002D4FC((uint64_t)v27);
        sub_1000114F0((uint64_t)&v26);
        sub_1000114F0((uint64_t)v25);
        sub_10002B7D4((uint64_t)v35, (uint64_t)v27);
        sub_100035F24((uint64_t)a2, (uint64_t)v27);
        sub_1000114F0((uint64_t)v29);
        sub_1000114F0((uint64_t)v27);
        sub_10002B3A4((uint64_t)v35, (uint64_t)v27);
        sub_100035F24(a3, (uint64_t)v27);
        sub_1000114F0((uint64_t)v29);
        sub_1000114F0((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sub_10002C354((uint64_t)a2, v13);
      }
      else {
        sub_10002C52C((uint64_t)a2, v13);
      }
      v7 += v13;
    }

    else
    {
      uint64_t v21 = v12;
    }

    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v15 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = v7;
LABEL_40:
  sub_10002D8BC((uint64_t)v35);
  return v21;
}

void sub_10004F9B4(_Unwind_Exception *a1)
{
}

void sub_10004FA2C(std::exception *a1)
{
}

const std::error_category *sub_10004FA44@<X0>(const std::error_category *result@<X0>, uint64_t a2@<X8>)
{
  if (LODWORD(result[70].__vftable) == 12 || result[3].__vftable)
  {
    *(_BYTE *)a2 = 0;
    char v3 = 1;
  }

  else
  {
    *(void *)&__int128 v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((void *)&v4 + 1) = 81LL;
    int v5 = 16;
    sub_10004FB18(v6, &v4);
    sub_100004E4C(&v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35LL);
    std::ostream::~ostream(&v7, off_10016D268);
    sub_10004FC7C((uint64_t)v6);
    std::ios::~ios(&v8);
    uint64_t result = std::generic_category();
    char v3 = 0;
    *(void *)a2 = 6LL;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  }

  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void sub_10004FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10004FB18(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10004FC00((uint64_t)a1, a2);
  *a1 = off_10016D1A0;
  a1[45] = &off_10016D2A0;
  a1[46] = &off_10016D2C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016D1A0;
  a1[45] = off_10016D228;
  a1[46] = off_10016D250;
  return a1;
}

void sub_10004FB9C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004FBC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004FC00(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016D338;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10004FC68(_Unwind_Exception *a1)
{
}

uint64_t sub_10004FC7C(uint64_t a1)
{
  *(void *)a1 = off_10016D338;
  sub_10004FEF4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004FD18(char *a1)
{
}

uint64_t sub_10004FD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004FD90(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10004FDDC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016D268);
  sub_10004FC7C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004FE14(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016D268);
  sub_10004FC7C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10004FE54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016D268);
  sub_10004FC7C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004FE94(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016D268);
  sub_10004FC7C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10004FEE0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004FC7C(a1);
  operator delete(v1);
}

uint64_t sub_10004FEF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100050044((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005001C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100050044(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 617LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 617LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_10005022C(std::__shared_weak_count *a1)
{
}

uint64_t sub_100050240(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

uint64_t sub_100050258(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t *sub_100050298(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    __int128 v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24LL;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24LL;
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }

  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000502FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000116A8();
  }
  return operator new(24 * a2);
}

uint64_t sub_100050340(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_1000114F0(i - 24);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100050390(std::exception *a1)
{
}

void sub_1000503A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)sub_100109388(a1);
  sub_100004CB0(v16, v4);
  sub_100026C20((uint64_t)v11);
  if ((v17 & 0x80u) == 0) {
    __int128 v5 = v16;
  }
  else {
    __int128 v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  uint64_t v7 = sub_100004E4C(&v12, (uint64_t)v5, v6);
  uint64_t v8 = sub_100004E4C(v7, (uint64_t)" [", 2LL);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(*v8 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v9 = (void *)std::ostream::operator<<(v8, *(unsigned int *)(a1 + 32));
  sub_100004E4C(v9, (uint64_t)"]", 1LL);
  sub_1000049D8((uint64_t)v13, a2);
  *(void *)((char *)v11
  uint64_t v12 = v10;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
}

void sub_1000504E4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1000114F0(v4 - 24);
      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100050554(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)a1 = off_10016FB08;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  uint64_t v6 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100040504(v6, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v6 = v7;
  }

  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(void *)(a1 + 2sub_1000114F0(v1 + 64) = 0LL;
  return a1;
}

void sub_1000505EC(_Unwind_Exception *a1)
{
}

void *sub_100050608()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_10016D460;
  return result;
}

void sub_10005062C(uint64_t a1, void *a2)
{
  *a2 = &off_10016D460;
}

void *sub_100050644@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void, void *, void, void *, void))(*(void *)*a1 + 128LL))( &v5,  *a1,  a1,  a1[5],  a1 + 1,  *a2);
  *a3 = v5;
  return result;
}

uint64_t sub_100050690(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000506CC()
{
  return &off_10016D4D0;
}

uint64_t sub_1000506D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4) {
    sub_100016D94();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48LL))(&v6, v4, a1, &v7);
  sub_100050778(a2, &v6, *(_DWORD *)(a1 + 48));
  uint64_t result = v6;
  uint64_t v6 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_100050754( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100050778(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v4;
  uint64_t v5 = qword_1001985E0;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = qword_1001985E0;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  sub_1000E4838((_DWORD *)a1, (uint64_t)v8);
  _OWORD *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_1000507E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005080C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4) {
    sub_100016D94();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48LL))(&v6, v4, a1, &v7);
  sub_100050778(a2, &v6, *(_DWORD *)(a1 + 48));
  uint64_t result = v6;
  uint64_t v6 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_100050888( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000508AC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100051158((uint64_t)a1, a2);
  *a1 = off_10016D4F8;
  a1[45] = &off_10016D5F8;
  a1[46] = &off_10016D620;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016D4F8;
  a1[45] = off_10016D580;
  a1[46] = off_10016D5A8;
  return a1;
}

void sub_100050930(_Unwind_Exception *a1)
{
}

uint64_t sub_100050954(uint64_t a1)
{
  return a1;
}

_OWORD *sub_100050994@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 24;
  if (!*(void *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    sub_100051780((void *)(a1 + 24));
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    *(_OWORD *)std::string __p = 0u;
    sub_100014DF0(a1 + 576, (__int128 *)__p);
    sub_100014DF0(a1 + 592, &v41);
    sub_100014DF0(a1 + 608, &v42);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      uint64_t v10 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1))
    {
      int64_t v13 = (unint64_t *)(*((void *)&v41 + 1) + 8LL);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    uint64_t v15 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      uint64_t v16 = (unint64_t *)((char *)__p[1] + 8);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    if (*(char *)(a1 + 23) < 0)
    {
      sub_100040504(__p, *(void **)a1, *(void *)(a1 + 8));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      *(void *)&__int128 v41 = *(void *)(a1 + 16);
    }

    v38[0] = 2 * ((a2 - 1) < 2);
    sub_100052134((uint64_t)__p, v38, &v34);
    sub_100014DF0(v8, &v34);
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1))
    {
      unint64_t v19 = (unint64_t *)(*((void *)&v34 + 1) + 8LL);
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    if (SBYTE7(v41) < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 56std::iostream::~basic_iostream(v2, v3 + 8) = a2;
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v22 = operator new(0x4CuLL);
    sub_10010D554(v22, v21);
    __int16 v23 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v22;
    if (v23) {
      operator delete(v23);
    }
  }

  sub_100047F94((const std::error_category *)a1, (BOOL *)v38);
  if (!v39)
  {
    *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v34 + 1) = 83LL;
    int v35 = 16;
    sub_100051858(__p, &v34);
    sub_100004E4C(&v43, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41LL);
    uint64_t v26 = (unsigned int *)sub_100047874((uint64_t)v38);
    sub_1000517DC((uint64_t)__p, v26);
    std::ostream::~ostream(&v43, off_10016D830);
    sub_1000522C4((uint64_t)__p);
    std::ios::~ios(v44);
    uint64_t result = (_OWORD *)sub_100047874((uint64_t)v38);
    *(_OWORD *)a4 = *result;
    goto LABEL_34;
  }

  if (LOBYTE(v38[0]))
  {
    *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v34 + 1) = 83LL;
    int v35 = 16;
    sub_10005204C(__p, &v34);
    sub_100004E4C(&v43, (uint64_t)"Diskimageuio: decryption key missing", 36LL);
    std::ostream::~ostream(&v43, off_10016E930);
    sub_100055AC4((uint64_t)__p);
    std::ios::~ios(v44);
    uint64_t result = (_OWORD *)make_error_code(162LL);
    *(void *)a4 = result;
    *(void *)(a4 + std::iostream::~basic_iostream(v2, v3 + 8) = v25;
LABEL_34:
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }

  *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((void *)&v34 + 1) = 83LL;
  int v35 = 2;
  sub_100051940(__p, &v34);
  sub_100004E4C(&v43, (uint64_t)"Diskimageuio: backend isn't locked", 34LL);
  std::ostream::~ostream(&v43, off_10016DA50);
  sub_1000528EC((uint64_t)__p);
  std::ios::~ios(v44);
  sub_100051A28(a1, 0LL, (uint64_t)__p);
  if (v45)
  {
    uint64_t v27 = sub_100051F10((uint64_t)__p);
    sub_100048B74(a1 + 48, v27);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(v27 + 512);
    *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v32 + 1) = 83LL;
    int v33 = 2;
    sub_100051F64(&v34, &v32);
    sub_100004E4C(&v36, (uint64_t)"Diskimageuio: resolved disk image format ", 41LL);
    diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream(&v36, off_10016E710);
    sub_10005549C((uint64_t)&v34);
    uint64_t result = (_OWORD *)std::ios::~ios(v37);
    *(_BYTE *)a4 = 0;
    char v28 = 1;
  }

  else
  {
    int v29 = *(_DWORD *)(a1 + 564);
    if (v29)
    {
      if (*(_DWORD *)(a1 + 568) != v29)
      {
        uint64_t v30 = (unsigned int *)sub_100051D00((uint64_t)__p);
        uint64_t v31 = std::generic_category();
        *(void *)&__int128 v34 = 35LL;
        *((void *)&v34 + 1) = v31;
        if ((*(unsigned int (**)(void, void, __int128 *))(**((void **)v30 + 1) + 32LL))( *((void *)v30 + 1),  *v30,  &v34)
          || (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v34 + 1) + 40LL))( *((void *)&v34 + 1),  v30,  v34))
        {
          *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v32 + 1) = 83LL;
          int v33 = 2;
          sub_100035DF8(&v34, &v32);
          sub_100004E4C(&v36, (uint64_t)"Diskimageuio: required mode ", 28LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          sub_100004E4C(&v36, (uint64_t)" is different than current mode ", 32LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream(&v36, off_100169EF0);
          sub_10003602C((uint64_t)&v34);
          std::ios::~ios(v37);
          if (a3)
          {
            *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((void *)&v32 + 1) = 83LL;
            int v33 = 2;
            sub_100051D40(&v34, &v32);
            sub_100004E4C(&v36, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46LL);
            diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
            sub_100051DE8((uint64_t)&v34);
            uint64_t result = (_OWORD *)sub_100050994(a1, *(unsigned int *)(a1 + 564), 0LL);
            goto LABEL_47;
          }

          *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v32 + 1) = 83LL;
          int v33 = 16;
          sub_100051E28(&v34, &v32);
          sub_100004E4C(&v36, (uint64_t)"Diskimageuio: required mode ", 28LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          sub_100004E4C(&v36, (uint64_t)" is different than current mode ", 32LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          sub_100051ED0((uint64_t)&v34);
        }
      }
    }

    uint64_t result = (_OWORD *)sub_100051D00((uint64_t)__p);
    char v28 = 0;
    *(_OWORD *)a4 = *result;
  }

  *(_BYTE *)(a4 + 16) = v28;
LABEL_47:
  if (v45) {
    return (_OWORD *)sub_100049A5C((uint64_t)__p);
  }
  return result;
}

void sub_100050FE8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x448])) {
    sub_100049A5C((uint64_t)&STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100051158(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016D690;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000511C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000511D4(uint64_t a1)
{
  *(void *)a1 = off_10016D690;
  sub_10005144C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100051270(char *a1)
{
}

uint64_t sub_1000512B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000512E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100051334(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016D5C0);
  sub_1000511D4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005136C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016D5C0);
  sub_1000511D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000513AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016D5C0);
  sub_1000511D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000513EC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016D5C0);
  sub_1000511D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100051438(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000511D4(a1);
  operator delete(v1);
}

uint64_t sub_10005144C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10005159C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100051574( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005159C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 573LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 573LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100051780(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

uint64_t sub_1000517DC(uint64_t a1, unsigned int *a2)
{
  int v4 = (void *)(a1 + 360);
  int v5 = (const char *)(*(uint64_t (**)(void))(**((void **)a2 + 1) + 16LL))(*((void *)a2 + 1));
  size_t v6 = strlen(v5);
  uint64_t v7 = sub_100004E4C(v4, (uint64_t)v5, v6);
  char v10 = 58;
  uint64_t v8 = sub_100004E4C(v7, (uint64_t)&v10, 1LL);
  std::ostream::operator<<(v8, *a2);
  return a1;
}

void *sub_100051858(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100052248((uint64_t)a1, a2);
  *a1 = off_10016D768;
  a1[45] = &off_10016D868;
  a1[46] = &off_10016D890;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016D768;
  a1[45] = off_10016D7F0;
  a1[46] = off_10016D818;
  return a1;
}

void sub_1000518DC(_Unwind_Exception *a1)
{
}

uint64_t sub_100051900(uint64_t a1)
{
  return a1;
}

void *sub_100051940(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100052870((uint64_t)a1, a2);
  *a1 = off_10016D988;
  a1[45] = &off_10016DA88;
  a1[46] = &off_10016DAB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016D988;
  a1[45] = off_10016DA10;
  a1[46] = off_10016DA38;
  return a1;
}

void sub_1000519C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000519E8(uint64_t a1)
{
  return a1;
}

double sub_100051A28@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100052E98(0, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 564) == 0, a1, a2, (uint64_t)v23);
  if (v25)
  {
    uint64_t v5 = sub_100051F10((uint64_t)v23);
    sub_1000498F4((uint64_t)v19, v5);
    unsigned int v22 = *(_DWORD *)(v5 + 512);
    BOOL v6 = v22 > 0xB || ((1 << v22) & 0x982) == 0;
    if (v6 || *(_DWORD *)(a1 + 568) || !*(_DWORD *)(a1 + 564))
    {
      sub_1000498F4((uint64_t)&v14, (uint64_t)v19);
      unsigned int v18 = v22;
      sub_1000498F4(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 512) = v18;
      *(_BYTE *)(a3 + 520) = 1;
      sub_100049A5C((uint64_t)&v14);
    }

    else
    {
      *(void *)&__int128 v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((void *)&v12 + 1) = 107LL;
      int v13 = 2;
      sub_100053388(&v14, &v12);
      sub_100004E4C(&v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46LL);
      char v10 = diskimage_uio::operator<<(&v16, v22);
      sub_100004E4C(v10, (uint64_t)")", 1LL);
      std::ostream::~ostream(&v16, off_10016E0B0);
      sub_100054224((uint64_t)&v14);
      std::ios::~ios(&v17);
      unint64_t v11 = std::generic_category();
      *(void *)a3 = 35LL;
      *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
      *(_BYTE *)(a3 + 520) = 0;
    }

    sub_100049A5C((uint64_t)v19);
  }

  else
  {
    *(void *)&__int128 v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((void *)&v14 + 1) = 107LL;
    int v15 = 16;
    sub_1000532A0(v19, &v14);
    sub_100004E4C(&v20, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38LL);
    uint64_t v8 = (unsigned int *)sub_100051D00((uint64_t)v23);
    sub_1000517DC((uint64_t)v19, v8);
    std::ostream::~ostream(&v20, off_10016DE90);
    sub_100053BFC((uint64_t)v19);
    std::ios::~ios(&v21);
    *(_BYTE *)a3 = 0;
    int v9 = v25;
    *(_BYTE *)(a3 + 520) = v25;
    if (!v9)
    {
      double result = v23[0];
      *(_OWORD *)a3 = *(_OWORD *)v23;
      return result;
    }

    sub_1000498F4(a3, (uint64_t)v23);
    *(_DWORD *)(a3 + 512) = v24;
  }

  if (v25) {
    sub_100049A5C((uint64_t)v23);
  }
  return result;
}

void sub_100051C90(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x630])) {
    sub_100049A5C((uint64_t)&STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100051D00(uint64_t result)
{
  if (*(_BYTE *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_10016C288;
  }

  return result;
}

void *sub_100051D40(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000547D0((uint64_t)a1, a2);
  *a1 = off_10016E208;
  a1[45] = &off_10016E308;
  a1[46] = &off_10016E330;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016E208;
  a1[45] = off_10016E290;
  a1[46] = off_10016E2B8;
  return a1;
}

void sub_100051DC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100051DE8(uint64_t a1)
{
  return a1;
}

void *sub_100051E28(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100054DF8((uint64_t)a1, a2);
  *a1 = off_10016E428;
  a1[45] = &off_10016E528;
  a1[46] = &off_10016E550;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016E428;
  a1[45] = off_10016E4B0;
  a1[46] = off_10016E4D8;
  return a1;
}

void sub_100051EAC(_Unwind_Exception *a1)
{
}

uint64_t sub_100051ED0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100051F10(uint64_t result)
{
  if (!*(_BYTE *)(result + 520))
  {
    uint64_t v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    __int128 v3 = *v1;
    *(void *)exception = &off_10016D170;
    *(_OWORD *)(exception + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  }

  return result;
}

void *sub_100051F64(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_100055420((uint64_t)a1, a2);
  *a1 = off_10016E648;
  a1[45] = &off_10016E748;
  a1[46] = &off_10016E770;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016E648;
  a1[45] = off_10016E6D0;
  a1[46] = off_10016E6F8;
  return a1;
}

void sub_100051FE8(_Unwind_Exception *a1)
{
}

uint64_t sub_10005200C(uint64_t a1)
{
  return a1;
}

void *sub_10005204C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_100055A48((uint64_t)a1, a2);
  *a1 = off_10016E868;
  a1[45] = &off_10016E968;
  a1[46] = &off_10016E990;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016E868;
  a1[45] = off_10016E8F0;
  a1[46] = off_10016E918;
  return a1;
}

void sub_1000520D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000520F4(uint64_t a1)
{
  return a1;
}

void sub_100052134(uint64_t a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x470uLL);
  sub_10005219C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_100018774((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100052188(_Unwind_Exception *a1)
{
}

void *sub_10005219C(void *a1, uint64_t a2, unsigned int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016D710;
  int v4 = *a3;
  uint64_t v5 = sub_1000FA260(a2, *a3);
  sub_100045554((uint64_t)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_1000521F4(_Unwind_Exception *a1)
{
}

void sub_100052208(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016D710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100052218(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016D710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100052238(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100052248(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016D900;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000522B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000522C4(uint64_t a1)
{
  *(void *)a1 = off_10016D900;
  sub_10005253C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100052360(char *a1)
{
}

uint64_t sub_1000523A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000523D8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100052424(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016D830);
  sub_1000522C4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005245C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016D830);
  sub_1000522C4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005249C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016D830);
  sub_1000522C4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000524DC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016D830);
  sub_1000522C4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100052528(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000522C4(a1);
  operator delete(v1);
}

uint64_t sub_10005253C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10005268C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100052664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005268C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 534LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 534LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100052870(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016DB20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000528D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000528EC(uint64_t a1)
{
  *(void *)a1 = off_10016DB20;
  sub_100052B64(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100052988(char *a1)
{
}

uint64_t sub_1000529CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100052A00(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100052A4C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DA50);
  sub_1000528EC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100052A84(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016DA50);
  sub_1000528EC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100052AC4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016DA50);
  sub_1000528EC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100052B04(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016DA50);
  sub_1000528EC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100052B50(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000528EC(a1);
  operator delete(v1);
}

uint64_t sub_100052B64(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100052CB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100052C8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100052CB4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 539LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 539LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void sub_100052E98( int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v12 = 1LL;
      break;
    case 1:
LABEL_17:
      sub_10004E1B0(a2, a5, a6);
      return;
    case 2:
      sub_10004929C(a2, a6);
      return;
    case 7:
    case 9:
    case 12:
      int v20 = 0;
      sub_1000498F4((uint64_t)v21, (uint64_t)__p);
      int v24 = 0;
      sub_1000498F4(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 512) = v24;
      *(_BYTE *)(a6 + 520) = 1;
      sub_100049A5C((uint64_t)v21);
      sub_100049A5C((uint64_t)__p);
      return;
    case 8:
      sub_10004E078(a2, a6);
      return;
    case 11:
      if (*(char *)(a4 + 23) < 0)
      {
        sub_100040504(__p, *(void **)a4, *(void *)(a4 + 8));
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a4;
        uint64_t v19 = *(void *)(a4 + 16);
      }

      sub_100048220(&v17, (const void **)a2, (char *)__p, a3);
      uint64_t v16 = v17;
      uint64_t v17 = 0LL;
      v21[0] = v16;
      v23[34] = 4;
      int v24 = 11;
      sub_1000498F4(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 512) = v24;
      *(_BYTE *)(a6 + 520) = 1;
      sub_100049A5C((uint64_t)v21);
      sub_100058A90(&v17, 0LL);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
      return;
    default:
      __p[0] = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      __p[1] = (void *)132;
      LODWORD(v19) = 16;
      sub_100053470(v21, (__int128 *)__p);
      sub_100004E4C(&v22, (uint64_t)"Diskimageuio: Unsupported image format", 38LL);
      diskimage_uio::operator<<(&v22, a1);
      std::ostream::~ostream(&v22, off_10016DC70);
      sub_1000535D4((uint64_t)v21);
      std::ios::~ios(v23);
      *(void *)a6 = make_error_code(161LL);
      *(void *)(a6 + std::iostream::~basic_iostream(v2, v3 + 8) = v15;
      *(_BYTE *)(a6 + 520) = 0;
      return;
  }

  while (1)
  {
    int v13 = 2;
    if ((v12 - 2) >= 5)
    {
      if ((_DWORD)v12 == 1) {
        goto LABEL_16;
      }
      if ((_DWORD)v12 == 10) {
        int v13 = 2;
      }
      else {
        int v13 = v12;
      }
    }

    if ((_DWORD)v12 == v13)
    {
      sub_100052E98(v12, a2, a3, a4, a5);
      if (!*(_BYTE *)(a6 + 520)) {
        return;
      }
      int v14 = *(_DWORD *)(sub_100051F10(a6) + 512);
      if (v14 || !*(_BYTE *)(a6 + 520))
      {
        if (v14) {
          return;
        }
      }

      else
      {
        sub_100049A5C(a6);
      }
    }

void sub_1000531D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100049700();
  }

  _Unwind_Resume(a1);
}

void *sub_1000532A0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100053B80((uint64_t)a1, a2);
  *a1 = off_10016DDC8;
  a1[45] = &off_10016DEC8;
  a1[46] = &off_10016DEF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016DDC8;
  a1[45] = off_10016DE50;
  a1[46] = off_10016DE78;
  return a1;
}

void sub_100053324(_Unwind_Exception *a1)
{
}

uint64_t sub_100053348(uint64_t a1)
{
  return a1;
}

void *sub_100053388(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000541A8((uint64_t)a1, a2);
  *a1 = off_10016DFE8;
  a1[45] = &off_10016E0E8;
  a1[46] = &off_10016E110;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016DFE8;
  a1[45] = off_10016E070;
  a1[46] = off_10016E098;
  return a1;
}

void sub_10005340C(_Unwind_Exception *a1)
{
}

uint64_t sub_100053430(uint64_t a1)
{
  return a1;
}

void *sub_100053470(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100053558((uint64_t)a1, a2);
  *a1 = off_10016DBA8;
  a1[45] = &off_10016DCA8;
  a1[46] = &off_10016DCD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016DBA8;
  a1[45] = off_10016DC30;
  a1[46] = off_10016DC58;
  return a1;
}

void sub_1000534F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100053518(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053558(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016DD40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000535C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000535D4(uint64_t a1)
{
  *(void *)a1 = off_10016DD40;
  sub_10005384C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100053670(char *a1)
{
}

uint64_t sub_1000536B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000536E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100053734(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DC70);
  sub_1000535D4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005376C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016DC70);
  sub_1000535D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000537AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016DC70);
  sub_1000535D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000537EC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016DC70);
  sub_1000535D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100053838(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000535D4(a1);
  operator delete(v1);
}

uint64_t sub_10005384C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10005399C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100053974( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005399C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 485LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 485LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100053B80(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016DF60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100053BE8(_Unwind_Exception *a1)
{
}

uint64_t sub_100053BFC(uint64_t a1)
{
  *(void *)a1 = off_10016DF60;
  sub_100053E74(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100053C98(char *a1)
{
}

uint64_t sub_100053CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100053D10(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100053D5C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DE90);
  sub_100053BFC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100053D94(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016DE90);
  sub_100053BFC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100053DD4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016DE90);
  sub_100053BFC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100053E14(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016DE90);
  sub_100053BFC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100053E60(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100053BFC(a1);
  operator delete(v1);
}

uint64_t sub_100053E74(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100053FC4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100053F9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100053FC4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 495LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 495LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_1000541A8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016E180;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100054210(_Unwind_Exception *a1)
{
}

uint64_t sub_100054224(uint64_t a1)
{
  *(void *)a1 = off_10016E180;
  sub_10005449C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000542C0(char *a1)
{
}

uint64_t sub_100054304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100054338(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100054384(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E0B0);
  sub_100054224(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000543BC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016E0B0);
  sub_100054224((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000543FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E0B0);
  sub_100054224(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005443C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E0B0);
  sub_100054224((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100054488(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100054224(a1);
  operator delete(v1);
}

uint64_t sub_10005449C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000545EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000545C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000545EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 503LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 503LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_1000547D0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016E3A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100054838(_Unwind_Exception *a1)
{
}

uint64_t sub_10005484C(uint64_t a1)
{
  *(void *)a1 = off_10016E3A0;
  sub_100054AC4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000548E8(char *a1)
{
}

uint64_t sub_10005492C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100054960(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000549AC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E2D0);
  sub_10005484C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000549E4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016E2D0);
  sub_10005484C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100054A24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E2D0);
  sub_10005484C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100054A64(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E2D0);
  sub_10005484C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100054AB0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005484C(a1);
  operator delete(v1);
}

uint64_t sub_100054AC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100054C14((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100054BEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100054C14(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 551LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 551LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100054DF8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016E5C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100054E60(_Unwind_Exception *a1)
{
}

uint64_t sub_100054E74(uint64_t a1)
{
  *(void *)a1 = off_10016E5C0;
  sub_1000550EC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100054F10(char *a1)
{
}

uint64_t sub_100054F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100054F88(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100054FD4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E4F0);
  sub_100054E74(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005500C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016E4F0);
  sub_100054E74((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005504C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E4F0);
  sub_100054E74(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005508C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E4F0);
  sub_100054E74((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000550D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100054E74(a1);
  operator delete(v1);
}

uint64_t sub_1000550EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10005523C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100055214( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005523C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 554LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 554LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100055420(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016E7E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100055488(_Unwind_Exception *a1)
{
}

uint64_t sub_10005549C(uint64_t a1)
{
  *(void *)a1 = off_10016E7E0;
  sub_100055714(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100055538(char *a1)
{
}

uint64_t sub_10005557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000555B0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000555FC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E710);
  sub_10005549C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100055634(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016E710);
  sub_10005549C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100055674(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E710);
  sub_10005549C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000556B4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E710);
  sub_10005549C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100055700(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005549C(a1);
  operator delete(v1);
}

uint64_t sub_100055714(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100055864((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005583C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100055864(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 561LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 561LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100055A48(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016EA00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100055AB0(_Unwind_Exception *a1)
{
}

uint64_t sub_100055AC4(uint64_t a1)
{
  *(void *)a1 = off_10016EA00;
  sub_100055D3C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100055B60(char *a1)
{
}

uint64_t sub_100055BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100055BD8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100055C24(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E930);
  sub_100055AC4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100055C5C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016E930);
  sub_100055AC4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100055C9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E930);
  sub_100055AC4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100055CDC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016E930);
  sub_100055AC4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100055D28(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100055AC4(a1);
  operator delete(v1);
}

uint64_t sub_100055D3C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100055E8C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100055E64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100055E8C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 565LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 565LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void *sub_100056070(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100056158((uint64_t)a1, a2);
  *a1 = off_10016EA88;
  a1[45] = &off_10016EB88;
  a1[46] = &off_10016EBB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016EA88;
  a1[45] = off_10016EB10;
  a1[46] = off_10016EB38;
  return a1;
}

void sub_1000560F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100056118(uint64_t a1)
{
  return a1;
}

uint64_t sub_100056158(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016EC20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000561C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000561D4(uint64_t a1)
{
  *(void *)a1 = off_10016EC20;
  sub_10005644C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100056270(char *a1)
{
}

uint64_t sub_1000562B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000562E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100056334(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016EB50);
  sub_1000561D4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005636C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016EB50);
  sub_1000561D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000563AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016EB50);
  sub_1000561D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000563EC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016EB50);
  sub_1000561D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100056438(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000561D4(a1);
  operator delete(v1);
}

uint64_t sub_10005644C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10005659C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100056574( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005659C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 610LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 610LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void sub_100056780(unsigned int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_1000567F8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_100018774((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000567E4(_Unwind_Exception *a1)
{
}

void *sub_1000567F8(void *a1, unsigned int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016D710;
  sub_100045554((uint64_t)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_100056840(_Unwind_Exception *a1)
{
}

uint64_t sub_100056854(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + sub_1000114F0(v1 + 64) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 48);
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
    operator delete(v5);
  }

  return a1;
}

void *sub_1000568B4(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    double result = sub_10005692C(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100056910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10005692C(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    sub_100016F4C();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_10005696C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016ECA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005697C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016ECA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10005699C(uint64_t a1)
{
}

void sub_1000569A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }

  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
    operator delete(v4);
  }

void sub_100056A04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016ECF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100056A14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016ECF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100056A34(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_BYTE *sub_100056A44@<X0>(const std::error_category *a1@<X0>, uint64_t a2@<X8>)
{
  if (v12[16])
  {
    double result = (_BYTE *)sub_100056CAC((uint64_t)v12);
    if (*result)
    {
      *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((void *)&v7 + 1) = 84LL;
      int v8 = 16;
      sub_100056D00(v9, &v7);
      sub_100004E4C(&v10, (uint64_t)"Diskimageuio: image is locked", 29LL);
      std::ostream::~ostream(&v10, off_10016F030);
      sub_10005748C((uint64_t)v9);
      std::ios::~ios(v11);
      double result = (_BYTE *)make_error_code(162LL);
      char v4 = 0;
      *(void *)a2 = result;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
    }

    else
    {
      *(_BYTE *)a2 = 0;
      char v4 = 1;
    }
  }

  else
  {
    *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((void *)&v7 + 1) = 84LL;
    int v8 = 16;
    sub_100056BC4(v9, &v7);
    sub_100004E4C(&v10, (uint64_t)"Diskimageuio: can't get lock status ", 36LL);
    char v6 = (unsigned int *)sub_100047874((uint64_t)v12);
    sub_1000517DC((uint64_t)v9, v6);
    std::ostream::~ostream(&v10, off_10016EE10);
    sub_100056E64((uint64_t)v9);
    std::ios::~ios(v11);
    double result = (_BYTE *)sub_100047874((uint64_t)v12);
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }

  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

void sub_100056BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100056BC4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100056DE8((uint64_t)a1, a2);
  *a1 = off_10016ED48;
  a1[45] = &off_10016EE48;
  a1[46] = &off_10016EE70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016ED48;
  a1[45] = off_10016EDD0;
  a1[46] = off_10016EDF8;
  return a1;
}

void sub_100056C48(_Unwind_Exception *a1)
{
}

uint64_t sub_100056C6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100056CAC(uint64_t result)
{
  if (!*(_BYTE *)(result + 16))
  {
    uint64_t v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    __int128 v3 = *v1;
    *(void *)exception = &off_10016D170;
    *(_OWORD *)(exception + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  }

  return result;
}

void *sub_100056D00(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_100057410((uint64_t)a1, a2);
  *a1 = off_10016EF68;
  a1[45] = &off_10016F068;
  a1[46] = &off_10016F090;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016EF68;
  a1[45] = off_10016EFF0;
  a1[46] = off_10016F018;
  return a1;
}

void sub_100056D84(_Unwind_Exception *a1)
{
}

uint64_t sub_100056DA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100056DE8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016EEE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100056E50(_Unwind_Exception *a1)
{
}

uint64_t sub_100056E64(uint64_t a1)
{
  *(void *)a1 = off_10016EEE0;
  sub_1000570DC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100056F00(char *a1)
{
}

uint64_t sub_100056F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100056F78(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100056FC4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016EE10);
  sub_100056E64(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100056FFC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016EE10);
  sub_100056E64((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005703C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016EE10);
  sub_100056E64(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005707C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016EE10);
  sub_100056E64((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000570C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100056E64(a1);
  operator delete(v1);
}

uint64_t sub_1000570DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10005722C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100057204( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005722C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 645LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 645LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100057410(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016F100;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100057478(_Unwind_Exception *a1)
{
}

uint64_t sub_10005748C(uint64_t a1)
{
  *(void *)a1 = off_10016F100;
  sub_100057704(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100057528(char *a1)
{
}

uint64_t sub_10005756C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000575A0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000575EC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016F030);
  sub_10005748C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100057624(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016F030);
  sub_10005748C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100057664(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016F030);
  sub_10005748C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000576A4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016F030);
  sub_10005748C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000576F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005748C(a1);
  operator delete(v1);
}

uint64_t sub_100057704(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100057854((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005782C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100057854(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 650LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 650LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void *sub_100057A38(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100057B20((uint64_t)a1, a2);
  *a1 = off_10016F188;
  a1[45] = &off_10016F288;
  a1[46] = &off_10016F2B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016F188;
  a1[45] = off_10016F210;
  a1[46] = off_10016F238;
  return a1;
}

void sub_100057ABC(_Unwind_Exception *a1)
{
}

uint64_t sub_100057AE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100057B20(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016F320;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100057B88(_Unwind_Exception *a1)
{
}

uint64_t sub_100057B9C(uint64_t a1)
{
  *(void *)a1 = off_10016F320;
  sub_100057E14(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100057C38(char *a1)
{
}

uint64_t sub_100057C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100057CB0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100057CFC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016F250);
  sub_100057B9C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100057D34(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016F250);
  sub_100057B9C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100057D74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016F250);
  sub_100057B9C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100057DB4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016F250);
  sub_100057B9C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100057E00(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100057B9C(a1);
  operator delete(v1);
}

uint64_t sub_100057E14(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100057F64((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100057F3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100057F64(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 681LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 681LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

const std::error_category *sub_100058148@<X0>(uint64_t a1@<X8>)
{
  *(void *)&__int128 v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 69LL;
  int v4 = 16;
  sub_1000582CC(v5, &v3);
  sub_100004E4C(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66LL);
  std::ostream::~ostream(&v6, off_10016F4A0);
  sub_100058430((uint64_t)v5);
  std::ios::~ios(&v7);
  double result = std::generic_category();
  *(void *)a1 = 6LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_1000581E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100058210(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 492);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_100058228(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 48);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_10005823C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_100058250(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t sub_100058298@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 16LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void *sub_1000582CC(void *a1, __int128 *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000583B4((uint64_t)a1, a2);
  *a1 = off_10016F3D8;
  a1[45] = &off_10016F4D8;
  a1[46] = &off_10016F500;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016F3D8;
  a1[45] = off_10016F460;
  a1[46] = off_10016F488;
  return a1;
}

void sub_100058350(_Unwind_Exception *a1)
{
}

uint64_t sub_100058374(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000583B4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016F570;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10005841C(_Unwind_Exception *a1)
{
}

uint64_t sub_100058430(uint64_t a1)
{
  *(void *)a1 = off_10016F570;
  sub_1000586A8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000584CC(char *a1)
{
}

uint64_t sub_100058510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100058544(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100058590(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016F4A0);
  sub_100058430(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000585C8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016F4A0);
  sub_100058430((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100058608(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016F4A0);
  sub_100058430(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100058648(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016F4A0);
  sub_100058430((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100058694(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100058430(a1);
  operator delete(v1);
}

uint64_t sub_1000586A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000587F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000587D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000587F8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 112LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 112LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000589DC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = sub_100058A34(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100058A20(_Unwind_Exception *a1)
{
}

void *sub_100058A34(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016ECA0;
  sub_10010F684(a1 + 3);
  return a1;
}

void sub_100058A68(_Unwind_Exception *a1)
{
}

void sub_100058A7C(std::exception *a1)
{
}

void sub_100058A90(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100058B20(&v3);
    operator delete(v2);
  }

uint64_t sub_100058AD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100058B20(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        int v4 = v6;
      }

      while (v6 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t *sub_100058B94(uint64_t *a1, __int128 *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  __int128 v5 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  void v14[2] = v4;
  uint64_t v15 = &v17;
  v14[0] = 0LL;
  v14[1] = 0LL;
  uint64_t v18 = v4;
  __int128 v16 = xmmword_100138580;
  __int128 v17 = v5;
  sub_10002D9AC((uint64_t)a1, (uint64_t *)&v15);
  sub_100014E54((uint64_t)&v15);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v9 = (unint64_t *)a1[18];
  uint64_t v8 = a1[19];
  uint64_t v10 = a1[1];
  uint64_t v15 = (__int128 *)*a1;
  int v13 = v9;
  v14[0] = (uint64_t)v15 + 24 * v10;
  uint64_t v12 = &v9[v8];
  sub_10002B504((uint64_t)(a1 + 26), (uint64_t *)&v15, v14, &v13, &v12, v6, v7);
  return a1;
}

void sub_100058C64(_Unwind_Exception *a1)
{
}

std::string *sub_100058C90(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_100058CF4(a1, a2, &a2[v3]);
  return a1;
}

void sub_100058CD8(_Unwind_Exception *exception_object)
{
}

std::string *sub_100058CF4(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = HIBYTE(cap);
  }

  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v9 = 22LL;
    uint64_t v10 = this;
  }

  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0LL, 0LL);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = this->__r_.__value_.__s.__size_;
    }

    os_log_type_t v14 = this;
    if ((v6 & 0x80) != 0) {
      os_log_type_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      _BYTE *i = v16;
    }

    _BYTE *i = 0;
    std::string::size_type v17 = v7 + size;
    else {
      this->__r_.__value_.__s.__size_ = v17 & 0x7F;
    }
  }

  else
  {
    sub_100058E68(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
  }

  return this;
}

void sub_100058E4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100058E68(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100004AC0();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000LL;
    *BOOL v4 = result;
    BOOL v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)BOOL v4 = 0;
  return result;
}

__n128 sub_100058F0C(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  if (*((_BYTE *)this + 16)) {
    BOOL v4 = *((_BYTE *)a2 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v9[0] = *(void *)this;
    *(void *)this = 0LL;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }

  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = *(void *)this;
      *(void *)this = 0LL;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      char v6 = *((_BYTE *)this + 16);
      *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a2 + 16) = v6;
      return result;
    }
  }

  else if (*((_BYTE *)a2 + 16))
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0LL;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)this = v7;
    v9[0] = 0LL;
    char v8 = *((_BYTE *)this + 16);
    *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a2 + 16) = v8;
    goto LABEL_11;
  }

  __n128 result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void sub_100059008(_OWORD *a1)
{
  *(_OWORD *)uint64_t v1 = *a1;
  *(_BYTE *)(v1 + 16) = 0;
  __cxa_end_catch();
}

  ;
}

void *sub_100059020(void *a1)
{
  return __cxa_begin_catch(a1);
}

uint64_t sub_100059028(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_10016F7F8[v1])(&v5, v3);
}

uint64_t sub_100059084(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_10016F838[v1])(&v5, v3);
}

uint64_t sub_1000590E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24) - v2;
  uint64_t v4 = v3 / 48;
  if (v3 < 49)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      int v8 = *v7;
      v7 -= 12;
      if (v8 != 2) {
        break;
      }
      ++v5;
    }

    while (v6-- > 1);
  }

  uint64_t v10 = v4 + ~v5;
  if (v5) {
    return v10;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100059154(_DWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(a4 + 144);
  uint64_t v7 = (*((uint64_t (**)(_DWORD **))*a1 + 4))(a1);
  if (*a1[2]) {
    return -78LL;
  }
  uint64_t v9 = *(void ***)(a2 + 16);
  return sub_1000128C0(*v9);
}

uint64_t sub_100059210(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  uint64_t v3 = *(void ***)(a2 + 24);
  if (v2 == v3) {
    return 4294967218LL;
  }
  uint64_t v4 = 4294967218LL;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)(*v2)[1] + 40LL))((*v2)[1]))
    {
      uint64_t v4 = sub_100012650(*v2);
      if ((_DWORD)v4) {
        break;
      }
    }

    v2 += 2;
  }

  while (v2 != v3);
  return v4;
}

uint64_t sub_100059288(uint64_t a1, void **a2, _BYTE *a3)
{
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)a1 = off_10016F6A0;
  *(void *)(a1 + 16) = 0LL;
  unint64_t v6 = (uint64_t *)(a1 + 16);
  *(_BYTE *)(a1 + 56) = 0;
  uint64_t v7 = (void *)(a1 + 56);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 144) = 0;
  *(void *)(a1 + 40) = (*(uint64_t (**)(void))(*(void *)**a2 + 24LL))(**a2);
  *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  if ((*a3 & 2) != 0)
  {
    int v8 = a2[1];
    *(void *)&__int128 v70 = *(v8 - 3);
    uint64_t v9 = *(v8 - 2);
    *((void *)&v70 + 1) = v9;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)(v9 + 8);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      int v8 = a2[1];
    }

    uint64_t v12 = v8 - 3;
    while (v12 != *a2)
    {
      std::string::size_type v13 = (uint64_t (***)(void))*(v12 - 3);
      v12 -= 3;
      __int128 v75 = v13;
      os_log_type_t v14 = (std::__shared_weak_count *)v12[1];
      __int128 v76 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }

      uint64_t v17 = sub_100059028((uint64_t (***)(void))v70);
      char v18 = v17;
      uint64_t v79 = v17;
      uint64_t v80 = v19;
      uint64_t v20 = sub_100059084(v75);
      uint64_t v77 = v20;
      uint64_t v78 = v21;
      if (v18)
      {
LABEL_11:
        if ((_BYTE)v20)
        {
LABEL_12:
          if (v79 != v77 || v80 != v78)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            void *exception = &off_100189E78;
            char v65 = std::generic_category();
            exception[1] = 166LL;
            exception[2] = v65;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
            exception[7] = "Corrupted shadow file(s) chain";
          }
        }

        else
        {
          uint64_t v28 = 1LL;
          while (v28 != 16)
          {
            if (*((unsigned __int8 *)&v77 + v28++))
            {
              break;
            }
          }
        }
      }

      else
      {
        uint64_t v26 = 1LL;
        while (v26 != 16)
        {
          if (*((unsigned __int8 *)&v79 + v26++))
          {
            break;
          }
        }
      }

      sub_100026A1C(&v70, (uint64_t *)&v75);
      __int16 v23 = v76;
      if (v76)
      {
        uint64_t v24 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }

    uint64_t v30 = (std::__shared_weak_count *)*((void *)&v70 + 1);
    if (*((void *)&v70 + 1))
    {
      uint64_t v31 = (unint64_t *)(*((void *)&v70 + 1) + 8LL);
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }

  uint64_t v33 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    int v34 = 0;
    unint64_t v35 = 0LL;
    unint64_t v68 = "Block size mismatch in DiskImageStackable";
    do
    {
      uint64_t v36 = (void *)(v33 + 24 * v35);
      uint64_t v37 = *(void *)(a1 + 40);
      if (*((_DWORD *)v36 + 4) == 2)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v38 >= 2 && v35 != v38 - 2)
        {
          __int128 v40 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v40)
          {
            {
              unint64_t v68 = "Currently, cache can only be added directly above plugin";
LABEL_88:
              __int128 v66 = __cxa_allocate_exception(0x40uLL);
              void *v66 = &off_100189E78;
              __int128 v67 = std::generic_category();
              v66[1] = 4294967274LL;
              v66[2] = v67;
              *((_BYTE *)v66 + 24) = 0;
              *((_BYTE *)v66 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
              v66[7] = v68;
            }
          }
        }
      }

      __int128 v41 = (uint64_t (***)(void))*v36;
      __int128 v75 = v41;
      __int128 v42 = (std::__shared_weak_count *)v36[1];
      __int128 v76 = v42;
      uint64_t v43 = v41;
      if (v42)
      {
        __int128 v44 = (unint64_t *)&v42->__shared_owners_;
        do
          unint64_t v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        uint64_t v43 = (uint64_t (***)(void))*v36;
      }

      if ((*v43)[12](v43))
      {
        LOBYTE(v77) = 1;
        sub_10005F568((uint64_t)v41, (char *)&v77, &v70);
        sub_100014DF0((uint64_t)v36, &v70);
        char v46 = (std::__shared_weak_count *)*((void *)&v70 + 1);
        if (*((void *)&v70 + 1))
        {
          __int128 v47 = (unint64_t *)(*((void *)&v70 + 1) + 8LL);
          do
            unint64_t v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }

        *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 1;
      }

      LODWORD(v70) = *((_DWORD *)v36 + 4);
      *((void *)&v70 + 1) = *v36;
      uint64_t v49 = (std::__shared_weak_count *)v36[1];
      unint64_t v71 = v49;
      if (v49)
      {
        char v50 = (unint64_t *)&v49->__shared_owners_;
        do
          unint64_t v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }

      __int128 v72 = v75;
      __int128 v73 = v76;
      if (v76)
      {
        __int128 v52 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }

      uint64_t v74 = (*(uint64_t (**)(void))(*(void *)*v36 + 32LL))(*v36);
      sub_100059910(v6, (uint64_t)&v70);
      if (*((_DWORD *)v36 + 4) == 2) {
        v34 |= (*(uint64_t (**)(void))(*(void *)*v36 + 40LL))(*v36);
      }
      uint64_t v54 = v73;
      if (v73)
      {
        __int128 v55 = (unint64_t *)&v73->__shared_owners_;
        do
          unint64_t v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }

      __int128 v57 = v71;
      if (v71)
      {
        char v58 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }

      uint64_t v60 = v76;
      if (v76)
      {
        __int128 v61 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }

      ++v35;
      uint64_t v33 = (uint64_t)*a2;
    }

    while (v35 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if ((v34 & 1) != 0)
    {
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 0x40000000LL;
      v69[2] = sub_100059A34;
      v69[3] = &unk_10016F760;
      v69[4] = a1;
      sub_10005E600((uint64_t)v7);
      sub_10005D910(v7, (uint64_t)v69, 600000000LL);
      *(_BYTE *)(a1 + 144) = 1;
    }
  }

  return a1;
}

void sub_10005988C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100059910(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555LL) {
      sub_100016F4C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555LL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      std::string::size_type v13 = (char *)sub_10005E400(v4, v12);
    }
    else {
      std::string::size_type v13 = 0LL;
    }
    uint64_t v15 = v13;
    unint64_t v16 = &v13[48 * v9];
    char v18 = &v13[48 * v12];
    sub_10005E338((uint64_t)v16, a2);
    uint64_t v17 = v16 + 48;
    sub_10005E38C(a1, &v15);
    uint64_t v8 = a1[1];
    sub_10005E574((uint64_t)&v15);
  }

  else
  {
    sub_10005E338(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 48;
    a1[1] = v7 + 48;
  }

  a1[1] = v8;
  return v8 - 48;
}

void sub_100059A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100059A34(uint64_t a1)
{
  return sub_100059A3C(*(void *)(a1 + 32));
}

uint64_t sub_100059A3C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(result + 24);
  while (v1 != v2)
  {
    __n128 result = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40LL))(*(void *)(v1 + 8));
    if ((_DWORD)result) {
      BOOL v3 = *(_DWORD *)v1 == 2;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 136LL))(*(void *)(v1 + 8));
      __n128 result = sub_100012650(v4);
      if (v4) {
        __n128 result = (*(uint64_t (**)(void *))(*v4 + 40LL))(v4);
      }
    }

    v1 += 48LL;
  }

  return result;
}

void sub_100059AC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100059AE4(uint64_t a1)
{
  *(void *)a1 = off_10016F6A0;
  sub_100059A3C(a1);
  sub_10005E658(a1 + 56);
  BOOL v3 = (void **)(a1 + 16);
  sub_10005E6B0(&v3);
  return a1;
}

void sub_100059B3C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100059AE4(a1);
  operator delete(v1);
}

unint64_t sub_100059B50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v15 = *(void *)(a1 + 40);
  unsigned int v16 = *((unsigned __int8 *)a6 + 16);
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  if ((v16 & 2) != 0) {
    uint64_t v19 = *a6;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  v34[0] = v19 * v15;
  v34[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  char v35 = 2;
  sub_10002C8E0(a3, (uint64_t)v34, a4, (uint64_t)v36);
  unint64_t v20 = sub_100059D30(a1, a2, (uint64_t)v36, (uint64_t)&v39, a5, a7, a8, a9, a10);
  uint64_t v21 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  uint64_t v24 = v40;
  if (v40)
  {
    unint64_t v25 = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  uint64_t v27 = v38;
  if (v38)
  {
    uint64_t v28 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  uint64_t v30 = v37;
  if (v37)
  {
    uint64_t v31 = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  return v20;
}

void sub_100059D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

unint64_t sub_100059D30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v14 = sub_10005BAFC();
  uint64_t v16 = v14;
  unint64_t v80 = v14;
  unint64_t v81 = v15;
  if ((v14 & 0x8000000000000000LL) == 0 || !(_DWORD)v14)
  {
    unint64_t v17 = *(void *)(a3 + 144);
    BOOL v18 = v15 < v17 || v14 > ((*(void *)(a4 + 144) - v17) & ~((uint64_t)(*(void *)(a4 + 144) - v17) >> 63));
    BOOL v19 = 0;
    if (a5 && v18)
    {
      unint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a4 + 144) - v17;
      unint64_t v22 = v21 & ~(v21 >> 63);
      if (v22 <= v20) {
        unint64_t v22 = *(void *)(a1 + 40);
      }
      if (v21 <= 0) {
        unint64_t v23 = 0LL;
      }
      else {
        unint64_t v23 = v22;
      }
      v78[0] = v17 / v20;
      v78[1] = (v17 + v20 + v23 - 1) / v20;
      char v79 = 2;
      BOOL v19 = sub_10005A784(a1, a2, &v80, (uint64_t)v78, a5, a9);
    }

    BOOL v51 = v19;
    uint64_t v24 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v65 = *(void *)a3;
    __int128 v66 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }

    v67[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)(a3 + 25);
    uint64_t v68 = *(void *)(a3 + 48);
    __int128 v69 = *(_OWORD *)(a3 + 56);
    __int128 v70 = *(_OWORD *)(a3 + 72);
    __int128 v71 = *(_OWORD *)(a3 + 88);
    char v72 = *(_BYTE *)(a3 + 104);
    uint64_t v27 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v73 = *(void *)(a3 + 112);
    uint64_t v74 = v27;
    if (v27)
    {
      uint64_t v28 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }

    __int128 v75 = *(_OWORD *)(a3 + 128);
    uint64_t v76 = *(void *)(a3 + 144);
    char v77 = *(_BYTE *)(a3 + 152);
    uint64_t v30 = *(std::__shared_weak_count **)(a4 + 8);
    uint64_t v52 = *(void *)a4;
    unint64_t v53 = v30;
    if (v30)
    {
      uint64_t v31 = (unint64_t *)&v30->__shared_owners_;
      do
        unint64_t v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }

    v54[0] = *(_OWORD *)(a4 + 16);
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)(a4 + 25);
    uint64_t v55 = *(void *)(a4 + 48);
    __int128 v56 = *(_OWORD *)(a4 + 56);
    __int128 v57 = *(_OWORD *)(a4 + 72);
    __int128 v58 = *(_OWORD *)(a4 + 88);
    char v59 = *(_BYTE *)(a4 + 104);
    uint64_t v33 = *(std::__shared_weak_count **)(a4 + 120);
    uint64_t v60 = *(void *)(a4 + 112);
    __int128 v61 = v33;
    if (v33)
    {
      int v34 = (unint64_t *)&v33->__shared_owners_;
      do
        unint64_t v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }

    uint64_t v36 = *(void *)(a4 + 144);
    __int128 v62 = *(_OWORD *)(a4 + 128);
    uint64_t v63 = v36;
    char v64 = *(_BYTE *)(a4 + 152);
    uint64_t v16 = sub_10005AD2C(a1, a2, (uint64_t)&v65, (uint64_t)&v52, &v80, a5);
    uint64_t v37 = v61;
    if (v61)
    {
      unint64_t v38 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    __int128 v40 = v53;
    if (v53)
    {
      __int128 v41 = (unint64_t *)&v53->__shared_owners_;
      do
        unint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    uint64_t v43 = v74;
    if (v74)
    {
      __int128 v44 = (unint64_t *)&v74->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    char v46 = v66;
    if (v66)
    {
      __int128 v47 = (unint64_t *)&v66->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    if ((v16 & 0x8000000000000000LL) == 0 || !(_DWORD)v16)
    {
      uint64_t v49 = *(void *)(a4 + 144);
      if (v51) {
        return sub_100118F5C(a3, a4, (v49 - *(void *)(a3 + 144)) & ~((v49 - *(void *)(a3 + 144)) >> 63), &v80);
      }
      else {
        return v49 - v81;
      }
    }
  }

  return v16;
}

uint64_t sub_10005A11C(uint64_t a1)
{
  uint64_t v2 = a1 + 160;
  sub_1000114F0(a1 + 272);
  sub_1000114F0(v2);
  sub_1000114F0(a1 + 112);
  return sub_1000114F0(a1);
}

uint64_t sub_10005A158@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((*(_BYTE *)(a4 + 16) & 2) != 0) {
    uint64_t v8 = *(void *)a4;
  }
  else {
    uint64_t v8 = *(void *)a4 + 1LL;
  }
  unint64_t v9 = (*(_BYTE *)(a4 + 16) & 1) + *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(result + 16);
  uint64_t v11 = *(void *)(result + 24);
  unint64_t v12 = *(void *)(v10 + 48 * a3 + 40);
  if (v12 < v9) {
    unint64_t v9 = *(void *)(v10 + 48 * a3 + 40);
  }
  *(void *)&__int128 v30 = v8;
  *((void *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(void *)(v10 + 48 * a3 + 88)) {
    goto LABEL_19;
  }
  uint64_t v13 = result;
  *(void *)&__int128 v28 = *(void *)(v10 + 48 * a3 + 88);
  *((void *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  __n128 result = sub_10005A44C((uint64_t)&v28, (uint64_t)&v30);
  if ((result & 1) == 0)
  {
    uint64_t v10 = *(void *)(v13 + 16);
LABEL_19:
    uint64_t v20 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
    *(void *)a5 = *(void *)(v10 + 48 * a3 + 8);
    *(_OWORD *)(a5 + std::iostream::~basic_iostream(v2, v3 + 8) = v30;
    *(void *)(a5 + 24) = v31;
    *(void *)(a5 + 32) = 0LL;
    *(void *)(a5 + 40) = v20;
    *(_DWORD *)(a5 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 6;
    *(void *)(a5 + 56) = &off_10016D460;
    *(void *)(a5 + 80) = a5 + 56;
    return result;
  }

  __int128 v24 = v28;
  uint64_t v25 = v29;
  sub_10005A620((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  uint64_t v14 = v30;
  if ((v31 & 2) == 0) {
    uint64_t v14 = v30 + 1;
  }
  uint64_t v15 = v26;
  if ((v27 & 2) == 0) {
    uint64_t v15 = v26 + 1;
  }
  *(void *)&__int128 v30 = v14;
  *((void *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  uint64_t v16 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
  uint64_t v32 = *(void *)(*(void *)(v13 + 16) + 48 * a3 + 8);
  __int128 v33 = v30;
  uint64_t v34 = v31;
  uint64_t v35 = 0LL;
  uint64_t v36 = v16;
  int v37 = 6;
  unint64_t v17 = v38;
  v38[0] = &off_10016D460;
  unint64_t v39 = v38;
  BOOL v18 = operator new(0x20uLL);
  unint64_t v22 = v18 + 4;
  unint64_t v23 = (char *)(v18 + 4);
  *(_OWORD *)BOOL v18 = v26;
  v18[2] = v27;
  *((_DWORD *)v18 + 6) = 1;
  std::string __p = v18;
  sub_10009330C((uint64_t)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }

  if (v39 == v38)
  {
    uint64_t v19 = 4LL;
  }

  else
  {
    if (!v39) {
      goto LABEL_23;
    }
    uint64_t v19 = 5LL;
    unint64_t v17 = v39;
  }

  (*(void (**)(void *))(*v17 + 8 * v19))(v17);
LABEL_23:
  __n128 result = v35;
  uint64_t v35 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

void sub_10005A3D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35 == v35)
  {
    uint64_t v37 = 4LL;
  }

  else
  {
    if (!a35) {
      goto LABEL_8;
    }
    uint64_t v37 = 5LL;
    uint64_t v35 = a35;
  }

  (*(void (**)(void *))(*v35 + 8 * v37))(v35);
LABEL_8:
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 40LL))(a29);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10005A44C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (v4 < *(void *)a1) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (*(void *)a1 >= v4) {
        return 0LL;
      }
    }
  }

  else
  {
    unint64_t v3 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)a1 >= v4 || *(void *)a1 + 1LL >= v4) {
      return 0LL;
    }
  }

  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v6 == 3)
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (v7 < *(void *)a2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v7) {
        return 0LL;
      }
    }
  }

  else
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v7 || *(void *)a2 + 1LL >= v7) {
      return 0LL;
    }
  }

  if ((_BYTE)v2)
  {
    if (*(_BYTE *)(a1 + 16) == 3)
    {
      if (v4 < v3) {
        return 0LL;
      }
    }

    else if (v3 >= v4)
    {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
  }

  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0LL;
      }
    }

    else if (v8 >= v7)
    {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }

  if ((v6 & 2) != 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v8 + 1;
  }
  if ((v2 & 1) + v4 - 1 < v11) {
    return 0LL;
  }
  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0LL;
      }
    }

    else if (v8 >= v7)
    {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }

  if (!(_BYTE)v2)
  {
    BOOL result = 0LL;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
    goto LABEL_60;
  }

  if (v2 == 3)
  {
    if (v4 >= v3) {
      goto LABEL_60;
    }
    return 0LL;
  }

  if (v3 >= v4) {
    return 0LL;
  }
LABEL_60:
  if ((v2 & 2) == 0) {
    ++v3;
  }
  return (v6 & 1) + v7 - 1 >= v3;
}

double sub_10005A620@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (v4 < *a1) {
        goto LABEL_31;
      }
    }

    else
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (*a1 >= v4) {
        goto LABEL_31;
      }
    }
  }

  else
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4) {
      goto LABEL_31;
    }
  }

  int v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((_BYTE *)a2 + 16))
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  if (v7 == 3)
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (v8 >= *a2) {
      goto LABEL_15;
    }
LABEL_31:
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_100198608);
    if ((v17 & 1) == 0)
    {
      uint64_t v20 = a3;
      int v19 = __cxa_guard_acquire(&qword_100198608);
      a3 = v20;
      if (v19)
      {
        *(void *)&xmmword_1001985F0 = qword_1001985E0;
        *((void *)&xmmword_1001985F0 + 1) = qword_1001985E0;
        LOBYTE(qword_100198600) = 2;
        __cxa_guard_release(&qword_100198608);
        a3 = v20;
      }
    }

    double result = *(double *)&xmmword_1001985F0;
    *(_OWORD *)a3 = xmmword_1001985F0;
    *(void *)(a3 + 16) = qword_100198600;
    return result;
  }

  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 >= v8) {
    goto LABEL_31;
  }
LABEL_15:
  char v10 = v3 & 2;
  if ((v3 & 2) != 0) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = v5 + 1;
  }
  char v12 = v7 & 2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = v9 + 1;
  }
  int v14 = v3 & 1;
  int v15 = v7 & 1;
  if (v11 < v13)
  {
    unint64_t v5 = v9;
    char v10 = v12;
  }

  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    unint64_t v4 = v8;
    LOBYTE(v14) = v15;
  }

  *(void *)a3 = v5;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v14 | v10;
  return result;
}

BOOL sub_10005A784( uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = a3[1];
  if (*a3 <= v6) {
    unint64_t v8 = *(void *)(a1 + 40);
  }
  else {
    unint64_t v8 = *a3;
  }
  if (*a3) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0LL;
  }
  v35[0] = v7 / v6;
  v35[1] = (v7 + v9) / v6;
  char v36 = 2;
  if (a5)
  {
    uint64_t v14 = 0LL;
    unint64_t v15 = 0LL;
    unint64_t v30 = a5 - 1;
    BOOL v16 = 1;
    while (1)
    {
      if (*(_DWORD *)(*(void *)(a1 + 16) + v14) == 2) {
        goto LABEL_37;
      }
      if (a6 && v30 == v15) {
        sub_10005E748((uint64_t)v41, a6);
      }
      else {
        sub_10005A158(a1, a2, v15, a4, (uint64_t)v41);
      }
      sub_10005A158(a1, a2, v15, (uint64_t)v35, (uint64_t)v37);
      sub_1000506D8((uint64_t)v37, (uint64_t)v34);
      sub_10005080C((uint64_t)v37, (uint64_t)v33);
      sub_1000506D8((uint64_t)v41, (uint64_t)v32);
      sub_10005080C((uint64_t)v41, (uint64_t)v31);
      BOOL v17 = sub_10005AB40(v34, v33, v32, v31);
      uint64_t v18 = v31[0];
      v31[0] = 0LL;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
      }
      uint64_t v19 = v32[0];
      v32[0] = 0LL;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 24LL))(v19);
      }
      uint64_t v20 = v33[0];
      v33[0] = 0LL;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 24LL))(v20);
      }
      uint64_t v21 = v34[0];
      v34[0] = 0LL;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 24LL))(v21);
      }
      unint64_t v22 = v40;
      if (v40 == v39)
      {
        unint64_t v22 = v39;
        uint64_t v23 = 4LL;
      }

      else
      {
        if (!v40) {
          goto LABEL_27;
        }
        uint64_t v23 = 5LL;
      }

      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
      uint64_t v24 = v38;
      uint64_t v38 = 0LL;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 40LL))(v24);
      }
      uint64_t v25 = v44;
      if (v44 == v43)
      {
        uint64_t v25 = v43;
        uint64_t v26 = 4LL;
      }

      else
      {
        if (!v44) {
          goto LABEL_34;
        }
        uint64_t v26 = 5LL;
      }

      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_34:
      uint64_t v27 = v42;
      uint64_t v42 = 0LL;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 40LL))(v27);
      }
      if (!v17) {
        return v16;
      }
LABEL_37:
      BOOL v16 = ++v15 < a5;
      v14 += 48LL;
      if (a5 == v15) {
        return v16;
      }
    }
  }

  return 0;
}

void sub_10005AA14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24LL))(a12);
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24LL))(a18);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 24LL))(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 24LL))(a30);
  }
  if (a49 == v50)
  {
    uint64_t v53 = 4LL;
  }

  else
  {
    if (!a49) {
      goto LABEL_14;
    }
    uint64_t v53 = 5LL;
    char v50 = a49;
  }

  (*(void (**)(void *))(*v50 + 8 * v53))(v50);
LABEL_14:
  if (a43) {
    (*(void (**)(uint64_t))(*(void *)a43 + 40LL))(a43);
  }
  uint64_t v54 = *(void **)(v51 - 104);
  if (v54 == v49)
  {
    uint64_t v55 = 4LL;
  }

  else
  {
    if (!v54) {
      goto LABEL_21;
    }
    uint64_t v55 = 5LL;
    uint64_t v49 = *(void **)(v51 - 104);
  }

  (*(void (**)(void *))(*v49 + 8 * v55))(v49);
LABEL_21:
  uint64_t v56 = *(void *)(v51 - 152);
  *(void *)(v51 - sub_1000114F0(v1 + 152) = 0LL;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 40LL))(v56);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10005AB40(void *a1, void *a2, void *a3, void *a4)
{
  if (sub_1000E47F0((uint64_t)&v20, (uint64_t)v19))
  {
    while (sub_1000E47F0((uint64_t)&v16, (uint64_t)v15))
    {
      BOOL v7 = sub_10005EA1C(v21, v17);
      if (v22 != v18 || !v7) {
        goto LABEL_10;
      }
      sub_1000E4A20(&v20);
      sub_1000E4A20(&v16);
    }
  }

  else {
LABEL_10:
  }
    BOOL v9 = 0LL;
  uint64_t v10 = v15[0];
  v15[0] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v12 = v19[0];
  v19[0] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  return v9;
}

void sub_10005ACA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24LL))(a15);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24LL))(a21);
  }
  uint64_t v23 = *(void *)(v21 - 80);
  *(void *)(v21 - 80) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005AD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *a5;
  unint64_t v8 = a5[1] % v6;
  BOOL v9 = v8 == 0;
  unint64_t v10 = v6 - v8;
  if (v9) {
    unint64_t v10 = 0LL;
  }
  if (v7 < v10) {
    return 0LL;
  }
  uint64_t v15 = a1;
  v178[0] = 0;
  char v179 = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v17 = (v7 - v10) / v6 * v6;
  unint64_t v165 = *(void *)a3;
  uint64_t v166 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }

  __int128 v20 = *(_OWORD *)(a3 + 56);
  v167[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v168 = *(void *)(a3 + 48);
  __int128 v169 = v20;
  __int128 v21 = *(_OWORD *)(a3 + 88);
  __int128 v170 = *(_OWORD *)(a3 + 72);
  __int128 v171 = v21;
  char v172 = *(_BYTE *)(a3 + 104);
  int v22 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v173 = *(void *)(a3 + 112);
  uint64_t v174 = v22;
  if (v22)
  {
    uint64_t v23 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  uint64_t v25 = *(void *)(a3 + 144);
  __int128 v175 = *(_OWORD *)(a3 + 128);
  uint64_t v176 = v25;
  char v177 = *(_BYTE *)(a3 + 152);
  sub_10002D4A4((uint64_t)&v165, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v180);
  sub_10004D6EC((uint64_t)v178);
  sub_10002D79C((uint64_t)v178, (uint64_t)&v180);
  char v179 = 1;
  uint64_t v26 = v194;
  if (v194)
  {
    uint64_t v27 = (unint64_t *)&v194->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  uint64_t v29 = v192;
  if (v192)
  {
    unint64_t v30 = (unint64_t *)&v192->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  uint64_t v32 = v190;
  if (v190)
  {
    __int128 v33 = (unint64_t *)&v190->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  uint64_t v35 = v188;
  if (v188)
  {
    char v36 = (unint64_t *)&v188->__shared_owners_;
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  uint64_t v38 = v185;
  if (v185)
  {
    unint64_t v39 = (unint64_t *)&v185->__shared_owners_;
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  __int128 v41 = v182;
  if (v182)
  {
    uint64_t v42 = (unint64_t *)&v182->__shared_owners_;
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  __int128 v44 = v174;
  if (v174)
  {
    unint64_t v45 = (unint64_t *)&v174->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  __int128 v47 = v166;
  if (v166)
  {
    unint64_t v48 = (unint64_t *)&v166->__shared_owners_;
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  sub_10002C354(a3, v17);
  sub_10002B060((void *)(a3 + 56));
  sub_10002B7D4((uint64_t)v178, (uint64_t)&v180);
  sub_100035F24(a3, (uint64_t)&v180);
  char v50 = v183;
  if (v183)
  {
    uint64_t v51 = (unint64_t *)&v183->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  uint64_t v53 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    uint64_t v54 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  sub_10002B3A4((uint64_t)v178, (uint64_t)&v180);
  sub_100035F24(a4, (uint64_t)&v180);
  uint64_t v56 = v183;
  if (v183)
  {
    __int128 v57 = (unint64_t *)&v183->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  char v59 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    uint64_t v60 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  int64_t v62 = a6 - 1;
  if (v62 < 0)
  {
LABEL_192:
    uint64_t v11 = (*(void *)(a4 + 144) - *(void *)(a3 + 144)) & ~((uint64_t)(*(void *)(a4 + 144) - *(void *)(a3 + 144)) >> 63);
    goto LABEL_193;
  }

  uint64_t v154 = v15;
  while (1)
  {
    int v63 = *(_DWORD *)(*(void *)(v15 + 16) + 48 * v62);
    if (v63 != 1) {
      break;
    }
LABEL_190:
    if (v62-- <= 0) {
      goto LABEL_192;
    }
  }

  if (!v63) {
    goto LABEL_192;
  }
  uint64_t v64 = *(void *)(*(void *)(*(void *)(a2 + 16) + 16 * v62) + 8LL);
  __int128 v198 = &v200;
  __int128 v199 = xmmword_1001380F0;
  uint64_t v65 = *(void *)(a3 + 24);
  uint64_t v66 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  uint64_t v67 = v66 & ~(v66 >> 63);
  while (!sub_10002B1FC(a3, a4))
  {
    sub_100016640(a3 + 56);
    uint64_t v68 = *(std::__shared_weak_count **)(a3 + 120);
    if (v68)
    {
      __int128 v69 = (unint64_t *)&v68->__shared_owners_;
      do
        unint64_t v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }

    uint64_t v71 = *(void *)(a3 + 144);
    else {
      unint64_t v72 = (*(void *)(a4 + 144) - v71) & ~((*(void *)(a4 + 144) - v71) >> 63);
    }
    if (!v68) {
      goto LABEL_88;
    }
    uint64_t v73 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
      if (!v72) {
        goto LABEL_96;
      }
LABEL_89:
      unint64_t v75 = *(void *)a3;
      unint64_t v76 = *(void *)(a3 + 8);
      v180.n128_u64[0] = *(void *)a3;
      v180.n128_u64[1] = v76;
      if (v76)
      {
        char v77 = (unint64_t *)(v76 + 8);
        do
          unint64_t v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }

      unint64_t v181 = v72;
      uint64_t v80 = (uint64_t)v198;
      uint64_t v79 = v199;
      unint64_t v81 = (__n128 *)&v198[3 * v199];
      if ((void)v199 == *((void *)&v199 + 1))
      {
        sub_10005F308((uint64_t *)&v198, v81, 1LL, &v180, &v159);
        __int128 v88 = (std::__shared_weak_count *)v180.n128_u64[1];
        if (v180.n128_u64[1])
        {
          unint64_t v89 = (unint64_t *)(v180.n128_u64[1] + 8);
          do
            unint64_t v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }

      else
      {
        v81->n128_u64[0] = v75;
        v81->n128_u64[1] = v180.n128_u64[1];
        *(void *)(v80 + 24 * v79 + 16) = v72;
        *(void *)&__int128 v199 = v79 + 1;
      }

      sub_10002C354(a3, v72);
    }

    else
    {
LABEL_88:
      if (v72) {
        goto LABEL_89;
      }
LABEL_96:
      sub_10005BA68(a3, (uint64_t)v162);
      int v82 = v164;
      if (v164)
      {
        unint64_t v83 = (unint64_t *)&v164->__shared_owners_;
        do
          unint64_t v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }

      __int128 v85 = v163;
      if (v163)
      {
        unint64_t v86 = (unint64_t *)&v163->__shared_owners_;
        do
          unint64_t v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
  }

  sub_10002D91C((uint64_t *)&v180, (uint64_t *)&v198, v65, v67);
  sub_10002B7D4((uint64_t)&v187, (uint64_t)&v159);
  sub_10002B3A4((uint64_t)&v187, (uint64_t)v156);
  BOOL v91 = sub_10002B1FC((uint64_t)&v159, (uint64_t)v156);
  unint64_t v92 = v158;
  if (v158)
  {
    __int128 v93 = (unint64_t *)&v158->__shared_owners_;
    do
      unint64_t v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }

  unint64_t v95 = v157;
  if (v157)
  {
    __int128 v96 = (unint64_t *)&v157->__shared_owners_;
    do
      unint64_t v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }

  __int128 v98 = v161;
  if (v161)
  {
    uint64_t v99 = (unint64_t *)&v161->__shared_owners_;
    do
      unint64_t v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }

  __int128 v101 = v160;
  if (v160)
  {
    __int128 v102 = (unint64_t *)&v160->__shared_owners_;
    do
      unint64_t v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (!v91) {
        goto LABEL_131;
      }
      goto LABEL_156;
    }
  }

  if (v91) {
    goto LABEL_156;
  }
LABEL_131:
  sub_10002B7D4((uint64_t)&v187, (uint64_t)&v159);
  sub_10002B3A4((uint64_t)&v187, (uint64_t)v156);
  uint64_t v11 = sub_10005BAB8(a2, v62);
  __int128 v104 = v158;
  if (v158)
  {
    __int128 v105 = (unint64_t *)&v158->__shared_owners_;
    do
      unint64_t v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }

  int v107 = v157;
  if (v157)
  {
    int v108 = (unint64_t *)&v157->__shared_owners_;
    do
      unint64_t v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }

  uint64_t v110 = v161;
  if (v161)
  {
    __int128 v111 = (unint64_t *)&v161->__shared_owners_;
    do
      unint64_t v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }

  unint64_t v113 = v160;
  if (!v160) {
    goto LABEL_150;
  }
  uint64_t v114 = (unint64_t *)&v160->__shared_owners_;
  do
    unint64_t v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_150:
    if (v11 < 0) {
      goto LABEL_151;
    }
    goto LABEL_156;
  }

  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if ((v11 & 0x8000000000000000LL) == 0) {
    goto LABEL_156;
  }
LABEL_151:
  if (!(_DWORD)v11)
  {
LABEL_156:
    unint64_t v116 = v197;
    uint64_t v15 = v154;
    if (v197)
    {
      uint64_t v117 = (unint64_t *)&v197->__shared_owners_;
      do
        unint64_t v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }

    unint64_t v119 = v196;
    if (v196)
    {
      unint64_t v120 = (unint64_t *)&v196->__shared_owners_;
      do
        unint64_t v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }

    unint64_t v122 = v195;
    if (v195)
    {
      __int128 v123 = (unint64_t *)&v195->__shared_owners_;
      do
        unint64_t v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }

    unint64_t v125 = v193;
    if (v193)
    {
      uint64_t v126 = (unint64_t *)&v193->__shared_owners_;
      do
        unint64_t v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }

    unint64_t v128 = v191;
    if (v191)
    {
      uint64_t v129 = (unint64_t *)&v191->__shared_owners_;
      do
        unint64_t v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }

    unint64_t v131 = v189;
    if (v189)
    {
      int v132 = (unint64_t *)&v189->__shared_owners_;
      do
        unint64_t v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }

    if (v185 && v186 != __p) {
      operator delete(__p);
    }
    sub_100014E54((uint64_t)&v180);
    sub_100014E54((uint64_t)&v198);
    goto LABEL_190;
  }

  uint64_t v136 = v197;
  if (v197)
  {
    uint64_t v137 = (unint64_t *)&v197->__shared_owners_;
    do
      unint64_t v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  unint64_t v139 = v196;
  if (v196)
  {
    char v140 = (unint64_t *)&v196->__shared_owners_;
    do
      unint64_t v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }

  int v142 = v195;
  if (v195)
  {
    __int128 v143 = (unint64_t *)&v195->__shared_owners_;
    do
      unint64_t v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }

  uint64_t v145 = v193;
  if (v193)
  {
    char v146 = (unint64_t *)&v193->__shared_owners_;
    do
      unint64_t v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }

  uint64_t v148 = v191;
  if (v191)
  {
    __int128 v149 = (unint64_t *)&v191->__shared_owners_;
    do
      unint64_t v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }

  uint64_t v151 = v189;
  if (v189)
  {
    __int128 v152 = (unint64_t *)&v189->__shared_owners_;
    do
      unint64_t v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }

  if (v185 && v186 != __p) {
    operator delete(__p);
  }
  sub_100014E54((uint64_t)&v180);
  sub_100014E54((uint64_t)&v198);
LABEL_193:
  sub_10002D8BC((uint64_t)v178);
  return v11;
}

void sub_10005B99C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005BA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002C704(a1);
}

void sub_10005BA9C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005BAB8(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 48) && *(void *)(a1 + 40) <= a2) {
    return 0LL;
  }
  else {
    return sub_1000128C0(*(void **)(*(void *)(a1 + 16) + 16 * a2));
  }
}

unint64_t sub_10005BAFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, uint64_t a8)
{
  uint64_t v12 = (void *)a1;
  v249 = (unint64_t *)(a3 + 144);
  unint64_t v13 = *(void *)(a1 + 40);
  unint64_t v252 = *(void *)(a3 + 144);
  unint64_t v14 = v252 % v13;
  uint64_t v15 = v13 - v252 % v13;
  uint64_t v16 = *(void *)(a3 + 8);
  if (v14) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = 0LL;
  }
  *(void *)&__int128 v333 = *(void *)a3;
  *((void *)&v333 + 1) = v16;
  if (v16)
  {
    int v18 = (unint64_t *)(v16 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  v334[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v334 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v335 = *(void *)(a3 + 48);
  __int128 v336 = *(_OWORD *)(a3 + 56);
  __int128 v337 = *(_OWORD *)(a3 + 72);
  __int128 v338 = *(_OWORD *)(a3 + 88);
  char v339 = *(_BYTE *)(a3 + 104);
  uint64_t v20 = *(void *)(a3 + 120);
  *(void *)&__int128 v340 = *(void *)(a3 + 112);
  *((void *)&v340 + 1) = v20;
  if (v20)
  {
    __int128 v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  __int128 v341 = *(_OWORD *)(a3 + 128);
  unint64_t v342 = *v249;
  char v343 = *(_BYTE *)(a3 + 152);
  uint64_t v23 = (std::__shared_weak_count *)a4[1];
  uint64_t v320 = *a4;
  v321 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }

  v322[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v322 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v323 = a4[6];
  __int128 v26 = *(_OWORD *)(a4 + 9);
  __int128 v324 = *(_OWORD *)(a4 + 7);
  __int128 v325 = v26;
  __int128 v326 = *(_OWORD *)(a4 + 11);
  char v327 = *((_BYTE *)a4 + 104);
  uint64_t v27 = (std::__shared_weak_count *)a4[15];
  uint64_t v328 = a4[14];
  v329 = v27;
  if (v27)
  {
    unint64_t v28 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  uint64_t v31 = a4[18];
  unint64_t v30 = a4 + 18;
  __int128 v330 = *((_OWORD *)v30 - 1);
  uint64_t v331 = v31;
  char v332 = *((_BYTE *)v30 + 8);
  unint64_t v32 = *(void *)(a1 + 40);
  v247 = v30;
  unint64_t v33 = *v249;
  uint64_t v34 = *v30 - *v249;
  unint64_t v35 = v34 & ~(v34 >> 63);
  if (v35 <= v32) {
    unint64_t v35 = *(void *)(a1 + 40);
  }
  if (v34 <= 0) {
    unint64_t v36 = 0LL;
  }
  else {
    unint64_t v36 = v35;
  }
  *(void *)&__int128 v318 = v33 / v32;
  *((void *)&v318 + 1) = (v32 + v33 + v36 - 1) / v32;
  LOBYTE(v319) = 2;
  sub_10005A158(a1, a2, a5, (uint64_t)&v318, (uint64_t)v362);
  unint64_t v37 = operator new(0x20uLL);
  v280 = (char *)(v37 + 4);
  *(_OWORD *)unint64_t v37 = v318;
  v37[2] = v319;
  *((_DWORD *)v37 + 6) = 1;
  std::string __p = v37;
  v279 = (std::__shared_weak_count *)(v37 + 4);
  sub_10009330C((uint64_t)v362, (uint64_t)&__p, (uint64_t)&v346);
  sub_1000E4B0C((uint64_t)v362, (uint64_t)&v346);
  uint64_t v38 = (__int128 *)*((void *)&v350 + 1);
  if (*((__int128 **)&v350 + 1) == &v349)
  {
    uint64_t v39 = 4LL;
    uint64_t v38 = &v349;
    goto LABEL_26;
  }

  if (*((void *)&v350 + 1))
  {
    uint64_t v39 = 5LL;
LABEL_26:
    (*(void (**)(void))(*(void *)v38 + 8 * v39))();
  }

  uint64_t v40 = *(void *)&v347[16];
  *(void *)&v347[16] = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 40LL))(v40);
  }
  if (__p)
  {
    v279 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }

LABEL_350:
  v231 = v365;
  if (v365 == v364)
  {
    uint64_t v232 = 4LL;
    v231 = v364;
LABEL_354:
    (*(void (**)(void))(*v231 + 8 * v232))();
  }

  else if (v365)
  {
    uint64_t v232 = 5LL;
    goto LABEL_354;
  }

  uint64_t v233 = v363;
  uint64_t v363 = 0LL;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 40LL))(v233);
  }
  v234 = v329;
  if (v329)
  {
    v235 = (unint64_t *)&v329->__shared_owners_;
    do
      unint64_t v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }

  v237 = v321;
  if (v321)
  {
    v238 = (unint64_t *)&v321->__shared_owners_;
    do
      unint64_t v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }

  v240 = (std::__shared_weak_count *)*((void *)&v340 + 1);
  if (*((void *)&v340 + 1))
  {
    v241 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }

  v243 = (std::__shared_weak_count *)*((void *)&v333 + 1);
  if (*((void *)&v333 + 1))
  {
    v244 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
    do
      unint64_t v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }

  return v344;
}

void sub_10005D400(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 - 112);
  if (v3 == (void *)(v1 - 136))
  {
    uint64_t v4 = 4LL;
    int v3 = (void *)(v1 - 136);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = *(void *)(v1 - 160);
  *(void *)(v1 - 160) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40LL))(v5);
  }
  sub_1000114F0((uint64_t)&STACK[0x5E0]);
  sub_1000114F0((uint64_t)&STACK[0x570]);
  sub_1000114F0((uint64_t)&STACK[0x680]);
  sub_1000114F0((uint64_t)&STACK[0x610]);
  _Unwind_Resume(a1);
}

void sub_10005D610( uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v18 = *a1;
  unint64_t v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  v20[0] = *((_OWORD *)a1 + 1);
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 25);
  uint64_t v21 = a1[6];
  __int128 v22 = *(_OWORD *)(a1 + 7);
  __int128 v23 = *(_OWORD *)(a1 + 9);
  __int128 v24 = *(_OWORD *)(a1 + 11);
  char v25 = *((_BYTE *)a1 + 104);
  BOOL v9 = (std::__shared_weak_count *)a1[15];
  uint64_t v26 = a1[14];
  uint64_t v27 = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  __int128 v28 = *((_OWORD *)a1 + 8);
  uint64_t v29 = a1[18];
  char v30 = *((_BYTE *)a1 + 152);
  sub_10002D4A4((uint64_t)&v18, a2, a4, a3, a5, a6);
  uint64_t v12 = v27;
  if (v27)
  {
    unint64_t v13 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v15 = v19;
  if (v19)
  {
    uint64_t v16 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_10005D74C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10005D768(uint64_t a1)
{
  BOOL v2 = sub_1000E4738((uint64_t)v7, (uint64_t)v6);
  uint64_t v3 = v6[0];
  v6[0] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v4 = v7[0];
  v7[0] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return v2;
}

void sub_10005D7E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24LL))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005D828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3 == v4) {
    return 1LL;
  }
  uint64_t v7 = v3 + 48;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 56LL))( *(void *)(v7 - 40),  a2,  a3);
    if ((_DWORD)result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 48LL;
  }

  while (!v9);
  return result;
}

uint64_t sub_10005D890(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(void))(**(void **)(v2 + 8) + 80LL))(*(void *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0LL;
  }

  else
  {
    return sub_100013A08(**(void ***)(a2 + 16));
  }

void *sub_10005D910(void *a1, uint64_t a2, uint64_t a3)
{
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_100040310(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_10005D98C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *sub_10005D9B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1[3];
  v4[0] = a1[5];
  v4[1] = v2;
  char v5 = 2;
  return sub_10005D9F0(a1, (uint64_t)v4, 0LL, a2);
}

void *sub_10005D9F0@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result[6];
  uint64_t v7 = *(void *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 24) - v7) >> 4) == a3) {
    goto LABEL_22;
  }
  BOOL v9 = result;
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11 || *(void *)a2 + 1LL >= v11) {
      goto LABEL_21;
    }
LABEL_5:
LABEL_22:
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }

  if (v10 != 3)
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11) {
      goto LABEL_21;
    }
    goto LABEL_5;
  }

  unint64_t v12 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11 >= *(void *)a2) {
    goto LABEL_5;
  }
LABEL_21:
  if (!qword_1001985E0) {
    goto LABEL_22;
  }
LABEL_6:
  uint64_t v13 = result[7];
  unint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v7 + 48 * a3 + 8) + 32LL))(*(void *)(v7 + 48 * a3 + 8));
  unint64_t v15 = *(void *)a2;
  unint64_t v16 = *(void *)(a2 + 8);
  if (*(void *)a2 >= v14) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = *(void *)a2;
  }
  if (v16 >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 16) + 16 * a3);
  v49[0] = *(void *)(*(void *)(v6 + 16) + 48 * a3 + 8);
  v49[1] = v17;
  v49[2] = v18;
  char v50 = 2;
  unint64_t v51 = 0LL;
  uint64_t v52 = v19;
  int v53 = 7;
  uint64_t v20 = v54;
  v54[0] = &off_10016D460;
  uint64_t v55 = v54;
  if (v14 < v16)
  {
    unint64_t v21 = v14;
    __int128 v22 = operator new(0x20uLL);
    uint64_t v42 = v22 + 4;
    unsigned int v43 = (char *)(v22 + 4);
    *__int128 v22 = v21;
    v22[1] = v16;
    *((_BYTE *)v22 + 16) = 2;
    *((_DWORD *)v22 + 6) = 2;
    std::string __p = v22;
    sub_10009330C((uint64_t)v49, (uint64_t)&__p, (uint64_t)v44);
    sub_1000E4B0C((uint64_t)v49, (uint64_t)v44);
    __int128 v23 = v48;
    if (v48 == v47)
    {
      uint64_t v24 = 4LL;
      __int128 v23 = v47;
    }

    else
    {
      if (!v48)
      {
LABEL_27:
        uint64_t v26 = v46;
        uint64_t v46 = 0LL;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 40LL))(v26);
        }
        if (__p)
        {
          uint64_t v42 = __p;
          operator delete(__p);
        }

        unint64_t v15 = *(void *)a2;
        goto LABEL_32;
      }

      uint64_t v24 = 5LL;
    }

    (*(void (**)(void))(*v23 + 8 * v24))();
    goto LABEL_27;
  }

void sub_10005DD9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32)
{
  unint64_t v36 = a32;
  if (a32 == (void *)(v33 + 56))
  {
    uint64_t v37 = 4LL;
    unint64_t v36 = (void *)(v33 + 56);
  }

  else
  {
    if (!a32) {
      goto LABEL_6;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  if (a26) {
    (*(void (**)(uint64_t))(*(void *)a26 + 40LL))(a26);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v38 = *(void **)(v34 - 96);
  if (v38 == v32)
  {
    uint64_t v39 = 4LL;
  }

  else
  {
    if (!v38) {
      goto LABEL_15;
    }
    uint64_t v39 = 5LL;
    unint64_t v32 = *(void **)(v34 - 96);
  }

  (*(void (**)(void *))(*v32 + 8 * v39))(v32);
LABEL_15:
  uint64_t v40 = *(void *)(v34 - 144);
  *(void *)(v34 - 144) = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 40LL))(v40);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10005DEA4@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v4 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 48);
  *((__n128 *)v4 + 3) = result;
  *(void *)uint64_t v4 = off_10016F790;
  *a2 = v4;
  return result;
}

  ;
}

uint64_t sub_10005DF0C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_10005DF14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 8LL) + 32LL))(*(void *)(*(void *)(a1 + 16) + 8LL));
}

uint64_t sub_10005DF28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 40LL))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48LL;
  }

  while (!v5);
  return result;
}

uint64_t *sub_10005DF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (uint64_t *)operator new(0xC8uLL);
  uint64_t result = sub_1000B89FC(v6, a1, a2);
  *a3 = (char *)v6 + *(void *)(*v6 - 104);
  return result;
}

void sub_10005DFDC(_Unwind_Exception *a1)
{
}

uint64_t sub_10005DFF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 24LL) + 64LL))(*(void *)(*(void *)(a1 + 16) + 24LL));
}

uint64_t sub_10005E004(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 24) - 24LL) + 72LL))(*(void *)(*(void *)(a1 + 24) - 24LL));
}

uint64_t sub_10005E018(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 80LL))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48LL;
  }

  while (!v5);
  return result;
}

uint64_t sub_10005E078()
{
  return 1LL;
}

uint64_t sub_10005E080(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

__n128 sub_10005E088@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unint64_t a5@<X4>, __n128 **a6@<X8>)
{
  unint64_t v12 = (__n128 *)operator new(0x40uLL);
  __n128 result = *a4;
  v12[1] = *a4;
  v12[2].n128_u64[0] = a4[1].n128_u64[0];
  v12[2].n128_u64[1] = a5;
  v12[3].n128_u64[0] = a1;
  v12[3].n128_u64[1] = a3;
  v12->n128_u64[0] = (unint64_t)off_10016F790;
  v12->n128_u64[1] = a2;
  *a6 = v12;
  return result;
}

void *sub_10005E0F4(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  sub_10005EAF4((uint64_t)v2, a1, 0);
  return v2;
}

void sub_10005E12C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005E140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = a4[18];
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
  v12[0] = 0;
  v12[528] = 0;
  unint64_t v10 = sub_10005BAFC(a1, a2, a3, a4, 0LL, 1, 0, (uint64_t)v12);
  sub_10002D8BC((uint64_t)v12);
  return v10;
}

void sub_10005E204(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10005E218(uint64_t a1, uint64_t a2)
{
  return sub_100059028(*(uint64_t (****)(void))(*(void *)(*(void *)a2 + 16LL) + 8LL));
}

const void *sub_10005E228(uint64_t a1, void *a2)
{
  return sub_1000EF92C(*a2 + 64LL);
}

uint64_t sub_10005E234()
{
  return 0LL;
}

uint64_t sub_10005E240(uint64_t a1, uint64_t *a2)
{
  return sub_1000CE438(*a2);
}

uint64_t sub_10005E248(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)a2 + 560LL) + 136LL);
}

uint64_t sub_10005E258(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 72LL);
}

uint64_t sub_10005E264()
{
  return 0LL;
}

uint64_t sub_10005E270(uint64_t a1, void *a2)
{
  return sub_10005E27C(*a2 + 16LL);
}

uint64_t sub_10005E27C(uint64_t a1)
{
  uint64_t v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(void *)a1 + 48LL))();
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  sub_100026EE4((const void **)&v3);
  return v1;
}

void sub_10005E2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10005E2DC()
{
  return 0LL;
}

uint64_t sub_10005E2E8()
{
  return 0LL;
}

uint64_t sub_10005E2F4()
{
  return 0LL;
}

CFStringRef sub_10005E300(uint64_t a1, void **a2)
{
  return sub_1000CE42C(*a2);
}

uint64_t sub_10005E308()
{
  return 0LL;
}

uint64_t sub_10005E314()
{
  return 0LL;
}

uint64_t sub_10005E320()
{
  return 0LL;
}

uint64_t sub_10005E32C()
{
  return 0LL;
}

uint64_t sub_10005E338(uint64_t result, uint64_t a2)
{
  *(_DWORD *)__n128 result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

uint64_t sub_10005E38C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10005E444((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10005E400(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    sub_1000116A8();
  }
  return operator new(48 * a2);
}

uint64_t sub_10005E444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      *(_DWORD *)(a7 + v7 - 4std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a3 + v7 - 48);
      uint64_t v9 = a7 + v7 - 48;
      *(_OWORD *)(v9 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 40) = 0LL;
      *(void *)(v8 - 32) = 0LL;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0LL;
      *(void *)(v8 - 16) = 0LL;
      *(void *)(v9 + 40) = *(void *)(a3 + v7 - 8);
      *((void *)&v15 + 1) = v9;
      v7 -= 48LL;
    }

    while (a3 + v7 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10005E4FC((uint64_t)v12);
  return v10;
}

uint64_t sub_10005E4FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10005E530(a1);
  }
  return a1;
}

uint64_t sub_10005E530(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8LL);
  while (v1 != v2)
  {
    sub_1000114F0(v1 + 24);
    uint64_t result = sub_1000114F0(v1 + 8);
    v1 += 48LL;
  }

  return result;
}

uint64_t sub_10005E574(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10005E5A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 48;
      sub_1000114F0(v2 - 24);
      uint64_t result = sub_1000114F0(v2 - 40);
      uint64_t v2 = *(void *)(v4 + 16);
    }

    while (v2 != a2);
  }

  return result;
}

void sub_10005E600(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    sub_1000404F0(a1 + 64);
    uint64_t v2 = (void **)(a1 + 24);
    sub_100019334(&v2);
    *(_BYTE *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  }

uint64_t sub_10005E658(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    sub_1000404F0(a1 + 64);
    uint64_t v3 = (void **)(a1 + 24);
    sub_100019334(&v3);
  }

  return a1;
}

void sub_10005E6B0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10005E6F0((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }

uint64_t sub_10005E6F0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 48LL)
  {
    sub_1000114F0(i - 24);
    uint64_t result = sub_1000114F0(i - 40);
  }

  *(void *)(v3 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  return result;
}

uint64_t sub_10005E748(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  __int128 v5 = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136LL))(v4);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = &off_10016D460;
  *(void *)(a1 + 80) = a1 + 56;
  sub_10005E810((void *)(a1 + 56), (uint64_t)(a2 + 7));
  return a1;
}

void sub_10005E7C8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void **)(v2 + 80);
  if (v6 == v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = 4LL;
  }

  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
    uint64_t v7 = *(void **)(v2 + 80);
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  sub_10011BBE8(v1);
  _Unwind_Resume(a1);
}

void *sub_10005E810(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10005E8A8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int128 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10005EA10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000491C(a1);
}

BOOL sub_10005EA1C(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1) {
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_21;
      }
    }
  }

  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_21;
    }
  }

  if (!*((_BYTE *)a2 + 16))
  {
    unint64_t v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7) {
      goto LABEL_21;
    }
    return 1LL;
  }

  if (*((_BYTE *)a2 + 16) == 3)
  {
    if (a2[1] < *a2) {
      return 1LL;
    }
  }

  else if (*a2 >= a2[1])
  {
    return 1LL;
  }

LABEL_21:
  if ((v2 & 2) != 0) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v4 + 1;
  }
  unint64_t v10 = *a2;
  if ((a2[2] & 2) == 0) {
    ++v10;
  }
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

uint64_t sub_10005EAF4(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_10016F888;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v6 = (char **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  if (a3 == 1)
  {
    uint64_t v7 = sub_1000590E0(a1, a2);
    char v8 = 0;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  }

  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    char v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 24) - 24LL) + 96LL))(*(void *)(*(void *)(a2 + 24) - 24LL));
  }

  *(_BYTE *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v10 != i; v10 += 48LL)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555LL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)
    {
      uint64_t v13 = *(void *)(v10 + 24);
      unint64_t v12 = *(std::__shared_weak_count **)(v10 + 32);
      v30[0] = v13;
      v30[1] = (uint64_t)v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }

      unint64_t v16 = operator new(0x28uLL);
      *unint64_t v16 = off_10016F940;
      v16[1] = v13;
      v16[3] = 0LL;
      v16[4] = 0LL;
      v16[2] = 0LL;
      unint64_t v31 = v16;
      unint64_t v17 = *(void **)(a1 + 24);
      if ((unint64_t)v17 >= *(void *)(a1 + 32))
      {
        char v25 = sub_10005EE44(v6, (uint64_t *)&v31);
        uint64_t v26 = (uint64_t)v31;
        *(void *)(a1 + 24) = v25;
        unint64_t v31 = 0LL;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 40LL))(v26);
        }
      }

      else
      {
        *unint64_t v17 = v16;
        unint64_t v18 = operator new(0x20uLL);
        uint64_t v19 = (uint64_t)v31;
        *unint64_t v18 = &off_10016F8E0;
        v18[1] = 0LL;
        v18[2] = 0LL;
        uint64_t v18[3] = v19;
        v17[1] = v18;
        *(void *)(a1 + 24) = v17 + 2;
        unint64_t v31 = 0LL;
      }

      if (v12)
      {
        unint64_t v27 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }

    else
    {
      uint64_t v20 = (void *)(*(uint64_t (**)(void))(**(void **)(v10 + 8) + 136LL))(*(void *)(v10 + 8));
      v30[0] = (uint64_t)v20;
      unint64_t v21 = *(void **)(a1 + 24);
      if ((unint64_t)v21 >= *(void *)(a1 + 32))
      {
        __int128 v23 = sub_10005F154(v6, v30);
        uint64_t v24 = v30[0];
        *(void *)(a1 + 24) = v23;
        v30[0] = 0LL;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 40LL))(v24);
        }
      }

      else
      {
        void *v21 = v20;
        if (v20)
        {
          uint64_t v20 = operator new(0x20uLL);
          uint64_t v22 = v30[0];
          *uint64_t v20 = &off_10016F998;
          v20[1] = 0LL;
          _OWORD v20[2] = 0LL;
          v20[3] = v22;
        }

        v21[1] = v20;
        *(void *)(a1 + 24) = v21 + 2;
      }
    }
  }

  return a1;
}

void sub_10005ED4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10005EDB8(uint64_t a1)
{
  *(void *)a1 = off_10016F888;
  unint64_t v3 = (void **)(a1 + 16);
  sub_1000170C0(&v3);
  return a1;
}

void sub_10005EDFC(char *a1)
{
  *(void *)a1 = off_10016F888;
  int v2 = (void **)(a1 + 16);
  sub_1000170C0(&v2);
  operator delete(a1);
}

char *sub_10005EE44(char **a1, uint64_t *a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v26 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100016F60(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[16 * v4];
  __int128 v23 = v10;
  v24.i64[0] = (uint64_t)v11;
  unint64_t v12 = &v10[16 * v9];
  v24.i64[1] = (uint64_t)v11;
  char v25 = v12;
  uint64_t v13 = *a2;
  *(void *)unint64_t v11 = *a2;
  if (v13)
  {
    __int128 v14 = operator new(0x20uLL);
    uint64_t v15 = *a2;
    *__int128 v14 = &off_10016F8E0;
    v14[1] = 0LL;
    void v14[2] = 0LL;
    uint64_t v14[3] = v15;
  }

  else
  {
    __int128 v14 = 0LL;
  }

  *((void *)v11 + 1) = v14;
  *a2 = 0LL;
  unint64_t v16 = v11 + 16;
  v24.i64[1] = (uint64_t)(v11 + 16);
  unint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }

  else
  {
    do
    {
      __int128 v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v11 - 1) = v19;
      v11 -= 16;
      *(void *)unint64_t v17 = 0LL;
      *((void *)v17 + 1) = 0LL;
    }

    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    unint64_t v16 = (char *)v24.i64[1];
    unint64_t v12 = v25;
  }

  *a1 = v11;
  a1[1] = v16;
  int64x2_t v24 = v20;
  unint64_t v21 = a1[2];
  a1[2] = v12;
  char v25 = v21;
  __int128 v23 = (char *)v20.i64[0];
  sub_100016F94((uint64_t)&v23);
  return v16;
}

void sub_10005EF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10005EF8C(std::__shared_weak_count *a1)
{
}

uint64_t sub_10005EFA0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_10005EFB8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

unint64_t sub_10005EFF8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return sub_100062698(a1[1], a1, a2, a3);
}

uint64_t sub_10005F00C(uint64_t a1)
{
  *(void *)a1 = off_10016F940;
  unint64_t v3 = (void **)(a1 + 16);
  sub_10005F098(&v3);
  return a1;
}

void sub_10005F050(char *a1)
{
  *(void *)a1 = off_10016F940;
  int v2 = (void **)(a1 + 16);
  sub_10005F098(&v2);
  operator delete(a1);
}

void sub_10005F098(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152LL;
        sub_10005F108(v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10005F108(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 112);
  sub_1000170C0(&v3);
  int v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

char *sub_10005F154(char **a1, uint64_t *a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v26 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100016F60(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[16 * v4];
  __int128 v23 = v10;
  v24.i64[0] = (uint64_t)v11;
  unint64_t v12 = &v10[16 * v9];
  v24.i64[1] = (uint64_t)v11;
  char v25 = v12;
  uint64_t v13 = *a2;
  *(void *)unint64_t v11 = *a2;
  if (v13)
  {
    __int128 v14 = operator new(0x20uLL);
    uint64_t v15 = *a2;
    *__int128 v14 = &off_10016F998;
    v14[1] = 0LL;
    void v14[2] = 0LL;
    uint64_t v14[3] = v15;
  }

  else
  {
    __int128 v14 = 0LL;
  }

  *((void *)v11 + 1) = v14;
  *a2 = 0LL;
  unint64_t v16 = v11 + 16;
  v24.i64[1] = (uint64_t)(v11 + 16);
  unint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }

  else
  {
    do
    {
      __int128 v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v11 - 1) = v19;
      v11 -= 16;
      *(void *)unint64_t v17 = 0LL;
      *((void *)v17 + 1) = 0LL;
    }

    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    unint64_t v16 = (char *)v24.i64[1];
    unint64_t v12 = v25;
  }

  *a1 = v11;
  a1[1] = v16;
  int64x2_t v24 = v20;
  unint64_t v21 = a1[2];
  a1[2] = v12;
  char v25 = v21;
  __int128 v23 = (char *)v20.i64[0];
  sub_100016F94((uint64_t)&v23);
  return v16;
}

void sub_10005F284(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10005F29C(std::__shared_weak_count *a1)
{
}

uint64_t sub_10005F2B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_10005F2C8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void sub_10005F308(uint64_t *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10005F3B4((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556LL) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = (__n128 *)operator new(24 * v11);
  sub_10005F42C((uint64_t)a1, v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_10005F3B4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x555555555555555LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x555555555555555LL - v4 < a2 - v4 + v3) {
    sub_100014AD4("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x555555555555555LL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10005F42C(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  sub_10005F4F4(a1, *(__n128 **)a1, a4, (__n128 *)(*(void *)a1 + 24LL * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (i = *(void *)(a1 + 8); i; uint64_t v10 = (__n128 *)((char *)v10 + 24))
    {
      --i;
      sub_1000114F0((uint64_t)v10);
    }

    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }

  uint64_t v12 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  *(void *)(a1 + 16) = a3;
}

void sub_10005F4D0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_10005F4F4(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }

  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0LL;
  a7->n128_u64[1] = 0LL;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    unint64_t v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      __n128 result = *a3;
      *unint64_t v8 = *a3;
      a3->n128_u64[0] = 0LL;
      a3->n128_u64[1] = 0LL;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      unint64_t v8 = (__n128 *)((char *)v8 + 24);
    }

    while (a3 != a4);
  }

  return result;
}

uint64_t sub_10005F568@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x68uLL);
  uint64_t result = sub_10005F5C8((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_10005F5B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10005F5C8(uint64_t a1, uint64_t a2, char *a3)
{
  *(void *)a1 = off_10016F9F8;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  char v4 = *a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = off_100169CB8;
  *(void *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 72LL))(a2);
  *(_BYTE *)(a1 + 80) = v4;
  sub_10005F68C((void *)(a1 + 88));
  return a1;
}

void sub_10005F638(_Unwind_Exception *a1)
{
}

void sub_10005F64C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016F9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005F65C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016F9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10005F67C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

void *sub_10005F68C(void *a1)
{
  *a1 = 0LL;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &off_10016FA48;
  v2[1] = 0LL;
  _DWORD v2[2] = 0LL;
  v2[3] = 0LL;
  a1[1] = v2;
  return a1;
}

void sub_10005F6CC(void *a1)
{
}

void sub_10005F6D8(_Unwind_Exception *a1)
{
}

void sub_10005F6F0(std::__shared_weak_count *a1)
{
}

uint64_t sub_10005F708(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_10005F748()
{
  uint64_t v2 = &stru_10016FAB8;
  unint64_t v0 = atomic_load(&qword_100198F88);
  if (v0 != -1LL)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_100198F88, &v3, (void (__cdecl *)(void *))sub_100067590);
  }

  return qword_100199048;
}

void sub_10005F7B0(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  v1[1] = 0LL;
  *uint64_t v1 = v1 + 1;
  v1[2] = 0LL;
  v1[3] = 850045863LL;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0LL;
  qword_100199048 = (uint64_t)v1;
}

void sub_10005F7F8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v23 = (std::mutex *)(a1 + 24);
  char v24 = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unint64_t v8 = sub_100064848(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(void *)a4 = v8[7];
    char v9 = 1;
LABEL_19:
    *(_BYTE *)(a4 + 16) = v9;
    goto LABEL_20;
  }

  sub_10003C718((uint64_t)&v23);
  if (!a3 || !os_variant_allows_internal_security_policies("com.apple.diskimages2"))
  {
    *(void *)&__int128 v21 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((void *)&v21 + 1) = 63LL;
    int v22 = 16;
    sub_10005FB7C(v25, &v21);
    sub_100004E4C(&v28, (uint64_t)"Plugin ", 7LL);
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      unint64_t v17 = (void *)a2;
    }
    else {
      unint64_t v17 = *(void **)a2;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    sub_100004E4C(&v28, (uint64_t)v17, v18);
    sub_100004E4C(&v28, (uint64_t)" is not registered", 18LL);
    std::ostream::~ostream(&v28, off_100170158);
    sub_100064BC0((uint64_t)v25);
    std::ios::~ios(&v29);
    __int128 v19 = std::generic_category();
    char v9 = 0;
    *(void *)a4 = 45LL;
    *(void *)(a4 + std::iostream::~basic_iostream(v2, v3 + 8) = v19;
    goto LABEL_19;
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_100198FA8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_100198FA8))
  {
    sub_100004CB0(v25, "com.apple.raw");
    v25[3] = sub_100080414;
    v25[4] = 0LL;
    sub_100004CB0(v26, "com.apple.diskimage-plugin.nbd");
    v26[3] = sub_100063380;
    v26[4] = 0LL;
    sub_100004CB0(v27, "com.apple.diskimage-plugin.amber");
    v27[3] = sub_100063380;
    v27[4] = 16LL;
    sub_100064360((uint64_t)&qword_100198F90, v25, 3LL);
    for (uint64_t i = 0LL; i != -15; i -= 5LL)
    {
      if (SHIBYTE(v27[i + 2]) < 0) {
        operator delete((void *)v27[i]);
      }
    }

    __cxa_atexit((void (*)(void *))sub_1000633E4, &qword_100198F90, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100198FA8);
  }

  if (sub_100064848((uint64_t)&qword_100198F90, (void **)a2) != (void **)&unk_100198F98)
  {
    v25[0] = (void *)a2;
    unint64_t v11 = sub_1000648C4(&qword_100198F90, (void **)a2, (uint64_t)&unk_100139230, (__int128 **)v25);
    int v12 = *(char *)(a2 + 23);
    uint64_t v13 = *(char **)a2;
    __int128 v14 = (unsigned int *)((uint64_t (*)(uint64_t))v11[7])(v11[8]);
    if (v12 >= 0) {
      uint64_t v15 = (char *)a2;
    }
    else {
      uint64_t v15 = v13;
    }
    di_plugin_register(v15, v14);
  }

  sub_10005F7F8(a1, a2, 0LL);
LABEL_20:
  if (v24) {
    std::mutex::unlock(v23);
  }
}

void sub_10005FAE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = 0LL;
  while (1)
  {
    v20 -= 40LL;
    if (v20 == -120)
    {
      __cxa_guard_abort(&qword_100198FA8);
      if (a14) {
        std::mutex::unlock(a13);
      }
      _Unwind_Resume(a1);
    }
  }

void *sub_10005FB7C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000675A4((uint64_t)a1, a2);
  *a1 = off_100170090;
  a1[45] = &off_100170190;
  a1[46] = &off_1001701B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100170090;
  a1[45] = off_100170118;
  a1[46] = off_100170140;
  return a1;
}

void sub_10005FC00(_Unwind_Exception *a1)
{
}

uint64_t sub_10005FC24(uint64_t a1)
{
  return a1;
}

unsigned int *sub_10005FC64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000B8654())
  {
    v19[0] = 0LL;
    unint64_t v8 = (os_log_s *)sub_1000B85DC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t buf = 0x6704100402LL;
    unsigned __int8 v10 = "RO";
    __int128 v23 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    __int16 v22 = 2080;
    if ((a3 & 3) != 0) {
      unsigned __int8 v10 = "RW";
    }
    __int16 v24 = 2080;
    char v25 = v10;
    __int16 v26 = 2112;
    uint64_t v27 = a4;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v9,  v19,  0LL,  0LL,  &_mh_execute_header,  v8,  0LL,  "%.*s: Creating %s plugin instance with params: %@",  COERCE_DOUBLE(68158466LL),  &buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v14 = "RW";
      uint64_t buf = 0x6704100402LL;
      __int128 v23 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      __int16 v22 = 2080;
      if ((a3 & 3) == 0) {
        __int128 v14 = "RO";
      }
      __int16 v24 = 2080;
      char v25 = v14;
      __int16 v26 = 2112;
      uint64_t v27 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%.*s: Creating %s plugin instance with params: %@",  (uint8_t *)&buf,  0x26u);
    }
  }

  *__error() = v7;
  v19[1] = a4;
  uint64_t v20 = 0LL;
  LODWORD(v19[0]) = 16;
  HIDWORD(v19[0]) = a3;
  uint64_t v15 = (unsigned int *)(*(uint64_t (**)(void *, __CFError **))(a2 + 8))(v19, &v20);
  int v16 = v15;
  if (v15 && *v15 <= 0x57)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)&buf);
    sub_100004E4C(&buf, (uint64_t)"Plugin image struct size ", 25LL);
    std::ostream::operator<<(&buf, *v16);
    sub_100004E4C(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55LL);
    std::ostream::operator<<(&buf, 88LL);
    sub_10001161C((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }

  sub_10005FF4C(v15, v20);
  return v16;
}

void sub_10005FF0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_10005FF4C(void *result, __CFError *a2)
{
  if (!result)
  {
    if (a2)
    {
      int v7 = *__error();
      if (sub_1000B8654())
      {
        uint64_t v16 = 0LL;
        unint64_t v8 = (os_log_s *)sub_1000B85DC();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          uint64_t v9 = 3LL;
        }
        else {
          uint64_t v9 = 2LL;
        }
        *(_DWORD *)uint64_t buf = 68158210;
        int v18 = 71;
        __int16 v19 = 2080;
        uint64_t v20 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        __int16 v21 = 2114;
        __int16 v22 = a2;
        unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl( v9,  &v16,  0LL,  0LL,  &_mh_execute_header,  v8,  16LL,  "%.*s: Failed initializing plugin: %{public}@",  buf,  28);
        if (v10)
        {
          unint64_t v11 = (char *)v10;
          fprintf(__stderrp, "%s\n", v10);
          free(v11);
        }
      }

      else
      {
        int v12 = (os_log_s *)sub_1000B85DC();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          int v18 = 71;
          __int16 v19 = 2080;
          uint64_t v20 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          __int16 v21 = 2114;
          __int16 v22 = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%.*s: Failed initializing plugin: %{public}@",  buf,  0x1Cu);
        }
      }

      *__error() = v7;
      uint64_t v13 = a2;
      int Code = CFErrorGetCode(a2);
      if (Code < 0) {
        int v15 = Code;
      }
      else {
        int v15 = -Code;
      }
      CFRelease(v13);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin initialization failed";
      unsigned int v4 = v15;
    }

    else
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin bug: returned init failure without supplying the error";
      unsigned int v4 = -14;
    }

void *sub_100060194(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    unint64_t v8 = (os_log_s *)sub_1000B85DC();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    *(_DWORD *)uint64_t buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 114;
    __int16 v21 = 2080;
    __int16 v22 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    LODWORD(v16) = 18;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v8,  0LL,  "%.*s: Decoding plugin instance",  (int)buf,  v16);
    if (v10)
    {
      unint64_t v11 = (char *)v10;
      fprintf(__stderrp, "%s\n", v10);
      free(v11);
    }
  }

  else
  {
    int v12 = (os_log_s *)sub_1000B85DC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 114;
      __int16 v21 = 2080;
      __int16 v22 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }

  *__error() = v7;
  *(void *)uint64_t buf = 0LL;
  uint64_t v13 = *(uint64_t (**)(__int128 *, uint64_t, uint8_t *))(a2 + 16);
  __int128 v17 = *a3;
  uint64_t v18 = *((void *)a3 + 2);
  __int128 v14 = (void *)v13(&v17, a4, buf);
  return sub_10005FF4C(v14, *(__CFError **)buf);
}

uint64_t sub_100060354(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    return 4294967274LL;
  }
  if (a3[1] != 1)
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_100060924(&v25, &__dst);
    sub_100004E4C(&v28, (uint64_t)"Plugin version ", 15LL);
    std::ostream::operator<<(&v28, a3[1]);
    sub_100004E4C(&v28, (uint64_t)" is incompatible with the framework, expected ", 46LL);
    std::ostream::operator<<(&v28, 1LL);
    std::ostream::~ostream(&v28, off_100170378);
    sub_10006516C((uint64_t)&v25);
    goto LABEL_6;
  }

  if (*a3 <= 0x27)
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_100060A0C(&v25, &__dst);
    sub_100004E4C(&v28, (uint64_t)"Plugin struct size ", 19LL);
    std::ostream::operator<<(&v28, *a3);
    sub_100004E4C(&v28, (uint64_t)" is incompatible with the framework, expected at least ", 55LL);
    std::ostream::operator<<(&v28, 40LL);
    std::ostream::~ostream(&v28, off_100170598);
    sub_100065718((uint64_t)&v25);
LABEL_6:
    std::ios::~ios(v29);
    return 4294967209LL;
  }

  if (!*((void *)a3 + 1) || !*((void *)a3 + 2))
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_100060AF4(&v25, &__dst);
    sub_100004E4C(&v28, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54LL);
    std::ostream::~ostream(&v28, off_1001707B8);
    sub_100065CC4((uint64_t)&v25);
    std::ios::~ios(v29);
    return 4294967274LL;
  }

  int v7 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == sub_100064848(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100040504(v22, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)__int16 v22 = *(_OWORD *)a2;
      uint64_t v23 = *(void *)(a2 + 16);
    }

    *(void *)&__int128 v24 = a3;
    int v12 = operator new(0x38uLL);
    if (SHIBYTE(v23) < 0)
    {
      sub_100040504(&__dst, v22[0], (unint64_t)v22[1]);
    }

    else
    {
      __int128 __dst = *(_OWORD *)v22;
      uint64_t v31 = v23;
    }

    v12[1] = 0LL;
    v12[2] = 0LL;
    void *v12 = off_100170FC0;
    char v25 = (__int128 *)a3;
    if (SHIBYTE(v31) < 0)
    {
      sub_100040504(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
      uint64_t v13 = v25;
    }

    else
    {
      __int128 __p = __dst;
      uint64_t v27 = v31;
      uint64_t v13 = (__int128 *)a3;
    }

    void v12[3] = v13;
    __int128 v14 = v12 + 4;
    if (SHIBYTE(v27) < 0)
    {
      sub_100040504(v14, (void *)__p, *((unint64_t *)&__p + 1));
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)__p);
      }
    }

    else
    {
      *(_OWORD *)__int128 v14 = __p;
      v12[6] = v27;
    }

    *((void *)&v24 + 1) = v12;
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__dst);
    }
    char v25 = (__int128 *)a2;
    int v15 = sub_100067810((uint64_t **)a1, (void **)a2, (uint64_t)&unk_100139230, &v25);
    sub_100014DF0((uint64_t)(v15 + 7), &v24);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1))
    {
      __int128 v17 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 0;
    sub_100060CC4(&v25, &__dst);
    sub_100004E4C(&v28, (uint64_t)"Registered plugin ", 18LL);
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      uint64_t v20 = (void *)a2;
    }
    else {
      uint64_t v20 = *(void **)a2;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a2 + 8);
    }
    sub_100004E4C(&v28, (uint64_t)v20, v21);
    std::ostream::~ostream(&v28, off_100170BF8);
    sub_10006681C((uint64_t)&v25);
    std::ios::~ios(v29);
    uint64_t v4 = 0LL;
  }

  else
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_100060BDC(&v25, &__dst);
    sub_100004E4C(&v28, (uint64_t)"Plugin ", 7LL);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (void *)a2;
    }
    else {
      uint64_t v9 = *(void **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    sub_100004E4C(&v28, (uint64_t)v9, v10);
    sub_100004E4C(&v28, (uint64_t)" cannot be re-registered", 24LL);
    std::ostream::~ostream(&v28, off_1001709D8);
    sub_100066270((uint64_t)&v25);
    std::ios::~ios(v29);
    uint64_t v4 = 4294967279LL;
  }

  std::mutex::unlock(v7);
  return v4;
}

void sub_100060814( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v24);
  __cxa_begin_catch(a1);
  sub_1000679C8((uint64_t)&a9, v23);
  __cxa_rethrow();
}

void sub_100060898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000608A8()
{
}

void sub_1000608C8(_Unwind_Exception *a1)
{
}

void sub_1000608D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1000608E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000608F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_100060924(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100067620((uint64_t)a1, a2);
  *a1 = off_1001702B0;
  a1[45] = &off_1001703B0;
  a1[46] = &off_1001703D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001702B0;
  a1[45] = off_100170338;
  a1[46] = off_100170360;
  return a1;
}

void sub_1000609A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000609CC(uint64_t a1)
{
  return a1;
}

void *sub_100060A0C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006769C((uint64_t)a1, a2);
  *a1 = off_1001704D0;
  a1[45] = &off_1001705D0;
  a1[46] = &off_1001705F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001704D0;
  a1[45] = off_100170558;
  a1[46] = off_100170580;
  return a1;
}

void sub_100060A90(_Unwind_Exception *a1)
{
}

uint64_t sub_100060AB4(uint64_t a1)
{
  return a1;
}

void *sub_100060AF4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100067718((uint64_t)a1, a2);
  *a1 = off_1001706F0;
  a1[45] = &off_1001707F0;
  a1[46] = &off_100170818;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001706F0;
  a1[45] = off_100170778;
  a1[46] = off_1001707A0;
  return a1;
}

void sub_100060B78(_Unwind_Exception *a1)
{
}

uint64_t sub_100060B9C(uint64_t a1)
{
  return a1;
}

void *sub_100060BDC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100067794((uint64_t)a1, a2);
  *a1 = off_100170910;
  a1[45] = &off_100170A10;
  a1[46] = &off_100170A38;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100170910;
  a1[45] = off_100170998;
  a1[46] = off_1001709C0;
  return a1;
}

void sub_100060C60(_Unwind_Exception *a1)
{
}

uint64_t sub_100060C84(uint64_t a1)
{
  return a1;
}

void *sub_100060CC4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000682B0((uint64_t)a1, a2);
  *a1 = off_100170B30;
  a1[45] = &off_100170C30;
  a1[46] = &off_100170C58;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100170B30;
  a1[45] = off_100170BB8;
  a1[46] = off_100170BE0;
  return a1;
}

void sub_100060D48(_Unwind_Exception *a1)
{
}

uint64_t sub_100060D6C(uint64_t a1)
{
  return a1;
}

CFStringRef sub_100060DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v5) {
      return (CFStringRef)v5(a3);
    }
  }

  else {
    int v7 = *(const char **)a2;
  }
  return CFStringCreateWithCString(0LL, v7, 0x8000100u);
}

uint64_t sub_100060E24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100040504((_BYTE *)(a1 + 16), *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 v12 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }

  uint64_t v13 = sub_10005F748();
  sub_10005F7F8(v13, a2, 1, (uint64_t)v34);
  if (!v35)
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v32 = *(_OWORD *)sub_100047874((uint64_t)v34);
    *(void *)exception = &off_100189E78;
    *(_OWORD *)(exception + std::iostream::~basic_iostream(v2, v3 + 8) = v32;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = "Failed to get plugin instance";
  }

  v40[0] = &off_100171240;
  unint64_t v41 = v40;
  if (!a6)
  {
    uint64_t v17 = sub_10005F748();
    unint64_t v18 = sub_10005FC64(v17, v34[0], a4, a3);
    uint64_t v19 = (uint64_t)v41;
    if (v41)
    {
      if (v41 == v40)
      {
        uint64_t v37 = v36;
        (*(void (**)(uint64_t, void *))(v40[0] + 24LL))((uint64_t)v40, v36);
        goto LABEL_23;
      }

      uint64_t v19 = (*(uint64_t (**)(void))(*v41 + 16LL))();
    }

    uint64_t v37 = (void *)v19;
LABEL_23:
    sub_1000683CC((uint64_t *)&v33, (uint64_t)v18, (uint64_t)v36);
    sub_100014DF0(a1, &v33);
    uint64_t v25 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      __int16 v26 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    uint64_t v23 = v37;
    if (v37 == v36)
    {
      uint64_t v24 = 4LL;
      uint64_t v23 = v36;
      goto LABEL_32;
    }

    goto LABEL_29;
  }

  uint64_t v14 = sub_10005F748();
  int v15 = sub_100060194(v14, v34[0], a5, a6);
  uint64_t v16 = (uint64_t)v41;
  if (v41)
  {
    if (v41 == v40)
    {
      uint64_t v39 = v38;
      (*(void (**)(uint64_t, void *))(v40[0] + 24LL))((uint64_t)v40, v38);
      goto LABEL_15;
    }

    uint64_t v16 = (*(uint64_t (**)(void))(*v41 + 16LL))();
  }

  uint64_t v39 = (void *)v16;
LABEL_15:
  sub_1000683CC((uint64_t *)&v33, (uint64_t)v15, (uint64_t)v38);
  sub_100014DF0(a1, &v33);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (*((void *)&v33 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v39;
  if (v39 == v38)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v38;
    goto LABEL_32;
  }

LABEL_29:
  if (!v23) {
    goto LABEL_33;
  }
  uint64_t v24 = 5LL;
LABEL_32:
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
  uint64_t v28 = v41;
  if (v41 == v40)
  {
    uint64_t v29 = 4LL;
    uint64_t v28 = v40;
    goto LABEL_37;
  }

  if (v41)
  {
    uint64_t v29 = 5LL;
LABEL_37:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }

  return a1;
}

  uint64_t v17 = v24;
  if (v24)
  {
    unint64_t v18 = (unint64_t *)&v24->__shared_owners_;
    do
      uint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return v10;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  unint64_t v11 = a2[1];
  if (v11)
  {
    __int128 v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      __int128 v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      uint64_t v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  unint64_t v11 = a2[1];
  if (v11)
  {
    __int128 v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      __int128 v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      uint64_t v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unint64_t v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

void sub_100061144( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char *a25)
{
  uint64_t v29 = a17;
  if (a17 == v27)
  {
    uint64_t v30 = 4LL;
    uint64_t v29 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*(void *)v29 + 8 * v30))();
LABEL_6:
  uint64_t v31 = a25;
  if (a25 == &a22)
  {
    uint64_t v32 = 4LL;
    uint64_t v31 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_11;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*(void *)v31 + 8 * v32))();
LABEL_11:
  sub_1000114F0(v25);
  _Unwind_Resume(a1);
}

void sub_100061210(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_100061294;
  v4[3] = &unk_10016FAD8;
  v4[4] = a1;
  unint64_t v5 = v4;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    int v7 = &v5;
    unint64_t v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_100067590);
  }

uint64_t sub_100061294(uint64_t a1)
{
  return sub_1000612D0(*(void *)(a1 + 32) + 56LL);
}

uint64_t sub_1000612D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 200)) {
    *(_BYTE *)(sub_10010773C() + 200) = 0;
  }
  uint64_t result = sub_1001076E0();
  *(_BYTE *)(result + 200) = 1;
  return result;
}

void sub_100061324(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006132C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = a3 + 16;
  uint64_t v6 = io_rings_enter(*(void *)(a1 + 104), 1, 0);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    *(void *)&__int128 v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((void *)&v9 + 1) = 36LL;
    int v10 = 16;
    sub_100061424(v11, &v9);
    sub_100004E4C(&v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42LL);
    std::ostream::operator<<(&v12, v7);
    std::ostream::~ostream(&v12, off_100170E18);
    sub_100066DC8((uint64_t)v11);
    std::ios::~ios(&v13);
  }

  else
  {
    sub_1000F9D00((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }

  return v7;
}

void sub_100061410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100061424(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000687D8((uint64_t)a1, a2);
  *a1 = off_100170D50;
  a1[45] = &off_100170E50;
  a1[46] = &off_100170E78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100170D50;
  a1[45] = off_100170DD8;
  a1[46] = off_100170E00;
  return a1;
}

void sub_1000614A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000614CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006150C(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v9 = sub_100107740((uint64_t)(a1 + 7));
  if (!v8) {
    return -35LL;
  }
  uint64_t v10 = v8;
  __int128 v98 = 0LL;
  unint64_t v99 = 0LL;
  uint64_t v100 = 0LL;
  uint64_t v11 = *(void *)(a4 + 72);
  uint64_t v12 = a3[9];
  unint64_t v13 = (*(uint64_t (**)(void *, double))(*a1 + 24LL))(a1, v9);
  uint64_t v76 = a2;
  (*(void (**)(void *__return_ptr, void *))(*a1 + 72LL))(v97, a1);
  unint64_t v77 = a3[18];
  unint64_t v14 = (*(void *)(a4 + 144) - v77) & ~((uint64_t)(*(void *)(a4 + 144) - v77) >> 63);
  if (v97[0] && v11 - v12 >= v97[1] * v97[0] + (v14 - 1 + v97[0]) / v97[0] * v97[0])
  {
    int v15 = *(uint64_t (**)(void))(a1[2] + 32LL);
    if (v15)
    {
      unsigned int v16 = v15();
      unint64_t v17 = v77;
      unint64_t v18 = v77;
      if (v16) {
        unint64_t v18 = v77 / v16 * v16;
      }
    }

    else
    {
      unint64_t v17 = a3[18];
      unint64_t v18 = v17;
    }

    unint64_t v14 = (v14 - 1 + v17 - v18 + v97[0]) / v97[0] * v97[0];
    unint64_t v77 = v18;
  }

  uint64_t v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v84 = *a3;
  __int128 v85 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }

  v86[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
  __int128 v88 = *(_OWORD *)(a3 + 7);
  __int128 v23 = *(_OWORD *)(a3 + 11);
  __int128 v89 = *(_OWORD *)(a3 + 9);
  uint64_t v87 = a3[6];
  __int128 v90 = v23;
  char v91 = *((_BYTE *)a3 + 104);
  uint64_t v24 = (std::__shared_weak_count *)a3[15];
  uint64_t v92 = a3[14];
  __int128 v93 = v24;
  unint64_t v75 = v14 / v13;
  if (v24)
  {
    uint64_t v25 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }

  __int128 v94 = *((_OWORD *)a3 + 8);
  uint64_t v95 = a3[18];
  char v96 = *((_BYTE *)a3 + 152);
  while (!sub_10002C8D0((uint64_t)&v84))
  {
    sub_100016640((uint64_t)&v88);
    uint64_t v27 = v92;
    uint64_t v28 = v93;
    uint64_t v81 = v92;
    int v82 = v93;
    if (v93)
    {
      uint64_t v29 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      __int128 v83 = v94;
      else {
        unint64_t v31 = v14;
      }
      if (!v31)
      {
        do
          unint64_t v52 = __ldaxr(v29);
        while (__stlxr(v52 - 1, v29));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }

        break;
      }
    }

    else
    {
      __int128 v83 = v94;
      else {
        unint64_t v31 = v14;
      }
      if (!v31) {
        break;
      }
    }

    uint64_t v32 = v99;
    if (v99 >= v100)
    {
      uint64_t v34 = (v99 - v98) >> 4;
      unint64_t v35 = v34 + 1;
      uint64_t v36 = v100 - v98;
      if ((v100 - v98) >> 3 > v35) {
        unint64_t v35 = v36 >> 3;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37) {
        uint64_t v38 = (char *)sub_100016F60((uint64_t)&v100, v37);
      }
      else {
        uint64_t v38 = 0LL;
      }
      uint64_t v39 = &v38[16 * v34];
      *(void *)uint64_t v39 = v27;
      *((void *)v39 + 1) = v31;
      unint64_t v41 = v98;
      uint64_t v40 = v99;
      uint64_t v42 = v39;
      if (v99 != v98)
      {
        do
        {
          *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
          v42 -= 16;
          v40 -= 16;
        }

        while (v40 != v41);
        uint64_t v40 = v98;
      }

      __int128 v33 = v39 + 16;
      __int128 v98 = v42;
      unint64_t v99 = v39 + 16;
      uint64_t v100 = &v38[16 * v37];
      if (v40) {
        operator delete(v40);
      }
    }

    else
    {
      *(void *)unint64_t v99 = v27;
      *((void *)v32 + 1) = v31;
      __int128 v33 = v32 + 16;
    }

    unint64_t v99 = v33;
    unsigned int v43 = v82;
    if (v82)
    {
      unint64_t v44 = (unint64_t *)&v82->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    sub_10005BA68((uint64_t)&v84, (uint64_t)v78);
    uint64_t v46 = v80;
    if (v80)
    {
      unint64_t v47 = (unint64_t *)&v80->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    v14 -= v31;
    uint64_t v49 = v79;
    if (v79)
    {
      char v50 = (unint64_t *)&v79->__shared_owners_;
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }

  int v53 = v93;
  if (v93)
  {
    BOOL v54 = (unint64_t *)&v93->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  uint64_t v56 = v85;
  if (v85)
  {
    unint64_t v57 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  unint64_t v59 = v98;
  *(_BYTE *)uint64_t v10 = 2;
  *(void *)(v10 + 24) = v59;
  *(void *)(v10 + 32) = v77 / v13;
  *(void *)(v10 + 40) = 0LL;
  *(_DWORD *)(v10 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v75;
  int v60 = sub_10006132C((uint64_t)a1, v10, v76);
  if (v60 == (unint64_t)v75)
  {
    unint64_t v61 = (std::__shared_weak_count *)a3[1];
    unint64_t v19 = v13 * v60;
    uint64_t v84 = *a3;
    __int128 v85 = v61;
    if (v61)
    {
      unint64_t v62 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }

    v86[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
    __int128 v88 = *(_OWORD *)(a3 + 7);
    __int128 v64 = *(_OWORD *)(a3 + 11);
    __int128 v89 = *(_OWORD *)(a3 + 9);
    uint64_t v87 = a3[6];
    __int128 v90 = v64;
    char v91 = *((_BYTE *)a3 + 104);
    unint64_t v65 = (std::__shared_weak_count *)a3[15];
    uint64_t v92 = a3[14];
    __int128 v93 = v65;
    if (v65)
    {
      uint64_t v66 = (unint64_t *)&v65->__shared_owners_;
      do
        unint64_t v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }

    __int128 v94 = *((_OWORD *)a3 + 8);
    uint64_t v95 = a3[18];
    char v96 = *((_BYTE *)a3 + 152);
    sub_10002C52C((uint64_t)&v84, v19);
    unint64_t v68 = v93;
    if (v93)
    {
      __int128 v69 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }

    unint64_t v71 = v85;
    if (v85)
    {
      unint64_t v72 = (unint64_t *)&v85->__shared_owners_;
      do
        unint64_t v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }

  else if (v60 < 0)
  {
    unint64_t v19 = v60;
  }

  else
  {
    unint64_t v19 = -5LL;
  }

  if (v98)
  {
    unint64_t v99 = v98;
    operator delete(v98);
  }

  return v19;
}

void sub_100061B34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  unint64_t v45 = *(void **)(v43 - 112);
  if (v45)
  {
    *(void *)(v43 - 104) = v45;
    operator delete(v45);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100061B98(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!v8) {
    return -35LL;
  }
  __int128 __p = 0LL;
  __int128 v93 = 0LL;
  __int128 v94 = 0LL;
  uint64_t v9 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  uint64_t v78 = v8;
  *(_OWORD *)__int128 v85 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  __int128 v86 = *(_OWORD *)(a3 + 9);
  __int128 v87 = *(_OWORD *)(a3 + 11);
  char v88 = *((_BYTE *)a3 + 104);
  uint64_t v16 = a3[14];
  unint64_t v17 = (std::__shared_weak_count *)a3[15];
  if (v17)
  {
    unint64_t v18 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  uint64_t v79 = a2;
  uint64_t v80 = a1;
  unint64_t v21 = a3[18];
  uint64_t v20 = a3 + 18;
  __int128 v89 = *((_OWORD *)v20 - 1);
  unint64_t v90 = v21;
  char v91 = *((_BYTE *)v20 + 8);
  uint64_t v22 = *a4;
  __int128 v23 = (std::__shared_weak_count *)a4[1];
  if (v23)
  {
    uint64_t v24 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  *(_OWORD *)uint64_t v81 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v26 = a4[6];
  uint64_t v27 = a4[7];
  uint64_t v28 = a4[8];
  __int128 v82 = *(_OWORD *)(a4 + 9);
  __int128 v83 = *(_OWORD *)(a4 + 11);
  char v84 = *((_BYTE *)a4 + 104);
  uint64_t v29 = a4[14];
  unint64_t v30 = (std::__shared_weak_count *)a4[15];
  if (v30)
  {
    unint64_t v31 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  unint64_t v33 = 0LL;
  v111[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)&v85[9];
  __int128 v114 = v86;
  __int128 v115 = v87;
  __int128 v119 = v89;
  v97[0] = *(_OWORD *)v81;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)&v81[9];
  __int128 v102 = v83;
  uint64_t v109 = v9;
  uint64_t v110 = v10;
  uint64_t v112 = v13;
  *(void *)&__int128 v113 = v14;
  *((void *)&v113 + 1) = v15;
  char v116 = v88;
  uint64_t v117 = v16;
  unint64_t v118 = v17;
  unint64_t v120 = v90;
  char v121 = v91;
  uint64_t v95 = v22;
  char v96 = v23;
  uint64_t v98 = v26;
  uint64_t v99 = v27;
  uint64_t v100 = v28;
  char v103 = v84;
  __int128 v101 = v82;
  uint64_t v104 = v29;
  unint64_t v105 = v30;
  __int128 v106 = *((_OWORD *)a4 + 8);
  char v108 = *((_BYTE *)a4 + 152);
  unint64_t v107 = a4[18];
  unint64_t v34 = v107;
  v141[0] = 0;
  v141[528] = 0;
  while (!sub_10002B1FC((uint64_t)&v109, (uint64_t)&v95))
  {
    if (v120 >= v34 || v33 == -1LL) {
      break;
    }
    if (sub_1000B866C())
    {
      *(void *)&__int128 v138 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((void *)&v138 + 1) = 104LL;
      LODWORD(v139) = 2;
      sub_100035DF8(v133, &v138);
      sub_100004E4C(&v136, (uint64_t)"sg: ", 4LL);
      sub_100116CB8(&v136, &v109);
      std::ostream::~ostream(&v136, off_100169EF0);
      sub_10003602C((uint64_t)v133);
      std::ios::~ios(&v137);
    }

    v133[0] = 0LL;
    v133[1] = v34;
    char v134 = 2;
    sub_100072C74(&v109, (uint64_t)v133, (uint64_t)&v138);
    uint64_t v36 = v138;
    int64_t v37 = v139;
    if (v93 >= v94)
    {
      uint64_t v39 = (v93 - __p) >> 4;
      unint64_t v40 = v39 + 1;
      uint64_t v41 = v94 - __p;
      if ((v94 - __p) >> 3 > v40) {
        unint64_t v40 = v41 >> 3;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42) {
        uint64_t v43 = (char *)sub_100016F60((uint64_t)&v94, v42);
      }
      else {
        uint64_t v43 = 0LL;
      }
      unint64_t v44 = &v43[16 * v39];
      *(void *)unint64_t v44 = v36;
      *((void *)v44 + 1) = v37;
      unint64_t v45 = v93;
      uint64_t v46 = v44;
      if (v93 != __p)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
          v46 -= 16;
          v45 -= 16;
        }

        while (v45 != __p);
        unint64_t v45 = __p;
      }

      uint64_t v38 = v44 + 16;
      __int128 __p = v46;
      __int128 v94 = &v43[16 * v42];
      if (v45) {
        operator delete(v45);
      }
    }

    else
    {
      *(void *)__int128 v93 = v138;
      *((void *)v93 + 1) = v37;
      uint64_t v38 = v93 + 16;
    }

    __int128 v93 = v38;
    uint64_t v47 = (int)v139;
    if ((v139 & 0x80000000) != 0) {
      int64_t v48 = (int)v139;
    }
    else {
      int64_t v48 = v139;
    }
    BOOL v49 = v48 >= 0 || (_DWORD)v48 == 0;
    char v50 = v49;
    if (v49)
    {
      uint64_t v51 = v140;
      if (sub_10002D4E0((uint64_t)&v109, (uint64_t)&v95, v140, v48))
      {
        v122[0] = v109;
        v122[1] = v110;
        if (v110)
        {
          unint64_t v55 = (unint64_t *)&v110->__shared_owners_;
          do
            unint64_t v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }

        v123[0] = v111[0];
        *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v111 + 9);
        uint64_t v124 = v112;
        __int128 v125 = v113;
        __int128 v126 = v114;
        __int128 v127 = v115;
        char v128 = v116;
        v129[0] = v117;
        v129[1] = v118;
        if (v118)
        {
          unint64_t v57 = (unint64_t *)&v118->__shared_owners_;
          do
            unint64_t v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }

        __int128 v130 = v119;
        unint64_t v131 = v120;
        char v132 = v121;
        sub_10002D4A4((uint64_t)v122, (uint64_t)&v95, v51, v48, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v133);
        sub_100035EE0((uint64_t)v141, (uint64_t)v133);
        sub_10002D4FC((uint64_t)v133);
        sub_1000114F0((uint64_t)v129);
        sub_1000114F0((uint64_t)v122);
        sub_10002B7D4((uint64_t)v141, (uint64_t)v133);
        sub_100035F24((uint64_t)&v109, (uint64_t)v133);
        sub_1000114F0((uint64_t)v135);
        sub_1000114F0((uint64_t)v133);
        sub_10002B3A4((uint64_t)v141, (uint64_t)v133);
        sub_100035F24((uint64_t)&v95, (uint64_t)v133);
        sub_1000114F0((uint64_t)v135);
        sub_1000114F0((uint64_t)v133);
      }

      sub_10002C52C((uint64_t)&v109, v48);
      v33 += v48;
    }

    else
    {
      unint64_t v77 = v47;
    }

    unint64_t v52 = (std::__shared_weak_count *)*((void *)&v138 + 1);
    if (!*((void *)&v138 + 1)) {
      goto LABEL_55;
    }
    int v53 = (unint64_t *)(*((void *)&v138 + 1) + 8LL);
    do
      unint64_t v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      if ((v50 & 1) == 0) {
        goto LABEL_70;
      }
    }

    else
    {
LABEL_55:
      if ((v50 & 1) == 0) {
        goto LABEL_70;
      }
    }
  }

  unint64_t v77 = v33;
LABEL_70:
  sub_10002D8BC((uint64_t)v141);
  unint64_t v59 = v105;
  if (v105)
  {
    int v60 = (unint64_t *)&v105->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  unint64_t v62 = v96;
  if (v96)
  {
    unint64_t v63 = (unint64_t *)&v96->__shared_owners_;
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  unint64_t v65 = v118;
  if (v118)
  {
    uint64_t v66 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  unint64_t v68 = v110;
  if (v110)
  {
    __int128 v69 = (unint64_t *)&v110->__shared_owners_;
    do
      unint64_t v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  unint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 24LL))(v80);
  unint64_t v72 = *v20 / v71;
  *(_BYTE *)uint64_t v78 = 4;
  *(void *)(v78 + 24) = __p;
  *(void *)(v78 + 32) = v72;
  *(void *)(v78 + 40) = 0LL;
  *(_DWORD *)(v78 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v77 / v71;
  int v73 = sub_10006132C(v80, v78, v79);
  uint64_t v74 = -5LL;
  if (v73 < 0) {
    uint64_t v74 = v73;
  }
  else {
    uint64_t v75 = v74;
  }
  if (__p) {
    operator delete(__p);
  }
  return v75;
}

void sub_100062464( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100062538(uint64_t a1, uint64_t a2, int a3)
{
  if (!v6) {
    return 4294967261LL;
  }
  *(_BYTE *)uint64_t v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return sub_10006132C(a1, v6, a2);
}

uint64_t sub_1000625A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a4;
  uint64_t v7 = a1 + 56;
  for (uint64_t i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    sub_100107740(v7);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(i - 1);
    uint64_t v11 = *i;
    *(_BYTE *)uint64_t v9 = 6;
    *(void *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    uint64_t result = sub_10006132C(a1, v9, a2);
    if ((_DWORD)result) {
      return result;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return 4294967261LL;
}

void sub_100062634(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_1001077C4(a1 + 56, (uint64_t)&v4);
  if (v6)
  {
    uint64_t v2 = v4;
    int v3 = v5;
    do
    {
      *(_DWORD *)uint64_t v2 = v3;
      sub_1000F9D08((dispatch_semaphore_t *)(v2 + 8));
      sub_1001077C4(v1, (uint64_t)&v4);
      uint64_t v2 = v4;
      int v3 = v5;
    }

    while (v6);
  }

unint64_t sub_100062698(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v96 = 0u;
  uint64_t v4 = *a3;
  int v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  *(_OWORD *)__int128 v89 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v89[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  __int128 v90 = *(_OWORD *)(a3 + 9);
  __int128 v91 = *(_OWORD *)(a3 + 11);
  char v92 = *((_BYTE *)a3 + 104);
  uint64_t v11 = a3[14];
  unint64_t v12 = (std::__shared_weak_count *)a3[15];
  if (v12)
  {
    uint64_t v13 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v16 = a3[18];
  uint64_t v15 = a3 + 18;
  __int128 v93 = *((_OWORD *)v15 - 1);
  unint64_t v94 = v16;
  __int128 v82 = (unint64_t *)v15;
  char v95 = *((_BYTE *)v15 + 8);
  uint64_t v17 = *a4;
  unint64_t v18 = (std::__shared_weak_count *)a4[1];
  if (v18)
  {
    unint64_t v19 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  *(_OWORD *)__int128 v85 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v21 = a4[6];
  uint64_t v22 = a4[7];
  uint64_t v23 = a4[8];
  __int128 v86 = *(_OWORD *)(a4 + 9);
  __int128 v87 = *(_OWORD *)(a4 + 11);
  char v88 = *((_BYTE *)a4 + 104);
  uint64_t v25 = a4[14];
  uint64_t v24 = (std::__shared_weak_count *)a4[15];
  if (v24)
  {
    uint64_t v26 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  unint64_t v28 = 0LL;
  uint64_t v117 = v4;
  unint64_t v118 = v5;
  v119[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)&v89[9];
  uint64_t v120 = v8;
  *(void *)&__int128 v121 = v9;
  *((void *)&v121 + 1) = v10;
  __int128 v122 = v90;
  __int128 v123 = v91;
  char v124 = v92;
  uint64_t v125 = v11;
  __int128 v126 = v12;
  __int128 v127 = v93;
  unint64_t v128 = v94;
  char v129 = v95;
  uint64_t v103 = v17;
  uint64_t v104 = v18;
  v105[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v85[9];
  uint64_t v106 = v21;
  uint64_t v107 = v22;
  uint64_t v108 = v23;
  char v111 = v88;
  __int128 v109 = v86;
  __int128 v110 = v87;
  uint64_t v112 = v25;
  __int128 v113 = v24;
  __int128 v114 = *((_OWORD *)a4 + 8);
  char v116 = *((_BYTE *)a4 + 152);
  unint64_t v115 = a4[18];
  unint64_t v29 = v115;
  LOBYTE(v149[0]) = 0;
  char v150 = 0;
  while (!sub_10002B1FC((uint64_t)&v117, (uint64_t)&v103))
  {
    if (v128 >= v29 || v28 == -1LL) {
      break;
    }
    if (sub_1000B866C())
    {
      *(void *)&__int128 v146 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((void *)&v146 + 1) = 104LL;
      LODWORD(v147) = 2;
      sub_100035DF8(v141, &v146);
      sub_100004E4C(&v144, (uint64_t)"sg: ", 4LL);
      sub_100116CB8(&v144, &v117);
      std::ostream::~ostream(&v144, off_100169EF0);
      sub_10003602C((uint64_t)v141);
      std::ios::~ios(&v145);
    }

    v141[0] = 0LL;
    v141[1] = v29;
    char v142 = 2;
    sub_100072C74(&v117, (uint64_t)v141, (uint64_t)&v146);
    sub_100068854((char **)v102, &v146);
    uint64_t v31 = v146;
    int64_t v32 = v147;
    unint64_t v33 = v101[2];
    if (v101[2] >= v101[3])
    {
      int64_t v35 = ((char *)v101[2] - (char *)v101[1]) >> 4;
      unint64_t v36 = v35 + 1;
      int64_t v37 = (char *)v101[3] - (char *)v101[1];
      else {
        unint64_t v38 = v36;
      }
      if (v38) {
        uint64_t v39 = (char *)sub_100016F60((uint64_t)&v101[3], v38);
      }
      else {
        uint64_t v39 = 0LL;
      }
      unint64_t v40 = &v39[16 * v35];
      *(void *)unint64_t v40 = v31;
      *((void *)v40 + 1) = v32;
      uint64_t v41 = (char *)v101[2];
      unint64_t v42 = (char *)v101[1];
      uint64_t v43 = v40;
      if (v101[2] != v101[1])
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
          v43 -= 16;
          v41 -= 16;
        }

        while (v41 != v42);
        uint64_t v41 = (char *)v101[1];
      }

      unint64_t v34 = v40 + 16;
      v101[1] = v43;
      v101[2] = v40 + 16;
      v101[3] = &v39[16 * v38];
      if (v41) {
        operator delete(v41);
      }
    }

    else
    {
      *(void *)v101[2] = v146;
      v33[1] = v32;
      unint64_t v34 = v33 + 2;
    }

    v101[2] = v34;
    uint64_t v44 = (int)v147;
    if ((v147 & 0x80000000) != 0) {
      int64_t v45 = (int)v147;
    }
    else {
      int64_t v45 = v147;
    }
    BOOL v46 = v45 >= 0 || (_DWORD)v45 == 0;
    char v47 = v46;
    if (v46)
    {
      uint64_t v48 = v148;
      if (sub_10002D4E0((uint64_t)&v117, (uint64_t)&v103, v148, v45))
      {
        v130[0] = v117;
        v130[1] = v118;
        if (v118)
        {
          unint64_t v52 = (unint64_t *)&v118->__shared_owners_;
          do
            unint64_t v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }

        v131[0] = v119[0];
        *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)((char *)v119 + 9);
        uint64_t v132 = v120;
        __int128 v133 = v121;
        __int128 v134 = v122;
        __int128 v135 = v123;
        char v136 = v124;
        v137[0] = v125;
        v137[1] = v126;
        if (v126)
        {
          unint64_t v54 = (unint64_t *)&v126->__shared_owners_;
          do
            unint64_t v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }

        __int128 v138 = v127;
        unint64_t v139 = v128;
        char v140 = v129;
        sub_10002D4A4((uint64_t)v130, (uint64_t)&v103, v48, v45, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v141);
        sub_100035EE0((uint64_t)v149, (uint64_t)v141);
        sub_10002D4FC((uint64_t)v141);
        sub_1000114F0((uint64_t)v137);
        sub_1000114F0((uint64_t)v130);
        sub_10002B7D4((uint64_t)v149, (uint64_t)v141);
        sub_100035F24((uint64_t)&v117, (uint64_t)v141);
        sub_1000114F0((uint64_t)v143);
        sub_1000114F0((uint64_t)v141);
        sub_10002B3A4((uint64_t)v149, (uint64_t)v141);
        sub_100035F24((uint64_t)&v103, (uint64_t)v141);
        sub_1000114F0((uint64_t)v143);
        sub_1000114F0((uint64_t)v141);
      }

      sub_10002C52C((uint64_t)&v117, v45);
      v28 += v45;
    }

    else
    {
      unint64_t v81 = v44;
    }

    BOOL v49 = (std::__shared_weak_count *)*((void *)&v146 + 1);
    if (*((void *)&v146 + 1))
    {
      char v50 = (unint64_t *)(*((void *)&v146 + 1) + 8LL);
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    if ((v47 & 1) == 0) {
      goto LABEL_68;
    }
  }

  unint64_t v81 = v28;
LABEL_68:
  sub_10002D8BC((uint64_t)v149);
  unint64_t v56 = v113;
  if (v113)
  {
    unint64_t v57 = (unint64_t *)&v113->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  unint64_t v59 = v104;
  if (v104)
  {
    int v60 = (unint64_t *)&v104->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  unint64_t v62 = v126;
  if (v126)
  {
    unint64_t v63 = (unint64_t *)&v126->__shared_owners_;
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  unint64_t v65 = v118;
  if (v118)
  {
    uint64_t v66 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  unint64_t v68 = *v82;
  unint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  unint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  LOBYTE(v96) = 2;
  *((void **)&v97 + 1) = v101[1];
  __int128 v98 = v68 / v69;
  LODWORD(v99) = v81 / v70;
  unint64_t v71 = a2[3];
  if (v71 >= a2[4])
  {
    uint64_t v76 = sub_1000671B0(a2 + 2, (uint64_t)&v96);
    unint64_t v77 = *(std::__shared_weak_count **)&v102[32];
    a2[3] = v76;
    if (v77)
    {
      uint64_t v78 = (unint64_t *)&v77->__shared_owners_;
      do
        unint64_t v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }

  else
  {
    __int128 v72 = v97;
    *(_OWORD *)unint64_t v71 = v96;
    *(_OWORD *)(v71 + 16) = v72;
    __int128 v73 = v98;
    __int128 v74 = v100;
    uint64_t v75 = v101[0];
    *(_OWORD *)(v71 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v99;
    *(_OWORD *)(v71 + sub_1000114F0(v1 + 64) = v74;
    *(_OWORD *)(v71 + 32) = v73;
    *(void *)(v71 + 80) = v75;
    *(void *)(v71 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(v71 + 96) = 0LL;
    *(void *)(v71 + 104) = 0LL;
    *(_OWORD *)(v71 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)&v101[1];
    v101[1] = 0LL;
    v101[2] = 0LL;
    *(void **)(v71 + 104) = v101[3];
    *(void *)(v71 + sub_1000114F0(v1 + 112) = 0LL;
    v101[3] = 0LL;
    *(void *)(v71 + 120) = 0LL;
    *(void *)(v71 + 12std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(_OWORD *)(v71 + sub_1000114F0(v1 + 112) = *(_OWORD *)v102;
    *(void *)(v71 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)&v102[16];
    memset(v102, 0, 24);
    *(_OWORD *)(v71 + 136) = *(_OWORD *)&v102[24];
    *(void *)&v102[32] = 0LL;
    *(void *)&v102[24] = 0LL;
    a2[3] = v71 + 152;
  }

  v149[0] = (void **)v102;
  sub_1000170C0(v149);
  if (v101[1])
  {
    v101[2] = v101[1];
    operator delete(v101[1]);
  }

  return v81;
}

void sub_10006306C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_100063134(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 112);
  sub_1000170C0(&v4);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  return a1;
}

  ;
}

uint64_t sub_10006318C(uint64_t a1)
{
  *(void *)a1 = off_10016FB08;
  if (*(_BYTE *)(a1 + 256)) {
    sub_10010773C(a1 + 56);
  }
  sub_1000114F0(a1 + 16);
  return a1;
}

void sub_1000631E0(void **a1)
{
  *a1 = off_10016FB08;
  if (*((_BYTE *)a1 + 256)) {
    sub_10010773C(a1 + 7);
  }
  sub_1000114F0((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_100063234(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8LL))();
}

uint64_t sub_100063240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16LL))();
}

uint64_t sub_10006324C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24LL))();
}

uint64_t sub_100063258()
{
  return 4294967218LL;
}

double sub_100063260@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    int v6 = v5();
    uint64_t v4 = *(void *)(a1 + 16);
  }

  else
  {
    int v6 = 0;
  }

  unint64_t v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (unsigned int v8 = v7()) != 0)
  {
    uint64_t v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0LL;
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }

  return result;
}

uint64_t sub_1000632DC()
{
  return 1LL;
}

BOOL sub_1000632E4(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 72LL))(v4);
  if (v4[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4[1] == 0LL;
  }
  return !v1 || v4[2] != 0LL || v4[3] != 0LL;
}

void *sub_100063338(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  sub_1000674CC((uint64_t)v2, a1);
  return v2;
}

void sub_10006336C(_Unwind_Exception *a1)
{
}

uint64_t sub_100063380(uint64_t a1)
{
  if (qword_100198FB8 != -1) {
    dispatch_once(&qword_100198FB8, &stru_10016FC18);
  }
  if (off_100198FB0) {
    return off_100198FB0(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000633E4(uint64_t a1)
{
  return a1;
}

void sub_10006340C(id a1)
{
  BOOL v1 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v1)
  {
    off_100198FB0 = (uint64_t (*)(void))dlsym(v1, "AmberDiskImagePluginCreate");
    if (off_100198FB0) {
      return;
    }
    *(void *)&__int128 v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18LL;
    int v3 = 16;
    sub_100063628(v4, &v2);
    sub_100004E4C(&v5, (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber", 50LL);
    std::ostream::~ostream(&v5, off_10016FF38);
    sub_100063DB4((uint64_t)v4);
  }

  else
  {
    *(void *)&__int128 v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18LL;
    int v3 = 16;
    sub_100063540(v4, &v2);
    sub_100004E4C(&v5, (uint64_t)"Cannot load libAmber", 20LL);
    std::ostream::~ostream(&v5, off_10016FD18);
    sub_10006378C((uint64_t)v4);
  }

  std::ios::~ios(&v6);
}

void sub_10006351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100063540(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100063710((uint64_t)a1, a2);
  *a1 = off_10016FC50;
  a1[45] = &off_10016FD50;
  a1[46] = &off_10016FD78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016FC50;
  a1[45] = off_10016FCD8;
  a1[46] = off_10016FD00;
  return a1;
}

void sub_1000635C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000635E8(uint64_t a1)
{
  return a1;
}

void *sub_100063628(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100063D38((uint64_t)a1, a2);
  *a1 = off_10016FE70;
  a1[45] = &off_10016FF70;
  a1[46] = &off_10016FF98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_10016FE70;
  a1[45] = off_10016FEF8;
  a1[46] = off_10016FF20;
  return a1;
}

void sub_1000636AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000636D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100063710(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10016FDE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100063778(_Unwind_Exception *a1)
{
}

uint64_t sub_10006378C(uint64_t a1)
{
  *(void *)a1 = off_10016FDE8;
  sub_100063A04(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100063828(char *a1)
{
}

uint64_t sub_10006386C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000638A0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000638EC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016FD18);
  sub_10006378C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100063924(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016FD18);
  sub_10006378C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100063964(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016FD18);
  sub_10006378C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000639A4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016FD18);
  sub_10006378C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000639F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006378C(a1);
  operator delete(v1);
}

uint64_t sub_100063A04(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100063B54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100063B2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100063B54(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 52LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 52LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100063D38(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170008;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100063DA0(_Unwind_Exception *a1)
{
}

uint64_t sub_100063DB4(uint64_t a1)
{
  *(void *)a1 = off_100170008;
  sub_10006402C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100063E50(char *a1)
{
}

uint64_t sub_100063E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100063EC8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100063F14(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016FF38);
  sub_100063DB4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100063F4C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10016FF38);
  sub_100063DB4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100063F8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016FF38);
  sub_100063DB4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100063FCC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10016FF38);
  sub_100063DB4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100064018(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100063DB4(a1);
  operator delete(v1);
}

uint64_t sub_10006402C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006417C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100064154( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006417C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 58LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 58LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100064360(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_1000643E0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1000643C8(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000643E0(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_100064460(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_1000645E4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100027200(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

void **sub_100064460(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (sub_100064718(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      unint64_t v12 = (void *)a2;
    }

    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }

        while (v11);
      }

      else
      {
        unint64_t v16 = (void *)a2;
        do
        {
          unint64_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          unint64_t v16 = v12;
        }

        while (v17);
      }

      if ((sub_100064718(v12 + 4, a5) & 0x80) == 0) {
        return (void **)sub_100064688((uint64_t)a1, a3, a5);
      }
    }

    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }

    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }

  if ((sub_100064718((void *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 8);
    if (v13)
    {
      os_log_type_t v14 = *(void ***)(a2 + 8);
      do
      {
        uint64_t v15 = v14;
        os_log_type_t v14 = (void **)*v14;
      }

      while (v14);
    }

    else
    {
      unint64_t v19 = (void **)a2;
      do
      {
        uint64_t v15 = (void **)v19[2];
        BOOL v17 = *v15 == v19;
        unint64_t v19 = v15;
      }

      while (!v17);
    }

    if (v15 == v9) {
      goto LABEL_27;
    }
    if ((sub_100064718(a5, v15 + 4) & 0x80) != 0)
    {
      uint64_t v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }

      else
      {
        *a3 = (void **)a2;
      }

      return (void **)a4;
    }

    return (void **)sub_100064688((uint64_t)a1, a3, a5);
  }

  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

__n128 sub_1000645E4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100040504(v7, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }

  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10006466C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1000647AC(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_100064688(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if ((sub_100064718(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

uint64_t sub_100064718(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_100064750(a1, v2, v5, v6);
}

uint64_t sub_100064750(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

void sub_1000647AC(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1000647F8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000647F8(a1, *(void *)a2);
    sub_1000647F8(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void **sub_100064848(uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_100064718(v3 + 4, a2);
    if (v6 >= 0) {
      size_t v7 = v3;
    }
    else {
      size_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2 || (sub_100064718(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_1000648C4(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  char v6 = (uint64_t **)sub_100064688((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_100064958((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100027200(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_100064958@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_100040504(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000649E0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1000647AC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000649FC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100170158);
  sub_100064BC0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100064A34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170158);
  sub_100064BC0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100064A74(char *a1)
{
}

uint64_t sub_100064AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100064AEC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100064B38(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100170158);
  sub_100064BC0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100064B78(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170158);
  sub_100064BC0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100064BC0(uint64_t a1)
{
  *(void *)a1 = off_100170228;
  sub_100064C5C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100064C5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100064DC4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100064D84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100064DB0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100064BC0(a1);
  operator delete(v1);
}

int *sub_100064DC4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 92LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 92LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100064FA8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100170378);
  sub_10006516C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100064FE0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170378);
  sub_10006516C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100065020(char *a1)
{
}

uint64_t sub_100065064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100065098(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000650E4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100170378);
  sub_10006516C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100065124(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170378);
  sub_10006516C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006516C(uint64_t a1)
{
  *(void *)a1 = off_100170448;
  sub_100065208(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100065208(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100065370((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100065330( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006535C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006516C(a1);
  operator delete(v1);
}

int *sub_100065370(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 147LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 147LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100065554(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100170598);
  sub_100065718(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006558C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170598);
  sub_100065718(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000655CC(char *a1)
{
}

uint64_t sub_100065610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100065644(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100065690(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100170598);
  sub_100065718((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000656D0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170598);
  sub_100065718((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100065718(uint64_t a1)
{
  *(void *)a1 = off_100170668;
  sub_1000657B4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000657B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006591C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000658DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100065908(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100065718(a1);
  operator delete(v1);
}

int *sub_10006591C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 152LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 152LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100065B00(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001707B8);
  sub_100065CC4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100065B38(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001707B8);
  sub_100065CC4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100065B78(char *a1)
{
}

uint64_t sub_100065BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100065BF0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100065C3C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001707B8);
  sub_100065CC4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100065C7C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001707B8);
  sub_100065CC4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100065CC4(uint64_t a1)
{
  *(void *)a1 = off_100170888;
  sub_100065D60(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100065D60(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100065EC8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100065E88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100065EB4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100065CC4(a1);
  operator delete(v1);
}

int *sub_100065EC8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 157LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 157LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000660AC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001709D8);
  sub_100066270(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000660E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001709D8);
  sub_100066270(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100066124(char *a1)
{
}

uint64_t sub_100066168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006619C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000661E8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001709D8);
  sub_100066270((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100066228(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001709D8);
  sub_100066270((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100066270(uint64_t a1)
{
  *(void *)a1 = off_100170AA8;
  sub_10006630C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006630C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100066474((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100066434( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100066460(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100066270(a1);
  operator delete(v1);
}

int *sub_100066474(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 163LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 163LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100066658(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100170BF8);
  sub_10006681C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100066690(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170BF8);
  sub_10006681C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000666D0(char *a1)
{
}

uint64_t sub_100066714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100066748(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100066794(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100170BF8);
  sub_10006681C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000667D4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170BF8);
  sub_10006681C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006681C(uint64_t a1)
{
  *(void *)a1 = off_100170CC8;
  sub_1000668B8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000668B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100066A20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000669E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100066A0C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006681C(a1);
  operator delete(v1);
}

int *sub_100066A20(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 171LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 171LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100066C04(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100170E18);
  sub_100066DC8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100066C3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170E18);
  sub_100066DC8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100066C7C(char *a1)
{
}

uint64_t sub_100066CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100066CF4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100066D40(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100170E18);
  sub_100066DC8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100066D80(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100170E18);
  sub_100066DC8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100066DC8(uint64_t a1)
{
  *(void *)a1 = off_100170EE8;
  sub_100066E64(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100066E64(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100066FCC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100066F8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100066FB8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100066DC8(a1);
  operator delete(v1);
}

int *sub_100066FCC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 243LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 243LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000671B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286LL) {
    sub_100016F4C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943LL) {
    unint64_t v9 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  uint64_t v10 = (char *)sub_100067390(v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  __int128 v13 = *(_OWORD *)(a2 + 32);
  __int128 v14 = *(_OWORD *)(a2 + 48);
  __int128 v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 12) = 0LL;
  *((void *)v11 + 13) = 0LL;
  *((void *)v11 + 11) = 0LL;
  *(_OWORD *)(v11 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *((void *)v11 + 15) = 0LL;
  *((void *)v11 + 16) = 0LL;
  *((void *)v11 + 14) = 0LL;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + sub_1000114F0(v1 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 12std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  void v19[2] = v11 + 152;
  sub_10006731C(a1, v19);
  uint64_t v17 = a1[1];
  sub_100067480((uint64_t)v19);
  return v17;
}

void sub_100067308(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10006731C(uint64_t *a1, void *a2)
{
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_100067390(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    sub_1000116A8();
  }
  return operator new(152 * a2);
}

__n128 sub_1000673D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v8 = (__n128 *)(a7 - 64);
    do
    {
      __n128 v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 8std::iostream::~basic_iostream(v2, v3 + 8) = v9;
      __n128 v10 = *(__n128 *)(a3 - 120);
      __n128 v11 = *(__n128 *)(a3 - 104);
      __n128 v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(void *)(a3 - 72);
      v8->n128_u64[0] = 0LL;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0LL;
      v8[1].n128_u64[0] = 0LL;
      *unint64_t v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(void *)(a3 - 48);
      *(void *)(a3 - sub_1000114F0(v1 + 64) = 0LL;
      *(void *)(a3 - 56) = 0LL;
      *(void *)(a3 - 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      v8[1].n128_u64[1] = 0LL;
      v8[2].n128_u64[0] = 0LL;
      v8[2].n128_u64[1] = 0LL;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      __n128 result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      unint64_t v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152LL;
      a3 -= 152LL;
    }

    while (a3 != a5);
  }

  return result;
}

uint64_t sub_100067480(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    sub_10005F108(i - 152);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000674CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100170F68;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  sub_1000F9CD4((dispatch_semaphore_t *)(a1 + 24), 0LL);
  sub_100061210(a2);
  return a1;
}

void sub_10006751C(_Unwind_Exception *a1)
{
}

uint64_t sub_100067530(uint64_t a1)
{
  *(void *)a1 = off_100170F68;
  sub_1000F95F0((dispatch_object_s **)(a1 + 24));
  return a1;
}

void sub_100067560(dispatch_object_s **a1)
{
  *a1 = (dispatch_object_s *)off_100170F68;
  sub_1000F95F0(a1 + 3);
  operator delete(a1);
}

void *sub_100067590(void ***a1)
{
  return (*(void *(**)(void *__return_ptr))(***a1 + 16LL))(**a1);
}

uint64_t sub_1000675A4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170228;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10006760C(_Unwind_Exception *a1)
{
}

uint64_t sub_100067620(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170448;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100067688(_Unwind_Exception *a1)
{
}

uint64_t sub_10006769C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170668;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100067704(_Unwind_Exception *a1)
{
}

uint64_t sub_100067718(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170888;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100067780(_Unwind_Exception *a1)
{
}

uint64_t sub_100067794(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170AA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000677FC(_Unwind_Exception *a1)
{
}

uint64_t *sub_100067810(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_100064688((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_1000678B8((uint64_t)a1, a4, (uint64_t)v10);
    sub_100027200(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_100067948((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_1000678B8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_100040504(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100067930(_Unwind_Exception *a1)
{
}

void sub_100067948(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10006798C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_10006798C(uint64_t a1)
{
}

uint64_t sub_1000679C8(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((void *)&v9 + 1) = 93LL;
  int v10 = 0;
  sub_100067BA0(v11, &v9);
  sub_100004E4C(&v12, (uint64_t)"Unregistering plugin ", 21LL);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  sub_100004E4C(&v12, v5, v6);
  std::ostream::~ostream(&v12, off_1001710F0);
  sub_100067D04((uint64_t)v11);
  uint64_t result = std::ios::~ios(&v13);
  unint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8) {
    return v8(a2);
  }
  return result;
}

void sub_100067A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100067A9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100170FC0;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100067AD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100170FC0;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v2);
}

void sub_100067B18(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_1000679C8(a1 + 32, *(void *)(a1 + 24));
}

uint64_t sub_100067B60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }

  else
  {
    return 0LL;
  }

void *sub_100067BA0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100067C88((uint64_t)a1, a2);
  *a1 = off_100171028;
  a1[45] = &off_100171128;
  a1[46] = &off_100171150;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100171028;
  a1[45] = off_1001710B0;
  a1[46] = off_1001710D8;
  return a1;
}

void sub_100067C24(_Unwind_Exception *a1)
{
}

uint64_t sub_100067C48(uint64_t a1)
{
  return a1;
}

uint64_t sub_100067C88(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001711C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100067CF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100067D04(uint64_t a1)
{
  *(void *)a1 = off_1001711C0;
  sub_100067F7C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100067DA0(char *a1)
{
}

uint64_t sub_100067DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100067E18(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100067E64(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001710F0);
  sub_100067D04(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100067E9C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001710F0);
  sub_100067D04((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100067EDC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001710F0);
  sub_100067D04(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100067F1C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001710F0);
  sub_100067D04((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100067F68(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100067D04(a1);
  operator delete(v1);
}

uint64_t sub_100067F7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000680CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000680A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000680CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 167LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int128 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 167LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000682B0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170CC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100068318(_Unwind_Exception *a1)
{
}

void *sub_100068334()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_100171240;
  return result;
}

void sub_100068358(uint64_t a1, void *a2)
{
  *a2 = &off_100171240;
}

uint64_t sub_100068370(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3) {
    return v3();
  }
  return result;
}

uint64_t sub_100068384(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000683C0()
{
}

uint64_t *sub_1000683CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  char v6 = operator new(0x40uLL);
  sub_10006853C((uint64_t)v10, a3);
  sub_1000685A0(v6, a2, (uint64_t)v10);
  a1[1] = (uint64_t)v6;
  uint64_t v7 = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v10;
    goto LABEL_5;
  }

  if (v11)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  return a1;
}

void sub_100068498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __int128 v16 = a13;
  if (a13 == &a10)
  {
    uint64_t v17 = 4LL;
    __int128 v16 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_7;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_7:
  operator delete(v14);
  __cxa_begin_catch(exception_object);
  uint64_t v18 = *(void *)(v13 + 24);
  if (!v18) {
    sub_100016D94();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 48LL))(v18, &a9);
  __cxa_rethrow();
}

uint64_t sub_10006853C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void *sub_1000685A0(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001712D0;
  sub_10006853C((uint64_t)v8, a3);
  a1[3] = a2;
  sub_10006853C((uint64_t)(a1 + 4), (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_10006865C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001712D0;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    uint64_t v4 = 4LL;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }

  if (shared_owners)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000686B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001712D0;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    uint64_t v4 = 4LL;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }

  if (shared_owners)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }

  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v5);
}

void *sub_100068718(void *a1)
{
  uint64_t v5 = a1[3];
  uint64_t v2 = a1[7];
  if (!v2) {
    sub_100016D94();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48LL))(v2, &v5);
  uint64_t result = (void *)a1[7];
  if (result == a1 + 4)
  {
    uint64_t v4 = 4LL;
    uint64_t result = a1 + 4;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t sub_100068798(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1000687D8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100170EE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100068840(_Unwind_Exception *a1)
{
}

char *sub_100068854(char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v32 = v4;
    __int128 v16 = (char *)sub_100016F60(v4, v15);
    uint64_t v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)uint64_t v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      int v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    __int16 v23 = *a1;
    uint64_t v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      uint64_t v24 = &v16[16 * v12];
    }

    else
    {
      uint64_t v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)uint64_t v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    uint64_t v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v30 = v26;
    unint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    uint64_t v31 = v27;
    uint64_t v29 = v26.i64[0];
    sub_100016F94((uint64_t)&v29);
  }

  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    uint64_t v11 = v7 + 16;
  }

  a1[1] = v11;
  return v11 - 16;
}

uint64_t sub_100068998(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, _OWORD *a5)
{
  int v9 = sub_100068AD4(a2, a3);
  sub_100068CDC((void *)a1, v9, (a3 & 3) != 0);
  *(void *)a1 = off_100171390;
  *(void *)(a1 + 24) = off_100171468;
  *(void *)(a1 + 72) = off_100171490;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = *a5;
  if ((a3 & 0x200) != 0)
  {
    sub_100068D4C(a1, a4);
    sub_100068E40(a1);
    BOOL v10 = 1;
  }

  else if (*(_BYTE *)(a1 + 36))
  {
    BOOL v10 = faccessat(*(_DWORD *)(a1 + 32), "mapped", 0, 0) != 0;
  }

  else
  {
    BOOL v10 = 0;
  }

  if (!*(void *)(a1 + 112)) {
    sub_1000690B4(a1);
  }
  if (v10) {
    sub_100069394(a1, (a3 & 0x200) != 0);
  }
  return a1;
}

void sub_100068A98(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 112);
  *(void *)(v1 + sub_1000114F0(v1 + 112) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1000114F0(v1 + 96);
  sub_1000114F0(v2);
  sub_100069610(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100068AD4(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x200) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "Failed creating sparsebundle folder";
LABEL_16:
    int v9 = (void *)sub_100004870((uint64_t)exception, (uint64_t)v8, v7);
  }

  if ((a2 & 3) == 0 || geteuid()) {
    return sub_1000FA260(v2, 0LL);
  }
  else {
    uint64_t v3 = *(const char **)v2;
  }
  if (stat(v3, &v11))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "stat failed";
    goto LABEL_16;
  }

  if (!v11.st_uid) {
    return sub_1000FA260(v2, 0LL);
  }
  sub_10006C704((uint64_t)v10, v11.st_uid);
  uint64_t v4 = sub_1000FA260(v2, 0LL);
  sub_10006CF64((uint64_t)v10);
  return v4;
}

void sub_100068BE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
}

void *sub_100068CDC(void *a1, int a2, char a3)
{
  unint64_t v6 = sub_100116E6C(a1);
  sub_1000FACE0((uint64_t)(v6 + 3), a2, a3);
  *a1 = off_100171538;
  a1[3] = &off_1001715F8;
  return a1;
}

void sub_100068D34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100068D4C(uint64_t result, unint64_t a2)
{
  if (a2 < 0x100000 || a2 > 0x200000000LL || (a2 & 0xFFF) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v4);
    sub_100004E4C(v4, (uint64_t)"Invalid band size (", 19LL);
    std::ostream::operator<<(v4, a2);
    sub_100004E4C(v4, (uint64_t)" bytes)", 7LL);
    sub_10001161C((uint64_t)exception, (uint64_t)v4, 0x16u);
  }

  *(void *)(result + 12std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  return result;
}

void sub_100068E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100068E40(uint64_t a1)
{
  if (mkdirat(*(_DWORD *)(a1 + 32), "bands", 0x1FFu) == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v13 = __error();
    uint64_t v14 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Failed creating bands folder", *v13);
  }

  sub_100069A0C(a1);
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100004CB0(__p, "token");
  uint64_t v3 = sub_1000FA77C(v2, (uint64_t)__p, 1538);
  sub_100045554((uint64_t)&v23, v3, 1LL, 0);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  int v4 = *(_DWORD *)(a1 + 32);
  sub_100004CB0(v15, "lock");
  uint64_t v5 = sub_1000FA77C(v4, (uint64_t)v15, 1538);
  sub_100045554((uint64_t)__p, v5, 1LL, 0);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  __p[0] = off_100184F88;
  __int128 v19 = off_100185068;
  int v20 = off_1001850A0;
  sub_1000458AC((uint64_t)&v22);
  unint64_t v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  __int16 v23 = off_100184F88;
  __int128 v25 = off_100185068;
  int64x2_t v26 = off_1001850A0;
  sub_1000458AC((uint64_t)&v28);
  int v9 = v27;
  if (v27)
  {
    BOOL v10 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_100069058(_Unwind_Exception *a1)
{
}

void sub_1000690B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  *(void *)(a1 + sub_1000114F0(v1 + 112) = v3[0];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100069134( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    unint64_t v64 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "SparseBundleBackend::read_info()";
    *((void *)&a11 + 1) = 30LL;
    a12 = 16;
    sub_10006A464(&__p, &a11);
    sub_100004E4C(&a61, (uint64_t)"Failed to read ", 15LL);
    sub_100004E4C(&a61, (uint64_t)"Info.plist", 10LL);
    sub_100004E4C(&a61, (uint64_t)", ", 2LL);
    unint64_t v65 = (const char *)(*(uint64_t (**)(void *))(*(void *)v64 + 16LL))(v64);
    size_t v66 = strlen(v65);
    sub_100004E4C(&a61, (uint64_t)v65, v66);
    sub_100004E4C(&a61, (uint64_t)", reading from backup", 21LL);
    sub_10006A50C((uint64_t)&__p);
    __cxa_end_catch();
    sub_100004CB0(&__p, "Info.bckup");
    sub_100069C04(v61, (uint64_t)&__p, &a10);
    uint64_t v67 = a10;
    a10 = 0LL;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
    }
    if (a18 < 0) {
      operator delete(__p);
    }
    JUMPOUT(0x10006911CLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100069394(uint64_t a1, char a2)
{
  uint64_t result = mkdirat(*(_DWORD *)(a1 + 32), "mapped", 0x1FFu);
  if ((_DWORD)result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v12);
    sub_100004E4C(v12, (uint64_t)"Failed creating ", 16LL);
    sub_100004E4C(v12, (uint64_t)"mapped", 6LL);
    sub_100004E4C(v12, (uint64_t)" folder", 7LL);
    unint64_t v6 = __error();
    sub_10001161C((uint64_t)exception, (uint64_t)v12, *v6);
  }

  if ((a2 & 1) == 0)
  {
    sub_1000FB12C(a1 + 24, &v11);
    if (fchmodat(*(_DWORD *)(a1 + 32), "mapped", v11.st_mode & 0x1FF, 0) == -1)
    {
      unsigned int v7 = __cxa_allocate_exception(0x40uLL);
      sub_100004D60((uint64_t)v12);
      sub_100004E4C(v12, (uint64_t)"fchmodat failed for ", 20LL);
      sub_100004E4C(v12, (uint64_t)"mapped", 6LL);
      sub_100004E4C(v12, (uint64_t)" folder", 7LL);
      unint64_t v8 = __error();
      sub_10001161C((uint64_t)v7, (uint64_t)v12, *v8);
    }

    uint64_t result = geteuid();
    if (!(_DWORD)result && v11.st_uid)
    {
      uint64_t result = fchownat(*(_DWORD *)(a1 + 32), "mapped", v11.st_uid, 0xFFFFFFFF, 0);
      if ((_DWORD)result == -1)
      {
        int v9 = __cxa_allocate_exception(0x40uLL);
        sub_100004D60((uint64_t)v12);
        sub_100004E4C(v12, (uint64_t)"fchownat failed for ", 20LL);
        sub_100004E4C(v12, (uint64_t)"mapped", 6LL);
        sub_100004E4C(v12, (uint64_t)" folder", 7LL);
        BOOL v10 = __error();
        sub_10001161C((uint64_t)v9, (uint64_t)v12, *v10);
      }
    }
  }

  return result;
}

void sub_1000695C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_100069610(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *sub_100069648(void *a1, int a2, char a3, void *a4, uint64_t *a5)
{
  unint64_t v8 = sub_100068CDC(a1, a2, a3);
  *unint64_t v8 = off_100171390;
  v8[3] = off_100171468;
  uint64_t v9 = (uint64_t)(v8 + 3);
  v8[9] = off_100171490;
  void v8[10] = *a4;
  uint64_t v10 = a4[1];
  v8[11] = v10;
  if (v10)
  {
    stat v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  a1[12] = 0LL;
  a1[13] = 0LL;
  a1[14] = 0LL;
  sub_1000690B4((uint64_t)a1);
  sub_100026A1C(a1 + 12, a5);
  if ((*(unsigned int (**)(void *))(*a1 + 48LL))(a1))
  {
    sub_1000FB12C(v9, v17);
    uint64_t v13 = v17[0].st_mode & 0x1B6;
    umask(v17[0].st_mode & 0x1B6 ^ 0x1B6);
    *(void *)&__int128 v15 = "SparseBundleBackend::SparseBundleBackend(int, BOOL, const shared_ptr<FileLocal> &, const shared_pt"
                      "r<crypto::format> &)";
    *((void *)&v15 + 1) = 40LL;
    int v16 = 0;
    sub_100069838(v17, &v15);
    sub_100004E4C(&v18, (uint64_t)"Mode for new files in bundle: ", 30LL);
    *(_DWORD *)((char *)&v18 + *(void *)(v18 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v18 + *(void *)(v18 - 24) + 8) & 0xFFFFFFB5 | 0x40;
    std::ostream::operator<<(&v18, v13);
    *(_DWORD *)((char *)&v18 + *(void *)(v18 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v18 + *(void *)(v18 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v18, off_1001716F0);
    sub_10006C31C((uint64_t)v17);
    std::ios::~ios(&v19);
  }

  return a1;
}

void sub_1000697DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v8 = *(void *)(v4 + 112);
  *(void *)(v4 + sub_1000114F0(v1 + 112) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  sub_1000114F0(v6);
  sub_1000114F0(v5);
  sub_100069610(v4);
  _Unwind_Resume(a1);
}

void *sub_100069838(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100071ED4((uint64_t)a1, a2);
  *a1 = off_100171628;
  a1[45] = &off_100171728;
  a1[46] = &off_100171750;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100171628;
  a1[45] = off_1001716B0;
  a1[46] = off_1001716D8;
  return a1;
}

void sub_1000698BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000698E0(uint64_t a1)
{
  return a1;
}

void *sub_100069924(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100071F50((uint64_t)a1, a2);
  *a1 = off_100171A68;
  a1[45] = &off_100171B68;
  a1[46] = &off_100171B90;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100171A68;
  a1[45] = off_100171AF0;
  a1[46] = off_100171B18;
  return a1;
}

void sub_1000699A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000699CC(uint64_t a1)
{
  return a1;
}

void sub_100069A0C(uint64_t a1)
{
  *(void *)&__int128 __p = "SparseBundleBackend::write_info_plists()";
  *((void *)&__p + 1) = 38LL;
  int v8 = 0;
  sub_10006AC28(v10, &__p);
  sub_100004E4C(&v16, (uint64_t)"Updating ", 9LL);
  sub_100004E4C(&v16, (uint64_t)"Info.bckup", 10LL);
  sub_100004E4C(&v16, (uint64_t)", disk size: ", 13LL);
  std::ostream::operator<<(&v16, *(void *)(a1 + 120));
  std::ostream::~ostream(&v16, off_1001725D0);
  sub_10006EF2C((uint64_t)v10);
  std::ios::~ios(&v17);
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100004CB0(&__p, "Info.bckup");
  uint64_t v3 = sub_1000FA77C(v2, (uint64_t)&__p, 1538);
  sub_100045554((uint64_t)v10, v3, 1LL, 0);
  if (v9 < 0) {
    operator delete((void *)__p);
  }
  sub_10006A7D0(a1, (uint64_t)v10);
  sub_10006A54C(a1);
  v10[0] = off_100184F88;
  unint64_t v12 = off_100185068;
  uint64_t v13 = off_1001850A0;
  sub_1000458AC((uint64_t)&v15);
  uint64_t v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_100069BC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
}

void sub_100069C04(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  if ((_DWORD)v6) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  int v8 = operator new(0x458uLL);
  uint64_t v9 = sub_1000FA77C(*(_DWORD *)(a1 + 32), a2, v7);
  sub_100045554((uint64_t)v8, v9, v6, 0);
  *a3 = v8;
  unint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v8 + 40LL))(v8);
  if (v10 >= 0x401)
  {
    *(void *)&__int128 bytes = "SparseBundleBackend::read_info(const std::string &)";
    *((void *)&bytes + 1) = 30LL;
    int v61 = 16;
    sub_10006A37C(&valuePtr, &bytes);
    sub_100004E4C(&v68, (uint64_t)"Info.plist", 10LL);
    sub_100004E4C(&v68, (uint64_t)" is ", 4LL);
    std::ostream::operator<<(&v68, v10);
    sub_100004E4C(&v68, (uint64_t)" bytes, reading only ", 21LL);
    std::ostream::operator<<(&v68, 1024LL);
    sub_100004E4C(&v68, (uint64_t)" bytes", 6LL);
    std::ostream::~ostream(&v68, off_100171D50);
    sub_10006D794((uint64_t)&valuePtr);
    std::ios::~ios(&v69);
    unint64_t v10 = 1024LL;
  }

  sub_10006DB7C(&bytes, v10);
  stat v11 = (unsigned __int8 *)bytes;
  unint64_t v12 = (std::__shared_weak_count *)*((void *)sub_100118DDC() + 1);
  uint64_t valuePtr = v11;
  unint64_t v63 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  int64_t v64 = v10;
  uint64_t v65 = 0LL;
  unint64_t v66 = v10;
  char v67 = 0;
  int v15 = (*(uint64_t (**)(void *, unsigned __int8 **))(*(void *)v8 + 88LL))(v8, &valuePtr);
  uint64_t v16 = v63;
  if (v63)
  {
    uint64_t v17 = (unint64_t *)&v63->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v10 != v15)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)&valuePtr);
    sub_100004E4C(&valuePtr, (uint64_t)"Failed reading ", 15LL);
    sub_100004E4C(&valuePtr, (uint64_t)"Info.plist", 10LL);
    uint64_t v39 = __error();
    sub_10001161C((uint64_t)exception, (uint64_t)&valuePtr, *v39);
  }

  CFDataRef v19 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)bytes, v10);
  CFDataRef v59 = v19;
  if (!v19)
  {
    unint64_t v40 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v40 = &off_100189E78;
    uint64_t v41 = std::generic_category();
    v40[1] = 12LL;
    v40[2] = v41;
    *((_BYTE *)v40 + 24) = 0;
    *((_BYTE *)v40 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v40[7] = "Failed creating CFData";
  }

  CFErrorRef error = 0LL;
  CFPropertyListRef v20 = CFPropertyListCreateWithData(kCFAllocatorDefault, v19, 0LL, 0LL, &error);
  unint64_t v57 = v20;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v20)
  {
    unint64_t v42 = __cxa_allocate_exception(0x40uLL);
    void *v42 = &off_100189E78;
    uint64_t v43 = std::generic_category();
    v42[1] = 22LL;
    void v42[2] = v43;
    *((_BYTE *)v42 + 24) = 0;
    *((_BYTE *)v42 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v42[7] = "Corrupted plist";
  }

  uint64_t v22 = TypeID;
  if (CFGetTypeID(v20) != TypeID)
  {
    uint64_t v44 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v45 = CFGetTypeID(v20);
    BOOL v46 = sub_100026B08(v44, v45, v22);
  }

  Value = CFDictionaryGetValue((CFDictionaryRef)v20, @"size");
  CFTypeID v24 = CFNumberGetTypeID();
  if (Value)
  {
    uint64_t v25 = v24;
    if (CFGetTypeID(Value) != v24)
    {
      char v47 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v48 = CFGetTypeID(Value);
      BOOL v49 = sub_100026B08(v47, v48, v25);
    }
  }

  int64x2_t v26 = CFDictionaryGetValue((CFDictionaryRef)v20, @"band-size");
  CFTypeID v27 = CFNumberGetTypeID();
  if (v26)
  {
    uint64_t v28 = v27;
    if (CFGetTypeID(v26) != v27)
    {
      char v50 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v51 = CFGetTypeID(v26);
      unint64_t v52 = sub_100026B08(v50, v51, v28);
    }
  }

  uint64_t v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v20, @"uuid");
  CFTypeID v30 = CFStringGetTypeID();
  if (v29)
  {
    uint64_t v31 = v30;
    if (CFGetTypeID(v29) != v30)
    {
      unint64_t v53 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v54 = CFGetTypeID(v29);
      unint64_t v55 = sub_100026B08(v53, v54, v31);
    }
  }

  uint64_t v32 = "Corrupted plist dictionary";
  if (!Value || !v26)
  {
LABEL_41:
    unint64_t v36 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v36 = &off_100189E78;
    int64_t v37 = std::generic_category();
    v36[1] = 22LL;
    void v36[2] = v37;
    *((_BYTE *)v36 + 24) = 0;
    *((_BYTE *)v36 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v36[7] = v32;
  }

  if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberLongLongType, &valuePtr)
    || (*(void *)(a1 + 120) = valuePtr, !CFNumberGetValue((CFNumberRef)v26, kCFNumberLongLongType, &valuePtr)))
  {
    uint64_t v32 = "Failed converting CFNumber to longlong";
    goto LABEL_41;
  }

  sub_100068D4C(a1, (unint64_t)valuePtr);
  if (v29)
  {
    sub_1000F65B4(v29, &valuePtr);
    unint64_t v33 = (std::__shared_weak_count *)HIBYTE(v64);
    if (v64 >= 0) {
      p_uint64_t valuePtr = (unsigned __int8 *)&valuePtr;
    }
    else {
      p_uint64_t valuePtr = valuePtr;
    }
    if (v64 < 0) {
      unint64_t v33 = v63;
    }
    *(void *)(a1 + 136) = sub_100072078((uint64_t)&v56, p_valuePtr, (unsigned __int8 *)v33 + (void)p_valuePtr);
    *(void *)(a1 + 144) = v35;
    if (SHIBYTE(v64) < 0) {
      operator delete(valuePtr);
    }
  }

  else
  {
    *(void *)(a1 + 136) = 0LL;
    *(void *)(a1 + 144) = 0LL;
  }

  sub_100026D90(&v57);
  sub_100072048((const void **)&v59);
  if ((void)bytes)
  {
    *((void *)&bytes + 1) = bytes;
    operator delete((void *)bytes);
  }

void sub_10006A214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v23 = *v21;
  uint64_t *v21 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  _Unwind_Resume(a1);
}

void *sub_10006A37C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100071FCC((uint64_t)a1, a2);
  *a1 = off_100171C88;
  a1[45] = &off_100171D88;
  a1[46] = &off_100171DB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100171C88;
  a1[45] = off_100171D10;
  a1[46] = off_100171D38;
  return a1;
}

void sub_10006A400(_Unwind_Exception *a1)
{
}

uint64_t sub_10006A424(uint64_t a1)
{
  return a1;
}

void *sub_10006A464(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100072374((uint64_t)a1, a2);
  *a1 = off_100171EA8;
  a1[45] = &off_100171FA8;
  a1[46] = &off_100171FD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100171EA8;
  a1[45] = off_100171F30;
  a1[46] = off_100171F58;
  return a1;
}

void sub_10006A4E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10006A50C(uint64_t a1)
{
  return a1;
}

const void **sub_10006A54C(uint64_t a1)
{
  *(void *)&__int128 v11 = "SparseBundleBackend::write_primary_info_plist()";
  *((void *)&v11 + 1) = 45LL;
  int v12 = 0;
  sub_10006AB40(__p, &v11);
  sub_100004E4C(&v15, (uint64_t)"Updating ", 9LL);
  sub_100004E4C(&v15, (uint64_t)"Info.plist", 10LL);
  std::ostream::~ostream(&v15, off_1001723B0);
  sub_10006E980((uint64_t)__p);
  std::ios::~ios(&v16);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 56LL))(v2, 0LL);
    if (v3)
    {
      unsigned int v4 = v3;
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v6 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Failed truncating plist", v4);
    }
  }

  else
  {
    sub_100004CB0(__p, "Info.plist");
    int v7 = operator new(0x458uLL);
    uint64_t v8 = sub_1000FA77C(*(_DWORD *)(a1 + 32), (uint64_t)__p, 514);
    sub_100045554((uint64_t)v7, v8, 1LL, 0);
    uint64_t v9 = *(void *)(a1 + 112);
    *(void *)(a1 + sub_1000114F0(v1 + 112) = v7;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_10006A7D0(a1, *(void *)(a1 + 112));
}

void sub_10006A6AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10006A6E8(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_1000723F0((uint64_t)a1, a2);
  *a1 = off_1001720C8;
  a1[45] = &off_1001721C8;
  a1[46] = &off_1001721F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001720C8;
  a1[45] = off_100172150;
  a1[46] = off_100172178;
  return a1;
}

void sub_10006A76C(_Unwind_Exception *a1)
{
}

uint64_t sub_10006A790(uint64_t a1)
{
  return a1;
}

const void **sub_10006A7D0(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"diskimage-bundle-type", @"com.apple.diskimage.sparsebundle");
  CFDictionarySetValue(Mutable, kCFBundleInfoDictionaryVersionKey, @"6.0");
  sub_1000F67DC(Mutable, @"bundle-backingstore-version", 2LL);
  sub_1000F67DC(Mutable, @"size", *(void *)(a1 + 120));
  sub_1000F67DC(Mutable, @"band-size", *(void *)(a1 + 128));
  unsigned int v4 = Mutable;
  uint64_t v5 = operator new(0x28uLL);
  __int128 __p = v5;
  __int128 v22 = xmmword_10013A810;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  *(void *)((char *)v5 + 29) = 0LL;
  sub_10006E744(a1 + 136, v5);
  sub_1000F6E24(v4, @"uuid", (uint64_t)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  CFErrorRef error = 0LL;
  CFDataRef v6 = CFPropertyListCreateData(kCFAllocatorDefault, Mutable, kCFPropertyListXMLFormat_v1_0, 0LL, &error);
  int64x2_t v26 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)&__p);
    sub_100004E4C(&__p, (uint64_t)"Failed creating property list", 29LL);
    unsigned int Code = CFErrorGetCode(error);
    sub_10001161C((uint64_t)exception, (uint64_t)&__p, Code);
  }

  CFIndex Length = CFDataGetLength(v6);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v26);
  uint64_t v9 = *((void *)sub_100118DDC() + 1);
  __int128 __p = BytePtr;
  *(void *)&__int128 v22 = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *((void *)&v22 + 1) = Length;
  uint64_t v23 = 0LL;
  CFIndex v24 = Length;
  char v25 = 0;
  unsigned int v12 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 96LL))(a2, &__p);
  uint64_t v13 = (std::__shared_weak_count *)v22;
  if ((void)v22)
  {
    char v14 = (unint64_t *)(v22 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if ((v12 & 0x80000000) != 0
    || (unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16LL))(a2, 2LL)) != 0)
  {
    uint64_t v17 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v17 = &off_100189E78;
    unint64_t v18 = std::generic_category();
    v17[1] = v12;
    stat v17[2] = v18;
    *((_BYTE *)v17 + 24) = 0;
    *((_BYTE *)v17 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v17[7] = "Failed writing sparsebundle info";
  }

  sub_100072048((const void **)&v26);
  sub_10007246C((const void **)&error);
  return sub_100026DC0((const void **)&Mutable);
}

void sub_10006AA9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *sub_10006AB40(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007249C((uint64_t)a1, a2);
  *a1 = off_1001722E8;
  a1[45] = &off_1001723E8;
  a1[46] = &off_100172410;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001722E8;
  a1[45] = off_100172370;
  a1[46] = off_100172398;
  return a1;
}

void sub_10006ABC4(_Unwind_Exception *a1)
{
}

uint64_t sub_10006ABE8(uint64_t a1)
{
  return a1;
}

void *sub_10006AC28(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100072518((uint64_t)a1, a2);
  *a1 = off_100172508;
  a1[45] = &off_100172608;
  a1[46] = &off_100172630;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172508;
  a1[45] = off_100172590;
  a1[46] = off_1001725B8;
  return a1;
}

void sub_10006ACAC(_Unwind_Exception *a1)
{
}

uint64_t sub_10006ACD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006AD10(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 120) = (a2 + 4095) & 0xFFFFFFFFFFFFF000LL;
  sub_100069A0C(a1);
  return 0LL;
}

void *sub_10006AE44(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100072594((uint64_t)a1, a2);
  *a1 = off_100172728;
  a1[45] = &off_100172828;
  a1[46] = &off_100172850;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172728;
  a1[45] = off_1001727B0;
  a1[46] = off_1001727D8;
  return a1;
}

void sub_10006AEC8(_Unwind_Exception *a1)
{
}

uint64_t sub_10006AEEC(uint64_t a1)
{
  return a1;
}

void sub_10006AF2C(int *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1 + 8;
  else {
    int v4 = 0;
  }
  int v7 = v4;
  sub_100004CB0(__p, "token");
  sub_100072610(v3, (uint64_t)__p, &v7, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10006AFA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006AFC4(int *a1)
{
  if (((*(uint64_t (**)(int *))(*(void *)a1 + 192LL))(a1) & 1) == 0)
  {
    else {
      unsigned int v2 = 20;
    }
    unsigned int v13 = v2;
    sub_100004CB0(__p, "lock");
    sub_100072610(a1 + 8, (uint64_t)__p, (int *)&v13, &v7);
    sub_100014DF0((uint64_t)(a1 + 20), &v7);
    unsigned int v3 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1))
    {
      int v4 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
      do
        unint64_t v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&__int128 v7 = "int SparseBundleBackend::lock()";
    *((void *)&v7 + 1) = 29LL;
    int v8 = 0;
    sub_10006B294(__p, &v7);
    sub_100004E4C(&v11, (uint64_t)"Opened bundle's lock file with flags 0x", 39LL);
    *(_DWORD *)((char *)&v11 + *(void *)(v11 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v11 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v11, v13);
    *(_DWORD *)((char *)&v11 + *(void *)(v11 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v11 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v11, off_100172A10);
    sub_10006FA84((uint64_t)__p);
    std::ios::~ios(&v12);
  }

  return 0LL;
}

void sub_10006B150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2 == 1)
  {
    int v60 = (unsigned int *)__cxa_begin_catch(exception_object);
    int v61 = v60[2];
    if (v61 < 0) {
      int v61 = -v61;
    }
    BOOL v62 = v61 == 45 || v61 == 2;
    *(void *)&a10 = "int SparseBundleBackend::lock()";
    *((void *)&a10 + 1) = 29LL;
    if (v62)
    {
      a11 = 0;
      sub_10006B37C(&__p, &a10);
      sub_100004E4C(&a60, (uint64_t)"Cannot lock bundle, ignoring: ", 30LL);
      sub_100118CE8(&a60, v60);
      sub_10006B424((uint64_t)&__p);
    }

    else
    {
      a11 = 16;
      sub_10006B464(&__p, &a10);
      sub_100118CE8(&a60, v60);
      sub_10006B50C((uint64_t)&__p);
    }

    __cxa_end_catch();
    JUMPOUT(0x10006B138LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10006B294(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_1000726F8((uint64_t)a1, a2);
  *a1 = off_100172948;
  a1[45] = &off_100172A48;
  a1[46] = &off_100172A70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172948;
  a1[45] = off_1001729D0;
  a1[46] = off_1001729F8;
  return a1;
}

void sub_10006B318(_Unwind_Exception *a1)
{
}

uint64_t sub_10006B33C(uint64_t a1)
{
  return a1;
}

void *sub_10006B37C(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100072774((uint64_t)a1, a2);
  *a1 = off_100172B68;
  a1[45] = &off_100172C68;
  a1[46] = &off_100172C90;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172B68;
  a1[45] = off_100172BF0;
  a1[46] = off_100172C18;
  return a1;
}

void sub_10006B400(_Unwind_Exception *a1)
{
}

uint64_t sub_10006B424(uint64_t a1)
{
  return a1;
}

void *sub_10006B464(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_1000727F0((uint64_t)a1, a2);
  *a1 = off_100172D88;
  a1[45] = &off_100172E88;
  a1[46] = &off_100172EB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172D88;
  a1[45] = off_100172E10;
  a1[46] = off_100172E38;
  return a1;
}

void sub_10006B4E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10006B50C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006B54C(uint64_t a1)
{
  return sub_10006AFC4((int *)(a1 - 72));
}

uint64_t sub_10006B554(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 192LL))(a1))
  {
    sub_100051780(a1 + 10);
    *(void *)&__int128 v3 = "int SparseBundleBackend::unlock_all()";
    *((void *)&v3 + 1) = 35LL;
    int v4 = 0;
    sub_10006B60C(v5, &v3);
    sub_100004E4C(&v6, (uint64_t)"Bundle's lock file is closed", 28LL);
    std::ostream::~ostream(&v6, off_100173070);
    sub_100070B88((uint64_t)v5);
    std::ios::~ios(&v7);
  }

  return 0LL;
}

void sub_10006B5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10006B60C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10007286C((uint64_t)a1, a2);
  *a1 = off_100172FA8;
  a1[45] = &off_1001730A8;
  a1[46] = &off_1001730D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172FA8;
  a1[45] = off_100173030;
  a1[46] = off_100173058;
  return a1;
}

void sub_10006B690(_Unwind_Exception *a1)
{
}

uint64_t sub_10006B6B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006B6F4(uint64_t a1)
{
  return 0LL;
}

BOOL sub_10006B710(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0LL;
}

BOOL sub_10006B720(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0LL;
}

void sub_10006B730(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = operator new(0x10uLL);
  int v5 = sub_1000FA77C(*(_DWORD *)(a1 + 32), (uint64_t)__p, 0);
  *(void *)int v4 = off_100184DF8;
  void v4[2] = v5;
  *a2 = v4;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10006B7B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10006B7E0(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = operator new(0x10uLL);
  int v5 = sub_1000FA77C(*(_DWORD *)(a1 + 32), (uint64_t)__p, 0);
  *(void *)int v4 = off_100184DF8;
  void v4[2] = v5;
  *a2 = v4;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10006B864( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006B890(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  sub_100004CB0(__p, "bands");
  int v4 = sub_1000FA77C(v3, (uint64_t)__p, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  sub_100070F70(&v10, v4);
  while (1)
  {
    int v5 = readdir(v10);
    if (!v5) {
      break;
    }
    *__error() = 0;
    d_name = v5->d_name;
    uint64_t v7 = strtoll(d_name, 0LL, 16);
    if (!*__error())
    {
      sub_100004CB0(__p, d_name);
      uint64_t v13 = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      if (!v8) {
        sub_100016D94();
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v8 + 48LL))(v8, __p, &v13);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return closedir(v10);
}

void sub_10006B990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DIR *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006B9E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v16 = (unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 128) - 1LL) / *(void *)(a1 + 128);
  int v4 = operator new(0x50uLL);
  sub_100070FCC(v4, v16, 0);
  uint64_t v14 = 0LL;
  unint64_t v15 = v4;
  *(void *)&__int128 v9 = "SparseBundleBackend::get_existing_bands() const";
  *((void *)&v9 + 1) = 39LL;
  int v10 = 0;
  sub_10006BC50(v11, &v9);
  sub_100004E4C(&v12, (uint64_t)"Looking for existing bands", 26LL);
  std::ostream::~ostream(&v12, off_100173368);
  sub_100071540((uint64_t)v11);
  std::ios::~ios(v13);
  unint64_t v18 = 0LL;
  int v5 = operator new(0x20uLL);
  void *v5 = &off_1001736D8;
  v5[1] = &v16;
  __int128 v5[2] = &v15;
  double v5[3] = &v14;
  unint64_t v18 = v5;
  sub_10006B890(a1, (uint64_t)v17);
  uint64_t v6 = v18;
  if (v18 == v17)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v17;
    goto LABEL_5;
  }

  if (v18)
  {
    uint64_t v7 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  *(void *)&__int128 v9 = "SparseBundleBackend::get_existing_bands() const";
  *((void *)&v9 + 1) = 39LL;
  int v10 = 0;
  sub_10006BD38(v11, &v9);
  sub_100004E4C(&v12, (uint64_t)"Found ", 6LL);
  std::ostream::operator<<(&v12, v14);
  sub_100004E4C(&v12, (uint64_t)" existing bands", 15LL);
  std::ostream::~ostream(&v12, off_100173588);
  sub_100071AEC((uint64_t)v11);
  uint64_t result = std::ios::~ios(v13);
  *a2 = v15;
  return result;
}

void sub_10006BBC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(void *)(v12 - 104);
  *(void *)(v12 - 104) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10006BC50(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000728E8((uint64_t)a1, a2);
  *a1 = off_1001732A0;
  a1[45] = &off_1001733A0;
  a1[46] = &off_1001733C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001732A0;
  a1[45] = off_100173328;
  a1[46] = off_100173350;
  return a1;
}

void sub_10006BCD4(_Unwind_Exception *a1)
{
}

uint64_t sub_10006BCF8(uint64_t a1)
{
  return a1;
}

void *sub_10006BD38(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100072BCC((uint64_t)a1, a2);
  *a1 = off_1001734C0;
  a1[45] = &off_1001735C0;
  a1[46] = &off_1001735E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001734C0;
  a1[45] = off_100173548;
  a1[46] = off_100173570;
  return a1;
}

void sub_10006BDBC(_Unwind_Exception *a1)
{
}

uint64_t sub_10006BDE0(uint64_t a1)
{
  return a1;
}

void *sub_10006BE20(void *a1)
{
  *a1 = off_100171390;
  a1[3] = off_100171468;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[9] = off_100171490;
  uint64_t v3 = a1[14];
  a1[14] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1000114F0((uint64_t)(a1 + 12));
  sub_1000114F0((uint64_t)(a1 + 10));
  sub_1000FAB04(v2);
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_10006BE9C(void *a1)
{
  *a1 = off_100171390;
  a1[3] = off_100171468;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[9] = off_100171490;
  uint64_t v3 = a1[14];
  a1[14] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1000114F0((uint64_t)(a1 + 12));
  sub_1000114F0((uint64_t)(a1 + 10));
  sub_1000FAB04(v2);
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

uint64_t sub_10006BF18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16LL))(*(void *)(a1 + 112));
}

uint64_t sub_10006BF28(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_10006BF30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

void *sub_10006BF38(uint64_t a1, void *a2)
{
  return sub_100004E4C(a2, (uint64_t)"sparsebundle", 12LL);
}

uint64_t sub_10006BF4C()
{
  return 4294967251LL;
}

uint64_t sub_10006BF54()
{
  return 4294967251LL;
}

uint64_t sub_10006BF5C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void sub_10006BF68(void *a1)
{
  *(a1 - 3) = off_100171390;
  *a1 = off_100171468;
  a1[6] = off_100171490;
  uint64_t v2 = a1[11];
  a1[11] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_1000114F0((uint64_t)(a1 + 9));
  sub_1000114F0((uint64_t)(a1 + 7));
  sub_1000FAB04((uint64_t)a1);
  uint64_t v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10006BFDC(void *a1)
{
  *(a1 - 3) = off_100171390;
  uint64_t v2 = a1 - 3;
  *a1 = off_100171468;
  a1[6] = off_100171490;
  uint64_t v3 = a1[11];
  a1[11] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1000114F0((uint64_t)(a1 + 9));
  sub_1000114F0((uint64_t)(a1 + 7));
  sub_1000FAB04((uint64_t)a1);
  int v4 = (std::__shared_weak_count *)*(a1 - 1);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
}

void sub_10006C058(void *a1)
{
  *(a1 - 9) = off_100171390;
  *(a1 - 6) = off_100171468;
  uint64_t v2 = (uint64_t)(a1 - 6);
  *a1 = off_100171490;
  uint64_t v3 = a1[5];
  a1[5] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1000114F0((uint64_t)(a1 + 3));
  sub_1000114F0((uint64_t)(a1 + 1));
  sub_1000FAB04(v2);
  int v4 = (std::__shared_weak_count *)*(a1 - 7);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_10006C0D0(void *a1)
{
  *(a1 - 9) = off_100171390;
  uint64_t v2 = a1 - 9;
  *(a1 - 6) = off_100171468;
  uint64_t v3 = (uint64_t)(a1 - 6);
  *a1 = off_100171490;
  uint64_t v4 = a1[5];
  a1[5] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1000114F0((uint64_t)(a1 + 3));
  sub_1000114F0((uint64_t)(a1 + 1));
  sub_1000FAB04(v3);
  int v5 = (std::__shared_weak_count *)*(a1 - 7);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
}

uint64_t sub_10006C158(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001716F0);
  sub_10006C31C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006C190(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001716F0);
  sub_10006C31C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006C1D0(char *a1)
{
}

uint64_t sub_10006C214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006C248(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006C294(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001716F0);
  sub_10006C31C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006C2D4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001716F0);
  sub_10006C31C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006C31C(uint64_t a1)
{
  *(void *)a1 = off_1001717C0;
  sub_10006C3B8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006C3B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006C520((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006C4E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006C50C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006C31C(a1);
  operator delete(v1);
}

int *sub_10006C520(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 93LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 93LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006C704(uint64_t a1, uint64_t a2)
{
  if (seteuid(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v8);
    sub_100004E4C(v8, (uint64_t)"failed to set euid to ", 22LL);
    std::ostream::operator<<(v8, a2);
    sub_10001161C((uint64_t)exception, (uint64_t)v8, 1u);
  }

  *(void *)&__int128 v6 = "set_euid_wrapper::set_euid_wrapper(uid_t)";
  *((void *)&v6 + 1) = 34LL;
  int v7 = 0;
  sub_10006C854(v8, &v6);
  sub_100004E4C(&v9, (uint64_t)"uid temporarily set to ", 23LL);
  std::ostream::operator<<(&v9, a2);
  std::ostream::~ostream(&v9, off_100171910);
  sub_10006C9B8((uint64_t)v8);
  std::ios::~ios(&v10);
  return a1;
}

void sub_10006C810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10006C854(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006C93C((uint64_t)a1, a2);
  *a1 = off_100171848;
  a1[45] = &off_100171948;
  a1[46] = &off_100171970;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100171848;
  a1[45] = off_1001718D0;
  a1[46] = off_1001718F8;
  return a1;
}

void sub_10006C8D8(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C8FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006C93C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001719E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10006C9A4(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C9B8(uint64_t a1)
{
  *(void *)a1 = off_1001719E0;
  sub_10006CC30(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10006CA54(char *a1)
{
}

uint64_t sub_10006CA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006CACC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10006CB18(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171910);
  sub_10006C9B8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10006CB50(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171910);
  sub_10006C9B8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10006CB90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171910);
  sub_10006C9B8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006CBD0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171910);
  sub_10006C9B8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10006CC1C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006C9B8(a1);
  operator delete(v1);
}

uint64_t sub_10006CC30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006CD80((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006CD58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006CD80(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 128LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 128LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006CF64(uint64_t a1)
{
  uint64_t v2 = seteuid(0);
  *(void *)&__int128 v4 = "set_euid_wrapper::~set_euid_wrapper()";
  *((void *)&v4 + 1) = 35LL;
  int v5 = 0;
  sub_100012A6C(v6, &v4);
  sub_100004E4C(&v7, (uint64_t)"uid restored to 0 (res=", 23LL);
  std::ostream::operator<<(&v7, v2);
  sub_100004E4C(&v7, (uint64_t)")", 1LL);
  std::ostream::~ostream(&v7, off_100166790);
  sub_1000167D8((uint64_t)v6);
  std::ios::~ios(&v8);
  return a1;
}

uint64_t sub_10006D024(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171B30);
  sub_10006D1E8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006D05C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171B30);
  sub_10006D1E8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006D09C(char *a1)
{
}

uint64_t sub_10006D0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006D114(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006D160(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171B30);
  sub_10006D1E8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006D1A0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171B30);
  sub_10006D1E8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006D1E8(uint64_t a1)
{
  *(void *)a1 = off_100171C00;
  sub_10006D284(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006D284(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006D3EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006D3AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006D3D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006D1E8(a1);
  operator delete(v1);
}

int *sub_10006D3EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 161LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 161LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006D5D0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171D50);
  sub_10006D794(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006D608(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171D50);
  sub_10006D794(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006D648(char *a1)
{
}

uint64_t sub_10006D68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006D6C0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006D70C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171D50);
  sub_10006D794((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006D74C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171D50);
  sub_10006D794((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006D794(uint64_t a1)
{
  *(void *)a1 = off_100171E20;
  sub_10006D830(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006D830(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006D998((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006D958( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006D984(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006D794(a1);
  operator delete(v1);
}

int *sub_10006D998(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 207LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 207LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10006DB7C(void *a1, size_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10005692C(a1, a2);
    int v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }

  return a1;
}

void sub_10006DBD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10006DBEC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171F70);
  sub_10006DDB0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006DC24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171F70);
  sub_10006DDB0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006DC64(char *a1)
{
}

uint64_t sub_10006DCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006DCDC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006DD28(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171F70);
  sub_10006DDB0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006DD68(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171F70);
  sub_10006DDB0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006DDB0(uint64_t a1)
{
  *(void *)a1 = off_100172040;
  sub_10006DE4C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006DE4C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006DFB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006DF74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006DFA0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006DDB0(a1);
  operator delete(v1);
}

int *sub_10006DFB4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 263LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 263LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006E198(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172190);
  sub_10006E35C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006E1D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172190);
  sub_10006E35C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006E210(char *a1)
{
}

uint64_t sub_10006E254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006E288(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006E2D4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172190);
  sub_10006E35C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006E314(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172190);
  sub_10006E35C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006E35C(uint64_t a1)
{
  *(void *)a1 = off_100172260;
  sub_10006E3F8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006E3F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006E560((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006E520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006E54C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006E35C(a1);
  operator delete(v1);
}

int *sub_10006E560(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 270LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 270LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

_BYTE *sub_10006E744(uint64_t a1, _BYTE *a2)
{
  for (unint64_t i = 0LL; i != 16; ++i)
  {
    uint64_t v3 = a2;
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1LL << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      void v3[2] = 45;
    }
  }

  return a2;
}

uint64_t sub_10006E7BC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001723B0);
  sub_10006E980(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006E7F4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001723B0);
  sub_10006E980(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006E834(char *a1)
{
}

uint64_t sub_10006E878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006E8AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006E8F8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001723B0);
  sub_10006E980((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006E938(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001723B0);
  sub_10006E980((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006E980(uint64_t a1)
{
  *(void *)a1 = off_100172480;
  sub_10006EA1C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006EA1C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006EB84((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006EB44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006EB70(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006E980(a1);
  operator delete(v1);
}

int *sub_10006EB84(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 304LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 304LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006ED68(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001725D0);
  sub_10006EF2C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006EDA0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001725D0);
  sub_10006EF2C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006EDE0(char *a1)
{
}

uint64_t sub_10006EE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006EE58(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006EEA4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001725D0);
  sub_10006EF2C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006EEE4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001725D0);
  sub_10006EF2C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006EF2C(uint64_t a1)
{
  *(void *)a1 = off_1001726A0;
  sub_10006EFC8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006EFC8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006F130((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006F0F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F11C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006EF2C(a1);
  operator delete(v1);
}

int *sub_10006F130(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 322LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 322LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006F314(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001727F0);
  sub_10006F4D8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006F34C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001727F0);
  sub_10006F4D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006F38C(char *a1)
{
}

uint64_t sub_10006F3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006F404(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006F450(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001727F0);
  sub_10006F4D8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006F490(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001727F0);
  sub_10006F4D8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006F4D8(uint64_t a1)
{
  *(void *)a1 = off_1001728C0;
  sub_10006F574(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006F574(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006F6DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006F69C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F6C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006F4D8(a1);
  operator delete(v1);
}

int *sub_10006F6DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 340LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 340LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006F8C0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172A10);
  sub_10006FA84(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006F8F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172A10);
  sub_10006FA84(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006F938(char *a1)
{
}

uint64_t sub_10006F97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006F9B0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006F9FC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172A10);
  sub_10006FA84((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006FA3C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172A10);
  sub_10006FA84((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006FA84(uint64_t a1)
{
  *(void *)a1 = off_100172AE0;
  sub_10006FB20(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006FB20(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10006FC88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006FC48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006FC74(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006FA84(a1);
  operator delete(v1);
}

int *sub_10006FC88(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 361LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 361LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006FE6C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172C30);
  sub_100070030(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006FEA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172C30);
  sub_100070030(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006FEE4(char *a1)
{
}

uint64_t sub_10006FF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006FF5C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006FFA8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172C30);
  sub_100070030((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006FFE8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172C30);
  sub_100070030((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100070030(uint64_t a1)
{
  *(void *)a1 = off_100172D00;
  sub_1000700CC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000700CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100070234((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000701F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100070220(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100070030(a1);
  operator delete(v1);
}

int *sub_100070234(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 367LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 367LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100070418(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172E50);
  sub_1000705DC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100070450(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172E50);
  sub_1000705DC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100070490(char *a1)
{
}

uint64_t sub_1000704D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100070508(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100070554(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172E50);
  sub_1000705DC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100070594(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172E50);
  sub_1000705DC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000705DC(uint64_t a1)
{
  *(void *)a1 = off_100172F20;
  sub_100070678(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100070678(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000707E0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000707A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000707CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000705DC(a1);
  operator delete(v1);
}

int *sub_1000707E0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 370LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 370LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000709C4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173070);
  sub_100070B88(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000709FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173070);
  sub_100070B88(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100070A3C(char *a1)
{
}

uint64_t sub_100070A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100070AB4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100070B00(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173070);
  sub_100070B88((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100070B40(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173070);
  sub_100070B88((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100070B88(uint64_t a1)
{
  *(void *)a1 = off_100173140;
  sub_100070C24(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100070C24(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100070D8C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100070D4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100070D78(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100070B88(a1);
  operator delete(v1);
}

int *sub_100070D8C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 379LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 379LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

DIR **sub_100070F70(DIR **a1, int a2)
{
  uint64_t v3 = fdopendir(a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    char v6 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Failed opening folder for entries reading", 0x13u);
  }

  return a1;
}

void *sub_100070FCC(void *a1, uint64_t a2, char a3)
{
  a1[2] = a2;
  *a1 = off_1001731C0;
  unint64_t v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  sub_10007109C(a1 + 3, v5);
  char v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5) {
    bzero(v6, 8 * v5);
  }
  a1[1] = v6;
  return a1;
}

void *sub_10007103C(void *a1)
{
  *a1 = off_1001731C0;
  sub_100071324(a1 + 3);
  return a1;
}

void sub_10007106C(uint64_t *a1)
{
  *a1 = (uint64_t)off_1001731C0;
  sub_100071324(a1 + 3);
  operator delete(a1);
}

uint64_t *sub_10007109C(uint64_t *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[4] = 0LL;
  uint64_t v3 = valloc(8 * a2);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v8 = std::bad_alloc::bad_alloc(exception);
  }

  v9[0] = &off_100173208;
  uint64_t v10 = v9;
  uint64_t v11 = v3;
  sub_100071274((uint64_t)&v12, (uint64_t)v9);
  sub_1000711A0(a1, (uint64_t *)&v11);
  sub_100071324((uint64_t *)&v11);
  int v4 = v10;
  if (v10 == v9)
  {
    uint64_t v5 = 4LL;
    int v4 = v9;
    goto LABEL_6;
  }

  if (v10)
  {
    uint64_t v5 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_10007118C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000711A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  sub_1000712D8(a1, v4);
  sub_100017334(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *sub_1000711E8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_100173208;
  return result;
}

void sub_10007120C(uint64_t a1, void *a2)
{
  *a2 = &off_100173208;
}

void sub_100071224(uint64_t a1, void **a2)
{
}

uint64_t sub_10007122C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100071268()
{
}

uint64_t sub_100071274(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

uint64_t *sub_1000712D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      sub_100016D94();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

uint64_t *sub_100071324(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_10007137C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173368);
  sub_100071540(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000713B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173368);
  sub_100071540(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000713F4(char *a1)
{
}

uint64_t sub_100071438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007146C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000714B8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173368);
  sub_100071540((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000714F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173368);
  sub_100071540((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100071540(uint64_t a1)
{
  *(void *)a1 = off_100173438;
  sub_1000715DC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000715DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100071744((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100071704( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071730(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100071540(a1);
  operator delete(v1);
}

int *sub_100071744(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 437LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 437LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100071928(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173588);
  sub_100071AEC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100071960(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173588);
  sub_100071AEC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000719A0(char *a1)
{
}

uint64_t sub_1000719E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100071A18(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100071A64(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173588);
  sub_100071AEC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100071AA4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173588);
  sub_100071AEC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100071AEC(uint64_t a1)
{
  *(void *)a1 = off_100173658;
  sub_100071B88(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100071B88(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100071CF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100071CB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071CDC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100071AEC(a1);
  operator delete(v1);
}

int *sub_100071CF0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 446LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 446LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100071ED4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001717C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100071F3C(_Unwind_Exception *a1)
{
}

uint64_t sub_100071F50(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171C00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100071FB8(_Unwind_Exception *a1)
{
}

uint64_t sub_100071FCC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171E20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072034(_Unwind_Exception *a1)
{
}

const void **sub_100072048(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100072078(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  __int128 v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    __int128 v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }

  else
  {
    signed __int8 v7 = *a2;
  }

  uint64_t v8 = 0LL;
  int v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }

        int v9 = 0;
      }

      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          goto LABEL_22;
        }
      }

void sub_100072214()
{
}

void sub_100072264( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_100072278(uint64_t a1, int a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_100198620);
  p_info = &OBJC_METACLASS___DIClient2IODaemonXPCHandler.info;
  if ((v2 & 1) == 0)
  {
    int v10 = a2;
    int v9 = __cxa_guard_acquire(&qword_100198620);
    p_info = &OBJC_METACLASS___DIClient2IODaemonXPCHandler.info;
    a2 = v10;
    if (v9)
    {
      qword_100198618 = (uint64_t)&a0123456789abcd[(void)off_100198610];
      __cxa_guard_release(&qword_100198620);
      p_info = (__objc2_class_ro **)(&OBJC_METACLASS___DIClient2IODaemonXPCHandler + 32);
      a2 = v10;
    }
  }

  char v4 = p_info[195];
  __int128 v5 = (__objc2_class_ro *)memchr("0123456789abcdefABCDEF", a2, (char *)v4 - "0123456789abcdefABCDEF");
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = v4;
  }
  unint64_t v7 = (char *)v6 - "0123456789abcdefABCDEF";
  return byte_10013AE17[v7];
}

void sub_100072340(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = std::runtime_error::runtime_error(exception, a1);
}

uint64_t sub_100072374(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172040;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000723DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000723F0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172260;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072458(_Unwind_Exception *a1)
{
}

const void **sub_10007246C(const void **a1)
{
  unsigned __int8 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10007249C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172480;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072504(_Unwind_Exception *a1)
{
}

uint64_t sub_100072518(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001726A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072580(_Unwind_Exception *a1)
{
}

uint64_t sub_100072594(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001728C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000725FC(_Unwind_Exception *a1)
{
}

void sub_100072610(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_100072688(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_100018774((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100072674(_Unwind_Exception *a1)
{
}

void *sub_100072688(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016D710;
  int v5 = *a4;
  uint64_t v6 = sub_1000FA77C(*a2, a3, *a4);
  sub_100045554((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_1000726E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000726F8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172AE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072760(_Unwind_Exception *a1)
{
}

uint64_t sub_100072774(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172D00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000727DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000727F0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172F20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072858(_Unwind_Exception *a1)
{
}

uint64_t sub_10007286C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173140;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000728D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000728E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173438;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072950(_Unwind_Exception *a1)
{
}

__n128 sub_10007296C(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned __int8 v2 = &off_1001736D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000729AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1001736D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = result;
  return result;
}

BOOL sub_1000729D4(void **a1, uint64_t a2, unint64_t *a3)
{
  if (*a1[1] <= *a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v10);
    sub_100004E4C(v10, (uint64_t)"Bands folder contains an out of range band (", 44LL);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_100004E4C(v10, v8, v9);
    sub_100004E4C(v10, (uint64_t)")", 1LL);
    sub_10001161C((uint64_t)exception, (uint64_t)v10, 0x16u);
  }

  BOOL result = sub_10008FBAC(*a1[2], *a3, 1);
  ++*a1[3];
  return result;
}

void sub_100072AC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_10011BB28((uint64_t)&a11, (uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100072B84(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100072BC0()
{
}

uint64_t sub_100072BCC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173658;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100072C34(_Unwind_Exception *a1)
{
}

uint64_t sub_100072C48(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_100072C74@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result[3];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v3 > (v4 & 1) + v5 - 1
    || ((uint64_t v6 = result[2], v7 = v6 + v3, v8 = *(void *)a2, (v4 & 2) != 0) ? (v9 = *(void *)a2) : (v9 = v8 + 1),
        v7 <= v9))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }

  unint64_t v10 = v9 - v3;
  if (v9 >= v3)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      if (v4 == 3)
      {
        if (v5 < v8) {
          goto LABEL_31;
        }
      }

      else if (v8 >= v5)
      {
LABEL_31:
        unint64_t v18 = qword_1001985E0;
        goto LABEL_32;
      }
    }

    else if (v8 >= v5 || v8 + 1 >= v5)
    {
      goto LABEL_31;
    }

    unint64_t v18 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_32:
    if (v6 - v10 < v18) {
      unint64_t v18 = v6 - v10;
    }
    uint64_t v19 = result[4];
    uint64_t v20 = result[1];
    *(void *)a3 = *result + v10;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v20;
    if (v20)
    {
      __int16 v21 = (unint64_t *)(v20 + 8);
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }

    *(void *)(a3 + 16) = v18;
    *(void *)(a3 + 24) = v9;
    *(void *)(a3 + 32) = v19 - v10;
    goto LABEL_38;
  }

  if (*(_BYTE *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (v5 < v8) {
        goto LABEL_20;
      }
    }

    else if (v8 >= v5)
    {
LABEL_20:
      uint64_t v11 = qword_1001985E0;
      goto LABEL_21;
    }
  }

  else if (v8 >= v5 || v8 + 1 >= v5)
  {
    goto LABEL_20;
  }

  uint64_t v11 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_21:
  unint64_t v12 = v11 + v9;
  if (v12 >= v7) {
    unint64_t v12 = v6 + v3;
  }
  unint64_t v13 = v12 - v3;
  uint64_t v14 = result[4];
  uint64_t v15 = result[1];
  *(void *)a3 = *result;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v15;
  if (v15)
  {
    unint64_t v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = v14;
LABEL_38:
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_100072DF8(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)a1 = off_100173758;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 96) = 850045863LL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + sub_1000114F0(v1 + 152) = 0LL;
  uint64_t v8 = a4[4];
  *(void *)(a1 + 160) = a4[3];
  *(void *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  uint64_t v11 = a4[40];
  if (v11) {
    sub_10008FBAC(v11, a3, 1);
  }
  return a1;
}

void sub_100072EC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100072EDC(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1000B866C())
  {
    *(void *)&__int128 v19 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((void *)&v19 + 1) = 38LL;
    LODWORD(v20) = 2;
    sub_1000731E4(v24, &v19);
    sub_100004E4C(&v25, (uint64_t)"Reading ", 8LL);
    sub_100116CB8(&v25, a3);
    sub_100004E4C(&v25, (uint64_t)" to ", 4LL);
    sub_100074930(&v25, a1);
    std::ostream::~ostream(&v25, off_100173950);
    sub_1000760E0((uint64_t)v24);
    std::ios::~ios(v26);
  }

  unint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40LL))(*(void *)(a2 + 16));
  unint64_t v7 = a3[3];
  if (v6 >= a3[2] + v7)
  {
    int v12 = (*(uint64_t (**)(void, void *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), a3);
  }

  else if (v6 <= v7)
  {
    if (sub_1000B866C())
    {
      *(void *)&__int128 v19 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v19 + 1) = 38LL;
      LODWORD(v20) = 2;
      sub_1000733B4(v24, &v19);
      sub_100004E4C(&v25, (uint64_t)"Band data doesn't exist, zeroing", 32LL);
      std::ostream::~ostream(&v25, off_100173D90);
      sub_100076C38((uint64_t)v24);
      std::ios::~ios(v26);
    }

    bzero((void *)*a3, a3[2]);
    int v12 = *((_DWORD *)a3 + 4);
  }

  else
  {
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[1];
    *(void *)&__int128 v19 = *a3;
    *((void *)&v19 + 1) = v9;
    if (v9)
    {
      unint64_t v10 = (unint64_t *)(v9 + 8);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    uint64_t v20 = v6 - v7;
    unint64_t v21 = v7;
    uint64_t v22 = v8;
    char v23 = 0;
    if (sub_1000B866C())
    {
      *(void *)&__int128 v17 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v17 + 1) = 38LL;
      int v18 = 2;
      sub_1000732CC(v24, &v17);
      sub_100004E4C(&v25, (uint64_t)"Band data is partial, reading ", 30LL);
      sub_100116CB8(&v25, &v19);
      std::ostream::~ostream(&v25, off_100173B70);
      sub_10007668C((uint64_t)v24);
      std::ios::~ios(v26);
    }

    int v12 = (*(uint64_t (**)(void, __int128 *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v19);
    bzero((void *)(*a3 + v20), a3[2] - v20);
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    if (v20 == v12) {
      int v12 = *((_DWORD *)a3 + 4);
    }
    if (*((void *)&v19 + 1))
    {
      uint64_t v14 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  if (v12 >= 0) {
    return a3[2];
  }
  else {
    return v12;
  }
}

void sub_10007319C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void *sub_1000731E4(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007C594((uint64_t)a1, a2);
  *a1 = off_100173888;
  a1[45] = &off_100173988;
  a1[46] = &off_1001739B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173888;
  a1[45] = off_100173910;
  a1[46] = off_100173938;
  return a1;
}

void sub_100073268(_Unwind_Exception *a1)
{
}

uint64_t sub_10007328C(uint64_t a1)
{
  return a1;
}

void *sub_1000732CC(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007C610((uint64_t)a1, a2);
  *a1 = off_100173AA8;
  a1[45] = &off_100173BA8;
  a1[46] = &off_100173BD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173AA8;
  a1[45] = off_100173B30;
  a1[46] = off_100173B58;
  return a1;
}

void sub_100073350(_Unwind_Exception *a1)
{
}

uint64_t sub_100073374(uint64_t a1)
{
  return a1;
}

void *sub_1000733B4(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007C68C((uint64_t)a1, a2);
  *a1 = off_100173CC8;
  a1[45] = &off_100173DC8;
  a1[46] = &off_100173DF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173CC8;
  a1[45] = off_100173D50;
  a1[46] = off_100173D78;
  return a1;
}

void sub_100073438(_Unwind_Exception *a1)
{
}

uint64_t sub_10007345C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007349C(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1000B866C())
  {
    *(void *)&__int128 v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((void *)&v8 + 1) = 39LL;
    int v9 = 2;
    sub_1000735C0(v10, &v8);
    sub_100004E4C(&v11, (uint64_t)"Writing ", 8LL);
    sub_100116CB8(&v11, a3);
    sub_100004E4C(&v11, (uint64_t)" to ", 4LL);
    sub_100074930(&v11, a1);
    std::ostream::~ostream(&v11, off_100173FB0);
    sub_1000771E4((uint64_t)v10);
    std::ios::~ios(&v12);
  }

  unint64_t v6 = sub_1000736A8(a1);
  sub_100114940(v6, (uint64_t)a3);
  LODWORD(result) = (*(uint64_t (**)(void, void *))(**(void **)(a2 + 16) + 80LL))( *(void *)(a2 + 16),  a3);
  *(_BYTE *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  else {
    return (int)result;
  }
}

void sub_1000735AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000735C0(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007C708((uint64_t)a1, a2);
  *a1 = off_100173EE8;
  a1[45] = &off_100173FE8;
  a1[46] = &off_100174010;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173EE8;
  a1[45] = off_100173F70;
  a1[46] = off_100173F98;
  return a1;
}

void sub_100073644(_Unwind_Exception *a1)
{
}

uint64_t sub_100073668(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000736A8(uint64_t a1)
{
  unint64_t result = atomic_load((unint64_t *)(a1 + 48));
  if (!result)
  {
    uint64_t v6 = a1;
    unint64_t v3 = atomic_load((unint64_t *)(a1 + 56));
    if (v3 != -1LL)
    {
      v5[0] = &v6;
      unint64_t v7 = v5;
      std::__call_once((unint64_t *)(a1 + 56), &v7, (void (__cdecl *)(void *))sub_10007CE10);
    }

    unint64_t result = atomic_load((unint64_t *)(a1 + 48));
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100004D60((uint64_t)v5);
      sub_100004E4C(v5, (uint64_t)"Failed opening mapped blocks file for ", 38LL);
      sub_100074930(v5, a1);
      sub_10001161C((uint64_t)exception, (uint64_t)v5, *(_DWORD *)(a1 + 64));
    }
  }

  return result;
}

void sub_100073780(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000737B4(uint64_t a1, void *a2)
{
  unint64_t v3 = sub_1000736A8(a1);
  uint64_t v6 = (void *)*a2;
  unsigned int v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0) {
        unint64_t v7 = v5[4];
      }
      else {
        unint64_t v7 = v5[4] + 1LL;
      }
      sub_100114DAC(v3, v7, (v5[6] & 1) + v5[5] - 1LL);
      __int128 v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          __int128 v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }

        while (!v10);
      }

      uint64_t v5 = v9;
    }

    while (v9 != v4);
  }

  return sub_10008F97C(*(void *)(v3 + 8));
}

void *sub_10007384C(unint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v28 = a3;
  __int128 v27 = 0uLL;
  int v24 = (***(uint64_t (****)(void))(a2 + 8))(*(void *)(a2 + 8));
  sub_10003DFE8(a1, __p);
  sub_10007C784(&v24, (uint64_t)__p, &v28, &v25);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (*a4)
  {
    int v24 = 3;
    sub_10007C86C(&v25, (uint64_t)a4, &v24, __p);
    __int128 v7 = *(_OWORD *)__p;
    __p[0] = 0LL;
    __p[1] = 0LL;
    __int128 v8 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    __int128 v27 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    uint64_t v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      uint64_t v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  else
  {
    sub_100026A1C(&v27, &v25);
  }

  uint64_t v14 = operator new(0xB0uLL);
  sub_100072DF8((uint64_t)v14, &v27, a1, (void *)a2);
  unint64_t v15 = v26;
  if (v26)
  {
    unint64_t v16 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  int v18 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    __int128 v19 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return v14;
}

void sub_100073A14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
}

void sub_100073A68(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(*(void *)a1 + 8LL) & 1) != 0)
  {
    *(void *)&__int128 __p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&__p + 1) = 32LL;
    int v14 = 0;
    sub_100073F2C(v16, &__p);
    sub_100004E4C(&v17, (uint64_t)"Skipping erase of band ", 23LL);
    std::ostream::operator<<(&v17, a2);
    sub_100004E4C(&v17, (uint64_t)", disk image is terminated", 26LL);
    std::ostream::~ostream(&v17, off_1001741D0);
    sub_100077790((uint64_t)v16);
    std::ios::~ios(v18);
    return;
  }

  sub_10003DFE8(a2, &__p);
  int v4 = (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  uint64_t v5 = sub_1000FB4E8(v4, (uint64_t *)&__p);
  uint64_t v6 = v5;
  if ((_DWORD)v5)
  {
    else {
      int v7 = -(int)v5;
    }
    if (v7 != 2)
    {
      *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v11 + 1) = 32LL;
      int v12 = 16;
      sub_100074014(v16, &v11);
      sub_100004E4C(&v17, (uint64_t)"Failed to erase mapped file of band ", 36LL);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v17, a2);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
      sub_100004E4C(&v17, (uint64_t)", error ", 8LL);
      std::ostream::operator<<(&v17, v6);
      std::ostream::~ostream(&v17, off_1001743F0);
      sub_100077D3C((uint64_t)v16);
      goto LABEL_11;
    }

    if (sub_1000B866C())
    {
      *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v11 + 1) = 32LL;
      int v12 = 2;
      sub_10003B8F8(v16, &v11);
      sub_100004E4C(&v17, (uint64_t)"No mapped file for band ", 24LL);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v17, a2);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
      std::ostream::~ostream(&v17, off_10016B468);
      sub_10003BA5C((uint64_t)v16);
LABEL_11:
      std::ios::~ios(v18);
    }
  }

  int v8 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v9 = sub_1000FB4E8(v8, (uint64_t *)&__p);
  if ((_DWORD)v9)
  {
    *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v11 + 1) = 32LL;
    int v12 = 16;
    sub_1000740FC(v16, &v11);
    sub_100004E4C(&v17, (uint64_t)"Failed to erase band ", 21LL);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v17, a2);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
    sub_100004E4C(&v17, (uint64_t)", error ", 8LL);
    std::ostream::operator<<(&v17, v9);
    std::ostream::~ostream(&v17, off_100174610);
    sub_1000782E8((uint64_t)v16);
    std::ios::~ios(v18);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 320);
    if (v10) {
      sub_10008FBAC(v10, a2, 0);
    }
  }

  if (sub_1000B866C())
  {
    *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v11 + 1) = 32LL;
    int v12 = 2;
    sub_1000741E4(v16, &v11);
    sub_100004E4C(&v17, (uint64_t)"Completed erase of band ", 24LL);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v17, a2);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v17, off_100174830);
    sub_100078894((uint64_t)v16);
    std::ios::~ios(v18);
  }

  if (v15 < 0) {
    operator delete((void *)__p);
  }
}

void sub_100073EB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100073F2C(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CA54((uint64_t)a1, a2);
  *a1 = off_100174108;
  a1[45] = &off_100174208;
  a1[46] = &off_100174230;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174108;
  a1[45] = off_100174190;
  a1[46] = off_1001741B8;
  return a1;
}

void sub_100073FB0(_Unwind_Exception *a1)
{
}

uint64_t sub_100073FD4(uint64_t a1)
{
  return a1;
}

void *sub_100074014(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CAD0((uint64_t)a1, a2);
  *a1 = off_100174328;
  a1[45] = &off_100174428;
  a1[46] = &off_100174450;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174328;
  a1[45] = off_1001743B0;
  a1[46] = off_1001743D8;
  return a1;
}

void sub_100074098(_Unwind_Exception *a1)
{
}

uint64_t sub_1000740BC(uint64_t a1)
{
  return a1;
}

void *sub_1000740FC(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CB4C((uint64_t)a1, a2);
  *a1 = off_100174548;
  a1[45] = &off_100174648;
  a1[46] = &off_100174670;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174548;
  a1[45] = off_1001745D0;
  a1[46] = off_1001745F8;
  return a1;
}

void sub_100074180(_Unwind_Exception *a1)
{
}

uint64_t sub_1000741A4(uint64_t a1)
{
  return a1;
}

void *sub_1000741E4(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CBC8((uint64_t)a1, a2);
  *a1 = off_100174768;
  a1[45] = &off_100174868;
  a1[46] = &off_100174890;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174768;
  a1[45] = off_1001747F0;
  a1[46] = off_100174818;
  return a1;
}

void sub_100074268(_Unwind_Exception *a1)
{
}

uint64_t sub_10007428C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000742CC(uint64_t a1)
{
  *(void *)a1 = off_100173758;
  sub_10003D800(*(void *)(a1 + 40) + 184LL, *(void *)(a1 + 32), 0);
  sub_100075DBC((void *)(a1 + 72));
  uint64_t v2 = (void *)atomic_load((unint64_t *)(a1 + 48));
  if (*(_BYTE *)(a1 + 69))
  {
    if (!v2) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }

  if (v2)
  {
    if ((*(_BYTE *)(**(void **)(a1 + 40) + 8LL) & 1) != 0)
    {
      *(void *)&__int128 v6 = "sparse_bundles::Band::~Band()";
      *((void *)&v6 + 1) = 27LL;
      int v7 = 0;
      sub_100060A0C(v8, &v6);
      sub_100004E4C(&v9, (uint64_t)"Disk image is terminated, skipping flush of ", 44LL);
      sub_100074930(&v9, a1);
      sub_100004E4C(&v9, (uint64_t)", dirty=", 8LL);
      std::ostream::operator<<(&v9, *(_BYTE *)(a1 + 68) & 1);
      std::ostream::~ostream(&v9, off_100170598);
      sub_100065718((uint64_t)v8);
      std::ios::~ios(v10);
    }

    else
    {
      if (sub_1000B866C())
      {
        *(void *)&__int128 v6 = "sparse_bundles::Band::~Band()";
        *((void *)&v6 + 1) = 27LL;
        int v7 = 2;
        sub_100074578(v8, &v6);
        sub_100004E4C(&v9, (uint64_t)"flushing and closing ", 21LL);
        sub_100074930(&v9, a1);
        std::ostream::~ostream(&v9, off_100174A50);
        sub_100078E40((uint64_t)v8);
        std::ios::~ios(v10);
      }

      sub_10011494C((uint64_t)v2);
      if ((*(_BYTE *)(a1 + 68) & 1) != 0) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), 1LL);
      }
    }

void *sub_100074578(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CC44((uint64_t)a1, a2);
  *a1 = off_100174988;
  a1[45] = &off_100174A88;
  a1[46] = &off_100174AB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174988;
  a1[45] = off_100174A10;
  a1[46] = off_100174A38;
  return a1;
}

void sub_1000745FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100074620(uint64_t a1)
{
  return a1;
}

void sub_100074664(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000742CC(a1);
  operator delete(v1);
}

void sub_100074678(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v3 = a1 + 72;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  sub_10007CCC0(a2, v4);
  sub_1000746D0(v3, a2);
}

void sub_1000746BC(_Unwind_Exception *a1)
{
}

void sub_1000746D0(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_100068854((char **)a1, a2);
  std::mutex::unlock(v4);
}

void sub_100074714(_Unwind_Exception *a1)
{
}

uint64_t sub_100074728(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 68) & 1) == 0) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  uint64_t v3 = atomic_load((unint64_t *)(a1 + 48));
  uint64_t v1 = sub_10011494C(v3);
  if ((_DWORD)v1
    || (uint64_t v1 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), 1LL),
        (_DWORD)v1))
  {
    *(_BYTE *)(a1 + 6std::iostream::~basic_iostream(v2, v3 + 8) = 1;
    *(void *)&__int128 v5 = "sparse_bundles::Band::flush()";
    *((void *)&v5 + 1) = 27LL;
    int v6 = 16;
    sub_100074848(v7, &v5);
    sub_100074930(&v8, a1);
    sub_100004E4C(&v8, (uint64_t)": flush failed (", 16LL);
    std::ostream::operator<<(&v8, v1);
    sub_100004E4C(&v8, (uint64_t)")", 1LL);
    std::ostream::~ostream(&v8, off_100174C70);
    sub_1000793EC((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  return v1;
}

void sub_100074834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100074848(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CD94((uint64_t)a1, a2);
  *a1 = off_100174BA8;
  a1[45] = &off_100174CA8;
  a1[46] = &off_100174CD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174BA8;
  a1[45] = off_100174C30;
  a1[46] = off_100174C58;
  return a1;
}

void sub_1000748CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000748F0(uint64_t a1)
{
  return a1;
}

void *sub_100074930(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_100004E4C(a1, (uint64_t)"band ", 5LL);
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v3 + *(void *)(*v3 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  unint64_t result = (void *)std::ostream::operator<<(v3, *(void *)(a2 + 32));
  *(_DWORD *)((char *)result + *(void *)(*result - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)result
                                                                            + *(void *)(*result - 24LL)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

void sub_1000749A0(uint64_t a1)
{
  uint64_t v1 = *(unint64_t **)a1;
  if (*(void *)a1)
  {
    do
    {
      unint64_t v3 = __ldaxr(v1);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, v1));
    if (!v4)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
      }
      if (*(void *)a1) {
        operator delete(*(void **)a1);
      }
    }
  }

uint64_t sub_100074A00(uint64_t a1)
{
  return a1;
}

void *sub_100074A24(void *a1, uint64_t a2)
{
  unint64_t v3 = *(unint64_t **)a2;
  *a1 = *(void *)a2;
  unint64_t v4 = atomic_load(v3);
  if (!v4)
  {
LABEL_7:
    int v6 = operator new(0x28uLL);
    uint64_t v7 = *(void *)(*a1 + 8LL);
    void *v6 = 1LL;
    v6[1] = v7;
    void v6[3] = 0LL;
    v6[4] = 0LL;
    v6[2] = 0LL;
    *a1 = v6;
    a1[1] = 0LL;
    uint64_t v8 = -1LL;
    goto LABEL_8;
  }

  while (1)
  {
    unint64_t v5 = __ldaxr((unint64_t *)*a1);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }

LABEL_6:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_7;
    }
  }

  uint64_t v8 = *(void *)(a2 + 16);
  a1[1] = *(void *)(a2 + 8);
LABEL_8:
  a1[2] = v8;
  return a1;
}

  if ((_DWORD)v4)
  {
    *(void *)&uint64_t v17 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v17 + 1) = 20LL;
    int v18 = 16;
    sub_1000FC3E0(v19, &v17);
    sub_100116C34(&v20, a2);
    sub_100004E4C(&v20, (uint64_t)" failed wih error ", 18LL);
    std::ostream::operator<<(&v20, v4);
    std::ostream::~ostream(&v20, off_100186518);
    sub_1001019AC((uint64_t)v19);
    std::ios::~ios(v21);
  }

  return v4;
}

uint64_t sub_100074ACC(uint64_t result, uint64_t a2)
{
  *(_OWORD *)unint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (result != a2) {
    *(void *)a2 = 0LL;
  }
  return result;
}

uint64_t sub_100074AEC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000749A0(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
  }

  return a1;
}

void *sub_100074B34@<X0>( std::chrono::steady_clock::time_point **a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = atomic_load((unint64_t *)*a1);
  sub_10003D270((unint64_t *)((*a1)[1].__d_.__rep_ + 56));
  if (v6 == 1)
  {
    do
    {
      unint64_t v7 = __ldaxr((unint64_t *)*a1);
      if (v7 == 1)
      {
        if (!__stlxr(0LL, (unint64_t *)*a1))
        {
          uint64_t v10 = a1[1];
          if (v10)
          {
            sub_100075DBC(&v10[9].__d_.__rep_);
            __int128 v11 = a1[1];
            int v12 = (dispatch_group_t *)((*a1)[1].__d_.__rep_ + 392);
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 0x40000000LL;
            stat v17[2] = sub_100074EB4;
            unint64_t v17[3] = &unk_100173818;
            v17[4] = a1;
            v17[5] = v11;
            sub_100040120(v12, v17);
          }

          else
          {
            sub_10003D284((*a1)[1].__d_.__rep_ + 56);
            if (sub_1000B866C())
            {
              *(void *)&__int128 v18 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
              *((void *)&v18 + 1) = 46LL;
              int v19 = 2;
              sub_1000750F4(v20, &v18);
              sub_100004E4C(&v21, (uint64_t)"Replaced an empty slot", 22LL);
              std::ostream::~ostream(&v21, off_1001752D0);
              sub_10007A4F0((uint64_t)v20);
              std::ios::~ios(v22);
            }
          }

          a1[1] = a2;
          if (a2)
          {
            a1[2] = (std::chrono::steady_clock::time_point *)a2[4].__d_.__rep_;
            atomic_store(2uLL, (unint64_t *)*a1);
            (*a1)[2].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            unint64_t result = sub_100074A24(a3, (uint64_t)a1);
            unint64_t v13 = (unint64_t *)*a1;
            do
              unint64_t v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
          }

          else
          {
            a1[2] = (std::chrono::steady_clock::time_point *)-1LL;
            char v15 = (unint64_t *)*a1;
            unint64_t v16 = v15[1];
            unint64_t result = operator new(0x28uLL);
            *unint64_t result = 1LL;
            result[1] = v16;
            result[3] = 0LL;
            result[4] = 0LL;
            result[2] = 0LL;
            *a3 = result;
            a3[1] = 0LL;
            a3[2] = -1LL;
            atomic_store(1uLL, v15);
          }

          return result;
        }
      }

      else
      {
        __clrex();
      }
    }

    while (v7 == 1);
  }

  sub_10003D284((*a1)[1].__d_.__rep_ + 56);
  if (sub_1000B866C())
  {
    *(void *)&__int128 v18 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
    *((void *)&v18 + 1) = 46LL;
    int v19 = 2;
    sub_100074DCC(v20, &v18);
    sub_100004E4C(&v21, (uint64_t)"Missed an evictable slot", 24LL);
    std::ostream::~ostream(&v21, off_100174E90);
    sub_100079998((uint64_t)v20);
    std::ios::~ios(v22);
  }

  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (*a1)[1].__d_.__rep_;
  unint64_t result = operator new(0x28uLL);
  *unint64_t result = 1LL;
  result[1] = rep;
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = 0LL;
  *a3 = result;
  a3[1] = 0LL;
  a3[2] = -1LL;
  return result;
}

void *sub_100074DCC(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007DEE8((uint64_t)a1, a2);
  *a1 = off_100174DC8;
  a1[45] = &off_100174EC8;
  a1[46] = &off_100174EF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174DC8;
  a1[45] = off_100174E50;
  a1[46] = off_100174E78;
  return a1;
}

void sub_100074E50(_Unwind_Exception *a1)
{
}

uint64_t sub_100074E74(uint64_t a1)
{
  return a1;
}

uint64_t sub_100074EB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_1000B866C())
  {
    *(void *)&__int128 v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46LL;
    int v6 = 2;
    sub_10006AE44(v7, &v5);
    sub_100004E4C(&v8, (uint64_t)"Background close of ", 20LL);
    sub_100074930(&v8, *(void *)(a1 + 40));
    std::ostream::~ostream(&v8, off_1001727F0);
    sub_10006F4D8((uint64_t)v7);
    std::ios::~ios(v9);
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  sub_10003D284(*(void *)(*(void *)v2 + 8LL) + 56LL);
  uint64_t result = sub_1000B866C();
  if ((_DWORD)result)
  {
    *(void *)&__int128 v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46LL;
    int v6 = 2;
    sub_10007500C(v7, &v5);
    sub_100004E4C(&v8, (uint64_t)"Close completed", 15LL);
    std::ostream::~ostream(&v8, off_1001750B0);
    sub_100079F44((uint64_t)v7);
    return std::ios::~ios(v9);
  }

  return result;
}

void sub_100074FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10007500C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007DF64((uint64_t)a1, a2);
  *a1 = off_100174FE8;
  a1[45] = &off_1001750E8;
  a1[46] = &off_100175110;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174FE8;
  a1[45] = off_100175070;
  a1[46] = off_100175098;
  return a1;
}

void sub_100075090(_Unwind_Exception *a1)
{
}

uint64_t sub_1000750B4(uint64_t a1)
{
  return a1;
}

void *sub_1000750F4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007DFE0((uint64_t)a1, a2);
  *a1 = off_100175208;
  a1[45] = &off_100175308;
  a1[46] = &off_100175330;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175208;
  a1[45] = off_100175290;
  a1[46] = off_1001752B8;
  return a1;
}

void sub_100075178(_Unwind_Exception *a1)
{
}

uint64_t sub_10007519C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000751DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load(*(unint64_t **)a1);
  while (v4 == 1)
  {
    unint64_t v4 = __ldaxr(*(unint64_t **)a1);
    if (v4 == 1)
    {
      if (!__stlxr(0LL, *(unint64_t **)a1))
      {
        unint64_t v5 = sub_1000736A8(*(void *)(a1 + 8));
        if (sub_10008F97C(*(void *)(v5 + 8)))
        {
          sub_100075DBC((void *)(*(void *)(a1 + 8) + 72LL));
          uint64_t v6 = *(void *)(a1 + 8);
          unint64_t v7 = (dispatch_group_t *)(*(void *)(*(void *)a1 + 8LL) + 392LL);
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 0x40000000LL;
          void v11[2] = sub_100075888;
          void v11[3] = &unk_100173838;
          v11[4] = v6;
          sub_100040120(v7, v11);
          *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
          *(void *)(a1 + 16) = -1LL;
          uint64_t v8 = *(unint64_t **)a1;
          uint64_t v9 = 1LL;
          atomic_store(1uLL, v8);
        }

        else
        {
          if (sub_1000B866C())
          {
            *(void *)&__int128 v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
            *((void *)&v14 + 1) = 43LL;
            int v15 = 2;
            sub_1000757A0(v16, &v14);
            sub_100004E4C(&v17, (uint64_t)"Skipping erase of ", 18LL);
            sub_100074930(&v17, *(void *)(a1 + 8));
            sub_100004E4C(&v17, (uint64_t)", band was written to", 21LL);
            std::ostream::~ostream(&v17, off_100175B50);
            sub_10007BBA0((uint64_t)v16);
            std::ios::~ios(v18);
          }

          return 1LL;
        }

        return v9;
      }
    }

    else
    {
      __clrex();
    }
  }

  if (v4)
  {
    sub_100074A24(&v14, a1);
    if (*((void *)&v14 + 1) && *(void *)(*((void *)&v14 + 1) + 32LL) == a2)
    {
      if (sub_1000B866C())
      {
        *(void *)&__int128 v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43LL;
        int v13 = 2;
        sub_1000755D0(v16, &v12);
        sub_100004E4C(&v17, (uint64_t)"Skipping band erase (in use)", 28LL);
        std::ostream::~ostream(&v17, off_100175710);
        sub_10007B048((uint64_t)v16);
        std::ios::~ios(v18);
      }

      uint64_t v9 = 1LL;
    }

    else
    {
      if (sub_1000B866C())
      {
        *(void *)&__int128 v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43LL;
        int v13 = 2;
        sub_1000756B8(v16, &v12);
        sub_100004E4C( &v17,  (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process",  79LL);
        std::ostream::~ostream(&v17, off_100175930);
        sub_10007B5F4((uint64_t)v16);
        std::ios::~ios(v18);
      }

      uint64_t v9 = 0LL;
    }

    sub_1000749A0((uint64_t)&v14);
  }

  else
  {
    if (sub_1000B866C())
    {
      *(void *)&__int128 v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((void *)&v14 + 1) = 43LL;
      int v15 = 2;
      sub_1000754E8(v16, &v14);
      sub_100004E4C(&v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55LL);
      std::ostream::~ostream(&v17, off_1001754F0);
      sub_10007AA9C((uint64_t)v16);
      std::ios::~ios(v18);
    }

    return 0LL;
  }

  return v9;
}

void *sub_1000754E8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007E05C((uint64_t)a1, a2);
  *a1 = off_100175428;
  a1[45] = &off_100175528;
  a1[46] = &off_100175550;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175428;
  a1[45] = off_1001754B0;
  a1[46] = off_1001754D8;
  return a1;
}

void sub_10007556C(_Unwind_Exception *a1)
{
}

uint64_t sub_100075590(uint64_t a1)
{
  return a1;
}

void *sub_1000755D0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007E0D8((uint64_t)a1, a2);
  *a1 = off_100175648;
  a1[45] = &off_100175748;
  a1[46] = &off_100175770;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175648;
  a1[45] = off_1001756D0;
  a1[46] = off_1001756F8;
  return a1;
}

void sub_100075654(_Unwind_Exception *a1)
{
}

uint64_t sub_100075678(uint64_t a1)
{
  return a1;
}

void *sub_1000756B8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007E154((uint64_t)a1, a2);
  *a1 = off_100175868;
  a1[45] = &off_100175968;
  a1[46] = &off_100175990;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175868;
  a1[45] = off_1001758F0;
  a1[46] = off_100175918;
  return a1;
}

void sub_10007573C(_Unwind_Exception *a1)
{
}

uint64_t sub_100075760(uint64_t a1)
{
  return a1;
}

void *sub_1000757A0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007E1D0((uint64_t)a1, a2);
  *a1 = off_100175A88;
  a1[45] = &off_100175B88;
  a1[46] = &off_100175BB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175A88;
  a1[45] = off_100175B10;
  a1[46] = off_100175B38;
  return a1;
}

void sub_100075824(_Unwind_Exception *a1)
{
}

uint64_t sub_100075848(uint64_t a1)
{
  return a1;
}

uint64_t sub_100075888(uint64_t a1)
{
  if (sub_1000B866C())
  {
    *(void *)&__int128 v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((void *)&v4 + 1) = 43LL;
    int v5 = 2;
    sub_100075958(v6, &v4);
    sub_100004E4C(&v7, (uint64_t)"Background erase of ", 20LL);
    sub_100074930(&v7, *(void *)(a1 + 32));
    std::ostream::~ostream(&v7, off_100175D70);
    sub_10007C14C((uint64_t)v6);
    std::ios::~ios(&v8);
  }

  uint64_t v2 = *(_BYTE **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(_BYTE *))(*(void *)v2 + 16LL))(v2);
}

void sub_100075944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100075958(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007E24C((uint64_t)a1, a2);
  *a1 = off_100175CA8;
  a1[45] = &off_100175DA8;
  a1[46] = &off_100175DD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175CA8;
  a1[45] = off_100175D30;
  a1[46] = off_100175D58;
  return a1;
}

void sub_1000759DC(_Unwind_Exception *a1)
{
}

uint64_t sub_100075A00(uint64_t a1)
{
  return a1;
}

uint64_t sub_100075A40(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 48LL);
}

uint64_t sub_100075A4C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 40LL) / *(void *)(*(void *)(a1 + 40) + 48LL);
}

uint64_t sub_100075A5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
}

void *sub_100075A6C(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_100175EC0;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_100075AB8(_Unwind_Exception *a1)
{
}

unint64_t sub_100075ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v54 = xmmword_10013AF00;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&__int128 v42 = *(void *)a3;
  *((void *)&v42 + 1) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  v43[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v44 = *(void *)(a3 + 48);
  __int128 v45 = *(_OWORD *)(a3 + 56);
  __int128 v46 = *(_OWORD *)(a3 + 72);
  __int128 v47 = *(_OWORD *)(a3 + 88);
  char v48 = *(_BYTE *)(a3 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v49 = *(void *)(a3 + 112);
  char v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v51 = *(_OWORD *)(a3 + 128);
  uint64_t v52 = *(void *)(a3 + 144);
  char v53 = *(_BYTE *)(a3 + 152);
  uint64_t v10 = *(void *)(a4 + 8);
  *(void *)&__int128 v30 = *(void *)a4;
  *((void *)&v30 + 1) = v10;
  if (v10)
  {
    __int128 v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v31[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v32 = *(void *)(a4 + 48);
  __int128 v33 = *(_OWORD *)(a4 + 56);
  __int128 v34 = *(_OWORD *)(a4 + 72);
  __int128 v35 = *(_OWORD *)(a4 + 88);
  char v36 = *(_BYTE *)(a4 + 104);
  int v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v37 = *(void *)(a4 + 112);
  unint64_t v38 = v13;
  if (v13)
  {
    __int128 v14 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  __int128 v39 = *(_OWORD *)(a4 + 128);
  uint64_t v40 = *(void *)(a4 + 144);
  char v41 = *(_BYTE *)(a4 + 152);
  unint64_t v16 = sub_10003588C((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v17 = v38;
  if (v38)
  {
    __int128 v18 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  char v23 = v50;
  if (v50)
  {
    int v24 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  int64x2_t v26 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    __int128 v27 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v16;
}

void sub_100075D40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100075D70(uint64_t a1)
{
  uint64_t v3 = (void **)a1;
  sub_1000170C0(&v3);
  return a1;
}

void sub_100075DBC(void *a1)
{
  if (sub_1000B866C())
  {
    *(void *)&__int128 v10 = "sparse_bundles::Band::ContextsList::clear()";
    *((void *)&v10 + 1) = 41LL;
    int v11 = 2;
    sub_10005FB7C(v12, &v10);
    sub_100004E4C(&v13, (uint64_t)"Resetting ", 10LL);
    std::ostream::operator<<(&v13, (uint64_t)(a1[1] - *a1) >> 4);
    sub_100004E4C(&v13, (uint64_t)" band contexts", 14LL);
    std::ostream::~ostream(&v13, off_100170158);
    sub_100064BC0((uint64_t)v12);
    std::ios::~ios(&v14);
  }

  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v3)
  {
    uint64_t v4 = a1 + 11;
    do
    {
      uint64_t v5 = *v2;
      unint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        sub_100026A1C((void *)(v5 + 16), v4);
        do
          unint64_t v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      else
      {
        sub_100026A1C((void *)(v5 + 16), v4);
      }

      v2 += 2;
    }

    while (v2 != v3);
  }

void sub_100075F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100075F1C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173950);
  sub_1000760E0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100075F54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173950);
  sub_1000760E0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100075F94(char *a1)
{
}

uint64_t sub_100075FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007600C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100076058(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173950);
  sub_1000760E0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100076098(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173950);
  sub_1000760E0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000760E0(uint64_t a1)
{
  *(void *)a1 = off_100173A20;
  sub_10007617C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007617C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000762E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000762A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000762D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000760E0(a1);
  operator delete(v1);
}

int *sub_1000762E4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 47LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 47LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000764C8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173B70);
  sub_10007668C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100076500(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173B70);
  sub_10007668C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100076540(char *a1)
{
}

uint64_t sub_100076584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000765B8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100076604(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173B70);
  sub_10007668C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100076644(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173B70);
  sub_10007668C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007668C(uint64_t a1)
{
  *(void *)a1 = off_100173C40;
  sub_100076728(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100076728(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100076890((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100076850( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007687C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007668C(a1);
  operator delete(v1);
}

int *sub_100076890(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 56LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 56LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100076A74(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173D90);
  sub_100076C38(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100076AAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173D90);
  sub_100076C38(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100076AEC(char *a1)
{
}

uint64_t sub_100076B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100076B64(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100076BB0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173D90);
  sub_100076C38((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100076BF0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173D90);
  sub_100076C38((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100076C38(uint64_t a1)
{
  *(void *)a1 = off_100173E60;
  sub_100076CD4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100076CD4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100076E3C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100076DFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100076E28(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100076C38(a1);
  operator delete(v1);
}

int *sub_100076E3C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 63LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 63LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100077020(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173FB0);
  sub_1000771E4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100077058(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173FB0);
  sub_1000771E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100077098(char *a1)
{
}

uint64_t sub_1000770DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100077110(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007715C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173FB0);
  sub_1000771E4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007719C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173FB0);
  sub_1000771E4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000771E4(uint64_t a1)
{
  *(void *)a1 = off_100174080;
  sub_100077280(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100077280(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000773E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000773A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000773D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000771E4(a1);
  operator delete(v1);
}

int *sub_1000773E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 74LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 74LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000775CC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001741D0);
  sub_100077790(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100077604(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001741D0);
  sub_100077790(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100077644(char *a1)
{
}

uint64_t sub_100077688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000776BC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100077708(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001741D0);
  sub_100077790((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100077748(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001741D0);
  sub_100077790((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100077790(uint64_t a1)
{
  *(void *)a1 = off_1001742A0;
  sub_10007782C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007782C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100077994((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100077954( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100077980(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100077790(a1);
  operator delete(v1);
}

int *sub_100077994(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 116LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 116LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100077B78(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001743F0);
  sub_100077D3C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100077BB0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001743F0);
  sub_100077D3C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100077BF0(char *a1)
{
}

uint64_t sub_100077C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100077C68(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100077CB4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001743F0);
  sub_100077D3C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100077CF4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001743F0);
  sub_100077D3C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100077D3C(uint64_t a1)
{
  *(void *)a1 = off_1001744C0;
  sub_100077DD8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100077DD8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100077F40((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100077F00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100077F2C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100077D3C(a1);
  operator delete(v1);
}

int *sub_100077F40(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 126LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 126LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100078124(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174610);
  sub_1000782E8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007815C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174610);
  sub_1000782E8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007819C(char *a1)
{
}

uint64_t sub_1000781E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100078214(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100078260(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174610);
  sub_1000782E8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000782A0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174610);
  sub_1000782E8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000782E8(uint64_t a1)
{
  *(void *)a1 = off_1001746E0;
  sub_100078384(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100078384(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000784EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000784AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000784D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000782E8(a1);
  operator delete(v1);
}

int *sub_1000784EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 136LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 136LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000786D0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174830);
  sub_100078894(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100078708(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174830);
  sub_100078894(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100078748(char *a1)
{
}

uint64_t sub_10007878C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000787C0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007880C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174830);
  sub_100078894((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007884C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174830);
  sub_100078894((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100078894(uint64_t a1)
{
  *(void *)a1 = off_100174900;
  sub_100078930(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100078930(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100078A98((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100078A58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078A84(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100078894(a1);
  operator delete(v1);
}

int *sub_100078A98(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 139LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 139LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100078C7C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174A50);
  sub_100078E40(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100078CB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174A50);
  sub_100078E40(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100078CF4(char *a1)
{
}

uint64_t sub_100078D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100078D6C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100078DB8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174A50);
  sub_100078E40((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100078DF8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174A50);
  sub_100078E40((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100078E40(uint64_t a1)
{
  *(void *)a1 = off_100174B20;
  sub_100078EDC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100078EDC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100079044((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100079004( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079030(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100078E40(a1);
  operator delete(v1);
}

int *sub_100079044(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 154LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 154LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100079228(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174C70);
  sub_1000793EC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100079260(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174C70);
  sub_1000793EC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000792A0(char *a1)
{
}

uint64_t sub_1000792E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100079318(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100079364(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174C70);
  sub_1000793EC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000793A4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174C70);
  sub_1000793EC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000793EC(uint64_t a1)
{
  *(void *)a1 = off_100174D40;
  sub_100079488(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100079488(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_1000795F0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000795B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000795DC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000793EC(a1);
  operator delete(v1);
}

int *sub_1000795F0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 203LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 203LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000797D4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174E90);
  sub_100079998(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007980C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174E90);
  sub_100079998(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007984C(char *a1)
{
}

uint64_t sub_100079890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000798C4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100079910(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174E90);
  sub_100079998((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100079950(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174E90);
  sub_100079998((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100079998(uint64_t a1)
{
  *(void *)a1 = off_100174F60;
  sub_100079A34(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100079A34(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100079B9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100079B5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079B88(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100079998(a1);
  operator delete(v1);
}

int *sub_100079B9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 331LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 331LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100079D80(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001750B0);
  sub_100079F44(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100079DB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001750B0);
  sub_100079F44(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100079DF8(char *a1)
{
}

uint64_t sub_100079E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100079E70(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100079EBC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001750B0);
  sub_100079F44((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100079EFC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001750B0);
  sub_100079F44((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100079F44(uint64_t a1)
{
  *(void *)a1 = off_100175180;
  sub_100079FE0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100079FE0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007A148((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007A108( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007A134(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100079F44(a1);
  operator delete(v1);
}

int *sub_10007A148(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 343LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 343LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007A32C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001752D0);
  sub_10007A4F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007A364(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001752D0);
  sub_10007A4F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007A3A4(char *a1)
{
}

uint64_t sub_10007A3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007A41C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007A468(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001752D0);
  sub_10007A4F0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007A4A8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001752D0);
  sub_10007A4F0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007A4F0(uint64_t a1)
{
  *(void *)a1 = off_1001753A0;
  sub_10007A58C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007A58C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007A6F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007A6B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007A6E0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007A4F0(a1);
  operator delete(v1);
}

int *sub_10007A6F4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 347LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 347LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007A8D8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001754F0);
  sub_10007AA9C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007A910(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001754F0);
  sub_10007AA9C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007A950(char *a1)
{
}

uint64_t sub_10007A994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007A9C8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007AA14(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001754F0);
  sub_10007AA9C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007AA54(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001754F0);
  sub_10007AA9C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007AA9C(uint64_t a1)
{
  *(void *)a1 = off_1001755C0;
  sub_10007AB38(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007AB38(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007ACA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007AC60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007AC8C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007AA9C(a1);
  operator delete(v1);
}

int *sub_10007ACA0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 382LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 382LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007AE84(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175710);
  sub_10007B048(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007AEBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175710);
  sub_10007B048(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007AEFC(char *a1)
{
}

uint64_t sub_10007AF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007AF74(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007AFC0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100175710);
  sub_10007B048((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007B000(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175710);
  sub_10007B048((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007B048(uint64_t a1)
{
  *(void *)a1 = off_1001757E0;
  sub_10007B0E4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007B0E4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007B24C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007B20C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B238(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007B048(a1);
  operator delete(v1);
}

int *sub_10007B24C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 387LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 387LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007B430(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175930);
  sub_10007B5F4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007B468(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175930);
  sub_10007B5F4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007B4A8(char *a1)
{
}

uint64_t sub_10007B4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007B520(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007B56C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100175930);
  sub_10007B5F4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007B5AC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175930);
  sub_10007B5F4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007B5F4(uint64_t a1)
{
  *(void *)a1 = off_100175A00;
  sub_10007B690(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007B690(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007B7F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007B7B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B7E4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007B5F4(a1);
  operator delete(v1);
}

int *sub_10007B7F8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 390LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 390LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007B9DC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175B50);
  sub_10007BBA0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007BA14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175B50);
  sub_10007BBA0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007BA54(char *a1)
{
}

uint64_t sub_10007BA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007BACC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007BB18(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100175B50);
  sub_10007BBA0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007BB58(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175B50);
  sub_10007BBA0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007BBA0(uint64_t a1)
{
  *(void *)a1 = off_100175C20;
  sub_10007BC3C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007BC3C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007BDA4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007BD64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007BD90(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007BBA0(a1);
  operator delete(v1);
}

int *sub_10007BDA4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 399LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 399LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007BF88(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175D70);
  sub_10007C14C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007BFC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175D70);
  sub_10007C14C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007C000(char *a1)
{
}

uint64_t sub_10007C044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007C078(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007C0C4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100175D70);
  sub_10007C14C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007C104(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175D70);
  sub_10007C14C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007C14C(uint64_t a1)
{
  *(void *)a1 = off_100175E40;
  sub_10007C1E8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007C1E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007C350((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007C310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007C33C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007C14C(a1);
  operator delete(v1);
}

int *sub_10007C350(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 406LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 406LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10007C534(void *a1)
{
  *a1 = off_100175EC0;
  sub_1000114F0((uint64_t)(a1 + 2));
  return a1;
}

void sub_10007C564(void *a1)
{
  *a1 = off_100175EC0;
  sub_1000114F0((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_10007C594(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173A20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007C5FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C610(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173C40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007C678(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C68C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173E60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007C6F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C708(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174080;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007C770(_Unwind_Exception *a1)
{
}

void sub_10007C784(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_10007C7FC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_100018774((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10007C7E8(_Unwind_Exception *a1)
{
}

void *sub_10007C7FC(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016D710;
  int v5 = *a4;
  uint64_t v6 = sub_1000FA77C(*a2, a3, *a4);
  sub_100045554((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_10007C858(_Unwind_Exception *a1)
{
}

void sub_10007C86C(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_10007C8E4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_100018774((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10007C8D0(_Unwind_Exception *a1)
{
}

void *sub_10007C8E4(void *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10016ECF0;
  sub_10007C92C((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_10007C918(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C92C(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  sub_10007C9E4(&v13, *a4);
  sub_100110E10(a1, &v14, a3, &v13);
  uint64_t v9 = v15;
  if (v15)
  {
    __int128 v10 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return a1;
}

void sub_10007C9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

_DWORD *sub_10007C9E4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10016D430;
    exception[1] = "header_ignore_fields_t";
    *((_DWORD *)exception + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  }

  return result;
}

uint64_t sub_10007CA54(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001742A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007CABC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007CAD0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001744C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007CB38(_Unwind_Exception *a1)
{
}

uint64_t sub_10007CB4C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001746E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007CBB4(_Unwind_Exception *a1)
{
}

uint64_t sub_10007CBC8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174900;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007CC30(_Unwind_Exception *a1)
{
}

uint64_t sub_10007CC44(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174B20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007CCAC(_Unwind_Exception *a1)
{
}

void *sub_10007CCC0(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &off_100175F18;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10007CD04(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007CD28(std::__shared_weak_count *a1)
{
}

uint64_t sub_10007CD3C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_10007CD54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_10007CD94(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174D40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007CDFC(_Unwind_Exception *a1)
{
}

void sub_10007CE10(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (sub_1000B866C())
  {
    *(void *)&__int128 v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((void *)&v3 + 1) = 72LL;
    LODWORD(v4) = 2;
    sub_10007CFE8(v7, &v3);
    sub_100004E4C(&v8, (uint64_t)"Opening mapped blocks for ", 26LL);
    sub_100074930(&v8, v1);
    std::ostream::~ostream(&v8, off_100176080);
    sub_10007D314((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)&__int128 v3 = _NSConcreteStackBlock;
  *((void *)&v3 + 1) = 0x40000000LL;
  char v4 = sub_10007D0D0;
  __int128 v5 = &unk_100175F80;
  uint64_t v6 = v1;
  sub_10003DD34(v2, (uint64_t)&v3);
}

void *sub_10007CFE8(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10007D298((uint64_t)a1, a2);
  *a1 = off_100175FB8;
  a1[45] = &off_1001760B8;
  a1[46] = &off_1001760E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175FB8;
  a1[45] = off_100176040;
  a1[46] = off_100176068;
  return a1;
}

void sub_10007D06C(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D090(uint64_t a1)
{
  return a1;
}

void sub_10007D0D0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  sub_100116E98((uint64_t)(v1 + 2), &v10);
  uint64_t v3 = v10;
  uint64_t v2 = v11;
  uint64_t v12 = v10;
  int v13 = v11;
  char v4 = operator new(0x20uLL);
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  off_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  sub_100114618((uint64_t)v4, v5, v6, v7, 1);
  atomic_store((unint64_t)v4, v1 + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_10007D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10007D1B0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007D8C0((uint64_t)a1, a2);
  *a1 = off_1001761D8;
  a1[45] = &off_1001762D8;
  a1[46] = &off_100176300;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001761D8;
  a1[45] = off_100176260;
  a1[46] = off_100176288;
  return a1;
}

void sub_10007D234(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D258(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007D298(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100176150;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007D300(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D314(uint64_t a1)
{
  *(void *)a1 = off_100176150;
  sub_10007D58C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10007D3B0(char *a1)
{
}

uint64_t sub_10007D3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007D428(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10007D474(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176080);
  sub_10007D314(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10007D4AC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100176080);
  sub_10007D314((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10007D4EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100176080);
  sub_10007D314(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007D52C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100176080);
  sub_10007D314((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10007D578(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007D314(a1);
  operator delete(v1);
}

uint64_t sub_10007D58C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007D6DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007D6B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10007D6DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 219LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 219LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007D8C0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100176370;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007D928(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D93C(uint64_t a1)
{
  *(void *)a1 = off_100176370;
  sub_10007DBB4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10007D9D8(char *a1)
{
}

uint64_t sub_10007DA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007DA50(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10007DA9C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001762A0);
  sub_10007D93C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10007DAD4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001762A0);
  sub_10007D93C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10007DB14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001762A0);
  sub_10007D93C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007DB54(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001762A0);
  sub_10007D93C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10007DBA0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007D93C(a1);
  operator delete(v1);
}

uint64_t sub_10007DBB4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10007DD04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007DCDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10007DD04(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000B85DC();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 226LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000B85DC();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 226LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007DEE8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174F60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007DF50(_Unwind_Exception *a1)
{
}

uint64_t sub_10007DF64(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100175180;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007DFCC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007DFE0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001753A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007E048(_Unwind_Exception *a1)
{
}

uint64_t sub_10007E05C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001755C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007E0C4(_Unwind_Exception *a1)
{
}

uint64_t sub_10007E0D8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001757E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007E140(_Unwind_Exception *a1)
{
}

uint64_t sub_10007E154(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100175A00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007E1BC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007E1D0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100175C20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007E238(_Unwind_Exception *a1)
{
}

uint64_t sub_10007E24C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100175E40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10007E2B4(_Unwind_Exception *a1)
{
}

void sub_10007E708( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10007E730(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_10007E864( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10007E88C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = 0LL;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_10007EA00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10007EA28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = 0LL;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_10007EBB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10007EBD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = 0LL;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

_OWORD *sub_10007EC60(_OWORD *a1, uint64_t a2)
{
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  char v4 = operator new[](0x40uLL);
  *char v4 = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  v4[3] = 0u;
  unsigned int v5 = sub_100033014(a2, (uint64_t)v4, 64LL, 0LL);
  if (v5 != 64)
  {
    unsigned int v7 = v5;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100189E78;
    id v9 = std::generic_category();
    exception[1] = v7;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    exception[7] = "Couldn't read sparseimage header";
  }

  sub_10007ED4C((uint64_t)a1, (uint64_t)v4);
  operator delete[](v4);
  return a1;
}

void sub_10007ED38(_Unwind_Exception *a1)
{
}

_DWORD *sub_10007ED4C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  sub_10007EF00((uint64_t)"header_signature", v4, &v14, 1LL);
  *(_DWORD *)a1 = 1936879731;
  int v5 = bswap32(*(_DWORD *)(a2 + 4));
  uint64_t v14 = 0x200000001LL;
  int v15 = 3;
  sub_10007EF00((uint64_t)"version_t", v5, &v14, 3LL);
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  uint64_t result = sub_10007EF80(&v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a2 + 16));
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  *(void *)(a1 + 2std::iostream::~basic_iostream(v2, v3 + 8) = bswap64(*(void *)(a2 + 28));
  __int128 v7 = *(_OWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 52) = v8;
  *(_OWORD *)(a1 + 36) = v7;
  if (!*(_DWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v13 = (void *)sub_100004870((uint64_t)exception, (uint64_t)"Band size in sparse is zero", 0x16u);
  }

  for (uint64_t i = 0LL; i != 28; ++i)
  {
    if (*(_BYTE *)(a1 + 36 + i))
    {
      uint64_t v10 = __cxa_allocate_exception(0x40uLL);
      unint64_t v11 = (void *)sub_100004870((uint64_t)v10, (uint64_t)"Reserved part isn't zeroed", 0x16u);
    }
  }

  return result;
}

uint64_t sub_10007EF00(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  if (!a4)
  {
LABEL_5:
    uint64_t v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_10016D430;
    exception[1] = v5;
    *((_DWORD *)exception + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  }

  uint64_t v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4LL;
    if (!v4) {
      goto LABEL_5;
    }
  }

  return result;
}

_DWORD *sub_10007EF80(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10016D430;
    exception[1] = "flags_t";
    *((_DWORD *)exception + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  }

  return result;
}

void sub_10007F09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F388(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_10007F51C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F560(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007F570(uint64_t a1)
{
}

void sub_10007F578(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    int v8 = *__error();
    if (sub_1000B8654())
    {
      uint64_t v19 = 0LL;
      uint64_t v9 = sub_1000B85DC();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        uint64_t v11 = 3LL;
      }
      else {
        uint64_t v11 = 2LL;
      }
      *(_DWORD *)uint64_t buf = 68158210;
      int v21 = 73;
      __int16 v22 = 2080;
      __int16 v23 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
      __int16 v24 = 2112;
      id v25 = v7;
      int v18 = 28;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( v11,  &v19,  0LL,  0LL,  &_mh_execute_header,  v10,  16LL,  "%.*s: %@",  buf,  v18);

      if (v12)
      {
        fprintf(__stderrp, "%s\n", v12);
        free(v12);
      }
    }

    else
    {
      uint64_t v13 = sub_1000B85DC();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68158210;
        int v21 = 73;
        __int16 v22 = 2080;
        __int16 v23 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
        __int16 v24 = 2112;
        id v25 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: %@", buf, 0x1Cu);
      }
    }

    *__error() = v8;
  }

  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v6;
  id v17 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10007F76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007FA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007FB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007FE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007FFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_25:
  return v17;
}

void sub_100080334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_100080414()
{
  return &unk_1001986E8;
}

void *sub_100080420(uint64_t a1)
{
  unsigned int v2 = operator new(0x68uLL);
  sub_100080778((uint64_t)v2, a1);
  return v2;
}

void sub_100080460(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v3;
  operator delete(v5);
  if (a2 == 1)
  {
    id v7 = __cxa_begin_catch(a1);
    sub_1000808C4(v7, v2);
    __cxa_end_catch();
    JUMPOUT(0x10008044CLL);
  }

  _Unwind_Resume(a1);
}

double sub_1000804B8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_100176B58;
    uint64_t v14 = std::generic_category();
    exception[1] = v4;
    exception[2] = v14;
    exception[3] = "Cannot decode file descriptor";
  }

  uint64_t v19 = 0LL;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "path", &v19);
  unsigned int v6 = v5;
  if (v5 <= 0)
  {
    uint64_t v15 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v15 = &off_100176B58;
    unint64_t v16 = std::generic_category();
    v15[1] = v6;
    __int128 v15[2] = v16;
    void v15[3] = "Cannot decode path";
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19));
  (*(void (**)(char *))(a1 + 16))(v19);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "writable", &v19);
  unsigned int v9 = v8;
  if (v8 != 1)
  {
    id v17 = __cxa_allocate_exception(0x20uLL);
    *id v17 = &off_100176B58;
    int v18 = std::generic_category();
    v17[1] = v9;
    stat v17[2] = v18;
    unint64_t v17[3] = "Cannot decode writable";
  }

  char v10 = *v19;
  (*(void (**)(void))(a1 + 16))();
  uint64_t v11 = operator new(0x68uLL);
  v11[11] = v7;
  *((_BYTE *)v11 + 96) = v10;
  *((_DWORD *)v11 + 25) = v4;
  *(void *)&double result = 88LL;
  *uint64_t v11 = 88LL;
  v11[1] = sub_100080B34;
  void v11[2] = sub_100080B3C;
  void v11[3] = sub_100080B64;
  v11[4] = sub_100080B74;
  void v11[5] = sub_100080B7C;
  v11[6] = sub_100080B84;
  v11[7] = sub_100080B88;
  v11[8] = sub_100080B8C;
  v11[9] = sub_100080B90;
  v11[10] = 0LL;
  return result;
}

void sub_1000806F8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = __cxa_begin_catch(exception_object);
    sub_1000808C4(v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x1000805F8LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100080754(void *a1)
{
  return objc_claimAutoreleasedReturnValue([a1 objectForKeyedSubscript:@"path"]);
}

uint64_t sub_100080778(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a2 + 8) objectForKeyedSubscript:@"path"]);
  BOOL v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(void *)a1 = 88LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = sub_100080B34;
  *(void *)(a1 + 16) = sub_100080B3C;
  *(void *)(a1 + 24) = sub_100080B64;
  *(void *)(a1 + 32) = sub_100080B74;
  *(void *)(a1 + 40) = sub_100080B7C;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = sub_100080B84;
  *(void *)(a1 + 56) = sub_100080B88;
  *(void *)(a1 + sub_1000114F0(v1 + 64) = sub_100080B8C;
  *(void *)(a1 + 72) = sub_100080B90;
  *(void *)(a1 + 80) = 0LL;
  int v6 = open((const char *)[v4 fileSystemRepresentation], *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = *__error();
    void *exception = &off_100176B58;
    char v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }

  return a1;
}

void sub_1000808A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000808C4(_DWORD *a1, void *a2)
{
  int v4 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v18 = 0LL;
    uint64_t v5 = sub_1000B85DC();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      uint64_t v7 = 3LL;
    }
    else {
      uint64_t v7 = 2LL;
    }
    uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
    int v9 = a1[2];
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = 97;
    __int16 v21 = 2080;
    __int16 v22 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    __int16 v23 = 2080;
    uint64_t v24 = v8;
    __int16 v25 = 1024;
    int v26 = v9;
    LODWORD(v16) = 34;
    char v10 = (char *)_os_log_send_and_compose_impl( v7,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  16LL,  "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)",  (int)buf,  v16,  v17);

    if (v10)
    {
      fprintf(__stderrp, "%s\n", v10);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = sub_1000B85DC();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
      int v14 = a1[2];
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = 97;
      __int16 v21 = 2080;
      __int16 v22 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      __int16 v25 = 1024;
      int v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)",  buf,  0x22u);
    }
  }

  *__error() = v4;
  if (a2) {
    *a2 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  (int)a1[2],  0LL));
  }
  return 0LL;
}

void *sub_100080AE4(void *a1, uint64_t a2, unsigned int a3)
{
  *a1 = &off_100176B58;
  int v6 = std::generic_category();
  a1[1] = a3;
  a1[2] = v6;
  a1[3] = a2;
  return a1;
}

uint64_t sub_100080B34()
{
  return 512LL;
}

unint64_t sub_100080B3C(uint64_t a1)
{
  return (unint64_t)v2.st_size >> 9;
}

BOOL sub_100080B64(uint64_t a1)
{
  return *(_BYTE *)(a1 + 96) != 0;
}

uint64_t sub_100080B74()
{
  return 1024LL;
}

uint64_t sub_100080B7C()
{
  return 1024LL;
}

void sub_100080B90(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)sub_100083738(a1);
    operator delete(v1);
  }

uint64_t sub_100080BAC@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 100), a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    int v4 = __error();
    uint64_t v5 = sub_100080AE4(exception, (uint64_t)"fstat failed", *v4);
  }

  return result;
}

void sub_100080C0C(_Unwind_Exception *a1)
{
}

CFUUIDRef sub_100080C20(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  uint64_t v1 = sub_100080CB0( (uint64_t)v5,  (char *)[*(id *)(a1 + 88) UTF8String],  (uint64_t)objc_msgSend(*(id *)(a1 + 88), "length"));
  uint64_t v3 = v2;
  *(void *)&v6.byte0 = v1;
  *(void *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0LL, v6);
}

uint64_t sub_100080CB0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  __int128 v13 = xmmword_10013B7D0;
  int v14 = -1009589776;
  unint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  uint64_t v16 = 0LL;
  do
  {
    char v7 = *(_BYTE *)(a1 + v6);
    uint64_t v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      uint64_t v16 = 0LL;
      sub_100080F84(&v13);
    }

    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0LL;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100072340(&v12);
      }

      ++v18;
    }

    else
    {
      v17 += 8LL;
    }

    ++v6;
  }

  while (v6 != 16);
  for (; a3; --a3)
  {
    char v9 = *a2;
    uint64_t v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      uint64_t v16 = 0LL;
      sub_100080F84(&v13);
    }

    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0LL;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100072340(&v12);
      }

      ++v18;
    }

    else
    {
      v17 += 8LL;
    }

    ++a2;
  }

  return sub_100080EE4(a1, &v13);
}

void sub_100080EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_100080EE4(uint64_t a1, _DWORD *a2)
{
  for (uint64_t i = 0LL; i != 4; ++i)
    *(_DWORD *)((char *)&v5 + i * 4) = bswap32(v4[i]);
  BYTE6(v5) = BYTE6(v5) & 0xF | 0x50;
  return v5;
}

_DWORD *sub_100080F84(_DWORD *result)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = (const char *)(result + 5);
  int8x16x4_t v40 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v40.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v40.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }

  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v40.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
  int8x16_t v15 = vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL),  (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v40.val[3]);
  v40.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v40.val[3].i8);
  v39[3] = vorrq_s8( vorrq_s8( vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)),  (int8x16_t)vmovl_high_u16(v16));
  v39[2] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL),  (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8( vorrq_s8( vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)),  (int8x16_t)vmovl_high_u16((uint16x8_t)v40.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4LL;
  }

  while (v1 != 256);
  unint64_t v18 = 0LL;
  int v19 = result[1];
  int v21 = result[3];
  int v20 = result[4];
  int v22 = v20;
  int v23 = result[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *result;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    int v31 = v25 ^ v26 ^ v24;
    int v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      int v33 = -1894007588;
    }

    else
    {
      int v32 = v31;
      int v33 = -899497514;
    }

    if (v18 <= 0x27)
    {
      int v34 = 1859775393;
    }

    else
    {
      int v31 = v32;
      int v34 = v33;
    }

    if (v18 <= 0x13) {
      int v31 = v30 & ~v26 | v29 & v26;
    }
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    int v35 = v36 >> 27;
    if (v18 <= 0x13) {
      int v34 = 1518500249;
    }
    int v37 = v22 + v31 + v35 + v34;
    HIDWORD(v3std::iostream::~basic_iostream(v2, v3 + 8) = v26;
    LODWORD(v3std::iostream::~basic_iostream(v2, v3 + 8) = v26;
    int v25 = v38 >> 2;
    int v27 = v37 + *((_DWORD *)v39 + v18++);
    int v22 = v30;
    int v24 = v29;
    int v26 = v28;
  }

  while (v18 != 80);
  *result += v27;
  result[1] = v28 + v19;
  result[2] = v25 + v23;
  result[3] = v29 + v21;
  result[4] = v30 + v20;
  return result;
}

_DWORD *sub_1000811BC(_DWORD *result, _DWORD *a2)
{
  uint16x8_t v3 = result;
  uint64_t v4 = *((void *)result + 11);
  *((void *)result + 11) = v4 + 1;
  *((_BYTE *)result + v4 + 20) = 0x80;
  unint64_t v5 = *((void *)result + 11);
  if (v5 == 64)
  {
    *((void *)result + 11) = 0LL;
    uint64_t result = sub_100080F84(result);
    unint64_t v5 = *((void *)v3 + 11);
  }

  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *((void *)v3 + 11) = v5 + 1;
        *((_BYTE *)v3 + v5 + 20) = 0;
        unint64_t v5 = *((void *)v3 + 11);
      }

      while (v5 < 0x38);
    }
  }

  else
  {
    do
    {
      *((void *)v3 + 11) = v5 + 1;
      *((_BYTE *)v3 + v5 + 20) = 0;
      unint64_t v5 = *((void *)v3 + 11);
      if (v5 == 64)
      {
        *((void *)v3 + 11) = 0LL;
        uint64_t result = sub_100080F84(v3);
        unint64_t v5 = *((void *)v3 + 11);
      }
    }

    while (v5);
    unint64_t v6 = 0LL;
    do
    {
      unint64_t v5 = v6 + 1;
      *((_BYTE *)v3 + v6 + 20) = 0;
    }

    while (v6++ < 0x37);
  }

  uint64_t v8 = *((void *)v3 + 13) >> 24;
  *((void *)v3 + 11) = v5 + 1;
  *((_BYTE *)v3 + v5 + 20) = v8;
  uint64_t v9 = *((void *)v3 + 11);
  if (v9 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v9 = *((void *)v3 + 11);
  }

  uint64_t v10 = *((void *)v3 + 13) >> 16;
  *((void *)v3 + 11) = v9 + 1;
  *((_BYTE *)v3 + v9 + 20) = v10;
  uint64_t v11 = *((void *)v3 + 11);
  if (v11 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v11 = *((void *)v3 + 11);
  }

  uint64_t v12 = *((void *)v3 + 13) >> 8;
  *((void *)v3 + 11) = v11 + 1;
  *((_BYTE *)v3 + v11 + 20) = v12;
  uint64_t v13 = *((void *)v3 + 11);
  if (v13 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v13 = *((void *)v3 + 11);
  }

  uint64_t v14 = *((void *)v3 + 13);
  *((void *)v3 + 11) = v13 + 1;
  *((_BYTE *)v3 + v13 + 20) = v14;
  uint64_t v15 = *((void *)v3 + 11);
  if (v15 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v15 = *((void *)v3 + 11);
  }

  uint64_t v16 = *((void *)v3 + 12) >> 24;
  *((void *)v3 + 11) = v15 + 1;
  *((_BYTE *)v3 + v15 + 20) = v16;
  uint64_t v17 = *((void *)v3 + 11);
  if (v17 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v17 = *((void *)v3 + 11);
  }

  uint64_t v18 = *((void *)v3 + 12) >> 16;
  *((void *)v3 + 11) = v17 + 1;
  *((_BYTE *)v3 + v17 + 20) = v18;
  uint64_t v19 = *((void *)v3 + 11);
  if (v19 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v19 = *((void *)v3 + 11);
  }

  uint64_t v20 = *((void *)v3 + 12) >> 8;
  *((void *)v3 + 11) = v19 + 1;
  *((_BYTE *)v3 + v19 + 20) = v20;
  uint64_t v21 = *((void *)v3 + 11);
  if (v21 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
    uint64_t v21 = *((void *)v3 + 11);
  }

  uint64_t v22 = *((void *)v3 + 12);
  *((void *)v3 + 11) = v21 + 1;
  *((_BYTE *)v3 + v21 + 20) = v22;
  if (*((void *)v3 + 11) == 64LL)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100080F84(v3);
  }

  *a2 = *v3;
  a2[1] = v3[1];
  a2[2] = v3[2];
  a2[3] = v3[3];
  a2[4] = v3[4];
  return result;
}

void *sub_100081448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[10] = 0LL;
  v4[11] = 0LL;
  v4[9] = 0LL;
  _BYTE v4[12] = dispatch_queue_create("com.apple.di_raw_test_plugin", &_dispatch_queue_attr_concurrent);
  v4[13] = 850045863LL;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  v4[20] = 0LL;
  *uint64_t v4 = sub_100081504;
  v4[1] = sub_100081508;
  void v4[2] = sub_10008150C;
  v4[3] = sub_100081514;
  void v4[4] = sub_100081518;
  _DWORD v4[5] = sub_10008151C;
  v4[7] = a2;
  v4[8] = a1;
  v4[6] = sub_100081520;
  return v4;
}

uint64_t sub_10008150C()
{
  return 1LL;
}

void sub_100081520(uint64_t a1)
{
  if (a1)
  {
    std::mutex::~mutex((std::mutex *)(a1 + 104));

    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }

    operator delete((void *)a1);
  }

uint64_t sub_100081568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_10001848C(a1 + 88, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    char v7 = v14 + 8;
    uint64_t v17 = *(char **)(a1 + 72);
    uint64_t v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      uint64_t v16 = *(char **)(a1 + 72);
    }

    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    void *v6 = a2;
    char v7 = v6 + 1;
  }

  *(void *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0LL;
}

void sub_100081668(_Unwind_Exception *a1)
{
}

void sub_10008167C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  uint16x8_t v3 = *(void **)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  std::mutex::unlock(v2);
  unint64_t v5 = sub_100004E4C(&std::cerr, (uint64_t)"raw plugin: going to execute ", 29LL);
  unint64_t v6 = (void *)std::ostream::operator<<(v5, (v4 - (uint64_t)v3) >> 3);
  char v7 = sub_100004E4C(v6, (uint64_t)" SQEs", 5LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
  uint64_t v8 = std::locale::use_facet(&v15, &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale(&v15);
  std::ostream::put(v7, v9);
  std::ostream::flush(v7);
  uint64_t v10 = *(dispatch_queue_s **)(a1 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_100081800;
  block[3] = &unk_100176498;
  block[4] = a1;
  __int128 __p = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_100081E94(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v10, block);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }

  if (v3) {
    operator delete(v3);
  }
}

void sub_1000817D8(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *sub_100081800(void *result)
{
  uint64_t v1 = (uint64_t **)result[5];
  uint64_t v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    uint64_t v3 = result[4];
    do
    {
      uint64_t v4 = *v1;
      unsigned int v5 = -45;
      switch(*(_BYTE *)*v1)
      {
        case 2:
          unsigned int v6 = sub_1000818D8(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_preadv);
          goto LABEL_7;
        case 4:
          unsigned int v6 = sub_100081B54(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_pwritev);
          goto LABEL_7;
        case 5:
          unsigned int v6 = sub_100081DD0(*(void *)(v3 + 64));
LABEL_7:
          unsigned int v5 = v6;
          break;
        case 6:
          unsigned int v5 = 0;
          break;
        default:
          break;
      }

      uint64_t result = (void *)io_rings_return_status(*(void *)(v3 + 56), (uint64_t)v4, v5, 0);
      ++v1;
    }

    while (v1 != v2);
  }

  return result;
}

uint64_t sub_1000818D8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }

    int v6 = -22;
  }

  else
  {
    int v6 = 0;
  }

void sub_100081B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100081B54(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }

    int v6 = -22;
  }

  else
  {
    int v6 = 0;
  }

void sub_100081DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100081DD0(uint64_t a1)
{
  uint64_t result = fcntl(*(_DWORD *)(a1 + 100), 51, 0LL);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result) {
      return result;
    }
    goto LABEL_8;
  }

  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (uint64_t result = fsync(*(_DWORD *)(a1 + 100)), (_DWORD)result))
  {
LABEL_8:
    int v3 = *__error();
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }

  return result;
}

void *sub_100081E60(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  uint64_t v2 = (void *)(a1 + 40);
  _DWORD v2[2] = 0LL;
  return sub_100081E94( v2,  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void sub_100081E7C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v2;
    operator delete(v2);
  }

void *sub_100081E94(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100081F0C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100081EF0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100081F0C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100016F4C();
  }
  uint64_t result = (char *)sub_10001848C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_100081F4C()
{
  *(void *)&__int128 v1 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((void *)&v1 + 1) = 39LL;
  int v2 = 0;
  sub_100081FE4(v3, &v1);
  sub_100004E4C(&v4, (uint64_t)"Suspended", 9LL);
  std::ostream::~ostream(&v4, off_1001765A8);
  sub_100082148((uint64_t)v3);
  return std::ios::~ios(&v5);
}

void sub_100081FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100081FE4(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000820CC((uint64_t)a1, a2);
  *a1 = off_1001764E0;
  a1[45] = &off_1001765E0;
  a1[46] = &off_100176608;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001764E0;
  a1[45] = off_100176568;
  a1[46] = off_100176590;
  return a1;
}

void sub_100082068(_Unwind_Exception *a1)
{
}

uint64_t sub_10008208C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000820CC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100176678;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_100082134(_Unwind_Exception *a1)
{
}

uint64_t sub_100082148(uint64_t a1)
{
  *(void *)a1 = off_100176678;
  sub_1000823C0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000821E4(char *a1)
{
}

uint64_t sub_100082228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008225C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000822A8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001765A8);
  sub_100082148(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000822E0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001765A8);
  sub_100082148((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100082320(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001765A8);
  sub_100082148(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100082360(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001765A8);
  sub_100082148((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000823AC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100082148(a1);
  operator delete(v1);
}

uint64_t sub_1000823C0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100082510((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000824E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100082510(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 121LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 121LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100082704()
{
  *(void *)&__int128 v1 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((void *)&v1 + 1) = 38LL;
  int v2 = 0;
  sub_10008279C(v3, &v1);
  sub_100004E4C(&v4, (uint64_t)"Resumed", 7LL);
  std::ostream::~ostream(&v4, off_1001767C8);
  sub_100082900((uint64_t)v3);
  return std::ios::~ios(&v5);
}

void sub_100082788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10008279C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100082884((uint64_t)a1, a2);
  *a1 = off_100176700;
  a1[45] = &off_100176800;
  a1[46] = &off_100176828;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100176700;
  a1[45] = off_100176788;
  a1[46] = off_1001767B0;
  return a1;
}

void sub_100082820(_Unwind_Exception *a1)
{
}

uint64_t sub_100082844(uint64_t a1)
{
  return a1;
}

uint64_t sub_100082884(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100176898;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000828EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100082900(uint64_t a1)
{
  *(void *)a1 = off_100176898;
  sub_100082B78(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008299C(char *a1)
{
}

uint64_t sub_1000829E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100082A14(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100082A60(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001767C8);
  sub_100082900(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100082A98(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001767C8);
  sub_100082900((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100082AD8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001767C8);
  sub_100082900(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100082B18(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001767C8);
  sub_100082900((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100082B64(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100082900(a1);
  operator delete(v1);
}

uint64_t sub_100082B78(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100082CC8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100082CA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100082CC8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 122LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 122LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100082EBC(uint64_t a1)
{
  *(void *)&__int128 v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((void *)&v2 + 1) = 38LL;
  int v3 = 0;
  sub_100082F68(v4, &v2);
  sub_100004E4C(&v5, (uint64_t)"Cancelled", 9LL);
  std::ostream::~ostream(&v5, off_100176A08);
  sub_1000830CC((uint64_t)v4);
  return std::ios::~ios(&v6);
}

void sub_100082F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100082F68(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100083050((uint64_t)a1, a2);
  *a1 = off_100176940;
  a1[45] = &off_100176A40;
  a1[46] = &off_100176A68;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100176940;
  a1[45] = off_1001769C8;
  a1[46] = off_1001769F0;
  return a1;
}

void sub_100082FEC(_Unwind_Exception *a1)
{
}

uint64_t sub_100083010(uint64_t a1)
{
  return a1;
}

uint64_t sub_100083050(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100176AD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_1000830B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000830CC(uint64_t a1)
{
  *(void *)a1 = off_100176AD8;
  sub_100083344(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100083168(char *a1)
{
}

uint64_t sub_1000831AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000831E0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10008322C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176A08);
  sub_1000830CC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100083264(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100176A08);
  sub_1000830CC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000832A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100176A08);
  sub_1000830CC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000832E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100176A08);
  sub_1000830CC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100083330(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000830CC(a1);
  operator delete(v1);
}

uint64_t sub_100083344(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100083494((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008346C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100083494(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 118LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 118LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100083688( uint64_t a1, void (*a2)(uint64_t, const char *, id, char *), void (*a3)(uint64_t, const char *, void), uint64_t a4)
{
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1LL);
}

void sub_10008371C(std::exception *a1)
{
}

uint64_t sub_100083730(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_100083738(uint64_t a1)
{
  *(void *)&__int128 v3 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((void *)&v3 + 1) = 33LL;
  int v4 = 0;
  sub_1000837DC(v5, &v3);
  sub_100004E4C(&v6, (uint64_t)"Cleaning up!", 12LL);
  std::ostream::~ostream(&v6, off_100176C50);
  sub_100083940((uint64_t)v5);
  std::ios::~ios(&v7);

  return a1;
}

void *sub_1000837DC(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000838C4((uint64_t)a1, a2);
  *a1 = off_100176B88;
  a1[45] = &off_100176C88;
  a1[46] = &off_100176CB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100176B88;
  a1[45] = off_100176C10;
  a1[46] = off_100176C38;
  return a1;
}

void sub_100083860(_Unwind_Exception *a1)
{
}

uint64_t sub_100083884(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000838C4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100176D20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10008392C(_Unwind_Exception *a1)
{
}

uint64_t sub_100083940(uint64_t a1)
{
  *(void *)a1 = off_100176D20;
  sub_100083BB8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000839DC(char *a1)
{
}

uint64_t sub_100083A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100083A54(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100083AA0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176C50);
  sub_100083940(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100083AD8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100176C50);
  sub_100083940((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100083B18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100176C50);
  sub_100083940(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100083B58(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100176C50);
  sub_100083940((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100083BA4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100083940(a1);
  operator delete(v1);
}

uint64_t sub_100083BB8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_100083D08((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100083CE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100083D08(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 325LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 325LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100084340( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 reason]);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v14,  v10);

    objc_end_catch();
    JUMPOUT(0x100084308LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000843DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000843EC(uint64_t a1)
{
}

id sub_1000843F4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_1000845B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000846C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084838( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  int v14 = v13;

  if (__p) {
    operator delete[](__p);
  }
  if (a2 == 1)
  {
    BOOL v17 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(void *)v17 + 16LL))(v17);
    int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid public key: %s"));
    +[DIError failWithPOSIXCode:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:verboseInfo:error:",  22LL,  v18,  v12);

    __cxa_end_catch();
    JUMPOUT(0x100084784LL);
  }

  _Unwind_Resume(a1);
}

void sub_100084AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084DB8(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_100084F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000853C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000857BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085C8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100085D9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100085ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085FF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

_DWORD *sub_100086034(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_10016D430;
    exception[1] = "encryption_key_bits_size_t";
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = a2;
  }

  return result;
}

void sub_1000860AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_100026A1C(&v24, (uint64_t *)&v26);
    sub_1001171D0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    id v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      os_log_type_t v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  BOOL v17 = v25;
  if (v25)
  {
    int v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_100086238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000114F0((uint64_t)va);
  sub_1000114F0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100086258(uint64_t *a1, void **a2)
{
  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[18] = 0LL;
  *a1 = (uint64_t)off_100176E08;
  a1[1] = (uint64_t)off_100176E50;
  a1[2] = (uint64_t)off_100176E98;
  a1[3] = (uint64_t)off_100176EE0;
  a1[4] = (uint64_t)off_100176F28;
  a1[5] = (uint64_t)off_100176F70;
  a1[6] = (uint64_t)off_100176FB8;
  a1[7] = (uint64_t)off_100177018;
  a1[15] = (uint64_t)off_100177088;
  uint64_t v4 = (uint64_t *)(a2 + 2);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40LL))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + _Block_object_dispose(va, 8) = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 112) + 56) = 0LL;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v7 = ((uint64_t (*)(void **))(*a2)[3])(a2);
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  if (!*(_BYTE *)(v8 + 32)) {
    *(_BYTE *)(v8 + 32) = 1;
  }
  *(void *)(v8 + 24) = v7;
  sub_1000860AC(v4, (uint64_t)a1 + *(void *)(*a1 - 104));
  return a1;
}

void sub_100086374(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = off_1001770F8;
  *(void *)(v1 + 24) = off_100177150;
  sub_100026A94(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000863A0(uint64_t *a1, void **a2)
{
  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[18] = 0LL;
  *a1 = (uint64_t)off_100176E08;
  a1[1] = (uint64_t)off_100176E50;
  a1[2] = (uint64_t)off_100176E98;
  a1[3] = (uint64_t)off_100176EE0;
  a1[4] = (uint64_t)off_100176F28;
  a1[5] = (uint64_t)off_100176F70;
  a1[6] = (uint64_t)off_100176FB8;
  a1[7] = (uint64_t)off_100177018;
  a1[15] = (uint64_t)off_100177088;
  uint64_t v4 = (uint64_t *)(a2 + 2);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40LL))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + _Block_object_dispose(va, 8) = v5;
  uint64_t v7 = (uint64_t)a1 + *(void *)(v6 - 112);
  *(void *)(v7 + 40) = *(void *)(v7 + 8);
  *(_BYTE *)(v7 + 4_Block_object_dispose(va, 8) = 1;
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  *(void *)(v8 + 24) = *(void *)(v8 + 8);
  *(_BYTE *)(v8 + 32) = 1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) = 0LL;
  uint64_t v9 = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v9;
  sub_1000860AC(v4, (uint64_t)a1 + *(void *)(v10 - 104));
  return a1;
}

void sub_1000864BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = off_1001770F8;
  *(void *)(v1 + 24) = off_100177150;
  sub_100026A94(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000864E4(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001770F8;
  *(void *)(a1 + 24) = off_100177150;
  sub_100026A94((const void **)(a1 + 144));
  return a1;
}

void sub_100086520(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001770F8;
  *(void *)(a1 + 24) = off_100177150;
  sub_100026A94((const void **)(a1 + 144));
  operator delete((void *)a1);
}

const void **sub_10008655C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"RAW read-write image";
  sub_1000258AC(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_1000114C0(&v9);
  sub_100025BB0(a1 + *(void *)(*(void *)a1 - 120LL), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  sub_1000114C0(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4LL;
  sub_1000F6F08(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100026DC0(&v8);
  for (uint64_t i = 7LL; i != -1; i -= 2LL)
    uint64_t result = sub_100026D90((const void **)&v10[i]);
  return result;
}

void sub_100086694(_Unwind_Exception *a1)
{
  for (uint64_t i = 56LL; i != -8; i -= 16LL)
    sub_100026D90((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_1000866D8()
{
  return @"RAW";
}

const void **sub_1000866E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 15) = off_1001770F8;
  *((void *)v1 + 3) = off_100177150;
  return sub_100026A94((const void **)v1 + 18);
}

void sub_10008670C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 15) = off_1001770F8;
  *((void *)v1 + 3) = off_100177150;
  sub_100026A94((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_100086750(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 15) = off_1001770F8;
  *((void *)v1 + 3) = off_100177150;
  return sub_100026A94((const void **)v1 + 18);
}

void sub_100086778(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 15) = off_1001770F8;
  *((void *)v1 + 3) = off_100177150;
  sub_100026A94((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_1000867BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10008655C((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_1000867CC()
{
  return @"RAW";
}

uint64_t sub_1000867D8(uint64_t a1, uint64_t *a2)
{
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)a1 = off_100177228;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100177270;
  *(void *)(a1 + 16) = off_1001772B8;
  *(void *)(a1 + 24) = off_100177300;
  *(void *)(a1 + 32) = off_100177348;
  *(void *)(a1 + 40) = off_100177390;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_1001773D8;
  *(void *)(a1 + 56) = off_100177438;
  sub_10010D638(*a2, (char *)a1);
  return a1;
}

void sub_100086850(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = off_1001774A8;
  *(void *)(v1 + 24) = off_100177500;
  sub_100026A94(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100086878(uint64_t a1)
{
  *(void *)(a1 + 56) = off_1001774A8;
  *(void *)(a1 + 24) = off_100177500;
  sub_100026A94((const void **)(a1 + 80));
  return a1;
}

void sub_1000868B4(uint64_t a1)
{
  *(void *)(a1 + 56) = off_1001774A8;
  *(void *)(a1 + 24) = off_100177500;
  sub_100026A94((const void **)(a1 + 80));
  operator delete((void *)a1);
}

const void **sub_1000868F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Locked encrypted image";
  sub_100025BB0(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Encryption Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_1000114C0(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3LL;
  sub_1000F6F08(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100026DC0(&v8);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    uint64_t result = sub_100026D90((const void **)&v10[i]);
  return result;
}

void sub_1000869EC(_Unwind_Exception *a1)
{
  for (uint64_t i = 40LL; i != -8; i -= 16LL)
    sub_100026D90((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_100086A34()
{
  return @"Unknown";
}

const void **sub_100086A40(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 7) = off_1001774A8;
  *((void *)v1 + 3) = off_100177500;
  return sub_100026A94((const void **)v1 + 10);
}

void sub_100086A68(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 7) = off_1001774A8;
  *((void *)v1 + 3) = off_100177500;
  sub_100026A94((const void **)v1 + 10);
  operator delete(v1);
}

const void **sub_100086AAC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 7) = off_1001774A8;
  *((void *)v1 + 3) = off_100177500;
  return sub_100026A94((const void **)v1 + 10);
}

void sub_100086AD4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 7) = off_1001774A8;
  *((void *)v1 + 3) = off_100177500;
  sub_100026A94((const void **)v1 + 10);
  operator delete(v1);
}

const void **sub_100086B18@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000868F0((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_100086B28()
{
  return @"Unknown";
}

LABEL_59:
    if (-[BackendXPC tryCreatingCryptoHeader](v10, "tryCreatingCryptoHeader")) {
      unint64_t v11 = -[DiskImageParamsLocked_XPC initWithBackendXPC:]( objc_alloc(&OBJC_CLASS___DiskImageParamsLocked_XPC),  "initWithBackendXPC:",  v10);
    }
    else {
      unint64_t v11 = +[DiskImageParamsXPC newWithUnlockedBackendXPC:error:]( &OBJC_CLASS___DiskImageParamsXPC,  "newWithUnlockedBackendXPC:error:",  v10,  a5);
    }
    goto LABEL_3;
  }

void sub_100087270()
{
}

void sub_100087280()
{
  JUMPOUT(0x1000872B4LL);
}

void sub_100087290()
{
}

void sub_10008729C()
{
}

void sub_1000872C8()
{
  JUMPOUT(0x1000872E4LL);
}

void sub_1000872DC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 path]);
    objc_claimAutoreleasedReturnValue(+[DIError nilWithDIException:prefix:error:](&OBJC_CLASS___DIError, "nilWithDIException:prefix:error:", v6, v7, v3));

    __cxa_end_catch();
    JUMPOUT(0x100086BBCLL);
  }

  _Unwind_Resume(a1);
}

#error "100087618: call analysis failed (funcsize=134)"
BOOL __cdecl +[DiskImageParamsXPC getAEAKeyFromSAKSWithMetadata:key:error:](id a1, SEL a2, id a3, char *a4, id *a5)
{
  id v7;
  BOOL v8;
  CC_LONG v9;
  char v11[88];
  uint64_t v7 = a3;
  uint64_t v8 = +[DIKeyRetriever decryptKeyWithData:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "decryptKeyWithData:destKey:destKeySize:error:",  v7,  v11,  88LL,  a5);
  if (v8)
  {
    uint64_t v9 = strnlen(v11, 0x58uLL);
    CC_SHA256(v11, v9, (unsigned __int8 *)a4);
  }

  return v8;
}

void sub_1000877E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087A0C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, AEAAuthData a13, uint64_t a14)
{
  if (a2 == 1)
  {
    id v19 = +[DIError nilWithDIException:description:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:description:error:",  __cxa_begin_catch(a1),  @"Error while creating AEA backend",  v15);
    objc_claimAutoreleasedReturnValue(v19);
    __cxa_end_catch();
    JUMPOUT(0x1000879F0LL);
  }

  _Unwind_Resume(a1);
}

void sub_100087CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087CB4(void *a1, uint64_t a2, ...)
{
}

void sub_100087D04(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100087E88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, void *a20, void *__p, std::string *buf, void *__pa, void *bufa, __int16 a25, uint64_t a26)
{
  __int16 v30 = __pa;
  __pa = 0LL;
  if (v30) {
    operator delete(v30);
  }
  if (a2 == 2)
  {
    id v31 = +[DIError nilWithDIException:description:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:description:error:",  __cxa_begin_catch(a1),  0LL,  v27);
    objc_claimAutoreleasedReturnValue(v31);
    __cxa_end_catch();
  }

  else
  {
    if (a2 != 1)
    {

      _Unwind_Resume(a1);
    }

    __cxa_begin_catch(a1);
    __cxa_end_catch();
    [v26 backend];
    sub_1000F0C80(&bufa, &a19);
    sub_1000114F0((uint64_t)&a19);
    sub_1000883C0((uint64_t)bufa, &a19);
    __int16 v32 = objc_alloc(&OBJC_CLASS___DiskImageParamsUDIF_XPC);
    uint64_t v33 = a19;
    a19 = 0LL;
    uint64_t buf = v33;
    -[DiskImageParamsUDIF_XPC initWithBackendXPC:header:](v32, "initWithBackendXPC:header:", v26, &buf);
    __int16 v34 = buf;
    uint64_t buf = 0LL;
    if (v34) {
      operator delete(v34);
    }
    int v35 = a19;
    a19 = 0LL;
    if (v35) {
      operator delete(v35);
    }
    sub_1000496C8(&bufa);
  }

  JUMPOUT(0x100087E4CLL);
}

__n128 sub_1000883C0@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x1F4uLL);
  *(void *)uint64_t v4 = 0x4796C6F6BLL;
  int v5 = *(_DWORD *)(a1 + 12);
  *((_DWORD *)v4 + 2) = 512;
  *((_DWORD *)v4 + 3) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v4 + 2) = v6;
  *((void *)v4 + 6) = *(void *)(a1 + 48);
  *((void *)v4 + 7) = *(void *)(a1 + 56);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  *((void *)v4 + 10) = *(void *)(a1 + 80);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v4 + 16_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v4 + sub_1000114F0(v1 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a1 + 216);
  __int128 v7 = *(_OWORD *)(a1 + 232);
  __int128 v8 = *(_OWORD *)(a1 + 248);
  __int128 v9 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v4 + 2sub_1000114F0(v1 + 64) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v4 + 280) = v9;
  *(_OWORD *)(v4 + 24_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(v4 + 232) = v7;
  __int128 v10 = *(_OWORD *)(a1 + 296);
  __int128 v11 = *(_OWORD *)(a1 + 312);
  __int128 v12 = *(_OWORD *)(a1 + 328);
  *((void *)v4 + 43) = *(void *)(a1 + 344);
  *(_OWORD *)(v4 + 312) = v11;
  *(_OWORD *)(v4 + 32_Block_object_dispose(va, 8) = v12;
  *(_OWORD *)(v4 + 296) = v10;
  *((void *)v4 + 44) = *(void *)(a1 + 352);
  *(_OWORD *)(v4 + 424) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(v4 + 456) = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(v4 + 472) = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(v4 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(v4 + 376) = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(v4 + 392) = *(_OWORD *)(a1 + 392);
  __n128 result = *(__n128 *)(a1 + 408);
  *(__n128 *)(v4 + 40_Block_object_dispose(va, 8) = result;
  *((_DWORD *)v4 + 122) = *(_DWORD *)(a1 + 488);
  *(void *)(v4 + 492) = *(void *)(a1 + 492);
  *a2 = v4;
  return result;
}

void sub_1000885A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088660(_Unwind_Exception *a1, int a2)
{
  __int128 v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Error encrypting new image",  v3);
    __cxa_end_catch();
    JUMPOUT(0x100088644LL);
  }

  _Unwind_Resume(a1);
}

void sub_10008877C(_Unwind_Exception *a1, int a2)
{
  __int128 v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Error encrypting new image",  v3);
    __cxa_end_catch();
    JUMPOUT(0x100088760LL);
  }

  _Unwind_Resume(a1);
}

void sub_100088878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088BA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100088BB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint8_t buf, int a27, __int16 a28, uint64_t a29, __int16 a30, uint64_t a31)
{
}

void sub_100088BF4()
{
}

#error "100088D3C: call analysis failed (funcsize=133)"
void sub_100088E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088E5C(_Unwind_Exception *a1)
{
}

void sub_100088E74(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x100088E7CLL);
  }
  sub_10000491C(a1);
}

void sub_100089038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100089B10( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint8_t buf,int a51,__int16 a52,__int16 a53,int a54,__int16 a55,__int16 a56,__int16 a57)
{
}

void sub_10008A04C(_Unwind_Exception *a1)
{
}

void sub_10008A070(_Unwind_Exception *a1)
{
}

void sub_10008A07C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000491C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008A098(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      sub_100016F4C();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_1000502FC(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    int v18 = v16;
    id v19 = &v16[24 * v12];
    uint64_t v20 = v19;
    int v21 = &v16[24 * v15];
    sub_10008DA3C(&v18, a3);
    uint64_t v4 = sub_10008DB88(a1, &v18, v4);
    sub_100050340((uint64_t)&v18);
  }

  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0LL;
    a3->n128_u64[1] = 0LL;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }

  else
  {
    sub_10008D9E4((uint64_t)a1, a2, v6, a2 + 24);
    sub_100014DF0(v4, (__int128 *)a3);
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }

  return v4;
}

void sub_10008A1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10008A204(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100016F4C();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_1000502FC(v4, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_100050298(a1, v16);
    uint64_t v8 = a1[1];
    sub_100050340((uint64_t)v16);
  }

  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }

  a1[1] = v8;
  return v8 - 24;
}

void sub_10008A324(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10008A540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008A640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008A748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008A820( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008AA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008AC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10008AE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "10008AFE0: call analysis failed (funcsize=169)"
void sub_10008B0FC()
{
  __cxa_end_catch();
  JUMPOUT(0x10008AE1CLL);
}

void sub_10008B13C(void *a1, int a2)
{
  if (a2) {
    sub_10000491C(a1);
  }
  JUMPOUT(0x10008AE1CLL);
}

void *sub_10008B14C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008ED00((uint64_t)a1, a2);
  *a1 = off_1001775C8;
  a1[45] = &off_1001776C8;
  a1[46] = &off_1001776F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001775C8;
  a1[45] = off_100177650;
  a1[46] = off_100177678;
  return a1;
}

void sub_10008B1D0(_Unwind_Exception *a1)
{
}

uint64_t sub_10008B1F4(uint64_t a1)
{
  return a1;
}

void sub_10008B29C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008B760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008B950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BA90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008BAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BE94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16LL))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_10008C1F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13)
{
}

void sub_10008C4F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_10008C5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D03C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);

  sub_1000114F0((uint64_t)va);
  sub_1000114F0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10008D46C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_10008D548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008D6A4(uint64_t a1, const void **a2)
{
  return 1LL;
}

id sub_10008D6D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100040504(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }

  int v3 = SHIBYTE(v11);
  uint64_t v4 = (void **)__p[0];
  NSStringEncoding v5 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding", __p[0], __p[1], v11);
  if (v3 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v6, v5));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  id v8 = [**(id **)(v2 + 24) getAEAKeyFromSAKSWithMetadata:v7 key:**(void **)(v2 + 32) error:**(void **)(v2 + 40)];

  return v8;
}

void sub_10008D79C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_10008D7C4(void ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  else {
    int v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v3, 4LL));
  NSStringEncoding v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v4));

  BOOL v6 = +[DIKeyRetriever KKMSKeyWithURL:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "KKMSKeyWithURL:destKey:destKeySize:error:",  v5,  **v2,  *v2[1],  *v2[2]);
  return v6;
}

void sub_10008D860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10008D87C(void *a1, uint64_t *a2)
{
  int v3 = (void **)*a1;
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  NSStringEncoding v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v4, 1LL));
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v5));

  BOOL v7 = +[DIKeyRetriever WKMSKeyWithURL:authData:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "WKMSKeyWithURL:authData:destKey:destKeySize:error:",  v6,  a2[3],  *v3[6],  *v3[7],  *v3[8]);
  return v7;
}

void sub_10008D920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008D93C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_100177590[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_10008D994(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  if (v2) {
    operator delete[](v2);
  }
}

void sub_10008D9A8(uint64_t a1, uint64_t a2)
{
}

void sub_10008D9BC(uint64_t a1, uint64_t a2)
{
}

void sub_10008D9D0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10008D9E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0LL;
      *(void *)(v9 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24LL;
      v9 += 24LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  return sub_10008DC3C(a2, v7, v6);
}

__n128 sub_10008DA3C(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v11 = v4 - v6;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556LL * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1LL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v28 = a1[4];
      unint64_t v15 = (char *)sub_1000502FC(v28, v13);
      BOOL v17 = &v15[24 * v14];
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2] - v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        int v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)int v21 = *(_OWORD *)v18;
          *(void *)unint64_t v18 = 0LL;
          *(void *)(v18 + _Block_object_dispose(va, 8) = 0LL;
          *((_DWORD *)v21 + 4) = *(_DWORD *)(v18 + 16);
          v21 += 24;
          v18 += 24LL;
        }

        while (v21 != v20);
        int64x2_t v22 = *(int64x2_t *)(a1 + 1);
      }

      else
      {
        int64x2_t v22 = vdupq_n_s64(v18);
        uint64_t v20 = &v15[24 * v14];
      }

      uint64_t v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v22;
      uint64_t v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      uint64_t v27 = v23;
      sub_100050340((uint64_t)&v25);
      uint64_t v4 = a1[2];
    }

    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -3 * (v8 >> 1);
      sub_10008DCB8(v5, v4, v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }

  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24LL;
  return result;
}

uint64_t sub_10008DB88(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      __int128 v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24LL;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24LL;
      *(void *)uint64_t v7 = 0LL;
      *(void *)(v7 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
    }

    while (v7 != v5);
  }

  a2[1] = v6;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
      *(void *)a3 = 0LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a3 + 16);
      v10 += 24LL;
      a3 += 24LL;
    }

    while (a3 != v9);
    uint64_t v6 = a2[1];
  }

  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10008DC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100014DF0(a3 - 24, (__int128 *)(v6 - 24));
      *(_DWORD *)(a3 - _Block_object_dispose(va, 8) = *(_DWORD *)(v6 - 8);
      a3 -= 24LL;
      v6 -= 24LL;
    }

    while (v6 != a1);
  }

  return a2;
}

uint64_t sub_10008DCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    sub_100014DF0(a3, (__int128 *)v4);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    a3 += 24LL;
    v4 += 24LL;
  }

  while (v4 != v5);
  return v5;
}

uint64_t sub_10008DD20(uint64_t result, int a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 4 * a4;
    do
    {
      int v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4LL;
    }

    while (v4);
  }

  if (a2)
  {
    uint64_t v6 = result;
    int v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10016D430;
    exception[1] = v6;
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = v7;
  }

  return result;
}

BOOL sub_10008DD9C(uint64_t a1)
{
  unint64_t v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 4)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    BOOL v3 = *(_DWORD *)v2 == 1936093281;
  }

  else
  {
    BOOL v3 = 0LL;
    if ((char)v6 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }

  return v3;
}

uint64_t sub_10008DE20(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177690);
  sub_10008DFE4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10008DE58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100177690);
  sub_10008DFE4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10008DE98(char *a1)
{
}

uint64_t sub_10008DEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008DF10(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10008DF5C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100177690);
  sub_10008DFE4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10008DF9C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100177690);
  sub_10008DFE4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10008DFE4(uint64_t a1)
{
  *(void *)a1 = off_100177760;
  sub_10008E080(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10008E080(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_1000049D8(a1 + 104, __p);
        sub_10008E1E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100004CB0(__p, "");
        sub_100004B48(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008E1A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E1D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008DFE4(a1);
  operator delete(v1);
}

int *sub_10008E1E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000B8654())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000B85DC();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 651LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000B85DC();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 651LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

  ;
}

void *sub_10008E3E4(void *a1)
{
  *a1 = off_1001777E0;
  sub_1000114F0((uint64_t)(a1 + 2));
  return a1;
}

void sub_10008E414(void *a1)
{
  *a1 = off_1001777E0;
  sub_1000114F0((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_10008E444(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_10008E44C(uint64_t a1)
{
}

uint64_t sub_10008E480()
{
  return 0LL;
}

uint64_t *sub_10008E488@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  int v4 = (uint64_t *)operator new(0x98uLL);
  uint64_t result = sub_1000863A0(v4, a1);
  *a2 = (char *)v4 + *(void *)(*v4 - 104);
  return result;
}

void sub_10008E4D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10008E4E8()
{
  return 4294967251LL;
}

__n128 sub_10008E4F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  __int128 v3 = *(_OWORD *)(a1 + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void *sub_10008E500(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_1001778E0;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_10008E54C(_Unwind_Exception *a1)
{
}

uint64_t sub_10008E560(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v9);
  int v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_10008E5F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10008E608()
{
  return -102LL;
}

uint64_t sub_10008E610()
{
  return 4294967251LL;
}

void *sub_10008E618(void *a1)
{
  *a1 = off_1001778E0;
  sub_1000114F0((uint64_t)(a1 + 2));
  return a1;
}

void sub_10008E648(void *a1)
{
  *a1 = off_1001778E0;
  sub_1000114F0((uint64_t)(a1 + 2));
  operator delete(a1);
}

void *sub_10008E678@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
  unint64_t v9 = a2[4];
  uint64_t v10 = *a2;
  __n128 result = sub_100118DDC();
  uint64_t v12 = result[1];
  *(void *)a3 = v10;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v15 = v6 / v7 * v7;
  unint64_t v16 = v8 - v15;
  unint64_t v17 = v5 + v6 + v7 - 1 - v15 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v17) {
    unint64_t v17 = v9;
  }
  if (v16 >= v17) {
    unint64_t v16 = v17;
  }
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

void *sub_10008E73C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &off_100177938;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10008E784(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_10008E79C(_Unwind_Exception *a1)
{
}

void sub_10008E7B4(std::__shared_weak_count *a1)
{
}

void sub_10008E7C8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t sub_10008E7D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *sub_10008E818(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &off_100177998;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10008E860(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_10008E878(_Unwind_Exception *a1)
{
}

void sub_10008E890(std::__shared_weak_count *a1)
{
}

void sub_10008E8A4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t sub_10008E8B4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *sub_10008E8F4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x1008uLL);
  __n128 result = sub_10008E964(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10008E950(_Unwind_Exception *a1)
{
}

void *sub_10008E964(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001779F8;
  uint64_t v8 = sub_1000CDAB8(*a2, a3);
  sub_1000CD364(a1 + 3, a2, a3, v8, v9, a4);
  return a1;
}

void sub_10008E9D0(_Unwind_Exception *a1)
{
}

void sub_10008E9E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001779F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008E9F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001779F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10008EA14(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

void *sub_10008EA24@<X0>( unsigned __int16 *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, unint64_t *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, _OWORD *a7@<X7>, void *a8@<X8>, __int128 *a9)
{
  unint64_t v17 = operator new(0x1008uLL);
  __n128 result = sub_10008EAD4(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_10008EAC0(_Unwind_Exception *a1)
{
}

void *sub_10008EAD4( void *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001779F8;
  unsigned int v10 = *a2;
  unsigned int v11 = *a3;
  unint64_t v12 = *a4;
  unint64_t v13 = *a5;
  __int128 v15 = *a9;
  char v16 = 1;
  sub_1000CDAAC((uint64_t)(a1 + 3), v10, v11, v12, v13, a6, a7, a8, &v15);
  return a1;
}

void sub_10008EB68(_Unwind_Exception *a1)
{
}

void sub_10008EB7C(char **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  sub_10008EBDC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_100018774((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10008EBC8(_Unwind_Exception *a1)
{
}

void *sub_10008EBDC(void *a1, char **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100177A48;
  sub_10008EC64(a1 + 3, a2);
  return a1;
}

void sub_10008EC10(_Unwind_Exception *a1)
{
}

void sub_10008EC24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100177A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008EC34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100177A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10008EC54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_10008EC64(void *a1, char **a2)
{
  uint64_t v3 = sub_1000FA260((uint64_t)__p, 514LL);
  sub_100045554((uint64_t)a1, v3, 1LL, 0);
  *a1 = off_100184E20;
  a1[3] = off_100184F00;
  a1[4] = off_100184F38;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10008ECE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008ED00(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100177760;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000B866C();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_1000114F0(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100004D60(a1 + 96);
  return a1;
}

void sub_10008ED68(_Unwind_Exception *a1)
{
}

void sub_10008ED7C(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  sub_10008EDE4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_100018774((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10008EDD0(_Unwind_Exception *a1)
{
}

void *sub_10008EDE4(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100177A98;
  sub_100117AF4(a1 + 3, a2, *a3);
  return a1;
}

void sub_10008EE1C(_Unwind_Exception *a1)
{
}

void sub_10008EE30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100177A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008EE40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100177A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10008EE60(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_10008EE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5 = a4 - a3 + 2;
  uint64_t v6 = ~(-1LL << v5) << a3;
  if (a4 - a3 == 62) {
    uint64_t v6 = -1LL;
  }
  int v7 = *a5;
  int v8 = a5[1];
  if (v7 != v8)
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v12 = 0LL;
      unint64_t v13 = v5 >> 1;
      uint64_t v14 = v7 | (2 * v8);
      do
      {
        uint64_t v12 = v14 | (4 * v12);
        --v13;
      }

      while (v13);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v15 = v12 << a3;
    char v16 = (unint64_t *)(*(void *)(a1 + 8) + 8 * a2);
    unint64_t v17 = *v16;
    unint64_t v18 = *v16 & ~v6 | v15;
    unint64_t v19 = __ldaxr(v16);
    if (v19 == v17)
    {
      if (!__stlxr(v18, v16))
      {
LABEL_21:
        BOOL v11 = v17 == v18;
        return !v11;
      }
    }

    else
    {
      __clrex();
    }

    uint64_t v20 = ~v6;
    do
    {
      while (1)
      {
        unint64_t v17 = v19;
        int v21 = (unint64_t *)(*(void *)(a1 + 8) + 8 * a2);
        unint64_t v18 = v19 & v20 | v15;
        unint64_t v19 = __ldaxr(v21);
        if (v19 == v17) {
          break;
        }
        __clrex();
      }
    }

    while (__stlxr(v18, v21));
    goto LABEL_21;
  }

  uint64_t v9 = (unint64_t *)(*(void *)(a1 + 8) + 8 * a2);
  if (*a5)
  {
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 | v6, v9));
    BOOL v11 = (v6 & ~v10) == 0;
  }

  else
  {
    do
      unint64_t v22 = __ldaxr(v9);
    while (__stlxr(v22 & ~v6, v9));
    BOOL v11 = (v22 & v6) == 0;
  }

  return !v11;
}

unint64_t sub_10008EF9C(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2LL * a4[1]) | (4 * v5);
      --v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if (a3 - a2 == 62) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = ~(-1LL << v4) << a2;
  }
  unint64_t v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555LL;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t sub_10008F014(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2LL * a4[1]) | (4 * v5);
      --v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if (a3 - a2 == 62) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = ~(-1LL << v4) << a2;
  }
  unint64_t v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555LL;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

uint64_t sub_10008F08C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 > a3 || *(void *)(a1 + 16) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v28);
    sub_100004E4C(v28, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v28, a2);
    sub_100004E4C(v28, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v28, a3);
    sub_10001161C((uint64_t)exception, (uint64_t)v28, 0x16u);
  }

  unint64_t v4 = a2 >> 6;
  uint64_t v5 = a2 & 0x3F;
  uint64_t v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    uint64_t v7 = v6 - v5 + 1;
    uint64_t v8 = ~(-1LL << v7) << v5;
    if (v7 == 64) {
      uint64_t v9 = -1LL;
    }
    else {
      uint64_t v9 = v8;
    }
    unint64_t v10 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v4);
    if ((_DWORD)a4)
    {
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 | v9, v10));
      uint64_t v5 = v9;
    }

    else
    {
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 & ~v9, v10));
      uint64_t v5 = 0LL;
    }

    LOBYTE(v5) = (v11 & v9) != v5;
  }

  else
  {
    unint64_t v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      uint64_t v5 = ~(-1LL << -(char)v5) << v5;
      unint64_t v13 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v4);
      if ((_DWORD)a4)
      {
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 | v5, v13));
        uint64_t v15 = v5;
      }

      else
      {
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 & ~v5, v13));
        uint64_t v15 = 0LL;
      }

      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }

    if (v6 != 63)
    {
      uint64_t v16 = -2LL << v6;
      uint64_t v17 = ~(-2LL << v6);
      unint64_t v18 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v12);
      if ((a4 & 1) != 0)
      {
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 | v17, v18));
        uint64_t v20 = v17;
      }

      else
      {
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 & v16, v18));
        uint64_t v20 = 0LL;
      }

      if ((v19 & v17) != v20) {
        LOBYTE(v5) = 1;
      }
      --v12;
    }

    if (v4 <= v12)
    {
      unint64_t v21 = a4 << 63 >> 63;
      do
      {
        unint64_t v22 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v4);
        do
          unint64_t v23 = __ldxr(v22);
        while (__stxr(v21, v22));
        LOBYTE(v5) = (v23 != v21) | v5;
        ++v4;
      }

      while (v4 <= v12);
    }
  }

  return v5 & 1;
}

void sub_10008F2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10008F304(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v20);
    sub_100004E4C(v20, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v20, a2);
    sub_100004E4C(v20, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v20, a3);
    sub_10001161C((uint64_t)exception, (uint64_t)v20, 0x16u);
  }

  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = v8 & 0x3F;
  if (a2 >> 6 == v8 >> 6) {
    return sub_10008EE70(a1, a2 >> 6, v10, v8 & 0x3F, a4);
  }
  unint64_t v13 = v8 >> 6;
  uint64_t v14 = (a2 & 0x3F) != 0 && sub_10008EE70(a1, v9++, v10, 62LL, a4);
  if (v11 <= 0x3D) {
    uint64_t v14 = sub_10008EE70(a1, v13--, 0LL, v11, a4) | v14;
  }
  unint64_t v15 = 0LL;
  uint64_t v16 = 32LL;
  do
  {
    unint64_t v15 = *a4 | (2LL * a4[1]) | (4 * v15);
    --v16;
  }

  while (v16);
  while (v9 <= v13)
  {
    uint64_t v17 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v9);
    if ((v14 & 1) != 0)
    {
      *uint64_t v17 = v15;
      uint64_t v14 = 1LL;
    }

    else
    {
      do
        unint64_t v18 = __ldxr(v17);
      while (__stxr(v15, v17));
      uint64_t v14 = v18 != v15;
    }

    ++v9;
  }

  return v14;
}

void sub_10008F4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_10008F514(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v26);
    sub_100004E4C(v26, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v26, a2);
    sub_100004E4C(v26, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v26, v4);
    sub_10001161C((uint64_t)exception, (uint64_t)v26, 0x16u);
  }

  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_10008EF9C(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
  }

  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_10008EF9C(v14, v10, 62LL, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
    }
    ++v9;
  }

  uint64_t v15 = 0LL;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v18 = 32LL;
  do
  {
    uint64_t v15 = *a4 | (2LL * a4[1]) | (4 * v15);
    --v18;
  }

  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v22 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v23 = sub_10008EF9C(v22, 0LL, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2) {
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0LL);
      }
    }
  }

  else
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = v9 << 6;
    while (((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555LL) == 0)
    {
      ++v9;
      v21 += 64LL;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }

  return v4;
}

void sub_10008F710(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_10008F744(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v27);
    sub_100004E4C(v27, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v27, a2);
    sub_100004E4C(v27, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v27, v4);
    sub_10001161C((uint64_t)exception, (uint64_t)v27, 0x16u);
  }

  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_10008F014(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
  }

  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_10008F014(v14, v10, 62LL, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
    }
    ++v9;
  }

  uint64_t v15 = 0LL;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v18 = 32LL;
  do
  {
    uint64_t v15 = *a4 | (2LL * a4[1]) | (4 * v15);
    --v18;
  }

  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v23 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v24 = sub_10008F014(v23, 0LL, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2) {
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0LL);
      }
    }
  }

  else
  {
    uint64_t v20 = v9 << 6;
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v9);
      unint64_t v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555LL;
      if (v22) {
        return __clz(__rbit64(v22)) + v20;
      }
      ++v9;
      v20 += 64LL;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }

  return v4;
}

void sub_10008F948(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10008F97C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63LL;
  if (v1 < 0x40) {
    return 1LL;
  }
  unint64_t v3 = v1 >> 6;
  unint64_t v4 = *(void **)(a1 + 8);
  if (v3 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*v4) {
    return 0LL;
  }
  uint64_t v6 = 1LL;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
  }

  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t sub_10008F9DC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63LL;
  if (v1 < 0x40) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v2 = 0LL;
  uint64_t v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  do
  {
    unint64_t v6 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + v4));
    unint64_t v8 = v6;
    BYTE6(v9) = 1;
    v2 += sub_10008FCFC((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (_BYTE *)&v9 + 6);
    v4 += 8LL;
  }

  while (v5 != v4);
  return v2;
}

uint64_t sub_10008FA8C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v7);
    sub_100004E4C(v7, (uint64_t)"Bit ", 4LL);
    std::ostream::operator<<(v7, a2);
    sub_100004E4C(v7, (uint64_t)" requested while there are only ", 32LL);
    std::ostream::operator<<(v7, *(void *)(a1 + 16));
    sub_100004E4C(v7, (uint64_t)" bits in the bitmap", 19LL);
    sub_10001161C((uint64_t)exception, (uint64_t)v7, 0x16u);
  }

  unint64_t v2 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_10008FB78(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10008FBAC(uint64_t a1, unint64_t a2, int a3)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100004D60((uint64_t)v10);
    sub_100004E4C(v10, (uint64_t)"Bit ", 4LL);
    std::ostream::operator<<(v10, a2);
    sub_100004E4C(v10, (uint64_t)" requested while there are only ", 32LL);
    std::ostream::operator<<(v10, *(void *)(a1 + 16));
    sub_100004E4C(v10, (uint64_t)" bits in the bitmap", 19LL);
    sub_10001161C((uint64_t)exception, (uint64_t)v10, 0x16u);
  }

  uint64_t v3 = 1LL << a2;
  uint64_t v4 = (unint64_t *)(*(void *)(a1 + 8) + 8 * (a2 >> 6));
  if (a3)
  {
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 | v3, v4));
  }

  else
  {
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 & ~v3, v4));
  }

  return (v5 & v3) == 0;
}

void sub_10008FCC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10008FCFC(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_10008FD1C(a1, a2, v5);
  }
  else {
    return sub_10008FDC0((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_10008FD1C(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1LL << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }

  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64LL;
    }

    while (a3 > 0x3F);
  }

  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }

  return v3;
}

uint64_t sub_10008FDC0(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1LL << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }

  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64LL;
    }

    while (a3 > 0x3F);
  }

  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }

  return v3;
}

uint64_t sub_10008FE6C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  sub_1000F969C(a1 + 16, "rings_queue");
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void sub_10008FEB0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  }
  else {
    sub_100091030(v3, a2);
  }
}

uint64_t sub_10008FED0(uint64_t a1)
{
  uint64_t v25 = 0LL;
  __int16 v26 = 0LL;
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    goto LABEL_37;
  }
  LODWORD(v3) = 0;
  int v4 = 0;
  uint64_t v5 = (dispatch_queue_t *)(a1 + 16);
  do
  {
    uint64_t v6 = sub_100090CBC(*(void *)(a1 + 8));
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    __dmb(9u);
    if ((*(_WORD *)(v6 + 2) & 1) != 0)
    {
      int v8 = 1;
      goto LABEL_8;
    }

    if (*(_BYTE *)(a1 + 24))
    {
      int v8 = 2;
LABEL_8:
      if (*(_BYTE *)(a1 + 24)) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      sub_100091414(*(void *)(a1 + 8), v6, v9);
      char v10 = *(_BYTE *)(v7 + 2);
      goto LABEL_12;
    }

    char v10 = *(_WORD *)(v6 + 2);
LABEL_12:
    *(_BYTE *)(a1 + 24) = v10 & 1;
    sub_100091108(*(void *)(a1 + 8), *(_DWORD *)(v7 + 8), &v23);
    if (v23)
    {
      if ((_DWORD)v3)
      {
        if (*(_DWORD *)(v7 + 8) != v4)
        {
          (*(void (**)(void))(v25 + 8))();
          uint64_t v3 = v26;
          uint64_t v25 = 0LL;
          __int16 v26 = 0LL;
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              unint64_t v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }

            LODWORD(v3) = 0;
          }
        }
      }

      if ((*(unsigned int (**)(void))(v23 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v23)(v23, v7);
        if (!v25)
        {
          int v4 = *(_DWORD *)(v7 + 8);
          sub_100026A1C(&v25, &v23);
          LODWORD(v3) = 1;
        }
      }

      else if (sub_100090E14((unsigned __int8 *)v7))
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 0x40000000LL;
        _OWORD v22[2] = sub_100090194;
        v22[3] = &unk_100177AF8;
        v22[4] = a1;
        v22[5] = v7;
        sub_1000F9730(v5, v22);
      }

      else
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 0x40000000LL;
        _OWORD v21[2] = sub_100090234;
        unint64_t v21[3] = &unk_100177B18;
        v21[4] = a1;
        v21[5] = v7;
        sub_1000F96B0(v5, v21);
      }
    }

    else
    {
      io_rings_return_status(*(void *)(a1 + 8), v7, 0xFFFFFFFA, 0);
    }

    unint64_t v13 = v24;
    if (v24)
    {
      unint64_t v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    unsigned int v16 = atomic_load((unsigned int *)a1);
  }

  while (v16 == 2);
  if ((_DWORD)v3) {
    (*(void (**)(void))(v25 + 8))();
  }
LABEL_37:
  uint64_t v17 = v26;
  if (v26)
  {
    uint64_t v18 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return 0LL;
}

void sub_100090164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100090194(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    io_rings_return_status(*(void *)(v1 + 8), *(void *)(a1 + 40), 0xFFFFFFA7, 0);
  }

  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000LL;
    void v4[2] = sub_100090220;
    v4[3] = &unk_100177AD8;
    uint64_t v3 = *(void *)(a1 + 40);
    void v4[4] = v1;
    _DWORD v4[5] = v3;
    sub_1000F96B0((dispatch_queue_t *)(v1 + 16), v4);
  }

void sub_100090220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_10008FEB0(v1, *(void *)(a1 + 40));
}

void sub_100090234(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_10008FEB0(v1, *(void *)(a1 + 40));
}

uint64_t sub_100090248(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    return 4294967260LL;
  }
  atomic_store(0, (unsigned int *)a1);
  sub_1000F9740((dispatch_object_t *)(a1 + 16));
  return 0LL;
}

void sub_10009027C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 1)
  {
    do
      unsigned int v3 = __ldaxr((unsigned int *)a1);
    while (__stlxr(1u, (unsigned int *)a1));
    if (v3 == 2) {
      sub_1000F9740((dispatch_object_t *)(a1 + 16));
    }
    sub_1000911C8(*(void *)(a1 + 8));
    sub_1000F9748((dispatch_object_t *)(a1 + 16));
    sub_10008FED0(a1);
    sub_1000F9738((dispatch_queue_t *)(a1 + 16), &stru_100177B58);
    sub_1000F9738((dispatch_queue_t *)(a1 + 16), &stru_100177B98);
  }

uint64_t sub_100090310(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_100090358(unsigned int a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = 4294967274LL;
  if (!a1 || !a2 || !a3 || !a4) {
    return v4;
  }
  if (*(_DWORD *)a2 > 1u) {
    return 4294967251LL;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if (v8 >= 0x10)
  {
    char v10 = *(_DWORD **)(a2 + 8);
    if (v10)
    {
      if (*v10) {
        return 4294967251LL;
      }
    }

    if (v8 >= 0x31
      && (*(_BYTE *)(a2 + 48) || memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v8 - 49)))
    {
      return 4294967251LL;
    }
  }

  unint64_t v11 = operator new(0x2D0uLL);
  bzero(v11, 0x2D0uLL);
  __int16 v36 = v11;
  *((_DWORD *)v11 + 17_Block_object_dispose(va, 8) = 2;
  unint64_t v12 = malloc(0x28uLL);
  if (!v12)
  {
    uint64_t v4 = 4294967284LL;
    goto LABEL_60;
  }

  unint64_t v13 = v12;
  *((void *)v12 + 4) = j__free;
  if (v8 >= 0x18)
  {
    v11[52] = *(void *)(a2 + 16);
    if (v8 >= 0x20)
    {
      v11[53] = *(void *)(a2 + 24);
      if (v8 >= 0x28)
      {
        v11[54] = *(void *)(a2 + 32);
      }
    }
  }

  v11[88] = a4;
  if (a1 >= 0x2000) {
    unsigned int v14 = 0x2000;
  }
  else {
    unsigned int v14 = a1;
  }
  if (a1 + 1 < 0x2000) {
    unsigned int v15 = a1 + 1;
  }
  else {
    unsigned int v15 = 0x2000;
  }
  if ((v15 & (v15 - 1)) != 0)
  {
    char v16 = 0;
    unsigned int v17 = 2 * v15;
    do
    {
      v17 >>= 1;
      ++v16;
    }

    while (v17 != 1);
    unsigned int v15 = 1 << v16;
  }

  uint64_t v18 = mmap(0LL, 88 * v14 + 8 + 4LL * v15, 3, 4097, 0, 0LL);
  unsigned int v19 = v15;
  else {
    uint64_t v20 = v18;
  }
  *unint64_t v11 = v20;
  uint64_t v21 = mmap(0LL, (16LL * v15) | 8, 3, 4097, 0, 0LL);
  else {
    unint64_t v22 = v21;
  }
  v11[1] = v22;
  uint64_t v4 = 4294967284LL;
  if (*v11 && v22)
  {
    sub_1000914BC((uint64_t)(v11 + 2));
    uint64_t v23 = *v11;
    uint64_t v24 = v11[1];
    __int128 v39 = &off_100177BF0;
    int8x16x4_t v40 = v11;
    char v41 = &v39;
    sub_100091638((uint64_t)(v11 + 2), v23, v24, v14, v19, v19, (uint64_t)&v39);
    uint64_t v25 = v41;
    if (v41 == &v39)
    {
      uint64_t v26 = 4LL;
      uint64_t v25 = &v39;
    }

    else
    {
      if (!v41) {
        goto LABEL_45;
      }
      uint64_t v26 = 5LL;
    }

    (*v25)[v26]();
LABEL_45:
    *((_BYTE *)v11 + 2sub_1000114F0(v1 + 64) = 1;
    sub_100091864((uint64_t)(v11 + 34));
    uint64_t v27 = *v11;
    uint64_t v28 = v11[1];
    __int128 v39 = &off_100177C70;
    int8x16x4_t v40 = v11;
    char v41 = &v39;
    v37[0] = &off_100177CF0;
    v37[1] = v11;
    unint64_t v38 = v37;
    sub_100091A64((uint64_t)(v11 + 34), v27, v28, v14, v19, v19, (uint64_t)&v39, (uint64_t)v37);
    int v29 = v38;
    if (v38 == v37)
    {
      uint64_t v30 = 4LL;
      int v29 = v37;
    }

    else
    {
      if (!v38) {
        goto LABEL_50;
      }
      uint64_t v30 = 5LL;
    }

    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_50:
    id v31 = v41;
    if (v41 == &v39)
    {
      uint64_t v32 = 4LL;
      id v31 = &v39;
    }

    else
    {
      if (!v41) {
        goto LABEL_55;
      }
      uint64_t v32 = 5LL;
    }

    (*v31)[v32]();
LABEL_55:
    *((_BYTE *)v11 + 40_Block_object_dispose(va, 8) = 1;
    if (*((_BYTE *)v11 + 264) && *((_BYTE *)v11 + 408))
    {
      uint64_t v4 = 0LL;
      uint64_t v33 = v36;
      *((_DWORD *)v36 + 17_Block_object_dispose(va, 8) = 0;
      _DWORD *v13 = *(_DWORD *)a2 != 0;
      v13[1] = 40;
      void v13[2] = *((_DWORD *)v33 + 34);
      void v13[3] = *((_DWORD *)v33 + 78) - 1;
      *((void *)v13 + 3) = v33;
      *a3 = v13;
      return v4;
    }

    uint64_t v4 = 4294967282LL;
  }

  free(v13);
  unint64_t v11 = v36;
LABEL_60:
  v11[88] = 0LL;
  sub_1000907F8((uint64_t)v11);
  __int16 v34 = v36;
  __int16 v36 = 0LL;
  if (v34) {
    sub_100091C20((uint64_t)&v36, v34);
  }
  return v4;
}

void sub_10009072C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v20 = a13;
  if (a13 == v17)
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  unint64_t v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    unint64_t v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_11:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100090670LL);
  }

  uint64_t v24 = a9;
  a9 = 0LL;
  if (v24) {
    sub_100091C20((uint64_t)&a9, v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = -22;
  }
  else {
    unsigned int v2 = 1;
  }
  if (a2 <= 0 && a1 == 0) {
    return v2;
  }
  else {
    return 4294967251LL;
  }
}

void sub_1000907F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 264) && *(_BYTE *)(a1 + 408))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 136);
    uint64_t v3 = *(unsigned int *)(a1 + 312);
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    sub_1000914BC(a1 + 16);
    sub_100091864(a1 + 272);
    if (*(void *)a1)
    {
      munmap(*(void **)a1, 4 * v4 + 88LL * v2 + 8);
      *(void *)a1 = 0LL;
    }

    uint64_t v5 = *(void **)(a1 + 8);
    if (v5)
    {
      munmap(v5, (16 * v3) | 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v6 = *(void *)(a1 + 704);
    *(void *)(a1 + 704) = 0LL;
    if (v6) {
      (*(void (**)(void))(v6 + 32))();
    }
    for (uint64_t i = 688LL; i != 432; i -= 16LL)
      sub_1000114F0(a1 + i);
    sub_100091B1C(a1 + 272);
    sub_100091BA4(a1 + 16);
    operator delete((void *)a1);
  }

uint64_t io_rings_setup(unsigned int a1, uint64_t a2, void *a3)
{
  uint64_t v6 = operator new(0x38uLL);
  void v6[6] = 0LL;
  uint64_t v7 = (dispatch_object_s ***)(v6 + 6);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)off_100177BB8;
  *((_OWORD *)v6 + 1) = *(_OWORD *)off_100177BC8;
  v6[4] = sub_100091CC4;
  v6[5] = 0LL;
  uint64_t v8 = sub_100090358(a1, a2, a3, (uint64_t)v6);
  if ((_DWORD)v8)
  {
    sub_100091CF8(v7, 0LL);
    operator delete(v6);
  }

  else
  {
    uint64_t v9 = *(void *)(*a3 + 24LL);
    v6[5] = v9;
    char v10 = (dispatch_object_s **)operator new(0x20uLL);
    sub_10008FE6C((uint64_t)v10, v9);
    sub_100091CF8(v7, v10);
  }

  return v8;
}

void sub_1000909AC(_Unwind_Exception *a1)
{
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3) {
    return 4294967194LL;
  }
  if (*(_DWORD *)(a1 + 712) == 2) {
    return 4294967207LL;
  }
  return sub_100091D34(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t v1 = sub_100090A28(a1 + 16);
  if (v1)
  {
    *(_DWORD *)(v1 + 12) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_DWORD *)(v1 + 1) = 0;
    *(_DWORD *)(v1 + 4) = 0;
  }

  return result;
}

uint64_t sub_100090A28(uint64_t a1)
{
  uint64_t v2 = sub_100091F70((void *)(a1 + 104));
  if (v2 < 0) {
    return 0LL;
  }
  uint64_t v3 = (unsigned int *)(a1 + 48);
  do
    unsigned int v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  uint64_t v5 = (unsigned int *)(a1 + 8);
  do
    unsigned int v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_DWORD *)(*(void *)(a1 + 24) + 4LL * (*(_DWORD *)(a1 + 44) & v6)) = v2;
  return *(void *)(a1 + 96) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return sub_100090AA4(a1 + 272);
}

uint64_t sub_100090AA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    unsigned int v2 = atomic_load(*(unsigned int **)a1);
    *(_DWORD *)(a1 + 92) = v2;
    __dmb(9u);
    *(_BYTE *)(a1 + 96) = 0;
  }

  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 16));
  sub_100091FF4(a1, (uint64_t)&v5);
  if (!v7) {
    return 0LL;
  }
  if (v3 == *(_DWORD *)(a1 + 92)) {
    *(_BYTE *)(a1 + 96) = 1;
  }
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  return result;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712)) {
    return 4294967274LL;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 16LL);
  if (!v3 || (uint64_t result = v3(), !(_DWORD)result))
  {
    sub_100091124(a1 + 448);
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 712) = 1;
  }

  return result;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return -16LL;
  }
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 8LL);
  if (v2 && (int v3 = v2()) != 0)
  {
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    unint64_t v7 = sub_100092120(a1 + 16);
    if ((v7 & 0xFF00000000LL) != 0)
    {
      uint64_t v5 = 0LL;
      do
      {
        uint64_t v8 = *(void *)(a1 + 112);
        if (!v8) {
          break;
        }
        uint64_t v9 = v8 + 88LL * v7;
        sub_100090D9C(a1 + 272, *(void *)(v9 + 16), 0x1FFFFFFA7LL, 0);
        unint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((v9 - *(void *)(a1 + 112)) >> 3);
        uint64_t v11 = 1LL << v10;
        unint64_t v12 = (unint64_t *)(*(void *)(a1 + 128) + 8 * (v10 >> 6));
        do
          unint64_t v13 = __ldaxr(v12);
        while (__stlxr(v13 | v11, v12));
        ++v5;
        unint64_t v7 = sub_100092120(a1 + 16);
      }

      while ((v7 & 0xFF00000000LL) != 0);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_100090CBC(uint64_t a1)
{
  unint64_t v2 = sub_100092120(a1 + 16);
  if ((v2 & 0xFF00000000LL) != 0) {
    return *(void *)(a1 + 112) + 88LL * v2;
  }
  else {
    return 0LL;
  }
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
}

void sub_100090D08(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = 0LL;
  int v6 = 0LL;
  sub_1000923B8((uint64_t *)(a1 + 16LL * a2), &v5);
  unint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_100090D70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void io_rings_release(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 712) == 2) {
      sub_1000907F8(a1);
    }
  }

uint64_t sub_100090D9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = sub_100092294(a1, a2, a3);
  if (!(_DWORD)result) {
    return sub_100091D34(a1, 1, a4);
  }
  if ((_DWORD)result == -28)
  {
    unint64_t v7 = (unsigned int *)(a1 + 100);
    do
      unsigned int v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8) {
      sub_100092378(a1 + 104, 0, 4);
    }
    return 4294967268LL;
  }

  return result;
}

BOOL sub_100090E14(unsigned __int8 *a1)
{
  return *a1 == 5;
}

uint64_t sub_100090E24(uint64_t a1, uint64_t a2)
{
  return sub_100090E2C(a1 + 448, a2);
}

uint64_t sub_100090E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 1LL;
  while (1)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    BOOL v6 = sub_100092410((void *)(a1 + 16 * v3), &v19, &v17);
    unint64_t v7 = v18;
    if (v18)
    {
      unsigned int v8 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    unint64_t v10 = v20;
    if (v20)
    {
      uint64_t v11 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    if (v6) {
      break;
    }
    if (++v3 == 16)
    {
      uint64_t v3 = 4294967268LL;
      break;
    }
  }

  unint64_t v13 = v22;
  if (v22)
  {
    unsigned int v14 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return v3;
}

void sub_100090F5C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = sub_100091348(a1 + 144, a2);
  __int16 v9 = *(_WORD *)(a2 + 2);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3LL * ((a2 - *(void *)(a1 + 112)) >> 3);
  uint64_t v12 = 1LL << v11;
  unint64_t v13 = (unint64_t *)(*(void *)(a1 + 128) + 8 * (v11 >> 6));
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 | v12, v13));
  if ((v9 & 4) != 0) {
    int v15 = 0;
  }
  else {
    int v15 = v8;
  }
  return sub_100090D9C(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v15);
}

void sub_100091030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    uint64_t v8 = 0LL;
    __int16 v9 = 0LL;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }

  sub_1000925E8((void *)(a1 + 16 * v4 + 448), &v8);
  if (!v8) {
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_1000910F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100091108(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 5)
  {
    sub_1000925E8((void *)(a1 + 16LL * a2 + 448), a3);
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }

void sub_100091124(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    sub_1000925E8((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 24))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_1000911B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000911C8(uint64_t a1)
{
}

void sub_1000911D0(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    sub_1000925E8((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 40))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_100091260( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100091274(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(unsigned int **)(a1 + 112);
  if (a3)
  {
    if (v8) {
      *((_BYTE *)v8 + 4) = 1;
    }
    uint64_t v8 = (unsigned int *)operator new(8uLL);
    *uint64_t v8 = 0;
    *((_BYTE *)v8 + 4) = 0;
    *(void *)(a1 + sub_1000114F0(v1 + 112) = v8;
  }

  else if (a4 && v8)
  {
    *((_BYTE *)v8 + 4) = 1;
  }

  do
    unsigned int v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  uint64_t v10 = *(void *)(a1 + 112);
  *(void *)&__int128 v11 = a2;
  *((void *)&v11 + 1) = v10;
  sub_100092640(a1 + 64, &v11, &v11);
  if (a4) {
    *(void *)(a1 + sub_1000114F0(v1 + 112) = 0LL;
  }
  ++*(void *)(a1 + 104);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_100091330(_Unwind_Exception *a1)
{
}

uint64_t sub_100091348(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  if (*(void *)(a1 + 104))
  {
    std::mutex::lock((std::mutex *)a1);
    uint64_t v3 = sub_100092AC4((void *)(a1 + 64), &v7);
    if (v3)
    {
      --*(void *)(a1 + 104);
      uint64_t v4 = v3[3];
      sub_100092BB0((void *)(a1 + 64), v3);
      std::mutex::unlock((std::mutex *)a1);
      if (v4)
      {
        do
          unsigned int v5 = __ldaxr((unsigned int *)v4);
        while (__stlxr(v5 - 1, (unsigned int *)v4));
        if (v5 != 1 || !*(_BYTE *)(v4 + 4)) {
          return 0LL;
        }
        operator delete((void *)v4);
      }
    }

    else
    {
      std::mutex::unlock((std::mutex *)a1);
    }
  }

  return 1LL;
}

void sub_100091400(_Unwind_Exception *a1)
{
}

void sub_100091414(uint64_t a1, uint64_t a2, int a3)
{
  sub_100091274(a1 + 144, a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(char *a1, unsigned int *a2)
{
  uint64_t v4 = sub_10005F748();
  sub_100004CB0(__p, a1);
  uint64_t v5 = sub_100060354(v4, (uint64_t)__p, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_10009149C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000914BC(uint64_t result)
{
  if (*(_BYTE *)(result + 248))
  {
    uint64_t v1 = result;
    unint64_t v2 = (std::mutex *)(result + 128);
    sub_100091538(result + 192);
    std::mutex::~mutex(v2);
    uint64_t v3 = *(void **)(v1 + 112);
    *(void *)(v1 + sub_1000114F0(v1 + 112) = 0LL;
    if (v3) {
      operator delete[](v3);
    }
    uint64_t result = *(void *)(v1 + 80);
    if (result == v1 + 56)
    {
      uint64_t v4 = 4LL;
      uint64_t result = v1 + 56;
    }

    else
    {
      if (!result)
      {
LABEL_9:
        *(_BYTE *)(v1 + 24_Block_object_dispose(va, 8) = 0;
        return result;
      }

      uint64_t v4 = 5LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v4))();
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_100091538(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_100091588(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_100177BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000915BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100177BF0;
  a2[1] = v2;
  return result;
}

uint64_t (**sub_1000915D8(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (***)(void))(*(void *)(a1 + 8) + 704LL);
  if (*result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t sub_1000915F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10009162C()
{
  return &off_100177C50;
}

uint64_t sub_100091638( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10 = a4;
  *(void *)&__int128 v13 = a2 + 88LL * a4;
  *((void *)&v13 + 1) = a5;
  uint64_t v11 = sub_100091728(a1, a2 + 4LL * a5 + 88LL * a4, a3 + 16LL * a6 + 4, &v13, a5, a7);
  *(void *)(v11 + 96) = a2;
  sub_1000917A8((void *)(v11 + 104), v10);
  *(_DWORD *)(a1 + 120) = a4;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 850045863LL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + sub_1000114F0(v1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + sub_100014E54(v1 - 240) = 0LL;
  return a1;
}

void sub_1000916EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 80);
  if (v3 == (void *)(v1 + 56))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v1 + 56);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100091728(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    char v7 = 0;
    unsigned int v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }

    while (v8 != 1);
    a5 = 1 << v7;
  }

  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  sub_1000118C0(a1 + 56, a6);
  *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  return a1;
}

void *sub_1000917A8(void *a1, uint64_t a2)
{
  char v2 = a2;
  *a1 = a2;
  unint64_t v4 = a2 + 63;
  unint64_t v5 = (unint64_t)(a2 + 63) >> 6;
  uint64_t v6 = (unint64_t *)operator new[](8 * v5);
  char v7 = v6;
  if (v4 > 0x3F)
  {
    bzero(v6, 8 * v5);
    a1[1] = v7;
    unint64_t v8 = v5 + 1;
    unsigned int v9 = v7;
    do
    {
      atomic_store(0xFFFFFFFFFFFFFFFFLL, v9++);
      --v8;
    }

    while (v8 > 1);
  }

  else
  {
    a1[1] = v6;
  }

  if ((v2 & 0x3F) != 0)
  {
    uint64_t v10 = &v7[v5 - 1];
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 & ~(-1LL << (v2 & 0x3F)), v10));
  }

  return a1;
}

uint64_t sub_100091864(uint64_t result)
{
  if (*(_BYTE *)(result + 136))
  {
    uint64_t v1 = result;
    char v2 = (void *)(result + 104);
    uint64_t v3 = *(void **)(result + 128);
    if (v3 == v2)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v2;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    uint64_t result = *(void *)(v1 + 80);
    if (result == v1 + 56)
    {
      uint64_t v5 = 4LL;
      uint64_t result = v1 + 56;
    }

    else
    {
      if (!result)
      {
LABEL_12:
        *(_BYTE *)(v1 + 136) = 0;
        return result;
      }

      uint64_t v5 = 5LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v5))();
    goto LABEL_12;
  }

  return result;
}

void *sub_1000918F4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_100177C70;
  result[1] = v3;
  return result;
}

uint64_t sub_100091928(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100177C70;
  a2[1] = v2;
  return result;
}

uint64_t sub_100091944(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 432);
  if (v2) {
    return v2(result, *(void *)(result + 440));
  }
  return result;
}

uint64_t sub_10009195C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100091998()
{
  return &off_100177CD0;
}

void *sub_1000919AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_100177CF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000919E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100177CF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000919FC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 416);
  if (v4) {
    return v4(result, *(void *)(result + 424), *a2, a3);
  }
  return result;
}

uint64_t sub_100091A1C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100091A58()
{
  return &off_100177D60;
}

uint64_t sub_100091A64( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  *(void *)&__int128 v12 = a3;
  *((void *)&v12 + 1) = a6;
  uint64_t v10 = sub_100091728(a1, a3 + 16LL * a6, 4LL * a5 + 88LL * a4 + a2 + 4, &v12, a6, a7);
  *(_BYTE *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  sub_1000118C0(v10 + 104, a8);
  return a1;
}

void sub_100091AE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 80);
  if (v3 == (void *)(v1 + 56))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v1 + 56);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100091B1C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 136)) {
    return a1;
  }
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2 == (void *)(a1 + 104))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 104);
    goto LABEL_6;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  uint64_t v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 56))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 56);
    goto LABEL_11;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

uint64_t sub_100091BA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248))
  {
    sub_100091538(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    uint64_t v2 = *(void **)(a1 + 112);
    *(void *)(a1 + sub_1000114F0(v1 + 112) = 0LL;
    if (v2) {
      operator delete[](v2);
    }
    uint64_t v3 = *(void **)(a1 + 80);
    if (v3 == (void *)(a1 + 56))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(a1 + 56);
      goto LABEL_8;
    }

    if (v3)
    {
      uint64_t v4 = 5LL;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }

  return a1;
}

void sub_100091C20(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[88];
    a2[88] = 0LL;
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    for (uint64_t i = 86LL; i != 54; i -= 2LL)
      sub_1000114F0((uint64_t)&a2[i]);
    sub_100091B1C((uint64_t)(a2 + 34));
    sub_100091BA4((uint64_t)(a2 + 2));
    operator delete(a2);
  }

uint64_t sub_100091C90(uint64_t a1)
{
  return sub_10008FED0(*(void *)(a1 + 48));
}

uint64_t sub_100091C98(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_100091CB4(uint64_t a1)
{
  return sub_100090248(*(void *)(a1 + 48));
}

uint64_t sub_100091CBC(uint64_t a1)
{
  return sub_100090310(*(void *)(a1 + 48));
}

void sub_100091CC4(dispatch_object_s ***a1)
{
  if (a1)
  {
    sub_100091CF8(a1 + 6, 0LL);
    operator delete(a1);
  }

void sub_100091CF8(dispatch_object_s ***a1, dispatch_object_s **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_1000F95F0(v2 + 2);
    operator delete(v2);
  }

uint64_t sub_100091D34(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = (unsigned int *)(a1 + 52);
  int v5 = *(_DWORD *)(a1 + 52);
  unsigned int v6 = __ldaxr((unsigned int *)(a1 + 52));
  if (v6 != v5)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      unsigned int v7 = __ldaxr(v4);
      if (v7 != v6) {
        break;
      }
      if (__stlxr((v6 + 2 * a2) | a3, v4)) {
        goto LABEL_9;
      }
      int v8 = 1;
LABEL_10:
      unsigned int v6 = v7;
      if (v8) {
        goto LABEL_11;
      }
    }

    __clrex();
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }

  if (__stlxr((v5 + 2 * a2) | a3, v4)) {
    goto LABEL_5;
  }
LABEL_11:
  unsigned int v9 = (unsigned int *)(a1 + 48);
  do
  {
    unsigned int v10 = __ldaxr(v9);
    unsigned int v11 = v10 - a2;
  }

  while (__stlxr(v11, v9));
  if (!v11)
  {
    __int128 v12 = (unsigned __int8 *)(a1 + 89);
    do
      unsigned __int8 v13 = __ldaxr(v12);
    while (__stlxr(1u, v12));
    if ((v13 & 1) == 0)
    {
      while (1)
      {
        unint64_t v14 = *v4;
        if (atomic_load(v9)) {
          break;
        }
        unsigned int v16 = __ldaxr(v4);
        if (v16 == (_DWORD)v14)
        {
          if (!__stlxr(0, v4))
          {
            unint64_t v17 = (v14 >> 1) | ((v14 & 1) << 32);
            goto LABEL_23;
          }
        }

        else
        {
          __clrex();
        }
      }

      unint64_t v17 = 0LL;
LABEL_23:
      unint64_t v18 = HIDWORD(v17);
      uint64_t v19 = (unsigned __int8 *)(a1 + 88);
      if ((_DWORD)v17)
      {
LABEL_24:
        __dmb(0xBu);
        uint64_t v20 = *(unsigned int **)a1;
        do
          unsigned int v21 = __ldaxr(v20);
        while (__stlxr(v21 + v17, v20));
        unsigned int v22 = atomic_load(*(unsigned int **)(a1 + 16));
        if ((_DWORD)v17 + v21 != v22 && (_DWORD)v18 != 0)
        {
          while (1)
          {
            int v24 = __ldaxr(v19);
            if (v24 != 1) {
              break;
            }
            if (!__stlxr(0, v19))
            {
              uint64_t v25 = *(void *)(a1 + 80);
              if (!v25) {
                sub_100016D94();
              }
              (*(void (**)(uint64_t))(*(void *)v25 + 48LL))(v25);
              goto LABEL_34;
            }
          }

LABEL_39:
          __clrex();
        }

  ++*(void *)(a1 + 24);
  return i;
}

    unsigned int v11 = 0;
    goto LABEL_44;
  }

  int v15 = *(void *)(a1 + 56);
  unsigned int v16 = *(unint64_t **)(a1 + 160);
  unint64_t v17 = *v16;
  if (*v16 >= v15) {
    unsigned int v10 = *(void *)(a1 + 56);
  }
  else {
    unsigned int v10 = *v16;
  }
  if (v10 <= v3) {
    unsigned int v10 = v3;
  }
  if (v10 < v15 && v10 < v17) {
    goto LABEL_39;
  }
  if (v10 >= v17)
  {
    unint64_t v17 = v16[1];
  }

  else
  {
    if (v17 >= *(void *)(a1 + 64)) {
      unint64_t v17 = *(void *)(a1 + 64);
    }
    unsigned int v16 = (unint64_t *)(a1 + 56);
  }

  unsigned int v11 = *((_DWORD *)v16 + 6);
  uint64_t v3 = v10;
  if (*(void *)(a1 + 24) >= v17) {
    unsigned int v10 = v17;
  }
  else {
    unsigned int v10 = *(void *)(a1 + 24);
  }
LABEL_44:
  *(void *)a3 = v3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v10;
  *(_BYTE *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

  if (v9 >= v10)
  {
    unsigned int v22 = v9;
  }

  else
  {
    unsigned int v21 = *v10;
    unsigned int v22 = v9;
    uint64_t v23 = v10;
    do
    {
      int v24 = v22[1];
      uint64_t v25 = v23[1];
      *unsigned int v22 = v21;
      v22[1] = v25;
      const char *v23 = v5;
      v23[1] = v24;
      unsigned int v26 = v22;
      do
      {
        uint64_t v27 = v22[2];
        v22 += 2;
        int v5 = v27;
        unsigned int v28 = v27 == v3;
        if (v27 >= v3) {
          unsigned __int8 v29 = 1;
        }
        else {
          unsigned __int8 v29 = -1;
        }
        if (v28)
        {
          unsigned int v30 = v26[3];
          id v31 = v30 == v4;
          unsigned __int8 v29 = v30 >= v4 ? 1 : -1;
          if (v31) {
            unsigned __int8 v29 = 0;
          }
        }

        unsigned int v26 = v22;
      }

      while (v29 < 0);
      unsigned int v32 = v23;
      do
      {
        uint64_t v33 = *(v23 - 2);
        v23 -= 2;
        unsigned int v21 = v33;
        __int16 v34 = v33 == v3;
        if (v33 >= v3) {
          int v35 = 1;
        }
        else {
          int v35 = -1;
        }
        if (v34)
        {
          __int16 v36 = *(v32 - 1);
          int v37 = v36 == v4;
          int v35 = v36 >= v4 ? 1 : -1;
          if (v37) {
            int v35 = 0;
          }
        }

        unsigned int v32 = v23;
      }

      while ((v35 & 0x80) == 0);
    }

    while (v22 < v23);
  }

  if (v22 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  }
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

      unsigned int v22 = 1;
      goto LABEL_40;
    }
  }

  else
  {
  }

  unsigned int v22 = 0;
  if (a3) {
    *a3 = v8;
  }
LABEL_40:

  return v22;
}

LABEL_40:
      atomic_store(0, v12);
      __dmb(0xBu);
      if (*v4)
      {
        do
LABEL_41:
          unsigned __int8 v29 = __ldaxr(v12);
        while (__stlxr(1u, v12));
        if ((v29 & 1) == 0)
        {
          while (1)
          {
            unsigned int v30 = *v4;
            if (atomic_load(v9)) {
              break;
            }
            unsigned int v32 = __ldaxr(v4);
            if (v32 == v30)
            {
              if (!__stlxr(0, v4))
              {
                if (v30 > 1)
                {
                  LODWORD(v1_Block_object_dispose(va, 8) = v30 & 1;
                  LODWORD(v17) = v30 >> 1;
                  if ((_DWORD)v17) {
                    goto LABEL_24;
                  }
                  goto LABEL_40;
                }

                break;
              }
            }

            else
            {
              __clrex();
            }
          }

          atomic_store(0, v12);
          __dmb(0xBu);
          if (*v4)
          {
            if (!atomic_load(v9)) {
              goto LABEL_41;
            }
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_100091F70(void *a1)
{
  unint64_t v1 = *a1 + 63LL;
  if (v1 >= 0x40)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    uint64_t v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          unint64_t v6 = atomic_load(v3);
          if (!v6) {
            break;
          }
          unint64_t v7 = __clz(__rbit64(v6));
          do
            unint64_t v8 = __ldaxr(v3);
          while (__stlxr(v8 & ~(1LL << v7), v3));
          if ((v8 & (1LL << v7)) != 0) {
            return v7 + 8LL * ((void)v3 - a1[1]);
          }
        }
      }

      ++v3;
    }

    while (v3 != v4);
  }

  return -1LL;
}

uint64_t sub_100091FF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (unsigned __int8 *)(result + 88);
  while (1)
  {
    unsigned int v3 = atomic_load(*(unsigned int **)result);
    unsigned int v4 = atomic_load(*(unsigned int **)(result + 16));
    if (v3 == v4) {
      break;
    }
LABEL_8:
    unsigned int v9 = atomic_load(*(unsigned int **)(result + 16));
    unsigned int v10 = atomic_load(*(unsigned int **)result);
    if (v9 != v10)
    {
      unsigned int v11 = *(unsigned int **)(result + 16);
      unsigned int v12 = __ldaxr(v11);
      if (v12 == v9)
      {
        if (!__stlxr(v9 + 1, v11))
        {
          char v13 = 1;
LABEL_15:
          if ((v13 & 1) != 0) {
            goto LABEL_23;
          }
          while (2)
          {
            unsigned int v9 = v12;
            unsigned int v10 = atomic_load(*(unsigned int **)result);
            if (v12 == v10) {
              goto LABEL_9;
            }
            unint64_t v14 = *(unsigned int **)(result + 16);
            unsigned int v15 = __ldaxr(v14);
            if (v15 == v12)
            {
              if (!__stlxr(v12 + 1, v14))
              {
                char v16 = 1;
                goto LABEL_22;
              }
            }

            else
            {
              __clrex();
            }

            char v16 = 0;
LABEL_22:
            unsigned int v12 = v15;
            if ((v16 & 1) != 0) {
              goto LABEL_23;
            }
            continue;
          }
        }
      }

      else
      {
        __clrex();
      }

      char v13 = 0;
      goto LABEL_15;
    }

unint64_t sub_100092120(uint64_t a1)
{
  unsigned int v1 = atomic_load(*(unsigned int **)a1);
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2)
  {
    unsigned int v3 = (unsigned __int8 *)(a1 + 88);
    do
      unsigned __int8 v4 = __ldaxr(v3);
    while (__stlxr(1u, v3));
    if ((v4 & 1) != 0
      || (v5 = atomic_load(*(unsigned int **)a1), unsigned int v6 = atomic_load(*(unsigned int **)(a1 + 16)), v5 == v6))
    {
      LOBYTE(a1) = 0;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v9 = 0;
    }

    else
    {
      while (1)
      {
        int v10 = __ldaxr(v3);
        if (v10 != 1) {
          break;
        }
        if (!__stlxr(0, v3)) {
          goto LABEL_9;
        }
      }

      LOBYTE(a1) = 0;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v9 = 0;
      __clrex();
    }
  }

  else
  {
LABEL_9:
    unsigned int v11 = atomic_load(*(unsigned int **)(a1 + 16));
    unsigned int v12 = atomic_load(*(unsigned int **)a1);
    if (v11 != v12)
    {
      char v13 = *(unsigned int **)(a1 + 16);
      unsigned int v14 = __ldaxr(v13);
      if (v14 == v11)
      {
        if (__stlxr(v11 + 1, v13)) {
          goto LABEL_14;
        }
LABEL_20:
        if (v11 != v12)
        {
          unint64_t v7 = 0LL;
          LODWORD(a1) = *(_DWORD *)(*(void *)(a1 + 24) + 4LL * (*(_DWORD *)(a1 + 44) & v11));
          int v9 = a1 & 0xFFFFFF00;
          uint64_t v8 = (uint64_t)&_mh_execute_header;
          return v8 | v7 | v9 | a1;
        }
      }

      else
      {
        __clrex();
LABEL_14:
        while (1)
        {
          unsigned int v12 = atomic_load(*(unsigned int **)a1);
          if (v14 == v12) {
            break;
          }
          unsigned int v11 = v14;
          unsigned int v15 = *(unsigned int **)(a1 + 16);
          unsigned int v14 = __ldaxr(v15);
          if (v14 == v11)
          {
            if (!__stlxr(v11 + 1, v15)) {
              goto LABEL_20;
            }
          }

          else
          {
            __clrex();
          }
        }
      }
    }

    a1 = sub_100092120();
    int v9 = a1 & 0xFFFFFF00;
    unint64_t v7 = a1 & 0xFFFFFF0000000000LL;
    uint64_t v8 = a1 & 0xFF00000000LL;
  }

  return v8 | v7 | v9 | a1;
}

uint64_t sub_100092294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (unsigned int *)(a1 + 48);
  do
    unsigned int v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  unsigned int v5 = (unsigned int *)(a1 + 8);
  unsigned int v6 = atomic_load((unsigned int *)(a1 + 8));
  unsigned int v7 = atomic_load(*(unsigned int **)(a1 + 16));
  unsigned int v8 = v7 - v6;
  if (v7 - v6 != 1)
  {
    while (v8 != 1 - *(_DWORD *)(a1 + 40))
    {
      unsigned int v9 = __ldaxr(v5);
      if (v9 == v6)
      {
        if (!__stlxr(v6 + 1, v5))
        {
          uint64_t v13 = 0LL;
          unsigned int v14 = (void *)(*(void *)(a1 + 24) + 16LL * (*(_DWORD *)(a1 + 44) & v6));
          *unsigned int v14 = a2;
          v14[1] = a3;
          return v13;
        }
      }

      else
      {
        __clrex();
      }

      unsigned int v10 = atomic_load(*(unsigned int **)(a1 + 16));
      unsigned int v8 = v10 - v9;
      unsigned int v6 = v9;
      if (v8 == 1) {
        goto LABEL_10;
      }
    }
  }

  do
LABEL_10:
    unsigned int v11 = __ldaxr(v3);
  while (__stlxr(v11 - 1, v3));
  if (v11 == 1) {
    sub_100091D34(a1, 0, 1);
  }
  return 4294967268LL;
}

uint64_t sub_100092378(uint64_t a1, int a2, int a3)
{
  int v6 = a3;
  int v5 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100016D94();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48LL))(v3, &v5, &v6);
}

void sub_1000923B8(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL sub_100092410(void *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  unsigned int v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    sub_100026A1C(a1, a3);
    unsigned int v9 = v7;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    sub_100026A1C(a2, a1);
    unsigned int v9 = v8;
  }

  std::__sp_mut::unlock(sp_mut);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return v7 == v8;
}

void sub_1000924EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100092500(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  *unsigned int v4 = &off_100177D80;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100092544(void *a1)
{
}

void sub_10009255C(_Unwind_Exception *a1)
{
}

void sub_100092574(std::__shared_weak_count *a1)
{
}

uint64_t sub_100092588(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48LL))();
}

uint64_t sub_1000925A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1000925E8(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  std::__sp_mut::unlock(sp_mut);
}

void *sub_100092640(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  void *i = 0LL;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100092890(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }

  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_10009287C(_Unwind_Exception *a1)
{
}

void sub_100092890(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_10009296C(a1, prime);
  }

void sub_10009296C(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000116A8();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void *sub_100092AC4(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t sub_100092BB0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_100092BF0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __int128 __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_100092BF0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  *unint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose(va, 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_100092D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &off_100177E28;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)a1 = off_100177DE0;
  sub_1000E46E8(a1 + 48, (void *)(a2 + 48));
  sub_1000E46E8(a1 + 96, (void *)(a2 + 96));
  unint64_t v7 = *(_OWORD **)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + sub_1000114F0(v1 + 152) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    unint64_t v7 = *(_OWORD **)(a1 + 144);
  }

  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_100092DC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100092DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  *(void *)a1 = &off_100177E28;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  uint64_t v10 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = a4;
  *(void *)a1 = off_100177DE0;
  sub_1000E46E8(a1 + 48, a5);
  sub_1000E46E8(a1 + 96, a6);
  sub_100093970(a7, (void *)(a1 + 144));
  unint64_t v11 = *(uint64_t **)(a1 + 144);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v12;
  if (v12 == v13) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *(void *)(v12 - 24);
  }
  if (*(void *)(a1 + 24) > v14) {
    unint64_t v14 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = 2;
  return a1;
}

void sub_100092EB8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100092EFC@<W0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  while (v7 != v6 && *(void *)(v7 + 8) <= a2)
  {
    v7 += 32LL;
    *(void *)(a1 + 160) = v7;
  }

  while (sub_1000E47F0(a1 + 48, a1 + 96))
  {
    if (*(_DWORD *)(a1 + 80) == 3 || *(void *)(a1 + 64) > v3) {
      break;
    }
    sub_1000E4A94((uint64_t *)(a1 + 48), (uint64_t)v19);
    uint64_t v8 = v19[0];
    v19[0] = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
    }
  }

  BOOL result = sub_1000E47F0(a1 + 48, a1 + 96);
  if (result && *(_DWORD *)(a1 + 80) == 3)
  {
    unint64_t v10 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 56) > v3) {
      unint64_t v3 = *(void *)(a1 + 56);
    }
    int v11 = 3;
    goto LABEL_44;
  }

  BOOL result = sub_1000E4738(a1 + 48, a1 + 96);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 168);
  if (result && v12 == v13)
  {
    int v11 = 0;
    unint64_t v10 = *(void *)(a1 + 24);
    goto LABEL_44;
  }

  if (v12 == v13)
  {
    unint64_t v10 = *(void *)(a1 + 56);
    if (v10 <= v3)
    {
      unint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(_DWORD *)(a1 + 80);
      goto LABEL_44;
    }

    goto LABEL_39;
  }

  BOOL result = sub_1000E4738(a1 + 48, a1 + 96);
  if (result)
  {
    unint64_t v14 = *(unint64_t **)(a1 + 160);
    unint64_t v10 = *v14;
    if (*v14 <= v3)
    {
      unint64_t v10 = v14[1];
      int v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }

BOOL sub_1000930E0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = sub_100092EFC(a1, *(void *)(a1 + 40), (uint64_t)v9);
  int v5 = *(_DWORD *)&v9[24];
  unint64_t v6 = *(void *)&v9[8];
  uint64_t v7 = *(void *)v9;
  do
  {
    if (v6 >= *(void *)(a1 + 24)) {
      break;
    }
    if (v5 == 3) {
      break;
    }
    if (v5 != *(_DWORD *)&v9[24]) {
      break;
    }
    unint64_t v6 = *(void *)&v9[8];
    BOOL result = sub_100092EFC(a1, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)unint64_t v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }

  while (*(void *)&v8[0] == v6);
  *(void *)a2 = v7;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

void *sub_10009318C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL result = v10;
  if (v10 == v9)
  {
    uint64_t v8 = 4LL;
    BOOL result = v9;
  }

  else
  {
    if (!v10) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_100093238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    unint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100093278(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  uint64_t v8 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0LL;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = (void *)sub_10009390C(a1 + 56, (uint64_t)a2 + 56);
  sub_10005E810(v10, a3);
  __int128 v11 = *a4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a4 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v11;
  return a1;
}

void sub_1000932F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10009330C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 1) = 0LL;
  __int128 v7 = (unint64_t *)(v6 + 8);
  *((void *)v6 + 2) = 0LL;
  *(void *)unint64_t v6 = off_100177E58;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *((void *)v6 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  uint64_t v49 = v6 + 24;
  char v50 = (std::__shared_weak_count *)v6;
  sub_1000E46E8((uint64_t)v46, v52);
  sub_1000E46E8((uint64_t)v47, v51);
  *(void *)&__int128 v48 = v6 + 24;
  *((void *)&v48 + 1) = v6;
  do
    unint64_t v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  uint64_t v9 = *((void *)v6 + 4);
  if (v9 == *((void *)v6 + 3)) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *(void *)(v9 - 24);
  }
  if (*(void *)(a1 + 16) > v10) {
    unint64_t v10 = *(void *)(a1 + 16);
  }
  *(void *)&__int128 v44 = *(void *)(a1 + 8);
  *((void *)&v44 + 1) = v10;
  char v45 = 2;
  sub_1000E46E8((uint64_t)&v35, v46);
  sub_1000E46E8((uint64_t)&v39, v47);
  __int128 v43 = v48;
  if (*((void *)&v48 + 1))
  {
    __int128 v11 = (unint64_t *)(*((void *)&v48 + 1) + 8LL);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  __int128 v54 = 0LL;
  uint64_t v13 = (char *)operator new(0x78uLL);
  uint64_t v14 = v35;
  *(void *)uint64_t v13 = off_100177EA8;
  *((void *)v13 + 1) = v14;
  __int128 v15 = v37;
  *((_OWORD *)v13 + 1) = v36;
  *((_OWORD *)v13 + 2) = v15;
  *((_DWORD *)v13 + 12) = v38;
  uint64_t v16 = v39;
  uint64_t v35 = 0LL;
  uint64_t v39 = 0LL;
  *((void *)v13 + 7) = v16;
  __int128 v17 = v41;
  *((_OWORD *)v13 + 4) = v40;
  *((_OWORD *)v13 + 5) = v17;
  *((_DWORD *)v13 + 24) = v42;
  *(_OWORD *)(v13 + 104) = v43;
  __int128 v43 = 0uLL;
  __int128 v54 = v13;
  sub_10009318C((__int128 *)a1, (uint64_t)v53, &v44, a3);
  unint64_t v18 = v54;
  if (v54 == v53)
  {
    uint64_t v19 = 4LL;
    unint64_t v18 = v53;
    goto LABEL_15;
  }

  if (v54)
  {
    uint64_t v19 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1))
  {
    unsigned int v21 = (unint64_t *)(*((void *)&v43 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v39;
  uint64_t v39 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
  }
  uint64_t v24 = v35;
  uint64_t v35 = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24LL))(v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v48 + 1);
  if (*((void *)&v48 + 1))
  {
    unsigned int v26 = (unint64_t *)(*((void *)&v48 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v47[0];
  v47[0] = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24LL))(v28);
  }
  uint64_t v29 = v46[0];
  v46[0] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  unsigned int v30 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  uint64_t v33 = v51[0];
  v51[0] = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
  }
  uint64_t result = v52[0];
  v52[0] = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}