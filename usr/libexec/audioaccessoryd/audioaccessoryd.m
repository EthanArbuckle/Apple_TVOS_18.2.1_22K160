void sub_100002FD0(uint64_t a1)
{
  uint64_t v1;
  id v3;
  *(_DWORD *)(*(void *)(a1 + 32) + 24LL) = *(_DWORD *)(a1 + 40);
  v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 28))
  {
    _objc_msgSend((id)qword_10023DCB0, "updateAudioSessionControl:");
  }

  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) remoteObjectProxy]);
    [v3 audioSessionControlUpdate:*(void *)(a1 + 32)];
  }
}

void sub_1000031FC(_Unwind_Exception *a1)
{
}

void sub_100003210(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 28LL))
  {
    if (dword_100233F90 <= 90
      && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 90LL)))
    {
      LogPrintF( &dword_100233F90,  "-[AAAudioSessionControl setMuteAction:auditToken:bundleIdentifier:]_block_invoke",  90LL,  "### setMuteAction failed: called internally from daemon");
    }
  }

  else
  {
    if (dword_100233F90 <= 30
      && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 30LL)))
    {
      LogPrintF( &dword_100233F90,  "-[AAAudioSessionControl setMuteAction:auditToken:bundleIdentifier:]_block_invoke",  30LL,  "Mute Control: starting xpc");
    }

    v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) remoteObjectProxy]);
    uint64_t v3 = *(unsigned int *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 40);
    __int128 v5 = *(_OWORD *)(a1 + 68);
    v6[0] = *(_OWORD *)(a1 + 52);
    v6[1] = v5;
    [v2 setMuteAction:v3 auditToken:v6 bundleIdentifier:v4];
  }

void sub_100003398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 8))
  {
    uint64_t v3 = NSErrorF(NSOSStatusErrorDomain, 4294960575LL, "Activate already called");
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
    id v9 = (id)v4;
    if (dword_100233F90 <= 90)
    {
      if (dword_100233F90 != -1 || (v8 = _LogCategory_Initialize(&dword_100233F90, 90LL), uint64_t v4 = (uint64_t)v9, v8)) {
        LogPrintF( &dword_100233F90,  "-[AAAudioSessionControl activateWithCompletion:]_block_invoke",  90LL,  "### Activate failed: %{error}",  v4);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    *(_BYTE *)(v2 + 8) = 1;
    id v5 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v6 = *(void *)(a1 + 32);
    v7 = *(void **)(v6 + 16);
    *(void *)(v6 + 16) = v5;

    [*(id *)(a1 + 32) _activate:0];
  }

void sub_100003674(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (v3)
  {
    id v4 = v3;
    if (dword_100233F90 <= 90)
    {
      if (dword_100233F90 != -1 || (v5 = _LogCategory_Initialize(&dword_100233F90, 90LL), id v4 = v9, v5))
      {
        LogPrintF( &dword_100233F90,  "-[AAAudioSessionControl _activate:]_block_invoke",  90LL,  "### Activate failed: %{error}",  v4);
        id v4 = v9;
      }
    }

    [*(id *)(a1 + 32) _reportError:v4];
  }

  else
  {
    if (*(_BYTE *)(a1 + 40))
    {
      if (dword_100233F90 <= 30
        && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 30LL)))
      {
        LogPrintF( &dword_100233F90,  "-[AAAudioSessionControl _activate:]_block_invoke",  30LL,  "Re-activated: %@\n",  *(void *)(a1 + 32));
      }
    }

    else if (dword_100233F90 <= 30 {
           && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 30LL)))
    }
    {
      LogPrintF( &dword_100233F90,  "-[AAAudioSessionControl _activate:]_block_invoke",  30LL,  "Activated: %@\n",  *(void *)(a1 + 32));
    }

    uint64_t v6 = (void (**)(id, void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 16LL));
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 16);
    *(void *)(v7 + 16) = 0LL;

    if (v6) {
      v6[2](v6, 0LL);
    }
  }
}

void sub_1000038C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  int v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100003958;
  v7[3] = &unk_100205FB8;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_100003958(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100003B60(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (*(_BYTE *)(a1 + 40))
  {
    if (dword_100233F90 <= 30
      && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 30LL)))
    {
      id v3 = "Re-activate XPC error: %{error}";
      uint64_t v4 = 30LL;
LABEL_8:
      LogPrintF(&dword_100233F90, "-[AAAudioSessionControl _activateXPC:reactivate:]_block_invoke", v4, v3);
    }
  }

  else if (dword_100233F90 <= 90 {
         && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 90LL)))
  }
  {
    id v3 = "### Activate XPC error: %{error}";
    uint64_t v4 = 90LL;
    goto LABEL_8;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
}

uint64_t sub_100003C54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100003DC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _interrupted];
}

id sub_100003DCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  return [*(id *)(a1 + 32) _invalidated];
}

void sub_100003F28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 29))
  {
    *(_BYTE *)(v1 + 29) = 1;
    if (!*(_BYTE *)(*(void *)(a1 + 32) + 30LL)
      && dword_100233F90 <= 30
      && (dword_100233F90 != -1 || _LogCategory_Initialize(&dword_100233F90, 30LL)))
    {
      LogPrintF(&dword_100233F90, "-[AAAudioSessionControl invalidate]_block_invoke", 30LL, "Invalidating");
    }

    uint64_t v3 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v3 + 28))
    {
      [(id)v3 _invalidateDirect];
      uint64_t v3 = *(void *)(a1 + 32);
    }

    if (*(void *)(v3 + 32))
    {
      [*(id *)(v3 + 32) invalidate];
      uint64_t v3 = *(void *)(a1 + 32);
    }

    id v8 = (void (**)(id, void *))objc_retainBlock(*(id *)(v3 + 16));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;

    if (v8)
    {
      uint64_t v6 = BTErrorF(4294896148LL, "Invalidate called");
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8[2](v8, v7);
    }

    [*(id *)(a1 + 32) _invalidated];
  }

void sub_1000040B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000410C;
  block[3] = &unk_100206058;
  block[4] = v1;
  dispatch_async(v2, block);
}

id sub_10000410C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 28LL) = 0;
  return [*(id *)(a1 + 32) _invalidated];
}

uint64_t sub_10000441C()
{
  if (qword_1002371D0 != -1) {
    dispatch_once(&qword_1002371D0, &stru_100206158);
  }
  do
  {
    unsigned int v0 = __ldaxr((unsigned int *)&unk_1002371D8);
    uint64_t result = v0 + 1;
  }

  while (__stlxr(result, (unsigned int *)&unk_1002371D8));
  return result;
}

void sub_10000446C(id a1)
{
  unk_1002371D8 = (unsigned __int16)word_1002371DA << 16;
}

id sub_1000045F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_100004848(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _activateXPCCompleted:a2];
}

BOOL sub_100004A20(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 56LL));
  uint64_t v6 = v5;
  if (v5) {
    (*((void (**)(id, id))v5 + 2))(v5, v4);
  }

  return v6 != 0LL;
}

void sub_100004B58(_Unwind_Exception *a1)
{
}

void *sub_100004B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[4]) {
    return _[result xpcReceivedMessage:a2];
  }
  return result;
}

void *sub_100004C90(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 24))
  {
    uint64_t v2 = result;
    *(_BYTE *)(v1 + 24) = 1;
    if (dword_100234180 <= 30
      && (dword_100234180 != -1 || _LogCategory_Initialize(&dword_100234180, 30LL)))
    {
      LogPrintF( &dword_100234180,  "-[AAController invalidate]_block_invoke",  30LL,  "Invalidate CID 0x%X",  *(_DWORD *)(v2[4] + 40LL));
    }

    id v3 = (id)v2[4];
    objc_sync_enter(v3);
    id v4 = (_xpc_connection_s *)*(id *)(v2[4] + 32LL);
    id v5 = v4;
    if (v4) {
      xpc_connection_cancel(v4);
    }

    objc_sync_exit(v3);
    return [(id)v2[4] _invalidated];
  }

  return result;
}

void sub_100004D80(_Unwind_Exception *a1)
{
}

id sub_100004F98(uint64_t a1)
{
  if (dword_100234180 <= 30 && (dword_100234180 != -1 || _LogCategory_Initialize(&dword_100234180, 30LL))) {
    LogPrintF( &dword_100234180,  "-[AAController sendConversationDetectMessage:destinationIdentifier:completionHandler:]_block_invoke",  30LL,  "sendConversationDetect message to destination %@",  *(void *)(a1 + 32));
  }
  return [*(id *)(a1 + 40) _sendAccessoryEventMessage:*(void *)(a1 + 48) eventType:2 destinationIdentifier:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 56)];
}

id sub_1000050E8(uint64_t a1)
{
  if (dword_100234180 <= 30 && (dword_100234180 != -1 || _LogCategory_Initialize(&dword_100234180, 30LL))) {
    LogPrintF( &dword_100234180,  "-[AAController sendMultimodalContextMessage:destinationIdentifier:completionHandler:]_block_invoke",  30LL,  "sendMultimodalContextMessage message to destination %@",  *(void *)(a1 + 32));
  }
  return [*(id *)(a1 + 40) _sendAccessoryEventMessage:*(void *)(a1 + 48) eventType:4 destinationIdentifier:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 56)];
}

id sub_100005238(uint64_t a1)
{
  if (dword_100234180 <= 30 && (dword_100234180 != -1 || _LogCategory_Initialize(&dword_100234180, 30LL))) {
    LogPrintF( &dword_100234180,  "-[AAController sendPMEConfigData:destinationIdentifier:completionHandler:]_block_invoke",  30LL,  "sendPMEConfigData to destination %@",  *(void *)(a1 + 32));
  }
  return [*(id *)(a1 + 40) _sendAccessoryEventMessage:*(void *)(a1 + 48) eventType:5 destinationIdentifier:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 56)];
}

id sub_100005388(uint64_t a1)
{
  if (dword_100234180 <= 30 && (dword_100234180 != -1 || _LogCategory_Initialize(&dword_100234180, 30LL))) {
    LogPrintF( &dword_100234180,  "-[AAController sendDeviceConfig:destinationIdentifier:completionHandler:]_block_invoke",  30LL,  "sendDeviceConfig message to destination %@",  *(void *)(a1 + 32));
  }
  return _[*(id *)(a1 + 40) _sendDeviceConfig:*(void *)(a1 + 48) destinationIdentifier:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 56)];
}

void sub_1000054B4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([@"Send getTipiTable message" dataUsingEncoding:4]);
  if (dword_100234180 <= 30 && (dword_100234180 != -1 || _LogCategory_Initialize(&dword_100234180, 30LL))) {
    LogPrintF( &dword_100234180,  "-[AAController sendGetTipiTableMessageToDestinationIdentifier:completionHandler:]_block_invoke",  30LL,  "Send GetTipiTable message to destination %@",  *(void *)(a1 + 32));
  }
  [*(id *)(a1 + 40) _sendAccessoryEventMessage:v2 eventType:6 destinationIdentifier:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
}

void sub_1000058B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = CUXPCDecodeNSErrorIfNeeded(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_100005B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = CUXPCDecodeNSErrorIfNeeded(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_100006310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

uint64_t sub_10000634C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000635C(uint64_t a1)
{
}

uint64_t sub_100006364(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234180 <= 90)
  {
    if (dword_100234180 != -1) {
      return LogPrintF( &dword_100234180,  "-[AAController _xpcReceivedAccessoryEvent:]_block_invoke",  90LL,  "### XPC receive accessory event failed: %@",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234180, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234180,  "-[AAController _xpcReceivedAccessoryEvent:]_block_invoke",  90LL,  "### XPC receive accessory event failed: %@",  v1);
    }
  }

  return result;
}

void sub_10000655C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100006594(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234180 <= 90)
  {
    if (dword_100234180 != -1) {
      return LogPrintF( &dword_100234180,  "-[AAController _xpcReceivedAudioAccessoryDeviceInfoChange:]_block_invoke",  90LL,  "### XPC accessory info change receive failed: %@",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234180, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234180,  "-[AAController _xpcReceivedAudioAccessoryDeviceInfoChange:]_block_invoke",  90LL,  "### XPC accessory info change receive failed: %@",  v1);
    }
  }

  return result;
}

void sub_1000067F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100006828(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234180 <= 90)
  {
    if (dword_100234180 != -1) {
      return LogPrintF( &dword_100234180,  "-[AAController _conversationDetectMessageReceived:fromDevice:]_block_invoke",  90LL,  "### XPC receive CD message failed: %@",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234180, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234180,  "-[AAController _conversationDetectMessageReceived:fromDevice:]_block_invoke",  90LL,  "### XPC receive CD message failed: %@",  v1);
    }
  }

  return result;
}

void sub_100006A88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100006ABC(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234180 <= 90)
  {
    if (dword_100234180 != -1) {
      return LogPrintF( &dword_100234180,  "-[AAController _multimodalContextMessageReceived:fromDevice:]_block_invoke",  90LL,  "### XPC receive Multimodal message failed: %@",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234180, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234180,  "-[AAController _multimodalContextMessageReceived:fromDevice:]_block_invoke",  90LL,  "### XPC receive Multimodal message failed: %@",  v1);
    }
  }

  return result;
}

void sub_100006D1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100006D50(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234180 <= 90)
  {
    if (dword_100234180 != -1) {
      return LogPrintF( &dword_100234180,  "-[AAController _pmeConfigDataReceived:fromDevice:]_block_invoke",  90LL,  "### XPC receive PME config failed: %@",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234180, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234180,  "-[AAController _pmeConfigDataReceived:fromDevice:]_block_invoke",  90LL,  "### XPC receive PME config failed: %@",  v1);
    }
  }

  return result;
}

void sub_100006F74(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AAConversationDetectSessionManager);
  uint64_t v2 = (void *)qword_1002371E0;
  qword_1002371E0 = (uint64_t)v1;
}

id sub_1000073A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged];
}

void *sub_100007410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[13]) {
    return _[result _deviceFound:a2];
  }
  return result;
}

void *sub_10000742C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[13]) {
    return _[result _deviceLost:a2];
  }
  return result;
}

uint64_t sub_100007448(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1 == *(void *)(*(void *)(result + 40) + 104LL) && dword_1002341F0 <= 30)
  {
    if (dword_1002341F0 != -1) {
      return LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager activate]_block_invoke_4",  30LL,  "%@ Interrupted",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_1002341F0, 30LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(v2 + 32);
      return LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager activate]_block_invoke_4",  30LL,  "%@ Interrupted",  v1);
    }
  }

  return result;
}

uint64_t sub_1000074D8(uint64_t result)
{
  if (dword_1002341F0 <= 30)
  {
    uint64_t v1 = result;
    if (dword_1002341F0 != -1) {
      return LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager activate]_block_invoke_5",  30LL,  "%@ Invalidated",  *(void *)(v1 + 32));
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002341F0, 30LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager activate]_block_invoke_5",  30LL,  "%@ Invalidated",  *(void *)(v1 + 32));
    }
  }

  return result;
}

void sub_100007554(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == *(void *)(v6 + 104))
  {
    if (v3)
    {
      id v11 = v3;
      if (dword_1002341F0 <= 90)
      {
        if (dword_1002341F0 == -1)
        {
          int v7 = _LogCategory_Initialize(&dword_1002341F0, 90LL);
          uint64_t v6 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(v6 + 104);
          id v3 = v11;
        }

        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager activate]_block_invoke_6",  90LL,  "%@ ### Activate failed: %@",  v5,  v3);
        uint64_t v6 = *(void *)(a1 + 40);
      }

LABEL_10:
      [*(id *)(v6 + 104) invalidate];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v8 + 104);
      *(void *)(v8 + 104) = 0LL;

LABEL_11:
      id v4 = v11;
      goto LABEL_12;
    }

    if (dword_1002341F0 <= 30)
    {
      id v11 = 0LL;
      if (dword_1002341F0 == -1)
      {
        int v10 = _LogCategory_Initialize(&dword_1002341F0, 30LL);
        id v4 = 0LL;
        if (!v10) {
          goto LABEL_12;
        }
        uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 104LL);
      }

      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager activate]_block_invoke_6",  30LL,  "%@ Activated",  v5);
      goto LABEL_11;
    }
  }

      [*(id *)(v6 + 24) invalidate];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v8 + 24);
      *(void *)(v8 + 24) = 0LL;

LABEL_11:
      id v4 = v11;
      goto LABEL_12;
    }

    if (dword_100234260 <= 30)
    {
      id v11 = 0LL;
      if (dword_100234260 == -1)
      {
        int v10 = _LogCategory_Initialize(&dword_100234260, 30LL);
        id v4 = 0LL;
        if (!v10) {
          goto LABEL_12;
        }
        uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 24LL);
      }

      LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_5",  30LL,  "%@ Activated",  v5);
      goto LABEL_11;
    }
  }

      [*(id *)(v6 + 48) invalidate];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v8 + 48);
      *(void *)(v8 + 4_Block_object_dispose(va, 8) = 0LL;

LABEL_11:
      id v4 = v11;
      goto LABEL_12;
    }

    if (dword_100234330 <= 30)
    {
      id v11 = 0LL;
      if (dword_100234330 == -1)
      {
        int v10 = _LogCategory_Initialize(&dword_100234330, 30LL);
        id v4 = 0LL;
        if (!v10) {
          goto LABEL_12;
        }
        uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 48LL);
      }

      LogPrintF(&dword_100234330, "-[AAServicesDaemon _activate]_block_invoke_8", 30LL, "%@ Activated", v5);
      goto LABEL_11;
    }
  }
}

  if (!v32)
  {
    if (!(_DWORD)v122) {
      goto LABEL_12;
    }
LABEL_6:
    swift_bridgeObjectRelease(*(void *)(v30 + v31[13] + 8));
    if ((v123 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }

LABEL_12:
}

  int v7 = v5;
  self->_cdSignalAudioTunings.unlatchSignalTunables.signalRampDurationSecs = v7;
LABEL_13:
  CFPrefs_GetDouble(@"com.apple.AudioAccessory", @"qRampChunkDuration", &v22);
  if (v22) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v8 < 0.0;
  }
  if (v9) {
    int v10 = 0.1;
  }
  else {
    int v10 = v8;
  }
  prefCDRampChunkDuration = self->_prefCDRampChunkDuration;
  if (v10 != prefCDRampChunkDuration)
  {
    if (dword_1002341F0 <= 30)
    {
      if (dword_1002341F0 == -1)
      {
        prefCDRampChunkDuration = self->_prefCDRampChunkDuration;
      }

      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _prefsChanged]",  30LL,  "Ramp chunk duration: %0.2f --> %0.2f",  prefCDRampChunkDuration,  v10);
    }
}
}

    self->_prefLowBatteryDelaySeconds = v5;
  }

  Int64 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"lbEnabled", &v157);
  uint64_t v8 = Int64 != 0;
  if (v157)
  {
    uint64_t v9 = Int64;
    uint64_t v8 = GestaltGetDeviceClass() - 1 < 3 || v9 != 0;
  }

  if (self->_prefLowBatteryEnabled != v8)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v11 = "yes";
      if (v8) {
        uint64_t v12 = "no";
      }
      else {
        uint64_t v12 = "yes";
      }
      if (!v8) {
        id v11 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "LowBatteryEnabled: %s -> %s",  v12,  v11);
    }

    self->_prefLowBatteryEnabled = v8;
  }

  Double = CFPrefs_GetDouble(@"com.apple.bluetooth", @"lbForceLevel", 0LL);
  prefLowBatteryForceLevel = self->_prefLowBatteryForceLevel;
  if (Double != prefLowBatteryForceLevel)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefLowBatteryForceLevel = self->_prefLowBatteryForceLevel;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "LowBatteryForceLevel: %f -> %f",  prefLowBatteryForceLevel,  Double);
    }

  CKRecordKeyValueSetting.subscript.getter( &v82,  0xD000000000000013LL,  0x80000001001CEDA0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v36 = v83;
  v37 = (void *)(v31 + v81[7]);
  v39 = *v37;
  v38 = v37[1];
  if (!v83) {
    goto LABEL_17;
  }
  if (v82 != v39 || v83 != v38)
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v37, v37[1], 0LL);
    swift_bridgeObjectRelease(v36);
    if ((v40 & 1) != 0) {
      goto LABEL_18;
    }
LABEL_17:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v39;
    v83 = v38;
    swift_bridgeObjectRetain(v38);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000013LL, 0x80000001001CEDA0LL, ObjectType);
    goto LABEL_18;
  }

  swift_bridgeObjectRelease(v83);
LABEL_18:
  CKRecordKeyValueSetting.subscript.getter( &v82,  0x656D614E65736163LL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v41 = v83;
  v42 = (void *)(v31 + v81[8]);
  v44 = *v42;
  v43 = v42[1];
  if (!v83) {
    goto LABEL_23;
  }
  if (v82 == v44 && v83 == v43)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_24;
  }

  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v42, v42[1], 0LL);
  swift_bridgeObjectRelease(v41);
  if ((v45 & 1) == 0)
  {
LABEL_23:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v44;
    v83 = v43;
    swift_bridgeObjectRetain(v43);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0x656D614E65736163LL, 0xE800000000000000LL, ObjectType);
  }

        swift_once(&qword_100234C18, sub_10018A920);
        goto LABEL_5;
      }
    }

    else
    {
      v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v13 >= v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
    goto LABEL_12;
  }

      ++a1;
      if (v31 == v197)
      {
        swift_bridgeObjectRelease(a2);
        a1 = v180;
        uint64_t v8 = (void *)v188;
        uint64_t v9 = v179;
        v27 = v194;
        goto LABEL_29;
      }
    }

    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    swift_once(&qword_100234C28, sub_10018A9E0);
  }

  v189 = _swiftEmptyArrayStorage;
LABEL_103:
  v118 = static os_log_type_t.default.getter(v17);
  v119 = qword_10023DFC8;
  v120 = swift_allocObject(v174, 72LL, 7LL);
  *(_OWORD *)(v120 + 16) = v176;
  v121 = v169;
  if (v169)
  {
    if (a2 < 0) {
      v162 = a2;
    }
    else {
      v162 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    v122 = _CocoaArrayWrapper.endIndex.getter(v162);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    v122 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  *(void *)(v120 + 56) = &type metadata for Int;
  *(void *)(v120 + 64) = &protocol witness table for Int;
  *(void *)(v120 + 32) = v122;
  os_log(_:dso:log:_:_:)( v118,  &_mh_execute_header,  v119,  "databaseUpdated recordsChanged: processed %d change records.",  v166);
  swift_bridgeObjectRelease(v120);
  if (v121)
  {
    v124 = swift_bridgeObjectRetain(a2);
    v123 = (uint64_t)sub_100161654(v124);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    v123 = a2 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(a2);
  }

  aBlock[0] = v123;
  v125 = v172;
  sub_10016228C(aBlock, (uint64_t (*)(void *))sub_100163930);
  v96 = aBlock[0];
  if (v125) {
    goto LABEL_154;
  }
  if (aBlock[0] < 0 || (aBlock[0] & 0x4000000000000000LL) != 0)
  {
    v163 = swift_bridgeObjectRetain(aBlock[0]);
    v126 = _CocoaArrayWrapper.endIndex.getter(v163);
    swift_release(v96);
    if (!v126) {
      goto LABEL_146;
    }
LABEL_112:
    if (v126 >= 1)
    {
      v127 = 0LL;
      v194 = (char *)OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
      v197 = "gCustomKeyBlobZone";
      v198 = v96 & 0xC000000000000001LL;
      v196 = 0x80000001001CB4C0LL;
      v193 = (unint64_t)"Updating main device record: %@";
      v191 = 0x80000001001CABE0LL;
      v190 = (unint64_t)"debugDescription";
      v188 = 0x80000001001CB350LL;
      v195 = v96;
      while (1)
      {
        v145 = v198
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v127, v96)
             : *(id *)(v96 + 8 * v127 + 32);
        v146 = v145;
        v147 = [v145 recordID];
        v148 = [v147 zoneID];

        v149 = [v148 zoneName];
        v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
        v152 = v151;

        if (v150 == 0xD000000000000012LL && v152 == v196) {
          break;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000012LL,  (unint64_t)v197 | 0x8000000000000000LL,  v150,  v152,  0LL) & 1) != 0)
        {
          v153 = v152;
LABEL_126:
          swift_bridgeObjectRelease(v153);
          v203 = &type metadata for AudioAccessoryFeatures;
          v204 = sub_10009E740();
          LOBYTE(aBlock[0]) = 0;
          v154 = isFeatureEnabled(_:)(aBlock);
          sub_10009A498(aBlock);
          if ((v154 & 1) == 0) {
            goto LABEL_127;
          }
          goto LABEL_116;
        }

        if (v150 == 0xD00000000000001ELL && v152 == v191)
        {
          v155 = v193;
          goto LABEL_131;
        }

        if ((_stringCompareWithSmolCheck(_:_:expecting:)( 0xD00000000000001ELL,  v193 | 0x8000000000000000LL,  v150,  v152,  0LL) & 1) != 0)
        {
          v128 = v152;
          goto LABEL_115;
        }

        if (v150 == 0xD000000000000010LL && v152 == v188)
        {
          v155 = v190;
LABEL_131:
          v128 = v155 | 0x8000000000000000LL;
LABEL_115:
          swift_bridgeObjectRelease(v128);
          goto LABEL_116;
        }

        v156 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000010LL,  v190 | 0x8000000000000000LL,  v150,  v152,  0LL);
        v157 = swift_bridgeObjectRelease(v152);
        if ((v156 & 1) == 0)
        {
          v158 = static os_log_type_t.error.getter(v157);
          v159 = qword_10023DFC8;
          v160 = swift_allocObject(v174, 72LL, 7LL);
          *(_OWORD *)(v160 + 16) = v176;
          v161 = [v146 recordID];
          *(void *)(v160 + 56) = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
          *(void *)(v160 + 64) = sub_1000C934C( (unint64_t *)&unk_100236ED0,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr);
          *(void *)(v160 + 32) = v161;
          os_log(_:dso:log:_:_:)( v158,  &_mh_execute_header,  v159,  "Ignoring changed record from unknown zone: %@",  45LL,  2LL,  v160);
          swift_bridgeObjectRelease(v160);
LABEL_127:

          goto LABEL_117;
        }

void sub_1000077D4(id a1)
{
  if (dword_1002341F0 <= 30 && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL))) {
    LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _aaControllerEnsureStarted]_block_invoke",  30LL,  "AAController Invalidated");
  }
}

void *sub_100007834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v4 == result[1]) {
    return [result _conversationDetectMessageReceived:a3 fromDeviceIdentifier:a2];
  }
  return result;
}

void sub_100007850(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_1002341F0 <= 90
        && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 90LL)))
      {
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _aaControllerEnsureStarted]_block_invoke_3",  90LL,  "### Activate AAController failed: %{error}\n",  v8);
      }

      [*(id *)(a1 + 32) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void **)(v5 + 8);
      *(void *)(v5 + _Block_object_dispose(va, 8) = 0LL;

      goto LABEL_11;
    }

    if (dword_1002341F0 <= 30)
    {
      id v8 = 0LL;
      if (dword_1002341F0 != -1 || (v7 = _LogCategory_Initialize(&dword_1002341F0, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _aaControllerEnsureStarted]_block_invoke_3",  30LL,  "AAController activated");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

id sub_1000079F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateCDSession];
}

LABEL_41:
}

  if ((v10 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_43:
  v28 = [v9 count];
  v29 = sub_100060178("MagicPairing");
  v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if (!v28 && v11)
  {
    if (v31)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Inform bluetoothd again no data on cloud",  buf,  2u);
    }

    *(_WORD *)buf = 0;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 2LL));
    v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v33,  @"kDeviceInfoBlob",  0LL));
    [v32 sendCloudKitMsg:@"DeviceInfoAvailable" args:v34];

    goto LABEL_52;
  }

  if (v31)
  {
    *(_DWORD *)buf = 138477827;
    v59 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "magicPairingRecordsUpdatedWithRecords: %{private}@",  buf,  0xCu);
  }

  v35 = objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v9,  1LL,  0LL));
  v32 = (void *)v35;
  if (v35)
  {
    v56 = @"records";
    v57 = v35;
    v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
    -[CloudXPCService sendCloudKitMsg:args:](self, "sendCloudKitMsg:args:", @"MagicPairingRecordsUpdated", v33);
LABEL_52:
  }

  objc_autoreleasePoolPop(v55);
}

  id v8 = objc_retainBlock(self->_progressHandler);
  uint64_t v9 = v8;
  if (v8) {
    (*((void (**)(id, uint64_t, id))v8 + 2))(v8, v4, v10);
  }
}

      __break(1u);
      goto LABEL_42;
    }

  if (!(_DWORD)v218)
  {
LABEL_16:
    if ((_DWORD)v219) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  __break(1u);
}

    v164 = &type metadata for AudioAccessoryFeatures;
    v165 = sub_10009E740();
    LOBYTE(v163[0]) = 0;
    v106 = isFeatureEnabled(_:)(v163);
    sub_10009A498(v163);
    if ((v106 & 1) != 0)
    {
      v107 = sub_10013A76C();
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      v108 = v158;
      v109 = sub_100098D58(v158, (uint64_t)qword_10023DCE0);
      v110 = v51;
      v111 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
      v112 = (uint64_t)v157;
      v111(v157, v109, v108);
      v113 = (void *)sub_100138608(v97, v75, v112, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
      swift_release(v107);
      v114 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 8))(v112, v108);
      if (!v113)
      {
        v118 = static os_log_type_t.error.getter(v114);
        v119 = qword_10023DFC8;
        v47 = swift_allocObject(v149, 72LL, 7LL);
        *(_OWORD *)(v47 + 16) = xmmword_1001A5EA0;
        v120 = v150;
        *(void *)(v47 + 56) = &type metadata for String;
        *(void *)(v47 + 64) = v120;
        *(void *)(v47 + 32) = v97;
        *(void *)(v47 + 40) = v75;
        swift_bridgeObjectRetain(v75);
        os_log(_:dso:log:_:_:)( v118,  &_mh_execute_header,  v119,  "AAProxCardsRecord not found to remove: %@",  41LL,  2LL,  v47);
        goto LABEL_18;
      }

      sub_100153D7C(v113, v160, v159);

      return;
    }

  __break(1u);
  return result;
}

void sub_100007ED8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v3 = v2;
  if (v2)
  {
    int v7 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"AAConversationDetectKeyIdentifier"]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"AAConversationDetectKeyData"]);
    [*(id *)(a1 + 40) _conversationDetectMessageReceived:v5 fromDeviceIdentifier:v4];

LABEL_3:
    id v3 = v7;
    goto LABEL_8;
  }

  if (dword_1002341F0 <= 90)
  {
    int v7 = 0LL;
    if (dword_1002341F0 != -1 || (v6 = _LogCategory_Initialize(&dword_1002341F0, 90LL), id v3 = 0LL, v6))
    {
      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _cdMsgNotificationReceivedHandler:]_block_invoke",  90LL,  "Conversation Detect: no data received in cdMessageReceivedHandler");
      goto LABEL_3;
    }
  }

LABEL_8:
}

      *(void *)(v5 + 1256) = Int64Ranged;
      [*(id *)(a1 + 40) _prefsChanged];
    }
  }
}

    int v10 = (os_log_s *)v7;
    id v11 = 2;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    goto LABEL_24;
  }

  v14 = sub_100060178("MagicPairing");
  v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit masterBlob](self, "masterBlob"));
    *(_DWORD *)buf = 138412290;
    v30 = (unint64_t)v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "MP fetchKeyBlob: already have master blob read  %@",  buf,  0xCu);
  }

  int v7 = (CKRecordID *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit masterBlob](self, "masterBlob"));
  v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v17,  @"kMasterKeyBlob",  0LL));
  -[CKRecordID sendCloudKitMsg:args:](v7, "sendCloudKitMsg:args:", @"MasterKeysAvailable", v18);

LABEL_24:
}

    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0LL);
    }
    return;
  }

  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcQueue]);
  mach_service = xpc_connection_create_mach_service("com.apple.bluetooth.cloudkit.xpc", v5, 2uLL);
  [*(id *)(a1 + 32) setCloudKitConnection:mach_service];

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitConnection]);
  id v8 = sub_100060178("XPC");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  int v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Established connection to bluetoothd",  v16,  2u);
    }

    id v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitConnection]);
    xpc_connection_set_event_handler(v11, &stru_100208AA8);

    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitConnection]);
    xpc_connection_resume(v4);
    goto LABEL_8;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_100190248();
  }

  v13 = *(void *)(a1 + 40);
  if (v13)
  {
    v17 = NSLocalizedFailureReasonErrorKey;
    v18 = @"Failed to establish connection to bluetoothd";
    v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"BTUserErrorDomain",  0LL,  v14));
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);
  }

  [*(id *)(a1 + 32) endTransaction:@"SignInStatusChanged"];
}

  [*(id *)(a1 + 32) endTransaction:@"SignInStatusChanged"];
}
}

    v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
    swift_beginAccess(v18, v38, 0LL, 0LL);
    uint64_t v2 = *v18;
    v36 = v2 + 64;
    v19 = 1LL << *(_BYTE *)(v2 + 32);
    v20 = -1LL;
    if (v19 < 64) {
      v20 = ~(-1LL << v19);
    }
    id v3 = v20 & *(void *)(v2 + 64);
    v21 = (unint64_t)(v19 + 63) >> 6;
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = 0LL;
    if (v3)
    {
      while (1)
      {
        v22 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        v23 = v22 | (v4 << 6);
LABEL_29:
        v27 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v23);
        v29 = *v27;
        v28 = v27[1];
        v30 = *(void **)(*(void *)(v2 + 56) + 8 * v23);
        swift_bridgeObjectRetain(v28);
        v31 = String._bridgeToObjectiveC()();
        v32 = [v13 objectForKeyedSubscript:v31];

        if (v32
          && (v39 = v32,
              v33 = sub_100098CD8(&qword_100234E40),
              (swift_dynamicCast(&v37, &v39, v33, &type metadata for UInt64, 6LL) & 1) != 0))
        {
LABEL_13:
          v42 = &protocol witness table for UInt64;
          v41 = &type metadata for UInt64;
          v39 = v30;
          CKRecordKeyValueSetting.subscript.setter(&v39, v29, v28, ObjectType);
          if (!v3) {
            break;
          }
        }

        else
        {
          if (v30) {
            goto LABEL_13;
          }
LABEL_32:
          swift_bridgeObjectRelease(v28);
          if (!v3) {
            break;
          }
        }
      }
    }

    v24 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v24 >= v21) {
      break;
    }
    v25 = *(void *)(v36 + 8 * v24);
    ++v4;
    if (v25) {
      goto LABEL_28;
    }
    uint64_t v4 = v24 + 1;
    if (v24 + 1 >= v21) {
      break;
    }
    v25 = *(void *)(v36 + 8 * v4);
    if (v25) {
      goto LABEL_28;
    }
    uint64_t v4 = v24 + 2;
    if (v24 + 2 >= v21) {
      break;
    }
    v25 = *(void *)(v36 + 8 * v4);
    if (v25)
    {
LABEL_28:
      id v3 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v4 << 6);
      goto LABEL_29;
    }

    v26 = v24 + 3;
    if (v26 >= v21) {
      break;
    }
    v25 = *(void *)(v36 + 8 * v26);
    if (v25)
    {
      uint64_t v4 = v26;
      goto LABEL_28;
    }

    while (1)
    {
      uint64_t v4 = v26 + 1;
      if (__OFADD__(v26, 1LL)) {
        break;
      }
      if (v4 >= v21) {
        goto LABEL_34;
      }
      v25 = *(void *)(v36 + 8 * v4);
      ++v26;
      if (v25) {
        goto LABEL_28;
      }
    }

  __break(1u);
  return result;
}

id sub_1000080DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateCDSession];
}

id sub_1000082E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

LABEL_24:
    self->_prefCDRampChunkDuration = v10;
  }

  Int64 = CFPrefs_GetInt64(@"com.apple.AudioAccessory", @"disableCustomCurveDucking", &v22);
  if (v22) {
    v13 = 1;
  }
  else {
    v13 = Int64 == 0;
  }
  v14 = !v13;
  if (self->_prefCDShouldDisableCustomDuckingCurve != v14)
  {
    if (dword_1002341F0 <= 30
      && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
    {
      v15 = "yes";
      if (v14) {
        v16 = "no";
      }
      else {
        v16 = "yes";
      }
      if (!v14) {
        v15 = "no";
      }
      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _prefsChanged]",  30LL,  "Should enable custom ducking curve: %s -> %s",  v16,  v15);
    }

    self->_prefCDShouldDisableCustomDuckingCurve = v14;
  }

  v17 = CFPrefs_GetInt64(@"com.apple.AudioAccessory", @"didSiriAnnounceFirstCATrigger", &v22);
  if (v22) {
    v18 = 1;
  }
  else {
    v18 = v17 == 0;
  }
  v19 = !v18;
  if (self->_prefCDSiriDidAnnounce != v19)
  {
    if (dword_1002341F0 <= 30
      && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
    {
      v20 = "yes";
      if (v19) {
        v21 = "no";
      }
      else {
        v21 = "yes";
      }
      if (!v19) {
        v20 = "no";
      }
      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _prefsChanged]",  30LL,  "Did announce conversation awareness: %s -> %s",  v21,  v20);
    }

    self->_prefCDSiriDidAnnounce = v19;
  }

    v20 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_25:
    int v6 = *(void (**)(void))(*(void *)(v82 + 56) + 8 * v23);
    v84[3] = &type metadata for AudioAccessoryFeatures;
    v84[4] = sub_10009E740();
    LOBYTE(v84[0]) = 0;
    swift_retain(v6);
    v27 = isFeatureEnabled(_:)(v84);
    sub_10009A498(v84);
    v28 = (uint64_t)_swiftEmptyArrayStorage;
    if ((v27 & 1) != 0)
    {
      v29 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
      if ((_DWORD)v29)
      {
        v30 = sub_10013A76C();
        if (qword_100234BF8 != -1) {
          swift_once(&qword_100234BF8, sub_100113FD8);
        }
        v31 = v76;
        v32 = sub_100098D58(v76, (uint64_t)qword_10023DF40);
        uint64_t v5 = v75;
        v33 = (uint64_t)v74;
        (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v32, v31);
        v28 = sub_100138A8C(v33);
        swift_release(v30);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v33, v31);
      }

      else
      {
        v34 = static os_log_type_t.error.getter(v29);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
      }
    }

    v35 = v21;
    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0) {
        v61 = v28;
      }
      else {
        v61 = v28 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v28);
      v15 = _CocoaArrayWrapper.endIndex.getter(v61);
      if (!v15) {
        goto LABEL_5;
      }
    }

    else
    {
      v15 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v28);
      if (!v15) {
        goto LABEL_5;
      }
    }

    if ((v28 & 0xC000000000000001LL) != 0) {
      v36 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v28);
    }
    else {
      v36 = (char *)*(id *)(v28 + 32);
    }
    v37 = v36;
    v38 = &v36[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    v39 = *(void *)&v36[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    v40 = *((void *)v38 + 1);
    if (v39 == a4 && v40 == v83)
    {
      swift_bridgeObjectRelease_n(v28, 2LL);
    }

    else
    {
      v42 = a4;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, a4, v83, 0LL);

      if ((v43 & 1) == 0)
      {
        a4 = v42;
        if (v15 != 1)
        {
          if ((v28 & 0xC000000000000001LL) != 0)
          {
            v49 = 1LL;
            while (1)
            {
              v50 = specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v28);
              uint64_t v5 = v49 + 1;
              if (__OFADD__(v49, 1LL)) {
                break;
              }
              v51 = v50;
              v52 = v50 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress;
              v53 = *(void *)(v50 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
              v54 = *(void *)(v52 + 8);
              if (v53 == v42 && v54 == v83)
              {
                swift_bridgeObjectRelease_n(v28, 2LL);
                v44 = swift_unknownObjectRelease(v51);
                a4 = v42;
                goto LABEL_44;
              }

              v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, v42, v83, 0LL);
              swift_unknownObjectRelease(v51);
              if ((v56 & 1) != 0) {
                goto LABEL_42;
              }
              ++v49;
              a4 = v42;
              if (v5 == v15) {
                goto LABEL_5;
              }
            }

            __break(1u);
LABEL_79:
            __break(1u);
          }

          else
          {
            v57 = 5LL;
            while (1)
            {
              uint64_t v5 = v57 - 3;
              if (__OFADD__(v57 - 4, 1LL)) {
                break;
              }
              v58 = (void *)(*(void *)(v28 + 8 * v57)
                             + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
              v59 = v58[1];
              v60 = *v58 == v42 && v59 == v83;
              if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v58, v59, v42, v83, 0LL) & 1) != 0)
              {
                v44 = swift_bridgeObjectRelease_n(v28, 2LL);
                goto LABEL_44;
              }

              ++v57;
              if (v5 == v15) {
                goto LABEL_5;
              }
            }
          }

          __break(1u);
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }

    v78 = (v26 - 1) & v26;
    v79 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_25:
    v29 = *(void *)(*(void *)(v77 + 56) + 8 * v24);
    v30 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v29);
    v31 = [v30 isFirstUnlocked];
    if ((_DWORD)v31)
    {
      v32 = sub_10013A76C();
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      v33 = v73;
      v34 = sub_100098D58(v73, (uint64_t)qword_10023DCC0);
      v36 = (uint64_t)v71;
      v35 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v34, v33);
      v37 = sub_100138AA0(v36);
      swift_release(v32);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v33);
      v38 = v37[2];
      if (!v38) {
        goto LABEL_5;
      }
    }

    else
    {
      v39 = static os_log_type_t.error.getter(v31);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      v40 = v39;
      v37 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
      v38 = _swiftEmptyArrayStorage[2];
      if (!v38)
      {
LABEL_5:
        swift_release(v29);
        swift_bridgeObjectRelease(v37);
        goto LABEL_6;
      }
    }

    v41 = v76;
    v42 = (uint64_t)v37 + ((*(unsigned __int8 *)(v76 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    swift_bridgeObjectRetain(v37);
    v43 = *(void *)(v41 + 72);
    while (1)
    {
      sub_1000A7C90(v42, (uint64_t)v11, type metadata accessor for DeviceRecord);
      v44 = &v11[*(int *)(v80 + 24)];
      v45 = *((void *)v44 + 1);
      if (*(void *)v44 == a4 && v45 == a5) {
        break;
      }
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v44, v45, a4, a5, 0LL);
      sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
      if ((v47 & 1) != 0) {
        goto LABEL_42;
      }
      v42 += v43;
      if (!--v38)
      {
        swift_release(v29);
        swift_bridgeObjectRelease_n(v37, 2LL);
        goto LABEL_6;
      }
    }

    sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
LABEL_42:
    v48 = swift_bridgeObjectRelease_n(v37, 2LL);
    v49 = static os_log_type_t.error.getter(v48);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    v50 = qword_10023DFC0;
    v51 = sub_100098CD8((uint64_t *)&unk_100234E00);
    v52 = swift_allocObject(v51, 72LL, 7LL);
    *(_OWORD *)(v52 + 16) = v68;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 64) = sub_10009914C();
    *(void *)(v52 + 32) = a4;
    *(void *)(v52 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)( v49,  &_mh_execute_header,  v50,  "CloudSync: Remove Secondary Cloud Record with address: %@",  57LL,  2LL,  v52);
    swift_bridgeObjectRelease(v52);
    v53 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v53 + 16, v69);
    v54 = (uint64_t)v67;
    swift_retain(v67);
    sub_10016DCB8(a4, a5, 0x6552656369766544LL, 0xEC00000064726F63LL, v29, v53, (uint64_t)v70, v54);
    swift_release(v53);
    swift_release(v29);
    swift_release(v54);
LABEL_6:
    v21 = v78;
    v22 = v79;
  }

  v28 = v22 + 5;
  if (v22 + 5 < v75)
  {
    v26 = *(void *)(v74 + 8 * v28);
    if (!v26)
    {
      while (1)
      {
        v27 = v28 + 1;
        if (__OFADD__(v28, 1LL)) {
          goto LABEL_49;
        }
        if (v27 >= v75) {
          goto LABEL_45;
        }
        v26 = *(void *)(v74 + 8 * v27);
        ++v28;
        if (v26) {
          goto LABEL_24;
        }
      }
    }

    v27 = v22 + 5;
    goto LABEL_24;
  }

    v79 = (v27 - 1) & v27;
    v80 = v28;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_25:
    v30 = *(void *)(*(void *)(v78 + 56) + 8 * v25);
    v31 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v30);
    v32 = [v31 isFirstUnlocked];
    if ((_DWORD)v32)
    {
      v33 = sub_10013A76C();
      if (qword_100234BC8 != -1) {
        swift_once(&qword_100234BC8, sub_1000E72E4);
      }
      uint64_t v5 = v74;
      v34 = sub_100098D58(v74, (uint64_t)qword_10023DF00);
      v36 = (uint64_t)v72;
      v35 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v34, v5);
      v37 = sub_100138AC4(v36);
      swift_release(v33);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v5);
      v38 = v37[2];
      if (!v38) {
        goto LABEL_5;
      }
    }

    else
    {
      v39 = static os_log_type_t.error.getter(v32);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      v40 = v39;
      v37 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
      v38 = _swiftEmptyArrayStorage[2];
      if (!v38)
      {
LABEL_5:
        swift_release(v30);
        swift_bridgeObjectRelease(v37);
        goto LABEL_6;
      }
    }

    v41 = v77;
    v42 = (uint64_t)v37 + ((*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    swift_bridgeObjectRetain(v37);
    uint64_t v5 = *(void *)(v41 + 72);
    while (1)
    {
      sub_1000A7C90(v42, (uint64_t)v12, type metadata accessor for DeviceSupportInformationRecord);
      v43 = &v12[*(int *)(v81 + 24)];
      v44 = *((void *)v43 + 1);
      if (*(void *)v43 == a4 && v44 == a5) {
        break;
      }
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v43, v44, a4, a5, 0LL);
      sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceSupportInformationRecord);
      if ((v46 & 1) != 0) {
        goto LABEL_42;
      }
      v42 += v5;
      if (!--v38)
      {
        swift_release(v30);
        swift_bridgeObjectRelease_n(v37, 2LL);
        goto LABEL_6;
      }
    }

    sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceSupportInformationRecord);
LABEL_42:
    v47 = swift_bridgeObjectRelease_n(v37, 2LL);
    v48 = static os_log_type_t.error.getter(v47);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    v49 = qword_10023DFC0;
    v50 = sub_100098CD8((uint64_t *)&unk_100234E00);
    v51 = swift_allocObject(v50, 72LL, 7LL);
    *(_OWORD *)(v51 + 16) = v69;
    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 64) = sub_10009914C();
    *(void *)(v51 + 32) = a4;
    *(void *)(v51 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  v49,  "CloudSync: Remove Secondary Cloud DeviceSupportInformation with address: %@",  75LL,  2LL,  v51);
    swift_bridgeObjectRelease(v51);
    v52 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v52 + 16, v70);
    v53 = (uint64_t)v68;
    swift_retain(v68);
    sub_100177684(a4, a5, 0xD00000000000001ELL, v67, v30, v52, (uint64_t)v71, v53);
    swift_release(v52);
    swift_release(v30);
    swift_release(v53);
LABEL_6:
    v22 = v79;
    v23 = v80;
  }

  v29 = v23 + 5;
  if (v23 + 5 < v76)
  {
    v27 = *(void *)(v75 + 8 * v29);
    if (!v27)
    {
      while (1)
      {
        v28 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_49;
        }
        if (v28 >= v76) {
          goto LABEL_45;
        }
        v27 = *(void *)(v75 + 8 * v28);
        ++v29;
        if (v27) {
          goto LABEL_24;
        }
      }
    }

    v28 = v23 + 5;
    goto LABEL_24;
  }

    v78 = (v26 - 1) & v26;
    v79 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_25:
    v29 = *(void *)(*(void *)(v77 + 56) + 8 * v24);
    v30 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v29);
    v31 = [v30 isFirstUnlocked];
    if ((_DWORD)v31)
    {
      v32 = sub_10013A76C();
      if (qword_100234B70 != -1) {
        swift_once(&qword_100234B70, sub_1000CAF84);
      }
      v33 = v73;
      v34 = sub_100098D58(v73, (uint64_t)qword_10023DD70);
      v36 = (uint64_t)v71;
      v35 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v34, v33);
      v37 = sub_100138A68(v36);
      swift_release(v32);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v33);
      v38 = v37[2];
      if (!v38) {
        goto LABEL_5;
      }
    }

    else
    {
      v39 = static os_log_type_t.error.getter(v31);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      v40 = v39;
      v37 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
      v38 = _swiftEmptyArrayStorage[2];
      if (!v38)
      {
LABEL_5:
        swift_release(v29);
        swift_bridgeObjectRelease(v37);
        goto LABEL_6;
      }
    }

    v41 = v76;
    v42 = (uint64_t)v37 + ((*(unsigned __int8 *)(v76 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    swift_bridgeObjectRetain(v37);
    v43 = *(void *)(v41 + 72);
    while (1)
    {
      sub_1000A7C90(v42, (uint64_t)v11, type metadata accessor for MagicPairingSettingsRecord);
      v44 = &v11[*(int *)(v80 + 24)];
      v45 = *((void *)v44 + 1);
      if (*(void *)v44 == a4 && v45 == a5) {
        break;
      }
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v44, v45, a4, a5, 0LL);
      sub_1000A7CD4((uint64_t)v11, type metadata accessor for MagicPairingSettingsRecord);
      if ((v47 & 1) != 0) {
        goto LABEL_42;
      }
      v42 += v43;
      if (!--v38)
      {
        swift_release(v29);
        swift_bridgeObjectRelease_n(v37, 2LL);
        goto LABEL_6;
      }
    }

    sub_1000A7CD4((uint64_t)v11, type metadata accessor for MagicPairingSettingsRecord);
LABEL_42:
    v48 = swift_bridgeObjectRelease_n(v37, 2LL);
    v49 = static os_log_type_t.error.getter(v48);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    v50 = qword_10023DFC0;
    v51 = sub_100098CD8((uint64_t *)&unk_100234E00);
    v52 = swift_allocObject(v51, 72LL, 7LL);
    *(_OWORD *)(v52 + 16) = v68;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 64) = sub_10009914C();
    *(void *)(v52 + 32) = a4;
    *(void *)(v52 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)( v49,  &_mh_execute_header,  v50,  "CloudSync: Remove Secondary Cloud MagicSettings for address: %@",  63LL,  2LL,  v52);
    swift_bridgeObjectRelease(v52);
    v53 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v53 + 16, v69);
    v54 = (uint64_t)v67;
    swift_retain(v67);
    sub_100181504(a4, a5, 0x746553636967614DLL, 0xED000073676E6974LL, v29, v53, (uint64_t)v70, v54);
    swift_release(v53);
    swift_release(v29);
    swift_release(v54);
LABEL_6:
    v21 = v78;
    v22 = v79;
  }

  v28 = v22 + 5;
  if (v22 + 5 < v75)
  {
    v26 = *(void *)(v74 + 8 * v28);
    if (!v26)
    {
      while (1)
      {
        v27 = v28 + 1;
        if (__OFADD__(v28, 1LL)) {
          goto LABEL_49;
        }
        if (v27 >= v75) {
          goto LABEL_45;
        }
        v26 = *(void *)(v74 + 8 * v27);
        ++v28;
        if (v26) {
          goto LABEL_24;
        }
      }
    }

    v27 = v22 + 5;
    goto LABEL_24;
  }

  CKRecordKeyValueSetting.subscript.getter( &v82,  0xD000000000000013LL,  0x80000001001CEDC0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v46 = v83;
  v47 = (void *)(v31 + v81[9]);
  v49 = *v47;
  v48 = v47[1];
  if (!v83) {
    goto LABEL_29;
  }
  if (v82 != v49 || v83 != v48)
  {
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v47, v47[1], 0LL);
    swift_bridgeObjectRelease(v46);
    if ((v50 & 1) != 0) {
      goto LABEL_30;
    }
LABEL_29:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v49;
    v83 = v48;
    swift_bridgeObjectRetain(v48);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000013LL, 0x80000001001CEDC0LL, ObjectType);
    goto LABEL_30;
  }

  swift_bridgeObjectRelease(v83);
LABEL_30:
  CKRecordKeyValueSetting.subscript.getter( &v82,  v80,  0x80000001001CEDE0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v51 = v83;
  v52 = (void *)(v31 + v81[10]);
  v54 = *v52;
  v53 = v52[1];
  if (!v83) {
    goto LABEL_35;
  }
  if (v82 == v54 && v83 == v53)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_36;
  }

  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v52, v52[1], 0LL);
  swift_bridgeObjectRelease(v51);
  if ((v55 & 1) == 0)
  {
LABEL_35:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v54;
    v83 = v53;
    swift_bridgeObjectRetain(v53);
    CKRecordKeyValueSetting.subscript.setter(&v82, v80, 0x80000001001CEDE0LL, ObjectType);
  }

    v19 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_25:
    v14 = *(void *)(*(void *)(v82 + 56) + 8 * v22);
    v84[3] = &type metadata for AudioAccessoryFeatures;
    v84[4] = sub_10009E740();
    LOBYTE(v84[0]) = 0;
    swift_retain(v14);
    v26 = isFeatureEnabled(_:)(v84);
    sub_10009A498(v84);
    v27 = (uint64_t)_swiftEmptyArrayStorage;
    if ((v26 & 1) != 0)
    {
      v28 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
      v29 = objc_msgSend(v28, "isFirstUnlocked", v71);
      if ((_DWORD)v29)
      {
        v30 = sub_10013A76C();
        if (qword_100234B40 != -1) {
          swift_once(&qword_100234B40, sub_10009F940);
        }
        uint64_t v5 = v75;
        v31 = sub_100098D58(v75, (uint64_t)qword_10023DCE0);
        int v6 = v74;
        v32 = (uint64_t)v73;
        (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v31, v5);
        v27 = sub_100138AE8(v32);
        swift_release(v30);
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v32, v5);
      }

      else
      {
        v33 = static os_log_type_t.error.getter(v29);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        v34 = v33;
        v27 = (uint64_t)_swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
      }
    }

    v35 = v20;
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0) {
        v59 = v27;
      }
      else {
        v59 = v27 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v27);
      v36 = _CocoaArrayWrapper.endIndex.getter(v59);
      if (!v36) {
        goto LABEL_5;
      }
    }

    else
    {
      v36 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v27);
      if (!v36) {
        goto LABEL_5;
      }
    }

    if ((v27 & 0xC000000000000001LL) != 0) {
      v37 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v27);
    }
    else {
      v37 = (char *)*(id *)(v27 + 32);
    }
    int v6 = (uint64_t)v37;
    v38 = &v37[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    v39 = *(void *)&v37[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    v40 = *((void *)v38 + 1);
    if (v39 == a4 && v40 == v83)
    {
      swift_bridgeObjectRelease_n(v27, 2LL);
    }

    else
    {
      v42 = a4;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, a4, v83, 0LL);

      if ((v43 & 1) == 0)
      {
        a4 = v42;
        if (v36 != 1)
        {
          if ((v27 & 0xC000000000000001LL) != 0)
          {
            int v6 = 1LL;
            while (1)
            {
              v49 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v27);
              uint64_t v5 = v6 + 1;
              if (__OFADD__(v6, 1LL)) {
                break;
              }
              v50 = v49;
              v51 = v49 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress;
              v52 = *(void *)(v49 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
              v53 = *(void *)(v51 + 8);
              if (v52 == v42 && v53 == v83)
              {
                swift_bridgeObjectRelease_n(v27, 2LL);
                v44 = swift_unknownObjectRelease(v50);
                a4 = v42;
                goto LABEL_44;
              }

              v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v42, v83, 0LL);
              swift_unknownObjectRelease(v50);
              if ((v55 & 1) != 0) {
                goto LABEL_42;
              }
              ++v6;
              a4 = v42;
              if (v5 == v36) {
                goto LABEL_5;
              }
            }

            __break(1u);
LABEL_79:
            __break(1u);
          }

          else
          {
            int v6 = 5LL;
            while (1)
            {
              uint64_t v5 = v6 - 3;
              if (__OFADD__(v6 - 4, 1LL)) {
                break;
              }
              v56 = (void *)(*(void *)(v27 + 8 * v6)
                             + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
              v57 = v56[1];
              v58 = *v56 == v42 && v57 == v83;
              if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v56, v57, v42, v83, 0LL) & 1) != 0)
              {
                v44 = swift_bridgeObjectRelease_n(v27, 2LL);
                goto LABEL_44;
              }

              ++v6;
              if (v5 == v36) {
                goto LABEL_5;
              }
            }
          }

          __break(1u);
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }

void sub_100008ABC(void *a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (v3)
  {
    if (dword_1002341F0 <= 90)
    {
      if (dword_1002341F0 != -1 || (v4 = _LogCategory_Initialize(&dword_1002341F0, 90LL), id v3 = v7, v4))
      {
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _sendConversationDetectMessage:destinationIdentifier:completion:]_block_invoke",  90LL,  "Send CD Message <%@> failed with error: %@\n",  a1[4],  v3);
LABEL_8:
        id v3 = v7;
      }
    }
  }

  else if (dword_1002341F0 <= 30)
  {
    if (dword_1002341F0 != -1 || (v5 = _LogCategory_Initialize(&dword_1002341F0, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _sendConversationDetectMessage:destinationIdentifier:completion:]_block_invoke",  30LL,  "CD Message sent: destination %@, data <%@>\n",  a1[5],  a1[4]);
      goto LABEL_8;
    }
  }

  uint64_t v6 = a1[6];
  if (v6)
  {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    id v3 = v7;
  }
}

id sub_100008C18(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConversationDetectSignal:*(unsigned int *)(a1 + 40)];
}

id sub_100008CC4(uint64_t a1)
{
  float v2 = *(float *)(a1 + 40);
  float v3 = *(float *)(a1 + 44);
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 52);
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(a1 + 60);
  uint64_t v9 = *(unsigned int *)(a1 + 64);
  uint64_t v8 = *(unsigned int *)(a1 + 68);
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 76);
  uint64_t v12 = *(unsigned int *)(a1 + 77);
  uint64_t v13 = *(unsigned int *)(a1 + 81);
  uint64_t v14 = *(unsigned int *)(a1 + 85);
  uint64_t v15 = *(unsigned int *)(a1 + 89);
  uint64_t v16 = *(unsigned int *)(a1 + 93);
  uint64_t v17 = *(unsigned int *)(a1 + 97);
  uint64_t v18 = *(unsigned int *)(a1 + 101);
  uint64_t v19 = *(unsigned int *)(a1 + 105);
  uint64_t v20 = *(unsigned int *)(a1 + 109);
  int v21 = *(unsigned __int8 *)(a1 + 113);
  int v22 = *(__int16 *)(a1 + 114);
  int v23 = *(__int16 *)(a1 + 116);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 122);
  uint64_t v25 = *(unsigned int *)(a1 + 118);
  __int128 v26 = *(_OWORD *)(a1 + 139);
  __int128 v74 = *(_OWORD *)(a1 + 123);
  __int128 v75 = v26;
  __int128 v27 = *(_OWORD *)(a1 + 171);
  __int128 v76 = *(_OWORD *)(a1 + 155);
  __int128 v77 = v27;
  if (dword_1002341F0 <= 30)
  {
    int v60 = v11;
    uint64_t v61 = v13;
    uint64_t v62 = v12;
    uint64_t v63 = v15;
    uint64_t v64 = v14;
    uint64_t v65 = v17;
    uint64_t v66 = v16;
    uint64_t v67 = v18;
    uint64_t v68 = v19;
    uint64_t v69 = v20;
    int v70 = v21;
    int v71 = v23;
    int v72 = v22;
    if (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL))
    {
      *(void *)&v73[0] = 0LL;
      NSAppendPrintF(v73, "\n-- CD Decision Logic Tunings Begin --\n");
      uint64_t v59 = v24;
      id v28 = *(id *)&v73[0];
      v95[0] = v28;
      NSAppendPrintF(v95, "    OVAD threshold: %0.2f, TVAD threshold: %0.2f\n", v2, v3);
      uint64_t v58 = v25;
      id v29 = v95[0];

      id v94 = v29;
      NSAppendPrintF(&v94, "    Short conversation quiesce duration: %lu ms\n", v5);
      id v30 = v94;

      id v93 = v30;
      NSAppendPrintF(&v93, "    Medium conversation quiesce duration: %lu ms\n", v4);
      id v31 = v93;

      id v92 = v31;
      NSAppendPrintF(&v92, "    Long conversation quiesce duration: %lu ms\n", v7);
      id v32 = v92;

      id v91 = v32;
      NSAppendPrintF(&v91, "    Short conversation ending to default duration: %lu ms\n", v6);
      id v33 = v91;

      id v90 = v33;
      NSAppendPrintF(&v90, "    Medium conversation ending to default duration: %lu ms\n", v9);
      id v34 = v90;

      id v89 = v34;
      NSAppendPrintF(&v89, "    Long conversation ending to default duration: %lu ms\n", v8);
      id v35 = v89;

      id v88 = v35;
      NSAppendPrintF(&v88, "    Conversation start to active duration: %lu ms\n", v10);
      id v36 = v88;

      id v87 = v36;
      if (v60) {
        v37 = "yes";
      }
      else {
        v37 = "no";
      }
      NSAppendPrintF(&v87, "    Is AT enabled: %s\n", v37);
      id v38 = v87;

      id v86 = v38;
      NSAppendPrintF(&v86, "    Short conversation quiesce duration Min: %lu, Max: %lu ms\n", v62, v61);
      id v39 = v86;

      id v85 = v39;
      NSAppendPrintF(&v85, "    Medium conversation quiesce duration Min: %lu, Max: %lu ms\n", v64, v63);
      id v40 = v85;

      id v84 = v40;
      NSAppendPrintF(&v84, "    Long conversation quiesce duration Min: %lu, Max: %lu ms\n", v66, v65);
      id v41 = v84;

      id v83 = v41;
      NSAppendPrintF(&v83, "    Max AT false transitions per minute - short conversation: %lu\n", v67);
      id v42 = v83;

      id v82 = v42;
      NSAppendPrintF(&v82, "    Max AT false transitions per minute - medium conversation: %lu\n", v68);
      id v43 = v82;

      id v81 = v43;
      NSAppendPrintF(&v81, "    Max AT false transitions per minute - long conversation: %lu\n", v69);
      id v44 = v81;

      id v80 = v44;
      if (v70) {
        v45 = "yes";
      }
      else {
        v45 = "no";
      }
      NSAppendPrintF(&v80, "    Is MTA enabled: %s\n", v45);
      id v46 = v80;

      id v79 = v46;
      NSAppendPrintF(&v79, "    Recommended MTA aperture, begin: %d degree, end: %d degree\n", v72, v71);
      id v47 = v79;

      id v78 = v47;
      NSAppendPrintF(&v78, "-- CD Decision Logic Tunings End --\n");
      id v48 = v78;

      uint64_t v25 = v58;
      LogPrintF(&dword_1002341F0, "-[AAConversationDetectSessionManager setCDTunings:]_block_invoke", 30LL, "%@", v48);

      uint64_t v24 = v59;
    }

    if (dword_1002341F0 <= 30
      && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
    {
      unint64_t v49 = v25 | (v24 << 32);
      uint64_t v50 = (v49 >> 8);
      *(void *)&v73[0] = 0LL;
      NSAppendPrintF(v73, "\n-- CD Manual End-pointing Tunings Begin --\n");
      id v51 = *(id *)&v73[0];
      v95[0] = v51;
      v52 = "yes";
      if ((v49 & 1) == 0) {
        v52 = "no";
      }
      NSAppendPrintF(v95, "    Is MTA enabled: %s\n", v52);
      id v53 = v95[0];

      id v94 = v53;
      NSAppendPrintF(&v94, "    Manual end-pointing tuning threshold: %lu\n", v50);
      id v54 = v94;

      id v93 = v54;
      NSAppendPrintF(&v93, "-- CD Manual End-pointing Tunings End --\n");
      id v55 = v93;

      LogPrintF(&dword_1002341F0, "-[AAConversationDetectSessionManager setCDTunings:]_block_invoke", 30LL, "%@", v55);
    }
  }

  v56 = *(void **)(a1 + 32);
  v73[0] = v74;
  v73[1] = v75;
  v73[2] = v76;
  v73[3] = v77;
  return objc_msgSend(v56, "_setCDSignalAudioTunings:", v73, v11);
}

void sub_100009918(uint64_t a1, uint64_t a2, void *a3)
{
  float v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 identifier]);
  [v3 _sendConversationDetectMessage:v4 destinationIdentifier:v5 completion:0];
}

void sub_100009A70(uint64_t a1, uint64_t a2, void *a3)
{
  float v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 identifier]);
  [v3 _sendConversationDetectMessage:v4 destinationIdentifier:v5 completion:0];
}

void sub_100009BC8(uint64_t a1, uint64_t a2, void *a3)
{
  float v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 identifier]);
  [v3 _sendConversationDetectMessage:v4 destinationIdentifier:v5 completion:0];
}

LABEL_13:
    self->_cdSignal = a3;
    -[AAConversationDetectSessionManager _cdSessionSignalUpdate](self, "_cdSessionSignalUpdate");
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedHeadphones,  "objectForKeyedSubscript:",  v10));
  if (v11)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_connectedHeadphones,  "setObject:forKeyedSubscript:",  0LL,  v10);
    -[AAServicesDaemon _update](self, "_update");
  }
}

  [v9 _setOtherTipiAudioCategory:v11];
  [v9 _setOtherTipiPlayingApp:v14];
  tipiHealingHijackTimer = self->_tipiHealingHijackTimer;
  if (tipiHealingHijackTimer)
  {
    uint64_t v20 = tipiHealingHijackTimer;
    dispatch_source_cancel(v20);
    int v21 = self->_tipiHealingHijackTimer;
    self->_tipiHealingHijackTimer = 0LL;

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _receivedAudioCategory:withOptions:]",  30LL,  "Received audio score and tipi healing hijack timer is running, service pending MX request");
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v9 audioRoutingRequest]);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v9 audioRoutingResponse]);
    -[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]( self,  "_smartRoutingAudioRoutingRequest:withResponseHandler:",  v25,  v26);
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _receivedAudioCategory:withOptions:]",  30,  "[Hijackv2] Received audio category %u from tipi device %@ through relay message",  [v9 otherTipiAudioCategory],  v12);
  }
}

    self->routingAction = a3;
  }

    self->routingUI = a3;
  }

  ((void (*)(void *))v10[2])(v10);

  _Block_object_dispose(&v25, 8);
}

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    [v15 endTransaction:@"ManateeCheckAccountStatusWithCompletionHandler"];
    goto LABEL_14;
  }

  uint64_t v14 = sub_100060178("MagicPairing");
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR)) {
    sub_100190C4C();
  }
LABEL_14:
}

    goto LABEL_14;
  }

  if ((unint64_t)[*(id *)(a1 + 32) length] < 3)
  {
    uint64_t v8 = (os_log_s *)xpc_create_with_format("[ %BOOL ]", 1LL);
    CFRetain(v8);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);

    if (!v11)
    {
      [*(id *)(a1 + 40) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      uint64_t v12 = sub_100060178("MagicPairing");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "updateMasterZoneBlob Master zone has been upgraded successfully",  buf,  2u);
      }
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v15,  @"kUploadStatus",  0LL));
    [v14 sendCloudKitMsg:@"manateeUdpateStatus" args:v16];

    goto LABEL_13;
  }

  uint64_t v9 = sub_100060178("MagicPairing");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob record  %@", buf, 0xCu);
  }

  [*(id *)(a1 + 40) resetAccessoryZone:*(void *)(a1 + 32)];
LABEL_14:
}

    self->_connectionState = v4;
  }

    self->_nearbyStreamState = a3;
  }

    id v41 = [a1 accessoryKey];
    if (!v41) {
      goto LABEL_19;
    }
    id v42 = v41;
    id v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    id v46 = (uint64_t *)(v2 + v325[9]);
    id v47 = *v46;
    id v48 = v46[1];
    sub_1000991CC(*v46, v48);
    unint64_t v49 = [a1 accessoryKey];
    if (v49)
    {
      uint64_t v50 = v49;
      id v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      id v53 = v52;

      sub_1000991CC(v47, v48);
      sub_1000D53B8(v47, v48);
      LOBYTE(v50) = v54;
      sub_100099394(v51, v53);
      sub_100099394(v47, v48);
      sub_100099394(v47, v48);
      if ((v50 & 1) != 0)
      {
        sub_100099394(v43, v45);
        goto LABEL_19;
      }
    }

    else
    {
      sub_1000AC4C0(v47, v48);
      sub_1000AC4C0(0LL, 0xF000000000000000LL);
    }

    sub_100099394(v47, v48);
    *id v46 = v43;
    v46[1] = v45;
LABEL_19:
    id v55 = [a1 buttonModes];
    if (!v55) {
      goto LABEL_28;
    }
    v56 = v55;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v59 = v58;

    int v60 = (uint64_t *)(v2 + v325[15]);
    uint64_t v62 = *v60;
    uint64_t v61 = v60[1];
    swift_bridgeObjectRetain(v61);
    uint64_t v63 = [a1 buttonModes];
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      uint64_t v67 = v66;

      if (v62 == v65 && v61 == v67)
      {
        swift_bridgeObjectRelease(v59);
        swift_bridgeObjectRelease_n(v61, 2LL);
        goto LABEL_28;
      }

      uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, v65, v67, 0LL);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v67);
      if ((v68 & 1) != 0)
      {
        swift_bridgeObjectRelease(v59);
        goto LABEL_28;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v61);
    }

    swift_bridgeObjectRelease(v61);
    *int v60 = v57;
    v60[1] = v59;
LABEL_28:
    uint64_t v69 = [a1 color];
    if (!v69) {
      goto LABEL_37;
    }
    int v70 = v69;
    int v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v73 = v72;

    __int128 v74 = (uint64_t *)(v2 + v325[16]);
    __int128 v76 = *v74;
    __int128 v75 = v74[1];
    swift_bridgeObjectRetain(v75);
    __int128 v77 = [a1 color];
    if (v77)
    {
      id v78 = v77;
      id v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      id v81 = v80;

      if (v76 == v79 && v75 == v81)
      {
        swift_bridgeObjectRelease(v73);
        swift_bridgeObjectRelease_n(v75, 2LL);
        goto LABEL_37;
      }

      id v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v75, v79, v81, 0LL);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v81);
      if ((v82 & 1) != 0)
      {
        swift_bridgeObjectRelease(v73);
        goto LABEL_37;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v75);
    }

    swift_bridgeObjectRelease(v75);
    *__int128 v74 = v71;
    v74[1] = v73;
LABEL_37:
    id v83 = [a1 deviceIDFeatureBitsV1];
    if (!v83) {
      goto LABEL_46;
    }
    id v84 = v83;
    id v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    id v87 = v86;

    id v88 = (uint64_t *)(v2 + v325[17]);
    id v90 = *v88;
    id v89 = v88[1];
    swift_bridgeObjectRetain(v89);
    id v91 = [a1 deviceIDFeatureBitsV1];
    if (v91)
    {
      id v92 = v91;
      id v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      v95 = v94;

      if (v90 == v93 && v89 == v95)
      {
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease_n(v89, 2LL);
        goto LABEL_46;
      }

      v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v89, v93, v95, 0LL);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v95);
      if ((v96 & 1) != 0)
      {
        swift_bridgeObjectRelease(v87);
        goto LABEL_46;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v89);
    }

    swift_bridgeObjectRelease(v89);
    *id v88 = v85;
    v88[1] = v87;
LABEL_46:
    v97 = [a1 deviceIDFeatureBitsV2];
    if (!v97) {
      goto LABEL_55;
    }
    v98 = v97;
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    v101 = v100;

    v102 = (uint64_t *)(v2 + v325[18]);
    v104 = *v102;
    v103 = v102[1];
    swift_bridgeObjectRetain(v103);
    v105 = [a1 deviceIDFeatureBitsV2];
    if (v105)
    {
      v106 = v105;
      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      v109 = v108;

      if (v104 == v107 && v103 == v109)
      {
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease_n(v103, 2LL);
        goto LABEL_55;
      }

      v110 = _stringCompareWithSmolCheck(_:_:expecting:)(v104, v103, v107, v109, 0LL);
      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(v109);
      if ((v110 & 1) != 0)
      {
        swift_bridgeObjectRelease(v101);
        goto LABEL_55;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v103);
    }

    swift_bridgeObjectRelease(v103);
    *v102 = v99;
    v102[1] = v101;
LABEL_55:
    v111 = [a1 encryptionKey];
    if (!v111) {
      goto LABEL_61;
    }
    v112 = v111;
    v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v115 = v114;

    v116 = (uint64_t *)(v2 + v325[12]);
    v117 = *v116;
    v118 = v116[1];
    sub_1000991CC(*v116, v118);
    v119 = [a1 encryptionKey];
    if (v119)
    {
      v120 = v119;
      v121 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v123 = v122;

      sub_1000991CC(v117, v118);
      sub_1000D53B8(v117, v118);
      LOBYTE(v120) = v124;
      sub_100099394(v121, v123);
      sub_100099394(v117, v118);
      sub_100099394(v117, v118);
      if ((v120 & 1) != 0)
      {
        sub_100099394(v113, v115);
        goto LABEL_61;
      }
    }

    else
    {
      sub_1000AC4C0(v117, v118);
      sub_1000AC4C0(0LL, 0xF000000000000000LL);
    }

    sub_100099394(v117, v118);
    *v116 = v113;
    v116[1] = v115;
LABEL_61:
    v125 = [a1 irk];
    if (!v125) {
      goto LABEL_67;
    }
    v126 = v125;
    v127 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v129 = v128;

    v130 = (uint64_t *)(v2 + v325[11]);
    v131 = *v130;
    v132 = v130[1];
    sub_1000991CC(*v130, v132);
    v133 = [a1 irk];
    if (v133)
    {
      v134 = v133;
      v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v137 = v136;

      sub_1000991CC(v131, v132);
      sub_1000D53B8(v131, v132);
      LOBYTE(v134) = v138;
      sub_100099394(v135, v137);
      sub_100099394(v131, v132);
      sub_100099394(v131, v132);
      if ((v134 & 1) != 0)
      {
        sub_100099394(v127, v129);
        goto LABEL_67;
      }
    }

    else
    {
      sub_1000AC4C0(v131, v132);
      sub_1000AC4C0(0LL, 0xF000000000000000LL);
    }

    sub_100099394(v131, v132);
    *v130 = v127;
    v130[1] = v129;
LABEL_67:
    v139 = [a1 listeningServices];
    if (!v139) {
      goto LABEL_76;
    }
    v140 = v139;
    v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
    v143 = v142;

    v144 = (uint64_t *)(v2 + v325[19]);
    v146 = *v144;
    v145 = v144[1];
    swift_bridgeObjectRetain(v145);
    v147 = [a1 listeningServices];
    if (v147)
    {
      v148 = v147;
      v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
      v151 = v150;

      if (v146 == v149 && v145 == v151)
      {
        swift_bridgeObjectRelease(v143);
        swift_bridgeObjectRelease_n(v145, 2LL);
        goto LABEL_76;
      }

      v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v145, v149, v151, 0LL);
      swift_bridgeObjectRelease(v145);
      swift_bridgeObjectRelease(v151);
      if ((v152 & 1) != 0)
      {
        swift_bridgeObjectRelease(v143);
        goto LABEL_76;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v145);
    }

    swift_bridgeObjectRelease(v145);
    *v144 = v141;
    v144[1] = v143;
LABEL_76:
    v153 = [a1 listeningServicesV2];
    if (!v153) {
      goto LABEL_85;
    }
    v154 = v153;
    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
    v157 = v156;

    v158 = (uint64_t *)(v2 + v325[20]);
    v160 = *v158;
    v159 = v158[1];
    swift_bridgeObjectRetain(v159);
    v161 = [a1 listeningServicesV2];
    if (v161)
    {
      v162 = v161;
      v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
      v165 = v164;

      if (v160 == v163 && v159 == v165)
      {
        swift_bridgeObjectRelease(v157);
        swift_bridgeObjectRelease_n(v159, 2LL);
        goto LABEL_85;
      }

      v166 = _stringCompareWithSmolCheck(_:_:expecting:)(v160, v159, v163, v165, 0LL);
      swift_bridgeObjectRelease(v159);
      swift_bridgeObjectRelease(v165);
      if ((v166 & 1) != 0)
      {
        swift_bridgeObjectRelease(v157);
        goto LABEL_85;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v159);
    }

    swift_bridgeObjectRelease(v159);
    *v158 = v155;
    v158[1] = v157;
LABEL_85:
    v167 = [a1 masterKey];
    if (!v167) {
      goto LABEL_91;
    }
    v168 = v167;
    v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v171 = v170;

    v172 = (uint64_t *)(v2 + v325[7]);
    v173 = *v172;
    v174 = v172[1];
    sub_1000991CC(*v172, v174);
    v175 = [a1 masterKey];
    if (v175)
    {
      v176 = v175;
      v177 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v179 = v178;

      sub_1000991CC(v173, v174);
      sub_1000D53B8(v173, v174);
      LOBYTE(v176) = v180;
      sub_100099394(v177, v179);
      sub_100099394(v173, v174);
      sub_100099394(v173, v174);
      if ((v176 & 1) != 0)
      {
        sub_100099394(v169, v171);
        goto LABEL_91;
      }
    }

    else
    {
      sub_1000AC4C0(v173, v174);
      sub_1000AC4C0(0LL, 0xF000000000000000LL);
    }

    sub_100099394(v173, v174);
    *v172 = v169;
    v172[1] = v171;
LABEL_91:
    v181 = [a1 masterHint];
    if (!v181) {
      goto LABEL_97;
    }
    v182 = v181;
    v183 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v185 = v184;

    v186 = (uint64_t *)(v2 + v325[8]);
    v187 = *v186;
    v188 = v186[1];
    sub_1000991CC(*v186, v188);
    v189 = [a1 masterHint];
    if (v189)
    {
      v190 = v189;
      v191 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v193 = v192;

      sub_1000991CC(v187, v188);
      sub_1000D53B8(v187, v188);
      LOBYTE(v190) = v194;
      sub_100099394(v191, v193);
      sub_100099394(v187, v188);
      sub_100099394(v187, v188);
      if ((v190 & 1) != 0)
      {
        sub_100099394(v183, v185);
        goto LABEL_97;
      }
    }

    else
    {
      sub_1000AC4C0(v187, v188);
      sub_1000AC4C0(0LL, 0xF000000000000000LL);
    }

    sub_100099394(v187, v188);
    *v186 = v183;
    v186[1] = v185;
LABEL_97:
    v195 = [a1 optimizedBatteryCharging];
    if (!v195) {
      goto LABEL_106;
    }
    v196 = v195;
    v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
    v199 = v198;

    v200 = (uint64_t *)(v2 + v325[22]);
    v202 = *v200;
    v201 = v200[1];
    swift_bridgeObjectRetain(v201);
    v203 = [a1 optimizedBatteryCharging];
    if (v203)
    {
      v204 = v203;
      v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
      v207 = v206;

      if (v202 == v205 && v201 == v207)
      {
        swift_bridgeObjectRelease(v199);
        swift_bridgeObjectRelease_n(v201, 2LL);
        goto LABEL_106;
      }

      v208 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, v201, v205, v207, 0LL);
      swift_bridgeObjectRelease(v201);
      swift_bridgeObjectRelease(v207);
      if ((v208 & 1) != 0)
      {
        swift_bridgeObjectRelease(v199);
        goto LABEL_106;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v201);
    }

    swift_bridgeObjectRelease(v201);
    *v200 = v197;
    v200[1] = v199;
LABEL_106:
    v209 = [a1 optimizedBatteryFullChargeDeadline];
    if (!v209) {
      goto LABEL_115;
    }
    v210 = v209;
    v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
    v213 = v212;

    v214 = (uint64_t *)(v2 + v325[23]);
    v216 = *v214;
    v215 = v214[1];
    swift_bridgeObjectRetain(v215);
    v217 = [a1 optimizedBatteryFullChargeDeadline];
    if (v217)
    {
      v218 = v217;
      v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v217);
      v221 = v220;

      if (v216 == v219 && v215 == v221)
      {
        swift_bridgeObjectRelease(v213);
        swift_bridgeObjectRelease_n(v215, 2LL);
        goto LABEL_115;
      }

      v222 = _stringCompareWithSmolCheck(_:_:expecting:)(v216, v215, v219, v221, 0LL);
      swift_bridgeObjectRelease(v215);
      swift_bridgeObjectRelease(v221);
      if ((v222 & 1) != 0)
      {
        swift_bridgeObjectRelease(v213);
        goto LABEL_115;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v215);
    }

    swift_bridgeObjectRelease(v215);
    *v214 = v211;
    v214[1] = v213;
LABEL_115:
    v223 = [a1 productID];
    if (!v223) {
      goto LABEL_124;
    }
    v224 = v223;
    v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v223);
    v227 = v226;

    v228 = (uint64_t *)(v2 + v325[13]);
    v230 = *v228;
    v229 = v228[1];
    swift_bridgeObjectRetain(v229);
    v231 = [a1 productID];
    if (v231)
    {
      v232 = v231;
      v233 = static String._unconditionallyBridgeFromObjectiveC(_:)(v231);
      v235 = v234;

      if (v230 == v233 && v229 == v235)
      {
        swift_bridgeObjectRelease(v227);
        swift_bridgeObjectRelease_n(v229, 2LL);
        goto LABEL_124;
      }

      v236 = _stringCompareWithSmolCheck(_:_:expecting:)(v230, v229, v233, v235, 0LL);
      swift_bridgeObjectRelease(v229);
      swift_bridgeObjectRelease(v235);
      if ((v236 & 1) != 0)
      {
        swift_bridgeObjectRelease(v227);
        goto LABEL_124;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v229);
    }

    swift_bridgeObjectRelease(v229);
    *v228 = v225;
    v228[1] = v227;
LABEL_124:
    v237 = [a1 ratchet];
    if (!v237) {
      goto LABEL_133;
    }
    v238 = v237;
    v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(v237);
    v241 = v240;

    v242 = (uint64_t *)(v2 + v325[24]);
    v244 = *v242;
    v243 = v242[1];
    swift_bridgeObjectRetain(v243);
    v245 = [a1 ratchet];
    if (v245)
    {
      v246 = v245;
      v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
      v249 = v248;

      if (v244 == v247 && v243 == v249)
      {
        swift_bridgeObjectRelease(v241);
        swift_bridgeObjectRelease_n(v243, 2LL);
        goto LABEL_133;
      }

      v250 = _stringCompareWithSmolCheck(_:_:expecting:)(v244, v243, v247, v249, 0LL);
      swift_bridgeObjectRelease(v243);
      swift_bridgeObjectRelease(v249);
      if ((v250 & 1) != 0)
      {
        swift_bridgeObjectRelease(v241);
        goto LABEL_133;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v243);
    }

    swift_bridgeObjectRelease(v243);
    *v242 = v239;
    v242[1] = v241;
LABEL_133:
    v251 = [a1 settingsMask];
    if (!v251) {
      goto LABEL_142;
    }
    v252 = v251;
    v253 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
    v255 = v254;

    v256 = (uint64_t *)(v2 + v325[26]);
    v258 = *v256;
    v257 = v256[1];
    swift_bridgeObjectRetain(v257);
    v259 = [a1 settingsMask];
    if (v259)
    {
      v260 = v259;
      v261 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
      v263 = v262;

      if (v258 == v261 && v257 == v263)
      {
        swift_bridgeObjectRelease(v255);
        swift_bridgeObjectRelease_n(v257, 2LL);
        goto LABEL_142;
      }

      v264 = _stringCompareWithSmolCheck(_:_:expecting:)(v258, v257, v261, v263, 0LL);
      swift_bridgeObjectRelease(v257);
      swift_bridgeObjectRelease(v263);
      if ((v264 & 1) != 0)
      {
        swift_bridgeObjectRelease(v255);
        goto LABEL_142;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v257);
    }

    swift_bridgeObjectRelease(v257);
    *v256 = v253;
    v256[1] = v255;
LABEL_142:
    v265 = [a1 spatialAudio];
    if (!v265) {
      goto LABEL_151;
    }
    v266 = v265;
    v267 = static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
    v269 = v268;

    v270 = (uint64_t *)(v2 + v325[21]);
    v272 = *v270;
    v271 = v270[1];
    swift_bridgeObjectRetain(v271);
    v273 = [a1 spatialAudio];
    if (v273)
    {
      v274 = v273;
      v275 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
      v277 = v276;

      if (v272 == v275 && v271 == v277)
      {
        swift_bridgeObjectRelease(v269);
        swift_bridgeObjectRelease_n(v271, 2LL);
        goto LABEL_151;
      }

      v278 = _stringCompareWithSmolCheck(_:_:expecting:)(v272, v271, v275, v277, 0LL);
      swift_bridgeObjectRelease(v271);
      swift_bridgeObjectRelease(v277);
      if ((v278 & 1) != 0)
      {
        swift_bridgeObjectRelease(v269);
        goto LABEL_151;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v271);
    }

    swift_bridgeObjectRelease(v271);
    *v270 = v267;
    v270[1] = v269;
LABEL_151:
    v279 = [a1 supportedServices];
    if (!v279) {
      goto LABEL_160;
    }
    v280 = v279;
    v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
    v283 = v282;

    v284 = (uint64_t *)(v2 + v325[27]);
    v286 = *v284;
    v285 = v284[1];
    swift_bridgeObjectRetain(v285);
    v287 = [a1 supportedServices];
    if (v287)
    {
      v288 = v287;
      v289 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
      v291 = v290;

      if (v286 == v289 && v285 == v291)
      {
        swift_bridgeObjectRelease(v283);
        swift_bridgeObjectRelease_n(v285, 2LL);
        goto LABEL_160;
      }

      v292 = _stringCompareWithSmolCheck(_:_:expecting:)(v286, v285, v289, v291, 0LL);
      swift_bridgeObjectRelease(v285);
      swift_bridgeObjectRelease(v291);
      if ((v292 & 1) != 0)
      {
        swift_bridgeObjectRelease(v283);
        goto LABEL_160;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v285);
    }

    swift_bridgeObjectRelease(v285);
    *v284 = v281;
    v284[1] = v283;
LABEL_160:
    v293 = [a1 vendorID];
    if (!v293) {
      goto LABEL_169;
    }
    v294 = v293;
    v295 = static String._unconditionallyBridgeFromObjectiveC(_:)(v293);
    v297 = v296;

    v298 = (uint64_t *)(v2 + v325[14]);
    v300 = *v298;
    v299 = v298[1];
    swift_bridgeObjectRetain(v299);
    v301 = [a1 vendorID];
    if (v301)
    {
      v302 = v301;
      v303 = static String._unconditionallyBridgeFromObjectiveC(_:)(v301);
      v305 = v304;

      if (v300 == v303 && v299 == v305)
      {
        swift_bridgeObjectRelease(v297);
        swift_bridgeObjectRelease_n(v299, 2LL);
        goto LABEL_169;
      }

      v306 = _stringCompareWithSmolCheck(_:_:expecting:)(v300, v299, v303, v305, 0LL);
      swift_bridgeObjectRelease(v299);
      swift_bridgeObjectRelease(v305);
      if ((v306 & 1) != 0)
      {
        swift_bridgeObjectRelease(v297);
        goto LABEL_169;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v299);
    }

    swift_bridgeObjectRelease(v299);
    *v298 = v295;
    v298[1] = v297;
LABEL_169:
    v307 = [a1 version];
    if (v307)
    {
      v308 = v307;
      v309 = static String._unconditionallyBridgeFromObjectiveC(_:)(v307);
      v311 = v310;

      v312 = (uint64_t *)(v2 + v325[28]);
      v314 = *v312;
      v313 = v312[1];
      swift_bridgeObjectRetain(v313);
      v315 = [a1 version];
      if (v315)
      {
        v316 = v315;
        v317 = static String._unconditionallyBridgeFromObjectiveC(_:)(v315);
        v319 = v318;

        if (v314 == v317 && v313 == v319)
        {
          swift_bridgeObjectRelease(v311);
          v307 = (id)swift_bridgeObjectRelease_n(v313, 2LL);
          goto LABEL_178;
        }

        v320 = _stringCompareWithSmolCheck(_:_:expecting:)(v314, v313, v317, v319, 0LL);
        swift_bridgeObjectRelease(v313);
        swift_bridgeObjectRelease(v319);
        if ((v320 & 1) != 0)
        {
          v307 = (id)swift_bridgeObjectRelease(v311);
          goto LABEL_178;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v313);
      }

      v307 = (id)swift_bridgeObjectRelease(v313);
      *v312 = v309;
      v312[1] = v311;
    }

    uint64_t result = sub_10010C2BC(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

LABEL_20:
  if (!pauseConversationDetect) {
    self->_currentPauseReason = 0;
  }
  -[AAConversationDetectSessionManager _updateAccessoriesWithPauseState](self, "_updateAccessoriesWithPauseState");
  if (self->_pauseConversationDetect) {
    -[AAConversationDetectSessionManager _cdSessionEnsureDeactivated:](self, "_cdSessionEnsureDeactivated:", 0LL);
  }
}

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v11 = a1[5];
      uint64_t v12 = *(_BYTE *)(v11 + 401) + 1;
      *(_BYTE *)(v11 + 401) = v12;
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleHijackBlockingwithDevice:]_block_invoke",  30LL,  "Hijackblocking continue, current count %d",  v12);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 1152) objectForKeyedSubscript:a1[6]]);
    [v14 _setHijackBackoffTick:mach_absolute_time()];

    uint64_t v15 = (id *)a1[5];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15[144] objectForKeyedSubscript:a1[6]]);
    uint64_t v13 = objc_msgSend( v15,  "_checkTickswithinWindow:withWindow:",  objc_msgSend(v16, "hijackBackoffTicks"),  *(void *)(a1[5] + 784));

    goto LABEL_26;
  }

            id v36 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s idsDevice](v31, "idsDevice"));
            v37 = (void *)objc_claimAutoreleasedReturnValue([v36 uniqueID]);
            id v38 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
            id v39 = [v37 isEqualToString:v38];

            if (v39)
            {
              -[os_log_s setState:](v31, "setState:", 4LL);
              id v40 = (void *)objc_claimAutoreleasedReturnValue(-[CBIDSManager messageIdentifiersWaitingForAck](self, "messageIdentifiersWaitingForAck"));
              [v40 setObject:v31 forKey:v14];
            }

            goto LABEL_24;
          }
        }

        id v35 = v28;

        goto LABEL_20;
      }

      v52[0] = @"MessageType";
      v52[1] = @"Version 3";
      v53[0] = @"CloudPairing";
      v53[1] = v7;
      uint64_t v18 = v53;
      uint64_t v19 = v52;
    }

    uint64_t v20 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v19,  2LL));
    goto LABEL_13;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_10018EC78();
  }
LABEL_25:

  objc_autoreleasePoolPop(v10);
}

  id v43 = 1;
LABEL_24:

  return v43;
}
}
}

        uint64_t v12 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }

      uint64_t v20 = *(void *)(v8 + 48) + 16 * v16;
      a1 = *(char **)v20;
      uint64_t v10 = *(void *)(v20 + 8);
      int v21 = *(void *)(*(void *)(v8 + 56) + 8 * v16);
      int v22 = *v13;
      int v23 = *(void *)(*v13 + 16);
      uint64_t v24 = swift_bridgeObjectRetain(v10);
      if (!v23) {
        break;
      }
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v22);
      uint64_t v25 = sub_1000A3A10((uint64_t)a1, v10);
      if ((v26 & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        uint64_t v24 = swift_bridgeObjectRelease(v22);
        break;
      }

      __int128 v27 = *(void *)(*(void *)(v22 + 56) + 8 * v25);
      swift_bridgeObjectRelease(v10);
      uint64_t v24 = swift_bridgeObjectRelease(v22);
      if (v27 < v21) {
        goto LABEL_24;
      }
LABEL_30:
      v37 = static os_log_type_t.info.getter(v24);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      id v38 = qword_10023DFC8;
      id v39 = sub_100098CD8((uint64_t *)&unk_100234E00);
      id v40 = swift_allocObject(v39, 112LL, 7LL);
      *(_OWORD *)(v40 + 16) = v70;
      *(void *)(v40 + 56) = &type metadata for String;
      id v41 = sub_10009914C();
      *(void *)(v40 + 32) = a1;
      *(void *)(v40 + 40) = v10;
      *(void *)(v40 + 96) = &type metadata for UInt64;
      *(void *)(v40 + 104) = &protocol witness table for UInt64;
      *(void *)(v40 + 64) = v41;
      *(void *)(v40 + 72) = v21;
      os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  v38,  "ProxCards '%@' was not updated to '%lu'. No change",  50LL,  2LL,  v40);
      swift_bridgeObjectRelease(v40);
    }

    if (!v21) {
      goto LABEL_30;
    }
LABEL_24:
    id v28 = v67;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
    v71[0] = v28;
    id v31 = sub_1000A3A10((uint64_t)a1, v10);
    id v32 = v28[2];
    id v33 = (v30 & 1) == 0;
    id v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      goto LABEL_47;
    }
    if (v28[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        id v47 = v30;
        sub_10010E118();
        LOBYTE(v30) = v47;
      }
    }

    else
    {
      LODWORD(v67) = v30;
      sub_10010CC78(v34, isUniquelyReferenced_nonNull_native);
      id v35 = sub_1000A3A10((uint64_t)a1, v10);
      id v36 = v30 & 1;
      LOBYTE(v30) = (_BYTE)v67;
      id v31 = v35;
    }

    id v42 = (void *)v71[0];
    uint64_t v67 = (void *)v71[0];
    if ((v30 & 1) != 0)
    {
      *(void *)(*(void *)(v71[0] + 56LL) + 8 * v31) = v21;
      goto LABEL_39;
    }

    *(void *)(v71[0] + 8 * (v31 >> 6) + 64) |= 1LL << v31;
    id v43 = (void *)(v42[6] + 16 * v31);
    *id v43 = a1;
    v43[1] = v10;
    *(void *)(v42[7] + 8 * v31) = v21;
    id v44 = v42[2];
    v45 = __OFADD__(v44, 1LL);
    id v46 = v44 + 1;
    if (v45) {
      break;
    }
    v42[2] = v46;
    swift_bridgeObjectRetain(v10);
LABEL_39:
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

          uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1LL);
          goto LABEL_21;
        }
      }

      uint64_t v18 = 0LL;
      uint64_t v19 = 0xE000000000000000LL;
      if (v15) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }

  uint64_t v20 = v4;
  return (v20 & 1) == 0;
}

          uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1LL);
          goto LABEL_21;
        }
      }

      uint64_t v18 = 0LL;
      uint64_t v19 = 0xE000000000000000LL;
      if (v15) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }

  uint64_t v20 = v4;
  return (v20 & 1) == 0;
}

  id v79 = v235;
  id v81 = objc_msgSend(v235, "caseName", v213);
  if (!v81)
  {
    sub_1000ECDFC((uint64_t)v27, (uint64_t)v24);
    id v80 = v241;
    id v85 = v233;
    goto LABEL_27;
  }

  id v82 = v81;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
  id v84 = v83;

  swift_bridgeObjectRelease(v84);
  sub_1000ECDFC((uint64_t)v27, (uint64_t)v24);
  id v80 = v241;
  id v85 = v233;
  if (!v84)
  {
LABEL_27:
    sub_1000ECE40((uint64_t)v24);
    sub_1000ECE40((uint64_t)v27);
    goto LABEL_28;
  }

  id v86 = [v79 caseName];
  if (!v86)
  {
    v158 = *(void *)&v24[v234[8] + 8];
    swift_bridgeObjectRetain(v158);
    sub_1000ECE40((uint64_t)v24);
    sub_1000ECE40((uint64_t)v27);
    swift_bridgeObjectRelease(v158);
    id v78 = v239;
    goto LABEL_71;
  }

  id v87 = v86;
  id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
  id v90 = v89;

  id v91 = &v24[v234[8]];
  id v92 = *((void *)v91 + 1);
  if (v88 == *(void *)v91 && v90 == v92)
  {
    swift_bridgeObjectRetain(v90);
    sub_1000ECE40((uint64_t)v24);
    sub_1000ECE40((uint64_t)v27);
    swift_bridgeObjectRelease_n(v90, 2LL);
    id v85 = v233;
LABEL_28:
    id v93 = v238;
    sub_1000ECDFC(v239, v238);
    goto LABEL_29;
  }

  v176 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v90, *(void *)v91, v92, 0LL);
  swift_bridgeObjectRetain(v90);
  sub_1000ECE40((uint64_t)v24);
  sub_1000ECE40((uint64_t)v27);
  swift_bridgeObjectRelease_n(v90, 2LL);
  id v93 = v238;
  id v78 = v239;
  sub_1000ECDFC(v239, v238);
  id v85 = v233;
  if ((v176 & 1) == 0) {
    goto LABEL_72;
  }
LABEL_29:
  id v94 = [v79 caseFirmwareVersion];
  if (!v94)
  {
    sub_1000ECDFC(v93, v85);
    v98 = v239;
    goto LABEL_37;
  }

  v95 = v94;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  v97 = v96;

  swift_bridgeObjectRelease(v97);
  sub_1000ECDFC(v93, v85);
  v98 = v239;
  if (!v97)
  {
LABEL_37:
    sub_1000ECE40(v85);
    sub_1000ECE40(v93);
    sub_1000ECDFC(v98, v80);
    goto LABEL_38;
  }

  uint64_t result = [v79 caseFirmwareVersion];
  if (!result)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }

  v99 = result;
  v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v102 = v101;

  v103 = sub_1001335EC(v100, v102);
  if ((v104 & 1) != 0) {
    v103 = 0LL;
  }
  v105 = sub_1000EBE80(v103);
  sub_1000ECE40(v85);
  sub_1000ECE40(v93);
  v98 = v239;
  sub_1000ECDFC(v239, v80);
  if ((v105 & 1) != 0) {
    goto LABEL_73;
  }
LABEL_38:
  v106 = [v79 caseSerialNumber];
  v108 = (uint64_t)v236;
  v107 = (uint64_t)v237;
  if (!v106)
  {
    v112 = v241;
    v113 = v232;
    sub_1000ECDFC(v241, v232);
    goto LABEL_45;
  }

  v109 = v106;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
  v111 = v110;

  swift_bridgeObjectRelease(v111);
  v112 = v241;
  v113 = v232;
  sub_1000ECDFC(v241, v232);
  if (!v111)
  {
LABEL_45:
    sub_1000ECE40(v113);
    sub_1000ECE40(v112);
    goto LABEL_46;
  }

  v114 = [v79 caseSerialNumber];
  if (!v114)
  {
    v178 = v232;
    v179 = *(void *)(v232 + v234[10] + 8);
    swift_bridgeObjectRetain(v179);
    sub_1000ECE40(v178);
    sub_1000ECE40(v241);
    swift_bridgeObjectRelease(v179);
    goto LABEL_74;
  }

  v115 = v114;
  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
  v118 = v117;

  v119 = (void *)(v232 + v234[10]);
  v120 = v119[1];
  if (v116 == *v119 && v118 == v120)
  {
    swift_bridgeObjectRetain(v118);
    sub_1000ECE40(v232);
    sub_1000ECE40(v241);
    swift_bridgeObjectRelease_n(v118, 2LL);
LABEL_46:
    sub_1000ECDFC(v98, v240);
    goto LABEL_47;
  }

  v180 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v118, *v119, v120, 0LL);
  swift_bridgeObjectRetain(v118);
  sub_1000ECE40(v232);
  sub_1000ECE40(v241);
  swift_bridgeObjectRelease_n(v118, 2LL);
  v159 = v240;
  sub_1000ECDFC(v98, v240);
  if ((v180 & 1) == 0) {
    goto LABEL_75;
  }
LABEL_47:
  v121 = [v79 hardwareVersion];
  if (!v121)
  {
    v125 = v240;
    v126 = v231;
    sub_1000ECDFC(v240, v231);
    goto LABEL_54;
  }

  v122 = v121;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
  v124 = v123;

  swift_bridgeObjectRelease(v124);
  v125 = v240;
  v126 = v231;
  sub_1000ECDFC(v240, v231);
  if (!v124)
  {
LABEL_54:
    sub_1000ECE40(v126);
    sub_1000ECE40(v125);
    sub_1000ECDFC(v98, v108);
    goto LABEL_55;
  }

  uint64_t result = [v79 hardwareVersion];
  if (!result)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }

  v127 = result;
  v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v130 = v129;

  v131 = (void *)(v231 + v234[11]);
  v132 = v131[1];
  if (*v131 == v128 && v132 == v130)
  {
    swift_bridgeObjectRelease(v130);
    v125 = v240;
    v126 = v231;
    goto LABEL_54;
  }

  v177 = _stringCompareWithSmolCheck(_:_:expecting:)(*v131, v132, v128, v130, 1LL);
  swift_bridgeObjectRelease(v130);
  sub_1000ECE40(v231);
  sub_1000ECE40(v240);
  sub_1000ECDFC(v98, v108);
  if ((v177 & 1) != 0) {
    goto LABEL_76;
  }
LABEL_55:
  v133 = [v79 leftBudSerialNumber];
  if (!v133)
  {
    v137 = v230;
    sub_1000ECDFC(v108, v230);
    v138 = v234;
    goto LABEL_62;
  }

  v134 = v133;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
  v136 = v135;

  swift_bridgeObjectRelease(v136);
  v137 = v230;
  sub_1000ECDFC(v108, v230);
  v138 = v234;
  if (!v136)
  {
LABEL_62:
    sub_1000ECE40(v137);
    sub_1000ECE40(v108);
    goto LABEL_63;
  }

  v139 = [v79 leftBudSerialNumber];
  if (!v139)
  {
    v181 = v230;
    v182 = *(void *)(v230 + v138[12] + 8);
    swift_bridgeObjectRetain(v182);
    sub_1000ECE40(v181);
    sub_1000ECE40(v108);
    swift_bridgeObjectRelease(v182);
    goto LABEL_77;
  }

  v140 = v139;
  v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
  v143 = v142;

  v144 = (void *)(v230 + v138[12]);
  v145 = v144[1];
  if (v141 == *v144 && v143 == v145)
  {
    swift_bridgeObjectRetain(v143);
    sub_1000ECE40(v230);
    sub_1000ECE40(v108);
    swift_bridgeObjectRelease_n(v143, 2LL);
LABEL_63:
    sub_1000ECDFC(v98, v107);
    goto LABEL_64;
  }

  v183 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v143, *v144, v145, 0LL);
  swift_bridgeObjectRetain(v143);
  sub_1000ECE40(v230);
  sub_1000ECE40(v108);
  swift_bridgeObjectRelease_n(v143, 2LL);
  sub_1000ECDFC(v98, v107);
  if ((v183 & 1) == 0) {
    goto LABEL_78;
  }
LABEL_64:
  v146 = [v79 rightBudSerialNumber];
  if (!v146)
  {
    v150 = v229;
    sub_1000ECDFC(v107, v229);
    goto LABEL_82;
  }

  v147 = v146;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
  v149 = v148;

  swift_bridgeObjectRelease(v149);
  v150 = v229;
  sub_1000ECDFC(v107, v229);
  if (!v149)
  {
LABEL_82:
    sub_1000ECE40(v150);
    sub_1000ECE40(v107);
    goto LABEL_83;
  }

  v151 = [v79 rightBudSerialNumber];
  if (!v151)
  {
    v184 = v229;
    v185 = *(void *)(v229 + v138[13] + 8);
    swift_bridgeObjectRetain(v185);
    sub_1000ECE40(v184);
    sub_1000ECE40(v107);
    swift_bridgeObjectRelease(v185);
    goto LABEL_79;
  }

  v152 = v151;
  v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
  v155 = v154;

  v156 = (void *)(v229 + v138[13]);
  v157 = v156[1];
  if (v153 == *v156 && v155 == v157)
  {
    swift_bridgeObjectRetain(v155);
    sub_1000ECE40(v229);
    sub_1000ECE40(v107);
    swift_bridgeObjectRelease_n(v155, 2LL);
LABEL_83:
    sub_1000ECDFC(v98, (uint64_t)v6);
    goto LABEL_84;
  }

  v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v153, v155, *v156, v157, 0LL);
  swift_bridgeObjectRetain(v155);
  sub_1000ECE40(v229);
  sub_1000ECE40(v107);
  swift_bridgeObjectRelease_n(v155, 2LL);
  sub_1000ECDFC(v98, (uint64_t)v6);
  if ((v186 & 1) == 0) {
    goto LABEL_80;
  }
LABEL_84:
  v160 = [v79 ancAssetVersion];
  if (!v160)
  {
    v164 = v228;
    sub_1000ECDFC((uint64_t)v6, v228);
    goto LABEL_92;
  }

  v161 = v160;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
  v163 = v162;

  swift_bridgeObjectRelease(v163);
  v164 = v228;
  sub_1000ECDFC((uint64_t)v6, v228);
  if (!v163)
  {
LABEL_92:

    id v51 = 0;
LABEL_113:
    sub_1000ECE40(v164);
    sub_1000ECE40((uint64_t)v6);
    return (id)(v51 & 1);
  }

  uint64_t result = [v79 ancAssetVersion];
  if (result)
  {
    v165 = result;
    v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v168 = v167;

    sub_1000D8A30(v166, v168, v252);
    v170 = v252[0];
    v169 = v252[1];
    v171 = v252[2];
    v172 = v252[3];
    v173 = v252[4];
    v174 = v253;
    v240 = v254;
    v241 = v252[5];
    v175 = v256;
    v239 = v255;
    sub_1000D8CF8((uint64_t)v252, (uint64_t)v263, &qword_100235A68);
    v227 = v6;
    if (v263[1])
    {
      v233 = v172;
      v236 = (char *)v171;
      v237 = (char *)v173;
      v230 = v170;
      v231 = v175;
      v238 = v169;
      LODWORD(v232) = v174 & 1;
    }

    else
    {
      if (qword_100234B78 != -1) {
        swift_once(&qword_100234B78, sub_1000D7F54);
      }
      v187 = *((void *)&xmmword_10023DD88 + 1);
      v236 = (char *)qword_10023DD98;
      v188 = (char *)xmmword_10023DDA8;
      v233 = qword_10023DDA0;
      LODWORD(v232) = byte_10023DDB8;
      v240 = qword_10023DDC0;
      v241 = *((void *)&xmmword_10023DDA8 + 1);
      v239 = xmmword_10023DDC8;
      v230 = xmmword_10023DD88;
      v231 = *((void *)&xmmword_10023DDC8 + 1);
      swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
      v238 = v187;
      swift_bridgeObjectRetain(v187);
      v237 = v188;
      swift_bridgeObjectRetain(v188);
    }

    v189 = (uint64_t *)(v228 + v138[14]);
    v190 = *v189;
    v191 = v189[1];
    swift_bridgeObjectRetain(v191);
    sub_1000D8A30(v190, v191, v257);
    v192 = v257[0];
    v234 = (int *)v257[1];
    v194 = v257[2];
    v193 = v257[3];
    v195 = v257[4];
    v196 = v257[5];
    v197 = v258;
    v198 = v259;
    v199 = v260;
    v200 = v261;
    sub_1000D8CF8((uint64_t)v257, (uint64_t)v262, &qword_100235A68);
    if (v262[1])
    {
      v201 = v197 & 1;
      v202 = v192;
      v203 = v194;
      v204 = v193;
      v205 = v234;
      v206 = v198;
    }

    else
    {
      if (qword_100234B78 != -1) {
        swift_once(&qword_100234B78, sub_1000D7F54);
      }
      v205 = (int *)*((void *)&xmmword_10023DD88 + 1);
      v234 = (int *)xmmword_10023DD88;
      v208 = qword_10023DD98;
      v207 = qword_10023DDA0;
      v196 = *((void *)&xmmword_10023DDA8 + 1);
      v195 = xmmword_10023DDA8;
      v209 = byte_10023DDB8;
      v206 = qword_10023DDC0;
      v200 = *((void *)&xmmword_10023DDC8 + 1);
      v199 = xmmword_10023DDC8;
      swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
      swift_bridgeObjectRetain(v205);
      swift_bridgeObjectRetain(v195);
      v204 = v207;
      v203 = v208;
      v202 = (uint64_t)v234;
      v201 = v209;
    }

    v210 = v231;
    v266[0] = v230;
    v211 = v237;
    v212 = v238;
    v266[1] = v238;
    v266[2] = v236;
    v266[3] = v233;
    v266[4] = v237;
    v266[5] = v241;
    v267 = v232;
    v268 = v240;
    v269 = v239;
    v270 = v231;
    v271[0] = v202;
    v271[1] = v205;
    v271[2] = v203;
    v271[3] = v204;
    v271[4] = v195;
    v271[5] = v196;
    v272 = v201;
    v273 = v206;
    v274 = v199;
    v275 = v200;
    id v51 = sub_1000D8510(v266, v271);
    swift_bridgeObjectRelease(v211);
    swift_bridgeObjectRelease(v212);
    swift_bridgeObjectRelease(v200);
    swift_bridgeObjectRelease(v195);
    swift_bridgeObjectRelease(v205);

    swift_bridgeObjectRelease(v210);
    uint64_t v6 = v227;
    v164 = v228;
    goto LABEL_113;
  }

    uint64_t v4 = (v11 - 1) & v11;
  }

  uint64_t v12 = v10 + 4;
  if (v12 >= v23)
  {
LABEL_27:
    swift_release(a1);
    return (uint64_t)v7;
  }

  uint64_t v11 = *(void *)(v22 + 8 * v12);
  if (v11)
  {
    uint64_t v6 = v12;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v6 >= v23) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(v22 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }

      uint64_t v10 = (v15 - 1) & v15;
      uint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
      uint64_t v17 = (const void *)v1;
      uint64_t v18 = *(void *)(*(void *)(v31 + 56) + 16 * v13 + 8);
      uint64_t v19 = (__CFString *)*(id *)(*(void *)(v31 + 48) + 8 * v13);
      uint64_t v20 = swift_retain(v18);
      int v21 = static os_log_type_t.default.getter(v20);
      if (qword_100234C08 != -1) {
        swift_once(&qword_100234C08, sub_10018A87C);
      }
      int v22 = qword_10023DFA8;
      int v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
      *(_OWORD *)(v24 + 16) = xmmword_1001A5EA0;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      __int128 v27 = v26;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_10009914C();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Remove darwin callback handler for %@", 37LL, 2LL, v24);
      swift_bridgeObjectRelease(v24);
      uint64_t v1 = (uint64_t)v17;
      CFNotificationCenterRemoveObserver(center, v17, v19, 0LL);
      swift_release(v18);

      if (v10) {
        goto LABEL_6;
      }
    }

    uint64_t v16 = v14 + 3;
    if (v16 >= v30)
    {
LABEL_25:
      swift_release(v31);

      break;
    }

    uint64_t v15 = *(void *)(v29 + 8 * v16);
    if (v15)
    {
      uint64_t v11 = v16;
      goto LABEL_20;
    }

    while (1)
    {
      uint64_t v11 = v16 + 1;
      if (__OFADD__(v16, 1LL)) {
        break;
      }
      if (v11 >= v30) {
        goto LABEL_25;
      }
      uint64_t v15 = *(void *)(v29 + 8 * v11);
      ++v16;
      if (v15) {
        goto LABEL_20;
      }
    }

void sub_10000A1E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

LABEL_37:
        v45 = 0LL;
LABEL_38:
        -[AAConversationDetectSessionManager _cdSessionEnsureDeactivated:](v6, "_cdSessionEnsureDeactivated:", 0LL);
        goto LABEL_68;
      }

      if (v9)
      {
        id v43 = v6->_cdSignal == 5;
        id v41 = 1;
      }

      else
      {
        id v41 = 0;
LABEL_34:
        id v43 = 1LL;
      }

      if (!(v17 | !v43))
      {
        if (v6->_shouldQueueRamp)
        {
          -[AAConversationDetectSessionManager _startQueuedRampForDuration:startLevel:endLevel:]( v6,  "_startQueuedRampForDuration:startLevel:endLevel:",  self->_rampDuration,  v3,  v6->_unduckLevel);
        }

        else
        {
          if (dword_1002341F0 <= 30
            && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
          {
            cdSignal = v6->_cdSignal;
            else {
              uint64_t v50 = (&off_100206510)[cdSignal];
            }
            LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _cdSessionSignalUpdate]",  30LL,  "Conversation detect signal: %s, duckLevel: %@, unduckLevel: %@, ramp duration %@",  v50,  self->_duckLevel,  v6->_unduckLevel,  self->_rampDuration);
          }

          id v54 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
          id v55 = self->_rampDuration;
          uint64_t v61 = 0LL;
          [v54 setDuckingFadeOutDuration:v55 fadeInDuration:v55 error:&v61];
          v45 = v61;

          if (v45
            || (v56 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance")),
                v57 = self->_duckLevel,
                uint64_t v58 = v6->_unduckLevel,
                int v60 = 0LL,
                [v56 setDuckToLevelScalar:v57 unduckToLevelScalar:v58 error:&v60],
                v45 = v60,
                v56,
                v45))
          {
            if (dword_1002341F0 <= 90
              && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 90LL)))
            {
              LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _cdSessionSignalUpdate]",  90LL,  "Failed to duck via AVAudioSession() with error %@",  v45);
            }

            goto LABEL_38;
          }
        }

        goto LABEL_41;
      }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  id v40 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v40 endTransaction:@"ManateeWriteAccessoryBlob"];
}

  if (!v38)
  {
LABEL_12:
    if (v39) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

    LOBYTE(v_Block_object_dispose(va, 8) = 0;
    goto LABEL_38;
  }

  if ((v6 & 0x1000000000000000LL) != 0) {
    uint64_t v11 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
  uint64_t v4 = (uint64_t)sub_100161748(v11, v9, 10LL);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = v4;
    goto LABEL_39;
  }

  if (v5 < 0) {
    int v22 = v5;
  }
  else {
    int v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  id v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *float v3 = v5;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain(v5);
  id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v5);
  swift_bridgeObjectRelease(*v3);
  *float v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v13 = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  uint64_t v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6) {
    return specialized Array._endMutation()(v14);
  }
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v15 = *(void *)(v11 + 16);
    uint64_t v16 = v15 - v2;
    if (!__OFSUB__(v15, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v11;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  uint64_t v14 = (void *)swift_bridgeObjectRelease(v5);
  uint64_t v16 = v25 - v2;
  if (__OFSUB__(v25, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = (const void *)(v11 + 32 + 8 * v2);
    if (!((unint64_t)v5 >> 62))
    {
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(void *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }

      goto LABEL_58;
    }

  __break(1u);
  return result;
}

LABEL_36:
      if ((v17 & 1) != 0) {
        goto LABEL_37;
      }
LABEL_41:
      if (v18) {
        -[AAConversationDetectSessionManager _cdSessionEnsureActivated:](v6, "_cdSessionEnsureActivated:", v43);
      }
      if (v41)
      {
        id v46 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
        id v47 = kMXSessionProperty_InterruptionStyle;
        id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 4LL));
        uint64_t v59 = 0LL;
        [v46 setMXSessionProperty:v47 value:v48 error:&v59];
        v45 = v59;

        -[AAConversationDetectSessionManager setCdSignalAudioInterrupted:](v6, "setCdSignalAudioInterrupted:", 1LL);
        if (dword_1002341F0 <= 30
          && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
        {
          LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _cdSessionSignalUpdate]",  30LL,  "Posting CdSignalAudioInterruptedChanged notification");
        }

        id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        [v51 postNotificationName:@"CdSignalAudioInterruptedChanged" object:v6];
      }

      else
      {
LABEL_67:
        v45 = 0LL;
      }

    self->_prefLowBatteryForceLevel = Double;
  }

  uint64_t v15 = CFPrefs_GetDouble(@"com.apple.bluetooth", @"lbSaveSeconds", &v157);
  if (v157) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v15 < 5.0;
  }
  if (v16) {
    uint64_t v17 = 1800.0;
  }
  else {
    uint64_t v17 = v15;
  }
  prefLowBatterySaveSeconds = self->_prefLowBatterySaveSeconds;
  if (v17 != prefLowBatterySaveSeconds)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefLowBatterySaveSeconds = self->_prefLowBatterySaveSeconds;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "LowBatterySaveSeconds: %.0f -> %.0f",  prefLowBatterySaveSeconds,  v17);
    }
}

      id v5 = v41;
      a1 = v42;
    }
  }

  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008219C;
    block[3] = &unk_100206058;
    block[4] = *(void *)(a1 + 32);
    dispatch_async(&_dispatch_main_q, block);
    uint64_t v16 = sub_100060178("MagicPairing");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v53 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Manatee: saveRecordZone record %@, resume fetches",  buf,  0xCu);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_1000821CC;
    v43[3] = &unk_100208390;
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 40);
    v45 = *(void *)(a1 + 72);
    v43[4] = v19;
    id v44 = *(id *)(a1 + 48);
    [v18 saveRecord:v20 completionHandler:v43];
  }

    __break(1u);
LABEL_37:
    swift_once(&qword_100234C28, sub_10018A9E0);
  }

  uint64_t result = sub_100099394(*(void *)(v32 + v40[8]), *(void *)(v32 + v40[8] + 8));
  if ((v37 & 1) != 0)
  {
LABEL_11:
    uint64_t result = sub_100099394(*(void *)(v32 + v40[9]), *(void *)(v32 + v40[9] + 8));
    if ((v38 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  CKRecordKeyValueSetting.subscript.getter( &v82,  0x6572617764726168LL,  0xEF6E6F6973726556LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v56 = v83;
  v57 = (void *)(v31 + v81[11]);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  if (!v83) {
    goto LABEL_41;
  }
  if (v82 != v59 || v83 != v58)
  {
    int v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v57, v57[1], 0LL);
    swift_bridgeObjectRelease(v56);
    if ((v60 & 1) != 0) {
      goto LABEL_42;
    }
LABEL_41:
    id v84 = &type metadata for String;
    id v85 = &protocol witness table for String;
    id v82 = v59;
    id v83 = v58;
    swift_bridgeObjectRetain(v58);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0x6572617764726168LL, 0xEF6E6F6973726556LL, ObjectType);
    goto LABEL_42;
  }

  swift_bridgeObjectRelease(v83);
LABEL_42:
  CKRecordKeyValueSetting.subscript.getter( &v82,  0xD000000000000013LL,  0x80000001001CEE00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v61 = v83;
  uint64_t v62 = (void *)(v31 + v81[12]);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  if (!v83) {
    goto LABEL_47;
  }
  if (v82 == v64 && v83 == v63)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_48;
  }

  uint64_t v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v62, v62[1], 0LL);
  swift_bridgeObjectRelease(v61);
  if ((v65 & 1) == 0)
  {
LABEL_47:
    id v84 = &type metadata for String;
    id v85 = &protocol witness table for String;
    id v82 = v64;
    id v83 = v63;
    swift_bridgeObjectRetain(v63);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000013LL, 0x80000001001CEE00LL, ObjectType);
  }

    uint64_t v8 = 0LL;
    uint64_t v10 = 1;
    goto LABEL_39;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t v10 = 1;
  uint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

    uint64_t v9 = 0;
    goto LABEL_37;
  }

  uint64_t v7 = sub_100161768(result, a2, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161AD4);
  uint64_t v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_68:
      return;
    default:
      if (dword_1002341F0 <= 30
        && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
      {
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _cdSessionSignalUpdate]",  30LL,  "Unknown CD signal");
      }

      goto LABEL_67;
  }

  ((void (*)(void *))v65[2])(v65);

  _Block_object_dispose(&v68, 8);
}

        goto LABEL_24;
      }
    }

    else
    {
    }

    id v54 = sub_100060178("MagicPairing");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1001911CC();
    }
    goto LABEL_13;
  }

  v104 = swift_release(v30);
  id v30 = static os_log_type_t.default.getter(v104);
  uint64_t v25 = v163;
  if (qword_100234C20 == -1) {
    goto LABEL_69;
  }
LABEL_95:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_69:
  v105 = qword_10023DFC0;
  v106 = sub_100098CD8((uint64_t *)&unk_100234E00);
  v107 = swift_allocObject(v106, 72LL, 7LL);
  *(_OWORD *)(v107 + 16) = xmmword_1001A5EA0;
  v108 = v183;
  v109 = [v108 description];
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  v112 = v111;

  *(void *)(v107 + 56) = &type metadata for String;
  *(void *)(v107 + 64) = sub_10009914C();
  *(void *)(v107 + 32) = v110;
  *(void *)(v107 + 40) = v112;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v105, "CloudSync: removeDevice: %@", 27LL, 2LL, v107);
  swift_bridgeObjectRelease(v107);
  v113 = sub_1000AE6C8();
  v114 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v114)
  {
    v115 = sub_10013A76C();
    v116 = v182;
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    v117 = v176;
    v118 = sub_100098D58(v176, (uint64_t)qword_10023DCC0);
    v119 = v175;
    v120 = (uint64_t)v174;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v118, v117);
    v183 = sub_100138AA0(v120);
    swift_release(v115);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v120, v117);
  }

  else
  {
    v121 = static os_log_type_t.error.getter(v114);
    v116 = v182;
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    v183 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v121,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL);
  }

  swift_release(v113);
  v122 = v183[2];
  if (v122)
  {
    v123 = v169;
    v124 = (char *)v183
         + ((*(unsigned __int8 *)(v169 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
    swift_bridgeObjectRetain(v183);
    v125 = *(void *)(v123 + 72);
    while (1)
    {
      sub_1000A7C90((uint64_t)v124, (uint64_t)v25, type metadata accessor for DeviceRecord);
      v126 = &v25[*(int *)(v116 + 24)];
      v128 = *(void *)v126;
      v127 = (void *)*((void *)v126 + 1);
      v129 = [v108 bluetoothAddress];
      v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      v132 = v131;

      if (v128 == v130 && v127 == v132)
      {
        swift_bridgeObjectRelease(v183);
        goto LABEL_88;
      }

      v134 = _stringCompareWithSmolCheck(_:_:expecting:)(v128, v127, v130, v132, 0LL);
      swift_bridgeObjectRelease(v132);
      if ((v134 & 1) != 0) {
        break;
      }
      uint64_t v25 = v163;
      sub_1000A7CD4((uint64_t)v163, type metadata accessor for DeviceRecord);
      v124 += v125;
      --v122;
      v116 = v182;
      if (!v122)
      {
        swift_bridgeObjectRelease(v183);
        goto LABEL_85;
      }
    }

    v127 = v183;
LABEL_88:
    v116 = v182;
    v137 = (uint64_t)v163;
    swift_bridgeObjectRelease(v127);
    v136 = v162;
    sub_1000C998C(v137, v162, type metadata accessor for DeviceRecord);
    v135 = v169;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v169 + 56))(v136, 0LL, 1LL, v116);
  }

  else
  {
LABEL_85:
    v135 = v169;
    v136 = v162;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 56))(v162, 1LL, 1LL, v116);
  }

  v138 = v164;
  swift_bridgeObjectRelease(v183);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1LL, v116) != 1)
  {
    v151 = v155;
    sub_1000C998C(v136, v155, type metadata accessor for DeviceRecord);
    v152 = v166;
    v153 = sub_1000AE6C8();
    swift_unknownObjectWeakInit(aBlock, v152);
    swift_retain(v138);
    sub_1001689AC(v151, v153, (uint64_t)aBlock, (uint64_t)v154, v138);

    swift_release(v153);
    swift_release(v138);
    sub_1000A7CD4(v151, type metadata accessor for DeviceRecord);
    return swift_unknownObjectWeakDestroy(aBlock);
  }

  sub_100099358(v136, &qword_100235848);
  v139 = v166;
  v140 = *(void **)&v166[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v141 = swift_allocObject(&unk_10020BB70, 32LL, 7LL);
  *(void *)(v141 + 16) = v154;
  *(void *)(v141 + 24) = v138;
  aBlock[4] = sub_1000C99F4;
  v186 = v141;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020BB88;
  v142 = _Block_copy(aBlock);
  swift_retain(v138);
  v143 = v140;
  v144 = v156;
  static DispatchQoS.unspecified.getter(v143);
  v184 = _swiftEmptyArrayStorage;
  v145 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v146 = sub_100098CD8((uint64_t *)&unk_100235790);
  v147 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  v148 = v159;
  v149 = v146;
  v150 = v161;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v149, v147, v161, v145);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v144, v148, v142);
  _Block_release(v142);

  (*(void (**)(char *, uint64_t))(v160 + 8))(v148, v150);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v144, v158);
  return swift_release(v186);
}

      swift_once(&qword_100234B30, sub_100094AFC);
      goto LABEL_12;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABE0LL, v12, v14, 0LL) & 1) != 0)
  {
    uint64_t v16 = v14;
    goto LABEL_5;
  }

  if (v12 == 0xD000000000000010LL)
  {
    v52 = 0x80000001001CB350LL;
    if (v14 == 0x80000001001CB350LL) {
      goto LABEL_32;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CB350LL, v12, v14, 0LL) & 1) != 0)
  {
    v52 = v14;
LABEL_32:
    id v53 = swift_bridgeObjectRelease(v52);
    id v54 = static os_log_type_t.default.getter(v53);
    uint64_t v19 = v3;
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_10023DFC8,  "Cloud data purged, attempting to clear local sound profile data",  63LL,  2LL,  _swiftEmptyArrayStorage);
    id v55 = sub_10013A76C();
    v45 = v99;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001872F8, v55, &type metadata for () + 1);
    uint64_t v24 = v97;
    if (!v45)
    {
      swift_release(v55);
      return notify_post("BTCloudServicesSoundProfileChangedNotification");
    }

    id v46 = swift_release(v55);
LABEL_36:
    v56 = static os_log_type_t.error.getter(v46);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    v57 = qword_10023DFC8;
    uint64_t v58 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v59 = swift_allocObject(v58, 112LL, 7LL);
    *(_OWORD *)(v59 + 16) = xmmword_1001A6F30;
    int v60 = [(id)objc_opt_self(BTSystemConfiguration) v15[228]];
    if ((_DWORD)v60)
    {
      uint64_t v61 = sub_10013A76C();
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      uint64_t v62 = sub_100098D58(v24, (uint64_t)qword_10023DCC0);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v5, v62, v24);
      uint64_t v63 = v24;
      uint64_t v64 = v19;
      uint64_t v65 = sub_100139314( (uint64_t)v5,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
      swift_release(v61);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v5, v63);
    }

    else
    {
      uint64_t v66 = static os_log_type_t.error.getter(v60);
      uint64_t v65 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v66,  &_mh_execute_header,  v57,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
    }

    uint64_t v67 = type metadata accessor for DeviceRecord(0LL);
    uint64_t v68 = Array.description.getter(v65, v67);
    int v70 = v69;
    swift_bridgeObjectRelease(v65);
    *(void *)(v59 + 56) = &type metadata for String;
    int v71 = sub_10009914C();
    *(void *)(v59 + 64) = v71;
    *(void *)(v59 + 32) = v68;
    *(void *)(v59 + 40) = v70;
    *(void *)v100 = v45;
    swift_errorRetain(v45);
    int v72 = sub_100098CD8(&qword_1002357C0);
    v73 = String.init<A>(describing:)(v100, v72);
    *(void *)(v59 + 96) = &type metadata for String;
    *(void *)(v59 + 104) = v71;
    *(void *)(v59 + 72) = v73;
    *(void *)(v59 + 80) = v74;
    os_log(_:dso:log:_:_:)( v56,  &_mh_execute_header,  v57,  "Error purging all Device Records: %@ cloud data: %@",  51LL,  2LL,  v59);
    swift_bridgeObjectRelease(v59);
    return swift_errorRelease(v45);
  }

  if (v12 == 0xD000000000000012LL && v14 == 0x80000001001CB4C0LL)
  {
    swift_bridgeObjectRelease(0x80000001001CB4C0LL);
LABEL_57:
    v101 = &type metadata for AudioAccessoryFeatures;
    id v83 = sub_10009E740();
    v102 = v83;
    v100[0] = 0;
    id v84 = isFeatureEnabled(_:)(v100);
    uint64_t result = sub_10009A498(v100);
    if ((v84 & 1) == 0) {
      return result;
    }
    id v85 = static os_log_type_t.default.getter(result);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v85,  &_mh_execute_header,  qword_10023DFC8,  "Cloud data purged, attempting to clear local accessory data",  59LL,  2LL,  _swiftEmptyArrayStorage);
    sub_10015DAF4();
    id v86 = sub_10013A76C();
    v101 = &type metadata for AudioAccessoryFeatures;
    v102 = v83;
    v100[0] = 0;
    id v87 = isFeatureEnabled(_:)(v100);
    sub_10009A498(v100);
    if ((v87 & 1) == 0) {
      return swift_release(v86);
    }
    uint64_t v19 = v3;
    v45 = v99;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001881B4, v86, &type metadata for () + 1);
    if (!v45) {
      return swift_release(v86);
    }
    id v46 = swift_release(v86);
    uint64_t v24 = v97;
    goto LABEL_36;
  }

  id v81 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001001CB4C0LL, v12, v14, 0LL);
  id v82 = swift_bridgeObjectRelease(v14);
  if ((v81 & 1) != 0) {
    goto LABEL_57;
  }
  id v88 = static os_log_type_t.default.getter(v82);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  id v89 = qword_10023DFC8;
  id v90 = sub_100098CD8((uint64_t *)&unk_100234E00);
  id v91 = swift_allocObject(v90, 72LL, 7LL);
  *(_OWORD *)(v91 + 16) = xmmword_1001A5EA0;
  id v92 = [a1 zoneName];
  id v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  v95 = v94;

  *(void *)(v91 + 56) = &type metadata for String;
  *(void *)(v91 + 64) = sub_10009914C();
  *(void *)(v91 + 32) = v93;
  *(void *)(v91 + 40) = v95;
  os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "Cloud data purged, for unknown zone: %@", 39LL, 2LL, v91);
  return swift_bridgeObjectRelease(v91);
}

void sub_10000AAE0(_Unwind_Exception *a1)
{
}

void sub_10000ACE8(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 17))
  {
    if (dword_1002341F0 <= 30
      && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
    {
      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _asyncAudioSessionDuckWithLevel:completion:]_block_invoke",  30LL,  "Queued Ramp: abandon, audio session terminated");
    }

    goto LABEL_25;
  }

  if (!*(_BYTE *)(v2 + 200))
  {
    if (dword_1002341F0 <= 30)
    {
      if (dword_1002341F0 != -1)
      {
LABEL_11:
        uint64_t v3 = *(int *)(v2 + 20);
        else {
          uint64_t v4 = (&off_100206510)[v3];
        }
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _asyncAudioSessionDuckWithLevel:completion:]_block_invoke",  30LL,  "Queued Ramp: abandon, current CD signal %s",  v4);
        goto LABEL_25;
      }

      if (_LogCategory_Initialize(&dword_1002341F0, 30LL))
      {
        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_11;
      }
    }

LABEL_25:
    objc_sync_exit(obj);
    return;
  }

  objc_sync_exit(obj);

  if (dword_1002341F0 <= 10 && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 10LL))) {
    LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _asyncAudioSessionDuckWithLevel:completion:]_block_invoke",  10LL,  "Queued Ramp: unduck level: %@, ramp duration %f secs",  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 176LL));
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 176LL)));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 176LL)));
  id v14 = 0LL;
  [v5 setDuckingFadeOutDuration:v6 fadeInDuration:v7 error:&v14];
  id v8 = v14;

  if (!v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
    uint64_t v10 = *(void *)(a1 + 40);
    id v13 = 0LL;
    [v9 setDuckToLevelScalar:0 unduckToLevelScalar:v10 error:&v13];
    id v8 = v13;
  }

  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v8);
  }
}
}

  [*(id *)(a1 + 32) setIsFetchMasterKeyInProgress:0];
  id v40 = (void *)objc_claimAutoreleasedReturnValue([&v10[50] sharedInstance]);
  [v40 endTransaction:@"ManateefetchKeyBlob"];
}
}

    swift_bridgeObjectRelease(v5);
    if (!v6[2]) {
      return swift_bridgeObjectRelease(v6);
    }
LABEL_26:
    sub_10009C834((uint64_t)v6);
    return swift_bridgeObjectRelease(v6);
  }

  return result;
}

  __break(1u);
  return result;
}

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_retain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    int v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    id v13 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 16 * v16;
    uint64_t v24 = *(_OWORD *)(*(void *)(v3 + 56) + v19);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(void *)(v5 + 56) + v19) = v24;
    uint64_t v20 = v18;
    uint64_t result = (void *)swift_retain(*((void *)&v24 + 1));
  }

  int v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  int v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    uint64_t v10 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    uint64_t result = v18;
  }

  int v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_unknownObjectRetain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

        __break(1u);
        return;
      }
    }

    __break(1u);
    goto LABEL_25;
  }

  id v41 = static os_log_type_t.default.getter(v34);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
  id v42 = sub_1000DB8A4();
  id v43 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v42, 0LL, 0LL);
  *id v44 = 0x8000000000000010LL;
  swift_willThrow(v43);
}

    id v5 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_26:
    uint64_t v15 = 8 * v11;
    uint64_t v17 = *(void **)(*(void *)(a1 + 56) + v15);
    *(void *)&v41[0] = *(void *)(*(void *)(a1 + 48) + v15);
    uint64_t v16 = *(void **)&v41[0];
    *(void *)&v40[0] = v17;
    type metadata accessor for FileProtectionType(0LL);
    uint64_t v19 = v18;
    uint64_t v20 = v16;
    int v21 = v17;
    swift_dynamicCast((char *)v41 + 8, v40, v19, (char *)&type metadata for Any + 8, 7LL);
    int v22 = *(void *)&v41[0];
    sub_1000A4A9C((_OWORD *)((char *)v41 + 8), v39);
    sub_1000A4A9C(v39, v41);
    sub_1000A4A9C(v41, v40);
    int v23 = v2[5];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    __int128 v26 = v25;
    Hasher.init(_seed:)(&v38, v23);
    String.hash(into:)(&v38, v24, v26);
    __int128 v27 = Hasher._finalize()();
    uint64_t result = (_OWORD *)swift_bridgeObjectRelease(v26);
    id v28 = -1LL << *((_BYTE *)v2 + 32);
    id v29 = v27 & ~v28;
    id v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)&v6[8 * (v29 >> 6)]) != 0)
    {
      uint64_t v9 = __clz(__rbit64((-1LL << v29) & ~*(void *)&v6[8 * (v29 >> 6)])) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v31 = 0;
      id v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        id v33 = v30 == v32;
        if (v30 == v32) {
          id v30 = 0LL;
        }
        v31 |= v33;
        id v34 = *(void *)&v6[8 * v30];
      }

      while (v34 == -1);
      uint64_t v9 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v9;
    *(void *)(v2[6] + 8 * v9) = v22;
    uint64_t result = sub_1000A4A9C(v40, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }

  id v14 = v12 + 3;
  if (v14 >= v36)
  {
LABEL_35:
    swift_release(a1);
    swift_release(v2);
    return v2;
  }

  id v13 = *(void *)(v35 + 8 * v14);
  if (v13)
  {
    id v8 = v14;
    goto LABEL_25;
  }

  while (1)
  {
    id v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v36) {
      goto LABEL_35;
    }
    id v13 = *(void *)(v35 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_25;
    }
  }

void sub_10000AF6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

id sub_10000AFD8(uint64_t a1)
{
  if (dword_1002341F0 <= 30 && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL))) {
    LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _audioSessionReset]_block_invoke",  30LL,  "received AVAudioSessionMediaServicesWereResetNotification");
  }
  [*(id *)(a1 + 32) _deregisterFromAVAudioSessionSpeechDetectionStyleChanges];
  return [*(id *)(a1 + 32) _registerForAVAudioSessionSpeechDetectionStyleChanges];
}

void sub_10000B4C8(_Unwind_Exception *a1)
{
}

id sub_10000B508(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10000B530(uint64_t a1)
{
}

void sub_10000B538(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3)
  {
    float v5 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    id v12 = 0LL;
    [*(id *)(a1 + 32) floatValue];
    uint64_t v4 = 0LL;
    if (v5 >= v6) {
      goto LABEL_11;
    }
    *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = *(float *)(*(void *)(*(void *)(a1 + 56) + 8LL)
                                                                          + 24LL)
    float v7 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    [*(id *)(a1 + 32) floatValue];
    if (v7 > *(float *)&v8)
    {
      [*(id *)(a1 + 32) floatValue];
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = LODWORD(v8);
    }

    uint64_t v9 = *(void **)(a1 + 40);
    LODWORD(v_Block_object_dispose((const void *)(v1 - 112), 8) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
    [v9 _asyncAudioSessionDuckWithLevel:v10 completion:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

LABEL_9:
    uint64_t v4 = v12;
    goto LABEL_11;
  }

  if (dword_1002341F0 <= 30)
  {
    id v12 = v3;
    if (dword_1002341F0 != -1 || (v11 = _LogCategory_Initialize(&dword_1002341F0, 30LL), uint64_t v4 = v12, v11))
    {
      LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _startQueuedRampForDuration:startLevel:endLevel:]_block_invoke",  30LL,  "Queued Ramp: failed to set duck level: %f with error: %@",  *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  v4);
      goto LABEL_9;
    }
  }

LABEL_11:
}

    self->hijackedByPhoneCall = v4;
  }

    self->incomingCallRingtone = v4;
  }

    self->routeChangeToSpeakerInProgress = v4;
  }

    self->TUIncomingCallAnswered = v4;
  }

    self->shouldStayOnVirtual = v4;
  }

    self->firstBannerShown = v4;
  }

    self->manuallyRouted = v4;
  }

    self->manualRouteChangeInProgress = v4;
  }

    self->otherTipiDeviceIsStreamingAudio = v4;
  }

  self->otherTipiDeviceIsWatch = v3;
LABEL_12:
  if (v3) {
    double v8 = 2;
  }
  else {
    double v8 = 0;
  }
  uint64_t v9 = v8 | self->tipiAndRoutedState & 0xFFFFFFFD;
  uint64_t v10 = (id)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
  [v10 _setTipiAndRoutedStateFlags:v9 forDevice:self];
}

    self->otherTipiManuallyRouteTicks = a3;
  }

    self->hasOwnership = v4;
    if (!v4)
    {
      double v8 = (id)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
      [v8 _setConnectedBannerTick:0];
    }
  }

    self->routed = v4;
  }

    self->isRoutingActionInitialized = v4;
  }

    self->_isNearby = v4;
  }

    self->_inUseBannerShown = v4;
  }

    self->_mutedSpeakerForRemotePhoneCall = v4;
  }

    self->_nearbyiCloudSignIn = v4;
  }

    self->_nearbyPaired = v4;
  }

    self->_routeToWxAfterUnhide = v4;
  }

    self->_userConnectedState = v4;
  }

  swift_bridgeObjectRelease(*(void *)(v30 + v31[12] + 8));
  if ((v122 & 1) != 0) {
    goto LABEL_6;
  }
LABEL_12:
  if ((_DWORD)v123)
  {
LABEL_13:
    swift_bridgeObjectRelease(*(void *)(v30 + v31[14] + 8));
    goto LABEL_14;
  }

    v24[(v18 >> 6) + 8] |= 1LL << v18;
    *(void *)(v24[6] + 8 * v1_Block_object_dispose((const void *)(v1 - 112), 8) = a3;
    id v29 = (uint64_t *)(v24[7] + 16 * v18);
    *id v29 = a1;
    v29[1] = a2;
    id v30 = v24[2];
    id v31 = __OFADD__(v30, 1LL);
    id v32 = v30 + 1;
    if (!v31)
    {
      v24[2] = v32;
      id v33 = a3;
      return 0LL;
    }

    goto LABEL_14;
  }

  sub_10010D2A0(v21, a4 & 1, a6);
  __int128 v27 = a5(a3);
  if ((v22 & 1) == (v28 & 1))
  {
    uint64_t v18 = v27;
    uint64_t v24 = (void *)*v11;
    if ((v22 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  swift_bridgeObjectRelease(a3);
  id v13 = 0;
  return v13 & 1;
}

  swift_bridgeObjectRelease(a3);
  return 0LL;
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

id sub_10000B744(id *a1)
{
  id result = [a1[4] isEqualToString:@"speechDetectionStyle"];
  if ((_DWORD)result)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:NSKeyValueChangeNewKey]);
    uint64_t v4 = [v3 unsignedIntValue];

    return _[a1[6] _speechDetectionStyleChanged:v4];
  }

  return result;
}

LABEL_15:
    self->_currentSpeechDetectionStyle = a3;
    uint64_t v9 = -[AAConversationDetectSessionManager cdSignalAudioInterrupted](self, "cdSignalAudioInterrupted");
    uint64_t v10 = self->_currentSpeechDetectionStyle;
    if (v9 && v10 == 1)
    {
      if (dword_1002341F0 <= 30
        && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
      {
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _speechDetectionStyleChanged:]",  30LL,  "Ignoring AVAudioSessionSpeechDetectionStyle change due to interruption from CD session");
      }

      return;
    }

    if (currentSpeechDetectionStyle == 1 && (v10 & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      if (self->_cdSignal == 11)
      {
        if (dword_1002341F0 <= 30
          && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
        {
          LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _speechDetectionStyleChanged:]",  30LL,  "AVAudioSessionSpeechDetectionStyle changed from pause to play when current signal is pre-end, ignoring");
        }

        goto LABEL_37;
      }

      if (dword_1002341F0 <= 30
        && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
      {
        LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _speechDetectionStyleChanged:]",  30LL,  "AVAudioSessionSpeechDetectionStyle changed from pause to play, stop CD session");
      }

      int v11 = self;
      id v12 = 1LL;
    }

    else
    {
      int v11 = self;
      id v12 = 0LL;
    }

    -[AAConversationDetectSessionManager _cdSessionEnsureDeactivated:](v11, "_cdSessionEnsureDeactivated:", v12);
LABEL_37:
    if (self->_currentSpeechDetectionStyle == 4) {
      self->_currentPauseReason = 2;
    }
    -[AAConversationDetectSessionManager _updatePauseState](self, "_updatePauseState");
  }

  int v21 = *(void *)(a1 + 32);
  int v22 = *(unsigned __int8 *)(v21 + 425);
  if (*(_BYTE *)(v21 + 425))
  {
    *(_BYTE *)(v21 + 425) = 0;
    int v21 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v21 + 426))
  {
    *(_BYTE *)(v21 + 426) = 0;
    int v23 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v23 + 464)) {
      goto LABEL_23;
    }
    uint64_t v24 = (_BYTE *)(v23 + 464);
LABEL_22:
    *uint64_t v24 = 0;
    goto LABEL_23;
  }

  if (*(_BYTE *)(v21 + 464))
  {
    uint64_t v24 = (_BYTE *)(v21 + 464);
    goto LABEL_22;
  }

  if (!v22) {
    goto LABEL_79;
  }
LABEL_23:
  uint64_t v25 = *(_BYTE **)(a1 + 32);
  if (!v25[425] && !v25[464] && !v25[426])
  {
LABEL_37:
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      __int128 v27 = &stru_100212678;
      if (v41) {
        id v28 = v41;
      }
      else {
        id v28 = &stru_100212678;
      }
      if (v4) {
        __int128 v27 = v4;
      }
      id v29 = *(_BYTE **)(a1 + 32);
      if (v29[425]) {
        id v30 = "yes";
      }
      else {
        id v30 = "no";
      }
      if (v29[464]) {
        id v31 = "yes";
      }
      else {
        id v31 = "no";
      }
      if (v29[426]) {
        id v32 = "yes";
      }
      else {
        id v32 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke",  30LL,  "Active audio route changed: nameOutputContext %@ nameOutputContextPresentation %@, BT %s Speaker %s, Receiver %s",  v28,  v27,  v30,  v31,  v32);
    }

    goto LABEL_61;
  }

  if (dword_100234408 <= 30)
  {
    if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke",  30LL,  "Active audio route changed to %@",  v14);
    }
    goto LABEL_37;
  }
}
}

    goto LABEL_16;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = 138412290;
    int v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found existing subscription - %@",  (uint8_t *)&v20,  0xCu);
  }

  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
  id v14 = [v12 isEqualToString:v13];

  uint64_t v15 = sub_100060178("MagicPairing");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v10 = v16;
  if (!v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10018F900();
    }
    goto LABEL_15;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = 138412290;
    int v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Manatee: Already created this subscription - %@",  (uint8_t *)&v20,  0xCu);
  }

  uint64_t v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
  [v17 setuserPreference:v18 value:v19 sync:1];

  [*(id *)(a1 + 40) setCloudSubscription:v5];
LABEL_16:
}
}

      goto LABEL_25;
    }

    int v22 = objc_alloc(&OBJC_CLASS___CKRecordZoneSubscription);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit_Manatee recordZoneAccessoryDatabase](self, "recordZoneAccessoryDatabase"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneID]);
    float v7 = -[CKRecordZoneSubscription initWithZoneID:](v22, "initWithZoneID:", v20);
    int v21 = @"MagicCloudPairingAccessorySubscriptionManateeID";
  }

  if (!v7) {
    goto LABEL_22;
  }
  int v23 = sub_100060178("MagicPairing");
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v31 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Manatee: Attempting to save subscription for recordType: %@",  buf,  0xCu);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit_Manatee cloudKitDatabase](self, "cloudKitDatabase"));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100082FEC;
  v27[3] = &unk_100208590;
  id v28 = (__CFString *)v21;
  id v29 = self;
  [v25 saveSubscription:v7 completionHandler:v27];

LABEL_25:
}

    goto LABEL_16;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = 138412290;
    int v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Manatee: Found existing subscription - %@",  (uint8_t *)&v20,  0xCu);
  }

  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
  id v14 = [v12 isEqualToString:v13];

  uint64_t v15 = sub_100060178("MagicPairing");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v10 = v16;
  if (!v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10019146C();
    }
    goto LABEL_15;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = 138412290;
    int v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Manatee: Already created this subscription - %@",  (uint8_t *)&v20,  0xCu);
  }

  uint64_t v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
  [v17 setuserPreference:v18 value:v19 sync:1];

  [*(id *)(a1 + 40) setCloudSubscription:v5];
LABEL_16:
}

  id v34 = sub_1000A4A64(0LL, a7, a8);
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v34);
  __break(1u);
  return result;
}

  id v39 = static os_log_type_t.default.getter(v23);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  id v40 = qword_10023DFC8;
  id v41 = sub_100098CD8((uint64_t *)&unk_100234E00);
  id v42 = swift_allocObject(v41, 72LL, 7LL);
  *(_OWORD *)(v42 + 16) = xmmword_1001A5EA0;
  id v43 = v16;
  id v44 = [v43 description];
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  id v47 = v46;

  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = sub_10009914C();
  *(void *)(v42 + 32) = v45;
  *(void *)(v42 + 40) = v47;
  os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  v40,  "Retry cloud upload for deferred aaDeviceRecord: %@",  50LL,  2LL,  v42);
  swift_bridgeObjectRelease(v42);
  id v48 = v55;
  unint64_t v49 = sub_10013B740();
  uint64_t v50 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v50 + 16, v48);
  swift_retain(v50);
  sub_1001051E0(isa, 0, (uint64_t)sub_100187E98, v50);
  swift_unknownObjectRelease(v49);
  swift_release_n(v50, 2LL);
LABEL_18:
}

  id v39 = static os_log_type_t.default.getter(v23);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  id v40 = qword_10023DFC8;
  id v41 = sub_100098CD8((uint64_t *)&unk_100234E00);
  id v42 = swift_allocObject(v41, 72LL, 7LL);
  *(_OWORD *)(v42 + 16) = xmmword_1001A5EA0;
  id v43 = v16;
  id v44 = [v43 description];
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  id v47 = v46;

  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = sub_10009914C();
  *(void *)(v42 + 32) = v45;
  *(void *)(v42 + 40) = v47;
  os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  v40,  "Retry cloud upload for deferred aaProxCardsRecord: %@",  53LL,  2LL,  v42);
  swift_bridgeObjectRelease(v42);
  id v48 = v55;
  unint64_t v49 = sub_10013B740();
  uint64_t v50 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v50 + 16, v48);
  swift_retain(v50);
  sub_1001051E0(isa, 0, (uint64_t)sub_100187E34, v50);
  swift_unknownObjectRelease(v49);
  swift_release_n(v50, 2LL);
LABEL_18:
}

  id v39 = static os_log_type_t.default.getter(v23);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  id v40 = qword_10023DFC8;
  id v41 = sub_100098CD8((uint64_t *)&unk_100234E00);
  id v42 = swift_allocObject(v41, 72LL, 7LL);
  *(_OWORD *)(v42 + 16) = xmmword_1001A5EA0;
  id v43 = v16;
  id v44 = [v43 description];
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  id v47 = v46;

  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = sub_10009914C();
  *(void *)(v42 + 32) = v45;
  *(void *)(v42 + 40) = v47;
  os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  v40,  "Retry cloud upload for deferred HMDeviceCloudRecord: %@",  55LL,  2LL,  v42);
  swift_bridgeObjectRelease(v42);
  id v48 = v55;
  unint64_t v49 = sub_10013B740();
  uint64_t v50 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v50 + 16, v48);
  swift_retain(v50);
  sub_1001051E0(isa, 0, (uint64_t)sub_100187EFC, v50);
  swift_unknownObjectRelease(v49);
  swift_release_n(v50, 2LL);
LABEL_18:
}

id sub_10000C214(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 204LL);
  uint64_t state64 = 0LL;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  BOOL v4 = state64 != 0;
  if (dword_1002341F0 <= 30 && (dword_1002341F0 != -1 || _LogCategory_Initialize(&dword_1002341F0, 30LL)))
  {
    float v5 = "yes";
    if (v3) {
      float v6 = "no";
    }
    else {
      float v6 = "yes";
    }
    if (!v3) {
      float v5 = "no";
    }
    LogPrintF( &dword_1002341F0,  "-[AAConversationDetectSessionManager _registerForWirelessSplitterStateChanges]_block_invoke",  30LL,  "Wireless splitter is running changed: %s -> %s",  v6,  v5);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 170LL) = v4;
  float v7 = *(_BYTE **)(a1 + 32);
  if (v7[170])
  {
    v7[116] = 1;
    float v7 = *(_BYTE **)(a1 + 32);
  }

  return [v7 _updatePauseState];
}

void sub_10000CEC0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AADeviceManagerDaemon);
  int v2 = (void *)qword_1002371F0;
  qword_1002371F0 = (uint64_t)v1;
}

void sub_10000D124(_Unwind_Exception *a1)
{
}

uint64_t sub_10000D140(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000D150(uint64_t a1)
{
}

void sub_10000D158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  NSAppendPrintF(&obj, "    %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

id sub_10000D1FC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_10000D25C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_10000D40C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged];
}

void sub_10000D5C8(id a1)
{
  if (dword_100234260 <= 30 && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL))) {
    LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _aaControllerEnsureStarted]_block_invoke",  30LL,  "AAController Invalidated");
  }
}

id sub_10000D628(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _accessoryDeviceInfoChanged:a2];
}

void sub_10000D634(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234260 <= 90
        && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 90LL)))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _aaControllerEnsureStarted]_block_invoke_3",  90LL,  "### Activate AAController failed: %{error}\n",  v8);
      }

      [*(id *)(a1 + 32) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      float v6 = *(void **)(v5 + 8);
      *(void *)(v5 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234260 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234260 != -1 || (v7 = _LogCategory_Initialize(&dword_100234260, 30LL), BOOL v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _aaControllerEnsureStarted]_block_invoke_3",  30LL,  "AAController activated");
LABEL_11:
        BOOL v4 = v8;
      }
    }
  }
}

void sub_10000D9C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (v3)
  {
    if (dword_100234260 <= 90)
    {
      if (dword_100234260 != -1 || (v6 = _LogCategory_Initialize(&dword_100234260, 90LL), id v3 = v9, v6))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _sendConfigOverAAController:device:completion:]_block_invoke",  90LL,  "### sendDeviceConfig failed with error: %@\n",  v3);
LABEL_8:
        id v3 = v9;
      }
    }
  }

  else if (dword_100234260 <= 30)
  {
    if (dword_100234260 != -1 || (v7 = _LogCategory_Initialize(&dword_100234260, 30LL), id v3 = 0LL, v7))
    {
      BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) xpcObjectRepresentation]);
      LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _sendConfigOverAAController:device:completion:]_block_invoke",  30LL,  "AAConfig sent: destination %@, data <%@>\n",  v4,  v5);

      goto LABEL_8;
    }
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    id v3 = v9;
  }
}

id sub_10000E288(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendDeviceConfig:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_10000E4F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v5 = 0LL;
    [*(id *)(a1 + 32) _sendConfigOverAAController:*(void *)(a1 + 40) device:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    goto LABEL_5;
  }

  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    id v5 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_5:
    id v3 = v5;
  }
}

void sub_10000E664(id a1)
{
  if (dword_100234260 <= 30 && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL))) {
    LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbControllerEnsureStarted]_block_invoke",  30LL,  "CBController Invalidated");
  }
}

void sub_10000E6C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 32LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234260 <= 90
        && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 90LL)))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbControllerEnsureStarted]_block_invoke_2",  90LL,  "### Activate CBController failed: %{error}\n",  v8);
      }

      [*(id *)(a1 + 32) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234260 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234260 != -1 || (v7 = _LogCategory_Initialize(&dword_100234260, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbControllerEnsureStarted]_block_invoke_2",  30LL,  "CBController activated");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

void *sub_10000E9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _coreBluetoothDeviceFound:a2];
  }
  return result;
}

void *sub_10000E9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _coreBluetoothDeviceLost:a2];
  }
  return result;
}

uint64_t sub_10000E9EC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1 == *(void *)(*(void *)(result + 40) + 24LL) && dword_100234260 <= 30)
  {
    if (dword_100234260 != -1) {
      return LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_3",  30LL,  "%@ Interrupted",  v1);
    }
    uint64_t v2 = result;
    id result = _LogCategory_Initialize(&dword_100234260, 30LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(v2 + 40) + 24LL);
      return LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_3",  30LL,  "%@ Interrupted",  v1);
    }
  }

  return result;
}

uint64_t sub_10000EA80(uint64_t result)
{
  if (dword_100234260 <= 30)
  {
    uint64_t v1 = result;
    if (dword_100234260 != -1) {
      return LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "%@ Invalidated",  *(void *)(*(void *)(v1 + 32) + 24LL));
    }
    id result = _LogCategory_Initialize(&dword_100234260, 30LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "%@ Invalidated",  *(void *)(*(void *)(v1 + 32) + 24LL));
    }
  }

  return result;
}

void sub_10000EB00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == *(void *)(v6 + 24))
  {
    if (v3)
    {
      id v11 = v3;
      if (dword_100234260 <= 90)
      {
        if (dword_100234260 == -1)
        {
          int v7 = _LogCategory_Initialize(&dword_100234260, 90LL);
          uint64_t v6 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(v6 + 24);
          id v3 = v11;
        }

        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_5",  90LL,  "%@ ### Activate failed: %@",  v5,  v3);
        uint64_t v6 = *(void *)(a1 + 40);
      }

void sub_10000F0B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10000F0D0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v9 coreBluetoothDevice]);
  unsigned __int8 v8 = [v7 deviceFlags];

  if ((v8 & 0x40) != 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

void sub_10000F434(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3)
  {
    if (dword_100234260 <= 90)
    {
      if (dword_100234260 != -1 || (v4 = _LogCategory_Initialize(&dword_100234260, 90LL), id v3 = v6, v4))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _sendConfigOverCBController:device:completion:]_block_invoke",  90LL,  "## sending CBDeviceSetting %@ failed: %@",  *(void *)(a1 + 32),  v3);
        id v3 = v6;
      }
    }
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    id v3 = v6;
  }
}

id sub_10000F55C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _aaDeviceRecordsMultiUserEnvChangedUseDefaultsForAddresses:*(void *)(a1 + 40)];
}

void sub_10000F600(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 lowercaseString]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 bluetoothAddress]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 lowercaseString]);
        id v14 = v11;
        id v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_100234260 <= 30
            && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL)))
          {
            LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _aaDeviceRecordsMultiUserEnvChangedUseDefaultsForAddresses:]_block_invoke",  30LL,  "received cloud push, use defaults for shared device %@",  v10);
          }

          if ([v4 setDefaultConfigurationForSharedDeviceOnMultiUserSystem])
          {
            id v14 = (id)objc_claimAutoreleasedReturnValue( +[AAServicesDaemon sharedAAServicesDaemon]( &OBJC_CLASS___AAServicesDaemon,  "sharedAAServicesDaemon"));
            [v14 reportDeviceFound:v4];
            goto LABEL_18;
          }

          continue;
        }

        uint64_t v16 = v15;
        if ((v14 == 0LL) == (v15 != 0LL))
        {

LABEL_18:
          continue;
        }

        unsigned __int8 v17 = [v14 isEqual:v15];

        if ((v17 & 1) != 0) {
          goto LABEL_11;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v7);
  }
}

id sub_10000F8B0(uint64_t a1)
{
  if (dword_100234260 <= 30 && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL))) {
    LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon aaDeviceRecordsRemovedWithRecords:]_block_invoke",  30LL,  "received cloud push to remove AADeviceRecord: %@",  *(void *)(a1 + 32));
  }
  return _[*(id *)(a1 + 40) _aaDeviceRecordsRemovedWithRecords:*(void *)(a1 + 32)];
}

void sub_10000F9C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 bluetoothAddress]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 lowercaseString]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 bluetoothAddress]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 lowercaseString]);
        id v14 = v11;
        id v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_100234260 <= 30
            && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL)))
          {
            LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _aaDeviceRecordsRemovedWithRecords:]_block_invoke",  30LL,  "received cloud push, AADeviceRecord removed: %@",  v9);
          }

          continue;
        }

        uint64_t v16 = v15;
        if ((v14 == 0LL) == (v15 != 0LL))
        {

          continue;
        }

        unsigned __int8 v17 = [v14 isEqual:v15];

        if ((v17 & 1) != 0) {
          goto LABEL_11;
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v6);
  }
}

id sub_10000FC6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _aaDeviceRecordsUpdatedWithRecords:*(void *)(a1 + 40)];
}

void sub_10000FD10(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 bluetoothAddress]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 lowercaseString]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 bluetoothAddress]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 lowercaseString]);
        id v14 = v11;
        id v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_100234260 <= 30
            && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL)))
          {
            LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _aaDeviceRecordsUpdatedWithRecords:]_block_invoke",  30LL,  "received cloud push, AADeviceRecord updated: %@",  v9);
          }

          if ([v4 updateWithAADeviceRecord:v9])
          {
            int v10 = (void *)objc_claimAutoreleasedReturnValue( +[AAServicesDaemon sharedAAServicesDaemon]( &OBJC_CLASS___AAServicesDaemon,  "sharedAAServicesDaemon"));
            [v10 reportDeviceFound:v4];
            goto LABEL_18;
          }

          continue;
        }

        uint64_t v16 = v15;
        if ((v14 == 0LL) == (v15 != 0LL))
        {

LABEL_18:
          continue;
        }

        unsigned __int8 v17 = [v14 isEqual:v15];

        if ((v17 & 1) != 0) {
          goto LABEL_11;
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v6);
  }
}

void sub_100010300(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100010394;
  v7[3] = &unk_100206358;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_100010394(uint64_t result)
{
  if (dword_100234260 <= 30)
  {
    uint64_t v1 = result;
    if (dword_100234260 != -1) {
      return LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _saveDeviceRecordForDevice:]_block_invoke_2",  30LL,  "Saved AADeviceRecord to cloud with error %@, record: %@",  *(void *)(v1 + 32),  *(void *)(v1 + 40));
    }
    id result = _LogCategory_Initialize(&dword_100234260, 30LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _saveDeviceRecordForDevice:]_block_invoke_2",  30LL,  "Saved AADeviceRecord to cloud with error %@, record: %@",  *(void *)(v1 + 32),  *(void *)(v1 + 40));
    }
  }

  return result;
}

LABEL_16:
}

      id v4 = v14;
    }
  }

  else
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _getIDSDeviceFromBtAddress:]",  30LL,  "Failed to get IDS device from address %@",  0LL);
    }

    id v6 = 0LL;
  }

  return v6;
}

  CKRecordKeyValueSetting.subscript.getter( &v49,  0x6D754E6C65646F6DLL,  0xEB00000000726562LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  id v28 = v50;
  id v29 = (void *)(v18 + v17[8]);
  id v31 = *v29;
  id v30 = v29[1];
  if (!v50) {
    goto LABEL_21;
  }
  if (v49 != v31 || v50 != v30)
  {
    id v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v29, v29[1], 0LL);
    swift_bridgeObjectRelease(v28);
    if ((v32 & 1) != 0) {
      goto LABEL_22;
    }
LABEL_21:
    id v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    unint64_t v49 = v31;
    uint64_t v50 = v30;
    swift_bridgeObjectRetain(v30);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x6D754E6C65646F6DLL, 0xEB00000000726562LL, ObjectType);
    goto LABEL_22;
  }

  swift_bridgeObjectRelease(v50);
LABEL_22:
  CKRecordKeyValueSetting.subscript.getter( &v49,  0x74636166756E616DLL,  0xEC00000072657275LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  id v33 = v50;
  id v34 = (void *)(v18 + v17[9]);
  id v36 = *v34;
  id v35 = v34[1];
  if (!v50) {
    goto LABEL_27;
  }
  if (v49 == v36 && v50 == v35)
  {
    swift_bridgeObjectRelease(v50);
    goto LABEL_28;
  }

  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v34, v34[1], 0LL);
  swift_bridgeObjectRelease(v33);
  if ((v37 & 1) == 0)
  {
LABEL_27:
    id v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    unint64_t v49 = v36;
    uint64_t v50 = v35;
    swift_bridgeObjectRetain(v35);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x74636166756E616DLL, 0xEC00000072657275LL, ObjectType);
  }

  __break(1u);
  return result;
}

void sub_10001065C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v13 = v2;
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    unsigned int v4 = [v2 smartRoutingStateFlags];
    id v5 = v13;
    if (v3 != v4)
    {
      if (dword_100234260 <= 30
        && (dword_100234260 != -1 || _LogCategory_Initialize(&dword_100234260, 30LL)))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = CUPrintFlags32([v13 smartRoutingStateFlags], &unk_1001A5C40);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        uint64_t v9 = CUPrintFlags32(*(unsigned int *)(a1 + 48), &unk_1001A5C40);
        int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon smartRoutingStateUpdated:ForDeviceIdentifier:]_block_invoke",  30LL,  "AADevice identifier %@ updated with SR state %@ --> %@",  v6,  v8,  v10);
      }

      [v13 setSmartRoutingStateFlags:*(unsigned int *)(a1 + 48)];
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[AAServicesDaemon sharedAAServicesDaemon]( &OBJC_CLASS___AAServicesDaemon,  "sharedAAServicesDaemon"));
      [v11 reportDeviceFound:v13];

      goto LABEL_8;
    }
  }

  else
  {
    id v5 = 0LL;
    if (dword_100234260 <= 30)
    {
      if (dword_100234260 != -1 || (v12 = _LogCategory_Initialize(&dword_100234260, 30LL), id v5 = 0LL, v12))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon smartRoutingStateUpdated:ForDeviceIdentifier:]_block_invoke",  30LL,  "smartRoutingStateUpdated: No AudioAccessoryDevice found for identifier %@",  *(void *)(a1 + 40));
LABEL_8:
        id v5 = v13;
      }
    }
  }
}

id sub_100010838(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sendSiriMultitoneConfigToDevice:");
}

void sub_1000109F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (v3)
  {
    if (dword_100234260 <= 90)
    {
      id v8 = v3;
      if (dword_100234260 != -1 || (v6 = _LogCategory_Initialize(&dword_100234260, 90LL), unsigned int v4 = v8, v6))
      {
        LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _sendSiriMultitoneConfigToDevice:]_block_invoke",  90LL,  "### sendDeviceConfig failed with error: %@\n",  v4);
LABEL_8:
        unsigned int v4 = v8;
      }
    }
  }

  else if (dword_100234260 <= 30)
  {
    id v8 = 0LL;
    if (dword_100234260 != -1 || (v7 = _LogCategory_Initialize(&dword_100234260, 30LL), unsigned int v4 = 0LL, v7))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      LogPrintF( &dword_100234260,  "-[AADeviceManagerDaemon _sendSiriMultitoneConfigToDevice:]_block_invoke",  30LL,  "AAConfig sent: destination %@, config <%@>\n",  v5,  *(void *)(a1 + 40));

      goto LABEL_8;
    }
  }
}

void sub_100010BA8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AAServicesDaemon);
  uint64_t v2 = (void *)qword_100237200;
  qword_100237200 = (uint64_t)v1;
}

id sub_10001137C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_100011800(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 192LL);
  uint64_t state64 = 0LL;
  notify_get_state(v2, &state64);
  if (dword_100234330 <= 30)
  {
    int v3 = state64;
    if (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)) {
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _activate]_block_invoke",  30LL,  "Mute Control: AAMuteStateChanged message: %u",  v3);
    }
  }

  return [*(id *)(a1 + 32) _muteStateChanged];
}

id sub_100011898(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged];
}

uint64_t sub_100011908(uint64_t a1)
{
  return CUStateDumpWithObject("AAServices", *(void *)(a1 + 32), &dword_100234330);
}

void *sub_100011924(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[6]) {
    return _[result _deviceFound:a2];
  }
  return result;
}

void *sub_100011940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[6]) {
    return _[result _deviceLost:a2];
  }
  return result;
}

uint64_t sub_10001195C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1 == *(void *)(*(void *)(result + 40) + 48LL) && dword_100234330 <= 30)
  {
    if (dword_100234330 != -1) {
      return LogPrintF(&dword_100234330, "-[AAServicesDaemon _activate]_block_invoke_6", 30LL, "%@ Interrupted", v1);
    }
    uint64_t v2 = result;
    id result = _LogCategory_Initialize(&dword_100234330, 30LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(v2 + 32);
      return LogPrintF(&dword_100234330, "-[AAServicesDaemon _activate]_block_invoke_6", 30LL, "%@ Interrupted", v1);
    }
  }

  return result;
}

uint64_t sub_1000119EC(uint64_t result)
{
  if (dword_100234330 <= 30)
  {
    uint64_t v1 = result;
    if (dword_100234330 != -1) {
      return LogPrintF( &dword_100234330,  "-[AAServicesDaemon _activate]_block_invoke_7",  30LL,  "%@ Invalidated",  *(void *)(v1 + 32));
    }
    id result = _LogCategory_Initialize(&dword_100234330, 30LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100234330,  "-[AAServicesDaemon _activate]_block_invoke_7",  30LL,  "%@ Invalidated",  *(void *)(v1 + 32));
    }
  }

  return result;
}

void sub_100011A68(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == *(void *)(v6 + 48))
  {
    if (v3)
    {
      id v11 = v3;
      if (dword_100234330 <= 90)
      {
        if (dword_100234330 == -1)
        {
          int v7 = _LogCategory_Initialize(&dword_100234330, 90LL);
          uint64_t v6 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(v6 + 48);
          id v3 = v11;
        }

        LogPrintF( &dword_100234330,  "-[AAServicesDaemon _activate]_block_invoke_8",  90LL,  "%@ ### Activate failed: %@",  v5,  v3);
        uint64_t v6 = *(void *)(a1 + 40);
      }

void sub_100011BEC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AAConversationDetectSessionManager sharedCDSessionManager]( &OBJC_CLASS___AAConversationDetectSessionManager,  "sharedCDSessionManager"));
  [v2 invalidate];

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AADeviceManagerDaemon sharedAADeviceManagerDaemon]( &OBJC_CLASS___AADeviceManagerDaemon,  "sharedAADeviceManagerDaemon"));
  [v3 invalidate];

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 208))
  {
    os_state_remove_handler(*(void *)(v4 + 208));
    *(void *)(*(void *)(a1 + 32) + 208LL) = 0LL;
    uint64_t v4 = *(void *)(a1 + 32);
  }

  if (*(_DWORD *)(v4 + 192) != -1)
  {
    notify_cancel(*(_DWORD *)(v4 + 192));
    *(_DWORD *)(*(void *)(a1 + 32) + 192LL) = -1;
    uint64_t v4 = *(void *)(a1 + 32);
  }

  [(id)v4 _deregisterFromAVSystemControllerDeathNotifications];
  [*(id *)(a1 + 32) _deregisterFromAVSystemControllerStateNotifications];
  [*(id *)(*(void *)(a1 + 32) + 48) invalidate];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 48);
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 56) removeAllObjects];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 56);
  *(void *)(v7 + 56) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 256) invalidate];
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(void **)(v9 + 256);
  *(void *)(v9 + 256) = 0LL;
}

id sub_100011EE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

id sub_100011F58(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_1000120D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activateAudioRoutingControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100012404(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidateAudioRoutingControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

LABEL_27:
  -[AAServicesDaemon _update](self, "_update");
  v7[2](v7, 0LL);
}

  -[AAServicesDaemon _update](self, "_update");
  v7[2](v7, 0LL);
}

    goto LABEL_28;
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:]",  30LL,  "Relay logic is not running");
  }
LABEL_28:
}
}

  if (v12) {
    goto LABEL_34;
  }
LABEL_35:
  uint64_t v7 = v52;
  if ((v53 & 1) == 0)
  {

LABEL_39:
    if ((v54 & 1) == 0) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }

  if (v54)
  {
LABEL_40:
  }

  objc_msgSend(*(id *)(v71 + 32), "setIsFetchInProgress:", 0, v71);
  id v42 = (void *)objc_claimAutoreleasedReturnValue([&v9[50] sharedInstance]);
  [v42 endTransaction:@"ManateeFetchAccessoryKeyBlob"];
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    int v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      id v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

id sub_100012720(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activateAudioSessionControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100012A24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAudioSessionControl:*(void *)(a1 + 40)];
}

id sub_100012CA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidateAudioSessionControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

LABEL_28:
}

      uint64_t v8 = v21;
    }
  }

  else
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _isOtherTipiDeviceBeforeTrain:withIOS:withMacOS:]",  90LL,  "Other Tipi device is null while checking its build");
    }

    LOBYTE(v10) = 0;
  }

  return (char)v10;
}

              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v4 name]);
              if (v25)
              {
                __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(-[CBDeviceIdentity name](v7, "name"));
                __int128 v27 = v25;
                id v28 = v26;
                if (v27 != v28)
                {
                  id v29 = v28;
                  if (v28)
                  {
                    id v30 = [v27 isEqual:v28];

                    if ((v30 & 1) != 0) {
                      goto LABEL_32;
                    }
                  }

                  else
                  {
                  }

                  -[CBDeviceIdentity setName:](v7, "setName:", v27);
                  if (v6)
                  {
LABEL_41:
                    ++v47;
                    if (dword_1002347D8 <= 20)
                    {
                      id v31 = v51;
                      uint64_t v2 = v52;
                      if (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 20LL)) {
                        LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsUpdateIdentities]",  20LL,  "UpdateIdentities: Chg: %@",  v7);
                      }
                      goto LABEL_48;
                    }

  CKRecordKeyValueSetting.subscript.getter( &v49,  0x49746375646F7270LL,  0xE900000000000044LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  id v38 = v50;
  id v39 = (void *)(v18 + v17[10]);
  id v41 = *v39;
  id v40 = v39[1];
  if (!v50) {
    goto LABEL_33;
  }
  if (v49 != v41 || v50 != v40)
  {
    id v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v39, v39[1], 0LL);
    swift_bridgeObjectRelease(v38);
    if ((v42 & 1) != 0) {
      goto LABEL_34;
    }
LABEL_33:
    id v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    unint64_t v49 = v41;
    uint64_t v50 = v40;
    swift_bridgeObjectRetain(v40);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x49746375646F7270LL, 0xE900000000000044LL, ObjectType);
    goto LABEL_34;
  }

  swift_bridgeObjectRelease(v50);
LABEL_34:
  CKRecordKeyValueSetting.subscript.getter( &v49,  0x4449726F646E6576LL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  id v43 = v50;
  id v44 = (void *)(v18 + v17[11]);
  id v46 = *v44;
  v45 = v44[1];
  if (!v50) {
    goto LABEL_39;
  }
  if (v49 == v46 && v50 == v45)
  {
    swift_unknownObjectRelease(v13);
    return swift_bridgeObjectRelease(v43);
  }

  id v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v44, v44[1], 0LL);
  swift_bridgeObjectRelease(v43);
  if ((v48 & 1) == 0)
  {
LABEL_39:
    id v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    unint64_t v49 = v46;
    uint64_t v50 = v45;
    swift_bridgeObjectRetain(v45);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x4449726F646E6576LL, 0xE800000000000000LL, ObjectType);
  }

  return swift_unknownObjectRelease(v13);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
LABEL_29:
    swift_once(&qword_100234B68, sub_1000CA624);
  }

  swift_bridgeObjectRelease(*(void *)(v1 + 16));
  return v1;
}

    swift_once(&qword_100234C28, sub_10018A9E0);
    goto LABEL_11;
  }

  id v39 = a2;
  id v40 = v2;
  int v12 = [objc_allocWithZone(BTCloudAccountInfo) init];
  id v13 = sub_10013B740();
  id v14 = *(void **)(v13 + 72);
  *uint64_t v8 = v14;
  id v41 = a1;
  id v15 = enum case for DispatchPredicate.notOnQueue(_:);
  uint64_t v16 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 104);
  v16(v8, enum case for DispatchPredicate.notOnQueue(_:), v5);
  unsigned __int8 v17 = v14;
  a2 = _dispatchPreconditionTest(_:)(v8);
  __int128 v18 = *(void (**)(void *, uint64_t))(v6 + 8);
  v18(v8, v5);
  if ((a2 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  __int128 v19 = v40;
  OS_dispatch_queue.sync<A>(execute:)((uint64_t *)((char *)&v42 + 1), sub_100187764, v13, &type metadata for Bool);
  id v40 = v19;
  swift_unknownObjectRelease(v13);
  [v12 setIsSignedIn:BYTE1(v42)];
  __int128 v20 = sub_10013B740();
  __int128 v21 = *(void **)(v20 + 72);
  *uint64_t v8 = v21;
  v16(v8, v15, v5);
  unsigned __int8 v17 = v21;
  a2 = _dispatchPreconditionTest(_:)(v8);
  v18(v8, v5);
  if ((a2 & 1) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  OS_dispatch_queue.sync<A>(execute:)(&v42, sub_1001899A8, v20, &type metadata for Bool);
  swift_unknownObjectRelease(v20);
  [v12 setManateeAvailable:v42];
  __int128 v22 = v41;
  int v23 = sub_10013A1E4();
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = objc_msgSend(v23, "aa_personID");
    [v12 setAccountIdentifier:v25];

    __int128 v26 = [v24 appleID];
    [v12 setLoginID:v26];
  }

  else
  {
    id v28 = static os_log_type_t.error.getter(0LL);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    id v29 = qword_10023DFC8;
    id v30 = sub_100098CD8((uint64_t *)&unk_100234E00);
    id v31 = swift_allocObject(v30, 112LL, 7LL);
    *(_OWORD *)(v31 + 16) = xmmword_1001A6F30;
    id v32 = *(void *)(v22 + 48);
    id v33 = sub_10009914C();
    id v34 = 0x6E6F697469646441LL;
    if (!v32) {
      id v34 = 0x7972616D697250LL;
    }
    id v35 = 0xEA00000000006C61LL;
    if (!v32) {
      id v35 = 0xE700000000000000LL;
    }
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = v33;
    *(void *)(v31 + 32) = v34;
    *(void *)(v31 + 40) = v35;
    id v36 = *(void *)(v22 + 40);
    *(void *)(v31 + 96) = &type metadata for String;
    *(void *)(v31 + 104) = v33;
    if (!v32) {
      id v36 = 7104878LL;
    }
    v37 = 0xE300000000000000LL;
    if (v32) {
      v37 = v32;
    }
    *(void *)(v31 + 72) = v36;
    *(void *)(v31 + 80) = v37;
    swift_bridgeObjectRetain(v32);
    os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  v29,  "Could Not Find %@ Account. Account identifier: %@",  49LL,  2LL,  v31);
    swift_bridgeObjectRelease(v31);
  }

  a2 = v39;
LABEL_25:
  *(void *)a2 = v12;
}

id sub_100013380(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reportDeviceFound:*(void *)(a1 + 40)];
}

id sub_100013528(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reportDeviceLost:*(void *)(a1 + 40)];
}

void sub_1000136AC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v10 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKey:AVSystemController_CallIsActiveNotificationParameter]);

  if (v10)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:AVSystemController_CallIsHighPriorityNotificationParameter]);

    if (v4)
    {
      unsigned __int8 v5 = [v10 BOOLValue];
      unsigned __int8 v6 = [v4 BOOLValue];
      *(_BYTE *)(*(void *)(a1 + 40) + 168LL) = v5;
      *(_BYTE *)(*(void *)(a1 + 40) + 169LL) = v6;
      if (dword_100234330 <= 30
        && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (*(_BYTE *)(v7 + 168)) {
          uint64_t v8 = "yes";
        }
        else {
          uint64_t v8 = "no";
        }
        if (*(_BYTE *)(v7 + 169)) {
          uint64_t v9 = "yes";
        }
        else {
          uint64_t v9 = "no";
        }
        LogPrintF( &dword_100234330,  "-[AAServicesDaemon _handleCallIsActiveDidChangeNotification:]_block_invoke",  30LL,  "Mute Control: call state changed, isCallActive: %s, isCallHighPriority: %s",  v8,  v9);
      }

      [*(id *)(a1 + 40) _updateBannerChimeSuppressionState];
    }

    else if (dword_100234330 <= 90 {
           && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 90LL)))
    }
    {
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _handleCallIsActiveDidChangeNotification:]_block_invoke",  90LL,  "Mute Control: failed to retrieve call priority from AVSystemController_CallIsActiveDidChangeNotification");
    }
  }

  else if (dword_100234330 <= 90 {
         && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 90LL)))
  }
  {
    LogPrintF( &dword_100234330,  "-[AAServicesDaemon _handleCallIsActiveDidChangeNotification:]_block_invoke",  90LL,  "Mute Control: failed to retrieve call state from AVSystemController_CallIsActiveDidChangeNotification");
  }
}

void sub_100013914(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  id v11 = v2;
  if (dword_100234330 <= 30)
  {
    if (dword_100234330 != -1 || (int v4 = _LogCategory_Initialize(&dword_100234330, 30LL), v2 = v11, v4))
    {
      else {
        id v3 = "no";
      }
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _handlePTTCallStatusChangedNotification:]_block_invoke",  30,  "Mute Control: TUCall state changed, isPTTCall: %s, callState: %d",  v3,  [v11 status]);
      uint64_t v2 = v11;
    }
  }

  else {
    int v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(unsigned __int8 *)(v6 + 170);
  if (v7 != v5)
  {
    if (dword_100234330 <= 30)
    {
      if (dword_100234330 != -1)
      {
LABEL_14:
        uint64_t v8 = "yes";
        if (v7) {
          uint64_t v9 = "yes";
        }
        else {
          uint64_t v9 = "no";
        }
        if (!v5) {
          uint64_t v8 = "no";
        }
        LogPrintF( &dword_100234330,  "-[AAServicesDaemon _handlePTTCallStatusChangedNotification:]_block_invoke",  30LL,  "Mute Control: PTT call state changed from %s --> %s",  v9,  v8);
        uint64_t v6 = *(void *)(a1 + 40);
        goto LABEL_21;
      }

      int v10 = _LogCategory_Initialize(&dword_100234330, 30LL);
      uint64_t v6 = *(void *)(a1 + 40);
      if (v10)
      {
        int v7 = *(unsigned __int8 *)(v6 + 170);
        goto LABEL_14;
      }
    }

LABEL_21:
    *(_BYTE *)(v6 + 170) = v5;
    [*(id *)(a1 + 40) _updateBannerChimeSuppressionState];
  }
}
}

      __int128 v19 = (v23 - 1) & v23;
      __int128 v21 = __clz(__rbit64(v23)) + (v15 << 6);
    }

    uint64_t v25 = *(void *)(*(void *)(v14 + 56) + 8 * v21);
    uint64_t v65 = &type metadata for AudioAccessoryFeatures;
    __int128 v26 = sub_10009E740();
    uint64_t v66 = v26;
    LOBYTE(v64[0]) = 0;
    swift_retain(v25);
    __int128 v27 = isFeatureEnabled(_:)(v64);
    sub_10009A498(v64);
    if ((v27 & 1) != 0) {
      break;
    }
LABEL_5:
    swift_release(v25);
  }

  uint64_t v65 = &type metadata for AudioAccessoryFeatures;
  uint64_t v66 = v26;
  LOBYTE(v64[0]) = 0;
  id v28 = isFeatureEnabled(_:)(v64);
  sub_10009A498(v64);
  id v29 = (uint64_t)_swiftEmptyArrayStorage;
  if ((v28 & 1) != 0)
  {
    id v30 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v30)
    {
      id v31 = sub_10013A76C();
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      id v32 = v60;
      id v33 = sub_100098D58(v60, (uint64_t)qword_10023DF40);
      id v35 = (uint64_t)v58;
      id v34 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v33, v32);
      id v29 = sub_100138A8C(v35);
      swift_release(v31);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v32);
    }

    else
    {
      id v36 = static os_log_type_t.error.getter(v30);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      v37 = v36;
      id v29 = (uint64_t)_swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  if (!((unint64_t)v29 >> 62))
  {
    id v38 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v29);
    if (v38) {
      goto LABEL_33;
    }
LABEL_4:
    swift_bridgeObjectRelease_n(v29, 2LL);
    id v14 = v61;
    goto LABEL_5;
  }

  if (v29 < 0) {
    v57 = v29;
  }
  else {
    v57 = v29 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v29, 2LL);
  id v38 = _CocoaArrayWrapper.endIndex.getter(v57);
  swift_bridgeObjectRelease(v29);
  if (!v38) {
    goto LABEL_4;
  }
LABEL_33:
  if ((v29 & 0xC000000000000001LL) != 0) {
    id v39 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v29);
  }
  else {
    id v39 = (char *)*(id *)(v29 + 32);
  }
  id v40 = v39;
  id v41 = &v39[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  id v42 = *(void *)&v39[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  id v43 = *((void *)v41 + 1);
  id v44 = v42 == a1 && v43 == a2;
  if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, a1, a2, 0LL) & 1) != 0)
  {
LABEL_66:
    swift_bridgeObjectRelease_n(v29, 2LL);
    swift_release(v61);

    swift_release(v25);
    return;
  }

  if (v38 == 1) {
    goto LABEL_4;
  }
  if ((v29 & 0xC000000000000001LL) != 0)
  {
    v45 = 1LL;
    while (1)
    {
      id v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v29);
      id v47 = v45 + 1;
      if (__OFADD__(v45, 1LL)) {
        break;
      }
      id v40 = (void *)v46;
      id v48 = v46 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress;
      unint64_t v49 = *(void *)(v46 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
      uint64_t v50 = *(void *)(v48 + 8);
      id v51 = v49 == a1 && v50 == a2;
      if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, a1, a2, 0LL) & 1) != 0) {
        goto LABEL_66;
      }
      swift_unknownObjectRelease(v40);
      ++v45;
      if (v47 == v38) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  else
  {
    v52 = 5LL;
    while (1)
    {
      id v53 = v52 - 3;
      if (__OFADD__(v52 - 4, 1LL)) {
        break;
      }
      id v54 = (void *)(*(void *)(v29 + 8 * v52) + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
      id v55 = v54[1];
      v56 = *v54 == a1 && v55 == a2;
      if (v56 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v54, v55, a1, a2, 0LL) & 1) != 0)
      {
        swift_release(v61);
        swift_release(v25);
        swift_bridgeObjectRelease_n(v29, 2LL);
        return;
      }

      ++v52;
      if (v53 == v38) {
        goto LABEL_4;
      }
    }
  }

  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

    v154 = (v32 - 1) & v32;
    v155 = v33;
  }

  id v53 = static os_log_type_t.error.getter(v37);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  int v4 = (char **)_swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage,  v133);
  int v5 = _swiftEmptyArrayStorage[2];
  if (!v5) {
    goto LABEL_37;
  }
LABEL_26:
  id v40 = v4;
  id v41 = v153;
  id v42 = (uint64_t)v40 + ((*(unsigned __int8 *)(v153 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
  v151 = v40;
  swift_bridgeObjectRetain(v40);
  v158 = *(void *)(v41 + 72);
  id v43 = (uint64_t)v152;
  while (1)
  {
    sub_1000A7C90(v42, v43, type metadata accessor for DeviceRecord);
    id v44 = (uint64_t *)(v43 + *(int *)(v159 + 24));
    id v46 = *v44;
    v45 = v44[1];
    int v4 = v28;
    id v47 = [v160 v28[402]];
    id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    if (v46 == v48 && v45 == v50) {
      break;
    }
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v45, v48, v50, 0LL);
    swift_bridgeObjectRelease(v50);
    sub_1000A7CD4(v43, type metadata accessor for DeviceRecord);
    if ((v52 & 1) != 0) {
      goto LABEL_42;
    }
    v42 += v158;
    --v5;
    id v28 = v4;
    if (!v5)
    {
      swift_release(v157);
      swift_bridgeObjectRelease_n(v151, 2LL);
      id v15 = v137;
      uint64_t v16 = v136;
      __int128 v18 = v135;
      id v29 = &_mh_execute_header;
      goto LABEL_38;
    }
  }

  swift_bridgeObjectRelease(v45);
  sub_1000A7CD4(v43, type metadata accessor for DeviceRecord);
LABEL_42:
  uint64_t v58 = swift_bridgeObjectRelease_n(v151, 2LL);
  uint64_t v59 = static os_log_type_t.error.getter(v58);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  int v60 = qword_10023DFC0;
  uint64_t v61 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
  *(_OWORD *)(v62 + 16) = xmmword_1001A5EA0;
  *(void *)(v62 + 56) = sub_1000A4A64( 0LL,  (unint64_t *)&unk_100236F00,  &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
  *(void *)(v62 + 64) = sub_1000C934C( &qword_100235820,  (unint64_t *)&unk_100236F00,  &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
  uint64_t v63 = v160;
  *(void *)(v62 + 32) = v160;
  uint64_t v64 = v63;
  os_log(_:dso:log:_:_:)( v59,  &_mh_execute_header,  v60,  "CloudSync: Cannot Add Secondary Cloud DeviceSupportInformation: %@",  66LL,  2LL,  v62);
  swift_release(v156);

  swift_release(v157);
  return swift_bridgeObjectRelease(v62);
}

    v154 = (v32 - 1) & v32;
    v155 = v33;
  }

  id v53 = static os_log_type_t.error.getter(v37);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  int v4 = (char **)_swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage,  v133);
  int v5 = _swiftEmptyArrayStorage[2];
  if (!v5) {
    goto LABEL_37;
  }
LABEL_26:
  id v40 = v4;
  id v41 = v153;
  id v42 = (uint64_t)v40 + ((*(unsigned __int8 *)(v153 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
  v151 = v40;
  swift_bridgeObjectRetain(v40);
  v158 = *(void *)(v41 + 72);
  id v43 = (uint64_t)v152;
  while (1)
  {
    sub_1000A7C90(v42, v43, type metadata accessor for DeviceRecord);
    id v44 = (uint64_t *)(v43 + *(int *)(v159 + 24));
    id v46 = *v44;
    v45 = v44[1];
    int v4 = v28;
    id v47 = [v160 v28[402]];
    id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    if (v46 == v48 && v45 == v50) {
      break;
    }
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v45, v48, v50, 0LL);
    swift_bridgeObjectRelease(v50);
    sub_1000A7CD4(v43, type metadata accessor for DeviceRecord);
    if ((v52 & 1) != 0) {
      goto LABEL_42;
    }
    v42 += v158;
    --v5;
    id v28 = v4;
    if (!v5)
    {
      swift_release(v157);
      swift_bridgeObjectRelease_n(v151, 2LL);
      id v15 = v137;
      uint64_t v16 = v136;
      __int128 v18 = v135;
      id v29 = &_mh_execute_header;
      goto LABEL_38;
    }
  }

  swift_bridgeObjectRelease(v45);
  sub_1000A7CD4(v43, type metadata accessor for DeviceRecord);
LABEL_42:
  uint64_t v58 = swift_bridgeObjectRelease_n(v151, 2LL);
  uint64_t v59 = static os_log_type_t.error.getter(v58);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  int v60 = qword_10023DFC0;
  uint64_t v61 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
  *(_OWORD *)(v62 + 16) = xmmword_1001A5EA0;
  *(void *)(v62 + 56) = sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
  *(void *)(v62 + 64) = sub_1000C934C(&qword_100235808, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
  uint64_t v63 = v160;
  *(void *)(v62 + 32) = v160;
  uint64_t v64 = v63;
  os_log(_:dso:log:_:_:)( v59,  &_mh_execute_header,  v60,  "CloudSync: Cannot Add Secondary Cloud MagicSettings: %@",  55LL,  2LL,  v62);
  swift_release(v156);

  swift_release(v157);
  return swift_bridgeObjectRelease(v62);
}

  CKRecordKeyValueSetting.subscript.getter( &v141,  0x654B72657473616DLL,  0xE900000000000079LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  id v31 = v141;
  id v32 = v142;
  id v33 = (uint64_t *)(v139 + v140[7]);
  id v34 = *v33;
  id v35 = v33[1];
  sub_1000991CC(*v33, v35);
  if (v32 >> 60 == 15)
  {
    sub_1000AC4C0(v31, v32);
    sub_1000AC4C0(v34, v35);
  }

  else
  {
    sub_1000AC4D4(v31, v32);
    sub_1000D53B8(v31, v32);
    v37 = v36;
    sub_100099394(v34, v35);
    sub_1000AC4C0(v31, v32);
    sub_1000AC4C0(v31, v32);
    if ((v37 & 1) != 0) {
      goto LABEL_25;
    }
  }

  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v34;
  v142 = v35;
  sub_1000991CC(v34, v35);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x654B72657473616DLL, 0xE900000000000079LL, ObjectType);
LABEL_25:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x694872657473616DLL,  0xEA0000000000746ELL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  id v38 = v141;
  id v39 = v142;
  id v40 = (uint64_t *)(v139 + v140[8]);
  id v41 = *v40;
  id v42 = v40[1];
  sub_1000991CC(*v40, v42);
  if (v39 >> 60 == 15)
  {
    sub_1000AC4C0(v38, v39);
    sub_1000AC4C0(v41, v42);
  }

  else
  {
    sub_1000AC4D4(v38, v39);
    sub_1000D53B8(v38, v39);
    id v44 = v43;
    sub_100099394(v41, v42);
    sub_1000AC4C0(v38, v39);
    sub_1000AC4C0(v38, v39);
    if ((v44 & 1) != 0) {
      goto LABEL_29;
    }
  }

  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v41;
  v142 = v42;
  sub_1000991CC(v41, v42);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x694872657473616DLL, 0xEA0000000000746ELL, ObjectType);
LABEL_29:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x726F737365636361LL,  0xEC00000079654B79LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  v45 = v141;
  id v46 = v142;
  id v47 = (uint64_t *)(v139 + v140[9]);
  id v48 = *v47;
  unint64_t v49 = v47[1];
  sub_1000991CC(*v47, v49);
  if (v46 >> 60 == 15)
  {
    sub_1000AC4C0(v45, v46);
    sub_1000AC4C0(v48, v49);
  }

  else
  {
    sub_1000AC4D4(v45, v46);
    sub_1000D53B8(v45, v46);
    id v51 = v50;
    sub_100099394(v48, v49);
    sub_1000AC4C0(v45, v46);
    sub_1000AC4C0(v45, v46);
    if ((v51 & 1) != 0) {
      goto LABEL_33;
    }
  }

  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v48;
  v142 = v49;
  sub_1000991CC(v48, v49);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x726F737365636361LL, 0xEC00000079654B79LL, ObjectType);
LABEL_33:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x726F737365636361LL,  0xED0000746E694879LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  v52 = v141;
  id v53 = v142;
  id v54 = (uint64_t *)(v139 + v140[10]);
  id v55 = *v54;
  v56 = v54[1];
  sub_1000991CC(*v54, v56);
  if (v53 >> 60 == 15)
  {
    sub_1000AC4C0(v52, v53);
    sub_1000AC4C0(v55, v56);
  }

  else
  {
    sub_1000AC4D4(v52, v53);
    sub_1000D53B8(v52, v53);
    uint64_t v58 = v57;
    sub_100099394(v55, v56);
    sub_1000AC4C0(v52, v53);
    sub_1000AC4C0(v52, v53);
    if ((v58 & 1) != 0) {
      goto LABEL_37;
    }
  }

  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v55;
  v142 = v56;
  sub_1000991CC(v55, v56);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x726F737365636361LL, 0xED0000746E694879LL, ObjectType);
LABEL_37:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x6F4D6E6F74747562LL,  0xEB00000000736564LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v59 = v142;
  int v60 = (uint64_t *)(v139 + v140[15]);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  if (!v142) {
    goto LABEL_42;
  }
  if (v141 != v62 || v142 != v61)
  {
    uint64_t v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v60, v60[1], 0LL);
    swift_bridgeObjectRelease(v59);
    if ((v63 & 1) != 0) {
      goto LABEL_43;
    }
LABEL_42:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v62;
    v142 = v61;
    swift_bridgeObjectRetain(v61);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x6F4D6E6F74747562LL, 0xEB00000000736564LL, ObjectType);
    goto LABEL_43;
  }

  swift_bridgeObjectRelease(v142);
LABEL_43:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x726F6C6F63LL,  0xE500000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v64 = v142;
  uint64_t v65 = (uint64_t *)(v139 + v140[16]);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  if (!v142) {
    goto LABEL_48;
  }
  if (v141 == v67 && v142 == v66)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_49;
  }

  uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v65, v65[1], 0LL);
  swift_bridgeObjectRelease(v64);
  if ((v68 & 1) == 0)
  {
LABEL_48:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v67;
    v142 = v66;
    swift_bridgeObjectRetain(v66);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x726F6C6F63LL, 0xE500000000000000LL, ObjectType);
  }

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

      int v7 = (v12 - 1) & v12;
      int v10 = __clz(__rbit64(v12)) + (v1 << 6);
    }

    id v14 = 16 * v10;
    id v15 = a1[7];
    uint64_t v16 = *(void *)(a1[6] + 16 * v10 + 8);
    unsigned __int8 v17 = swift_allocObject(&unk_10020F888, 32LL, 7LL);
    id v41 = *(_OWORD *)(v15 + v14);
    *(_OWORD *)(v17 + 16) = v41;
    swift_bridgeObjectRetain(v16);
    swift_retain(*((void *)&v41 + 1));
    __int128 v18 = String._bridgeToObjectiveC()();
    __int128 v19 = swift_allocObject(&unk_10020F8B0, 32LL, 7LL);
    *(void *)(v19 + 16) = sub_10010BFD8;
    *(void *)(v19 + 24) = v17;
    swift_retain(v17);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    __int128 v22 = sub_1000A3A74((uint64_t)v18);
    int v23 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    uint64_t v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    __int128 v26 = v21;
    if (*((void *)&_swiftEmptyDictionarySingleton + 3) >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_10010E2C4();
        if ((v26 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_10010CF80(v25, isUniquelyReferenced_nonNull_native);
      __int128 v27 = sub_1000A3A74((uint64_t)v18);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_38;
      }
      __int128 v22 = v27;
      if ((v26 & 1) != 0)
      {
LABEL_4:
        uint64_t v8 = (uint64_t (**)())(*((void *)&_swiftEmptyDictionarySingleton + 7) + 16 * v22);
        swift_release(v8[1]);
        *uint64_t v8 = sub_10009E99C;
        v8[1] = (uint64_t (*)())v19;
        goto LABEL_5;
      }
    }

    *((void *)&_swiftEmptyDictionarySingleton + (v22 >> 6) + 8) |= 1LL << v22;
    *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 8 * v22) = v18;
    id v29 = (uint64_t (**)())(*((void *)&_swiftEmptyDictionarySingleton + 7) + 16 * v22);
    *id v29 = sub_10009E99C;
    v29[1] = (uint64_t (*)())v19;
    id v30 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    id v31 = __OFADD__(v30, 1LL);
    id v32 = v30 + 1;
    if (v31) {
      goto LABEL_35;
    }
    *((void *)&_swiftEmptyDictionarySingleton + 2) = v32;
    id v33 = v18;
LABEL_5:
    swift_release(v17);
    swift_bridgeObjectRelease(v16);

    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  type metadata accessor for CFString(0LL);
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v37);
  __break(1u);
  return result;
}

LABEL_14:
  if (isPTTCallActive && self->_muteBanner)
  {
    if (dword_100234330 <= 30
      && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
    {
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _updateBannerChimeSuppressionState]",  30LL,  "Mute Control: invalidating mute banner");
    }

    -[AAServicesDaemon _invalidateMuteBanner](self, "_invalidateMuteBanner");
  }

  id v11 = self->_deviceManager;
  deviceManager = self->_deviceManager;
  self->_deviceManager = 0LL;

  if (v11)
  {
    if (dword_100234330 <= 30
      && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
    {
      LogPrintF(&dword_100234330, "-[AAServicesXPCConnection xpcConnectionInvalidated]", 30LL, "Invalidate: %@", v11);
    }

    -[NSMutableSet removeObject:](self->_daemon->_activatedDeviceManagerSet, "removeObject:", v11);
    -[AADeviceManager invalidate](v11, "invalidate");
  }
}

  switch(self->_activityLevel)
  {
    case 3u:
      if (self->_activityLevelMediaPlaying)
      {
        id v13 = 4;
        goto LABEL_39;
      }

      id v14 = self->_activityLevelDeltaInSeconds;
      if (v14 > 0x19) {
        goto LABEL_38;
      }
      if (v14 == 25)
      {
        *((_DWORD *)v32 + 6) = 2;
        if (!self->_activityLevelTicks) {
          self->_activityLevelTicks = mach_absolute_time();
        }
        activityLevelDelayTimer = self->_activityLevelDelayTimer;
        if (activityLevelDelayTimer)
        {
          uint64_t v24 = activityLevelDelayTimer;
          dispatch_source_cancel(v24);
          uint64_t v25 = self->_activityLevelDelayTimer;
          self->_activityLevelDelayTimer = 0LL;
        }

        id v11 = 25LL;
        goto LABEL_26;
      }

      break;
    case 7u:
    case 0xAu:
      int v7 = self->_activityLevelDeltaInSeconds;
      if (v7 <= 0x1DF && self->_screenOn)
      {
        if (v7 == 25 || !v7)
        {
          if (!self->_activityLevelTicks) {
            self->_activityLevelTicks = mach_absolute_time();
          }
          *((_DWORD *)v32 + 6) = 2;
          uint64_t v8 = self->_activityLevelDelayTimer;
          if (v8)
          {
            uint64_t v9 = v8;
            dispatch_source_cancel(v9);
            int v10 = self->_activityLevelDelayTimer;
            self->_activityLevelDelayTimer = 0LL;
          }

          if (self->_screenOn) {
            id v11 = 480LL;
          }
          else {
            id v11 = 25LL;
          }
LABEL_26:
          -[BTSmartRoutingDaemon _nearbyInfoActivityDelayCheck:](self, "_nearbyInfoActivityDelayCheck:", v11);
        }
      }

      else
      {
LABEL_38:
        id v13 = 1;
LABEL_39:
        *((_DWORD *)v32 + 6) = v13;
      }

      break;
    case 0xBu:
    case 0xEu:
      self->_activityLevelDeltaInSeconds = 25LL;
      self->_activityLevelTicks = 0LL;
      if (self->_activityCriticalTimer) {
        int v12 = 7;
      }
      else {
        int v12 = 6;
      }
      *((_DWORD *)v32 + 6) = v12;
      if (-[SFDeviceDiscovery scanRate](self->_nearbyInfoDiscovery, "scanRate") != (id)40) {
        -[SFDeviceDiscovery setScanRate:](self->_nearbyInfoDiscovery, "setScanRate:", 40LL);
      }
      if (-[SFDeviceDiscovery scanRate](self->_wxDiscovery, "scanRate") != (id)40) {
        -[SFDeviceDiscovery setScanRate:](self->_wxDiscovery, "setScanRate:", 40LL);
      }
      -[BTSmartRoutingDaemon _smartRoutingLowerRateScan](self, "_smartRoutingLowerRateScan");
      break;
    default:
      break;
  }

  id v15 = self->_activityLevelMediaPlaying
     || (int)-[CUSystemMonitor activeCallCount](self->_callMonitor, "activeCallCount") > 0;
  smartRoutingWxDeviceMap = self->_smartRoutingWxDeviceMap;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_10002E86C;
  v29[3] = &unk_100207048;
  id v30 = v15;
  v29[4] = self;
  v29[5] = &v31;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( smartRoutingWxDeviceMap,  "enumerateKeysAndObjectsUsingBlock:",  v29);
  unsigned __int8 v17 = *((_DWORD *)v32 + 6);
  if (v17)
  {
    __int128 v18 = self->_score;
    if (v17 != (_DWORD)v18)
    {
      if (dword_100234408 <= 30)
      {
        if (dword_100234408 != -1
          || (v20 = _LogCategory_Initialize(&dword_100234408, 30LL), __int128 v18 = self->_score, v20))
        {
          else {
            __int128 v19 = off_1002079F0[(int)v18];
          }
          __int128 v21 = *((int *)v32 + 6);
          else {
            __int128 v22 = off_1002079F0[v21];
          }
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoActivityChanged]",  30LL,  "NearbyInfoActivityChanged: audio routing score has changed %d (%s) -> %d (%s)\n",  v18,  v19,  *((_DWORD *)v32 + 6),  v22);
          __int128 v18 = self->_score;
        }
      }

      self->_score = *((_DWORD *)v32 + 6);
      -[BTSmartRoutingDaemon _nearbyInfoSetAudioRoutingScore](self, "_nearbyInfoSetAudioRoutingScore");
      -[CUCoalescer trigger](self->_evaluatorCoalescer, "trigger");
      if (self->_prefProactiveOwnershipArbitration)
      {
        -[BTSmartRoutingDaemon _notifyOtherTipiDeviceTipiScoreChanged:andNewScore:]( self,  "_notifyOtherTipiDeviceTipiScoreChanged:andNewScore:",  v18,  self->_score);
        if (*((_DWORD *)v32 + 6) == 1 && !self->_cdDeviceIdentifier)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoActivityChanged]",  30LL,  "ProactiveRouting: Start idle tick");
          }

          self->_startIdleTicks = mach_absolute_time();
          highActivityLevelTimer = self->_highActivityLevelTimer;
          if (highActivityLevelTimer)
          {
            __int128 v27 = highActivityLevelTimer;
            dispatch_source_cancel(v27);
            id v28 = self->_highActivityLevelTimer;
            self->_highActivityLevelTimer = 0LL;
          }
        }

        else
        {
          self->_startIdleTicks = 0LL;
        }
      }
    }
  }

  _Block_object_dispose(&v31, 8);
}
}
  }

  else
  {
    LODWORD(v7) = 0;
  }

  return v7;
}
}

void sub_100013E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100013E9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100013EAC(uint64_t a1)
{
}

void sub_100013EB4(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == *(void *)(*(void *)(a1 + 32) + 184LL))
  {
    if (dword_100234330 <= 30
      && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
    {
      if (a2 > 6) {
        uint64_t v6 = "?";
      }
      else {
        uint64_t v6 = (&off_100206830)[a2];
      }
      uint64_t v7 = *(int *)(a1 + 48);
      else {
        uint64_t v8 = (&off_1002069E8)[v7];
      }
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke",  30LL,  "Mute Control: banner action: %s, mute control applied: %s",  v6,  v8);
    }

    switch(a2)
    {
      case 1u:
        if ((*(_DWORD *)(a1 + 48) - 1) <= 1)
        {
          if (dword_100234330 <= 30
            && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
          {
            LogPrintF( &dword_100234330,  "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke",  30LL,  "Mute Control: reverse action");
          }

          int v10 = *(void **)(a1 + 32);
          uint64_t v11 = *(unsigned __int8 *)(a1 + 84);
          __int128 v12 = *(_OWORD *)(a1 + 68);
          v14[0] = *(_OWORD *)(a1 + 52);
          v14[1] = v12;
          [v10 _reverseMuteActionForToken:v14 shouldMute:v11];
        }

        break;
      case 2u:
        if (dword_100234330 <= 30
          && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
        {
          uint64_t v9 = "Mute Control: banner dismissed";
          goto LABEL_30;
        }

        break;
      case 3u:
        if (dword_100234330 <= 30
          && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
        {
          uint64_t v9 = "Mute Control: banner invalidated";
          goto LABEL_30;
        }

        break;
      case 4u:
        if (dword_100234330 <= 90
          && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 90LL)))
        {
          LogPrintF( &dword_100234330,  "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke",  90LL,  "Mute Control: banner error %@",  v5);
        }

        break;
      case 6u:
        if (dword_100234330 <= 30
          && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
        {
          uint64_t v9 = "Mute Control: banner timeout";
LABEL_30:
          LogPrintF( &dword_100234330,  "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke",  30LL,  v9,  v13);
        }

        break;
      default:
        break;
    }

    [*(id *)(a1 + 32) _invalidateMuteBanner];
  }
}

void sub_100014710(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 240LL))
  {
    if (dword_100234330 <= 30
      && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
    {
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _createBannerSessionMuteActionForMacOS:auditToken:appName:appBundleID:]_block_invoke",  30LL,  "Mute Control: reverse action");
    }

    uint64_t v2 = *(void **)(a1 + 40);
    uint64_t v3 = *(unsigned __int8 *)(a1 + 80);
    __int128 v4 = *(_OWORD *)(a1 + 64);
    v7[0] = *(_OWORD *)(a1 + 48);
    v7[1] = v4;
    [v2 _reverseMuteActionForToken:v7 shouldMute:v3];
    [*(id *)(a1 + 32) invalidate];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(v5 + 240);
    *(void *)(v5 + 240) = 0LL;
  }

void sub_1000147C4(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 240LL))
  {
    id v9 = v5;
    if (dword_100234330 <= 30)
    {
      if (dword_100234330 != -1 || (v8 = _LogCategory_Initialize(&dword_100234330, 30LL), uint64_t v6 = v9, v8))
      {
        if (a2 > 5) {
          uint64_t v7 = "?";
        }
        else {
          uint64_t v7 = (&off_100206868)[a2];
        }
        LogPrintF( &dword_100234330,  "-[AAServicesDaemon _createBannerSessionMuteActionForMacOS:auditToken:appName:appBundleID:]_block_invoke_2",  30LL,  "Mute Control UINotificationSession action: %s, %{error}",  v7,  v6);
        uint64_t v6 = v9;
      }
    }

    if (a2 == 5 || a2 == 2)
    {
      [*(id *)(a1 + 40) _invalidateMuteBanner];
      uint64_t v6 = v9;
    }
  }
}

LABEL_17:
    if (dword_100234330 <= 90
      && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 90LL)))
    {
      LogPrintF(&dword_100234330, "-[AAServicesDaemon _playChime:]", 90LL, "Mute Control: Wrong chime detected");
    }

    return;
  }

  if (!self->_shouldSuppressMuteChime)
  {
    uint64_t v6 = 1364LL;
    goto LABEL_22;
  }

  if (dword_100234330 <= 30 && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
  {
    __int128 v4 = a3 - 1;
    if ((a3 - 1) <= 4)
    {
      id v5 = &off_100206898;
      goto LABEL_16;
    }

    -[MPCloudKit setIsWriteMasterKeysInProgress:](self, "setIsWriteMasterKeysInProgress:", 0LL);
    goto LABEL_18;
  }

  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  if (![v20 isEqualToString:CKErrorDomain])
  {

    goto LABEL_17;
  }

  if ([v8 code] == (id)26)
  {
  }

  else
  {
    __int128 v21 = [v8 code];

    if (v21 != (id)11) {
      goto LABEL_17;
    }
  }

  __int128 v22 = sub_100060178("MagicPairing");
  int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
    sub_10018F2F4();
  }

  -[MPCloudKit writeKeyBlob:withRetryCount:](self, "writeKeyBlob:withRetryCount:", v9, 0LL);
LABEL_18:
}
    }
  }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

            id v40 = static os_log_type_t.default.getter(v31);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            id v41 = qword_10023DFC8;
            id v42 = sub_100098CD8((uint64_t *)&unk_100234E00);
            id v43 = swift_allocObject(v42, 72LL, 7LL);
            *(_OWORD *)(v43 + 16) = xmmword_1001A5EA0;
            id v44 = sub_1000E7430();
            id v46 = v45;
            *(void *)(v43 + 56) = &type metadata for String;
            *(void *)(v43 + 64) = sub_10009914C();
            *(void *)(v43 + 32) = v44;
            *(void *)(v43 + 40) = v46;
            os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Retry cloud upload for deferred info record: %@",  47LL,  2LL,  v43);
            swift_bridgeObjectRelease(v43);
            id v47 = v53;
            id v48 = sub_10013B740();
            unint64_t v49 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
            swift_weakInit(v49 + 16, v47);
            swift_retain(v49);
            sub_1001051E0(v21, 0, (uint64_t)sub_100187FC4, v49);
            swift_unknownObjectRelease(v48);
            swift_release_n(v49, 2LL);
            goto LABEL_20;
          }
        }

        else
        {
          id v35 = (uint64_t)v50;
          id v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v50, 1LL, 1LL, v9);
        }

        id v30 = v51;
        static Date.now.getter(v36);
        sub_100099358(v35, (uint64_t *)&unk_100234E10);
        goto LABEL_15;
      }
    }

    else
    {
      sub_1000A7C90(v55, (uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
    }

    id v31 = sub_1000A7CD4((uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
    goto LABEL_17;
  }

  objc_autoreleasePoolPop(v20);
  __break(1u);
}

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  swift_release(v2);
  __int128 v20 = ((uint64_t (*)(void *, void))String.init(utf16CodeUnits:count:))(v7 + 4, v7[2]);
  swift_bridgeObjectRelease(v7);
  return v20;
}

LABEL_31:
    uint64_t v7 = "?";
    goto LABEL_32;
  }

    goto LABEL_32;
  }

      __break(1u);
      goto LABEL_32;
    }

          v115 = (v62 - 1) & v62;
          v123 = v63;
        }
      }
    }
  }

  v37 = v122;
  id v38 = *(void **)&v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  id v39 = (void *)swift_allocObject(&unk_10020BCB0, 40LL, 7LL);
  id v40 = (uint64_t)v120;
  id v41 = v121;
  v39[2] = a4;
  v39[3] = v40;
  v39[4] = v41;
  aBlock[4] = sub_1000CA5DC;
  v129 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020BCC8;
  id v42 = _Block_copy(aBlock);
  id v43 = v38;
  id v44 = a4;
  v45 = swift_retain(v41);
  static DispatchQoS.unspecified.getter(v45);
  v130 = _swiftEmptyArrayStorage;
  id v46 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  id v47 = sub_100098CD8((uint64_t *)&unk_100235790);
  id v48 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v130, v47, v48, v14, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v42);
  _Block_release(v42);

  (*(void (**)(char *, uint64_t))(v125 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v19, v124);
  unint64_t v49 = (uint64_t)v129;
  return swift_release(v49);
}

          v115 = (v62 - 1) & v62;
          v123 = v63;
        }
      }
    }
  }

  v37 = v122;
  id v38 = *(void **)&v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  id v39 = (void *)swift_allocObject(&unk_10020B620, 40LL, 7LL);
  id v40 = (uint64_t)v120;
  id v41 = v121;
  v39[2] = a4;
  v39[3] = v40;
  v39[4] = v41;
  aBlock[4] = sub_1000C954C;
  v129 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020B638;
  id v42 = _Block_copy(aBlock);
  id v43 = v38;
  id v44 = a4;
  v45 = swift_retain(v41);
  static DispatchQoS.unspecified.getter(v45);
  v130 = _swiftEmptyArrayStorage;
  id v46 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  id v47 = sub_100098CD8((uint64_t *)&unk_100235790);
  id v48 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v130, v47, v48, v14, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v42);
  _Block_release(v42);

  (*(void (**)(char *, uint64_t))(v125 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v19, v124);
  unint64_t v49 = (uint64_t)v129;
  return swift_release(v49);
}

          v115 = (v62 - 1) & v62;
          v123 = v63;
        }
      }
    }
  }

  v37 = v122;
  id v38 = *(void **)&v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  id v39 = (void *)swift_allocObject(&unk_10020B0D0, 40LL, 7LL);
  id v40 = (uint64_t)v120;
  id v41 = v121;
  v39[2] = a4;
  v39[3] = v40;
  v39[4] = v41;
  aBlock[4] = sub_1000C93AC;
  v129 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020B0E8;
  id v42 = _Block_copy(aBlock);
  id v43 = v38;
  id v44 = a4;
  v45 = swift_retain(v41);
  static DispatchQoS.unspecified.getter(v45);
  v130 = _swiftEmptyArrayStorage;
  id v46 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  id v47 = sub_100098CD8((uint64_t *)&unk_100235790);
  id v48 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v130, v47, v48, v14, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v42);
  _Block_release(v42);

  (*(void (**)(char *, uint64_t))(v125 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v19, v124);
  unint64_t v49 = (uint64_t)v129;
  return swift_release(v49);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

void sub_100014D3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v18[0] = 0LL;
  v18[1] = v18;
  v18[2] = 0x3032000000LL;
  v18[3] = sub_100013E9C;
  v18[4] = sub_100013EAC;
  id v19 = 0LL;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100014E40;
  block[3] = &unk_100206798;
  id v13 = v6;
  id v14 = v5;
  uint64_t v15 = v7;
  unsigned __int8 v17 = v18;
  id v16 = v8;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, block);

  _Block_object_dispose(v18, 8);
}

uint64_t sub_100014E40(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (dword_100234330 <= 90)
    {
      if (dword_100234330 != -1 || (int v4 = _LogCategory_Initialize(&dword_100234330, 90LL), v2 = *(void **)(a1 + 32), v4))
      {
        LogPrintF( &dword_100234330,  "-[AAServicesDaemon _processFirstPartyBannerRequestWithCompletion:]_block_invoke_2",  90LL,  "Mute Control: fetchInCallUIState returned with error %@",  v2);
        uint64_t v2 = *(void **)(a1 + 32);
      }
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v2);
  }

  else
  {
    unsigned int v3 = [*(id *)(a1 + 40) isMicIndicatorVisible];
    if (dword_100234330 <= 30
      && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL)))
    {
      LogPrintF( &dword_100234330,  "-[AAServicesDaemon _processFirstPartyBannerRequestWithCompletion:]_block_invoke_2",  30,  "Mute Control: fetchInCallUIState tuContext.isMicIndicatorVisible %d, shouldShowMuteBanner %d",  [*(id *)(a1 + 40) isMicIndicatorVisible],  v3 ^ 1);
    }

    if ((v3 & 1) != 0)
    {
      uint64_t v5 = NSErrorF(NSOSStatusErrorDomain, 4294960534LL, "first party UI visible, banner suppressed");
      uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
      uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
      int v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(unsigned int *)(v9 + 96);
      uint64_t v11 = *(void *)(v9 + 104);
      uint64_t v12 = *(void *)(v9 + 152);
      __int128 v13 = *(_OWORD *)(v9 + 128);
      v15[0] = *(_OWORD *)(v9 + 112);
      v15[1] = v13;
      [(id)v9 _createBannerSessionMuteActionForIOS:v10 auditToken:v15 appName:v11 appBundleID:v12];
    }
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(result + 16))( result,  *(void *)(*(void *)(a1 + 48) + 144LL),  *(void *)(*(void *)(a1 + 48) + 104LL),  *(void *)(*(void *)(a1 + 48) + 152LL),  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  }
  return result;
}

LABEL_63:
  __int128 v27 = NSErrorF(v23, 4294960591LL, v24);
  __int128 v18 = (id)objc_claimAutoreleasedReturnValue(v27);
  if (v10) {
    (*((void (**)(id, void *, void *, id, id))v10 + 2))(v10, v15, v14, v13, v18);
  }
LABEL_65:
}

    if ((Int64Ranged & 1) == 0
      && !-[BTSmartRoutingDaemon _bluetoothProductIDNoUTP:](self, "_bluetoothProductIDNoUTP:", v94))
    {
      id v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_wxDevices, "objectForKeyedSubscript:", v5));

      if (v48)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing, one bud scenario check on already known device.");
        }

        v56 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_wxDevices,  "objectForKeyedSubscript:",  v5));
        v57 = (void *)objc_claimAutoreleasedReturnValue([v56 bleDevice]);
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v57 advertisementFields]);
        uint64_t v59 = CFDictionaryGetInt64Ranged(v58, @"hsStatus", 0LL, 0xFFFFFFFFLL, 0LL);

        if ((v59 & 0x100) != 0 && (Int64Ranged & 0x100) == 0)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing, No UTP detected for both primary / secondary buds, back off.");
          }

          goto LABEL_151;
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](self->_wxDevices, "setObject:forKeyedSubscript:", v101, v5);
      }

      else
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing, one bud Wx device.");
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](self->_wxDevices, "setObject:forKeyedSubscript:", v101, v5);
        -[CUCoalescer trigger](self->_evaluatorCoalescer, "trigger");
      }

LABEL_79:
      uint64_t v25 = "?";
      goto LABEL_80;
    }

    if (v24 <= 28943)
    {
      if (v24 > 28935)
      {
        if (v24 == 28936)
        {
          uint64_t v25 = "AppleTV6,2";
          goto LABEL_80;
        }

        if (v24 == 28943)
        {
          uint64_t v25 = "AudioAccessory1,1";
          goto LABEL_80;
        }

        goto LABEL_79;
      }

      if (v24 == 21760)
      {
        uint64_t v25 = "Device1,21760";
        goto LABEL_80;
      }

      if (v24 != 28420) {
        goto LABEL_79;
      }
      uint64_t v25 = "AppleTV5,3";
    }

    else
    {
      if (v24 <= 29714)
      {
        if (v24 == 28944)
        {
          uint64_t v25 = "AudioAccessory1,2";
          goto LABEL_80;
        }

        if (v24 == 29455)
        {
          uint64_t v25 = "AppleTV11,2";
          goto LABEL_80;
        }

        goto LABEL_79;
      }

      if (v24 == 29715)
      {
        uint64_t v25 = "AudioAccessory5,1";
        goto LABEL_80;
      }

      if (v24 == 65533)
      {
        uint64_t v25 = "HeGn";
        goto LABEL_80;
      }

      if (v24 != 65534) {
        goto LABEL_79;
      }
      uint64_t v25 = "ApGn";
    }

  if (*(_BYTE *)(v21 + 425))
  {
    id v40 = 3LL;
  }

  else if (*(_BYTE *)(v21 + 464))
  {
    id v40 = 1LL;
  }

  else
  {
    id v40 = 2 * *(unsigned __int8 *)(v21 + 426);
  }

  [(id)v21 _updateAudioRoute:v40 withUUID:v14];
}

                *((_DWORD *)v69 + 6) = 0;
                goto LABEL_80;
              }
            }

            if (-[BTSmartRoutingDaemon _bluetoothProductIDNoEarDetect:](self, "_bluetoothProductIDNoEarDetect:", v60))
            {
              if (dword_100234408 <= 30
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFoundforTVOS:]",  30LL,  "Evaluator: skip, show bulletin only once for headset that doesn't support IED");
              }

              goto LABEL_79;
            }
          }

              __break(1u);
LABEL_80:
              swift_once(&qword_100234C20, sub_10018A978);
            }

            uint64_t v66 = qword_10023DFC0;
            uint64_t v67 = sub_100098CD8((uint64_t *)&unk_100234E00);
            uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
            *(_OWORD *)(v68 + 16) = xmmword_1001A5EA0;
            uint64_t v69 = v160;
            int v70 = [v69 description];
            int v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
            v73 = v72;

            *(void *)(v68 + 56) = &type metadata for String;
            *(void *)(v68 + 64) = sub_10009914C();
            *(void *)(v68 + 32) = v71;
            *(void *)(v68 + 40) = v73;
            os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v66,  "CloudSync: addDeviceSupportInformation: %@",  42LL,  2LL,  v68);
            swift_bridgeObjectRelease(v68);
            __int128 v74 = &selRef__inCaseLidClosed_;
            __int128 v75 = [v69 bluetoothAddress];
            __int128 v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            id v78 = v77;

            swift_bridgeObjectRelease(v78);
            id v79 = HIBYTE(v78) & 0xF;
            if ((v78 & 0x2000000000000000LL) == 0) {
              id v79 = v76 & 0xFFFFFFFFFFFFLL;
            }
            if (!v79) {
              goto LABEL_53;
            }
            id v80 = [v69 bluetoothAddress];
            id v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
            id v83 = v82;

            if (v81 == 0xD000000000000011LL && v83 == 0x80000001001CCC20LL)
            {
              swift_bridgeObjectRelease(0x80000001001CCC20LL);
              goto LABEL_53;
            }

            id v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
            swift_bridgeObjectRelease(v83);
            if ((v84 & 1) == 0)
            {
              v102 = sub_1000AE6C8();
              v103 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
              if ((_DWORD)v103)
              {
                v104 = sub_10013A76C();
                v105 = v139;
                if (qword_100234BC8 != -1) {
                  swift_once(&qword_100234BC8, sub_1000E72E4);
                }
                v106 = sub_100098D58(v15, (uint64_t)qword_10023DF00);
                (*(void (**)(uint64_t, uint64_t, uint64_t))&v29->ncmds)(v5, v106, v15);
                v160 = sub_100138AC4(v5);
                swift_release(v104);
                (*(void (**)(uint64_t, uint64_t))&v29->cpusubtype)(v5, v15);
              }

              else
              {
                v107 = static os_log_type_t.error.getter(v103);
                v105 = v139;
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                v160 = _swiftEmptyArrayStorage;
                os_log(_:dso:log:_:_:)( v107,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  v133);
              }

              swift_release(v102);
              v108 = v160[2];
              if (v108)
              {
                v109 = (char *)v160
                     + ((*(unsigned __int8 *)(v105 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
                v110 = *(void *)(v105 + 72);
                swift_bridgeObjectRetain(v160);
                v111 = v146;
                while (1)
                {
                  sub_1000A7C90((uint64_t)v109, v111, type metadata accessor for DeviceSupportInformationRecord);
                  v112 = (uint64_t *)(v111 + *(int *)(v147 + 24));
                  v114 = *v112;
                  v113 = (void *)v112[1];
                  v115 = [v69 v74[402]];
                  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
                  v118 = v117;

                  if (v114 == v116 && v113 == v118)
                  {
                    swift_bridgeObjectRelease(v160);
                    goto LABEL_74;
                  }

                  v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v113, v116, v118, 0LL);
                  swift_bridgeObjectRelease(v118);
                  if ((v120 & 1) != 0) {
                    break;
                  }
                  v111 = v146;
                  sub_1000A7CD4(v146, type metadata accessor for DeviceSupportInformationRecord);
                  v109 += v110;
                  --v108;
                  __int128 v74 = &selRef__inCaseLidClosed_;
                  if (!v108)
                  {
                    swift_bridgeObjectRelease(v160);
                    v105 = v139;
                    goto LABEL_71;
                  }
                }

                v113 = v160;
LABEL_74:
                swift_bridgeObjectRelease(v113);
                v122 = v138;
                sub_1000C998C(v146, v138, type metadata accessor for DeviceSupportInformationRecord);
                v105 = v139;
                v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
                v123 = v122;
                v124 = 0LL;
              }

              else
              {
LABEL_71:
                v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56);
                v122 = v138;
                v123 = v138;
                v124 = 1LL;
              }

              v125 = v147;
              v121(v123, v124, 1LL, v147);
              v126 = v148;
              swift_bridgeObjectRelease(v160);
              v127 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v122, 1LL, v125);
              v128 = v122;
              v129 = v127;
              sub_100099358(v128, &qword_100235828);
              v130 = sub_1000AE6C8();
              if (v129 == 1)
              {
                swift_unknownObjectWeakInit(aBlock, v126);
                v131 = v134;
                swift_retain(v134);
                sub_1001724DC(v69, v130, (uint64_t)aBlock, (uint64_t)v133, v131);
                swift_release(v131);

                swift_release(v130);
                return swift_unknownObjectWeakDestroy(aBlock);
              }

              swift_unknownObjectWeakInit(aBlock, v126);
              v132 = v134;
              swift_retain(v134);
              sub_100172524(v69, v130, (uint64_t)aBlock, (uint64_t)v133, v132);
              swift_release(v132);

              swift_unknownObjectWeakDestroy(aBlock);
              v101 = v130;
            }

            else
            {
LABEL_53:
              id v85 = v148;
              id v86 = *(void **)&v148[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
              id v87 = (void *)swift_allocObject(&unk_10020B710, 40LL, 7LL);
              id v88 = (uint64_t)v133;
              v87[2] = v69;
              v87[3] = v88;
              id v89 = v134;
              v87[4] = v134;
              aBlock[4] = sub_1000C9598;
              v163 = v87;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256LL;
              aBlock[2] = sub_1000F2C54;
              aBlock[3] = &unk_10020B728;
              id v90 = _Block_copy(aBlock);
              id v91 = v69;
              id v92 = v86;
              id v93 = swift_retain(v89);
              id v94 = v140;
              static DispatchQoS.unspecified.getter(v93);
              v161 = _swiftEmptyArrayStorage;
              v95 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v96 = sub_100098CD8((uint64_t *)&unk_100235790);
              v97 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
              v98 = v143;
              v99 = v96;
              v100 = v145;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v161, v99, v97, v145, v95);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v94, v98, v90);
              _Block_release(v90);

              (*(void (**)(char *, uint64_t))(v144 + 8))(v98, v100);
              (*(void (**)(char *, uint64_t))(v141 + 8))(v94, v142);
              v101 = (uint64_t)v163;
            }

            return swift_release(v101);
          }
        }
      }
    }

              __break(1u);
LABEL_80:
              swift_once(&qword_100234C20, sub_10018A978);
            }

            uint64_t v66 = qword_10023DFC0;
            uint64_t v67 = sub_100098CD8((uint64_t *)&unk_100234E00);
            uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
            *(_OWORD *)(v68 + 16) = xmmword_1001A5EA0;
            uint64_t v69 = v160;
            int v70 = [v69 description];
            int v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
            v73 = v72;

            *(void *)(v68 + 56) = &type metadata for String;
            *(void *)(v68 + 64) = sub_10009914C();
            *(void *)(v68 + 32) = v71;
            *(void *)(v68 + 40) = v73;
            os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v66,  "CloudSync: addDeviceMagicSettings: %@",  37LL,  2LL,  v68);
            swift_bridgeObjectRelease(v68);
            __int128 v74 = &selRef__inCaseLidClosed_;
            __int128 v75 = [v69 bluetoothAddress];
            __int128 v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            id v78 = v77;

            swift_bridgeObjectRelease(v78);
            id v79 = HIBYTE(v78) & 0xF;
            if ((v78 & 0x2000000000000000LL) == 0) {
              id v79 = v76 & 0xFFFFFFFFFFFFLL;
            }
            if (!v79) {
              goto LABEL_53;
            }
            id v80 = [v69 bluetoothAddress];
            id v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
            id v83 = v82;

            if (v81 == 0xD000000000000011LL && v83 == 0x80000001001CCC20LL)
            {
              swift_bridgeObjectRelease(0x80000001001CCC20LL);
              goto LABEL_53;
            }

            id v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
            swift_bridgeObjectRelease(v83);
            if ((v84 & 1) == 0)
            {
              v102 = sub_1000AE6C8();
              v103 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
              if ((_DWORD)v103)
              {
                v104 = sub_10013A76C();
                v105 = v139;
                if (qword_100234B70 != -1) {
                  swift_once(&qword_100234B70, sub_1000CAF84);
                }
                v106 = sub_100098D58(v15, (uint64_t)qword_10023DD70);
                (*(void (**)(uint64_t, uint64_t, uint64_t))&v29->ncmds)(v5, v106, v15);
                v160 = sub_100138A68(v5);
                swift_release(v104);
                (*(void (**)(uint64_t, uint64_t))&v29->cpusubtype)(v5, v15);
              }

              else
              {
                v107 = static os_log_type_t.error.getter(v103);
                v105 = v139;
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                v160 = _swiftEmptyArrayStorage;
                os_log(_:dso:log:_:_:)( v107,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  v133);
              }

              swift_release(v102);
              v108 = v160[2];
              if (v108)
              {
                v109 = (char *)v160
                     + ((*(unsigned __int8 *)(v105 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
                v110 = *(void *)(v105 + 72);
                swift_bridgeObjectRetain(v160);
                v111 = v146;
                while (1)
                {
                  sub_1000A7C90((uint64_t)v109, v111, type metadata accessor for MagicPairingSettingsRecord);
                  v112 = (uint64_t *)(v111 + *(int *)(v147 + 24));
                  v114 = *v112;
                  v113 = (void *)v112[1];
                  v115 = [v69 v74[402]];
                  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
                  v118 = v117;

                  if (v114 == v116 && v113 == v118)
                  {
                    swift_bridgeObjectRelease(v160);
                    goto LABEL_74;
                  }

                  v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v113, v116, v118, 0LL);
                  swift_bridgeObjectRelease(v118);
                  if ((v120 & 1) != 0) {
                    break;
                  }
                  v111 = v146;
                  sub_1000A7CD4(v146, type metadata accessor for MagicPairingSettingsRecord);
                  v109 += v110;
                  --v108;
                  __int128 v74 = &selRef__inCaseLidClosed_;
                  if (!v108)
                  {
                    swift_bridgeObjectRelease(v160);
                    v105 = v139;
                    goto LABEL_71;
                  }
                }

                v113 = v160;
LABEL_74:
                swift_bridgeObjectRelease(v113);
                v122 = v138;
                sub_1000C998C(v146, v138, type metadata accessor for MagicPairingSettingsRecord);
                v105 = v139;
                v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
                v123 = v122;
                v124 = 0LL;
              }

              else
              {
LABEL_71:
                v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56);
                v122 = v138;
                v123 = v138;
                v124 = 1LL;
              }

              v125 = v147;
              v121(v123, v124, 1LL, v147);
              v126 = v148;
              swift_bridgeObjectRelease(v160);
              v127 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v122, 1LL, v125);
              v128 = v122;
              v129 = v127;
              sub_100099358(v128, (uint64_t *)&unk_100235810);
              v130 = sub_1000AE6C8();
              if (v129 == 1)
              {
                swift_unknownObjectWeakInit(aBlock, v126);
                v131 = v134;
                swift_retain(v134);
                sub_10017BEA8(v69, v130, (uint64_t)aBlock, (uint64_t)v133, v131);
                swift_release(v131);

                swift_release(v130);
                return swift_unknownObjectWeakDestroy(aBlock);
              }

              swift_unknownObjectWeakInit(aBlock, v126);
              v132 = v134;
              swift_retain(v134);
              sub_10017BEF0(v69, v130, (uint64_t)aBlock, (uint64_t)v133, v132);
              swift_release(v132);

              swift_unknownObjectWeakDestroy(aBlock);
              v101 = v130;
            }

            else
            {
LABEL_53:
              id v85 = v148;
              id v86 = *(void **)&v148[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
              id v87 = (void *)swift_allocObject(&unk_10020B1C0, 40LL, 7LL);
              id v88 = (uint64_t)v133;
              v87[2] = v69;
              v87[3] = v88;
              id v89 = v134;
              v87[4] = v134;
              aBlock[4] = sub_1000C93F8;
              v163 = v87;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256LL;
              aBlock[2] = sub_1000F2C54;
              aBlock[3] = &unk_10020B1D8;
              id v90 = _Block_copy(aBlock);
              id v91 = v69;
              id v92 = v86;
              id v93 = swift_retain(v89);
              id v94 = v140;
              static DispatchQoS.unspecified.getter(v93);
              v161 = _swiftEmptyArrayStorage;
              v95 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v96 = sub_100098CD8((uint64_t *)&unk_100235790);
              v97 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
              v98 = v143;
              v99 = v96;
              v100 = v145;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v161, v99, v97, v145, v95);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v94, v98, v90);
              _Block_release(v90);

              (*(void (**)(char *, uint64_t))(v144 + 8))(v98, v100);
              (*(void (**)(char *, uint64_t))(v141 + 8))(v94, v142);
              v101 = (uint64_t)v163;
            }

            return swift_release(v101);
          }
        }
      }
    }

        v131 = static os_log_type_t.default.getter(v26);
        if (qword_100234C20 != -1) {
          swift_once(&qword_100234C20, sub_10018A978);
        }
        os_log(_:dso:log:_:_:)( v131,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Direct sound profile record cloud fetch",  50LL,  2LL,  _swiftEmptyArrayStorage);
        v132 = sub_1000AE6C8();
        id v83 = (void *)swift_allocObject(&unk_10020ACE8, 40LL, 7LL);
        v83[2] = v18;
        v83[3] = a2;
        v83[4] = a3;
        v133 = v18;
        swift_retain(a3);
        sub_100159E08((uint64_t)sub_1000C9150, (uint64_t)v83);

        swift_release(v132);
LABEL_82:
        v118 = v83;
LABEL_83:
        swift_release(v118);
        return;
      }

      v119 = static os_log_type_t.default.getter(v95);
      v120 = qword_10023DFC0;
      v121 = swift_allocObject(v41, 72LL, 7LL);
      v122 = (void *)v121;
      *(_OWORD *)(v121 + 16) = v156;
      v123 = *(void *)v20;
      v124 = v152;
      if (*(void *)(*(void *)v20 + 16LL))
      {
        v126 = *(void *)(v123 + 32);
        v125 = *(void *)(v123 + 40);
        v122[7] = &type metadata for String;
        v122[8] = v90;
        v127 = swift_bridgeObjectRetain(v125);
        if (!v127)
        {
LABEL_76:
          v126 = 0LL;
          v127 = 0xE000000000000000LL;
        }

        v122[4] = v126;
        v122[5] = v127;
        os_log(_:dso:log:_:_:)( v119,  &_mh_execute_header,  v120,  "CloudSync: Connected device %@ does not belong to current user. SoundProfileRecord not fetched.",  95LL,  2LL,  v122);
        swift_bridgeObjectRelease(v122);
        v128 = sub_10009E7C0();
        v129 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v128, 0LL, 0LL);
        *v130 = 3;
        v124(0LL, v129);
        swift_errorRelease(v129);

        return;
      }

      *(void *)(v121 + 56) = &type metadata for String;
      *(void *)(v121 + 64) = v90;
      goto LABEL_76;
    }

    if (v53 >= v140) {
      goto LABEL_78;
    }
    id v54 = *(void *)(v139 + 8 * v53);
    id v55 = v51 + 1;
    if (!v54)
    {
      id v55 = v51 + 2;
      if (v51 + 2 >= v140) {
        goto LABEL_78;
      }
      id v54 = *(void *)(v139 + 8 * v55);
      if (!v54)
      {
        id v55 = v51 + 3;
        if (v51 + 3 >= v140) {
          goto LABEL_78;
        }
        id v54 = *(void *)(v139 + 8 * v55);
        if (!v54)
        {
          v56 = v51 + 4;
          if (v51 + 4 >= v140)
          {
LABEL_78:
            swift_bridgeObjectRelease(v25);
            __int128 v26 = swift_release(v148);
            goto LABEL_79;
          }

          id v54 = *(void *)(v139 + 8 * v56);
          if (!v54)
          {
            while (1)
            {
              id v55 = v56 + 1;
              if (__OFADD__(v56, 1LL)) {
                goto LABEL_89;
              }
              if (v55 >= v140) {
                goto LABEL_78;
              }
              id v54 = *(void *)(v139 + 8 * v55);
              ++v56;
              if (v54) {
                goto LABEL_33;
              }
            }
          }

          id v55 = v51 + 4;
        }
      }
    }

          __int128 v13 = 0LL;
LABEL_38:
          if ((v8 & 1) != 0) {
            goto LABEL_61;
          }
LABEL_39:
          if (v13 == a1) {
            return 0LL;
          }
          goto LABEL_63;
        }

        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }

      __int128 v13 = (v6 - 48);
      if (v8 != 1)
      {
        __int128 v13 = 10LL * (v6 - 48) + (BYTE1(v6) - 48);
        __int128 v20 = v8 - 2;
        if (v8 != 2)
        {
          __int128 v21 = (unsigned __int8 *)v44 + 2;
          while (1)
          {
            __int128 v22 = *v21 - 48;
            if (v22 > 9) {
              goto LABEL_34;
            }
            if (!is_mul_ok(v13, 0xAuLL)) {
              goto LABEL_34;
            }
            uint64_t v15 = __CFADD__(10 * v13, v22);
            __int128 v13 = 10 * v13 + v22;
            if (v15) {
              goto LABEL_34;
            }
            LOBYTE(v_Block_object_dispose(va, 8) = 0;
            ++v21;
            if (!--v20) {
              goto LABEL_38;
            }
          }
        }
      }
    }

LABEL_80:
    id v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v25));
  }

  v28[6] = v16;
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  7LL));
  CUMetricsLog(@"com.apple.AudioAccessory.MuteControlMetrics", v26);

  if (v23) {
}
  }

        int v72 = v118;
        sub_1000E6164((uint64_t)v123, (uint64_t)v118);
        swift_beginAccess(v68, v127, 33LL, 0LL);
        sub_1000E622C((uint64_t)v72, v68);
        swift_endAccess(v127);
        goto LABEL_81;
      }

      sub_100099358((uint64_t)v26, (uint64_t *)&unk_100234E10);
      (*(void (**)(_BYTE *, uint64_t))(v119 + 8))(v71, v4);
    }

    sub_100099358((uint64_t)v11, &qword_100235DF0);
    int v70 = (uint64_t)v122;
    goto LABEL_80;
  }

  uint64_t v58 = static os_log_type_t.info.getter(v29);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v59 = qword_10023DFC8;
  int v60 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v61 = swift_allocObject(v60, 72LL, 7LL);
  *(_OWORD *)(v61 + 16) = xmmword_1001A5EA0;
  uint64_t v62 = a1;
  uint64_t v63 = [v62 description];
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v66 = v65;

  *(void *)(v61 + 56) = &type metadata for String;
  *(void *)(v61 + 64) = sub_10009914C();
  *(void *)(v61 + 32) = v64;
  *(void *)(v61 + 40) = v66;
  os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v59, "No change in updated device: %@", 31LL, 2LL, v61);
  return swift_bridgeObjectRelease(v61);
}

void sub_100015BF8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v23 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (v11)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 40);
    uint64_t v13 = v12;
    if (v12 - 1 <= 2) {
      uint64_t v13 = dword_1001A5C90[v12 - 1];
    }
    id v14 = v23;
    if (dword_100234330 > 30) {
      goto LABEL_16;
    }
    if (dword_100234330 == -1)
    {
      int v19 = _LogCategory_Initialize(&dword_100234330, 30LL);
      id v14 = v23;
      if (!v19)
      {
LABEL_16:
        id v16 = *(void **)(a1 + 32);
        uint64_t v17 = v13;
        id v18 = v14;
        goto LABEL_17;
      }

      unsigned int v12 = *(_DWORD *)(a1 + 40);
    }

    if (v12 > 6) {
      uint64_t v15 = "?";
    }
    else {
      uint64_t v15 = (&off_1002069E8)[v12];
    }
    else {
      __int128 v20 = (&off_100206950)[(int)v13];
    }
    LogPrintF( &dword_100234330,  "-[AAServicesDaemon _updateMuteAction:auditToken:bundleIdentifier:]_block_invoke",  30LL,  "Mute control: muteAction override: %s --> %s, process banner request returned with error: %@",  v15,  v20,  v11);
    id v14 = v23;
    goto LABEL_16;
  }

  id v16 = *(void **)(a1 + 32);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  id v18 = v23;
LABEL_17:
  [v16 _submitMetricsForMuteAction:v17 auditTokenBundleID:v18 appName:v9 appBundleID:v10];
  uint64_t v21 = *(void *)(a1 + 32);
  __int128 v22 = *(void **)(v21 + 176);
  *(void *)(v21 + 176) = 0LL;
}

id sub_100015DC4(uint64_t a1)
{
  if (dword_100234330 <= 30 && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL))) {
    LogPrintF( &dword_100234330,  "-[AAServicesDaemon _avSystemControllerServerReset]_block_invoke",  30LL,  "received AVSystemController_ServerConnectionDiedNotification");
  }
  [*(id *)(a1 + 32) _deregisterFromAVSystemControllerStateNotifications];
  return [*(id *)(a1 + 32) _registerForAVSystemControllerStateNotifications];
}

void sub_100016790( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000167C4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234330 > 90) {
      goto LABEL_6;
    }
    if (dword_100234330 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234330, 90LL))
      {
LABEL_6:
        uint64_t result = *(void *)(v2 + 32);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL));
        }
        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection audioRoutingControlActivate:completion:]_block_invoke",  90LL,  "### Audio Routing Control Activate failed: %{error}",  v1);
    goto LABEL_6;
  }

  return result;
}

uint64_t sub_1000169A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100016AF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100016B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v2)
  {
    unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL);
    return v3();
  }

  if (dword_100234330 <= 90)
  {
    if (dword_100234330 != -1)
    {
LABEL_4:
      LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection activeHRMSessionChanged:hrmState:completion:]_block_invoke",  90LL,  "### _handleHRMSessionChanged failed %{error}",  v2);
      goto LABEL_7;
    }

    if (_LogCategory_Initialize(&dword_100234330, 90LL))
    {
      uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      goto LABEL_4;
    }
  }

LABEL_7:
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    unsigned int v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }

  return result;
}
}

  return v11;
}

  [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
LABEL_10:
}

  if (!(_DWORD)v124) {
    return;
  }
LABEL_14:
  swift_bridgeObjectRelease(*(void *)(v30 + v31[15] + 8));
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v30 + v31[16], v119);
}

  id v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

  unsigned int v12 = sub_10018BFF4(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

void sub_100016DDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100016E10(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234330 > 90) {
      goto LABEL_6;
    }
    if (dword_100234330 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234330, 90LL))
      {
LABEL_6:
        uint64_t result = *(void *)(v2 + 32);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL));
        }
        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection audioSessionControlActivate:completion:]_block_invoke",  90LL,  "### Audio Control Activate failed: %{error}",  v1);
    goto LABEL_6;
  }

  return result;
}

void sub_1000170D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100017110(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234330 <= 90)
  {
    if (dword_100234330 != -1) {
      return LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection audioSessionControlUpdate:]_block_invoke",  90LL,  "### Audio Control Update failed: %{error}",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234330, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection audioSessionControlUpdate:]_block_invoke",  90LL,  "### Audio Control Update failed: %{error}",  v1);
    }
  }

  return result;
}

void sub_100017340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100017370(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234330 <= 90)
  {
    if (dword_100234330 != -1) {
      return LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection setMuteAction:auditToken:bundleIdentifier:]_block_invoke",  90LL,  "### Set mute action failed: %{error}",  v1);
    }
    uint64_t v2 = result;
    uint64_t result = _LogCategory_Initialize(&dword_100234330, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection setMuteAction:auditToken:bundleIdentifier:]_block_invoke",  90LL,  "### Set mute action failed: %{error}",  v1);
    }
  }

  return result;
}

void sub_10001769C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000176D4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234330 > 90) {
      goto LABEL_6;
    }
    if (dword_100234330 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234330, 90LL))
      {
LABEL_6:
        uint64_t result = *(void *)(v2 + 32);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL));
        }
        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection deviceManagerActivate:completion:]_block_invoke",  90LL,  "### AADeviceManager Activate failed: %{error}",  v1);
    goto LABEL_6;
  }

  return result;
}

void sub_100017794(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (dword_100234330 <= 30 && (dword_100234330 != -1 || _LogCategory_Initialize(&dword_100234330, 30LL))) {
    LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection deviceManagerActivate:completion:]_block_invoke_2",  30LL,  "reporting device: %@",  v5,  v6);
  }
  [*(id *)(a1 + 32) deviceManagerReportDeviceFound:v5];
}

void sub_100017A00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100017A38(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234330 > 90) {
      goto LABEL_6;
    }
    if (dword_100234330 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234330, 90LL))
      {
LABEL_6:
        uint64_t result = *(void *)(v2 + 32);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL));
        }
        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection deviceManagerUpdate:completion:]_block_invoke",  90LL,  "### AADeviceManager Activate failed: %{error}",  v1);
    goto LABEL_6;
  }

  return result;
}

void sub_100017D48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100017D7C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234330 > 90) {
      goto LABEL_6;
    }
    if (dword_100234330 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234330, 90LL))
      {
LABEL_6:
        uint64_t result = *(void *)(v2 + 32);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL));
        }
        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection deviceManagerSendDeviceConfig:identifier:completion:]_block_invoke",  90LL,  "### AADeviceManager send device config failed: %{error}",  v1);
    goto LABEL_6;
  }

  return result;
}

uint64_t sub_100017E3C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100018188(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100234330 <= 30)
  {
    if (dword_100234330 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100234330, 30LL), (_DWORD)result)) {
      uint64_t result = LogPrintF( &dword_100234330,  "-[AAServicesXPCConnection _shouldSendXPCMessage]_block_invoke",  30,  "AAServicesXPCConnection[%#{pid}]: reset messages count %d,",  [*(id *)(*(void *)(v1 + 32) + 56) processIdentifier],  *(unsigned int *)(*(void *)(v1 + 32) + 8));
    }
  }

  *(_DWORD *)(*(void *)(v1 + 32) + 8LL) = 0;
  return result;
}

LABEL_6:
    self->builtInMicAudioDeviceID = a3;
  }

    self->builtInSpeakerAudioDeviceID = a3;
  }

  if ((int)[*(id *)(v3 + 1168) callIncomingUnconnected] >= 1
    && ![*(id *)(*(void *)(a1 + 40) + 144) callCountIncomingUnconnected])
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _callMonitorEnsureStarted]_block_invoke",  30LL,  "Incoming call ringtone stopped");
    }

    *(void *)(*(void *)(a1 + 40) + 912LL) = mach_absolute_time();
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 40) + 1168),  "setCallIncomingUnconnected:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 144), "callCountIncomingUnconnected"));
  return [*(id *)(a1 + 40) _update];
}

    self->_score = a3;
    -[BTSmartRoutingDaemon _sendTipiScoreUpdateToWx](self, "_sendTipiScoreUpdateToWx");
  }

  id v10 = objc_alloc_init(&OBJC_CLASS___CBDevice);
  -[CBDevice setIdentifier:](v10, "setIdentifier:", v6);

  smartRoutingController = self->_smartRoutingController;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100044678;
  v12[3] = &unk_100206080;
  v12[4] = self;
  -[CBController modifyDevice:settings:completion:]( smartRoutingController,  "modifyDevice:settings:completion:",  v10,  v8,  v12);
}

    objc_storeStrong((id *)&self->_localDeviceAudioCatogory, a3);
    smartRoutingWxDeviceMap = self->_smartRoutingWxDeviceMap;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100049BB4;
    v12[3] = &unk_100206D20;
    v12[4] = self;
    uint64_t v13 = v11;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( smartRoutingWxDeviceMap,  "enumerateKeysAndObjectsUsingBlock:",  v12);

    id v5 = v11;
  }
}

    self->hijackBackoffTicks = a3;
  }

    self->otherTipiAudioCategory = v4;
  }

    self->otherTipiDeviceMajorBuildVersion = a3;
    self->otherTipiDeviceMinorBuildVersion = a4;
  }

    self->_inUseBannerBackoffTick = a3;
  }

    self->_nearbyOutOfCaseTime = v4;
  }

    self->_nearbyProductID = v4;
  }

    self->_nearbyConnectedSourceCount = v4;
  }

    swift_release(v15);
  }

  unsigned int v12 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
    goto LABEL_41;
  }

  if (v12 >= v34) {
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(v33 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_23;
  }
  uint64_t v9 = v12 + 1;
  if (v12 + 1 >= v34) {
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(v33 + 8 * v9);
  if (v13) {
    goto LABEL_23;
  }
  uint64_t v9 = v12 + 2;
  if (v12 + 2 >= v34) {
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(v33 + 8 * v9);
  if (v13) {
    goto LABEL_23;
  }
  uint64_t v9 = v12 + 3;
  if (v12 + 3 >= v34) {
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(v33 + 8 * v9);
  if (v13) {
    goto LABEL_23;
  }
  id v14 = v12 + 4;
  if (v14 >= v34) {
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(v33 + 8 * v14);
  uint64_t v9 = v14;
  if (v13)
  {
LABEL_23:
    int v8 = (v13 - 1) & v13;
    id v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_37;
    }
    uint64_t v13 = *(void *)(v33 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }

          id v29 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
        }
      }

      id v33 = v31 + 4;
      if (v33 < v47)
      {
        id v32 = *(void *)(v40 + 8 * v33);
        if (v32)
        {
          uint64_t v13 = v33;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v13 = v33 + 1;
          if (__OFADD__(v33, 1LL)) {
            goto LABEL_28;
          }
          if (v13 >= v47) {
            return swift_release(v50);
          }
          id v32 = *(void *)(v40 + 8 * v13);
          ++v33;
          if (v32) {
            goto LABEL_22;
          }
        }
      }
    }

    return swift_release(v50);
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

    sub_1000A7CD4((uint64_t)v66, v78);
    v77 += v470;
    --v75;
  }

  while (v75);
  __int128 v74 = v426;
LABEL_15:
  swift_bridgeObjectRelease(v74);
  v111 = sub_10013BA34();
  uint64_t v66 = (char *)v111;
  uint64_t v69 = (uint64_t)v480;
  v463 = *(void *)(v111 + 16);
  if (v463)
  {
    v471 = (char *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    v112 = 0LL;
    uint64_t v50 = 0LL;
    v462 = (unint64_t)&v66[(*(unsigned __int8 *)(v464 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v464 + 80)];
    uint64_t v68 = (uint64_t)type metadata accessor for BTDeferredRecord;
    v458 = (unint64_t)"SoundProfileRecord";
    v459 = (NSString *)0x80000001001CABA0LL;
    v425 = (unint64_t)"ord with address: %@";
    v426 = 0x80000001001D2A80LL;
    v452 = "AudioAccessoryZone";
    v457 = (void *)0x80000001001CB4E0LL;
    v461 = v66;
    while (1)
    {
      if (v112 >= *((void *)v66 + 2))
      {
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        swift_once(&qword_100234C28, sub_10018A9E0);
        goto LABEL_3;
      }

      sub_1000A7C90(v462 + *(void *)(v464 + 72) * v112, (uint64_t)v61, type metadata accessor for BTDeferredRecord);
      v113 = [v471 isFirstUnlocked];
      v470 = v112;
      if ((_DWORD)v113)
      {
        v114 = sub_10013A76C();
        if (qword_100234B30 != -1) {
          swift_once(&qword_100234B30, sub_100094AFC);
        }
        v115 = v475;
        v116 = sub_100098D58(v475, (uint64_t)qword_10023DCC0);
        v117 = v473;
        v118 = (uint64_t)v465;
        (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v116, v115);
        v119 = sub_100139314( v118,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
        swift_release(v114);
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v118, v115);
        uint64_t v69 = (uint64_t)v480;
        v120 = v119[2];
        if (v120)
        {
LABEL_22:
          v121 = &v61[*(int *)(v474 + 28)];
          v122 = (uint64_t)v119
               + ((*(unsigned __int8 *)(v460 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v460 + 80));
          v123 = *(void *)(v460 + 72);
          swift_bridgeObjectRetain(v119);
          while (1)
          {
            sub_1000A7C90(v122, v69, type metadata accessor for DeviceRecord);
            v124 = (void *)(v69 + *(int *)(v479 + 24));
            v125 = v124[1];
            v126 = *((void *)v121 + 1);
            v127 = *v124 == *(void *)v121 && v125 == v126;
            if (v127) {
              break;
            }
            v128 = _stringCompareWithSmolCheck(_:_:expecting:)(*v124, v125, *(void *)v121, v126, 0LL);
            v129 = v69;
            v130 = v128;
            sub_1000A7CD4(v129, type metadata accessor for DeviceRecord);
            if ((v130 & 1) != 0) {
              goto LABEL_38;
            }
            v122 += v123;
            --v120;
            uint64_t v69 = (uint64_t)v480;
            if (!v120)
            {
              v469 = v50;
              v131 = swift_bridgeObjectRelease_n(v119, 2LL);
              goto LABEL_32;
            }
          }

          sub_1000A7CD4(v69, type metadata accessor for DeviceRecord);
LABEL_38:
          swift_bridgeObjectRelease_n(v119, 2LL);
          v133 = (uint64_t)v477;
          goto LABEL_40;
        }
      }

      else
      {
        v132 = static os_log_type_t.error.getter(v113);
        v119 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v132,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
        v120 = _swiftEmptyArrayStorage[2];
        if (v120) {
          goto LABEL_22;
        }
      }

      v469 = v50;
      v131 = swift_bridgeObjectRelease(v119);
LABEL_32:
      v133 = (uint64_t)v477;
      v134 = *((void *)v61 + 1);
      v135 = *((void *)v61 + 2);
      if (v134 == 0x6552656369766544LL && v135 == 0xEC00000064726F63LL
        || (v131 = _stringCompareWithSmolCheck(_:_:expecting:)( *((void *)v61 + 1),  *((void *)v61 + 2),  0x6552656369766544LL,  0xEC00000064726F63LL,  0LL),  (v131 & 1) != 0))
      {
        v136 = static os_log_type_t.default.getter(v131);
        v137 = qword_10023DFC8;
        v138 = swift_allocObject(v467, 72LL, 7LL);
        *(_OWORD *)(v138 + 16) = v466;
        v139 = v468;
        sub_1000A7C90((uint64_t)v61, v468, type metadata accessor for BTDeferredRecord);
        v140 = v139;
        v141 = v61;
        v142 = v474;
        v143 = String.init<A>(describing:)(v140, v474);
        v145 = v144;
        *(void *)(v138 + 56) = &type metadata for String;
        *(void *)(v138 + 64) = sub_10009914C();
        *(void *)(v138 + 32) = v143;
        *(void *)(v138 + 40) = v145;
        v146 = v473;
        os_log(_:dso:log:_:_:)( v136,  &_mh_execute_header,  v137,  "Remove deferred device record not found in cache anymore: %@",  60LL,  2LL,  v138);
        swift_bridgeObjectRelease(v138);
        v147 = sub_10013A76C();
        v148 = &v141[*(int *)(v142 + 28)];
        v149 = *(void *)v148;
        v150 = *((void *)v148 + 1);
        swift_bridgeObjectRetain(v150);
        v151 = v456;
        URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48))(v151, 1LL, v475);
        if ((_DWORD)result == 1) {
          goto LABEL_227;
        }
        v152 = v455;
        v153 = v475;
        (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v455, v151, v475);
        swift_bridgeObjectRetain(v135);
        v154 = v454;
        URL.appendingPathComponent(_:)(v134);
        swift_bridgeObjectRelease(v135);
        v155 = *(uint64_t (**)(char *, uint64_t))(v473 + 8);
        v156 = v155(v152, v153);
        __chkstk_darwin(v156);
        *(&v424 - 4) = v147;
        *(&v424 - 3) = v149;
        *(&v424 - 2) = v150;
        *(&v424 - 1) = (uint64_t)v154;
        uint64_t v50 = v469;
        OS_dispatch_queue.sync<A>(execute:)(&v481, sub_10018A6A0, &v424 - 6, &type metadata for Bool);
        swift_release(v147);
        v157 = v150;
LABEL_59:
        swift_bridgeObjectRelease(v157);
        v197 = v154;
        v198 = v153;
        goto LABEL_60;
      }

      uint64_t v50 = v469;
LABEL_40:
      v158 = [v471 isFirstUnlocked];
      if ((_DWORD)v158)
      {
        v159 = sub_10013A76C();
        if (qword_100234BC8 != -1) {
          swift_once(&qword_100234BC8, sub_1000E72E4);
        }
        v160 = v475;
        v161 = sub_100098D58(v475, (uint64_t)qword_10023DF00);
        v162 = v473;
        v163 = (uint64_t)v465;
        (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v161, v160);
        v164 = sub_100139314( v163,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
        swift_release(v159);
        (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v163, v160);
        v133 = (uint64_t)v477;
        v165 = v164[2];
        if (v165)
        {
LABEL_44:
          v166 = &v61[*(int *)(v474 + 28)];
          v167 = (uint64_t)v164
               + ((*(unsigned __int8 *)(v453 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v453 + 80));
          v168 = *(void *)(v453 + 72);
          swift_bridgeObjectRetain(v164);
          while (1)
          {
            sub_1000A7C90(v167, v133, type metadata accessor for DeviceSupportInformationRecord);
            v169 = (void *)(v133 + *(int *)(v476 + 24));
            v170 = v169[1];
            v171 = *((void *)v166 + 1);
            if (*v169 == *(void *)v166 && v170 == v171) {
              break;
            }
            v173 = _stringCompareWithSmolCheck(_:_:expecting:)(*v169, v170, *(void *)v166, v171, 0LL);
            v174 = v133;
            v175 = v173;
            sub_1000A7CD4(v174, type metadata accessor for DeviceSupportInformationRecord);
            if ((v175 & 1) != 0) {
              goto LABEL_65;
            }
            v167 += v168;
            --v165;
            v133 = (uint64_t)v477;
            if (!v165)
            {
              v176 = swift_bridgeObjectRelease_n(v164, 2LL);
              goto LABEL_54;
            }
          }

          sub_1000A7CD4(v133, type metadata accessor for DeviceSupportInformationRecord);
LABEL_65:
          swift_bridgeObjectRelease_n(v164, 2LL);
          goto LABEL_66;
        }
      }

      else
      {
        v177 = static os_log_type_t.error.getter(v158);
        v164 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v177,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
        v165 = _swiftEmptyArrayStorage[2];
        if (v165) {
          goto LABEL_44;
        }
      }

      v176 = swift_bridgeObjectRelease(v164);
LABEL_54:
      v178 = *((void *)v61 + 1);
      v179 = (NSString *)*((void *)v61 + 2);
      if (v178 == 0xD00000000000001ELL && v179 == v459
        || (v176 = _stringCompareWithSmolCheck(_:_:expecting:)( *((void *)v61 + 1),  *((void *)v61 + 2),  0xD00000000000001ELL,  v458 | 0x8000000000000000LL,  0LL),  (v176 & 1) != 0))
      {
        v469 = v50;
        v180 = static os_log_type_t.default.getter(v176);
        v181 = qword_10023DFC8;
        v182 = swift_allocObject(v467, 72LL, 7LL);
        *(_OWORD *)(v182 + 16) = v466;
        v183 = v468;
        sub_1000A7C90((uint64_t)v61, v468, type metadata accessor for BTDeferredRecord);
        v184 = v61;
        v185 = v474;
        v186 = String.init<A>(describing:)(v183, v474);
        v188 = v187;
        *(void *)(v182 + 56) = &type metadata for String;
        *(void *)(v182 + 64) = sub_10009914C();
        *(void *)(v182 + 32) = v186;
        *(void *)(v182 + 40) = v188;
        v189 = v473;
        os_log(_:dso:log:_:_:)( v180,  &_mh_execute_header,  v181,  "Remove deferred info record not found in cache anymore: %@",  58LL,  2LL,  v182);
        swift_bridgeObjectRelease(v182);
        v190 = sub_10013A76C();
        v191 = &v184[*(int *)(v185 + 28)];
        v193 = *(void *)v191;
        v192 = *((void *)v191 + 1);
        swift_bridgeObjectRetain(v192);
        v194 = v451;
        URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v189 + 48))(v194, 1LL, v475);
        if ((_DWORD)result == 1) {
          goto LABEL_228;
        }
        v195 = v450;
        v153 = v475;
        (*(void (**)(char *, char *, uint64_t))(v189 + 32))(v450, v194, v475);
        swift_bridgeObjectRetain(v179);
        v154 = v449;
        URL.appendingPathComponent(_:)(v178);
        swift_bridgeObjectRelease(v179);
        v155 = *(uint64_t (**)(char *, uint64_t))(v473 + 8);
        v196 = v155(v195, v153);
        __chkstk_darwin(v196);
        *(&v424 - 4) = v190;
        *(&v424 - 3) = v193;
        *(&v424 - 2) = v192;
        *(&v424 - 1) = (uint64_t)v154;
        uint64_t v50 = v469;
        OS_dispatch_queue.sync<A>(execute:)(&v481, sub_10018A6A0, &v424 - 6, &type metadata for Bool);
        swift_release(v190);
        v157 = v192;
        goto LABEL_59;
      }

void sub_100019804(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___BTSmartRoutingDaemon);
  uint64_t v2 = (void *)qword_100237210;
  qword_100237210 = (uint64_t)v1;
}

uint64_t sub_100019A08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100019A18(uint64_t a1)
{
}

void sub_100019A20(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _descriptionWithLevel:*(unsigned int *)(a1 + 48)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001A290(_Unwind_Exception *a1)
{
}

const char *sub_10001A2D4(unsigned int a1)
{
  if (a1 > 0xF) {
    return "?";
  }
  else {
    return off_1002079F0[a1];
  }
}

void sub_10001A2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  NSAppendPrintF(&obj, "    %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10001A344(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([a3 bleDevice]);
  NSAppendPrintF(&obj, "    %@\n", v4);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10001A3A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v47 = *(id *)(v5 + 40);
  NSAppendPrintF(&v47, "  -------------------------------  ");
  objc_storeStrong((id *)(v5 + 40), v47);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v46 = *(id *)(v6 + 40);
  NSAppendPrintF(&v46, "    %@\n", v4);
  objc_storeStrong((id *)(v6 + 40), v46);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v45 = *(id *)(v7 + 40);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceAddress]);
  NSAppendPrintF(&v45, "    Address: %@\n", v8);
  objc_storeStrong((id *)(v7 + 40), v45);

  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v9 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceName]);
  NSAppendPrintF(&obj, "    Name: %@\n", v10);
  objc_storeStrong((id *)(v9 + 40), obj);

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v43 = *(id *)(v11 + 40);
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceVersion]);
  NSAppendPrintF(&v43, "    Version: %@\n", v12);
  objc_storeStrong((id *)(v11 + 40), v43);

  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v15 = *(void **)(v13 + 40);
  id v14 = (id *)(v13 + 40);
  id v42 = v15;
  else {
    id v16 = "no";
  }
  NSAppendPrintF(&v42, "    InEar: %s\n", v16);
  objc_storeStrong(v14, v42);
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8LL);
  int v19 = *(void **)(v17 + 40);
  id v18 = (id *)(v17 + 40);
  id v41 = v19;
  unsigned int v20 = [v4 routingAction];
  if (v20 > 5) {
    uint64_t v21 = "?";
  }
  else {
    uint64_t v21 = off_100207BA8[v20];
  }
  NSAppendPrintF(&v41, "    BTAudioRoutingAction: %s\n", v21);
  objc_storeStrong(v18, v41);
  uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v24 = *(void **)(v22 + 40);
  id v23 = (id *)(v22 + 40);
  id v40 = v24;
  else {
    uint64_t v25 = "no";
  }
  NSAppendPrintF(&v40, "    Routed: %s\n", v25);
  objc_storeStrong(v23, v40);
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v39 = *(id *)(v26 + 40);
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v4 otherTipiDeviceBTAddress]);
  NSAppendPrintF(&v39, "    OtherAddress: %@\n", v27);
  objc_storeStrong((id *)(v26 + 40), v39);

  uint64_t v28 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v38 = *(id *)(v28 + 40);
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v4 otherTipiDeviceBTName]);
  NSAppendPrintF(&v38, "    OtherName: %@\n", v29);
  objc_storeStrong((id *)(v28 + 40), v38);

  uint64_t v30 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v37 = *(id *)(v30 + 40);
  id v31 = (void *)objc_claimAutoreleasedReturnValue([v4 otherTipiDeviceVersion]);
  NSAppendPrintF(&v37, "    OtherVersion: %@\n", v31);
  objc_storeStrong((id *)(v30 + 40), v37);

  uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v34 = *(void **)(v32 + 40);
  id v33 = (id *)(v32 + 40);
  id v36 = v34;
  else {
    id v35 = "no";
  }
  NSAppendPrintF(&v36, "    TipiHealingv2Eligible: %s\n", v35);
  objc_storeStrong(v33, v36);
}

void sub_10001A704(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 bleDevice]);
  NSAppendPrintF(&obj, "    %@\n", v4);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10001A768(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 lastSeenTime];
  if (v5 <= 0.0)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    double v6 = *(double *)(a1 + 40);
    [v4 lastSeenTime];
    uint64_t v8 = (v6 - v7);
  }

  [v4 reportTime];
  if (v9 <= 0.0)
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    double v10 = *(double *)(a1 + 40);
    [v4 reportTime];
    uint64_t v12 = (v10 - v11);
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v15 = *(void **)(v13 + 40);
  id v14 = (id *)(v13 + 40);
  id obj = v15;
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceAddress]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 name]);
  [v4 lastBatteryLevel];
  double v19 = v18;
  unsigned int v20 = (char *)[v4 lastBatteryType];
  else {
    uint64_t v21 = off_100207950[(void)(v20 - 1)];
  }
  NSAppendPrintF( &obj,  "    DA %@, Name '%@', Battery %.0f%% (%s), Seen %{dur}, Report %{dur}\n",  v16,  v17,  v19 * 100.0,  v21,  v8,  v12);
  objc_storeStrong(v14, obj);
}

id sub_10001A904(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_10001AD64(uint64_t a1)
{
  return [*(id *)(a1 + 32) _lowBatteryReset];
}

id sub_10001ADD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged];
}

id sub_10001AE44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sigTermReceived];
}

void sub_10001AE4C(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 1084LL)) {
      uint64_t v2 = "yes";
    }
    else {
      uint64_t v2 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke",  30LL,  "Smart Routing sending srCapable state : %s",  v2);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  double v6 = @"srCapable";
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 1084LL)));
  double v7 = v4;
  double v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v3 sendCloudKitMsg:@"smartRoutingCapable" args:v5];
}

void sub_10001AF98(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 1088LL);
  uint64_t state64 = 0LL;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  *(void *)(*(void *)(a1 + 32) + 110RandomBytes(&unk_1002371D8, 4LL) = state64 & 0xFFFFFFFFFFFFLL;
  *(void *)(*(void *)(a1 + 32) + 1096LL) = HIWORD(v3);
  uint64_t v4 = NSPrintF("%012llx", *(void *)(*(void *)(a1 + 32) + 1104LL));
  id v5 = objc_claimAutoreleasedReturnValue(v4);
  double v6 = (const char *)[v5 UTF8String];
  if (!v6) {
    double v6 = "";
  }
  uint64_t v7 = NSDataWithHex(v6, -1LL, 22LL, 0LL, 0LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = CUPrintNSDataAddress();
  double v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    double v11 = "no";
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1096LL);
    if (v12 == 10721) {
      uint64_t v13 = "yes";
    }
    else {
      uint64_t v13 = "no";
    }
    if (v12 == 328) {
      double v11 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_2",  30LL,  "Smart Routing disconnect notification from bluetoothd, wx address raw %@, parsed addr %@, reason %llu, Idle budswa p %s Hfp budswap %s",  v5,  v10,  v12,  v13,  v11);
  }

  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(v14 + 1096);
  if (v15)
  {
    if (v15 == 11818)
    {
      id v16 = *(void **)(v14 + 1120);
      if (!v16)
      {
        uint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v18 = *(void *)(a1 + 32);
        double v19 = *(void **)(v18 + 1120);
        *(void *)(v18 + 1120) = v17;

        id v16 = *(void **)(*(void *)(a1 + 32) + 1120LL);
      }

      [v16 addObject:v10];
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_2",  30LL,  "Add device %@ to the manual backoff list",  v10);
      }

      [*(id *)(*(void *)(a1 + 32) + 264) setObject:&off_100219050 forKeyedSubscript:v10];
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 1096);
    }

    if (v15 == 328)
    {
      if (*(_BYTE *)(v14 + 360))
      {
        uint64_t v25 = *(void **)(v14 + 264);
        if (!v25)
        {
          uint64_t v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v27 = *(void *)(a1 + 32);
          uint64_t v28 = *(void **)(v27 + 264);
          *(void *)(v27 + 264) = v26;

          uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 264LL);
        }

        [v25 setObject:&off_100219050 forKeyedSubscript:v10];
        goto LABEL_30;
      }
    }

    else if (v15 == 10721)
    {
      if (!*(void *)(v14 + 264))
      {
        unsigned int v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(void **)(v21 + 264);
        *(void *)(v21 + 264) = v20;
      }

      id v23 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      [*(id *)(*(void *)(a1 + 32) + 264) setObject:v24 forKeyedSubscript:v10];

LABEL_30:
      uint64_t v29 = *(void *)(a1 + 32);
      uint64_t v31 = *(void *)(v29 + 120);
      uint64_t v30 = (id *)(v29 + 120);
      if (!v31)
      {
        objc_storeStrong(v30, v10);
        [*(id *)(a1 + 32) _cacheBudswapInfo:v10];
        [*(id *)(a1 + 32) _budSwapDetectionStartTimer:v10];
      }

      goto LABEL_45;
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_2",  30LL,  "SmartRouting disconnect reason is NOT budswap.");
    }

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1184) objectForKey:v10]);

    if (v32) {
      [*(id *)(*(void *)(a1 + 32) + 1184) removeObjectForKey:v10];
    }
    id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getWxFWVersion:v10]);
    if (!*(void *)(*(void *)(a1 + 32) + 264LL))
    {
      id v34 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v35 = *(void *)(a1 + 32);
      id v36 = *(void **)(v35 + 264);
      *(void *)(v35 + 264) = v34;
    }

    if ([@"6A221" compare:v33 options:64] == (id)-1
      && [*(id *)(a1 + 32) _isAddDeviceToBackoffDueToDisconnect])
    {
      id v37 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
      id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      [*(id *)(*(void *)(a1 + 32) + 264) setObject:v38 forKeyedSubscript:v10];
    }

    else
    {
      [*(id *)(*(void *)(a1 + 32) + 264) setObject:&off_100219050 forKeyedSubscript:v10];
    }
  }

LABEL_45:
}

  id v55 = swift_release(v77);
  id v23 = v67;
  uint64_t v21 = static os_log_type_t.default.getter(v55);
  if (qword_100234C20 == -1) {
    goto LABEL_46;
  }
LABEL_50:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_46:
  v56 = qword_10023DFC0;
  v57 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
  *(_OWORD *)(v58 + 16) = v68;
  *(void *)(v58 + 56) = &type metadata for String;
  *(void *)(v58 + 64) = sub_10009914C();
  *(void *)(v58 + 32) = a4;
  *(void *)(v58 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v56, "CloudSync: remove Device with BT Address: %@", 44LL, 2LL, v58);
  swift_bridgeObjectRelease(v58);
  uint64_t v59 = v69;
  int v60 = sub_1000AE6C8();
  uint64_t v61 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v61 + 16, v59);
  swift_retain(v23);
  sub_10017245C(a4, a5, 0x6552656369766544LL, 0xEC00000064726F63LL, v60, v61, (uint64_t)v70, (uint64_t)v23);

  swift_release(v60);
  swift_release(v61);
  return swift_release(v23);
}

  id v54 = swift_release(v78);
  uint64_t v24 = v68;
  id v5 = (uint64_t)v66;
  uint64_t v22 = static os_log_type_t.default.getter(v54);
  if (qword_100234C20 == -1) {
    goto LABEL_46;
  }
LABEL_50:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_46:
  id v55 = qword_10023DFC0;
  v56 = sub_100098CD8((uint64_t *)&unk_100234E00);
  v57 = swift_allocObject(v56, 72LL, 7LL);
  *(_OWORD *)(v57 + 16) = v69;
  *(void *)(v57 + 56) = &type metadata for String;
  *(void *)(v57 + 64) = sub_10009914C();
  *(void *)(v57 + 32) = a4;
  *(void *)(v57 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v55, "CloudSync: removeDeviceSupportInformation: %@", 45LL, 2LL, v57);
  swift_bridgeObjectRelease(v57);
  uint64_t v58 = v70;
  uint64_t v59 = sub_1000AE6C8();
  int v60 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v60 + 16, v58);
  swift_retain(v24);
  sub_10017BE28(a4, a5, 0xD00000000000001ELL, v5 | 0x8000000000000000LL, v59, v60, (uint64_t)v71, (uint64_t)v24);

  swift_release(v59);
  swift_release(v60);
  return swift_release(v24);
}

  id v55 = swift_release(v77);
  id v23 = v67;
  uint64_t v21 = static os_log_type_t.default.getter(v55);
  if (qword_100234C20 == -1) {
    goto LABEL_46;
  }
LABEL_50:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_46:
  v56 = qword_10023DFC0;
  v57 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
  *(_OWORD *)(v58 + 16) = v68;
  *(void *)(v58 + 56) = &type metadata for String;
  *(void *)(v58 + 64) = sub_10009914C();
  *(void *)(v58 + 32) = a4;
  *(void *)(v58 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v56, "CloudSync: removeDeviceMagicSettings: %@", 40LL, 2LL, v58);
  swift_bridgeObjectRelease(v58);
  uint64_t v59 = v69;
  int v60 = sub_1000AE6C8();
  uint64_t v61 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v61 + 16, v59);
  swift_retain(v23);
  sub_100185CA8(a4, a5, 0x746553636967614DLL, 0xED000073676E6974LL, v60, v61, (uint64_t)v70, (uint64_t)v23);

  swift_release(v60);
  swift_release(v61);
  return swift_release(v23);
}

  __break(1u);
  return result;
}

  if (!(_DWORD)v222)
  {
LABEL_20:
    if ((_DWORD)v223) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }

  v151 = [v549 vendorID];
  if (!v151)
  {
    sub_1000D5630((uint64_t)v73, (uint64_t)v70);
    goto LABEL_52;
  }

  v152 = v151;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
  v154 = v153;

  swift_bridgeObjectRelease(v154);
  sub_1000D5630((uint64_t)v73, (uint64_t)v70);
  if (!v154)
  {
LABEL_52:
    sub_1000D5674((uint64_t)v70);
    sub_1000D5674((uint64_t)v73);
    goto LABEL_53;
  }

  v155 = [v549 vendorID];
  if (!v155)
  {
    v275 = *(void *)&v70[v546[14] + 8];
    swift_bridgeObjectRetain(v275);
    sub_1000D5674((uint64_t)v70);
    sub_1000D5674((uint64_t)v73);
    swift_bridgeObjectRelease(v275);
    goto LABEL_109;
  }

  v156 = v155;
  v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
  v159 = v158;

  v160 = &v70[v546[14]];
  v161 = *((void *)v160 + 1);
  v162 = (uint64_t)v537;
  if (v157 == *(void *)v160 && v159 == v161)
  {
    swift_bridgeObjectRetain(v159);
    sub_1000D5674((uint64_t)v70);
    sub_1000D5674((uint64_t)v73);
    swift_bridgeObjectRelease_n(v159, 2LL);
LABEL_53:
    v163 = v548;
    sub_1000D5630(v150, v548);
    v164 = v549;
    goto LABEL_54;
  }

  v284 = _stringCompareWithSmolCheck(_:_:expecting:)(v157, v159, *(void *)v160, v161, 0LL);
  swift_bridgeObjectRetain(v159);
  sub_1000D5674((uint64_t)v70);
  sub_1000D5674((uint64_t)v73);
  swift_bridgeObjectRelease_n(v159, 2LL);
  v163 = v548;
  sub_1000D5630(v150, v548);
  v164 = v549;
  if ((v284 & 1) == 0)
  {
LABEL_110:
    sub_1000D5674(v163);
    v184 = (uint64_t)v541;
    v185 = v545;
    v186 = v547;
LABEL_111:
    sub_1000D5630(v150, v186);
    v183 = v186;
LABEL_112:
    sub_1000D5674(v183);
LABEL_113:
    sub_1000D5630(v150, v185);
LABEL_114:
    sub_1000D5674(v185);
    v226 = v544;
LABEL_115:
    sub_1000D5630(v150, v226);
    v225 = v226;
LABEL_116:
    sub_1000D5674(v225);
    v245 = v543;
LABEL_117:
    v244 = (uint64_t)v538;
    sub_1000D5630(v150, v245);
    v243 = v245;
LABEL_118:
    sub_1000D5674(v243);
LABEL_119:
    sub_1000D5630(v150, v184);
LABEL_120:
    sub_1000D5674(v184);
LABEL_121:
    sub_1000D5630(v150, v162);
LABEL_122:
    sub_1000D5674(v162);
LABEL_123:
    sub_1000D5630(v150, v244);
LABEL_124:
    sub_1000D5674(v244);
LABEL_125:
    v276 = v542;
    sub_1000D5630(v150, v542);
LABEL_126:
    sub_1000D5674(v276);
LABEL_127:
    v277 = v540;
    sub_1000D5630(v150, v540);
LABEL_128:
    sub_1000D5674(v277);
LABEL_129:
    v278 = (uint64_t)v529;
    sub_1000D5630(v150, (uint64_t)v529);
LABEL_130:
    sub_1000D5674(v278);
LABEL_131:
    v279 = v534;
    sub_1000D5630(v150, v534);
LABEL_132:
    sub_1000D5674(v279);
LABEL_133:
    v280 = v531;
    sub_1000D5630(v150, v531);
LABEL_134:
    sub_1000D5674(v280);
LABEL_135:
    v281 = v528;
    sub_1000D5630(v150, v528);
LABEL_136:
    sub_1000D5674(v281);
LABEL_137:
    v282 = v527;
    sub_1000D5630(v150, v527);
LABEL_138:
    sub_1000D5674(v282);
LABEL_139:
    sub_1000D5630(v150, (uint64_t)v10);
LABEL_140:
    sub_1000D5674((uint64_t)v10);
LABEL_141:
    sub_1000D5630(v150, (uint64_t)v149);
LABEL_142:
    sub_1000D5674((uint64_t)v149);

    v101 = 1;
    return (id)(v101 & 1);
  }

void sub_10001B3CC(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_3",  30LL,  "Smart Routing BTAudioHALPlugin notification of ownership.");
  }
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000LL;
  double v11 = sub_100019A08;
  uint64_t v12 = sub_100019A18;
  id v13 = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 1152);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_10001B5D0;
  v7[3] = &unk_100206B10;
  void v7[4] = v2;
  v7[5] = &v8;
  [v3 enumerateKeysAndObjectsUsingBlock:v7];
  if (v9[5])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 184), "objectForKeyedSubscript:"));
    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) objectForKeyedSubscript:v9[5]]);
      if ([v5 audioStreamState] == 3)
      {
        int v6 = [*(id *)(*(void *)(a1 + 32) + 144) connectedCallCount];

        if (v6 >= 1)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_3",  30LL,  "Smart Routing MX is taking ownership, other side is with SCO, relinquish ownership.");
          }

          [*(id *)(a1 + 32) _relayConduitMessageSend:1 withOptions:&off_100218C10 andWxAddress:v9[5] andOtherAddress:0];
        }
      }

      else
      {
      }
    }
  }

  _Block_object_dispose(&v8, 8);
}

void sub_10001B5B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001B5D0(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v16 = a2;
  id v8 = a3;
  if (dword_100234408 <= 50 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 50LL)))
  {
    else {
      uint64_t v9 = "no";
    }
    else {
      uint64_t v10 = "no";
    }
    id v11 = [*(id *)(*(void *)(a1 + 32) + 1152) count];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
    if (v12) {
      id v13 = "yes";
    }
    else {
      id v13 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_4",  50LL,  "Device address %@ is inEar %s inEarDisabled %s %d in Tipi %s",  v16,  v9,  v10,  v11,  v13);
  }

  if ([v8 inEarDisabled])
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);

    if (v14) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    }
  }

  if ([v8 inEar])
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);

    if (v15)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
      *a4 = 1;
    }
  }
}

uint64_t sub_10001B76C(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 908LL);
  uint64_t state64 = 0LL;
  uint64_t result = notify_get_state(v2, &state64);
  uint64_t v4 = state64;
  if (dword_100234408 <= 30)
  {
    if (dword_100234408 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100234408, 30LL), (_DWORD)result))
    {
      id v5 = "yes";
      if (*(_BYTE *)(*(void *)(a1 + 32) + 904LL)) {
        int v6 = "yes";
      }
      else {
        int v6 = "no";
      }
      if (!v4) {
        id v5 = "no";
      }
      uint64_t result = LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_5",  30LL,  "Smart Routing ringer state changed: %s -> %s",  v6,  v5);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 90RandomBytes(&unk_1002371D8, 4LL) = v4 != 0;
  return result;
}

id sub_10001B834(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 1180LL);
  uint64_t state64 = 0LL;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    uint64_t v4 = "yes";
    if (v3) {
      id v5 = "no";
    }
    else {
      id v5 = "yes";
    }
    if (!v3) {
      uint64_t v4 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_6",  30LL,  "Smart Routing wireless splitter state changed: %s -> %s",  v5,  v4);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 1176LL) = v3 != 0;
  return [*(id *)(a1 + 32) _updateLocalAudioCategory:*(void *)(*(void *)(a1 + 32) + 480)];
}

void *sub_10001B8FC(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 600LL);
  uint64_t state64 = 0LL;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    uint64_t v4 = "no";
    if (v3) {
      uint64_t v4 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activate]_block_invoke_7",  30LL,  "TriangleRecovery: Received magnet link changed %s",  v4);
  }

  [*(id *)(*(void *)(a1 + 32) + 1168) setMagnetConnected:v3 != 0];
  uint64_t result = *(void **)(a1 + 32);
  if (result[107]) {
    return [result _checkTriangleRecovery];
  }
  return result;
}

void sub_10001BA20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0LL;

  [*(id *)(a1 + 32) _activityMonitorEnsureStopped];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 72);
  if (v5)
  {
    *(void *)(v4 + 72) = 0LL;
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon invalidate]_block_invoke",  30LL,  "BTSmartRoutingDaemon Invalidate");
  }
  int v6 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v6)
  {
    uint64_t v7 = v6;
    dispatch_source_cancel(v7);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 24);
    *(void *)(v8 + 24) = 0LL;
  }

  uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 128LL);
  if (v10)
  {
    id v11 = v10;
    dispatch_source_cancel(v11);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 128);
    *(void *)(v12 + 12_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 488);
  *(void *)(v14 + 48_Block_object_dispose(va, 8) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 496LL) = 0;
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(_DWORD *)(v16 + 500);
  if (v17 != -1)
  {
    notify_cancel(v17);
    *(_DWORD *)(*(void *)(a1 + 32) + 500LL) = -1;
    uint64_t v16 = *(void *)(a1 + 32);
  }

  uint64_t v18 = *(void **)(v16 + 504);
  if (v18)
  {
    double v19 = v18;
    dispatch_source_cancel(v19);
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void **)(v20 + 504);
    *(void *)(v20 + 504) = 0LL;
  }

  uint64_t v22 = *(void *)(a1 + 32);
  int v23 = *(_DWORD *)(v22 + 632);
  if (v23 != -1)
  {
    notify_cancel(v23);
    *(_DWORD *)(*(void *)(a1 + 32) + 632LL) = -1;
    uint64_t v22 = *(void *)(a1 + 32);
  }

  int v24 = *(_DWORD *)(v22 + 724);
  if (v24 != -1)
  {
    notify_cancel(v24);
    *(_DWORD *)(*(void *)(a1 + 32) + 72RandomBytes(&unk_1002371D8, 4LL) = -1;
    uint64_t v22 = *(void *)(a1 + 32);
  }

  uint64_t v25 = *(void **)(v22 + 1048);
  if (v25)
  {
    uint64_t v26 = v25;
    dispatch_source_cancel(v26);
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = *(void **)(v27 + 1048);
    *(void *)(v27 + 104_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v29 = *(void **)(*(void *)(a1 + 32) + 1232LL);
  if (v29)
  {
    uint64_t v30 = v29;
    dispatch_source_cancel(v30);
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = *(void **)(v31 + 1232);
    *(void *)(v31 + 1232) = 0LL;
  }

  id v33 = *(void **)(*(void *)(a1 + 32) + 392LL);
  if (v33)
  {
    id v34 = v33;
    dispatch_source_cancel(v34);
    uint64_t v35 = *(void *)(a1 + 32);
    id v36 = *(void **)(v35 + 392);
    *(void *)(v35 + 392) = 0LL;
  }

  uint64_t v37 = *(void *)(a1 + 32);
  id v38 = *(void **)(v37 + 1152);
  *(void *)(v37 + 1152) = 0LL;

  uint64_t v39 = *(void *)(a1 + 32);
  id v40 = *(void **)(v39 + 1192);
  *(void *)(v39 + 1192) = 0LL;

  uint64_t v41 = *(void *)(a1 + 32);
  id v42 = *(void **)(v41 + 968);
  *(void *)(v41 + 96_Block_object_dispose(va, 8) = 0LL;

  uint64_t v43 = *(void *)(a1 + 32);
  id v44 = *(void **)(v43 + 984);
  *(void *)(v43 + 984) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 1218LL) = 0;
  id v45 = *(void **)(*(void *)(a1 + 32) + 1344LL);
  if (v45)
  {
    id v46 = v45;
    dispatch_source_cancel(v46);
    uint64_t v47 = *(void *)(a1 + 32);
    id v48 = *(void **)(v47 + 1344);
    *(void *)(v47 + 1344) = 0LL;
  }

  [*(id *)(a1 + 32) _evaluatorEnsureStopped];
  [*(id *)(a1 + 32) _connectedDeviceMonitorEnsureStopped];
  [*(id *)(a1 + 32) _mediaRouteMonitorEnsureStopped];
  [*(id *)(a1 + 32) _nearbyInfoDiscoveryEnsureStopped];
  [*(id *)(a1 + 32) _pipeEnsureStopped];
  [*(id *)(a1 + 32) _powerMonitorEnsureStopped];
  [*(id *)(a1 + 32) _wxDiscoveryEnsureStopped];
  [*(id *)(a1 + 32) _TUMonitorEnsureStopped];
  id v57 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v57 removeObserver:*(void *)(a1 + 32) name:@"BTTotalIDSDeviceCountChanged" object:0];
  uint64_t v49 = *(void *)(a1 + 32);
  uint64_t v50 = *(void **)(v49 + 1392);
  *(void *)(v49 + 1392) = 0LL;

  [*(id *)(a1 + 32) _mediaRouteDiscoveryStopped];
  uint64_t v51 = *(void *)(a1 + 32);
  int v52 = *(_DWORD *)(v51 + 908);
  if (v52 != -1)
  {
    notify_cancel(v52);
    *(_DWORD *)(*(void *)(a1 + 32) + 908LL) = -1;
    uint64_t v51 = *(void *)(a1 + 32);
  }

  int v53 = *(_DWORD *)(v51 + 1180);
  if (v53 != -1)
  {
    notify_cancel(v53);
    *(_DWORD *)(*(void *)(a1 + 32) + 1180LL) = -1;
    uint64_t v51 = *(void *)(a1 + 32);
  }

  int v54 = *(_DWORD *)(v51 + 1088);
  if (v54 != -1)
  {
    notify_cancel(v54);
    *(_DWORD *)(*(void *)(a1 + 32) + 1088LL) = -1;
    uint64_t v51 = *(void *)(a1 + 32);
  }

  int v55 = *(_DWORD *)(v51 + 152);
  if (v55 != -1)
  {
    notify_cancel(v55);
    *(_DWORD *)(*(void *)(a1 + 32) + 152LL) = -1;
    uint64_t v51 = *(void *)(a1 + 32);
  }

  v56 = *(void **)(v51 + 1384);
  *(void *)(v51 + 1384) = 0LL;
}

LABEL_4:
  id v11 = 0;
LABEL_8:

  return v11;
}

  return v3;
}

        swift_bridgeObjectRelease(v10);
        uint64_t v3 = a2;
        int v6 = v28;
        uint64_t v4 = v29;
        a2 = v27;
      }

      else
      {
        swift_bridgeObjectRelease(v10);
      }

      swift_bridgeObjectRelease(v14);

      if (v5 == v4)
      {
        uint64_t v4 = 0LL;
        uint64_t v14 = v3;
        goto LABEL_36;
      }
    }

    __break(1u);
LABEL_31:
    if (v3 < 0) {
      int v24 = v3;
    }
    else {
      int v24 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
  }

  uint64_t v14 = v3;
LABEL_36:
  swift_bridgeObjectRelease(v14);
  return v4;
}

uint64_t sub_10001BF18(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon diagnosticControl:completion:]_block_invoke",  30LL,  "Diag: Low Battery Reset");
  }
  [*(id *)(a1 + 32) _lowBatteryReset];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10001BFA0(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon diagnosticControl:completion:]_block_invoke_2",  30LL,  "Diag: Low Battery Save");
  }
  [*(id *)(a1 + 32) _lowBatterySave:1];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_48:
    self->_prefLowBatterySaveSeconds = v17;
  }

  double v19 = CFPrefs_GetDouble(@"com.apple.bluetooth", @"lbStaleSeconds", &v157);
  if (v157) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v19 < 5.0;
  }
  if (v20) {
    uint64_t v21 = 57600.0;
  }
  else {
    uint64_t v21 = v19;
  }
  prefLowBatteryStaleSeconds = self->_prefLowBatteryStaleSeconds;
  if (v21 != prefLowBatteryStaleSeconds)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefLowBatteryStaleSeconds = self->_prefLowBatteryStaleSeconds;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "LowBatteryStaleSeconds: %.0f -> %.0f",  prefLowBatteryStaleSeconds,  v21);
    }
        }

  uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[20] + 8));
  if ((v225 & 1) != 0)
  {
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[21] + 8));
    if ((v226 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }

  CKRecordKeyValueSetting.subscript.getter( &v82,  0xD000000000000014LL,  0x80000001001CEE20LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v66 = v83;
  uint64_t v67 = (void *)(v31 + v81[13]);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  if (!v83) {
    goto LABEL_53;
  }
  if (v82 != v69 || v83 != v68)
  {
    int v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v67, v67[1], 0LL);
    swift_bridgeObjectRelease(v66);
    if ((v70 & 1) != 0) {
      goto LABEL_54;
    }
LABEL_53:
    id v84 = &type metadata for String;
    id v85 = &protocol witness table for String;
    id v82 = v69;
    id v83 = v68;
    swift_bridgeObjectRetain(v68);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000014LL, 0x80000001001CEE20LL, ObjectType);
    goto LABEL_54;
  }

  swift_bridgeObjectRelease(v83);
LABEL_54:
  CKRecordKeyValueSetting.subscript.getter( &v82,  0x7465737341434E41LL,  0xEF6E6F6973726556LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  int v71 = v83;
  int v72 = (void *)(v31 + v81[14]);
  __int128 v74 = *v72;
  v73 = v72[1];
  if (!v83) {
    goto LABEL_59;
  }
  if (v82 == v74 && v83 == v73)
  {
    swift_unknownObjectRelease(v28);
    return swift_bridgeObjectRelease(v71);
  }

  __int128 v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v72, v72[1], 0LL);
  swift_bridgeObjectRelease(v71);
  if ((v76 & 1) == 0)
  {
LABEL_59:
    id v84 = &type metadata for String;
    id v85 = &protocol witness table for String;
    id v82 = v74;
    id v83 = v73;
    swift_bridgeObjectRetain(v73);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0x7465737341434E41LL, 0xEF6E6F6973726556LL, ObjectType);
  }

  return swift_unknownObjectRelease(v28);
}

    uint64_t v39 = v74;
    return (void *)swift_bridgeObjectRelease(v39);
  }

  return result;
}

    sub_100166118((void **)&v41, (const void **)&v40, &v39);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_60:
    self->_prefLowBatteryStaleSeconds = v21;
  }

  int v23 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srConnectionAlert", &v157);
  if (v157) {
    int v24 = 1;
  }
  else {
    int v24 = v23 == 0;
  }
  uint64_t v25 = !v24;
  if (self->_prefSmartRoutingConnectionAlert != v25)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v26 = "yes";
      if (v25) {
        uint64_t v27 = "no";
      }
      else {
        uint64_t v27 = "yes";
      }
      if (!v25) {
        uint64_t v26 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingConnectionAlert: %s -> %s",  v27,  v26);
    }

    self->_prefSmartRoutingConnectionAlert = v25;
  }

  uint64_t v28 = CFPrefs_GetDouble(@"com.apple.bluetooth", @"srSecondsBetweenBanner", &v157);
  if (v157) {
    uint64_t v29 = 300.0;
  }
  else {
    uint64_t v29 = v28;
  }
  secondsBetweenConnectBanner = self->_secondsBetweenConnectBanner;
  if (v29 != secondsBetweenConnectBanner)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        secondsBetweenConnectBanner = self->_secondsBetweenConnectBanner;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingSecondsBetweenConnectedBanner: %.0f -> %.0f",  secondsBetweenConnectBanner,  v29);
    }
}

    sub_10016600C(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

LABEL_86:
    self->_secondsBetweenConnectBanner = v29;
  }

  uint64_t v31 = _os_feature_enabled_impl("AudioAccessoryFeatures", "SmartRoutingOnWatch");
  if (self->_prefSmartRoutingWatchAutomaticSwitching != v31)
  {
    uint64_t v32 = v31;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v33 = "yes";
      if (v32) {
        id v34 = "no";
      }
      else {
        id v34 = "yes";
      }
      if (!v32) {
        id v33 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "WatchAutomaticSwitching: %s -> %s",  v34,  v33);
    }

    self->_prefSmartRoutingWatchAutomaticSwitching = v32;
  }

  uint64_t v35 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srEnabledPhase3", &v157);
  id v36 = v35 != 0;
  if (v157)
  {
    uint64_t v37 = v35;
    if (GestaltGetDeviceClass() != 7
      && (self->_totalCloudDeviceCount > 1 || self->_pairedDeviceContainsCompanionWatch)
      && self->_pairedDeviceSupportsSmartRouting)
    {
      id v36 = self->_isHSA2Account || v37 != 0;
    }
  }

  if (self->_prefSmartRoutingEnabledPhase3 != v36)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v39 = "yes";
      if (v36) {
        id v40 = "no";
      }
      else {
        id v40 = "yes";
      }
      if (!v36) {
        uint64_t v39 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingEnabledPhase3: %s -> %s",  v40,  v39);
    }

    self->_prefSmartRoutingEnabledPhase3 = v36;
  }

  uint64_t v41 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srNoBackOffTimers", &v157);
  if (v157) {
    id v42 = 1;
  }
  else {
    id v42 = v41 == 0;
  }
  uint64_t v43 = !v42;
  if (self->_prefSmartRoutingNoBackOffTimers != v43)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v44 = "yes";
      if (v43) {
        id v45 = "no";
      }
      else {
        id v45 = "yes";
      }
      if (!v43) {
        id v44 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingNoBackOffTimers: %s -> %s",  v45,  v44);
    }

    self->_prefSmartRoutingNoBackOffTimers = v43;
  }

  id v46 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srPipe", &v157);
  if (v157) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = v46 == 0;
  }
  id v48 = !v47;
  if (self->_prefSmartRoutingPipeEnabled != v48)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v49 = "yes";
      if (v48) {
        uint64_t v50 = "no";
      }
      else {
        uint64_t v50 = "yes";
      }
      if (!v48) {
        uint64_t v49 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingPipeEnabled: %s -> %s",  v50,  v49);
    }

    self->_prefSmartRoutingPipeEnabled = v48;
  }

  uint64_t v51 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srBlockHijackingWindowinSceconds", &v157);
  if (v157) {
    int v52 = 90.0;
  }
  else {
    int v52 = (double)v51;
  }
  prefSmartRoutingBlockHijackWindowinSeconds = self->_prefSmartRoutingBlockHijackWindowinSeconds;
  if (v52 != (double)prefSmartRoutingBlockHijackWindowinSeconds)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefSmartRoutingBlockHijackWindowinSeconds = self->_prefSmartRoutingBlockHijackWindowinSeconds;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingHijackBlocking: %d -> %d",  prefSmartRoutingBlockHijackWindowinSeconds,  LODWORD(v52));
    }

LABEL_162:
    self->_prefSmartRoutingBlockHijackWindowinSeconds = (unint64_t)v52;
  }

  int v54 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srEnabledTipiElection", &v157);
  if (v157) {
    int v55 = 1;
  }
  else {
    int v55 = v54 == 0;
  }
  v56 = !v55;
  if (self->_prefSmartRoutingTipiElection != v56)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v57 = "yes";
      if (v56) {
        uint64_t v58 = "no";
      }
      else {
        uint64_t v58 = "yes";
      }
      if (!v56) {
        id v57 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingTipiElection: %s -> %s",  v58,  v57);
    }

    self->_prefSmartRoutingTipiElection = v56;
  }

  uint64_t v59 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srTiPiHealingv2", &v157);
  if (v157) {
    int v60 = 0;
  }
  else {
    int v60 = v59 == 0;
  }
  uint64_t v61 = !v60;
  if (self->_prefSmartRoutingTipiHealingv2 != v61)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v62 = "yes";
      if (v61) {
        uint64_t v63 = "no";
      }
      else {
        uint64_t v63 = "yes";
      }
      if (!v61) {
        uint64_t v62 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingTiPiHealing2.0: %s -> %s",  v63,  v62);
    }

    self->_prefSmartRoutingTipiHealinguint64_t v2 = v61;
  }

  uint64_t v64 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"forceDisconnect", &v157);
  if (v157) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = v64 == 0;
  }
  uint64_t v66 = !v65;
  if (self->_prefSmartRoutingForcedDisconnection != v66)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v67 = "yes";
      if (v66) {
        uint64_t v68 = "no";
      }
      else {
        uint64_t v68 = "yes";
      }
      if (!v66) {
        uint64_t v67 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingForcedDisconnect: %s -> %s",  v68,  v67);
    }

    self->_prefSmartRoutingForcedDisconnection = v66;
  }

  uint64_t v69 = CFPrefs_GetDouble(@"com.apple.bluetooth", @"forceDisconnectStartSeconds", &v157);
  prefSmartRoutingForcedDisconnectionStartSeconds = self->_prefSmartRoutingForcedDisconnectionStartSeconds;
  if (v157) {
    int v71 = self->_prefSmartRoutingForcedDisconnectionStartSeconds;
  }
  else {
    int v71 = v69;
  }
  if (v71 != prefSmartRoutingForcedDisconnectionStartSeconds)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefSmartRoutingForcedDisconnectionStartSeconds = self->_prefSmartRoutingForcedDisconnectionStartSeconds;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "forceDisconnectStartSeconds: %f -> %f",  prefSmartRoutingForcedDisconnectionStartSeconds,  v71);
    }

LABEL_222:
    self->_prefSmartRoutingForcedDisconnectionStartSeconds = v71;
  }

  int v72 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"forceDisconnectRSSI", &v157);
  if (v72 <= 999 && v72 >= -999 && v72 != 0 && v157 == 0) {
    __int128 v76 = v72;
  }
  else {
    __int128 v76 = -60LL;
  }
  forcedDisconnectionRSSI = self->_forcedDisconnectionRSSI;
  if (v76 != forcedDisconnectionRSSI)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        LODWORD(forcedDisconnectionRSSI) = self->_forcedDisconnectionRSSI;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingForcedDisconnectionRSSI: %d -> %lld",  forcedDisconnectionRSSI,  v76);
    }

LABEL_240:
    self->_forcedDisconnectionRSSI = v76;
  }

  id v78 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srNoNeabyFallBack", &v157);
  if (v157) {
    id v79 = 0;
  }
  else {
    id v79 = v78 == 0;
  }
  id v80 = !v79;
  if (self->_prefSmartRoutingNoNearbyFallBack != v80)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v81 = "yes";
      if (v80) {
        id v82 = "no";
      }
      else {
        id v82 = "yes";
      }
      if (!v80) {
        id v81 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingNoNearbyFallBack: %s -> %s",  v82,  v81);
    }

    self->_prefSmartRoutingNoNearbyFallBack = v80;
  }

  id v83 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srEligible", &v157);
  if (v157) {
    id v84 = 1;
  }
  else {
    id v84 = v83 == 0;
  }
  id v85 = !v84;
  if (self->_prefSmartRoutingEligible != v85)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v86 = "yes";
      if (v85) {
        id v87 = "no";
      }
      else {
        id v87 = "yes";
      }
      if (!v85) {
        id v86 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "SmartRoutingEligible: %s -> %s",  v87,  v86);
    }

    self->_prefSmartRoutingEligible = v85;
  }

  id v88 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"speakRoute", &v157);
  if (v157) {
    id v89 = 1;
  }
  else {
    id v89 = v88 == 0;
  }
  id v90 = !v89;
  if (self->_prefSpeakRoute != v90)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v91 = "yes";
      if (v90) {
        id v92 = "no";
      }
      else {
        id v92 = "yes";
      }
      if (!v90) {
        id v91 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "SpeakRoute: %s -> %s", v92, v91);
    }

    self->_prefSpeakRoute = v90;
  }

  id v93 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"routeIndication", &v157);
  if (v157) {
    id v94 = 0;
  }
  else {
    id v94 = v93 == 0;
  }
  v95 = !v94;
  if (self->_prefRouteIndicationEnable != v95)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v96 = "yes";
      if (v95) {
        v97 = "no";
      }
      else {
        v97 = "yes";
      }
      if (!v95) {
        v96 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "RouteIndication Enable: %s -> %s",  v97,  v96);
    }

    self->_prefRouteIndicationEnable = v95;
  }

  v98 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srProactiveOwnershipArbitration", &v157);
  if (v157) {
    v99 = 0;
  }
  else {
    v99 = v98 == 0;
  }
  v100 = !v99;
  if (self->_prefProactiveOwnershipArbitration != v100)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v101 = "yes";
      if (v100) {
        v102 = "no";
      }
      else {
        v102 = "yes";
      }
      if (!v100) {
        v101 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "ProactiveOwnershipArbitration: %s -> %s",  v102,  v101);
    }

    self->_prefProactiveOwnershipArbitration = v100;
  }

  v103 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srNoAutoRouteMac", &v157);
  if (v157) {
    v104 = 0;
  }
  else {
    v104 = v103 == 0;
  }
  v105 = !v104;
  if (self->_prefSmartRoutingNoAutoRouteMac != v105)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v106 = "yes";
      if (v105) {
        v107 = "no";
      }
      else {
        v107 = "yes";
      }
      if (!v105) {
        v106 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "NoAutoRouteMac: %s -> %s", v107, v106);
    }

    self->_prefSmartRoutingNoAutoRouteMac = v105;
  }

  v108 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srforceRejectLePipe", &v157);
  if (v157) {
    v109 = 1;
  }
  else {
    v109 = v108 == 0;
  }
  v110 = !v109;
  if (self->_prefSmartRoutingForceRejectLePipe != v110)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v111 = "yes";
      if (v110) {
        v112 = "no";
      }
      else {
        v112 = "yes";
      }
      if (!v110) {
        v111 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "ForceRejectLePipe: %s -> %s",  v112,  v111);
    }

    self->_prefSmartRoutingForceRejectLePipe = v110;
  }

  v113 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srforceTipiv2", &v157);
  if (v157) {
    v114 = 0;
  }
  else {
    v114 = v113 == 0;
  }
  v115 = !v114;
  if (self->_prefSmartRoutingForceTipiv2 != v115)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v116 = "yes";
      if (v115) {
        v117 = "no";
      }
      else {
        v117 = "yes";
      }
      if (!v115) {
        v116 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "ForceTipiv2: %s -> %s", v117, v116);
    }

    self->_prefSmartRoutingForceTipiuint64_t v2 = v115;
  }

  v118 = _os_feature_enabled_impl("AudioAccessoryFeatures", "PreemptiveConnectedBanner");
  prefSmartRoutingPreemptiveConnectedBanner = self->_prefSmartRoutingPreemptiveConnectedBanner;
  if (prefSmartRoutingPreemptiveConnectedBanner != v118)
  {
    v120 = v118;
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 != -1)
      {
LABEL_380:
        v121 = "yes";
        if (prefSmartRoutingPreemptiveConnectedBanner) {
          v122 = "yes";
        }
        else {
          v122 = "no";
        }
        if (!v120) {
          v121 = "no";
        }
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "Preemptive Connected Banner: %s -> %s",  v122,  v121);
        goto LABEL_387;
      }

      if (_LogCategory_Initialize(&dword_100234408, 30LL))
      {
        prefSmartRoutingPreemptiveConnectedBanner = self->_prefSmartRoutingPreemptiveConnectedBanner;
        goto LABEL_380;
      }
    }

LABEL_387:
    self->_prefSmartRoutingPreemptiveConnectedBanner = v120;
  }

  v123 = (_os_feature_enabled_impl("BluetoothFeatures", "SmartRoutingMacOS") & 1) != 0
      || CFPrefs_GetInt64(@"com.apple.bluetooth", @"srMacAutomaticSwitching", &v157) != 0;
  if (self->_prefSmartRoutingMacAutomaticSwitching != v123)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v124 = "yes";
      if (v123) {
        v125 = "no";
      }
      else {
        v125 = "yes";
      }
      if (!v123) {
        v124 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "MacAutomaticSwitching: %s -> %s",  v125,  v124);
    }

    self->_prefSmartRoutingMacAutomaticSwitching = v123;
  }

  v126 = (_os_feature_enabled_impl("BluetoothFeatures", "SmartRoutingMacOS") & 1) != 0
      || CFPrefs_GetInt64(@"com.apple.bluetooth", @"srMacMxAudioScore", &v157) != 0;
  if (self->_prefSmartRoutingMacMxAudioScore != v126)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v127 = "yes";
      if (v126) {
        v128 = "no";
      }
      else {
        v128 = "yes";
      }
      if (!v126) {
        v127 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "MxAudioScore: %s -> %s", v128, v127);
    }

    self->_prefSmartRoutingMacMxAudioScore = v126;
  }

  v129 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srforceTipiv2", &v157);
  if (v157) {
    v130 = 0;
  }
  else {
    v130 = v129 == 0;
  }
  v131 = !v130;
  if (self->_prefSmartRoutingForcedHijackv2 != v131)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v132 = "yes";
      if (v131) {
        v133 = "no";
      }
      else {
        v133 = "yes";
      }
      if (!v131) {
        v132 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "Hijackv2: %s -> %s", v133, v132);
    }

    self->_prefSmartRoutingForcedHijackuint64_t v2 = v131;
  }

  v134 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srWatchTriangleMagnet", &v157);
  if (v157) {
    v135 = 30LL;
  }
  else {
    v135 = v134;
  }
  prefSmartRoutingWatchTriangleMagnet = self->_prefSmartRoutingWatchTriangleMagnet;
  if (v135 != prefSmartRoutingWatchTriangleMagnet)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefSmartRoutingWatchTriangleMagnet = self->_prefSmartRoutingWatchTriangleMagnet;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "Watch triangle with Magnet: %d -> %d",  prefSmartRoutingWatchTriangleMagnet,  v135);
    }

LABEL_441:
    self->_prefSmartRoutingWatchTriangleMagnet = v135;
  }

  v137 = CFPrefs_GetDouble(@"com.apple.bluetooth", @"SRConnectionDelaySeconds", &v157);
  if (v157) {
    v138 = 0.0;
  }
  else {
    v138 = v137;
  }
  prefConnectionDelaySeconds = self->_prefConnectionDelaySeconds;
  if (v138 != prefConnectionDelaySeconds)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefConnectionDelaySeconds = self->_prefConnectionDelaySeconds;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "ConnectionDelaySeconds: %.0f -> %.0f",  prefConnectionDelaySeconds,  v138);
    }

LABEL_450:
    self->_prefConnectionDelaySeconds = v138;
  }

  v140 = _os_feature_enabled_impl("AudioAccessoryFeatures", "SmartRoutingPrioritizeCall");
  if (self->_prefSmartRoutingPrioritizedCall != v140)
  {
    v141 = v140;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v142 = "yes";
      if (v141) {
        v143 = "no";
      }
      else {
        v143 = "yes";
      }
      if (!v141) {
        v142 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "PriortizedCall: %s -> %s", v143, v142);
    }

    self->_prefSmartRoutingPrioritizedCall = v141;
  }

  v144 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srPriortizedCallMuteMac", &v157);
  if (v157) {
    v145 = 0;
  }
  else {
    v145 = v144 == 0;
  }
  v146 = !v145;
  if (self->_prefSmartRoutingPrioritizedCallMuteMac != v146)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v147 = "yes";
      if (v146) {
        v148 = "no";
      }
      else {
        v148 = "yes";
      }
      if (!v146) {
        v147 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "PriortizedCall muteMac: %s -> %s",  v148,  v147);
    }

    self->_prefSmartRoutingPrioritizedCallMuteMac = v146;
  }

  v149 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srInUseBanner", &v157);
  if (v157) {
    v150 = 0;
  }
  else {
    v150 = v149 == 0;
  }
  v151 = !v150;
  if (self->_prefSmartRoutingInUseBanner != v151)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      v152 = "yes";
      if (v151) {
        v153 = "no";
      }
      else {
        v153 = "yes";
      }
      if (!v151) {
        v152 = "no";
      }
      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _prefsChanged]", 30LL, "In-Use banner: %s -> %s", v153, v152);
    }

    self->_prefSmartRoutingInUseBanner = v151;
  }

  v154 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"srInUseBannerTimeout", &v157);
  if (v157) {
    v155 = 3LL;
  }
  else {
    v155 = v154;
  }
  prefSmartRoutingInUseBannerTimeout = self->_prefSmartRoutingInUseBannerTimeout;
  if (v155 != prefSmartRoutingInUseBannerTimeout)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        prefSmartRoutingInUseBannerTimeout = self->_prefSmartRoutingInUseBannerTimeout;
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _prefsChanged]",  30LL,  "In-Use banner timeout: %d -> %d",  prefSmartRoutingInUseBannerTimeout,  v155);
    }

LABEL_504:
    self->_prefSmartRoutingInUseBannerTimeout = v155;
  }

  -[BTSmartRoutingDaemon _update](self, "_update");
}

void sub_10001DCD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10001DCFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 216LL) == *(void *)(a1 + 40))
  {
    *(void *)(*(void *)(a1 + 32) + 232LL) = mach_absolute_time();
    uint64_t v4 = UpTicksToMilliseconds(*(void *)(*(void *)(a1 + 32) + 232LL) - *(void *)(a1 + 56));
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _routeIndicationConnectDevice:]_block_invoke",  30LL,  "Evaluator: connect complete: %@, %{error} with time %d ms",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  v3,  v4);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(void **)(v5 + 200);
    *(void *)(v5 + 200) = 0LL;

    [*(id *)(*(void *)(a1 + 32) + 216) invalidate];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 216);
    *(void *)(v7 + 216) = 0LL;

    *(void *)(*(void *)(a1 + 32) + 232LL) = 0LL;
    uint64_t v9 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _getWxFWVersion:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)]);
    uint64_t v10 = (void *)v9;
    id v11 = &stru_100212678;
    if (v9) {
      id v11 = (__CFString *)v9;
    }
    uint64_t v12 = v11;

    v31[0] = @"nbWC";
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(*(void *)(a1 + 32) + 1360) count]));
    v32[0] = v13;
    v31[1] = @"wxCT";
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v4));
    v32[1] = v14;
    v31[2] = @"wxPD";
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 64)));
    v32[2] = v15;
    v31[3] = @"wxST";
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v3 code]));
    v32[3] = v16;
    v31[4] = @"wxRP";
    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68)));
    v31[5] = @"wxBuildVersion";
    v32[4] = v17;
    v32[5] = v12;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v32,  v31,  6LL));
    CUMetricsLogEx(&dword_100234408, @"com.apple.bluetooth.RouteIndication", v18);

    double v19 = *(id **)(a1 + 32);
    if (v3)
    {
      [v19[121] removeObjectForKey:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    }

    else
    {
      [v19 _mediaRouteDiscoveryStarted];
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void **)(v20 + 992);
      if (v21)
      {
        uint64_t v22 = v21;
        dispatch_source_cancel(v22);
        uint64_t v23 = *(void *)(a1 + 32);
        int v24 = *(void **)(v23 + 992);
        *(void *)(v23 + 992) = 0LL;

        uint64_t v20 = *(void *)(a1 + 32);
      }

      dispatch_source_t v25 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v20 + 296));
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void **)(v26 + 992);
      *(void *)(v26 + 992) = v25;
      uint64_t v28 = v25;

      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_10001E098;
      handler[3] = &unk_100206B38;
      uint64_t v29 = *(void *)(a1 + 48);
      handler[4] = *(void *)(a1 + 32);
      handler[5] = v29;
      dispatch_source_set_event_handler(v28, handler);
      CUDispatchTimerSet(v28, 2.0, -1.0, -10.0);
      dispatch_activate(v28);
    }
  }
}

void sub_10001E098(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  @"-tacl"));
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _routeIndicationConnectDevice:]_block_invoke_2",  30LL,  "Evaluator: Start route discovery and set route for device %@",  v2);
  }

  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  @"-tacl"));
  [v3 _smartRoutingChangeRoute:v4];

  [*(id *)(a1 + 32) _mediaRouteDiscoveryStopped];
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 992LL);
  if (v5)
  {
    uint64_t v8 = v5;
    dispatch_source_cancel(v8);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 992);
    *(void *)(v6 + 992) = 0LL;
  }

void sub_10001E5CC(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 1320LL))
  {
    id v9 = v5;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      if (a2 > 6) {
        uint64_t v6 = "?";
      }
      else {
        uint64_t v6 = off_100207630[a2];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _routeIndicationShowBanner:withDevice:andCentralContentItemTxt:andTimeout:]_block_invoke",  30LL,  "_routeIndicationShowBanner: banner action: %s, %{error}",  v6,  v9);
    }

    switch(a2)
    {
      case 1u:
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _routeIndicationShowBanner:withDevice:andCentralContentItemTxt:andTimeout:]_block_invoke",  30LL,  "_routeIndicationShowBanner: connection starts for device %@",  *(void *)(a1 + 48));
        }

        [*(id *)(a1 + 40) _routeIndicationConnectDevice:*(void *)(a1 + 48)];
        ++*(_DWORD *)(*(void *)(a1 + 40) + 532LL);
        break;
      case 2u:
        ++*(_DWORD *)(*(void *)(a1 + 40) + 536LL);
        break;
      case 4u:
        if (dword_100234408 <= 90
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _routeIndicationShowBanner:withDevice:andCentralContentItemTxt:andTimeout:]_block_invoke",  90LL,  "_routeIndicationShowBanner: banner error for device %@",  *(void *)(a1 + 48));
        }

        break;
      case 6u:
        ++*(_DWORD *)(*(void *)(a1 + 40) + 540LL);
        break;
      default:
        break;
    }

    [*(id *)(*(void *)(a1 + 40) + 1320) invalidate];
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 1320);
    *(void *)(v7 + 1320) = 0LL;

    id v5 = v9;
  }
}

void sub_10001E7BC(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _routeIndicationShowBanner:withDevice:andCentralContentItemTxt:andTimeout:]_block_invoke_2",  30LL,  "_routeIndicationShowBanner: post banner after 2s delay");
  }
  [*(id *)(a1 + 32) activate];
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 976LL);
  if (v2)
  {
    id v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 976);
    *(void *)(v3 + 976) = 0LL;
  }

void sub_10001E9CC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!v5 && a2)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunforTVOS:]_block_invoke",  30LL,  "Evaluator: Connection is allowed per management policy");
    }

    goto LABEL_7;
  }

  if (!v5)
  {
LABEL_7:
    if ((a2 & 1) != 0)
    {
      [*(id *)(a1 + 32) _routeIndicationShowBanner:1 withDevice:*(void *)(a1 + 40) andCentralContentItemTxt:@"PRESS_TV_TO_CONNECT" andTimeout:20.0];
      uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      [*(id *)(*(void *)(a1 + 32) + 968) setObject:v7 forKeyedSubscript:*(void *)(a1 + 48)];
    }

    else if (dword_100234408 <= 30 {
           && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    }
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunforTVOS:]_block_invoke",  30LL,  "Ignoring Device that violates Connection policy");
    }

    goto LABEL_9;
  }

  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunforTVOS:]_block_invoke",  90LL,  "Connection policy check with error: %@",  v8);
  }
LABEL_9:
}

void *sub_10001EDE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[42]) {
    return [result _update];
  }
  return result;
}

void sub_10001F614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10001F634(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v11 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v11 btAddressData]);
  uint64_t v8 = CUPrintNSDataAddress();
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v9]);
  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

LABEL_40:
    uint64_t v22 = v38[5];
    if (self->_tipiElectionThroughLEPipe)
    {
      if (v22)
      {
        if (!self->_phase1ConnectConfig)
        {
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[SFDevice idsIdentifier](self->_lePipeDevice, "idsIdentifier"));
          if (v17)
          {
            int v24 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingBackOffMap,  "objectForKeyedSubscript:",  v17));
            dispatch_source_t v25 = [v24 containsString:v23];

            if (v25)
            {
              if (dword_100234408 <= 30
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]",  30LL,  "Evaluator: skip headset connected to source that disabled SR");
              }
            }

            else
            {
              self->_tipiElectionInProgress = 1;
              if (dword_100234408 <= 30
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]",  30LL,  "Evaluator: Tipi election won with headset %@",  v38[5]);
              }

              objc_storeStrong((id *)&self->_eligibleHeadset, (id)v38[5]);
              LOBYTE(v29) = 1;
              -[BTSmartRoutingDaemon _smartRoutingAddWxMapDevice:routingAction:otherAddress:otherName:otherSourceVersion:isRoutingInitialized:newWx:]( self,  "_smartRoutingAddWxMapDevice:routingAction:otherAddress:otherName:otherSourceVersion:isRoutingInitialized:newWx:",  self->_eligibleHeadset,  3LL,  0LL,  0LL,  0LL,  1LL,  v29);
              -[SmartRoutingStats setPipeStartTime:](self->_stats, "setPipeStartTime:", mach_absolute_time());
              smartRoutingPipe = self->_smartRoutingPipe;
              v30[0] = _NSConcreteStackBlock;
              v30[1] = 3221225472LL;
              v30[2] = sub_1000219EC;
              v30[3] = &unk_100206C78;
              v30[4] = self;
              v30[5] = v17;
              v30[6] = &v37;
              -[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]( smartRoutingPipe,  "_pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:",  v23,  v17,  1LL,  0LL,  v30);
            }
          }

          else if (dword_100234408 <= 90 {
                 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
          }
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]",  90LL,  "Evaluator: Unable to get address from eligible headset");
          }
}

  uint64_t v6 = objc_retainBlock(self->_progressHandler);
  if (v6)
  {
    uint64_t v7 = v6;
    (*((void (**)(id, uint64_t, void))v6 + 2))(v6, v3, 0LL);
    uint64_t v6 = v7;
  }
}

  uint64_t result = sub_100099394(*(void *)(v32 + v40[12]), *(void *)(v32 + v40[12] + 8));
  if ((v217 & 1) != 0)
  {
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[13] + 8));
    goto LABEL_42;
  }

    uint64_t v47 = v85;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v23 = v22;
  int v24 = v106;
  swift_beginAccess(v106, v108, 0LL, 0LL);
  uint64_t v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (uint64_t v28 = (void *)v26,
        uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v27),  v28,  !v29))
  {
    uint64_t v47 = v23;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v30 = _swiftEmptyArrayStorage;
  v107 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v31 = v23[2];
  if (v31)
  {
    v106 = v29;
    uint64_t v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v105 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v105 + 80));
    id v33 = v105[9];
    v105 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000A7C90(v32, (uint64_t)v11, type metadata accessor for DeviceRecord);
      id v34 = *(void *)&v11[*(int *)(v9 + 24) + 8];
      uint64_t v35 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      id v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      uint64_t v37 = [v35 initWithBluetoothAddress:v36];

      id v38 = String._bridgeToObjectiveC()();
      [v37 setNickname:v38];

      uint64_t v39 = String._bridgeToObjectiveC()();
      [v37 setModelNumber:v39];

      id v40 = String._bridgeToObjectiveC()();
      [v37 setManufacturer:v40];

      uint64_t v41 = String._bridgeToObjectiveC()();
      [v37 setProductID:v41];

      id v42 = String._bridgeToObjectiveC()();
      [v37 setVendorID:v42];

      uint64_t v43 = sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      id v45 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      id v44 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v45 >= v44 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1LL);
      }
      id v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }

    while (v31);
    uint64_t v23 = v105;
    swift_bridgeObjectRelease(v105);
    uint64_t v29 = v106;
    uint64_t v30 = (void *)v107;
  }

  swift_bridgeObjectRelease(v23);
  sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
  uint64_t v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  [v29 devicesRemovedWithRecords:v65];

  return (void *)swift_unknownObjectRelease(v29);
}

    uint64_t v47 = v84;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v23 = v22;
  int v24 = v103;
  swift_beginAccess(v103, v105, 0LL, 0LL);
  uint64_t v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (uint64_t v28 = (void *)v26,
        uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v27),  v28,  !v29))
  {
    uint64_t v47 = v23;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v30 = _swiftEmptyArrayStorage;
  v104 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v31 = v23[2];
  if (v31)
  {
    v103 = v29;
    uint64_t v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v102 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v102 + 80));
    id v33 = v102[9];
    v102 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000A7C90(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
      id v34 = *(void *)&v12[*(int *)(v10 + 24) + 8];
      uint64_t v35 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      id v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      uint64_t v37 = [v35 initWithBluetoothAddress:v36];

      id v38 = String._bridgeToObjectiveC()();
      [v37 setNickname:v38];

      uint64_t v39 = String._bridgeToObjectiveC()();
      [v37 setModelNumber:v39];

      id v40 = String._bridgeToObjectiveC()();
      [v37 setManufacturer:v40];

      uint64_t v41 = String._bridgeToObjectiveC()();
      [v37 setProductID:v41];

      id v42 = String._bridgeToObjectiveC()();
      [v37 setVendorID:v42];

      uint64_t v43 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      id v45 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      id v44 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v45 >= v44 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1LL);
      }
      id v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }

    while (v31);
    uint64_t v23 = v102;
    swift_bridgeObjectRelease(v102);
    uint64_t v29 = v103;
    uint64_t v30 = (void *)v104;
  }

  swift_bridgeObjectRelease(v23);
  sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
  uint64_t v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  [v29 devicesRemovedWithRecords:v65];

  return (void *)swift_unknownObjectRelease(v29);
}

    uint64_t v47 = v84;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v23 = v22;
  int v24 = v103;
  swift_beginAccess(v103, v105, 0LL, 0LL);
  uint64_t v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (uint64_t v28 = (void *)v26,
        uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v27),  v28,  !v29))
  {
    uint64_t v47 = v23;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v30 = _swiftEmptyArrayStorage;
  v104 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v31 = v23[2];
  if (v31)
  {
    v103 = v29;
    uint64_t v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v102 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v102 + 80));
    id v33 = v102[9];
    v102 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000A7C90(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
      id v34 = *(void *)&v12[*(int *)(v10 + 24) + 8];
      uint64_t v35 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      id v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      uint64_t v37 = [v35 initWithBluetoothAddress:v36];

      id v38 = String._bridgeToObjectiveC()();
      [v37 setNickname:v38];

      uint64_t v39 = String._bridgeToObjectiveC()();
      [v37 setModelNumber:v39];

      id v40 = String._bridgeToObjectiveC()();
      [v37 setManufacturer:v40];

      uint64_t v41 = String._bridgeToObjectiveC()();
      [v37 setProductID:v41];

      id v42 = String._bridgeToObjectiveC()();
      [v37 setVendorID:v42];

      uint64_t v43 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      id v45 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      id v44 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v45 >= v44 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1LL);
      }
      id v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }

    while (v31);
    uint64_t v23 = v102;
    swift_bridgeObjectRelease(v102);
    uint64_t v29 = v103;
    uint64_t v30 = (void *)v104;
  }

  swift_bridgeObjectRelease(v23);
  sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
  uint64_t v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  [v29 devicesRemovedWithRecords:v65];

  return (void *)swift_unknownObjectRelease(v29);
}

    uint64_t v47 = v84;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v23 = v22;
  int v24 = v103;
  swift_beginAccess(v103, v105, 0LL, 0LL);
  uint64_t v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (uint64_t v28 = (void *)v26,
        uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v27),  v28,  !v29))
  {
    uint64_t v47 = v23;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v30 = _swiftEmptyArrayStorage;
  v104 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v31 = v23[2];
  if (v31)
  {
    v103 = v29;
    uint64_t v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v102 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v102 + 80));
    id v33 = v102[9];
    v102 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000A7C90(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
      id v34 = *(void *)&v12[*(int *)(v10 + 24) + 8];
      uint64_t v35 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      id v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      uint64_t v37 = [v35 initWithBluetoothAddress:v36];

      id v38 = String._bridgeToObjectiveC()();
      [v37 setNickname:v38];

      uint64_t v39 = String._bridgeToObjectiveC()();
      [v37 setModelNumber:v39];

      id v40 = String._bridgeToObjectiveC()();
      [v37 setManufacturer:v40];

      uint64_t v41 = String._bridgeToObjectiveC()();
      [v37 setProductID:v41];

      id v42 = String._bridgeToObjectiveC()();
      [v37 setVendorID:v42];

      uint64_t v43 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      id v45 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      id v44 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v45 >= v44 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1LL);
      }
      id v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }

    while (v31);
    uint64_t v23 = v102;
    swift_bridgeObjectRelease(v102);
    uint64_t v29 = v103;
    uint64_t v30 = (void *)v104;
  }

  swift_bridgeObjectRelease(v23);
  sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
  uint64_t v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  [v29 devicesRemovedWithRecords:v65];

  return (void *)swift_unknownObjectRelease(v29);
}

LABEL_81:
          goto LABEL_82;
        }
}

LABEL_49:
        if (dword_100234408 > 30) {
          goto LABEL_53;
        }
        if (dword_100234408 == -1)
        {
          if (!_LogCategory_Initialize(&dword_100234408, 30LL))
          {
LABEL_53:
            -[SmartRoutingStats setPipeStartTime:](self->_stats, "setPipeStartTime:", 0LL);
            objc_storeStrong((id *)&self->_eligibleHeadset, (id)v38[5]);
            self->_tipiElectionInProgress = 1;
            LOBYTE(v29) = 1;
            -[BTSmartRoutingDaemon _smartRoutingAddWxMapDevice:routingAction:otherAddress:otherName:otherSourceVersion:isRoutingInitialized:newWx:]( self,  "_smartRoutingAddWxMapDevice:routingAction:otherAddress:otherName:otherSourceVersion:isRoutingInitialized:newWx:",  self->_eligibleHeadset,  3LL,  0LL,  0LL,  0LL,  0LL,  v29);
            if (!self->_forcedConnection) {
              goto LABEL_82;
            }
            if (!v17) {
              goto LABEL_82;
            }
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v17));

            if (!v26) {
              goto LABEL_82;
            }
            if (dword_100234408 <= 30
              && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
            {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]",  30LL,  "Backing off from Tipi healing due to ongoing FD!");
            }

            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v17));
            [v23 setTipiHealingBackoff:1];
            goto LABEL_81;
          }

          uint64_t v22 = v38[5];
        }

        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]",  30LL,  "Evaluator: Phase 1, Tipi election won with headset %@",  v22);
        goto LABEL_53;
      }
    }

    else if (v22)
    {
      goto LABEL_49;
    }

          double v19 = 0;
          uint64_t v16 = (os_log_s *)v6;
          goto LABEL_50;
        }

        [v11 operatingSystemVersion];

        if (v38 <= 11) {
          goto LABEL_40;
        }
      }

      else
      {
      }

      if (v8 == (id)++v10)
      {
        uint64_t v8 = [v6 countByEnumeratingWithState:&v44 objects:v54 count:16];
        if (v8) {
          goto LABEL_5;
        }
        goto LABEL_26;
      }
    }

    uint64_t v20 = sub_100060178("MagicPairing");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    *(_WORD *)buf = 0;
    uint64_t v22 = "allDevicesStarSky, but not HSA trusted";
    goto LABEL_34;
  }

      id v5 = v60;
    }
  }

  else
  {
  }

      uint64_t v3 = (char *)v3 + 1;
    }

    while (v50 != v3);
    uint64_t v32 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v58,  v63,  16LL);
    uint64_t v50 = v32;
  }

  while (v32);
LABEL_60:

  v56 = 0u;
  id v57 = 0u;
  int v54 = 0u;
  int v55 = 0u;
  id v33 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v2->_identityMap, "allKeys"));
  id v34 = [v33 countByEnumeratingWithState:&v54 objects:v62 count:16];
  if (v34)
  {
    uint64_t v35 = v34;
    id v36 = 0;
    uint64_t v37 = *(void *)v55;
    do
    {
      for (i = 0LL; i != v35; i = (char *)i + 1)
      {
        if (*(void *)v55 != v37) {
          objc_enumerationMutation(v33);
        }
        uint64_t v39 = *(void *)(*((void *)&v54 + 1) + 8LL * (void)i);
        id v40 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v52->_identityMap,  "objectForKeyedSubscript:",  v39));
        if (![v40 type])
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v52->_identityMap,  "setObject:forKeyedSubscript:",  0LL,  v39);
          ++v36;
          if (dword_1002347D8 <= 20
            && (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 20LL)))
          {
            LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsUpdateIdentities]",  20LL,  "UpdateIdentities: Rmv: %@",  v40);
          }
        }
      }

      uint64_t v35 = [v33 countByEnumeratingWithState:&v54 objects:v62 count:16];
    }

    while (v35);
  }

  else
  {
    id v36 = 0;
  }

  if (dword_1002347D8 <= 30 && (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 30LL)))
  {
    if (v52->_cbDaemonUpdated) {
      uint64_t v41 = "yes";
    }
    else {
      uint64_t v41 = "no";
    }
    LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsUpdateIdentities]",  30LL,  "UpdateIdentities: summary: added %d, removed %d, changed %d, daemon updated %s",  v46,  v36,  v47,  v41);
  }

  if (v46 || v36 || v47 || !v52->_cbDaemonUpdated)
  {
    id v42 = objc_alloc_init(&OBJC_CLASS___CBController);
    -[CBController setDispatchQueue:](v42, "setDispatchQueue:", v52->_dispatchQueue);
    uint64_t v43 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v52->_identityMap, "allValues"));
    id v44 = (void *)v43;
    if (v43) {
      id v45 = (void *)v43;
    }
    else {
      id v45 = &__NSArray0__struct;
    }
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_100087E2C;
    v53[3] = &unk_100206380;
    v53[4] = v42;
    v53[5] = v52;
    -[CBController updateIdentities:completion:](v42, "updateIdentities:completion:", v45, v53);
  }

  if (!(_DWORD)v226)
  {
LABEL_24:
    if ((_DWORD)v232) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000015LL,  0x80000001001CDB80LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v69 = v142;
  int v70 = (uint64_t *)(v139 + v140[17]);
  int v72 = *v70;
  int v71 = v70[1];
  if (!v142) {
    goto LABEL_55;
  }
  if (v141 != v72 || v142 != v71)
  {
    v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v70, v70[1], 0LL);
    swift_bridgeObjectRelease(v69);
    if ((v73 & 1) != 0) {
      goto LABEL_56;
    }
LABEL_55:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v72;
    v142 = v71;
    swift_bridgeObjectRetain(v71);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000015LL, 0x80000001001CDB80LL, ObjectType);
    goto LABEL_56;
  }

  swift_bridgeObjectRelease(v142);
LABEL_56:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000015LL,  0x80000001001CDBA0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  __int128 v74 = v142;
  __int128 v75 = (uint64_t *)(v139 + v140[18]);
  __int128 v77 = *v75;
  __int128 v76 = v75[1];
  if (!v142) {
    goto LABEL_61;
  }
  if (v141 == v77 && v142 == v76)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_62;
  }

  id v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v75, v75[1], 0LL);
  swift_bridgeObjectRelease(v74);
  if ((v78 & 1) == 0)
  {
LABEL_61:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v77;
    v142 = v76;
    swift_bridgeObjectRetain(v76);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000015LL, 0x80000001001CDBA0LL, ObjectType);
  }

LABEL_82:
LABEL_83:
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(&v37, 8);

    _Block_object_dispose(v45, 8);
    _Block_object_dispose(v47, 8);
    goto LABEL_84;
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]",  30LL,  "Evaluator: skip, tipi score below low");
  }
  uint64_t v27 = @"Tipi score below low";
LABEL_72:
  -[BTSmartRoutingDaemon _logEvalError:](self, "_logEvalError:", v27);
LABEL_84:
}

      swift_once(&qword_100234C28, sub_10018A9E0);
      goto LABEL_66;
    }

    id v33 = HIDWORD(v13) & 0xFFF0 | (v13 >> 4);
    id v34 = HIDWORD(a1) & 0xFFF0 | (a1 >> 4);
    if (v34 >= v33)
    {
      if (v33 < v34)
      {
        uint64_t v35 = static os_log_type_t.debug.getter(v4);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        id v36 = qword_10023DFC8;
        uint64_t v37 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v32 = swift_allocObject(v37, 192LL, 7LL);
        *(_OWORD *)(v32 + 16) = xmmword_1001A8820;
        *(void *)(v32 + 56) = &type metadata for UInt64;
        *(void *)(v32 + 64) = &protocol witness table for UInt64;
        *(void *)(v32 + 32) = v2;
        *(void *)(v32 + 96) = &type metadata for UInt64;
        *(void *)(v32 + 104) = &protocol witness table for UInt64;
        *(void *)(v32 + 72) = v33;
        *(void *)(v32 + 136) = &type metadata for UInt64;
        *(void *)(v32 + 144) = &protocol witness table for UInt64;
        *(void *)(v32 + 112) = v7;
        *(void *)(v32 + 176) = &type metadata for UInt64;
        *(void *)(v32 + 184) = &protocol witness table for UInt64;
        *(void *)(v32 + 152) = v34;
        os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v36,  "Update case (minor) version from %u.%u to %u.%u",  47LL,  2LL,  v32);
        goto LABEL_76;
      }

      id v38 = v13 & 0xF | (16 * ((v13 >> 24) & 0xFFF));
      uint64_t v39 = a1 & 0xF | (16 * ((a1 >> 24) & 0xFFF));
      if (v38 < v39)
      {
        id v40 = static os_log_type_t.debug.getter(v4);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        uint64_t v41 = qword_10023DFC8;
        id v42 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v32 = swift_allocObject(v42, 272LL, 7LL);
        *(_OWORD *)(v32 + 16) = xmmword_1001A8810;
        *(void *)(v32 + 56) = &type metadata for UInt64;
        *(void *)(v32 + 64) = &protocol witness table for UInt64;
        *(void *)(v32 + 32) = v2;
        *(void *)(v32 + 96) = &type metadata for UInt64;
        *(void *)(v32 + 104) = &protocol witness table for UInt64;
        *(void *)(v32 + 72) = v33;
        *(void *)(v32 + 136) = &type metadata for UInt64;
        *(void *)(v32 + 144) = &protocol witness table for UInt64;
        *(void *)(v32 + 112) = v38;
        *(void *)(v32 + 176) = &type metadata for UInt64;
        *(void *)(v32 + 184) = &protocol witness table for UInt64;
        *(void *)(v32 + 152) = v7;
        *(void *)(v32 + 216) = &type metadata for UInt64;
        *(void *)(v32 + 224) = &protocol witness table for UInt64;
        *(void *)(v32 + 192) = v34;
        *(void *)(v32 + 256) = &type metadata for UInt64;
        *(void *)(v32 + 264) = &protocol witness table for UInt64;
        *(void *)(v32 + 232) = v39;
        os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Update case (revision) version from %u.%u.%u to %u.%u.%u",  56LL,  2LL,  v32);
        goto LABEL_76;
      }
    }
  }

  return 0LL;
}

void sub_10001FEB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_10001FF0C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v10 = a3;
  signed int v7 = [v10 audioRoutingScore];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v10 model]);
  if ((([v8 hasPrefix:@"iPhone"] & 1) != 0
     || ([v8 hasPrefix:@"iPad"] & 1) != 0
     || ([v8 hasPrefix:@"iPod"] & 1) != 0
     || ([v8 containsString:@"Mac"] & 1) != 0
     || [v8 hasPrefix:@"Watch"])
    && v7 >= *(_DWORD *)(a1 + 48))
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke",  30LL,  "Evaluator: device %@ with higher or equal ASR",  v9);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }
}

void sub_100020088(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  signed int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 advertisementFields]);

  if (CFDictionaryGetInt64(v8, @"paired", 0LL))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 bluetoothAddress]);

    if ([v10 length] == (id)6)
    {
      uint64_t v11 = NSPrintF("%.6a", COERCE_DOUBLE([v10 bytes]));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    id v13 = *(void **)(*(void *)(a1 + 32) + 264LL);
    if (!v13)
    {
      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void **)(v15 + 264);
      *(void *)(v15 + 264) = v14;

      id v13 = *(void **)(*(void *)(a1 + 32) + 264LL);
    }

    uint64_t v17 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v12]);
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      double v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 264) objectForKeyedSubscript:v12]);
      id v20 = [v19 unsignedLongLongValue];

      if (v20)
      {
        uint64_t v21 = mach_absolute_time();
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 264) objectForKeyedSubscript:v12]);
        unint64_t v23 = UpTicksToSeconds(v21 - (void)[v22 unsignedLongLongValue]);

        uint64_t v24 = *(void *)(a1 + 32);
        if (!*(_BYTE *)(v24 + 136))
        {
          int v30 = *(unsigned __int8 *)(v24 + 690);
          BOOL v31 = v23 < 0xA || v30 == 0;
          if (v31 && v23 <= 0x1D)
          {
            if (dword_100234408 <= 30
              && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
            {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, too soon since device %@ disconnection, %ll{dur} remaining",  v12,  30 - v23);
            }

            id v33 = *(void **)(a1 + 32);
            id v34 = @"Too soon since last disconnection";
            goto LABEL_36;
          }
        }
      }
    }

    if (!v12 || ([*(id *)(a1 + 32) _supportsTipi:v12] & 1) == 0)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, eligible headset %@ with address %@ is not running correct OS version",  v29,  v12);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset is not running correct OS version";
      goto LABEL_36;
    }

    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged(v8, @"subType", 0LL, 0xFFFFFFFFLL, 0LL);
    if ((_DWORD)Int64Ranged != 1)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, headset %@ is not in status subtype, current subtype is %u",  v32,  Int64Ranged);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset is not in status subtype";
      goto LABEL_36;
    }

    int v26 = CFDictionaryGetInt64Ranged(v8, @"hsStatus", 0LL, 0xFFFFFFFFLL, 0LL);
    if ((v26 & 8) != 0)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, headset %@ is in airplane mode",  v35);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset is in airplane mode";
      goto LABEL_36;
    }

    uint64_t Int64 = CFDictionaryGetInt64(v8, @"lc", 0LL);
    if ((~v26 & 0x12) == 0 && Int64)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, headset %@ is in case with lid closed",  v28);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset is in case with lid closed";
      goto LABEL_36;
    }

    if ([*(id *)(*(void *)(a1 + 32) + 1120) containsObject:v12])
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, headset %@ is part of manual disconnection list.",  v36);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset is part of manual disconnection list";
      goto LABEL_36;
    }

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) objectForKeyedSubscript:v12]);

    if (v37)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        id v38 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, we are already connected to %@",  v38);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset already connected";
      goto LABEL_36;
    }

    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v12]);
    unsigned int v40 = [v39 connected];

    if (v40)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, we are already connected to %@ but haven't received connected event yet",  v41);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset already connected but haven't received connected event yet";
      goto LABEL_36;
    }

    unsigned int v42 = CFDictionaryGetInt64Ranged(v8, @"aState", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
    uint64_t v43 = CFDictionaryGetInt64Ranged(v8, @"pid", 0LL, 0xFFFFFFFFLL, 0LL);
    if ([*(id *)(*(void *)(a1 + 32) + 1152) count])
    {
      if (v42 && ([*(id *)(*(void *)(a1 + 32) + 120) isEqual:v12] & 1) == 0)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          id v48 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: headset %@ not idle and we already have a SR device connected, back off",  v48);
        }

        id v33 = *(void **)(a1 + 32);
        id v34 = @"Headset not idle and we already have a SR device connected, back off";
        goto LABEL_36;
      }

      if (((v26 & 0x24) != 0 || [*(id *)(a1 + 32) _bluetoothProductIDNoEarDetect:v43])
        && [*(id *)(a1 + 32) _isAnyConnectedWxInEarCheck]
        && ([*(id *)(*(void *)(a1 + 32) + 120) isEqual:v12] & 1) == 0)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          int v53 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: already have an inEar SR device connected, and current headset is already inEar, back off",  v53);
        }

        id v33 = *(void **)(a1 + 32);
        id v34 = @"already have an inEar SR device connected, and current headset is already inEar, back off";
        goto LABEL_36;
      }
    }

    uint64_t v44 = CFDictionaryGetInt64Ranged(v8, @"asCount", 0LL, 0xFFFFFFFFLL, 0LL);
    unsigned int v45 = [*(id *)(*(void *)(a1 + 32) + 1168) incomingCallRingtone];
    id v46 = *(_BYTE **)(a1 + 32);
    if (v45 && (_DWORD)v44 == 2 && !v46[136])
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, ringtone shall not participate tipi election when Airpods already have two device connected.");
      }

      goto LABEL_120;
    }

    if (v46[1217])
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: Skip, OnDemand connect criteria not met");
      }

LABEL_120:
      id v33 = *(void **)(a1 + 32);
      id v34 = @"Ringtone shall not participate tipi election when Airpods already have two device connected";
LABEL_36:
      [v33 _logEvalWxError:v12 withError:v34];
LABEL_37:

      goto LABEL_38;
    }

    if ((v26 & 0x24) == 0 && v46[168])
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, eligible headset %@ with address %@ is not in ear and a third party BT device is already connected",  v47,  v12);
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"Headset is not in ear and a third party BT device is already connected";
      goto LABEL_36;
    }

    uint64_t v114 = v44;
    unsigned __int8 v49 = CFDictionaryGetInt64Ranged(v8, @"srAudioRoutingScore1", 0LL, 255LL, 0LL);
    unsigned __int8 v50 = CFDictionaryGetInt64Ranged(v8, @"srAudioRoutingScore2", 0LL, 255LL, 0LL);
    unsigned __int8 v113 = v49;
    unsigned int v51 = v49;
    int v52 = v114;
    if (v51 == 8 && (_DWORD)v114 || (_DWORD)v114 == 2 && v50 == 8LL)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: skip, SR disabled on current connected source");
      }

      id v33 = *(void **)(a1 + 32);
      id v34 = @"SR disabled on current connected source";
      goto LABEL_36;
    }

    unsigned int v107 = v51;
    unsigned __int8 v110 = v50;
    id obj = a3;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      int v54 = "yes";
      if ((v26 & 0x24) != 0) {
        int v55 = "yes";
      }
      else {
        int v55 = "no";
      }
      v111 = v55;
      uint64_t v56 = *(void *)(a1 + 32);
      if (*(_BYTE *)(v56 + 136)) {
        id v57 = "yes";
      }
      else {
        id v57 = "no";
      }
      if (!*(_BYTE *)(v56 + 690)) {
        int v54 = "no";
      }
      v108 = v54;
      if (v42 >> 2) {
        uint64_t v58 = "?";
      }
      else {
        uint64_t v58 = off_100207970[v42];
      }
      v104 = v58;
      uint64_t v59 = sub_10001A2D4(v107);
      int v60 = sub_10001A2D4(v110);
      v103 = v57;
      int v52 = v114;
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: headset %@ sources %d inEar %s connectForCallA2DP %s callConnected %s playbackStart %s audioState %s TipiScore1 %s TipiScore2 %s",  v12,  v114,  v111,  "no",  v103,  v108,  v104,  v59,  v60);
    }

    uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v8, @"lch", 3LL, 0LL);
    id v112 = (id)objc_claimAutoreleasedReturnValue(CFDataOfLength);
    if (v52)
    {
      uint64_t v129 = 0LL;
      v130 = &v129;
      uint64_t v131 = 0x2020000000LL;
      char v132 = 0;
      uint64_t v105 = CFDictionaryGetInt64(v8, @"srConnected", 0LL);
      v109 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getWxFWVersion:v12]);
      if (!v112)
      {
LABEL_199:

        _Block_object_dispose(&v129, 8);
        goto LABEL_200;
      }

      if ([*(id *)(a1 + 32) _isEligibleForTipiV2:v109 firstDeviceTipiScore:v107 secondDeviceTipiScore:v110 currentDeviceScore:*(unsigned int *)(a1 + 64) sourceDevi ceCount:v114 isOnDemandConnect:0 address:v5 lastConnectedHost:v112])
      {
        [*(id *)(*(void *)(a1 + 32) + 1208) setSetupSupportsTipiv2:1];
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Eligible for Tipi2.0!");
        }

        BOOL v85 = v110 < 8u && *(_DWORD *)(a1 + 64) <= (int)v110;
        if (v110 == 15 || v85)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: backoff, another device is actively connecting or current score is less than secondary device");
          }

          goto LABEL_199;
        }

        if (([*(id *)(a1 + 32) _isDevicePairedCheck:v112] & 1) == 0)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: backoff, lastConnectedHost is not signed into the same iCloud account as this host device");
          }

          goto LABEL_199;
        }

        *(_BYTE *)(*(void *)(a1 + 32) + 1218LL) = 1;
        [*(id *)(a1 + 32) _setPhase1ConnectConfig:v12 andType:3];
        [*(id *)(*(void *)(a1 + 32) + 1208) setWxTipiScore1:v113];
        [*(id *)(*(void *)(a1 + 32) + 1208) setWxTipiScore2:v110];
        [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1218) withDevice:0];
        uint64_t v68 = *(void *)(a1 + 40);
        uint64_t v86 = *(void *)(v68 + 8);
        if ((v26 & 0x24) != 0 || !*(void *)(v86 + 40))
        {
          id v87 = v6;
          uint64_t v67 = *(void **)(v86 + 40);
          *(void *)(v86 + 40) = v87;
LABEL_184:

          goto LABEL_199;
        }
      }

      else
      {
        if (*(int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) > 1)
        {
          if (dword_100234408 > 30
            || dword_100234408 == -1 && !_LogCategory_Initialize(&dword_100234408, 30LL))
          {
            goto LABEL_199;
          }

          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: not eligible for tipiv2, skip tipi election for %@ as two devices with higher or equal ASRs",  v67);
          goto LABEL_184;
        }

        uint64_t v68 = *(void *)(a1 + 40);
      }

      uint64_t v69 = *(void *)(a1 + 32);
      int v70 = *(void **)(v69 + 560);
      v116[0] = _NSConcreteStackBlock;
      v116[1] = 3221225472LL;
      v116[2] = sub_10002154C;
      v116[3] = &unk_100206C28;
      v116[4] = v69;
      v116[5] = v112;
      uint64_t v119 = v68;
      char v124 = 0;
      unsigned __int8 v125 = v113;
      int v121 = v114;
      unsigned __int8 v126 = v110;
      v120 = &v129;
      BOOL v127 = (v26 & 0x24) != 0;
      int v122 = v26;
      unsigned int v123 = v42;
      id v71 = v6;
      id v117 = v71;
      v118 = v109;
      BOOL v128 = v105 != 0;
      [v70 enumerateKeysAndObjectsUsingBlock:v116];
      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)
        || !*(void *)(*(void *)(a1 + 32) + 808LL)
        || (uint64_t v72 = mach_absolute_time(),
            double v73 = (double)(unint64_t)UpTicksToSeconds(v72 - *(void *)(*(void *)(a1 + 32) + 808LL)),
            __int128 v74 = *(double **)(a1 + 32),
            v74[102] >= v73))
      {
LABEL_148:

        goto LABEL_199;
      }

      unsigned int v75 = [v74 _isDevicePairedCheck:v112];
      if (*(_BYTE *)(*(void *)(a1 + 32) + 844LL)) {
        unsigned int v76 = v75;
      }
      else {
        unsigned int v76 = 0;
      }
      if (v76 != 1
        || *((_BYTE *)v130 + 24)
        || (id v88 = [@"5A274" compare:v109 options:64], (v26 & 0x24) == 0)
        || v88 != (id)-1LL)
      {
LABEL_156:
        if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) {
          && (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1,
        }
              *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
          || (__int128 v77 = *(_BYTE **)(a1 + 32), !v77[795])
          || *((_BYTE *)v130 + 24)
          || !v105)
        {
LABEL_217:
          if (*((_BYTE *)v130 + 24)
            && *(_BYTE *)(*(void *)(a1 + 32) + 795LL)
            && dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: Back off from Forced Disconnect.");
          }

          goto LABEL_148;
        }

        id v115 = objc_claimAutoreleasedReturnValue([v77 _myBluetoothAddressString]);
        id v78 = (const char *)[v115 UTF8String];
        if (!v78) {
          id v78 = "";
        }
        uint64_t v79 = NSDataWithHex(v78, -1LL, 22LL, 0LL, 0LL);
        id v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
        if ([v80 length] == (id)6)
        {
          id v81 = (char *)[v80 bytes];
          id v82 = (unsigned __int16 *)[v112 bytes];
          if (*v82 == *(unsigned __int16 *)(v81 + 3) && *((unsigned __int8 *)v82 + 2) == v81[5])
          {
            if (dword_100234408 > 30)
            {
LABEL_210:
              if ([*(id *)(a1 + 32) _isDevicePairedCheck:v112])
              {
                uint64_t v89 = *(void *)(a1 + 32);
                if (!*(_BYTE *)(v89 + 344))
                {
                  id v90 = *(void **)(v89 + 584);
                  if (!v90)
                  {
                    id v91 = objc_alloc_init(&OBJC_CLASS___BTSmartRoutingNearbyStats);
                    uint64_t v92 = *(void *)(a1 + 32);
                    id v93 = *(void **)(v92 + 584);
                    *(void *)(v92 + 584) = v91;

                    id v90 = *(void **)(*(void *)(a1 + 32) + 584LL);
                  }

                  objc_msgSend( v90,  "setNoNearbyDeviceFoundCount:",  objc_msgSend(v90, "noNearbyDeviceFoundCount") + 1);
                  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 584),  "setSRConnectedSetCount:",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 584), "SRConnectedSetCount") + 1);
                  id v94 = (void *)objc_claimAutoreleasedReturnValue([v71 bleDevice]);
                  id v95 = [v94 rssi];
                }
              }

              goto LABEL_217;
            }

            if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: This is the device that will be forced disconnect");
            }
          }
        }

        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: did not find any nearby devices that match address, check forced disconnect logic...");
        }

        goto LABEL_210;
      }

      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: can't see nearby device; current wx connected device count %d",
          v114);
      }

      unsigned int v96 = CFDictionaryGetInt64Ranged(v8, @"srAudioRoutingScore1", 0LL, 255LL, 0LL);
      if ((_DWORD)v114 == 1 && v96 && v96 <= 3)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          v97 = sub_10001A2D4(v96);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: can't see nearby device; Only one source is connected, Phase1 connect, current source device score %s",
            v97);
        }

        goto LABEL_239;
      }

      if ((_DWORD)v114 != 2) {
        goto LABEL_156;
      }
      unsigned __int8 v98 = CFDictionaryGetInt64Ranged(v8, @"srAudioRoutingScore2", 0LL, 255LL, 0LL);
      if (v96 - 1 > 2) {
        goto LABEL_156;
      }
      signed int v99 = v98;
      if (!v98) {
        goto LABEL_156;
      }
      signed int v100 = *(_DWORD *)(a1 + 64);
      if (v100 <= v99) {
        goto LABEL_156;
      }
      if (dword_100234408 > 30) {
        goto LABEL_239;
      }
      if (dword_100234408 == -1)
      {
        signed int v100 = *(_DWORD *)(a1 + 64);
      }

      v101 = sub_10001A2D4(v100);
      v102 = sub_10001A2D4(v99);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: can't see nearby device; two source devices are connected, current device score %s is higher than tip"
        "i device 2 score %s; Phase1 connect",
        v101,
        v102);
LABEL_239:
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), obj);
      goto LABEL_156;
    }

    uint64_t v62 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v64 = *(void *)(v62 + 40);
    uint64_t v63 = (id *)(v62 + 40);
    if (v64)
    {
      if ((v26 & 0x24) == 0)
      {
LABEL_200:

        goto LABEL_37;
      }

      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) name]);
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2",  30LL,  "Evaluator: overwritting priority of headset based on inEar from %@ to %@",  v65,  v66);
      }

      uint64_t v63 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    objc_storeStrong(v63, obj);
    goto LABEL_200;
  }

LABEL_38:
}

    id v6 = "?";
    goto LABEL_39;
  }

  if (a3 <= 29)
  {
    switch(a3)
    {
      case 0:
        id v6 = "Invalid";
        goto LABEL_39;
      case 10:
        id v6 = "Activated";
        goto LABEL_39;
      case 20:
        id v6 = "Invalidated";
        goto LABEL_39;
    }

    goto LABEL_38;
  }

  if (a3 > 49)
  {
    if (a3 == 50)
    {
      id v6 = "Failed";
      goto LABEL_39;
    }

    if (a3 == 100)
    {
      id v6 = "Confirm";
      goto LABEL_39;
    }

    goto LABEL_38;
  }

  if (a3 == 30)
  {
    id v6 = "Interrupted";
    goto LABEL_39;
  }

  if (a3 != 40) {
    goto LABEL_38;
  }
  id v6 = "Succeeded";
LABEL_39:
  signed int v7 = &stru_100212678;
  if (v13) {
    signed int v7 = v13;
  }
  LogPrintF( &dword_100234A48,  "-[BTServicesDaemon _shareAudioSessionProgressEvent:info:]",  30LL,  "Session progress: %s %##@",  v6,  v7);
LABEL_42:
  if (a3 == 50)
  {
    TypeID = CFErrorGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(v13, @"error", TypeID, 0LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
    if (v10)
    {
      -[BTServicesDaemon _shareAudioSessionEnded:](self, "_shareAudioSessionEnded:", v10);
    }

    else
    {
      uint64_t v11 = BTErrorF(4294960596LL, "Failed without error?");
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      -[BTServicesDaemon _shareAudioSessionEnded:](self, "_shareAudioSessionEnded:", v12);
    }
  }

  else if (a3 == 40)
  {
    -[BTServicesDaemon _shareAudioSessionEnded:](self, "_shareAudioSessionEnded:", 0LL);
  }
}

  uint64_t result = sub_100099394(*(void *)(v32 + v40[10]), *(void *)(v32 + v40[10] + 8));
  if ((v39 & 1) != 0)
  {
LABEL_13:
    uint64_t result = sub_100099394(*(void *)(v32 + v40[11]), *(void *)(v32 + v40[11] + 8));
    if ((v239 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

    id v10 = 0;
    goto LABEL_39;
  }

  if (a1 != 45)
  {
    uint64_t v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      id v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        uint64_t v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        uint64_t v14 = __CFADD__(10 * v8, v21);
        uint64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        id v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }

    goto LABEL_38;
  }

  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      uint64_t v2 = 0LL;
      uint64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        uint64_t v11 = v4 - 2;
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            id v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            uint64_t v14 = 10 * v8 >= v13;
            uint64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            id v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }

        goto LABEL_38;
      }

      goto LABEL_53;
    }

void sub_10002150C(_Unwind_Exception *a1)
{
}

void sub_10002154C(uint64_t a1, uint64_t a2, void *a3)
{
  id v42 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v42 bleDevice]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 advertisementFields]);

  uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v5, @"bdAddr", 6LL, 0LL);
  signed int v7 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v42 model]);
    unsigned int v11 = [v10 containsString:@"Mac"];

    if (v11)
    {
      uint64_t v12 = *(void **)(a1 + 32);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v42 idsIdentifier]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v12 _nearbyMacAddressTranslate:v13]);

      id v9 = (id)v14;
      if (!v14) {
        goto LABEL_16;
      }
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v42 identifier]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 UUIDString]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v42 name]);
      unsigned int v19 = [v42 audioRoutingScore];
      if (v19 > 0xF) {
        id v20 = "?";
      }
      else {
        id v20 = off_1002079F0[v19];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_3",  30LL,  "Evaluator: comparing, Wx: %@, ND: %@, ID %@ Name '%@' NS %s",  v15,  v9,  v17,  v18,  v20);
    }

    id v9 = v9;
    uint64_t v21 = (char *)[v9 bytes];
    uint64_t v22 = (unsigned __int16 *)[*(id *)(a1 + 40) bytes];
    if ([v42 audioRoutingScore]
      && (uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v42 model]),
          unsigned __int8 v25 = [v24 hasPrefix:@"Watch"],
          v24,
          (v25 & 1) == 0))
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
      {
LABEL_29:
        [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1218) withDevice:v42];
LABEL_30:
        uint64_t v30 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id v31 = *(id *)(a1 + 48);
        int v26 = *(void **)(v30 + 40);
        *(void *)(v30 + 40) = v31;
        goto LABEL_31;
      }

      if ((*(_BYTE *)(a1 + 84) & 0x24) != 0)
      {
        [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1218) withDevice:v42];
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) name]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_3",  30LL,  "Evaluator: overwritting priority of headset based on inEar from %@ to %@",  v28,  v29);
        }

        goto LABEL_30;
      }
    }

    else
    {
      int v26 = (void *)objc_claimAutoreleasedReturnValue([v42 model]);
      if (![v26 hasPrefix:@"Watch"])
      {
LABEL_31:

        goto LABEL_32;
      }

      int v27 = *(unsigned __int8 *)(a1 + 92);

      if (v27 && !*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)) {
        goto LABEL_29;
      }
    }

LABEL_32:
    if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) && *(_BYTE *)(*(void *)(a1 + 32) + 795LL)) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    }
    if (!*(_BYTE *)(a1 + 95)) {
      goto LABEL_16;
    }
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v42 model]);
    if ([v32 hasPrefix:@"Watch"])
    {
      int v33 = *(_DWORD *)(a1 + 88);

      if (v33) {
        goto LABEL_16;
      }
      id v34 = *(void **)(*(void *)(a1 + 32) + 584LL);
      if (!v34)
      {
        uint64_t v35 = objc_alloc_init(&OBJC_CLASS___BTSmartRoutingNearbyStats);
        uint64_t v36 = *(void *)(a1 + 32);
        uint64_t v37 = *(void **)(v36 + 584);
        *(void *)(v36 + 584) = v35;

        id v34 = *(void **)(*(void *)(a1 + 32) + 584LL);
      }

      objc_msgSend( v34,  "setNearbyDeviceNoTipiScoreCount:",  objc_msgSend(v34, "nearbyDeviceNoTipiScoreCount") + 1);
      if ([@"4E20" compare:*(void *)(a1 + 56) options:64] != (id)1 && !*(_BYTE *)(a1 + 96)) {
        goto LABEL_16;
      }
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_3",  30LL,  "Evaluator: headset %@ is inEar and it's connected to watch & it's idle, force phase1",  v38);
      }

      uint64_t v39 = *(void **)(a1 + 48);
      uint64_t v40 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v41 = v39;
      uint64_t v32 = *(void **)(v40 + 40);
      *(void *)(v40 + 40) = v41;
    }

LABEL_16:
  }
}

      LogPrintF(&dword_100234408, "-[BTSmartRoutingDaemon _wxDeviceFoundforTVOS:]", 30LL, v34, v63);
LABEL_80:

      ((void (*)(void *))v59[2])(v59);
      _Block_object_dispose(&v68, 8);

      uint64_t v4 = v63;
      id v6 = v58;
      goto LABEL_81;
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFoundforTVOS:]",  30LL,  "User manually trigger the banner");
    }

    goto LABEL_75;
  }
}

      goto LABEL_33;
    }

    unint64_t v23 = objc_loadWeakRetained(&to);
    [v23 setActivity:v3];

    signed int v7 = (os_log_s *)xpc_activity_copy_criteria(v3);
    uint64_t v24 = *(void **)(a1 + 40);
    if (v7)
    {
      if (xpc_equal(v24, v7))
      {
        unsigned __int8 v25 = sub_100060178("BTXPCTimer");
        int v26 = (id)objc_claimAutoreleasedReturnValue(v25);
        if (!os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        int v27 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v59 = v27;
        int v60 = 2112;
        uint64_t v61 = (xpc_activity_state_t)v7;
        uint64_t v28 = "BTXPCTimer Check-in: %@, with existing criteria: %@";
      }

      else
      {
        xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 40));
        int v54 = sub_100060178("BTXPCTimer");
        int v26 = (id)objc_claimAutoreleasedReturnValue(v54);
        if (!os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        int v55 = *(void *)(a1 + 32);
        uint64_t v56 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v59 = v55;
        int v60 = 2112;
        uint64_t v61 = v56;
        uint64_t v28 = "BTXPCTimer Check-in: %@, with updating criteria: %@";
      }

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, OS_LOG_TYPE_DEFAULT, v28, buf, 0x16u);
      goto LABEL_32;
    }

    if (v24)
    {
      unsigned __int8 v50 = sub_100060178("BTXPCTimer");
      unsigned int v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        int v52 = *(void *)(a1 + 32);
        int v53 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v59 = v52;
        int v60 = 2112;
        uint64_t v61 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "BTXPCTimer Check-in: %@, with criteria: %@",  buf,  0x16u);
      }

      xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 40));
    }
  }

  else
  {
    uint64_t v16 = sub_100060178("BTXPCTimer");
    signed int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018EF54(a1, v7, v17, v18, v19, v20, v21, v22);
    }
  }

  __break(1u);
  return result;
}

    uint64_t v72 = (v75 - 1) & v75;
  }

  v102 = static os_log_type_t.error.getter(v79);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  id v87 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v102,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
  id v88 = _swiftEmptyArrayStorage[2];
  if (!v88) {
    goto LABEL_48;
  }
LABEL_37:
  uint64_t v89 = v118;
  id v90 = (uint64_t)v87 + ((*(unsigned __int8 *)(v118 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
  unsigned __int8 v113 = v87;
  swift_bridgeObjectRetain(v87);
  BOOL v127 = *(void *)(v89 + 72);
  id v91 = (uint64_t)v119;
  while (1)
  {
    sub_1000A7C90(v90, v91, type metadata accessor for DeviceRecord);
    uint64_t v92 = (uint64_t *)(v91 + *(int *)(v128 + 24));
    id v94 = *v92;
    id v93 = v92[1];
    id v95 = v29;
    unsigned int v96 = [v29 bluetoothAddress];
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    signed int v99 = v98;

    if (v94 == v97 && v93 == v99) {
      break;
    }
    v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v94, v93, v97, v99, 0LL);
    swift_bridgeObjectRelease(v99);
    sub_1000A7CD4(v91, type metadata accessor for DeviceRecord);
    if ((v101 & 1) != 0) {
      goto LABEL_52;
    }
    v90 += v127;
    --v88;
    uint64_t v29 = v95;
    if (!v88)
    {
      swift_release(v126);
      uint64_t result = swift_bridgeObjectRelease_n(v113, 2LL);
      uint64_t v39 = v121;
      uint64_t v65 = v112;
      uint64_t v69 = v111;
      goto LABEL_49;
    }
  }

  swift_bridgeObjectRelease(v93);
  sub_1000A7CD4(v91, type metadata accessor for DeviceRecord);
LABEL_52:
  v103 = swift_bridgeObjectRelease_n(v113, 2LL);
  v104 = static os_log_type_t.error.getter(v103);
  uint64_t v105 = qword_10023DFC0;
  v106 = swift_allocObject(v114, 72LL, 7LL);
  *(_OWORD *)(v106 + 16) = xmmword_1001A5EA0;
  *(void *)(v106 + 56) = sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
  *(void *)(v106 + 64) = sub_1000C934C(&qword_100235858, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
  *(void *)(v106 + 32) = v95;
  unsigned int v107 = v95;
  os_log(_:dso:log:_:_:)( v104,  &_mh_execute_header,  v105,  "CloudSync: Cannot Add Secondary Cloud DeviceRecord: %@",  54LL,  2LL,  v106);
  swift_release(v125);

  swift_release(v126);
  return swift_bridgeObjectRelease(v106);
}

  __break(1u);
}

    v167 = a9;
    id v93 = *(void *)(v156 + *(int *)(v155 + 32));
    v174 = *(void *)(v93 + 16);
    if (!v174) {
      break;
    }
    v173 = (char *)(v93 + 32);
    swift_bridgeObjectRetain(v93);
    swift_beginAccess(v21, aBlock, 0LL, 0LL);
    id v94 = 0LL;
    v164 = CKCurrentUserDefaultName;
    v166 = xmmword_1001A5EA0;
    v168 = v93;
    while (v94 < *(void *)(v93 + 16))
    {
      v176 = v94;
      id v112 = (uint64_t *)&v173[16 * v94];
      unsigned __int8 v113 = *v112;
      uint64_t v114 = (_UNKNOWN **)v112[1];
      id v115 = *(void *)v21;
      if (*(void *)v21 >> 62)
      {
        if (v115 < 0) {
          a2 = *(void *)v21;
        }
        else {
          a2 = v115 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain_n(*(void *)v21, 2LL);
        swift_bridgeObjectRetain(v114);
        v116 = _CocoaArrayWrapper.endIndex.getter(a2);
        if (v116)
        {
LABEL_41:
          v177 = v115 & 0xC000000000000001LL;
          uint64_t v21 = 4LL;
          while (1)
          {
            unsigned int v19 = (_UNKNOWN **)(v21 - 4);
            id v117 = v177
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, v115)
                 : *(id *)(v115 + 8 * v21);
            id v20 = v117;
            v118 = v21 - 3;
            if (__OFADD__(v19, 1LL)) {
              break;
            }
            uint64_t v119 = v114;
            v120 = v113;
            int v121 = [v117 zoneName];
            a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
            unsigned int v19 = v122;

            unsigned __int8 v113 = v120;
            uint64_t v114 = v119;
            if (a2 == v113 && v19 == v119)
            {
              swift_bridgeObjectRelease_n(v115, 2LL);

              id v115 = (uint64_t)v119;
LABEL_58:
              swift_bridgeObjectRelease(v115);
              swift_bridgeObjectRelease(v119);
              id v42 = v169;
              uint64_t v21 = v165;
              goto LABEL_37;
            }

            a2 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, v19, v113, v119, 0LL);

            swift_bridgeObjectRelease(v19);
            if ((a2 & 1) != 0)
            {
              swift_bridgeObjectRelease(v115);
              goto LABEL_58;
            }

            ++v21;
            if (v118 == v116) {
              goto LABEL_34;
            }
          }

          __break(1u);
          goto LABEL_69;
        }
      }

      else
      {
        v116 = *(void *)((v115 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain_n(*(void *)v21, 2LL);
        swift_bridgeObjectRetain(v114);
        if (v116) {
          goto LABEL_41;
        }
      }

    id v48 = (void *)v50;
    return swift_bridgeObjectRelease(v48);
  }

  id v84 = sub_100122A9C(a1);
  if (v84)
  {
    BOOL v85 = v84;
    uint64_t v86 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    id v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
    if (v88)
    {
      uint64_t v89 = (void *)v88;
      sub_10009E480();
    }

    id v48 = v85;
    return swift_bridgeObjectRelease(v48);
  }

  v104[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v92 = a1;
    }
    else {
      uint64_t v92 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    id v90 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v90);
    swift_bridgeObjectRetain(a1);
    id v93 = _CocoaArrayWrapper.endIndex.getter(v92);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (v93) {
      goto LABEL_43;
    }
LABEL_52:
    id v94 = v104[0];
    id v95 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    v97 = (void *)swift_unknownObjectWeakLoadStrong(v95, v96);
    if (v97) {

    }
    return swift_release(v94);
  }

  id v90 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v90);
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_52;
  }
LABEL_43:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    unsigned __int8 v98 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v98);
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return result;
  }

  swift_release(v104[0]);
  v104[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v90);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v91 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v91);
  }

  return swift_release(v104[0]);
}

    uint64_t v47 = (void *)v49;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  v110[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    id v84 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v84);
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_38;
    }
LABEL_54:
    v97 = v110[0];
    unsigned __int8 v98 = v108;
    swift_beginAccess(v108, v110, 0LL, 0LL);
    signed int v100 = swift_unknownObjectWeakLoadStrong(v98, v99);
    if (v100)
    {
      v101 = (void *)v100;
      sub_10009E480();
    }

    return (void *)swift_release(v97);
  }

  if (a1 < 0) {
    id v95 = a1;
  }
  else {
    id v95 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  id v84 = _CocoaArrayWrapper.endIndex.getter(v95);
  swift_bridgeObjectRelease(a1);
  specialized ContiguousArray.reserveCapacity(_:)(v84);
  swift_bridgeObjectRetain(a1);
  unsigned int v96 = _CocoaArrayWrapper.endIndex.getter(v95);
  uint64_t result = (void *)swift_bridgeObjectRelease(a1);
  if (!v96) {
    goto LABEL_54;
  }
LABEL_38:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    v102 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v102);
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return result;
  }

  swift_release(v110[0]);
  v110[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v84);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    BOOL v85 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v85);
  }

  swift_release(v110[0]);
  uint64_t result = sub_100122A9C(a1);
  if (result)
  {
    uint64_t v86 = result;
    id v87 = v108;
    swift_beginAccess(v108, v110, 0LL, 0LL);
    uint64_t v89 = swift_unknownObjectWeakLoadStrong(v87, v88);
    if (v89)
    {
      id v91 = (void *)v89;
      uint64_t v92 = swift_unknownObjectWeakLoadStrong( v89 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v90);
      if (v92)
      {
        id v93 = (void *)v92;
        id v94 = Array._bridgeToObjectiveC()().super.isa;
        [v93 hmDeviceCloudRecordsRemovedWithRecords:v94];

        swift_bridgeObjectRelease(v86);
        return (void *)swift_unknownObjectRelease(v93);
      }
    }

    uint64_t v47 = v86;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  return result;
}

    id v48 = (void *)v50;
    return swift_bridgeObjectRelease(v48);
  }

  v104[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      id v91 = a1;
    }
    else {
      id v91 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    id v84 = _CocoaArrayWrapper.endIndex.getter(v91);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v84);
    swift_bridgeObjectRetain(a1);
    uint64_t v92 = _CocoaArrayWrapper.endIndex.getter(v91);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (v92) {
      goto LABEL_37;
    }
LABEL_52:
    id v93 = v104[0];
    id v94 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    unsigned int v96 = swift_unknownObjectWeakLoadStrong(v94, v95);
    if (v96)
    {
      v97 = (void *)v96;
      sub_10009E480();
    }

    return swift_release(v93);
  }

  id v84 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v84);
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_52;
  }
LABEL_37:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    unsigned __int8 v98 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v98);
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return result;
  }

  swift_release(v104[0]);
  BOOL v85 = sub_100122A9C(a1);
  if (v85)
  {
    uint64_t v86 = v85;
    id v87 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t v89 = (void *)swift_unknownObjectWeakLoadStrong(v87, v88);
    if (v89) {

    }
    id v48 = v86;
    return swift_bridgeObjectRelease(v48);
  }

  v104[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v84);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v90 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v90);
  }

  return swift_release(v104[0]);
}

      uint64_t v47 = v49;
      return (void *)swift_bridgeObjectRelease(v47);
    }

    id v84 = sub_100122D40(a1, &qword_1002357D0, type metadata accessor for SoundProfileRecord);
    if (v84)
    {
      BOOL v85 = v84;
      uint64_t v86 = v106;
      swift_beginAccess(v106, v108, 0LL, 0LL);
      id v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
      if (v88)
      {
        uint64_t v89 = (void *)v88;
        sub_10009E480();
LABEL_39:
      }
    }

    else
    {
      id v90 = sub_100122D40(a1, &qword_1002357D0, type metadata accessor for SoundProfileRecord);
      if (v90)
      {
        BOOL v85 = v90;
        id v91 = v106;
        swift_beginAccess(v106, v108, 0LL, 0LL);
        id v93 = (void *)swift_unknownObjectWeakLoadStrong(v91, v92);
        if (v93)
        {

          uint64_t v47 = v85;
          return (void *)swift_bridgeObjectRelease(v47);
        }

        goto LABEL_40;
      }

      uint64_t result = sub_100122D40(a1, &qword_1002357D0, type metadata accessor for SoundProfileRecord);
      if (!result) {
        return result;
      }
      BOOL v85 = result;
      id v94 = v106;
      swift_beginAccess(v106, v108, 0LL, 0LL);
      unsigned int v96 = swift_unknownObjectWeakLoadStrong(v94, v95);
      if (v96)
      {
        uint64_t v89 = (void *)v96;
        unsigned __int8 v98 = swift_unknownObjectWeakLoadStrong( v96 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v97);
        if (v98)
        {
          signed int v99 = (void *)v98;
          type metadata accessor for HMDeviceCloudRecord(0LL);
          isa = Array._bridgeToObjectiveC()().super.isa;
          [v99 hmDeviceCloudRecordsRemovedWithRecords:isa];

          swift_bridgeObjectRelease(v85);
          return (void *)swift_unknownObjectRelease(v99);
        }

        goto LABEL_39;
      }
    }

      uint64_t v47 = v49;
      return (void *)swift_bridgeObjectRelease(v47);
    }

    id v83 = sub_100122D40(a1, (uint64_t *)&unk_100235810, type metadata accessor for MagicPairingSettingsRecord);
    if (v83)
    {
      id v84 = v83;
      BOOL v85 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      id v87 = swift_unknownObjectWeakLoadStrong(v85, v86);
      if (v87)
      {
        id v88 = (void *)v87;
        sub_10009E480();
LABEL_39:
      }
    }

    else
    {
      uint64_t v89 = sub_100122D40(a1, (uint64_t *)&unk_100235810, type metadata accessor for MagicPairingSettingsRecord);
      if (v89)
      {
        id v84 = v89;
        id v90 = v103;
        swift_beginAccess(v103, v105, 0LL, 0LL);
        uint64_t v92 = (void *)swift_unknownObjectWeakLoadStrong(v90, v91);
        if (v92)
        {

          uint64_t v47 = v84;
          return (void *)swift_bridgeObjectRelease(v47);
        }

        goto LABEL_40;
      }

      uint64_t result = sub_100122D40(a1, (uint64_t *)&unk_100235810, type metadata accessor for MagicPairingSettingsRecord);
      if (!result) {
        return result;
      }
      id v84 = result;
      id v93 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      id v95 = swift_unknownObjectWeakLoadStrong(v93, v94);
      if (v95)
      {
        id v88 = (void *)v95;
        v97 = swift_unknownObjectWeakLoadStrong( v95 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v96);
        if (v97)
        {
          unsigned __int8 v98 = (void *)v97;
          type metadata accessor for HMDeviceCloudRecord(0LL);
          isa = Array._bridgeToObjectiveC()().super.isa;
          [v98 hmDeviceCloudRecordsRemovedWithRecords:isa];

          swift_bridgeObjectRelease(v84);
          return (void *)swift_unknownObjectRelease(v98);
        }

        goto LABEL_39;
      }
    }

      uint64_t v47 = v49;
      return (void *)swift_bridgeObjectRelease(v47);
    }

    id v83 = sub_100122D40(a1, &qword_100235828, type metadata accessor for DeviceSupportInformationRecord);
    if (v83)
    {
      id v84 = v83;
      BOOL v85 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      id v87 = swift_unknownObjectWeakLoadStrong(v85, v86);
      if (v87)
      {
        id v88 = (void *)v87;
        sub_10009E480();
LABEL_39:
      }
    }

    else
    {
      uint64_t v89 = sub_100122D40(a1, &qword_100235828, type metadata accessor for DeviceSupportInformationRecord);
      if (v89)
      {
        id v84 = v89;
        id v90 = v103;
        swift_beginAccess(v103, v105, 0LL, 0LL);
        uint64_t v92 = (void *)swift_unknownObjectWeakLoadStrong(v90, v91);
        if (v92)
        {

          uint64_t v47 = v84;
          return (void *)swift_bridgeObjectRelease(v47);
        }

        goto LABEL_40;
      }

      uint64_t result = sub_100122D40(a1, &qword_100235828, type metadata accessor for DeviceSupportInformationRecord);
      if (!result) {
        return result;
      }
      id v84 = result;
      id v93 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      id v95 = swift_unknownObjectWeakLoadStrong(v93, v94);
      if (v95)
      {
        id v88 = (void *)v95;
        v97 = swift_unknownObjectWeakLoadStrong( v95 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v96);
        if (v97)
        {
          unsigned __int8 v98 = (void *)v97;
          type metadata accessor for HMDeviceCloudRecord(0LL);
          isa = Array._bridgeToObjectiveC()().super.isa;
          [v98 hmDeviceCloudRecordsRemovedWithRecords:isa];

          swift_bridgeObjectRelease(v84);
          return (void *)swift_unknownObjectRelease(v98);
        }

        goto LABEL_39;
      }
    }

      uint64_t v47 = v49;
      return (void *)swift_bridgeObjectRelease(v47);
    }

    id v83 = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
    if (v83)
    {
      id v84 = v83;
      BOOL v85 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      id v87 = swift_unknownObjectWeakLoadStrong(v85, v86);
      if (v87)
      {
        id v88 = (void *)v87;
        sub_10009E480();
LABEL_39:
      }
    }

    else
    {
      uint64_t v89 = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
      if (v89)
      {
        id v84 = v89;
        id v90 = v103;
        swift_beginAccess(v103, v105, 0LL, 0LL);
        uint64_t v92 = (void *)swift_unknownObjectWeakLoadStrong(v90, v91);
        if (v92)
        {

          uint64_t v47 = v84;
          return (void *)swift_bridgeObjectRelease(v47);
        }

        goto LABEL_40;
      }

      uint64_t result = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
      if (!result) {
        return result;
      }
      id v84 = result;
      id v93 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      id v95 = swift_unknownObjectWeakLoadStrong(v93, v94);
      if (v95)
      {
        id v88 = (void *)v95;
        v97 = swift_unknownObjectWeakLoadStrong( v95 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v96);
        if (v97)
        {
          unsigned __int8 v98 = (void *)v97;
          type metadata accessor for HMDeviceCloudRecord(0LL);
          isa = Array._bridgeToObjectiveC()().super.isa;
          [v98 hmDeviceCloudRecordsRemovedWithRecords:isa];

          swift_bridgeObjectRelease(v84);
          return (void *)swift_unknownObjectRelease(v98);
        }

        goto LABEL_39;
      }
    }

        sub_1000A7CD4(v131, type metadata accessor for CloudCoordinatorConfiguration);
        id v48 = v134;
        int v55 = v127;
      }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void sub_1000219EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_64;
  }
  uint64_t v30 = v3;
  if (dword_100234408 <= 90)
  {
    if (dword_100234408 != -1 || (v6 = _LogCategory_Initialize(&dword_100234408, 90LL), uint64_t v4 = v30, v6))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 472) name]);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Evaluator: Setting LE Pipe send failed: %@, %{error}",  v5,  v30);

      uint64_t v4 = v30;
    }
  }

  if (GestaltGetDeviceClass( [*(id *)(a1 + 32) _setOtherTipiDeviceBTAddress:0 andName:0 sourceVersion:0 withResult:v4]) == 6)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 1340LL) = 0;
    [*(id *)(a1 + 32) _update];
  }

  uint64_t v7 = CUPrintNSError(v30);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if ([v30 code] == (id)-6709)
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Evaluator: SR setting is disabled with this device, DO NOT add to backoff list until we have global setting across devices");
    }

    goto LABEL_57;
  }

  if ([*(id *)(a1 + 32) _isOnDemandConnectInProgress]
    && [v8 isEqualToString:@"kUnknownErr (Cleanup before done)"])
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Evaluator: pipe failure due to onDemand connect");
    }

    goto LABEL_57;
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getWxFWVersion:*(void *)(a1 + 40)]);
  id v10 = (void *)v9;
  unsigned int v11 = &stru_100212678;
  if (v9) {
    unsigned int v11 = (__CFString *)v9;
  }
  uint64_t v12 = v11;

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) identifier]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 UUIDString]);

  if (v14)
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 592) objectForKeyedSubscript:v14]);
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 592) objectForKeyedSubscript:v14]);
      id v18 = [v17 audioState];

      if (!v18 && [@"5A187" compare:v12 options:64] == (id)-1)
      {
        unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1168) isFirstConnectionAfterSREnable]);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:*(void *)(a1 + 40)]);

        if (!v20)
        {
          if (dword_100234408 <= 90
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
          {
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1168) isFirstConnectionAfterSREnable]);
            unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:*(void *)(a1 + 40)]);
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "###Evaluator: LE Pipe failure! Switch to phase1 connection, first connection after SR enable %@",  v25);
          }

          *(_BYTE *)(*(void *)(a1 + 32) + 1218LL) = 1;
          goto LABEL_55;
        }
      }
    }
  }

  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 592) objectForKeyedSubscript:v14]);
    unint64_t v22 = (unint64_t)[v21 audioState];
    if (v22 > 3) {
      unint64_t v23 = "?";
    }
    else {
      unint64_t v23 = off_100207970[v22];
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Skip phase 1 fallback. WxFw %@ WxAudioState %s",  v12,  v23);
  }

  if ([v30 code] == (id)-6722)
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Evaluator: LE pipe timeout... ");
    }

LABEL_55:
    [*(id *)(*(void *)(a1 + 32) + 336) trigger];
    goto LABEL_56;
  }

  if ([v30 code] == (id)-6720)
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Evaluator: headset not routed on other side, run evaluator again...");
    }

    goto LABEL_55;
  }

          uint64_t v35 = v90;
LABEL_56:

          ((void (*)(void *))v24[2])(v24);
          _Block_object_dispose(&v115, 8);

          goto LABEL_57;
        }
      }
    }

    id v42 = (void *)objc_claimAutoreleasedReturnValue([v14 pipePendingRequest]);

    if (v42)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]",  30LL,  "Previous pipe request exists, clean it up");
      }

      unsigned int v45 = (void *)objc_claimAutoreleasedReturnValue([v14 pipePendingRequest]);
      id v46 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v45 timer]);

      if (v46) {
        dispatch_source_cancel(v46);
      }
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v14 pipePendingRequest]);
      [v47 setTimer:0];

      [v14 setPipePendingRequest:0];
    }

    id v48 = CFStringGetTypeID();
    unsigned __int8 v49 = CFDictionaryGetTypedValue(v23, @"btAddress", v48, 0LL);
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(v49);
    if (v86)
    {
      unsigned __int8 v50 = CFStringGetTypeID();
      unsigned int v51 = CFDictionaryGetTypedValue(v23, @"btName", v50, 0LL);
      id v83 = (void *)objc_claimAutoreleasedReturnValue(v51);
      if (v83)
      {
        id v88 = (void *)objc_claimAutoreleasedReturnValue([v14 _verifyWxConnectedBTAddress:v91 withVersion:v92]);
        int v52 = (void *)objc_claimAutoreleasedReturnValue([v88 identifier]);
        int v53 = [v52 isEqualToString:@"FF:FF:FF:FF:FF:FF"];

        if (v53)
        {
          int v54 = NSErrorF(NSOSStatusErrorDomain, 4294960587LL, "Source has SR disabled!!! BACK OFF!");
          int v55 = objc_claimAutoreleasedReturnValue(v54);
          uint64_t v56 = (void *)v116[5];
          v116[5] = v55;
        }

        else
        {
          id v57 = (void *)objc_claimAutoreleasedReturnValue([v88 btAddressData]);
          uint64_t v58 = CUPrintNSDataAddress(v57);
          id v82 = objc_claimAutoreleasedReturnValue(v58);

          if ([v14 _verifyWxConnectedRouted:v82])
          {
            uint64_t v59 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
            -[BTSmartRoutingRouteRequest setTimer:](v19, "setTimer:", v59);
            handler[0] = _NSConcreteStackBlock;
            handler[1] = 3221225472LL;
            handler[2] = sub_10004DC78;
            handler[3] = &unk_100207598;
            v103 = v22;
            v104 = v23;
            uint64_t v105 = self;
            v106 = v19;
            unsigned int v107 = v14;
            int v60 = v88;
            v108 = v60;
            dispatch_source_set_event_handler(v59, handler);
            CUDispatchTimerSet(v59, 25.0, -1.0, 1.0);
            dispatch_activate(v59);
            -[BTSmartRoutingRouteRequest setWxAddress:](v19, "setWxAddress:", v82);
            uint64_t v79 = v59;
            uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
            id v81 = (void *)objc_claimAutoreleasedReturnValue([v61 _myBluetoothAddressString]);

            if (v81)
            {
              v121[0] = v81;
              v121[1] = v86;
              uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v121,  2LL));
              if (dword_100234408 <= 30
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]",  30LL,  "Route request update Tipi table: Wx %@, addresses %##@",  v60,  v62);
              }

              [v14 setPipePendingRequest:v19];
              [v14 _setTipiElectionInProgress:1];
              [v14 _setTipiElectionReceivedLePipe:v82];
              -[BTSmartRoutingRouteRequest setProgressStarted:](v19, "setProgressStarted:", 1LL);
              [v14 _startTipiSetupTicks];
              uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v60 btAddressData]);
              uint64_t v64 = CUPrintNSDataAddress(v63);
              uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
              [v14 _updateOtherTipiDevice:v65 otherAddress:v86 otherName:v83 otherVersion:v92 withResult:0];

              v95[0] = _NSConcreteStackBlock;
              v95[1] = 3221225472LL;
              id v95[2] = sub_10004DDA4;
              v95[3] = &unk_1002075C0;
              unsigned int v96 = v91;
              v97 = v62;
              unsigned __int8 v98 = v14;
              signed int v99 = v60;
              signed int v100 = self;
              v101 = v19;
              [v14 _updateAccessoryID:v99 connectionDeviceAddresses:v62 completion:v95];
            }

            else
            {
              __int128 v77 = NSErrorF(NSOSStatusErrorDomain, 4294960591LL, "No self Bluetooth address.");
              id v78 = objc_claimAutoreleasedReturnValue(v77);
              uint64_t v62 = (void *)v116[5];
              v116[5] = v78;
            }
          }

          else
          {
            unsigned int v75 = NSErrorF(NSOSStatusErrorDomain, 4294960576LL, "Wx device is not routed... reject incoming pipe!");
            unsigned int v76 = objc_claimAutoreleasedReturnValue(v75);
            id v80 = (void *)v116[5];
            v116[5] = v76;
          }

          uint64_t v56 = (void *)v82;
        }
      }

      else
      {
        double v73 = NSErrorF(NSOSStatusErrorDomain, 4294960591LL, "No device name");
        __int128 v74 = objc_claimAutoreleasedReturnValue(v73);
        uint64_t v89 = (void *)v116[5];
        v116[5] = v74;
      }
    }

    else
    {
      id v71 = NSErrorF(NSOSStatusErrorDomain, 4294960591LL, "No device address");
      uint64_t v72 = objc_claimAutoreleasedReturnValue(v71);
      BOOL v85 = (void *)v116[5];
      v116[5] = v72;
    }

    goto LABEL_54;
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue([v14 pipePendingRequest]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 senderIDS]);
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]",  30LL,  "Received route request: from %@ however we already have requesting pending with %@ reject this.",  v13,  v26);
  }

  uint64_t v43 = NSErrorF(NSOSStatusErrorDomain, 4294960595LL, "Reject connection already have pending request.");
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
  (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0LL, 0LL, v44);

LABEL_57:
}

        goto LABEL_56;
      }

      unsigned int v45 = -[CloudXPCService manateeZoneUpgraded](self, "manateeZoneUpgraded");
      id v46 = sub_100060178("XPC");
      uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      id v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
      if ((v45 & 1) != 0)
      {
        if (v48)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Manatee getSignInStatus", buf, 2u);
        }

        unsigned __int8 v49 = &off_100205368;
      }

      else
      {
        if (v48)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "getSignInStatus", buf, 2u);
        }

        unsigned __int8 v49 = off_100205360;
      }

      unsigned __int8 v50 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](*v49, "sharedInstance"));
      [v50 forceAccountStatus];
    }

    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[CloudXPCService deviceManager](self, "deviceManager"));
    [v36 fetchCached];
    goto LABEL_48;
  }

    uint64_t v9 = &OBJC_CLASS___AADeviceManagerDaemon;
  }

  uint64_t v9 = v52;
LABEL_49:
}

  if ((_DWORD)v230) {
    goto LABEL_56;
  }
LABEL_30:
  if (!(_DWORD)v231) {
    return result;
  }
LABEL_57:
  swift_bridgeObjectRelease(*(void *)(v32 + v40[29] + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v213 + 8))(v32 + v40[30], v214);
}

LABEL_56:
LABEL_57:
  *(_BYTE *)(*(void *)(a1 + 32) + 1219LL) = 0;
  uint64_t v26 = *(void *)(a1 + 32);
  int v27 = *(void **)(v26 + 472);
  *(void *)(v26 + 472) = 0LL;

  if ([*(id *)(a1 + 32) _isOnDemandConnectInProgress]
    && [v8 isEqualToString:@"kUnknownErr (Cleanup before done)"])
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4",  90LL,  "Evaluator: Don't cleanup headset for OnDemand connect");
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 1217LL) = 0;
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v29 = *(void **)(v28 + 320);
    *(void *)(v28 + 320) = 0LL;
  }

  uint64_t v4 = v30;
LABEL_64:
}
}

      a1 = v73;
      id v10 = &OBJC_CLASS___AADeviceManagerDaemon;
    }
  }

void sub_100021F5C(id a1, NSString *a2, SRDiscoveredDevice *a3, BOOL *a4)
{
}

void sub_100022D94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100022DB8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  BOOL v5 = [a3 routingAction] == 2;
  int v6 = v7;
  if (!v5)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAddWxMapDeviceFromConnectedDevice:]_block_invoke",  30LL,  "SmartRouting making %@ a tipi device.",  v7);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    int v6 = v7;
  }
}

void sub_100023428(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100234408 <= 90)
    {
      id v7 = v3;
      if (dword_100234408 != -1 || (v6 = _LogCategory_Initialize(&dword_100234408, 90LL), uint64_t v4 = v7, v6))
      {
        BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 472) name]);
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]_block_invoke",  90LL,  "Evaluator: Setting LE Pipe send failed: %@, %{error}",  v5,  v7);

        uint64_t v4 = v7;
      }
    }
  }
}

void sub_1000234D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v6 = v3;
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 472) name]);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]_block_invoke_2",  90LL,  "Evaluator: Setting LE Pipe send failed: %@, %{error}",  v4,  v6);
    }

    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    [v5 _setOtherTipiDeviceInfo:0 andName:0 andVersion:0];

    [*(id *)(a1 + 32) _tipiHealingAttempt];
    id v3 = v6;
  }
}

void sub_1000235A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if ([a2 isEqual:*(void *)(a1 + 32)])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);

    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
      [*(id *)(a1 + 40) _updateNearbyDeviceState:*(void *)(a1 + 32) withAddress:v7 withEasyPairing:0 withState:1];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _myBluetoothAddressString]);
      v11[0] = v7;
      v11[1] = v8;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 184) objectForKeyedSubscript:*(void *)(a1 + 32)]);
      [*(id *)(a1 + 40) _updateAccessoryID:v10 connectionDeviceAddresses:v9 completion:&stru_100206CF8];
    }

    else if ([*(id *)(*(void *)(a1 + 40) + 1152) count] == (id)1)
    {
      [*(id *)(a1 + 40) _updateNearbyDeviceState:*(void *)(a1 + 32) withAddress:&stru_100212678 withEasyPairing:0 withState:1];
    }
  }
}

void sub_100023700(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100234408 <= 90
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]_block_invoke_4",  90LL,  "Evaluator: failed to update triangle table upon connection");
  }

  else
  {
  }

void sub_1000240DC(_Unwind_Exception *a1)
{
}

void sub_100024144(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v20 = a2;
  id v8 = a3;
  if (dword_100234408 <= 50 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 50LL)))
  {
    uint64_t v9 = "no";
    else {
      id v10 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke",  50,  "Device address %@ is inEar %s inEarDisabled %s %d",  v20,  v10,  v9,  [*(id *)(a1[4] + 1152) count]);
  }

  if (([v8 inEarDisabled] & 1) != 0 || objc_msgSend(v8, "inEar"))
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), a2);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
    uint64_t v12 = *(void *)(a1[6] + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceVersion]);
    uint64_t v15 = *(void *)(a1[7] + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = objc_claimAutoreleasedReturnValue([v8 deviceVersion]);
    uint64_t v18 = *(void *)(a1[8] + 8LL);
    unsigned int v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_1000242DC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
  if (v7
    && *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)
    && objc_msgSend(v7, "isEqualToString:"))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [*(id *)(a1 + 32) clientID]));
    if (!*(_BYTE *)(*(void *)(a1 + 40) + 794LL))
    {
LABEL_50:

      goto LABEL_51;
    }

    if ([v8 routingAction] == 2)
    {
      objc_msgSend(*(id *)(a1 + 48), "setAction:", objc_msgSend(v8, "routingAction"));
      else {
        id v11 = v7;
      }
      [*(id *)(a1 + 48) setDeviceAddress:v11];
      uint64_t v12 = *(void **)(a1 + 48);
      id v13 = @"Not tipi device";
      goto LABEL_10;
    }

    if ((int)[*(id *)(a1 + 32) audioScore] < 1)
    {
      if (*(_BYTE *)(a1 + 104)
        && [v8 hasOwnership]
        && [v8 otherTipiAudioCategory] <= 0x64)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Hijack: Routing request indicated buds went in ear, other tipi is idle.");
        }

        [*(id *)(a1 + 48) setAction:1];
        [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
        objc_msgSend(*(id *)(a1 + 48), "setReason:", @"Buds in ear, other tipi idle.");
        objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
        [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
        *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
        *a4 = 1;
        goto LABEL_50;
      }

      if ([*(id *)(*(void *)(a1 + 40) + 120) isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)])
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Budswap detected device, respond with not route for %@",  *(void *)(*(void *)(a1 + 40) + 120LL));
        }

        [v8 _setRoutingAction:3];
      }

      objc_msgSend(*(id *)(a1 + 48), "setAction:", objc_msgSend(v8, "routingAction"));
      else {
        uint64_t v38 = 0LL;
      }
      [*(id *)(a1 + 48) setDeviceAddress:v38];
      unsigned int v39 = [v8 routingAction];
      uint64_t v40 = @"not routed";
      if (v39 == 1) {
        uint64_t v40 = @"routed";
      }
      id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Tipi device is: %@",  v40));
      [*(id *)(a1 + 48) setReason:v41];

      goto LABEL_48;
    }

    uint64_t v14 = mach_absolute_time();
    uint64_t v15 = UpTicksToSeconds(v14 - *(void *)(*(void *)(a1 + 40) + 88LL));
    uint64_t v16 = mach_absolute_time();
    double v17 = UpTicksToSecondsF(v16 - *(void *)(*(void *)(a1 + 40) + 112LL));
    uint64_t v18 = mach_absolute_time();
    int v19 = UpTicksToSeconds(v18 - (void)[v8 otherTipiManuallyRouteTicks]);
    id v20 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
    if (dword_100234408 <= 30)
    {
      int v21 = v19;
      if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Hijack: LastRequest %llus lastResponse %.2fs responseTick %u otherTipiManualRoute %us",  v15,  v17,  *(void *)(*(void *)(a1 + 40) + 112LL),  v21);
      }
    }

    unint64_t v91 = v15;
    if (([*(id *)(a1 + 32) flags] & 2) != 0)
    {
      unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1152) objectForKeyedSubscript:v7]);
      id v23 = [v22 hijackBackoffTicks];

      if (!v23)
      {
        [*(id *)(a1 + 48) setAction:3];
        [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
        uint64_t v12 = *(void **)(a1 + 48);
        id v13 = @"Fake hijack should not route";
LABEL_10:
        [v12 setReason:v13];
LABEL_48:
        objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
        [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
LABEL_49:
        *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
        *a4 = 1;
        goto LABEL_50;
      }
    }

    if ([v8 otherTipiDeviceIsWatch]
      && [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) isEqualToString:@"Alarm"])
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appBundleID]);
      unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Opt-out SR for app %@ on phone since the other tipi device is a watch",  v24));

      [*(id *)(a1 + 48) setAction:3];
      [*(id *)(a1 + 48) setDeviceAddress:0];
      [*(id *)(a1 + 48) setReason:v25];
      objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
      [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
      *a4 = 1;

      goto LABEL_50;
    }

    objc_msgSend(v8, "setAudioRoutingScore:", objc_msgSend(*(id *)(a1 + 32), "audioScore"));
    *(void *)(*(void *)(a1 + 40) + 88LL) = mach_absolute_time();
    [*(id *)(*(void *)(a1 + 40) + 1208) setHijackRelaySent:0];
    objc_msgSend( *(id *)(*(void *)(a1 + 40) + 1208),  "setHijackScore:",  objc_msgSend(*(id *)(a1 + 32), "audioScore"));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appBundleID]);
    [*(id *)(*(void *)(a1 + 40) + 1208) setHijackPlayingApp:v26];

    int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) objectForKeyedSubscript:v7]);
    unsigned int v28 = [v27 audioStreamState];
    if (v28 > 3) {
      uint64_t v29 = "?";
    }
    else {
      uint64_t v29 = off_100207B40[v28];
    }
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v29));
    [*(id *)(*(void *)(a1 + 40) + 1208) setWxStreamState:v30];

    uint64_t v31 = *(void *)(a1 + 40);
    if (*(void *)(v31 + 784))
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v31 + 1152) objectForKeyedSubscript:v7]);
      id v33 = [v32 hijackBackoffTicks];

      uint64_t v31 = *(void *)(a1 + 40);
      if (v33)
      {
        id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v31 + 1152) objectForKeyedSubscript:v7]);
        uint64_t v35 = (uint64_t)objc_msgSend( (id)v31,  "_checkTickswithinWindow:withWindow:",  objc_msgSend(v34, "hijackBackoffTicks"),  *(void *)(*(void *)(a1 + 40) + 784));

        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          uint64_t v36 = UpTicksToSeconds(v35);
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1152) objectForKeyedSubscript:v7]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30,  "Hijackblocking: Hijack Request, device %@ with %ll{dur} remaining, last ticks are %llu",  v7,  v36,  [v37 hijackBackoffTicks]);

          id v20 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
        }

        if (v35 >= 1)
        {
          [*(id *)(a1 + 48) setAction:4];
          else {
            uint64_t v42 = 0LL;
          }
          [*(id *)(a1 + 48) setDeviceAddress:v42];
          [*(id *)(a1 + 48) setReason:@"Hijack Block Period"];
          objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
          [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
          [*(id *)(a1 + 40) _startHijackMetricSubmission:4 wxAddress:v7 version:@"NA"];
          goto LABEL_49;
        }

        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1152) objectForKeyedSubscript:v7]);
        [v43 _setHijackBackoffTick:0];

        uint64_t v31 = *(void *)(a1 + 40);
      }
    }

    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([(id)v31 _getWxFWVersion:v7]);
    if ([v8 isRoutingActionInitialized])
    {
      if ([*(id *)(a1 + 40) _deviceSupportsHijackV2:v44 withDevice:v8] && v44)
      {
        if (*(_BYTE *)(*(void *)(a1 + 40) + 824LL))
        {
          [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
          objc_msgSend(v8, "setAudioRoutingClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
          unsigned int v45 = *(void **)(a1 + 40);
          id v46 = [*(id *)(a1 + 32) audioScore];
          id v93 = 0LL;
          id v47 = [v45 allowHijackWithAudioScore:v46 hijackRoute:v7 hijackDeniedReason:&v93];
          id v48 = v93;
          if ([v48 isEqualToString:@"Fall back to legacy hijack"])
          {
            uint64_t v89 = v48;
            id v90 = v44;
            goto LABEL_78;
          }

          [*(id *)(a1 + 40) _mediaRouteHijackResponseHandlerFor:v7 allowedToHijack:v47 withReason:v48];
          *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;

LABEL_74:
          *a4 = 1;

          goto LABEL_50;
        }

        id v90 = v44;
      }

      else
      {
        int inst_meths = (int)v20[14].inst_meths;
        id v90 = v44;
        if (inst_meths <= 30 && (inst_meths != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceVersion]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Device setup doesn't support HijackV2: fwVersion %@, tipi version %@",  v44,  v51);
        }
      }

      uint64_t v89 = 0LL;
LABEL_78:
      uint64_t v52 = mach_absolute_time();
      unint64_t v53 = UpTicksToSeconds(v52 - *(void *)(*(void *)(a1 + 40) + 912LL));
      BOOL v88 = v53 <= 5 && (int)[*(id *)(a1 + 32) audioScore] < 501;
      [*(id *)(*(void *)(a1 + 40) + 1208) setHijackVersion:@"V1"];
      uint64_t v54 = mach_absolute_time();
      int v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 592) objectForKeyedSubscript:v9]);
      unint64_t v87 = UpTicksToMilliseconds(v54 - (void)[v55 lastConnectionTicks]);

      uint64_t v56 = mach_absolute_time();
      id v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 592) objectForKeyedSubscript:v9]);
      uint64_t v58 = UpTicksToMilliseconds(v56 - (void)[v57 lastWxAdvTicks]);

      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        uint64_t v59 = "no";
        if (v88) {
          uint64_t v59 = "yes";
        }
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Hijack: timeSinceLastRequest %llus timeSinceRingtoneStopped %llus musicResumeHijack %s, last connection %llums , last adv %llums",  v91,  v53,  v59,  v87,  v58);
      }

      unint64_t v86 = v58;
      int v60 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) objectForKeyedSubscript:v7]);
      if ([v60 audioStreamState])
      {
        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) objectForKeyedSubscript:v7]);
        if ((int)[v61 audioStreamState] <= 1 && v91 > 5)
        {
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTName]);
          unsigned int v92 = [v62 isEqualToString:@"Mac"] | v88;

          if ((v92 & 1) == 0)
          {
            uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceVersion]);
            [v63 doubleValue];
            uint64_t v64 = v90;
            BOOL v66 = v65 < 1.2
               || [@"3E725" compare:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) options:64] == (id)1;

            if (dword_100234408 <= 30
              && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
            {
              double v73 = "no";
              if (v66) {
                double v73 = "yes";
              }
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Hijack request, other side is not streaming, route, legacy routing behavior = %s",  v73);
            }

            [v8 _setRoutingAction:1];
            [*(id *)(a1 + 48) setAction:1];
            [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
            [*(id *)(a1 + 48) setReason:@"Tipi device should be routed"];
            objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
            [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
            ++*(_DWORD *)(*(void *)(a1 + 40) + 100LL);
            if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) {
              BOOL v74 = v66;
            }
            else {
              BOOL v74 = 0;
            }
            if (v74)
            {
              v94[0] = @"audioRoutingScore";
              unsigned int v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 32) audioScore]));
              v95[0] = v75;
              v95[1] = &__kCFBooleanTrue;
              v94[1] = @"audioRoutingSetOwnershipToFalse";
              v94[2] = @"reason";
              id v95[2] = @"LegacyHijack";
              unsigned int v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v95,  v94,  3LL));

              [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:v76 andWxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) andOtherAddress:0];
            }

            uint64_t v77 = mach_absolute_time();
            unint64_t v78 = UpTicksToSeconds(v77 - *(void *)(*(void *)(a1 + 40) + 1056LL));
            uint64_t v79 = *(void **)(*(void *)(a1 + 40) + 1320LL);
            if (v79)
            {
              [v79 invalidate];
              uint64_t v80 = *(void *)(a1 + 40);
              id v81 = *(void **)(v80 + 1320);
              *(void *)(v80 + 1320) = 0LL;
            }

            if (([v8 routed] & 1) != 0
              || (uint64_t v82 = *(void *)(a1 + 40), *(void *)(v82 + 1056)) && *(double *)(v82 + 1040) > (double)v78)
            {
              if (dword_100234408 <= 30
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                unsigned int v83 = [v8 inEar];
                id v84 = "no";
                if (v83) {
                  id v84 = "yes";
                }
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Connected banner cool off period is %llus, inEar state is %s",  v78,  v84);
              }
            }

            BOOL v85 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);

            if (v85)
            {
              [*(id *)(a1 + 40) submitHijackMetric:v7 withV1:1];
              [*(id *)(a1 + 40) _startRouteCheckTimer:v7 andType:5];
              [*(id *)(a1 + 40) _startRouteCheckTimer:v7 andType:6];
              [*(id *)(a1 + 40) submitRouteActivityMetric:v7 activity:@"Hijack_V1AirpodIdle"];
            }

            goto LABEL_140;
          }

LABEL_95:
          [*(id *)(a1 + 40) _setHighPriorityTag:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) withHighPriority:1];
          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);

          uint64_t v68 = *(void *)(a1 + 40);
          uint64_t v64 = v90;
          if (v67)
          {
            ++*(_DWORD *)(v68 + 100);
            [*(id *)(*(void *)(a1 + 40) + 1208) setHijackRelaySent:1];
            v96[0] = @"audioRoutingScore";
            uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 32) audioScore]));
            v97[0] = v69;
            v97[1] = v10;
            v96[1] = @"audioRoutingRequestID";
            v96[2] = @"audioRoutingHijackRequest";
            v97[2] = &__kCFBooleanTrue;
            int v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v97,  v96,  3LL));

            [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
            objc_msgSend(v8, "setAudioRoutingClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
            [v8 setConduitMessageTicks:mach_absolute_time()];
            [*(id *)(a1 + 40) _relayConduitMessageStartTimer:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) withOptions:v70];
            [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:v70 andWxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) andOtherAddress:0];

LABEL_140:
            *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
            *a4 = 1;

            goto LABEL_50;
          }

          id v71 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v68 + 592) objectForKeyedSubscript:v9]);
          if ([v71 sourceCount] < 2)
          {
          }

          else
          {
            id v72 = [@"5A187" compare:v90 options:64];

            if (v72 == (id)-1LL)
            {
              if (dword_100234408 <= 30
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Starting tipi healing hijack timer as Wx adv indicates source is 2, wait for tipi healing to complete");
              }

              goto LABEL_139;
            }
          }

          if (v86 < v87 || [@"5A187" compare:v90 options:64] != (id)-1)
          {
            [*(id *)(a1 + 48) setAction:1];
            [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
            [*(id *)(a1 + 48) setReason:@"Tipi device should be routed"];
            objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
            [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
            goto LABEL_140;
          }

          if (dword_100234408 <= 90
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  90LL,  "Haven't seen wx adv since connection start, last connect start event %llums, last adv event %llums");
          }

LABEL_139:
          [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
          objc_msgSend( *(id *)(a1 + 40),  "_tipiHealingHijackTimerStart:withScore:",  v7,  objc_msgSend(*(id *)(a1 + 32), "audioScore"));
          [v8 setAudioRoutingRequest:*(void *)(a1 + 32)];
          goto LABEL_140;
        }
      }

      goto LABEL_95;
    }

    int v49 = (int)v20[14].inst_meths;
    if (v49 <= 30 && (v49 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2",  30LL,  "Starting tipi healing hijack timer, waiting for tipi table message");
    }
    objc_msgSend( *(id *)(a1 + 40),  "_tipiHealingHijackTimerStart:withScore:",  v7,  objc_msgSend(*(id *)(a1 + 32), "audioScore"));
    [v8 setAudioRoutingRequest:*(void *)(a1 + 32)];
    [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
    objc_msgSend(v8, "setAudioRoutingClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    goto LABEL_74;
  }

LABEL_51:
}

                LOBYTE(v35) = 0;
                goto LABEL_52;
              }
            }
          }

          id v10 = 1;
        }
      }

      uint64_t v9 = [v6 countByEnumeratingWithState:&v51 objects:v61 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  else
  {
    id v10 = 0;
  }

  uint64_t v30 = sub_100060178("MagicPairing");
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    if ((v10 & 1) != 0) {
      uint64_t v32 = "yes";
    }
    else {
      uint64_t v32 = "no";
    }
    id v33 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    else {
      id v34 = "no";
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v56 = v32;
    id v57 = 2080;
    uint64_t v58 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "allDevicesJazzKon? - %s, current manatee state - %s",  buf,  0x16u);
  }

  if ((v10 & 1) != 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    LODWORD(v35) = [v6 manateeZoneUpgraded] ^ 1;
LABEL_52:
  }

  else
  {
    LOBYTE(v35) = 0;
  }

  return (char)v35;
}

  if (!(_DWORD)v227)
  {
LABEL_26:
    if ((_DWORD)v233) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }

    int v122 = sub_10013A76C();
    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    unsigned int v123 = v158;
    char v124 = sub_100098D58(v158, (uint64_t)qword_10023DE08);
    unsigned __int8 v125 = v51;
    unsigned __int8 v126 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
    BOOL v127 = (uint64_t)v157;
    v126(v157, v124, v123);
    BOOL v128 = (void *)sub_100138608(v97, v75, v127, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
    swift_release(v122);
    uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v127, v123);
    if (!v128)
    {
      v130 = static os_log_type_t.error.getter(v129);
      uint64_t v131 = qword_10023DFC8;
      id v47 = swift_allocObject(v149, 72LL, 7LL);
      *(_OWORD *)(v47 + 16) = xmmword_1001A5EA0;
      char v132 = v150;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = v132;
      *(void *)(v47 + 32) = v97;
      *(void *)(v47 + 40) = v75;
      swift_bridgeObjectRetain(v75);
      os_log(_:dso:log:_:_:)( v130,  &_mh_execute_header,  v131,  "HMDeviceCloudRecord not found to remove: %@",  43LL,  2LL,  v47);
      goto LABEL_18;
    }

    sub_100155270(v128, (void (*)(void))v160, v159);

    return;
  }

  v164 = &type metadata for AudioAccessoryFeatures;
  v165 = sub_10009E740();
  LOBYTE(v163[0]) = 0;
  unsigned int v96 = isFeatureEnabled(_:)(v163);
  sub_10009A498(v163);
  v97 = v161;
  if ((v96 & 1) == 0) {
    goto LABEL_41;
  }
  unsigned __int8 v98 = sub_10013A76C();
  if (qword_100234BF8 != -1) {
    swift_once(&qword_100234BF8, sub_100113FD8);
  }
  signed int v99 = v158;
  signed int v100 = sub_100098D58(v158, (uint64_t)qword_10023DF40);
  v101 = v51;
  v102 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  v103 = (uint64_t)v157;
  v102(v157, v100, v99);
  v104 = (void *)sub_100138608(v97, v75, v103, &qword_100236E48, (uint64_t)sub_100166F6C);
  swift_release(v98);
  uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v103, v99);
  if (!v104)
  {
    id v115 = static os_log_type_t.error.getter(v105);
    v116 = qword_10023DFC8;
    id v47 = swift_allocObject(v149, 72LL, 7LL);
    *(_OWORD *)(v47 + 16) = xmmword_1001A5EA0;
    id v117 = v150;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = v117;
    *(void *)(v47 + 32) = v97;
    *(void *)(v47 + 40) = v75;
    swift_bridgeObjectRetain(v75);
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v116, "AADeviceRecord not found to remove: %@", 38LL, 2LL, v47);
    goto LABEL_18;
  }

  sub_10015303C(v104, v160, v159);
}

void sub_100025814( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

void sub_10002587C(void *a1, uint64_t a2, void *a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 model]);
  if ([v6 hasPrefix:@"iPhone"])
  {
    uint64_t v4 = a1[4];
  }

  else if ([v6 hasPrefix:@"iPad"])
  {
    uint64_t v4 = a1[5];
  }

  else if ([v6 hasPrefix:@"iPod"])
  {
    uint64_t v4 = a1[6];
  }

  else if ([v6 containsString:@"Mac"])
  {
    uint64_t v4 = a1[7];
  }

  else if ([v6 hasPrefix:@"Watch"])
  {
    uint64_t v4 = a1[8];
  }

  else if ([v6 hasPrefix:@"AppleTV"])
  {
    uint64_t v4 = a1[9];
  }

  else
  {
    id v5 = v6;
    if (([v5 hasPrefix:@"AudioAccessory1,"] & 1) == 0
      && ([v5 hasPrefix:@"AudioAccessory5,"] & 1) == 0
      && ([v5 hasPrefix:@"AudioAccessory6,"] & 1) == 0
      && ([v5 hasPrefix:@"HomePod"] & 1) == 0)
    {

      goto LABEL_19;
    }

    uint64_t v4 = a1[10];
  }

  ++*(_DWORD *)(*(void *)(v4 + 8) + 24LL);
LABEL_19:
}

id sub_1000264A0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 576) scanRate] != (id)20) {
    [*(id *)(*(void *)(a1 + 32) + 576) setScanRate:20];
  }
  id result = [*(id *)(*(void *)(a1 + 32) + 1368) scanRate];
  if (result != (id)20) {
    return [*(id *)(*(void *)(a1 + 32) + 1368) setScanRate:20];
  }
  return result;
}

void sub_100026B48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

id sub_100026B60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _lowBatterySave:1];
}

void sub_100026B6C(uint64_t a1, void *a2, void *a3)
{
  id v18 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  [v18 lastBatteryLevel];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v7, @"batteryLevel");

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v18 lastBatteryType]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v8, @"batteryType");

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v18 deviceAddress]);
  if (v9) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v9, @"deviceAddress");
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v5, @"id");
  [v18 lastSeenTime];
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v10, @"lastSeen");

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v18 name]);
  if (v11) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v11, @"name");
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v18 productID]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v12, @"productID");

  [v18 reportTime];
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v13, @"reportTime");

  uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (!v14)
  {
    uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
    double v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  }

  [v14 addObject:v6];
}

void sub_1000272CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_100027348(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 advertisementFields]);
  if (CFDictionaryGetInt64(v8, @"paired", 0LL))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 488) objectForKeyedSubscript:v5]);
    [v9 lastBatteryLevel];
    double v11 = v10;
    int Int64Ranged = CFDictionaryGetInt64Ranged(v8, @"pid", 0LL, 0xFFFFFFFFLL, 0LL);
    id v57 = v5;
    uint64_t v54 = v8;
    int v55 = v7;
    if (Int64Ranged == 8216 || Int64Ranged == 8213)
    {
      double v13 = 0.4;
      double v14 = 0.2;
      double v15 = 0.1;
    }

    else
    {
      double v13 = 0.2;
      double v15 = 0.05;
      double v14 = 0.1;
    }

    uint64_t v61 = a1;
    if (v11 <= v13) {
      double v16 = v14;
    }
    else {
      double v16 = v13;
    }
    if (v11 > v14) {
      double v17 = v16;
    }
    else {
      double v17 = v15;
    }
    if (v11 > v15) {
      double v18 = v17;
    }
    else {
      double v18 = -1.0;
    }
    if (v11 > 0.0) {
      double v13 = v18;
    }
    if (v13 > 0.1 && Int64Ranged == 8208) {
      double v20 = 0.1;
    }
    else {
      double v20 = v13;
    }
    unint64_t v53 = v9;
    int v60 = (char *)objc_msgSend(v9, "lastBatteryType", 0.1);
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    uint64_t v56 = v6;
    id obj = (id)objc_claimAutoreleasedReturnValue([v6 batteryInfo]);
    id v21 = [obj countByEnumeratingWithState:&v62 objects:v66 count:16];
    if (v21)
    {
      id v22 = v21;
      char v23 = 0;
      char v24 = 0;
      char v25 = 0;
      uint64_t v26 = 0LL;
      uint64_t v59 = *(void *)v63;
      double v27 = 1.0;
      LOBYTE(v2_Block_object_dispose(va, 8) = 1;
      do
      {
        for (i = 0LL; i != v22; i = (char *)i + 1)
        {
          if (*(void *)v63 != v59) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)i);
          uint64_t v31 = (char *)[v30 batteryType];
          uint64_t v32 = v31;
          BOOL v33 = v31 == v60;
          double v35 = *(double *)(*(void *)(v61 + 32) + 744LL);
          if (v35 == 0.0) {
            [v30 batteryLevel];
          }
          v25 |= v33;
          int v28 = (v35 >= 0.5) & v28;
          if (v35 < v27) {
            double v36 = v35;
          }
          else {
            double v36 = v27;
          }
          if (v35 < v27) {
            uint64_t v37 = v32;
          }
          else {
            uint64_t v37 = v26;
          }
          if (v35 <= v20)
          {
            char v24 = 1;
            double v27 = v36;
            uint64_t v26 = v37;
          }
        }

        id v22 = [obj countByEnumeratingWithState:&v62 objects:v66 count:16];
      }

      while (v22);
    }

    else
    {
      char v23 = 0;
      char v24 = 0;
      char v25 = 0;
      uint64_t v26 = 0LL;
      double v27 = 1.0;
      int v28 = 1;
    }

    id v7 = v55;
    char v38 = v23;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      unsigned int v39 = "no";
      if ((v23 & 1) != 0) {
        uint64_t v40 = "yes";
      }
      else {
        uint64_t v40 = "no";
      }
      if (v28) {
        id v41 = "yes";
      }
      else {
        id v41 = "no";
      }
      if ((v24 & 1) != 0) {
        unsigned int v39 = "yes";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _lowBatteryUpdate]_block_invoke",  30LL,  "Low battery check: AC %s, High %s, Low %s, Lowest %.3f%%, Threshold %.3f%%, %@",  v40,  v41,  v39,  v27 * 100.0,  v20 * 100.0,  v55);
    }

    id v5 = v57;
    id v8 = v54;
    if ((v38 & 1) != 0)
    {
      id v6 = v56;
      [*(id *)(v61 + 32) _lowBatteryClearSFDevice:v56 reason:"charging"];
      ++*(_DWORD *)(*(void *)(*(void *)(v61 + 48) + 8LL) + 24LL);
    }

    else
    {
      if (v28)
      {
        if ((v25 & 1) != 0)
        {
          uint64_t v43 = v61;
          id v6 = v56;
          [*(id *)(v61 + 32) _lowBatteryClearSFDevice:v56 reason:"high"];
          uint64_t v42 = v53;
        }

        else
        {
          id v6 = v56;
          uint64_t v43 = v61;
          uint64_t v42 = v53;
          if (v53
            && dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            id v48 = (void *)objc_claimAutoreleasedReturnValue([v53 deviceAddress]);
            int v49 = (void *)objc_claimAutoreleasedReturnValue([v53 name]);
            uint64_t v50 = objc_claimAutoreleasedReturnValue([v56 bleDevice]);
            unsigned int v51 = (void *)v50;
            else {
              uint64_t v52 = off_100207950[(void)(v60 - 1)];
            }
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _lowBatteryUpdate]_block_invoke",  30LL,  "Low battery not cleared: DA %@, Name '%@', %@, missing batteryInfo for last low battery type: %s",  v48,  v49,  v50,  v52);
          }
        }

        ++*(_DWORD *)(*(void *)(*(void *)(v43 + 56) + 8LL) + 24LL);
        goto LABEL_84;
      }

      if ((v24 & 1) != 0)
      {
        id v6 = v56;
        [*(id *)(v61 + 32) _lowBatteryTrackSFDevice:v56 batteryLevel:v26 batteryType:v27];
        ++*(_DWORD *)(*(void *)(*(void *)(v61 + 64) + 8LL) + 24LL);
        uint64_t v42 = v53;
        if (v53
          || (uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v61 + 32) + 488) objectForKeyedSubscript:v57])) != 0)
        {
          uint64_t v44 = *(void **)(*(void *)(*(void *)(v61 + 72) + 8LL) + 40LL);
          if (!v44)
          {
            unsigned int v45 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            uint64_t v46 = *(void *)(*(void *)(v61 + 72) + 8LL);
            id v47 = *(void **)(v46 + 40);
            *(void *)(v46 + 40) = v45;

            uint64_t v44 = *(void **)(*(void *)(*(void *)(v61 + 72) + 8LL) + 40LL);
          }

          [v44 addObject:v42];
        }

        goto LABEL_84;
      }

      id v6 = v56;
    }

    uint64_t v42 = v53;
LABEL_84:

    goto LABEL_85;
  }

  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
LABEL_85:
}

void sub_1000282A0(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 1312LL))
  {
    id v9 = v5;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      if (a2 > 6) {
        id v6 = "?";
      }
      else {
        id v6 = off_100207630[a2];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _lowBatteryShowAlertWithLowBatteryDevice:]_block_invoke",  30LL,  "LowBattery banner action: %s, %{error}",  v6,  v9);
    }

    [*(id *)(a1 + 32) invalidate];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 1312);
    *(void *)(v7 + 1312) = 0LL;

    id v5 = v9;
  }
}

void sub_100028434(id a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _aaControllerEnsureStarted]_block_invoke",  30LL,  "AAController Invalidated");
  }
}

void sub_100028494(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234408 <= 90
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _aaControllerEnsureStarted]_block_invoke_2",  90LL,  "### Activate AAController failed: %{error}\n",  v8);
      }

      [*(id *)(a1 + 32) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 8);
      *(void *)(v5 + _Block_object_dispose(va, 8) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234408 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234408 != -1 || (v7 = _LogCategory_Initialize(&dword_100234408, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _aaControllerEnsureStarted]_block_invoke_2",  30LL,  "AAController activated");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

id sub_1000286D0(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 60LL);
  if ((_DWORD)result != -1)
  {
    uint64_t state64 = 0LL;
    notify_get_state((int)result, &state64);
    unsigned __int8 v3 = state64;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      unsigned int v4 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 32LL);
      if (v4 > 0xE) {
        uint64_t v5 = "?";
      }
      else {
        uint64_t v5 = off_100207898[(char)v4];
      }
      if (v3 > 0xEu) {
        id v6 = "?";
      }
      else {
        id v6 = off_100207898[(char)v3];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _activityMonitorEnsureStarted]_block_invoke",  30LL,  "Activity level changed %d (%s) -> %d (%s)\n",  v4,  v5,  v3,  v6);
    }

    int v7 = *(unsigned __int8 **)(a1 + 32);
    if (v3 >= 0xBuLL && v7[32] <= 0xAu)
    {
      [v7 _nearbyInfoActivityCriticalStart];
      int v7 = *(unsigned __int8 **)(a1 + 32);
    }

    v7[32] = v3;
    return [*(id *)(a1 + 32) _nearbyInfoActivityChanged];
  }

  return result;
}

id sub_100028964(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (result != *(id *)(v3 + 144)) {
    return result;
  }
  if (dword_100234408 <= 30)
  {
    if (dword_100234408 != -1)
    {
LABEL_4:
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _callMonitorEnsureStarted]_block_invoke",  30,  "Call State, incoming unconnected: %d, incoming connected: %d, outgoing unconnected: %d, outgoing connected: %d activeCall %d",  [result callCountIncomingUnconnected],  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 144), "callCountIncomingConnected"),  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 144), "callCountOutgoingUnconnected"),  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 144), "callCountOutgoingConnected"),  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 144), "activeCallCount"));
      uint64_t v3 = *(void *)(a1 + 40);
      goto LABEL_6;
    }

    int v4 = _LogCategory_Initialize(&dword_100234408, 30LL);
    uint64_t v3 = *(void *)(a1 + 40);
    if (v4)
    {
      id result = *(id *)(v3 + 144);
      goto LABEL_4;
    }
  }

id sub_100028CD8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _connectedDeviceFound:a2];
}

id sub_100028CE4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 1168) bluetoothState];
  if (v2 != [*(id *)(*(void *)(a1 + 32) + 192) bluetoothState]
    && dword_100234408 <= 30
    && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    unint64_t v3 = (unint64_t)[*(id *)(*(void *)(a1 + 32) + 1168) bluetoothState];
    if (v3 > 0xA) {
      int v4 = "?";
    }
    else {
      int v4 = off_1002076E0[v3];
    }
    unint64_t v5 = (unint64_t)[*(id *)(*(void *)(a1 + 32) + 192) bluetoothState];
    if (v5 > 0xA) {
      id v6 = "?";
    }
    else {
      id v6 = off_1002076E0[v5];
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceMonitorEnsureStarted]_block_invoke_2",  30LL,  "Bluetooth state changed %s -> %s",  v4,  v6);
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1168),  "setBluetoothState:",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 192), "bluetoothState"));
  return [*(id *)(*(void *)(a1 + 32) + 336) trigger];
}

id sub_100028DFC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectedDeviceLost:a2];
}

void sub_100028E08(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(*(void *)(a1 + 32) + 192LL);
  if (v4 == *(void **)(a1 + 40))
  {
    id v7 = v3;
    if (v3)
    {
      if (dword_100234408 <= 90
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceMonitorEnsureStarted]_block_invoke_4",  90LL,  "### Activate failed: %{error}\n",  v7);
      }

      [*(id *)(a1 + 40) invalidate];
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 192);
      *(void *)(v5 + 192) = 0LL;
    }

    else
    {
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1168), "setBluetoothState:", objc_msgSend(v4, "bluetoothState"));
      [*(id *)(a1 + 32) _update];
    }

    id v3 = v7;
  }
}

LABEL_39:
      if (([v157 deviceFlags] & 0x40000) != 0)
      {
        char v25 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));

        if (!v25)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Connected device BT_UI_INITIATED_CONNECTION_REQUEST");
          }

          -[BTSmartRoutingDaemon _submitManualConnectionMetric:](self, "_submitManualConnectionMetric:", v6);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_srDiscoveredDeviceMap,  "objectForKeyedSubscript:",  v6));
          [v26 _setUserConnectedState:1];

          double v27 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
          if (v27)
          {
            int v28 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
            [v28 _setRoutingAction:1];
          }
        }
      }

      if (([v157 deviceFlags] & 0x40) == 0)
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
        if ([v29 hijackBackoffTicks])
        {
          hijackBackOffInitiator = self->_hijackBackOffInitiator;

          if (hijackBackOffInitiator)
          {
            uint64_t v31 = mach_absolute_time();
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
            BOOL v33 = UpTicksToSeconds(v31 - (void)[v32 hijackBackoffTicks]);

            if (dword_100234408 <= 30
              && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
            {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "_connectedDeviceFound, hijackblocking is active. It has started for %llus and ownership is not owned",  v33);
            }

            if (v33 >= 5) {
              -[BTSmartRoutingDaemon _hijackBackoffReset:withReason:]( self,  "_hijackBackoffReset:withReason:",  v6,  @"ownershipLost");
            }
          }
        }

        else
        {
        }
      }

      v156 = (void *)objc_claimAutoreleasedReturnValue([v157 name]);
      id v34 = -[BTSmartRoutingDaemon _supportsSR:andProductID:]( self,  "_supportsSR:andProductID:",  v6,  [v157 productID]);
      double v35 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));
      if (v35)
      {
        double v36 = 0;
      }

      else
      {
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
        if (v37) {
          double v36 = 0;
        }
        else {
          double v36 = ((unint64_t)[v157 deviceFlags] & 0x40000) == 0;
        }

        double v15 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
      }

      char v38 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));
      if (v38) {
        unsigned int v39 = 0;
      }
      else {
        unsigned int v39 = v34;
      }
      if ((v39 & 1) != 0)
      {
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));

        if (!v40)
        {
          -[BTSmartRoutingDaemon _smartRoutingAddWxMapDeviceFromConnectedDevice:]( self,  "_smartRoutingAddWxMapDeviceFromConnectedDevice:",  v157);
          -[BTSmartRoutingDaemon _triggerTipiTableUpdate:](self, "_triggerTipiTableUpdate:", v6);
        }
      }

      else
      {
      }

      id v41 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));
      if (!v41)
      {
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevicesSrModeCache,  "objectForKeyedSubscript:",  v6));
        uint64_t v43 = [v42 mode];

        uint64_t v44 = v43 == 1;
        double v15 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
        if (v44
          || (-[BTSmartRoutingDaemon _lowestBatteryInfoForCBDevice:](self, "_lowestBatteryInfoForCBDevice:", v157),
              v45 == 0.0))
        {
LABEL_75:
          id v47 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));

          id v48 = &IDSSendMessageOptionQueueOneIdentifierKey_ptr;
          v152 = v47;
          if (v47)
          {
            int v49 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevicesInEarCache,  "objectForKeyedSubscript:",  v6));
            LODWORD(v50) = [v49 BOOLValue];
          }

          else
          {
            uint64_t v50 = -[BTSmartRoutingDaemon _inEarNearbyCheck:](self, "_inEarNearbyCheck:", v6);
            unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v50));
            -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_connectedDevicesInEarCache,  "setObject:forKeyedSubscript:",  v51,  v6);

            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
            if (!v52)
            {
LABEL_80:
              v155 = v50;
              connectDevice = self->_connectDevice;
              if (connectDevice && self->_connectSession)
              {
                uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[SFDevice bleDevice](connectDevice, "bleDevice"));
                int v55 = (void *)objc_claimAutoreleasedReturnValue([v54 bluetoothAddress]);

                if ([v55 length] == (id)6)
                {
                  uint64_t v56 = NSPrintF("%.6a", COERCE_DOUBLE([v55 bytes]));
                  id v57 = (id)objc_claimAutoreleasedReturnValue(v56);
                }

                else
                {
                  id v57 = 0LL;
                }

                if ([v6 isEqual:v57]
                  && ([v157 connectedServices] & 0x80000) != 0)
                {
                  v145 = v36;
                  int inst_meths = (int)v15[14].inst_meths;
                  if (inst_meths <= 30
                    && (inst_meths != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                  {
                    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Finished connection setup");
                  }

                  uint64_t v59 = v34;
                  int v60 = v7;
                  if (self->_eligibleHeadset) {
                    self->_smartRoutingDisconnectReason = 0LL;
                  }
                  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v61 identifier]);

                  -[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]( self,  "_smartRoutingConnectionCompleted:",  0LL);
                  if (v62)
                  {
                    __int128 v63 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_nearbyWxDeviceMap,  "objectForKeyedSubscript:",  v62));
                    __int128 v64 = [v63 preemptiveBannerShown];

                    if (v64)
                    {
                      __int128 v65 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                      [v65 _setFirstBannerShown:0];
                    }
                  }

                  id v7 = v60;
                  id v34 = v59;
                  double v36 = v145;
                  id v48 = &IDSSendMessageOptionQueueOneIdentifierKey_ptr;
                }
              }

              v154 = v34;
              if (!v34)
              {
LABEL_146:
                v103 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                -[BTSmartRoutingDaemon _smartRoutingModeCheck:](self, "_smartRoutingModeCheck:", v157);
                v104 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));

                if (v104 || !v103)
                {
                  v109 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_connectedDevices,  "objectForKeyedSubscript:",  v6));
                  if (v109)
                  {
                  }

                  else
                  {
                    unsigned __int8 v110 = [v157 productID] - 8194;
                    if (v110 < 0x25)
                    {
                      v111 = (0x1C7BB7FF9BuLL >> v110) & 1;
LABEL_163:
                      id v112 = v155;
                      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_connectedDevices,  "setObject:forKeyedSubscript:",  v157,  v6);
                      unsigned __int8 v113 = -[BTSmartRoutingDaemon _inEarConnectedCheck:](self, "_inEarConnectedCheck:", v6);
                      if (![v157 primaryPlacement]
                        && ![v157 secondaryPlacement])
                      {
                        unsigned __int8 v113 = -[BTSmartRoutingDaemon _inEarNearbyCheck:](self, "_inEarNearbyCheck:", v6);
                      }

                      if (v111) {
                        -[BTSmartRoutingDaemon _sendTipiScoreUpdateToWx](self, "_sendTipiScoreUpdateToWx");
                      }
                      if (v36 && !v113)
                      {
                        uint64_t v114 = (int)v15[14].inst_meths;
                        if (v114 > 30)
                        {
LABEL_196:
                          if (v112 != v113)
                          {
                            BOOL v127 = (int)v15[14].inst_meths;
                            if (v127 <= 30
                              && (v127 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                            {
                              v149 = v111;
                              if (v112) {
                                BOOL v128 = "yes";
                              }
                              else {
                                BOOL v128 = "no";
                              }
                              if (v113) {
                                uint64_t v129 = "yes";
                              }
                              else {
                                uint64_t v129 = "no";
                              }
                              v130 = [v157 audioStreamState];
                              if (v130 > 3) {
                                uint64_t v131 = "?";
                              }
                              else {
                                uint64_t v131 = off_100207B40[v130];
                              }
                              if (self->_activityLevelMediaPlaying) {
                                char v132 = "yes";
                              }
                              else {
                                char v132 = "no";
                              }
                              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "InEarStateChanged %s -> %s WxStream %s activityLevelMediaPlaying %s isHidden %s",  v128,  v129,  v131,  v132,  "no");
                              v111 = v149;
                            }
                          }

                          v133 = (void *)objc_claimAutoreleasedReturnValue([v48[130] numberWithBool:v113]);
                          -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_connectedDevicesInEarCache,  "setObject:forKeyedSubscript:",  v133,  v6);

                          [v103 setInEar:v113];
                          if (((v111 ^ 1 | v154) & 1) == 0)
                          {
                            v134 = (int)v15[14].inst_meths;
                            if (v134 <= 30
                              && (v134 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                            {
                              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Showing banner for SR disabled device");
                            }
                          }

                          if (!self->_uiSmartRoutingBanner) {
                            [v103 firstBannerShown];
                          }
                          if (self->_prefSmartRoutingEnabledPhase3) {
                            -[BTSmartRoutingDaemon _mediaRouteDiscoveryStarted](self, "_mediaRouteDiscoveryStarted");
                          }
                          v135 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                          if (v135)
                          {
                            v136 = (void *)v135;
                            v137 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                            v138 = (void *)objc_claimAutoreleasedReturnValue([v137 otherTipiDeviceBTAddress]);
                            if (v138
                              || self->_tipiElectionInProgress
                              || !-[BTSmartRoutingDaemon _aacpConnectedCheck:](self, "_aacpConnectedCheck:", v157))
                            {
                            }

                            else
                            {
                              forcedConnection = self->_forcedConnection;

                              if (!forcedConnection)
                              {
                                if (dword_100234408 <= 30
                                  && (dword_100234408 != -1
                                   || _LogCategory_Initialize(&dword_100234408, 30LL)))
                                {
                                  LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Trying to do tipi healings from connected events");
                                }

                                -[BTSmartRoutingDaemon _tipiHealingAttempt](self, "_tipiHealingAttempt");
                              }
                            }
                          }

                          -[CUCoalescer trigger](self->_evaluatorCoalescer, "trigger");

                          goto LABEL_233;
                        }

                        if (v114 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
                          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Incoming connection is out of ear");
                        }
                      }

                      id v115 = (int)v15[14].inst_meths;
                      if (v115 <= 30 && (v115 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                      {
                        if (v155) {
                          v116 = "yes";
                        }
                        else {
                          v116 = "no";
                        }
                        if (v113) {
                          id v117 = "yes";
                        }
                        else {
                          id v117 = "no";
                        }
                        v143 = v117;
                        v144 = v116;
                        if (v152) {
                          v118 = "yes";
                        }
                        else {
                          v118 = "no";
                        }
                        v153 = v118;
                        uint64_t v119 = [v103 routingAction];
                        v151 = v7;
                        v148 = v111;
                        if (v119 > 5) {
                          v120 = "?";
                        }
                        else {
                          v120 = off_100207BA8[v119];
                        }
                        v142 = v120;
                        else {
                          int v121 = "no";
                        }
                        int v122 = (void *)objc_claimAutoreleasedReturnValue([v103 otherTipiDeviceBTAddress]);
                        unsigned int v123 = (void *)objc_claimAutoreleasedReturnValue([v103 otherTipiDeviceVersion]);
                        char v124 = objc_claimAutoreleasedReturnValue([v103 otherTipiDeviceBTName]);
                        unsigned __int8 v125 = (void *)v124;
                        if (v36) {
                          unsigned __int8 v126 = "yes";
                        }
                        else {
                          unsigned __int8 v126 = "no";
                        }
                        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "SmartRouting posting device %@ inEar state originalInEarState %s, newInEarState %s, previous c onnected %s, routing Action %s, Route %s otherTipiDeviceAddress %@ otherTipiVersion %@ otherTi piDeviceName %@ incomingConn %s",  v6,  v144,  v143,  v153,  v142,  v121,  v122,  v123,  v124,  v126);

                        id v7 = v151;
                        double v15 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
                        id v48 = &IDSSendMessageOptionQueueOneIdentifierKey_ptr;
                        id v112 = v155;
                        v111 = v148;
                      }

                      goto LABEL_196;
                    }
                  }
                }

                else
                {
                  if ([v103 routingAction])
                  {
                    uint64_t v105 = (int)v15[14].inst_meths;
                    if (v105 <= 30 && (v105 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                    {
                      v106 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_srBudswapDeviceMap,  "objectForKeyedSubscript:",  v6));
                      unsigned int v107 = [v106 reconnectionState];
                      v108 = "?";
                      if (v107 == 1) {
                        v108 = "Connected";
                      }
                      if (!v107) {
                        v108 = "Not connected";
                      }
                      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Smart Routing posting first banner! Budswap state: %s",  v108);
                    }
                  }

                  -[BTSmartRoutingDaemon _sendTipiScoreUpdateToWx](self, "_sendTipiScoreUpdateToWx");
                }

                v111 = 0;
                goto LABEL_163;
              }

              BOOL v66 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
              uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v66 deviceName]);
              uint64_t v68 = [v67 isEqualToString:v156];

              if ((v68 & 1) == 0)
              {
                uint64_t v69 = (int)v15[14].inst_meths;
                if (v69 <= 30 && (v69 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                {
                  int v70 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                  id v71 = (void *)objc_claimAutoreleasedReturnValue([v70 deviceName]);
                  id v72 = (void *)objc_claimAutoreleasedReturnValue([v157 name]);
                  LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "SmartRouting updating device name from %@ to %@",  v71,  v72);
                }

                double v73 = (void *)objc_claimAutoreleasedReturnValue([v157 name]);
                BOOL v74 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                [v74 setDeviceName:v73];
              }

              unsigned int v75 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
              unsigned int v76 = (void *)objc_claimAutoreleasedReturnValue([v75 deviceVersion]);

              if (!v76 && (objc_opt_respondsToSelector(v157, "firmwareVersion") & 1) != 0)
              {
                uint64_t v77 = (int)v15[14].inst_meths;
                if (v77 <= 30 && (v77 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                {
                  unint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v157 firmwareVersion]);
                  LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "SmartRouting updating device version to %@ ",  v78);
                }

                uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v157 firmwareVersion]);
                uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                [v80 setDeviceVersion:v79];
              }

              id v81 = v36;
              uint64_t v82 = [v157 deviceFlags];
              unsigned int v83 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
              v147 = (unint64_t)v82;
              if (([v83 manualRouteChangeInProgress] & 1) != 0
                || (v82 & 0x400000) == 0)
              {

                BOOL v85 = 0;
                unint64_t v86 = 0;
                unint64_t v87 = 0;
              }

              else
              {
                id v84 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                BOOL v85 = [v84 manuallyRouted] ^ 1;
              }

              unint64_t v87 = -[BTSmartRoutingDaemon _isInEarToOutOfEar:](self, "_isInEarToOutOfEar:", v157);
              unint64_t v86 = v85;
LABEL_117:
              BOOL v88 = (int)v15[14].inst_meths;
              double v36 = v81;
              if (v88 <= 30 && (v88 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
              {
                uint64_t v89 = "no";
                v150 = v7;
                if ((v147 & 0x400000) != 0) {
                  id v90 = "yes";
                }
                else {
                  id v90 = "no";
                }
                v146 = v90;
                if (v86) {
                  unint64_t v91 = "yes";
                }
                else {
                  unint64_t v91 = "no";
                }
                unsigned int v92 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                v141 = v89;
                double v36 = v81;
                double v15 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
                v140 = v91;
                id v7 = v150;
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30,  "SmartRouting headset %@ manuallyRouted %s firstManualRoute %s manualRouteChangeInProgress %s %llu",  v6,  v146,  v140,  v141,  [v157 deviceFlags]);
              }

              if (v86)
              {
                -[BTSmartRoutingDaemon _updateRoutingActionForManuallyRoute]( self,  "_updateRoutingActionForManuallyRoute");
                -[BTSmartRoutingDaemon _startManualRouteChangeDetectionTimer:]( self,  "_startManualRouteChangeDetectionTimer:",  v6);
                if (self->_prefSmartRoutingBlockHijackWindowinSeconds)
                {
                  id v93 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                  id v94 = [v93 hijackBackoffTicks];

                  if (v94)
                  {
                    id v95 = (int)v15[14].inst_meths;
                    if (v95 <= 30 && (v95 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
                      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Hijackblocking: Clear Block ticks due to manual routing");
                    }
                    -[BTSmartRoutingDaemon _hijackBackoffReset:withReason:]( self,  "_hijackBackoffReset:withReason:",  v6,  @"manualRoute");
                    unsigned int v96 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                    v97 = (void *)objc_claimAutoreleasedReturnValue([v96 otherTipiDeviceBTAddress]);
                    -[BTSmartRoutingDaemon _relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:]( self,  "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:",  1LL,  &off_100218C38,  v6,  v97);
                  }
                }
              }

              if (v87)
              {
                unsigned __int8 v98 = (int)v15[14].inst_meths;
                if (v98 <= 30 && (v98 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
                  LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Resetting manaully route flag for out of ear");
                }
                -[BTSmartRoutingDaemon _setManualRouteFlag:withManualRoute:]( self,  "_setManualRouteFlag:withManualRoute:",  v6,  0LL);
              }

              else
              {
                signed int v99 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                [v99 _setManualRoute:(v147 >> 22) & 1];

                if ((v147 & 0x400000) == 0)
                {
                  signed int v100 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                  v101 = [v100 manualRouteChangeInProgress];

                  if (v101)
                  {
                    v102 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
                    [v102 _setManualRouteChangeInProgress:0];
                  }
                }
              }

              goto LABEL_146;
            }

            int v49 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
            [v49 setInEar:v50];
          }

          goto LABEL_80;
        }

        uint64_t v46 = v45;
        id v41 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_nearbyWxDeviceMap,  "objectForKeyedSubscript:",  v7));
        [v41 setLowestBudBatteryInfo:v46];
      }

      goto LABEL_75;
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "First connected device found %@",  v157);
    }

    double v16 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v6));
    if (v16) {
      -[BTSmartRoutingDaemon _triggerTipiTableUpdate:](self, "_triggerTipiTableUpdate:", v6);
    }
    if (GestaltGetDeviceClass( -[BTSmartRoutingDaemon _updateSRDiscoveredDeviceForCBDeviceChanged:connectionStatus:]( self,  "_updateSRDiscoveredDeviceForCBDeviceChanged:connectionStatus:",  v157,  2LL)) == 1) {
      -[BTSmartRoutingDaemon _checkTriangleRecovery](self, "_checkTriangleRecovery");
    }
    double v17 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_routeIndicationBackOffMap,  "objectForKeyedSubscript:",  v6));

    if (v17)
    {
      double v18 = mach_absolute_time();
      int v19 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_routeIndicationBackOffMap,  "objectForKeyedSubscript:",  v6));
      double v20 = UpTicksToSeconds(v18 - (void)[v19 unsignedLongLongValue]);

      if (v20 <= 1)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Cancel bulletin posting since device state updated in %d s",  v20);
        }

        id v21 = self->_routeIndicationBulletinTimer;
        id v22 = v21;
        if (v21)
        {
          dispatch_source_cancel((dispatch_source_t)v21);
          routeIndicationBulletinTimer = self->_routeIndicationBulletinTimer;
          self->_routeIndicationBulletinTimer = 0LL;
        }

        goto LABEL_32;
      }

      if (v20 <= 0x13)
      {
LABEL_32:
        if (self->_uiSmartRoutingBanner)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _connectedDeviceFound:]",  30LL,  "Cancel bulletin posting as device becomes not qualified in %d s",  v20);
          }

          -[BTBannerUISession invalidate](self->_uiSmartRoutingBanner, "invalidate");
          uiSmartRoutingBanner = self->_uiSmartRoutingBanner;
          self->_uiSmartRoutingBanner = 0LL;
        }
      }
    }

    goto LABEL_39;
  }

        id v7 = "?";
        goto LABEL_40;
      }

      if ((_DWORD)v4 != 120)
      {
        id v6 = v10;
        if ((_DWORD)v4 == 200)
        {
          id v7 = "GuestiOSConnecting";
          goto LABEL_40;
        }

        if ((_DWORD)v4 == 210)
        {
          id v7 = "GuestiOSAuthenticated";
          goto LABEL_40;
        }

        goto LABEL_39;
      }

      id v7 = "ShowPairInstructions";
    }

    else
    {
      if ((int)v4 > 29)
      {
        if ((int)v4 > 49)
        {
          id v6 = v10;
          if ((_DWORD)v4 == 50)
          {
            id v7 = "Failed";
            goto LABEL_40;
          }

          if ((_DWORD)v4 == 100)
          {
            id v7 = "Confirm";
            goto LABEL_40;
          }
        }

        else
        {
          id v6 = v10;
          if ((_DWORD)v4 == 30)
          {
            id v7 = "Interrupted";
            goto LABEL_40;
          }

          if ((_DWORD)v4 == 40)
          {
            id v7 = "Succeeded";
LABEL_40:
            LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _reportProgress:info:]",  30LL,  "Progress: %s: %##@",  v7,  v6);
            goto LABEL_41;
          }
        }

        goto LABEL_39;
      }

      if ((_DWORD)v4)
      {
        id v6 = v10;
        if ((_DWORD)v4 == 10)
        {
          id v7 = "Activated";
          goto LABEL_40;
        }

        if ((_DWORD)v4 == 20)
        {
          id v7 = "Invalidated";
          goto LABEL_40;
        }

        goto LABEL_39;
      }

      id v7 = "Invalid";
    }

    id v6 = v10;
    goto LABEL_40;
  }

  if (!v239)
  {
LABEL_14:
    if ((_DWORD)v217) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }

  swift_bridgeObjectRelease(a1);
  id v93 = *((void *)v76 + 2);
  if (v93)
  {
    id v94 = (v131[80] + 32LL) & ~(unint64_t)v131[80];
    int v121 = (unint64_t)v76;
    id v95 = (uint64_t)&v76[v94];
    unsigned __int8 v126 = *((void *)v131 + 9);
    char v124 = 0x80000001001CAB80LL;
    unsigned int v96 = v122;
    v97 = (uint64_t)v123;
    unsigned __int8 v98 = v134;
    signed int v99 = v128;
    signed int v100 = (uint64_t (*)(char *, uint64_t))v112;
    while (1)
    {
      char v132 = v93;
      sub_1000A7C90(v95, v97, type metadata accessor for BTDeferredRecord);
      v101 = sub_10013A76C();
      v102 = UUID.uuidString.getter(v101);
      v104 = v103;
      URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
      id result = ((uint64_t (*)(char *, uint64_t, uint64_t))v113)(v96, 1LL, v98);
      if ((_DWORD)result == 1) {
        break;
      }
      uint64_t v105 = v129;
      v110(v129, v96, v98);
      URL.appendingPathComponent(_:)(0xD000000000000012LL);
      v106 = v100(v105, v98);
      uint64_t v131 = (unsigned __int8 *)&v110;
      __chkstk_darwin(v106);
      *(&v110 - 4) = (void (*)(char *, char *, uint64_t))v101;
      *(&v110 - 3) = (void (*)(char *, char *, uint64_t))v102;
      *(&v110 - 2) = v104;
      *(&v110 - 1) = v99;
      unsigned int v107 = v114;
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_10018A6A0, &v110 - 6, &type metadata for Bool);
      uint64_t v114 = v107;
      unsigned __int8 v98 = v134;
      swift_release(v101);
      swift_bridgeObjectRelease(v104);
      v100((char *)v99, v98);
      sub_1000A7CD4(v97, type metadata accessor for BTDeferredRecord);
      v95 += v126;
      id v93 = v132 - 1;
      if (v132 == 1)
      {
        swift_release(v121);
        goto LABEL_45;
      }
    }

    __break(1u);
  }

  else
  {
    swift_release(v76);
    unsigned __int8 v98 = v134;
LABEL_45:
    v108 = v111;

    sub_1000A7CD4((uint64_t)v125, type metadata accessor for SoundProfileRecord);
    v109 = (uint64_t (*)(char *, uint64_t))v112;
    v112((unint64_t)v127, v98);
    return v109(v108, v98);
  }

  return result;
}

LABEL_234:
}

void sub_10002A73C(uint64_t a1)
{
  id v2 = (void *)MRAVRoutingDiscoverySessionCreate(1LL);
  MRAVRoutingDiscoverySessionSetDiscoveryMode(v2, 1LL);
  id v3 = v2;
  int v4 = v3;
  if (v3) {
    [v3 setOnlyDiscoversBluetoothDevices:1];
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10002A818;
  v9[3] = &unk_100206EC0;
  v9[4] = *(void *)(a1 + 32);
  uint64_t v5 = MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback(v4, v9);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(dispatch_queue_s **)(v6 + 296);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10002A8C0;
  v8[3] = &unk_100206EE8;
  v8[4] = v6;
  v8[5] = v4;
  v8[6] = v5;
  dispatch_async(v7, v8);
}

void sub_10002A818(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = CFRetain(cf);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 296);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_10002A888;
  v6[3] = &unk_100206E98;
  v6[4] = v4;
  v6[5] = v3;
  dispatch_async(v5, v6);
}

void sub_10002A888(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFTypeRef v3 = *(const void **)(v2 + 520);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  *(void *)(v2 + 520) = *(void *)(a1 + 40);
}

void *sub_10002A8C0(void *result)
{
  *(void *)(result[4] + 272LL) = result[5];
  *(void *)(result[4] + 288LL) = result[6];
  *(_BYTE *)(result[4] + 280LL) = 0;
  return result;
}

void sub_10002A9BC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (!*(void *)(a1 + 40)
      || (MRAVRoutingDiscoverySessionRemoveOutputDevicesChangedCallback(), *(void *)(a1 + 32)))
    {
      MRAVRoutingDiscoverySessionSetDiscoveryMode();
      CFRelease(*(CFTypeRef *)(a1 + 32));
    }
  }

id sub_10002AD08(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v3 = kMRAVOutputContextDevicesDidChangeNotification;
  [v2 addObserver:*(void *)(a1 + 32) selector:"_mediaRouteMonitorActiveAudioRouteChanged:" name:kMRAVOutputContextDevicesDidChangeNotification object:MRAVOutputContextGetSharedSystemAudioContext()];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v4 addObserver:*(void *)(a1 + 32) selector:"_mediaRouteMonitorActiveAudioRouteChanged:" name:v3 object:MRAVOutputContextGetSharedAudioPresentationContext(v4)];

  MRMediaRemoteSetWantsRouteChangeNotifications(1LL);
  return _[*(id *)(a1 + 32) _mediaRouteMonitorActiveAudioRouteChanged:0];
}

void sub_10002AF34(uint64_t a1)
{
  SharedSystemAudioContext = (void *)MRAVOutputContextGetSharedSystemAudioContext(a1);
  uint64_t SharedAudioPresentationContext = MRAVOutputContextGetSharedAudioPresentationContext(SharedSystemAudioContext);
  uint64_t v4 = (__CFString *)SharedAudioPresentationContext;
  if (SharedSystemAudioContext)
  {
    uint64_t v5 = (void *)MRAVOutputContextCopyOutputDevices(SharedSystemAudioContext);
    if ([v5 count])
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      int Type = MRAVOutputDeviceGetType();

      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      id v41 = (__CFString *)MRAVOutputDeviceCopyName();

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      int Subtype = MRAVOutputDeviceGetSubtype();

      double v11 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      SharedSystemAudioContext = (void *)MRAVOutputDeviceCopyUniqueIdentifier();

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( [SharedSystemAudioContext stringByReplacingOccurrencesOfString:@"-tacl" withString:&stru_100212678]);
      double v13 = (void *)objc_claimAutoreleasedReturnValue( [v12 stringByReplacingOccurrencesOfString:@"-tsco" withString:&stru_100212678]);
      double v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uppercaseString]);
    }

    else
    {
      id v41 = 0LL;
      SharedSystemAudioContext = 0LL;
      double v14 = 0LL;
      int Subtype = 0;
      int Type = 0;
    }

    if (!v4) {
      goto LABEL_15;
    }
  }

  else
  {
    id v41 = 0LL;
    double v14 = 0LL;
    int Subtype = 0;
    int Type = 0;
    if (!SharedAudioPresentationContext) {
      goto LABEL_15;
    }
  }

  double v15 = (void *)MRAVOutputContextCopyOutputDevices(v4);
  if ([v15 count])
  {
    double v16 = (void *)objc_claimAutoreleasedReturnValue([v15 firstObject]);
    int v17 = MRAVOutputDeviceGetType();

    double v18 = (void *)objc_claimAutoreleasedReturnValue([v15 firstObject]);
    uint64_t v4 = (__CFString *)MRAVOutputDeviceCopyName();

    int v19 = (void *)objc_claimAutoreleasedReturnValue([v15 firstObject]);
    int v20 = MRAVOutputDeviceGetSubtype();

    if (Type == 2 && v17 == 2)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      if (*(_BYTE *)(v21 + 425)) {
        goto LABEL_79;
      }
      *(_BYTE *)(v21 + 425) = 1;
      *(_BYTE *)(*(void *)(a1 + 32) + 426LL) = 0;
LABEL_13:
      *(_BYTE *)(*(void *)(a1 + 32) + 46RandomBytes(&unk_1002371D8, 4LL) = 0;
      goto LABEL_23;
    }

    if (Subtype == 1 && v20 == 1)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      if (*(_BYTE *)(v21 + 464)) {
        goto LABEL_79;
      }
      *(_BYTE *)(v21 + 425) = 0;
      *(_BYTE *)(*(void *)(a1 + 32) + 426LL) = 0;
      *(_BYTE *)(*(void *)(a1 + 32) + 46RandomBytes(&unk_1002371D8, 4LL) = 1;
      uint64_t v26 = mach_absolute_time();
      if ((unint64_t)UpTicksToSeconds(v26 - *(void *)(*(void *)(a1 + 32) + 384LL)) <= 1
        && dword_100234408 <= 90
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke",  90LL,  "### Error: Last hijack was less than 2 seconds ago, audio shouldn't be routed to speakers");
      }

      goto LABEL_23;
    }

    if (Subtype == 4 && v20 == 4)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      if (*(_BYTE *)(v21 + 426)) {
        goto LABEL_79;
      }
      *(_BYTE *)(v21 + 425) = 0;
      *(_BYTE *)(*(void *)(a1 + 32) + 426LL) = 1;
      goto LABEL_13;
    }
  }

  else
  {

    uint64_t v4 = 0LL;
  }

LABEL_61:
  uint64_t v21 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v21 + 425))
  {
    if (*(_BYTE *)(v21 + 864) && *(_BYTE *)(v21 + 865))
    {
      [(id)v21 _mediaRouteMonitorSpeakRoute];
      *(_BYTE *)(*(void *)(a1 + 32) + 865LL) = 0;
      uint64_t v21 = *(void *)(a1 + 32);
    }

    BOOL v33 = *(void **)(v21 + 1152);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_10002B578;
    v44[3] = &unk_100206D20;
    id v34 = v41;
    uint64_t v35 = *(void *)(a1 + 32);
    unsigned int v45 = v34;
    uint64_t v46 = v35;
    [v33 enumerateKeysAndObjectsUsingBlock:v44];

    uint64_t v21 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v21 + 464) || *(_BYTE *)(v21 + 426))
  {
    if (*(_BYTE *)(v21 + 929))
    {
      *(_BYTE *)(v21 + 929) = 0;
      uint64_t v21 = *(void *)(a1 + 32);
    }

    double v36 = *(void **)(v21 + 1152);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_10002B984;
    v42[3] = &unk_100206F30;
    v42[4] = v21;
    char v43 = 1;
    [v36 enumerateKeysAndObjectsUsingBlock:v42];
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1168) audioDestination]);
    if ([*(id *)(*(void *)(a1 + 32) + 1168) audioRoute] == 3)
    {
      if (v37)
      {
        char v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v37]);

        if (v38)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke",  30LL,  "Routed to speaker or receiver, should ignore manual connect flag afterward");
          }

          unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v14]);
          [v39 setIgnoreManualConnect:1];
        }
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 336) trigger];

    uint64_t v21 = *(void *)(a1 + 32);
  }

  if (!a1) {
    return 0LL;
  }
  double v13 = 0LL;
LABEL_63:
  uint64_t v2 = (unsigned __int16)(v13 >> 8);
  id v7 = (unsigned __int16)(a1 >> 8);
  if (v7 >= v2)
  {
    if (v2 < v7)
    {
      uint64_t v1 = static os_log_type_t.debug.getter(v4);
      if (qword_100234C28 == -1)
      {
LABEL_66:
        uint64_t v30 = qword_10023DFC8;
        uint64_t v31 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v32 = swift_allocObject(v31, 112LL, 7LL);
        *(_OWORD *)(v32 + 16) = xmmword_1001A6F30;
        *(void *)(v32 + 56) = &type metadata for UInt64;
        *(void *)(v32 + 64) = &protocol witness table for UInt64;
        *(void *)(v32 + 32) = v2;
        *(void *)(v32 + 96) = &type metadata for UInt64;
        *(void *)(v32 + 104) = &protocol witness table for UInt64;
        *(void *)(v32 + 72) = v7;
        os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  v30,  "Update case (major) version from %u to %u",  41LL,  2LL,  v32);
LABEL_76:
        swift_bridgeObjectRelease(v32);
        return 1LL;
      }

    v175 = sub_100099358(v143, &qword_100234E20);
    v176 = static os_log_type_t.error.getter(v175);
    v177 = qword_10023DFC8;
    unsigned int v76 = swift_allocObject(v369, 72LL, 7LL);
    *(_OWORD *)(v76 + 16) = xmmword_1001A5EA0;
    v178 = [v90 recordName];
    v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
    v181 = v180;

    v182 = v370;
    *(void *)(v76 + 56) = &type metadata for String;
    *(void *)(v76 + 64) = v182;
    *(void *)(v76 + 32) = v179;
    *(void *)(v76 + 40) = v181;
    v106 = "Invalid magic device identifier: %@";
    unsigned int v107 = v176;
    v108 = v177;
    v109 = 35LL;
    goto LABEL_62;
  }

  if (v63 == 0x6563697665444141LL && v64 == 0xEE0064726F636552LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141LL, 0xEE0064726F636552LL, v63, v64, 0LL) & 1) != 0)
  {
    v376 = &type metadata for AudioAccessoryFeatures;
    v201 = sub_10009E740();
    v377 = (uint64_t (*)())v201;
    LOBYTE(aBlock[0]) = 0;
    v202 = isFeatureEnabled(_:)(aBlock);
    sub_10009A498(aBlock);
    if ((v202 & 1) != 0)
    {
      v203 = [v90 recordName];
      v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
      v206 = v205;

      v207 = (uint64_t)v341;
      UUID.init(uuidString:)(v204, v206);
      swift_bridgeObjectRelease(v206);
      v209 = v373;
      v208 = v374;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v373 + 48))(v207, 1LL, v374) == 1)
      {
        v210 = sub_100099358(v207, &qword_100234E20);
        signed int v99 = static os_log_type_t.error.getter(v210);
        signed int v100 = qword_10023DFC8;
        unsigned int v76 = swift_allocObject(v369, 72LL, 7LL);
        *(_OWORD *)(v76 + 16) = xmmword_1001A5EA0;
        v211 = [v90 recordName];
        v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
        v214 = v213;

        v215 = v370;
        *(void *)(v76 + 56) = &type metadata for String;
        *(void *)(v76 + 64) = v215;
        *(void *)(v76 + 32) = v212;
        *(void *)(v76 + 40) = v214;
        v106 = "Invalid AADeviceRecord identifier: %@";
        goto LABEL_18;
      }

      v254 = v331;
      (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v331, v207, v208);
      v376 = &type metadata for AudioAccessoryFeatures;
      v377 = (uint64_t (*)())v201;
      LOBYTE(aBlock[0]) = 0;
      v255 = isFeatureEnabled(_:)(aBlock);
      v256 = sub_10009A498(aBlock);
      if ((v255 & 1) != 0)
      {
        v257 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
        if ((_DWORD)v257)
        {
          v258 = sub_10013A76C();
          if (qword_100234BF8 != -1) {
            swift_once(&qword_100234BF8, sub_100113FD8);
          }
          v259 = v365;
          v260 = sub_100098D58(v365, (uint64_t)qword_10023DF40);
          v262 = v363;
          v261 = (uint64_t)v364;
          (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v364, v260, v259);
          v263 = (void *)sub_100138AFC(v261, &qword_100236E48, (uint64_t)sub_100166F6C);
          swift_release(v258);
          v256 = (*(uint64_t (**)(uint64_t, uint64_t))(v262 + 8))(v261, v259);
        }

        else
        {
          v308 = static os_log_type_t.error.getter(v257);
          v263 = _swiftEmptyArrayStorage;
          v256 = os_log(_:dso:log:_:_:)( v308,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
        }
      }

      else
      {
        v263 = _swiftEmptyArrayStorage;
      }

      __chkstk_darwin(v256);
      *(&v330 - 2) = v254;
      v298 = sub_100122604((uint64_t (*)(id *))sub_100187538, (uint64_t)(&v330 - 4), (uint64_t)v263);
      v309 = swift_bridgeObjectRelease(v263);
      if (v298)
      {
        sub_1001500B4(v298, v366 & 1);
        goto LABEL_127;
      }

      v310 = static os_log_type_t.error.getter(v309);
      v311 = qword_10023DFC8;
      v302 = swift_allocObject(v369, 72LL, 7LL);
      *(_OWORD *)(v302 + 16) = xmmword_1001A5EA0;
      v312 = [v90 recordName];
      v313 = static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
      v315 = v314;

      v316 = v370;
      *(void *)(v302 + 56) = &type metadata for String;
      *(void *)(v302 + 64) = v316;
      *(void *)(v302 + 32) = v313;
      *(void *)(v302 + 40) = v315;
      os_log(_:dso:log:_:_:)( v310,  &_mh_execute_header,  v311,  "Unable to find cached AADeviceRecord to delete: %@",  50LL,  2LL,  v302);
      goto LABEL_129;
    }

    goto LABEL_91;
  }

  if (v63 == 0xD000000000000011LL && v64 == 0x80000001001D2A80LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001D2A80LL, v63, v64, 0LL) & 1) != 0)
  {
LABEL_91:
    v376 = &type metadata for AudioAccessoryFeatures;
    v234 = sub_10009E740();
    v377 = (uint64_t (*)())v234;
    LOBYTE(aBlock[0]) = 0;
    v235 = isFeatureEnabled(_:)(aBlock);
    sub_10009A498(aBlock);
    if ((v235 & 1) != 0)
    {
      v236 = [v90 recordName];
      v237 = static String._unconditionallyBridgeFromObjectiveC(_:)(v236);
      v239 = v238;

      v240 = v339;
      UUID.init(uuidString:)(v237, v239);
      v241 = v239;
      v242 = (uint64_t)v240;
      swift_bridgeObjectRelease(v241);
      v243 = v373;
      v244 = v240;
      v245 = v374;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v373 + 48))(v244, 1LL, v374) == 1)
      {
        v246 = sub_100099358(v242, &qword_100234E20);
        v247 = static os_log_type_t.error.getter(v246);
        v248 = qword_10023DFC8;
        unsigned int v76 = swift_allocObject(v369, 72LL, 7LL);
        *(_OWORD *)(v76 + 16) = xmmword_1001A5EA0;
        v249 = [v90 recordName];
        v250 = static String._unconditionallyBridgeFromObjectiveC(_:)(v249);
        v252 = v251;

        v253 = v370;
        *(void *)(v76 + 56) = &type metadata for String;
        *(void *)(v76 + 64) = v253;
        *(void *)(v76 + 32) = v250;
        *(void *)(v76 + 40) = v252;
        os_log(_:dso:log:_:_:)( v247,  &_mh_execute_header,  v248,  "Invalid AAProxCardsRecord identifier: %@",  40LL,  2LL,  v76);
        goto LABEL_63;
      }

      v254 = v330;
      (*(void (**)(char *, uint64_t, uint64_t))(v243 + 32))(v330, v242, v245);
      v376 = &type metadata for AudioAccessoryFeatures;
      v377 = (uint64_t (*)())v234;
      LOBYTE(aBlock[0]) = 0;
      v264 = isFeatureEnabled(_:)(aBlock);
      v265 = sub_10009A498(aBlock);
      if ((v264 & 1) != 0)
      {
        v266 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
        if ((_DWORD)v266)
        {
          v267 = sub_10013A76C();
          if (qword_100234B40 != -1) {
            swift_once(&qword_100234B40, sub_10009F940);
          }
          v268 = v365;
          v269 = sub_100098D58(v365, (uint64_t)qword_10023DCE0);
          v271 = v363;
          v270 = (uint64_t)v364;
          (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v364, v269, v268);
          v272 = (void *)sub_100138AFC(v270, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
          swift_release(v267);
          v265 = (*(uint64_t (**)(uint64_t, uint64_t))(v271 + 8))(v270, v268);
        }

        else
        {
          v317 = static os_log_type_t.error.getter(v266);
          v272 = _swiftEmptyArrayStorage;
          v265 = os_log(_:dso:log:_:_:)( v317,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
        }
      }

      else
      {
        v272 = _swiftEmptyArrayStorage;
      }

      __chkstk_darwin(v265);
      *(&v330 - 2) = v254;
      v298 = sub_100122604((uint64_t (*)(id *))sub_1001874F8, (uint64_t)(&v330 - 4), (uint64_t)v272);
      v318 = swift_bridgeObjectRelease(v272);
      if (v298)
      {
        sub_100150760(v298, v366 & 1);
        goto LABEL_127;
      }

      v319 = static os_log_type_t.error.getter(v318);
      v320 = qword_10023DFC8;
      v302 = swift_allocObject(v369, 72LL, 7LL);
      *(_OWORD *)(v302 + 16) = xmmword_1001A5EA0;
      v321 = [v90 recordName];
      v322 = static String._unconditionallyBridgeFromObjectiveC(_:)(v321);
      v324 = v323;

      v325 = v370;
      *(void *)(v302 + 56) = &type metadata for String;
      *(void *)(v302 + 64) = v325;
      *(void *)(v302 + 32) = v322;
      *(void *)(v302 + 40) = v324;
      os_log(_:dso:log:_:_:)( v319,  &_mh_execute_header,  v320,  "Unable to find cached AAProxCardsRecord to delete: %@",  53LL,  2LL,  v302);
LABEL_129:
      swift_bridgeObjectRelease(v302);
      (*(void (**)(char *, uint64_t))(v373 + 8))(v254, v374);
      return;
    }

void sub_10002B578(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceName]);
  id v7 = *(void **)(a1 + 32);
  if (v7) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || ![v7 containsString:v6])
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2",  30LL,  "BT route, update Wx %@ routed NO",  v21);
    }

    [v5 _setRoutedState:0];
    if ([v5 routingAction] != 2)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        unsigned int v10 = [v5 routingAction];
        if (v10 > 5) {
          double v11 = "?";
        }
        else {
          double v11 = off_100207BA8[v10];
        }
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2",  30LL,  "Current route action is %s, change to DontRoute",  v11);
      }

      [v5 _setRoutingAction:3];
    }

    [v5 setIgnoreManualConnect:1];
  }

  else if (([v5 routed] & 1) == 0)
  {
    [v5 _setRoutedState:1];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);

    if (v9)
    {
      if ([v5 routingAction] != 2)
      {
        if ([v5 routingAction] == 1)
        {
          if ([v5 routingAction] == 1
            && [*(id *)(a1 + 40) _isManualConnection:v21])
          {
            if (dword_100234408 > 30)
            {
LABEL_57:
              [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:&off_100218C60 andWxAddress:v21 andOtherAddress:0];
              goto LABEL_30;
            }

            if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2",  30LL,  "Send ownership false for manual connection");
            }
            unsigned int v12 = 1;
          }

          else
          {
            unsigned int v12 = 0;
          }
        }

        else
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2",  30LL,  "BT route, make Wx %@ Route",  v21);
          }

          [v5 _setRoutingAction:1];
          uint64_t v13 = *(void *)(a1 + 40);
          if (*(_BYTE *)(v13 + 929))
          {
            unsigned int v12 = 0;
            *(_BYTE *)(v13 + 929) = 0;
          }

          else
          {
            double v14 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceVersion]);
            double v15 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceVersion]);
            [v15 doubleValue];
            if (v16 < 1.2 || [@"3E725" compare:v14 options:64] == (id)1)
            {
              unsigned int v12 = 1;
            }

            else
            {
              int v17 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTName]);
              unsigned int v12 = [v17 isEqualToString:@"Mac"];
            }
          }
        }

        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          if (v12) {
            double v18 = "yes";
          }
          else {
            double v18 = "no";
          }
          int v19 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTName]);
          else {
            int v20 = "no";
          }
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2",  30LL,  "Legacy routing behavior = %s is other side mac = %s",  v18,  v20);

          if ((v12 & 1) != 0) {
            goto LABEL_57;
          }
        }

        else if (v12)
        {
          goto LABEL_57;
        }
      }
    }
  }

LABEL_30:
}

  double v11 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v11 + 1064) && *(void *)(v11 + 264))
  {
    [*(id *)(v11 + 264) removeAllObjects];
    unsigned int v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void **)(v12 + 264);
    *(void *)(v12 + 264) = 0LL;

    double v11 = *(void *)(a1 + 40);
  }

  [(id)v11 _update];
  id v5 = v14;
LABEL_34:
  if (v5)
  {
    v5[2](v14);
    id v5 = v14;
  }
}

  [*(id *)(a1 + 32) setIsFetchInProgress:0];
  char v43 = (void *)objc_claimAutoreleasedReturnValue([&v11[50] sharedInstance]);
  [v43 endTransaction:@"fetchAccessoryKeyBlob"];
}

    __break(1u);
    goto LABEL_31;
  }

  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }

  double v18 = v7;
  int v19 = v14;
  int v20 = a1;
  for (i = a2; ; i = v24)
  {
    uint64_t v26 = static String._fromUTF8Repairing(_:)(v20, i);
    int v28 = v27;
    *(void *)description = v26;
    int v70 = v27;
    swift_bridgeObjectRetain(v27);
    v29._countAndFlagsBits = 46LL;
    v29._object = (void *)0xE100000000000000LL;
    String.append(_:)(v29);
    uint64_t v30 = swift_bridgeObjectRelease(v28);
    a3 = *(void *)description;
    uint64_t v31 = v70;
    uint64_t v32 = UUID.init()(v30);
    id v7 = UUID.uuidString.getter(v32);
    id v34 = v33;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v10, v18);
    *(void *)description = a3;
    int v70 = v31;
    swift_bridgeObjectRetain(v31);
    v35._countAndFlagsBits = v7;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v31);
    double v36 = *(void *)description;
    uint64_t v37 = v70;
    char v38 = &v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name];
    unsigned int v10 = *(char **)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name + 8];
    *(void *)char v38 = *(void *)description;
    *((void *)v38 + 1) = v37;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v10);
    unsigned int v39 = String.utf8CString.getter(v36, v37);
    swift_bridgeObjectRelease(v37);
    uint64_t v40 = os_transaction_create(v39 + 32);
    swift_release(v39);
    id v41 = *(void *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction];
    *(void *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction] = v40;
    swift_unknownObjectRelease(v41);
    LODWORD(v15) = v68;
    if ((v68 & 1) == 0) {
      break;
    }
    double v15 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v15) = a1 >> 11;
      LODWORD(v15) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) == 0)
        {
          a3 = (uint64_t)&unk_100235000;
          if (a1 <= 0xFF)
          {
            char v43 = ((_BYTE)a1 + 1);
            goto LABEL_22;
          }

          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }

          v149 = (v38 - 1) & v38;
          v150 = (void (*)(void *))v39;
          double v36 = __clz(__rbit64(v38)) + (v39 << 6);
        }

        id v41 = *(void **)(*(void *)(v148 + 48) + 8 * v36);
        uint64_t v42 = *(void *)(v148 + 56) + 16 * v36;
        uint64_t v44 = *(void (**)(uint64_t *))v42;
        char v43 = *(void *)(v42 + 8);
        unsigned int v45 = v154;
        v162 = v154;
        v163 = 1;
        sub_1001135B4(v154, 1);
        uint64_t v46 = v41;
        swift_retain(v43);
        v44(&v162);
        swift_release(v43);
        id v47 = sub_100112AC0(v45, 1);
        uint64_t v23 = static os_log_type_t.error.getter(v47);
        id v48 = qword_10023DFB8;
        int v49 = swift_allocObject(v153, 152LL, 7LL);
        *(_OWORD *)(v49 + 16) = v147;
        uint64_t v50 = [v46 recordID];
        unsigned int v51 = [v50 description];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        uint64_t v54 = v53;

        int v55 = v151;
        *(void *)(v49 + 56) = &type metadata for String;
        *(void *)(v49 + 64) = v55;
        *(void *)(v49 + 32) = v52;
        *(void *)(v49 + 40) = v54;
        v162 = v45;
        uint64_t v56 = v45;
        id v57 = v55;
        sub_1001135B4(v56, 1);
        uint64_t v58 = String.init<A>(describing:)(&v162, v152);
        *(void *)(v49 + 96) = &type metadata for String;
        *(void *)(v49 + 104) = v57;
        *(void *)(v49 + 72) = v58;
        *(void *)(v49 + 80) = v59;
        int v60 = [v46 recordChangeTag];
        if (!v60) {
          break;
        }
        uint64_t v61 = v60;
        __int128 v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        uint64_t v35 = v63;

        id v34 = (uint64_t *)(v49 + 112);
        *(void *)(v49 + 136) = &type metadata for String;
        *(void *)(v49 + 144) = v57;
        if (!v35) {
          goto LABEL_13;
        }
        *id v34 = v62;
LABEL_14:
        *(void *)(v49 + 120) = v35;
        os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  v48,  "CheckInPendingCloudUpdates CKRecord save failed (%@) with error: %@. Record change tag: %@",  90LL,  2LL,  v49);

        swift_bridgeObjectRelease(v49);
        uint64_t v32 = v149;
        BOOL v33 = (void (*)(void))v150;
      }

      id v34 = (uint64_t *)(v49 + 112);
      *(void *)(v49 + 136) = &type metadata for String;
      *(void *)(v49 + 144) = v57;
LABEL_13:
      *id v34 = 15932LL;
      uint64_t v35 = 0xE200000000000000LL;
      goto LABEL_14;
    }

    return swift_release(v19);
  }

  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void sub_10002B984(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 320LL);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bluetoothAddress]);

    if ([v8 length] == (id)6)
    {
      id v9 = v8;
      uint64_t v10 = NSPrintF("%.6a", COERCE_DOUBLE([v9 bytes]));
      double v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      unsigned int v12 = v11;
      if (v11 && ([v11 isEqualToString:v16] & 1) != 0)
      {

        goto LABEL_24;
      }
    }

    else
    {
      unsigned int v12 = 0LL;
    }
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_3",  30LL,  "Speaker/Receiver route, update Wx %@ routed NO",  v16);
  }
  [v5 _setRoutedState:0];
  BOOL v13 = 0;
  if ([v5 routingAction] == 1)
  {
    double v14 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
    BOOL v13 = v14 == 0LL;
  }

  if ([v5 routingAction] != 2 && !v13)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_3",  30LL,  "Speaker/Receiver route, Make Wx %@ DontRoute",  v16);
    }

    [v5 _setRoutingAction:3];
  }

  double v15 = *(void **)(a1 + 32);
  if (v15[132] && *(_BYTE *)(a1 + 40)) {
    [v15 _setConnectedBannerTick:0];
  }
LABEL_24:
}

void sub_10002BD10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorSpeakRoute]_block_invoke",  90LL,  "Speak route completed: %{error}",  v3);
  }
  [*(id *)(a1 + 32) invalidate];
}

void sub_10002BDF8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 attributeForKey:AVSystemController_PlayingSessionsDescriptionAttribute]);

  BOOL v4 = [v3 count] != 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(dispatch_queue_s **)(v5 + 296);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_10002BEAC;
  v7[3] = &unk_100206F80;
  void v7[4] = v5;
  BOOL v8 = v4;
  dispatch_async(v6, v7);
}

id sub_10002BEAC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = *(_BYTE *)(a1 + 40);
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 56LL)) {
      uint64_t v2 = "playing";
    }
    else {
      uint64_t v2 = "not playing";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _mediaRouteMonitorActivityLevelUpdate:]_block_invoke_2",  30LL,  "Audio is %s on the system",  v2);
  }

  [*(id *)(a1 + 32) _nearbyInfoActivityChanged];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(void **)(v3 + 1152);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_10002BF98;
  v6[3] = &unk_100206F58;
  v6[4] = v3;
  return [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_10002BF98(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 otherTipiDeviceIsWatch];
  if ((v5 & 1) != 0 || GestaltGetDeviceClass(v5) == 6) {
    [*(id *)(a1 + 32) _sendAudioCategory:v6 withAudioCategory:*(void *)(*(void *)(a1 + 32) + 480)];
  }
}

void sub_10002CFFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10002D03C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v15 = *(id *)(v5 + 40);
  unsigned __int8 v6 = [v2 shouldClientWithAudioScore:v3 hijackRoute:v4 hijackDeniedReason:&v15];
  objc_storeStrong((id *)(v5 + 40), v15);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = v6;

  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10002D134;
  block[3] = &unk_100206FA8;
  BOOL v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 296);
  block[1] = 3221225472LL;
  void block[4] = v7;
  int v14 = *(_DWORD *)(a1 + 72);
  id v11 = v8;
  id v12 = *(id *)(a1 + 48);
  __int128 v13 = *(_OWORD *)(a1 + 56);
  dispatch_async(v9, block);
}

id sub_10002D134(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _mediaRouteHijackResponse:*(unsigned int *)(a1 + 72) wxAddress:*(void *)(a1 + 40) andAudioResponseID:*(void *)(a1 + 48) andAllowedToHijack:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) withReason:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
}

void sub_10002D1B4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if ([v5 routingAction] == 3)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _updateRoutingActionForManuallyRoute]_block_invoke",  30LL,  "Change %@ DontRoute to Route",  v9);
    }

    [v5 _setRoutingAction:1];
  }

  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);

  if (v6)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _updateRoutingActionForManuallyRoute]_block_invoke",  30LL,  "Force other side to give up ownership of %@",  v9);
    }

    uint64_t v7 = *(void **)(a1 + 32);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
    [v7 _relayConduitMessageSend:1 withOptions:&off_100218C88 andWxAddress:v9 andOtherAddress:v8];
  }
}

void *sub_10002D584(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[72] == *(void *)(a1 + 40)) {
    return _[result _nearbyInfoDeviceFound:a2];
  }
  return result;
}

void *sub_10002D5A8(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[72] == *(void *)(a1 + 40)) {
    return [result _nearbyInfoDeviceLost:a2];
  }
  return result;
}

void *sub_10002D5CC(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[72] == *(void *)(a1 + 40)) {
    return _[result _nearbyInfoDeviceFound:a2];
  }
  return result;
}

void sub_10002D5F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 576LL) == *(void *)(a1 + 40))
  {
    id v6 = v3;
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoDiscoveryEnsureStarted]_block_invoke_4",  90LL,  "### NearbyInfo discovery start failed: %{error}",  v6);
    }

    [*(id *)(a1 + 40) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 576);
    *(void *)(v4 + 576) = 0LL;

    id v3 = v6;
  }
}

void *sub_10002D6A4(void *result)
{
  uint64_t v1 = result;
  if (dword_100234408 <= 30)
  {
    if (dword_100234408 != -1 || (id result = (void *)_LogCategory_Initialize(&dword_100234408, 30LL), (_DWORD)result)) {
      id result = (void *)LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoDiscoveryEnsureStarted]_block_invoke_5",  30LL,  "Evaluate for FD");
    }
  }

  uint64_t v2 = (void *)v1[4];
  if (v2 == *(void **)(v1[5] + 800LL))
  {
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v3);
      uint64_t v4 = v1[5];
      id v5 = *(void **)(v4 + 800);
      *(void *)(v4 + 800) = 0LL;
    }

    return [*(id *)(v1[5] + 336) trigger];
  }

  return result;
}

void sub_10002DC08(_Unwind_Exception *a1)
{
}

void sub_10002DC24(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v11 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v11 model]);
  if (([v6 containsString:@"Mac"] & 1) == 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v11 model]);
    if (([v7 hasPrefix:@"iPhone"] & 1) == 0)
    {
      BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v11 model]);
      if (![v8 hasPrefix:@"iPad"])
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 model]);
        unsigned __int8 v10 = [v9 hasPrefix:@"iPod"];

        if ((v10 & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
  }

LABEL_7:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
  *a4 = 1;
LABEL_8:
}

void sub_10002E2E4(uint64_t a1, void *a2)
{
  id v5 = a2;
  [*(id *)(a1 + 32) invalidate];
  id v3 = v5;
  if (v5)
  {
    if (dword_100234408 <= 90)
    {
      if (dword_100234408 != -1 || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), id v3 = v5, v4))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoSetAudioRoutingScore]_block_invoke",  90LL,  "### NearbyInfo set audio routing score failed: %d, %{error}",  *(unsigned int *)(*(void *)(a1 + 40) + 1004LL),  v3);
        id v3 = v5;
      }
    }
  }
}

void sub_10002E84C(_Unwind_Exception *a1)
{
}

id sub_10002E86C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 routed];
  if ((_DWORD)result && *(_BYTE *)(a1 + 48))
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 != -1 || (id result = (id)_LogCategory_Initialize(&dword_100234408, 30LL), (_DWORD)result))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        if (*(_BYTE *)(v5 + 56)) {
          id v6 = "yes";
        }
        else {
          id v6 = "no";
        }
        else {
          uint64_t v7 = "no";
        }
        id result = (id)LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoActivityChanged]_block_invoke",  30LL,  "NearbyInfoActivityChanged: audio is playing. Continue to keep High score, Media %s, phone call %s",  v6,  v7);
      }
    }

    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 6;
  }

  return result;
}

void *sub_10002EAD0(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 24))
  {
    uint64_t v2 = result;
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 != -1 || (int v4 = _LogCategory_Initialize(&dword_100234408, 30LL), v1 = v2[5], v4))
      {
        if (*(_BYTE *)(v1 + 1016)) {
          id v3 = "yes";
        }
        else {
          id v3 = "no";
        }
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyInfoActivityCriticalStart]_block_invoke",  30LL,  "Activity critical timer ended. Screen %s",  v3);
        uint64_t v1 = v2[5];
      }
    }

    uint64_t v5 = *(void **)(v1 + 24);
    if (v5)
    {
      id v6 = v5;
      dispatch_source_cancel(v6);
      uint64_t v7 = v2[5];
      BOOL v8 = *(void **)(v7 + 24);
      *(void *)(v7 + 24) = 0LL;
    }

    return [(id)v2[5] _nearbyInfoActivityChanged];
  }

  return result;
}

void sub_10002ED2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 656LL) == *(void *)(a1 + 40))
  {
    id v4 = v3;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _pairedDeviceMonitorEnsureStarted]_block_invoke",  30LL,  "Pairing found device %@",  v4);
    }

    [*(id *)(a1 + 32) _anyPairedDeviceSupportsSmartRouting];
    id v3 = v4;
  }
}

void sub_10002EDCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 656LL) == *(void *)(a1 + 40))
  {
    id v4 = v3;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _pairedDeviceMonitorEnsureStarted]_block_invoke_2",  30LL,  "Pairing lost device %@",  v4);
    }

    [*(id *)(a1 + 32) _anyPairedDeviceSupportsSmartRouting];
    id v3 = v4;
  }
}

void sub_10002EE6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4[82] == *(void *)(a1 + 40))
  {
    id v7 = v3;
    if (v3)
    {
      if (dword_100234408 <= 90
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _pairedDeviceMonitorEnsureStarted]_block_invoke_3",  90LL,  "### Activate failed: %{error}\n",  v7);
      }

      [*(id *)(a1 + 40) invalidate];
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 656);
      *(void *)(v5 + 656) = 0LL;
    }

    else
    {
      [v4 _anyPairedDeviceSupportsSmartRouting];
      [*(id *)(a1 + 32) _update];
    }

    id v3 = v7;
  }
}

id sub_10002F104(uint64_t a1)
{
  return [*(id *)(a1 + 32) _nearbyInfoActivityChanged];
}

id sub_10002F424(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result != *(id *)(*(void *)(a1 + 40) + 648LL)) {
    return result;
  }
  *(_BYTE *)(*(void *)(a1 + 40) + 440) = [result primaryAppleIDIsHSA2];
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    if (*(_BYTE *)(*(void *)(a1 + 40) + 440LL)) {
      id v3 = "yes";
    }
    else {
      id v3 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke",  30LL,  "Smart Routing iCloud is HSA2 %s",  v3);
  }

  [*(id *)(a1 + 40) _prefsChanged];
  unsigned int v4 = [*(id *)(*(void *)(a1 + 40) + 648) screenSaverActive];
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(v5 + 1032);
  if (v6 != v4)
  {
    if (dword_100234408 > 30) {
      goto LABEL_21;
    }
    if (dword_100234408 == -1)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(unsigned __int8 *)(v5 + 1032);
    }

    if (v6) {
      id v7 = "yes";
    }
    else {
      id v7 = "no";
    }
    else {
      BOOL v8 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke",  30LL,  "TV ScreenSaver: %s->%s",  v7,  v8);
LABEL_21:
    *(_BYTE *)(*(void *)(a1 + 40) + 1032) = [*(id *)(a1 + 32) screenSaverActive];
    uint64_t v9 = *(void *)(a1 + 40);
    if (!*(_BYTE *)(v9 + 1032))
    {
      unsigned __int8 v10 = *(void **)(v9 + 968);
      if (v10)
      {
        [v10 removeAllObjects];
        uint64_t v9 = *(void *)(a1 + 40);
      }

      id v11 = *(void **)(v9 + 1360);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_10002F764;
      v23[3] = &unk_100207070;
      v23[4] = v9;
      [v11 enumerateKeysAndObjectsUsingBlock:v23];
    }
  }

  if (*(unsigned __int8 *)(*(void *)(a1 + 40) + 1017) != [*(id *)(a1 + 32) screenLocked]) {
    *(_BYTE *)(*(void *)(a1 + 40) + 1017) = [*(id *)(a1 + 32) screenLocked];
  }
  unsigned int v12 = [*(id *)(a1 + 32) screenOn];
  __int128 v13 = *(unsigned __int8 **)(a1 + 40);
  if (v13[1016] == v12) {
    return [v13 _update];
  }
  id result = [*(id *)(a1 + 32) screenOn];
  *(_BYTE *)(*(void *)(a1 + 40) + 1016LL) = (_BYTE)result;
  uint64_t v14 = *(void *)(a1 + 40);
  if (!*(_BYTE *)(v14 + 1016))
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 != -1
        || (v17 = _LogCategory_Initialize(&dword_100234408, 30LL), uint64_t v14 = *(void *)(a1 + 40), v17))
      {
        unint64_t v15 = *(char *)(v14 + 32);
        if (v15 > 0xE) {
          id v16 = "?";
        }
        else {
          id v16 = off_100207898[v15];
        }
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke",  30LL,  "Screen OFF, activity %s",  v16);
        uint64_t v14 = *(void *)(a1 + 40);
      }
    }

    double v18 = *(void **)(v14 + 368);
    if (v18)
    {
      int v19 = v18;
      dispatch_source_cancel(v19);
      uint64_t v20 = *(void *)(a1 + 40);
      id v21 = *(void **)(v20 + 368);
      *(void *)(v20 + 36_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    }

    uint64_t v22 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v22 + 32) == 10)
    {
      [(id)v22 _nearbyInfoActivityChanged];
      uint64_t v22 = *(void *)(a1 + 40);
    }

    if (*(void *)(v22 + 968))
    {
      [*(id *)(v22 + 968) removeAllObjects];
      uint64_t v22 = *(void *)(a1 + 40);
    }

    id result = *(id *)(v22 + 984);
    if (result) {
      return [result removeAllObjects];
    }
  }

  return result;
}

id *sub_10002F764(id *result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id *)_objc_msgSend(result[4], "_wxDeviceFoundforTVOS:");
  }
  return result;
}

void sub_10002F774(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v14 = v5;
  if (*(void *)(a1 + 32) != *(void *)(v6 + 1072)) {
    goto LABEL_34;
  }
  if (a2) {
    BOOL v7 = a2 < 11;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  *(_BYTE *)(v6 + 1064) = v8;
  *(_DWORD *)(*(void *)(a1 + 40) + 1080LL) = a2;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    if (a2 > 29)
    {
      switch(a2)
      {
        case 30:
          uint64_t v9 = "FullWake";
          goto LABEL_26;
        case 40:
          uint64_t v9 = "Restart";
          goto LABEL_26;
        case 50:
          uint64_t v9 = "PowerOff";
          goto LABEL_26;
      }
    }

    else
    {
      switch(a2)
      {
        case 0:
          uint64_t v9 = "Unknown";
          goto LABEL_26;
        case 10:
          uint64_t v9 = "Sleep";
          goto LABEL_26;
        case 20:
          uint64_t v9 = "DarkWake";
LABEL_26:
          if (*(_BYTE *)(*(void *)(a1 + 40) + 1064LL)) {
            unsigned __int8 v10 = "yes";
          }
          else {
            unsigned __int8 v10 = "no";
          }
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke_3",  30LL,  "Sleep/wake state changed: %s, sleeping %s",  v9,  v10);
          goto LABEL_30;
      }
    }

    uint64_t v9 = "?";
    goto LABEL_26;
  }

void sub_10002F910(uint64_t a1)
{
  id v2 = +[PBSSystemStatus systemAttentionState](&OBJC_CLASS___PBSSystemStatus, "systemAttentionState");
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(dispatch_queue_s **)(v3 + 296);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10002F984;
  v5[3] = &unk_100206E98;
  v5[4] = v3;
  v5[5] = v2;
  dispatch_async(v4, v5);
}

id sub_10002F984(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if ((unint64_t)(v2 - 6) >= 3)
  {
    if (*(_BYTE *)(v3 + 689)) {
      goto LABEL_10;
    }
    if (dword_100234408 > 30) {
      goto LABEL_9;
    }
    if (dword_100234408 == -1)
    {
      uint64_t v2 = *(void *)(a1 + 40);
    }

    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke_5",  30LL,  "Pineboard service is ready with status %d",  v2);
LABEL_9:
    *(_BYTE *)(*(void *)(a1 + 32) + 689LL) = 1;
    goto LABEL_10;
  }

  if (*(_BYTE *)(v3 + 689)) {
    *(_BYTE *)(v3 + 689) = 0;
  }
LABEL_10:
  *(_BYTE *)(*(void *)(a1 + 32) + 106RandomBytes(&unk_1002371D8, 4LL) = (*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL) == 6;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 1064)) {
    int v5 = 12;
  }
  else {
    int v5 = 10;
  }
  int v6 = *(_DWORD *)(v4 + 1004);
  if (v5 != v6)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 == -1)
      {
        int v7 = _LogCategory_Initialize(&dword_100234408, 30LL);
        uint64_t v4 = *(void *)(a1 + 32);
        if (!v7) {
          goto LABEL_18;
        }
        int v6 = *(_DWORD *)(v4 + 1004);
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke_5",  30LL,  "tipi score changed from %d -> %d ",  v6,  v5);
      uint64_t v4 = *(void *)(a1 + 32);
    }

LABEL_18:
    *(_DWORD *)(v4 + 1004) = v5;
    [*(id *)(a1 + 32) _sendTipiScoreUpdateToWx];
    uint64_t v4 = *(void *)(a1 + 32);
  }

  return [(id)v4 _update];
}

    -[BTSmartRoutingDaemon _update](self, "_update");
  }

  return v7;
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}
  }

  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10006C960;
    block[3] = &unk_100206058;
    void block[4] = self;
    dispatch_async(&_dispatch_main_q, block);
  }

  ((void (*)(void *))v12[2])(v12);

  _Block_object_dispose(&v24, 8);
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

  if (v16 != v19) {
    goto LABEL_20;
  }
  uint64_t v20 = 0;
LABEL_21:
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  return v20 & 1;
}

  if (v16 != v19) {
    goto LABEL_20;
  }
  uint64_t v20 = 0;
LABEL_21:
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  return v20 & 1;
}

id sub_10002FD68(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _powerMonitorScreenLockChanged]_block_invoke",  30LL,  "Screen locked linger timer fired");
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 1024LL);
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 1024);
    *(void *)(v4 + 1024) = 0LL;
  }

  return [*(id *)(a1 + 32) _update];
}

void sub_10002FFA0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v12 = a2;
  id v9 = a3;
  id v10 = a5;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    uint64_t v11 = "?";
    if ((_DWORD)a4 == 1) {
      uint64_t v11 = "AudioArbitration";
    }
    if (!(_DWORD)a4) {
      uint64_t v11 = "Invalid";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke",  30LL,  "Relay message received: conduit %@, source %@, type %s, data %@\n",  v12,  v9,  v11,  v10);
  }

  [*(id *)(a1 + 32) _relayConduitMessageReceived:v12 andSourceDevice:v9 messageType:a4 messageData:v10];
}

id sub_100030098(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _triggerTipiTableUpdate:a2];
}

void sub_1000300A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(_BYTE *)(*(void *)(a1 + 32) + 850LL))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 btAddressData]);
    uint64_t v6 = CUPrintNSDataAddress();
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    char v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v7]);
    if (!v8)
    {
LABEL_74:

      goto LABEL_75;
    }

    uint64_t v60 = a1;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _myBluetoothAddressString]);
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    uint64_t v61 = v4;
    id obj = (id)objc_claimAutoreleasedReturnValue([v4 tipiDevices]);
    __int128 v63 = v9;
    id v67 = [obj countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v67)
    {
      __int128 v64 = 0LL;
      unsigned __int8 v68 = 0;
      uint64_t v66 = *(void *)v70;
      __int128 v62 = v8;
      do
      {
        for (i = 0LL; i != v67; i = (char *)i + 1)
        {
          if (*(void *)v70 != v66) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)i);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 btAddressData]);
          uint64_t v13 = CUPrintNSDataAddress();
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

          unsigned __int8 v15 = [v11 tipiState];
          unsigned int v16 = [v11 tipiState];
          unsigned int v17 = [v11 tipiState];
          unsigned int v18 = [v9 isEqual:v14];
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            int v19 = v7;
            unsigned int v20 = [v11 tipiConnectionStatus];
            id v21 = "?";
            if (v20 <= 3) {
              id v21 = off_100207668[(char)v20];
            }
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v11 model]);
            unsigned int v23 = [v11 tipiState];
            char v24 = "no";
            if (v18) {
              char v25 = "yes";
            }
            else {
              char v25 = "no";
            }
            if ((v17 & 4) != 0) {
              uint64_t v26 = "yes";
            }
            else {
              uint64_t v26 = "no";
            }
            if ((v16 & 2) != 0) {
              double v27 = "yes";
            }
            else {
              double v27 = "no";
            }
            if ((v15 & 1) != 0) {
              char v24 = "yes";
            }
            uint64_t v59 = v21;
            int v7 = v19;
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3",  30LL,  "TipiTableEvent: Wx %@ TipiDevice %@ Conn %s model %@ Flag %u IsMe %s LastPlay %s Ownership %s TipiState %s",  v19,  v14,  v59,  v22,  v23,  v25,  v26,  v27,  v24);

            char v8 = v62;
            id v9 = v63;
          }

          if ([v11 tipiConnectionStatus] == 2)
          {
            if (v18)
            {
              [v8 setLastPlay:(v17 >> 2) & 1];
              [v8 _setOwnership:(v16 >> 1) & 1];
            }

            else
            {
              id v28 = v14;

              uint64_t v29 = objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
              if (!v29
                || (uint64_t v30 = (void *)v29,
                    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]),
                    unsigned int v32 = [v31 isEqualToString:v28],
                    v31,
                    id v9 = v63,
                    v30,
                    v32))
              {
                [v8 setOtherTipiDeviceLastPlay:(v17 >> 2) & 1];
              }

              __int128 v64 = v28;
            }
          }

          if ([v11 tipiConnectionStatus] == 2
            || [v11 tipiConnectionStatus] == 1)
          {
            ++v68;
          }
        }

        id v67 = [obj countByEnumeratingWithState:&v69 objects:v73 count:16];
      }

      while (v67);
    }

    else
    {
      __int128 v64 = 0LL;
      unsigned __int8 v68 = 0;
    }

    if ([*(id *)(v60 + 32) _isReceivedLegacyTipiConnect:v7])
    {
      uint64_t v4 = v61;
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3",  30LL,  "TipiTableEvent: Skip, receiving legacy Tipi connect LE pipe via Wx %@",  v7);
      }

      goto LABEL_73;
    }

    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1160) objectForKeyedSubscript:v7]);

    if (!v33)
    {
      id v34 = objc_alloc_init(&OBJC_CLASS___SmartRoutingStatsWx);
      [*(id *)(*(void *)(v60 + 32) + 1160) setObject:v34 forKeyedSubscript:v7];
    }

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1160) objectForKeyedSubscript:v7]);
    unsigned int v36 = [v35 thV2WxCount];
    if (v68 >= 2u && v36 != v68)
    {
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
      unsigned __int8 v38 = [v37 isEqualToString:v64];

      if ((v38 & 1) != 0) {
        goto LABEL_52;
      }
      uint64_t v39 = mach_absolute_time();
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1160) objectForKeyedSubscript:v7]);
      [v40 setThV2Ticks:v39];

      if (dword_100234408 > 30
        || dword_100234408 == -1 && !_LogCategory_Initialize(&dword_100234408, 30LL))
      {
        goto LABEL_52;
      }

      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1160) objectForKeyedSubscript:v7]);
      unsigned int v41 = [v35 thV2WxCount];
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1160) objectForKeyedSubscript:v7]);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3",  30,  "TipiTableEvent: Update TiPiV2 Ticks, wx device %@, connectDeviceCount %u, thV2WxCount %u, ticks %u",  v7,  v68,  v41,  [v42 thV2Ticks]);
    }

LABEL_52:
    char v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1160) objectForKeyedSubscript:v7]);
    [v43 setThV2WxCount:v68];

    if (v64)
    {
      [v8 isRoutingActionInitialized];
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
      unsigned __int8 v45 = [v44 isEqualToString:v64];

      uint64_t v4 = v61;
      id v9 = v63;
      if ((v45 & 1) == 0)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3",  30LL,  "TipiTableEvent: Updating other Tipi device to %@, currently other Tipi device %@",  v64,  v46);
        }

        [*(id *)(v60 + 32) _tipiHealing:v7 withDevice:v64];
      }
    }

    else
    {
      uint64_t v4 = v61;
      id v9 = v63;
      if (!*(_BYTE *)(*(void *)(v60 + 32) + 1217LL))
      {
        uint64_t v47 = objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceBTAddress]);
        if (v47)
        {
          id v48 = (void *)v47;
          int v49 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceVersion]);

          if (v49)
          {
            if (dword_100234408 <= 30
              && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
            {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3",  30LL,  "TipiTableEvent: Only one source device is connected, delete TiPi state");
            }

            [*(id *)(v60 + 32) _removeTiPiState:v7];
            goto LABEL_73;
          }
        }
      }

      if (([v8 isRoutingActionInitialized] & 1) == 0
        && !*(_BYTE *)(*(void *)(v60 + 32) + 1217LL))
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3",  30LL,  "TipiTableEvent: Update routing action for regular phase 1");
        }

        if (*(_BYTE *)(*(void *)(v60 + 32) + 665LL)) {
          uint64_t v50 = 1LL;
        }
        else {
          uint64_t v50 = 2LL;
        }
        [v8 _setRoutingAction:v50];
        unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 32) + 1192) objectForKeyedSubscript:v7]);
        [v51 _setUserConnectedState:0];

        [v8 _setRoutingInitialized:1];
        uint64_t v52 = *(void **)(*(void *)(v60 + 32) + 1240LL);
        if (v52)
        {
          unint64_t v53 = v52;
          dispatch_source_cancel(v53);
          uint64_t v54 = *(void *)(v60 + 32);
          int v55 = *(void **)(v54 + 1240);
          *(void *)(v54 + 1240) = 0LL;

          uint64_t v56 = *(void **)(v60 + 32);
          id v57 = (void *)objc_claimAutoreleasedReturnValue([v8 audioRoutingRequest]);
          uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v8 audioRoutingResponse]);
          [v56 _smartRoutingAudioRoutingRequest:v57 withResponseHandler:v58];

          id v9 = v63;
        }
      }
    }

    [*(id *)(v60 + 32) _updateOtherTipiBuildVersion:v7];
LABEL_73:

    goto LABEL_74;
  }

LABEL_75:
}

          *((_DWORD *)v69 + 6) = 0;
          -[BTSmartRoutingDaemon _evaluatorRunforTVOS:](self, "_evaluatorRunforTVOS:", v63);
          goto LABEL_80;
        }

        if (dword_100234408 > 30
          || dword_100234408 == -1 && !_LogCategory_Initialize(&dword_100234408, 30LL))
        {
          goto LABEL_80;
        }

        id v34 = "Ignoring devices not idle";
      }

      else
      {
        if (dword_100234408 > 30
          || dword_100234408 == -1 && !_LogCategory_Initialize(&dword_100234408, 30LL))
        {
          goto LABEL_80;
        }

        id v34 = "Ignoring devices not in-ear: %@";
      }

  __int128 v62 = swift_release(v82);
  uint64_t v6 = v77;
  int v5 = v78;
  unsigned __int8 v15 = static os_log_type_t.default.getter(v62);
  if (qword_100234C20 == -1) {
    goto LABEL_76;
  }
LABEL_82:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_76:
  __int128 v63 = qword_10023DFC0;
  __int128 v64 = sub_100098CD8((uint64_t *)&unk_100234E00);
  __int128 v65 = swift_allocObject(v64, 72LL, 7LL);
  *(_OWORD *)(v65 + 16) = v79;
  *(void *)(v65 + 56) = &type metadata for String;
  *(void *)(v65 + 64) = sub_10009914C();
  uint64_t v66 = v83;
  *(void *)(v65 + 32) = a4;
  *(void *)(v65 + 40) = v66;
  swift_bridgeObjectRetain(v66);
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v63,  "CloudSync: remove AADeviceRecord with BT Address: %@",  52LL,  2LL,  v65);
  swift_bridgeObjectRelease(v65);
  id v67 = v73;
  unsigned __int8 v68 = sub_1000AE6C8();
  sub_10014A464(a4, v66, 0x6563697665444141LL, 0xEE0064726F636552LL, v6, v5);

  return swift_release(v68);
}

                              __break(1u);
LABEL_76:
                              swift_once(&qword_100234C18, sub_10018A920);
LABEL_56:
                              id v93 = qword_10023DFB8;
                              id v94 = os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_10023DFB8,  "checkInPendingCloudUpdates: operation complete",  46LL,  2LL,  _swiftEmptyArrayStorage);
                              id v95 = static os_log_type_t.default.getter(v94);
                              unsigned int v96 = sub_100098CD8((uint64_t *)&unk_100234E00);
                              v97 = swift_allocObject(v96, 72LL, 7LL);
                              v154 = xmmword_1001A5EA0;
                              *(_OWORD *)(v97 + 16) = xmmword_1001A5EA0;
                              unsigned __int8 v98 = v142;
                              swift_beginAccess(v142, v161, 0LL, 0LL);
                              signed int v99 = swift_weakLoadStrong(v98);
                              if (v99)
                              {
                                signed int v100 = v99;
                                swift_beginAccess(v99 + 112, v160, 0LL, 0LL);
                                v101 = *(void *)(v100 + 112);
                                swift_bridgeObjectRetain(v101);
                                swift_release(v100);
                              }

                              else
                              {
                                v101 = 0LL;
                              }

                              v159[0] = v101;
                              v102 = sub_100098CD8(&qword_100236718);
                              v103 = String.init<A>(describing:)(v159, v102);
                              uint64_t v105 = v104;
                              *(void *)(v97 + 56) = &type metadata for String;
                              v106 = sub_10009914C();
                              *(void *)(v97 + 64) = v106;
                              *(void *)(v97 + 32) = v103;
                              *(void *)(v97 + 40) = v105;
                              os_log(_:dso:log:_:_:)( v95,  &_mh_execute_header,  v93,  "Pending changes in queue: %@",  28LL,  2LL,  v97);
                              unsigned int v107 = swift_bridgeObjectRelease(v97);
                              v108 = static os_log_type_t.default.getter(v107);
                              v109 = qword_10023DFB8;
                              unsigned __int8 v110 = swift_allocObject(v96, 72LL, 7LL);
                              *(_OWORD *)(v110 + 16) = v154;
                              v111 = v142;
                              swift_beginAccess(v142, v159, 0LL, 0LL);
                              id v112 = swift_weakLoadStrong(v111);
                              if (v112)
                              {
                                unsigned __int8 v113 = v112;
                                swift_beginAccess(v112 + 120, &v158, 0LL, 0LL);
                                uint64_t v114 = *(void *)(v113 + 120);
                                swift_bridgeObjectRetain(v114);
                                swift_release(v113);
                              }

                              else
                              {
                                uint64_t v114 = 0LL;
                              }

                              v157[0] = v114;
                              id v115 = sub_100098CD8(&qword_100236720);
                              v116 = String.init<A>(describing:)(v157, v115);
                              *(void *)(v110 + 56) = &type metadata for String;
                              *(void *)(v110 + 64) = v106;
                              *(void *)(v110 + 32) = v116;
                              *(void *)(v110 + 40) = v117;
                              os_log(_:dso:log:_:_:)( v108,  &_mh_execute_header,  v109,  "Pending deletes in queue: %@",  28LL,  2LL,  v110);
                              swift_bridgeObjectRelease(v110);
                              v118 = v143;
                              swift_beginAccess(v143 + 112, v157, 0LL, 0LL);
                              if (*(void *)(*(void *)(v118 + 112) + 16LL)
                                || (swift_beginAccess(v118 + 120, &v156, 0LL, 0LL),
                                    int v19 = v143,
                                    *(void *)(*(void *)(v143 + 120) + 16LL)))
                              {
                                sub_1000F5AEC(v140 & 1);
                                int v19 = v143;
                              }

                              if ((v141 & 1) != 0)
                              {
                                uint64_t v119 = sub_1001042A0(45.0);
                                v120 = static os_log_type_t.default.getter(v119);
                                int v121 = qword_10023DFB8;
                                int v122 = swift_allocObject(v96, 72LL, 7LL);
                                *(_OWORD *)(v122 + 16) = v154;
                                unsigned int v123 = *(void **)(v19 + 40);
                                if (v123)
                                {
                                  char v124 = [v123 date];
                                  unsigned __int8 v125 = v138;
                                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v124);

                                  unsigned __int8 v126 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
                                  isa = Date._bridgeToObjectiveC()().super.isa;
                                  BOOL v128 =  [v126 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

                                  uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
                                  uint64_t v131 = v130;

                                  (*(void (**)(char *, uint64_t))(v139 + 8))(v125, v137);
                                }

                                else
                                {
                                  uint64_t v129 = 0LL;
                                  uint64_t v131 = 0LL;
                                }

                                v155[0] = v129;
                                v155[1] = v131;
                                char v132 = sub_100098CD8(&qword_100236640);
                                v133 = String.init<A>(describing:)(v155, v132);
                                *(void *)(v122 + 56) = &type metadata for String;
                                *(void *)(v122 + 64) = v106;
                                *(void *)(v122 + 32) = v133;
                                *(void *)(v122 + 40) = v134;
                                os_log(_:dso:log:_:_:)( v120,  &_mh_execute_header,  v121,  "Cloud update done, continue the fetch: %@",  41LL,  2LL,  v122);
                                swift_bridgeObjectRelease(v122);
                                int v19 = v143;
                              }

                              return swift_release(v19);
                            }

                            unint64_t v91 = v70 + 4;
                          }
                        }
                      }

  uint64_t v60 = swift_release(v82);
  uint64_t v6 = (uint64_t)v77;
  int v5 = v78;
  uint64_t v14 = static os_log_type_t.default.getter(v60);
  if (qword_100234C20 == -1) {
    goto LABEL_76;
  }
LABEL_82:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_76:
  uint64_t v61 = qword_10023DFC0;
  __int128 v62 = sub_100098CD8((uint64_t *)&unk_100234E00);
  __int128 v63 = swift_allocObject(v62, 72LL, 7LL);
  *(_OWORD *)(v63 + 16) = v79;
  *(void *)(v63 + 56) = &type metadata for String;
  *(void *)(v63 + 64) = sub_10009914C();
  __int128 v64 = v83;
  *(void *)(v63 + 32) = a4;
  *(void *)(v63 + 40) = v64;
  swift_bridgeObjectRetain(v64);
  os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v61,  "CloudSync: remove AAProxCardsRecord with BT Address: %@",  55LL,  2LL,  v63);
  swift_bridgeObjectRelease(v63);
  __int128 v65 = v72;
  uint64_t v66 = sub_1000AE6C8();
  sub_10014A464(a4, v64, 0xD000000000000011LL, (unint64_t)v71 | 0x8000000000000000LL, (void (*)(void))v6, v5);

  return swift_release(v66);
}

void sub_1000308E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v12 = v3;
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_4",  90LL,  "### Activate failed: %{error}\n",  v12);
    }

    [*(id *)(a1 + 32) invalidate];
    goto LABEL_11;
  }

  if (dword_100234408 <= 30)
  {
    id v12 = 0LL;
    if (dword_100234408 != -1 || (v7 = _LogCategory_Initialize(&dword_100234408, 30LL), uint64_t v4 = 0LL, v7))
    {
      unint64_t v5 = (unint64_t)[*(id *)(a1 + 32) bluetoothState];
      if (v5 > 0xA) {
        uint64_t v6 = "?";
      }
      else {
        uint64_t v6 = off_1002076E0[v5];
      }
      unsigned int v8 = [*(id *)(a1 + 32) discoverableState];
      if (v8 > 2) {
        id v9 = "?";
      }
      else {
        id v9 = off_100207688[v8];
      }
      unsigned int v10 = [*(id *)(a1 + 32) inquiryState];
      if (v10 > 2) {
        uint64_t v11 = "?";
      }
      else {
        uint64_t v11 = off_100207688[v10];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_4",  30LL,  "Activated: Bluetooth state %s, Discoverable %s, Inquiry %s\n",  v6,  v9,  v11);
LABEL_11:
      uint64_t v4 = v12;
    }
  }
}

void sub_100030D44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_100030D68(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v18 = a2;
  id v7 = a3;
  if ([v18 isEqualToString:a1[4]])
  {
    if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL))
    {
      unsigned int v8 = objc_alloc_init(&OBJC_CLASS___CBDevice);
      uint64_t v9 = *(void *)(a1[7] + 8LL);
      unsigned int v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }

    if (!*(void *)(*(void *)(a1[8] + 8LL) + 40LL))
    {
      uint64_t v11 = objc_alloc_init(&OBJC_CLASS___CBDevice);
      uint64_t v12 = *(void *)(a1[8] + 8LL);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 conduitDeviceID]);
    [*(id *)(*(void *)(a1[7] + 8) + 40) setIdentifier:v14];

    if (a1[5])
    {
      objc_msgSend(*(id *)(*(void *)(a1[8] + 8) + 40), "setIdentifier:");
    }

    else
    {
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v7 otherTipiDeviceBTAddress]);
      [*(id *)(*(void *)(a1[8] + 8) + 40) setIdentifier:v15];
    }

    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v7 conduitDeviceID]);
      unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[8] + 8) + 40) identifier]);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:]_block_invoke",  90LL,  "Relaying via %@ inWxAddress %@ to %@ with options %@",  v16,  v18,  v17,  a1[6]);
    }

    *a4 = 1;
  }
}

void sub_100030F30(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100234408 <= 90
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:]_block_invoke_2",  90LL,  "Message sent: %{error}",  v3);
  }

  else
  {
  }

void sub_100031E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_100031E90(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v30 = a2;
  id v7 = a3;
  if ([v30 containsString:*(void *)(a1 + 32)])
  {
    unsigned int v8 = [v7 audioRoutingClientID];
    if (v8 == [*(id *)(a1 + 40) unsignedIntValue])
    {
      uint64_t v9 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v7 conduitMessageTimer]);
      unsigned int v10 = v9;
      if (v9) {
        dispatch_source_cancel(v9);
      }
      [v7 setConduitMessageTimer:0];
      uint64_t v11 = mach_absolute_time();
      uint64_t v12 = UpTicksToMilliseconds(v11 - (void)[v7 conduitMessageTicks]);
      if (dword_100234408 <= 30)
      {
        uint64_t v13 = v12;
        if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "Hijack response received, round trip time took %llums",  v13);
        }
      }

      [v7 setConduitMessageTicks:0];
      id v14 = objc_alloc_init(&OBJC_CLASS___BTAudioRoutingResponse);
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"audioRoutingHijackAnswer"]);
      signed int v16 = [v15 intValue];
      uint64_t v17 = v16;
      switch(v16)
      {
        case 1:
          *(void *)(*(void *)(a1 + 56) + 38RandomBytes(&unk_1002371D8, 4LL) = mach_absolute_time();
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "SmartRoutingAudioHijackAnswerAccepted");
          }

          [v14 setAction:1];
          [v14 setDeviceAddress:*(void *)(a1 + 32)];
          [v14 setReason:@"Tipi device hijack was successful"];
          *(void *)(*(void *)(a1 + 56) + 112LL) = mach_absolute_time();
          break;
        case 2:
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "SmartRoutingAudioHijackAnswerAmbiguity");
          }

          [v14 setAction:3];
          [v14 setDeviceAddress:0];
          id v18 = @"Tipi device hijack was ambigious";
          goto LABEL_30;
        case 3:
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "SmartRoutingAudioHijackAnswerRejected");
          }

          [v14 setAction:3];
          [v14 setDeviceAddress:0];
          id v18 = @"Tipi device hijack was rejected";
          goto LABEL_30;
        case 4:
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "SmartRoutingAudioHijackAnswerBackoff");
          }

          [v14 setAction:4];
          [v14 setDeviceAddress:*(void *)(a1 + 32)];
          id v18 = @"Tipi device hijack was backed off";
LABEL_30:
          [v14 setReason:v18];
          break;
        default:
          break;
      }

      int v19 = (void *)objc_claimAutoreleasedReturnValue([v7 audioRoutingResponse]);

      if (v19)
      {
        unsigned int v20 = *(void **)(a1 + 56);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 audioRoutingResponse]);
        [v20 _respondRoutingRequest:v14 withResponseHandler:v21 wxAddress:v30];
      }

      if ((_DWORD)v17 == 1)
      {
        uint64_t v22 = mach_absolute_time();
        unint64_t v23 = UpTicksToSeconds(v22 - *(void *)(*(void *)(a1 + 56) + 1056LL));
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          unsigned int v24 = [v7 routed];
          char v25 = "no";
          if (v24) {
            char v25 = "yes";
          }
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "Show connected banner after hijack routed %s secondSinceLastBanner %d",  v25,  v23);
        }

        if (([v7 routed] & 1) != 0
          || (uint64_t v26 = *(void *)(a1 + 56), *(void *)(v26 + 1056)) && *(double *)(v26 + 1040) > (double)v23)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            else {
              double v27 = "no";
            }
            unsigned int v28 = [v7 inEarDisabled];
            uint64_t v29 = "no";
            if (v28) {
              uint64_t v29 = "yes";
            }
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  30LL,  "Connected banner cool off period is %llus, inEar state is %s inEar state disabled %s",  v23,  v27,  v29);
          }
        }
      }

      [*(id *)(a1 + 56) _startHijackMetricSubmission:v17 wxAddress:v30 version:@"V1"];
      *a4 = 1;
    }
  }
}

void sub_1000323B0(void *a1, void *a2, void *a3)
{
  id v11 = a3;
  if ([a2 isEqualToString:a1[4]])
  {
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 1152) objectForKeyedSubscript:a1[4]]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceVersion]);
    [v6 doubleValue];
    if (v7 < 1.2)
    {
    }

    else
    {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 1152) objectForKeyedSubscript:a1[4]]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 otherTipiDeviceVersion]);

      if (v9) {
        goto LABEL_14;
      }
    }

    if (dword_100234408 <= 40
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 40LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke",  40LL,  "Tipi healing legacy behavior");
    }

    else {
      uint64_t v10 = 3LL;
    }
    [v11 _setRoutingAction:v10];
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
  }

void sub_1000324F4(uint64_t a1, void *a2, void *a3)
{
  id v20 = a3;
  unsigned int v5 = [a2 isEqualToString:*(void *)(a1 + 32)];
  uint64_t v6 = v20;
  if (v5)
  {
    double v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) objectForKeyedSubscript:*(void *)(a1 + 32)]);
    int v8 = [v7 audioStreamState];
    uint64_t v9 = *(void *)(a1 + 40);
    if (v8 > 1)
    {
      if (*(_BYTE *)(v9 + 56))
      {
        unsigned int v12 = [*(id *)(v9 + 144) activeCallCount];

        id v11 = v20;
        if (v12) {
          goto LABEL_10;
        }
LABEL_24:
        [v11 _setRoutingAction:3];
LABEL_25:
        *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
        uint64_t v6 = v20;
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 184) objectForKeyedSubscript:*(void *)(a1 + 32)]);
      if ([v10 audioStreamState])
      {

        id v11 = v20;
LABEL_10:
        unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceVersion]);
        signed int v16 = (void *)objc_claimAutoreleasedReturnValue([v20 otherTipiDeviceVersion]);
        [v16 doubleValue];
        BOOL v18 = v17 < 1.2 || [@"3E725" compare:v15 options:64] == (id)1;

        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          int v19 = "no";
          if (v18) {
            int v19 = "yes";
          }
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke_2",  30LL,  "Legacy routing behavior = %s",  v19);
        }

        [v20 _setRoutingAction:1];
        if (v18) {
          [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:&off_100218CB0 andWxAddress:*(void *)(a1 + 32) andOtherAddress:0];
        }

        goto LABEL_25;
      }

      uint64_t v13 = *(void *)(a1 + 40);
      if (*(_BYTE *)(v13 + 56))
      {
        unsigned int v14 = [*(id *)(v13 + 144) activeCallCount];

        id v11 = v20;
        if (v14) {
          goto LABEL_10;
        }
        goto LABEL_24;
      }
    }

    id v11 = v20;
    goto LABEL_24;
  }

LABEL_26:
}
}

    goto LABEL_14;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 idsDevice]);
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nsuuid]);

  uint64_t v13 = sub_100060178("CloudPairing");
  unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  unsigned __int8 v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v15)
    {
      if (*(void *)(a1 + 64) == 1LL) {
        unsigned int v24 = "pairing";
      }
      else {
        unsigned int v24 = "security";
      }
      id v21 = objc_claimAutoreleasedReturnValue([v10 description]);
      char v25 = [v21 UTF8String];
      *(_DWORD *)buf = 136315395;
      uint64_t v29 = (unint64_t)v24;
      id v30 = 2081;
      uint64_t v31 = v25;
      unint64_t v23 = "MUC - Dropping sending '%s request' message to IDS device %{private}s because we got paired";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v23, buf, 0x16u);

      goto LABEL_26;
    }

    goto LABEL_26;
  }

  if (v15)
  {
    if (*(void *)(a1 + 64) == 1LL) {
      signed int v16 = "pairing";
    }
    else {
      signed int v16 = "security";
    }
    double v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    BOOL v18 = [v17 UTF8String];
    *(_DWORD *)buf = 136315395;
    uint64_t v29 = (unint64_t)v16;
    id v30 = 2081;
    uint64_t v31 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "MUC - Sending delayed '%s request' message to IDS device %{private}s",  buf,  0x16u);
  }

  [*(id *)(a1 + 40) initiatePairing:*(void *)(a1 + 32)];
LABEL_14:
}

  unsigned __int8 v15 = sub_100060178("MagicPairing");
  signed int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    double v17 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
    BOOL v18 = [v17 manateeZoneUpgraded];
    *(_DWORD *)buf = 67109120;
    LODWORD(v49) = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "allDevicesStarSky, current manatee state - %d",  buf,  8u);
  }

  int v19 = 1;
LABEL_50:

  return v19;
}
}

          char v25 = (v31 - 1) & v31;
          uint64_t v29 = __clz(__rbit64(v31)) + (i << 6);
        }

        BOOL v33 = *(void *)(*(void *)(v68 + 56) + 8 * v29);
        id v34 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
        swift_retain(v33);
        uint64_t v35 = [v34 isFirstUnlocked];
        id v67 = i;
        __int128 v69 = v33;
        if ((v35 & 1) != 0)
        {
          unsigned int v36 = sub_10013A76C();
          if (qword_100234B70 != -1) {
            swift_once(&qword_100234B70, sub_1000CAF84);
          }
          uint64_t v37 = v65;
          unsigned __int8 v38 = sub_100098D58(v65, (uint64_t)qword_10023DD70);
          uint64_t v40 = (uint64_t)v63;
          uint64_t v39 = v64;
          (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v38, v37);
          unsigned int v41 = sub_100138A68(v40);
          swift_release(v36);
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v37);
          uint64_t v42 = v41[2];
          if (v42) {
            goto LABEL_31;
          }
        }

        else
        {
          uint64_t v50 = static os_log_type_t.error.getter(v35);
          if (qword_100234C28 != -1) {
            swift_once(&qword_100234C28, sub_10018A9E0);
          }
          unsigned int v51 = v50;
          unsigned int v41 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)( v51,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage,  v56,  v57);
          uint64_t v42 = _swiftEmptyArrayStorage[2];
          if (v42)
          {
LABEL_31:
            char v43 = v66;
            uint64_t v44 = (uint64_t)v41
                + ((*(unsigned __int8 *)(v66 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
            swift_bridgeObjectRetain(v41);
            unsigned __int8 v45 = *(void *)(v43 + 72);
            while (1)
            {
              sub_1000A7C90(v44, (uint64_t)v4, type metadata accessor for MagicPairingSettingsRecord);
              uint64_t v46 = &v4[*(int *)(v70 + 24)];
              uint64_t v47 = *((void *)v46 + 1);
              if (*(void *)v46 == v1 && v47 == v2) {
                break;
              }
              int v49 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v46, v47, v1, v2, 0LL);
              sub_1000A7CD4((uint64_t)v4, type metadata accessor for MagicPairingSettingsRecord);
              if ((v49 & 1) != 0) {
                goto LABEL_49;
              }
              v44 += v45;
              if (!--v42)
              {
                swift_release(v69);
                id result = swift_bridgeObjectRelease_n(v41, 2LL);
                i = v67;
                goto LABEL_9;
              }
            }

            sub_1000A7CD4((uint64_t)v4, type metadata accessor for MagicPairingSettingsRecord);
LABEL_49:
            swift_bridgeObjectRelease_n(v41, 2LL);
            uint64_t v52 = swift_bridgeObjectRelease(v59);
            int v8 = static os_log_type_t.default.getter(v52);
            if (qword_100234C20 != -1) {
              goto LABEL_53;
            }
            goto LABEL_50;
          }
        }

        swift_release(v69);
        id result = swift_bridgeObjectRelease(v41);
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_53:
  swift_once(&qword_100234C20, sub_10018A978);
LABEL_50:
  unint64_t v53 = qword_10023DFC0;
  uint64_t v54 = sub_100098CD8((uint64_t *)&unk_100234E00);
  int v55 = swift_allocObject(v54, 72LL, 7LL);
  *(_OWORD *)(v55 + 16) = xmmword_1001A5EA0;
  *(void *)(v55 + 56) = &type metadata for String;
  *(void *)(v55 + 64) = sub_10009914C();
  *(void *)(v55 + 32) = v1;
  *(void *)(v55 + 40) = v2;
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v53,  "CloudSync: Connected device: %@ belongs to Additional user's account",  68LL,  2LL,  v55);
  swift_release(v68);
  swift_bridgeObjectRelease(v55);
  swift_release(v69);
  return 1LL;
}

  __break(1u);
}

        unsigned __int8 v15 = (v29 - 1) & v29;
        double v17 = __clz(__rbit64(v29)) + (v12 << 6);
      }

      BOOL v18 = *(void *)(*(void *)(a1 + 56) + 16 * v17 + 8);
      int v19 = (__CFString *)*(id *)(*(void *)(a1 + 48) + 8 * v17);
      id v20 = swift_retain(v18);
      id v21 = static os_log_type_t.default.getter(v20);
      uint64_t v22 = qword_10023DFA8;
      unint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
      unsigned int v24 = swift_allocObject(v23, 72LL, 7LL);
      *(_OWORD *)(v24 + 16) = xmmword_1001A5EA0;
      char v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      double v27 = v26;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_10009914C();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Setting up darwin callback handler for %@", 41LL, 2LL, v24);
      swift_bridgeObjectRelease(v24);
      uint64_t v2 = v35;
      CFNotificationCenterAddObserver( v36,  v35,  (CFNotificationCallback)sub_100120EF8,  v19,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      swift_release(v18);
    }
  }

  unsigned int v32 = static os_log_type_t.error.getter(0LL);
  if (qword_100234C08 != -1) {
    swift_once(&qword_100234C08, sub_10018A87C);
  }
  os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_10023DFA8,  "darwinCenter not available",  26LL,  2LL,  _swiftEmptyArrayStorage);
  id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ALL,  0x80000001001D2EE0LL,  "audioaccessoryd/DarwinNotificationHelper.swift",  46LL,  2LL,  20LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

void sub_100032920(uint64_t a1, void *a2)
{
  id v20 = a2;
  id v3 = *(id *)(*(void *)(a1 + 32) + 1400LL);
  if (v20)
  {
    uint64_t v4 = NSErrorF(NSOSStatusErrorDomain, 4294960596LL, "Tipi update failed: result %@", v20);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    BOOL v6 = v5 != 0LL;
    if (v5) {
      BOOL v7 = v3 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      if (!v3) {
        goto LABEL_25;
      }
    }

    else
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 wxAddress]);
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = NSErrorF(NSOSStatusErrorDomain, 4294960596LL, "Tipi update failed: result %@", v20);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      [v9 _updateOtherTipiDevice:v8 otherAddress:0 otherName:0 otherVersion:0 withResult:v11];

      BOOL v6 = 1;
    }
  }

  else
  {
    unsigned int v5 = 0LL;
    if (!v3) {
      goto LABEL_25;
    }
    BOOL v6 = 0;
  }

  [*(id *)(*(void *)(a1 + 32) + 1136) _pipeRequestResponse:v3 error:v5];
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v3 version]);
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _updateAccessoryID:connectionDeviceAddresses:completion:]_block_invoke",  30LL,  "Pipe Version %@",  v12);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 version]);
  [v13 doubleValue];
  if (v14 < 1.2)
  {
  }

  else
  {
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v3 version]);

    if (v15) {
      goto LABEL_25;
    }
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _updateAccessoryID:connectionDeviceAddresses:completion:]_block_invoke",  30LL,  "Legacy behavior, clean up pipe");
  }
  signed int v16 = *(void **)(*(void *)(a1 + 32) + 1136LL);
  double v17 = (void *)objc_claimAutoreleasedReturnValue([v3 wxAddress]);
  [v16 _pipeConnectionComplete:v5 andWxHeadset:v17 isSender:0];

  if (!v6)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(void **)(v18 + 1400);
    *(void *)(v18 + 1400) = 0LL;

    *(_BYTE *)(*(void *)(a1 + 32) + 1217LL) = 0;
    [*(id *)(a1 + 32) _startTipiSetupTicks];
  }

void sub_100032D5C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100234408 <= 90
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _updateNearbyDeviceState:withAddress:withEasyPairing:withState:]_block_invoke",  90LL,  "### Failed: %{error}\n",  v3);
  }

  else
  {
  }

void sub_100033820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
}

void sub_100033890(void *a1)
{
  if (*(_DWORD *)(*(void *)(a1[7] + 8LL) + 24LL))
  {
    uint64_t v2 = a1[4];
    id v3 = *(void **)(v2 + 1360);
    if (v3)
    {
      [v3 setObject:0 forKeyedSubscript:a1[5]];
      uint64_t v2 = a1[4];
    }

    int v4 = *(void **)(v2 + 984);
    if (v4)
    {
      [v4 setObject:0 forKeyedSubscript:a1[5]];
      uint64_t v2 = a1[4];
    }

    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 968) objectForKeyedSubscript:a1[6]]);

    if (v5)
    {
      uint64_t v6 = mach_absolute_time();
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 968) objectForKeyedSubscript:a1[6]]);
      unint64_t v8 = UpTicksToSeconds(v6 - (void)[v7 unsignedLongLongValue]);

      if (v8 > 1)
      {
        if (v8 > 0x13) {
          return;
        }
      }

      else
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFoundforTVOS:]_block_invoke",  30LL,  "Cancel bulletin posting since device state updated in %d s",  v8);
        }

        uint64_t v9 = *(void **)(a1[4] + 976LL);
        if (v9)
        {
          uint64_t v10 = v9;
          dispatch_source_cancel(v10);
          uint64_t v11 = a1[4];
          unsigned int v12 = *(void **)(v11 + 976);
          *(void *)(v11 + 976) = 0LL;
        }
      }

      if (*(void *)(a1[4] + 1320LL))
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFoundforTVOS:]_block_invoke",  30LL,  "Cancel bulletin posting as device becomes not qualified in %d s",  v8);
        }

        [*(id *)(a1[4] + 1320) invalidate];
        uint64_t v13 = a1[4];
        double v14 = *(void **)(v13 + 1320);
        *(void *)(v13 + 1320) = 0LL;
      }
    }
  }

void *sub_100033CC4(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[171] == *(void *)(a1 + 40)) {
    return _[result _wxDeviceFoundforTVOS:a2];
  }
  return result;
}

void sub_100033CE8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[171] == *(void *)(a1 + 40))
  {
    id v4 = a2;
    [v2 _lowBatteryDeviceLost:v4];
    [*(id *)(a1 + 32) _wxDeviceLost:v4];
  }

void *sub_100033D50(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[171] == *(void *)(a1 + 40)) {
    return _[result _wxDeviceFoundforTVOS:a2];
  }
  return result;
}

void sub_100033D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(v1 + 1368);
  if (v3 == v2)
  {
    *(void *)(v1 + 136_Block_object_dispose((const void *)(v25 - 120), 8) = 0LL;
  }

void sub_100033D90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 1368LL) == *(void *)(a1 + 40))
  {
    id v6 = v3;
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDiscoveryEnsureStarted]_block_invoke_5",  90LL,  "### Wx Device discovery start failed: %{error}",  v6);
    }

    [*(id *)(a1 + 40) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = *(void **)(v4 + 1368);
    *(void *)(v4 + 136_Block_object_dispose((const void *)(v25 - 120), 8) = 0LL;

    id v3 = v6;
  }
}

LABEL_148:
      id v84 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
      if (!v84) {
        goto LABEL_152;
      }
      BOOL v85 = (void *)v84;
      unint64_t v86 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
      unint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v86 deviceName]);

      if (v87) {
        goto LABEL_152;
      }
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      BOOL v88 = (void *)objc_claimAutoreleasedReturnValue([v56 deviceManager]);
      uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v88 fetchDeviceSyncWithAddress:v13]);
      id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 nickname]);
      unint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
      [v91 setDeviceName:v90];

LABEL_151:
LABEL_152:

      unint64_t v8 = v97;
LABEL_153:

      goto LABEL_154;
    }

    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_wxDevices, "objectForKeyedSubscript:", v5));

    if (!v47)
    {
LABEL_142:
      -[NSMutableDictionary setObject:forKeyedSubscript:](self->_wxDevices, "setObject:forKeyedSubscript:", v101, v5);
      -[CUCoalescer trigger](self->_evaluatorCoalescer, "trigger");
      if (v13)
      {
        uint64_t v79 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
        if (v79)
        {
          uint64_t v80 = (void *)v79;
          id v81 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
          uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v81 otherTipiDeviceBTAddress]);
          if (v82)
          {
          }

          else
          {
            tipiElectionInProgress = self->_tipiElectionInProgress;

            if (!tipiElectionInProgress) {
              -[BTSmartRoutingDaemon _tipiHealingAttempt](self, "_tipiHealingAttempt");
            }
          }
        }
      }

      goto LABEL_148;
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing headset status %u",  Int64Ranged);
    }

    int v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_wxDevices, "objectForKeyedSubscript:", v5));
    if (!v13) {
      goto LABEL_141;
    }
    uint64_t v50 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
    if (!v50) {
      goto LABEL_141;
    }
    unsigned int v51 = (void *)v50;
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
    unint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 otherTipiDeviceBTAddress]);

    if (!v53) {
      goto LABEL_141;
    }
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));
      int v55 = (void *)objc_claimAutoreleasedReturnValue([v54 otherTipiDeviceBTAddress]);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing headset in Tipi with %@",  v55);
    }

    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v49 bleDevice]);
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 advertisementFields]);
    __int128 v62 = CFDictionaryGetInt64Ranged(v61, @"hsStatus", 0LL, 0xFFFFFFFFLL, 0LL);

    if (((v62 ^ (unsigned __int16)Int64Ranged) & 0x100) != 0)
    {
      if (dword_100234408 <= 30)
      {
        if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing, A2DP / HFP budswap detected from placement...");
        }
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Saving budswap info since we are in Tipi",  v92);
        }
      }
    }

    else
    {
      if (dword_100234408 <= 30)
      {
        if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Smart Routing, A2DP / HFP budswap detected from primary...");
        }
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Saving budswap info since we are in Tipi %@",  v13);
        }
      }
    }

    budSwapAddress = self->_budSwapAddress;
    self->_hfpBudswapDetected = 1;
    if (!budSwapAddress)
    {
      __int128 v64 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_smartRoutingWxDeviceMap,  "objectForKeyedSubscript:",  v13));

      if (!v64)
      {
        __int128 v65 = objc_alloc_init(&OBJC_CLASS___BTSmartRoutingBudswapDevice);
        -[BTSmartRoutingBudswapDevice setReconnectionState:](v65, "setReconnectionState:", 0LL);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_srBudswapDeviceMap,  "setObject:forKeyedSubscript:",  v65,  v13);
        objc_storeStrong((id *)&self->_budSwapAddress, v13);
        -[BTSmartRoutingDaemon _budSwapDetectionStartTimer:](self, "_budSwapDetectionStartTimer:", v13);
      }
    }

LABEL_118:
    if (self->_tipiSetupTicks)
    {
      uint64_t v66 = mach_absolute_time();
      id v67 = UpTicksToMilliseconds(v66 - self->_tipiSetupTicks);
      if ((_DWORD)v95 == 1)
      {
        unsigned __int8 v68 = v67;
        if (v67 > 0x2710 || !self->_tipiSetupTicks) {
          goto LABEL_125;
        }
      }
    }

    else if ((_DWORD)v95 == 1)
    {
      unsigned __int8 v68 = 0LL;
LABEL_125:
      __int128 v69 = CFDictionaryGetCFDataOfLength(v9, @"lch", 3LL, 0LL);
      __int128 v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
      if (v70)
      {
        __int128 v71 = objc_claimAutoreleasedReturnValue( -[BTSmartRoutingDaemon _myBluetoothAddressString]( self, "_myBluetoothAddressString"));
        __int128 v72 = (const char *)[v71 UTF8String];
        if (!v72) {
          __int128 v72 = "";
        }
        double v73 = NSDataWithHex(v72, -1LL, 22LL, 0LL, 0LL);
        BOOL v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        if ([v74 length] == (id)6)
        {
          signed int v100 = v71;
          unsigned int v75 = v74;
          unsigned int v76 = (char *)[v75 bytes];
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _wxDeviceFound:]",  30LL,  "Evaluator: One source detected Wx: %@, myAddress: %@. mSecondsSinceTipiConnectSetup %llu",  v70,  v75,  v68);
          }

          uint64_t v77 = (unsigned __int16 *)[v70 bytes];
          unint64_t v78 = *v77 == *(unsigned __int16 *)(v76 + 3) && *((unsigned __int8 *)v77 + 2) == v76[5];
          __int128 v71 = v100;
          if (v78) {
            -[BTSmartRoutingDaemon _removeTiPiState:](self, "_removeTiPiState:", v13);
          }
        }
      }

      self->_tipiSetupTicks = 0LL;
    }

  __break(1u);
  return result;
}

LABEL_141:
    goto LABEL_142;
  }

        if (v139 < 0) {
          v212 = v139;
        }
        else {
          v212 = v139 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v139);
        id result = _CocoaArrayWrapper.endIndex.getter(v212);
        v152 = result;
        if (!result) {
          goto LABEL_145;
        }
        goto LABEL_92;
      }

      sub_100099358((uint64_t)v134, &qword_1002357D8);
      int v55 = v25;
    }

    v136 = _swiftEmptyArrayStorage;
    v264[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0) {
        v205 = a1;
      }
      else {
        v205 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      v138 = _CocoaArrayWrapper.endIndex.getter(v205);
      swift_bridgeObjectRelease(a1);
      specialized ContiguousArray.reserveCapacity(_:)(v138);
      swift_bridgeObjectRetain(a1);
      v206 = _CocoaArrayWrapper.endIndex.getter(v205);
      swift_bridgeObjectRelease(a1);
      if (v206) {
        goto LABEL_82;
      }
    }

    else
    {
      v138 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      specialized ContiguousArray.reserveCapacity(_:)(v138);
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_82:
        v139 = a1 & 0xC000000000000001LL;
        if ((a1 & 0xC000000000000001LL) != 0)
        {
          v211 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
          swift_unknownObjectRelease(v211);
LABEL_84:
          swift_release(v264[0]);
          v140 = sub_100122A9C(a1);
          if (v140)
          {
            v141 = v140;
            swift_beginAccess(v55, v264, 0LL, 0LL);
            v143 = (void *)swift_unknownObjectWeakLoadStrong(v55, v142);
            if (v143) {

            }
            return swift_bridgeObjectRelease(v141);
          }

          else
          {
            v264[0] = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)(v138);
            if (v139)
            {
              v203 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
              swift_unknownObjectRelease(v203);
            }

            return swift_release(v264[0]);
          }
        }

        if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_84;
        }
        __break(1u);
        goto LABEL_141;
      }
    }

    v207 = v264[0];
    swift_beginAccess(v55, v264, 0LL, 0LL);
    v209 = swift_unknownObjectWeakLoadStrong(v55, v208);
    if (v209)
    {
      v210 = (void *)v209;
      sub_10009C630(v207);
    }

    return swift_release(v207);
  }

  double v73 = v72;
  swift_beginAccess(v25, v264, 0LL, 0LL);
  unsigned int v75 = swift_unknownObjectWeakLoadStrong(v25, v74);
  if (v75)
  {
    uint64_t v77 = (void *)v75;
    uint64_t v42 = (char *)swift_unknownObjectWeakLoadStrong( v75 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v76);

    if (v42)
    {
      unint64_t v78 = _swiftEmptyArrayStorage;
      v263[0] = _swiftEmptyArrayStorage;
      uint64_t v79 = *(void *)(v73 + 16);
      if (v79)
      {
        uint64_t v80 = v73 + ((*(unsigned __int8 *)(v242 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80));
        id v81 = *(void *)(v242 + 72);
        swift_bridgeObjectRetain(v73);
        uint64_t v82 = (uint64_t)v243;
        do
        {
          sub_1000A7C90(v80, v82, type metadata accessor for DeviceSupportInformationRecord);
          unsigned int v83 = sub_1000B737C();
          id v84 = sub_1000A7CD4(v82, type metadata accessor for DeviceSupportInformationRecord);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
          unint64_t v86 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          BOOL v85 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v86 >= v85 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1LL);
          }
          unint64_t v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
          specialized Array._endMutation()(v87);
          v80 += v81;
          --v79;
        }

        while (v79);
        swift_bridgeObjectRelease(v73);
        unint64_t v78 = (void *)v263[0];
      }

      swift_bridgeObjectRelease(v73);
      sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
      v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v78);
      [v42 deviceSupportInformationRecordsUpdatedWithRecords:v70.super.isa];
      goto LABEL_27;
    }
  }

  return swift_bridgeObjectRelease(v73);
}

        if (v149 < 0) {
          v212 = v149;
        }
        else {
          v212 = v149 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v149);
        id result = _CocoaArrayWrapper.endIndex.getter(v212);
        v152 = result;
        if (!result) {
          goto LABEL_145;
        }
        goto LABEL_88;
      }

      sub_100099358((uint64_t)v134, &qword_1002357D8);
      int v55 = v25;
    }

    v138 = sub_100122A9C(a1);
    if (v138)
    {
      v139 = (uint64_t)v138;
      swift_beginAccess(v55, v264, 0LL, 0LL);
      v141 = swift_unknownObjectWeakLoadStrong(v55, v140);
      if (v141)
      {
        v142 = (void *)v141;
        sub_10009C630(v139);
      }

      return swift_bridgeObjectRelease(v139);
    }

    v136 = _swiftEmptyArrayStorage;
    v264[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0) {
        v206 = a1;
      }
      else {
        v206 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      v203 = _CocoaArrayWrapper.endIndex.getter(v206);
      swift_bridgeObjectRelease(a1);
      specialized ContiguousArray.reserveCapacity(_:)(v203);
      swift_bridgeObjectRetain(a1);
      v207 = _CocoaArrayWrapper.endIndex.getter(v206);
      swift_bridgeObjectRelease(a1);
      if (v207) {
        goto LABEL_127;
      }
    }

    else
    {
      v203 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      specialized ContiguousArray.reserveCapacity(_:)(v203);
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_127:
        v149 = a1 & 0xC000000000000001LL;
        if ((a1 & 0xC000000000000001LL) != 0)
        {
          v211 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
          swift_unknownObjectRelease(v211);
          goto LABEL_129;
        }

        if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_129:
          swift_release(v264[0]);
          v264[0] = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v203);
          if (v149)
          {
            v204 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
            swift_unknownObjectRelease(v204);
          }

          return swift_release(v264[0]);
        }

        __break(1u);
        goto LABEL_141;
      }
    }

    v208 = v264[0];
    swift_beginAccess(v55, v264, 0LL, 0LL);
    v210 = (void *)swift_unknownObjectWeakLoadStrong(v55, v209);
    if (v210) {

    }
    return swift_release(v208);
  }

  double v73 = v72;
  swift_beginAccess(v25, v264, 0LL, 0LL);
  unsigned int v75 = swift_unknownObjectWeakLoadStrong(v25, v74);
  if (v75)
  {
    uint64_t v77 = (void *)v75;
    uint64_t v42 = (char *)swift_unknownObjectWeakLoadStrong( v75 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v76);

    if (v42)
    {
      unint64_t v78 = _swiftEmptyArrayStorage;
      v263[0] = _swiftEmptyArrayStorage;
      uint64_t v79 = *(void *)(v73 + 16);
      if (v79)
      {
        uint64_t v80 = v73 + ((*(unsigned __int8 *)(v242 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80));
        id v81 = *(void *)(v242 + 72);
        swift_bridgeObjectRetain(v73);
        uint64_t v82 = (uint64_t)v243;
        do
        {
          sub_1000A7C90(v80, v82, type metadata accessor for DeviceSupportInformationRecord);
          unsigned int v83 = sub_1000B737C();
          id v84 = sub_1000A7CD4(v82, type metadata accessor for DeviceSupportInformationRecord);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
          unint64_t v86 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          BOOL v85 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v86 >= v85 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1LL);
          }
          unint64_t v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
          specialized Array._endMutation()(v87);
          v80 += v81;
          --v79;
        }

        while (v79);
        swift_bridgeObjectRelease(v73);
        unint64_t v78 = (void *)v263[0];
      }

      swift_bridgeObjectRelease(v73);
      sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
      v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v78);
      [v42 deviceSupportInformationRecordsUpdatedWithRecords:v70.super.isa];
      goto LABEL_27;
    }
  }

  return swift_bridgeObjectRelease(v73);
}

LABEL_154:
}

id sub_10003512C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _wxDiscoveryWatchRecoveryFoundDevice:a2];
}

id sub_100035138(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _wxDiscoveryWatchRecoveryLostDevice:a2];
}

void sub_100035144(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 == *(void **)(*(void *)(a1 + 40) + 1376LL))
  {
    [v2 invalidate];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 1376);
    *(void *)(v3 + 1376) = 0LL;
  }

void sub_100036E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

void sub_100036E94(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 model]);
  if (([v4 hasPrefix:@"iPhone"] & 1) != 0
    || ([v4 hasPrefix:@"iPad"] & 1) != 0
    || [v4 containsString:@"Mac"])
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }
}

void sub_1000383F0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___TUCall);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  if ((isKindOfClass & 1) != 0) {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  }
  else {
    unsigned int v5 = 0LL;
  }
  uint64_t v68 = 0LL;
  __int128 v69 = &v68;
  uint64_t v70 = 0x3032000000LL;
  __int128 v71 = sub_100019A08;
  __int128 v72 = sub_100019A18;
  id v73 = 0LL;
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472LL;
  v67[2] = sub_100038D18;
  v67[3] = &unk_100206270;
  v67[4] = &v68;
  __int128 v65 = objc_retainBlock(v67);
  if (!v5)
  {
    uint64_t v58 = v69;
    uint64_t v59 = (void *)v69[5];
    uint64_t v60 = @"New call is null";
LABEL_74:
    v58[5] = (uint64_t)v60;

    goto LABEL_68;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);

  if (!v6)
  {
    uint64_t v58 = v69;
    uint64_t v59 = (void *)v69[5];
    uint64_t v60 = @"New call uuid is null";
    goto LABEL_74;
  }

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);

  if (!v7)
  {
    unint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    [*(id *)(*(void *)(a1 + 40) + 1168) setTUCallMap:v8];
  }

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    unsigned int v9 = [v5 isIncoming];
    uint64_t v10 = "no";
    if (v9) {
      uint64_t v10 = "yes";
    }
    __int128 v64 = v10;
    unsigned int v11 = [v5 isOutgoing];
    unsigned int v12 = "no";
    if (v11) {
      unsigned int v12 = "yes";
    }
    __int128 v63 = v12;
    unsigned int v13 = [v5 status];
    if (v13 > 6) {
      double v14 = "?";
    }
    else {
      double v14 = off_100207738[v13];
    }
    __int128 v62 = v14;
    unsigned int v15 = [v5 isEndpointOnCurrentDevice];
    signed int v16 = "no";
    if (v15) {
      signed int v16 = "yes";
    }
    uint64_t v61 = v16;
    double v17 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 provider]);
    int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 identifier]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 provider]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 localizedName]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v5 provider]);
    unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 bundleIdentifier]);
    unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([v5 provider]);
    unsigned int v25 = [v24 isSystemProvider];
    uint64_t v26 = "no";
    if (v25) {
      uint64_t v26 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke",  30LL,  "TUNotification: Call state changed incoming %s outgoing %s status %s endpoint %s uuid %@ providerID %@ providerNam e %@ bundleID %@ isSys %s",  v64,  v63,  v62,  v61,  v17,  v19,  v21,  v23,  v26);
  }

  if (([*(id *)(a1 + 40) _isPhoneCall:v5] & 1) == 0)
  {
    uint64_t v58 = v69;
    uint64_t v59 = (void *)v69[5];
    uint64_t v60 = @"Skip conferencing call";
    goto LABEL_74;
  }

  double v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);

  if (!v27)
  {
    unsigned int v28 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    [*(id *)(*(void *)(a1 + 40) + 1168) setTUCallMap:v28];
  }

  if ([v5 isIncoming])
  {
    unsigned int v29 = [v5 status];
    if (v29 - 5 < 2)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
      unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:v35]);

      if (v36)
      {
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
        unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
        [v37 setObject:0 forKeyedSubscript:v38];

        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke",  30,  "TUNotification: Incoming call ended. CallCount %d",  [v39 count]);
        }

        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
        id v47 = [v46 count];

        if (!v47) {
          [*(id *)(a1 + 40) _clearCallSession];
        }
      }
    }

    else
    {
      if (v29 != 1)
      {
        if (v29 == 4)
        {
          [*(id *)(*(void *)(a1 + 40) + 1168) _setIncomingCallRingtoneState:1];
          [*(id *)(a1 + 40) _startRingtoneTimer];
        }

        goto LABEL_68;
      }

      if ([v5 isEndpointOnCurrentDevice])
      {
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
        unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v41]);

        if (!v42)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke",  30LL,  "TUNotification: Incoming call answered");
          }

          uint64_t v52 = *(void *)(a1 + 40);
          unint64_t v53 = *(void **)(v52 + 1152);
          v66[0] = _NSConcreteStackBlock;
          v66[1] = 3221225472LL;
          v66[2] = sub_100038DB0;
          v66[3] = &unk_100206F58;
          v66[4] = v52;
          [v53 enumerateKeysAndObjectsUsingBlock:v66];
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
          int v55 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
          [v54 setObject:v5 forKeyedSubscript:v55];
        }
      }
    }

    [*(id *)(*(void *)(a1 + 40) + 1168) _setIncomingCallRingtoneState:0];
    [*(id *)(a1 + 40) _cancelRingtoneTimer];
    goto LABEL_68;
  }

  if ([v5 isOutgoing])
  {
    unsigned int v30 = [v5 status];
    if (v30 - 5 < 2)
    {
      char v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
      unsigned __int8 v45 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v44]);

      if (v45)
      {
        if (dword_100234408 <= 30
          && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
        {
          LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke",  30LL,  "TUNotification: Outgoing call ended");
        }

        id v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
        int v49 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
        [v48 setObject:0 forKeyedSubscript:v49];

        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
        id v51 = [v50 count];

        if (!v51) {
          [*(id *)(a1 + 40) _clearCallSession];
        }
      }
    }

    else if (v30 == 1)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke",  30LL,  "TUNotification: Outgoing call active");
      }
    }

    else if (v30 == 3)
    {
      if ([v5 isEndpointOnCurrentDevice])
      {
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
        unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
        BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v32]);

        if (!v33)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke",  30LL,  "TUNotification: Outgoing call sending");
          }

          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) TUCallMap]);
          id v57 = (void *)objc_claimAutoreleasedReturnValue([v5 callUUID]);
          [v56 setObject:v5 forKeyedSubscript:v57];

          [*(id *)(*(void *)(a1 + 40) + 1168) setCallStartTicks:mach_absolute_time()];
        }
      }
    }
  }

void sub_100038CE8(_Unwind_Exception *a1)
{
}

uint64_t sub_100038D18(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
  if (v1 && dword_100234408 <= 90)
  {
    if (dword_100234408 != -1) {
      return LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2",  90LL,  "TUNotification: %@",  v1);
    }
    uint64_t v2 = result;
    id result = _LogCategory_Initialize(&dword_100234408, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 40LL);
      return LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2",  90LL,  "TUNotification: %@",  v1);
    }
  }

  return result;
}

void sub_100038DB0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_3",  30,  "TUNotification: Sending relinquish ownership Wx %@ otherTip %@ %d",  v10,  v6,  [v5 otherTipiAudioCategory]);
  }

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
  unsigned int v8 = [v5 otherTipiAudioCategory];

  if (v8 <= 0x1F4)
  {
    [v5 _setRoutingAction:1];
    unsigned int v9 = *(void **)(a1 + 32);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
    [v9 _relayConduitMessageSend:1 withOptions:&off_100218CD8 andWxAddress:v10 andOtherAddress:v7];
LABEL_9:
  }
}

id sub_1000391D4(uint64_t a1)
{
  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startRingtoneTimer]_block_invoke",  90LL,  "Ringtone timeout. Clear ringtone state");
  }
  [*(id *)(*(void *)(a1 + 32) + 1168) _setIncomingCallRingtoneState:0];
  return [*(id *)(a1 + 32) _cancelRingtoneTimer];
}

void sub_100039874(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 248), "objectForKeyedSubscript:"));
  unsigned int v4 = [v3 mode];

  if (v4 == 1)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _anyPairedDeviceSupportsSmartRouting]_block_invoke",  30LL,  "Check which device to disconnect for disabled SR");
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) objectForKeyedSubscript:v6]);
    [v5 setMode:2];

    [*(id *)(a1 + 32) _handleSmartRoutingDisabled:v6];
  }
}

void sub_10003A304(void *a1)
{
  if (*(void *)(a1[4] + 120LL))
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _budSwapDetectionStartTimer:]_block_invoke",  30LL,  "Reconnection after budswap did not occur after %us, nuke budswap information.",  a1[6]);
    }

    [*(id *)(a1[4] + 1184) removeObjectForKey:a1[5]];
    uint64_t v2 = a1[4];
    uint64_t v3 = *(void **)(v2 + 120);
    *(void *)(v2 + 120) = 0LL;
  }

void sub_10003A654(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2
    && dword_100234408 <= 90
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), uint64_t v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _disconnectOtherTipiDevice:]_block_invoke",  90LL,  "### Failed to update Tipi table to disconnect other Tipi device");
  }

  else
  {
  }

LABEL_5:
}

        swift_bridgeObjectRelease_n(v28, 2LL);
        id v21 = v35;
        goto LABEL_6;
      }

  int v4 = 7LL;
  if (((v2 >> 60) & ((v1 & 0x800000000000000LL) == 0)) != 0) {
    int v4 = 11LL;
  }
  id v5 = String.index(before:)(v4 | (v3 << 16));
  String.remove(at:)(v5);
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    id v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    id v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    id v21 = (-1LL << result) - 1;
  }

  *id v20 = v22 & v21;
  unint64_t v23 = *(void *)(a2 + 16);
  unsigned int v24 = __OFSUB__(v23, 1LL);
  unsigned int v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        swift_bridgeObjectRelease_n(v27, 2LL);
        id v20 = v35;
        goto LABEL_6;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      id v21 = a1;
    }
    else {
      id v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    BOOL v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  }

  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_10003A780(id a1, NSString *a2, NearbyWxDevice *a3, BOOL *a4)
{
  double v17 = a2;
  id v5 = a3;
  if (-[NearbyWxDevice paired](v5, "paired")
    && dword_100234408 <= 50
    && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 50LL)))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NearbyWxDevice address](v5, "address"));
    if (-[NearbyWxDevice isUTPConnected](v5, "isUTPConnected")) {
      BOOL v7 = "yes";
    }
    else {
      BOOL v7 = "no";
    }
    signed int v16 = v7;
    id v15 = (id)-[NearbyWxDevice sourceCount](v5, "sourceCount");
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[NearbyWxDevice lastConnectHost](v5, "lastConnectHost"));
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(-[NearbyWxDevice zeroSourceLastRouteHost](v5, "zeroSourceLastRouteHost"));
    if (-[NearbyWxDevice lidClosed](v5, "lidClosed")) {
      id v10 = "yes";
    }
    else {
      id v10 = "no";
    }
    if (-[NearbyWxDevice primaryInEar](v5, "primaryInEar")) {
      unsigned int v11 = "yes";
    }
    else {
      unsigned int v11 = "no";
    }
    if (-[NearbyWxDevice secondaryInEar](v5, "secondaryInEar")) {
      unsigned int v12 = "yes";
    }
    else {
      unsigned int v12 = "no";
    }
    if (-[NearbyWxDevice primaryInCase](v5, "primaryInCase")) {
      unsigned int v13 = "yes";
    }
    else {
      unsigned int v13 = "no";
    }
    if (-[NearbyWxDevice secondaryInCase](v5, "secondaryInCase")) {
      double v14 = "yes";
    }
    else {
      double v14 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _dumpNearbyWxDevice]_block_invoke",  50LL,  "Dumping nearby Wx device %@ addr %@ UTP %s sourceCount %u lastConnect %@ zeroSourceLastConnect %@ lidClosed %s pri maryInEar %s secondaryInEar %s primaryInCase %s secondaryInCase %s",  v17,  v6,  v16,  v15,  v8,  v9,  v10,  v11,  v12,  v13,  v14);
  }
}

void sub_10003A924(id a1, NSString *a2, BTSmartRoutingWxDevice *a3, BOOL *a4)
{
  id v10 = a2;
  id v5 = a3;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    unsigned int v6 = -[BTSmartRoutingWxDevice routingAction](v5, "routingAction");
    if (v6 > 5) {
      BOOL v7 = "?";
    }
    else {
      BOOL v7 = off_100207BA8[v6];
    }
    unsigned int v8 = -[BTSmartRoutingWxDevice routed](v5, "routed");
    unsigned int v9 = "no";
    if (v8) {
      unsigned int v9 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _dumpSrWxDevice]_block_invoke",  30LL,  "Wx %@ routingAction %s routed %s",  v10,  v7,  v9);
  }
}

void sub_10003AAB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003AAD0(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v15 = a2;
  id v8 = a3;
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) objectForKeyedSubscript:v15]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) objectForKeyedSubscript:v15]);
    unsigned int v11 = [v10 BOOLValue];

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v8 deviceAddress]);
      unsigned int v13 = (void *)v12;
      double v14 = "no";
      if (v11) {
        double v14 = "yes";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _findActiveWxDevice]_block_invoke",  30LL,  "Smart Routing device %@ inEarStatus %s",  v12,  v14);
    }

    if (v11)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
      *a4 = 1;
    }
  }
}

void sub_10003AFF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003B00C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v9 = a2;
  id v8 = a3;
  if ([v8 isNearby]
    && [v8 nearbyInEar] == 1
    && ![v8 connectionState])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_10003B488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003B4A0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7 = a3;
  if ([v7 inEar])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

void sub_10003B6B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  id v8 = v2;
  if (v2)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v5 = CUPrintFlags32([v8 tipiAndRoutedState], &unk_1001A5D36);
      unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon getSmartRoutingStateForDeviceAddress:]_block_invoke",  30LL,  "getSmartRoutingStateForDeviceAddress %@",  v6);
    }

    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 16),  "smartRoutingStateUpdated:ForDeviceIdentifier:",  objc_msgSend(v8, "tipiAndRoutedState"),  v4);

    goto LABEL_7;
  }

  if (dword_100234408 <= 30)
  {
    if (dword_100234408 != -1 || (v7 = _LogCategory_Initialize(&dword_100234408, 30LL), uint64_t v3 = 0LL, v7))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon getSmartRoutingStateForDeviceAddress:]_block_invoke",  30LL,  "getSmartRoutingStateForDeviceAddress error: No SR Wx device");
LABEL_7:
      uint64_t v3 = v8;
    }
  }
}

void sub_10003B944( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10003B95C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v13 = (id)objc_claimAutoreleasedReturnValue([a3 bleDevice]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v13 advertisementFields]);
  uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v6, @"publicAddress", 6LL, 0LL);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
  id v9 = v8;
  if (v8)
  {
    uint64_t v10 = NSPrintF("%.6a", COERCE_DOUBLE([v8 bytes]));
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  }

  else
  {
    unsigned int v11 = 0LL;
  }

  int Int64Ranged = CFDictionaryGetInt64Ranged(v6, @"pid", 0LL, 0xFFFFFFFFLL, 0LL);
  if ([*(id *)(a1 + 32) isEqualToString:v11])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = CFDictionaryGetInt64Ranged( v6,  @"cc",  0LL,  255LL,  0LL);
    if (dword_100234408 <= 50
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 50LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _getWxColorCode:]_block_invoke",  50LL,  "Found color %d from type 7",  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
    }

    if (Int64Ranged == 8209) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    }
    *a4 = 1;
  }
}

void sub_10003BAE8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  unsigned int v7 = [a2 isEqualToString:*(void *)(a1 + 32)];
  id v8 = v9;
  if (v7)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 2RandomBytes(&unk_1002371D8, 4) = [v9 colorCodeBest];
    if (dword_100234408 <= 50
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 50LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _getWxColorCode:]_block_invoke_2",  50LL,  "Found color %d from CB device",  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
    }

    *a4 = 1;
    id v8 = v9;
  }
}

id sub_10003C0AC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:AVSystemController_CallIsActiveNotificationParameter]);
  unsigned int v4 = [v3 BOOLValue];

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    uint64_t v5 = "no";
    if (v4) {
      uint64_t v5 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleCallStateChange:]_block_invoke",  30LL,  "Received Call State changed %s",  v5);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v4)
  {
    *(_BYTE *)(v6 + 136) = 1;
    [*(id *)(*(void *)(a1 + 40) + 1208) setCallConnected:1];
    return [*(id *)(a1 + 40) _evaluatorRun];
  }

  else
  {
    *(_BYTE *)(v6 + 136) = 0;
    return [*(id *)(*(void *)(a1 + 40) + 1208) setCallConnected:0];
  }

void sub_10003C240(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [v2 objectForKeyedSubscript:AVSystemController_NowPlayingAppIsPlayingNotificationParameter]);
  unsigned int v4 = [v3 BOOLValue];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v12 = (id)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:AVSystemController_NowPlayingAppNotificationParameter]);

  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    uint64_t v6 = "no";
    if (v4) {
      uint64_t v6 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleMediaPlayStateChange:]_block_invoke",  30LL,  "Received playback changed app %@ isPlaying %s",  v12,  v6);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v4)
  {
    *(_BYTE *)(v7 + 690) = 1;
    [*(id *)(*(void *)(a1 + 40) + 1208) setMediaPlaying:1];
    [*(id *)(a1 + 40) _startPlaybackTimer];
    [*(id *)(a1 + 40) _evaluatorRun];
  }

  else
  {
    *(_BYTE *)(v7 + 690) = 0;
    [*(id *)(*(void *)(a1 + 40) + 1208) setMediaPlaying:0];
    id v8 = *(void **)(*(void *)(a1 + 40) + 696LL);
    if (v8)
    {
      id v9 = v8;
      dispatch_source_cancel(v9);
      uint64_t v10 = *(void *)(a1 + 40);
      unsigned int v11 = *(void **)(v10 + 696);
      *(void *)(v10 + 696) = 0LL;
    }
  }
}

void sub_10003C5C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v10 = (id)objc_claimAutoreleasedReturnValue( [v2 objectForKeyedSubscript:AVSystemController_HighestArbitrationPriorityForTipi_AudioScore]);

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectForKeyedSubscript:AVSystemController_HighestArbitrationPriorityForTipi_BundleID]);

  [*(id *)(*(void *)(a1 + 40) + 1208) setHijackPlayingApp:v4];
  [*(id *)(*(void *)(a1 + 40) + 1208) setHijackPlayingCategory:v10];
  [*(id *)(*(void *)(a1 + 40) + 1168) setActivePlayingApp:v4];
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleHighestAudioCategoryChange:]_block_invoke",  30LL,  "[Hijackv2] Received audio category changed: app=%@ isPlaying=%@",  v4,  v10);
  }
  unsigned int v5 = [*(id *)(*(void *)(a1 + 40) + 480) intValue];
  if (v5 != [v10 intValue]
    || (uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1168) activePlayingApp]),
        unsigned __int8 v7 = [v6 isEqualToString:v4],
        v6,
        (v7 & 1) == 0))
  {
    id v8 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v10 integerValue]));
    [v8 _updateLocalAudioCategory:v9];
  }
}

void sub_10003CA38(void *a1)
{
  uint64_t v1 = a1[5];
  if (a1[4] == *(void *)(v1 + 392))
  {
    if (*(_BYTE *)(v1 + 56)) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = (int)[*(id *)(v1 + 144) activeCallCount] > 0;
    }
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      unsigned int v4 = @"Off";
      if (v3) {
        unsigned int v4 = @"On";
      }
      uint64_t v5 = a1[5];
      unint64_t v6 = *(char *)(v5 + 32);
      if (v6 > 0xE) {
        unsigned __int8 v7 = "?";
      }
      else {
        unsigned __int8 v7 = off_100207898[v6];
      }
      uint64_t v8 = *(int *)(v5 + 1004);
      else {
        id v9 = off_1002079F0[v8];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handleHijackBlockingwithDevice:]_block_invoke",  30LL,  "Hijackblocking timer has fired; current media stream is %@, user activity level is %s, audio routing score is %s",
        v4,
        v7,
        v9);
      if (v3) {
        goto LABEL_20;
      }
    }

    else if (v3)
    {
      goto LABEL_20;
    }

    id v10 = (int *)a1[5];
    if (v10[251] < 6)
    {
      [v10 _hijackBackoffReset:a1[6] withReason:@"inactivity"];
      id v13 = 0LL;
LABEL_26:
      id v22 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v13));
      double v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v22, @"hijackBackoffTicks");
      int v19 = (id *)a1[5];
      uint64_t v18 = a1[6];
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19[144] objectForKeyedSubscript:v18]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 otherTipiDeviceBTAddress]);
      [v19 _relayConduitMessageSend:1 withOptions:v17 andWxAddress:v18 andOtherAddress:v21];

      return;
    }

void sub_10003CF60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003CF9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v1)
  {
    if (dword_100234408 > 30) {
      goto LABEL_6;
    }
    if (dword_100234408 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234408, 30LL))
      {
LABEL_6:
        BOOL v3 = *(void **)(*(void *)(a1 + 32) + 680LL);
        if (v3)
        {
          unint64_t v6 = v3;
          dispatch_source_cancel(v6);
          uint64_t v4 = *(void *)(a1 + 32);
          uint64_t v5 = *(void **)(v4 + 680);
          *(void *)(v4 + 680) = 0LL;
        }

        return;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _handlePhoneOwnershipTriangleTimer]_block_invoke",  30LL,  "PhoneTriangleOwnershipTimer: Skip taking ownership. %@",  v1);
    goto LABEL_6;
  }

void sub_10003D648( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003D660(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) objectForKeyedSubscript:a2]);
  if (v6)
  {
    id v8 = v6;
    BOOL v7 = (int)[v6 audioStreamState] < 2;
    unint64_t v6 = v8;
    if (!v7)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
      *a4 = 1;
    }
  }
}

LABEL_43:
    uint64_t v31 = 0;
    goto LABEL_44;
  }

  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _isEligibleForTipiV2:firstDeviceTipiScore:secondDeviceTipiScore:currentDeviceScore:sourceDe viceCount:isOnDemandConnect:address:lastConnectedHost:]",  90LL,  "Don't see nearby wx device for device %@",  v17);
  }
  uint64_t v31 = 0;
LABEL_45:

  return v31;
}

  if (!(_DWORD)v220)
  {
LABEL_18:
    if ((_DWORD)v221) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
    }
  }

  id v73 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v73)
  {
    BOOL v74 = v73;
    swift_beginAccess(v55, v271, 0LL, 0LL);
    unsigned int v76 = swift_unknownObjectWeakLoadStrong(v55, v75);
    if (v76)
    {
      unint64_t v78 = (void *)v76;
      uint64_t v42 = (char *)swift_unknownObjectWeakLoadStrong( v76 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v77);

      if (v42)
      {
        uint64_t v79 = _swiftEmptyArrayStorage;
        v270[0] = _swiftEmptyArrayStorage;
        uint64_t v80 = *(void *)(v74 + 16);
        if (v80)
        {
          id v81 = v74 + ((*(unsigned __int8 *)(v249 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v249 + 80));
          uint64_t v82 = *(void *)(v249 + 72);
          swift_bridgeObjectRetain(v74);
          unsigned int v83 = (uint64_t)v250;
          do
          {
            sub_1000A7C90(v81, v83, type metadata accessor for DeviceSupportInformationRecord);
            id v84 = sub_1000B737C();
            BOOL v85 = sub_1000A7CD4(v83, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v85);
            unint64_t v87 = *(void *)((v270[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v86 = *(void *)((v270[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v87 >= v86 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1LL);
            }
            BOOL v88 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v87, v84);
            specialized Array._endMutation()(v88);
            v81 += v82;
            --v80;
          }

          while (v80);
          swift_bridgeObjectRelease(v74);
          uint64_t v79 = (void *)v270[0];
        }

        swift_bridgeObjectRelease(v74);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v71.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v79);
        [v42 deviceSupportInformationRecordsUpdatedWithRecords:v71.super.isa];
        goto LABEL_27;
      }
    }

    return (void *)swift_bridgeObjectRelease(v74);
  }

  uint64_t v131 = sub_100122F80(a1);
  if (v131)
  {
    char v132 = v131;
    if (v131[2])
    {
      v133 = v251;
      v134 = v253;
      sub_1000A7C90( (uint64_t)v131 + ((*(unsigned __int8 *)(v251 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v251 + 80)),  (uint64_t)v253,  type metadata accessor for LegacyMagicPairingSettingsRecords);
      v135 = 0LL;
      v136 = (void *)v261;
      v137 = v252;
    }

    else
    {
      v135 = 1LL;
      v136 = (void *)v261;
      v134 = v253;
      v137 = v252;
      v133 = v251;
    }

    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v133 + 56))(v134, v135, 1LL, v137);
    swift_bridgeObjectRelease(v132);
    if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v133 + 48))(v134, 1LL, v137) != 1)
    {
      a1 = v263;
      sub_1000C998C((uint64_t)v134, v263, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v149 = v262;
      swift_beginAccess(v262, v271, 0LL, 0LL);
      v151 = swift_unknownObjectWeakLoadStrong(v149, v150);
      if (!v151
        || (v153 = (void *)v151,
            v154 = (char *)swift_unknownObjectWeakLoadStrong( v151 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v152),  v153,  !v154))
      {
LABEL_148:
        v221 = v262;
        swift_beginAccess(v262, v267, 0LL, 0LL);
        v223 = swift_unknownObjectWeakLoadStrong(v221, v222);
        if (!v223) {
          return (void *)sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        }
        v225 = (void *)v223;
        v226 = (void *)swift_unknownObjectWeakLoadStrong( v223 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v224);

        if (!v226) {
          return (void *)sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        }
        sub_1000EF00C();
        v228 = v227;
        v269 = (unint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v227 >> 62)
        {
          if (v227 < 0) {
            v247 = v227;
          }
          else {
            v247 = v227 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v227);
          id result = (void *)_CocoaArrayWrapper.endIndex.getter(v247);
          v229 = (uint64_t)result;
          if (result)
          {
LABEL_152:
            v266 = (uint64_t)v226;
            if (v229 >= 1)
            {
              v230 = 0LL;
              do
              {
                if ((v228 & 0xC000000000000001LL) != 0) {
                  v231 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v230, v228);
                }
                else {
                  v231 = *(id *)(v228 + 8 * v230 + 32);
                }
                v232 = v231;
                v233 = [v231 bluetoothAddress];
                static String._unconditionallyBridgeFromObjectiveC(_:)(v233);
                v235 = v234;

                v236 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
                v237 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v235);
                v238 = [v236 initWithBluetoothAddress:v237];

                v239 = [v232 name];
                [v238 setNickname:v239];

                v240 = [v232 productID];
                [v238 setProductID:v240];

                v241 = [v232 vendorID];
                [v238 setVendorID:v241];

                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v242);
                v244 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                v243 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                if (v244 >= v243 >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v243 > 1,  v244 + 1,  1LL);
                }
                ++v230;
                v245 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v244, v238);
                specialized Array._endMutation()(v245);
                a1 = v263;
              }

              while (v229 != v230);
              swift_bridgeObjectRelease(v228);
              v246 = (void *)v269;
              v226 = (void *)v266;
              goto LABEL_166;
            }
    }
  }

  __int128 v72 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (!v72)
  {
    uint64_t v131 = sub_100122F80(a1);
    if (v131)
    {
      char v132 = v131;
      if (v131[2])
      {
        v133 = v244;
        v134 = v246;
        sub_1000A7C90( (uint64_t)v131 + ((*(unsigned __int8 *)(v244 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80)),  (uint64_t)v246,  type metadata accessor for LegacyMagicPairingSettingsRecords);
        v135 = 0LL;
        v136 = (void *)v255;
        v137 = v245;
      }

      else
      {
        v135 = 1LL;
        v136 = (void *)v255;
        v134 = v246;
        v137 = v245;
        v133 = v244;
      }

      (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v133 + 56))(v134, v135, 1LL, v137);
      swift_bridgeObjectRelease(v132);
      if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v133 + 48))(v134, 1LL, v137) != 1)
      {
        a1 = v256;
        sub_1000C998C((uint64_t)v134, v256, type metadata accessor for LegacyMagicPairingSettingsRecords);
        swift_beginAccess(v25, v264, 0LL, 0LL);
        v145 = swift_unknownObjectWeakLoadStrong(v25, v144);
        if (!v145
          || (v147 = (void *)v145,
              v148 = (char *)swift_unknownObjectWeakLoadStrong( v145 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v146),  v147,  !v148))
        {
LABEL_147:
          swift_beginAccess(v25, v260, 0LL, 0LL);
          v216 = swift_unknownObjectWeakLoadStrong(v25, v215);
          if (!v216) {
            return sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
          }
          v218 = (void *)v216;
          v219 = (void *)swift_unknownObjectWeakLoadStrong( v216 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v217);

          if (!v219) {
            return sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
          }
          sub_1000EF00C();
          v221 = v220;
          v262 = (unint64_t)_swiftEmptyArrayStorage;
          if ((unint64_t)v220 >> 62)
          {
            if (v220 < 0) {
              v240 = v220;
            }
            else {
              v240 = v220 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v220);
            id result = _CocoaArrayWrapper.endIndex.getter(v240);
            v222 = result;
            if (result)
            {
LABEL_151:
              v259 = (uint64_t)v219;
              if (v222 >= 1)
              {
                v223 = 0LL;
                do
                {
                  if ((v221 & 0xC000000000000001LL) != 0) {
                    v224 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v223, v221);
                  }
                  else {
                    v224 = *(id *)(v221 + 8 * v223 + 32);
                  }
                  v225 = v224;
                  v226 = [v224 bluetoothAddress];
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v226);
                  v228 = v227;

                  v229 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
                  v230 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v228);
                  v231 = [v229 initWithBluetoothAddress:v230];

                  v232 = [v225 name];
                  [v231 setNickname:v232];

                  v233 = [v225 productID];
                  [v231 setProductID:v233];

                  v234 = [v225 vendorID];
                  [v231 setVendorID:v234];

                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v235);
                  v237 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                  v236 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                  if (v237 >= v236 >> 1) {
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v236 > 1,  v237 + 1,  1LL);
                  }
                  ++v223;
                  v238 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v237, v231);
                  specialized Array._endMutation()(v238);
                  a1 = v256;
                }

                while (v222 != v223);
                swift_bridgeObjectRelease(v221);
                v239 = (void *)v262;
                v219 = (void *)v259;
                goto LABEL_165;
              }
    }
  }

  __int128 v72 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (!v72)
  {
    uint64_t v131 = sub_100122F80(a1);
    if (v131)
    {
      char v132 = v131;
      if (v131[2])
      {
        v133 = v244;
        v134 = v246;
        sub_1000A7C90( (uint64_t)v131 + ((*(unsigned __int8 *)(v244 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80)),  (uint64_t)v246,  type metadata accessor for LegacyMagicPairingSettingsRecords);
        v135 = 0LL;
        v136 = (void *)v255;
        v137 = v245;
      }

      else
      {
        v135 = 1LL;
        v136 = (void *)v255;
        v134 = v246;
        v137 = v245;
        v133 = v244;
      }

      (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v133 + 56))(v134, v135, 1LL, v137);
      swift_bridgeObjectRelease(v132);
      if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v133 + 48))(v134, 1LL, v137) != 1)
      {
        a1 = v256;
        sub_1000C998C((uint64_t)v134, v256, type metadata accessor for LegacyMagicPairingSettingsRecords);
        swift_beginAccess(v25, v264, 0LL, 0LL);
        v144 = swift_unknownObjectWeakLoadStrong(v25, v143);
        if (!v144
          || (v146 = (void *)v144,
              v147 = (char *)swift_unknownObjectWeakLoadStrong( v144 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v145),  v146,  !v147))
        {
LABEL_147:
          swift_beginAccess(v25, v260, 0LL, 0LL);
          v216 = swift_unknownObjectWeakLoadStrong(v25, v215);
          if (!v216) {
            return sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
          }
          v218 = (void *)v216;
          v219 = (void *)swift_unknownObjectWeakLoadStrong( v216 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v217);

          if (!v219) {
            return sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
          }
          sub_1000EF00C();
          v221 = v220;
          v262 = (unint64_t)_swiftEmptyArrayStorage;
          if ((unint64_t)v220 >> 62)
          {
            if (v220 < 0) {
              v240 = v220;
            }
            else {
              v240 = v220 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v220);
            id result = _CocoaArrayWrapper.endIndex.getter(v240);
            v222 = result;
            if (result)
            {
LABEL_151:
              v259 = (uint64_t)v219;
              if (v222 >= 1)
              {
                v223 = 0LL;
                do
                {
                  if ((v221 & 0xC000000000000001LL) != 0) {
                    v224 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v223, v221);
                  }
                  else {
                    v224 = *(id *)(v221 + 8 * v223 + 32);
                  }
                  v225 = v224;
                  v226 = [v224 bluetoothAddress];
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v226);
                  v228 = v227;

                  v229 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
                  v230 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v228);
                  v231 = [v229 initWithBluetoothAddress:v230];

                  v232 = [v225 name];
                  [v231 setNickname:v232];

                  v233 = [v225 productID];
                  [v231 setProductID:v233];

                  v234 = [v225 vendorID];
                  [v231 setVendorID:v234];

                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v235);
                  v237 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                  v236 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                  if (v237 >= v236 >> 1) {
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v236 > 1,  v237 + 1,  1LL);
                  }
                  ++v223;
                  v238 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v237, v231);
                  specialized Array._endMutation()(v238);
                  a1 = v256;
                }

                while (v222 != v223);
                swift_bridgeObjectRelease(v221);
                v239 = (void *)v262;
                v219 = (void *)v259;
                goto LABEL_165;
              }

void sub_10003DDAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003DDC4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v16 = a2;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v16]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 592) objectForKeyedSubscript:v9]);
    unint64_t v11 = [v10 sourceCount];
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 otherTipiDeviceBTAddress]);
  if (v12) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v11 > 1;
  }
  char v14 = v13;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = v14;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
      id v15 = "yes";
    }
    else {
      id v15 = "no";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon isInAnyTipi]_block_invoke",  30LL,  "Checking Tipi state of Wx %@ uuid %@ sourceCount %u otherTipi %@ inTipi %s",  v16,  v9,  v11,  v12,  v15);
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a4 = 1;
  }
}

void sub_10003DFC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003DFE0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a3 otherTipiDeviceBTAddress]);

  if (v6)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    *a4 = 1;
  }

void sub_10003E3E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003E40C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 advertisementFields]);
  uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v8, @"publicAddress", 6LL, 0LL);
  id v19 = (id)objc_claimAutoreleasedReturnValue(CFDataOfLength);

  if (v19)
  {
    uint64_t v10 = NSPrintF("%.6a", COERCE_DOUBLE([v19 bytes]));
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v12 advertisementFields]);
  char Int64Ranged = CFDictionaryGetInt64Ranged(v13, @"hsStatus", 0LL, 0xFFFFFFFFLL, 0LL);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 advertisementFields]);
  uint64_t v17 = CFDictionaryGetInt64Ranged(v16, @"pid", 0LL, 0xFFFFFFFFLL, 0LL);

  if ([v11 isEqualToString:*(void *)(a1 + 32)])
  {
    if ((Int64Ranged & 0x24) != 0
      || [*(id *)(a1 + 40) _bluetoothProductIDNoEarDetect:v17])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
        uint64_t v18 = "yes";
      }
      else {
        uint64_t v18 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _inEarNearbyCheck:]_block_invoke",  30LL,  "SmartRouting TYPE 7 STATE shows inEar: %s for device %@",  v18,  *(void *)(a1 + 32));
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    *a4 = 1;
  }
}

void sub_10003E7F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003E80C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v9 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 184), "objectForKeyedSubscript:"));
  if ([v6 primaryPlacement] == 1)
  {

LABEL_4:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    *a4 = 1;
    goto LABEL_5;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) objectForKeyedSubscript:v9]);
  unsigned int v8 = [v7 secondaryPlacement];

  if (v8 == 1) {
    goto LABEL_4;
  }
LABEL_5:
}

void sub_10003E954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10003E96C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 32) _isInEarDetectionDisabled:a2];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 0;
    *a4 = 1;
  }

  return result;
}

void sub_10003EA3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10003EA54(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 productID];
  if ((_DWORD)result == 8221)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10003F448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_10003F478(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v21 = a2;
  id v7 = a3;
  if (dword_100234408 <= 50 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 50LL)))
  {
    unsigned int v8 = "yes";
    else {
      id v9 = "no";
    }
    id v10 = [*(id *)(*(void *)(a1 + 32) + 1152) count];
    unsigned int v11 = [v7 routingAction];
    if (v11 > 5) {
      unsigned __int8 v12 = "?";
    }
    else {
      unsigned __int8 v12 = off_100207BA8[v11];
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _iPhoneScreenOnPowerEvent]_block_invoke",  50LL,  "Device address %@ is inEar %s inEarDisabled %s %d %s",  v21,  v9,  v8,  v10,  v12);
  }

  if ([v7 inEarDisabled])
  {
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v21]);
    uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 deviceAddress]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }

  if ([v7 inEar])
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:v21]);
    uint64_t v18 = objc_claimAutoreleasedReturnValue([v17 deviceAddress]);
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
}

void sub_10003F644(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v18 = a2;
  id v7 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "_bluetoothProductIDNoEarDetect:", objc_msgSend(v7, "productID")) & 1) == 0
    && [v7 primaryPlacement] == 1
    && [v7 secondaryPlacement] == 1)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) objectForKeyedSubscript:v18]);
    if ([v8 mode] == 2)
    {
      unsigned __int8 v9 = [v7 deviceFlags];

      if ((v9 & 1) != 0)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 btAddressData]);
        uint64_t v11 = CUPrintNSDataAddress(v10);
        uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
        uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
        uint64_t v14 = *(void **)(v13 + 40);
        *(void *)(v13 + 40) = v12;

        uint64_t v15 = objc_claimAutoreleasedReturnValue([v7 name]);
        uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
        uint64_t v17 = *(void **)(v16 + 40);
        *(void *)(v16 + 40) = v15;

        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 2RandomBytes(&unk_1002371D8, 4) = [v7 productID];
        *a4 = 1;
      }
    }

    else
    {
    }
  }
}

void sub_10003F77C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([v2 attributeForKey:AVSystemController_PlayingSessionsDescriptionAttribute]);

  *(_BYTE *)(*(void *)(a1 + 32) + 56) = [v3 count] != 0;
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 56LL)) {
      uint64_t v4 = "playing";
    }
    else {
      uint64_t v4 = "not playing";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _iPhoneScreenOnPowerEvent]_block_invoke_3",  30LL,  "Audio is %s on the system",  v4);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003F8AC;
  block[3] = &unk_100207358;
  __int128 v6 = *(_OWORD *)(a1 + 32);
  dispatch_async(*(dispatch_queue_t *)(v6 + 296), block);
}

void sub_10003F8AC(uint64_t a1)
{
  if ((int)[*(id *)(*(void *)(a1 + 32) + 144) callCountIncomingUnconnected] <= 0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v2 + 56) && (int)[*(id *)(v2 + 144) activeCallCount] >= 1)
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)]);
      [v3 routed];
    }
  }

void sub_10003F9FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10003FA14(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v15 = a3;
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v15 bleDevice]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 advertisementFields]);

  uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v7, @"bdAddr", 6LL, 0LL);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
  if (v9)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _lastConnectIsWatchCheck:]_block_invoke",  30LL,  "lastConnectIsWatchCheck comparing, Wx: %@, ND: %@",  *(void *)(a1 + 32),  v9);
    }

    id v10 = (char *)[v9 bytes];
    uint64_t v11 = (unsigned __int16 *)[*(id *)(a1 + 32) bytes];
    if (*v11 == *(unsigned __int16 *)(v10 + 3) && *((unsigned __int8 *)v11 + 2) == v10[5])
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v15 model]);
      unsigned int v14 = [v13 hasPrefix:@"Watch"];

      if (v14)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
        *a4 = 1;
      }
    }
  }
}

id sub_1000402DC(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyDeviceInfoTriangleRecoveryTimer]_block_invoke",  30LL,  "TriangleRecovery: Timer for legacy triangle recovery has completed");
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[107]) {
    return _[v2 _nearbyDeviceInfoCheck];
  }
  unsigned int v3 = [v2 isInAnyTipi];
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  {
    unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 1168) magnetConnected];
    uint64_t v5 = "no";
    if (v4) {
      __int128 v6 = "yes";
    }
    else {
      __int128 v6 = "no";
    }
    if (v3) {
      id v7 = "yes";
    }
    else {
      id v7 = "no";
    }
    if (*(_BYTE *)(*(void *)(a1 + 32) + 1217LL)) {
      uint64_t v5 = "yes";
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyDeviceInfoTriangleRecoveryTimer]_block_invoke",  30LL,  "TriangleRecovery: Magnet %s inAnyTipi %s TipiInProgress %s",  v6,  v7,  v5);
  }

  unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 1168) magnetConnected] ^ 1 | v3;
  uint64_t v9 = *(void *)(a1 + 32);
  if ((v8 & 1) == 0 && !*(_BYTE *)(v9 + 1217))
  {
    id v10 = *(void **)(v9 + 1152);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100040478;
    v12[3] = &unk_100206F58;
    v12[4] = v9;
    [v10 enumerateKeysAndObjectsUsingBlock:v12];
    uint64_t v9 = *(void *)(a1 + 32);
  }

  return [(id)v9 _cancelTriangleRecoveryTimer];
}

void sub_100040478(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
  [*(id *)(a1 + 32) _updateNearbyDeviceState:v6 withAddress:v8 withEasyPairing:1 withState:3];

  if (*(_BYTE *)(*(void *)(a1 + 32) + 665LL)) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  [v5 _setRoutingAction:v7];

  [*(id *)(a1 + 32) _postNotification:"com.apple.BluetoothServices.AudioRoutingChanged"];
}

void sub_100040628(_Unwind_Exception *a1)
{
}

void sub_100040640(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v8 = (void *)objc_claimAutoreleasedReturnValue([a3 model]);
  unsigned int v6 = [v8 hasPrefix:@"Watch"];
  uint64_t v7 = v8;
  if (v6)
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _nearbyDeviceInfoCheck]_block_invoke",  30LL,  "Evaluator, Found only nearby watch. Allow legacy triangle recovery.");
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    *a4 = 1;
    uint64_t v7 = v8;
  }
}

void sub_1000406F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
  [*(id *)(a1 + 32) _updateNearbyDeviceState:v6 withAddress:v7 withEasyPairing:1 withState:3];

  [v5 _setRoutingAction:2];
  [*(id *)(a1 + 32) _postNotification:"com.apple.BluetoothServices.AudioRoutingChanged"];
}

void sub_100041DB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100041E04(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v1)
  {
    if (dword_100234408 > 30) {
      goto LABEL_6;
    }
    if (dword_100234408 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100234408, 30LL))
      {
LABEL_6:
        unsigned int v3 = *(void **)(*(void *)(a1 + 32) + 368LL);
        if (v3)
        {
          id v6 = v3;
          dispatch_source_cancel(v6);
          uint64_t v4 = *(void *)(a1 + 32);
          id v5 = *(void **)(v4 + 368);
          *(void *)(v4 + 36_Block_object_dispose(va, 8) = 0LL;
        }

        return;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _proactivelyTakeOwnership]_block_invoke",  30LL,  "ProactiveRouting: Skip taking ownership. %@",  v1);
    goto LABEL_6;
  }

void sub_100042F40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100042F58(uint64_t a1)
{
  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageStartTimer:withOptions:]_block_invoke",  90LL,  "Didn't receive relay message response timing out... ");
  }
  ++*(_DWORD *)(*(void *)(a1 + 32) + 104LL);
  [*(id *)(a1 + 32) _setHighPriorityTag:*(void *)(a1 + 40) withHighPriority:0];
  id v24 = objc_alloc_init(&OBJC_CLASS___BTAudioRoutingResponse);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"audioRoutingRequestID"]);
  objc_msgSend(v24, "setClientID:", objc_msgSend(v2, "unsignedIntValue"));

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"audioRoutingScore"]);
  id v4 = [v3 integerValue];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  unsigned int v6 = [v5 audioStreamState];

  unsigned int v7 = [*(id *)(a1 + 32) _arbitrationTimeout:*(void *)(a1 + 40) withScore:v4];
  if (v7) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = 3LL;
  }
  [v24 setAction:v8];
  if (v7) {
    uint64_t v9 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v9 = 0LL;
  }
  [v24 setDeviceAddress:v9];
  unsigned int v10 = [v24 action];
  if (v10 > 5) {
    uint64_t v11 = "?";
  }
  else {
    uint64_t v11 = off_100207BA8[v10];
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Relay message timeout, current Audio Session is %ld, tell MX to %@",  v4,  v12));
  [v24 setReason:v13];

  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1152) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  objc_msgSend(v14, "_setRoutingAction:", objc_msgSend(v24, "action"));

  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
  {
    unsigned int v15 = [v24 action];
    if (v15 > 5) {
      uint64_t v16 = "?";
    }
    else {
      uint64_t v16 = off_100207BA8[v15];
    }
    if (v6 > 3) {
      uint64_t v17 = "?";
    }
    else {
      uint64_t v17 = off_100207B40[v6];
    }
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _relayConduitMessageStartTimer:withOptions:]_block_invoke",  90LL,  "Hijack relay message timeout, audioScore %ld, RoutingAction %s, wxStreamState %s",  v4,  v16,  v17);
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) audioRoutingResponse]);

  if (v18)
  {
    uint64_t v19 = *(void **)(a1 + 32);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) audioRoutingResponse]);
    [v19 _respondRoutingRequest:v24 withResponseHandler:v20 wxAddress:*(void *)(a1 + 40)];
  }

  id v21 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) conduitMessageTimer]);
  id v22 = v21;
  if (v21) {
    dispatch_source_cancel(v21);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setConduitMessageTimer:0];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setConduitMessageTicks:0];
  if ([*(id *)(*(void *)(a1 + 32) + 1208) hijackRelaySent])
  {
    else {
      unint64_t v23 = @"Timeout";
    }
    [*(id *)(*(void *)(a1 + 32) + 1208) setHijackAnswer:v23];
    [*(id *)(*(void *)(a1 + 32) + 1208) setHijackRoundTripTime:(unint64_t)(*(double *)(a1 + 64) * 1000.0)];
    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1208),  "setHijackContinuousTimeoutCount:",  (char *)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1208), "hijackContinuousTimeoutCount") + 1);
    [*(id *)(a1 + 32) submitHijackMetric:*(void *)(a1 + 40) withV1:1];
    [*(id *)(a1 + 32) _startRouteCheckTimer:*(void *)(a1 + 40) andType:5];
    [*(id *)(a1 + 32) _startRouteCheckTimer:*(void *)(a1 + 40) andType:6];
    [*(id *)(a1 + 32) submitRouteActivityMetric:*(void *)(a1 + 40) activity:@"Hijack_V1_RemoteTimeout"];
  }
}

void sub_1000434AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v10 = v3;
    if (dword_100234408 <= 90)
    {
      if (dword_100234408 != -1 || (v5 = _LogCategory_Initialize(&dword_100234408, 90LL), id v4 = v10, v5))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setOwnership:withHijackRequest:withOwnership:]_block_invoke",  90LL,  "Relinquishing ownership failed with %{error}",  v4);
        id v4 = v10;
      }
    }

    unsigned int v6 = *(void **)(a1 + 32);
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v7, @"audioRoutingRequestID");
      if (dword_100234408 <= 90
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setOwnership:withHijackRequest:withOwnership:]_block_invoke",  90LL,  "Hijacking failed with  %{error}",  v10);
      }

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 3LL));
      -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v9, @"audioRoutingHijackAnswer");

      [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:v8 andWxAddress:*(void *)(a1 + 48) andOtherAddress:0];
      id v4 = v10;
    }
  }
}

void sub_10004395C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a3 otherTipiDeviceBTAddress]);

  if (v5 && ([*(id *)(*(void *)(a1 + 32) + 160) isEqualToString:v6] & 1) == 0) {
    [*(id *)(a1 + 32) _sendAudioCategory:v6 withAudioCategory:*(void *)(*(void *)(a1 + 32) + 480)];
  }
}

void sub_100043CF0(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _myBluetoothAddressString]);
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v7, @"btAddress");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  *(void *)(*(void *)(a1 + 32) + 616LL),  @"btName");
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 1004LL)));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v9,  @"nearbyAudioScore");

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v10, @"idleTime");

    if (*(_BYTE *)(a1 + 48)) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"newTipi");
    }
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
      uint64_t v12 = *(int *)(*(void *)(a1 + 32) + 1004LL);
      else {
        uint64_t v13 = off_1002079F0[v12];
      }
      if (*(_BYTE *)(a1 + 48)) {
        unsigned int v14 = "yes";
      }
      else {
        unsigned int v14 = "no";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _sendAudioScoreChanged:]_block_invoke",  30LL,  "ProactiveRouting: Sending relay via %@ to %@ TipiScore %s newTipi %s",  v17,  v11,  v13,  v14);
    }

    unsigned int v15 = *(void **)(a1 + 32);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 otherTipiDeviceBTAddress]);
    [v15 _relayConduitMessageSend:1 withOptions:v8 andWxAddress:v17 andOtherAddress:v16];
  }
}

void sub_10004403C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getWxFWVersion:v3]);
  id v5 = (void *)v4;
  id v6 = &stru_100212678;
  if (v4) {
    id v6 = (__CFString *)v4;
  }
  id v7 = v6;

  if ([@"5A274" compare:v7 options:64] == (id)-1)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(unsigned int *)(v8 + 1004);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 248) objectForKeyedSubscript:v3]);
    unsigned __int8 v11 = [v10 mode];

    id v12 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%02x0002%02x", 2LL, v9));
    uint64_t v13 = (const char *)[v12 UTF8String];
    if (!v13) {
      uint64_t v13 = "";
    }
    uint64_t v14 = NSDataWithHex(v13, -1LL, 22LL, 0LL, 0LL);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = objc_alloc_init(&OBJC_CLASS___CBDevice);
    -[CBDevice setIdentifier:](v16, "setIdentifier:", v3);
    id v17 = *(void **)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1000441D4;
    v18[3] = &unk_1002073F8;
    int v21 = v9;
    unsigned __int8 v22 = v11;
    id v19 = v3;
    id v20 = v15;
    [v17 sendSmartRoutingInformation:v15 device:v16 completionHandler:v18];
  }
}

void sub_1000441D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (dword_100234408 <= 30)
  {
    id v10 = v3;
    if (dword_100234408 != -1 || (v7 = _LogCategory_Initialize(&dword_100234408, 30LL), uint64_t v4 = v10, v7))
    {
      uint64_t v5 = *(int *)(a1 + 48);
      else {
        id v6 = off_1002079F0[v5];
      }
      unint64_t v8 = *(char *)(a1 + 52);
      if (v8 > 2) {
        uint64_t v9 = "?";
      }
      else {
        uint64_t v9 = off_100207B08[v8];
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _sendTipiScoreUpdateToWx]_block_invoke_2",  30LL,  "SendTipiScoreToWx: %@ score %s srMode %s byte %@ result %{error}\n",  *(void *)(a1 + 32),  v6,  v9,  *(void *)(a1 + 40),  v4);
      uint64_t v4 = v10;
    }
  }
}

void sub_10004437C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100234408 <= 90)
    {
      id v6 = v3;
      if (dword_100234408 != -1 || (v5 = _LogCategory_Initialize(&dword_100234408, 90LL), uint64_t v4 = v6, v5))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setAutoRoute:withAutoRoute:]_block_invoke",  90LL,  "Setting high priority failed with %{error}",  v4);
        uint64_t v4 = v6;
      }
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 376LL) = 1;
  }
}

void sub_100044520(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100234408 <= 90
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setIsHiddenProperty:withIsHidden:]_block_invoke",  90LL,  "Setting isHidden failed with %{error}",  v3);
  }

  else
  {
  }

void sub_100044678(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (dword_100234408 <= 90)
    {
      id v6 = v3;
      if (dword_100234408 != -1 || (v5 = _LogCategory_Initialize(&dword_100234408, 90LL), int v4 = v6, v5))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setHighPriorityTag:withHighPriority:]_block_invoke",  90LL,  "Setting high priority failed with %{error}",  v4);
        int v4 = v6;
      }
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 376LL) = 1;
  }
}

void sub_100044870(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100234408 <= 90
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 90LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setManualRouteFlag:withManualRoute:]_block_invoke",  90LL,  "Setting manual route flag failed with %{error}",  v3);
  }

  else
  {
  }

void sub_100044EB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
    int Int64Ranged = CFDictionaryGetInt64Ranged(v3, @"TotalIDSDevices", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);

    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(v5 + 1256);
    if (Int64Ranged != v6)
    {
      if (dword_100234408 <= 30)
      {
        if (dword_100234408 == -1)
        {
          int v7 = _LogCategory_Initialize(&dword_100234408, 30LL);
          uint64_t v5 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_8;
          }
          uint64_t v6 = *(void *)(v5 + 1256);
        }

        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _setTotalCountIDSDevices:]_block_invoke",  30LL,  "Total count of IDS devices updated: %d -> %d",  v6,  Int64Ranged);
        uint64_t v5 = *(void *)(a1 + 40);
      }

void sub_10004535C(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startIdleActivityScoreTimer:]_block_invoke",  30LL,  "Idle activity score timer: timer expires");
  }
  [*(id *)(a1 + 32) handleActivityScoreUpdate:12];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 408LL);
  if (v2)
  {
    uint64_t v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(v3 + 408);
    *(void *)(v3 + 40_Block_object_dispose(va, 8) = 0LL;
  }

void sub_10004568C(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(int **)(a1 + 32);
  if (*(void *)(v3 + 8) == 1LL || v2[251] >= 6)
  {
    [v2 _proactivelyTakeOwnership];
  }

  else if (dword_100234408 <= 30 {
         && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  }
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startHighActivityLevelTimer:]_block_invoke",  30LL,  "ProactiveRouting: Skip, device inactive");
  }

  int v4 = *(void **)(*(void *)(a1 + 32) + 368LL);
  if (v4)
  {
    int v7 = v4;
    dispatch_source_cancel(v7);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 368);
    *(void *)(v5 + 36_Block_object_dispose(va, 8) = 0LL;
  }

void sub_100045868(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 680LL);
  if (v2)
  {
    uint64_t v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(v3 + 680);
    *(void *)(v3 + 680) = 0LL;
  }

void sub_1000459BC(uint64_t a1)
{
  uint64_t v2 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1208) manualRouteChangeDetectionTimer]);
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v2);
    uint64_t v2 = v3;
  }
}

void sub_100045AE4(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 696LL);
  if (v1)
  {
    uint64_t v5 = v1;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(v3 + 696);
    *(void *)(v3 + 696) = 0LL;
  }

void sub_100045C48(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 936LL);
  if (v2)
  {
    uint64_t v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(v3 + 936);
    *(void *)(v3 + 936) = 0LL;
  }

id sub_100045FA8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 == 11)
  {
    [*(id *)(a1 + 32) _handleProactiveRoutingRouteCheck:*(void *)(a1 + 40)];
    uint64_t v2 = *(unsigned int *)(a1 + 48);
  }

  return _[*(id *)(a1 + 32) _submitRouteCheckMetric:*(void *)(a1 + 40) andType:v2];
}

LABEL_46:
        int v7 = obj;
        goto LABEL_47;
      }
    }

    int v7 = obj;
    unint64_t v8 = [obj countByEnumeratingWithState:&v40 objects:v50 count:16];
    if (v8) {
      continue;
    }
    break;
  }

  unint64_t v8 = v51;
  uint64_t v6 = v52;
  uint64_t v9 = v53;
LABEL_47:
}

      unsigned int v30 = __OFADD__(v58++, 1LL);
      if (v30) {
        goto LABEL_99;
      }
      if (v58 < v162)
      {
        __int128 v65 = *(void *)(v59 + 8 * v58);
        if (v65) {
          goto LABEL_58;
        }
        uint64_t v66 = v58 + 1;
        if (v58 + 1 < v162)
        {
          __int128 v65 = *(void *)(v59 + 8 * v66);
          if (v65) {
            goto LABEL_57;
          }
          uint64_t v66 = v58 + 2;
          if (v58 + 2 < v162)
          {
            __int128 v65 = *(void *)(v59 + 8 * v66);
            if (v65) {
              goto LABEL_57;
            }
            uint64_t v66 = v58 + 3;
            if (v58 + 3 < v162)
            {
              __int128 v65 = *(void *)(v59 + 8 * v66);
              if (v65) {
                goto LABEL_57;
              }
              uint64_t v66 = v58 + 4;
              if (v58 + 4 < v162)
              {
                __int128 v65 = *(void *)(v59 + 8 * v66);
                if (!v65)
                {
                  while (1)
                  {
                    uint64_t v58 = v66 + 1;
                    if (__OFADD__(v66, 1LL)) {
                      break;
                    }
                    if (v58 >= v162) {
                      goto LABEL_69;
                    }
                    __int128 v65 = *(void *)(v59 + 8 * v58);
                    ++v66;
                    if (v65) {
                      goto LABEL_58;
                    }
                  }

                  __break(1u);
                  goto LABEL_102;
                }

  id result = swift_bridgeObjectRelease(*(void *)(v32 + v40[18] + 8));
  if ((v223 & 1) != 0)
  {
LABEL_21:
    id result = swift_bridgeObjectRelease(*(void *)(v32 + v40[19] + 8));
    if ((v224 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

LABEL_47:
  if (v45[5]) {
    goto LABEL_49;
  }
  nearbyInfoDevices = v36->_nearbyInfoDevices;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100046560;
  v37[3] = &unk_100207488;
  v37[4] = v36;
  BOOL v33 = v6;
  unsigned __int8 v38 = v33;
  uint64_t v39 = &v44;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( nearbyInfoDevices,  "enumerateKeysAndObjectsUsingBlock:",  v37);

  if (v45[5])
  {
LABEL_49:
    -[BTSmartRoutingDaemon _sendTipiHealingRequest:andOtherTipiAddress:]( v36,  "_sendTipiHealingRequest:andOtherTipiAddress:",  v34);
  }

  else if (dword_100234408 <= 90 {
         && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
  }
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]",  90LL,  "Evaluator: Tipi healing address not found for %@",  v33);
  }

  _Block_object_dispose(&v44, 8);

LABEL_51:
}

                    uint64_t v31 = v51;
                    uint64_t v2 = v52;
                    goto LABEL_48;
                  }

  if (!(_DWORD)v224)
  {
LABEL_22:
    if ((_DWORD)v225) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

void sub_100046518( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_100046560(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v40 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v40 bleDevice]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 advertisementFields]);

  uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v7, @"bdAddr", 6LL, 0LL);
  id v9 = objc_claimAutoreleasedReturnValue(CFDataOfLength);
  id v10 = (char *)[v9 bytes];
  if (v9)
  {
    uint64_t v11 = NSPrintF("%.6a", COERCE_DOUBLE([v9 bytes]));
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }

  else
  {
    id v12 = 0LL;
  }

  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v40 idsIdentifier]);
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v13 _nearbyMacAddressTranslate:v14]);

  id v16 = v15;
  id v17 = (char *)[v16 bytes];
  if (v16)
  {
    uint64_t v18 = NSPrintF("%.6a", COERCE_DOUBLE([v16 bytes]));
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  }

  else
  {
    id v19 = 0LL;
  }

  id v20 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
  if (dword_100234408 <= 30)
  {
    if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))
    {
      uint64_t v39 = v12;
      int v21 = v7;
      unsigned __int8 v22 = a4;
      unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v40 idsIdentifier]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v40 model]);
      unsigned int v25 = [v24 containsString:@"Mac"];
      uint64_t v26 = "no";
      if (v25) {
        uint64_t v26 = "yes";
      }
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]_block_invoke",  30LL,  "Evaluator: Tipi healing ND %@ idsId %@ isMac %s",  v40,  v23,  v26);

      id v20 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
      a4 = v22;
      int v7 = v21;
      id v12 = v39;
    }

    int inst_meths = (int)v20[14].inst_meths;
    if (inst_meths <= 30 && (inst_meths != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]_block_invoke",  30LL,  "Evaluator: Tipi healing comparing, lastConnect: %@, NdAddr %@ transAddr %@",  *(void *)(a1 + 40),  v12,  v19);
    }
  }

  if (v9
    && ((unsigned int v28 = (unsigned __int16 *)[*(id *)(a1 + 40) bytes],
         *v28 == *(unsigned __int16 *)(v10 + 3))
      ? (BOOL v29 = *((unsigned __int8 *)v28 + 2) == v10[5])
      : (BOOL v29 = 0),
        unsigned int v30 = v12,
        v29)
    || v16
    && ((uint64_t v31 = (unsigned __int16 *)[*(id *)(a1 + 40) bytes],
         *v31 == *(unsigned __int16 *)(v17 + 3))
      ? (BOOL v32 = *((unsigned __int8 *)v31 + 2) == v17[5])
      : (BOOL v32 = 0),
        unsigned int v30 = v19,
        v32))
  {
    BOOL v33 = v20;
    uint64_t v34 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v35 = v30;
    unsigned int v36 = *(void **)(v34 + 40);
    *(void *)(v34 + 40) = v35;
    id v20 = v33;
  }

  uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v37)
  {
    int v38 = (int)v20[14].inst_meths;
    if (v38 <= 30)
    {
      if (v38 == -1)
      {
        uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]_block_invoke",  30LL,  "Evaluator: Tipi healing found via ND %@",  v37);
    }

LABEL_34:
    *a4 = 1;
  }
}

  swift_unknownObjectRelease(v13);
  return swift_release(v2);
}

  id result = swift_bridgeObjectRelease(*(void *)(v32 + v40[6] + 8));
  if ((v35 & 1) != 0)
  {
LABEL_9:
    id result = sub_100099394(*(void *)(v32 + v40[7]), *(void *)(v32 + v40[7] + 8));
    if ((v36 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

            uint64_t v13 = 0LL;
LABEL_35:
            LOBYTE(v_Block_object_dispose(va, 8) = 1;
            goto LABEL_38;
          }

      swift_bridgeObjectRelease_n(v115, 2LL);
      sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
      id v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
      unsigned int v96 = v113;
      unsigned __int8 v98 = v97;
      swift_bridgeObjectRetain(v114);
      v99._countAndFlagsBits = v96;
      v99._object = v114;
      v100._countAndFlagsBits = v95;
      v100._object = v98;
      v101.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v99, v100).super.isa;
      v102 = v158;
      v103 = (uint64_t)v157;
      v104 = v172;
      (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v156 + *(int *)(v155 + 28), v172);
      uint64_t v105 = [v167 scope];
      v106 = (uint64_t)v171;
      sub_1000EE83C(v103, (uint64_t)v105, v101.super.isa);
      id v20 = *(id *)(v102 + 8);
      ((void (*)(uint64_t, uint64_t))v20)(v103, v104);
      unsigned int v107 = (void *)sub_1000EEA18(v106);

      if (v107)
      {
        v109 = static os_log_type_t.default.getter(v108);
        a2 = qword_10023DFB8;
        unsigned __int8 v110 = swift_allocObject(v175, 72LL, 7LL);
        *(_OWORD *)(v110 + 16) = v166;
        v111 = v154;
        *(void *)(v110 + 56) = &type metadata for String;
        *(void *)(v110 + 64) = v111;
        *(void *)(v110 + 32) = v96;
        *(void *)(v110 + 40) = v114;
        os_log(_:dso:log:_:_:)( v109,  &_mh_execute_header,  a2,  "CloudSync: Skip fetch operation for unchanged zone ID: %@ with existing token",  77LL,  2LL,  v110);

        swift_bridgeObjectRelease(v110);
        uint64_t v42 = v169;
        int v21 = v165;
      }

      else
      {
        sub_1000FD248();
        unsigned __int8 v125 = static os_log_type_t.default.getter(v124);
        a2 = qword_10023DFB8;
        unsigned __int8 v126 = swift_allocObject(v175, 72LL, 7LL);
        *(_OWORD *)(v126 + 16) = v166;
        BOOL v127 = v154;
        *(void *)(v126 + 56) = &type metadata for String;
        *(void *)(v126 + 64) = v127;
        *(void *)(v126 + 32) = v96;
        *(void *)(v126 + 40) = v114;
        os_log(_:dso:log:_:_:)( v125,  &_mh_execute_header,  a2,  "CloudSync: Adding fetch operation for new zone: %@",  50LL,  2LL,  v126);
        swift_bridgeObjectRelease(v126);
        int v21 = v165;
        swift_beginAccess(v165, &v180, 33LL, 0LL);
        BOOL v128 = v101.super.isa;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v128);
        v130 = *(void *)((*(void *)v21 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t v129 = *(void *)((*(void *)v21 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v130 >= v129 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1LL);
        }
        uint64_t v131 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v130, v128);
        specialized Array._endMutation()(v131);
        swift_endAccess(&v180);

        uint64_t v42 = v169;
      }

      ((void (*)(char *, uint64_t))v20)(v171, v172);
LABEL_37:
      id v93 = v168;
      id v94 = v176 + 1;
      if (v176 + 1 == v174)
      {
        swift_bridgeObjectRelease(v168);
        goto LABEL_65;
      }
    }

          int v7 = 0LL;
          id v9 = 1;
          goto LABEL_37;
        }

        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      int v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        id v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          id v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          int v21 = 10 * v7;
          int v7 = v21 + v20;
          id v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

            swift_bridgeObjectRetain(v41);
            uint64_t v59 = sub_1000A7CD4(v131, type metadata accessor for CloudCoordinatorConfiguration);
LABEL_35:
            id v67 = static os_log_type_t.default.getter(v59);
            if (qword_100234C18 != -1) {
              swift_once(&qword_100234C18, sub_10018A920);
            }
            uint64_t v68 = qword_10023DFB8;
            __int128 v69 = sub_100098CD8((uint64_t *)&unk_100234E00);
            uint64_t v70 = swift_allocObject(v69, 72LL, 7LL);
            *(_OWORD *)(v70 + 16) = v133;
            *(void *)(v70 + 56) = &type metadata for String;
            __int128 v71 = sub_10009914C();
            *(void *)(v70 + 64) = v71;
            *(void *)(v70 + 32) = v57;
            *(void *)(v70 + 40) = v41;
            swift_bridgeObjectRetain(v41);
            os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "New zone added: %@", 18LL, 2LL, v70);
            swift_bridgeObjectRelease(v70);
            sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
            __int128 v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
            BOOL v74 = v73;
            swift_bridgeObjectRetain(v41);
            v75._countAndFlagsBits = v57;
            v75._object = v41;
            v76._countAndFlagsBits = v72;
            v76._object = v74;
            v77.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v75, v76).super.isa;
            unint64_t v78 = (uint64_t)v124;
            URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
            v79._countAndFlagsBits = 0x65746176697250LL;
            v79._object = (void *)0xE700000000000000LL;
            URL.appendPathComponent(_:)(v79);
            uint64_t v80 = -[objc_class ownerName](v77.super.isa, "ownerName");
            id v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
            unsigned int v83 = v82;

            v84._countAndFlagsBits = v81;
            v84._object = v83;
            URL.appendPathComponent(_:)(v84);
            swift_bridgeObjectRelease(v83);
            BOOL v85 = -[objc_class zoneName](v77.super.isa, "zoneName");
            unint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
            BOOL v88 = v87;

            v137._countAndFlagsBits = v86;
            v137._object = v88;
            v89._countAndFlagsBits = 0x6E656B6F742ELL;
            v89._object = (void *)0xE600000000000000LL;
            String.append(_:)(v89);
            object = v137._object;
            URL.appendPathComponent(_:)(v137);
            swift_bridgeObjectRelease(object);
            unint64_t v91 = (void *)sub_1000EEA18(v78);

            if (v91)
            {
              id v93 = static os_log_type_t.error.getter(v92);
              id v94 = qword_10023DFB8;
              id v95 = swift_allocObject(v69, 72LL, 7LL);
              *(_OWORD *)(v95 + 16) = v133;
              *(void *)(v95 + 56) = &type metadata for String;
              *(void *)(v95 + 64) = v71;
              *(void *)(v95 + 32) = v57;
              *(void *)(v95 + 40) = v41;
              os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Remove change token for zone: %@", 32LL, 2LL, v95);
              swift_bridgeObjectRelease(v95);
              unsigned int v96 = v125;
              sub_1000EEC84();
              unint64_t v53 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v128;
              if (v96)
              {

                swift_errorRelease(v96);
                v122(v78, v130);
                unsigned __int8 v125 = 0LL;
              }

              else
              {
                unsigned __int8 v125 = 0LL;
                v122(v78, v130);
              }

              uint64_t v44 = v129;
            }

            else
            {
              v122(v78, v130);
              swift_bridgeObjectRelease(v41);

              unint64_t v53 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v128;
              uint64_t v44 = v129;
            }

            id v48 = v134;
            int v49 = v126;
            int v55 = v127;
            id v47 = v121;
            goto LABEL_19;
          }
        }

void sub_100047DB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100047DDC(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  id v6 = a3;
  if (([v6 isTipiHealingV2Eligible] & 1) == 0)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
    if (!v7)
    {
LABEL_32:

      goto LABEL_33;
    }

    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1360) objectForKeyedSubscript:v7]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bleDevice]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 advertisementFields]);

    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged(v10, @"asCount", 0LL, 0xFFFFFFFFLL, 0LL);
    uint64_t CFDataOfLength = CFDictionaryGetCFDataOfLength(v10, @"lch", 3LL, 0LL);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
    char v14 = CFDictionaryGetInt64Ranged(v10, @"srAudioRoutingScore1", 0LL, 255LL, 0LL);
    uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getWxFWVersion:v29]);
    id v16 = (void *)v15;
    if (v14) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17
      && [@"5A187" compare:v15 options:64] == (id)-1
      && ([*(id *)(a1 + 32) _isMyAddress:v13] & 1) == 0)
    {
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealingAttempt]_block_invoke",  30LL,  "Legacy Tipi healing blocked, source devices and headsets are capable of Tipi2.0");
      }

      [v6 setIsTipiHealingV2Eligible:1];
      goto LABEL_31;
    }

    uint64_t v18 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      unsigned int v28 = v16;
      id v19 = v8;
      else {
        id v20 = "no";
      }
      int v21 = (void *)objc_claimAutoreleasedReturnValue([v6 otherTipiDeviceBTAddress]);
      double v27 = v20;
      unint64_t v8 = v19;
      id v16 = v28;
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealingAttempt]_block_invoke",  30LL,  "Tipi healing inWxAddress %@ sourceCount %u inEar %s lastConnect %@ otherTipi %@",  v29,  Int64Ranged,  v27,  v13,  v21);

      uint64_t v18 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
    }

    if (Int64Ranged >= 2)
    {
      unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue([v6 otherTipiDeviceBTAddress]);

      if (!v22)
      {
        uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8LL);
        uint64_t v25 = *(void *)(v23 + 40);
        id v24 = (id *)(v23 + 40);
        if (!v25)
        {
LABEL_30:
          objc_storeStrong(v24, a2);
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v13);
          goto LABEL_31;
        }

        if ([v6 inEar])
        {
          int inst_meths = (int)v18[14].inst_meths;
          if (inst_meths <= 30 && (inst_meths != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealingAttempt]_block_invoke",  30LL,  "Overwrite Tipi healing headset for inEar inWxAddress %@ ",  v29);
          }
          id v24 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
          goto LABEL_30;
        }
      }
    }

LABEL_33:
}
}

  objc_destroyWeak(&to);
}

    __break(1u);
LABEL_34:
    uint64_t v60 = (a1 & 0x3F) << 8;
    uint64_t v61 = (v60 | (a1 >> 6)) + 33217;
    __int128 v62 = (v60 | (a1 >> 6) & 0x3F) << 8;
    __int128 v63 = (((v62 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    __int128 v64 = (v62 | (a1 >> 12)) + 8487393;
    if ((_DWORD)v15) {
      unsigned __int8 v22 = v63;
    }
    else {
      unsigned __int8 v22 = v64;
    }
LABEL_10:
    uint64_t v18 = v7;
    uint64_t v23 = __clz(v22);
    id v24 = 4LL - (v23 >> 3);
    *(void *)description = (v22 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (v23 >> 3)) & 7)));
    uint64_t v25 = v17;
    id v20 = description;
  }

  if (!a1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (qword_100234B88 != -1) {
    swift_once(&qword_100234B88, sub_1000DD658);
  }
  uint64_t v42 = _os_activity_create((void *)&_mh_execute_header, a1, (os_activity_t)qword_100235CC8, OS_ACTIVITY_FLAG_DEFAULT);
  a3 = 0x100235000LL;
  while (1)
  {
    uint64_t v44 = OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity;
    unsigned __int8 v45 = *(void *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity];
    *(void *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity] = v42;
    swift_unknownObjectRelease(v45);
    uint64_t v46 = *(void *)&v17[v44];
    if (v46) {
      break;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __int128 v65 = (v16 | (a1 >> 6) & 0x3F) << 8;
    if ((_DWORD)v15) {
      char v43 = (((v65 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    }
    else {
      char v43 = (v65 | (a1 >> 12)) + 8487393;
    }
LABEL_22:
    *(void *)description = (v43 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << ((32 - (__clz(v43) & 0x38)) & 0x38));
    if (qword_100234B88 != -1) {
      swift_once(&qword_100234B88, sub_1000DD658);
    }
    uint64_t v42 = _os_activity_create( (void *)&_mh_execute_header,  description,  (os_activity_t)qword_100235CC8,  OS_ACTIVITY_FLAG_DEFAULT);
  }

  id v47 = (os_activity_scope_state_s *)&v17[*(void *)(a3 + 1608)];
  swift_beginAccess(v47, description, 33LL, 0LL);
  id v48 = (os_activity_s *)swift_unknownObjectRetain(v46);
  os_activity_scope_enter(v48, v47);
  swift_endAccess(description);
  int v49 = swift_unknownObjectRelease(v46);
  uint64_t v50 = static os_log_type_t.default.getter(v49);
  if (qword_100234C40 != -1) {
    swift_once(&qword_100234C40, sub_10018AB44);
  }
  id v51 = qword_10023DFE0;
  uint64_t v52 = sub_100098CD8((uint64_t *)&unk_100234E00);
  unint64_t v53 = swift_allocObject(v52, 72LL, 7LL);
  *(_OWORD *)(v53 + 16) = xmmword_1001A5EA0;
  uint64_t v54 = v17;
  int v55 = [v54 description];
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  *(void *)(v53 + 56) = &type metadata for String;
  *(void *)(v53 + 64) = sub_10009914C();
  *(void *)(v53 + 32) = v56;
  *(void *)(v53 + 40) = v58;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Opened %@", 9LL, 2LL, v53);
  swift_bridgeObjectRelease(v53);

  return v54;
}

    v146 = (v54 - 1) & v54;
    v147 = v55;
  }

  uint64_t v70 = v7;
  __int128 v71 = (uint64_t)v13 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  swift_bridgeObjectRetain(v13);
  __int128 v72 = *(void *)(v70 + 72);
  while (1)
  {
    sub_1000A7C90(v71, (uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
    if (!v25)
    {
      sub_1000A7CD4((uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
      goto LABEL_44;
    }

    id v73 = &v9[*(int *)(v6 + 24)];
    BOOL v74 = *((void *)v73 + 1);
    unsigned int v76 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v73, v74, v20, v25, 0LL);
    sub_1000A7CD4((uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
    if ((v76 & 1) != 0) {
      goto LABEL_57;
    }
LABEL_44:
    v71 += v72;
    if (!--v69)
    {
      swift_release(v150);
      swift_bridgeObjectRelease_n(v13, 2LL);
      a3 = v153;
      uint64_t v18 = v149;
      int v7 = v144;
      goto LABEL_54;
    }
  }

  sub_1000A7CD4((uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
LABEL_57:
  swift_bridgeObjectRelease_n(v13, 2LL);
  swift_bridgeObjectRelease(v25);
  uint64_t v77 = v149;
  unint64_t v78 = *(void **)&v149[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v79 = v141;
  *v141 = v78;
  uint64_t v80 = v142;
  id v81 = v143;
  ((void (*)(void *, void, uint64_t))v142[13])(v79, enum case for DispatchPredicate.onQueue(_:), v143);
  uint64_t v82 = v78;
  LOBYTE(v7_Block_object_dispose((const void *)(v9 - 80), 8) = _dispatchPreconditionTest(_:)(v79);
  ((void (*)(void *, uint64_t))v80[1])(v79, v81);
  if ((v78 & 1) != 0)
  {
    unsigned int v83 = (void *)swift_allocObject(&unk_10020AD38, 56LL, 7LL);
    id v84 = v152;
    BOOL v85 = v153;
    v83[2] = v77;
    v83[3] = v84;
    unint64_t v86 = v145;
    v83[4] = v85;
    v83[5] = v86;
    unint64_t v87 = v151;
    v83[6] = v151;
    BOOL v88 = v77;
    swift_retain(v85);
    swift_bridgeObjectRetain(v87);
    uint64_t v89 = v150;
    sub_100159E08((uint64_t)sub_1000C9160, (uint64_t)v83);
    swift_release(v148);

    swift_release(v89);
    swift_bridgeObjectRelease(v87);
    goto LABEL_82;
  }

  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
}

  __break(1u);
}

  uint64_t v58 = swift_bridgeObjectRetain(v29);
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v58);
  swift_release(v29);
LABEL_24:
  BOOL v32 = swift_release(v29);
  if (!v31)
  {
    int v4 = a3;
    a2 = static os_log_type_t.default.getter(v32);
    if (qword_100234C18 == -1)
    {
LABEL_31:
      uint64_t v42 = qword_10023DFB8;
      char v43 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
      *(_OWORD *)(v44 + 16) = xmmword_1001A5EA0;
      unsigned __int8 v45 = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
      uint64_t v46 = swift_bridgeObjectRetain(a1);
      id v47 = Array.description.getter(v46, v45);
      int v49 = v48;
      swift_bridgeObjectRelease(a1);
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 64) = sub_10009914C();
      *(void *)(v44 + 32) = v47;
      *(void *)(v44 + 40) = v49;
      os_log(_:dso:log:_:_:)(a2, &_mh_execute_header, v42, "No updates in the records. Skipping - %@", 40LL, 2LL, v44);
      swift_bridgeObjectRelease(v44);
      uint64_t v50 = (void *)swift_allocObject(&unk_10020DCA8, 40LL, 7LL);
      v50[2] = v63;
      v50[3] = v4;
      v50[4] = a1;
      __int128 v69 = sub_100112A30;
      uint64_t v70 = v50;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v66 = 1107296256LL;
      id v67 = sub_1000F2C54;
      uint64_t v68 = &unk_10020DCC0;
      id v51 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain(a1);
      uint64_t v52 = swift_retain(v4);
      static DispatchQoS.unspecified.getter(v52);
      __int128 v64 = _swiftEmptyArrayStorage;
      unint64_t v53 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v54 = sub_100098CD8((uint64_t *)&unk_100235790);
      int v55 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v56 = v54;
      id v57 = v62;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v56, v55, v62, v53);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v51);
      _Block_release(v51);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v57);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v60);
      swift_release(v70);
      return 0LL;
    }

    uint64_t v11 = (v24 - 1) & v24;
    int v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unsigned int v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    BOOL v32 = *v30;
    uint64_t v31 = v30[1];
    BOOL v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    BOOL v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      double v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v28 = v17 == v27;
        if (v17 == v27) {
          BOOL v17 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v9 - 80), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    int v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unsigned int v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    BOOL v32 = *v30;
    uint64_t v31 = v30[1];
    BOOL v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    BOOL v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      double v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v28 = v17 == v27;
        if (v17 == v27) {
          BOOL v17 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v9 - 80), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v27 - 1) & v27;
    id v24 = __clz(__rbit64(v27)) + (v15 << 6);
LABEL_34:
    BOOL v33 = *(void **)(*(void *)(v5 + 48) + 8 * v24);
    uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v24);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v33;
      swift_retain(*((void *)&v37 + 1));
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    type metadata accessor for CFString(0LL);
    BOOL v17 = v16;
    uint64_t v18 = sub_100098C98( &qword_1002352F8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001A601C);
    _CFObject.hash(into:)(v38, v17, v18);
    id result = Hasher._finalize()();
    id v19 = -1LL << *(_BYTE *)(v8 + 32);
    id v20 = result & ~v19;
    int v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      unsigned __int8 v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v29 = 0;
      unsigned int v30 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v31 = v21 == v30;
        if (v21 == v30) {
          int v21 = 0LL;
        }
        v29 |= v31;
        BOOL v32 = *(void *)(v13 + 8 * v21);
      }

      while (v32 == -1);
      unsigned __int8 v22 = __clz(__rbit64(~v32)) + (v21 << 6);
    }

    *(void *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    *(void *)(*(void *)(v8 + 48) + 8 * v22) = v33;
    *(_OWORD *)(*(void *)(v8 + 56) + 16 * v22) = v37;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v26 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v26, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v26 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v13 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v17 << 6);
      }

      uint64_t v31 = *(void **)(*(void *)(v6 + 48) + 8 * v23);
      id v35 = *(_OWORD *)(*(void *)(v6 + 56) + 16 * v23);
      if ((a2 & 1) == 0)
      {
        BOOL v32 = v31;
        swift_retain(*((void *)&v35 + 1));
      }

      id result = NSObject._rawHashValue(seed:)(*(void *)(v9 + 40));
      uint64_t v18 = -1LL << *(_BYTE *)(v9 + 32);
      id v19 = result & ~v18;
      id v20 = v19 >> 6;
      if (((-1LL << v19) & ~*(void *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        int v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        double v27 = 0;
        unsigned int v28 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          id v29 = v20 == v28;
          if (v20 == v28) {
            id v20 = 0LL;
          }
          v27 |= v29;
          unsigned int v30 = *(void *)(v15 + 8 * v20);
        }

        while (v30 == -1);
        int v21 = __clz(__rbit64(~v30)) + (v20 << 6);
      }

      *(void *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      *(void *)(*(void *)(v9 + 48) + 8 * v21) = v31;
      *(_OWORD *)(*(void *)(v9 + 56) + 16 * v21) = v35;
      ++*(void *)(v9 + 16);
    }
  }

  id result = swift_release(v6);
LABEL_43:
  *int v4 = v9;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    unsigned __int8 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    BOOL v32 = *(void **)(*(void *)(v5 + 48) + v31);
    BOOL v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v32;
      id v35 = v33;
    }

    id result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    BOOL v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      double v27 = 0;
      unsigned int v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        unsigned int v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  id v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unsigned int v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    int v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unsigned int v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    BOOL v32 = *v30;
    uint64_t v31 = v30[1];
    BOOL v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    BOOL v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      double v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v28 = v17 == v27;
        if (v17 == v27) {
          BOOL v17 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v9 - 80), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

LABEL_23:
            int v21 = (void *)objc_claimAutoreleasedReturnValue([v15 productName]);
            unsigned __int8 v22 = [v21 hasPrefix:@"Watch"];

            if (v22)
            {
              if (dword_100234408 <= 60
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 60LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealing:withDevice:]",  60LL,  "###TipiTableEvent: Skip tipi healing, lastConnected device address is Watch");
              }

              goto LABEL_45;
            }

            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v15 modelIdentifier]);
            id v24 = [v23 hasPrefix:@"AppleTV"];

            if (v24)
            {
              if (dword_100234408 <= 60
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 60LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealing:withDevice:]",  60LL,  "###TipiTableEvent: Skip tipi healing, other source is AppleTV");
              }

              goto LABEL_45;
            }

            if ([v53 tipiHealingBackoff])
            {
              if (dword_100234408 <= 60
                && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 60LL)))
              {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealing:withDevice:]",  60LL,  "###TipiTableEvent: Skip tipi healing, backoff for ongoing FD");
              }

              goto LABEL_45;
            }

            nearbyInfoDevicesTriangleRecoveryTimer = v49->_nearbyInfoDevicesTriangleRecoveryTimer;
            if (nearbyInfoDevicesTriangleRecoveryTimer)
            {
              uint64_t v26 = nearbyInfoDevicesTriangleRecoveryTimer;
              dispatch_source_cancel(v26);
              double v27 = v49->_nearbyInfoDevicesTriangleRecoveryTimer;
              v49->_nearbyInfoDevicesTriangleRecoveryTimer = 0LL;
            }

            tipiHealingTimer = v49->_tipiHealingTimer;
            if (!tipiHealingTimer)
            {
LABEL_65:
              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v15 modelIdentifier]);
              BOOL v32 = @"Mac";
              if (([v31 containsString:@"Mac"] & 1) == 0)
              {
                BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v15 modelIdentifier]);
                uint64_t v34 = [v33 hasPrefix:@"iPad"];
                id v35 = @"iPhone";
                if (v34) {
                  id v35 = @"iPad";
                }
                BOOL v32 = v35;
              }

              unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue([v15 modelIdentifier]);
              id v48 = [v36 containsString:@"Mac"];

              uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v15 productName]);
              if ([v37 isEqualToString:@"iPhone OS"])
              {
                if (v15)
                {
                  [v15 operatingSystemVersion];
                  if (v59 >= 17)
                  {

                    goto LABEL_76;
                  }
                }
              }

              int v38 = v32;
              uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v15 modelIdentifier]);
              if ([v39 containsString:@"Mac"])
              {
                if (v15)
                {
                  [v15 operatingSystemVersion];

                  BOOL v32 = v38;
                  if (v58 < 14)
                  {
                    id v40 = &off_100218948;
                    goto LABEL_82;
                  }
}
}

  ((void (*)(void *))v8[2])(v8);

  _Block_object_dispose(&v28, 8);
}

    id v10 = (v16 - 1) & v16;
    char v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v6 + 56) + 8 * v14);
    id v19 = *v3;
    if (!*(void *)(*v3 + 16)) {
      goto LABEL_7;
    }
    id v20 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    unsigned __int8 v22 = *v20;
    int v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v19);
    uint64_t v23 = sub_1000A3A10(v22, v21);
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = *(void *)(*(void *)(v19 + 56) + 8 * v23);
      swift_bridgeObjectRelease(v21);
      id result = swift_bridgeObjectRelease(v19);
      if (v25 < v18)
      {
LABEL_27:

        swift_release(v6);
        return 1LL;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v21);
      id result = swift_bridgeObjectRelease(v19);
LABEL_7:
      if (v18) {
        goto LABEL_27;
      }
    }
  }

  BOOL v17 = v15 + 3;
  if (v17 >= v11)
  {
LABEL_29:

    swift_release(v6);
    return 0LL;
  }

  id v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    id v12 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    id v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v11) {
      goto LABEL_29;
    }
    id v16 = *(void *)(v7 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

  uint64_t v50 = v87;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v41, v49, 1LL, v21);
  swift_bridgeObjectRelease(v38);
  id v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v41, 1LL, v21);
  uint64_t v52 = v75;
  unint64_t v53 = v74;
  if (v51 == 1)
  {
    sub_100099358(v41, (uint64_t *)&unk_100235810);
    uint64_t v54 = sub_1000AE6C8();
    int v55 = v81;
    sub_10013C62C(v81);
    swift_release(v54);
    uint64_t v56 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48LL))(v55, 1LL, v56) == 1)
    {
      sub_100099358(v55, &qword_1002357D8);
      id v57 = 0LL;
    }

    else
    {
      sub_1000EF00C();
      uint64_t v60 = v59;
      sub_1000A7CD4(v55, type metadata accessor for LegacyMagicPairingSettingsRecords);
      swift_bridgeObjectRetain(a5);
      id v57 = sub_1000C8C18(v60, a4, a5);
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(a5);
    }
  }

  else
  {
    uint64_t v58 = v80;
    sub_1000C998C(v41, v80, type metadata accessor for MagicPairingSettingsRecord);
    id v57 = sub_1000BC2B0();
    sub_1000A7CD4(v58, type metadata accessor for MagicPairingSettingsRecord);
  }

  uint64_t v61 = v88;
  __int128 v62 = *(void **)&v88[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  __int128 v63 = (void *)swift_allocObject(&unk_10020B300, 40LL, 7LL);
  v63[2] = v53;
  v63[3] = v52;
  v63[4] = v57;
  aBlock[4] = sub_1000C90AC;
  unint64_t v91 = v63;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020B318;
  __int128 v64 = _Block_copy(aBlock);
  __int128 v65 = v57;
  uint64_t v66 = v62;
  id v67 = swift_retain(v52);
  uint64_t v68 = v82;
  static DispatchQoS.unspecified.getter(v67);
  uint64_t v89 = _swiftEmptyArrayStorage;
  __int128 v69 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v70 = sub_100098CD8((uint64_t *)&unk_100235790);
  __int128 v71 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  __int128 v72 = v85;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v70, v71, v45, v69);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v68, v72, v64);
  _Block_release(v64);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v45);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v68, v84);
  return swift_release(v91);
}

    uint64_t v5 = (v12 - 1) & v12;
    id v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_24:
    sub_1000A4B48(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v32);
    sub_100112834(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v33 + 8);
    id v29 = v33[0];
    unsigned int v30 = v33[1];
    uint64_t v31 = v34;
    double v27 = v32[0];
    unsigned int v28 = v32[1];
    sub_1000A4B48((uint64_t)&v27, (uint64_t)v25);
    sub_100112834((uint64_t)v6, (uint64_t)v26);
    type metadata accessor for CKError(0LL);
    uint64_t v15 = v14;
    if (swift_dynamicCast(&v24, v26, v35, v14, 6LL))
    {
      id v16 = v6;
      BOOL v17 = v24;
      sub_1000A4B84((uint64_t)v25);
      id v24 = v17;
      uint64_t v18 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
      _BridgedStoredNSError.code.getter(v25, v15, v18);

      id v6 = v16;
      if (v25[0] == 26LL)
      {
        id result = swift_release(a1);
        id v19 = v30;
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v9 - 80), 8) = v19;
        *(void *)(a2 + 64) = v31;
        id v20 = v28;
        *(_OWORD *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v20;
        return result;
      }
    }

    else
    {
      sub_1000A4B84((uint64_t)v25);
    }

    id result = sub_100099358((uint64_t)&v27, &qword_1002365B0);
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v23)
  {
LABEL_27:
    id result = swift_release(a1);
    *(void *)(a2 + 64) = 0LL;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v9 - 80), 8) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }

  id v12 = *(void *)(v22 + 8 * v13);
  if (v12)
  {
    unint64_t v8 = v13;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v23) {
      goto LABEL_27;
    }
    id v12 = *(void *)(v22 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  __break(1u);
LABEL_24:
  uint64_t v26 = 2;
  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1092LL,  0);
  __break(1u);
  return result;
}

    swift_once(&qword_100234C28, sub_10018A9E0);
    goto LABEL_20;
  }

  id v51 = swift_bridgeObjectRetain(v59[0]);
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_release(v12);
  if (!v52) {
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v56 = a3;
  id v57 = a2;
  v54[0] = a4;
  v54[1] = v8;
  if ((v12 & 0xC000000000000001LL) != 0)
  {
    uint64_t v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v12);
    goto LABEL_10;
  }

  if (!*(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v13 = *(id *)(v12 + 32);
LABEL_10:
  char v14 = v13;
  uint64_t v15 = swift_release(v12);
  id v16 = static os_log_type_t.default.getter(v15);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  BOOL v17 = qword_10023DFC8;
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
  id v19 = swift_allocObject(v18, 72LL, 7LL);
  int v55 = xmmword_1001A5EA0;
  *(_OWORD *)(v19 + 16) = xmmword_1001A5EA0;
  id v20 = v14;
  int v21 = [v20 description];
  unsigned __int8 v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  id v24 = v23;

  *(void *)(v19 + 56) = &type metadata for String;
  uint64_t v25 = sub_10009914C();
  *(void *)(v19 + 64) = v25;
  *(void *)(v19 + 32) = v22;
  *(void *)(v19 + 40) = v24;
  os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "Fetched sound profile cloud record from cloud - %@",  50LL,  2LL,  v19);
  swift_bridgeObjectRelease(v19);
  uint64_t v26 = v20;
  sub_1000A64CC(v26, v10);
  double v27 = v54[0] + 16LL;
  id v29 = static os_log_type_t.default.getter(v28);
  unsigned int v30 = qword_10023DFC8;
  uint64_t v31 = swift_allocObject(v18, 72LL, 7LL);
  *(_OWORD *)(v31 + 16) = v55;
  BOOL v32 = sub_1000A52AC();
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = v25;
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 40) = v33;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Fetched sound profile records from cloud - %@", 45LL, 2LL, v31);
  swift_bridgeObjectRelease(v31);
  uint64_t v34 = objc_allocWithZone(&OBJC_CLASS___BTCloudSoundProfileRecord);
  URL._bridgeToObjectiveC()(v35);
  uint64_t v37 = v36;
  int v38 = [v34 initWithFileURL:v36];

  v57(v38);
  swift_beginAccess(v27, v59, 0LL, 0LL);
  Strong = swift_weakLoadStrong(v27);
  if (Strong)
  {
    swift_release(Strong);
    id v40 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v41);
    char v43 = v42;
    v58[0] = 0LL;
    uint64_t v44 = [v40 removeItemAtURL:v42 error:v58];

    unsigned __int8 v45 = v58[0];
    if ((v44 & 1) != 0)
    {
      uint64_t v46 = v58[0];
      sub_1000A7CD4((uint64_t)v10, type metadata accessor for SoundProfileRecord);

      return;
    }

    id v47 = v58[0];
    id v48 = _convertNSErrorToError(_:)(v45);

    swift_willThrow(v49);
    swift_errorRelease(v48);
  }

  sub_1000A7CD4((uint64_t)v10, type metadata accessor for SoundProfileRecord);
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

LABEL_76:
                  id v40 = &off_100218938;
LABEL_82:
                  -[BTSmartRoutingDaemon _updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:]( v49,  "_updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:",  v6,  v7,  v32,  v40);
                  goto LABEL_83;
                }

                BOOL v32 = v38;
                -[BTSmartRoutingDaemon _updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:]( v49,  "_updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:",  v6,  v7,  v38,  &off_100218948);
              }

              else
              {

                BOOL v32 = v38;
                id v40 = &off_100218948;
                -[BTSmartRoutingDaemon _updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:]( v49,  "_updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:",  v6,  v7,  v32,  &off_100218948);
                if (v15)
                {
LABEL_83:
                  [v15 operatingSystemVersion];
                  uint64_t v42 = v57;
                  [v15 operatingSystemVersion];
                  char v43 = 0;
                  unsigned int v41 = v56;
LABEL_84:
                  [v53 _setOtherTipiDeviceBuildVersion:v42 andMinorBuildVersion:v41];
                  if (dword_100234408 <= 30
                    && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
                  {
                    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v15 productName]);
                    if ((v43 & 1) != 0)
                    {
                      unsigned __int8 v45 = 0LL;
                      uint64_t v46 = 0LL;
                    }

                    else
                    {
                      [v15 operatingSystemVersion];
                      uint64_t v46 = v55;
                      [v15 operatingSystemVersion];
                      unsigned __int8 v45 = v54;
                    }

                    id v47 = "no";
                    if (v48) {
                      id v47 = "yes";
                    }
                    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealing:withDevice:]",  30LL,  "TipiTableEvent: Tipi healing attempt succeeded! Booyaaa!!! update the other tipi address %@, name %@, TiPi Version %@, model %@ build %d.%d, otherIsMac %s",  v7,  v32,  v40,  v44,  v46,  v45,  v47);
                  }

                  -[BTSmartRoutingDaemon _tipihHealingV2Handling:](v49, "_tipihHealingV2Handling:", v52);

                  goto LABEL_45;
                }
              }

              unsigned int v41 = 0LL;
              uint64_t v42 = 0LL;
              char v43 = 1;
              id v40 = &off_100218948;
              goto LABEL_84;
            }

            if (dword_100234408 >= 31)
            {
              id v29 = tipiHealingTimer;
            }

            else
            {
              if (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)) {
                LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealing:withDevice:]",  30LL,  "TipiTableEvent: Cancel legacy Tipi healing timer");
              }
              id v29 = v49->_tipiHealingTimer;
              if (!v29) {
                goto LABEL_64;
              }
            }

            dispatch_source_cancel(v29);
            unsigned int v30 = v49->_tipiHealingTimer;
            v49->_tipiHealingTimer = 0LL;

LABEL_64:
            v49->_tipiElectionInProgress = 0;
            goto LABEL_65;
          }
        }

        goto LABEL_36;
      }
    }

    id v12 = [v10 countByEnumeratingWithState:&v62 objects:v66 count:16];
    if (v12) {
      continue;
    }
    break;
  }

  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000013LL,  0x80000001001CDBE0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unsigned __int8 v98 = v142;
  signed int v99 = (uint64_t *)(v139 + v140[20]);
  v101 = *v99;
  signed int v100 = v99[1];
  if (!v142) {
    goto LABEL_81;
  }
  if (v141 != v101 || v142 != v100)
  {
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v99, v99[1], 0LL);
    swift_bridgeObjectRelease(v98);
    if ((v102 & 1) != 0) {
      goto LABEL_82;
    }
LABEL_81:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v101;
    v142 = v100;
    swift_bridgeObjectRetain(v100);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000013LL, 0x80000001001CDBE0LL, ObjectType);
    goto LABEL_82;
  }

  swift_bridgeObjectRelease(v142);
LABEL_82:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x416C616974617073LL,  0xEC0000006F696475LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v103 = v142;
  v104 = (uint64_t *)(v139 + v140[21]);
  v106 = *v104;
  uint64_t v105 = v104[1];
  if (!v142) {
    goto LABEL_87;
  }
  if (v141 == v106 && v142 == v105)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_88;
  }

  unsigned int v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v104, v104[1], 0LL);
  swift_bridgeObjectRelease(v103);
  if ((v107 & 1) == 0)
  {
LABEL_87:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v106;
    v142 = v105;
    swift_bridgeObjectRetain(v105);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x416C616974617073LL, 0xEC0000006F696475LL, ObjectType);
  }

void sub_100049080(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (dword_100234408 <= 90)
  {
    id v6 = v3;
    if (dword_100234408 != -1 || (v5 = _LogCategory_Initialize(&dword_100234408, 90LL), int v4 = v6, v5))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipihHealingV2Handling:]_block_invoke",  90LL,  "### TipiTableEvent: update wx Tipi table for Wx %@, addresses %@, error %{error}",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v4);
      int v4 = v6;
    }
  }

  if (!v4)
  {
    [*(id *)(a1 + 48) setTipitableUpdated:1];
    int v4 = 0LL;
  }
}

uint64_t sub_100049208(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100234408 <= 90)
  {
    if (dword_100234408 != -1 || (id result = _LogCategory_Initialize(&dword_100234408, 90LL), (_DWORD)result)) {
      id result = LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealingStartTimer:]_block_invoke",  90LL,  "Tipi healing attempt failed");
    }
  }

  *(_BYTE *)(*(void *)(v1 + 32) + 1217LL) = 0;
  return result;
}

void sub_1000493BC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100234408 <= 30
    && ((v5 = v2, dword_100234408 != -1) || (v4 = _LogCategory_Initialize(&dword_100234408, 30LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _triggerTipiTableUpdate:]_block_invoke",  30LL,  "TriggerTipiTableUpdate: result %@",  v3);
  }

  else
  {
  }

void sub_10004968C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_1000496A4(uint64_t a1)
{
  if (dword_100234408 <= 30 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _tipiHealingHijackTimerStart:withScore:]_block_invoke",  30LL,  "Tipi Healing didn't complete in time, providing route action to MX");
  }
  id v2 = [*(id *)(a1 + 32) _arbitrationTimeout:*(void *)(a1 + 40) withScore:*(unsigned int *)(a1 + 56)];
  if ((_DWORD)v2) {
    id v3 = @"Tipi Healing not complete, allowing device to hijack route";
  }
  else {
    id v3 = @"Rejected, buds stream state blocks hijack";
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v3);
  int v4 = *(void **)(*(void *)(a1 + 32) + 1240LL);
  if (v4)
  {
    int v5 = v4;
    dispatch_source_cancel(v5);
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(void **)(v6 + 1240);
    *(void *)(v6 + 1240) = 0LL;
  }

  return [*(id *)(a1 + 32) _mediaRouteHijackResponseHandlerFor:*(void *)(a1 + 40) allowedToHijack:v2 withReason:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

void sub_100049BB4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a3 otherTipiDeviceBTAddress]);
}

void *sub_10004A4D0(void *result)
{
  uint64_t v1 = result[4];
  if (*(uint64_t *)(v1 + 1256) < 3)
  {
    if (dword_100234408 <= 30)
    {
      if (dword_100234408 != -1 || (id result = (void *)_LogCategory_Initialize(&dword_100234408, 30LL), (_DWORD)result))
      {
        id v3 = "Less than 3 iCloud devices found";
        return (void *)LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _watchHintingRecovery]_block_invoke",  30LL,  v3);
      }
    }
  }

  else
  {
    id v2 = result;
    id result = [*(id *)(v1 + 184) count];
    if (result)
    {
      if (dword_100234408 > 30) {
        return result;
      }
      if (dword_100234408 == -1)
      {
        id result = (void *)_LogCategory_Initialize(&dword_100234408, 30LL);
        if (!(_DWORD)result) {
          return result;
        }
      }

      id v3 = "Watch recovery cancelled already connected";
      return (void *)LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _watchHintingRecovery]_block_invoke",  30LL,  v3);
    }

    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingDaemon _watchHintingRecovery]_block_invoke",  30LL,  "More than 3 iCloud devices recover the watch for 120 seconds");
    }

    *(_BYTE *)(v2[4] + 1340LL) = 1;
    [(id)v2[4] _update];
    *(_BYTE *)(v2[4] + 32LL) = 11;
    [(id)v2[4] _nearbyInfoActivityChanged];
    return _[(id)v2[4] _watchRecoveryStartTimer];
  }

  return result;
}

id sub_10004A760(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 1217))
  {
    id v2 = (id *)result;
    *(_BYTE *)(v1 + 1340) = 0;
    *(_BYTE *)(*((void *)result + 4) + 32LL) = 3;
    [*((id *)result + 4) _nearbyInfoActivityChanged];
    return [v2[4] _update];
  }

  return result;
}

void sub_10004C168(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v6 = v3;
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeEnsureStarted]_block_invoke",  90LL,  "### Pipe responder activate failed: %{error}",  v6);
    }

    [*(id *)(*(void *)(a1 + 32) + 48) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;

    id v3 = v6;
  }
}

id sub_10004C210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _pipeReceivedRouteRequest:a2 options:a3 responseHandler:a4];
}

void sub_10004CAC0(_Unwind_Exception *a1)
{
}

void sub_10004CB04(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v7 = a2;
    uint64_t v3 = NSErrorF(NSOSStatusErrorDomain, 4294960591LL, "### Pipe initiator activate failed: %{error}.", v7);
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 32);
    *(void *)(v5 + 32) = v4;

    [*(id *)(a1 + 32) _pipeConnectionComplete:v7 andWxHeadset:*(void *)(a1 + 40) isSender:1];
  }

void sub_10004CB80(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v25 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke",  90LL,  "### Send route request failed: peer %@, %{error}",  *(void *)(a1 + 32),  v8);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 32LL), a4);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
    [v9 _setOtherTipiDeviceBTAddress:0 andName:0 sourceVersion:0 withResult:*(void *)(*(void *)(a1 + 40) + 32)];

    [*(id *)(a1 + 40) _pipeConnectionComplete:*(void *)(*(void *)(a1 + 40) + 32) andWxHeadset:*(void *)(a1 + 48) isSender:1];
  }

  else
  {
    if (dword_100234408 <= 30
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke",  30LL,  "Send route request tipi table update completed: peer %@, response %##@",  *(void *)(a1 + 32),  v25);
    }

    uint64_t v10 = mach_absolute_time();
    uint64_t v11 = UpTicksToMilliseconds(v10 - *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
    [v12 _setPipeMessageStats:v11];

    LODWORD(v11) = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    CFTypeID TypeID = CFStringGetTypeID();
    if ((_DWORD)v11)
    {
      uint64_t TypedValue = CFDictionaryGetTypedValue(v25, @"btAddress", TypeID, 0LL);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
      CFTypeID v16 = CFStringGetTypeID();
      uint64_t v17 = CFDictionaryGetTypedValue(v25, @"btName", v16, 0LL);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:@"version"]);
      if (v15 && v18)
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
        unsigned int v21 = [v20 _isOnDemandConnectInProgress];

        if (v21)
        {
          if (dword_100234408 <= 30
            && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
          {
            LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke",  30LL,  "OnDemand connect in progress, stop Tipi election");
          }
        }

        else
        {
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
          [v23 _setOtherTipiDeviceBTAddress:v15 andName:v18 sourceVersion:v19 withResult:0];

          [v19 doubleValue];
          if (v24 < 1.2 || !v19)
          {
            if (dword_100234408 <= 30
              && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
            {
              LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke",  30LL,  "Version %@ legacy behavior, clean up pipes now",  v19);
            }

            [*(id *)(a1 + 40) _pipeConnectionComplete:0 andWxHeadset:*(void *)(a1 + 48) isSender:1];
          }
        }
      }
    }

    else
    {
      uint64_t v22 = CFDictionaryGetTypedValue(v25, @"connectionResultACK", TypeID, 0LL);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v22);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:@"version"]);
      if (dword_100234408 <= 30
        && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
      {
        LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke",  30LL,  "Version %@ ACK %@, cleaning up pipes",  v18,  v15);
      }

      [*(id *)(a1 + 40) _pipeConnectionComplete:0 andWxHeadset:*(void *)(a1 + 48) isSender:1];
    }
  }
}

void sub_10004DB4C(_Unwind_Exception *a1)
{
}

void *sub_10004DBB8(void *result)
{
  uint64_t v1 = result[8];
  uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 40LL);
  if (v2)
  {
    uint64_t v3 = result;
    if (dword_100234408 <= 90)
    {
      if (dword_100234408 == -1)
      {
        int v4 = _LogCategory_Initialize(&dword_100234408, 90LL);
        uint64_t v1 = v3[8];
        if (!v4) {
          return [(id)v3[6] _pipeRequestResponse:v3[7] error:*(void *)(*(void *)(v1 + 8) + 40)];
        }
        uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 40LL);
      }

      LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke",  90LL,  "### require_return_action! Route request failed: senderIDS %@, request %##@, error %{error}",  v3[4],  v3[5],  v2);
      uint64_t v1 = v3[8];
    }

    return [(id)v3[6] _pipeRequestResponse:v3[7] error:*(void *)(*(void *)(v1 + 8) + 40)];
  }

  return result;
}

void sub_10004DC78(uint64_t a1)
{
  if (dword_100234408 <= 90 && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL))) {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke_2",  90LL,  "### Route request timeout: senderIDS %@, request %##@",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = NSErrorF(NSOSStatusErrorDomain, 4294960574LL, "Request timed out");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v2 _pipeRequestResponse:v3 error:v5];

  id v6 = *(void **)(a1 + 64);
  id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) btAddressData]);
  uint64_t v7 = CUPrintNSDataAddress(v11);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = NSErrorF(NSOSStatusErrorDomain, 4294960574LL, "Request timed out");
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  [v6 _updateOtherTipiDevice:v8 otherAddress:0 otherName:0 otherVersion:0 withResult:v10];
}

void sub_10004DDA4(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (v9)
  {
    if (dword_100234408 <= 90
      && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 90LL)))
    {
      LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke_3",  90LL,  "### Route request update Tipi table failed: Wx %@, addresses %##@, %{error}",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v9);
    }

    uint64_t v3 = *(void **)(a1 + 48);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) btAddressData]);
    uint64_t v5 = CUPrintNSDataAddress(v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = NSErrorF( NSOSStatusErrorDomain,  4294960591LL,  "### Route request update Tipi table failed: Wx %@, addresses %##@, %{error}");
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v3 _updateOtherTipiDevice:v6 otherAddress:0 otherName:0 otherVersion:0 withResult:v8];

    [*(id *)(a1 + 64) _pipeRequestResponse:*(void *)(a1 + 72) error:v9];
  }

  else if (dword_100234408 <= 30 {
         && (dword_100234408 != -1 || _LogCategory_Initialize(&dword_100234408, 30LL)))
  }
  {
    LogPrintF( &dword_100234408,  "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke_3",  30LL,  "Route request Tipi table update sent (waiting for async response)");
  }
}

void sub_10004E7B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);

  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(dispatch_queue_s **)(v3 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10004E8F0;
    v8[3] = &unk_100206058;
    v8[4] = v3;
    dispatch_async(v4, v8);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id v9 = @"IsNetworkAvailable";
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) cachedIsNetworkUp]));
  uint64_t v10 = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  [v5 postNotificationName:@"com.apple.bluetooth.services.BTNetworkMonitor.networkChanged" object:0 userInfo:v7];
}

void sub_10004E8F0(uint64_t a1)
{
  uint64_t v2 = (void (**)(id, id))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
  v2[2](v2, [*(id *)(a1 + 32) cachedIsNetworkUp]);
}

void sub_10004E9F0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) evaluator]);
  uint64_t v3 = *(void **)(a1 + 40);

  if (v2 == v3) {
    _objc_msgSend(*(id *)(a1 + 32), "setCachedIsNetworkUp:", objc_msgSend(*(id *)(a1 + 32), "isNetworkUp"));
  }
}

id sub_10004EB88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sfServiceStart];
}

void *sub_10004EC50(void *result)
{
  if (!*(_BYTE *)(result[4] + 24LL))
  {
    uint64_t v1 = result;
    if (dword_100234478 <= 30
      && (dword_100234478 != -1 || _LogCategory_Initialize(&dword_100234478, 30LL)))
    {
      LogPrintF(&dword_100234478, "-[BTShareAudioService invalidate]_block_invoke", 30LL, "Invalidate\n");
    }

    *(_BYTE *)(v1[4] + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    return [(id)v1[4] _invalidate];
  }

  return result;
}

void *sub_10004EF34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[6]) {
    return _[result _handleSessionStarted:a2];
  }
  return result;
}

void *sub_10004EF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v4 == result[6]) {
    return [result _handleSessionEnded:a2 error:a3];
  }
  return result;
}

void sub_10004EF70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 48LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234478 <= 90
        && (dword_100234478 != -1 || _LogCategory_Initialize(&dword_100234478, 90LL)))
      {
        LogPrintF( &dword_100234478,  "-[BTShareAudioService _sfServiceStart]_block_invoke_3",  90LL,  "### SFService start failed: %{error}\n",  v8);
      }

      [*(id *)(*(void *)(a1 + 40) + 48) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 48);
      *(void *)(v5 + 4_Block_object_dispose((const void *)(v2 - 176), 8) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234478 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234478 != -1 || (v7 = _LogCategory_Initialize(&dword_100234478, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234478,  "-[BTShareAudioService _sfServiceStart]_block_invoke_3",  30LL,  "SFService started\n");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

id sub_10004F284(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleShareAudioRequest:responseHandler:");
}

void sub_10004F28C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 72LL));
  uint64_t v10 = v9;
  if (v9)
  {
    (*((void (**)(id, id, id, id))v9 + 2))(v9, v13, v7, v8);
  }

  else
  {
    if (dword_100234478 <= 90
      && (dword_100234478 != -1 || _LogCategory_Initialize(&dword_100234478, 90LL)))
    {
      LogPrintF( &dword_100234478,  "-[BTShareAudioService _handleSessionStarted:]_block_invoke_2",  90LL,  "### Ignoring ShareAudio config request: no handler");
    }

    uint64_t v11 = BTErrorF(4294960582LL, "No config handler");
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*((void (**)(id, void *, void, void))v8 + 2))(v8, v12, 0LL, 0LL);
  }
}

void sub_10004F39C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 80LL));
  uint64_t v10 = v9;
  if (v9)
  {
    (*((void (**)(id, id, id, id))v9 + 2))(v9, v13, v7, v8);
  }

  else
  {
    if (dword_100234478 <= 90
      && (dword_100234478 != -1 || _LogCategory_Initialize(&dword_100234478, 90LL)))
    {
      LogPrintF( &dword_100234478,  "-[BTShareAudioService _handleSessionStarted:]_block_invoke_3",  90LL,  "### Ignoring ShareAudio connect request: no handler");
    }

    uint64_t v11 = BTErrorF(4294960582LL, "No connect handler");
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*((void (**)(id, void *, void, void))v8 + 2))(v8, v12, 0LL, 0LL);
  }
}

void sub_10004F894( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10004F8C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004F8D8(uint64_t a1)
{
}

uint64_t sub_10004F8E0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234478 <= 90)
    {
      if (dword_100234478 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234478,  "-[BTShareAudioService _handleShareAudioRequest:responseHandler:]_block_invoke",  90LL,  "### ShareAudio request failed: %{error}\n",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_10004FC14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 96LL))
  {
    id v4 = v3;
    if (v3
      && dword_100234478 <= 90
      && (dword_100234478 != -1 || _LogCategory_Initialize(&dword_100234478, 90LL)))
    {
      LogPrintF( &dword_100234478,  "-[BTShareAudioService _handleShareAudioPairingCompleted:error:]_block_invoke",  90LL,  "### Add proof failed: %{error}\n",  v4);
    }

    [*(id *)(a1 + 48) setObject:*(void *)(*(void *)(a1 + 40) + 16) forKeyedSubscript:@"btAd"];
    if (dword_100234478 <= 30
      && (dword_100234478 != -1 || _LogCategory_Initialize(&dword_100234478, 30LL)))
    {
      LogPrintF( &dword_100234478,  "-[BTShareAudioService _handleShareAudioPairingCompleted:error:]_block_invoke",  30LL,  "Configure device completed: Response: %##.16@\n",  *(void *)(a1 + 48));
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    id v3 = v4;
  }
}

unint64_t sub_10004FF40(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  uint64_t v5 = (const char *)[v2 UTF8String];
  uint64_t v10 = 0LL;
  __int16 v9 = 0;
  int v8 = 0;
  if (sscanf( v5,  "%hhX:%hhX:%hhX:%hhX:%hhX:%hhX",  &v8,  (char *)&v8 + 1,  (char *)&v8 + 2,  (char *)&v8 + 3,  &v9,  (char *)&v9 + 1) == 6)
  {
    unint64_t v3 = ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9);
    goto LABEL_4;
  }

  if (sscanf( v5,  "%s %hhX:%hhX:%hhX:%hhX:%hhX:%hhX",  &v10,  &v8,  (char *)&v8 + 1,  (char *)&v8 + 2,  (char *)&v8 + 3,  &v9,  (char *)&v9 + 1) == 7)
  {
    uint64_t v7 = (_DWORD)v10 != 1818391888 || *(_DWORD *)((char *)&v10 + 3) != 6515052;
    unint64_t v3 = (v7 << 48) | ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9);
  }

  else
  {
LABEL_3:
    unint64_t v3 = 0LL;
  }

void sub_10005011C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CBIDSManager);
  uint64_t v2 = (void *)qword_100237220;
  qword_100237220 = (uint64_t)v1;
}

void sub_1000502F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100050310(uint64_t a1)
{
  os_log_t v2 = sub_100060178("CloudPairing");
  unint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = +[BTSystemConfiguration isBuddyComplete](&OBJC_CLASS___BTSystemConfiguration, "isBuddyComplete");
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "IDS Buddy State Callback : %i",  (uint8_t *)v5,  8u);
  }

  if (+[BTSystemConfiguration isBuddyComplete](&OBJC_CLASS___BTSystemConfiguration, "isBuddyComplete"))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained checkFirstUnlockForIDS];
  }

void sub_100050590(_Unwind_Exception *a1)
{
}

id sub_1000505B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) initializeIDS];
}

void sub_1000505BC(uint64_t a1)
{
  os_log_t v2 = sub_100060178("CloudPairing");
  unint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v8 = +[BTSystemConfiguration isFirstUnlocked](&OBJC_CLASS___BTSystemConfiguration, "isFirstUnlocked");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "First Unlock Callback: %i", buf, 8u);
  }

  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPairingQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000506E0;
  block[3] = &unk_100207CB8;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  dispatch_async(v4, block);

  objc_destroyWeak(&v6);
}

void sub_1000506E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained initializeIDS];
}

void sub_100050A54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPairingQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100050B14;
  block[3] = &unk_100206490;
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v8;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);
}

void sub_100050B14(uint64_t a1)
{
  os_log_t v2 = (uint64_t *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    os_log_t v3 = sub_100060178("CloudPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018DDE8(v2, v4, v5);
    }

    [*(id *)(a1 + 40) retryIDSSetup];
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"kCheckInVersion"]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"kPublicAddress"]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"kCachedLEDevices"]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"kSupportsVirtualAddress"]);
    objc_msgSend(*(id *)(a1 + 40), "setSupportsVirtualAddress:", objc_msgSend(v9, "BOOLValue"));

    os_log_t v10 = sub_100060178("CloudPairing");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = [*(id *)(a1 + 40) supportsVirtualAddress];
      *(_DWORD *)buf = 67109120;
      LODWORD(v52) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - supportsVirtualAddress %d", buf, 8u);
    }

    if (v7)
    {
      [*(id *)(a1 + 40) setPublicAddress:v7];
      os_log_t v13 = sub_100060178("CloudPairing");
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) publicAddress]);
        *(_DWORD *)buf = 138477827;
        uint64_t v52 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Received Public Address: %{private}@",  buf,  0xCu);
      }

      unsigned int v16 = [v6 isEqual:&off_100219110];
      os_log_t v17 = sub_100060178("CloudPairing");
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      id v19 = v18;
      if (v16)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "BTCP XPC Version match!- Starting IDS Service Setup",  buf,  2u);
        }

        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        [*(id *)(a1 + 40) setCPAddressMapping:v20];

        unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue( +[CBPreferencesManager readUserPreference:]( &OBJC_CLASS___CBPreferencesManager,  "readUserPreference:",  @"AddressMapping"));
        if (v21)
        {
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[CBPreferencesManager readUserPreference:]( &OBJC_CLASS___CBPreferencesManager,  "readUserPreference:",  @"AddressMapping"));
          id v23 = [v22 mutableCopy];
          [*(id *)(a1 + 40) setCPAddressMapping:v23];
        }

        double v24 = -[IDSService initWithService:]( objc_alloc(&OBJC_CLASS___IDSService),  "initWithService:",  @"com.apple.private.alloy.icloudpairing");
        [*(id *)(a1 + 40) setService:v24];

        id v25 = *(void **)(a1 + 40);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 service]);
        double v27 = (void *)objc_claimAutoreleasedReturnValue([v26 accounts]);
        [v25 updateActiveAccount:v27];

        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
        id v29 = *(void **)(a1 + 40);
        unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([v29 cloudPairingQueue]);
        [v28 addDelegate:v29 queue:v30];

        uint64_t v31 = *(void **)(a1 + 40);
        BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v31 service]);
        BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v32 devices]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v31 filteredDevicesForIDSDevices:v33]);
        [*(id *)(a1 + 40) setAssociatedDevices:v34];

        os_log_t v35 = sub_100060178("CloudPairing");
        unsigned int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedDevices]);
          *(_DWORD *)buf = 138412290;
          uint64_t v52 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "MUC - associatedDevice %@", buf, 0xCu);
        }

        [*(id *)(a1 + 40) setIsReady:1];
        int v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([v38 devices]);

        objc_msgSend(*(id *)(a1 + 40), "setTotalCloudDeviceCount:", (char *)-[os_log_s count](v19, "count") + 1);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        id v40 = (os_log_s *)&__NSArray0__struct;
        if (v19) {
          id v40 = v19;
        }
        uint64_t v41 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend( *(id *)(a1 + 40),  "totalCloudDeviceCount",  @"IDSDevices",  @"TotalIDSDevices",  v40)));
        v50[1] = v41;
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v50,  &v49,  2LL));
        [v39 postNotificationName:@"BTTotalIDSDeviceCountChanged" object:0 userInfo:v42];

        uint64_t v43 = objc_opt_class(&OBJC_CLASS___NSDictionary);
        LOBYTE(v41) = objc_opt_isKindOfClass(v8, v43);
        os_log_t v44 = sub_100060178("CloudPairing");
        unsigned __int8 v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        uint64_t v46 = v45;
        if ((v41 & 1) != 0)
        {
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v52 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "MUC - Validate cloud pairings from bluetoothd: %@",  buf,  0xCu);
          }

          [*(id *)(a1 + 40) validateCloudPairing:v8];
        }

        else
        {
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            sub_10018DD0C();
          }
        }
      }

      else if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        sub_10018DD70();
      }
    }

    else
    {
      os_log_t v47 = sub_100060178("CloudPairing");
      id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        sub_10018DCE0();
      }

      [*(id *)(a1 + 40) retryIDSSetup];
    }
  }

id sub_1000511E0(uint64_t a1)
{
  os_log_t v2 = sub_100060178("CloudPairing");
  os_log_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Retrying initializeIDS", v5, 2u);
  }

  return [*(id *)(a1 + 32) initializeIDS];
}

void sub_1000518D8(uint64_t a1, void *a2)
{
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 idsDevice]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  unsigned int v7 = [v4 isEqualToString:v6];

  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
    [v8 setNSUUID:0];

    [*(id *)(a1 + 32) setState:0];
    os_log_t v9 = sub_100060178("CloudPairing");
    os_log_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
      unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nsuuid]);
      os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueID]);
      uint64_t v15 = *(void *)(a1 + 40);
      int v16 = 138412802;
      os_log_t v17 = v12;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Removing concurrent BT-UUID %@ from previously cloud paired device %@ as this device is cloud paired with %@",  (uint8_t *)&v16,  0x20u);
    }

    [*(id *)(a1 + 48) removeObject:*(void *)(a1 + 32)];
  }

void sub_100051C20(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPairingQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100051CE4;
    block[3] = &unk_100206220;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    os_log_t v9 = *(void **)(a1 + 40);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v9;
    dispatch_async(v6, block);
  }
}

void sub_100051CE4(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"kPublicAddress"]);

  if (v2)
  {
    os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"kPublicAddress"]);
    [*(id *)(a1 + 40) setPublicAddress:v3];
  }

  os_log_t v4 = sub_100060178("CloudPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reply for public address: %@", buf, 0xCu);
  }

  if (*(void *)(a1 + 48))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) publicAddress]);

    uint64_t v8 = *(void *)(a1 + 48);
    if (v7)
    {
      (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0LL);
    }

    else
    {
      NSErrorUserInfoKey v11 = NSLocalizedFailureErrorKey;
      uint64_t v12 = @"Public Address Unavailable";
      os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
      os_log_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"BTIDSErrorDomain",  0LL,  v9));
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);
    }
  }

void sub_100051F28(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100051F9C;
  v5[3] = &unk_100206380;
  os_log_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 fetchPublicAddressWithCompletion:v5];
}

void sub_100051F9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("CloudPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10018DE54();
    }
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "bluetoothd existing cloud pairings: %@",  buf,  0xCu);
    }

    uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudPairingQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000520F4;
    block[3] = &unk_100206358;
    int8x16_t v10 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v10.i64[0];
    int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
    dispatch_async(v8, block);
  }
}

void sub_1000520F4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v1 associatedDevices]);
  [v1 updateCloudPairings:v2 newDevices:v3];
}

id sub_100053164(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 nsuuid]);
  if (v8)
  {
    id v9 = *(void **)(a1 + 40);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
    os_log_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 publicAddressForIDSDevice:v4]);
    if (v10)
    {
      id v11 = 0LL;
LABEL_6:

      goto LABEL_7;
    }
  }

  int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 idsDevice]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
  id v11 = [v13 isEqualToString:v15];

  if (v8)
  {
    int8x16_t v10 = 0LL;
    goto LABEL_6;
  }

id sub_10005327C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 idsDevice]);
  os_log_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:*(void *)(a1 + 40)]);
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_1000548D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("CloudPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v76 = (void *)objc_claimAutoreleasedReturnValue([v3 nsuuid]);
    id obja = objc_claimAutoreleasedReturnValue([v76 UUIDString]);
    id v67 = [obja UTF8String];
    id v72 = objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v65 = [v72 UTF8String];
    id v70 = objc_claimAutoreleasedReturnValue([v3 modelIdentifier]);
    id v63 = [v70 UTF8String];
    id v68 = objc_claimAutoreleasedReturnValue([v3 productName]);
    id v61 = [v68 UTF8String];
    id v6 = objc_claimAutoreleasedReturnValue([v3 productVersion]);
    id v60 = [v6 UTF8String];
    id v7 = objc_claimAutoreleasedReturnValue([v3 productBuildVersion]);
    id v8 = [v7 UTF8String];
    id v9 = objc_claimAutoreleasedReturnValue([v3 name]);
    id v10 = [v9 UTF8String];
    id v11 = *(void **)(a1 + 32);
    int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v13 = objc_claimAutoreleasedReturnValue([v11 publicAddressForIDSDevice:v12]);
    id v14 = [v13 UTF8String];
    *(_DWORD *)buf = 136316930;
    id v84 = v67;
    __int16 v85 = 2080;
    id v86 = v65;
    __int16 v87 = 2080;
    id v88 = v63;
    __int16 v89 = 2080;
    id v90 = v61;
    __int16 v91 = 2080;
    id v92 = v60;
    __int16 v93 = 2080;
    id v94 = v8;
    __int16 v95 = 2080;
    id v96 = v10;
    __int16 v97 = 2080;
    id v98 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BT:(%s) IDS:%s model:%s prodName:%s prodVers:%s buildVers:%s Name:%s address:[%s]",  buf,  0x52u);
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 modelIdentifier]);
  if ([v15 localizedStandardContainsString:@"Phone"])
  {
    int v16 = *(unsigned __int8 *)(a1 + 48);

    if (v16)
    {
      os_log_t v17 = sub_100060178("CloudPairing");
      __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      id v19 = objc_claimAutoreleasedReturnValue([v3 cpDescription]);
      id v20 = [v19 UTF8String];
      *(_DWORD *)buf = 136380675;
      id v84 = v20;
      uint64_t v21 = "Ignoring IDS device %{private}s as it is a phone and we are a watch and we cant allow that";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v21, buf, 0xCu);

      goto LABEL_20;
    }
  }

  else
  {
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 modelIdentifier]);
  if ([v22 localizedStandardContainsString:@"Watch"])
  {
    int v23 = *(unsigned __int8 *)(a1 + 49);

    if (v23)
    {
      os_log_t v24 = sub_100060178("CloudPairing");
      __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      id v19 = objc_claimAutoreleasedReturnValue([v3 cpDescription]);
      id v25 = [v19 UTF8String];
      *(_DWORD *)buf = 136380675;
      id v84 = v25;
      uint64_t v21 = "Ignoring IDS device %{private}s as it is a watch and we are a phone and we cant allow that.";
      goto LABEL_19;
    }
  }

  else
  {
  }

  if (([v3 supportsiCloudPairing] & 1) == 0)
  {
    os_log_t v28 = sub_100060178("CloudPairing");
    __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    id v19 = objc_claimAutoreleasedReturnValue([v3 cpDescription]);
    id v29 = [v19 UTF8String];
    *(_DWORD *)buf = 136380675;
    id v84 = v29;
    uint64_t v21 = "Ignoring IDS device %{private}s as it doesn't support iCloud pairing with us";
    goto LABEL_19;
  }

  if ([v3 isDefaultPairedDevice])
  {
    os_log_t v26 = sub_100060178("CloudPairing");
    __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    id v19 = objc_claimAutoreleasedReturnValue([v3 cpDescription]);
    id v27 = [v19 UTF8String];
    *(_DWORD *)buf = 136380675;
    id v84 = v27;
    uint64_t v21 = "Ignoring IDS device %{private}s as it is a 'default paired' device";
    goto LABEL_19;
  }

  unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  id v31 = [v30 length];

  if (!v31)
  {
    os_log_t v58 = sub_100060178("CloudPairing");
    __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    id v19 = objc_claimAutoreleasedReturnValue([v3 cpDescription]);
    id v59 = [v19 UTF8String];
    *(_DWORD *)buf = 136380675;
    id v84 = v59;
    uint64_t v21 = "Ignoring IDS device %{private}s as it has no uniqueID set";
    goto LABEL_19;
  }

  __int128 v64 = v3;
  __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudDevice deviceWithIDSDevice:](&OBJC_CLASS___CloudDevice, "deviceWithIDSDevice:", v3));
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  uint64_t v62 = a1;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedDevices]);
  id v77 = [obj countByEnumeratingWithState:&v78 objects:v82 count:16];
  if (!v77) {
    goto LABEL_40;
  }
  uint64_t v32 = *(void *)v79;
  uint64_t v73 = *(void *)v79;
  uint64_t v66 = v18;
  do
  {
    BOOL v33 = 0LL;
    do
    {
      if (*(void *)v79 != v32) {
        objc_enumerationMutation(obj);
      }
      uint64_t v34 = *(void **)(*((void *)&v78 + 1) + 8LL * (void)v33);
      os_log_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 idsDevice]);
      unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue([v35 uniqueID]);
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s idsDevice](v18, "idsDevice"));
      int v38 = (void *)objc_claimAutoreleasedReturnValue([v37 uniqueID]);
      unsigned int v39 = [v36 isEqualToString:v38];

      if (v39)
      {
        os_log_t v40 = sub_100060178("CloudPairing");
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s idsDevice](v18, "idsDevice"));
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v71 uniqueID]);
          __int128 v69 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s idsDevice](v18, "idsDevice"));
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v69 nsuuid]);
          os_log_t v44 = (void *)objc_claimAutoreleasedReturnValue([v34 idsDevice]);
          unsigned __int8 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 uniqueID]);
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v34 idsDevice]);
          os_log_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 nsuuid]);
          id v48 = (void *)objc_claimAutoreleasedReturnValue([v34 stateString]);
          *(_DWORD *)buf = 138413314;
          id v84 = v42;
          __int16 v85 = 2112;
          id v86 = v43;
          __int16 v87 = 2112;
          id v88 = v45;
          __int16 v89 = 2112;
          id v90 = v47;
          __int16 v91 = 2112;
          id v92 = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Newly created device: %@ (BT: %@) already associated with device: %@ (BT: %@, state: %@)",  buf,  0x34u);

          __int16 v18 = v66;
        }

        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s idsDevice](v18, "idsDevice"));
        uint64_t v50 = objc_claimAutoreleasedReturnValue([v49 nsuuid]);
        if (v50)
        {
          id v51 = (void *)v50;
          uint64_t v32 = v73;
          goto LABEL_32;
        }

        id v51 = (void *)objc_claimAutoreleasedReturnValue([v34 idsDevice]);
        uint64_t v52 = objc_claimAutoreleasedReturnValue([v51 nsuuid]);
        uint64_t v32 = v73;
        if (v52)
        {
          unint64_t v53 = (void *)v52;
          id v54 = [v34 state];

          if (v54)
          {
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v34 idsDevice]);
            id v51 = (void *)objc_claimAutoreleasedReturnValue([v49 nsuuid]);
            int v55 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s idsDevice](v18, "idsDevice"));
            [v55 setNSUUID:v51];

            goto LABEL_32;
          }
        }

        else
        {
LABEL_32:
        }

        -[os_log_s setState:](v18, "setState:", [v34 state]);
        -[os_log_s setIsConnected:](v18, "setIsConnected:", [v34 isConnected]);
      }

      BOOL v33 = (char *)v33 + 1;
    }

    while (v77 != v33);
    id v56 = [obj countByEnumeratingWithState:&v78 objects:v82 count:16];
    id v77 = v56;
  }

  while (v56);
LABEL_40:

  id v3 = v64;
  id v57 = (void *)objc_claimAutoreleasedReturnValue([v64 nsuuid]);

  if (v57) {
    -[os_log_s setState:](v18, "setState:", 6LL);
  }
  [*(id *)(v62 + 40) addObject:v18];
LABEL_20:
}

id sub_100055348(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 idsDevice]);
  os_log_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_1000557D4(uint64_t a1)
{
  if (([*(id *)(a1 + 32) processingIDSPush] & 1) == 0)
  {
    [*(id *)(a1 + 32) setProcessingIDSPush:1];
    dispatch_time_t v2 = dispatch_time(0LL, 20000000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100055934;
    block[3] = &unk_100206058;
    void block[4] = *(void *)(a1 + 32);
    dispatch_after(v2, &_dispatch_main_q, block);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    unsigned __int8 v4 = [v3 manateeZoneUpgraded];

    os_log_t v5 = sub_100060178("CloudPairing");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if ((v4 & 1) != 0)
    {
      if (v7)
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDS: Manatee getAccessoryKey", v10, 2u);
      }

      id v8 = &off_100205368;
    }

    else
    {
      if (v7)
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDS: getAccessoryKey", v10, 2u);
      }

      id v8 = off_100205360;
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](*v8, "sharedInstance"));
    [v9 fetchAccessoryKeyBlob:0];
  }

void sub_100055934(uint64_t a1)
{
  os_log_t v2 = sub_100060178("CloudPairing");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = [*(id *)(a1 + 32) processingIDSPush];
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "IDS: Reseting processingPush %d",  (uint8_t *)v5,  8u);
  }
}

void sub_100056414(_Unwind_Exception *a1)
{
}

id sub_100056434(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) appendString:a2];
}

id sub_100056440(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) appendString:a2];
}

uint64_t sub_10005644C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005645C(uint64_t a1)
{
}

void sub_100056464(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    os_log_t v6 = sub_100060178("CloudPairing");
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "MUC - generated keys for RSA v3 - %@",  (uint8_t *)&v14,  0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localDeviceRandomAddress]);
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v8 forKeyedSubscript:@"RandomAddress"];

    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    id v10 = *(void **)(a1 + 32);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
    [v10 sendCloudPairingResponseMessage:v9 toDevice:v11 version:@"Version 3"];

    int8x16_t v12 = *(void **)(a1 + 32);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
    [v12 storePublicAddressMapping:v13 message:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 56) localKeys:0 from:*(void *)(a1 + 40) forProtocolID:*(void *)(a1 + 64)];
  }
}

void sub_1000565E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    os_log_t v6 = sub_100060178("CloudPairing");
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "MUC - generated keys for public address v3 - %@",  (uint8_t *)&v13,  0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
    [v9 sendCloudPairingResponseMessage:v8 toDevice:v10 version:@"Version 3"];

    id v11 = *(void **)(a1 + 32);
    int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
    [v11 storePublicAddressMapping:v12 message:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 48) localKeys:0 from:*(void *)(a1 + 40) forProtocolID:*(void *)(a1 + 56)];
  }
}

void sub_10005673C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    os_log_t v6 = sub_100060178("CloudPairing");
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "MUC - generated keys for public address for v2 - %@",  (uint8_t *)&v13,  0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
    [v9 sendCloudPairingResponseMessage:v8 toDevice:v10 version:@"Version 2"];

    id v11 = *(void **)(a1 + 32);
    int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
    [v11 storePublicAddressMapping:v12 message:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 56) localKeys:0 from:*(void *)(a1 + 40) forProtocolID:*(void *)(a1 + 64)];
  }
}

void sub_100056A68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("CloudPairing");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reply for generate keys: %@", buf, 0xCu);
  }

  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPairingQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100056BB8;
  block[3] = &unk_100206220;
  id v13 = v5;
  id v14 = v6;
  id v15 = *(id *)(a1 + 40);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

uint64_t sub_100056BB8(void *a1)
{
  if (a1[4] && !a1[5]) {
    return (*(uint64_t (**)(void))(a1[6] + 16LL))();
  }
  os_log_t v2 = sub_100060178("CloudPairing");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10018E444((uint64_t)a1, v3, v4);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_100056E48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("CloudPairing");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    id v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Reply for complete pairing: %{private}@",  buf,  0xCu);
  }

  if (v6)
  {
    os_log_t v9 = sub_100060178("CloudPairing");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018E4B0();
    }
  }

  else
  {
    id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPairingQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100056FBC;
    block[3] = &unk_100206490;
    int8x16_t v12 = (os_log_s *)v5;
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(a1 + 40);
    int v16 = v12;
    uint64_t v17 = v13;
    id v18 = v14;
    dispatch_async(v11, block);

    id v10 = v16;
  }
}

void sub_100056FBC(id *a1)
{
  id v1 = a1;
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:@"kCloudPairingID"]);
  if (v2)
  {
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1[4] objectForKeyedSubscript:@"kCloudPairingID"]);
      id v5 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v4);
      if (v5)
      {
        os_log_t v35 = v4;
        unsigned int v36 = v2;
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        uint64_t v37 = v5;
        id obj = (id)objc_claimAutoreleasedReturnValue([v1[5] _fetchArrayOfCloudDevicesForPeripheral:v5]);
        id v6 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v40;
          do
          {
            for (i = 0LL; i != v7; i = (char *)i + 1)
            {
              if (*(void *)v40 != v8) {
                objc_enumerationMutation(obj);
              }
              id v10 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
              id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 idsDevice]);
              int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
              uint64_t v13 = v1;
              id v14 = (void *)objc_claimAutoreleasedReturnValue([v1[6] idsDevice]);
              id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
              unsigned __int8 v16 = [v12 isEqualToIgnoringCase:v15];

              if ((v16 & 1) == 0)
              {
                os_log_t v17 = sub_100060178("CloudPairing");
                id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  id v19 = (void *)objc_claimAutoreleasedReturnValue([v10 idsDevice]);
                  id v20 = (NSUUID *)objc_claimAutoreleasedReturnValue([v19 uniqueID]);
                  *(_DWORD *)buf = 138412546;
                  os_log_t v44 = v20;
                  __int16 v45 = 2112;
                  uint64_t v46 = v37;
                  _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Removing Association from IDS device %@ paired to same BT-UUID %@",  buf,  0x16u);
                }

                uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v10 idsDevice]);
                [v21 setNSUUID:0];

                [v10 setState:0];
              }

              id v1 = v13;
            }

            id v7 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
          }

          while (v7);
        }

        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v1[6] idsDevice]);
        id v5 = v37;
        [v22 setNSUUID:v37];

        os_log_t v23 = sub_100060178("CloudPairing");
        os_log_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = objc_claimAutoreleasedReturnValue([v1[6] description]);
          os_log_t v26 = (NSUUID *)[v25 UTF8String];
          *(_DWORD *)buf = 138412547;
          os_log_t v44 = v37;
          __int16 v45 = 2081;
          uint64_t v46 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Associated local device %@ with IDS device %{private}s",  buf,  0x16u);
        }

        os_log_t v27 = sub_100060178("CloudPairing");
        os_log_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          id v29 = objc_claimAutoreleasedReturnValue([v1[6] description]);
          unsigned int v30 = (NSUUID *)[v29 UTF8String];
          *(_DWORD *)buf = 136380675;
          os_log_t v44 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Completed cloud pairing to IDS device %{private}s",  buf,  0xCu);
        }

        [v1[6] setState:6];
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v1[5] unpairedIDSCloudIdentifiers]);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v1[6] idsDevice]);
        BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v32 uniqueID]);
        [v31 removeObject:v33];

        uint64_t v4 = v35;
        os_log_t v2 = v36;
      }

      else
      {
        os_log_t v34 = sub_100060178("CloudPairing");
        id v31 = (void *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled((os_log_t)v31, OS_LOG_TYPE_ERROR)) {
          sub_10018E51C((uint64_t)v1);
        }
      }
    }
  }
}

void sub_100057CE0(id *a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    v15[0] = @"PairingResponse";
    v14[0] = @"MessageType";
    v14[1] = @"DeviceName";
    id v4 = a1[4];
    id v5 = a2;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localDeviceName]);
    v15[1] = v6;
    _OWORD v14[2] = @"PublicAddress";
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] publicAddress]);
    _OWORD v15[2] = v7;
    v14[3] = @"EncryptionType";
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:"));
    v15[3] = v8;
    v14[4] = @"RequestedKeyType";
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] requestedKeyTypes]);
    v15[4] = v9;
    v14[5] = @"RequestedKeyLength";
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:"));
    v14[6] = @"RequestedKeys";
    v15[5] = v10;
    v15[6] = v5;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  7LL));

    id v12 = a1[4];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] idsDevice]);
    [v12 sendCloudPairingResponseMessage:v11 toDevice:v13 version:@"Version 1"];
  }

void sub_10005816C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    v18[0] = @"KeyDistribution";
    v17[0] = @"MessageType";
    v17[1] = @"DeviceName";
    id v4 = *(void **)(a1 + 32);
    id v5 = a2;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localDeviceName]);
    v18[1] = v6;
    v17[2] = @"PublicAddress";
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) publicAddress]);
    v18[2] = v7;
    v17[3] = @"EncryptionType";
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:"));
    v18[3] = v8;
    v17[4] = @"RequestedKeyType";
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestedKeyTypes]);
    void v18[4] = v9;
    v17[5] = @"RequestedKeyLength";
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:"));
    uint64_t v11 = *(void *)(a1 + 48);
    void v18[5] = v10;
    v18[6] = v11;
    v17[6] = @"LocalKeys";
    v17[7] = @"RequestedKeys";
    v18[7] = v5;
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  8LL));

    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) idsDevice]);
    [v13 sendCloudPairingResponseMessage:v12 toDevice:v14 version:@"Version 1"];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 40) localKeys:v5 from:*(void *)(a1 + 56) forProtocolID:@"Version 1"];
    id v15 = *(void **)(a1 + 32);
    unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) idsDevice]);
    [v15 storePublicAddressMapping:v16 message:*(void *)(a1 + 40)];
  }

void sub_100058ADC(uint64_t a1)
{
  os_log_t v2 = sub_100060178("CloudPairing");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = (unint64_t)*(double *)(a1 + 48);
    id v5 = *(void **)(a1 + 56);
    if (*(void *)(a1 + 64) == 1LL) {
      id v6 = "pairing";
    }
    else {
      id v6 = "security";
    }
    id v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    *(_DWORD *)buf = 134218755;
    unint64_t v29 = v4;
    __int16 v30 = 2048;
    id v31 = v5;
    __int16 v32 = 2080;
    BOOL v33 = v6;
    __int16 v34 = 2081;
    id v35 = [v7 UTF8String];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MUC - Now attempting delayed (%lu) seconds to send (%lu) attempt '%s request' message to IDS device %{private}s",  buf,  0x2Au);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedDevices]);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_100058E4C;
  v26[3] = &unk_100207F38;
  id v27 = *(id *)(a1 + 32);
  os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 cuFilteredArrayUsingBlock:v26]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);

  if (!v10)
  {
    os_log_t v19 = sub_100060178("CloudPairing");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(a1 + 64) == 1LL) {
        id v20 = "pairing";
      }
      else {
        id v20 = "security";
      }
      id v21 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
      id v22 = [v21 UTF8String];
      *(_DWORD *)buf = 136315395;
      unint64_t v29 = (unint64_t)v20;
      __int16 v30 = 2081;
      id v31 = v22;
      os_log_t v23 = "MUC - Dropping sending '%s request' message to unpaired IDS device %{private}s";
      goto LABEL_25;
    }

id sub_100058E4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 idsDevice]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDevice]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = v8;

  return v9;
}

void sub_1000595F4(_Unwind_Exception *a1)
{
}

void sub_100059620(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v8 = WeakRetained;
  if (!v6 && WeakRetained)
  {
    os_log_t v9 = sub_100060178("CloudPairing");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v31 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MUC - generated keys for public address: %@",  buf,  0xCu);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 32)));
    [v11 setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    [*(id *)(a1 + 40) setObject:v11 forKey:@"Version 2"];
    if (!*(_DWORD *)(a1 + 88)
      && (id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localDeviceRandomAddress]),
          BOOL v13 = v12 == 0LL,
          v12,
          v13))
    {
      os_log_t v21 = sub_100060178("CloudPairing");
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v31 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "MUC - generated keys with V2 RSA: %@",  buf,  0xCu);
      }

      [*(id *)(a1 + 40) setObject:v11 forKey:@"Version 3"];
      [*(id *)(a1 + 40) setObject:@"CloudPairing" forKey:@"MessageType"];
      [v8 sendInitialPairingIDSMessage:*(void *)(a1 + 40) forDevice:*(void *)(a1 + 56) withRole:*(void *)(a1 + 80)];
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localDeviceRandomAddress]);

      if (v14)
      {
        BOOL v15 = *(void **)(a1 + 48);
        uint64_t v24 = *(void *)(a1 + 64);
        id v16 = [v15 keyLength];
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localDeviceRandomAddress]);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        v25[2] = sub_100059944;
        v25[3] = &unk_100207F88;
        objc_copyWeak(v29, (id *)(a1 + 72));
        id v26 = *(id *)(a1 + 32);
        int8x16_t v23 = *(int8x16_t *)(a1 + 40);
        id v18 = (id)v23.i64[0];
        int8x16_t v27 = vextq_s8(v23, v23, 8uLL);
        id v19 = *(id *)(a1 + 56);
        id v20 = *(void **)(a1 + 80);
        id v28 = v19;
        v29[1] = v20;
        [v15 generateKeyDictForTypes:v24 keyLength:v16 forAddress:v17 withCompletion:v25];

        objc_destroyWeak(v29);
      }
    }
  }
}

void sub_100059928(_Unwind_Exception *a1)
{
}

void sub_100059944(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v7 = WeakRetained;
  if (!a3 && WeakRetained)
  {
    os_log_t v8 = sub_100060178("CloudPairing");
    os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "MUC - generated keys for updated RSA: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 32)));
    [v10 setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localDeviceRandomAddress]);
    [v10 setObject:v11 forKeyedSubscript:@"RandomAddress"];

    [*(id *)(a1 + 48) setObject:v10 forKey:@"Version 3"];
    [*(id *)(a1 + 48) setObject:@"CloudPairing" forKey:@"MessageType"];
    [v7 sendInitialPairingIDSMessage:*(void *)(a1 + 48) forDevice:*(void *)(a1 + 56) withRole:*(void *)(a1 + 72)];
  }
}

id sub_100059F3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendRePairRequest:*(void *)(a1 + 40) forBundleID:*(void *)(a1 + 48)];
}

id sub_10005A504(uint64_t a1, void *a2)
{
  return [a2 containsString:*(void *)(a1 + 32)];
}

void sub_10005A510(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageIdentifiersWaitingForAck]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10005A6A4;
  v9[3] = &unk_100207FD8;
  v9[4] = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 keysOfEntriesPassingTest:v9]);

  if ([v3 count])
  {
    unint64_t v4 = *(void **)(a1 + 32);
    v10[0] = @"MessageType";
    v10[1] = @"DeviceName";
    v11[0] = @"RepairRequest";
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 localDeviceName]);
    v11[1] = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  2LL));
    [v4 sendRePairCloudPairingMessage:v6 toDevice:*(void *)(a1 + 56) bundleID:*(void *)(a1 + 64)];
  }

  else
  {
    os_log_t v7 = sub_100060178("CloudPairing");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Stopping here as message was delivered to device %@",  buf,  0xCu);
    }
  }
}

id sub_10005A6A4(uint64_t a1, void *a2)
{
  return [a2 containsString:*(void *)(a1 + 32)];
}

void sub_10005B604(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("CloudPairing");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  os_log_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10018ED74(a1, (uint64_t)v6, v9);
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Unpaired Cloud Device", buf, 2u);
    }

    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPairingQueue]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10005B72C;
    v11[3] = &unk_100206358;
    int v12 = (os_log_s *)v5;
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v10, v11);

    os_log_t v9 = v12;
  }
}

void sub_10005B72C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"kSuccess"]);
  if (v2)
  {
    id v3 = (void *)v2;
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"kSuccess"]);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char isKindOfClass = objc_opt_isKindOfClass(v4, v5);

    if ((isKindOfClass & 1) != 0)
    {
      os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"kSuccess"]);
      unsigned int v8 = [v7 BOOLValue];

      if (v8)
      {
        os_log_t v9 = sub_100060178("CloudPairing");
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10018EDF0(a1);
        }
      }

      else
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDevice]);
        [v11 setNSUUID:0];

        [*(id *)(a1 + 40) setState:0];
      }
    }
  }

LABEL_19:
  return v25;
}

      return;
    }
  }

  id v13 = sub_100060178("MagicPairing");
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (a3 < 5)
  {
    if (v15)
    {
      *(_DWORD *)buf = 134217984;
      id v28 = (const char *)a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MP fetchAccessoryKeyBlob: %lu", buf, 0xCu);
    }

    if (-[MPCloudKit isFetchInProgress](self, "isFetchInProgress"))
    {
      id v16 = sub_100060178("MagicPairing");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = -[MPCloudKit isFetchInProgress](self, "isFetchInProgress");
        *(_DWORD *)buf = 67109120;
        LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "MP fetchAccessoryKeyBlob already in-progress: %i",  buf,  8u);
      }

      goto LABEL_19;
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit recordZoneAccessoryDatabase](self, "recordZoneAccessoryDatabase"));

    if (!v18)
    {
      id v25 = sub_100060178("MagicPairing");
      os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "non-Manatee recordZoneAccessoryDatabase is nil",  buf,  2u);
      }

      goto LABEL_5;
    }

    -[MPCloudKit setIsFetchInProgress:](self, "setIsFetchInProgress:", 1LL);
    id v19 = objc_alloc(&OBJC_CLASS___CKRecordID);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit recordZoneAccessoryDatabase](self, "recordZoneAccessoryDatabase"));
    os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneID]);
    id v22 = -[CKRecordID initWithRecordName:zoneID:]( v19,  "initWithRecordName:zoneID:",  @"EncryptedAccessoryBlob",  v21);

    int8x16_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    [v23 beginTransaction:@"fetchAccessoryKeyBlob"];

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[MPCloudKit cloudKitDatabase](self, "cloudKitDatabase"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_100062D44;
    v26[3] = &unk_1002082F8;
    void v26[4] = self;
    v26[5] = a3;
    [v24 fetchRecordWithID:v22 completionHandler:v26];
  }

  else
  {
    if (v15)
    {
      *(_DWORD *)buf = 136315138;
      id v28 = "-[MPCloudKit fetchAccessoryKeyBlob:]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MP Exhausted all retries...: %s", buf, 0xCu);
    }

    -[MPCloudKit setIsFetchInProgress:](self, "setIsFetchInProgress:", 0LL);
  }
}
}

    unint64_t v4 = (v9 - 1) & v9;
    __int16 v30 = v10;
  }

  while (1)
  {
    id v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_28;
    }
    os_log_t v9 = *(void *)(v26 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v29 = v10;
  }

  while (1)
  {
    id v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_28;
    }
    os_log_t v9 = *(void *)(v25 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    uint64_t v5 = (v10 - 1) & v10;
  }

  while (1)
  {
    id v6 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v6 >= v17) {
      goto LABEL_23;
    }
    id v10 = *(void *)(v2 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }

    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v29 = v10;
  }

  while (1)
  {
    id v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_28;
    }
    os_log_t v9 = *(void *)(v25 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    unint64_t v4 = (v9 - 1) & v9;
    id v28 = v10;
  }

  while (1)
  {
    id v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_28;
    }
    os_log_t v9 = *(void *)(v24 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

      if ((char *)++v35 == v55)
      {
        swift_bridgeObjectRelease(v47);
        return sub_100099358(v48, &qword_100237048);
      }
    }
  }

  return sub_100099358(v48, &qword_100237048);
}

  unint64_t v53 = a1;
  id v54 = sub_10013A76C();
  if (v27[42].opt_inst_meths != (__objc2_meth_list *)-1LL) {
    swift_once(&qword_100234BF8, sub_100113FD8);
  }
  int v55 = sub_100098D58(v12, (uint64_t)qword_10023DF40);
  id v56 = v13;
  id v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  os_log_t v58 = v96;
  id v98 = v57;
  id v59 = v57(v96, v55, v12);
  __chkstk_darwin(v59);
  *(&v85 - 4) = v54;
  *(&v85 - 3) = a1;
  *(&v85 - 2) = a2;
  *(&v85 - 1) = (uint64_t)v58;
  OS_dispatch_queue.sync<A>(execute:)(v100, sub_10018A6A0, &v85 - 6, &type metadata for Bool);
  swift_release(v54);
  id v94 = v56;
  id v60 = *(void (**)(char *, uint64_t))(v56 + 8);
  v60(v58, v12);
  id v61 = sub_10013A76C();
  if (qword_100234B40 != -1) {
    swift_once(&qword_100234B40, sub_10009F940);
  }
  uint64_t v62 = sub_100098D58(v12, (uint64_t)qword_10023DCE0);
  id v63 = v98(v58, v62, v12);
  __chkstk_darwin(v63);
  *(&v85 - 4) = v61;
  *(&v85 - 3) = a1;
  *(&v85 - 2) = a2;
  *(&v85 - 1) = (uint64_t)v58;
  OS_dispatch_queue.sync<A>(execute:)(v100, sub_10018A6A0, &v85 - 6, &type metadata for Bool);
  swift_release(v61);
  v60(v58, v12);
  __int128 v64 = sub_10013A76C();
  signed int v99 = a2;
  if (qword_100234BC0 != -1) {
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }
  id v65 = sub_100098D58(v12, (uint64_t)qword_10023DE08);
  uint64_t v66 = v98(v58, v65, v12);
  __chkstk_darwin(v66);
  *(&v85 - 4) = v64;
  *(&v85 - 3) = a1;
  *(&v85 - 2) = v99;
  *(&v85 - 1) = (uint64_t)v58;
  OS_dispatch_queue.sync<A>(execute:)(v100, sub_10018A6A0, &v85 - 6, &type metadata for Bool);
  swift_release(v64);
  v60(v58, v12);
  id v67 = sub_10013A76C();
  id v68 = v95;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  __int128 v69 = v94;
  id v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  id result = v98(v68, 1LL, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_30;
  }

  __int128 v71 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
  id v72 = v91;
  v71(v91, v68, v12);
  uint64_t v73 = v92;
  URL.appendingPathComponent(_:)(0x6563697665444141LL);
  BOOL v74 = ((uint64_t (*)(char *, uint64_t))v60)(v72, v12);
  __chkstk_darwin(v74);
  *(&v85 - 4) = v67;
  *(&v85 - 3) = v53;
  *(&v85 - 2) = v99;
  *(&v85 - 1) = (uint64_t)v73;
  OS_dispatch_queue.sync<A>(execute:)(v100, sub_10018A6A0, &v85 - 6, &type metadata for Bool);
  swift_release(v67);
  v60(v73, v12);
  unsigned int v75 = sub_10013A76C();
  unsigned int v76 = v93;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  id result = v98(v76, 1LL, v12);
  if ((_DWORD)result == 1)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  id v77 = v88;
  v71(v88, v76, v12);
  __int128 v78 = v89;
  URL.appendingPathComponent(_:)(0xD000000000000011LL);
  __int128 v79 = ((uint64_t (*)(char *, uint64_t))v60)(v77, v12);
  __chkstk_darwin(v79);
  *(&v85 - 4) = v75;
  *(&v85 - 3) = v53;
  *(&v85 - 2) = v99;
  *(&v85 - 1) = (uint64_t)v78;
  OS_dispatch_queue.sync<A>(execute:)(v100, sub_10018A6A0, &v85 - 6, &type metadata for Bool);
  swift_release(v75);
  v60(v78, v12);
  __int128 v80 = sub_10013A76C();
  __int128 v81 = v90;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  id result = v98(v81, 1LL, v12);
  if ((_DWORD)result != 1)
  {
    uint64_t v82 = v86;
    v71(v86, v81, v12);
    unsigned int v83 = v87;
    URL.appendingPathComponent(_:)(0xD000000000000013LL);
    id v84 = ((uint64_t (*)(char *, uint64_t))v60)(v82, v12);
    __chkstk_darwin(v84);
    *(&v85 - 4) = v80;
    *(&v85 - 3) = v53;
    *(&v85 - 2) = v99;
    *(&v85 - 1) = (uint64_t)v83;
    OS_dispatch_queue.sync<A>(execute:)(v100, sub_10018A6A0, &v85 - 6, &type metadata for Bool);
    swift_release(v80);
    return ((uint64_t (*)(char *, uint64_t))v60)(v83, v12);
  }

void sub_10005C168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005C180(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _statedumpAndRecordDailyMetric]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10005CC78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

int64_t sub_10005CCC8(id a1, CloudDevice *a2, CloudDevice *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v4, "idsDevice"));
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v5, "idsDevice"));
  os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 name]);
  if ([v7 compare:v9] == (id)1)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v4, "idsDevice"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 nsuuid]);
    if (v11)
    {
      int v12 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v5, "idsDevice"));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 nsuuid]);
      int64_t v14 = v13 != 0LL;
    }

    else
    {
      int64_t v14 = 0LL;
    }
  }

  else
  {
    int64_t v14 = 0LL;
  }

  return v14;
}

id sub_10005CDDC(id a1, CloudDevice *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v2, "idsDevice"));
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 nsuuid]);
  if (v4) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = v5;

  return v6;
}

void sub_10005CE3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v25 = 0LL;
  id v26 = &v25;
  uint64_t v27 = 0x2020000000LL;
  int v28 = 0;
  uint64_t v19 = 0LL;
  id v20 = &v19;
  uint64_t v21 = 0x3032000000LL;
  id v22 = sub_10005644C;
  int8x16_t v23 = sub_10005645C;
  id v24 = 0LL;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _OWORD v14[2] = sub_10005D00C;
  v14[3] = &unk_1002080A8;
  id v17 = &v25;
  id v18 = &v19;
  id v15 = *(id *)(a1 + 32);
  id v7 = v5;
  id v16 = v7;
  [v6 enumerateKeysAndObjectsUsingBlock:v14];
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v8 + 40);
  NSAppendPrintF_safe(&obj, "] %@: %u\n", v7, *((unsigned int *)v26 + 6));
  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v12 = *(id *)(v9 + 40);
  NSAppendPrintF_safe(&v12, "%@", v20[5]);
  objc_storeStrong((id *)(v9 + 40), v12);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v11 = *(id *)(v10 + 40);
  NSAppendPrintF_safe(&v11, "\n");
  objc_storeStrong((id *)(v10 + 40), v11);

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);
}

void sub_10005CFE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10005D00C(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v6 = a3;
  id v7 = a2;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 2RandomBytes(&unk_1002371D8, 4) = [v6 intValue] + v5;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id obj = *(id *)(v8 + 40);
  NSAppendPrintF_safe(&obj, "> %@ - %@", v7, v6);

  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v12 = *(id *)(v9 + 40);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v7]);

  NSAppendPrintF_safe(&v12, "\n%@\n", v11);
  objc_storeStrong((id *)(v9 + 40), v12);
}

void sub_10005D100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  NSAppendPrintF_safe(&obj, "%@ = %@\n", a2, a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10005D150(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDevice]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDevice]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
  NSAppendPrintF_safe(&obj, "%@ = [%@] %@\n", v6, v8, v10);

  objc_storeStrong((id *)(v4 + 40), obj);
}

void sub_10005E9BC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchCloudPairingIdentifierForPeripheral:*(void *)(a1 + 40)]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10005EAA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 devices]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_10005ED38( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10005ED4C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10005ED60(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_10005ED94(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10005EDA0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_10005EDC4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_10005EDD4(void *a1, const char *a2)
{
  return [a1 UTF8String];
}

  ;
}

  ;
}

id sub_10005EDF0(void *a1, const char *a2)
{
  return [a1 UTF8String];
}

  ;
}

  ;
}

uint64_t sub_10005EE0C(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

id sub_10005EE2C(void *a1, const char *a2)
{
  return [a1 UTF8String];
}

uint64_t sub_10005EE34()
{
  return v0;
}

  ;
}

  ;
}

void sub_10005F718( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10005F734(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 56));
  id v4 = objc_loadWeakRetained(&to);
  BOOL v5 = v4 == 0LL;

  if (v5)
  {
    os_log_t v9 = sub_100060178("BTXPCTimer");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018EEEC(a1, v7, v10, v11, v12, v13, v14, v15);
    }
  }

  else if (*(void *)(a1 + 40))
  {
    if (xpc_activity_get_state(v3))
    {
      if (xpc_activity_should_defer(v3))
      {
        if (xpc_activity_set_state(v3, 3LL))
        {
          os_log_t v6 = sub_100060178("BTXPCTimer");
          id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v8 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            uint64_t v59 = v8;
          }
        }

        else
        {
          os_log_t v41 = sub_100060178("BTXPCTimer");
          id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_10018EFBC(a1, v7, v42, v43, v44, v45, v46, v47);
          }
        }

        goto LABEL_33;
      }

      xpc_activity_state_t state = xpc_activity_get_state(v3);
      id v7 = (os_log_s *)xpc_activity_copy_criteria(v3);
      if (state == 2)
      {
        BOOL v30 = xpc_activity_set_state(v3, 5LL);
        uint64_t v31 = *(void *)(a1 + 32);
        __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v32 UUIDString]);
        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v31,  v33));

        id v26 = v34;
        id v35 = (void *)os_transaction_create([v26 UTF8String]);
        os_log_t v36 = sub_100060178("BTXPCTimer");
        uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          uint64_t v59 = v38;
          __int16 v60 = 1024;
          LODWORD(v61) = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "BTXPCTimer triggered. Updating to done so that it can be cleaned. success : %@ : %d",  buf,  0x12u);
        }

        uint64_t v39 = *(void *)(a1 + 48);
        id v40 = objc_loadWeakRetained(&to);
        (*(void (**)(uint64_t, id))(v39 + 16))(v39, v40);
      }

      else
      {
        os_log_t v48 = sub_100060178("BTXPCTimer");
        id v26 = (id)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v49 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412802;
          uint64_t v59 = v49;
          __int16 v60 = 2048;
          xpc_activity_state_t v61 = state;
          __int16 v62 = 2048;
          id v63 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v26,  OS_LOG_TYPE_DEFAULT,  "BTXPCTimer %@ changed to state %ld with criteria %p",  buf,  0x20u);
        }
      }

void sub_10005FC14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_10005FED0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t start()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  if ((_set_user_dir_suffix("com.apple.cloudpaird") & 1) == 0)
  {
    uint64_t v1 = os_log_create("com.apple.bluetooth", "cloudpaird");
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_10018F098();
    }
  }

  if (!confstr(65537, v12, 0x400uLL))
  {
    id v2 = os_log_create("com.apple.bluetooth", "cloudpaird");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10018F024();
    }
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[BTIdentityDaemon sharedBTIdentityDaemon](&OBJC_CLASS___BTIdentityDaemon, "sharedBTIdentityDaemon"));
  [v3 activate];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[BTServicesDaemon sharedBTServicesDaemon](&OBJC_CLASS___BTServicesDaemon, "sharedBTServicesDaemon"));
  [v4 activate];

  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon]( &OBJC_CLASS___BTSmartRoutingDaemon,  "sharedBTSmartRoutingDaemon"));
  [v5 activate];

  os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v6 activate];

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[BTUserCloudServicesDaemon sharedBTServicesDaemon]( &OBJC_CLASS___BTUserCloudServicesDaemon,  "sharedBTServicesDaemon"));
  [v7 activate];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AAServicesDaemon sharedAAServicesDaemon](&OBJC_CLASS___AAServicesDaemon, "sharedAAServicesDaemon"));
  [v8 activate];

  os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[HMServiceDaemon sharedHMServiceDaemon](&OBJC_CLASS___HMServiceDaemon, "sharedHMServiceDaemon"));
  [v9 activate];

  objc_autoreleasePoolPop(v0);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  [v10 run];

  return 0LL;
}

void sub_1000600C0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1000600E0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006014C;
  block[3] = &unk_100208168;
  void block[4] = a1;
  if (qword_100237230 != -1) {
    dispatch_once(&qword_100237230, block);
  }
}

void sub_10006014C(uint64_t a1)
{
  os_log_t v1 = os_log_create("com.apple.bluetoothcloud", *(const char **)(a1 + 32));
  id v2 = (void *)qword_10023DCB8;
  qword_10023DCB8 = (uint64_t)v1;
}

os_log_t sub_100060178(const char *a1)
{
  if (qword_100237240 != -1) {
    dispatch_once(&qword_100237240, &stru_100208188);
  }
  pthread_mutex_lock(&stru_100234548);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
  os_log_t v3 = (os_log_t)objc_claimAutoreleasedReturnValue([(id)qword_100237238 objectForKey:v2]);
  if (!v3)
  {
    os_log_t v3 = os_log_create("com.apple.bluetoothcloud", a1);
    [(id)qword_100237238 setObject:v3 forKey:v2];
  }

  pthread_mutex_unlock(&stru_100234548);

  return v3;
}

void sub_10006023C(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v2 = (void *)qword_100237238;
  qword_100237238 = v1;
}

void sub_1000602A8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MPCloudKit);
  id v2 = (void *)qword_100237248;
  qword_100237248 = (uint64_t)v1;
}

void sub_10006057C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100060598(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained buddySetupDone];
}

uint64_t sub_100060750(uint64_t a1)
{
  int out_token = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000607C0;
  v2[3] = &unk_100208220;
  int v3 = 0;
  v2[4] = *(void *)(a1 + 32);
  return notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, &_dispatch_main_q, v2);
}

id sub_1000607C0(uint64_t a1)
{
  os_log_t v2 = sub_100060178("MagicPairing");
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "device unlocked after boot ", v5, 2u);
  }

  notify_cancel(*(_DWORD *)(a1 + 40));
  return [*(id *)(a1 + 32) initializeCloudKit];
}

void sub_1000608D8(id a1, int64_t a2, NSError *a3)
{
  id v4 = a3;
  os_log_t v5 = sub_100060178("MagicPairing");
  os_log_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    int64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "non-Manatee forceAccountStatus accountStatusWithCompletionHandler accountStatus %ld error %@",  (uint8_t *)&v11,  0x16u);
  }

  if (!v4)
  {
    if (a2 == 1)
    {
      os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      uint64_t v8 = v9;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (a2 == 4)
      {
        os_log_t v7 = sub_100060178("MagicPairing");
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "non-Manatee forceAccountStatus Account Available but Not Ready, Try again in sometime...",  (uint8_t *)&v11,  2u);
        }

        goto LABEL_11;
      }

      os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      uint64_t v8 = v9;
      uint64_t v10 = 0LL;
    }

    -[os_log_s accountStatusAvailable:force:](v9, "accountStatusAvailable:force:", v10, 1LL);
LABEL_11:
  }
}

void sub_1000610F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100061118(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  os_log_t v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_t v8 = sub_100060178("MagicPairing");
  os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      uint64_t v30 = a2;
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "non-Manatee accountStatusWithCompletionHandler accountStatus %ld error %@",  buf,  0x16u);
    }

    if (!v5)
    {
      if (a2 == 1)
      {
        if (([WeakRetained isAccountActive] & 1) == 0)
        {
          [WeakRetained setupSubscriptions];
          int v11 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained readUserPreference:@"kMagicPairingLegacyMasterKeyRemoved"]);

          if (!v11) {
            [WeakRetained deleteLegacyMasterKey];
          }
        }

        [WeakRetained setIsAccountActive:1];
        dispatch_time_t v12 = dispatch_time(0LL, 5000000000LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000615A0;
        block[3] = &unk_100206058;
        void block[4] = WeakRetained;
        dispatch_after(v12, &_dispatch_main_q, block);
        os_log_t v13 = sub_100060178("MagicPairing");
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v15 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v30 = 1LL;
          __int16 v31 = 1024;
          LODWORD(v32) = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "non-Manatee accountStatusDidChange Accounts available accountStatus %ld self.isAccountActive %d \n",  buf,  0x12u);
        }
      }

      else if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        [WeakRetained setIsAccountActive:0];
        [WeakRetained setMasterBlob:0];
        [WeakRetained setShouldPauseFetch:0];
        [WeakRetained setPauseErrorReason:0];
        [WeakRetained setIsFetchInProgress:0];
        [WeakRetained setIsFetchMasterKeyInProgress:0];
        id v16 = objc_loadWeakRetained(v6);
        unsigned __int8 v17 = [v16 reinitAfterBuddy];

        os_log_t v18 = sub_100060178("MagicPairing");
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        if ((v17 & 1) != 0)
        {
          if (v20)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "non-Manatee Not sending accounts status, since we are still in buddy. ",  buf,  2u);
          }
        }

        else
        {
          if (v20)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "non-Manatee Sending accounts status, as signed out. ",  buf,  2u);
          }

          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
          objc_msgSend(v21, "accountStatusAvailable:force:", objc_msgSend(WeakRetained, "isAccountActive"), 0);

          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
          if (v22)
          {
            [WeakRetained removeuserPreference:@"MagicCloudPairingManateeUpgradedAccount" sync:1];
            os_log_t v23 = sub_100060178("MagicPairing");
            id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "non-Manatee delete kMagicCloudPairingManateeUpgraded key",  buf,  2u);
            }
          }

          [WeakRetained removeuserPreference:@"MagicCloudPairingMasterSubscriptionID" sync:1];
          [WeakRetained removeuserPreference:@"MagicCloudPairingAccessorySubscriptionID" sync:1];
          [WeakRetained removeuserPreference:@"MagicPairingMasterKeySubscriptionDisabled" sync:1];
          [WeakRetained removeuserPreference:@"kMagicPairingLegacyMasterKeyRemoved" sync:1];
        }

        os_log_t v25 = sub_100060178("MagicPairing");
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v27 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v30 = a2;
          __int16 v31 = 1024;
          LODWORD(v32) = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "non-Manatee accountStatusDidChange Account unavailable accountStatus %ld self.isAccountActive %d \n",  buf,  0x12u);
        }
      }
    }
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10018F10C();
    }
  }
}

void sub_1000615A0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  objc_msgSend(v2, "accountStatusAvailable:force:", objc_msgSend(*(id *)(a1 + 32), "isAccountActive"), 0);
}

uint64_t sub_100061750(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100061918(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:0];
}

void sub_100061D60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 recordID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
    *(_DWORD *)buf = 138412802;
    unint64_t v56 = (unint64_t)v6;
    __int16 v57 = 2112;
    os_log_t v58 = v10;
    __int16 v59 = 2112;
    id v60 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "fetchKeyBlob completion error %@ recordZoneID %@, record: %@",  buf,  0x20u);
  }

  if (v6)
  {
    if ([v6 code] != (id)26 && objc_msgSend(v6, "code") != (id)11)
    {
      if ([v6 code] == (id)6 || objc_msgSend(v6, "code") == (id)7)
      {
        os_log_t v30 = sub_100060178("MagicPairing");
        __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_10018F138();
        }

        id v32 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
        BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:CKErrorRetryAfterKey]);

        if (v33)
        {
          __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
          id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:CKErrorRetryAfterKey]);
          [v35 doubleValue];
          double v37 = v36;

          os_log_t v38 = sub_100060178("MagicPairing");
          uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            unint64_t v56 = (unint64_t)v37;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "MP fetchKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu",  buf,  0xCu);
          }

          dispatch_time_t v40 = dispatch_time(0LL, (uint64_t)(v37 * 1000000000.0));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100062410;
          block[3] = &unk_100206E98;
          uint64_t v41 = *(void *)(a1 + 40);
          void block[4] = *(void *)(a1 + 32);
          void block[5] = v41;
          dispatch_after(v40, &_dispatch_main_q, block);
        }
      }

      goto LABEL_25;
    }

    os_log_t v11 = sub_100060178("MagicPairing");
    dispatch_time_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob CKErrorZoneNotFound", buf, 2u);
    }

    os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
    [v13 fetchKeyBlob:*(void *)(a1 + 40)];
    goto LABEL_9;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 recordID]);
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
  unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneBlob]);
  os_log_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 zoneID]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 zoneName]);
  unsigned int v20 = [v16 isEqualToString:v19];

  if (!v20) {
    goto LABEL_25;
  }
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
  os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:@"EncryptedMasterKeyBlob"]);

  os_log_t v22 = sub_100060178("MagicPairing");
  os_log_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v56 = (unint64_t)v13;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "MP fetchKeyBlob record %@", buf, 0xCu);
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v5 valuesByKey]);
  os_log_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"KeyBlob"]);

  if (v25)
  {
    os_log_t v26 = sub_100060178("MagicPairing");
    unsigned int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = (void *)objc_claimAutoreleasedReturnValue([v5 valuesByKey]);
      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKey:@"KeyBlob"]);
      *(_DWORD *)buf = 138412290;
      unint64_t v56 = (unint64_t)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Found Legacy Key, Remove this: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) deleteLegacyMasterKey];
  }

  else
  {
    if ([v13 length] != (id)2)
    {
      if ((unint64_t)[v13 length] > 0x20)
      {
        v50[0] = _NSConcreteStackBlock;
        v50[1] = 3221225472LL;
        void v50[2] = sub_1000624C4;
        v50[3] = &unk_100206490;
        id v48 = v13;
        uint64_t v49 = *(void *)(a1 + 32);
        id v51 = v48;
        uint64_t v52 = v49;
        id v53 = v5;
        dispatch_async(&_dispatch_main_q, v50);
      }

      else
      {
        os_log_t v46 = sub_100060178("MagicPairing");
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob NO record", buf, 2u);
        }

        dispatch_async(&_dispatch_main_q, &stru_1002082D0);
      }

LABEL_9:
LABEL_25:
      [*(id *)(a1 + 32) setIsFetchMasterKeyInProgress:0];
      os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      [v13 endTransaction:@"fetchKeyBlob"];
      goto LABEL_26;
    }

    os_log_t v42 = sub_100060178("MagicPairing");
    uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Master zone has been upgraded. Dont generate keys",  buf,  2u);
    }

    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
    if (!v44) {
      [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
    }
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
    [v45 fetchKeyBlob:0];
  }

        if (v8 == a2)
        {
          swift_release(a2);
        }

        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          id v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          os_log_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }

        ++v5;
        if (v9 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_16:
      if (a1 < 0) {
        os_log_t v11 = a1;
      }
      else {
        os_log_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      id v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    os_log_t v8 = *(void *)(a1 + 8 * v5 + 32);
    swift_retain(v8);
    os_log_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

  CKRecordKeyValueSetting.subscript.getter( &v141,  0x49746375646F7270LL,  0xE900000000000044LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v21 = v142;
  os_log_t v22 = (uint64_t *)(v139 + v140[13]);
  id v24 = *v22;
  os_log_t v23 = v22[1];
  if (!v142) {
    goto LABEL_14;
  }
  if (v141 != v24 || v142 != v23)
  {
    os_log_t v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v22, v22[1], 0LL);
    swift_bridgeObjectRelease(v21);
    if ((v25 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_14:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v24;
    v142 = v23;
    swift_bridgeObjectRetain(v23);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x49746375646F7270LL, 0xE900000000000044LL, ObjectType);
    goto LABEL_15;
  }

  swift_bridgeObjectRelease(v142);
LABEL_15:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x4449726F646E6576LL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  os_log_t v26 = v142;
  unsigned int v27 = (uint64_t *)(v139 + v140[14]);
  unint64_t v29 = *v27;
  int v28 = v27[1];
  if (!v142) {
    goto LABEL_20;
  }
  if (v141 == v29 && v142 == v28)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_21;
  }

  os_log_t v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v27, v27[1], 0LL);
  swift_bridgeObjectRelease(v26);
  if ((v30 & 1) == 0)
  {
LABEL_20:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v29;
    v142 = v28;
    swift_bridgeObjectRetain(v28);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x4449726F646E6576LL, 0xE800000000000000LL, ObjectType);
  }

    *(_WORD *)(a2 + 2 * v13++) = v18;
    if (a3 == v13) {
      goto LABEL_29;
    }
  }

  unsigned int v15 = 1;
  a3 = v13;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease(a5);
LABEL_31:
  *(void *)a1 = a4;
  *(void *)(a1 + _Block_object_dispose((const void *)(v15 - 64), 8) = a5;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 34) = v15;
  return a3;
}

id sub_100062410(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_100062420(id a1)
{
  char v4 = 0;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v4, 1LL));
  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v2,  @"kMasterKeyBlob",  0LL));
  [v1 sendCloudKitMsg:@"MasterKeysNotAvailable" args:v3];
}

void sub_1000624C4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)33)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) masterBlob]);

    if (!v2)
    {
      id v3 = [*(id *)(a1 + 32) mutableCopy];
      [*(id *)(a1 + 40) setMasterBlob:v3];

      char v4 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  *(void *)(a1 + 32),  @"kMasterKeyBlob",  0LL));
      [v4 sendCloudKitMsg:@"MasterKeysAvailable" args:v5];

      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceManager]);
      [v7 addAccountMagicKeysWithCloudRecord:*(void *)(a1 + 48)];

      [*(id *)(a1 + 40) fetchAccessoryKeyBlob:0];
    }
  }

void sub_100062748( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100062774(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
    if ([v6 isEqualToString:CKErrorDomain])
    {
      if ([v4 code] == (id)3 || objc_msgSend(v4, "code") == (id)4)
      {
      }

      else
      {
        id v20 = [v4 code];

        if (v20 != (id)9) {
          goto LABEL_14;
        }
      }

      os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
      os_log_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:CKErrorRetryAfterKey]);

      if (v8)
      {
        os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:CKErrorRetryAfterKey]);
        [v10 doubleValue];
        double v12 = v11;

        int64_t v13 = (uint64_t)(v12 * 1000000000.0);
      }

      else
      {
        int64_t v13 = 60000000000LL;
      }

      dispatch_time_t v16 = dispatch_time(0LL, v13);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100062960;
      block[3] = &unk_100208320;
      unsigned __int8 v17 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v18 = v17;
      uint64_t v19 = *(void *)(a1 + 56);
      id v22 = v18;
      uint64_t v23 = v19;
      dispatch_after(v16, &_dispatch_main_q, block);
    }

    else
    {
    }
  }

  else
  {
    os_log_t v14 = sub_100060178("MagicPairing");
    unsigned int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10018F198();
    }
  }

id sub_100062960(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkAccountStatusWithCompletionHandler:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100062D44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 recordID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
    *(_DWORD *)buf = 138412802;
    unint64_t v48 = (unint64_t)v6;
    __int16 v49 = 2112;
    os_log_t v50 = v10;
    __int16 v51 = 2112;
    id v52 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "fetchAccessoryKeyBlob completion error %@ recordZoneID %@, record: %@",  buf,  0x20u);
  }

  double v11 = &OBJC_CLASS___AADeviceManagerDaemon;
  if (!v6)
  {
    os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 recordID]);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
    dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
    unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneAccessoryDatabase]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 zoneID]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 zoneName]);
    unsigned int v20 = [v16 isEqualToString:v19];

    double v11 = &OBJC_CLASS___AADeviceManagerDaemon;
    if (!v20) {
      goto LABEL_30;
    }
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:@"EncryptedAccessoryBlob"]);

    os_log_t v23 = sub_100060178("MagicPairing");
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v25 = (void *)objc_claimAutoreleasedReturnValue([v5 modifiedByDevice]);
      *(_DWORD *)buf = 138412546;
      unint64_t v48 = (unint64_t)v25;
      __int16 v49 = 2112;
      os_log_t v50 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "MP: Record Modified by %@: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@",  buf,  0x16u);
    }

    if ([v22 length] == (id)4)
    {
      os_log_t v26 = sub_100060178("MagicPairing");
      unsigned int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Accessory zone has been upgraded. Dont generate keys",  buf,  2u);
      }

      int v28 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
      if (!v28) {
        [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      }
      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
      [v29 fetchAccessoryKeyBlob:0];
    }

    else
    {
      if ((unint64_t)[v22 length] < 0x99)
      {
LABEL_29:

        goto LABEL_30;
      }

      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v42 = (void *)objc_claimAutoreleasedReturnValue([v29 deviceManager]);
      [v42 addLegacyMagicPairingRecordsWithCloudRecord:v5 userInitiated:0 completion:&stru_100208368];
    }

    goto LABEL_29;
  }

  if ([v6 code] == (id)26 || objc_msgSend(v6, "code") == (id)11)
  {
    os_log_t v12 = sub_100060178("MagicPairing");
    int64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "fetchAccessoryKeyBlob CKErrorZoneNotFound or CKErrorUnknownItem",  buf,  2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100063300;
    block[3] = &unk_100206358;
    void block[4] = *(void *)(a1 + 32);
    id v46 = v6;
    dispatch_async(&_dispatch_main_q, block);
  }

  else if ([v6 code] == (id)6 || objc_msgSend(v6, "code") == (id)7)
  {
    os_log_t v30 = sub_100060178("MagicPairing");
    __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_10018F1C4();
    }

    id v32 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v33)
    {
      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v35 doubleValue];
      double v37 = v36;

      os_log_t v38 = sub_100060178("MagicPairing");
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v48 = (unint64_t)v37;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "MP fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu",  buf,  0xCu);
      }

      dispatch_time_t v40 = dispatch_time(0LL, (uint64_t)(v37 * 1000000000.0));
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      v44[2] = sub_100063358;
      v44[3] = &unk_100206E98;
      uint64_t v41 = *(void *)(a1 + 40);
      void v44[4] = *(void *)(a1 + 32);
      v44[5] = v41;
      dispatch_after(v40, &_dispatch_main_q, v44);
    }
  }

void sub_100063300(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
  [v2 fetchAccessoryKeyBlob:0];
}

id sub_100063358(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_100063368(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    os_log_t v3 = sub_100060178("MagicPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018F224();
    }
  }
}

void sub_1000636CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10018F284();
    }

    [*(id *)(a1 + 32) handleModifyMasterKeyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48)];
    goto LABEL_22;
  }

  if (v5)
  {
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"EncryptedAccessoryBlob"]);

    if ([v10 length] == (id)2
      && ([v10 isEqualToData:*(void *)(a1 + 40)] & 1) == 0)
    {
      os_log_t v24 = sub_100060178("MagicPairing");
      os_log_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Manatee: Accessory zone has been upgraded. Dont modify non-manate master keys",  buf,  2u);
      }

      os_log_t v26 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
      if (!v26) {
        [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      }
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
      [v19 modifyKeyBlob:*(void *)(a1 + 40) withRetryCount:0];
    }

    else
    {
      if ([v10 length] != (id)33)
      {
LABEL_21:
        [*(id *)(a1 + 32) setIsWriteMasterKeysInProgress:0];

        goto LABEL_22;
      }

      double v11 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
      os_log_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
      [*(id *)(a1 + 32) setMasterBlob:v12];

      os_log_t v13 = sub_100060178("MagicPairing");
      os_log_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) masterBlob]);
        *(_DWORD *)buf = 138412290;
        unint64_t v29 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Fetched existing master key record: encryptedBlob %@",  buf,  0xCu);
      }

      dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) masterBlob]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v17,  @"kMasterKeyBlob",  0LL));
      [v16 sendCloudKitMsg:@"MasterKeysAvailable" args:v18];

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue([v19 deviceManager]);
      [v20 addAccountMagicKeysWithCloudRecord:v5];
    }

    goto LABEL_21;
  }

  os_log_t v21 = sub_100060178("MagicPairing");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v23 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    unint64_t v29 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "No master key record found: write new key: %@",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:0];
LABEL_22:
  unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v27 endTransaction:@"modifyKeyBlob"];
}

id sub_100063D84(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100064240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10006427C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006428C(uint64_t a1)
{
}

void sub_100064294(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    os_log_t v25 = sub_100060178("MagicPairing");
    os_log_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v39 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob saveRecordZone record  %@",  buf,  0xCu);
    }

    unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
    v30[0] = _NSConcreteStackBlock;
    v30[2] = sub_100064684;
    v30[3] = &unk_1002083B8;
    uint64_t v34 = *(void *)(a1 + 80);
    int v28 = *(void **)(a1 + 40);
    v30[4] = *(void *)(a1 + 32);
    uint64_t v29 = *(void *)(a1 + 48);
    v30[1] = 3221225472LL;
    __int128 v33 = *(_OWORD *)(a1 + 64);
    id v31 = v28;
    id v32 = *(id *)(a1 + 56);
    [v27 saveRecord:v29 completionHandler:v30];

    os_log_t v24 = v31;
    goto LABEL_19;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3);
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v39 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob saveRecordZone: error %@ ",  buf,  0xCu);
  }

  os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (![v9 isEqualToString:CKErrorDomain]
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)2
    && [v6 code] != (id)6)
  {

    goto LABEL_21;
  }

  unint64_t v10 = *(void *)(a1 + 80);

  if (v10 <= 3)
  {
    os_log_t v11 = sub_100060178("MagicPairing");
    os_log_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 138412546;
      id v39 = v6;
      __int16 v40 = 2048;
      uint64_t v41 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob failed with error %@, retry count = %lu",  buf,  0x16u);
    }

    os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v15)
    {
      dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v17 doubleValue];
      double v19 = v18;

      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
      dispatch_time_t v20 = dispatch_time(0LL, (uint64_t)(v19 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100064670;
      block[3] = &unk_1002071F0;
      os_log_t v21 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v22 = v21;
      uint64_t v23 = *(void *)(a1 + 80);
      id v36 = v22;
      uint64_t v37 = v23;
      dispatch_after(v20, &_dispatch_main_q, block);
      os_log_t v24 = v36;
LABEL_19:
    }
  }

id sub_100064670(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100064684(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    os_log_t v24 = sub_100060178("MagicPairing");
    os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "MagicCloudPairingProtectedMasterBlob, saveRecord %@",  buf,  0xCu);
    }

    goto LABEL_17;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecord: error %@ ", buf, 0xCu);
  }

  os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (!-[os_log_s isEqualToString:](v9, "isEqualToString:", CKErrorDomain)
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)2)
  {
LABEL_17:

    goto LABEL_18;
  }

  unint64_t v10 = *(void *)(a1 + 72);

  if (v10 <= 3)
  {
    os_log_t v11 = sub_100060178("MagicPairing");
    os_log_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 138412546;
      id v29 = v6;
      __int16 v30 = 2048;
      uint64_t v31 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob:saveRecord failed with error %@, retry count = %lu",  buf,  0x16u);
    }

    os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v15)
    {
      dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v17 doubleValue];
      double v19 = v18;

      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
      dispatch_time_t v20 = dispatch_time(0LL, (uint64_t)(v19 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000649B8;
      block[3] = &unk_1002071F0;
      os_log_t v21 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v22 = v21;
      uint64_t v23 = *(void *)(a1 + 72);
      id v26 = v22;
      uint64_t v27 = v23;
      dispatch_after(v20, &_dispatch_main_q, block);
    }
  }

id sub_1000649B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100064B14(uint64_t a1)
{
  os_log_t v2 = sub_100060178("MagicPairing");
  os_log_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v16 = v4;
    __int16 v17 = 1024;
    int v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "updateCloudKitAccessoryZone with %@, delete: %i",  buf,  0x12u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modifyOperationTimer]);
  if (v6)
  {
    os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modifyOperationTimer]);
    [v7 invalidate];
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100064C80;
  v11[3] = &unk_100208430;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v12 = v8;
  uint64_t v13 = v9;
  char v14 = *(_BYTE *)(a1 + 48);
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:repeats:block:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:repeats:block:",  0LL,  v11,  3.0));
  [*(id *)(a1 + 40) setModifyOperationTimer:v10];
}

void sub_100064C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("MagicPairing");
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating Accessory Zone Now with %@", buf, 0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modifyOperationQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100064E08;
  v8[3] = &unk_100208408;
  char v11 = *(_BYTE *)(a1 + 48);
  objc_copyWeak(&v10, (id *)buf);
  id v9 = *(id *)(a1 + 32);
  [v7 addOperationWithBlock:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

void sub_100064DDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100064E08(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (v2) {
    [WeakRetained deleteCloudKitAccessoryZone];
  }
  else {
    [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
  }
}

void sub_100065054( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100065080(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v6)
  {
    os_log_t v8 = sub_100060178("MagicPairing");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10018F3B4();
    }

    [WeakRetained handleAccessoryKeyModifyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 56)];
  }

  else if (v5)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
    char v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);

    if ([v11 length] == (id)4
      && ([v11 isEqualToData:*(void *)(a1 + 40)] & 1) == 0)
    {
      os_log_t v25 = sub_100060178("MagicPairing");
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Master zone has been upgraded. Dont non-manatee accessory keys",  buf,  2u);
      }

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
      BOOL v28 = v27 == 0LL;

      if (v28) {
        [WeakRetained setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      }
      id v29 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
      [v29 modifyAccessoryBlob:*(void *)(a1 + 40) withRetryCount:0];
    }

    else
    {
      unsigned __int8 v12 = [v11 isEqualToData:*(void *)(a1 + 40)];
      os_log_t v13 = sub_100060178("MagicPairing");
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if ((v12 & 1) != 0)
      {
        if (v15)
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Dropping same modify record: MagicCloudPairingProtectedAccessoryBlob",  buf,  2u);
        }
      }

      else
      {
        if (v15)
        {
          uint64_t v19 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          uint64_t v35 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "modify record: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@",  buf,  0xCu);
        }

        uint64_t v20 = *(void *)(a1 + 40);
        os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
        [v21 setObject:v20 forKeyedSubscript:@"EncryptedAccessoryBlob"];

        objc_initWeak((id *)buf, WeakRetained);
        id v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cloudKitDatabase]);
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_100065488;
        v30[3] = &unk_100208480;
        id v31 = v5;
        objc_copyWeak(v33, (id *)buf);
        id v23 = *(id *)(a1 + 40);
        os_log_t v24 = *(void **)(a1 + 56);
        id v32 = v23;
        v33[1] = v24;
        [v22 saveRecord:v31 completionHandler:v30];

        objc_destroyWeak(v33);
        objc_destroyWeak((id *)buf);
      }
    }
  }

  else
  {
    os_log_t v16 = sub_100060178("MagicPairing");
    __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v35 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "No record found: write new data: %@",  buf,  0xCu);
    }

    [WeakRetained writeAccessoryBlob:*(void *)(a1 + 40) withRetryCount:0];
  }
}

void sub_10006545C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100065488(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10018F414();
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained handleAccessoryKeyModifyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 56)];
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully saved the modified record - %@",  buf,  0xCu);
    }

    char v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceManager]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10006568C;
    v16[3] = &unk_100206080;
    id v17 = v5;
    [v12 addLegacyMagicPairingRecordsWithCloudRecord:v17 userInitiated:1 completion:v16];

    os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v14,  @"kUploadStatus",  0LL));
    [v13 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v15];

    id WeakRetained = v17;
  }
}

void sub_10006568C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    os_log_t v3 = sub_100060178("MagicPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018F474();
    }
  }
}

void sub_100065C48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_100065C74(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifyOperationQueue]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100065D5C;
  v5[3] = &unk_1002084A8;
  objc_copyWeak(v7, &location);
  id v3 = *(id *)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  id v6 = v3;
  v7[1] = v4;
  [v2 addOperationWithBlock:v5];

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100065D38(_Unwind_Exception *a1)
{
}

void sub_100065D5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100065DA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained writeAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
}

void sub_10006611C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "writeAccessoryBlob saveRecordZone: error %@ ",  buf,  0xCu);
    }
  }

  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100066338;
    block[3] = &unk_100206058;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(&_dispatch_main_q, block);
    os_log_t v9 = sub_100060178("MagicPairing");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "saveRecordZone record %@, resume fetches",  buf,  0xCu);
    }

    char v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifyOperationQueue]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100066368;
    v16[3] = &unk_1002084F8;
    unsigned __int8 v12 = *(void **)(a1 + 40);
    void v16[4] = *(void *)(a1 + 32);
    id v13 = v12;
    uint64_t v14 = *(void *)(a1 + 64);
    id v17 = v13;
    uint64_t v19 = v14;
    id v18 = *(id *)(a1 + 48);
    [v11 addOperationWithBlock:v16];
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v15 endTransaction:@"WriteAccessoryBlob"];
}

id sub_100066338(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPauseErrorReason:0];
}

void sub_100066368(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_100066404;
  v6[3] = &unk_100208390;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v6[4] = v3;
  id v7 = v5;
  [v2 saveRecord:v4 completionHandler:v6];
}

void sub_100066404(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  os_log_t v9 = v8;
  if (!v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v46 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "writeAccessoryBlob createRecordZone record  %@",  buf,  0xCu);
    }

    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceManager]);
    uint64_t v37 = _NSConcreteStackBlock;
    uint64_t v38 = 3221225472LL;
    id v39 = sub_100066958;
    __int16 v40 = &unk_100206080;
    id v41 = v5;
    [v13 addLegacyMagicPairingRecordsWithCloudRecord:v41 userInitiated:1 completion:&v37];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    os_log_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v15,  @"kUploadStatus",  0LL,  v37,  v38,  v39,  v40));
    [v14 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v16];

    id v17 = v41;
    goto LABEL_10;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10018F714();
  }

  if (a1[6] >= 5uLL)
  {
    os_log_t v10 = sub_100060178("MagicPairing");
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018F654();
    }
LABEL_19:

    goto LABEL_20;
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if ([v18 isEqualToString:CKErrorDomain])
  {
    if ([v6 code] == (id)3 || objc_msgSend(v6, "code") == (id)4 || objc_msgSend(v6, "code") == (id)9)
    {

LABEL_16:
      os_log_t v19 = sub_100060178("MagicPairing");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10018F6B4();
      }

      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v21,  @"kUploadStatus",  0LL));
      -[os_log_s sendCloudKitMsg:args:](v11, "sendCloudKitMsg:args:", @"DeviceInfoUploadStatus", v22);

      goto LABEL_19;
    }

    id v36 = [v6 code];

    if (v36 == (id)6) {
      goto LABEL_16;
    }
  }

  else
  {
  }

  if ([v6 code] == (id)7)
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    os_log_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v24)
    {
      os_log_t v25 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v26 doubleValue];
      double v28 = v27 + 5.0;

      os_log_t v29 = sub_100060178("MagicPairing");
      __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = a1[6];
        *(_DWORD *)buf = 138412802;
        id v46 = v6;
        __int16 v47 = 2048;
        uint64_t v48 = v31;
        __int16 v49 = 2048;
        unint64_t v50 = (unint64_t)v28;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "writeAccessoryBlob failed with error %@, retry count = %lu, retry time: %lu",  buf,  0x20u);
      }

      dispatch_time_t v32 = dispatch_time(0LL, (uint64_t)(v28 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000668B8;
      block[3] = &unk_1002071F0;
      __int128 v33 = (void *)a1[5];
      void block[4] = a1[4];
      id v34 = v33;
      uint64_t v35 = a1[6];
      id v43 = v34;
      uint64_t v44 = v35;
      dispatch_after(v32, &_dispatch_main_q, block);
      id v17 = v43;
LABEL_10:
    }
  }

void sub_1000668B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifyOperationQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_100066944;
  v6[3] = &unk_1002071F0;
  uint64_t v3 = *(void **)(a1 + 40);
  v6[4] = *(void *)(a1 + 32);
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  [v2 addOperationWithBlock:v6];
}

id sub_100066944(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyAccessoryBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100066958(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    os_log_t v3 = sub_100060178("MagicPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018F780();
    }
  }
}

void sub_100066BCC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  os_log_t v5 = sub_100060178("MagicPairing");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v4;
      uint64_t v8 = "deleteCloudKitAccessoryZone: error %@ ";
      os_log_t v9 = v6;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }

  else if (v7)
  {
    *(_WORD *)buf = 0;
    uint64_t v8 = "Successfully deleted record";
    os_log_t v9 = v6;
    uint32_t v10 = 2;
    goto LABEL_6;
  }

  char v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  v4 == 0LL,  @"kUploadStatus"));
  BOOL v15 = v12;
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
  [v11 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v13];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100066D4C(id a1, NSError *a2)
{
  id v2 = a2;
  os_log_t v3 = sub_100060178("MagicPairing");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018F7E0();
  }
}

void sub_1000671B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  os_log_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10018F8A0();
    }

    uint32_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    char v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:NSUnderlyingErrorKey]);

    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if (![v12 isEqualToString:CKErrorDomain]
      || !CKErrorIsCode(v6, 15LL)
      || !v11)
    {
      goto LABEL_12;
    }

    id v13 = [v11 code];

    if (v13 == (id)2032 && *(void *)(a1 + 32))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      BOOL v15 = [v14 rangeOfString:@"'"];
      uint64_t v17 = v16;

      id v18 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      os_log_t v19 = [v18 rangeOfString:@"'" options:4];

      uint64_t v20 = &v15[v17];
      int64_t v21 = v19 - &v15[v17];
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "substringWithRange:", v20, v21));

      os_log_t v23 = sub_100060178("MagicPairing");
      os_log_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10018F840();
      }

      [*(id *)(a1 + 40) verifyAndCacheSubscriptionID:v12];
LABEL_12:
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 138412290;
      id v29 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "saveSubscription record  %@",  (uint8_t *)&v28,  0xCu);
    }

    uint64_t v27 = a1 + 32;
    uint64_t v25 = *(void *)(a1 + 32);
    id v26 = *(void **)(v27 + 8);
    char v11 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
    [v26 setuserPreference:v25 value:v11 sync:1];
  }
}

void sub_100067654(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  os_log_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10018F960();
    }

    uint32_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if (-[os_log_s isEqualToString:](v10, "isEqualToString:", CKErrorDomain))
    {
      id v11 = [v6 code];

      if (v11 == (id)26)
      {
        [*(id *)(a1 + 40) removeuserPreference:*(void *)(a1 + 48) sync:1];
        [*(id *)(a1 + 40) createSubscritionForRecordType:*(void *)(a1 + 56)];
      }

      goto LABEL_16;
    }

void sub_1000679D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100067A04(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!a3)
    {
      os_log_t v7 = sub_100060178("MagicPairing");
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 138412290;
        id v17 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Found subscription - %@",  (uint8_t *)&v16,  0xCu);
      }

      os_log_t v9 = *(void **)(a1 + 32);
      uint32_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
      LODWORD(v9) = [v9 isEqualToString:v10];

      if ((_DWORD)v9)
      {
        os_log_t v11 = sub_100060178("MagicPairing");
        unsigned __int8 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 138412290;
          id v17 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Already have subscription - %@",  (uint8_t *)&v16,  0xCu);
        }

        id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
        [WeakRetained setuserPreference:@"MagicCloudPairingAccessorySubscriptionID" value:v13 sync:1];

        [WeakRetained setCloudSubscription:v5];
      }
    }
  }

  else
  {
    os_log_t v14 = sub_100060178("MagicPairing");
    os_log_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10018F9C0();
    }
  }
}

void sub_100067D40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_100067D80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v22 = a3;
  id val = objc_loadWeakRetained((id *)(a1 + 48));
  os_log_t v6 = sub_100060178("MagicPairing");
  os_log_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v32 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "fetchAllSubscriptionsWithCompletionHandler: error %@ ",  buf,  0xCu);
  }

  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v28;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v8);
        }
        unsigned __int8 v12 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
        uint64_t v13 = objc_opt_class(&OBJC_CLASS___CKRecordZoneSubscription);
        if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
        {
          id v14 = v12;
          os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 recordType]);
          unsigned int v16 = [v15 isEqualToString:*(void *)(a1 + 32)];

          if (v16)
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
            os_log_t v17 = sub_100060178("MagicPairing");
            uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              os_log_t v19 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              id v32 = v19;
              __int16 v33 = 2112;
              id v34 = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Delete Subscription for record type: %@ and sub: %@",  buf,  0x16u);
            }

            objc_initWeak((id *)buf, val);
            int v20 = (void *)objc_claimAutoreleasedReturnValue([val cloudKitDatabase]);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v14 subscriptionID]);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472LL;
            v24[2] = sub_1000680D0;
            v24[3] = &unk_100208608;
            id v25 = *(id *)(a1 + 32);
            objc_copyWeak(&v26, (id *)buf);
            [v20 deleteSubscriptionWithID:v21 completionHandler:v24];

            objc_destroyWeak(&v26);
            objc_destroyWeak((id *)buf);
          }
        }
      }

      id v9 = [v8 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }

    while (v9);
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    [val setuserPreference:@"MagicPairingMasterKeySubscriptionDisabled" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_1000680A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id location)
{
}

void sub_1000680D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id WeakRetained = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Error Deleting Subscription for record type: %@ with error: %@ ",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Successfully deleted Subscription for record type - %@ with ID - %@",  (uint8_t *)&v12,  0x16u);
    }

    id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(a1 + 40));
    -[os_log_s setuserPreference:value:sync:]( WeakRetained,  "setuserPreference:value:sync:",  @"MagicPairingMasterKeySubscriptionDisabled",  &__kCFBooleanTrue,  1LL);
  }
}

void sub_10006847C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000684A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error getting server preferred push environment %@",  (uint8_t *)&v12,  0xCu);
    }
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v5;
  id v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100068C74(_Unwind_Exception *a1)
{
}

void sub_100068CB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordName]);
  unsigned int v13 = [v11 isEqual:v12];

  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 48);
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
    int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordName]);
    unsigned int v16 = [v15 isEqual:v12];

    if (!v16) {
      goto LABEL_6;
    }
    uint64_t v14 = *(void *)(a1 + 56);
  }

  objc_storeStrong((id *)(*(void *)(v14 + 8) + 40LL), a2);
LABEL_6:
  if (v10)
  {
    os_log_t v18 = sub_100060178("MagicPairing");
    os_log_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_10018F9EC();
    }
  }

  else
  {
    int v20 = IsAppleInternalBuild(v17);
    os_log_t v21 = sub_100060178("MagicPairing");
    os_log_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    BOOL v22 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v22)
      {
        os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedValues]);
        os_log_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
        id v25 = v24;
        if (!v24)
        {
          int v12 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedValues]);
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
        }

        int v26 = 138412546;
        id v27 = v8;
        __int16 v28 = 2112;
        __int128 v29 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@",  (uint8_t *)&v26,  0x16u);
        if (!v24)
        {
        }
      }
    }

    else if (v22)
    {
      LOWORD(v26) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully fetched LegacyNonManateeContainer Record",  (uint8_t *)&v26,  2u);
    }
  }
}

void sub_100068F18(uint64_t a1)
{
  __int16 v29 = -1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v29, 2LL));
  int v28 = -1;
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v28, 4LL));
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 encryptedValues]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
    unsigned int v7 = [v2 isEqualToData:v6];

    if (v7) {
      goto LABEL_7;
    }
  }

  else
  {
    id v8 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  @"MasterKey",  *(void *)(a1 + 40));
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  id v11 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  if (!v11)
  {
    id v15 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  @"AccessoryDatabase",  *(void *)(a1 + 48));
    uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    goto LABEL_9;
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 encryptedValues]);
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
  unsigned int v14 = [v3 isEqualToData:v13];

  if (!v14)
  {
LABEL_9:
    os_log_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) encryptedValues]);
    [v18 setObject:v2 forKeyedSubscript:@"EncryptedMasterKeyBlob"];

    os_log_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) encryptedValues]);
    [v19 setObject:v3 forKeyedSubscript:@"EncryptedAccessoryBlob"];

    int v20 = objc_alloc(&OBJC_CLASS___CKModifyRecordZonesOperation);
    os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneBlob]);
    v30[0] = v21;
    BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneAccessoryDatabase]);
    v30[1] = v22;
    os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 2LL));
    os_log_t v24 = -[CKModifyRecordZonesOperation initWithRecordZonesToSave:recordZoneIDsToDelete:]( v20,  "initWithRecordZonesToSave:recordZoneIDsToDelete:",  v23,  0LL);

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100069218;
    v25[3] = &unk_1002086D0;
    uint64_t v27 = *(void *)(a1 + 72);
    void v25[4] = *(void *)(a1 + 32);
    __int128 v26 = *(_OWORD *)(a1 + 56);
    -[CKModifyRecordZonesOperation setModifyRecordZonesCompletionBlock:]( v24,  "setModifyRecordZonesCompletionBlock:",  v25);
    [*(id *)(a1 + 56) addOperation:v24];

    goto LABEL_10;
  }

void sub_100069218(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  os_log_t v6 = sub_100060178("MagicPairing");
  unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v8) {
      sub_10018FAB4();
    }
  }

  else
  {
    if (v8) {
      sub_10018FA4C(v7, v9, v10, v11, v12, v13, v14, v15);
    }

    uint64_t v16 = objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    v20[0] = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    v20[1] = v17;
    os_log_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 2LL));
    unsigned int v7 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( v16,  "initWithRecordsToSave:recordIDsToDelete:",  v18,  0LL);

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100069370;
    v19[3] = &unk_1002086A8;
    v19[4] = *(void *)(a1 + 32);
    -[os_log_s setModifyRecordsCompletionBlock:](v7, "setModifyRecordsCompletionBlock:", v19);
    [*(id *)(a1 + 40) addOperation:v7];
  }
}

void sub_100069370(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_log_t v10 = sub_100060178("MagicPairing");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018FB14();
    }
LABEL_4:

    goto LABEL_23;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v36 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully Marked LegacyNonManateeContainer Migrated %@",  buf,  0xCu);
  }

  if (IsAppleInternalBuild(v13))
  {
    uint64_t v26 = a1;
    uint64_t v27 = 0LL;
    id v28 = v8;
    id v29 = v7;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id obj = v7;
    id v14 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v32;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v32 != v16) {
            objc_enumerationMutation(obj);
          }
          os_log_t v18 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
          os_log_t v19 = sub_100060178("MagicPairing");
          int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([v18 encryptedValues]);
            BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
            os_log_t v23 = v22;
            if (!v22)
            {
              a3 = (void *)objc_claimAutoreleasedReturnValue([v18 encryptedValues]);
              uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
              os_log_t v23 = v12;
            }

            *(_DWORD *)buf = 138412546;
            id v36 = v18;
            __int16 v37 = 2112;
            uint64_t v38 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully Marked LegacyNonManateeContainer Record %@, %@",  buf,  0x16u);
            if (!v22)
            {
            }
          }
        }

        id v15 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
      }

      while (v15);
    }

    id v8 = v28;
    id v7 = v29;
    id v9 = 0LL;
  }

  os_log_t v24 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "readUserPreference:",  @"MagicCloudPairingManateeUpgradedAccount",  v26,  v27,  v28,  v29));

  if (!v24)
  {
    [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
    os_log_t v25 = sub_100060178("MagicPairing");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  ">>> Successfully Marked Defaults for Legacy Container zone upgraded successfully",  buf,  2u);
    }

    goto LABEL_4;
  }

void sub_100069AD4(_Unwind_Exception *a1)
{
}

void sub_100069B08(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordName]);
  unsigned int v13 = [v11 isEqual:v12];

  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 48);
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordName]);
    unsigned int v16 = [v15 isEqual:v12];

    if (!v16) {
      goto LABEL_6;
    }
    uint64_t v14 = *(void *)(a1 + 56);
  }

  objc_storeStrong((id *)(*(void *)(v14 + 8) + 40LL), a2);
LABEL_6:
  if (v10)
  {
    os_log_t v18 = sub_100060178("MagicPairing");
    os_log_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_10018F9EC();
    }
  }

  else
  {
    int v20 = IsAppleInternalBuild(v17);
    os_log_t v21 = sub_100060178("MagicPairing");
    os_log_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    BOOL v22 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v22)
      {
        os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedValues]);
        os_log_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
        os_log_t v25 = v24;
        if (!v24)
        {
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedValues]);
          os_log_t v25 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
        }

        int v26 = 138412546;
        id v27 = v8;
        __int16 v28 = 2112;
        id v29 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@",  (uint8_t *)&v26,  0x16u);
        if (!v24)
        {
        }
      }
    }

    else if (v22)
    {
      LOWORD(v26) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully fetched LegacyNonManateeContainer Record",  (uint8_t *)&v26,  2u);
    }
  }
}

void sub_100069D70(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) encryptedValues]);
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
  id v4 = [v3 length];

  if (v4 == (id)33)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) encryptedValues]);
    os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
    id v7 = [v6 length];

    if ((unint64_t)v7 <= 0x99)
    {
      os_log_t v17 = sub_100060178("MagicPairing");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10018FBF8();
      }
    }

    else
    {
      id v8 = objc_alloc(&OBJC_CLASS___CKModifyRecordZonesOperation);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordZoneBlob]);
      v23[0] = v10;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](&OBJC_CLASS___MPCloudKit_Manatee, "sharedInstance"));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 recordZoneAccessoryDatabase]);
      v23[1] = v12;
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL));
      uint64_t v14 = -[CKModifyRecordZonesOperation initWithRecordZonesToSave:recordZoneIDsToDelete:]( v8,  "initWithRecordZonesToSave:recordZoneIDsToDelete:",  v13,  0LL);

      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_100069FCC;
      v18[3] = &unk_100208748;
      id v19 = *(id *)(a1 + 32);
      id v20 = *(id *)(a1 + 40);
      __int128 v15 = *(_OWORD *)(a1 + 48);
      __int128 v22 = *(_OWORD *)(a1 + 64);
      __int128 v21 = v15;
      -[os_log_s setModifyRecordZonesCompletionBlock:](v14, "setModifyRecordZonesCompletionBlock:", v18);
      [*(id *)(a1 + 56) addOperation:v14];
    }
  }

  else
  {
    os_log_t v16 = sub_100060178("MagicPairing");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10018FC24();
    }
  }
}

void sub_100069FCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_log_t v10 = sub_100060178("MagicPairing");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v9)
  {
    if (v12) {
      sub_10018FC7C();
    }
  }

  else
  {
    if (v12) {
      sub_10018FC50();
    }

    uint64_t v37 = 0LL;
    uint64_t v38 = &v37;
    uint64_t v39 = 0x3032000000LL;
    __int16 v40 = sub_10006427C;
    id v41 = sub_10006428C;
    os_log_t v42 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  @"MasterKey",  *(void *)(a1 + 32));
    uint64_t v31 = 0LL;
    __int128 v32 = &v31;
    uint64_t v33 = 0x3032000000LL;
    __int128 v34 = sub_10006427C;
    uint64_t v35 = sub_10006428C;
    id v36 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  @"AccessoryDatabase",  *(void *)(a1 + 40));
    unsigned int v13 = objc_alloc(&OBJC_CLASS___CKFetchRecordsOperation);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([(id)v38[5] recordID]);
    v43[0] = v14;
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([(id)v32[5] recordID]);
    v43[1] = v15;
    os_log_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v43, 2LL));
    os_log_t v17 = -[CKFetchRecordsOperation initWithRecordIDs:](v13, "initWithRecordIDs:", v16);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_10006A2C8;
    v26[3] = &unk_100208680;
    id v27 = *(id *)(a1 + 32);
    id v29 = &v37;
    id v28 = *(id *)(a1 + 40);
    __int128 v30 = &v31;
    -[CKFetchRecordsOperation setPerRecordCompletionBlock:](v17, "setPerRecordCompletionBlock:", v26);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_10006A534;
    v20[3] = &unk_100208720;
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 72);
    __int128 v22 = &v37;
    uint64_t v23 = v18;
    os_log_t v24 = &v31;
    uint64_t v25 = v19;
    __int128 v21 = *(_OWORD *)(a1 + 48);
    -[CKFetchRecordsOperation setCompletionBlock:](v17, "setCompletionBlock:", v20);
    [*(id *)(a1 + 56) addOperation:v17];

    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v37, 8);
  }
}

void sub_10006A294(_Unwind_Exception *a1)
{
}

void sub_10006A2C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v10)
  {
    os_log_t v11 = sub_100060178("MagicPairing");
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10018F9EC();
    }
    goto LABEL_18;
  }

  int v13 = IsAppleInternalBuild(0LL);
  os_log_t v14 = sub_100060178("MagicPairing");
  __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v16)
    {
      os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedValues]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
      uint64_t v19 = v18;
      if (!v18)
      {
        id v4 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedValues]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
      }

      int v29 = 138412546;
      id v30 = v8;
      __int16 v31 = 2112;
      __int128 v32 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@",  (uint8_t *)&v29,  0x16u);
      if (!v18)
      {
      }
    }
  }

  else if (v16)
  {
    LOWORD(v29) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully fetched LegacyNonManateeContainer Record",  (uint8_t *)&v29,  2u);
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordName]);
  unsigned int v22 = [v20 isEqual:v21];

  if (v22)
  {
    uint64_t v23 = *(void *)(a1 + 48);
LABEL_17:
    uint64_t v27 = *(void *)(v23 + 8);
    id v28 = v8;
    BOOL v12 = *(os_log_s **)(v27 + 40);
    *(void *)(v27 + 40) = v28;
LABEL_18:

    goto LABEL_19;
  }

  os_log_t v24 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordName]);
  unsigned int v26 = [v24 isEqual:v25];

  if (v26)
  {
    uint64_t v23 = *(void *)(a1 + 56);
    goto LABEL_17;
  }

void sub_10006A534(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) encryptedValues]);
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) encryptedValues]);
  [v4 setObject:v3 forKeyedSubscript:@"EncryptedMasterKeyBlob"];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) encryptedValues]);
  os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) encryptedValues]);
  [v7 setObject:v6 forKeyedSubscript:@"EncryptedAccessoryBlob"];

  id v8 = objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  v13[0] = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  v13[1] = v9;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
  os_log_t v11 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( v8,  "initWithRecordsToSave:recordIDsToDelete:",  v10,  0LL);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10006A704;
  v12[3] = &unk_1002086A8;
  v12[4] = *(void *)(a1 + 32);
  -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v11, "setModifyRecordsCompletionBlock:", v12);
  [*(id *)(a1 + 40) addOperation:v11];
}

void sub_10006A704(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_log_t v10 = sub_100060178("MagicPairing");
  os_log_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  BOOL v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018FCDC();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v34 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully Upgraded to Legacy ManateeContainer Migrated %@",  buf,  0xCu);
    }

    if (IsAppleInternalBuild(v13))
    {
      uint64_t v24 = a1;
      uint64_t v25 = 0LL;
      id v26 = v8;
      id v27 = v7;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      id obj = v7;
      id v14 = [obj countByEnumeratingWithState:&v29 objects:v37 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v30;
        do
        {
          for (i = 0LL; i != v15; i = (char *)i + 1)
          {
            if (*(void *)v30 != v16) {
              objc_enumerationMutation(obj);
            }
            uint64_t v18 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
            os_log_t v19 = sub_100060178("MagicPairing");
            id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v18 encryptedValues]);
              unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
              uint64_t v23 = v22;
              if (!v22)
              {
                id v8 = (id)objc_claimAutoreleasedReturnValue([v18 encryptedValues]);
                BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);
                uint64_t v23 = v12;
              }

              *(_DWORD *)buf = 138412546;
              id v34 = v18;
              __int16 v35 = 2112;
              id v36 = v23;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  " >>> Successfully Upgraded to Legacy ManateeContainer Record %@, %@",  buf,  0x16u);
              if (!v22)
              {
              }
            }
          }

          id v15 = [obj countByEnumeratingWithState:&v29 objects:v37 count:16];
        }

        while (v15);
      }

      id v8 = v26;
      id v7 = v27;
      a1 = v24;
      id v9 = 0LL;
    }

    objc_msgSend(*(id *)(a1 + 32), "markLegacyNonManateeContainerMigrated", v24, v25, v26, v27);
  }
}

void sub_10006AB68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "deleteLegacyMasterKey deleteRecordWithID: error %@ ",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    if (v9)
    {
      int v10 = 138412290;
      id v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "deleteLegacyMasterKey deleteRecordWithID record:  %@",  (uint8_t *)&v10,  0xCu);
    }

    [*(id *)(a1 + 32) setuserPreference:@"kMagicPairingLegacyMasterKeyRemoved" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_10006B0D0(id a1, CKRecordZoneID *a2, NSError *a3)
{
  os_log_t v3 = a3;
  os_log_t v4 = sub_100060178("MagicPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    os_log_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  ">>> resetOldZones recordZoneBlob: error %@ ",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_10006B180(id a1, CKRecordZoneID *a2, NSError *a3)
{
  os_log_t v3 = a3;
  os_log_t v4 = sub_100060178("MagicPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    os_log_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  ">>> resetOldZones recordZoneAccessoryDatabase: error %@ ",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_10006B230(id a1, CKRecordZoneID *a2, NSError *a3)
{
  os_log_t v3 = a3;
  os_log_t v4 = sub_100060178("MagicPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    os_log_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  ">>> Manatee: resetOldZones recordZoneBlob: error %@ ",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_10006B2E0(id a1, CKRecordZoneID *a2, NSError *a3)
{
  os_log_t v3 = a3;
  os_log_t v4 = sub_100060178("MagicPairing");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    os_log_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  ">>> Manatee:  resetOldZones recordZoneAccessoryDatabase: error %@ ",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_10006B600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___CKRecordZoneNotification);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) == 0) {
    goto LABEL_11;
  }
  id v4 = *(id *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 recordZoneID]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneName]);
  unsigned int v7 = [v6 isEqualToString:@"MagicCloudPairingCustomKeyBlobZone"];

  if (!v7)
  {
LABEL_10:

LABEL_11:
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10006B7A0;
    block[3] = &unk_100206058;
    void block[4] = *(void *)(a1 + 40);
    dispatch_async(&_dispatch_main_q, block);
    return;
  }

  os_log_t v8 = sub_100060178("MagicPairing");
  BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "*****>>>> Master Key Updated", buf, 2u);
  }

  if (([*(id *)(a1 + 40) isWriteMasterKeysInProgress] & 1) == 0)
  {
    [*(id *)(a1 + 40) setMasterBlob:0];
    [*(id *)(a1 + 40) fetchKeyBlob:0];
    goto LABEL_10;
  }

  os_log_t v10 = sub_100060178("MagicPairing");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "*****>>>> Master Key Updated but we are in process to push new key. Dont fetch",  buf,  2u);
  }
}

id sub_10006B7A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:0];
}

void sub_10006BC04(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_10006BC30(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 168), 8) = a1;
}

void sub_10006C194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10006C1E0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isWatchingBuddy])
  {
    if (+[BTSystemConfiguration isBuddyComplete](&OBJC_CLASS___BTSystemConfiguration, "isBuddyComplete"))
    {
      uint64_t v2 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
      v2[2]();
    }
  }

void sub_10006C24C(uint64_t a1)
{
  uint64_t v2 = (void *)qword_10023DCB8;
  if (os_log_type_enabled((os_log_t)qword_10023DCB8, OS_LOG_TYPE_DEBUG)) {
    sub_10018FE94(a1, v2);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained directoryChanged];
}

void sub_10006C2A8(uint64_t a1)
{
  uint64_t v2 = (void *)qword_10023DCB8;
  if (os_log_type_enabled((os_log_t)qword_10023DCB8, OS_LOG_TYPE_DEBUG)) {
    sub_10018FF24(a1, v2);
  }
  uint64_t v3 = (void *)qword_10023DCB8;
  if (os_log_type_enabled((os_log_t)qword_10023DCB8, OS_LOG_TYPE_DEBUG)) {
    sub_10018FF24(a1, v3);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained cancel];
}

void sub_10006C4DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_10023DCB8;
  if (os_log_type_enabled((os_log_t)qword_10023DCB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Buddy complete notification callback", v5, 2u);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);

  if (v3)
  {
    id v4 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
    v4[2]();
  }

void sub_10006C650(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_10023DCB8;
  if (os_log_type_enabled((os_log_t)qword_10023DCB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "device unlocked after boot callback", v5, 2u);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);

  if (v3)
  {
    id v4 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
    v4[2]();
  }

void sub_10006C960(uint64_t a1)
{
  uint64_t v1 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
  v1[2]();
}

void sub_10006CA38(uint64_t a1)
{
  uint64_t v1 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
  v1[2]();
}

void sub_10006CC54( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10006CC68(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

id sub_10006CC74(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t sub_10006CC80()
{
  return v0;
}

void sub_10006CC8C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_10006CCA4(id a1)
{
  return a1;
}

void sub_10006CCEC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___BTUserCloudServicesDaemon);
  uint64_t v2 = (void *)qword_100237260;
  qword_100237260 = (uint64_t)v1;
}

id sub_10006D04C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

uint64_t sub_10006D174(uint64_t a1)
{
  return CUStateDumpWithObject("BTUserCloudServices", *(void *)(a1 + 32), &dword_1002345E8);
}

id sub_10006D1E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10006D8C4(_Unwind_Exception *a1)
{
}

void sub_10006D8E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _xpcConnectionInvalidated:*(void *)(a1 + 32)];
}

void sub_10006DCE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006DD20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006DD30(uint64_t a1)
{
}

uint64_t sub_10006DD38(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection cloudServicesClientActivate:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_10006E1C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10006E1F8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAAProxCardsInfoForDeviceWithAddress:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_10006E2BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v5, v4)) {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAAProxCardsInfoForDeviceWithAddress:completion:]_block_invoke_2",  30LL,  "Fetched AAProxCardsInfo %@",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006E534( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006E56C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection modifyAAProxCardsInfo:completion:]_block_invoke",  90LL,  "### modifyAAProxCardsInfo failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_10006E804( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006E83C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection removeAAProxCardsInfoForDeviceWithAddress:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_10006EB0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006EB44(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection createDeviceRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection createDeviceRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006EE98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006EED0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteDeviceRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteDeviceRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006F1BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10006F1F4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchDeviceRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchDeviceRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006F290(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v5, v4)) {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchDeviceRecord:completion:]_block_invoke_2",  30LL,  "Fetched Device: %@",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006F560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10006F598(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchDeviceRecordsWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchDeviceRecordsWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006F634(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v7, v4))
    {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchDeviceRecordsWithCompletion:]_block_invoke_2",  30LL,  "Fetched Devices: %@",  v3);
      id v3 = v7;
    }
  }

  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v3));
  (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
}

void sub_10006F900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006F938(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection createDeviceSupportInformationRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection createDeviceSupportInformationRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006FBE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006FC1C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteDeviceSupportInformationRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteDeviceSupportInformationRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006FF08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10006FF40(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchBTCloudDeviceSupportInformation:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchBTCloudDeviceSupportInformation:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10006FFDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v5, v4)) {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchBTCloudDeviceSupportInformation:completion:]_block_invoke_2",  30LL,  "Fetched record Info: %@",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000702AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000702E4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAllBTCloudDeviceSupportInformationWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAllBTCloudDeviceSupportInformationWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100070380(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v5, v4)) {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAllBTCloudDeviceSupportInformationWithCompletion:]_block_invoke_2",  30LL,  "Fetched info records: %@",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100070630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100070668(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection modifyDeviceSupportInformationRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection modifyDeviceSupportInformationRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100070914( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10007094C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection createMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection createMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100070BF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100070C30(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100070F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100070F54(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100070FF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v5, v4)) {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchMagicSettingsRecord:completion:]_block_invoke_2",  30LL,  "Fetched MP record: %@",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000712C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000712F8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAllMagicSettingsRecordsWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAllMagicSettingsRecordsWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100071394(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1002345E8 <= 30)
  {
    if (dword_1002345E8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002345E8, 30LL), id v3 = v5, v4)) {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchAllMagicSettingsRecordsWithCompletion:]_block_invoke_2",  30LL,  "Fetched MP records: %@",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100071644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10007167C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection modifyMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection modifyMagicSettingsRecord:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_10007197C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000719B8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_1002345E8 <= 90)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 != -1) {
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchCloudAccountInfoUpdatedWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed to fetch account info: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_1002345E8, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchCloudAccountInfoUpdatedWithCompletion:]_block_invoke",  90LL,  "### DeviceManager failed to fetch account info: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

void sub_100071CF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_100071D30(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchCloudPairingIdentifierForPeripheral:completion:]_block_invoke",  90LL,  "### CloudPairingManager failed to fetch cloud pairing identifier: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_100071DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dispatchQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100071EBC;
  v8[3] = &unk_100208948;
  id v9 = v3;
  id v11 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

uint64_t sub_100071EBC(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (dword_1002345E8 <= 30)
    {
      if (dword_1002345E8 != -1 || (int v3 = _LogCategory_Initialize(&dword_1002345E8, 30LL), v2 = a1[4], v3))
      {
        LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchCloudPairingIdentifierForPeripheral:completion:]_block_invoke_3",  30LL,  "Fetched cloud pairing identifier: %@",  v2);
        uint64_t v2 = a1[4];
      }
    }

    return (*(uint64_t (**)(void, uint64_t, void))(a1[6] + 16LL))(a1[6], v2, 0LL);
  }

  else
  {
    if (dword_1002345E8 <= 30
      && (dword_1002345E8 != -1 || _LogCategory_Initialize(&dword_1002345E8, 30LL)))
    {
      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchCloudPairingIdentifierForPeripheral:completion:]_block_invoke_3",  30LL,  "Unable to fetch cloud pairing identifier for peripheral: %@",  a1[5]);
    }

    uint64_t v5 = a1[6];
    uint64_t v6 = BTErrorF(4294960588LL, "Cannot find cloud identifier for peripheral '%@'", a1[5]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *(void *)(a1[7] + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 16))(v5, 0LL, v7);
  }

void sub_10007229C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000722D4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection forceCloudPairingForIdentifiers:completion:]_block_invoke",  90LL,  "### CloudPairingManager failed to force cloud pairing: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_1000725AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_1000725E4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchHMDeviceCloudRecordInfoWithAddress:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_1000726A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  id v7[2] = sub_10007273C;
  v7[3] = &unk_100205F68;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_10007273C(uint64_t a1)
{
  if (dword_1002345E8 <= 30 && (dword_1002345E8 != -1 || _LogCategory_Initialize(&dword_1002345E8, 30LL))) {
    LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchHMDeviceCloudRecordInfoWithAddress:completion:]_block_invoke_3",  30LL,  "Fetched HMDeviceCloudRecordInfo %@",  *(void *)(a1 + 32));
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10007299C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000729D4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection modifyHMDeviceCloudRecordInfo:completion:]_block_invoke",  90LL,  "### modifyHMDeviceCloudRecordInfo failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_100072C6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100072CA4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection removeHMDeviceCloudRecordInfoForDeviceWithAddress:completion:]_block_invoke",  90LL,  "### DeviceManager failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_1000730B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000730F0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection startSoundProfileRecordFileHandleSessionWithCompletion:]_block_invoke",  90LL,  "### Failed to create sound profile with error: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_1000734F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_10007353C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection finishSoundProfileRecordSessionHandle:completion:]_block_invoke",  90LL,  "### Failed to create sound profile with error: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_1000735F8(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100073690;
  v5[3] = &unk_100205F68;
  id v6 = a2;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  dispatch_async(v3, v5);
}

void sub_100073690(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v1 endTransaction:@"createSoundProfileRecordURL"];
}

void sub_100073928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100073960(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection fetchSoundProfileRecordWithCompletion:]_block_invoke",  90LL,  "### Failed to fetch sound profile with error: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_100073A20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100073AD8;
  block[3] = &unk_1002089C0;
  id v11 = a3;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v12 = v5;
  id v13 = v7;
  id v8 = v5;
  id v9 = v11;
  dispatch_async(v6, block);
}

void sub_100073AD8(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    (*(void (**)(void, void, uint64_t))(a1[6] + 16LL))(a1[6], 0LL, v1);
  }

  else
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = a1[6];
    if (v2)
    {
      (*(void (**)(void, uint64_t, void))(v3 + 16))(a1[6], v2, 0LL);
    }

    else
    {
      uint64_t v4 = BTErrorF(4294960596LL, "No profile or error found");
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v5);
    }
  }

  id v6 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v6 endTransaction:@"fetchSoundProfileRecord"];
}

void sub_100073DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100073DE0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_1002345E8 <= 90)
    {
      if (dword_1002345E8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_1002345E8,  "-[BTCloudServicesXPCConnection deleteSoundProfileRecordWithCompletion:]_block_invoke",  90LL,  "### Failed to delete sound profile with error: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_100073E9C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100073F34;
  v5[3] = &unk_100205F68;
  id v6 = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  dispatch_async(v3, v5);
}

uint64_t sub_100073F34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100074058(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CloudXPCService);
  uint64_t v2 = (void *)qword_100237270;
  qword_100237270 = (uint64_t)v1;
}

id sub_1000742F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sigTermReceived];
}

void sub_10007468C(_Unwind_Exception *a1)
{
}

void sub_1000746D0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleEvent:v3];
}

void sub_100074718(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = @"kOnlineStatus";
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  id v7 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [WeakRetained sendCloudKitMsg:@"OnlineStatusChanged" argsObject:v5];
}

void sub_1000748A4(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
  [v1 removeAllObjects];
}

void sub_100074C98(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitConnection]);

  if (v2)
  {
    os_log_t v3 = sub_100060178("XPC");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Already established connection to bluetoothd",  v16,  2u);
    }

void sub_100074FBC(_Unwind_Exception *a1)
{
}

void sub_100074FD8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    os_log_t v13 = sub_100060178("XPC");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100190274();
    }
    goto LABEL_10;
  }

  if (!a2)
  {
    os_log_t v5 = sub_100060178("XPC");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      int v14 = 138412547;
      uint64_t v15 = v7;
      __int16 v16 = 2113;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending CK XPC object: (%@)%{private}@",  (uint8_t *)&v14,  0x16u);
    }

    id v9 = (os_log_s *)xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( v9, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10)
    {
      id v11 = (void *)_CFXPCCreateXPCObjectFromCFObject(v10);
      xpc_dictionary_set_value(v9, "kMsgArgs", v11);
    }

    uint64_t v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([WeakRetained cloudKitConnection]);
    xpc_connection_send_message(v12, v9);

LABEL_10:
  }
}

void sub_10007523C(_Unwind_Exception *a1)
{
}

void sub_100075258(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    os_log_t v17 = sub_100060178("XPC");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001902D4();
    }
    goto LABEL_13;
  }

  if (!a2)
  {
    os_log_t v5 = sub_100060178("XPC");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      int v19 = 138412547;
      uint64_t v20 = v7;
      __int16 v21 = 2113;
      uint64_t v22 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending CK XPC message: (%@)%{private}@",  (uint8_t *)&v19,  0x16u);
    }

    id v9 = (os_log_s *)xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( v9, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    if (*(void *)(a1 + 40))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deviceManager]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 cloudAccountInfo]);

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 loginID]);
      id v13 = [v12 length];

      if (v13)
      {
        int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 40)));
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v11 loginID]);
        [v14 setObject:v15 forKey:@"loginID"];

        __int16 v16 = (void *)_CFXPCCreateXPCMessageWithCFObject(v14);
        xpc_dictionary_set_value(v9, "kMsgArgs", v16);
      }

      else
      {
        int v14 = (void *)_CFXPCCreateXPCMessageWithCFObject(*(void *)(a1 + 40));
        xpc_dictionary_set_value(v9, "kMsgArgs", v14);
      }
    }

    uint64_t v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([WeakRetained cloudKitConnection]);
    xpc_connection_send_message(v18, v9);

LABEL_13:
  }
}

void sub_10007559C(_Unwind_Exception *a1)
{
}

void sub_1000755B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    os_log_t v9 = sub_100060178("XPC");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100190334();
    }
    goto LABEL_14;
  }

  os_log_t v5 = sub_100060178("XPC");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (!v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412547;
      uint64_t v21 = v11;
      __int16 v22 = 2113;
      uint64_t v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Reply: Sending CK XPC message: (%@)%{private}@",  buf,  0x16u);
    }

    uint64_t v10 = (os_log_s *)xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( v10, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      int v14 = (void *)_CFXPCCreateXPCObjectFromCFObject(v13);
      xpc_dictionary_set_value(v10, "kMsgArgs", v14);
    }

    uint64_t v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([WeakRetained cloudKitConnection]);
    __int16 v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained xpcQueue]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100075808;
    v17[3] = &unk_100208B20;
    id v19 = *(id *)(a1 + 48);
    id v18 = *(id *)(a1 + 32);
    xpc_connection_send_message_with_reply(v15, v10, v16, v17);

LABEL_14:
    goto LABEL_15;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_100190394();
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, &__NSDictionary0__struct, v3);
  }
LABEL_15:
}

void sub_100075808(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v8 = (void *)_CFXPCCreateCFObjectFromXPCObject(v3);
    os_log_t v16 = sub_100060178("XPC");
    os_log_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "received reply msg: %@", buf, 0xCu);
    }

    int v14 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"kMsgArgs"]);
    uint64_t v18 = *(void *)(a1 + 40);
    if (v14 && v18)
    {
      (*(void (**)(uint64_t, void *, void))(v18 + 16))(v18, v14, 0LL);
    }

    else
    {
      NSErrorUserInfoKey v23 = NSLocalizedFailureErrorKey;
      uint64_t v24 = @"Reply Key Not Found";
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"BTUserErrorDomain",  0LL,  v19));
      (*(void (**)(uint64_t, void *, void *))(v18 + 16))(v18, v5, v20);
    }

    goto LABEL_16;
  }

  os_log_t v6 = sub_100060178("XPC");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10019045C();
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unexpected object type from reply: %@",  v3));
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(v3, _xpc_error_key_description);
    os_log_t v10 = sub_100060178("XPC");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001903FC();
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", string));
    uint64_t v8 = (void *)v12;
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    NSErrorUserInfoKey v21 = NSLocalizedFailureErrorKey;
    __int16 v22 = v8;
    int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"BTUserErrorDomain",  0LL,  v14));
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v5, v15);

LABEL_16:
  }
}

void sub_100075C1C(_Unwind_Exception *a1)
{
}

void sub_100075C38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    os_log_t v8 = sub_100060178("XPC");
    os_log_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100190334();
    }
    goto LABEL_30;
  }

  if (!v3)
  {
    os_log_t v10 = sub_100060178("XPC");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void **)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412547;
      __int16 v40 = v12;
      __int16 v41 = 2113;
      uint64_t v42 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sync reply: Sending CK XPC message: (%@)%{private}@",  buf,  0x16u);
    }

    os_log_t v9 = (os_log_s *)xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( v9, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14)
    {
      uint64_t v15 = (void *)_CFXPCCreateXPCObjectFromCFObject(v14);
      xpc_dictionary_set_value(v9, "kMsgArgs", v15);
    }

    os_log_t v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([WeakRetained cloudKitConnection]);
    xpc_object_t v17 = xpc_connection_send_message_with_reply_sync(v16, v9);

    xpc_type_t type = xpc_get_type(v17);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      __int16 v22 = (void *)_CFXPCCreateCFObjectFromXPCObject(v17);
      os_log_t v30 = sub_100060178("XPC");
      __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "received sync reply msg: %@", buf, 0xCu);
      }

      id v28 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKey:@"kMsgArgs"]);
      uint64_t v32 = *(void *)(a1 + 48);
      if (v28 && v32)
      {
        (*(void (**)(uint64_t, void *, void))(v32 + 16))(v32, v28, 0LL);
      }

      else
      {
        NSErrorUserInfoKey v37 = NSLocalizedFailureErrorKey;
        uint64_t v38 = @"Reply Key Not Found";
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
        id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"BTUserErrorDomain",  0LL,  v33));
        (*(void (**)(uint64_t, void *, void *))(v32 + 16))(v32, v19, v34);
      }
    }

    else
    {
      os_log_t v20 = sub_100060178("XPC");
      NSErrorUserInfoKey v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100190520();
      }

      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unexpected object type from reply: %@",  v17));
      if (type == (xpc_type_t)&_xpc_type_error)
      {
        string = xpc_dictionary_get_string(v17, _xpc_error_key_description);
        os_log_t v24 = sub_100060178("XPC");
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_1001904BC();
        }

        uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", string));
        __int16 v22 = (void *)v26;
      }

      uint64_t v27 = *(void *)(a1 + 48);
      if (!v27) {
        goto LABEL_29;
      }
      NSErrorUserInfoKey v35 = NSLocalizedFailureErrorKey;
      id v36 = v22;
      id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"BTUserErrorDomain",  0LL,  v28));
      (*(void (**)(uint64_t, void *, void *))(v27 + 16))(v27, v19, v29);
    }

LABEL_29:
LABEL_30:

    goto LABEL_31;
  }

  os_log_t v5 = sub_100060178("CloudPairing");
  os_log_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_100190584();
  }

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, &__NSDictionary0__struct, v3);
  }
LABEL_31:
}

void sub_100077C1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3 && *(_BYTE *)(a1 + 32))
  {
    dispatch_async(&_dispatch_main_q, &stru_100208B68);
    id v3 = 0LL;
  }
}

void sub_100077C6C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](&OBJC_CLASS___MPCloudKit, "sharedInstance"));
  [v1 fetchKeyBlob:0];
}

LABEL_101:
LABEL_102:
              goto LABEL_48;
            }

            if (!v16) {
              goto LABEL_55;
            }
            __int16 v59 = -[CloudXPCService manateeZoneUpgraded](self, "manateeZoneUpgraded");
            id v60 = xpc_dictionary_get_value(v16, "kDeviceInfoBlob");
            id v36 = (void *)objc_claimAutoreleasedReturnValue(v60);
            xpc_data_get_length(v36);
            __chkstk_darwin();
            __int16 v62 = (char *)&v160[-1] - v61;
            length = xpc_data_get_length(v36);
            bytes = xpc_data_get_bytes(v36, v62, 0LL, length);
            if ((v59 & 1) != 0)
            {
              if (!bytes) {
                goto LABEL_48;
              }
              id v65 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v62,  xpc_data_get_length(v36));
              uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
              id v67 = sub_100060178("XPC");
              id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v182 = (uint64_t)v66;
                _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Manatee Accessory blob %@",  buf,  0xCu);
              }

              if (v66)
              {
                __int128 v69 = &OBJC_CLASS___MPCloudKit_Manatee;
LABEL_108:
                unsigned int v83 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](v69, "sharedInstance"));
                [v83 updateCloudKitAccessoryZone:v66 delete:0];
              }
            }

            else
            {
              if (!bytes) {
                goto LABEL_48;
              }
              __int128 v80 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v62,  xpc_data_get_length(v36));
              uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v80);
              __int128 v81 = sub_100060178("XPC");
              uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v182 = (uint64_t)v66;
                _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, " Accessory blob %@", buf, 0xCu);
              }

              if (v66)
              {
                __int128 v69 = &OBJC_CLASS___MPCloudKit;
                goto LABEL_108;
              }
            }

            goto LABEL_48;
          }

          if (!v16) {
            goto LABEL_55;
          }
          __int16 v51 = -[CloudXPCService manateeZoneUpgraded](self, "manateeZoneUpgraded");
          id v52 = xpc_dictionary_get_value(v16, "kMasterKeyBlob");
          id v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
          id v36 = v53;
          if ((v51 & 1) != 0)
          {
            if (xpc_data_get_bytes(v53, buf, 0LL, 0x21uLL))
            {
              os_log_t v54 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  buf,  xpc_data_get_length(v36));
              uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
              unint64_t v56 = sub_100060178("XPC");
              __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v177 = 138412290;
                v178 = v55;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Manatee Data blob %@", v177, 0xCu);
              }

              if (!v55) {
                goto LABEL_102;
              }
              os_log_t v58 = &OBJC_CLASS___MPCloudKit_Manatee;
              goto LABEL_97;
            }
          }

          else if (xpc_data_get_bytes(v53, buf, 0LL, 0x21uLL))
          {
            unsigned int v75 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  buf,  xpc_data_get_length(v36));
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v75);
            unsigned int v76 = sub_100060178("XPC");
            id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v177 = 138412290;
              v178 = v55;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, " Data blob %@", v177, 0xCu);
            }

            if (!v55) {
              goto LABEL_102;
            }
            os_log_t v58 = &OBJC_CLASS___MPCloudKit;
LABEL_97:
            __int128 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](v58, "sharedInstance"));
            -[os_log_s updateCloudKitBlobZone:](v78, "updateCloudKitBlobZone:", v55);
            goto LABEL_101;
          }

  CKRecordKeyValueSetting.subscript.getter( &v141,  0x74656863746172LL,  0xE700000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  v118 = v142;
  uint64_t v119 = (uint64_t *)(v139 + v140[24]);
  int v121 = *v119;
  v120 = v119[1];
  if (!v142) {
    goto LABEL_106;
  }
  if (v141 != v121 || v142 != v120)
  {
    int v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v119, v119[1], 0LL);
    swift_bridgeObjectRelease(v118);
    if ((v122 & 1) != 0) {
      goto LABEL_107;
    }
LABEL_106:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v121;
    v142 = v120;
    swift_bridgeObjectRetain(v120);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x74656863746172LL, 0xE700000000000000LL, ObjectType);
    goto LABEL_107;
  }

  swift_bridgeObjectRelease(v142);
LABEL_107:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x73676E6974746573LL,  0xEC0000006B73614DLL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unsigned int v123 = v142;
  char v124 = (uint64_t *)(v139 + v140[26]);
  unsigned __int8 v126 = *v124;
  unsigned __int8 v125 = v124[1];
  if (!v142) {
    goto LABEL_112;
  }
  if (v141 == v126 && v142 == v125)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_113;
  }

  BOOL v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v124, v124[1], 0LL);
  swift_bridgeObjectRelease(v123);
  if ((v127 & 1) == 0)
  {
LABEL_112:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v126;
    v142 = v125;
    swift_bridgeObjectRetain(v125);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x73676E6974746573LL, 0xEC0000006B73614DLL, ObjectType);
  }

void sub_100079A44(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  os_log_t v6 = v9;
  if (v9)
  {
    BOOL v7 = [v9 accountStatus] == (id)1;
    os_log_t v6 = v9;
    if (v7)
    {
      uint64_t v8 = 1LL;
LABEL_7:
      [*(id *)(a1 + 32) accountStatusAvailable:v8 force:1];
      goto LABEL_8;
    }
  }

  if ([v6 accountStatus] != (id)4)
  {
    uint64_t v8 = 0LL;
    goto LABEL_7;
  }

void sub_100079AD4(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  os_log_t v6 = v12;
  if (v12)
  {
    BOOL v7 = [v12 accountStatus] == (id)1;
    os_log_t v6 = v12;
    if (v7)
    {
      uint64_t v8 = *(void **)(a1 + 32);
      uint64_t v9 = (uint64_t)[v12 supportsDeviceToDeviceEncryption];
      os_log_t v10 = v8;
      uint64_t v11 = 1LL;
LABEL_7:
      [v10 accountStatusAvailable:v11 force:v9];
      goto LABEL_8;
    }
  }

  if ([v6 accountStatus] != (id)4)
  {
    os_log_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = 0LL;
    uint64_t v9 = 1LL;
    goto LABEL_7;
  }

void sub_100079B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_100079BFC;
  v6[3] = &unk_100206358;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  dispatch_async(&_dispatch_main_q, v6);
}

void sub_100079BFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 length] == (id)33)
    {
      id v3 = *(void **)(a1 + 40);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  *(void *)(a1 + 32),  @"kMasterKeyBlob",  0LL));
      [v3 sendCloudKitMsg:@"MasterKeysAvailable" args:v4];
    }
  }

  else
  {
    unsigned __int8 v5 = [*(id *)(a1 + 40) manateeZoneUpgraded];
    os_log_t v6 = sub_100060178("XPC");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if ((v5 & 1) != 0)
    {
      if (v8)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee getMasterKey", buf, 2u);
      }

      uint64_t v9 = &OBJC_CLASS___MPCloudKit_Manatee;
    }

    else
    {
      if (v8)
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "getMasterKey", v13, 2u);
      }

      uint64_t v9 = &OBJC_CLASS___MPCloudKit;
    }

    os_log_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](v9, "sharedInstance"));
    [v10 fetchKeyBlob:0];
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceManager]);
  [v11 fetchCached];
}

void sub_100079D4C(void *a1, void *a2)
{
  xpc_object_t original = a1;
  id v3 = a2;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    if (v3)
    {
      unsigned __int8 v5 = (void *)_CFXPCCreateXPCObjectFromCFObject(v3);
      xpc_dictionary_set_value(reply, "kMsgArgs", v5);
    }

    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(original);
    id v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    xpc_connection_send_message(v7, reply);
  }
}

void sub_100079DE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    os_log_t v4 = sub_100060178("XPC");
    unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100190A50();
    }

    os_log_t v6 = *(void **)(a1 + 32);
    uint64_t v9 = @"error";
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
    os_log_t v10 = v7;
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    sub_100079D4C(v6, v8);
  }

  else
  {
    sub_100079D4C(*(void **)(a1 + 32), &off_100218E18);
  }
}

void sub_100079EF0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    v5[0] = @"status";
    v5[1] = @"devices";
    v6[0] = &off_100219170;
    v6[1] = a2;
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  2LL));
    sub_100079D4C(v2, v4);
  }

  else
  {
    id v4 = 0LL;
    sub_100079D4C(v2, &off_100218E40);
  }
}

void sub_100079FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("XPC");
  unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Add nickname Error? - %@", (uint8_t *)&v7, 0xCu);
  }

  if (v3) {
    os_log_t v6 = &off_100218E68;
  }
  else {
    os_log_t v6 = &off_100218E90;
  }
  sub_100079D4C(*(void **)(a1 + 32), v6);
}

void sub_10007A0A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("XPC");
  unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Add nickname Error? - %@", (uint8_t *)&v7, 0xCu);
  }

  if (v3) {
    os_log_t v6 = &off_100218F08;
  }
  else {
    os_log_t v6 = &off_100218F30;
  }
  sub_100079D4C(*(void **)(a1 + 32), v6);
}

void sub_10007A180(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("XPC");
  unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Reset Cached Data, error? - %@",  (uint8_t *)&v7,  0xCu);
  }

  if (v3) {
    os_log_t v6 = &off_100218FA8;
  }
  else {
    os_log_t v6 = &off_100218FD0;
  }
  sub_100079D4C(*(void **)(a1 + 32), v6);
}

void sub_10007A25C(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = v3;
  if (v3)
  {
    v16[0] = @"bluetoothAddress";
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bluetoothAddress]);
    v16[1] = @"nickname";
    v17[0] = v5;
    os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 nickname]);
    v17[1] = v6;
    int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL));
    id v13 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v7,  0LL,  &v13));
    id v9 = v13;

    os_log_t v10 = *(void **)(a1 + 32);
    if (!v8 || v9)
    {
      sub_100079D4C(v10, &__NSDictionary0__struct);
    }

    else
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[XPCArguments CloudDevice](&OBJC_CLASS____TtC15audioaccessoryd12XPCArguments, "CloudDevice"));
      uint64_t v14 = v11;
      uint64_t v15 = v8;
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      sub_100079D4C(v10, v12);
    }
  }

  else
  {
    sub_100079D4C(*(void **)(a1 + 32), &__NSDictionary0__struct);
  }
}

void sub_10007A4C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionIdentifierForActionIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
  os_log_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v2]);

  os_log_t v5 = sub_100060178("TXN");
  os_log_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      int v13 = 138412290;
      uint64_t v14 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Already holding xpc transaction: %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  else
  {
    if (v7)
    {
      int v13 = 138412290;
      uint64_t v14 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Beginning xpc transaction: %@",  (uint8_t *)&v13,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
    id v9 = v2;
    os_log_t v10 = (void *)os_transaction_create([v9 UTF8String]);
    [v8 setObject:v10 forKey:v9];

    os_log_t v11 = sub_100060178("TXN");
    os_log_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Active transactions: %@",  (uint8_t *)&v13,  0xCu);
    }
  }
}

void sub_10007A740(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionIdentifierForActionIdentifier:*(void *)(a1 + 40)]);
  os_log_t v3 = sub_100060178("TXN");
  os_log_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Ending xpc transaction: %@",  (uint8_t *)&v11,  0xCu);
  }

  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
  os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v2]);

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
  [v7 removeObjectForKey:v2];

  os_log_t v8 = sub_100060178("TXN");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTransactions]);
    int v11 = 138412290;
    id v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Active transactions: %@", (uint8_t *)&v11, 0xCu);
  }
}

void sub_10007AA74(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

void sub_10007AE30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10007AE4C(uint64_t a1)
{
  unsigned int v2 = +[BTSystemConfiguration isBuddyComplete](&OBJC_CLASS___BTSystemConfiguration, "isBuddyComplete");
  os_log_t v3 = sub_100060178("MagicPairing");
  id WeakRetained = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Buddy State Done", buf, 2u);
    }

    id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(a1 + 32));
    -[os_log_s buddySetupDone](WeakRetained, "buddySetupDone");
  }

  else if (v5)
  {
    *(_WORD *)os_log_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Manatee: Buddy State Update, Not Done",  v6,  2u);
  }
}

uint64_t sub_10007B0A8(uint64_t a1)
{
  int out_token = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10007B118;
  v2[3] = &unk_100208220;
  int v3 = 0;
  v2[4] = *(void *)(a1 + 32);
  return notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, &_dispatch_main_q, v2);
}

id sub_10007B118(uint64_t a1)
{
  os_log_t v2 = sub_100060178("MagicPairing");
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Manatee: device unlocked after boot ", v5, 2u);
  }

  notify_cancel(*(_DWORD *)(a1 + 40));
  return [*(id *)(a1 + 32) initializeCloudKit];
}

void sub_10007B230(id a1, int64_t a2, NSError *a3)
{
  os_log_t v4 = a3;
  os_log_t v5 = sub_100060178("MagicPairing");
  os_log_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218242;
    int64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Manatee: forceAccountStatus accountStatusWithCompletionHandler accountStatus %ld error %@",  (uint8_t *)&v11,  0x16u);
  }

  if (!v4)
  {
    if (a2 == 1)
    {
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v8 = v9;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (a2 == 4)
      {
        os_log_t v7 = sub_100060178("MagicPairing");
        os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manatee: forceAccountStatus Account Available but Not Ready, Try again in sometime...",  (uint8_t *)&v11,  2u);
        }

        goto LABEL_11;
      }

      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v8 = v9;
      uint64_t v10 = 0LL;
    }

    -[os_log_s accountStatusAvailable:force:](v9, "accountStatusAvailable:force:", v10, 1LL);
LABEL_11:
  }
}

uint64_t sub_10007B774(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007BB08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10007BB2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      uint64_t v28 = a2;
      __int16 v29 = 2112;
      id v30 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Manatee accountStatusWithCompletionHandler accountStatus %ld error %@",  buf,  0x16u);
    }

    if (!v5)
    {
      if (a2 == 1)
      {
        [WeakRetained setIsAccountActive:1];
        dispatch_time_t v10 = dispatch_time(0LL, 5000000000LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10007BF74;
        block[3] = &unk_100206058;
        void block[4] = WeakRetained;
        dispatch_after(v10, &_dispatch_main_q, block);
        os_log_t v11 = sub_100060178("MagicPairing");
        int64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v13 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v28 = 1LL;
          __int16 v29 = 1024;
          LODWORD(v30) = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Manatee accountStatusDidChange Accounts available accountStatus %ld self.isAccountActive %d \n",  buf,  0x12u);
        }
      }

      else if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        [WeakRetained setIsAccountActive:0];
        [WeakRetained setMasterBlob:0];
        [WeakRetained setShouldPauseFetch:0];
        [WeakRetained setPauseErrorReason:0];
        [WeakRetained setIsFetchInProgress:0];
        [WeakRetained setIsFetchMasterKeyInProgress:0];
        id v14 = objc_loadWeakRetained((id *)(a1 + 40));
        unsigned __int8 v15 = [v14 reinitAfterBuddy];

        os_log_t v16 = sub_100060178("MagicPairing");
        xpc_object_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if ((v15 & 1) != 0)
        {
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Not sending accounts status, since we are still in buddy. ",  buf,  2u);
          }
        }

        else
        {
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Manatee Sending accounts status, as signed out. ",  buf,  2u);
          }

          id v19 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
          objc_msgSend(v19, "accountStatusAvailable:force:", objc_msgSend(*(id *)(a1 + 32), "isAccountActive"), 0);

          os_log_t v20 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
          if (v20)
          {
            [WeakRetained removeuserPreference:@"MagicCloudPairingManateeUpgradedAccount" sync:1];
            os_log_t v21 = sub_100060178("MagicPairing");
            __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Manatee delete kMagicCloudPairingManateeUpgraded key",  buf,  2u);
            }
          }

          [*(id *)(a1 + 32) removeuserPreference:@"MagicCloudPairingMasterSubscriptionManateeID" sync:1];
          [*(id *)(a1 + 32) removeuserPreference:@"MagicCloudPairingAccessorySubscriptionManateeID" sync:1];
          [*(id *)(a1 + 32) removeuserPreference:@"MagicPairingMasterKeySubscriptionManateeDisabled" sync:1];
        }

        os_log_t v23 = sub_100060178("MagicPairing");
        os_log_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v25 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v28 = a2;
          __int16 v29 = 1024;
          LODWORD(v30) = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "accountStatusDidChange Account unavailable accountStatus %ld self.isAccountActive %d \n",  buf,  0x12u);
        }
      }
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100190BC8();
    }
  }
}

void sub_10007BF74(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  objc_msgSend(v2, "accountStatusAvailable:force:", objc_msgSend(*(id *)(a1 + 32), "isAccountActive"), 0);
}

id sub_10007C22C(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:0];
}

void sub_10007C2C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([v5 accountStatus] == (id)1
      && [v5 supportsDeviceToDeviceEncryption])
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_10007C3A0;
      v10[3] = &unk_100206E98;
      uint64_t v7 = *(void *)(a1 + 40);
      v10[4] = *(void *)(a1 + 32);
      v10[5] = v7;
      dispatch_async(&_dispatch_main_q, v10);
    }

    else
    {
      os_log_t v8 = sub_100060178("MagicPairing");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100190BF4();
      }
    }
  }
}

id sub_10007C3A0(uint64_t a1)
{
  os_log_t v2 = sub_100060178("MagicPairing");
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob Account manateeZoneAvailable ",  v5,  2u);
  }

  return [*(id *)(a1 + 32) _fetchKeyBlob:*(void *)(a1 + 40)];
}

void sub_10007C89C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_10007C8C8(uint64_t a1, void *a2, void *a3)
{
  id v74 = a2;
  id v5 = a3;
  os_log_t v6 = sub_100060178("MagicPairing");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v8 = (void *)objc_claimAutoreleasedReturnValue([v74 recordID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);
    *(_DWORD *)buf = 138412802;
    unint64_t v86 = (unint64_t)v5;
    __int16 v87 = 2112;
    id v88 = v9;
    __int16 v89 = 2112;
    id v90 = v74;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob completion error %@ recordZoneID %@, record: %@",  buf,  0x20u);
  }

  dispatch_time_t v10 = &OBJC_CLASS___AADeviceManagerDaemon;
  if (!v5)
  {
    os_log_t v16 = (void *)objc_claimAutoreleasedReturnValue([v74 recordID]);
    xpc_object_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneID]);
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue([v17 zoneName]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneBlob]);
    os_log_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneID]);
    os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneName]);
    unsigned int v22 = [v18 isEqualToString:v21];

    dispatch_time_t v10 = &OBJC_CLASS___AADeviceManagerDaemon;
    if (!v22) {
      goto LABEL_25;
    }
    os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue([v74 encryptedValues]);
    id WeakRetained = (id)objc_claimAutoreleasedReturnValue([v23 objectForKey:@"EncryptedMasterKeyBlob"]);

    os_log_t v24 = sub_100060178("MagicPairing");
    unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v86 = (unint64_t)WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob record %@", buf, 0xCu);
    }

    if ((unint64_t)[WeakRetained length] > 0x20)
    {
      v75[0] = _NSConcreteStackBlock;
      v75[1] = 3221225472LL;
      v75[2] = sub_10007D294;
      v75[3] = &unk_100206490;
      id v41 = WeakRetained;
      uint64_t v42 = *(void *)(a1 + 32);
      id v76 = v41;
      uint64_t v77 = v42;
      id v78 = v74;
      dispatch_async(&_dispatch_main_q, v75);
    }

    else
    {
      os_log_t v26 = sub_100060178("MagicPairing");
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob NO record", buf, 2u);
      }

      dispatch_async(&_dispatch_main_q, &stru_100208CC8);
    }

    goto LABEL_9;
  }

  if ([v5 code] == (id)26 || objc_msgSend(v5, "code") == (id)11)
  {
    os_log_t v11 = sub_100060178("MagicPairing");
    int64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob CKErrorZoneNotFound or Record does not exist",  buf,  2u);
    }

    buf[0] = 0;
    id WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 1LL));
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v14,  @"kMasterKeyBlob",  0LL));
    [WeakRetained sendCloudKitMsg:@"MasterKeysNotAvailable" args:v15];

    goto LABEL_9;
  }

  if ([v5 code] == (id)6 || objc_msgSend(v5, "code") == (id)7)
  {
    os_log_t v28 = sub_100060178("MagicPairing");
    __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v86 = (unint64_t)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob unavailable service: %@",  buf,  0xCu);
    }

    id v30 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v31)
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v33 doubleValue];
      double v35 = v34;

      os_log_t v36 = sub_100060178("MagicPairing");
      NSErrorUserInfoKey v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v86 = (unint64_t)v35;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob retry after %lu",  buf,  0xCu);
      }

      dispatch_time_t v38 = dispatch_time(0LL, (uint64_t)(v35 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10007D1E0;
      block[3] = &unk_100206E98;
      uint64_t v39 = *(void *)(a1 + 48);
      void block[4] = *(void *)(a1 + 32);
      void block[5] = v39;
      dispatch_after(v38, &_dispatch_main_q, block);
    }
  }

  else
  {
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
    uint64_t v44 = CKErrorDomain;
    if ([v43 isEqualToString:CKErrorDomain])
    {
      id v45 = [v5 code];

      if (v45 == (id)112)
      {
        os_log_t v46 = sub_100060178("MagicPairing");
        __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob lost access to manatee data. Reset and recreate zone.",  buf,  2u);
        }

        os_log_t v48 = sub_100060178("MagicPairing");
        __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob. Reset and recreate zone DONE!",  buf,  2u);
        }

        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
        [WeakRetained resetCloudContainerManateeIdentityLost];
        goto LABEL_9;
      }
    }

    else
    {
    }

    id WeakRetained = (id)objc_claimAutoreleasedReturnValue([v5 domain]);
    if (([WeakRetained isEqualToString:CKErrorDomain] & 1) == 0)
    {
LABEL_9:

      goto LABEL_25;
    }

    unint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    dispatch_time_t v10 = &OBJC_CLASS___AADeviceManagerDaemon;
    if (v51)
    {
      uint64_t v73 = a1;
      id v52 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
      id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      __int128 v81 = 0u;
      __int128 v82 = 0u;
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      id v54 = v53;
      id v55 = [v54 countByEnumeratingWithState:&v79 objects:v84 count:16];
      if (v55)
      {
        id v56 = v55;
        uint64_t v57 = *(void *)v80;
        os_log_t v58 = &IDSSendMessageOptionQueueOneIdentifierKey_ptr;
        while (2)
        {
          for (i = 0LL; i != v56; i = (char *)i + 1)
          {
            if (*(void *)v80 != v57) {
              objc_enumerationMutation(v54);
            }
            id v60 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKey:*(void *)(*((void *)&v79 + 1) + 8 * (void)i)]);
            uint64_t v61 = objc_opt_class(v58[117]);
            if ((objc_opt_isKindOfClass(v60, v61) & 1) != 0)
            {
              __int16 v62 = (void *)objc_claimAutoreleasedReturnValue([v60 domain]);
              if ([v62 isEqualToString:v44])
              {
                id v63 = v58;
                __int128 v64 = v44;
                id v65 = [v60 code];

                BOOL v66 = v65 == (id)112;
                uint64_t v44 = v64;
                os_log_t v58 = v63;
                if (v66)
                {
                  os_log_t v67 = sub_100060178("MagicPairing");
                  id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
                  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    unint64_t v86 = (unint64_t)v60;
                    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob lost access to manatee data. Reset and recreate zone due to - %@",  buf,  0xCu);
                  }

                  os_log_t v70 = sub_100060178("MagicPairing");
                  __int128 v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
                  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchKeyBlob. Reset and recreate zone DONE!",  buf,  2u);
                  }

                  id v72 = objc_loadWeakRetained((id *)(v73 + 40));
                  [v72 resetCloudContainerManateeIdentityLost];

                  goto LABEL_56;
                }
              }

              else
              {
              }
            }
          }

          id v56 = [v54 countByEnumeratingWithState:&v79 objects:v84 count:16];
          if (v56) {
            continue;
          }
          break;
        }
      }

id sub_10007D1E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_10007D1F0(id a1)
{
  char v4 = 0;
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v4, 1LL));
  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v2,  @"kMasterKeyBlob",  0LL));
  [v1 sendCloudKitMsg:@"MasterKeysNotAvailable" args:v3];
}

void sub_10007D294(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)33)
  {
    os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) masterBlob]);

    if (!v2)
    {
      int v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);

      if (!v3)
      {
        [*(id *)(a1 + 40) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
        char v4 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](&OBJC_CLASS___MPCloudKit, "sharedInstance"));
        [v4 markLegacyNonManateeContainerMigrated];
      }

      id v5 = [*(id *)(a1 + 32) mutableCopy];
      [*(id *)(a1 + 40) setMasterBlob:v5];

      os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  *(void *)(a1 + 32),  @"kMasterKeyBlob",  0LL));
      [v6 sendCloudKitMsg:@"MasterKeysAvailable" args:v7];

      os_log_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceManager]);
      [v9 addAccountMagicKeysWithCloudRecord:*(void *)(a1 + 48)];

      [*(id *)(a1 + 40) fetchAccessoryKeyBlob:0];
    }
  }

void sub_10007D5C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10007D5F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    os_log_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
    if ([v6 isEqualToString:CKErrorDomain])
    {
      if ([v4 code] == (id)3 || objc_msgSend(v4, "code") == (id)4)
      {

LABEL_6:
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
        os_log_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:CKErrorRetryAfterKey]);

        if (v8)
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
          dispatch_time_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:CKErrorRetryAfterKey]);
          [v10 doubleValue];
          double v12 = v11;

          int64_t v13 = (uint64_t)(v12 * 1000000000.0);
        }

        else
        {
          int64_t v13 = 60000000000LL;
        }

        dispatch_time_t v16 = dispatch_time(0LL, v13);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10007D7FC;
        block[3] = &unk_100208320;
        void block[4] = WeakRetained;
        id v17 = *(id *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 48);
        id v21 = v17;
        uint64_t v22 = v18;
        dispatch_after(v16, &_dispatch_main_q, block);

        goto LABEL_13;
      }

      id v19 = [v4 code];

      if (v19 == (id)9) {
        goto LABEL_6;
      }
    }

    else
    {
    }

id sub_10007D7FC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkAccountStatusWithCompletionHandler:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10007D868(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([v5 accountStatus] == (id)1
      && [v5 supportsDeviceToDeviceEncryption])
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_10007D948;
      v10[3] = &unk_100206E98;
      uint64_t v7 = *(void *)(a1 + 40);
      v10[4] = *(void *)(a1 + 32);
      v10[5] = v7;
      dispatch_async(&_dispatch_main_q, v10);
    }

    else
    {
      os_log_t v8 = sub_100060178("MagicPairing");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100190C78();
      }
    }
  }
}

id sub_10007D948(uint64_t a1)
{
  os_log_t v2 = sub_100060178("MagicPairing");
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob Account manateeZoneAvailable ",  v5,  2u);
  }

  return [*(id *)(a1 + 32) _fetchAccessoryKeyBlob:*(void *)(a1 + 40)];
}

void sub_10007DD18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10007DD44(uint64_t a1, void *a2, void *a3)
{
  uint64_t v71 = a1;
  id v72 = a2;
  id v4 = a3;
  os_log_t v5 = sub_100060178("MagicPairing");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v72 recordID]);
    os_log_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
    *(_DWORD *)buf = 138412802;
    unint64_t v82 = (unint64_t)v4;
    __int16 v83 = 2112;
    id v84 = v8;
    __int16 v85 = 2112;
    id v86 = v72;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob completion error %@ recordZoneID %@, record: %@",  buf,  0x20u);
  }

  id v9 = &OBJC_CLASS___AADeviceManagerDaemon;
  if (!v4)
  {
    double v12 = (void *)objc_claimAutoreleasedReturnValue([v72 recordID]);
    int64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
    os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 zoneName]);
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v71 + 32) recordZoneAccessoryDatabase]);
    dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneID]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
    unsigned int v18 = [v14 isEqualToString:v17];

    id v9 = &OBJC_CLASS___AADeviceManagerDaemon;
    if (!v18) {
      goto LABEL_27;
    }
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v72 encryptedValues]);
    id WeakRetained = (id)objc_claimAutoreleasedReturnValue([v19 objectForKey:@"EncryptedAccessoryBlob"]);

    os_log_t v21 = sub_100060178("MagicPairing");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue([v72 modifiedByDevice]);
      *(_DWORD *)buf = 138412546;
      unint64_t v82 = (unint64_t)v23;
      __int16 v83 = 2112;
      id v84 = WeakRetained;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Manatee: Record Modified by %@: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@",  buf,  0x16u);
    }

    if ((unint64_t)[WeakRetained length] >= 0x99)
    {
      os_log_t v24 = sub_100060178("MagicPairing");
      unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Manatee: Accessory zone has been upgraded. Dont generate keys",  buf,  2u);
      }

      os_log_t v26 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v71 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);
      if (!v26)
      {
        [*(id *)(v71 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](&OBJC_CLASS___MPCloudKit, "sharedInstance"));
        [v27 markLegacyNonManateeContainerMigrated];
      }

      os_log_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance", v71));
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 deviceManager]);
      [v29 addLegacyMagicPairingRecordsWithCloudRecord:v72 userInitiated:0 completion:&stru_100208D58];
    }

    goto LABEL_18;
  }

  if ([v4 code] == (id)26 || objc_msgSend(v4, "code") == (id)11)
  {
    os_log_t v10 = sub_100060178("MagicPairing");
    double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob CKErrorZoneNotFound",  buf,  2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007E618;
    block[3] = &unk_100206358;
    void block[4] = *(void *)(v71 + 32);
    id v79 = v4;
    dispatch_async(&_dispatch_main_q, block);

    goto LABEL_27;
  }

  if ([v4 code] == (id)6 || objc_msgSend(v4, "code") == (id)7)
  {
    os_log_t v30 = sub_100060178("MagicPairing");
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_100190CD0();
    }

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v33)
    {
      double v34 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
      double v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v35 doubleValue];
      double v37 = v36;

      os_log_t v38 = sub_100060178("MagicPairing");
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v82 = (unint64_t)v37;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu",  buf,  0xCu);
      }

      dispatch_time_t v40 = dispatch_time(0LL, (uint64_t)(v37 * 1000000000.0));
      v77[0] = _NSConcreteStackBlock;
      v77[1] = 3221225472LL;
      v77[2] = sub_10007E6E0;
      v77[3] = &unk_100206E98;
      uint64_t v41 = *(void *)(v71 + 48);
      v77[4] = *(void *)(v71 + 32);
      v77[5] = v41;
      dispatch_after(v40, &_dispatch_main_q, v77);
    }

    goto LABEL_27;
  }

  id v43 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
  uint64_t v44 = CKErrorDomain;
  if ([v43 isEqualToString:CKErrorDomain])
  {
    id v45 = [v4 code];

    if (v45 == (id)112)
    {
      os_log_t v46 = sub_100060178("MagicPairing");
      __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob lost access to manatee data. Reset and recreate zone.",  buf,  2u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(v71 + 40));
      [WeakRetained resetCloudContainerManateeIdentityLost];
      goto LABEL_18;
    }
  }

  else
  {
  }

  id WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain", v71));
  if (([WeakRetained isEqualToString:CKErrorDomain] & 1) == 0)
  {
LABEL_18:

    goto LABEL_27;
  }

  os_log_t v48 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

  id v9 = &OBJC_CLASS___AADeviceManagerDaemon;
  if (v49)
  {
    unint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
    __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    id v52 = v51;
    id v53 = [v52 countByEnumeratingWithState:&v73 objects:v80 count:16];
    if (v53)
    {
      id v54 = v53;
      uint64_t v55 = *(void *)v74;
      id v56 = &IDSSendMessageOptionQueueOneIdentifierKey_ptr;
      while (2)
      {
        for (i = 0LL; i != v54; i = (char *)i + 1)
        {
          if (*(void *)v74 != v55) {
            objc_enumerationMutation(v52);
          }
          os_log_t v58 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKey:*(void *)(*((void *)&v73 + 1) + 8 * (void)i)]);
          uint64_t v59 = objc_opt_class(v56[117]);
          if ((objc_opt_isKindOfClass(v58, v59) & 1) != 0)
          {
            id v60 = (void *)objc_claimAutoreleasedReturnValue([v58 domain]);
            if ([v60 isEqualToString:v44])
            {
              uint64_t v61 = v56;
              __int16 v62 = v44;
              id v63 = [v58 code];

              BOOL v64 = v63 == (id)112;
              uint64_t v44 = v62;
              id v56 = v61;
              if (v64)
              {
                os_log_t v65 = sub_100060178("MagicPairing");
                BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
                if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  unint64_t v82 = (unint64_t)v58;
                  _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob lost access to manatee data. Reset and recreate zone due to - %@",  buf,  0xCu);
                }

                os_log_t v68 = sub_100060178("MagicPairing");
                __int128 v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAccessoryKeyBlob. Reset and recreate zone DONE!",  buf,  2u);
                }

                id v70 = objc_loadWeakRetained((id *)(v71 + 40));
                [v70 resetCloudContainerManateeIdentityLost];

                goto LABEL_55;
              }
            }

            else
            {
            }
          }
        }

        id v54 = [v52 countByEnumeratingWithState:&v73 objects:v80 count:16];
        if (v54) {
          continue;
        }
        break;
      }
    }

void sub_10007E618(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceManager]);
  [v2 deleteLegacyMagicPairingRecordsWithUserInitiated:0 completion:&stru_100208D38];
}

void sub_10007E688(id a1, NSError *a2)
{
  os_log_t v2 = a2;
  os_log_t v3 = sub_100060178("MagicPairing");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100190D30();
  }
}

id sub_10007E6E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_10007E6F0(id a1, NSError *a2)
{
  os_log_t v2 = a2;
  if (v2)
  {
    os_log_t v3 = sub_100060178("MagicPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100190D90();
    }
  }
}

void sub_10007E9F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100190DF0();
    }

    [*(id *)(a1 + 32) handleModifyMasterKeyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48)];
  }

  else if (v5)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
    os_log_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"]);
    [*(id *)(a1 + 32) setMasterBlob:v10];

    double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) masterBlob]);
    id v12 = [v11 length];

    if (v12 == (id)33)
    {
      os_log_t v13 = sub_100060178("MagicPairing");
      os_log_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) masterBlob]);
        *(_DWORD *)buf = 138412290;
        os_log_t v26 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetched existing master key record: encryptedBlob %@",  buf,  0xCu);
      }

      dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) masterBlob]);
      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v17,  @"kMasterKeyBlob",  0LL));
      [v16 sendCloudKitMsg:@"MasterKeysAvailable" args:v18];

      id v19 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 deviceManager]);
      [v20 addAccountMagicKeysWithCloudRecord:v5];
    }

    [*(id *)(a1 + 32) setIsWriteMasterKeysInProgress:0];
  }

  else
  {
    os_log_t v21 = sub_100060178("MagicPairing");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v23 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      os_log_t v26 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Manatee: No master key record found: write new key: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:0];
  }

  os_log_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v24 endTransaction:@"ManateeModifyKeyBlob"];
}

id sub_10007F338(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10007F7C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
}

uint64_t sub_10007F81C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007F82C(uint64_t a1)
{
}

void sub_10007F834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    os_log_t v21 = sub_100060178("MagicPairing");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v75 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob saveRecordZone record  %@",  buf,  0xCu);
    }

    os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
    v61[0] = _NSConcreteStackBlock;
    v61[2] = sub_10007FF5C;
    v61[3] = &unk_100208D80;
    uint64_t v24 = *(void *)(a1 + 80);
    uint64_t v64 = *(void *)(a1 + 64);
    uint64_t v65 = v24;
    unsigned int v25 = *(void **)(a1 + 40);
    v61[4] = *(void *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 48);
    v61[1] = 3221225472LL;
    id v62 = v25;
    id v63 = *(id *)(a1 + 56);
    [v23 saveRecord:v26 completionHandler:v61];

    uint64_t v27 = v62;
    goto LABEL_52;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3);
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v75 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob saveRecordZone: error %@ ",  buf,  0xCu);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if ([v9 isEqualToString:CKErrorDomain]
    && ([v6 code] == (id)3
     || [v6 code] == (id)7
     || [v6 code] == (id)4
     || [v6 code] == (id)9
     || [v6 code] == (id)2
     || [v6 code] == (id)6))
  {
    unint64_t v10 = *(void *)(a1 + 80);

    if (v10 <= 3)
    {
      os_log_t v11 = sub_100060178("MagicPairing");
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 80);
        *(_DWORD *)buf = 138412546;
        id v75 = v6;
        __int16 v76 = 2048;
        uint64_t v77 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob failed with error %@, retry count = %lu",  buf,  0x16u);
      }

      os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:CKErrorRetryAfterKey]);

      if (v15)
      {
        dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:CKErrorRetryAfterKey]);
        [v17 doubleValue];
        double v19 = v18;

        int64_t v20 = (uint64_t)(v19 * 1000000000.0);
      }

      else
      {
        int64_t v20 = 60000000000LL;
      }

      dispatch_time_t v55 = dispatch_time(0LL, v20);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10007FF48;
      block[3] = &unk_1002071F0;
      id v56 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v57 = v56;
      uint64_t v58 = *(void *)(a1 + 80);
      id v71 = v57;
      uint64_t v72 = v58;
      dispatch_after(v55, &_dispatch_main_q, block);
      uint64_t v27 = v71;
LABEL_52:

      goto LABEL_53;
    }
  }

  else
  {
  }

  os_log_t v28 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if ([v28 isEqualToString:CKErrorDomain])
  {
    id v29 = [v6 code];

    if (v29 == (id)112)
    {
      os_log_t v30 = sub_100060178("MagicPairing");
      __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeKeyBlob saveRecordZone lost access to manatee data. Reset and recreate zone.",  buf,  2u);
      }

      os_log_t v32 = sub_100060178("MagicPairing");
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeKeyBlob saveRecordZone. Reset and recreate zone DONE!",  buf,  2u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
      [WeakRetained resetCloudContainerManateeIdentityLost];

      goto LABEL_53;
    }
  }

  else
  {
  }

  double v35 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if ([v35 isEqualToString:CKErrorDomain])
  {
    double v36 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    double v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    if (v37)
    {
      uint64_t v59 = a1;
      id v60 = v5;
      os_log_t v38 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      __int128 v68 = 0u;
      __int128 v69 = 0u;
      __int128 v66 = 0u;
      __int128 v67 = 0u;
      id v40 = v39;
      id v41 = [v40 countByEnumeratingWithState:&v66 objects:v73 count:16];
      if (v41)
      {
        id v42 = v41;
        uint64_t v43 = *(void *)v67;
        while (2)
        {
          for (i = 0LL; i != v42; i = (char *)i + 1)
          {
            if (*(void *)v67 != v43) {
              objc_enumerationMutation(v40);
            }
            id v45 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKey:*(void *)(*((void *)&v66 + 1) + 8 * (void)i)]);
            uint64_t v46 = objc_opt_class(&OBJC_CLASS___NSError);
            if ((objc_opt_isKindOfClass(v45, v46) & 1) != 0)
            {
              __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v45 domain]);
              if ([v47 isEqualToString:CKErrorDomain])
              {
                id v48 = [v45 code];

                if (v48 == (id)112)
                {
                  os_log_t v49 = sub_100060178("MagicPairing");
                  unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v75 = v45;
                    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeKeyBlob lost access to manatee data. Reset and recreate zone due to - %@",  buf,  0xCu);
                  }

                  os_log_t v52 = sub_100060178("MagicPairing");
                  id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeKeyBlob. Reset and recreate zone DONE!",  buf,  2u);
                  }

                  id v54 = objc_loadWeakRetained((id *)(v59 + 72));
                  [v54 resetCloudContainerManateeIdentityLost];

                  goto LABEL_49;
                }
              }

              else
              {
              }
            }
          }

          id v42 = [v40 countByEnumeratingWithState:&v66 objects:v73 count:16];
          if (v42) {
            continue;
          }
          break;
        }
      }

LABEL_53:
}

  if (!(_DWORD)v228)
  {
LABEL_28:
    if ((_DWORD)v229) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }

                      v148 = (v90 - 1) & v90;
                      v149 = v91;
                      uint64_t v72 = __clz(__rbit64(v90)) + (v91 << 6);
                    }

                    __int128 v73 = *(void **)(*(void *)(v147 + 48) + 8 * v72);
                    __int128 v74 = *(void *)(v147 + 56) + 16 * v72;
                    id v75 = *(void *)(v74 + 8);
                    v150 = *(void (**)(void *))v74;
                    __int16 v76 = v73;
                    uint64_t v77 = swift_retain(v75);
                    id v78 = static os_log_type_t.error.getter(v77);
                    id v79 = qword_10023DFB8;
                    __int128 v80 = swift_allocObject(v153, 112LL, 7LL);
                    *(_OWORD *)(v80 + 16) = v146;
                    __int128 v81 = v76;
                    unint64_t v82 = [v81 description];
                    __int16 v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
                    __int16 v85 = v84;

                    *(void *)(v80 + 56) = &type metadata for String;
                    *(void *)(v80 + 64) = v71;
                    *(void *)(v80 + 32) = v83;
                    *(void *)(v80 + 40) = v85;
                    os_log_t v23 = v154;
                    v161[0] = v154;
                    sub_1001135B4(v154, 1);
                    id v86 = String.init<A>(describing:)(v161, v152);
                    *(void *)(v80 + 96) = &type metadata for String;
                    *(void *)(v80 + 104) = v71;
                    *(void *)(v80 + 72) = v86;
                    *(void *)(v80 + 80) = v87;
                    os_log(_:dso:log:_:_:)( v78,  &_mh_execute_header,  v79,  "CheckInPendingCloudUpdates CKRecord delete failed (%@) with error: %@.",  70LL,  2LL,  v80);
                    swift_bridgeObjectRelease(v80);
                    v161[0] = v23;
                    sub_1001135B4(v23, 1);
                    v150(v161);
                    sub_100112AC0(v23, 1);

                    swift_release(v75);
                    __int128 v69 = v148;
                    id v70 = v149;
                  }
                }

                os_log_t v38 = *(void *)(v145 + 8LL * (void)v40);
                if (!v38)
                {
                  while (1)
                  {
                    uint64_t v39 = (uint64_t)(v40 + 1);
                    if (__OFADD__(v40, 1LL)) {
                      break;
                    }
                    os_log_t v38 = *(void *)(v145 + 8 * v39);
                    ++v40;
                    if (v38) {
                      goto LABEL_30;
                    }
                  }

    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    else {
      uint64_t v26 = v11;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    os_log_t v14 = (void *)swift_bridgeObjectRelease(v5);
    double v19 = v27 + v6;
    if (!__OFADD__(v27, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

      uint64_t v39 = v74;
      return (void *)swift_bridgeObjectRelease(v39);
    }

    if (v46 >= v43) {
      goto LABEL_82;
    }
    if (__OFSUB__(v46, v45)) {
      goto LABEL_169;
    }
    if (v46 - v45 >= v196) {
      goto LABEL_82;
    }
    if (__OFADD__(v45, v196)) {
      goto LABEL_172;
    }
    if (v45 + v196 >= v43) {
      __int16 v95 = v43;
    }
    else {
      __int16 v95 = v45 + v196;
    }
    if (v95 >= v45)
    {
      if (v46 == v95) {
        goto LABEL_82;
      }
      v211 = v40;
      id v96 = (void (*)(char *, uint64_t))(v194 + 8 * v46);
      v201 = v95;
      while (2)
      {
        __int16 v97 = *(void **)(v42 + 8 * v46);
        v206 = v96;
        v216 = v46;
        while (2)
        {
          id v98 = *(void **)v96;
          signed int v99 = v97;
          signed int v100 = v98;
          v219 = v99;
          v101 = [v99 creationDate];
          if (v101)
          {
            v102 = v101;
            v103 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

            v104 = v221;
            uint64_t v105 = (void (*)(char *, char *, uint64_t))v221[4];
            v106 = (uint64_t)v214;
            v105(v214, v103, v17);
            unsigned int v107 = (void (*)(uint64_t, void, uint64_t, uint64_t))v104[7];
            v107(v106, 0LL, 1LL, v17);
            v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v104[6])(v106, 1LL, v17);
            if ((_DWORD)v108 == 1)
            {
              double v19 = v212;
              goto LABEL_70;
            }

            v105(v220, (char *)v106, v17);
            double v19 = v212;
          }

          else
          {
            unsigned int v107 = (void (*)(uint64_t, void, uint64_t, uint64_t))v221[7];
            v106 = (uint64_t)v214;
            v108 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v214, 1LL, 1LL, v17);
LABEL_70:
            static Date.now.getter(v108);
            sub_100099358(v106, (uint64_t *)&unk_100234E10);
          }

          v109 = objc_msgSend(v100, "creationDate", v193);
          if (v109)
          {
            unsigned __int8 v110 = v109;
            v111 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v109);

            id v112 = v221;
            unsigned __int8 v113 = (void (*)(char *, char *, uint64_t))v221[4];
            uint64_t v114 = (uint64_t)v215;
            id v115 = v111;
            id v17 = v213;
            v113(v215, v115, v213);
            v107(v114, 0LL, 1LL, v17);
            v116 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v112[6])(v114, 1LL, v17);
            if ((_DWORD)v116 != 1)
            {
              v113(v19, (char *)v114, v17);
              goto LABEL_77;
            }
          }

          else
          {
            uint64_t v114 = (uint64_t)v215;
            id v17 = v213;
            v116 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v215, 1LL, 1LL, v213);
          }

          static Date.now.getter(v116);
          sub_100099358(v114, (uint64_t *)&unk_100234E10);
LABEL_77:
          id v117 = v216;
          v118 = v220;
          uint64_t v119 = static Date.> infix(_:_:)(v220, v19);
          v120 = (void (*)(char *, uint64_t))v221[1];
          v120(v19, v17);
          v120(v118, v17);

          if ((v119 & 1) != 0)
          {
            id v42 = v217;
            if (!v217) {
              goto LABEL_174;
            }
            int v121 = *(void *)v96;
            __int16 v97 = (void *)*((void *)v96 + 1);
            *(void *)id v96 = v97;
            *((void *)v96 + 1) = v121;
            id v96 = (void (*)(char *, uint64_t))((char *)v96 - 8);
            if (v117 == ++v45) {
              goto LABEL_64;
            }
            continue;
          }

          break;
        }

        id v42 = v217;
LABEL_64:
        uint64_t v46 = v117 + 1;
        id v96 = (void (*)(char *, uint64_t))((char *)v206 + 8);
        id v45 = v204;
        if (v46 != v201) {
          continue;
        }
        break;
      }

      uint64_t v46 = v201;
      id v40 = v211;
      os_log_t v14 = v207;
LABEL_82:
      if (v46 < v45) {
        goto LABEL_164;
      }
      v216 = v46;
      int v122 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) != 0) {
        id v40 = v122;
      }
      else {
        id v40 = sub_100165F14(0LL, *((void *)v122 + 2) + 1LL, 1, v122);
      }
      char v124 = *((void *)v40 + 2);
      unsigned int v123 = *((void *)v40 + 3);
      uint64_t v44 = v124 + 1;
      id v42 = v217;
      if (v124 >= v123 >> 1)
      {
        v177 = sub_100165F14((char *)(v123 > 1), v124 + 1, 1, v40);
        id v42 = v217;
        id v40 = v177;
      }

      *((void *)v40 + 2) = v44;
      unsigned __int8 v125 = v40 + 32;
      unsigned __int8 v126 = &v40[16 * v124 + 32];
      BOOL v127 = v216;
      *(void *)unsigned __int8 v126 = v45;
      *((void *)v126 + 1) = v127;
      if (!v124)
      {
        uint64_t v44 = 1LL;
LABEL_14:
        uint64_t v43 = v205;
        id v41 = v216;
        os_log_t v11 = v198;
        if (v216 >= v205) {
          goto LABEL_134;
        }
        continue;
      }

      v211 = v40;
LABEL_89:
      BOOL v128 = v44 - 1;
      if (v44 >= 4)
      {
        v133 = &v125[16 * v44];
        v134 = *((void *)v133 - 8);
        v135 = *((void *)v133 - 7);
        v139 = __OFSUB__(v135, v134);
        v136 = v135 - v134;
        if (v139) {
          goto LABEL_153;
        }
        v138 = *((void *)v133 - 6);
        v137 = *((void *)v133 - 5);
        v139 = __OFSUB__(v137, v138);
        uint64_t v131 = v137 - v138;
        char v132 = v139;
        if (v139) {
          goto LABEL_154;
        }
        v140 = v44 - 2;
        v141 = &v125[16 * v44 - 32];
        v143 = *(void *)v141;
        v142 = *((void *)v141 + 1);
        v139 = __OFSUB__(v142, v143);
        v144 = v142 - v143;
        if (v139) {
          goto LABEL_156;
        }
        v139 = __OFADD__(v131, v144);
        v145 = v131 + v144;
        if (v139) {
          goto LABEL_159;
        }
        if (v145 >= v136)
        {
          v163 = &v125[16 * v128];
          v165 = *(void *)v163;
          v164 = *((void *)v163 + 1);
          v139 = __OFSUB__(v164, v165);
          v166 = v164 - v165;
          if (v139) {
            goto LABEL_163;
          }
          v156 = v131 < v166;
        }

        else
        {
LABEL_102:
          if ((v132 & 1) != 0) {
            goto LABEL_155;
          }
          v140 = v44 - 2;
          v146 = &v125[16 * v44 - 32];
          v148 = *(void *)v146;
          v147 = *((void *)v146 + 1);
          v149 = __OFSUB__(v147, v148);
          v150 = v147 - v148;
          v151 = v149;
          if (v149) {
            goto LABEL_158;
          }
          v152 = &v125[16 * v128];
          v154 = *(void *)v152;
          v153 = *((void *)v152 + 1);
          v139 = __OFSUB__(v153, v154);
          v155 = v153 - v154;
          if (v139) {
            goto LABEL_161;
          }
          if (__OFADD__(v150, v155)) {
            goto LABEL_162;
          }
          if (v150 + v155 < v131) {
            goto LABEL_114;
          }
          v156 = v131 < v155;
        }

        if (v156) {
          BOOL v128 = v140;
        }
      }

      else
      {
        if (v44 == 3)
        {
          v130 = *((void *)v40 + 4);
          uint64_t v129 = *((void *)v40 + 5);
          v139 = __OFSUB__(v129, v130);
          uint64_t v131 = v129 - v130;
          char v132 = v139;
          goto LABEL_102;
        }

        v157 = *((void *)v40 + 4);
        v158 = *((void *)v40 + 5);
        v139 = __OFSUB__(v158, v157);
        v150 = v158 - v157;
        v151 = v139;
LABEL_114:
        if ((v151 & 1) != 0) {
          goto LABEL_157;
        }
        v159 = &v125[16 * v128];
        v161 = *(void *)v159;
        v160 = *((void *)v159 + 1);
        v139 = __OFSUB__(v160, v161);
        v162 = v160 - v161;
        if (v139) {
          goto LABEL_160;
        }
        if (v162 < v150) {
          goto LABEL_14;
        }
      }

      v167 = v128 - 1;
      if (v128 - 1 >= v44)
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        break;
      }

      if (!v42) {
        goto LABEL_175;
      }
      v168 = &v125[16 * v167];
      v169 = *(void *)v168;
      v170 = v125;
      v171 = v128;
      v172 = &v125[16 * v128];
      v173 = *((void *)v172 + 1);
      v174 = v210;
      sub_1001656DC( (void **)(v42 + 8LL * *(void *)v168),  (void **)(v42 + 8LL * *(void *)v172),  (void **)(v42 + 8 * v173),  v209);
      v210 = v174;
      if (v174)
      {
LABEL_131:
        v178 = (uint64_t)v211;
        goto LABEL_148;
      }

      if (v173 < v169) {
        goto LABEL_150;
      }
      v175 = (uint64_t)v211;
      if (v171 > *((void *)v211 + 2)) {
        goto LABEL_151;
      }
      *(void *)v168 = v169;
      *(void *)&v170[16 * v167 + 8] = v173;
      v176 = *(void *)(v175 + 16);
      if (v171 >= v176) {
        goto LABEL_152;
      }
      uint64_t v44 = v176 - 1;
      memmove(v172, v172 + 16, 16 * (v176 - 1 - v171));
      unsigned __int8 v125 = v170;
      id v40 = v211;
      double v19 = v212;
      *((void *)v211 + 2) = v176 - 1;
      os_log_t v14 = v207;
      id v42 = v217;
      if (v176 <= 2) {
        goto LABEL_14;
      }
      goto LABEL_89;
    }

    break;
  }

  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
}

id sub_10007FF48(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10007FF5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    os_log_t v21 = sub_100060178("MagicPairing");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v30 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "MagicCloudPairingProtectedMasterBlob, saveRecord %@",  buf,  0xCu);
    }

    goto LABEL_17;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecord: error %@ ", buf, 0xCu);
  }

  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (!-[os_log_s isEqualToString:](v9, "isEqualToString:", CKErrorDomain)
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)2)
  {
LABEL_17:

    goto LABEL_18;
  }

  unint64_t v10 = *(void *)(a1 + 64);

  if (v10 <= 3)
  {
    os_log_t v11 = sub_100060178("MagicPairing");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412546;
      id v30 = v6;
      __int16 v31 = 2048;
      uint64_t v32 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "writeKeyBlob:saveRecord failed with error %@, retry count = %lu",  buf,  0x16u);
    }

    os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v15)
    {
      dispatch_time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v17 doubleValue];
      double v19 = v18;

      int64_t v20 = (uint64_t)(v19 * 1000000000.0);
    }

    else
    {
      int64_t v20 = 60000000000LL;
    }

    dispatch_time_t v22 = dispatch_time(0LL, v20);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100080290;
    block[3] = &unk_1002071F0;
    os_log_t v23 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v24 = v23;
    uint64_t v25 = *(void *)(a1 + 64);
    id v27 = v24;
    uint64_t v28 = v25;
    dispatch_after(v22, &_dispatch_main_q, block);
  }

id sub_100080290(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100080370(uint64_t a1)
{
  os_log_t v2 = sub_100060178("MagicPairing");
  os_log_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v16 = v4;
    __int16 v17 = 1024;
    int v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Manatee: updateCloudKitAccessoryZone with %@, delete: %i",  buf,  0x12u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modifyOperationTimer]);
  if (v6)
  {
    os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modifyOperationTimer]);
    [v7 invalidate];
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000804DC;
  v11[3] = &unk_100208430;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v12 = v8;
  uint64_t v13 = v9;
  char v14 = *(_BYTE *)(a1 + 48);
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:repeats:block:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:repeats:block:",  0LL,  v11,  3.0));
  [*(id *)(a1 + 40) setModifyOperationTimer:v10];
}

void sub_1000804DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_t v4 = sub_100060178("MagicPairing");
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Manatee: Updating Accessory Zone Now with %@",  buf,  0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modifyOperationQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100080664;
  v8[3] = &unk_100208408;
  char v11 = *(_BYTE *)(a1 + 48);
  objc_copyWeak(&v10, (id *)buf);
  id v9 = *(id *)(a1 + 32);
  [v7 addOperationWithBlock:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

void sub_100080638( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100080664(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (v2) {
    [WeakRetained deleteCloudKitAccessoryZone];
  }
  else {
    [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
  }
}

void sub_1000808E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10008090C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      os_log_t v8 = sub_100060178("MagicPairing");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100190F8C();
      }

      [WeakRetained handleAccessoryModifyError:v6 forBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 56)];
    }

    else
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
      char v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"EncryptedAccessoryBlob"]);

      if (v5)
      {
        unsigned __int8 v12 = [v11 isEqualToData:*(void *)(a1 + 32)];
        os_log_t v13 = sub_100060178("MagicPairing");
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if ((v12 & 1) != 0)
        {
          if (v15)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Dropping same modify record: MagicCloudPairingProtectedAccessoryBlob",  buf,  2u);
          }
        }

        else
        {
          if (v15)
          {
            uint64_t v19 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            uint64_t v31 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Manatee: modify record: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@",  buf,  0xCu);
          }

          uint64_t v20 = *(void *)(a1 + 32);
          os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptedValues]);
          [v21 setObject:v20 forKeyedSubscript:@"EncryptedAccessoryBlob"];

          objc_initWeak((id *)buf, WeakRetained);
          dispatch_time_t v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cloudKitDatabase]);
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472LL;
          v26[2] = sub_100080C68;
          v26[3] = &unk_100208480;
          id v27 = v5;
          objc_copyWeak(v29, (id *)buf);
          id v23 = *(id *)(a1 + 32);
          id v24 = *(void **)(a1 + 56);
          id v28 = v23;
          v29[1] = v24;
          [v22 saveRecord:v27 completionHandler:v26];

          objc_destroyWeak(v29);
          objc_destroyWeak((id *)buf);
        }
      }

      else
      {
        os_log_t v16 = sub_100060178("MagicPairing");
        __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v31 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Manatee: No record found: write new data: %@",  buf,  0xCu);
        }

        [WeakRetained writeAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
      }
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    [v25 endTransaction:@"ManateeModifyAccessoryBlob"];
  }
}

void sub_100080C3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100080C68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100190FEC();
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained handleAccessoryModifyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 56)];
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Manatee: Successfully saved the modified record - %@",  buf,  0xCu);
    }

    char v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceManager]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100080E6C;
    v16[3] = &unk_100206080;
    id v17 = v5;
    [v12 addLegacyMagicPairingRecordsWithCloudRecord:v17 userInitiated:1 completion:v16];

    os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v14,  @"kUploadStatus",  0LL));
    [v13 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v15];

    id WeakRetained = v17;
  }
}

void sub_100080E6C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    os_log_t v3 = sub_100060178("MagicPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10019104C();
    }
  }
}

void sub_100081748(_Unwind_Exception *a1)
{
}

void sub_100081774(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifyOperationQueue]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10008185C;
  v5[3] = &unk_1002084A8;
  objc_copyWeak(v7, &location);
  id v3 = *(id *)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  id v6 = v3;
  v7[1] = v4;
  [v2 addOperationWithBlock:v5];

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100081838(_Unwind_Exception *a1)
{
}

void sub_10008185C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_1000818A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained writeAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
}

void sub_100081C14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_100081C40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v53 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "writeAccessoryBlob saveRecordZone: error %@ ",  buf,  0xCu);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if ([v9 isEqualToString:CKErrorDomain])
    {
      id v10 = [v6 code];

      if (v10 == (id)112)
      {
        os_log_t v11 = sub_100060178("MagicPairing");
        unsigned __int8 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeAccessoryBlob saveRecordZone lost access to manatee data. Reset and recreate zone.",  buf,  2u);
        }

        os_log_t v13 = sub_100060178("MagicPairing");
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeAccessoryBlob saveRecordZone. Reset and recreate zone DONE!",  buf,  2u);
        }

        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
        [WeakRetained resetCloudContainerManateeIdentityLost];
        goto LABEL_30;
      }
    }

    else
    {
    }

    id WeakRetained = (id)objc_claimAutoreleasedReturnValue([v6 domain]);
    if (([WeakRetained isEqualToString:CKErrorDomain] & 1) == 0)
    {
LABEL_30:

      goto LABEL_37;
    }

    os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    dispatch_time_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    if (v22)
    {
      id v41 = v5;
      uint64_t v42 = a1;
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      id v25 = v24;
      id v26 = [v25 countByEnumeratingWithState:&v47 objects:v51 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v48;
        while (2)
        {
          for (i = 0LL; i != v27; i = (char *)i + 1)
          {
            if (*(void *)v48 != v28) {
              objc_enumerationMutation(v25);
            }
            id v30 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:*(void *)(*((void *)&v47 + 1) + 8 * (void)i)]);
            uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSError);
            if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
            {
              uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v30 domain]);
              if ([v32 isEqualToString:CKErrorDomain])
              {
                id v33 = [v30 code];

                if (v33 == (id)112)
                {
                  os_log_t v34 = sub_100060178("MagicPairing");
                  double v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v53 = v30;
                    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Manatee: handleAccessoryModifyError lost access to manatee data. Reset and recreate zone due to - %@",  buf,  0xCu);
                  }

                  os_log_t v37 = sub_100060178("MagicPairing");
                  os_log_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Manatee: handleAccessoryModifyError. Reset and recreate zone DONE!",  buf,  2u);
                  }

                  id v39 = objc_loadWeakRetained((id *)(v42 + 64));
                  [v39 resetCloudContainerManateeIdentityLost];

                  goto LABEL_36;
                }
              }

              else
              {
              }
            }
          }

          id v27 = [v25 countByEnumeratingWithState:&v47 objects:v51 count:16];
          if (v27) {
            continue;
          }
          break;
        }
      }

id sub_10008219C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPauseErrorReason:0];
}

void sub_1000821CC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (!v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v46 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeAccessoryBlob createRecordZone record  %@",  buf,  0xCu);
    }

    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceManager]);
    os_log_t v37 = _NSConcreteStackBlock;
    uint64_t v38 = 3221225472LL;
    id v39 = sub_1000827AC;
    id v40 = &unk_100206080;
    id v41 = v5;
    [v13 addLegacyMagicPairingRecordsWithCloudRecord:v41 userInitiated:1 completion:&v37];

    char v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    os_log_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v15,  @"kUploadStatus",  0LL,  v37,  v38,  v39,  v40));
    [v14 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v16];

    id v17 = v41;
    goto LABEL_10;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10018F714();
  }

  if (a1[6] >= 5uLL)
  {
    os_log_t v10 = sub_100060178("MagicPairing");
    os_log_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10019122C();
    }
LABEL_19:

    goto LABEL_20;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if ([v18 isEqualToString:CKErrorDomain])
  {
    if ([v6 code] == (id)3 || objc_msgSend(v6, "code") == (id)4 || objc_msgSend(v6, "code") == (id)9)
    {

LABEL_16:
      os_log_t v19 = sub_100060178("MagicPairing");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10019128C();
      }

      os_log_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
      os_log_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
      dispatch_time_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v21,  @"kUploadStatus",  0LL));
      -[os_log_s sendCloudKitMsg:args:](v11, "sendCloudKitMsg:args:", @"DeviceInfoUploadStatus", v22);

      goto LABEL_19;
    }

    id v36 = [v6 code];

    if (v36 == (id)6) {
      goto LABEL_16;
    }
  }

  else
  {
  }

  if ([v6 code] == (id)7)
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v24)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v26 doubleValue];
      double v28 = v27 + 5.0;

      os_log_t v29 = sub_100060178("MagicPairing");
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = a1[6];
        *(_DWORD *)buf = 138412802;
        id v46 = v6;
        __int16 v47 = 2048;
        uint64_t v48 = v31;
        __int16 v49 = 2048;
        unint64_t v50 = (unint64_t)v28;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Manatee: writeAccessoryBlob failed with error %@, retry count = %lu, retry time: %lu",  buf,  0x20u);
      }

      dispatch_time_t v32 = dispatch_time(0LL, (uint64_t)(v28 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100082680;
      block[3] = &unk_1002071F0;
      id v33 = (void *)a1[5];
      void block[4] = a1[4];
      id v34 = v33;
      uint64_t v35 = a1[6];
      id v43 = v34;
      uint64_t v44 = v35;
      dispatch_after(v32, &_dispatch_main_q, block);
      id v17 = v43;
LABEL_10:
    }
  }

void sub_100082680(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifyOperationQueue]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100082768;
  v5[3] = &unk_1002084A8;
  objc_copyWeak(v7, &location);
  id v3 = *(id *)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  id v6 = v3;
  v7[1] = v4;
  [v2 addOperationWithBlock:v5];

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100082744(_Unwind_Exception *a1)
{
}

void sub_100082768(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_1000827AC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    os_log_t v3 = sub_100060178("MagicPairing");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001912EC();
    }
  }
}

void sub_100082A68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  os_log_t v5 = sub_100060178("MagicPairing");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v4;
      os_log_t v8 = "Manatee: deleteCloudKitAccessoryZone: error %@ ";
      id v9 = v6;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }

  else if (v7)
  {
    *(_WORD *)buf = 0;
    os_log_t v8 = "Manatee: Successfully deleted record";
    id v9 = v6;
    uint32_t v10 = 2;
    goto LABEL_6;
  }

  os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  v4 == 0LL,  @"kUploadStatus"));
  BOOL v15 = v12;
  os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
  [v11 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v13];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100082BE8(id a1, NSError *a2)
{
  id v2 = a2;
  os_log_t v3 = sub_100060178("MagicPairing");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10019134C();
  }
}

void sub_100082FEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10019140C();
    }

    uint32_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:NSUnderlyingErrorKey]);

    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if ([v12 isEqualToString:CKErrorDomain]
      && CKErrorIsCode(v6, 15LL)
      && v11)
    {
      id v13 = [v11 code];

      if (v13 != (id)2032 || !*(void *)(a1 + 32)) {
        goto LABEL_18;
      }
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      BOOL v15 = [v14 rangeOfString:@"'"];
      uint64_t v17 = v16;

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      os_log_t v19 = [v18 rangeOfString:@"'" options:4];

      uint64_t v20 = &v15[v17];
      int64_t v21 = v19 - &v15[v17];
      dispatch_time_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "substringWithRange:", v20, v21));

      os_log_t v23 = sub_100060178("MagicPairing");
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1001913AC();
      }

      uint64_t v25 = *(void *)(a1 + 32);
      if (v25) {
        [*(id *)(a1 + 40) setuserPreference:v25 value:v12 sync:1];
      }
    }

LABEL_18:
    goto LABEL_19;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = 138412290;
    id v29 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Manatee: saveSubscription record: %@",  (uint8_t *)&v28,  0xCu);
  }

  uint64_t v26 = *(void *)(a1 + 32);
  if (v26)
  {
    double v27 = *(void **)(a1 + 40);
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
    [v27 setuserPreference:v26 value:v11 sync:1];
    goto LABEL_18;
  }

void sub_1000834A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  os_log_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001914CC();
    }

    uint32_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if (-[os_log_s isEqualToString:](v10, "isEqualToString:", CKErrorDomain))
    {
      id v11 = [v6 code];

      if (v11 == (id)11)
      {
        [*(id *)(a1 + 40) removeuserPreference:*(void *)(a1 + 48) sync:1];
        [*(id *)(a1 + 40) createSubscritionForRecordType:*(void *)(a1 + 56)];
      }

      goto LABEL_16;
    }

void sub_1000837F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    os_log_t v6 = sub_100060178("MagicPairing");
    os_log_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Manatee: Found subscription - %@",  (uint8_t *)&v14,  0xCu);
    }

    os_log_t v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
    LODWORD(v_Block_object_dispose(va, 8) = [v8 isEqualToString:v9];

    if ((_DWORD)v8)
    {
      os_log_t v10 = sub_100060178("MagicPairing");
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138412290;
        id v15 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Manatee: Already have subscription - %@",  (uint8_t *)&v14,  0xCu);
      }

      unsigned __int8 v12 = *(void **)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionID]);
      [v12 setuserPreference:@"MagicCloudPairingAccessorySubscriptionManateeID" value:v13 sync:1];

      [*(id *)(a1 + 40) setCloudSubscription:v5];
    }
  }
}

void sub_100083AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_100083B30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v22 = a3;
  id val = objc_loadWeakRetained((id *)(a1 + 48));
  os_log_t v6 = sub_100060178("MagicPairing");
  os_log_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v32 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Manatee: fetchAllSubscriptionsWithCompletionHandler: error %@ ",  buf,  0xCu);
  }

  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v28;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v8);
        }
        unsigned __int8 v12 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
        uint64_t v13 = objc_opt_class(&OBJC_CLASS___CKRecordZoneSubscription);
        if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
        {
          id v14 = v12;
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 recordType]);
          unsigned int v16 = [v15 isEqualToString:*(void *)(a1 + 32)];

          if (v16)
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
            os_log_t v17 = sub_100060178("MagicPairing");
            uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              os_log_t v19 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              id v32 = v19;
              __int16 v33 = 2112;
              id v34 = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Manatee: Delete Subscription for record type: %@ and sub: %@",  buf,  0x16u);
            }

            objc_initWeak((id *)buf, val);
            int v20 = (void *)objc_claimAutoreleasedReturnValue([val cloudKitDatabase]);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v14 subscriptionID]);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472LL;
            v24[2] = sub_100083E80;
            v24[3] = &unk_100208608;
            id v25 = *(id *)(a1 + 32);
            objc_copyWeak(&v26, (id *)buf);
            [v20 deleteSubscriptionWithID:v21 completionHandler:v24];

            objc_destroyWeak(&v26);
            objc_destroyWeak((id *)buf);
          }
        }
      }

      id v9 = [v8 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }

    while (v9);
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    [val setuserPreference:@"MagicPairingMasterKeySubscriptionManateeDisabled" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_100083E54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id location)
{
}

void sub_100083E80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id WeakRetained = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Manatee: Error Deleting Subscription for record type: %@ with error: %@ ",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Manatee: Successfully deleted Subscription for record type - %@ with ID - %@",  (uint8_t *)&v12,  0x16u);
    }

    id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(a1 + 40));
    -[os_log_s setuserPreference:value:sync:]( WeakRetained,  "setuserPreference:value:sync:",  @"MagicPairingMasterKeySubscriptionManateeDisabled",  &__kCFBooleanTrue,  1LL);
  }
}

void sub_10008422C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100084258(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error getting server preferred push environment %@",  (uint8_t *)&v12,  0xCu);
    }
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v5;
  id v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000845BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v2 beginTransaction:@"ManateeIdentityLost"];

  os_log_t v3 = sub_100060178("MagicPairing");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneBlob]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
    os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneName]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneAccessoryDatabase]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " >>> Manatee Identity Lost Reset Both Zones %@ - %@",  buf,  0x16u);
  }

  dispatch_time_t v11 = dispatch_time(0LL, 5000000000LL);
  dispatch_semaphore_t v12 = dispatch_semaphore_create(0LL);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneBlob]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  void v43[2] = sub_1000849C4;
  v43[3] = &unk_100208E40;
  dispatch_semaphore_t v44 = v12;
  unsigned int v16 = v12;
  [v13 deleteRecordZoneWithID:v15 completionHandler:v43];

  dispatch_semaphore_wait(v16, v11);
  dispatch_semaphore_t v17 = dispatch_semaphore_create(0LL);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
  os_log_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZoneAccessoryDatabase]);
  int v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneID]);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_100084AA4;
  v41[3] = &unk_100208E40;
  id v21 = v17;
  uint64_t v42 = v21;
  [v18 deleteRecordZoneWithID:v20 completionHandler:v41];

  dispatch_semaphore_wait(v21, v11);
  id v22 = dispatch_group_create();
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  char v46 = 0;
  os_log_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 deviceManager]);

  dispatch_group_enter(v22);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100084B84;
  v37[3] = &unk_100208E68;
  id v25 = v22;
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v38 = v25;
  uint64_t v39 = v26;
  id v40 = buf;
  [v24 fetchAccountMagicKeysBlobWithCompletion:v37];
  dispatch_group_enter(v25);
  __int128 v30 = _NSConcreteStackBlock;
  uint64_t v31 = 3221225472LL;
  id v32 = sub_100084BC8;
  __int16 v33 = &unk_100208E90;
  uint64_t v27 = *(void *)(a1 + 32);
  id v36 = buf;
  uint64_t v34 = v27;
  __int128 v28 = v25;
  uint64_t v35 = v28;
  [v24 fetchLegacyMagicPairingRecordsWithCompletion:&v30];
  dispatch_group_notify(v28, &_dispatch_main_q, &stru_100208EB0);
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[CloudXPCService sharedInstance]( &OBJC_CLASS___CloudXPCService,  "sharedInstance",  v30,  v31,  v32,  v33,  v34));
  [v29 endTransaction:@"ManateeIdentityLost"];

  _Block_object_dispose(buf, 8);
}

void sub_1000849A4(_Unwind_Exception *a1)
{
}

void sub_1000849C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manatee Identity Lost resetMasterZone (%@) deleteRecordWithID: error %@ ",  (uint8_t *)&v9,  0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100084AA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manatee Identity Lost Reset Accessory Zone (%@) deleteRecordWithID: error %@ ",  (uint8_t *)&v9,  0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100084B84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 2RandomBytes(&unk_1002371D8, 4LL) = 1;
    [*(id *)(a1 + 40) writeKeyBlob:a2 withRetryCount:0];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100084BC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    [*(id *)(a1 + 32) writeAccessoryBlob:v3 withRetryCount:0];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100084C34(id a1)
{
  os_log_t v1 = sub_100060178("MagicPairing");
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost Reset Done", v3, 2u);
  }
}

id sub_100085034(uint64_t a1)
{
  return _[*(id *)(a1 + 32) resetMasterZone:*(void *)(a1 + 40) accessoryblob:*(void *)(a1 + 48)];
}

void sub_100085044(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "resetMasterZone (%@) deleteRecordWithID: error %@ ",  (uint8_t *)&v9,  0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000853DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "updateMasterZoneBlob saveRecordZone: error %@ ",  buf,  0xCu);
    }
  }

  else
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "updateMasterZoneBlob saveRecordZone record  %@",  buf,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    _OWORD v15[2] = sub_10008557C;
    v15[3] = &unk_100208ED8;
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = (os_log_s *)*(id *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 32);
    unsigned int v16 = v12;
    uint64_t v17 = v13;
    [v10 saveRecord:v11 completionHandler:v15];

    id v8 = v16;
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
  [v14 endTransaction:@"updateMasterZoneBlob"];
}

void sub_10008557C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    os_log_t v7 = sub_100060178("MagicPairing");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "updateMasterZoneBlob createRecordZone: error %@ ",  buf,  0xCu);
    }

void sub_100085990(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "resetAccessoryZone (%@) deleteRecordWithID: error %@ ",  (uint8_t *)&v9,  0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100085D20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      id v43 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manatee: upgradeAccessoryBlob saveRecordZone record  %@",  buf,  0xCu);
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitDatabase]);
    id v32 = _NSConcreteStackBlock;
    uint64_t v33 = 3221225472LL;
    uint64_t v34 = sub_1000860C8;
    uint64_t v35 = &unk_100208390;
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 32);
    id v25 = *(void **)(a1 + 40);
    uint64_t v38 = *(void *)(a1 + 56);
    uint64_t v36 = v24;
    id v37 = v25;
    [v22 saveRecord:v23 completionHandler:&v32];

    uint64_t v26 = v37;
    goto LABEL_21;
  }

  if (v9)
  {
    *(_DWORD *)buf = 138412290;
    id v43 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "upgradeAccessoryBlob upgradeRecordZone: error %@ ",  buf,  0xCu);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if ([v10 isEqualToString:CKErrorDomain]
    && ([v6 code] == (id)3
     || [v6 code] == (id)7
     || [v6 code] == (id)4
     || [v6 code] == (id)9
     || [v6 code] == (id)6))
  {
    unint64_t v11 = *(void *)(a1 + 56);

    if (v11 <= 3)
    {
      os_log_t v12 = sub_100060178("MagicPairing");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412546;
        id v43 = v6;
        __int16 v44 = 2048;
        uint64_t v45 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Manatee: upgradeAccessoryBlob failed with error %@, retry count = %lu",  buf,  0x16u);
      }

      id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:CKErrorRetryAfterKey]);

      if (v16)
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:CKErrorRetryAfterKey]);
        [v18 doubleValue];
        double v20 = v19;

        int64_t v21 = (uint64_t)(v20 * 1000000000.0);
      }

      else
      {
        int64_t v21 = 60000000000LL;
      }

      dispatch_time_t v27 = dispatch_time(0LL, v21);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000860B4;
      block[3] = &unk_1002071F0;
      __int128 v28 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v29 = v28;
      uint64_t v30 = *(void *)(a1 + 56);
      id v40 = v29;
      uint64_t v41 = v30;
      dispatch_after(v27, &_dispatch_main_q, block);
      uint64_t v26 = v40;
LABEL_21:
    }
  }

  else
  {
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[CloudXPCService sharedInstance]( &OBJC_CLASS___CloudXPCService,  "sharedInstance",  v32,  v33,  v34,  v35,  v36));
  [v31 endTransaction:@"upgradeAccessoryBlob"];
}

id sub_1000860B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) upgradeAccessoryBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_1000860C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = sub_100060178("MagicPairing");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manatee: upgradeAccessoryBlob record  %@",  buf,  0xCu);
    }

    id v10 = (void *)xpc_create_with_format("[ %BOOL ]", 1LL);
    CFRetain(v10);
    id v22 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"]);

    if (!v22)
    {
      [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      os_log_t v23 = sub_100060178("MagicPairing");
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Manatee: upgradeAccessoryBlob Master zone has been upgraded successfully",  buf,  2u);
      }
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](&OBJC_CLASS___CloudXPCService, "sharedInstance"));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    dispatch_time_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v26,  @"kUploadStatus",  0LL));
    [v25 sendCloudKitMsg:@"manateeUdpateStatus" args:v27];

    goto LABEL_22;
  }

  if (v9)
  {
    *(_DWORD *)buf = 138412290;
    id v36 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manatee: upgradeAccessoryBlob: error %@ ",  buf,  0xCu);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (![v10 isEqualToString:CKErrorDomain]
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)6)
  {
LABEL_22:

    goto LABEL_23;
  }

  unint64_t v11 = *(void *)(a1 + 48);

  if (v11 <= 3)
  {
    os_log_t v12 = sub_100060178("MagicPairing");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      id v36 = v6;
      __int16 v37 = 2048;
      uint64_t v38 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Manatee: upgradeAccessoryBlob failed with error %@, retry count = %lu",  buf,  0x16u);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    if (v16)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:CKErrorRetryAfterKey]);
      [v18 doubleValue];
      double v20 = v19;

      int64_t v21 = (uint64_t)(v20 * 1000000000.0);
    }

    else
    {
      int64_t v21 = 60000000000LL;
    }

    dispatch_time_t v28 = dispatch_time(0LL, v21);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000864E0;
    block[3] = &unk_1002071F0;
    id v29 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v30 = v29;
    uint64_t v31 = *(void *)(a1 + 48);
    id v33 = v30;
    uint64_t v34 = v31;
    dispatch_after(v28, &_dispatch_main_q, block);
  }

id sub_1000864E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) upgradeAccessoryBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_1000866FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___CKRecordZoneNotification);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    id v4 = *(id *)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 recordZoneID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneName]);
    unsigned int v7 = [v6 isEqualToString:@"MagicCloudPairingCustomKeyBlobZone"];

    if (v7)
    {
      os_log_t v8 = sub_100060178("MagicPairing");
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "*****>>>> Manatee: Master Key Updated",  buf,  2u);
      }

      if ([*(id *)(a1 + 40) isWriteMasterKeysInProgress])
      {
        os_log_t v10 = sub_100060178("MagicPairing");
        unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "*****>>>> Manatee: Master Key Updated but we are in process to push new key. Dont fetch",  buf,  2u);
        }
      }

      else
      {
        [*(id *)(a1 + 40) setMasterBlob:0];
        [*(id *)(a1 + 40) fetchKeyBlob:0];
      }
    }
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008689C;
  block[3] = &unk_100206058;
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_10008689C(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:0];
}

void sub_100086D20(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___BTIdentityDaemon);
  uint64_t v2 = (void *)qword_100237290;
  qword_100237290 = (uint64_t)v1;
}

void sub_100086E84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == -1)
  {
    uint64_t v3 = *(dispatch_queue_s **)(v2 + 16);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100087018;
    handler[3] = &unk_100206308;
    handler[4] = v2;
    notify_register_dispatch("com.apple.bluetooth.daemonStarted", (int *)(v2 + 8), v3, handler);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  if (!*(_BYTE *)(v2 + 40))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 addObserver:*(void *)(a1 + 32) selector:"_idsDevicesChanged:" name:@"BTTotalIDSDeviceCountChanged" object:0];
    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 1;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[CBIDSManager sharedInstance](&OBJC_CLASS___CBIDSManager, "sharedInstance"));
  unsigned int v6 = [v5 isReady];

  if (v6)
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[CBIDSManager sharedInstance](&OBJC_CLASS___CBIDSManager, "sharedInstance"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100087090;
    v8[3] = &unk_100208C00;
    void v8[4] = *(void *)(a1 + 32);
    [v7 fetchIDSDevicesWithCompletion:v8];
  }

id sub_100087018(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 0;
  return [*(id *)(a1 + 32) _idsScheduleUpdateIdentities];
}

void sub_100087090(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  id v7[2] = sub_100087110;
  v7[3] = &unk_100206358;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_100087110(uint64_t a1)
{
  if (dword_1002347D8 <= 30 && (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 30LL))) {
    LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon activate]_block_invoke_4",  30,  "IDS devices fetched: %d total",  [*(id *)(a1 + 32) count]);
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 32LL), *(id *)(a1 + 32));
  return [*(id *)(a1 + 40) _idsScheduleUpdateIdentities];
}

void sub_1000871F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 8);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(*(void *)(a1 + 32) + 8LL) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v2 + 40))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 removeObserver:*(void *)(a1 + 32) name:@"BTTotalIDSDeviceCountChanged" object:0];

    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  id v5 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 24) invalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v7 = *(void **)(v6 + 24);
  *(void *)(v6 + 24) = 0LL;
}

uint64_t sub_1000873E8(uint64_t a1)
{
  if (dword_1002347D8 <= 30 && (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 30LL))) {
    LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon diagnosticControl:completion:]_block_invoke",  30LL,  "Diag: IDS Update");
  }
  if (![*(id *)(a1 + 32) caseInsensitiveCompare:@"idsUpForce"]) {
    *(_BYTE *)(*(void *)(a1 + 40) + 12LL) = 0;
  }
  [*(id *)(a1 + 40) _idsScheduleUpdateIdentities];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100087508(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  CFTypeID TypeID = CFArrayGetTypeID();
  uint64_t TypedValue = CFDictionaryGetTypedValue(v2, @"IDSDevices", TypeID, 0LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);

  if (dword_1002347D8 <= 30 && (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 30LL))) {
    LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsDevicesChanged:]_block_invoke",  30,  "IDS devices changed: %d total",  [v5 count]);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  unsigned int v7 = *(void **)(v6 + 32);
  *(void *)(v6 + 32) = v5;
  id v8 = v5;

  [*(id *)(a1 + 40) _idsScheduleUpdateIdentities];
}

void *sub_1000876C0(void *result)
{
  if (result[4] == *(void *)(result[5] + 24LL))
  {
    os_log_t v1 = result;
    if (dword_1002347D8 <= 30
      && (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 30LL)))
    {
      LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsScheduleUpdateIdentities]_block_invoke",  30LL,  "IDS UpdateIdentities coalesced");
    }

    return _[(id)v1[5] _idsUpdateIdentities];
  }

  return result;
}

LABEL_44:
                  ++v46;
                  if (dword_1002347D8 > 20) {
                    goto LABEL_47;
                  }
                  uint64_t v31 = v51;
                  uint64_t v2 = v52;
                  if (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 20LL)) {
                    LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsUpdateIdentities]",  20LL,  "UpdateIdentities: Add: %@",  v7);
                  }
                  goto LABEL_48;
                }

                if (!v6) {
                  goto LABEL_44;
                }
              }

              else
              {
LABEL_32:
                if (!v6) {
                  goto LABEL_44;
                }
              }

              if (v18) {
                goto LABEL_41;
              }
              if (dword_1002347D8 > 10) {
                goto LABEL_47;
              }
              uint64_t v31 = v51;
              uint64_t v2 = v52;
              if (dword_1002347D8 != -1 || _LogCategory_Initialize(&dword_1002347D8, 10LL)) {
                LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsUpdateIdentities]",  10LL,  "UpdateIdentities: UCh: %@",  v7);
              }
LABEL_48:

              goto LABEL_49;
            }
          }
        }

        id v18 = 0;
        goto LABEL_20;
      }

    int64_t v21 = v35;
    id v15 = static os_log_type_t.error.getter(v44);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v45 = qword_10023DFC0;
    char v46 = sub_100098CD8((uint64_t *)&unk_100234E00);
    __int16 v47 = swift_allocObject(v46, 72LL, 7LL);
    *(_OWORD *)(v47 + 16) = v79;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = sub_10009914C();
    uint64_t v48 = v83;
    *(void *)(v47 + 32) = a4;
    *(void *)(v47 + 40) = v48;
    swift_bridgeObjectRetain(v48);
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v45,  "CloudSync: Remove Secondary Cloud Record with address: %@",  57LL,  2LL,  v47);
    swift_bridgeObjectRelease(v47);
    sub_10014A464(a4, v48, 0x6563697665444141LL, 0xEE0064726F636552LL, v77, v78);
LABEL_6:
    swift_release(v6);
  }

  swift_bridgeObjectRelease(v43);
  __int128 v69 = sub_1000AE6C8();
  id v70 = sub_10013BA34();
  swift_release(v69);
  id v71 = *(void *)(v70 + 16);
  uint64_t v72 = v140;
  __int128 v73 = v139;
  if (v71)
  {
    v150 = 0LL;
    __int128 v74 = (*(unsigned __int8 *)(v142 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
    v144 = (char *)v70;
    id v75 = v70 + v74;
    __int16 v76 = *(void *)(v142 + 72);
    v153 = xmmword_1001A5EA0;
    uint64_t v77 = v141;
    v146 = v76;
    while (1)
    {
      sub_1000A7C90(v75, v39, type metadata accessor for BTDeferredRecord);
      __int16 v87 = *(void *)(v39 + 8);
      id v88 = *(void *)(v39 + 16);
      if (v87 == 0x6552656369766544LL && v88 == 0xEC00000064726F63LL)
      {
        sub_1000A7C90(v39, (uint64_t)v77, type metadata accessor for BTDeferredRecord);
      }

      else
      {
        id v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, 0x6552656369766544LL, 0xEC00000064726F63LL, 0LL);
        sub_1000A7C90(v39, (uint64_t)v77, type metadata accessor for BTDeferredRecord);
        if ((v90 & 1) == 0)
        {
          sub_1000A7CD4((uint64_t)v77, type metadata accessor for BTDeferredRecord);
          goto LABEL_48;
        }
      }

      if ((*v77 & 1) != 0)
      {
        __int16 v91 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6574656C6564LL,  0xE600000000000000LL,  0x657461647075LL,  0xE600000000000000LL,  0LL);
        swift_bridgeObjectRelease(0xE600000000000000LL);
        id v78 = sub_1000A7CD4((uint64_t)v77, type metadata accessor for BTDeferredRecord);
        if ((v91 & 1) == 0) {
          goto LABEL_48;
        }
      }

      else
      {
        swift_bridgeObjectRelease(0xE600000000000000LL);
        id v78 = sub_1000A7CD4((uint64_t)v77, type metadata accessor for BTDeferredRecord);
      }

      id v92 = v39 + *(int *)(v152 + 36);
      __int16 v93 = *(void *)(v92 + 8);
      if (v93 >> 60 != 15)
      {
        id v94 = *(void *)v92;
        sub_1000991CC(*(void *)v92, *(void *)(v92 + 8));
        v148 = objc_autoreleasePoolPush();
        __int16 v95 = type metadata accessor for PropertyListDecoder(0LL);
        swift_allocObject(v95, *(unsigned int *)(v95 + 48), *(unsigned __int16 *)(v95 + 52));
        id v96 = PropertyListDecoder.init()();
        __int16 v97 = sub_100098C98( (unint64_t *)&unk_100235860,  type metadata accessor for DeviceRecord,  (uint64_t)&unk_1001A69AC);
        id v98 = (uint64_t)v137;
        signed int v99 = v150;
        signed int v100 = v151;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v151, v94, v93, v151, v97);
        if (!v99)
        {
          v145 = (void *)v94;
          v150 = 0LL;
          swift_release(v96);
          objc_autoreleasePoolPop(v148);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v149 + 56))(v98, 0LL, 1LL, v100);
          v101 = v136;
          v102 = sub_1000C998C(v98, v136, type metadata accessor for DeviceRecord);
          v103 = static os_log_type_t.default.getter(v102);
          v104 = qword_10023DFC0;
          uint64_t v105 = sub_100098CD8((uint64_t *)&unk_100234E00);
          v106 = swift_allocObject(v105, 72LL, 7LL);
          *(_OWORD *)(v106 + 16) = v153;
          unsigned int v107 = sub_100094CA4();
          v109 = v108;
          *(void *)(v106 + 56) = &type metadata for String;
          *(void *)(v106 + 64) = sub_10009914C();
          *(void *)(v106 + 32) = v107;
          *(void *)(v106 + 40) = v109;
          os_log(_:dso:log:_:_:)( v103,  &_mh_execute_header,  v104,  "Construct deferred BTCloudDevice - %@",  37LL,  2LL,  v106);
          swift_bridgeObjectRelease(v106);
          unsigned __int8 v110 = sub_1000B1A88();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v110);
          id v112 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          v111 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v112 >= v111 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1LL);
          }
          unsigned __int8 v113 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v112, v110);
          specialized Array._endMutation()(v113);
          sub_1000AC4C0((uint64_t)v145, v93);
          sub_1000A7CD4(v101, type metadata accessor for DeviceRecord);
          uint64_t v72 = v140;
          __int128 v73 = v139;
          uint64_t v77 = v141;
          uint64_t v39 = (uint64_t)v143;
          __int16 v76 = v146;
          goto LABEL_48;
        }

        swift_release(v96);
        objc_autoreleasePoolPop(v148);
        swift_errorRelease(v99);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v98, 1LL, 1LL, v100);
        sub_1000AC4C0(v94, v93);
        id v78 = sub_100099358(v98, &qword_100235848);
        v150 = 0LL;
        __int16 v76 = v146;
      }

      id v79 = static os_log_type_t.default.getter(v78);
      __int128 v80 = qword_10023DFC0;
      __int128 v81 = sub_100098CD8((uint64_t *)&unk_100234E00);
      unint64_t v82 = swift_allocObject(v81, 72LL, 7LL);
      *(_OWORD *)(v82 + 16) = v153;
      __int16 v83 = v138;
      sub_1000A7C90(v39, v138, type metadata accessor for BTDeferredRecord);
      id v84 = String.init<A>(describing:)(v83, v152);
      id v86 = v85;
      *(void *)(v82 + 56) = &type metadata for String;
      *(void *)(v82 + 64) = sub_10009914C();
      *(void *)(v82 + 32) = v84;
      *(void *)(v82 + 40) = v86;
      os_log(_:dso:log:_:_:)( v79,  &_mh_execute_header,  v80,  "Unable to contruct deferred BTCloudDevice - %@",  46LL,  2LL,  v82);
      swift_bridgeObjectRelease(v82);
      uint64_t v72 = v140;
      __int128 v73 = v139;
      uint64_t v77 = v141;
LABEL_48:
      sub_1000A7CD4(v39, type metadata accessor for BTDeferredRecord);
      v75 += v76;
      if (!--v71)
      {
        uint64_t v114 = (uint64_t)v144;
        goto LABEL_67;
      }
    }
  }

  uint64_t v114 = v70;
LABEL_67:
  swift_bridgeObjectRelease(v114);
  id v115 = v147;
  v116 = *(void **)&v147[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  id v117 = v157;
  v118 = (void *)swift_allocObject(&unk_10020C0C0, 40LL, 7LL);
  v118[2] = v117;
  v118[3] = v73;
  v118[4] = v72;
  aBlock[4] = sub_1000C9E2C;
  v156 = v118;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020C0D8;
  uint64_t v119 = _Block_copy(aBlock);
  v120 = v116;
  int v121 = swift_retain(v72);
  int v122 = v131;
  static DispatchQoS.unspecified.getter(v121);
  v154 = _swiftEmptyArrayStorage;
  unsigned int v123 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  char v124 = sub_100098CD8((uint64_t *)&unk_100235790);
  unsigned __int8 v125 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  unsigned __int8 v126 = v134;
  BOOL v127 = v124;
  BOOL v128 = v130;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v127, v125, v130, v123);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v122, v126, v119);
  _Block_release(v119);

  (*(void (**)(char *, uint64_t))(v135 + 8))(v126, v128);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v122, v133);
  return swift_release(v156);
}

  uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[16] + 8));
  if ((v221 & 1) != 0)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[17] + 8));
    if ((v222 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

    double v20 = v35;
    uint64_t v45 = static os_log_type_t.error.getter(v44);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    char v46 = qword_10023DFC0;
    __int16 v47 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v6 = swift_allocObject(v47, 72LL, 7LL);
    *(_OWORD *)(v6 + 16) = v79;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10009914C();
    uint64_t v48 = v83;
    *(void *)(v6 + 32) = a4;
    *(void *)(v6 + 40) = v48;
    swift_bridgeObjectRetain(v48);
    os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  v46,  "CloudSync: Remove Secondary Cloud AAProxCardsRecord with address: %@",  68LL,  2LL,  v6);
    swift_bridgeObjectRelease(v6);
    sub_10014A464(a4, v48, 0xD000000000000011LL, v76, v77, v78);
LABEL_6:
    swift_release(v14);
  }

      if (++v109 == v108) {
        return (void *)swift_bridgeObjectRelease_n(v266, 2LL);
      }
    }
  }

  __int16 v85 = sub_100122C10( a1,  (uint64_t *)&unk_100235810,  (void (*)(void, uint64_t, void, __n128))sub_100161154,  type metadata accessor for MagicPairingSettingsRecord);
  if (v85)
  {
    id v86 = v85;
    __int16 v87 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    __int16 v89 = swift_unknownObjectWeakLoadStrong(v87, v88);
    if (v89)
    {
      __int16 v91 = (void *)v89;
      id v43 = (void *)swift_unknownObjectWeakLoadStrong( v89 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v90);

      if (v43)
      {
        id v92 = _swiftEmptyArrayStorage;
        v283[0] = _swiftEmptyArrayStorage;
        __int16 v93 = v86[2];
        if (v93)
        {
          id v94 = (uint64_t)v86
              + ((*(unsigned __int8 *)(v263 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80));
          __int16 v95 = *(void *)(v263 + 72);
          swift_bridgeObjectRetain(v86);
          id v96 = (uint64_t)v264;
          do
          {
            sub_1000A7C90(v94, v96, type metadata accessor for DeviceSupportInformationRecord);
            __int16 v97 = sub_1000B737C();
            id v98 = sub_1000A7CD4(v96, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v98);
            signed int v100 = *(void *)((v283[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            signed int v99 = *(void *)((v283[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v100 >= v99 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1LL);
            }
            v101 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v97);
            specialized Array._endMutation()(v101);
            v94 += v95;
            --v93;
          }

          while (v93);
          swift_bridgeObjectRelease(v86);
          id v92 = (void *)v283[0];
        }

        swift_bridgeObjectRelease(v86);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v84.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v92);
        [v43 deviceSupportInformationRecordsUpdatedWithRecords:v84.super.isa];
        goto LABEL_29;
      }
    }

    id v56 = (uint64_t)v86;
    return (void *)swift_bridgeObjectRelease(v56);
  }

  v146 = sub_100122C10( a1,  (uint64_t *)&unk_100235810,  (void (*)(void, uint64_t, void, __n128))sub_1001611C8,  type metadata accessor for MagicPairingSettingsRecord);
  if (v146)
  {
    v147 = v146;
    if (v146[2])
    {
      v148 = v265;
      v149 = (uint64_t)v268;
      sub_1000A7C90( (uint64_t)v146 + ((*(unsigned __int8 *)(v265 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v265 + 80)),  (uint64_t)v268,  type metadata accessor for LegacyMagicPairingSettingsRecords);
      v150 = 0LL;
      v151 = v275;
      v152 = v266;
    }

    else
    {
      v150 = 1LL;
      v151 = v275;
      v149 = (uint64_t)v268;
      v152 = v266;
      v148 = v265;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(v149, v150, 1LL, v152);
    swift_bridgeObjectRelease(v147);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v149, 1LL, v152) == 1)
    {
      sub_100099358(v149, &qword_1002357D8);
      goto LABEL_83;
    }

    sub_1000C998C(v149, v273, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v159 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    v161 = swift_unknownObjectWeakLoadStrong(v159, v160);
    if (!v161
      || (v163 = (void *)v161,
          v164 = (void *)swift_unknownObjectWeakLoadStrong( v161 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v162),  v163,  !v164))
    {
LABEL_142:
      v235 = v278;
      swift_beginAccess(v278, v280, 0LL, 0LL);
      v237 = swift_unknownObjectWeakLoadStrong(v235, v236);
      if (!v237) {
        return (void *)sub_1000A7CD4(v273, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      v239 = (void *)v237;
      v240 = (void *)swift_unknownObjectWeakLoadStrong( v237 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v238);

      if (!v240) {
        return (void *)sub_1000A7CD4(v273, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      sub_1000EF00C();
      v242 = v241;
      v282 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v241 >> 62)
      {
        if (v241 < 0) {
          v261 = v241;
        }
        else {
          v261 = v241 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v241);
        uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v261);
        v243 = (uint64_t)result;
        if (result)
        {
LABEL_146:
          v279 = (uint64_t)v240;
          if (v243 >= 1)
          {
            for (i = 0LL; i != v243; ++i)
            {
              if ((v242 & 0xC000000000000001LL) != 0) {
                v245 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v242);
              }
              else {
                v245 = *(id *)(v242 + 8 * i + 32);
              }
              v246 = v245;
              v247 = [v245 bluetoothAddress];
              static String._unconditionallyBridgeFromObjectiveC(_:)(v247);
              v249 = v248;

              v250 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
              v251 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v249);
              v252 = [v250 initWithBluetoothAddress:v251];

              v253 = [v246 name];
              [v252 setNickname:v253];

              v254 = [v246 productID];
              [v252 setProductID:v254];

              v255 = [v246 vendorID];
              [v252 setVendorID:v255];

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v256);
              v258 = *(void *)((v282 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              v257 = *(void *)((v282 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v258 >= v257 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v257 > 1,  v258 + 1,  1LL);
              }
              v259 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v258, v252);
              specialized Array._endMutation()(v259);
            }

            swift_bridgeObjectRelease(v242);
            v260 = (void *)v282;
            v240 = (void *)v279;
            goto LABEL_160;
          }

      if (++v108 == v107) {
        return (void *)swift_bridgeObjectRelease_n(v265, 2LL);
      }
    }
  }

  id v84 = sub_100122E54( a1,  type metadata accessor for DeviceSupportInformationRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161154);
  if (v84)
  {
    __int16 v85 = v84;
    id v86 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    id v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
    if (v88)
    {
      id v90 = (void *)v88;
      uint64_t v42 = (void *)swift_unknownObjectWeakLoadStrong( v88 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v89);

      if (v42)
      {
        __int16 v91 = _swiftEmptyArrayStorage;
        v282[0] = _swiftEmptyArrayStorage;
        id v92 = v85[2];
        if (v92)
        {
          __int16 v93 = (uint64_t)v85
              + ((*(unsigned __int8 *)(v262 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80));
          id v94 = *(void *)(v262 + 72);
          swift_bridgeObjectRetain(v85);
          __int16 v95 = (uint64_t)v263;
          do
          {
            sub_1000A7C90(v93, v95, type metadata accessor for DeviceSupportInformationRecord);
            id v96 = sub_1000B737C();
            __int16 v97 = sub_1000A7CD4(v95, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v97);
            signed int v99 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            id v98 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v99 >= v98 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1LL);
            }
            signed int v100 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v96);
            specialized Array._endMutation()(v100);
            v93 += v94;
            --v92;
          }

          while (v92);
          swift_bridgeObjectRelease(v85);
          __int16 v91 = (void *)v282[0];
        }

        swift_bridgeObjectRelease(v85);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v91);
        [v42 deviceSupportInformationRecordsUpdatedWithRecords:v83.super.isa];
        goto LABEL_29;
      }
    }

    dispatch_time_t v55 = (uint64_t)v85;
    return (void *)swift_bridgeObjectRelease(v55);
  }

  v145 = sub_100122C10( a1,  &qword_100235828,  (void (*)(void, uint64_t, void, __n128))sub_1001611C8,  type metadata accessor for DeviceSupportInformationRecord);
  if (v145)
  {
    v146 = v145;
    if (v145[2])
    {
      v147 = v264;
      v148 = (uint64_t)v267;
      sub_1000A7C90( (uint64_t)v145 + ((*(unsigned __int8 *)(v264 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v264 + 80)),  (uint64_t)v267,  type metadata accessor for LegacyMagicPairingSettingsRecords);
      v149 = 0LL;
      v150 = v274;
      v151 = v265;
    }

    else
    {
      v149 = 1LL;
      v150 = v274;
      v148 = (uint64_t)v267;
      v151 = v265;
      v147 = v264;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v148, v149, 1LL, v151);
    swift_bridgeObjectRelease(v146);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v148, 1LL, v151) == 1)
    {
      sub_100099358(v148, &qword_1002357D8);
      goto LABEL_83;
    }

    sub_1000C998C(v148, v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v158 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    v160 = swift_unknownObjectWeakLoadStrong(v158, v159);
    if (!v160
      || (v162 = (void *)v160,
          v163 = (void *)swift_unknownObjectWeakLoadStrong( v160 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v161),  v162,  !v163))
    {
LABEL_142:
      v234 = v277;
      swift_beginAccess(v277, v279, 0LL, 0LL);
      v236 = swift_unknownObjectWeakLoadStrong(v234, v235);
      if (!v236) {
        return (void *)sub_1000A7CD4(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      v238 = (void *)v236;
      v239 = (void *)swift_unknownObjectWeakLoadStrong( v236 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v237);

      if (!v239) {
        return (void *)sub_1000A7CD4(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      sub_1000EF00C();
      v241 = v240;
      v281 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v240 >> 62)
      {
        if (v240 < 0) {
          v260 = v240;
        }
        else {
          v260 = v240 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v240);
        uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v260);
        v242 = (uint64_t)result;
        if (result)
        {
LABEL_146:
          v278 = (uint64_t)v239;
          if (v242 >= 1)
          {
            for (i = 0LL; i != v242; ++i)
            {
              if ((v241 & 0xC000000000000001LL) != 0) {
                v244 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v241);
              }
              else {
                v244 = *(id *)(v241 + 8 * i + 32);
              }
              v245 = v244;
              v246 = [v244 bluetoothAddress];
              static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
              v248 = v247;

              v249 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
              v250 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v248);
              v251 = [v249 initWithBluetoothAddress:v250];

              v252 = [v245 name];
              [v251 setNickname:v252];

              v253 = [v245 productID];
              [v251 setProductID:v253];

              v254 = [v245 vendorID];
              [v251 setVendorID:v254];

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v255);
              v257 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              v256 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v257 >= v256 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v256 > 1,  v257 + 1,  1LL);
              }
              v258 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v257, v251);
              specialized Array._endMutation()(v258);
            }

            swift_bridgeObjectRelease(v241);
            v259 = (void *)v281;
            v239 = (void *)v278;
            goto LABEL_160;
          }

      if (++v108 == v107) {
        return (void *)swift_bridgeObjectRelease_n(v265, 2LL);
      }
    }
  }

  id v84 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_100161154,  type metadata accessor for DeviceRecord);
  if (v84)
  {
    __int16 v85 = v84;
    id v86 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    id v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
    if (v88)
    {
      id v90 = (void *)v88;
      uint64_t v42 = (void *)swift_unknownObjectWeakLoadStrong( v88 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v89);

      if (v42)
      {
        __int16 v91 = _swiftEmptyArrayStorage;
        v282[0] = _swiftEmptyArrayStorage;
        id v92 = v85[2];
        if (v92)
        {
          __int16 v93 = (uint64_t)v85
              + ((*(unsigned __int8 *)(v262 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80));
          id v94 = *(void *)(v262 + 72);
          swift_bridgeObjectRetain(v85);
          __int16 v95 = (uint64_t)v263;
          do
          {
            sub_1000A7C90(v93, v95, type metadata accessor for DeviceSupportInformationRecord);
            id v96 = sub_1000B737C();
            __int16 v97 = sub_1000A7CD4(v95, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v97);
            signed int v99 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            id v98 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v99 >= v98 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1LL);
            }
            signed int v100 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v96);
            specialized Array._endMutation()(v100);
            v93 += v94;
            --v92;
          }

          while (v92);
          swift_bridgeObjectRelease(v85);
          __int16 v91 = (void *)v282[0];
        }

        swift_bridgeObjectRelease(v85);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v91);
        [v42 deviceSupportInformationRecordsUpdatedWithRecords:v83.super.isa];
        goto LABEL_29;
      }
    }

    dispatch_time_t v55 = (uint64_t)v85;
    return (void *)swift_bridgeObjectRelease(v55);
  }

  v145 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_1001611C8,  type metadata accessor for DeviceRecord);
  if (v145)
  {
    v146 = v145;
    if (v145[2])
    {
      v147 = v264;
      v148 = (uint64_t)v267;
      sub_1000A7C90( (uint64_t)v145 + ((*(unsigned __int8 *)(v264 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v264 + 80)),  (uint64_t)v267,  type metadata accessor for LegacyMagicPairingSettingsRecords);
      v149 = 0LL;
      v150 = v274;
      v151 = v265;
    }

    else
    {
      v149 = 1LL;
      v150 = v274;
      v148 = (uint64_t)v267;
      v151 = v265;
      v147 = v264;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v148, v149, 1LL, v151);
    swift_bridgeObjectRelease(v146);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v148, 1LL, v151) == 1)
    {
      sub_100099358(v148, &qword_1002357D8);
      goto LABEL_83;
    }

    sub_1000C998C(v148, v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v158 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    v160 = swift_unknownObjectWeakLoadStrong(v158, v159);
    if (!v160
      || (v162 = (void *)v160,
          v163 = (void *)swift_unknownObjectWeakLoadStrong( v160 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v161),  v162,  !v163))
    {
LABEL_142:
      v234 = v277;
      swift_beginAccess(v277, v279, 0LL, 0LL);
      v236 = swift_unknownObjectWeakLoadStrong(v234, v235);
      if (!v236) {
        return (void *)sub_1000A7CD4(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      v238 = (void *)v236;
      v239 = (void *)swift_unknownObjectWeakLoadStrong( v236 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v237);

      if (!v239) {
        return (void *)sub_1000A7CD4(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      sub_1000EF00C();
      v241 = v240;
      v281 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v240 >> 62)
      {
        if (v240 < 0) {
          v260 = v240;
        }
        else {
          v260 = v240 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v240);
        uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v260);
        v242 = (uint64_t)result;
        if (result)
        {
LABEL_146:
          v278 = (uint64_t)v239;
          if (v242 >= 1)
          {
            for (i = 0LL; i != v242; ++i)
            {
              if ((v241 & 0xC000000000000001LL) != 0) {
                v244 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v241);
              }
              else {
                v244 = *(id *)(v241 + 8 * i + 32);
              }
              v245 = v244;
              v246 = [v244 bluetoothAddress];
              static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
              v248 = v247;

              v249 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
              v250 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v248);
              v251 = [v249 initWithBluetoothAddress:v250];

              v252 = [v245 name];
              [v251 setNickname:v252];

              v253 = [v245 productID];
              [v251 setProductID:v253];

              v254 = [v245 vendorID];
              [v251 setVendorID:v254];

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v255);
              v257 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              v256 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v257 >= v256 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v256 > 1,  v257 + 1,  1LL);
              }
              v258 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v257, v251);
              specialized Array._endMutation()(v258);
            }

            swift_bridgeObjectRelease(v241);
            v259 = (void *)v281;
            v239 = (void *)v278;
            goto LABEL_160;
          }

void sub_100087E20(id a1, NSString *a2, CBDeviceIdentity *a3, BOOL *a4)
{
}

void sub_100087E2C(uint64_t a1, void *a2)
{
  id v5 = a2;
  [*(id *)(a1 + 32) invalidate];
  int v3 = v5;
  if (v5)
  {
    if (dword_1002347D8 <= 90)
    {
      if (dword_1002347D8 != -1 || (v4 = _LogCategory_Initialize(&dword_1002347D8, 90LL), int v3 = v5, v4))
      {
        LogPrintF( &dword_1002347D8,  "-[BTIdentityDaemon _idsUpdateIdentities]_block_invoke_2",  90LL,  "### UpdateIdentities failed: %{error}",  v3);
        int v3 = v5;
      }
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 40) + 12LL) = 1;
  }
}

uint64_t sub_10008827C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = ccaes_ecb_decrypt_mode();
  return ccecb_one_shot(v6, 16LL, a1, 1LL, a2, a3);
}

uint64_t sub_1000882C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = ccaes_ecb_encrypt_mode();
  return ccecb_one_shot(v6, 16LL, a1, 1LL, a2, a3);
}

void sub_1000896C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000896F0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleEvent:v3];
}

void sub_100089DF4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10008A1AC(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___BTServicesDaemon);
  uint64_t v2 = (void *)qword_1002372A0;
  qword_1002372A0 = (uint64_t)v1;
}

void sub_10008A8A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

uint64_t sub_10008A900(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008A910(uint64_t a1)
{
}

void sub_10008A918(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([a3 bleDevice]);
  NSAppendPrintF(&obj, "    TRIG: %@\n", v4);
  objc_storeStrong((id *)(v3 + 40), obj);
}

id sub_10008A9DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_10008AD74(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged];
}

uint64_t sub_10008ADE4(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100234918 <= 30)
  {
    if (dword_100234918 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100234918, 30LL), (_DWORD)result)) {
      uint64_t result = LogPrintF(&dword_100234918, "-[BTServicesDaemon _activate]_block_invoke_2", 30LL, "Ignore BT Reset");
    }
  }

  *(_BYTE *)(*(void *)(v1 + 32) + 176LL) = 1;
  return result;
}

void sub_10008AE5C(id a1, int a2)
{
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL))) {
    LogPrintF( &dword_100234918,  "-[BTServicesDaemon _activate]_block_invoke_3",  30LL,  "audioQuality BTAudioQualityMonitorKey triggered");
  }
}

uint64_t sub_10008AEBC(uint64_t a1)
{
  return CUStateDumpWithObject("BTServices", *(void *)(a1 + 32), &dword_100234918);
}

_BYTE *sub_10008AED8(uint64_t a1)
{
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL))) {
    LogPrintF( &dword_100234918,  "-[BTServicesDaemon _activate]_block_invoke_5",  30LL,  "Bluetoothd has crashed / Restarted");
  }
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (!result[176])
  {
    [result showCrashBannerIfNeeded:&off_100218FF8];
    uint64_t result = *(_BYTE **)(a1 + 32);
  }

  result[176] = 0;
  return result;
}

void sub_10008AF64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = v3;
    if (dword_100234918 <= 90
      && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 90LL)))
    {
      LogPrintF( &dword_100234918,  "-[BTServicesDaemon _activate]_block_invoke_6",  90LL,  "### Activate failed: %{error}\n",  v4);
    }

    [*(id *)(*(void *)(a1 + 32) + 24) invalidate];
    id v3 = v4;
  }
}

id sub_10008B054(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 48);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(*(void *)(a1 + 32) + 48LL) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  int v4 = *(_DWORD *)(v2 + 44);
  if (v4 != -1)
  {
    notify_cancel(v4);
    *(_DWORD *)(*(void *)(a1 + 32) + 4RandomBytes(&unk_1002371D8, 4LL) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  int v5 = *(_DWORD *)(v2 + 8);
  if (v5 != -1)
  {
    notify_cancel(v5);
    *(_DWORD *)(*(void *)(a1 + 32) + 8LL) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v6 = *(void *)(v2 + 128);
  if (v6)
  {
    os_state_remove_handler(v6);
    *(void *)(*(void *)(a1 + 32) + 128LL) = 0LL;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  [*(id *)(v2 + 168) invalidate];
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 168);
  *(void *)(v7 + 16_Block_object_dispose((const void *)(v1 - 160), 8) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 24) invalidate];
  [*(id *)(a1 + 32) _cbConnectedDiscoveryEnsureStopped];
  [*(id *)(a1 + 32) _shareAudioActionScannerEnsureStopped];
  return _[*(id *)(a1 + 32) _shareAudioConnectedMonitorEnsureStopped];
}

id sub_10008B570(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10008B964(uint64_t a1, unsigned int a2, void *a3)
{
  id v6 = a3;
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL)))
  {
    if (a2 > 5) {
      int v5 = "?";
    }
    else {
      int v5 = off_1002091D0[a2];
    }
    LogPrintF( &dword_100234918,  "-[BTServicesDaemon showCrashBannerIfNeeded:]_block_invoke",  30LL,  "Diag: Bluetooth firmware crash banner action: %s, %{error}",  v5,  v6);
  }

  [*(id *)(a1 + 32) invalidate];
}

id sub_10008BA18(uint64_t a1)
{
  return _[*(id *)(a1 + 40) _fileRadarForFWCrash:*(void *)(a1 + 48)];
}

LABEL_22:
}

    id v15 = (v27 - 1) & v27;
    double v20 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_5:
    int64_t v21 = *(void *)(*(void *)(v11 + 56) + 8 * v20);
    id v22 = swift_retain(v21);
    v23._countAndFlagsBits = sub_1000C4A98(v22);
    uint64_t v24 = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v24);
    v25._countAndFlagsBits = 2570LL;
    v25._object = (void *)0xE200000000000000LL;
    String.append(_:)(v25);
    uint64_t result = swift_release(v21);
  }

  dispatch_time_t v28 = v26 + 4;
  if (v28 >= v16)
  {
LABEL_23:
    swift_release(v11);
    return v31;
  }

  dispatch_time_t v27 = *(void *)(v12 + 8 * v28);
  if (v27)
  {
    id v18 = v28;
    goto LABEL_22;
  }

  while (1)
  {
    id v18 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v18 >= v16) {
      goto LABEL_23;
    }
    dispatch_time_t v27 = *(void *)(v12 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }

    __int128 v67 = (v24 - 1) & v24;
    id v22 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_23:
    uint64_t v26 = (uint64_t *)(v65[6] + 16 * v22);
    dispatch_time_t v28 = *v26;
    dispatch_time_t v27 = v26[1];
    id v29 = *(void *)(v65[7] + 8 * v22);
    id v30 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_bridgeObjectRetain(v27);
    swift_retain(v29);
    uint64_t v31 = [v30 isFirstUnlocked];
    __int128 v68 = v17;
    __int128 v69 = v29;
    __int128 v66 = v28;
    if ((v31 & 1) != 0)
    {
      id v32 = sub_10013A76C();
      if (qword_100234B70 != -1) {
        swift_once(&qword_100234B70, sub_1000CAF84);
      }
      id v33 = v60;
      uint64_t v34 = sub_100098D58(v60, (uint64_t)qword_10023DD70);
      id v36 = (uint64_t)v58;
      uint64_t v35 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v34, v33);
      __int16 v37 = sub_100138A68(v36);
      swift_release(v32);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v33);
      id v29 = v69;
      uint64_t v38 = v37[2];
      if (!v38) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v39 = static os_log_type_t.error.getter(v31);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      id v40 = v39;
      __int16 v37 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage,  v57);
      uint64_t v38 = _swiftEmptyArrayStorage[2];
      if (!v38)
      {
LABEL_4:
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v37);
LABEL_5:
        uint64_t result = swift_release(v29);
        goto LABEL_6;
      }
    }

    uint64_t v41 = v61;
    uint64_t v42 = (uint64_t)v37 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    swift_bridgeObjectRetain(v37);
    id v43 = *(void *)(v41 + 72);
    while (1)
    {
      sub_1000A7C90(v42, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
      __int16 v44 = &v6[*(int *)(v70 + 24)];
      uint64_t v45 = *((void *)v44 + 1);
      if (*(void *)v44 == a1 && v45 == a2) {
        break;
      }
      __int16 v47 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v44, v45, a1, a2, 0LL);
      sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
      if ((v47 & 1) != 0) {
        goto LABEL_40;
      }
      v42 += v43;
      if (!--v38)
      {
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease_n(v37, 2LL);
        id v29 = v69;
        goto LABEL_5;
      }
    }

    sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
LABEL_40:
    uint64_t v48 = swift_bridgeObjectRelease_n(v37, 2LL);
    __int16 v49 = static os_log_type_t.default.getter(v48);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    unint64_t v50 = qword_10023DFC0;
    __int16 v51 = sub_100098CD8((uint64_t *)&unk_100234E00);
    os_log_t v52 = swift_allocObject(v51, 72LL, 7LL);
    *(_OWORD *)(v52 + 16) = v57;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 64) = sub_10009914C();
    id v53 = v66;
    *(void *)(v52 + 32) = v66;
    *(void *)(v52 + 40) = v27;
    swift_bridgeObjectRetain(v27);
    os_log(_:dso:log:_:_:)( v49,  &_mh_execute_header,  v50,  "CloudSync: Connected device belongs to %@ user's account",  56LL,  2LL,  v52);
    swift_bridgeObjectRelease(v52);
    id v54 = v69;
    swift_retain(v69);
    dispatch_time_t v55 = v64;
    id v56 = swift_isUniquelyReferenced_nonNull_native(v64);
    id v71 = v55;
    sub_10009D998(v54, v53, v27, v56);
    uint64_t v64 = v71;
    swift_release(v54);
    swift_bridgeObjectRelease(v27);
    uint64_t result = swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_6:
    int64_t v21 = v67;
    uint64_t v17 = v68;
  }

  id v25 = v23 + 3;
  if (v25 >= v63)
  {
LABEL_43:
    swift_release(v65);
    return (uint64_t)v64;
  }

  uint64_t v24 = v62[v25];
  if (v24)
  {
    uint64_t v17 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v17 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v17 >= v63) {
      goto LABEL_43;
    }
    uint64_t v24 = v62[v17];
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }

    uint64_t v7 = (v14 - 1) & v14;
    os_log_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_1000A4B48(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    uint64_t v17 = *(id *)(*(void *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    uint64_t result = sub_100099358((uint64_t)v16, (uint64_t *)&unk_1002365D0);
  }

  id v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release(a1);
  }
  uint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    os_log_t v10 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    os_log_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release(a1);
    }
    uint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    id v6 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_5:
    id v18 = *(_OWORD *)(*(void *)(a1 + 56) + 16 * v9);
    __chkstk_darwin();
    v16[1] = v18;
    unint64_t v11 = v10;
    os_log_t v12 = *((void *)&v18 + 1);
    swift_retain(*((void *)&v18 + 1));
    a2(v11, sub_100113B38, v16);
    swift_release(v12);
  }

  id v15 = v13 + 4;
  if (v15 >= v19)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v14 = *(void *)(v17 + 8 * v15);
  if (v14)
  {
    uint64_t v7 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v7 >= v19) {
      goto LABEL_23;
    }
    uint64_t v14 = *(void *)(v17 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

void sub_10008C258(uint64_t a1, unsigned int a2, void *a3)
{
  id v6 = a3;
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL)))
  {
    if (a2 > 5) {
      int v5 = "?";
    }
    else {
      int v5 = off_1002091D0[a2];
    }
    LogPrintF( &dword_100234918,  "-[BTServicesDaemon _showConnectBannerIfEnabled:]_block_invoke",  30LL,  "Diag: Connect banner action: %s, %{error}",  v5,  v6);
  }

  [*(id *)(a1 + 32) invalidate];
}

void sub_10008C5EC(uint64_t a1, unsigned int a2, void *a3)
{
  id v6 = a3;
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL)))
  {
    if (a2 > 5) {
      int v5 = "?";
    }
    else {
      int v5 = off_1002091D0[a2];
    }
    LogPrintF( &dword_100234918,  "-[BTServicesDaemon _showHIDLagBannerIfEnabled:]_block_invoke",  30LL,  "Diag: Bluetooth HID lag banner action: %s, %{error}",  v5,  v6);
  }

  [*(id *)(a1 + 32) invalidate];
}

id sub_10008C6A0(uint64_t a1)
{
  return _[*(id *)(a1 + 40) _fileRadarForHIDLag:*(void *)(a1 + 48)];
}

id sub_10008C980(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _showConnectBannerIfEnabled:a2];
}

void sub_10008C98C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100234918 <= 90
      && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 90LL)))
    {
      LogPrintF( &dword_100234918,  "-[BTServicesDaemon _cbConnectedDiscoveryEnsureStarted]_block_invoke_2",  90LL,  "### Activate failed: %{error}\n",  v3);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) invalidate];
  }

  else
  {
    [*(id *)(a1 + 32) _update];
  }
}

id sub_10008CD64(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

void *sub_10008CFE8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[7] == *(void *)(a1 + 40)) {
    return _[result _shareAudioActionScannerDeviceFound:a2];
  }
  return result;
}

void *sub_10008D00C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[7] == *(void *)(a1 + 40)) {
    return [result _shareAudioActionScannerDeviceLost:a2];
  }
  return result;
}

void *sub_10008D030(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[7] == *(void *)(a1 + 40)) {
    return _[result _shareAudioActionScannerDeviceFound:a2];
  }
  return result;
}

void sub_10008D054(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 56LL) == *(void *)(a1 + 40))
  {
    id v6 = v3;
    if (dword_100234A48 <= 90
      && (dword_100234A48 != -1 || _LogCategory_Initialize(&dword_100234A48, 90LL)))
    {
      LogPrintF( &dword_100234A48,  "-[BTServicesDaemon _shareAudioActionScannerEnsureStarted]_block_invoke_4",  90LL,  "### Action scanner start failed: %{error}",  v6);
    }

    [*(id *)(a1 + 40) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0LL;

    id v3 = v6;
  }
}

void *sub_10008D7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[10]) {
    return _[result _shareAudioConnectedDeviceFound:a2];
  }
  return result;
}

void *sub_10008D7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[10]) {
    return _[result _shareAudioConnectedDeviceLost:a2];
  }
  return result;
}

void sub_10008DD64(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 88LL))
  {
    id v9 = v5;
    if (dword_100234A48 <= 30
      && (dword_100234A48 != -1 || _LogCategory_Initialize(&dword_100234A48, 30LL)))
    {
      if (a2 > 5) {
        id v6 = "?";
      }
      else {
        id v6 = off_1002091D0[a2];
      }
      LogPrintF( &dword_100234A48,  "-[BTServicesDaemon _shareAudioShowConnectBanner:]_block_invoke",  30LL,  "Banner action: %s, %{error}",  v6,  v9);
    }

    [*(id *)(*(void *)(a1 + 40) + 88) invalidate];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 88);
    *(void *)(v7 + 8_Block_object_dispose((const void *)(v1 - 160), 8) = 0LL;

    id v5 = v9;
  }
}

void *sub_10008DE3C(void *result)
{
  if (result[4] == *(void *)(result[5] + 88LL))
  {
    uint64_t v1 = result;
    if (dword_100234A48 <= 30
      && (dword_100234A48 != -1 || _LogCategory_Initialize(&dword_100234A48, 30LL)))
    {
      LogPrintF( &dword_100234A48,  "-[BTServicesDaemon _shareAudioShowConnectBanner:]_block_invoke_2",  30LL,  "Banner action: connect");
    }

    [(id)v1[4] invalidate];
    uint64_t v2 = v1[5];
    uint64_t v3 = *(void **)(v2 + 88);
    *(void *)(v2 + 8_Block_object_dispose((const void *)(v1 - 160), 8) = 0LL;

    return [(id)v1[5] _shareAudioSessionStartWithDarwinDevice:v1[6] wxDevice:v1[7]];
  }

  return result;
}

void *sub_10008E080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v4 == result[12]) {
    return _[result _shareAudioSessionProgressEvent:a2 info:a3];
  }
  return result;
}

void sub_10008EBEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10008EC24(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234918 <= 90)
    {
      if (dword_100234918 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection diagnosticControl:completion:]_block_invoke",  90LL,  "### DiagnosticControl failed: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_10008EE5C(uint64_t a1, unsigned int a2, void *a3)
{
  id v6 = a3;
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL)))
  {
    if (a2 > 5) {
      id v5 = "?";
    }
    else {
      id v5 = off_1002091D0[a2];
    }
    LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection _diagnosticControlShareAudioBanner]_block_invoke",  30LL,  "Diag: ShareAudio banner action: %s, %{error}",  v5,  v6);
  }

  [*(id *)(a1 + 32) invalidate];
}

id sub_10008EF10(uint64_t a1)
{
  if (dword_100234918 <= 30 && (dword_100234918 != -1 || _LogCategory_Initialize(&dword_100234918, 30LL))) {
    LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection _diagnosticControlShareAudioBanner]_block_invoke_2",  30LL,  "Diag: ShareAudio banner action: connect");
  }
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10008F1AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_10008F1F4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234918 <= 90)
    {
      if (dword_100234918 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection diagnosticShow:completion:]_block_invoke",  90LL,  "### DiagnosticShow failed: %{error}",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_10008F540( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_10008F578(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 48) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    if (dword_100234918 <= 90)
    {
      if (dword_100234918 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[6] + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection shareAudioSessionActivate:completion:]_block_invoke",  90LL,  "### Activate failed: %@, %{error}",  v2[4],  v1);
    }

    return (*(uint64_t (**)(void))(v2[5] + 16LL))();
  }

  return result;
}

void sub_10008F638(int8x16_t *a1, int a2, void *a3)
{
  id v5 = a3;
  v10[1] = 3221225472LL;
  int8x16_t v6 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v7 = a1[2].i64[0];
  v10[0] = _NSConcreteStackBlock;
  void v10[2] = sub_10008F6CC;
  v10[3] = &unk_1002091B0;
  id v8 = *(dispatch_queue_s **)(v7 + 32);
  int8x16_t v11 = v6;
  int v13 = a2;
  id v12 = v5;
  id v9 = v5;
  dispatch_async(v8, v10);
}

void sub_10008F6CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v1 + 40))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) remoteObjectProxy]);
    [v3 shareAudioProgressEvent:*(unsigned int *)(a1 + 56) info:*(void *)(a1 + 48)];
  }

void sub_10008F8E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10008F914(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1 && dword_100234918 <= 90)
  {
    uint64_t v2 = result;
    if (dword_100234918 != -1) {
      return LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection shareAudioUserConfirmed:]_block_invoke",  90LL,  "### UserConfirmed failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
    uint64_t result = _LogCategory_Initialize(&dword_100234918, 90LL);
    if ((_DWORD)result)
    {
      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      return LogPrintF( &dword_100234918,  "-[BTServicesXPCConnection shareAudioUserConfirmed:]_block_invoke",  90LL,  "### UserConfirmed failed: %@, %{error}",  *(void *)(v2 + 32),  v1);
    }
  }

  return result;
}

id sub_10008FB50(uint64_t a1)
{
  if (dword_100234AB8 <= 30 && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
  {
    uint64_t v2 = *(int *)(*(void *)(a1 + 32) + 236LL);
    else {
      id v3 = off_100209278[v2];
    }
    LogPrintF(&dword_100234AB8, "-[BTShareAudioSessionDaemon activate]_block_invoke", 30LL, "Activate: Mode %s", v3);
  }

  [*(id *)(a1 + 32) _reportProgress:10];
  return [*(id *)(a1 + 32) _run];
}

void *sub_10008FC58(void *result)
{
  if (!*(_BYTE *)(result[4] + 181LL))
  {
    uint64_t v1 = result;
    if (dword_100234AB8 <= 30
      && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
    {
      LogPrintF(&dword_100234AB8, "-[BTShareAudioSessionDaemon invalidate]_block_invoke", 30LL, "Invalidate");
    }

    *(_BYTE *)(v1[4] + 181LL) = 1;
    return [(id)v1[4] _invalidate];
  }

  return result;
}

void *sub_100090514(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _bleScannerProxPairingDeviceFound:a2];
  }
  return result;
}

void *sub_100090530(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _bleScannerProxPairingDeviceFound:a2];
  }
  return result;
}

void sub_10009054C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runScannerProxPairing]_block_invoke_3",  90LL,  "### BLE ProxPairing scanner start failed: %{error}",  v8);
      }

      [*(id *)(*(void *)(a1 + 40) + 24) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234AB8 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234AB8 != -1 || (v7 = _LogCategory_Initialize(&dword_100234AB8, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runScannerProxPairing]_block_invoke_3",  30LL,  "BLE ProxPairing scanner started");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

void *sub_100090864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[2]) {
    return _[result _bleScannerNearbyInfoDeviceFound:a2];
  }
  return result;
}

void *sub_100090880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[2]) {
    return _[result _bleScannerNearbyInfoDeviceFound:a2];
  }
  return result;
}

void sub_10009089C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 16LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runScannerNearbyInfo]_block_invoke_3",  90LL,  "### BLE NearbyInfo scanner start failed: %{error}",  v8);
      }

      [*(id *)(*(void *)(a1 + 40) + 16) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234AB8 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234AB8 != -1 || (v7 = _LogCategory_Initialize(&dword_100234AB8, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runScannerNearbyInfo]_block_invoke_3",  30LL,  "BLE NearbyInfo scanner started");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

void sub_100090AEC(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void))
{
  uint64_t v5 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == v5[24])
  {
    id v9 = a4;
    objc_msgSend(v5, "_runShareAudioServiceConfigRequest:responseHandler:", a3);
  }

  else
  {
    int8x16_t v6 = a4;
    uint64_t v7 = BTErrorF(4294960582LL, "Registered session invalidated");
    id v9 = (void (**)(void))objc_claimAutoreleasedReturnValue(v7);
    a4[2](v6);
  }
}

void sub_100090B88(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void))
{
  uint64_t v5 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == v5[24])
  {
    id v9 = a4;
    objc_msgSend(v5, "_runShareAudioServiceConnectRequest:responseHandler:", a3);
  }

  else
  {
    int8x16_t v6 = a4;
    uint64_t v7 = BTErrorF(4294960582LL, "Registered session invalidated");
    id v9 = (void (**)(void))objc_claimAutoreleasedReturnValue(v7);
    a4[2](v6);
  }
}

void sub_100090E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100090EA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100090EB0(uint64_t a1)
{
}

uint64_t sub_100090EB8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234AB8 <= 90)
    {
      if (dword_100234AB8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runShareAudioServiceConfigRequest:responseHandler:]_block_invoke",  90LL,  "### Config request failed: %{error}\n",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_10009111C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100091150(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100234AB8 <= 90)
    {
      if (dword_100234AB8 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runShareAudioServiceConfigResponse:]_block_invoke",  90LL,  "### Config request failed: %{error}\n",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_1000914A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8LL))
  {
    if (v3)
    {
      id v8 = v3;
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runAdvertiser]_block_invoke",  90LL,  "### BLE advertiser failed: %@",  v8);
      }

      [*(id *)(*(void *)(a1 + 40) + 8) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 8);
      *(void *)(v5 + _Block_object_dispose(va, 8) = 0LL;

      goto LABEL_11;
    }

    if (dword_100234AB8 <= 30)
    {
      id v8 = 0LL;
      if (dword_100234AB8 != -1 || (v7 = _LogCategory_Initialize(&dword_100234AB8, 30LL), uint64_t v4 = 0LL, v7))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runAdvertiser]_block_invoke",  30LL,  "BLE advertiser started");
LABEL_11:
        uint64_t v4 = v8;
      }
    }
  }
}

void sub_100091994(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160LL))
  {
    id v9 = v3;
    if (dword_100234AB8 <= 90
      && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
    {
      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke",  90LL,  "### Guest iOS session error: %{error}",  v9);
    }

    [*(id *)(*(void *)(a1 + 40) + 160) invalidate];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 160);
    *(void *)(v4 + 160) = 0LL;

    *(_DWORD *)(*(void *)(a1 + 40) + 132LL) = 3;
    int8x16_t v6 = *(void **)(a1 + 40);
    if (v9)
    {
      [v6 _reportError:v9];
    }

    else
    {
      uint64_t v7 = NSErrorF(NSOSStatusErrorDomain, 4294960596LL, "?");
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      [v6 _reportError:v8];
    }

    id v3 = v9;
  }
}

uint64_t sub_100091AA4(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 160LL) && dword_100234AB8 <= 90)
  {
    if (dword_100234AB8 != -1) {
      return LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_2",  90LL,  "### Guest iOS session interrupted");
    }
    uint64_t result = _LogCategory_Initialize(&dword_100234AB8, 90LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_2",  90LL,  "### Guest iOS session interrupted");
    }
  }

  return result;
}

uint64_t sub_100091B14(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 160LL) && dword_100234AB8 <= 90)
  {
    if (dword_100234AB8 != -1) {
      return LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_3",  90LL,  "### Guest iOS session invalidated");
    }
    uint64_t result = _LogCategory_Initialize(&dword_100234AB8, 90LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_3",  90LL,  "### Guest iOS session invalidated");
    }
  }

  return result;
}

void *sub_100091B84(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 160) && *(_DWORD *)(v1 + 132) == 1)
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 132) = 4;
    if (dword_100234AB8 <= 30
      && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
    {
      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_4",  30LL,  "Guest iOS session started");
    }

    return [(id)v2[5] _run];
  }

  return result;
}

void sub_100091C24(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160LL))
  {
    id v7 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_5",  90LL,  "### Guest iOS session activate failed: %@",  v4);
      }

      [*(id *)(*(void *)(a1 + 40) + 160) invalidate];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 160);
      *(void *)(v5 + 160) = 0LL;

      *(_DWORD *)(*(void *)(a1 + 40) + 132LL) = 3;
      [*(id *)(a1 + 40) _reportError:v4];
    }

    else if (dword_100234AB8 <= 30 {
           && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
    }
    {
      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_5",  30LL,  "Guest iOS session activated");
    }

    id v3 = v7;
  }
}

void sub_100091E94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160LL))
  {
    id v5 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSPairSetupPublic]_block_invoke",  90LL,  "### Guest iOS PairSetup failed: %{error}",  v4);
      }

      *(_DWORD *)(*(void *)(a1 + 40) + 152LL) = 3;
      [*(id *)(a1 + 40) _reportError:v4];
    }

    else
    {
      if (dword_100234AB8 <= 30
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSPairSetupPublic]_block_invoke",  30LL,  "Guest iOS PairSetup success");
      }

      [*(id *)(a1 + 40) _reportProgressTriggeredDevice:210];
      *(_DWORD *)(*(void *)(a1 + 40) + 152LL) = 4;
      [*(id *)(a1 + 40) _run];
    }

    id v3 = v5;
  }
}

void sub_1000922A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) != *(void *)(*(void *)(a1 + 40) + 160LL)) {
    goto LABEL_15;
  }
  if (!v3) {
    goto LABEL_7;
  }
  if (dword_100234AB8 <= 90)
  {
    if (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)) {
      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioSendRequest]_block_invoke",  90LL,  "### Guest iOS ShareAudio add proof failed: %{error}",  v4);
    }
LABEL_7:
    if (dword_100234AB8 <= 30
      && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
    {
      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioSendRequest]_block_invoke",  30LL,  "Guest iOS ShareAudio request: %##.16@",  *(void *)(a1 + 48));
    }
  }

  [*(id *)(a1 + 40) _reportProgressTriggeredDevice:220];
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(_DWORD *)(*(void *)(a1 + 40) + 236LL) == 1) {
    int8x16_t v6 = @"_shCf";
  }
  else {
    int8x16_t v6 = @"_shAu";
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  id v7[2] = sub_100092404;
  v7[3] = &unk_100209230;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  [(id)v8 sendRequestID:v6 options:0 request:v5 responseHandler:v7];
LABEL_15:
}

void *sub_100092404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v5 == result[20]) {
    return _[result _runGuestiOSShareAudioProcessResponse:a4 error:a2];
  }
  return result;
}

void sub_10009264C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160LL))
  {
    if (dword_100234AB8 <= 30
      && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
    {
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke",  30LL,  "Guest iOS proof result: ContactID %@, %{error}",  v8,  v7);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 136LL), a2);
    uint64_t v9 = *(void *)(a1 + 48);
    CFTypeID TypeID = CFStringGetTypeID();
    uint64_t TypedValue = CFDictionaryGetTypedValue(v9, @"btAd", TypeID, &v22);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
    int v13 = v12;
    if (v12)
    {
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = *(_DWORD *)(v14 + 236);
      id v16 = v12;
      if (v15 == 1)
      {
        uint64_t v17 = *(void **)(v14 + 72);
        *(void *)(v14 + 72) = v16;
      }

      else
      {
        id v18 = *(void **)(v14 + 80);
        *(void *)(v14 + 80) = v16;

        *(_DWORD *)(*(void *)(a1 + 40) + 88LL) = CFDictionaryGetInt64Ranged( *(void *)(a1 + 48),  @"colorCode",  0LL,  0xFFFFFFFFLL,  0LL);
        *(_DWORD *)(*(void *)(a1 + 40) + 112LL) = CFDictionaryGetInt64Ranged( *(void *)(a1 + 48),  @"productID",  0LL,  0xFFFFFFFFLL,  0LL);
      }

      if (dword_100234AB8 <= 30
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke",  30LL,  "Guest iOS ShareAudio: success: DA %@, PID %u, Color %u",  *(void *)(*(void *)(a1 + 40) + 80LL),  *(unsigned int *)(*(void *)(a1 + 40) + 112LL),  *(unsigned int *)(*(void *)(a1 + 40) + 112LL));
      }

      *(_DWORD *)(*(void *)(a1 + 40) + 168LL) = 4;
      [*(id *)(a1 + 40) _run];
    }

    else
    {
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke",  90LL,  "### Guest iOS ShareAudio: no peer BT address: %#m",  v22);
      }

      *(_DWORD *)(*(void *)(a1 + 40) + 168LL) = 3;
      double v19 = *(void **)(a1 + 40);
      uint64_t v20 = NSErrorF(NSOSStatusErrorDomain, 4294960535LL, "No peer BT Addr");
      int64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      [v19 _reportError:v21];
    }
  }
}

void *sub_100092A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v5 == result[20]) {
    return _[result _runGuestiOSShareAudioConnectProcessResponse:a4 error:a2];
  }
  return result;
}

void sub_100092E84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 104LL))
  {
    id v5 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_100234AB8 <= 90
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 90LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runConnectGuestHeadphones]_block_invoke",  90LL,  "### Guest headphone connect failed: %{error}",  v4);
      }

      *(_DWORD *)(*(void *)(a1 + 40) + 92LL) = 3;
      [*(id *)(a1 + 40) _reportError:v4];
    }

    else
    {
      if (dword_100234AB8 <= 30
        && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL)))
      {
        LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _runConnectGuestHeadphones]_block_invoke",  30LL,  "Guest headphone connect success");
      }

      *(_DWORD *)(*(void *)(a1 + 40) + 92LL) = 4;
      [*(id *)(a1 + 40) _reportProgressTriggeredDevice:310];
      [*(id *)(a1 + 40) _run];
    }

    id v3 = v5;
  }
}

id sub_100093F34(uint64_t a1)
{
  if (dword_100234AB8 <= 30 && (dword_100234AB8 != -1 || _LogCategory_Initialize(&dword_100234AB8, 30LL))) {
    LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon _pickableRoutesChanged:]_block_invoke",  30LL,  "Pickable routes changed");
  }
  return [*(id *)(a1 + 32) _pickableRoutesChanged];
}

id sub_100094868(id result)
{
  id v1 = result;
  if (dword_100234AB8 <= 30)
  {
    if (dword_100234AB8 != -1 || (uint64_t result = (id)_LogCategory_Initialize(&dword_100234AB8, 30LL), (_DWORD)result))
    {
      uint64_t v2 = "yes";
      if (!*((_BYTE *)v1 + 40)) {
        uint64_t v2 = "no";
      }
      uint64_t v3 = *(int *)(*((void *)v1 + 4) + 68LL);
      if (v3 >= 8)
      {
        else {
          id v4 = "User";
        }
      }

      else
      {
        id v4 = off_100209290[v3];
      }

      uint64_t result = (id)LogPrintF( &dword_100234AB8,  "-[BTShareAudioSessionDaemon userConfirmed:]_block_invoke",  30LL,  "User confirmed: permanent %s, CS %s",  v2,  v4);
    }
  }

  uint64_t v5 = *((void *)v1 + 4);
  if (*(_DWORD *)(v5 + 68) == 1)
  {
    *(_BYTE *)(v5 + 64) = *((_BYTE *)v1 + 40);
    *(_DWORD *)(*((void *)v1 + 4) + 68LL) = 4;
    return [*((id *)v1 + 4) _run];
  }

  return result;
}

uint64_t sub_100094AFC()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v5, qword_10023DCC0);
  sub_100098D58(v3, (uint64_t)qword_10023DCC0);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x6552656369766544LL, 0xEC00000064726F63LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

  return result;
}

BOOL sub_100094C50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_100094C68()
{
}

uint64_t sub_100094CA4()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  unint64_t v106 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v105 = (char *)&v104 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  v108 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v109 = (uint64_t)&v104 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v104 - v8;
  __chkstk_darwin(v10);
  id v12 = (char *)&v104 - v11;
  int v13 = (void *)sub_1000A4FF0();
  uint64_t v110 = 0LL;
  unint64_t v111 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(51LL);
  v14._countAndFlagsBits = 0x6552656369766544LL;
  v14._object = (void *)0xED00002864726F63LL;
  String.append(_:)(v14);
  int v15 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 2108704LL;
  v20._object = (void *)0xE300000000000000LL;
  String.append(_:)(v20);
  int64_t v21 = (uint64_t *)(v0 + v15[6]);
  uint64_t v23 = *v21;
  unsigned int v22 = (void *)v21[1];
  swift_bridgeObjectRetain(v22);
  v24._countAndFlagsBits = v23;
  v24._object = v22;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v22);
  v25._countAndFlagsBits = 8236LL;
  v25._object = (void *)0xE200000000000000LL;
  String.append(_:)(v25);
  uint64_t v26 = (uint64_t *)(v0 + v15[7]);
  uint64_t v27 = *v26;
  dispatch_time_t v28 = (void *)v26[1];
  swift_bridgeObjectRetain(v28);
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._countAndFlagsBits = 8236LL;
  v30._object = (void *)0xE200000000000000LL;
  String.append(_:)(v30);
  uint64_t v31 = (uint64_t *)(v0 + v15[9]);
  uint64_t v32 = *v31;
  id v33 = (void *)v31[1];
  swift_bridgeObjectRetain(v33);
  v34._countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 8236LL;
  v35._object = (void *)0xE200000000000000LL;
  String.append(_:)(v35);
  id v36 = (uint64_t *)(v0 + v15[8]);
  uint64_t v37 = *v36;
  uint64_t v38 = (void *)v36[1];
  swift_bridgeObjectRetain(v38);
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  v40._countAndFlagsBits = 0x203A646970202CLL;
  v40._object = (void *)0xE700000000000000LL;
  String.append(_:)(v40);
  uint64_t v41 = (uint64_t *)(v0 + v15[10]);
  uint64_t v42 = *v41;
  id v43 = (void *)v41[1];
  swift_bridgeObjectRetain(v43);
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._countAndFlagsBits = 0x203A646976202CLL;
  v45._object = (void *)0xE700000000000000LL;
  String.append(_:)(v45);
  char v46 = (uint64_t *)(v0 + v15[11]);
  uint64_t v47 = *v46;
  uint64_t v48 = (void *)v46[1];
  swift_bridgeObjectRetain(v48);
  v49._countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._countAndFlagsBits = 10LL;
  v50._object = (void *)0xE100000000000000LL;
  String.append(_:)(v50);
  unint64_t v51 = v111;
  uint64_t v107 = v110;
  uint64_t v110 = 0LL;
  unint64_t v111 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(62LL);
  v52._object = (void *)0x80000001001CAC30LL;
  v52._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v52);
  id v53 = v13;
  id v54 = [v13 creationDate];
  if (v54)
  {
    dispatch_time_t v55 = v54;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v54);

    unint64_t v56 = v106;
    id v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
    v57(v9, 0LL, 1LL, v1);
  }

  else
  {
    unint64_t v56 = v106;
    id v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
    v57(v9, 1LL, 1LL, v1);
  }

  sub_100099290((uint64_t)v9, (uint64_t)v12);
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v58(v12, 1LL, v1))
  {
    sub_100099358((uint64_t)v12, (uint64_t *)&unk_100234E10);
    uint64_t v59 = (void *)0xE200000000000000LL;
    uint64_t v60 = 15932LL;
  }

  else
  {
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    unint64_t v106 = v51;
    id v62 = v105;
    v61(v105, v12, v1);
    sub_100099358((uint64_t)v12, (uint64_t *)&unk_100234E10);
    id v63 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v65 = [v63 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    uint64_t v59 = v66;

    __int128 v67 = v62;
    unint64_t v51 = v106;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v1);
  }

  v68._countAndFlagsBits = v60;
  v68._object = v59;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v59);
  v69._countAndFlagsBits = 0x696669646F6D202CLL;
  v69._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v69);
  id v70 = v53;
  id v71 = [v53 modificationDate];
  if (v71)
  {
    uint64_t v72 = v71;
    __int128 v73 = v108;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

    uint64_t v74 = 0LL;
  }

  else
  {
    uint64_t v74 = 1LL;
    __int128 v73 = v108;
  }

  v57(v73, v74, 1LL, v1);
  uint64_t v75 = (uint64_t)v73;
  uint64_t v76 = v109;
  sub_100099290(v75, v109);
  if (v58((char *)v76, 1LL, v1))
  {
    sub_100099358(v76, (uint64_t *)&unk_100234E10);
    uint64_t v77 = (void *)0xE200000000000000LL;
    uint64_t v78 = 15932LL;
  }

  else
  {
    id v79 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v105, v76, v1);
    sub_100099358(v76, (uint64_t *)&unk_100234E10);
    __int128 v80 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v81 = Date._bridgeToObjectiveC()().super.isa;
    id v82 = [v80 localizedStringFromDate:v81 dateStyle:2 timeStyle:2];

    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    unint64_t v83 = v56;
    uint64_t v77 = v84;

    (*(void (**)(char *, uint64_t))(v83 + 8))(v79, v1);
  }

  v85._countAndFlagsBits = v78;
  v85._object = v77;
  String.append(_:)(v85);
  swift_bridgeObjectRelease(v77);
  v86._countAndFlagsBits = 0x696669646F6D202CLL;
  v86._object = (void *)0xEF203A7962206465LL;
  String.append(_:)(v86);
  id v87 = [v70 modifiedByDevice];
  if (v87)
  {
    id v88 = v87;
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    __int16 v91 = v90;
  }

  else
  {
    __int16 v91 = (void *)0xE200000000000000LL;
    uint64_t v89 = 15932LL;
  }

  v92._countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);
  swift_bridgeObjectRelease(v91);
  v93._countAndFlagsBits = 0x203A67617465202CLL;
  v93._object = (void *)0xE800000000000000LL;
  String.append(_:)(v93);
  id v94 = [v70 recordChangeTag];
  if (v94)
  {
    __int16 v95 = v94;
    uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    id v98 = v97;
  }

  else
  {
    id v98 = (void *)0xE200000000000000LL;
    uint64_t v96 = 15932LL;
  }

  v99._countAndFlagsBits = v96;
  v99._object = v98;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(v98);
  uint64_t v100 = v110;
  v101 = (void *)v111;
  uint64_t v110 = v107;
  unint64_t v111 = v51;
  swift_bridgeObjectRetain(v51);
  v102._countAndFlagsBits = v100;
  v102._object = v101;
  String.append(_:)(v102);

  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v101);
  return v110;
}

uint64_t sub_1000953D8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v55 = type metadata accessor for Date(0LL);
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *a5 = a2;
  a5[1] = a3;
  id v12 = (int *)type metadata accessor for DeviceRecord(0LL);
  int v13 = (char *)a5 + v12[5];
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v14 - 8);
  int v15 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  uint64_t v54 = a1;
  v15(v13, a1, v14);
  sub_1000991CC(a2, a3);
  id v16 = [a4 bluetoothAddress];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  Swift::String v20 = (uint64_t *)((char *)a5 + v12[6]);
  *Swift::String v20 = v17;
  v20[1] = v19;
  id v21 = [a4 nickname];
  if (v21)
  {
    unsigned int v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v25 = v24;
  }

  else
  {
    uint64_t v23 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
  }

  uint64_t v26 = (uint64_t *)((char *)a5 + v12[7]);
  *uint64_t v26 = v23;
  v26[1] = v25;
  id v27 = [a4 modelNumber];
  if (v27)
  {
    dispatch_time_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    unint64_t v31 = v30;
  }

  else
  {
    uint64_t v29 = 0LL;
    unint64_t v31 = 0xE000000000000000LL;
  }

  uint64_t v32 = (uint64_t *)((char *)a5 + v12[8]);
  *uint64_t v32 = v29;
  v32[1] = v31;
  id v33 = [a4 manufacturer];
  if (v33)
  {
    Swift::String v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v37 = v36;
  }

  else
  {
    uint64_t v35 = 0LL;
    unint64_t v37 = 0xE000000000000000LL;
  }

  uint64_t v38 = (uint64_t *)((char *)a5 + v12[9]);
  *uint64_t v38 = v35;
  v38[1] = v37;
  id v39 = [a4 productID];
  if (v39)
  {
    Swift::String v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    unint64_t v43 = v42;
  }

  else
  {
    uint64_t v41 = 0LL;
    unint64_t v43 = 0xE000000000000000LL;
  }

  Swift::String v44 = (uint64_t *)((char *)a5 + v12[10]);
  *Swift::String v44 = v41;
  v44[1] = v43;
  id v45 = [a4 vendorID];
  if (v45)
  {
    char v46 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    unint64_t v49 = v48;
  }

  else
  {
    uint64_t v47 = 0LL;
    unint64_t v49 = 0xE000000000000000LL;
  }

  Swift::String v50 = (uint64_t *)((char *)a5 + v12[11]);
  *Swift::String v50 = v47;
  v50[1] = v49;
  static Date.now.getter(v45);

  sub_100099394(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v14);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))((char *)a5 + v12[12], v11, v55);
}

uint64_t sub_1000956A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v113 = a2;
  sub_100098CD8((uint64_t *)&unk_100234E10);
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v111 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  id v112 = (char *)&v103 - v6;
  __chkstk_darwin(v5);
  uint64_t v115 = (uint64_t)&v103 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v116 = *(void *)(v8 - 8);
  uint64_t v117 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v110 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v114 = (char *)&v103 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  int v13 = *(char **)(v12 - 8);
  uint64_t v118 = v12;
  uint64_t v119 = v13;
  __chkstk_darwin(v12);
  v120 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = sub_100098CD8(&qword_100234FE8);
  uint64_t v15 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v17 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  id v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  unint64_t v24 = (char *)&v103 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (uint64_t *)((char *)&v103 - v25);
  uint64_t v28 = a1[3];
  uint64_t v27 = a1[4];
  int v122 = a1;
  sub_10009A430(a1, v28);
  unint64_t v29 = sub_10009A454();
  uint64_t v30 = v123;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceRecord.CodingKeys,  &type metadata for DeviceRecord.CodingKeys,  v29,  v28,  v27);
  if (v30) {
    return sub_10009A498(v122);
  }
  unint64_t v31 = v120;
  unint64_t v106 = v21;
  uint64_t v107 = v24;
  v108 = (int *)v18;
  uint64_t v109 = v26;
  uint64_t v123 = v15;
  char v125 = 0;
  unint64_t v32 = sub_10009A4B8();
  uint64_t v33 = v121;
  Swift::String v34 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v124, &type metadata for Data, &v125, v121, &type metadata for Data, v32);
  id v36 = v124[0];
  id v37 = v124[1];
  uint64_t v38 = v109;
  uint64_t *v109 = (uint64_t)v124[0];
  v38[1] = (uint64_t)v37;
  LOBYTE(v124[0]) = 1;
  uint64_t v39 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v40 = v118;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v118, v124, v33, v118, v39);
  unint64_t v104 = (unint64_t)v37;
  uint64_t v105 = (uint64_t)v36;
  uint64_t v41 = v108;
  (*((void (**)(char *, char *, uint64_t))v119 + 4))((char *)v38 + v108[5], v31, v40);
  LOBYTE(v124[0]) = 2;
  uint64_t v42 = KeyedDecodingContainer.decode(_:forKey:)(v124, v33);
  Swift::String v44 = (uint64_t *)((char *)v38 + v41[6]);
  *Swift::String v44 = v42;
  v44[1] = v43;
  LOBYTE(v124[0]) = 3;
  uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)(v124, v33);
  char v46 = (uint64_t *)((char *)v38 + v41[7]);
  *char v46 = v45;
  v46[1] = v47;
  LOBYTE(v124[0]) = 4;
  v120 = 0LL;
  uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v49) {
    uint64_t v50 = v48;
  }
  else {
    uint64_t v50 = 0LL;
  }
  if (v49) {
    unint64_t v51 = v49;
  }
  else {
    unint64_t v51 = 0xE000000000000000LL;
  }
  uint64_t v52 = (uint64_t *)((char *)v38 + v41[8]);
  uint64_t *v52 = v50;
  v52[1] = v51;
  LOBYTE(v124[0]) = 5;
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v54) {
    uint64_t v55 = v53;
  }
  else {
    uint64_t v55 = 0LL;
  }
  if (v54) {
    unint64_t v56 = v54;
  }
  else {
    unint64_t v56 = 0xE000000000000000LL;
  }
  id v57 = (uint64_t *)((char *)v38 + v41[9]);
  *id v57 = v55;
  v57[1] = v56;
  LOBYTE(v124[0]) = 6;
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v59) {
    uint64_t v60 = v58;
  }
  else {
    uint64_t v60 = 0LL;
  }
  if (v59) {
    unint64_t v61 = v59;
  }
  else {
    unint64_t v61 = 0xE000000000000000LL;
  }
  id v62 = (uint64_t *)((char *)v38 + v41[10]);
  *id v62 = v60;
  v62[1] = v61;
  LOBYTE(v124[0]) = 7;
  uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v64) {
    uint64_t v65 = v63;
  }
  else {
    uint64_t v65 = 0LL;
  }
  if (v64) {
    unint64_t v66 = v64;
  }
  else {
    unint64_t v66 = 0xE000000000000000LL;
  }
  __int128 v67 = (uint64_t *)((char *)v38 + v41[11]);
  *__int128 v67 = v65;
  v67[1] = v66;
  Swift::String v68 = (char *)v38 + v41[12];
  static Date.now.getter(v63);
  LOBYTE(v124[0]) = 8;
  uint64_t v69 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v70 = v115;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v117, v124, v33, v117, v69);
  uint64_t v119 = v34;
  v120 = v68;
  id v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v71(v70, 1LL, v117) == 1)
  {
    uint64_t v72 = objc_autoreleasePoolPush();
    uint64_t v73 = v105;
    unint64_t v74 = v104;
    sub_1000991CC(v105, v104);
    sub_100118B60(v73, v74);
    Class isa = v75;
    sub_100099394(v73, v74);
    sub_100099210((uint64_t)v109, (uint64_t)v107);
    if (isa)
    {
      uint64_t v77 = (uint64_t)v107;
    }

    else
    {
      uint64_t v78 = (uint64_t)v107;
      Class isa = sub_1000A35AC().super.isa;
      uint64_t v77 = v78;
    }

    sub_100099254(v77);
    v124[0] = isa;
    sub_100096A48(v124);
    objc_autoreleasePoolPop(v72);
    id v79 = -[objc_class modificationDate](isa, "modificationDate");

    if (v79)
    {
      __int128 v80 = v110;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v79);

      uint64_t v82 = v116;
      uint64_t v81 = v117;
      unint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v116 + 32);
      uint64_t v84 = (uint64_t)v112;
      v83((uint64_t)v112, v80, v117);
      Swift::String v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
      v85(v84, 0LL, 1LL, v81);
      if (v71(v84, 1LL, v81) != 1)
      {
        (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
        v83((uint64_t)v114, v112, v117);
LABEL_46:
        sub_100099358(v115, (uint64_t *)&unk_100234E10);
        goto LABEL_47;
      }
    }

    else
    {
      Swift::String v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v85((uint64_t)v112, 1LL, 1LL, v117);
    }

    Swift::String v86 = objc_autoreleasePoolPush();
    id v87 = v109;
    uint64_t v89 = *v109;
    unint64_t v88 = v109[1];
    sub_1000991CC(*v109, v88);
    sub_100118B60(v89, v88);
    __int16 v91 = v90;
    sub_100099394(v89, v88);
    sub_100099210((uint64_t)v87, (uint64_t)v106);
    if (v91)
    {
      Class v92 = v91;
      uint64_t v93 = (uint64_t)v106;
    }

    else
    {
      uint64_t v94 = (uint64_t)v106;
      Class v92 = sub_1000A35AC().super.isa;
      uint64_t v93 = v94;
    }

    sub_100099254(v93);
    Class v95 = v92;
    v124[0] = v92;
    sub_100096A48(v124);
    objc_autoreleasePoolPop(v86);
    id v96 = -[objc_class creationDate](v92, "creationDate");

    if (v96)
    {
      __int16 v97 = v110;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

      uint64_t v98 = v117;
      Swift::String v99 = *(void (**)(uint64_t, char *, uint64_t))(v116 + 32);
      uint64_t v100 = (uint64_t)v111;
      v99((uint64_t)v111, v97, v117);
      v85(v100, 0LL, 1LL, v98);
      uint64_t v101 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v71)(v100, 1LL, v98);
      if ((_DWORD)v101 != 1)
      {
        (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
        v99((uint64_t)v114, v111, v117);
LABEL_45:
        sub_100099358((uint64_t)v112, (uint64_t *)&unk_100234E10);
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v101 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v85)(v111, 1LL, 1LL, v117);
    }

    static Date.now.getter(v101);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
    sub_100099358((uint64_t)v111, (uint64_t *)&unk_100234E10);
    goto LABEL_45;
  }

  (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v114, v115, v117);
LABEL_47:
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v120, v114, v117);
  Swift::String v102 = v109;
  sub_100099210((uint64_t)v109, v113);
  sub_10009A498(v122);
  return sub_100099254((uint64_t)v102);
}

void sub_100096100(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v100 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  Swift::String v102 = (char *)&v94 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v104 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v103 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v101 = (char *)&v94 - v11;
  uint64_t v12 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v106 = *(void *)(v15 - 8);
  uint64_t v107 = v15;
  __chkstk_darwin(v15);
  uint64_t v105 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = CKRecord.recordType.getter(v17);
  uint64_t v20 = v19;
  if (v18 == 0x6552656369766544LL && v19 == 0xEC00000064726F63LL)
  {
    swift_bridgeObjectRelease(0xEC00000064726F63LL);
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x6552656369766544LL, 0xEC00000064726F63LL, 0LL);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      unint64_t v36 = sub_1000992D8();
      uint64_t v37 = swift_allocError(&type metadata for DeviceRecord.DeviceRecordError, v36, 0LL, 0LL);
      *uint64_t v38 = 0;
      swift_willThrow(v37);
LABEL_27:

      return;
    }
  }

  uint64_t v99 = v8;
  id v22 = [a1 encryptedValues];
  Objectint Type = swift_getObjectType(v22);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v22 objectForKeyedSubscript:v24];

  if (!v25
    || (id v110 = v25,
        uint64_t v27 = sub_100098CD8(&qword_100234E40),
        uint64_t v26 = swift_dynamicCast(&v108, &v110, v27, &type metadata for String, 6LL),
        (v26 & 1) == 0))
  {
LABEL_24:
    uint64_t v77 = static os_log_type_t.error.getter(v26);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v78 = qword_10023DFC8;
    uint64_t v79 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v80 = swift_allocObject(v79, 72LL, 7LL);
    *(_OWORD *)(v80 + 16) = xmmword_1001A5EA0;
    *(void *)(v80 + 56) = sub_10009931C();
    *(void *)(v80 + 64) = sub_100098C98( (unint64_t *)&qword_1002352D0,  (uint64_t (*)(uint64_t))sub_10009931C,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v80 + 32) = a1;
    a1 = a1;
    os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v78, "Invalid Device Record - %@", 26LL, 2LL, v80);
    swift_bridgeObjectRelease(v80);
    unint64_t v81 = sub_1000992D8();
    uint64_t v82 = swift_allocError(&type metadata for DeviceRecord.DeviceRecordError, v81, 0LL, 0LL);
    *unint64_t v83 = 2;
    swift_willThrow(v82);
    swift_unknownObjectRelease(v22);
    goto LABEL_27;
  }

  __int16 v97 = a2;
  id v98 = v22;
  unint64_t v28 = v109;
  uint64_t v95 = v108;
  uint64_t v96 = ObjectType;
  id v29 = [a1 recordID];
  id v30 = [v29 recordName];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = v106;
  uint64_t v35 = v107;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v14, 1LL, v107) == 1)
  {
    swift_bridgeObjectRelease(v28);
    uint64_t v26 = sub_100099358((uint64_t)v14, &qword_100234E20);
    id v22 = v98;
    goto LABEL_24;
  }

  unint64_t v94 = v28;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v105, v14, v35);
  NSString v39 = String._bridgeToObjectiveC()();
  id v22 = v98;
  id v40 = [v98 objectForKeyedSubscript:v39];

  if (!v40 || (id v110 = v40, (swift_dynamicCast(&v108, &v110, v27, &type metadata for String, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v94);
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v105, v35);
    goto LABEL_24;
  }

  uint64_t v41 = v34;
  uint64_t v42 = v108;
  unint64_t v43 = v109;
  Swift::String v44 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v45 = v97;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v97 + v44[5], v105, v35);
  char v46 = (uint64_t *)((char *)v45 + v44[6]);
  uint64_t v47 = v96;
  unint64_t v48 = v94;
  *char v46 = v95;
  v46[1] = v48;
  unint64_t v49 = (uint64_t *)((char *)v45 + v44[7]);
  *unint64_t v49 = v42;
  v49[1] = v43;
  CKRecordKeyValueSetting.subscript.getter( &v108,  0x6D754E6C65646F6DLL,  0xEB00000000726562LL,  v47,  &type metadata for String,  &protocol witness table for String);
  uint64_t v51 = v108;
  unint64_t v50 = v109;
  if (!v109)
  {
    uint64_t v51 = 0LL;
    unint64_t v50 = 0xE000000000000000LL;
  }

  uint64_t v52 = (uint64_t *)((char *)v45 + v44[8]);
  void *v52 = v51;
  v52[1] = v50;
  CKRecordKeyValueSetting.subscript.getter( &v108,  0x74636166756E616DLL,  0xEC00000072657275LL,  v47,  &type metadata for String,  &protocol witness table for String);
  uint64_t v54 = v108;
  unint64_t v53 = v109;
  if (!v109)
  {
    uint64_t v54 = 0LL;
    unint64_t v53 = 0xE000000000000000LL;
  }

  uint64_t v55 = (uint64_t *)((char *)v45 + v44[9]);
  *uint64_t v55 = v54;
  v55[1] = v53;
  CKRecordKeyValueSetting.subscript.getter( &v108,  0x49746375646F7270LL,  0xE900000000000044LL,  v47,  &type metadata for String,  &protocol witness table for String);
  uint64_t v57 = v108;
  unint64_t v56 = v109;
  if (!v109)
  {
    uint64_t v57 = 0LL;
    unint64_t v56 = 0xE000000000000000LL;
  }

  uint64_t v58 = (uint64_t *)((char *)v45 + v44[10]);
  *uint64_t v58 = v57;
  v58[1] = v56;
  CKRecordKeyValueSetting.subscript.getter( &v108,  0x4449726F646E6576LL,  0xE800000000000000LL,  v47,  &type metadata for String,  &protocol witness table for String);
  uint64_t v60 = v108;
  unint64_t v59 = v109;
  if (!v109)
  {
    uint64_t v60 = 0LL;
    unint64_t v59 = 0xE000000000000000LL;
  }

  uint64_t v96 = (uint64_t)v44;
  unint64_t v61 = (uint64_t *)((char *)v45 + v44[11]);
  *unint64_t v61 = v60;
  v61[1] = v59;
  id v62 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v62];
  [v62 finishEncoding];
  id v63 = [v62 encodedData];
  uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;

  uint64_t *v45 = v64;
  v45[1] = v66;
  __int128 v67 = v45;
  id v68 = [a1 modificationDate];
  if (!v68)
  {
    uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
    uint64_t v73 = (uint64_t)v102;
    uint64_t v74 = v99;
    v75(v102, 1LL, 1LL, v99);
LABEL_29:
    id v84 = [a1 creationDate];
    id v85 = v98;
    if (v84)
    {
      Swift::String v86 = v84;
      id v87 = v103;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

      uint64_t v88 = v104;
      uint64_t v89 = (uint64_t)v100;
      id v90 = v87;
      __int16 v91 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
      v91(v100, v90, v74);
      v75((char *)v89, 0LL, 1LL, v74);
      Class v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
      __int128 v67 = v97;
      uint64_t v93 = v92(v89, 1LL, v74);
      if ((_DWORD)v93 != 1)
      {
        swift_unknownObjectRelease(v85);

        (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
        uint64_t v76 = v101;
        v91(v101, (char *)v89, v74);
LABEL_34:
        sub_100099358(v73, (uint64_t *)&unk_100234E10);
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
        goto LABEL_35;
      }
    }

    else
    {
      uint64_t v89 = (uint64_t)v100;
      uint64_t v93 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v75)(v100, 1LL, 1LL, v74);
    }

    uint64_t v76 = v101;
    static Date.now.getter(v93);
    swift_unknownObjectRelease(v85);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
    sub_100099358(v89, (uint64_t *)&unk_100234E10);
    goto LABEL_34;
  }

  uint64_t v69 = v68;
  uint64_t v70 = v103;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

  uint64_t v71 = v104;
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
  uint64_t v73 = (uint64_t)v102;
  uint64_t v74 = v99;
  v72(v102, v70, v99);
  uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56);
  v75((char *)v73, 0LL, 1LL, v74);
  swift_unknownObjectRelease(v98);

  (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
  uint64_t v76 = v101;
  v72(v101, (char *)v73, v74);
LABEL_35:
  v72((char *)v67 + *(int *)(v96 + 48), v76, v74);
}

uint64_t sub_100096A48(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v5 = qword_10023DFC8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
  id v8 = *a1;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10009914C();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating main device record: %@", 31LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  id v13 = [v8 encryptedValues];
  Objectint Type = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter( &v49,  0xD000000000000010LL,  0x80000001001CAB00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v16 = v49;
  uint64_t v15 = v50;
  uint64_t v17 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v18 = v2;
  uint64_t v19 = (void *)(v2 + v17[6]);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  if (!v15) {
    goto LABEL_8;
  }
  if (v16 != v21 || v15 != v20)
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, *v19, v19[1], 0LL);
    swift_bridgeObjectRelease(v15);
    if ((v22 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v51 = &type metadata for String;
    uint64_t v52 = &protocol witness table for String;
    uint64_t v49 = v21;
    uint64_t v50 = v20;
    swift_bridgeObjectRetain(v20);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0xD000000000000010LL, 0x80000001001CAB00LL, ObjectType);
    goto LABEL_9;
  }

  swift_bridgeObjectRelease(v15);
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter( &v49,  0x656D616E6B63696ELL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v23 = v50;
  NSString v24 = (void *)(v18 + v17[7]);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  if (!v50) {
    goto LABEL_15;
  }
  if (v49 == v26 && v50 == v25)
  {
    swift_bridgeObjectRelease(v50);
    goto LABEL_16;
  }

  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v24, v24[1], 0LL);
  swift_bridgeObjectRelease(v23);
  if ((v27 & 1) == 0)
  {
LABEL_15:
    uint64_t v51 = &type metadata for String;
    uint64_t v52 = &protocol witness table for String;
    uint64_t v49 = v26;
    uint64_t v50 = v25;
    swift_bridgeObjectRetain(v25);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x656D616E6B63696ELL, 0xE800000000000000LL, ObjectType);
  }

uint64_t sub_100097028(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((sub_100097458(a1) & 1) != 0)
  {
    id v7 = [a1 nickname];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v11 = v10;

      uint64_t v12 = *(int *)(type metadata accessor for DeviceRecord(0LL) + 28);
      id v13 = (uint64_t *)(v1 + v12);
      uint64_t v14 = *(void *)(v1 + v12);
      uint64_t v15 = *(void *)(v1 + v12 + 8);
      BOOL v16 = v14 == v9 && v15 == v11;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, *(void *)(v1 + v12 + 8), v9, v11, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v11);
      }

      else
      {
        swift_bridgeObjectRelease(v15);
        *id v13 = v9;
        v13[1] = v11;
      }
    }

    id v27 = [a1 modelNumber];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;

      uint64_t v32 = *(int *)(type metadata accessor for DeviceRecord(0LL) + 32);
      uint64_t v33 = (uint64_t *)(v1 + v32);
      uint64_t v34 = *(void *)(v1 + v32);
      uint64_t v35 = *(void *)(v1 + v32 + 8);
      BOOL v36 = v34 == v29 && v35 == v31;
      if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(v34, *(void *)(v1 + v32 + 8), v29, v31, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v31);
      }

      else
      {
        swift_bridgeObjectRelease(v35);
        *uint64_t v33 = v29;
        v33[1] = v31;
      }
    }

    id v37 = [a1 manufacturer];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v41 = v40;

      uint64_t v42 = *(int *)(type metadata accessor for DeviceRecord(0LL) + 36);
      uint64_t v43 = (uint64_t *)(v1 + v42);
      uint64_t v44 = *(void *)(v1 + v42);
      uint64_t v45 = *(void *)(v1 + v42 + 8);
      if (v44 == v39 && v45 == v41
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v44, *(void *)(v1 + v42 + 8), v39, v41, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v41);
      }

      else
      {
        swift_bridgeObjectRelease(v45);
        *uint64_t v43 = v39;
        v43[1] = v41;
      }
    }

    id v46 = [a1 productID];
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v50 = v49;

      uint64_t v51 = *(int *)(type metadata accessor for DeviceRecord(0LL) + 40);
      uint64_t v52 = (uint64_t *)(v1 + v51);
      uint64_t v53 = *(void *)(v1 + v51);
      uint64_t v54 = *(void *)(v1 + v51 + 8);
      if (v53 == v48 && v54 == v50
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v53, *(void *)(v1 + v51 + 8), v48, v50, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v50);
      }

      else
      {
        swift_bridgeObjectRelease(v54);
        uint64_t *v52 = v48;
        v52[1] = v50;
      }
    }

    id v55 = [a1 vendorID];
    if (v55)
    {
      unint64_t v56 = v55;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      uint64_t v59 = v58;

      uint64_t v60 = *(int *)(type metadata accessor for DeviceRecord(0LL) + 44);
      unint64_t v61 = (uint64_t *)(v1 + v60);
      uint64_t v62 = *(void *)(v1 + v60);
      uint64_t v63 = *(void *)(v1 + v60 + 8);
      if (v62 == v57 && v63 == v59
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v62, *(void *)(v1 + v60 + 8), v57, v59, 0LL) & 1) != 0)
      {
        id v55 = (id)swift_bridgeObjectRelease(v59);
      }

      else
      {
        id v55 = (id)swift_bridgeObjectRelease(v63);
        *unint64_t v61 = v57;
        v61[1] = v59;
      }
    }

    static Date.now.getter(v55);
    uint64_t v64 = type metadata accessor for DeviceRecord(0LL);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(v64 + 48), v6, v3);
  }

  else
  {
    uint64_t v17 = static os_log_type_t.info.getter();
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v18 = qword_10023DFC8;
    uint64_t v19 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_1001A5EA0;
    id v21 = a1;
    id v22 = [v21 description];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_10009914C();
    *(void *)(v20 + 32) = v23;
    *(void *)(v20 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "No change in updated device record: %@", 38LL, 2LL, v20);
    return swift_bridgeObjectRelease(v20);
  }

uint64_t sub_100097458(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DeviceRecord(0LL);
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  id v7 = (char *)&v104 - v6;
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  uint64_t v108 = (char *)&v104 - v11;
  __chkstk_darwin(v12);
  uint64_t v109 = (uint64_t)&v104 - v13;
  __chkstk_darwin(v14);
  BOOL v16 = (char *)&v104 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v104 - v18;
  __chkstk_darwin(v20);
  uint64_t v26 = (char *)&v104 - v25;
  if (!a1)
  {
    char v44 = 0;
    return v44 & 1;
  }

  uint64_t v106 = v24;
  uint64_t v107 = v23;
  id v27 = v21;
  uint64_t v105 = v22;
  id v28 = a1;
  id v29 = [v28 nickname];
  if (!v29)
  {
    sub_100099210(v2, (uint64_t)v26);
    goto LABEL_13;
  }

  uint64_t v30 = v29;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  swift_bridgeObjectRelease(v32);
  sub_100099210(v2, (uint64_t)v26);
  if (!v32)
  {
LABEL_13:
    sub_100099254((uint64_t)v26);
LABEL_14:
    uint64_t v42 = (uint64_t)v7;
    sub_100099210(v2, (uint64_t)v19);
    uint64_t v43 = v107;
    goto LABEL_15;
  }

  id v33 = [v28 nickname];
  if (!v33)
  {
    sub_100099254((uint64_t)v26);
    sub_100099210(v2, (uint64_t)v19);
    uint64_t v42 = (uint64_t)v7;
    uint64_t v43 = v107;
LABEL_49:
    sub_100099254((uint64_t)v19);
LABEL_54:
    uint64_t v56 = v109;
    sub_100099210(v2, v109);
LABEL_55:
    sub_100099254(v56);
LABEL_56:
    sub_100099210(v2, v43);
LABEL_57:
    sub_100099254(v43);
LABEL_58:
    sub_100099210(v2, v42);
LABEL_59:
    sub_100099254(v42);

    char v44 = 1;
    return v44 & 1;
  }

  uint64_t v34 = v33;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v37 = v36;

  uint64_t v38 = &v26[v27[7]];
  uint64_t v39 = *((void *)v38 + 1);
  if (v35 == *(void *)v38 && v37 == v39)
  {
    sub_100099254((uint64_t)v26);
    swift_bridgeObjectRelease(v37);
    goto LABEL_14;
  }

  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, *(void *)v38, v39, 0LL);
  sub_100099254((uint64_t)v26);
  swift_bridgeObjectRelease(v37);
  sub_100099210(v2, (uint64_t)v19);
  uint64_t v42 = (uint64_t)v7;
  uint64_t v43 = v107;
  if ((v41 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_15:
  id v45 = [v28 manufacturer];
  if (!v45)
  {
    sub_100099210((uint64_t)v19, (uint64_t)v16);
    goto LABEL_22;
  }

  id v46 = v45;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  uint64_t v48 = v47;

  swift_bridgeObjectRelease(v48);
  sub_100099210((uint64_t)v19, (uint64_t)v16);
  if (!v48)
  {
LABEL_22:
    sub_100099254((uint64_t)v16);
    sub_100099254((uint64_t)v19);
    goto LABEL_23;
  }

  id v49 = [v28 manufacturer];
  if (!v49)
  {
    uint64_t v96 = *(void *)&v16[v27[9] + 8];
    swift_bridgeObjectRetain(v96);
    sub_100099254((uint64_t)v16);
    sub_100099254((uint64_t)v19);
    swift_bridgeObjectRelease(v96);
    goto LABEL_54;
  }

  uint64_t v50 = v49;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  uint64_t v53 = v52;

  uint64_t v54 = &v16[v27[9]];
  uint64_t v55 = *((void *)v54 + 1);
  if (v51 == *(void *)v54 && v53 == v55)
  {
    swift_bridgeObjectRetain(v53);
    sub_100099254((uint64_t)v16);
    sub_100099254((uint64_t)v19);
    swift_bridgeObjectRelease_n(v53, 2LL);
LABEL_23:
    uint64_t v56 = v109;
    sub_100099210(v2, v109);
    uint64_t v57 = (uint64_t)v108;
    goto LABEL_24;
  }

  char v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, *(void *)v54, v55, 0LL);
  swift_bridgeObjectRetain(v53);
  sub_100099254((uint64_t)v16);
  sub_100099254((uint64_t)v19);
  swift_bridgeObjectRelease_n(v53, 2LL);
  uint64_t v56 = v109;
  sub_100099210(v2, v109);
  uint64_t v57 = (uint64_t)v108;
  if ((v98 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_24:
  id v58 = [v28 modelNumber];
  if (!v58)
  {
    sub_100099210(v56, v57);
    goto LABEL_31;
  }

  uint64_t v59 = v58;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  uint64_t v61 = v60;

  swift_bridgeObjectRelease(v61);
  sub_100099210(v56, v57);
  if (!v61)
  {
LABEL_31:
    sub_100099254(v57);
    sub_100099254(v56);
    goto LABEL_32;
  }

  id v62 = [v28 modelNumber];
  if (!v62)
  {
    uint64_t v99 = *(void *)(v57 + v27[8] + 8);
    swift_bridgeObjectRetain(v99);
    sub_100099254(v57);
    sub_100099254(v56);
    swift_bridgeObjectRelease(v99);
    goto LABEL_56;
  }

  uint64_t v63 = v62;
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  uint64_t v66 = v65;

  __int128 v67 = (void *)(v57 + v27[8]);
  uint64_t v68 = v67[1];
  if (v64 == *v67 && v66 == v68)
  {
    swift_bridgeObjectRetain(v66);
    sub_100099254(v57);
    sub_100099254(v56);
    swift_bridgeObjectRelease_n(v66, 2LL);
LABEL_32:
    sub_100099210(v2, v43);
    goto LABEL_33;
  }

  char v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, *v67, v68, 0LL);
  swift_bridgeObjectRetain(v66);
  sub_100099254(v57);
  sub_100099254(v56);
  swift_bridgeObjectRelease_n(v66, 2LL);
  sub_100099210(v2, v43);
  if ((v100 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_33:
  id v69 = [v28 productID];
  if (!v69)
  {
    uint64_t v73 = v106;
    sub_100099210(v43, v106);
    goto LABEL_40;
  }

  uint64_t v70 = v69;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  uint64_t v72 = v71;

  swift_bridgeObjectRelease(v72);
  uint64_t v73 = v106;
  sub_100099210(v43, v106);
  if (!v72)
  {
LABEL_40:
    sub_100099254(v73);
    sub_100099254(v43);
    goto LABEL_41;
  }

  id v74 = [v28 productID];
  if (!v74)
  {
    uint64_t v101 = v73;
    uint64_t v102 = *(void *)(v73 + v27[10] + 8);
    swift_bridgeObjectRetain(v102);
    sub_100099254(v101);
    sub_100099254(v43);
    swift_bridgeObjectRelease(v102);
    goto LABEL_58;
  }

  uint64_t v75 = v74;
  uint64_t v76 = v73;
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
  uint64_t v79 = v78;

  uint64_t v80 = (void *)(v76 + v27[10]);
  uint64_t v81 = v80[1];
  if (v77 == *v80 && v79 == v81)
  {
    swift_bridgeObjectRetain(v79);
    sub_100099254(v106);
    sub_100099254(v43);
    swift_bridgeObjectRelease_n(v79, 2LL);
LABEL_41:
    sub_100099210(v2, v42);
    goto LABEL_42;
  }

  char v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v79, *v80, v81, 0LL);
  swift_bridgeObjectRetain(v79);
  sub_100099254(v106);
  sub_100099254(v43);
  swift_bridgeObjectRelease_n(v79, 2LL);
  sub_100099210(v2, v42);
  if ((v103 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_42:
  id v82 = [v28 vendorID];
  if (!v82)
  {
    uint64_t v86 = v105;
    sub_100099210(v42, v105);
    goto LABEL_51;
  }

  unint64_t v83 = v82;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
  uint64_t v85 = v84;

  swift_bridgeObjectRelease(v85);
  uint64_t v86 = v105;
  sub_100099210(v42, v105);
  if (!v85)
  {
LABEL_51:

    sub_100099254(v86);
    sub_100099254(v42);
    char v44 = 0;
    return v44 & 1;
  }

  id v87 = [v28 vendorID];
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = v86;
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    uint64_t v92 = v91;

    uint64_t v93 = (void *)(v89 + v27[11]);
    uint64_t v94 = v93[1];
    if (v90 == *v93 && v92 == v94) {
      char v95 = 1;
    }
    else {
      char v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, *v93, v94, 0LL);
    }
    swift_bridgeObjectRetain(v92);

    sub_100099254(v105);
    sub_100099254(v42);
    swift_bridgeObjectRelease(v92);
  }

  else
  {
    uint64_t v92 = *(void *)(v86 + v27[11] + 8);
    swift_bridgeObjectRetain(v92);

    sub_100099254(v86);
    sub_100099254(v42);
    char v95 = 0;
  }

  swift_bridgeObjectRelease(v92);
  char v44 = v95 ^ 1;
  return v44 & 1;
}

uint64_t sub_100097CB4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_1000991CC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100099394(v4, v5);
  uint64_t v6 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  uint64_t v9 = (uint64_t *)((char *)v2 + v6[6]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = (uint64_t *)((char *)v2 + v6[7]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = (uint64_t *)((char *)v2 + v6[8]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = (uint64_t *)((char *)v2 + v6[9]);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  String.hash(into:)(a1, v19, v20);
  swift_bridgeObjectRelease(v20);
  id v21 = (uint64_t *)((char *)v2 + v6[10]);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = (uint64_t *)((char *)v2 + v6[11]);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  String.hash(into:)(a1, v25, v26);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v28 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v27, v28);
}

uint64_t sub_100097EA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100097EE8 + 4 * byte_1001A5EB0[a1]))( 0x74654D64756F6C63LL,  0xED00006174616461LL);
}

uint64_t sub_100097EE8()
{
  return 0x696669746E656469LL;
}

unint64_t sub_100097F04()
{
  return 0xD000000000000010LL;
}

Swift::Int sub_100097FB8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100097FFC(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10009803C()
{
  return sub_100097EA8(*v0);
}

uint64_t sub_100098044@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10009A904(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100098068()
{
  return 0LL;
}

void sub_100098074(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_100098080(uint64_t a1)
{
  unint64_t v2 = sub_10009A454();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000980A8(uint64_t a1)
{
  unint64_t v2 = sub_10009A454();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000980D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100235010);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_10009A454();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceRecord.CodingKeys,  &type metadata for DeviceRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v41 = *v3;
  char v40 = 0;
  unint64_t v12 = sub_10009A4FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v40, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for DeviceRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v41) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v41, v5, v15, v16);
    uint64_t v17 = (uint64_t *)((char *)v3 + v13[6]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    LOBYTE(v41) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v41, v5);
    uint64_t v20 = (uint64_t *)((char *)v3 + v13[7]);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    LOBYTE(v41) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v41, v5);
    uint64_t v23 = (uint64_t *)((char *)v3 + v13[8]);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v41, v5);
    uint64_t v26 = (uint64_t *)((char *)v3 + v13[9]);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    LOBYTE(v41) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v28, &v41, v5);
    id v29 = (uint64_t *)((char *)v3 + v13[10]);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    LOBYTE(v41) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v41, v5);
    uint64_t v32 = (uint64_t *)((char *)v3 + v13[11]);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    LOBYTE(v41) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v33, v34, &v41, v5);
    uint64_t v35 = (char *)v3 + v13[12];
    LOBYTE(v41) = 8;
    uint64_t v36 = type metadata accessor for Date(0LL);
    uint64_t v37 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v41, v5, v36, v37);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000983C0()
{
  return 0x6552656369766544LL;
}

unint64_t sub_1000983E0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000983FC()
{
  uint64_t v1 = *(void *)v0;
  sub_1000991CC(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_10009842C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

Swift::Int sub_100098470()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000984B0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000984F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100098530@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000956A0(a1, a2);
}

uint64_t sub_100098544(void *a1)
{
  return sub_1000980D0(a1);
}

uint64_t variable initialization expression of BTUserTransaction.name()
{
  return 0LL;
}

uint64_t variable initialization expression of BTUserTransaction.underlyingActivity()
{
  return 0LL;
}

void *variable initialization expression of DarwinNotificationManager.helpers()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of HMDeviceCloudRecord.topMicFaultCountLeft()
{
  return 0x100000000LL;
}

uint64_t _s15audioaccessoryd19HMDeviceCloudRecordC30latestDiagnosticTimestampRight10Foundation4DateVSgvpfi_0@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
}

double variable initialization expression of LocalDispatchTimer.millisecondsPerSecond()
{
  return 1000.0;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

__n128 sub_10009860C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10009861C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10009863C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

uint64_t sub_100098678(uint64_t a1, uint64_t a2)
{
  return sub_100098FD8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100098690(uint64_t a1, uint64_t a2)
{
  return sub_100098FD8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_1000986A4(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_1000986AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000986C0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000986F0(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100098704(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_100098718(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100234F98,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A65A8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100098758(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100234F98,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A65A8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100098798(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000987D8()
{
  return *v0;
}

uint64_t sub_1000987E0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1000987E8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1000987F8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100098804(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100098878(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000988F4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100098934(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001A601C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100098970(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001A601C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000989B8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001A601C, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

void *sub_100098A14@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100098A20()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_100098A30(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100098A70(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100098AB0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100098B14()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100098B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100098B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100098BF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001A601C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100098C40()
{
  return sub_100098C98( &qword_100234D88,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001A5FAC);
}

uint64_t sub_100098C6C()
{
  return sub_100098C98( (unint64_t *)&unk_100234D90,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001A5FD8);
}

uint64_t sub_100098C98(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100098CD8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t *sub_100098D18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100098D58(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100098D74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100098D9C(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
  uint64_t v3 = sub_100098C98( &qword_100235058,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6300);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098E20(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( &qword_100235040,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1001A6474);
  uint64_t v3 = sub_100098C98( &qword_100235048,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1001A6414);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100098EFC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100098F10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100098F54(uint64_t a1)
{
  uint64_t v2 = sub_100098C98( (unint64_t *)&qword_100235030,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1001A67AC);
  uint64_t v3 = sub_100098C98( &qword_100235038,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1001A66BC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098FD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100099014(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100099054(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000990C4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_10009914C()
{
  unint64_t result = qword_100235290;
  if (!qword_100235290)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100235290);
  }

  return result;
}

uint64_t type metadata accessor for DeviceRecord(uint64_t a1)
{
  uint64_t result = qword_100234ED0;
  if (!qword_100234ED0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceRecord);
  }
  return result;
}

uint64_t sub_1000991CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100099210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100099254(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100099290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000992D8()
{
  unint64_t result = qword_100234E28;
  if (!qword_100234E28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A67F0, &type metadata for DeviceRecord.DeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100234E28);
  }

  return result;
}

unint64_t sub_10009931C()
{
  unint64_t result = qword_100234E30;
  if (!qword_100234E30)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CKRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100234E30);
  }

  return result;
}

uint64_t sub_100099358(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100098CD8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100099394(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_release)();
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for NotificationType(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

_BYTE *initializeBufferWithCopyOfBuffer for DeviceRecord.DeviceRecordError(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceRecord.DeviceRecordError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for DeviceRecord.DeviceRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000994FC + 4 * byte_1001A5EBE[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100099530 + 4 * byte_1001A5EB9[v4]))();
}

uint64_t sub_100099530(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099538(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100099540LL);
  }
  return result;
}

uint64_t sub_10009954C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100099554LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100099558(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099560(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009956C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100099578(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceRecord.DeviceRecordError()
{
  return &type metadata for DeviceRecord.DeviceRecordError;
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t *sub_1000995CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v42 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v42 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v42);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000991CC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    char v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)a1 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)a1 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = (uint64_t *)((char *)a1 + v22);
    uint64_t v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = a3[10];
    uint64_t v30 = a3[11];
    uint64_t v31 = (uint64_t *)((char *)a1 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = (uint64_t *)((char *)a1 + v30);
    uint64_t v35 = (uint64_t *)((char *)a2 + v30);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    uint64_t v38 = a3[12];
    char v44 = (char *)a2 + v38;
    uint64_t v39 = (char *)a1 + v38;
    *uint64_t v34 = v36;
    v34[1] = v37;
    uint64_t v40 = type metadata accessor for Date(0LL);
    __int128 v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v37);
    v41(v39, v44, v40);
  }

  return a1;
}

uint64_t sub_100099758(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t *sub_100099830(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000991CC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v12);
  uint64_t v15 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (uint64_t *)((char *)a1 + v13);
  uint64_t v18 = (uint64_t *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)((char *)a1 + v20);
  uint64_t v23 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (uint64_t *)((char *)a1 + v21);
  uint64_t v26 = (uint64_t *)((char *)a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[10];
  uint64_t v29 = a3[11];
  uint64_t v30 = (uint64_t *)((char *)a1 + v28);
  uint64_t v31 = (uint64_t *)((char *)a2 + v28);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = (uint64_t *)((char *)a1 + v29);
  uint64_t v34 = (uint64_t *)((char *)a2 + v29);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v37 = a3[12];
  uint64_t v42 = (char *)a2 + v37;
  uint64_t v38 = (char *)a1 + v37;
  *uint64_t v33 = v35;
  v33[1] = v36;
  uint64_t v39 = type metadata accessor for Date(0LL);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16LL);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  v40(v38, v42, v39);
  return a1;
}

uint64_t *sub_100099990(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000991CC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100099394(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = (uint64_t *)((char *)a1 + v24);
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  uint64_t v27 = v26[1];
  uint64_t v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = a3[9];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  uint64_t v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a3[10];
  uint64_t v35 = (uint64_t *)((char *)a1 + v34);
  uint64_t v36 = (uint64_t *)((char *)a2 + v34);
  *uint64_t v35 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = a3[11];
  uint64_t v40 = (uint64_t *)((char *)a1 + v39);
  __int128 v41 = (uint64_t *)((char *)a2 + v39);
  *uint64_t v40 = *v41;
  uint64_t v42 = v41[1];
  uint64_t v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = a3[12];
  id v45 = (char *)a1 + v44;
  id v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 24LL))(v45, v46, v47);
  return a1;
}

_OWORD *sub_100099B44(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[12];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
  return a1;
}

uint64_t *sub_100099C18(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100099394(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v23 = v19[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = (uint64_t *)((char *)a1 + v24);
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  uint64_t v29 = v25[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = a3[9];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  uint64_t v35 = v31[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a3[10];
  uint64_t v37 = (uint64_t *)((char *)a1 + v36);
  uint64_t v38 = (uint64_t *)((char *)a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v41 = v37[1];
  void *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[11];
  uint64_t v43 = (uint64_t *)((char *)a1 + v42);
  uint64_t v44 = (uint64_t *)((char *)a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  uint64_t v47 = v43[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = a3[12];
  id v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  uint64_t v51 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 40LL))(v49, v50, v51);
  return a1;
}

uint64_t sub_100099D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100099D70);
}

uint64_t sub_100099D70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v7 = *(void *)(v8 - 8);
    uint64_t v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v10 = *(void *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100099E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100099E24);
}

uint64_t sub_100099E24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[5];
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[6] + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void *)(v10 - 8);
    uint64_t v11 = a4[12];
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_100099EC8(uint64_t a1)
{
  v5[0] = &unk_1001A6188;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    void v5[2] = &unk_1001A61A0;
    v5[3] = &unk_1001A61A0;
    void v5[4] = &unk_1001A61A0;
    v5[5] = &unk_1001A61A0;
    void v5[6] = &unk_1001A61A0;
    v5[7] = &unk_1001A61A0;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[8] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 9LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100099F6C(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100098C98( (unint64_t *)&unk_100235860,  type metadata accessor for DeviceRecord,  (uint64_t)&unk_1001A69AC);
  uint64_t result = sub_100098C98(&qword_100234F30, type metadata accessor for DeviceRecord, (uint64_t)&unk_1001A6830);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100099FC8()
{
  return sub_100098C98(&qword_100234F38, type metadata accessor for DeviceRecord, (uint64_t)&unk_1001A6224);
}

uint64_t sub_100099FF4()
{
  return sub_100098C98( &qword_100234F40,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A62C4);
}

uint64_t sub_10009A020()
{
  return sub_100098C98( &qword_100234F48,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6298);
}

uint64_t sub_10009A04C()
{
  return sub_100098C98( &qword_100234F50,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1001A63D8);
}

uint64_t sub_10009A078()
{
  return sub_100098C98( &qword_100234F58,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1001A63AC);
}

uint64_t sub_10009A0A4()
{
  return sub_100098C98( &qword_100234F60,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1001A6448);
}

uint64_t sub_10009A0D0()
{
  return sub_100098C98( &qword_100234F68,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6504);
}

uint64_t sub_10009A0FC()
{
  return sub_100098C98( &qword_100234F70,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6768);
}

unint64_t sub_10009A12C()
{
  unint64_t result = qword_100234F78;
  if (!qword_100234F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A662C, &type metadata for DeviceRecord.DeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100234F78);
  }

  return result;
}

uint64_t sub_10009A170()
{
  return sub_100098C98( &qword_100234F80,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1001A6680);
}

uint64_t sub_10009A19C()
{
  return sub_100098C98( &qword_100234F88,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1001A6654);
}

uint64_t sub_10009A1C8()
{
  return sub_100098C98( &qword_100234F90,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1001A66F0);
}

uint64_t sub_10009A1F4()
{
  return sub_100098C98( &qword_100234F98,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A65A8);
}

uint64_t sub_10009A220()
{
  return sub_100098C98( &qword_100234FA0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6574);
}

uint64_t sub_10009A24C()
{
  return sub_100098C98( &qword_100234FA8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6530);
}

uint64_t sub_10009A278()
{
  return sub_100098C98( &qword_100234FB0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001A6900);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_10009A2B8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10009A2FC()
{
  return sub_100098C98( &qword_100234FB8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001A68C4);
}

unint64_t sub_10009A32C()
{
  unint64_t result = qword_100234FC0;
  if (!qword_100234FC0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100234FC0);
  }

  return result;
}

uint64_t sub_10009A370()
{
  return sub_100098C98( &qword_100234FC8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001A693C);
}

uint64_t sub_10009A39C()
{
  return sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
}

uint64_t sub_10009A3C8()
{
  return sub_100098C98( &qword_100234FD8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6334);
}

uint64_t sub_10009A3F4(uint64_t a1)
{
  uint64_t result = sub_100098C98(&qword_100234FE0, type metadata accessor for DeviceRecord, (uint64_t)&unk_1001A61B8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

void *sub_10009A430(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_10009A454()
{
  unint64_t result = qword_100234FF0;
  if (!qword_100234FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6ACC, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100234FF0);
  }

  return result;
}

uint64_t sub_10009A498(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_10009A4B8()
{
  unint64_t result = qword_1002351A0;
  if (!qword_1002351A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002351A0);
  }

  return result;
}

unint64_t sub_10009A4FC()
{
  unint64_t result = qword_1002351D0;
  if (!qword_1002351D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002351D0);
  }

  return result;
}

uint64_t sub_10009A540(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v6 = v5[6];
  uint64_t v7 = *(uint64_t *)((char *)a1 + v6);
  uint64_t v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  BOOL v11 = v7 == *v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v12 = v5[7];
  uint64_t v13 = *(uint64_t *)((char *)a1 + v12);
  uint64_t v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  BOOL v17 = v13 == *v15 && v14 == v16;
  if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v18 = v5[8];
  uint64_t v19 = *(uint64_t *)((char *)a1 + v18);
  uint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  BOOL v23 = v19 == *v21 && v20 == v22;
  if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v24 = v5[9];
  uint64_t v25 = *(uint64_t *)((char *)a1 + v24);
  uint64_t v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  if ((v25 != *v27 || v26 != v28) && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v29 = v5[10];
  uint64_t v30 = *(uint64_t *)((char *)a1 + v29);
  uint64_t v31 = *(uint64_t *)((char *)a1 + v29 + 8);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  if ((v30 != *v32 || v31 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *v32, v33, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v34 = v5[11];
  uint64_t v35 = *(uint64_t *)((char *)a1 + v34);
  uint64_t v36 = *(uint64_t *)((char *)a1 + v34 + 8);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  if (v35 == *v37 && v36 == v38) {
    return static Date.== infix(_:_:)((char *)a1 + v5[12], a2 + v5[12]);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *v37, v38, 0LL) & 1) != 0) {
    return static Date.== infix(_:_:)((char *)a1 + v5[12], a2 + v5[12]);
  }
  else {
    return 0LL;
  }
}

uint64_t getEnumTagSinglePayload for DeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for DeviceRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10009A7AC + 4 * byte_1001A5EC8[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10009A7E0 + 4 * byte_1001A5EC3[v4]))();
}

uint64_t sub_10009A7E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A7E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10009A7F0LL);
  }
  return result;
}

uint64_t sub_10009A7FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10009A804LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_10009A808(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A810(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceRecord.CodingKeys()
{
  return &type metadata for DeviceRecord.CodingKeys;
}

unint64_t sub_10009A830()
{
  unint64_t result = qword_100235078;
  if (!qword_100235078)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6AA4, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235078);
  }

  return result;
}

unint64_t sub_10009A878()
{
  unint64_t result = qword_100235080;
  if (!qword_100235080)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6A14, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235080);
  }

  return result;
}

unint64_t sub_10009A8C0()
{
  unint64_t result = qword_100235088;
  if (!qword_100235088)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6A3C, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235088);
  }

  return result;
}

uint64_t sub_10009A904(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v5 = 0xED00006174616461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v7 = 0xEA00000000007265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x656D616E6B63696ELL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D616E6B63696ELL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x6D754E6C65646F6DLL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v10 = 0xEB00000000726562LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E6C65646F6DLL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x74636166756E616DLL && a2 == 0xEC00000072657275LL)
  {
    unint64_t v11 = 0xEC00000072657275LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74636166756E616DLL, 0xEC00000072657275LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v12 = 0xE900000000000044LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0x4449726F646E6576LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v13 = 0xE800000000000000LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F646E6576LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 8LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

unint64_t sub_10009AD40()
{
  uint64_t v0 = sub_100098CD8(&qword_100235150);
  uint64_t inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 504LL;
  int v2 = NSFilePosixPermissions;
  unint64_t result = sub_10009EB58(inited);
  qword_10023DCD8 = result;
  return result;
}

uint64_t sub_10009ADB8()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  char v42 = 0;
  URL.path.getter(v1);
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  unsigned int v5 = [v0 fileExistsAtPath:v4 isDirectory:&v42];

  if (v5)
  {
    if ((v42 & 1) != 0)
    {
LABEL_11:

      return v5 ^ 1;
    }

    uint64_t v8 = static os_log_type_t.error.getter(v6);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v9 = qword_10023DFD0;
    uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_1001A5EA0;
    uint64_t v12 = URL.description.getter();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10009914C();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Expected a directory, but is a file: %@", 39LL, 2LL, v11);
LABEL_10:
    swift_bridgeObjectRelease(v11);
    goto LABEL_11;
  }

  URL._bridgeToObjectiveC()(v7);
  uint64_t v16 = v15;
  type metadata accessor for FileAttributeKey(0LL);
  sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v41 = 0LL;
  unsigned int v18 = [v0 createDirectoryAtURL:v16 withIntermediateDirectories:1 attributes:isa error:&v41];

  id v19 = v41;
  if (v18)
  {
    uint64_t v20 = static os_log_type_t.default.getter(v41);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v21 = qword_10023DFD0;
    uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v11 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_1001A5EA0;
    uint64_t v23 = type metadata accessor for URL(0LL);
    uint64_t v24 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    uint64_t v27 = v26;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10009914C();
    *(void *)(v11 + 32) = v25;
    *(void *)(v11 + 40) = v27;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "createdDirectory: %@", 20LL, 2LL, v11);
    goto LABEL_10;
  }

  id v28 = v41;
  uint64_t v29 = (void *)_convertNSErrorToError(_:)(v19);

  uint64_t v31 = swift_willThrow(v30);
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  uint64_t v33 = qword_10023DFD0;
  uint64_t v34 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_1001A5EA0;
  id v41 = v29;
  swift_errorRetain(v29);
  uint64_t v36 = sub_100098CD8(&qword_1002357C0);
  uint64_t v37 = String.init<A>(describing:)(&v41, v36);
  uint64_t v39 = v38;
  *(void *)(v35 + 56) = &type metadata for String;
  *(void *)(v35 + 64) = sub_10009914C();
  *(void *)(v35 + 32) = v37;
  *(void *)(v35 + 40) = v39;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "createDirectory error: %@", 25LL, 2LL, v35);
  swift_bridgeObjectRelease(v35);

  swift_errorRelease(v29);
  return v5 ^ 1;
}

uint64_t sub_10009B1B0()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v32 = 0LL;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v32];

  id v5 = v32;
  if (!v4)
  {
    id v16 = v32;
    BOOL v17 = (void *)_convertNSErrorToError(_:)(v5);

    swift_willThrow(v18);
    id v32 = v17;
    swift_errorRetain(v17);
    uint64_t v19 = sub_100098CD8(&qword_1002357C0);
    unint64_t v20 = sub_10009B494();
    swift_errorRelease(v17);
    id v21 = v31;
    id v22 = [v31 domain];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    uint64_t v28 = v27;
    if (v26 == v23 && v27 == v25)
    {
      swift_bridgeObjectRelease_n(v25, 2LL);
    }

    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v23, v25, 0LL);
      swift_bridgeObjectRelease(v25);
      id v30 = (id)swift_bridgeObjectRelease(v28);
      if ((v29 & 1) == 0)
      {
LABEL_12:
        swift_willThrow(v30);
        return swift_errorRelease(v32);
      }
    }

    id v30 = [v21 code];
    if (v30 == (id)4)
    {

      return swift_errorRelease(v32);
    }

    goto LABEL_12;
  }

  uint64_t v6 = static os_log_type_t.default.getter(v32);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  uint64_t v7 = qword_10023DFD0;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001A5EA0;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  uint64_t v14 = v13;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10009914C();
  *(void *)(v9 + 32) = v12;
  *(void *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "removeDirectory: %@", 19LL, 2LL, v9);
  return swift_bridgeObjectRelease(v9);
}

unint64_t sub_10009B494()
{
  unint64_t result = qword_1002357F0;
  if (!qword_1002357F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002357F0);
  }

  return result;
}

void sub_10009B4D0(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    uint64_t v12 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v13 = qword_10023DFC0;
    uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10009914C();
    *(void *)(v15 + 32) = a4;
    *(void *)(v15 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "fetchAADeviceRecord: %@", 23LL, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    v18[3] = &type metadata for AudioAccessoryFeatures;
    void v18[4] = sub_10009E740();
    LOBYTE(v18[0]) = 0;
    char v16 = isFeatureEnabled(_:)(v18);
    sub_10009A498(v18);
    if ((v16 & 1) != 0) {
      BOOL v17 = sub_10009C268(a4, a5);
    }
    else {
      BOOL v17 = 0LL;
    }
    ((void (*)(void *))a2)(v17);
  }

  else
  {
    a2();
  }

uint64_t sub_10009B668(uint64_t a1, uint64_t a2)
{
  BOOL v17 = &type metadata for AudioAccessoryFeatures;
  unint64_t v18 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  char v5 = isFeatureEnabled(_:)(aBlock);
  sub_10009A498(aBlock);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v20 = 0LL;
  uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v7 = (void *)swift_allocObject(&unk_100209C10, 48LL, 7LL);
  id v7[2] = a1;
  v7[3] = a2;
  void v7[4] = &v20;
  void v7[5] = v2;
  uint64_t v8 = swift_allocObject(&unk_100209C38, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_10009E980;
  *(void *)(v8 + 24) = v7;
  unint64_t v18 = (unint64_t)sub_10009E99C;
  uint64_t v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2CA0;
  BOOL v17 = (ValueMetadata *)&unk_100209C50;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = v19;
  uint64_t v11 = v6;
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = v2;
  swift_retain(v8);
  swift_release(v10);
  dispatch_sync(v11, v9);

  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 128LL, 36LL, 27LL, 1LL);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v15 = v20;
    swift_release(v7);
    return v15;
  }

  __break(1u);
  return result;
}

void sub_10009B804(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v7 = qword_10023DFC0;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001A5EA0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10009914C();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "fetchAADeviceRecordSync: %@", 27LL, 2LL, v9);
  swift_bridgeObjectRelease(v9);
  v13[3] = &type metadata for AudioAccessoryFeatures;
  v13[4] = sub_10009E740();
  LOBYTE(v13[0]) = 0;
  char v10 = isFeatureEnabled(_:)(v13);
  sub_10009A498(v13);
  if ((v10 & 1) != 0) {
    uint64_t v11 = sub_10009C268(a1, a2);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = *a3;
  *a3 = v11;
}

uint64_t sub_10009B9AC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v83 = a5;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v75 = *(void *)(v11 - 8);
  uint64_t v76 = v11;
  __chkstk_darwin(v11);
  id v74 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v86, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v13);
  if (!Strong)
  {
    unint64_t v70 = sub_10009E7C0();
    uint64_t v71 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v70, 0LL, 0LL);
    *uint64_t v72 = 0;
    a2();
    return swift_errorRelease(v71);
  }

  uint64_t v77 = a2;
  uint64_t v78 = a3;
  uint64_t v73 = (void *)Strong;
  uint64_t v15 = Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap;
  swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v85, 0LL, 0LL);
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(*(void *)v15 + 64LL);
  uint64_t v80 = *(void *)v15 + 64LL;
  uint64_t v18 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v81 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v82 = v16;
  swift_bridgeObjectRetain(v16);
  int64_t v21 = 0LL;
  __int128 v79 = xmmword_1001A5EA0;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_25;
    }

    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      goto LABEL_79;
    }
    if (v24 >= v81) {
      break;
    }
    unint64_t v25 = *(void *)(v80 + 8 * v24);
    ++v21;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v81) {
        break;
      }
      unint64_t v25 = *(void *)(v80 + 8 * v21);
      if (!v25)
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v81) {
          break;
        }
        unint64_t v25 = *(void *)(v80 + 8 * v21);
        if (!v25)
        {
          int64_t v21 = v24 + 3;
          if (v24 + 3 >= v81) {
            break;
          }
          unint64_t v25 = *(void *)(v80 + 8 * v21);
          if (!v25)
          {
            int64_t v26 = v24 + 4;
            if (v26 >= v81) {
              break;
            }
            unint64_t v25 = *(void *)(v80 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                int64_t v21 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_81;
                }
                if (v21 >= v81) {
                  goto LABEL_75;
                }
                unint64_t v25 = *(void *)(v80 + 8 * v21);
                ++v26;
                if (v25) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v21 = v26;
          }
        }
      }
    }

LABEL_42:
      uint64_t v44 = swift_bridgeObjectRelease_n(v28, 2LL);
      a4 = v42;
    }

        uint64_t v16 = (a1 & 0x3F) << 8;
        a3 = 0x100235000LL;
        if (a1 < 0x800)
        {
          char v43 = (v16 | (a1 >> 6)) + 33217;
          goto LABEL_22;
        }

        goto LABEL_48;
      }

  uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[14] + 8));
  if ((v219 & 1) != 0)
  {
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[15] + 8));
    if ((v220 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

      uint64_t v44 = swift_bridgeObjectRelease_n(v27, 2LL);
      a4 = v42;
    }

uint64_t sub_10009C16C( void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v11 = v10;
  _Block_copy(v8);
  id v12 = a1;
  a5(v9, v11, v12, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(v11);
}

void *sub_10009C268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000ADDDC(a1, a2);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  int64_t v35 = &type metadata for AudioAccessoryFeatures;
  unint64_t v10 = sub_10009E740();
  unint64_t v36 = v10;
  LOBYTE(v34[0]) = 0;
  char v11 = isFeatureEnabled(_:)(v34);
  uint64_t v12 = sub_10009A498(v34);
  if ((v11 & 1) == 0) {
    goto LABEL_17;
  }
  int64_t v35 = &type metadata for AudioAccessoryFeatures;
  unint64_t v36 = v10;
  LOBYTE(v34[0]) = 0;
  char v13 = isFeatureEnabled(_:)(v34);
  sub_10009A498(v34);
  if ((v13 & 1) != 0)
  {
    id v14 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v14)
    {
      uint64_t v15 = sub_10013A76C();
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      uint64_t v16 = sub_100098D58(v4, (uint64_t)qword_10023DF40);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
      uint64_t v17 = (void *)sub_100138A8C((uint64_t)v7);
      swift_release(v15);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    else
    {
      uint64_t v19 = static os_log_type_t.error.getter(v14);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v17 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRetain(a2);
  uint64_t v18 = sub_10009DFB0((uint64_t)v17, a1, a2);
  swift_bridgeObjectRelease(v17);
  uint64_t v12 = swift_bridgeObjectRelease(a2);
  if (v18)
  {
    uint64_t v20 = static os_log_type_t.default.getter(v12);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v21 = qword_10023DFC0;
    uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_1001A5EA0;
    id v24 = v18;
    id v25 = [v24 description];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10009914C();
    *(void *)(v23 + 32) = v26;
    *(void *)(v23 + 40) = v28;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Found AADeviceRecord: - %@", 26LL, 2LL, v23);
  }

  else
  {
LABEL_17:
    uint64_t v29 = static os_log_type_t.default.getter(v12);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v30 = qword_10023DFC0;
    uint64_t v31 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v23 = swift_allocObject(v31, 72LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_1001A5EA0;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10009914C();
    *(void *)(v23 + 32) = a1;
    *(void *)(v23 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "AADeviceRecord not found for owner: - %@", 40LL, 2LL, v23);
    uint64_t v18 = 0LL;
  }

  swift_release(v9);
  swift_bridgeObjectRelease(v23);
  return v18;
}

uint64_t sub_10009C630(uint64_t a1)
{
  v21[3] = &type metadata for AudioAccessoryFeatures;
  v21[4] = sub_10009E740();
  LOBYTE(v21[0]) = 0;
  char v2 = isFeatureEnabled(_:)(v21);
  uint64_t result = sub_10009A498(v21);
  if ((v2 & 1) != 0)
  {
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0) {
        uint64_t v20 = a1;
      }
      else {
        uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v20);
      swift_bridgeObjectRelease(a1);
    }

    else
    {
      uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v5 = _swiftEmptyArrayStorage;
    if (v4)
    {
      v21[0] = _swiftEmptyArrayStorage;
      uint64_t result = sub_1001611AC(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v5 = (void *)v21[0];
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = 0LL;
        do
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
          uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
          uint64_t v8 = *(void *)(v7 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8);
          swift_bridgeObjectRetain(v8);
          swift_unknownObjectRelease(v7);
          v21[0] = v5;
          unint64_t v11 = v5[2];
          unint64_t v10 = v5[3];
          if (v11 >= v10 >> 1)
          {
            sub_1001611AC(v10 > 1, v11 + 1, 1);
            uint64_t v5 = (void *)v21[0];
          }

          ++v6;
          void v5[2] = v11 + 1;
          uint64_t v12 = &v5[2 * v11];
          v12[4] = v9;
          void v12[5] = v8;
        }

        while (v4 != v6);
      }

      else
      {
        char v13 = (void *)(a1 + 32);
        do
        {
          id v14 = (uint64_t *)(*v13 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
          uint64_t v16 = *v14;
          uint64_t v15 = v14[1];
          v21[0] = v5;
          unint64_t v18 = v5[2];
          unint64_t v17 = v5[3];
          swift_bridgeObjectRetain(v15);
          if (v18 >= v17 >> 1)
          {
            sub_1001611AC(v17 > 1, v18 + 1, 1);
            uint64_t v5 = (void *)v21[0];
          }

          void v5[2] = v18 + 1;
          uint64_t v19 = &v5[2 * v18];
          v19[4] = v16;
          void v19[5] = v15;
          ++v13;
          --v4;
        }

        while (v4);
      }
    }

    sub_10009C834((uint64_t)v5);
    return swift_bridgeObjectRelease(v5);
  }

  return result;
}

char *sub_10009C834(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  __int128 v67 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = &type metadata for AudioAccessoryFeatures;
  unint64_t v5 = sub_10009E740();
  unint64_t v79 = v5;
  LOBYTE(v77[0]) = 0;
  char v6 = isFeatureEnabled(_:)(v77);
  uint64_t result = (char *)sub_10009A498(v77);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = (uint64_t)_swiftEmptyArrayStorage;
    unint64_t v76 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v74 = *(void *)(a1 + 16);
    if (v74)
    {
      uint64_t v73 = a1 + 32;
      uint64_t v66 = a1;
      swift_bridgeObjectRetain(a1);
      uint64_t v10 = 0LL;
      unint64_t v11 = _swiftEmptyArrayStorage;
      __int128 v72 = xmmword_1001A5EA0;
      unint64_t v70 = v5;
      uint64_t v71 = v1;
      while (1)
      {
        char v13 = (uint64_t *)(v73 + 16 * v10);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        swift_bridgeObjectRetain(v14);
        uint64_t v16 = sub_1000ADDDC(v15, v14);
        if (v16)
        {
          uint64_t v75 = v16;
          uint64_t v78 = &type metadata for AudioAccessoryFeatures;
          unint64_t v79 = v5;
          LOBYTE(v77[0]) = 0;
          char v17 = isFeatureEnabled(_:)(v77);
          uint64_t v18 = sub_10009A498(v77);
          if ((v17 & 1) != 0)
          {
            uint64_t v78 = &type metadata for AudioAccessoryFeatures;
            unint64_t v79 = v5;
            LOBYTE(v77[0]) = 0;
            char v19 = isFeatureEnabled(_:)(v77);
            sub_10009A498(v77);
            uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
            if ((v19 & 1) != 0)
            {
              id v21 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
              if ((_DWORD)v21)
              {
                uint64_t v22 = sub_10013A76C();
                if (qword_100234BF8 != -1) {
                  swift_once(&qword_100234BF8, sub_100113FD8);
                }
                uint64_t v23 = v69;
                uint64_t v24 = sub_100098D58(v69, (uint64_t)qword_10023DF40);
                uint64_t v26 = (uint64_t)v67;
                uint64_t v25 = v68;
                (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v24, v23);
                uint64_t v20 = sub_100138A8C(v26);
                swift_release(v22);
                (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v23);
              }

              else
              {
                uint64_t v27 = static os_log_type_t.error.getter(v21);
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                uint64_t v28 = v27;
                uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
                os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
              }
            }

            if ((unint64_t)v20 >> 62)
            {
              if (v20 < 0) {
                uint64_t v56 = v20;
              }
              else {
                uint64_t v56 = v20 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v20);
              uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v56);
              if (v29)
              {
LABEL_18:
                uint64_t v30 = 4LL;
                while (1)
                {
                  if ((v20 & 0xC000000000000001LL) != 0) {
                    uint64_t result = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v20);
                  }
                  else {
                    uint64_t result = (char *)*(id *)(v20 + 8 * v30);
                  }
                  uint64_t v31 = result;
                  uint64_t v32 = v30 - 3;
                  if (__OFADD__(v30 - 4, 1LL))
                  {
                    __break(1u);
                    return result;
                  }

                  uint64_t v33 = *(void *)&result[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
                  uint64_t v34 = *(void *)&v31[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
                  BOOL v35 = v33 == v15 && v34 == v14;
                  if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v15, v14, 0LL) & 1) != 0) {
                    break;
                  }

                  ++v30;
                  if (v32 == v29) {
                    goto LABEL_29;
                  }
                }

                uint64_t v42 = swift_bridgeObjectRelease_n(v20, 2LL);
                uint64_t v43 = static os_log_type_t.default.getter(v42);
                if (qword_100234C20 != -1) {
                  swift_once(&qword_100234C20, sub_10018A978);
                }
                uint64_t v44 = qword_10023DFC0;
                uint64_t v45 = sub_100098CD8((uint64_t *)&unk_100234E00);
                uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
                *(_OWORD *)(v46 + 16) = v72;
                uint64_t v47 = v31;
                id v48 = [v47 description];
                uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
                uint64_t v51 = v50;

                *(void *)(v46 + 56) = &type metadata for String;
                *(void *)(v46 + 64) = sub_10009914C();
                *(void *)(v46 + 32) = v49;
                *(void *)(v46 + 40) = v51;
                os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Found AADeviceRecord: - %@", 26LL, 2LL, v46);
                swift_bridgeObjectRelease(v14);
                swift_release(v75);
                swift_bridgeObjectRelease(v46);
                uint64_t v52 = v47;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
                unint64_t v54 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                unint64_t v53 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                if (v54 >= v53 >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v53 > 1,  v54 + 1,  1LL);
                }
                uint64_t v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
                specialized Array._endMutation()(v55);

                unint64_t v5 = v70;
                uint64_t v1 = v71;
                goto LABEL_5;
              }
            }

            else
            {
              uint64_t v29 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              swift_bridgeObjectRetain(v20);
              if (v29) {
                goto LABEL_18;
              }
            }

LABEL_29:
            uint64_t v18 = swift_bridgeObjectRelease_n(v20, 2LL);
            unint64_t v5 = v70;
            uint64_t v1 = v71;
          }

          uint64_t v36 = static os_log_type_t.default.getter(v18);
          if (qword_100234C20 != -1) {
            swift_once(&qword_100234C20, sub_10018A978);
          }
          uint64_t v37 = qword_10023DFC0;
          uint64_t v38 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
          *(_OWORD *)(v39 + 16) = v72;
          *(void *)(v39 + 56) = &type metadata for String;
          *(void *)(v39 + 64) = sub_10009914C();
          *(void *)(v39 + 32) = v15;
          *(void *)(v39 + 40) = v14;
          swift_bridgeObjectRetain(v14);
          os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  v37,  "AADeviceRecord not found for owner: - %@",  40LL,  2LL,  v39);
          swift_release(v75);
          swift_bridgeObjectRelease(v39);
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
          unint64_t v11 = sub_10018B814(0LL, v11[2] + 1LL, 1, v11);
        }
        unint64_t v41 = v11[2];
        unint64_t v40 = v11[3];
        if (v41 >= v40 >> 1) {
          unint64_t v11 = sub_10018B814((void *)(v40 > 1), v41 + 1, 1, v11);
        }
        void v11[2] = v41 + 1;
        uint64_t v12 = &v11[2 * v41];
        v12[4] = v15;
        void v12[5] = v14;
LABEL_5:
        if (++v10 == v74)
        {
          swift_bridgeObjectRelease(v66);
          uint64_t v9 = v76;
          if (!(v76 >> 62)) {
            goto LABEL_48;
          }
LABEL_59:
          if (v9 < 0) {
            uint64_t v65 = v9;
          }
          else {
            uint64_t v65 = v9 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v9);
          uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v65);
          swift_bridgeObjectRelease(v9);
          goto LABEL_49;
        }
      }
    }

    unint64_t v11 = _swiftEmptyArrayStorage;
LABEL_48:
    uint64_t v57 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_49:
    if (v57 >= 1
      && (uint64_t Strong = swift_unknownObjectWeakLoadStrong( v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate,  v8)) != 0)
    {
      uint64_t v59 = (void *)Strong;
      type metadata accessor for AADeviceRecord(0LL);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v9);
      [v59 aaDeviceRecordsUpdatedWithRecords:isa];

      swift_unknownObjectRelease(v59);
      if (!v11[2]) {
        return (char *)swift_bridgeObjectRelease(v11);
      }
    }

    else
    {
      swift_bridgeObjectRelease(v9);
      if (!v11[2]) {
        return (char *)swift_bridgeObjectRelease(v11);
      }
    }

    uint64_t v62 = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate, v61);
    if (v62)
    {
      uint64_t v63 = (void *)v62;
      Class v64 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v11);
      [v63 aaDeviceRecordsMultiUserEnvChangedUseDefaultsForAddresses:v64];

      return (char *)swift_unknownObjectRelease(v63);
    }

    return (char *)swift_bridgeObjectRelease(v11);
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

void sub_10009CF38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  __chkstk_darwin(v5);
  id v58 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
  swift_beginAccess(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v67, 0LL, 0LL);
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID);
  uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID + 8);
  swift_bridgeObjectRetain(v8);
  uint64_t v11 = swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_1000AE6C8(v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  v64[0] = v8;
  sub_10009D998(v12, v9, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v14 = v64[0];
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int64_t v15 = 0LL;
  uint64_t v16 = *(void *)(v14 + 64);
  uint64_t v62 = v14 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v63 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v61 = v14;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v15 << 6);
    }

    else
    {
      int64_t v22 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_71;
      }
      if (v22 >= v63)
      {
LABEL_68:
        swift_release(v14);
        return;
      }

      unint64_t v23 = *(void *)(v62 + 8 * v22);
      ++v15;
      if (!v23)
      {
        int64_t v15 = v22 + 1;
        if (v22 + 1 >= v63) {
          goto LABEL_68;
        }
        unint64_t v23 = *(void *)(v62 + 8 * v15);
        if (!v23)
        {
          int64_t v15 = v22 + 2;
          if (v22 + 2 >= v63) {
            goto LABEL_68;
          }
          unint64_t v23 = *(void *)(v62 + 8 * v15);
          if (!v23)
          {
            int64_t v24 = v22 + 3;
            if (v24 >= v63) {
              goto LABEL_68;
            }
            unint64_t v23 = *(void *)(v62 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v15 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_72;
                }
                if (v15 >= v63) {
                  goto LABEL_68;
                }
                unint64_t v23 = *(void *)(v62 + 8 * v15);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v15 = v24;
          }
        }
      }

uint64_t sub_10009D4D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = &type metadata for AudioAccessoryFeatures;
  unint64_t v6 = sub_10009E740();
  unint64_t v49 = v6;
  LOBYTE(v47._countAndFlagsBits) = 0;
  char v7 = isFeatureEnabled(_:)(&v47);
  uint64_t result = sub_10009A498(&v47);
  if ((v7 & 1) != 0)
  {
    v9._object = (void *)0x80000001001CB040LL;
    v9._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001001CB070LL;
    v10._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001001CB0A0LL;
    v11._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001001CB0D0LL;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    uint64_t v14 = static os_log_type_t.default.getter(v13);
    if (qword_100234C38 != -1) {
      swift_once(&qword_100234C38, sub_10018AAE4);
    }
    uint64_t v15 = (uint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_10023DFD8,  "-------------AADevice Records-------------",  42LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v16 = sub_1000AE6C8();
    uint64_t v48 = &type metadata for AudioAccessoryFeatures;
    unint64_t v49 = v6;
    LOBYTE(v47._countAndFlagsBits) = 0;
    uint64_t v17 = isFeatureEnabled(_:)(&v47);
    sub_10009A498(&v47);
    if ((v17 & 1) == 0) {
      goto LABEL_11;
    }
    id v18 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if (!(_DWORD)v18)
    {
      uint64_t v17 = static os_log_type_t.error.getter(v18);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
      goto LABEL_11;
    }

    uint64_t v17 = sub_10013A76C();
    if (qword_100234BF8 != -1) {
      goto LABEL_26;
    }
    while (1)
    {
      uint64_t v19 = sub_100098D58(v2, (uint64_t)qword_10023DF40);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
      uint64_t v15 = sub_100138A8C((uint64_t)v5);
      swift_release(v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_11:
      swift_release(v16);
      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v15);
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(v15);
        if (!v20) {
          return swift_bridgeObjectRelease(v15);
        }
      }

      else
      {
        uint64_t v20 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v20) {
          return swift_bridgeObjectRelease(v15);
        }
      }

      if (v20 >= 1) {
        break;
      }
      __break(1u);
LABEL_26:
      swift_once(&qword_100234BF8, sub_100113FD8);
    }

    uint64_t v21 = 0LL;
    unint64_t v45 = v15 & 0xC000000000000001LL;
    __int128 v44 = xmmword_1001A5EA0;
    uint64_t v46 = a1;
    uint64_t v43 = v15;
    do
    {
      if (v45) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v15);
      }
      else {
        id v22 = *(id *)(v15 + 8 * v21 + 32);
      }
      unint64_t v23 = v22;
      ++v21;
      uint64_t v24 = static os_log_type_t.default.getter(v22);
      uint64_t v25 = qword_10023DFD8;
      uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
      *(_OWORD *)(v27 + 16) = v44;
      id v28 = v23;
      id v29 = [v28 description];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v32 = v31;

      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10009914C();
      *(void *)(v27 + 32) = v30;
      *(void *)(v27 + 40) = v32;
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@", 2LL, 2LL, v27);
      swift_bridgeObjectRelease(v27);
      id v33 = v28;
      id v34 = [v33 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      v47._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v47._object = (void *)0xE700000000000000LL;
      v38._countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v37);
      object = v47._object;
      swift_bridgeObjectRetain(v47._object);
      v40._countAndFlagsBits = 10LL;
      v40._object = (void *)0xE100000000000000LL;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(object);
      unint64_t v41 = v47._object;
      String.append(_:)(v47);

      swift_bridgeObjectRelease(v41);
      uint64_t v15 = v43;
    }

    while (v20 != v21);
    return swift_bridgeObjectRelease(v15);
  }

  return result;
}

uint64_t sub_10009D998(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::String v10 = (void *)*v4;
  unint64_t v12 = sub_1000A3A10(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      id v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
        *(void *)(v19 + 8 * v12) = a1;
        return result;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10010DF64();
      goto LABEL_7;
    }

    sub_10010C964(v15, a4 & 1);
    unint64_t v21 = sub_1000A3A10(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      id v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10010DED4(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10009DAC4(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v7 = (void *)*v3;
  unint64_t v9 = sub_1000A3B94((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = v15[7];

        *(void *)(v16 + 8 * v9) = a1;
        return;
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10010E484();
      goto LABEL_7;
    }

    sub_10010D56C(v12, a3 & 1);
    unint64_t v17 = sub_1000A3B94((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      unint64_t v9 = v17;
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10010DF1C(v9, (uint64_t)a2, a1, v15);
      id v19 = a2;
      return;
    }
  }

  unint64_t v20 = sub_10009E784();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

uint64_t sub_10009DBE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000A3A10(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t result = swift_unknownObjectRelease(*(void *)(v19 + 8 * v12));
        *(void *)(v19 + 8 * v12) = a1;
        return result;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10010E628();
      goto LABEL_7;
    }

    sub_10010D83C(v15, a4 & 1);
    unint64_t v21 = sub_1000A3A10(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10010DED4(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10009DD0C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100209C88, 24LL, 7LL);
  *(void *)(v14 + 16) = a4;
  id v33 = &type metadata for AudioAccessoryFeatures;
  unint64_t v34 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  _Block_copy(a4);
  char v15 = isFeatureEnabled(_:)(aBlock);
  sub_10009A498(aBlock);
  if ((v15 & 1) != 0)
  {
    char v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v17 = swift_allocObject(&unk_100209B98, 24LL, 7LL);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    char v18 = (void *)swift_allocObject(&unk_100209CB0, 56LL, 7LL);
    v18[2] = v17;
    v18[3] = sub_10009E9A4;
    void v18[4] = v14;
    void v18[5] = a1;
    v18[6] = a2;
    unint64_t v34 = (unint64_t)sub_10009E9EC;
    uint64_t v35 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    id v33 = (ValueMetadata *)&unk_100209CC8;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    uint64_t v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v31 = _swiftEmptyArrayStorage;
    unint64_t v22 = sub_10009E87C();
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
    unint64_t v24 = sub_10009E8C4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
    uint64_t v25 = v35;
    swift_release(v14);
    swift_release(v17);
    uint64_t v26 = (uint64_t)v25;
  }

  else
  {
    a4[2](a4, 0LL);
    uint64_t v26 = v14;
  }

  return swift_release(v26);
}

void *sub_10009DFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      uint64_t v8 = (a1 & 0xC000000000000001LL) != 0
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = &v8[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      uint64_t v12 = *(void *)&v8[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      uint64_t v13 = *((void *)v11 + 1);
      BOOL v14 = *(void *)v11 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_17:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_10009E0F0(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100209B70, 24LL, 7LL);
  *(void *)(v14 + 16) = a4;
  uint64_t v37 = &type metadata for AudioAccessoryFeatures;
  unint64_t v38 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  _Block_copy(a4);
  char v15 = isFeatureEnabled(_:)(aBlock);
  sub_10009A498(aBlock);
  if ((v15 & 1) != 0)
  {
    char v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v17 = swift_allocObject(&unk_100209B98, 24LL, 7LL);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    char v18 = (void *)swift_allocObject(&unk_100209BC0, 56LL, 7LL);
    v18[2] = v17;
    v18[3] = sub_10009E828;
    void v18[4] = v14;
    void v18[5] = a1;
    v18[6] = a2;
    unint64_t v38 = (unint64_t)sub_10009E858;
    uint64_t v39 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    uint64_t v37 = (ValueMetadata *)&unk_100209BD8;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    uint64_t v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v35 = _swiftEmptyArrayStorage;
    unint64_t v22 = sub_10009E87C();
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
    unint64_t v24 = sub_10009E8C4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
    uint64_t v25 = v39;
    swift_release(v14);
    swift_release(v17);
    uint64_t v26 = (uint64_t)v25;
  }

  else
  {
    unint64_t v27 = sub_10009E7C0();
    uint64_t v28 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v27, 0LL, 0LL);
    *uint64_t v29 = 4;
    uint64_t v30 = (void *)_convertErrorToNSError(_:)(v28);
    ((void (**)(void, void *))a4)[2](a4, v30);

    swift_errorRelease(v28);
    uint64_t v26 = v14;
  }

  return swift_release(v26);
}

uint64_t sub_10009E3D0(uint64_t a1)
{
  v10[3] = &type metadata for AudioAccessoryFeatures;
  void v10[4] = sub_10009E740();
  LOBYTE(v10[0]) = 0;
  char v2 = isFeatureEnabled(_:)(v10);
  sub_10009A498(v10);
  unint64_t v3 = sub_10009E7C0();
  uint64_t v4 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v3, 0LL, 0LL);
  uint64_t v6 = v4;
  if ((v2 & 1) != 0) {
    char v7 = 6;
  }
  else {
    char v7 = 4;
  }
  *uint64_t v5 = v7;
  uint64_t v8 = (void *)_convertErrorToNSError(_:)(v4);
  (*(void (**)(uint64_t, void *))(a1 + 16))(a1, v8);

  return swift_errorRelease(v6);
}

uint64_t sub_10009E480()
{
  uint64_t v1 = v0;
  v29[3] = &type metadata for AudioAccessoryFeatures;
  v29[4] = sub_10009E740();
  LOBYTE(v29[0]) = 0;
  char v2 = isFeatureEnabled(_:)(v29);
  uint64_t result = sub_10009A498(v29);
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
    v29[0] = _swiftEmptyArrayStorage;
    uint64_t v6 = _swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
    {
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage);
      if (result)
      {
        uint64_t v10 = result;
        if (result < 1)
        {
          __break(1u);
          return result;
        }

        uint64_t v11 = (id *)&_swiftEmptyArrayStorage[4];
        uint64_t v6 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v13 = (uint64_t *)((char *)*v11 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
          uint64_t v14 = *v13;
          uint64_t v15 = v13[1];
          id v16 = *v11;
          swift_bridgeObjectRetain(v15);
          sub_10009CF38(v14, v15);
          LOBYTE(v14) = v17;
          swift_bridgeObjectRelease(v15);
          if ((v14 & 1) != 0)
          {
            uint64_t v19 = *v13;
            uint64_t v18 = v13[1];
            swift_bridgeObjectRetain(v18);
            if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
              uint64_t v6 = sub_10018B814(0LL, v6[2] + 1LL, 1, v6);
            }
            unint64_t v21 = v6[2];
            unint64_t v20 = v6[3];
            if (v21 >= v20 >> 1) {
              uint64_t v6 = sub_10018B814((void *)(v20 > 1), v21 + 1, 1, v6);
            }
            void v6[2] = v21 + 1;
            uint64_t v12 = &v6[2 * v21];
            v12[4] = v19;
            void v12[5] = v18;
          }

          else
          {
            id v22 = v16;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
            unint64_t v23 = *(void *)((v29[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v24 = *(void *)((v29[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v23 >= v24 >> 1)
            {
              unint64_t v26 = *(void *)((v29[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v23 + 1, 1LL);
              unint64_t v23 = v26;
            }

            uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v22);
            specialized Array._endMutation()(v25);
          }

          ++v11;
          --v10;
        }

        while (v10);
        uint64_t v5 = v29[0];
      }

      else
      {
        uint64_t v6 = _swiftEmptyArrayStorage;
      }
    }

    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0) {
        uint64_t v27 = v5;
      }
      else {
        uint64_t v27 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v5);
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v5);
      if (!v28) {
        goto LABEL_25;
      }
    }

    else if (!*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_25;
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong( v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate,  v4);
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      type metadata accessor for AADeviceRecord(0LL);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v5);
      [v8 aaDeviceRecordsRemovedWithRecords:isa];

      swift_unknownObjectRelease(v8);
      if (!v6[2]) {
        return swift_bridgeObjectRelease(v6);
      }
      goto LABEL_26;
    }

unint64_t sub_10009E740()
{
  unint64_t result = qword_1002357A0;
  if (!qword_1002357A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7BA8, &type metadata for AudioAccessoryFeatures);
    atomic_store(result, (unint64_t *)&qword_1002357A0);
  }

  return result;
}

unint64_t sub_10009E784()
{
  unint64_t result = qword_100235280;
  if (!qword_100235280)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CKRecordZoneID);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100235280);
  }

  return result;
}

unint64_t sub_10009E7C0()
{
  unint64_t result = qword_100235158;
  if (!qword_100235158)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7B68, &type metadata for DeviceManager.DeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_100235158);
  }

  return result;
}

uint64_t sub_10009E804()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10009E828(uint64_t a1)
{
}

uint64_t sub_10009E830()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009E858()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_10009B9AC);
}

uint64_t sub_10009E864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009E874(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10009E87C()
{
  unint64_t result = qword_100236EE0;
  if (!qword_100236EE0)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100236EE0);
  }

  return result;
}

unint64_t sub_10009E8C4()
{
  unint64_t result = qword_100236EF0;
  if (!qword_100236EF0)
  {
    uint64_t v1 = sub_10009E910((uint64_t *)&unk_100235790);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100236EF0);
  }

  return result;
}

uint64_t sub_10009E910(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10009E954()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10009E980()
{
}

uint64_t sub_10009E98C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10009E99C()
{
  return sub_1000F2C80(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10009E9A4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10009E9B8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10009E9EC()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_10009B4D0);
}

uint64_t sub_10009E9F8(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_10009EA20(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10009EA78()
{
  return Hasher._finalize()();
}

unint64_t sub_10009EB58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8(&qword_1002352A8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000A4D5C(v7, (uint64_t)&v14, &qword_1002352B0);
    uint64_t v8 = v14;
    unint64_t result = sub_1000A3990(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_1000A4A9C(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009EC84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8(&qword_100235300);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_1000A3A10(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v12 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009ED94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8(&qword_100235310);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000A4D5C(v7, (uint64_t)&v16, &qword_100235318);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_1000A3A10(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    BOOL v12 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1000A4A9C(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009EEC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8(&qword_1002352E0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    __int128 v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((void *)&v15 + 1));
    unint64_t result = sub_1000A3A10(v7, v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v11 = (uint64_t *)(v4[6] + 16 * result);
    *char v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009EFF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8(&qword_1002352A0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = *(v6 - 1);
    id v9 = v7;
    unint64_t result = sub_1000A3990((uint64_t)v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = 8 * result;
    *(void *)(v4[6] + v12) = v8;
    *(void *)(v4[7] + v12) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009F0F8(uint64_t a1)
{
  return sub_10009F120(a1, &qword_1002352F0, (uint64_t (*)(id))sub_1000A3B48);
}

unint64_t sub_10009F10C(uint64_t a1)
{
  return sub_10009F120(a1, &qword_1002352E8, (uint64_t (*)(id))sub_1000A3AFC);
}

unint64_t sub_10009F120(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8(a2);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }

  swift_retain(v6);
  id v9 = (_OWORD *)(a1 + 40);
  while (1)
  {
    __int128 v16 = *v9;
    id v10 = *((id *)v9 - 1);
    swift_retain(*((void *)&v16 + 1));
    unint64_t result = a3(v10);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v7[6] + 8 * result) = v10;
    *(_OWORD *)(v7[7] + 16 * result) = v16;
    uint64_t v13 = v7[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    id v7[2] = v15;
    id v9 = (_OWORD *)((char *)v9 + 24);
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009F23C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100098CD8((uint64_t *)&unk_1002352B8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    id v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_1000A3A10(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10009F354(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1001611AC(0, v1, 0);
  unint64_t result = (void *)sub_1000C86CC(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  int64_t v23 = v1;
  int v24 = v4;
  uint64_t v25 = a1 + 64;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v26 = v6;
    char v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
    uint64_t v27 = *v11;
    uint64_t v28 = v11[1];
    swift_bridgeObjectRetain_n(v28, 2LL);
    v12._countAndFlagsBits = 58LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v28);
    unint64_t result = (void *)swift_bridgeObjectRelease(object);
    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      unint64_t result = (void *)sub_1001611AC(v15 > 1, v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v16 + 1;
    uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
    void v17[4] = v27;
    v17[5] = v28;
    int64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v18 = *(void *)(v25 + 8 * v10);
    if ((v18 & (1LL << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v24;
    if (*(_DWORD *)(a1 + 36) != v24) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2LL << (v5 & 0x3F));
    if (v19)
    {
      int64_t v8 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v23;
    }

    else
    {
      unint64_t v20 = v10 + 1;
      unint64_t v21 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v23;
      if (v10 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v22)) + (v20 << 6);
        }

        else
        {
          while (v21 - 2 != v10)
          {
            unint64_t v22 = *(void *)(a1 + 80 + 8 * v10++);
            if (v22)
            {
              unint64_t v20 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    uint64_t v6 = v26 + 1;
    uint64_t v5 = v8;
    if (v26 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

_UNKNOWN **static AAProxCardsRecord.ProxCardKeys.allCases.getter()
{
  return &off_100209478;
}

uint64_t AAProxCardsRecord.ProxCardKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009F60C + 4 * byte_1001A6B37[a1]))( 0x62756F4465736163LL,  0xED0000706154656CLL);
}

uint64_t sub_10009F60C()
{
  return 0x7473654764616568LL;
}

uint64_t sub_10009F62C()
{
  return 0x41676E6972616568LL;
}

uint64_t sub_10009F650()
{
  return 0x54676E6972616568LL;
}

uint64_t sub_10009F670()
{
  return 0x7461527472616568LL;
}

uint64_t sub_10009F68C()
{
  return 0x6175516563696F76LL;
}

uint64_t sub_10009F6AC()
{
  return 0x77654E7374616877LL;
}

void sub_10009F6C4(char *a1)
{
}

void sub_10009F6D0()
{
}

void sub_10009F6DC()
{
  __asm { BR              X10 }

uint64_t sub_10009F724(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEC00000073657275LL);
}

void sub_10009F7F0(uint64_t a1)
{
}

unint64_t sub_10009F7F8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F824()
{
  return ((uint64_t (*)(void))((char *)sub_10009F860 + 4 * byte_1001A6B45[*v0]))();
}

void sub_10009F860(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10009F884(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10009F8AC(void *a1@<X8>)
{
  *a1 = 0x54676E6972616568LL;
  a1[1] = 0xEB00000000747365LL;
}

void sub_10009F8D0(void *a1@<X8>)
{
  *a1 = 0x7461527472616568LL;
  a1[1] = 0xE900000000000065LL;
}

void sub_10009F8F0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10009F914(void *a1@<X8>)
{
  *a1 = 0x77654E7374616877LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_10009F930(void *a1@<X8>)
{
  *a1 = &off_100209478;
}

uint64_t sub_10009F940()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v7, qword_10023DCE0);
  sub_100098D58(v3, (uint64_t)qword_10023DCE0);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001001A6CD0LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return result;
}

void *AAProxCardsRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v2);
  uint64_t v94 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v95 = (uint64_t)&v91 - v5;
  __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v91 - v7;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v91 - v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  Swift::String v12 = *(void **)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v96 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = objc_autoreleasePoolPush();
  unint64_t v15 = &v0[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  unint64_t v17 = *((void *)v15 + 1);
  sub_1000991CC(v16, v17);
  sub_100118B60(v16, v17);
  Class isa = v18;
  sub_100099394(v16, v17);
  if (!isa)
  {
    unint64_t v20 = v1;
    Class isa = sub_1000A37BC( (uint64_t)v20,  (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier,  0xD000000000000011LL,  (void *)0x80000001001A6CD0LL).super.isa;
  }

  v101[0] = isa;
  sub_1000A233C((unint64_t)v101);
  objc_autoreleasePoolPop(v14);
  unint64_t v21 = &v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions], v101, 0LL, 0LL);
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = swift_bridgeObjectRetain(v22);
  int v24 = sub_10009F354(v23);
  swift_bridgeObjectRelease(v22);
  __int16 v97 = v24;
  uint64_t v25 = sub_100098CD8(&qword_100235170);
  uint64_t v26 = sub_1000A4318(&qword_100235178, &qword_100235170, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v25, v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease(v24);
  __int16 v97 = 0LL;
  unint64_t v98 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(152LL);
  uint64_t v99 = v97;
  unint64_t v100 = v98;
  v30._object = (void *)0x80000001001CB1F0LL;
  v30._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v30);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v32 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
  object = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(object);
  v35._countAndFlagsBits = 2108704LL;
  v35._object = (void *)0xE300000000000000LL;
  String.append(_:)(v35);
  uint64_t v36 = *(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  uint64_t v37 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain(v37);
  v38._countAndFlagsBits = v36;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v37);
  v39._object = (void *)0x80000001001CB210LL;
  v39._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v27;
  v40._object = v29;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v29);
  v41._object = (void *)0x80000001001CB230LL;
  v41._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v41);
  uint64_t v42 = &v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], &v97, 0LL, 0LL);
  uint64_t v43 = v96;
  uint64_t v91 = (void (*)(char *, char *, uint64_t))v12[2];
  v91(v96, v42, v11);
  uint64_t v44 = sub_100098C98( &qword_1002367A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v44);
  uint64_t v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46);
  uint64_t v92 = (void (*)(char *, uint64_t))v12[1];
  v92(v43, v11);
  v47._countAndFlagsBits = 0xD00000000000001ALL;
  v47._object = (void *)0x80000001001CB250LL;
  String.append(_:)(v47);
  Class v48 = isa;
  id v49 = -[objc_class creationDate](isa, "creationDate");
  if (v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = (uint64_t)v93;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12[7];
    v52(v51, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12[7];
    uint64_t v51 = (uint64_t)v93;
    v52((uint64_t)v93, 1LL, 1LL, v11);
  }

  sub_100099290(v51, (uint64_t)v10);
  uint64_t v53 = (unsigned int (*)(char *, uint64_t, uint64_t))v12[6];
  if (v53(v10, 1LL, v11))
  {
    sub_100099358((uint64_t)v10, (uint64_t *)&unk_100234E10);
    unint64_t v54 = (void *)0xE200000000000000LL;
    uint64_t v55 = 15932LL;
  }

  else
  {
    BOOL v56 = v96;
    v91(v96, v10, v11);
    sub_100099358((uint64_t)v10, (uint64_t *)&unk_100234E10);
    uint64_t v57 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v58 = Date._bridgeToObjectiveC()().super.isa;
    id v59 = [v57 localizedStringFromDate:v58 dateStyle:2 timeStyle:2];

    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    unint64_t v54 = v60;

    v92(v56, v11);
  }

  v61._countAndFlagsBits = v55;
  v61._object = v54;
  String.append(_:)(v61);
  swift_bridgeObjectRelease(v54);
  v62._object = (void *)0x80000001001CB270LL;
  v62._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v62);
  id v63 = -[objc_class modificationDate](v48, "modificationDate");
  if (v63)
  {
    Class v64 = v63;
    uint64_t v65 = (uint64_t)v94;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

    uint64_t v66 = 0LL;
  }

  else
  {
    uint64_t v66 = 1LL;
    uint64_t v65 = (uint64_t)v94;
  }

  v52(v65, v66, 1LL, v11);
  uint64_t v67 = v95;
  sub_100099290(v65, v95);
  if (v53((char *)v67, 1LL, v11))
  {
    sub_100099358(v67, (uint64_t *)&unk_100234E10);
    uint64_t v68 = (void *)0xE200000000000000LL;
    uint64_t v69 = 15932LL;
  }

  else
  {
    unint64_t v70 = v96;
    v91(v96, (char *)v67, v11);
    sub_100099358(v67, (uint64_t *)&unk_100234E10);
    uint64_t v71 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v72 = Date._bridgeToObjectiveC()().super.isa;
    id v73 = [v71 localizedStringFromDate:v72 dateStyle:2 timeStyle:2];

    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    uint64_t v68 = v74;

    v92(v70, v11);
  }

  v75._countAndFlagsBits = v69;
  v75._object = v68;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v68);
  v76._countAndFlagsBits = 0xD000000000000013LL;
  v76._object = (void *)0x80000001001CB290LL;
  String.append(_:)(v76);
  id v77 = -[objc_class modifiedByDevice](v48, "modifiedByDevice");
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    int64_t v81 = v80;
  }

  else
  {
    int64_t v81 = (void *)0xE200000000000000LL;
    uint64_t v79 = 15932LL;
  }

  v82._countAndFlagsBits = v79;
  v82._object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease(v81);
  v83._countAndFlagsBits = 0x746520202020202CLL;
  v83._object = (void *)0xEC000000203A6761LL;
  String.append(_:)(v83);
  id v84 = -[objc_class recordChangeTag](v48, "recordChangeTag");
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    uint64_t v88 = v87;
  }

  else
  {
    uint64_t v88 = (void *)0xE200000000000000LL;
    uint64_t v86 = 15932LL;
  }

  v89._countAndFlagsBits = v86;
  v89._object = v88;
  String.append(_:)(v89);

  swift_bridgeObjectRelease(v88);
  return v99;
}

uint64_t HMDeviceCloudRecord.debugDescription.getter()
{
  id v1 = [v0 description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

char *sub_1000A0344(void *a1)
{
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  Swift::String v75 = (char *)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  id v77 = (char *)v72 - v6;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v80 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  Swift::String v76 = (char *)v72 - v11;
  uint64_t v12 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v79 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v78 = (char *)v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = v1;
  uint64_t v18 = CKRecord.recordType.getter(v17);
  uint64_t v20 = v19;
  if (v18 == 0xD000000000000011LL && v19 == 0x80000001001A6CD0LL)
  {
    swift_bridgeObjectRelease(0x80000001001A6CD0LL);
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0xD000000000000011LL, 0x80000001001A6CD0LL, 0LL);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {

      unint64_t v43 = sub_1000A4AAC();
      uint64_t v44 = swift_allocError(&type metadata for AAProxCardsRecord.AAProxCardsRecordError, v43, 0LL, 0LL);
      _BYTE *v45 = 0;
      swift_willThrow(v44);

      goto LABEL_14;
    }
  }

  uint64_t v74 = v15;
  id v22 = [a1 encryptedValues];
  NSString v23 = String._bridgeToObjectiveC()();
  id v82 = v22;
  id v24 = [v22 objectForKeyedSubscript:v23];

  if (!v24
    || (id v85 = v24,
        uint64_t v81 = sub_100098CD8(&qword_100234E40),
        (swift_dynamicCast(v83, &v85, v81, &type metadata for String, 6LL) & 1) == 0))
  {

    goto LABEL_10;
  }

  uint64_t v25 = v83[0];
  uint64_t v73 = v83[1];
  id v26 = [a1 recordID];
  id v27 = [v26 recordName];

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v29 = a1;
  uint64_t v31 = v30;

  UUID.init(uuidString:)(v28, v31);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = v79;
  uint64_t v33 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v14, 1LL, v74) != 1)
  {
    Class v48 = v78;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v78, v14, v33);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))( (uint64_t)v17 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier,  v48,  v33);
    id v49 = (void *)((char *)v17 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    uint64_t v50 = v73;
    *id v49 = v25;
    v49[1] = v50;
    id v51 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
    [v29 encodeSystemFieldsWithCoder:v51];
    [v51 finishEncoding];
    id v52 = [v51 encodedData];
    uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;

    BOOL v56 = (void *)((char *)v17 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata);
    uint64_t *v56 = v53;
    v56[1] = v55;
    id v57 = [v29 modificationDate];
    v72[1] = v29;
    if (v57)
    {
      Class v58 = v57;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

      uint64_t v59 = v80;
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
      id v61 = v77;
      v60(v77, v9, v7);
      Swift::String v62 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v59 + 56);
      v62(v61, 0LL, 1LL, v7);
      int v63 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v59 + 48))(v61, 1LL, v7);
      uint64_t v64 = (uint64_t)v75;
      if (v63 != 1)
      {
        uint64_t v65 = v76;
        v60(v76, (char *)v61, v7);
        goto LABEL_25;
      }
    }

    else
    {
      Swift::String v62 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v80 + 56);
      id v61 = v77;
      v62(v77, 1LL, 1LL, v7);
      uint64_t v64 = (uint64_t)v75;
    }

    id v66 = [v29 creationDate];
    if (v66)
    {
      uint64_t v67 = v66;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

      uint64_t v68 = v80;
      uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 32);
      v69(v64, v9, v7);
      v62((id)v64, 0LL, 1LL, v7);
      uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v64, 1LL, v7);
      if ((_DWORD)v70 != 1)
      {
        uint64_t v65 = v76;
        v69((uint64_t)v76, (char *)v64, v7);
LABEL_24:
        sub_100099358((uint64_t)v61, (uint64_t *)&unk_100234E10);
        uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
LABEL_25:
        v60((char *)v17 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v65, v7);
        *(void *)((char *)v17 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions) = sub_10009EC84((uint64_t)_swiftEmptyArrayStorage);

        uint64_t v71 = (objc_class *)type metadata accessor for AAProxCardsRecord(0LL);
        v84.receiver = v17;
        v84.super_class = v71;
        id v77 = (char *)objc_msgSendSuper2(&v84, "init");
        Swift::String v76 = v77;
        JUMPOUT(0x1000A0C00LL);
      }
    }

    else
    {
      uint64_t v70 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62)(v64, 1LL, 1LL, v7);
    }

    uint64_t v65 = v76;
    static Date.now.getter(v70);
    sub_100099358(v64, (uint64_t *)&unk_100234E10);
    goto LABEL_24;
  }

  swift_bridgeObjectRelease(v73);

  uint64_t v34 = sub_100099358((uint64_t)v14, &qword_100234E20);
  a1 = v29;
LABEL_10:
  uint64_t v35 = static os_log_type_t.error.getter(v34);
  id v36 = v82;
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v9 = (char *)qword_10023DFC8;
  uint64_t v37 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
  *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v38 + 56) = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  *(void *)(v38 + 64) = sub_1000A4AF0();
  *(void *)(v38 + 32) = a1;
  id v39 = a1;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v9, "Invalid AAProxCardsRecord - %@", 30LL, 2LL, v38);
  swift_bridgeObjectRelease(v38);
  unint64_t v40 = sub_1000A4AAC();
  uint64_t v41 = swift_allocError(&type metadata for AAProxCardsRecord.AAProxCardsRecordError, v40, 0LL, 0LL);
  *uint64_t v42 = 4;
  swift_willThrow(v41);
  swift_unknownObjectRelease(v36);

LABEL_14:
  uint64_t v46 = type metadata accessor for AAProxCardsRecord(0LL);
  swift_deallocPartialClassInstance( v17,  v46,  *(unsigned int *)((swift_isaMask & *v17) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v17) + 0x34LL));
  return v9;
}

void sub_1000A0EF8()
{
}

unint64_t AAProxCardsRecord.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return AAProxCardsRecord.init(from:)(a1);
}

unint64_t AAProxCardsRecord.init(from:)(void *a1)
{
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v91 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v92 = (char *)&v89 - v6;
  __chkstk_darwin(v7);
  uint64_t v94 = (char *)&v89 - v8;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v96 = v9;
  __int16 v97 = v10;
  __chkstk_darwin(v9);
  uint64_t v93 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v95 = (char *)&v89 - v13;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  unint64_t v98 = *(void (**)(char *, char *, uint64_t))(v14 - 8);
  uint64_t v99 = (char *)v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100098CD8(&qword_100235190);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a1[3];
  uint64_t v21 = a1[4];
  unint64_t v100 = a1;
  uint64_t v101 = v21;
  sub_10009A430(a1, v22);
  unint64_t v23 = sub_1000A41C0();
  id v24 = v1;
  uint64_t v25 = v102;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AAProxCardsRecord.CodingKeys,  &type metadata for AAProxCardsRecord.CodingKeys,  v23,  v22,  v101);
  if (!v25)
  {
    id v26 = v16;
    id v27 = v99;
    uint64_t v102 = v18;
    char v105 = 0;
    unint64_t v28 = sub_10009A4B8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v103, &type metadata for Data, &v105, v17, &type metadata for Data, v28);
    *(_OWORD *)((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata) = v103[0];
    LOBYTE(v103[0]) = 1;
    uint64_t v31 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v101 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v27, v103, v17, v27, v31);
    (*((void (**)(uint64_t, void *, char *))v98 + 4))( (uint64_t)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier,  v26,  v27);
    LOBYTE(v103[0]) = 2;
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)(v103, v101);
    uint64_t v33 = (void *)((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    *uint64_t v33 = v32;
    v33[1] = v34;
    unint64_t v35 = sub_10009EC84((uint64_t)_swiftEmptyArrayStorage);
    *(void *)((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions) = v35;
    id v36 = v95;
    static Date.now.getter(v35);
    uint64_t v37 = v96;
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v97[4];
    v38((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v36, v96);

    id v39 = (objc_class *)type metadata accessor for AAProxCardsRecord(0LL);
    v104.receiver = v24;
    v104.super_class = v39;
    id v40 = objc_msgSendSuper2(&v104, "init");
    uint64_t v41 = sub_100098CD8(&qword_1002351B0);
    char v105 = 3;
    uint64_t v42 = sub_1000A4240( &qword_1002351B8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for UInt64,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    uint64_t v99 = v20;
    uint64_t v43 = v42;
    uint64_t v44 = (char *)v40;
    uint64_t v45 = v101;
    uint64_t v46 = v43;
    Swift::String v47 = v99;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v103, v41, &v105, v101, v41, v46);
    unint64_t v98 = v38;
    uint64_t v48 = *(void *)&v103[0];
    sub_1000A0EF8();
    swift_bridgeObjectRelease(v48);
    LOBYTE(v103[0]) = 4;
    uint64_t v49 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v50 = v94;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, v103, v45, v37, v49);
    uint64_t v90 = v44;
    id v51 = v97;
    id v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v97[6];
    if (v52(v50, 1LL, v37) != 1)
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v47, v101);
      uint64_t v67 = v93;
      v98(v93, v50, v37);
      uint64_t v68 = v100;
      uint64_t v70 = (void *)&unk_10023D000;
LABEL_22:
      uint64_t v85 = v70[418];
      id v86 = v90;
      id v87 = &v90[v85];
      swift_beginAccess(&v90[v85], v103, 33LL, 0LL);
      uint64_t v88 = v87;
      unint64_t v23 = (unint64_t)v86;
      ((void (*)(char *, char *, uint64_t))v51[5])(v88, v67, v37);
      swift_endAccess(v103);
      sub_10009A498(v68);

      return v23;
    }

    Swift::String v89 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
    uint64_t v53 = objc_autoreleasePoolPush();
    id v54 = v90;
    uint64_t v55 = (uint64_t *)&v90[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
    uint64_t v56 = *(void *)&v90[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
    unint64_t v57 = *(void *)&v90[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
    sub_1000991CC(v56, v57);
    sub_100118B60(v56, v57);
    Class isa = v58;
    sub_100099394(v56, v57);
    if (!isa)
    {
      id v60 = v54;
      Class isa = sub_1000A37BC( (uint64_t)v60,  (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier,  0xD000000000000011LL,  (void *)0x80000001001A6CD0LL).super.isa;
    }

    *(void *)&v103[0] = isa;
    sub_1000A233C((unint64_t)v103);
    objc_autoreleasePoolPop(v53);
    id v61 = -[objc_class modificationDate](isa, "modificationDate");

    Swift::String v62 = v95;
    if (v61)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

      uint64_t v63 = (uint64_t)v92;
      uint64_t v64 = v62;
      uint64_t v65 = v96;
      v98(v92, v64, v96);
      id v51 = v97;
      id v66 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v97[7];
      v66(v63, 0LL, 1LL, v65);
      if (v89(v63, 1LL, v65) != 1)
      {
        (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v101);
        uint64_t v67 = v93;
        uint64_t v37 = v96;
        v98(v93, (char *)v63, v96);
        uint64_t v68 = v100;
        uint64_t v69 = (uint64_t)v94;
        uint64_t v70 = (void *)&unk_10023D000;
LABEL_21:
        sub_100099358(v69, (uint64_t *)&unk_100234E10);
        goto LABEL_22;
      }
    }

    else
    {
      id v66 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v97[7];
      v66((uint64_t)v92, 1LL, 1LL, v96);
    }

    uint64_t v71 = objc_autoreleasePoolPush();
    uint64_t v72 = *v55;
    unint64_t v73 = v55[1];
    sub_1000991CC(*v55, v73);
    sub_100118B60(v72, v73);
    Class v75 = v74;
    sub_100099394(v72, v73);
    if (!v75)
    {
      Swift::String v76 = v90;
      Class v75 = sub_1000A37BC( (uint64_t)v76,  (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier,  0xD000000000000011LL,  (void *)0x80000001001A6CD0LL).super.isa;
    }

    id v77 = v98;
    *(void *)&v103[0] = v75;
    sub_1000A233C((unint64_t)v103);
    objc_autoreleasePoolPop(v71);
    id v78 = -[objc_class creationDate](v75, "creationDate");

    uint64_t v67 = v93;
    uint64_t v79 = v95;
    if (v78)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

      uint64_t v80 = (uint64_t)v91;
      uint64_t v81 = v79;
      uint64_t v82 = v96;
      v77(v91, v81, v96);
      v66(v80, 0LL, 1LL, v82);
      uint64_t v83 = v82;
      uint64_t v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89)(v80, 1LL, v82);
      uint64_t v68 = v100;
      id v51 = v97;
      if ((_DWORD)v84 != 1)
      {
        (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v101);
        v77(v67, (char *)v80, v82);
LABEL_20:
        uint64_t v69 = (uint64_t)v94;
        sub_100099358((uint64_t)v92, (uint64_t *)&unk_100234E10);
        uint64_t v70 = &unk_10023D000;
        uint64_t v37 = v83;
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v80 = (uint64_t)v91;
      uint64_t v83 = v96;
      uint64_t v84 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v66)(v91, 1LL, 1LL, v96);
      uint64_t v68 = v100;
      id v51 = v97;
    }

    static Date.now.getter(v84);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v101);
    sub_100099358(v80, (uint64_t *)&unk_100234E10);
    goto LABEL_20;
  }

  sub_10009A498(v100);
  uint64_t v29 = type metadata accessor for AAProxCardsRecord(0LL);
  swift_deallocPartialClassInstance( v24,  v29,  *(unsigned int *)((swift_isaMask & *v24) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v24) + 0x34LL));
  return v23;
}

id HMDeviceCloudRecord.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void AAProxCardsRecord.init()()
{
}

uint64_t sub_1000A1D30(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A1D70 + 4 * byte_1001A6B4C[a1]))( 0x74654D64756F6C63LL,  0xED00006174616461LL);
}

uint64_t sub_1000A1D70()
{
  return 0x696669746E656469LL;
}

unint64_t sub_1000A1D8C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000A1DC0()
{
  return sub_1000A1D30(*v0);
}

uint64_t sub_1000A1DC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000A4834(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A1DEC(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000A1DF8(uint64_t a1)
{
  unint64_t v2 = sub_1000A41C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1E20(uint64_t a1)
{
  unint64_t v2 = sub_1000A41C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

id AAProxCardsRecord.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AAProxCardsRecord(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AAProxCardsRecord.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8(&qword_1002351C8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10009A430(a1, v11);
  unint64_t v13 = sub_1000A41C0();
  uint64_t v14 = v11;
  uint64_t v15 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AAProxCardsRecord.CodingKeys,  &type metadata for AAProxCardsRecord.CodingKeys,  v13,  v14,  v12);
  v36[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata);
  LOBYTE(v35[0]) = 0;
  unint64_t v16 = sub_10009A4FC();
  uint64_t v34 = v10;
  uint64_t v17 = v33;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v36, v35, v7, &type metadata for Data, v16);
  if (!v17)
  {
    uint64_t v33 = v6;
    uint64_t v19 = v32;
    uint64_t v20 = v15;
    uint64_t v21 = v15 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier;
    LOBYTE(v36[0]) = 1;
    uint64_t v22 = type metadata accessor for UUID(0LL);
    uint64_t v23 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, v36, v7, v22, v23);
    uint64_t v24 = *(void *)(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    uint64_t v25 = *(void *)(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
    LOBYTE(v36[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, v36, 0LL);
    id v26 = (void *)(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
    swift_beginAccess(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions, v36, 0LL, 0LL);
    v35[0] = *v26;
    char v37 = 3;
    uint64_t v27 = sub_100098CD8(&qword_1002351B0);
    uint64_t v28 = sub_1000A4240( (unint64_t *)&unk_1002351E0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for UInt64,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v37, 0LL, v27, v28);
    uint64_t v29 = v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
    swift_beginAccess(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v35, 0LL, 0LL);
    uint64_t v30 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v33, v29, v19);
    char v37 = 4;
    uint64_t v31 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, &v37, v7, v19, v31);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v34, v7);
}

unint64_t sub_1000A223C()
{
  return 0xD000000000000011LL;
}

unint64_t sub_1000A2258()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000A2274()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata;
  uint64_t v2 = *(void *)v1;
  sub_1000991CC(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000A22B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000A231C(unint64_t a1)
{
  return sub_1000A233C(a1);
}

uint64_t sub_1000A233C(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = a1;
  uint64_t v4 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C28 != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    uint64_t v5 = qword_10023DFC8;
    uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v8 = *(id *)v3;
    id v9 = [v8 description];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;

    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10009914C();
    *(void *)(v7 + 32) = v10;
    *(void *)(v7 + 40) = v12;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating AAProxCardsRecord record: %@", 37LL, 2LL, v7);
    swift_bridgeObjectRelease(v7);
    id v13 = [v8 encryptedValues];
    Objectint Type = swift_getObjectType(v13);
    CKRecordKeyValueSetting.subscript.getter( &v39,  0xD000000000000010LL,  0x80000001001CAB00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    uint64_t v14 = v40;
    id v16 = *(id *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
    if (!v40) {
      goto LABEL_7;
    }
    if (v39 == v16 && v40 == v15)
    {
      swift_bridgeObjectRelease(v40);
      goto LABEL_8;
    }

    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)( v39,  v40,  *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress),  *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8),  0LL);
    swift_bridgeObjectRelease(v14);
    if ((v17 & 1) == 0)
    {
LABEL_7:
      uint64_t v41 = &type metadata for String;
      uint64_t v42 = &protocol witness table for String;
      id v39 = v16;
      uint64_t v40 = v15;
      swift_bridgeObjectRetain(v15);
      CKRecordKeyValueSetting.subscript.setter(&v39, 0xD000000000000010LL, 0x80000001001CAB00LL, ObjectType);
    }

uint64_t sub_1000A2754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

unint64_t sub_1000A279C@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0LL));
  unint64_t result = AAProxCardsRecord.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000A27F0(void *a1)
{
  return AAProxCardsRecord.encode(to:)(a1);
}

Swift::UInt64 __swiftcall AAProxCardsRecord.version(for:)(audioaccessoryd::AAProxCardsRecord::ProxCardKeys a1)
{
  __asm { BR              X10 }

  return result;
}

uint64_t sub_1000A2860()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess(v1, &v7, 0LL, 0LL);
  unint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain(v2);
    unint64_t v3 = sub_1000A3A10(0x7473654764616568LL, 0xEC00000073657275LL);
    if ((v4 & 1) != 0) {
      uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    }
    else {
      uint64_t v5 = 0LL;
    }
    swift_bridgeObjectRelease(0xEC00000073657275LL);
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v2 = 0xEC00000073657275LL;
  }

  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_1000A299C(char *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((sub_1000A2F78((uint64_t)a1) & 1) == 0)
  {
    uint64_t v10 = ((uint64_t (*)(void))static os_log_type_t.info.getter)();
    if (qword_100234C28 != -1) {
LABEL_48:
    }
      swift_once(&qword_100234C28, sub_10018A9E0);
    uint64_t v48 = qword_10023DFC8;
    uint64_t v49 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v50 = swift_allocObject(v49, 72LL, 7LL);
    *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v51 = a1;
    id v52 = [v51 description];
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    uint64_t v55 = v54;

    *(void *)(v50 + 56) = &type metadata for String;
    *(void *)(v50 + 64) = sub_10009914C();
    *(void *)(v50 + 32) = v53;
    *(void *)(v50 + 40) = v55;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v48, "No change in updated ProxCardsRecord: %@", 40LL, 2LL, v50);
    return swift_bridgeObjectRelease(v50);
  }

  uint64_t v63 = v6;
  uint64_t v65 = v4;
  uint64_t v66 = v3;
  uint64_t v7 = &a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess(&a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions], v73, 0LL, 0LL);
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(*(void *)v7 + 64LL);
  uint64_t v68 = *(void *)v7 + 64LL;
  uint64_t v10 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v64 = v1;
  id v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_bridgeObjectRetain(v8);
  swift_beginAccess(v13, v72, 0LL, 0LL);
  int64_t v14 = 0LL;
  int64_t v69 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v67 = &_swiftEmptyDictionarySingleton;
  __int128 v70 = xmmword_1001A6F30;
  while (1)
  {
    while (1)
    {
      if (v12)
      {
        unint64_t v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v16 = v15 | (v14 << 6);
      }

      else
      {
        int64_t v17 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }

        if (v17 >= v69) {
          goto LABEL_42;
        }
        unint64_t v18 = *(void *)(v68 + 8 * v17);
        ++v14;
        if (!v18)
        {
          int64_t v14 = v17 + 1;
          if (v17 + 1 >= v69) {
            goto LABEL_42;
          }
          unint64_t v18 = *(void *)(v68 + 8 * v14);
          if (!v18)
          {
            int64_t v14 = v17 + 2;
            if (v17 + 2 >= v69) {
              goto LABEL_42;
            }
            unint64_t v18 = *(void *)(v68 + 8 * v14);
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v69)
              {
LABEL_42:
                swift_release(v8);
                unint64_t v57 = v67;
                if (!v67[2]) {
                  return swift_bridgeObjectRelease(v67);
                }
                uint64_t v58 = v64;
                sub_1000A0EF8();
                uint64_t v59 = swift_bridgeObjectRelease(v57);
                id v60 = v63;
                static Date.now.getter(v59);
                uint64_t v61 = v58 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
                swift_beginAccess( v58 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate,  v71,  33LL,  0LL);
                (*(void (**)(uint64_t, char *, uint64_t))(v65 + 40))(v61, v60, v66);
                return swift_endAccess(v71);
              }

              unint64_t v18 = *(void *)(v68 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v14 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_46;
                  }
                  if (v14 >= v69) {
                    goto LABEL_42;
                  }
                  unint64_t v18 = *(void *)(v68 + 8 * v14);
                  ++v19;
                  if (v18) {
                    goto LABEL_20;
                  }
                }
              }

              int64_t v14 = v19;
            }
          }
        }

uint64_t sub_1000A2F78(uint64_t result)
{
  if (!result) {
    return result;
  }
  unint64_t v2 = (char *)result;
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions, v28, 0LL, 0LL);
  unint64_t v4 = *(void *)(*v3 + 16);
  uint64_t v5 = &v2[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess(&v2[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions], v27, 0LL, 0LL);
  uint64_t v6 = *(void *)v5;
  if (v4 < *(void *)(v6 + 16)) {
    return 1LL;
  }
  uint64_t v7 = v6 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(v6 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  char v26 = v2;
  uint64_t result = swift_bridgeObjectRetain(v6);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v15 >= v11) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_29;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v11) {
          goto LABEL_29;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }

CKRecord sub_1000A31B0(uint64_t a1)
{
  return sub_1000A321C( a1,  0xD000000000000024LL,  (void *)0x80000001001CB3B0LL,  0xD000000000000011LL,  (void *)0x80000001001CB3E0LL);
}

CKRecord sub_1000A31E8(uint64_t a1)
{
  return sub_1000A321C( a1,  0xD000000000000022LL,  (void *)0x80000001001CB490LL,  0x654B72657473614DLL,  (void *)0xE900000000000079LL);
}

CKRecord sub_1000A321C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v10 = UUID.uuidString.getter(v9);
  int64_t v12 = v11;
  sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
  v13._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v13._object = v14;
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v15, v13).super.isa;
  v17._countAndFlagsBits = v10;
  v17._object = v12;
  v18.super.Class isa = CKRecordID.init(recordName:zoneID:)(v17, (CKRecordZoneID)isa).super.isa;
  uint64_t v19 = static os_log_type_t.default.getter(v18.super.isa);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v20 = qword_10023DFC8;
  uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_10009914C();
  *(void *)(v22 + 32) = a4;
  *(void *)(v22 + 40) = a5;
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v20,  "Failed to unarchive record -- creating new %@ record",  52LL,  2LL,  v22);
  swift_bridgeObjectRelease(v22);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  v23._countAndFlagsBits = a4;
  v23._object = a5;
  return CKRecord.init(recordType:recordID:)(v23, v18);
}

CKRecord sub_1000A33B8(uint64_t a1)
{
  return sub_1000A321C( a1,  0xD00000000000001ELL,  (void *)0x80000001001CABE0LL,  0x746553636967614DLL,  (void *)0xED000073676E6974LL);
}

CKRecord sub_1000A33F4()
{
  uint64_t v0 = UUID.uuidString.getter();
  unint64_t v2 = v1;
  sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v3._object = v4;
  v5._countAndFlagsBits = 0xD000000000000010LL;
  v5._object = (void *)0x80000001001CB350LL;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v3).super.isa;
  v7._countAndFlagsBits = v0;
  v7._object = v2;
  v8.super.Class isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)isa).super.isa;
  uint64_t v9 = static os_log_type_t.default.getter(v8.super.isa);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v10 = qword_10023DFC8;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10009914C();
  *(void *)(v12 + 32) = 0xD000000000000012LL;
  *(void *)(v12 + 40) = 0x80000001001CAB80LL;
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Failed to unarchive record -- creating new %@ record",  52LL,  2LL,  v12);
  swift_bridgeObjectRelease(v12);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  v13._countAndFlagsBits = 0xD000000000000012LL;
  v13._object = (void *)0x80000001001CAB80LL;
  return CKRecord.init(recordType:recordID:)(v13, v8);
}

CKRecord sub_1000A35AC()
{
  uint64_t v0 = UUID.uuidString.getter();
  unint64_t v2 = v1;
  sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v3._object = v4;
  v5._object = (void *)0x80000001001CABE0LL;
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v3).super.isa;
  v7._countAndFlagsBits = v0;
  v7._object = v2;
  v8.super.Class isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)isa).super.isa;
  uint64_t v9 = static os_log_type_t.default.getter();
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v10 = qword_10023DFC8;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10009914C();
  strcpy((char *)(v12 + 32), "DeviceRecord");
  *(_BYTE *)(v12 + 45) = 0;
  *(_WORD *)(v12 + 46) = -5120;
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Failed to unarchive record -- creating new %@ record",  52LL,  2LL,  v12);
  swift_bridgeObjectRelease(v12);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  v13._countAndFlagsBits = 0x6552656369766544LL;
  v13._object = (void *)0xEC00000064726F63LL;
  return CKRecord.init(recordType:recordID:)(v13, v8);
}

CKRecord sub_1000A3774(uint64_t a1)
{
  return sub_1000A37BC( a1,  (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier,  0xD000000000000013LL,  (void *)0x80000001001CB4E0LL);
}

CKRecord sub_1000A3798(uint64_t a1)
{
  return sub_1000A37BC( a1,  (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier,  0xD000000000000011LL,  (void *)0x80000001001A6CD0LL);
}

CKRecord sub_1000A37BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v7 = UUID.uuidString.getter(v6);
  uint64_t v9 = v8;
  sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
  v10._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v10._object = v11;
  v12._object = (void *)0x80000001001CB4C0LL;
  v12._countAndFlagsBits = 0xD000000000000012LL;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v12, v10).super.isa;
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  v15.super.Class isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)isa).super.isa;
  uint64_t v16 = static os_log_type_t.default.getter(v15.super.isa);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v17 = qword_10023DFC8;
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = sub_10009914C();
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = a4;
  os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "Failed to unarchive record -- creating new %@ record",  52LL,  2LL,  v19);
  swift_bridgeObjectRelease(v19);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  v20._countAndFlagsBits = a3;
  v20._object = a4;
  return CKRecord.init(recordType:recordID:)(v20, v15);
}

CKRecord sub_1000A3964(uint64_t a1)
{
  return sub_1000A37BC( a1,  (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier,  0x6563697665444141LL,  (void *)0xEE0064726F636552LL);
}

unint64_t sub_1000A3990(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1000A3C10(a1, v7);
}

unint64_t sub_1000A3A10(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_1000A3D84(a1, a2, v5);
}

unint64_t sub_1000A3A74(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_100098C98( &qword_1002352F8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001A601C);
  _CFObject.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_1000A3E64(a1, v6);
}

unint64_t sub_1000A3AFC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000A3FA4(a1, v4, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
}

unint64_t sub_1000A3B48(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000A3FA4(a1, v4, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
}

unint64_t sub_1000A3B94(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000A3FA4(a1, v4, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
}

unint64_t sub_1000A3BE0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000A40B4(a1, v4);
}

unint64_t sub_1000A3C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_1000A3D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        char v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_1000A3E64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_100098C98( &qword_1002352F8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001A601C);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1000A3FA4(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t i = a2 & ~v6;
  if (((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_1000A4A64(0LL, a3, a4);
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * i);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = ~v6;
      for (unint64_t i = (i + 1) & v10; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v10)
      {
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * i);
        char v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1000A40B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1000A4B48(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000A4B84((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysO8rawValueAESgSS_tcfC_0( Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002093B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000A41C0()
{
  unint64_t result = qword_100235198;
  if (!qword_100235198)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6E08, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235198);
  }

  return result;
}

uint64_t type metadata accessor for AAProxCardsRecord(uint64_t a1)
{
  uint64_t result = qword_100235248;
  if (!qword_100235248) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AAProxCardsRecord);
  }
  return result;
}

uint64_t sub_1000A4240(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10009E910(&qword_1002351B0);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000A42A8()
{
  unint64_t result = qword_1002351F0;
  if (!qword_1002351F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AAProxCardsRecord.ProxCardKeys,  &type metadata for AAProxCardsRecord.ProxCardKeys);
    atomic_store(result, (unint64_t *)&qword_1002351F0);
  }

  return result;
}

uint64_t sub_1000A42EC()
{
  return sub_1000A4318(&qword_1002351F8, &qword_100235200, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_1000A4318(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10009E910(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000A4358(uint64_t a1)
{
  uint64_t result = sub_100098C98(&qword_100235208, type metadata accessor for AAProxCardsRecord, (uint64_t)&unk_1001A6C6C);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1000A4394(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100098C98( (unint64_t *)&unk_100235210,  type metadata accessor for AAProxCardsRecord,  (uint64_t)&protocol conformance descriptor for AAProxCardsRecord);
  uint64_t result = sub_100098C98( (unint64_t *)&unk_100236FC0,  type metadata accessor for AAProxCardsRecord,  (uint64_t)&protocol conformance descriptor for AAProxCardsRecord);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1000A43F0()
{
  return type metadata accessor for AAProxCardsRecord(0LL);
}

uint64_t sub_1000A43F8(uint64_t a1)
{
  v5[0] = &unk_1001A6D08;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    void v5[2] = &unk_1001A6D20;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      void v5[4] = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.ProxCardKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for AAProxCardsRecord.ProxCardKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000A4580 + 4 * byte_1001A6B5D[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000A45B4 + 4 * byte_1001A6B58[v4]))();
}

uint64_t sub_1000A45B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A45BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A45C4LL);
  }
  return result;
}

uint64_t sub_1000A45D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A45D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000A45DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A45E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.ProxCardKeys()
{
  return &type metadata for AAProxCardsRecord.ProxCardKeys;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for AAProxCardsRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000A46DC + 4 * byte_1001A6B67[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000A4710 + 4 * byte_1001A6B62[v4]))();
}

uint64_t sub_1000A4710(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A4720LL);
  }
  return result;
}

uint64_t sub_1000A472C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A4734LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000A4738(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4740(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.CodingKeys()
{
  return &type metadata for AAProxCardsRecord.CodingKeys;
}

unint64_t sub_1000A4760()
{
  unint64_t result = qword_100235258;
  if (!qword_100235258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6DE0, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235258);
  }

  return result;
}

unint64_t sub_1000A47A8()
{
  unint64_t result = qword_100235260;
  if (!qword_100235260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6D50, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235260);
  }

  return result;
}

unint64_t sub_1000A47F0()
{
  unint64_t result = qword_100235268;
  if (!qword_100235268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6D78, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235268);
  }

  return result;
}

uint64_t sub_1000A4834(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v5 = 0xED00006174616461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v7 = 0xEA00000000007265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v9 = 0x80000001001CB310LL;
    if (a2 == 0x80000001001CB310LL) {
      goto LABEL_24;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CB310LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_1000A4A64(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

_OWORD *sub_1000A4A9C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1000A4AAC()
{
  unint64_t result = qword_1002352C8;
  if (!qword_1002352C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6EE0, &type metadata for AAProxCardsRecord.AAProxCardsRecordError);
    atomic_store(result, (unint64_t *)&qword_1002352C8);
  }

  return result;
}

unint64_t sub_1000A4AF0()
{
  unint64_t result = qword_1002352D0;
  if (!qword_1002352D0)
  {
    uint64_t v1 = sub_1000A4A64(255LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002352D0);
  }

  return result;
}

uint64_t sub_1000A4B48(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000A4B84(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.AAProxCardsRecordError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for AAProxCardsRecord.AAProxCardsRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000A4C94 + 4 * byte_1001A6B71[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000A4CC8 + 4 * byte_1001A6B6C[v4]))();
}

uint64_t sub_1000A4CC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A4CD8LL);
  }
  return result;
}

uint64_t sub_1000A4CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A4CECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000A4CF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4CF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.AAProxCardsRecordError()
{
  return &type metadata for AAProxCardsRecord.AAProxCardsRecordError;
}

unint64_t sub_1000A4D18()
{
  unint64_t result = qword_100235308;
  if (!qword_100235308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A6EB8, &type metadata for AAProxCardsRecord.AAProxCardsRecordError);
    atomic_store(result, (unint64_t *)&qword_100235308);
  }

  return result;
}

uint64_t sub_1000A4D5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100098CD8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A4DA0()
{
  return sub_1000A4DD8( type metadata accessor for LegacyMagicPairingSettingsRecords,  (uint64_t (*)(char *))sub_1000A31B0,  (void (*)(uint64_t *))sub_1000F1770);
}

uint64_t sub_1000A4DBC()
{
  return sub_1000A4DD8( type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t (*)(char *))sub_1000A31E8,  (void (*)(uint64_t *))sub_1000AB9FC);
}

uint64_t sub_1000A4DD8( uint64_t (*a1)(void), uint64_t (*a2)(char *), void (*a3)(uint64_t *))
{
  uint64_t v7 = a1(0LL);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v17 - v8;
  char v10 = objc_autoreleasePoolPush();
  id v11 = (uint64_t *)(v3 + *(int *)(v7 + 24));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_1000991CC(*v11, v13);
  sub_100118B60(v12, v13);
  uint64_t v15 = v14;
  sub_100099394(v12, v13);
  sub_1000A7C90(v3, (uint64_t)v9, a1);
  if (!v15) {
    uint64_t v15 = a2(v9);
  }
  sub_1000A7CD4((uint64_t)v9, a1);
  uint64_t v18 = v15;
  a3(&v18);
  objc_autoreleasePoolPop(v10);
  return v15;
}

Class sub_1000A4ED8()
{
  uint64_t v1 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = objc_autoreleasePoolPush();
  uint64_t v5 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000991CC(*v5, v7);
  sub_100118B60(v6, v7);
  Class isa = v8;
  sub_100099394(v6, v7);
  sub_1000A7C90(v0, (uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
  if (!isa) {
    Class isa = sub_1000A33B8((uint64_t)v3).super.isa;
  }
  sub_1000A7CD4((uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
  Class v12 = isa;
  sub_1000CEB74((id *)&v12);
  objc_autoreleasePoolPop(v4);
  return isa;
}

uint64_t sub_1000A4FD4()
{
  return sub_1000A500C( type metadata accessor for SoundProfileRecord,  (uint64_t (*)(char *))sub_1000A33F4,  (void (*)(uint64_t *))sub_1000A7268);
}

uint64_t sub_1000A4FF0()
{
  return sub_1000A500C( type metadata accessor for DeviceRecord,  (uint64_t (*)(char *))sub_1000A35AC,  (void (*)(uint64_t *))sub_100096A48);
}

uint64_t sub_1000A500C( uint64_t (*a1)(void), uint64_t (*a2)(char *), void (*a3)(uint64_t *))
{
  uint64_t v7 = a1(0LL);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v16 - v8;
  char v10 = objc_autoreleasePoolPush();
  uint64_t v11 = *v3;
  unint64_t v12 = v3[1];
  sub_1000991CC(*v3, v12);
  sub_100118B60(v11, v12);
  uint64_t v14 = v13;
  sub_100099394(v11, v12);
  sub_1000A7C90((uint64_t)v3, (uint64_t)v9, a1);
  if (!v14) {
    uint64_t v14 = a2(v9);
  }
  sub_1000A7CD4((uint64_t)v9, a1);
  uint64_t v17 = v14;
  a3(&v17);
  objc_autoreleasePoolPop(v10);
  return v14;
}

BOOL sub_1000A5100(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000A5118(uint64_t a1)
{
  return sub_1000A5160(a1, qword_10023DD18, 0xD000000000000012LL, 0x80000001001A6F40LL);
}

uint64_t sub_1000A513C(uint64_t a1)
{
  return sub_1000A5160(a1, qword_10023DD30, 0xD000000000000011LL, 0x80000001001CB5D0LL);
}

uint64_t sub_1000A5160(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v14, a2);
  sub_100098D58(v10, (uint64_t)a2);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    URL.appendingPathComponent(_:isDirectory:)(a3, a4, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  return result;
}

uint64_t sub_1000A52AC()
{
  uint64_t v1 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v103 = (uint64_t)&v101 - v5;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v108 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v101 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E10);
  uint64_t v9 = __chkstk_darwin(v8);
  objc_super v104 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v101 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v101 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v101 - v17;
  uint64_t v19 = (void *)sub_1000A500C( type metadata accessor for SoundProfileRecord,  (uint64_t (*)(char *))sub_1000A33F4,  (void (*)(uint64_t *))sub_1000A7268);
  uint64_t v112 = 0LL;
  unint64_t v113 = 0xE000000000000000LL;
  int v20 = IsAppleInternalBuild(v19);
  uint64_t v107 = v4;
  uint64_t v109 = v1;
  uint64_t v102 = v13;
  v111._uint64_t countAndFlagsBits = 0LL;
  v111._object = (void *)0xE000000000000000LL;
  if (v20)
  {
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(v111._object);
    v111._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v111._object = (void *)0x80000001001CB530LL;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._uint64_t countAndFlagsBits = 2108704LL;
    v25._object = (void *)0xE300000000000000LL;
    String.append(_:)(v25);
    uint64_t v26 = type metadata accessor for URL(0LL);
    uint64_t v27 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
  }

  else
  {
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(v111._object);
    v111._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v111._object = (void *)0x80000001001CB530LL;
    uint64_t v30 = type metadata accessor for UUID(0LL);
    uint64_t v31 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
    BOOL v33 = v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v33);
    v34._uint64_t countAndFlagsBits = 2108704LL;
    v34._object = (void *)0xE300000000000000LL;
    String.append(_:)(v34);
    uint64_t v28 = URL.lastPathComponent.getter();
  }

  uint64_t v35 = v29;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease(v35);
  v36._uint64_t countAndFlagsBits = 10LL;
  v36._object = (void *)0xE100000000000000LL;
  String.append(_:)(v36);
  uint64_t v37 = v111._object;
  String.append(_:)(v111);
  uint64_t v38 = v0;
  swift_bridgeObjectRelease(v37);
  uint64_t v40 = v112;
  unint64_t v39 = v113;
  v111._uint64_t countAndFlagsBits = 0LL;
  v111._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(62LL);
  v41._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v41._object = (void *)0x80000001001CAC30LL;
  String.append(_:)(v41);
  id v42 = [v19 creationDate];
  id v110 = v19;
  uint64_t v105 = v40;
  uint64_t v106 = (void *)v39;
  if (v42)
  {
    uint64_t v43 = v42;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

    uint64_t v44 = v108;
    BOOL v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    v45(v16, 0LL, 1LL, v6);
  }

  else
  {
    uint64_t v44 = v108;
    BOOL v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    v45(v16, 1LL, 1LL, v6);
  }

  sub_100099290((uint64_t)v16, (uint64_t)v18);
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v46(v18, 1LL, v6))
  {
    sub_100099358((uint64_t)v18, (uint64_t *)&unk_100234E10);
    uint64_t v47 = v103;
    sub_1000A7C90(v0, v103, type metadata accessor for SoundProfileRecord);
  }

  else
  {
    uint64_t v48 = v101;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v101, v18, v6);
    sub_100099358((uint64_t)v18, (uint64_t *)&unk_100234E10);
    uint64_t v49 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v51 = [v49 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v54 = v53;

    (*(void (**)(char *, uint64_t))(v44 + 8))(v48, v6);
    uint64_t v47 = v103;
    sub_1000A7C90(v38, v103, type metadata accessor for SoundProfileRecord);
    if (v54) {
      goto LABEL_11;
    }
  }

  uint64_t v55 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class v56 = Date._bridgeToObjectiveC()().super.isa;
  id v57 = [v55 localizedStringFromDate:v56 dateStyle:2 timeStyle:2];

  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  uint64_t v54 = v58;

LABEL_11:
  sub_1000A7CD4(v47, type metadata accessor for SoundProfileRecord);
  v59._uint64_t countAndFlagsBits = v52;
  v59._object = v54;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v54);
  v60._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v60._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v60);
  id v61 = [v110 modificationDate];
  if (v61)
  {
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t)v104;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

    uint64_t v64 = 0LL;
  }

  else
  {
    uint64_t v64 = 1LL;
    uint64_t v63 = (uint64_t)v104;
  }

  uint64_t v65 = (uint64_t)v102;
  v45((char *)v63, v64, 1LL, v6);
  sub_100099290(v63, v65);
  if (v46((char *)v65, 1LL, v6))
  {
    sub_100099358(v65, (uint64_t *)&unk_100234E10);
    uint64_t v66 = (uint64_t)v107;
    sub_1000A7C90(v38, (uint64_t)v107, type metadata accessor for SoundProfileRecord);
    id v67 = v110;
    uint64_t v68 = v105;
  }

  else
  {
    uint64_t v69 = v108;
    __int128 v70 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v101, v65, v6);
    sub_100099358(v65, (uint64_t *)&unk_100234E10);
    uint64_t v71 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v72 = Date._bridgeToObjectiveC()().super.isa;
    id v73 = [v71 localizedStringFromDate:v72 dateStyle:2 timeStyle:2];

    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    Swift::String v76 = v75;

    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v6);
    uint64_t v66 = (uint64_t)v107;
    sub_1000A7C90(v38, (uint64_t)v107, type metadata accessor for SoundProfileRecord);
    id v67 = v110;
    uint64_t v68 = v105;
    if (v76) {
      goto LABEL_18;
    }
  }

  id v77 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class v78 = Date._bridgeToObjectiveC()().super.isa;
  id v79 = [v77 localizedStringFromDate:v78 dateStyle:2 timeStyle:2];

  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
  Swift::String v76 = v80;

LABEL_18:
  sub_1000A7CD4(v66, type metadata accessor for SoundProfileRecord);
  v81._uint64_t countAndFlagsBits = v74;
  v81._object = v76;
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v76);
  v82._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v82._object = (void *)0xEF203A7962206465LL;
  String.append(_:)(v82);
  id v83 = [v67 modifiedByDevice];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    id v87 = v86;
  }

  else
  {
    id v87 = (void *)0xE200000000000000LL;
    uint64_t v85 = 15932LL;
  }

  uint64_t v88 = v106;
  v89._uint64_t countAndFlagsBits = v85;
  v89._object = v87;
  String.append(_:)(v89);
  swift_bridgeObjectRelease(v87);
  v90._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v90._object = (void *)0xE800000000000000LL;
  String.append(_:)(v90);
  id v91 = [v67 recordChangeTag];
  if (v91)
  {
    uint64_t v92 = v91;
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    uint64_t v95 = v94;
  }

  else
  {
    uint64_t v95 = (void *)0xE200000000000000LL;
    uint64_t v93 = 15932LL;
  }

  v96._uint64_t countAndFlagsBits = v93;
  v96._object = v95;
  String.append(_:)(v96);
  swift_bridgeObjectRelease(v95);
  uint64_t countAndFlagsBits = v111._countAndFlagsBits;
  unint64_t v98 = v111._object;
  v111._uint64_t countAndFlagsBits = v68;
  v111._object = v88;
  swift_bridgeObjectRetain(v88);
  v99._uint64_t countAndFlagsBits = countAndFlagsBits;
  v99._object = v98;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v98);

  return v111._countAndFlagsBits;
}

uint64_t type metadata accessor for SoundProfileRecord(uint64_t a1)
{
  uint64_t result = qword_100235390;
  if (!qword_100235390) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundProfileRecord);
  }
  return result;
}

uint64_t sub_1000A5BA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v95 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  __int16 v97 = (char *)&v89 - v6;
  __chkstk_darwin(v7);
  uint64_t v100 = (uint64_t)&v89 - v8;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v102 = *(void **)(v9 - 8);
  uint64_t v103 = v9;
  __chkstk_darwin(v9);
  Swift::String v96 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  Swift::String v99 = (char *)&v89 - v12;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v104 = *(void *)(v13 - 8);
  uint64_t v105 = v13;
  __chkstk_darwin(v13);
  uint64_t v101 = (unint64_t *)((char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v106 = v15;
  uint64_t v107 = v16;
  __chkstk_darwin(v15);
  uint64_t v109 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = sub_100098CD8(&qword_100235410);
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v19 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SoundProfileRecord(0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  Swift::String v25 = (char *)&v89 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (uint64_t *)((char *)&v89 - v27);
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_10009A430(a1, v29);
  unint64_t v31 = sub_1000A86B4();
  Swift::String v32 = v111;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SoundProfileRecord.CodingKeys,  &type metadata for SoundProfileRecord.CodingKeys,  v31,  v29,  v30);
  if (v32) {
    return sub_10009A498(a1);
  }
  BOOL v33 = v109;
  uint64_t v92 = v25;
  uint64_t v93 = v20;
  id v91 = v22;
  uint64_t v94 = v28;
  Swift::String v111 = a1;
  char v113 = 0;
  unint64_t v34 = sub_10009A4B8();
  uint64_t v35 = v110;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v112, &type metadata for Data, &v113, v110, &type metadata for Data, v34);
  Swift::String v36 = v19;
  id v39 = v112[0];
  id v38 = v112[1];
  uint64_t v40 = v36;
  Swift::String v41 = v94;
  *uint64_t v94 = (uint64_t)v112[0];
  v41[1] = (uint64_t)v38;
  LOBYTE(v112[0]) = 1;
  uint64_t v42 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v43 = v106;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v106, v112, v35, v106, v42);
  unint64_t v89 = (unint64_t)v38;
  uint64_t v90 = (uint64_t)v39;
  uint64_t v44 = v93;
  (*(void (**)(char *, char *, uint64_t))(v107 + 32))((char *)v41 + *(int *)(v93 + 20), v33, v43);
  LOBYTE(v112[0]) = 2;
  uint64_t v45 = sub_100098C98( &qword_100235418,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v46 = v101;
  uint64_t v47 = v105;
  uint64_t v109 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v101, v105, v112, v35, v105, v45);
  uint64_t v48 = (*(uint64_t (**)(char *, void *, uint64_t))(v104 + 32))((char *)v41 + *(int *)(v44 + 24), v46, v47);
  uint64_t v49 = (uint64_t *)((char *)v41 + *(int *)(v44 + 28));
  static Date.now.getter(v48);
  LOBYTE(v112[0]) = 3;
  uint64_t v50 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v51 = v100;
  uint64_t v52 = v103;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v103, v112, v35, v103, v50);
  uint64_t v109 = v40;
  uint64_t v53 = v51;
  uint64_t v54 = v102;
  uint64_t v55 = (unsigned int (*)(char *, uint64_t, uint64_t))v102[6];
  if (v55((char *)v51, 1LL, v52) == 1)
  {
    Class v56 = objc_autoreleasePoolPush();
    uint64_t v57 = v90;
    unint64_t v58 = v89;
    sub_1000991CC(v90, v89);
    sub_100118B60(v57, v58);
    Class isa = v59;
    sub_100099394(v57, v58);
    uint64_t v61 = (uint64_t)v92;
    sub_1000A7C90((uint64_t)v94, (uint64_t)v92, type metadata accessor for SoundProfileRecord);
    uint64_t v101 = v49;
    if (!isa) {
      Class isa = sub_1000A33F4().super.isa;
    }
    sub_1000A7CD4(v61, type metadata accessor for SoundProfileRecord);
    uint64_t v62 = v96;
    v112[0] = isa;
    sub_1000A7268(v112);
    objc_autoreleasePoolPop(v56);
    id v63 = -[objc_class modificationDate](isa, "modificationDate");

    if (v63)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

      uint64_t v64 = v52;
      uint64_t v54 = v102;
      uint64_t v65 = (void (*)(char *, char *, uint64_t))v102[4];
      uint64_t v66 = v97;
      v65(v97, v62, v52);
      id v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v54[7];
      v67(v66, 0LL, 1LL, v64);
      if (v55(v66, 1LL, v64) != 1)
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
        uint64_t v68 = v99;
        uint64_t v69 = v103;
        v65(v99, v97, v103);
        __int128 v70 = v111;
        uint64_t v71 = v98;
        uint64_t v49 = v101;
LABEL_20:
        sub_100099358(v100, (uint64_t *)&unk_100234E10);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v72 = v52;
      id v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v102[7];
      v67(v97, 1LL, 1LL, v72);
    }

    id v73 = objc_autoreleasePoolPush();
    uint64_t v74 = v94;
    uint64_t v76 = *v94;
    unint64_t v75 = v94[1];
    sub_1000991CC(*v94, v75);
    sub_100118B60(v76, v75);
    Class v78 = v77;
    sub_100099394(v76, v75);
    uint64_t v79 = (uint64_t)v91;
    sub_1000A7C90((uint64_t)v74, (uint64_t)v91, type metadata accessor for SoundProfileRecord);
    if (!v78) {
      Class v78 = sub_1000A33F4().super.isa;
    }
    sub_1000A7CD4(v79, type metadata accessor for SoundProfileRecord);
    v112[0] = v78;
    sub_1000A7268(v112);
    objc_autoreleasePoolPop(v73);
    id v80 = -[objc_class creationDate](v78, "creationDate");

    if (v80)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v80);

      uint64_t v54 = v102;
      uint64_t v81 = v103;
      Swift::String v82 = v62;
      id v83 = (void (*)(char *, char *, uint64_t))v102[4];
      uint64_t v84 = (uint64_t)v95;
      v83(v95, v82, v103);
      v67((char *)v84, 0LL, 1LL, v81);
      uint64_t v85 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v55)(v84, 1LL, v81);
      __int128 v70 = v111;
      uint64_t v86 = (uint64_t)v97;
      uint64_t v71 = v98;
      uint64_t v87 = v108;
      if ((_DWORD)v85 != 1)
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
        uint64_t v68 = v99;
        v83(v99, (char *)v84, v103);
LABEL_19:
        uint64_t v49 = v101;
        sub_100099358(v86, (uint64_t *)&unk_100234E10);
        uint64_t v69 = v103;
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v84 = (uint64_t)v95;
      uint64_t v85 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v67)(v95, 1LL, 1LL, v103);
      __int128 v70 = v111;
      uint64_t v54 = v102;
      uint64_t v86 = (uint64_t)v97;
      uint64_t v71 = v98;
      uint64_t v87 = v108;
    }

    uint64_t v68 = v99;
    static Date.now.getter(v85);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v109, v110);
    sub_100099358(v84, (uint64_t *)&unk_100234E10);
    goto LABEL_19;
  }

  (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
  uint64_t v69 = v52;
  uint64_t v68 = v99;
  ((void (*)(char *, uint64_t, uint64_t))v54[4])(v99, v53, v69);
  __int128 v70 = v111;
  uint64_t v71 = v98;
LABEL_21:
  ((void (*)(void *, char *, uint64_t))v54[5])(v49, v68, v69);
  uint64_t v88 = v94;
  sub_1000A7C90((uint64_t)v94, v71, type metadata accessor for SoundProfileRecord);
  sub_10009A498(v70);
  return sub_1000A7CD4((uint64_t)v88, type metadata accessor for SoundProfileRecord);
}

void sub_1000A64CC(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v90 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v85 - v7;
  uint64_t v91 = type metadata accessor for Date(0LL);
  uint64_t v95 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v92 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v89 = (char *)&v85 - v10;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v97 = *(void *)(v14 - 8);
  uint64_t v98 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  Swift::String v96 = (char *)&v85 - v18;
  uint64_t v19 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  Swift::String v99 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = CKRecord.recordType.getter(v25);
  uint64_t v28 = v27;
  if (v26 == 0xD000000000000012LL && v27 == 0x80000001001A6F40LL)
  {
    swift_bridgeObjectRelease(0x80000001001A6F40LL);
  }

  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0xD000000000000012LL, 0x80000001001A6F40LL, 0LL);
    swift_bridgeObjectRelease(v28);
    if ((v29 & 1) == 0)
    {
      unint64_t v70 = sub_1000A7C4C();
      uint64_t v41 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v70, 0LL, 0LL);
      *uint64_t v71 = 1;
LABEL_17:
      swift_willThrow(v41);

      return;
    }
  }

  uint64_t v88 = v2;
  id v30 = [a1 recordID];
  id v31 = [v30 recordName];

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  UUID.init(uuidString:)(v32, v34);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
  {
    uint64_t v35 = sub_100099358((uint64_t)v21, &qword_100234E20);
    uint64_t v36 = static os_log_type_t.error.getter(v35);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v37 = qword_10023DFC8;
    uint64_t v38 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
    *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v39 + 56) = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v39 + 64) = sub_1000A4AF0();
    *(void *)(v39 + 32) = a1;
    a1 = a1;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Invalid Sound Profile Record - %@", 33LL, 2LL, v39);
    swift_bridgeObjectRelease(v39);
    unint64_t v40 = sub_1000A7C4C();
    uint64_t v41 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v40, 0LL, 0LL);
    *uint64_t v42 = 0;
    goto LABEL_17;
  }

  uint64_t v43 = v99;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v99, v21, v22);
  id v44 = [a1 valueStore];
  uint64_t v45 = sub_1000A4A64(0LL, &qword_100235320, &OBJC_CLASS___CKRecordValueStore_ptr);
  CKRecordKeyValueSetting.subscript.getter(v100, 0xD000000000000011LL, 0x80000001001CB580LL, v45);

  if (!v100[3])
  {
    uint64_t v72 = (uint64_t *)&unk_100236F30;
    id v73 = (char *)v100;
LABEL_21:
    sub_100099358((uint64_t)v73, v72);
    goto LABEL_22;
  }

  uint64_t v46 = sub_100098CD8(&qword_100235330);
  uint64_t v47 = sub_1000A4A64(0LL, (unint64_t *)&unk_100236F40, &OBJC_CLASS___CKAsset_ptr);
  if ((swift_dynamicCast(&v101, v100, v46, v47, 6LL) & 1) == 0)
  {
LABEL_22:
    unint64_t v74 = sub_1000A7C4C();
    uint64_t v75 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v74, 0LL, 0LL);
    *uint64_t v76 = 1;
    swift_willThrow(v75);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v43, v22);
    return;
  }

  id v87 = v101;
  id v48 = [v101 fileURL];
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v13, 1LL, 1LL, v98);
    goto LABEL_20;
  }

  uint64_t v49 = v48;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v48);

  uint64_t v50 = v97;
  uint64_t v51 = v98;
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
  v52(v13, v16, v98);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v13, 0LL, 1LL, v51);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v13, 1LL, v51) == 1)
  {
LABEL_20:

    uint64_t v72 = (uint64_t *)&unk_100235270;
    id v73 = v13;
    goto LABEL_21;
  }

  v52(v96, v13, v51);
  uint64_t v86 = (int *)type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v53 = v94;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v94 + v86[5], v43, v22);
  id v54 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v54];
  [v54 finishEncoding];
  id v55 = [v54 encodedData];
  uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  *uint64_t v53 = v56;
  v53[1] = v58;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))((char *)v53 + v86[6], v96, v98);
  id v59 = [a1 modificationDate];
  if (!v59)
  {
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
    uint64_t v64 = (uint64_t)v93;
    uint64_t v65 = v91;
    v66(v93, 1LL, 1LL, v91);
    uint64_t v68 = (uint64_t)v90;
LABEL_24:
    id v77 = [a1 creationDate];
    uint64_t v78 = v97;
    if (v77)
    {
      uint64_t v79 = v77;
      uint64_t v80 = v97;
      uint64_t v81 = v92;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

      uint64_t v82 = v95;
      id v83 = v81;
      uint64_t v78 = v80;
      uint64_t v64 = (uint64_t)v93;
      uint64_t v92 = *(char **)(v95 + 32);
      ((void (*)(uint64_t, char *, uint64_t))v92)(v68, v83, v65);
      v66((char *)v68, 0LL, 1LL, v65);
      uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v68, 1LL, v65);
      if ((_DWORD)v84 != 1)
      {

        (*(void (**)(char *, uint64_t))(v78 + 8))(v96, v98);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v99, v22);
        uint64_t v69 = v89;
        ((void (*)(char *, uint64_t, uint64_t))v92)(v89, v68, v65);
LABEL_29:
        sub_100099358(v64, (uint64_t *)&unk_100234E10);
        id v63 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v66)(v68, 1LL, 1LL, v65);
    }

    uint64_t v69 = v89;
    static Date.now.getter(v84);

    (*(void (**)(char *, uint64_t))(v78 + 8))(v96, v98);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v99, v22);
    sub_100099358(v68, (uint64_t *)&unk_100234E10);
    goto LABEL_29;
  }

  Swift::String v60 = v59;
  uint64_t v61 = v92;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v59);

  uint64_t v62 = v95;
  id v63 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  uint64_t v64 = (uint64_t)v93;
  uint64_t v65 = v91;
  v63(v93, v61, v91);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
  v66((char *)v64, 0LL, 1LL, v65);
  int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v64, 1LL, v65);
  uint64_t v68 = (uint64_t)v90;
  if (v67 == 1) {
    goto LABEL_24;
  }

  (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v99, v22);
  uint64_t v69 = v89;
  v63(v89, (char *)v64, v65);
LABEL_30:
  v63((char *)v94 + v86[7], v69, v65);
}

uint64_t sub_1000A6DF0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v55 = a3;
  uint64_t v57 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v54 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = CKRecord.recordType.getter(v12);
  uint64_t v15 = v14;
  if (v13 == 0xD000000000000012LL && v14 == 0x80000001001A6F40LL)
  {
    swift_bridgeObjectRelease(0x80000001001A6F40LL);
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0xD000000000000012LL, 0x80000001001A6F40LL, 0LL);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) == 0)
    {
      unint64_t v48 = sub_1000A7C4C();
      uint64_t v29 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v48, 0LL, 0LL);
      char v31 = 1;
      goto LABEL_11;
    }
  }

  id v17 = [a1 recordID];
  id v18 = [v17 recordName];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  UUID.init(uuidString:)(v19, v21);
  swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
  {
    uint64_t v32 = v56;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v56, v8, v9);
    uint64_t v51 = type metadata accessor for SoundProfileRecord(0LL);
    uint64_t v52 = v4;
    uint64_t v33 = v55;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v55 + *(int *)(v51 + 20), v32, v9);
    id v34 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
    [a1 encodeSystemFieldsWithCoder:v34];
    [v34 finishEncoding];
    id v35 = [v34 encodedData];
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = a1;
    uint64_t v38 = v57;
    uint64_t v40 = v39;

    *uint64_t v33 = v36;
    v33[1] = v40;
    uint64_t v41 = v51;
    uint64_t v42 = (char *)v33 + *(int *)(v51 + 24);
    uint64_t v43 = type metadata accessor for URL(0LL);
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v38, v43);
    uint64_t v46 = v53;
    static Date.now.getter(v45);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v38, v43);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v56, v9);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 32))((char *)v33 + *(int *)(v41 + 28), v46, v52);
  }

  uint64_t v22 = sub_100099358((uint64_t)v8, &qword_100234E20);
  uint64_t v23 = static os_log_type_t.error.getter(v22);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v24 = qword_10023DFC8;
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v26 + 56) = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  *(void *)(v26 + 64) = sub_1000A4AF0();
  *(void *)(v26 + 32) = a1;
  id v27 = a1;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Invalid Sound Profile Record - %@", 33LL, 2LL, v26);
  swift_bridgeObjectRelease(v26);
  unint64_t v28 = sub_1000A7C4C();
  uint64_t v29 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v28, 0LL, 0LL);
  char v31 = 0;
LABEL_11:
  *id v30 = v31;
  swift_willThrow(v29);

  uint64_t v49 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8LL))(v57, v49);
}

void sub_1000A7268(id *a1)
{
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v3 = qword_10023DFC8;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v6 = *a1;
  id v7 = [v6 description];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10009914C();
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Updating sound profile record: %@", 33LL, 2LL, v5);
  swift_bridgeObjectRelease(v5);
  id v17 = [v6 valueStore];
  type metadata accessor for SoundProfileRecord(0LL);
  id v11 = objc_allocWithZone(&OBJC_CLASS___CKAsset);
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  id v15 = [v11 initWithFileURL:v13];

  v18[3] = sub_1000A4A64(0LL, (unint64_t *)&unk_100236F40, &OBJC_CLASS___CKAsset_ptr);
  void v18[4] = &protocol witness table for CKAsset;
  v18[0] = v15;
  uint64_t v16 = sub_1000A4A64(0LL, &qword_100235320, &OBJC_CLASS___CKRecordValueStore_ptr);
  CKRecordKeyValueSetting.subscript.setter(v18, 0xD000000000000011LL, 0x80000001001CB580LL, v16);
}

uint64_t sub_1000A7450(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8(&qword_1002353F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000A86B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SoundProfileRecord.CodingKeys,  &type metadata for SoundProfileRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v26 = *v3;
  char v25 = 0;
  unint64_t v12 = sub_10009A4FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for SoundProfileRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v26) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    id v17 = (char *)v3 + v13[6];
    LOBYTE(v26) = 2;
    uint64_t v18 = type metadata accessor for URL(0LL);
    uint64_t v19 = sub_100098C98( &qword_100235408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v26, v5, v18, v19);
    uint64_t v20 = (char *)v3 + v13[7];
    LOBYTE(v26) = 3;
    uint64_t v21 = type metadata accessor for Date(0LL);
    uint64_t v22 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v26, v5, v21, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A7680()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A76BC + 4 * byte_1001A6F40[*v0]))( 0x74654D64756F6C63LL,  0xED00006174616461LL);
}

uint64_t sub_1000A76BC()
{
  return 0x696669746E656469LL;
}

unint64_t sub_1000A76D8()
{
  return 0xD000000000000014LL;
}

unint64_t sub_1000A76F8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000A7714@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000A889C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A7738(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000A7744(uint64_t a1)
{
  unint64_t v2 = sub_1000A86B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A776C(uint64_t a1)
{
  unint64_t v2 = sub_1000A86B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000A7794()
{
  return 0xD000000000000012LL;
}

unint64_t sub_1000A77B0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000A77CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

Swift::Int sub_1000A7810()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v11, 0LL);
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000991CC(v2, v3);
  Data.hash(into:)(v11, v2, v3);
  sub_100099394(v2, v3);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v11, v4, v5);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = sub_100098C98( &qword_100235420,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v11, v6, v7);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v11, v8, v9);
  return Hasher._finalize()();
}

uint64_t sub_1000A7944(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_1000991CC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100099394(v4, v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = sub_100098C98( &qword_100235420,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v10, v11);
}

Swift::Int sub_1000A7A68(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher.init(_seed:)(v12, a1);
  uint64_t v3 = *v1;
  unint64_t v4 = v2[1];
  sub_1000991CC(v3, v4);
  Data.hash(into:)(v12, v3, v4);
  sub_100099394(v3, v4);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v12, v5, v6);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = sub_100098C98( &qword_100235420,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v12, v7, v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v12, v9, v10);
  return Hasher._finalize()();
}

uint64_t sub_1000A7B98(uint64_t *a1, uint64_t a2, int *a3)
{
  if ((v6 & 1) != 0
    && (static UUID.== infix(_:_:)((char *)a1 + a3[5]) & 1) != 0
    && (static URL.== infix(_:_:)((char *)a1 + a3[6], a2 + a3[6]) & 1) != 0)
  {
    return static Date.== infix(_:_:)((char *)a1 + a3[7], a2 + a3[7]);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1000A7C24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A5BA8(a1, a2);
}

uint64_t sub_1000A7C38(void *a1)
{
  return sub_1000A7450(a1);
}

unint64_t sub_1000A7C4C()
{
  unint64_t result = qword_100235328;
  if (!qword_100235328)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A714C, &type metadata for SoundProfileRecord.SoundProfileRecordError);
    atomic_store(result, (unint64_t *)&qword_100235328);
  }

  return result;
}

uint64_t sub_1000A7C90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A7CD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SoundProfileRecord.SoundProfileRecordError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for SoundProfileRecord.SoundProfileRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000A7DEC + 4 * byte_1001A6F49[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A7E20 + 4 * byte_1001A6F44[v4]))();
}

uint64_t sub_1000A7E20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A7E28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A7E30LL);
  }
  return result;
}

uint64_t sub_1000A7E3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A7E44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000A7E48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A7E50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000A7E5C(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SoundProfileRecord.SoundProfileRecordError()
{
  return &type metadata for SoundProfileRecord.SoundProfileRecordError;
}

uint64_t *sub_1000A7E78(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000991CC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
  }

  return a1;
}

uint64_t sub_1000A7F74(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
}

uint64_t *sub_1000A8010(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000991CC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
  return a1;
}

uint64_t *sub_1000A80E0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000991CC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100099394(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1000A81B8(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
  return a1;
}

uint64_t *sub_1000A827C(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100099394(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_1000A834C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A8358);
}

uint64_t sub_1000A8358(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }

    else
    {
      uint64_t v12 = type metadata accessor for URL(0LL);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[6];
      }

      else
      {
        uint64_t v10 = type metadata accessor for Date(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[7];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_1000A8428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A8434);
}

char *sub_1000A8434(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }

    else
    {
      uint64_t v12 = type metadata accessor for URL(0LL);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }

      else
      {
        uint64_t v10 = type metadata accessor for Date(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[7];
      }
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t sub_1000A84FC(uint64_t a1)
{
  v6[0] = &unk_1001A6FA8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for URL(319LL);
    if (v4 <= 0x3F)
    {
      void v6[2] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for Date(319LL);
      if (v5 <= 0x3F)
      {
        v6[3] = *(void *)(result - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1000A85A8(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100098C98( &qword_1002353D0,  type metadata accessor for SoundProfileRecord,  (uint64_t)&unk_1001A70FC);
  uint64_t result = sub_100098C98(&qword_1002353D8, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001A7124);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1000A8604()
{
  return sub_100098C98(&qword_1002353E0, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001A702C);
}

unint64_t sub_1000A8634()
{
  unint64_t result = qword_1002353E8;
  if (!qword_1002353E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A70D4, &type metadata for SoundProfileRecord.SoundProfileRecordError);
    atomic_store(result, (unint64_t *)&qword_1002353E8);
  }

  return result;
}

uint64_t sub_1000A8678(uint64_t a1)
{
  uint64_t result = sub_100098C98(&qword_1002353F0, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001A6FC0);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_1000A86B4()
{
  unint64_t result = qword_100235400;
  if (!qword_100235400)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A726C, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235400);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SoundProfileRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000A8744 + 4 * byte_1001A6F53[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A8778 + 4 * byte_1001A6F4E[v4]))();
}

uint64_t sub_1000A8778(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A8788LL);
  }
  return result;
}

uint64_t sub_1000A8794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A879CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000A87A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A87A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SoundProfileRecord.CodingKeys()
{
  return &type metadata for SoundProfileRecord.CodingKeys;
}

unint64_t sub_1000A87C8()
{
  unint64_t result = qword_100235428;
  if (!qword_100235428)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7244, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235428);
  }

  return result;
}

unint64_t sub_1000A8810()
{
  unint64_t result = qword_100235430;
  if (!qword_100235430)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A71B4, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235430);
  }

  return result;
}

unint64_t sub_1000A8858()
{
  unint64_t result = qword_100235438;
  if (!qword_100235438)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A71DC, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235438);
  }

  return result;
}

uint64_t sub_1000A889C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v5 = 0xED00006174616461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v7 = 0xEA00000000007265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v8 = 0x80000001001CB5F0LL;
    if (a2 == 0x80000001001CB5F0LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001001CB5F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000A8A78(char *a1, char *a2)
{
  return sub_100121C3C(*a1, *a2);
}

Swift::Int sub_1000A8A84()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    uint64_t v2 = 0x6574656C6564LL;
  }
  else {
    uint64_t v2 = 0x657461647075LL;
  }
  String.hash(into:)(v4, v2, 0xE600000000000000LL);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1000A8AF0(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x6574656C6564LL;
  }
  else {
    uint64_t v2 = 0x657461647075LL;
  }
  String.hash(into:)(a1, v2, 0xE600000000000000LL);
  return swift_bridgeObjectRelease(0xE600000000000000LL);
}

Swift::Int sub_1000A8B30(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    uint64_t v3 = 0x6574656C6564LL;
  }
  else {
    uint64_t v3 = 0x657461647075LL;
  }
  String.hash(into:)(v5, v3, 0xE600000000000000LL);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1000A8B98@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002094A0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1000A8BF4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x657461647075LL;
  if (*v1) {
    uint64_t v2 = 0x6574656C6564LL;
  }
  *a1 = v2;
  a1[1] = 0xE600000000000000LL;
}

uint64_t sub_1000A8C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AA31C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A8C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AA31C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000A8CCC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8(&qword_1002354E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000A9C7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BTDeferredRecord.CodingKeys,  &type metadata for BTDeferredRecord.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v25) = *(_BYTE *)v3;
  char v26 = 0;
  unint64_t v12 = sub_1000A9CC0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v5, &type metadata for BTDeferredRecord.BTDeferType, v12);
  if (!v2)
  {
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = *(void *)(v3 + 16);
    LOBYTE(v25) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v25, v5);
    uint64_t v15 = (int *)type metadata accessor for BTDeferredRecord(0LL);
    uint64_t v16 = v3 + v15[6];
    LOBYTE(v25) = 2;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v25, v5, v17, v18);
    uint64_t v19 = (uint64_t *)(v3 + v15[7]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    LOBYTE(v25) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v25, v5);
    double v22 = *(double *)(v3 + v15[8]);
    LOBYTE(v25) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v25, v5, v22);
    __int128 v25 = *(_OWORD *)(v3 + v15[9]);
    char v26 = 5;
    unint64_t v23 = sub_10009A4FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v26, v5, &type metadata for Data, v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A8F04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8(&qword_1002354F8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v39);
  unint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  uint64_t v38 = a1;
  sub_10009A430(a1, v13);
  unint64_t v15 = sub_1000A9C7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BTDeferredRecord.CodingKeys,  &type metadata for BTDeferredRecord.CodingKeys,  v15,  v13,  v14);
  if (v2) {
    return sub_10009A498(v38);
  }
  uint64_t v16 = v8;
  uint64_t v17 = v35;
  char v41 = 0;
  unint64_t v18 = sub_1000A9D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v40,  &type metadata for BTDeferredRecord.BTDeferType,  &v41,  v7,  &type metadata for BTDeferredRecord.BTDeferType,  v18);
  *unint64_t v12 = v40;
  LOBYTE(v40) = 1;
  *((void *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v40, v7);
  *((void *)v12 + 2) = v19;
  id v34 = v12;
  LOBYTE(v40) = 2;
  uint64_t v20 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v21 = v6;
  double v22 = v6;
  uint64_t v23 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v37, &v40, v7, v37, v20);
  uint64_t v24 = (int *)v39;
  uint64_t v33 = v16;
  uint64_t v25 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v34[*(int *)(v39 + 24)], v21, v23);
  LOBYTE(v40) = 3;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v7);
  id v27 = (uint64_t *)(v25 + v24[7]);
  *id v27 = v26;
  v27[1] = v28;
  LOBYTE(v40) = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v40, v7);
  *(void *)(v25 + v24[8]) = v29;
  char v41 = 5;
  unint64_t v30 = sub_10009A4B8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v41, v7, &type metadata for Data, v30);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
  *(_OWORD *)(v25 + v24[9]) = v40;
  sub_1000A9D48(v25, v17);
  sub_10009A498(v38);
  return sub_1000A9D8C(v25);
}

uint64_t sub_1000A9320()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A9354 + 4 * byte_1001A72C0[*v0]))( 0x7079547265666564LL,  0xE900000000000065LL);
}

uint64_t sub_1000A9354()
{
  return 0x795464726F636572LL;
}

uint64_t sub_1000A9374()
{
  return 0x696669746E656469LL;
}

unint64_t sub_1000A9390()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000A93AC()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1000A93C4()
{
  return 0x614464726F636572LL;
}

uint64_t sub_1000A93E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000AA080(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A9404(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000A9410(uint64_t a1)
{
  unint64_t v2 = sub_1000A9C7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A9438(uint64_t a1)
{
  unint64_t v2 = sub_1000A9C7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A9460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t *sub_1000A94A0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    unint64_t v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *unint64_t v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (_OWORD *)((char *)a2 + v18);
    unint64_t v21 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain(v17);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *v20;
    }

    else
    {
      uint64_t v23 = *(void *)v20;
      sub_1000991CC(v23, v21);
      *(void *)uint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }
  }

  return v4;
}

uint64_t sub_1000A95B0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[9]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    return sub_100099394(*v7, v8);
  }
  return result;
}

uint64_t sub_1000A9640(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  unint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  unint64_t v20 = *(void *)(v19 + 8);
  swift_bridgeObjectRetain(v16);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }

  else
  {
    uint64_t v21 = *(void *)v19;
    sub_1000991CC(v21, v20);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + _Block_object_dispose(va, 8) = v20;
  }

  return a1;
}

uint64_t sub_1000A9724(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v17 = a3[9];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = *(void *)(a2 + v17 + 8);
  if (*(void *)(a1 + v17 + 8) >> 60 != 15LL)
  {
    if (v20 >> 60 != 15)
    {
      uint64_t v22 = *v19;
      sub_1000991CC(v22, v20);
      uint64_t v23 = *v18;
      unint64_t v24 = v18[1];
      *uint64_t v18 = v22;
      v18[1] = v20;
      sub_100099394(v23, v24);
      return a1;
    }

    sub_1000A9868((uint64_t)v18);
    goto LABEL_6;
  }

  if (v20 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    return a1;
  }

  uint64_t v21 = *v19;
  sub_1000991CC(v21, v20);
  *uint64_t v18 = v21;
  v18[1] = v20;
  return a1;
}

uint64_t sub_1000A9868(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A989C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000A9930(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v19 = (uint64_t *)(a1 + v18);
  unint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 != 15)
  {
    unint64_t v22 = v20[1];
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v19;
      *uint64_t v19 = *v20;
      v19[1] = v22;
      sub_100099394(v23, v21);
      return a1;
    }

    sub_1000A9868((uint64_t)v19);
  }

  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  return a1;
}

uint64_t sub_1000A9A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A9A2C);
}

uint64_t sub_1000A9A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_1000A9AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9AB4);
}

uint64_t sub_1000A9AB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for BTDeferredRecord(uint64_t a1)
{
  uint64_t result = qword_100235498;
  if (!qword_100235498) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTDeferredRecord);
  }
  return result;
}

uint64_t sub_1000A9B64(uint64_t a1)
{
  v4[0] = &unk_1001A7308;
  v4[1] = &unk_1001A7320;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_1001A7320;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_1001A7338;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000A9BF8(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100098C98( &qword_100237020,  type metadata accessor for BTDeferredRecord,  (uint64_t)&unk_1001A736C);
  uint64_t result = sub_100098C98( (unint64_t *)&unk_100236EC0,  type metadata accessor for BTDeferredRecord,  (uint64_t)&unk_1001A7394);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1000A9C54@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A8F04(a1, a2);
}

uint64_t sub_1000A9C68(void *a1)
{
  return sub_1000A8CCC(a1);
}

unint64_t sub_1000A9C7C()
{
  unint64_t result = qword_1002354E8;
  if (!qword_1002354E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A757C, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002354E8);
  }

  return result;
}

unint64_t sub_1000A9CC0()
{
  unint64_t result = qword_1002354F0;
  if (!qword_1002354F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7554, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_1002354F0);
  }

  return result;
}

unint64_t sub_1000A9D04()
{
  unint64_t result = qword_100235500;
  if (!qword_100235500)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A752C, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100235500);
  }

  return result;
}

uint64_t sub_1000A9D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDeferredRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A9D8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BTDeferredRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BTDeferredRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000A9E14 + 4 * byte_1001A72CB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000A9E48 + 4 * byte_1001A72C6[v4]))();
}

uint64_t sub_1000A9E48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9E50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A9E58LL);
  }
  return result;
}

uint64_t sub_1000A9E64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A9E6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000A9E70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9E78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTDeferredRecord.CodingKeys()
{
  return &type metadata for BTDeferredRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BTDeferredRecord.BTDeferType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000A9EE0 + 4 * byte_1001A72D5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A9F14 + 4 * byte_1001A72D0[v4]))();
}

uint64_t sub_1000A9F14(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9F1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A9F24LL);
  }
  return result;
}

uint64_t sub_1000A9F30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A9F38LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000A9F3C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A9F44(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTDeferredRecord.BTDeferType()
{
  return &type metadata for BTDeferredRecord.BTDeferType;
}

unint64_t sub_1000A9F64()
{
  unint64_t result = qword_100235508;
  if (!qword_100235508)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A744C, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100235508);
  }

  return result;
}

unint64_t sub_1000A9FAC()
{
  unint64_t result = qword_100235510;
  if (!qword_100235510)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7504, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235510);
  }

  return result;
}

unint64_t sub_1000A9FF4()
{
  unint64_t result = qword_100235518;
  if (!qword_100235518)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7474, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235518);
  }

  return result;
}

unint64_t sub_1000AA03C()
{
  unint64_t result = qword_100235520;
  if (!qword_100235520)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A749C, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235520);
  }

  return result;
}

uint64_t sub_1000AA080(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7079547265666564LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v5 = 0xE900000000000065LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079547265666564LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x795464726F636572LL && a2 == 0xEA00000000006570LL)
  {
    unint64_t v7 = 0xEA00000000006570LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x795464726F636572LL, 0xEA00000000006570LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v8 = 0xEA00000000007265LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v9 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_25;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v10 = 0xE900000000000070LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x614464726F636572LL && a2 == 0xEA00000000006174LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006174LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614464726F636572LL, 0xEA00000000006174LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

unint64_t sub_1000AA31C()
{
  unint64_t result = qword_100235528;
  if (!qword_100235528)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A73D4, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100235528);
  }

  return result;
}

uint64_t sub_1000AA360()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v7, qword_10023DD48);
  sub_100098D58(v3, (uint64_t)qword_10023DD48);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x654B72657473614DLL, 0xE900000000000079LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return result;
}

uint64_t sub_1000AA4B0()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v97 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v95 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  Swift::String v96 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v93 - v6;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v93 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v93 - v12;
  id v98 = (id)sub_1000A4DBC();
  v99[0] = 0LL;
  v99[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease(v99[1]);
  v99[0] = 0xD000000000000011LL;
  v99[1] = 0x80000001001CB690LL;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._uint64_t countAndFlagsBits = 0x3A79656B202D2029LL;
  v18._object = (void *)0xE900000000000020LL;
  String.append(_:)(v18);
  LODWORD(object) = IsAppleInternalBuild(v19);
  unint64_t v20 = (void *)(v0 + *(int *)(type metadata accessor for LegacyAccountMagicKeysRecord(0LL) + 20));
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v23 = Data.subdata(in:)(1LL, 17LL, *v20, v22);
  uint64_t v25 = v23;
  unint64_t v26 = v24;
  if ((_DWORD)object) {
    Data.hexString.getter(v23, v24);
  }
  else {
    uint64_t v27 = Data.description.getter(v23, v24);
  }
  uint64_t v29 = v27;
  unint64_t v30 = v28;
  sub_100099394(v25, v26);
  v31._uint64_t countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._uint64_t countAndFlagsBits = 0x203A746E6968202CLL;
  v32._object = (void *)0xE800000000000000LL;
  String.append(_:)(v32);
  LODWORD(v30) = IsAppleInternalBuild(v33);
  uint64_t v34 = Data.subdata(in:)(17LL, 33LL, v21, v22);
  uint64_t v36 = v34;
  unint64_t v37 = v35;
  if ((_DWORD)v30) {
    Data.hexString.getter(v34, v35);
  }
  else {
    uint64_t v38 = Data.description.getter(v34, v35);
  }
  uint64_t v40 = v38;
  char v41 = v39;
  sub_100099394(v36, v37);
  v42._uint64_t countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v41);
  v43._uint64_t countAndFlagsBits = 10LL;
  v43._object = (void *)0xE100000000000000LL;
  String.append(_:)(v43);
  uint64_t v44 = v99[0];
  uint64_t v45 = v99[1];
  v99[0] = 0LL;
  v99[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(49LL);
  swift_bridgeObjectRelease(v99[1]);
  strcpy((char *)v99, "   createdOn: ");
  HIBYTE(v99[1]) = -18;
  id v46 = [v98 creationDate];
  if (v46)
  {
    uint64_t v47 = v46;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

    uint64_t v48 = v97;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    v49(v10, 0LL, 1LL, v1);
  }

  else
  {
    uint64_t v48 = v97;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    v49(v10, 1LL, 1LL, v1);
  }

  sub_100099290((uint64_t)v10, (uint64_t)v13);
  uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  if (v50(v13, 1LL, v1))
  {
    sub_1000AC480((uint64_t)v13);
    uint64_t v51 = (void *)0xE200000000000000LL;
    uint64_t v52 = 15932LL;
  }

  else
  {
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    uint64_t v94 = v45;
    uint64_t v54 = v44;
    id v55 = v95;
    v53(v95, v13, v1);
    sub_1000AC480((uint64_t)v13);
    uint64_t v56 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v58 = [v56 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v59 = v48;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    uint64_t v51 = v60;

    uint64_t v61 = v55;
    uint64_t v44 = v54;
    uint64_t v45 = v94;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v1);
  }

  v62._uint64_t countAndFlagsBits = v52;
  v62._object = v51;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v51);
  v63._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v63._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v63);
  id v64 = v98;
  id v65 = [v98 modificationDate];
  if (v65)
  {
    uint64_t v66 = v65;
    uint64_t v67 = (uint64_t)v96;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

    uint64_t v68 = 0LL;
  }

  else
  {
    uint64_t v68 = 1LL;
    uint64_t v67 = (uint64_t)v96;
  }

  uint64_t v69 = v97;
  v49((char *)v67, v68, 1LL, v1);
  sub_100099290(v67, (uint64_t)v7);
  if (v50(v7, 1LL, v1))
  {
    sub_1000AC480((uint64_t)v7);
    unint64_t v70 = (void *)0xE200000000000000LL;
    uint64_t v71 = 15932LL;
  }

  else
  {
    uint64_t v72 = v45;
    uint64_t v73 = v44;
    unint64_t v74 = v95;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v95, v7, v1);
    sub_1000AC480((uint64_t)v7);
    uint64_t v75 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v76 = Date._bridgeToObjectiveC()().super.isa;
    id v77 = [v75 localizedStringFromDate:v76 dateStyle:2 timeStyle:2];

    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    uint64_t v78 = v69;
    unint64_t v70 = v79;

    uint64_t v80 = v74;
    uint64_t v44 = v73;
    uint64_t v45 = v72;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v1);
  }

  v81._uint64_t countAndFlagsBits = v71;
  v81._object = v70;
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v70);
  v82._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v82._object = (void *)0xEF203A7962206465LL;
  String.append(_:)(v82);
  id v83 = [v64 modifiedByDevice];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    id v87 = v86;
  }

  else
  {
    id v87 = (void *)0xE200000000000000LL;
    uint64_t v85 = 15932LL;
  }

  v88._uint64_t countAndFlagsBits = v85;
  v88._object = v87;
  String.append(_:)(v88);
  swift_bridgeObjectRelease(v87);
  uint64_t v89 = v99[0];
  uint64_t v90 = (void *)v99[1];
  v99[0] = v44;
  v99[1] = v45;
  swift_bridgeObjectRetain(v45);
  v91._uint64_t countAndFlagsBits = v89;
  v91._object = v90;
  String.append(_:)(v91);

  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v90);
  return v99[0];
}

uint64_t sub_1000AAB04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  v39[4] = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v41 = (char *)v39 - v7;
  uint64_t v40 = type metadata accessor for Date(0LL);
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  __chkstk_darwin(v8);
  v39[5] = (char *)v39 - v9;
  uint64_t v10 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001001CB610LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    __break(1u);
    JUMPOUT(0x1000AB200LL);
  }

  uint64_t v15 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32);
  uint64_t v43 = a2;
  uint64_t v16 = v15(a2, v12, v13);
  uint64_t v17 = CKRecord.recordType.getter(v16);
  uint64_t v19 = v18;
  if (v17 == 0x654B72657473614DLL && v18 == 0xE900000000000079LL)
  {
    swift_bridgeObjectRelease(0xE900000000000079LL);
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x654B72657473614DLL, 0xE900000000000079LL, 0LL);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {
      unint64_t v26 = sub_1000AC3D8();
      uint64_t v27 = swift_allocError( &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError,  v26,  0LL,  0LL);
      *uint64_t v28 = 0;
      swift_willThrow(v27);
      goto LABEL_13;
    }
  }

  id v21 = [a1 encryptedValues];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 objectForKeyedSubscript:v22];

  if (v23)
  {
    id v45 = v23;
    uint64_t v25 = sub_100098CD8(&qword_100234E40);
    uint64_t v24 = swift_dynamicCast(v44, &v45, v25, &type metadata for Data, 6LL);
    if ((v24 & 1) != 0) {
      __asm { BR              X10 }
    }
  }

  uint64_t v29 = static os_log_type_t.error.getter(v24);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v30 = qword_10023DFC8;
  uint64_t v31 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
  *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v32 + 56) = sub_10009931C();
  *(void *)(v32 + 64) = sub_100098C98( (unint64_t *)&qword_1002352D0,  (uint64_t (*)(uint64_t))sub_10009931C,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v32 + 32) = a1;
  id v33 = a1;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Invalid LegacyAccountMagicKeysRecord - %@", 41LL, 2LL, v32);
  swift_bridgeObjectRelease(v32);
  unint64_t v34 = sub_1000AC3D8();
  uint64_t v35 = swift_allocError( &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError,  v34,  0LL,  0LL);
  *uint64_t v36 = 2;
  swift_willThrow(v35);
  swift_unknownObjectRelease(v21);
LABEL_13:
  uint64_t v37 = v43;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v37, v13);
}

uint64_t sub_1000AB210@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v89 = (uint64_t)&v80 - v7;
  __chkstk_darwin(v8);
  uint64_t v92 = (char *)&v80 - v9;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v95 = *(void **)(v10 - 8);
  uint64_t v96 = v10;
  __chkstk_darwin(v10);
  Swift::String v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v80 - v13;
  uint64_t v14 = sub_100098CD8(&qword_100235600);
  uint64_t v93 = *(void *)(v14 - 8);
  uint64_t v94 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v20 = (int *)type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  __chkstk_darwin(v20);
  uint64_t v86 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v87 = (uint64_t)&v80 - v23;
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v80 - v25;
  UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001001CB610LL);
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1LL, v27);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v19, v27);
    uint64_t v30 = a1;
    uint64_t v32 = a1[3];
    uint64_t v31 = a1[4];
    uint64_t v97 = v30;
    sub_10009A430(v30, v32);
    unint64_t v33 = sub_1000ACC5C();
    dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LegacyAccountMagicKeysRecord.CodingKeys,  &type metadata for LegacyAccountMagicKeysRecord.CodingKeys,  v33,  v32,  v31);
    if (v2)
    {
      sub_10009A498(v97);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    }

    char v99 = 1;
    unint64_t v34 = sub_10009A4B8();
    uint64_t v35 = v94;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v98, &type metadata for Data, &v99, v94, &type metadata for Data, v34);
    *(_OWORD *)&v26[v20[5]] = *(_OWORD *)v98;
    char v99 = 2;
    uint64_t v36 = KeyedDecodingContainer.decode<A>(_:forKey:)( v98,  &type metadata for Data,  &v99,  v35,  &type metadata for Data,  v34);
    uint64_t v37 = (uint64_t)v98[1];
    uint64_t v38 = (uint64_t *)&v26[v20[6]];
    unint64_t v83 = (unint64_t)v98[1];
    uint64_t v84 = (uint64_t)v98[0];
    *uint64_t v38 = (uint64_t)v98[0];
    v38[1] = v37;
    Swift::String v81 = v38;
    Swift::String v82 = &v26[v20[7]];
    static Date.now.getter(v36);
    LOBYTE(v98[0]) = 3;
    uint64_t v39 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v40 = v16;
    char v41 = v92;
    uint64_t v42 = v96;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v96, v98, v35, v96, v39);
    unint64_t v44 = v83;
    uint64_t v43 = v84;
    uint64_t v80 = v40;
    id v45 = v95;
    id v46 = (unsigned int (*)(char *, uint64_t, uint64_t))v95[6];
    if (v46(v41, 1LL, v42) != 1)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
      Swift::String v60 = v90;
      ((void (*)(char *, char *, uint64_t))v45[4])(v90, v41, v42);
      uint64_t v61 = v97;
      uint64_t v65 = v42;
      uint64_t v63 = v91;
      id v64 = v82;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v45[5])(v64, v60, v65);
      sub_1000ACCA0((uint64_t)v26, v63);
      sub_10009A498(v61);
      return sub_1000ACCE4((uint64_t)v26);
    }

    uint64_t v47 = objc_autoreleasePoolPush();
    unint64_t v48 = v44;
    sub_1000991CC(v43, v44);
    sub_100118B60(v43, v44);
    Class isa = v49;
    sub_100099394(v43, v48);
    uint64_t v51 = v87;
    sub_1000ACCA0((uint64_t)v26, v87);
    if (!isa) {
      Class isa = sub_1000A31E8(v51).super.isa;
    }
    sub_1000ACCE4(v51);
    uint64_t v52 = v89;
    v98[0] = isa;
    sub_1000AB9FC(v98);
    objc_autoreleasePoolPop(v47);
    id v53 = -[objc_class modificationDate](isa, "modificationDate");

    if (v53)
    {
      uint64_t v54 = v42;
      id v55 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

      uint64_t v56 = v54;
      uint64_t v57 = v95;
      id v58 = (void (*)(uint64_t, char *, uint64_t))v95[4];
      v58(v52, v55, v56);
      uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v57[7];
      v59(v52, 0LL, 1LL, v56);
      if (v46((char *)v52, 1LL, v56) != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        Swift::String v60 = v90;
        v58((uint64_t)v90, (char *)v52, v96);
        uint64_t v61 = v97;
        id v45 = v95;
        uint64_t v63 = v91;
        uint64_t v62 = (uint64_t)v92;
        id v64 = v82;
LABEL_21:
        sub_1000AC480(v62);
        uint64_t v65 = v96;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v95[7];
      v59(v52, 1LL, 1LL, v42);
    }

    uint64_t v66 = objc_autoreleasePoolPush();
    uint64_t v67 = *v81;
    unint64_t v68 = v81[1];
    sub_1000991CC(*v81, v68);
    sub_100118B60(v67, v68);
    Class v70 = v69;
    sub_100099394(v67, v68);
    uint64_t v71 = v86;
    sub_1000ACCA0((uint64_t)v26, v86);
    if (!v70) {
      Class v70 = sub_1000A31E8(v71).super.isa;
    }
    sub_1000ACCE4(v71);
    v98[0] = v70;
    sub_1000AB9FC(v98);
    objc_autoreleasePoolPop(v66);
    id v72 = -[objc_class creationDate](v70, "creationDate");

    uint64_t v61 = v97;
    if (v72)
    {
      uint64_t v73 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

      uint64_t v74 = v96;
      uint64_t v75 = (void (*)(char *, char *, uint64_t))v95[4];
      Class v76 = v85;
      v75(v85, v73, v96);
      v59((uint64_t)v76, 0LL, 1LL, v74);
      uint64_t v77 = v74;
      uint64_t v78 = (uint64_t)v76;
      uint64_t v79 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v76, 1LL, v77);
      uint64_t v63 = v91;
      if ((_DWORD)v79 != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        Swift::String v60 = v90;
        v75(v90, (char *)v78, v96);
LABEL_20:
        uint64_t v62 = (uint64_t)v92;
        id v64 = v82;
        sub_1000AC480(v89);
        id v45 = v95;
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v78 = (uint64_t)v85;
      uint64_t v79 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v59)(v85, 1LL, 1LL, v96);
      uint64_t v63 = v91;
    }

    Swift::String v60 = v90;
    static Date.now.getter(v79);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
    sub_1000AC480(v78);
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000AB9FC(id *a1)
{
  uint64_t v2 = v1;
  id v3 = [*a1 encryptedValues];
  Objectint Type = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter( &v22,  0xD000000000000016LL,  0x80000001001CB640LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v5 = v22;
  unint64_t v6 = v23;
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for LegacyAccountMagicKeysRecord(0LL) + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000991CC(*v7, v9);
  if (v6 >> 60 == 15)
  {
    sub_1000AC4C0(v5, v6);
    uint64_t v10 = sub_1000AC4C0(v8, v9);
  }

  else
  {
    sub_1000AC4D4(v5, v6);
    sub_1000D53B8(v5, v6);
    char v12 = v11;
    sub_100099394(v8, v9);
    sub_1000AC4C0(v5, v6);
    uint64_t v10 = sub_1000AC4C0(v5, v6);
    if ((v12 & 1) != 0) {
      return swift_unknownObjectRelease(v3);
    }
  }

  uint64_t v13 = static os_log_type_t.info.getter(v10);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v14 = qword_10023DFC8;
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  Data.hexString.getter(v8, v9);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10009914C();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Updating LegacyAccountMagicKeysRecord to %@", 43LL, 2LL, v16);
  swift_bridgeObjectRelease(v16);
  uint64_t v24 = &type metadata for Data;
  uint64_t v25 = &protocol witness table for Data;
  uint64_t v22 = v8;
  unint64_t v23 = v9;
  sub_1000991CC(v8, v9);
  CKRecordKeyValueSetting.subscript.setter(&v22, 0xD000000000000016LL, 0x80000001001CB640LL, ObjectType);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1000ABC34(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100235610);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000ACC5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LegacyAccountMagicKeysRecord.CodingKeys,  &type metadata for LegacyAccountMagicKeysRecord.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v22) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
    __int128 v22 = *(_OWORD *)(v3 + v14[5]);
    char v21 = 1;
    unint64_t v15 = sub_10009A4FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    __int128 v22 = *(_OWORD *)(v3 + v14[6]);
    char v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    uint64_t v16 = v3 + v14[7];
    LOBYTE(v22) = 3;
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v22, v5, v17, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000ABE44()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000ABE78 + 4 * byte_1001A75D0[*v0]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_1000ABE78()
{
  return 0x4B746E756F636361LL;
}

uint64_t sub_1000ABE9C()
{
  return 0x74654D64756F6C63LL;
}

unint64_t sub_1000ABEC0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000ABEDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000ACEC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000ABF00(uint64_t a1)
{
  unint64_t v2 = sub_1000ACC5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ABF28(uint64_t a1)
{
  unint64_t v2 = sub_1000ACC5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ABF50()
{
  return 0x654B72657473614DLL;
}

unint64_t sub_1000ABF6C()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000ABF88(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 24);
  uint64_t v3 = *(void *)v2;
  sub_1000991CC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

Swift::Int sub_1000ABFC4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v3, v4);
  uint64_t v5 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000991CC(*v5, v7);
  Data.hash(into:)(v14, v6, v7);
  sub_100099394(v6, v7);
  uint64_t v8 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1000991CC(*v8, v10);
  Data.hash(into:)(v14, v9, v10);
  sub_100099394(v9, v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v14, v11, v12);
  return Hasher._finalize()();
}

uint64_t sub_1000AC0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  unint64_t v7 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000991CC(*v7, v9);
  Data.hash(into:)(a1, v8, v9);
  sub_100099394(v8, v9);
  unint64_t v10 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_1000991CC(*v10, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_100099394(v11, v12);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
}

Swift::Int sub_1000AC1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v15, v4, v5);
  uint64_t v6 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000991CC(*v6, v8);
  Data.hash(into:)(v15, v7, v8);
  sub_100099394(v7, v8);
  unint64_t v9 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000991CC(*v9, v11);
  Data.hash(into:)(v15, v10, v11);
  sub_100099394(v10, v11);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v15, v12, v13);
  return Hasher._finalize()();
}

uint64_t sub_1000AC310(uint64_t a1, uint64_t a2, int *a3)
{
  if ((static UUID.== infix(_:_:)(a1) & 1) != 0
    && (sub_1000D53B8(*(void *)(a1 + a3[5]), *(void *)(a1 + a3[5] + 8)), (v6 & 1) != 0)
    && (sub_1000D53B8(*(void *)(a1 + a3[6]), *(void *)(a1 + a3[6] + 8)), (v7 & 1) != 0))
  {
    return static Date.== infix(_:_:)(a1 + a3[7], a2 + a3[7]);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1000AC3A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

unint64_t sub_1000AC3D8()
{
  unint64_t result = qword_100235538;
  if (!qword_100235538)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001A77C0,  &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError);
    atomic_store(result, (unint64_t *)&qword_100235538);
  }

  return result;
}

uint64_t sub_1000AC41C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AB210(a1, a2);
}

uint64_t sub_1000AC430(void *a1)
{
  return sub_1000ABC34(a1);
}

uint64_t type metadata accessor for LegacyAccountMagicKeysRecord(uint64_t a1)
{
  uint64_t result = qword_100235598;
  if (!qword_100235598) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyAccountMagicKeysRecord);
  }
  return result;
}

uint64_t sub_1000AC480(uint64_t a1)
{
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100234E10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000AC4C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100099394(a1, a2);
  }
  return a1;
}

uint64_t sub_1000AC4D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000991CC(a1, a2);
  }
  return a1;
}

ValueMetadata *type metadata accessor for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError()
{
  return &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError;
}

uint64_t *sub_1000AC500(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000991CC(*v10, v12);
    *unint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    unint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_1000991CC(*v15, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
  }

  return a1;
}

uint64_t sub_1000AC5F0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_100099394(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  sub_100099394(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_1000AC66C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000991CC(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000991CC(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000AC730(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000991CC(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100099394(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (uint64_t *)(a1 + v14);
  unint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_1000991CC(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_100099394(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24LL))(v22, v23, v24);
  return a1;
}

uint64_t sub_1000AC804(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000AC894(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100099394(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_100099394(v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000AC940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AC94C);
}

uint64_t sub_1000AC94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 12)
  {
    uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v10);
  }

uint64_t sub_1000ACA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ACA10);
}

uint64_t sub_1000ACA10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 12)
    {
      uint64_t v13 = (void *)(a1 + *(int *)(a4 + 20));
      *uint64_t v13 = 0LL;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000ACAC0(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1001A7650;
    void v5[2] = &unk_1001A7650;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000ACB50(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100098C98( &qword_1002355D8,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)&unk_1001A7828);
  uint64_t result = sub_100098C98( &qword_1002355E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)&unk_1001A7800);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1000ACBAC()
{
  return sub_100098C98( &qword_1002355E8,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)&unk_1001A76D4);
}

uint64_t sub_1000ACBD8(uint64_t a1)
{
  uint64_t result = sub_100098C98( &qword_1002355F0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)&unk_1001A7668);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_1000ACC18()
{
  unint64_t result = qword_1002355F8;
  if (!qword_1002355F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001A7798,  &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError);
    atomic_store(result, (unint64_t *)&qword_1002355F8);
  }

  return result;
}

unint64_t sub_1000ACC5C()
{
  unint64_t result = qword_100235608;
  if (!qword_100235608)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7914, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235608);
  }

  return result;
}

uint64_t sub_1000ACCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ACCE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _s15audioaccessoryd28LegacyAccountMagicKeysRecordV33LegacyAccountMagicKeysRecordErrorOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000ACD6C + 4 * byte_1001A75D9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000ACDA0 + 4 * byte_1001A75D4[v4]))();
}

uint64_t sub_1000ACDA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ACDA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ACDB0LL);
  }
  return result;
}

uint64_t sub_1000ACDBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ACDC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000ACDC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ACDD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyAccountMagicKeysRecord.CodingKeys()
{
  return &type metadata for LegacyAccountMagicKeysRecord.CodingKeys;
}

unint64_t sub_1000ACDF0()
{
  unint64_t result = qword_100235620;
  if (!qword_100235620)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A78EC, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235620);
  }

  return result;
}

unint64_t sub_1000ACE38()
{
  unint64_t result = qword_100235628;
  if (!qword_100235628)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A785C, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235628);
  }

  return result;
}

unint64_t sub_1000ACE80()
{
  unint64_t result = qword_100235630;
  if (!qword_100235630)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7884, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235630);
  }

  return result;
}

uint64_t sub_1000ACEC4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4B746E756F636361LL && a2 == 0xEF626F6C42737965LL)
  {
    unint64_t v7 = 0xEF626F6C42737965LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B746E756F636361LL, 0xEF626F6C42737965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v8 = 0xED00006174616461LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000AD3A8(uint64_t a1)
{
  uint64_t v2 = sub_100098CD8(&qword_100236570);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_1000AD3E8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = &v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name];
  *(void *)uint64_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity] = 0LL;
  uint64_t v12 = &v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState];
  uint64_t v13 = (objc_class *)type metadata accessor for BTUserTransaction();
  *(void *)uint64_t v12 = 0LL;
  *((void *)v12 + 1) = 0LL;
  v71.receiver = v3;
  v71.super_class = v13;
  uint64_t v14 = (char *)objc_msgSendSuper2(&v71, "init");
  uint64_t v17 = v14;
  int v68 = a3;
  uint64_t v67 = v8;
  if ((a3 & 1) != 0)
  {
    unint64_t v15 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v15) = a1 >> 11;
      LODWORD(v15) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if (a1 <= 0xFF)
        {
          unsigned int v22 = ((_BYTE)a1 + 1);
          goto LABEL_10;
        }

        __break(1u);
        goto LABEL_41;
      }

void static BTUserTransaction.named(_:with:)(char *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
  uint64_t v9 = sub_1000AD3E8(a1, a2, a3);
  a4();
}

uint64_t type metadata accessor for BTUserTransaction()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd17BTUserTransaction);
}

id BTUserTransaction.__deallocating_deinit(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction;
  if (*(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction])
  {
    uint64_t v3 = static os_log_type_t.default.getter(a1);
    if (qword_100234C40 != -1) {
      swift_once(&qword_100234C40, sub_10018AB44);
    }
    uint64_t v4 = qword_10023DFE0;
    uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
    *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v7 = v1;
    id v8 = [v7 description];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;

    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10009914C();
    *(void *)(v6 + 32) = v9;
    *(void *)(v6 + 40) = v11;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Closed %@", 9LL, 2LL, v6);
    swift_bridgeObjectRelease(v6);
    uint64_t v12 = (os_activity_scope_state_s *)&v7[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState];
    swift_beginAccess(&v7[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState], v16, 33LL, 0LL);
    os_activity_scope_leave(v12);
    swift_endAccess(v16);
    uint64_t v13 = *(void *)&v1[v2];
    *(void *)&v1[v2] = 0LL;
    swift_unknownObjectRelease(v13);
  }

  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for BTUserTransaction();
  return objc_msgSendSuper2(&v15, "dealloc");
}

void BTUserTransaction.init()()
{
}

uint64_t BTUserTransaction.description.getter()
{
  uint64_t v8 = 0x3A4E58545BLL;
  unint64_t v9 = 0xE500000000000000LL;
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name + 8);
  v7[0] = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name);
  v7[1] = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v2 = sub_100098CD8(&qword_100236640);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)(v7, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._uint64_t countAndFlagsBits = 93LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return v8;
}

uint64_t sub_1000ADDC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1000ADDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000C6A8C(a1, a2);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 == 1)
  {
    uint64_t v13 = sub_1000B0A38(v5);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = sub_1000B0A9C(v6);
      uint64_t v17 = v16;
      uint64_t v18 = swift_bridgeObjectRelease(v6);
      if (v17)
      {
        uint64_t v19 = static os_log_type_t.default.getter(v18);
        if (qword_100234C20 != -1) {
          swift_once(&qword_100234C20, sub_10018A978);
        }
        uint64_t v20 = qword_10023DFC0;
        uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v12 = swift_allocObject(v21, 112LL, 7LL);
        *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
        *(void *)(v12 + 56) = &type metadata for String;
        unint64_t v22 = sub_10009914C();
        *(void *)(v12 + 32) = v15;
        *(void *)(v12 + 40) = v17;
        *(void *)(v12 + 96) = &type metadata for String;
        *(void *)(v12 + 104) = v22;
        *(void *)(v12 + 64) = v22;
        *(void *)(v12 + 72) = a1;
        *(void *)(v12 + 80) = a2;
        swift_bridgeObjectRetain(a2);
        os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Found found owner[%@] for device: %@", 36LL, 2LL, v12);
        goto LABEL_24;
      }

      uint64_t v42 = swift_release(v14);
    }

    else
    {
      uint64_t v42 = swift_bridgeObjectRelease(v6);
    }

    uint64_t v43 = static os_log_type_t.error.getter(v42);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v44 = qword_10023DFC0;
    uint64_t v45 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v12 = swift_allocObject(v45, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10009914C();
    *(void *)(v12 + 32) = a1;
    *(void *)(v12 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)( v43,  &_mh_execute_header,  v44,  "Unexected error, couldn't find account id and device store for owner of: - %@",  77LL,  2LL,  v12);
    goto LABEL_23;
  }

  if (!v7)
  {
    uint64_t v8 = swift_bridgeObjectRelease(v5);
    uint64_t v9 = static os_log_type_t.error.getter(v8);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v10 = qword_10023DFC0;
    uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10009914C();
    *(void *)(v12 + 32) = a1;
    *(void *)(v12 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Unexected error, couldn't find account magic paired with: - %@",  62LL,  2LL,  v12);
LABEL_23:
    uint64_t v14 = 0LL;
    goto LABEL_24;
  }

  unsigned int v23 = (uint64_t *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID);
  uint64_t v24 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID);
  uint64_t v25 = v23[1];
  swift_bridgeObjectRetain(v25);
  unint64_t v26 = sub_1000A3A10(v24, v25);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease(v25);
    uint64_t v35 = swift_bridgeObjectRelease(v6);
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v37 = qword_10023DFC0;
    uint64_t v38 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v12 = swift_allocObject(v38, 112LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    uint64_t v40 = *v23;
    uint64_t v39 = v23[1];
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v41 = sub_10009914C();
    *(void *)(v12 + 32) = v40;
    *(void *)(v12 + 40) = v39;
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v41;
    *(void *)(v12 + 64) = v41;
    *(void *)(v12 + 72) = a1;
    *(void *)(v12 + 80) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v39);
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Current User[%@] is NOT owner of device: %@", 43LL, 2LL, v12);
    goto LABEL_23;
  }

  uint64_t v14 = *(void *)(*(void *)(v6 + 56) + 8 * v26);
  swift_retain(v14);
  swift_bridgeObjectRelease(v25);
  uint64_t v28 = swift_bridgeObjectRelease(v6);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v30 = qword_10023DFC0;
  uint64_t v31 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v31, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  uint64_t v33 = *v23;
  uint64_t v32 = v23[1];
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v34 = sub_10009914C();
  *(void *)(v12 + 32) = v33;
  *(void *)(v12 + 40) = v32;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v34;
  *(void *)(v12 + 64) = v34;
  *(void *)(v12 + 72) = a1;
  *(void *)(v12 + 80) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v32);
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Found found owner[%@] for device: %@", 36LL, 2LL, v12);
LABEL_24:
  swift_bridgeObjectRelease(v12);
  return v14;
}

const char *sub_1000AE248()
{
  return "AudioAccessoryFeatures";
}

const char *sub_1000AE25C()
{
  uint64_t v1 = "MultiUserSupport";
  if (*v0 != 1) {
    uint64_t v1 = "MultiUserHRTFSupport";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "AADeviceRecordCloudSync";
  }
}

void sub_1000AE2A4()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for DeviceManager()) init];
  sub_1000AF1D8();
  qword_10023DD60 = (uint64_t)v0;
}

void sub_1000AE320(char a1)
{
  __asm { BR              X10 }

unint64_t sub_1000AE34C()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100236770);
  uint64_t inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 48), "Unknown error");
  *(_WORD *)(inited + 62) = -4864;
  return sub_10009ED94(inited);
}

void sub_1000AE62C()
{
}

uint64_t sub_1000AE634(uint64_t a1)
{
  unint64_t v2 = sub_1000CA268();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000AE65C(uint64_t a1)
{
  unint64_t v2 = sub_1000CA268();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000AE6C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore;
  uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore];
  if (v6)
  {
    uint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore];
  }

  else
  {
    uint64_t v8 = type metadata accessor for DeviceStore(0LL);
    sub_100121DF8((uint64_t)v4);
    uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    id v10 = v9;
    uint64_t v11 = v1;
    uint64_t v7 = sub_100166724((uint64_t)v1, (uint64_t)&off_10020A778, (uint64_t)v4, v10);

    uint64_t v12 = *(void *)&v1[v5];
    *(void *)&v1[v5] = v7;
    swift_retain(v7);
    swift_release(v12);
    uint64_t v6 = 0LL;
  }

  swift_retain(v6);
  return v7;
}

char *sub_1000AE868()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __n128 v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL, v5);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_pushService] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher] = 0LL;
  uint64_t v41 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue;
  sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v43 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v44 = *(void (**)(char *))(v9 + 104);
  v44(v11);
  uint64_t v12 = v0;
  static DispatchQoS.unspecified.getter(v12);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v13 = sub_100098C98( (unint64_t *)&unk_100237030,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100235870);
  uint64_t v42 = v14;
  uint64_t v15 = sub_1000C9F38((unint64_t *)&qword_100237040, (uint64_t *)&unk_100235870);
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v16, v15, v1, v13);
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002FLL,  0x80000001001CD7D0LL,  v7,  v3,  v11,  0LL);
  *(void *)&v0[v41] = v18;
  uint64_t v19 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_accountStore;
  *(void *)&v12[v19] = [objc_allocWithZone(ACAccountStore) init];
  *(void *)&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap] = _swiftEmptyDictionarySingleton;
  *(void *)&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices] = _swiftEmptyArrayStorage;
  uint64_t v20 = &v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID];
  *(void *)uint64_t v20 = 0LL;
  *((void *)v20 + 1) = 0xE000000000000000LL;
  uint64_t v21 = &v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID];
  *(void *)uint64_t v21 = 0LL;
  *((void *)v21 + 1) = 0xE000000000000000LL;
  *(void *)&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore] = 0LL;
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate], 0LL);
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], 0LL);
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate], 0LL);
  uint64_t v22 = ((uint64_t (*)(char *, void, uint64_t))v44)(v11, v43, v45);
  static DispatchQoS.unspecified.getter(v22);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v42, v17, v1, v13);
  *(void *)&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003DLL,  0x80000001001CD800LL,  v7,  v3,  v11,  0LL);

  unsigned int v23 = (objc_class *)type metadata accessor for DeviceManager();
  v52.receiver = v12;
  v52.super_class = v23;
  uint64_t v24 = (char *)objc_msgSendSuper2(&v52, "init");
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_10023DFC0,  "DeviceManager init",  18LL,  2LL,  _swiftEmptyArrayStorage);
  if (qword_100234B68 != -1) {
    swift_once(&qword_100234B68, sub_1000CA624);
  }
  unint64_t v26 = (void *)static DarwinNotificationManager.shared;
  char v27 = (dispatch_queue_s *)static OS_dispatch_queue.main.getter();
  uint64_t v28 = swift_allocObject(&unk_10020C610, 24LL, 7LL);
  *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
  uint64_t v50 = sub_1000C9F78;
  uint64_t v51 = v28;
  aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256LL;
  unint64_t v48 = sub_1000CAC20;
  uint64_t v49 = &unk_10020C628;
  uint64_t v29 = _Block_copy(&aBlock);
  uint64_t v30 = v51;
  id v31 = v26;
  swift_release(v30);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v27, v29);
  _Block_release(v29);

  uint64_t v32 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v33 = [v32 isBuddyComplete];
  LODWORD(v29) = (_DWORD)v33;
  uint64_t v34 = static os_log_type_t.default.getter(v33);
  if ((_DWORD)v29)
  {
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_10023DFC0,  "DeviceManager buddy is done",  27LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1000AF1D8();
    uint64_t v35 = v24;
  }

  else
  {
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_10023DFC0,  "DeviceManager buddy is NOT done, wait...",  40LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v36 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v36 + 16, v24);
    uint64_t v50 = sub_1000C9F80;
    uint64_t v51 = v36;
    aBlock = _NSConcreteStackBlock;
    uint64_t v47 = 1107296256LL;
    unint64_t v48 = sub_1000F2C54;
    uint64_t v49 = &unk_10020C650;
    uint64_t v37 = _Block_copy(&aBlock);
    swift_release(v51);
    id v38 = [v32 addBuddyCompleteObserver:v37];

    _Block_release(v37);
    uint64_t v35 = *(void **)&v24[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher];
    *(void *)&v24[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = v38;
  }

  return v24;
}

void sub_1000AEE30(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v3 = qword_10023DFC0;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  unsigned __int8 v6 = [(id)objc_opt_self(BTSystemConfiguration) isBuddyComplete];
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v6;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "DeviceManager buddy done callback: %i", v13[0]);
  swift_bridgeObjectRelease(v5);
  swift_beginAccess(v1, v14, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v7);
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    sub_1000AF1D8();
  }

  swift_beginAccess(v1, v13, 0LL, 0LL);
  uint64_t v11 = (char *)swift_unknownObjectWeakLoadStrong(v1, v10);
  if (v11)
  {
    uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher];
    *(void *)&v11[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = 0LL;
  }

id sub_1000AEFA0(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFC0,  "DeviceManager deinit",  20LL,  2LL,  _swiftEmptyArrayStorage);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for DeviceManager();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_1000AF1D8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  objc_super v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v10 = [v9 isFirstUnlocked];
  if ((_DWORD)v10)
  {
    uint64_t v28 = v2;
    uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v12 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v12 + 16, v0);
    uint64_t v34 = sub_1000C9E7C;
    uint64_t v35 = v12;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256LL;
    uint64_t v32 = sub_1000F2C54;
    id v33 = &unk_10020C178;
    uint64_t v13 = _Block_copy(&aBlock);
    uint64_t v27 = v5;
    uint64_t v14 = v13;
    id v15 = v11;
    uint64_t v16 = swift_retain(v12);
    static DispatchQoS.unspecified.getter(v16);
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v17 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v19 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v18, v19, v1, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v27);
    uint64_t v20 = v35;
    swift_release(v12);
    swift_release(v20);
  }

  else
  {
    uint64_t v21 = static os_log_type_t.default.getter(v10);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_10023DFC0,  "DeviceManager cannot start, device needs to be first unlocked after boot",  72LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v22 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v22 + 16, v0);
    uint64_t v34 = sub_1000C9E74;
    uint64_t v35 = v22;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256LL;
    uint64_t v32 = sub_1000F2C54;
    id v33 = &unk_10020C150;
    unsigned int v23 = _Block_copy(&aBlock);
    swift_release(v35);
    id v24 = [v9 addFirstUnlockObserver:v23];
    _Block_release(v23);
    uint64_t v25 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher);
    *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher) = v24;
  }

void sub_1000AF518(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFC0,  "Setting up DeviceManager after device first unlocked after boot",  63LL,  2LL,  _swiftEmptyArrayStorage);
  swift_beginAccess(v1, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_1000AF1D8();
  }

  swift_beginAccess(v1, &v9, 0LL, 0LL);
  uint64_t v7 = (char *)swift_unknownObjectWeakLoadStrong(v1, v6);
  if (v7)
  {
    uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher];
    *(void *)&v7[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher] = 0LL;
  }

uint64_t sub_1000AF600(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v34, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1, v13);
  if (result)
  {
    id v15 = (void *)result;
    uint64_t v30 = v6;
    uint64_t v31 = v3;
    id v16 = [(id)objc_opt_self(PBSUserProfileManager) sharedInstance];
    [v16 addObserver:v15];

    uint64_t v17 = sub_1000AE6C8();
    uint64_t v18 = static os_log_type_t.default.getter(v17);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_10023DFC8,  "Activate Cloud Coordinator",  26LL,  2LL,  _swiftEmptyArrayStorage);
    sub_10013AA64((uint64_t)v12);
    sub_1000C8380((uint64_t)v12);
    sub_1000A7CD4((uint64_t)v12, type metadata accessor for CloudCoordinatorConfiguration);
    uint64_t v19 = sub_10013B740();
    sub_1000F48D8();
    swift_release(v17);
    swift_unknownObjectRelease(v19);
    sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v21 = swift_allocObject(&unk_10020C1B0, 24LL, 7LL);
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    aBlock[4] = sub_1000C9E84;
    uint64_t v33 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = &unk_10020C1C8;
    uint64_t v22 = _Block_copy(aBlock);
    uint64_t v23 = v33;
    id v24 = v15;
    uint64_t v25 = swift_release(v23);
    static DispatchQoS.unspecified.getter(v25);
    aBlock[0] = _swiftEmptyArrayStorage;
    uint64_t v26 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v28 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v2, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v30);
  }

  return result;
}

void sub_1000AF94C(void *a1)
{
  id v2 = [(id)objc_opt_self(PBSUserProfileManager) sharedInstance];
  [a1 userProfileManagerDidUpdate:v2];
}

uint64_t sub_1000AF9AC()
{
  return sub_1000B2FB4((uint64_t)sub_1000C9E6C, (uint64_t)&unk_10020C128);
}

void sub_1000AF9C0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_10023DFC0,  "Device Manager deactivate",  25LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v6 = sub_1000AE6C8();
    uint64_t v7 = static os_log_type_t.default.getter(v6);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_10023DFC8,  "Deactivate Cloud Coordinator",  28LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v8 = sub_10013B740();
    sub_10010F32C(v6);
    swift_release(v6);
    swift_unknownObjectRelease(v8);
    id v9 = [(id)objc_opt_self(PBSUserProfileManager) sharedInstance];
    [v9 removeObserver:v4];
  }

uint64_t sub_1000AFB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v15 = (char *)&v44 - v14;
  v53[3] = &type metadata for AudioAccessoryFeatures;
  v53[4] = sub_10009E740();
  LOBYTE(v53[0]) = 1;
  char v16 = isFeatureEnabled(_:)(v53);
  uint64_t result = sub_10009A498(v53);
  if ((v16 & 1) != 0)
  {
    uint64_t v18 = a1 + 16;
    swift_beginAccess(v18, v53, 0LL, 0LL);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v18, v19);
    if (result)
    {
      uint64_t v20 = (char *)result;
      uint64_t v21 = result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap;
      swift_beginAccess( result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap,  v52,  0LL,  0LL);
      uint64_t v22 = *(void *)v21;
      if (*(void *)(*(void *)v21 + 16LL))
      {
        swift_bridgeObjectRetain(a3);
        swift_bridgeObjectRetain(v22);
        sub_1000A3A10(a2, a3);
        if ((v23 & 1) != 0)
        {

          swift_bridgeObjectRelease(a3);
          return swift_bridgeObjectRelease(v22);
        }

        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(v22);
      }

      uint64_t v44 = (void *)v21;
      id v24 = v15;
      uint64_t v25 = type metadata accessor for DeviceStore(0LL);
      sub_1001221A4((uint64_t)v12);
      uint64_t v46 = a2;
      URL.appendingPathComponent(_:isDirectory:)(a2, a3, 1LL);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v10 + 8);
      v49(v12, v9);
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      uint64_t v45 = v24;
      uint64_t v47 = v9;
      v26(v12, v24, v9);
      uint64_t v27 = *(void **)&v20[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
      swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      uint64_t v28 = v20;
      id v29 = v27;
      uint64_t v30 = sub_100166724((uint64_t)v20, (uint64_t)&off_10020A778, (uint64_t)v12, v29);
      unint64_t v48 = v28;

      uint64_t v32 = static os_log_type_t.default.getter(v31);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      uint64_t v33 = qword_10023DFC0;
      uint64_t v34 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
      *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      *(void *)(v35 + 56) = &type metadata for String;
      *(void *)(v35 + 64) = sub_10009914C();
      uint64_t v36 = v46;
      *(void *)(v35 + 32) = v46;
      *(void *)(v35 + 40) = a3;
      swift_bridgeObjectRetain(a3);
      os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  v33,  "CloudSync: addSecondaryDeviceStore: setting up DeviceStore accountIdentifier: %@",  80LL,  2LL,  v35);
      swift_bridgeObjectRelease(v35);
      uint64_t v37 = *(void *)(v30 + 48);
      *(void *)(v30 + 40) = v36;
      *(void *)(v30 + 4_Block_object_dispose(va, 8) = a3;
      swift_bridgeObjectRetain(a3);
      uint64_t v38 = swift_bridgeObjectRelease(v37);
      uint64_t v39 = static os_log_type_t.default.getter(v38);
      uint64_t v40 = v44;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  qword_10023DFC8,  "Activate Cloud Coordinator",  26LL,  2LL,  _swiftEmptyArrayStorage);
      sub_10013AA64((uint64_t)v8);
      sub_1000C8380((uint64_t)v8);
      sub_1000A7CD4((uint64_t)v8, type metadata accessor for CloudCoordinatorConfiguration);
      uint64_t v41 = sub_10013B740();
      sub_1000F48D8();
      swift_unknownObjectRelease(v41);
      swift_beginAccess(v40, v51, 33LL, 0LL);
      swift_bridgeObjectRetain(a3);
      swift_retain(v30);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
      uint64_t v50 = *v40;
      *uint64_t v40 = 0x8000000000000000LL;
      sub_10009D998(v30, v36, a3, isUniquelyReferenced_nonNull_native);
      uint64_t v43 = *v40;
      *uint64_t v40 = v50;
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v43);
      swift_endAccess(v51);

      swift_release(v30);
      return ((uint64_t (*)(char *, uint64_t))v49)(v45, v47);
    }
  }

  return result;
}

uint64_t sub_1000AFFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[3] = &type metadata for AudioAccessoryFeatures;
  v27[4] = sub_10009E740();
  LOBYTE(v27[0]) = 1;
  char v6 = isFeatureEnabled(_:)(v27);
  uint64_t result = sub_10009A498(v27);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
    uint64_t result = swift_beginAccess( a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap,  v27,  0LL,  0LL);
    uint64_t v9 = *v8;
    if (*(void *)(*v8 + 16))
    {
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(v9);
      unint64_t v10 = sub_1000A3A10(a2, a3);
      if ((v11 & 1) != 0)
      {
        uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
        swift_retain(v12);
        swift_bridgeObjectRelease(a3);
        uint64_t v13 = swift_bridgeObjectRelease(v9);
        uint64_t v14 = static os_log_type_t.default.getter(v13);
        if (qword_100234C20 != -1) {
          swift_once(&qword_100234C20, sub_10018A978);
        }
        uint64_t v15 = qword_10023DFC0;
        uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
        *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        *(void *)(v17 + 56) = &type metadata for String;
        *(void *)(v17 + 64) = sub_10009914C();
        *(void *)(v17 + 32) = a2;
        *(void *)(v17 + 40) = a3;
        swift_bridgeObjectRetain(a3);
        os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v15,  "CloudSync: removeSecondaryDeviceStore: for accountIdentifier: %@",  64LL,  2LL,  v17,  1LL,  2LL);
        swift_bridgeObjectRelease(v17);
        sub_10009B1B0();
        uint64_t v18 = *v8;
        if (*(void *)(*v8 + 16))
        {
          swift_bridgeObjectRetain(a3);
          swift_bridgeObjectRetain(v18);
          unint64_t v19 = sub_1000A3A10(a2, a3);
          if ((v20 & 1) != 0)
          {
            uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
            swift_retain(v21);
            swift_bridgeObjectRelease(a3);
            uint64_t v22 = swift_bridgeObjectRelease(v18);
            uint64_t v23 = static os_log_type_t.default.getter(v22);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_10023DFC8,  "Deactivate Cloud Coordinator",  28LL,  2LL,  _swiftEmptyArrayStorage);
            uint64_t v24 = sub_10013B740();
            sub_10010F32C(v21);
            swift_release(v21);
            swift_unknownObjectRelease(v24);
          }

          else
          {
            swift_bridgeObjectRelease(a3);
            swift_bridgeObjectRelease(v18);
          }
        }

        swift_beginAccess(v8, v26, 33LL, 0LL);
        swift_bridgeObjectRetain(a3);
        uint64_t v25 = sub_10010C49C(a2, a3);
        swift_endAccess(v26);
        swift_release(v12);
        swift_bridgeObjectRelease(a3);
        return swift_release(v25);
      }

      else
      {
        swift_bridgeObjectRelease(a3);
        return swift_bridgeObjectRelease(v9);
      }
    }
  }

  return result;
}

uint64_t sub_1000B0374()
{
  return sub_1000B2FB4((uint64_t)sub_1000C9E64, (uint64_t)&unk_10020C100);
}

void sub_1000B0388(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v46, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v6);
  uint64_t v8 = static os_log_type_t.default.getter(Strong);
  if (Strong)
  {
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Pinged cloud layer to send cached data",  49LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v9 = sub_1000AE6C8();
    unint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    id v11 = [v10 isFirstUnlocked];
    if ((_DWORD)v11)
    {
      uint64_t v12 = sub_10013A76C();
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      uint64_t v13 = sub_100098D58(v2, (uint64_t)qword_10023DCC0);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
      uint64_t v14 = sub_100138AA0((uint64_t)v5);
      swift_release(v12);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v15 = static os_log_type_t.error.getter(v11);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v14 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v9);
    sub_10012259C((uint64_t)v14);
    swift_bridgeObjectRelease(v14);
    uint64_t v16 = sub_1000AE6C8();
    id v17 = [v10 isFirstUnlocked];
    if ((_DWORD)v17)
    {
      uint64_t v18 = sub_10013A76C();
      if (qword_100234BC8 != -1) {
        swift_once(&qword_100234BC8, sub_1000E72E4);
      }
      uint64_t v19 = sub_100098D58(v2, (uint64_t)qword_10023DF00);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
      char v20 = sub_100138AC4((uint64_t)v5);
      swift_release(v18);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v21 = static os_log_type_t.error.getter(v17);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      char v20 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v16);
    sub_1001225B8((uint64_t)v20);
    uint64_t v22 = swift_bridgeObjectRelease(v20);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    uint64_t v24 = qword_10023DFC0;
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v26 = os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Skip sending cached primaryDevice legacy data for TVOS",  65LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v24,  "CloudSync: Pinged cloud layer to send cached primaryDevice data",  63LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v28 = sub_1000AE6C8();
    id v29 = [v10 isFirstUnlocked];
    if ((_DWORD)v29)
    {
      uint64_t v30 = sub_10013A76C();
      if (qword_100234B70 != -1) {
        swift_once(&qword_100234B70, sub_1000CAF84);
      }
      uint64_t v31 = sub_100098D58(v2, (uint64_t)qword_10023DD70);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v31, v2);
      uint64_t v25 = sub_100138A68((uint64_t)v5);
      swift_release(v30);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v32 = static os_log_type_t.error.getter(v29);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v28);
    sub_1001225D4((uint64_t)v25);
    swift_bridgeObjectRelease(v25);
    v45[3] = &type metadata for AudioAccessoryFeatures;
    v45[4] = sub_10009E740();
    LOBYTE(v45[0]) = 1;
    char v33 = isFeatureEnabled(_:)(v45);
    sub_10009A498(v45);
    if ((v33 & 1) != 0)
    {
      uint64_t v34 = (uint64_t *)&Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
      swift_beginAccess( &Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap],  v45,  0LL,  0LL);
      sub_1000B0B18(*v34);
      if (v35)
      {
        uint64_t v37 = v36;
        uint64_t v38 = swift_bridgeObjectRelease(v35);
        uint64_t v39 = static os_log_type_t.default.getter(v38);
        os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Pinged cloud layer to send cached secondayDevice data",  64LL,  2LL,  _swiftEmptyArrayStorage);
        id v40 = [v10 isFirstUnlocked];
        if ((v40 & 1) != 0)
        {
          uint64_t v41 = sub_10013A76C();
          if (qword_100234B70 != -1) {
            swift_once(&qword_100234B70, sub_1000CAF84);
          }
          uint64_t v42 = sub_100098D58(v2, (uint64_t)qword_10023DD70);
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v42, v2);
          uint64_t v43 = sub_100138A68((uint64_t)v5);
          swift_release(v41);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        }

        else
        {
          uint64_t v44 = static os_log_type_t.error.getter(v40);
          if (qword_100234C28 != -1) {
            swift_once(&qword_100234C28, sub_10018A9E0);
          }
          uint64_t v43 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
        }

        sub_1001225D4((uint64_t)v43);
        swift_release(v37);
        swift_bridgeObjectRelease(v43);
      }
    }
  }

  else
  {
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_10023DFC0,  "Ping unavailable",  16LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t sub_1000B0A38(uint64_t a1)
{
  uint64_t result = sub_1000C86D0(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v5 = sub_1000C87EC(result, v3, 0LL, a1);
  return swift_retain(v5);
}

uint64_t sub_1000B0A9C(uint64_t a1)
{
  uint64_t result = sub_1000C861C(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v5 = sub_1000C8840(result, v3, 0LL, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

void *sub_1000B0B18(uint64_t a1)
{
  uint64_t result = (void *)sub_1000C86D0(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == (void *)(1LL << *(_BYTE *)(a1 + 32))) {
    return 0LL;
  }
  else {
    return sub_1000C8758(&v5, (uint64_t)result, v3, 0LL, a1);
  }
}

uint64_t sub_1000B0BD4(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020C070, (uint64_t)sub_1000C9DC0, (uint64_t)&unk_10020C088);
}

uint64_t sub_1000B0BF0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v6);
  v137 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v135 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v134 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v142 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v138 = (uint64_t)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v141 = (char *)&v129 - v13;
  __chkstk_darwin(v14);
  v143 = (char *)&v129 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v129 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v129 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v129 - v23;
  uint64_t v151 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v136 = (uint64_t)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v129 - v27;
  __chkstk_darwin(v29);
  *(void *)&__int128 v153 = (char *)&v129 - v30;
  uint64_t v31 = (uint64_t (*)(uint64_t))type metadata accessor for URL(0LL);
  unint64_t v150 = *((void *)v31 - 1);
  __chkstk_darwin(v31);
  char v33 = (char *)&v129 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v158, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v34);
  v147 = (char *)Strong;
  if (!Strong) {
    return a2();
  }
  v139 = a2;
  uint64_t v140 = a3;
  uint64_t v130 = v8;
  uint64_t v36 = (uint64_t (*)(uint64_t))static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    goto LABEL_69;
  }
  while (1)
  {
    os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_10023DFC0,  "fetchDeviceList",  15LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v157 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v37 = (void *)sub_1000AE6C8();
    id v38 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    uint64_t v39 = (uint64_t)v143;
    if ((_DWORD)v38)
    {
      v148 = v37;
      uint64_t v40 = sub_10013A76C();
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      uint64_t v41 = sub_100098D58((uint64_t)v31, (uint64_t)qword_10023DCC0);
      unint64_t v42 = v150;
      (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t)))(v150 + 16))(v33, v41, v31);
      uint64_t v43 = sub_100138AA0((uint64_t)v33);
      swift_release(v40);
      (*(void (**)(char *, uint64_t (*)(uint64_t)))(v42 + 8))(v33, v31);
      uint64_t v37 = v148;
    }

    else
    {
      uint64_t v45 = static os_log_type_t.error.getter(v38);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v43 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v37);
    uint64_t v146 = v43[2];
    if (!v146) {
      break;
    }
    unint64_t v46 = 0LL;
    v144 = (char *)v43 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
    uint64_t v31 = type metadata accessor for DeviceRecord;
    uint64_t v36 = type metadata accessor for BTDeferredRecord;
    v145 = v43;
    while (v46 < v43[2])
    {
      uint64_t v47 = *(void *)(v149 + 72);
      unint64_t v150 = v46;
      sub_1000A7C90((uint64_t)&v144[v47 * v46], v153, type metadata accessor for DeviceRecord);
      uint64_t v48 = sub_1000AE6C8();
      uint64_t v49 = sub_10013BA34();
      swift_release(v48);
      uint64_t v50 = *(void *)(v49 + 16);
      if (v50)
      {
        uint64_t v51 = v142;
        objc_super v52 = (void *)v49;
        char v33 = (char *)(v49
                     + ((*(unsigned __int8 *)(v142 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80)));
        v148 = v52;
        swift_bridgeObjectRetain(v52);
        uint64_t v53 = *(void *)(v51 + 72);
        while (1)
        {
          sub_1000A7C90((uint64_t)v33, (uint64_t)v24, type metadata accessor for BTDeferredRecord);
          uint64_t v54 = *((void *)v24 + 1);
          uint64_t v55 = *((void *)v24 + 2);
          if (v54 == 0x6552656369766544LL && v55 == 0xEC00000064726F63LL)
          {
            sub_1000A7C90((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000A7C90(v153, (uint64_t)v28, type metadata accessor for DeviceRecord);
          }

          else
          {
            char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, 0x6552656369766544LL, 0xEC00000064726F63LL, 0LL);
            sub_1000A7C90((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000A7C90(v153, (uint64_t)v28, type metadata accessor for DeviceRecord);
            if ((v57 & 1) == 0)
            {
              sub_1000A7CD4((uint64_t)v21, type metadata accessor for BTDeferredRecord);
              sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceRecord);
              sub_1000A7C90((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
              goto LABEL_20;
            }
          }

          uint64_t v58 = &v21[*(int *)(v152 + 28)];
          uint64_t v59 = *(void *)v58;
          uint64_t v60 = *((void *)v58 + 1);
          unsigned int v61 = &v28[*(int *)(v151 + 24)];
          uint64_t v62 = *((void *)v61 + 1);
          if (v59 == *(void *)v61 && v60 == v62)
          {
            sub_1000A7CD4((uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceRecord);
            sub_1000A7C90((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
LABEL_36:
            if (*v18 == 1)
            {
              swift_bridgeObjectRelease(0xE600000000000000LL);
              sub_1000A7CD4((uint64_t)v18, type metadata accessor for BTDeferredRecord);
              sub_1000A7CD4((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_14:
              swift_bridgeObjectRelease_n(v148, 2LL);
              uint64_t v39 = (uint64_t)v143;
              goto LABEL_15;
            }

            char v65 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x657461647075LL,  0xE600000000000000LL,  0x6574656C6564LL,  0xE600000000000000LL,  0LL);
            swift_bridgeObjectRelease(0xE600000000000000LL);
            sub_1000A7CD4((uint64_t)v18, type metadata accessor for BTDeferredRecord);
            sub_1000A7CD4((uint64_t)v24, type metadata accessor for BTDeferredRecord);
            if ((v65 & 1) != 0) {
              goto LABEL_14;
            }
            goto LABEL_21;
          }

          char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *(void *)v61, v62, 0LL);
          sub_1000A7CD4((uint64_t)v21, type metadata accessor for BTDeferredRecord);
          sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceRecord);
          sub_1000A7C90((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
          if ((v64 & 1) != 0) {
            goto LABEL_36;
          }
LABEL_20:
          sub_1000A7CD4((uint64_t)v18, type metadata accessor for BTDeferredRecord);
          sub_1000A7CD4((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_21:
          v33 += v53;
          if (!--v50)
          {
            swift_bridgeObjectRelease_n(v148, 2LL);
            uint64_t v39 = (uint64_t)v143;
            goto LABEL_41;
          }
        }
      }

      swift_bridgeObjectRelease(v49);
LABEL_41:
      char v33 = (char *)sub_1000B1A88();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      unint64_t v67 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v66 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v67 >= v66 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1LL);
      }
      uint64_t v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v33);
      specialized Array._endMutation()(v68);
LABEL_15:
      unint64_t v46 = v150 + 1;
      sub_1000A7CD4(v153, type metadata accessor for DeviceRecord);
      uint64_t v43 = v145;
      if (v46 == v146) {
        goto LABEL_44;
      }
    }

    __break(1u);
LABEL_69:
    swift_once(&qword_100234C20, sub_10018A978);
  }

id sub_1000B1A88()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DeviceRecord(0LL) + 24) + 8);
  id v2 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
  swift_bridgeObjectRetain(v1);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  id v4 = [v2 initWithBluetoothAddress:v3];

  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setNickname:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setModelNumber:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v4 setManufacturer:v7];

  NSString v8 = String._bridgeToObjectiveC()();
  [v4 setProductID:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [v4 setVendorID:v9];

  return v4;
}

uint64_t sub_1000B1C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BC714(a1, a2, a3, a4, (uint64_t)&unk_10020BF80, (uint64_t)sub_1000C9C08, (uint64_t)&unk_10020BF98);
}

uint64_t sub_1000B1C2C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v108 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v107 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v106 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v105 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for URL(0LL);
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v15);
  uint64_t v104 = (uint64_t)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v111 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v102 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v94 - v20;
  uint64_t v101 = v22;
  __chkstk_darwin(v23);
  uint64_t v103 = (uint64_t)&v94 - v24;
  swift_beginAccess(a1 + 16, v120, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 16, v25);
  unint64_t v112 = (char *)Strong;
  if (!Strong) {
    return a2();
  }
  uint64_t v97 = a2;
  uint64_t v110 = a3;
  uint64_t v98 = v10;
  uint64_t v27 = static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v28 = qword_10023DFC0;
  uint64_t v95 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v29 = swift_allocObject(v95, 72LL, 7LL);
  __int128 v94 = xmmword_1001A5EA0;
  *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v96 = sub_10009914C();
  *(void *)(v29 + 64) = v96;
  *(void *)(v29 + 32) = a4;
  *(void *)(v29 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "fetchDevice: %@", 15LL, 2LL, v29);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = sub_1000AE6C8();
  id v31 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v31)
  {
    uint64_t v32 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v33 = v100;
    uint64_t v34 = sub_100098D58(v100, (uint64_t)qword_10023DCC0);
    uint64_t v35 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v14, v34, v33);
    uint64_t v36 = sub_100138AA0((uint64_t)v14);
    swift_release(v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v33);
  }

  else
  {
    uint64_t v38 = static os_log_type_t.error.getter(v31);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v36 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v39 = v110;
  swift_release(v30);
  uint64_t v40 = v36[2];
  if (v40)
  {
    uint64_t v41 = (uint64_t)v36 + ((*(unsigned __int8 *)(v111 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    uint64_t v42 = *(void *)(v111 + 72);
    swift_bridgeObjectRetain(v36);
    while (1)
    {
      sub_1000A7C90(v41, (uint64_t)v21, type metadata accessor for DeviceRecord);
      uint64_t v43 = &v21[*(int *)(v17 + 24)];
      uint64_t v44 = *((void *)v43 + 1);
      BOOL v45 = *(void *)v43 == a4 && v44 == a5;
      if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v43, v44, a4, a5, 0LL) & 1) != 0) {
        break;
      }
      sub_1000A7CD4((uint64_t)v21, type metadata accessor for DeviceRecord);
      v41 += v42;
      if (!--v40)
      {
        swift_bridgeObjectRelease(v36);
        uint64_t v46 = 1LL;
        uint64_t v39 = v110;
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease(v36);
    uint64_t v47 = v104;
    sub_1000C998C((uint64_t)v21, v104, type metadata accessor for DeviceRecord);
    uint64_t v46 = 0LL;
    uint64_t v39 = v110;
  }

  else
  {
    uint64_t v46 = 1LL;
LABEL_23:
    uint64_t v47 = v104;
  }

  uint64_t v48 = v111;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v47, v46, 1LL, v17);
  swift_bridgeObjectRelease(v36);
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v47, 1LL, v17);
  uint64_t v50 = v97;
  if (v49 == 1)
  {
    uint64_t v51 = sub_100099358(v47, &qword_100235848);
    uint64_t v52 = static os_log_type_t.debug.getter(v51);
    uint64_t v53 = qword_10023DFC0;
    uint64_t v54 = swift_allocObject(v95, 72LL, 7LL);
    *(_OWORD *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = v94;
    unint64_t v55 = v96;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 64) = v55;
    *(void *)(v54 + 32) = a4;
    *(void *)(v54 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v53, "Device not found - %@", 21LL, 2LL, v54);
    swift_bridgeObjectRelease(v54);
    uint64_t v56 = v112;
    char v57 = *(void **)&v112[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v58 = swift_allocObject(&unk_10020BFD0, 32LL, 7LL);
    *(void *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = v50;
    *(void *)(v58 + 24) = v39;
    uint64_t v118 = sub_1000C9C14;
    uint64_t v119 = v58;
    aBlock = _NSConcreteStackBlock;
    uint64_t v115 = 1107296256LL;
    uint64_t v116 = sub_1000F2C54;
    unint64_t v117 = &unk_10020BFE8;
    uint64_t v59 = _Block_copy(&aBlock);
    swift_retain(v39);
    id v60 = v57;
    unsigned int v61 = v105;
    static DispatchQoS.unspecified.getter(v60);
    uint64_t v113 = _swiftEmptyArrayStorage;
    uint64_t v62 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v63 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v64 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    char v65 = v107;
    uint64_t v66 = v63;
    uint64_t v67 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v66, v64, v98, v62);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v61, v65, v59);

    _Block_release(v59);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v65, v67);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v61, v109);
  }

  else
  {
    uint64_t v68 = v47;
    uint64_t v69 = v103;
    uint64_t v70 = sub_1000C998C(v68, v103, type metadata accessor for DeviceRecord);
    uint64_t v71 = v48;
    uint64_t v72 = static os_log_type_t.default.getter(v70);
    uint64_t v73 = qword_10023DFC0;
    uint64_t v74 = swift_allocObject(v95, 72LL, 7LL);
    *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = v94;
    uint64_t v75 = sub_100094CA4();
    unint64_t v76 = v96;
    *(void *)(v74 + 56) = &type metadata for String;
    *(void *)(v74 + 64) = v76;
    *(void *)(v74 + 32) = v75;
    *(void *)(v74 + 40) = v77;
    os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v73, "Found device: %@", 16LL, 2LL, v74);
    swift_bridgeObjectRelease(v74);
    uint64_t v78 = v112;
    uint64_t v79 = *(void **)&v112[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v80 = v102;
    sub_1000A7C90(v69, v102, type metadata accessor for DeviceRecord);
    uint64_t v81 = *(unsigned __int8 *)(v71 + 80);
    uint64_t v82 = (v81 + 32) & ~v81;
    uint64_t v83 = swift_allocObject(&unk_10020C020, v82 + v101, v81 | 7);
    *(void *)(v83 + swift_unknownObjectWeakDestroy(v0 + 16) = v50;
    *(void *)(v83 + 24) = v39;
    sub_1000C998C(v80, v83 + v82, type metadata accessor for DeviceRecord);
    uint64_t v118 = sub_1000C9D50;
    uint64_t v119 = v83;
    aBlock = _NSConcreteStackBlock;
    uint64_t v115 = 1107296256LL;
    uint64_t v116 = sub_1000F2C54;
    unint64_t v117 = &unk_10020C038;
    uint64_t v84 = _Block_copy(&aBlock);
    id v85 = v79;
    uint64_t v86 = swift_retain(v39);
    uint64_t v87 = v105;
    static DispatchQoS.unspecified.getter(v86);
    uint64_t v113 = _swiftEmptyArrayStorage;
    uint64_t v88 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v89 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v90 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    char v91 = v107;
    uint64_t v92 = v89;
    uint64_t v93 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v92, v90, v98, v88);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v87, v91, v84);
    _Block_release(v84);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v91, v93);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v87, v109);
    sub_1000A7CD4(v69, type metadata accessor for DeviceRecord);
  }

  return swift_release(v119);
}

uint64_t sub_1000B25A4(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0LL;
  NSString v5 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  NSString v6 = (void *)swift_allocObject(&unk_10020BF08, 48LL, 7LL);
  void v6[2] = a1;
  v6[3] = a2;
  void v6[4] = v2;
  void v6[5] = &v17;
  uint64_t v7 = swift_allocObject(&unk_10020BF30, 32LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000C9BE8;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1000CA2B4;
  uint64_t v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2CA0;
  void aBlock[3] = &unk_10020BF48;
  NSString v8 = _Block_copy(aBlock);
  uint64_t v9 = v16;
  uint64_t v10 = v5;
  swift_bridgeObjectRetain(a2);
  uint64_t v11 = v2;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 114LL, 334LL, 22LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = v17;
    swift_release(v6);
    return v14;
  }

  return result;
}

void sub_1000B2704(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v54 = a4;
  uint64_t v56 = a3;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v52 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v9);
  uint64_t v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v53 = (uint64_t)&v51 - v16;
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v19 = qword_10023DFC0;
  uint64_t v58 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v20 = swift_allocObject(v58, 72LL, 7LL);
  __int128 v57 = xmmword_1001A5EA0;
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v59 = sub_10009914C();
  *(void *)(v20 + 64) = v59;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "fetchDeviceSync: %@", 19LL, 2LL, v20);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = sub_1000AE6C8();
  id v22 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v22)
  {
    uint64_t v56 = v12;
    uint64_t v23 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v24 = sub_100098D58(v6, (uint64_t)qword_10023DCC0);
    uint64_t v25 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v8, v24, v6);
    uint64_t v26 = sub_100138AA0((uint64_t)v8);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
    swift_release(v21);
    uint64_t v12 = v56;
    uint64_t v27 = v26[2];
    if (!v27)
    {
LABEL_19:
      uint64_t v34 = 1LL;
      uint64_t v35 = v55;
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v28 = static os_log_type_t.error.getter(v22);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v26 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
    swift_release(v21);
    uint64_t v27 = _swiftEmptyArrayStorage[2];
    if (!v27) {
      goto LABEL_19;
    }
  }

  uint64_t v29 = (uint64_t)v26 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v30 = *(void *)(v12 + 72);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_1000A7C90(v29, (uint64_t)v14, type metadata accessor for DeviceRecord);
    id v31 = &v14[*(int *)(v11 + 24)];
    uint64_t v32 = *((void *)v31 + 1);
    BOOL v33 = *(void *)v31 == a1 && v32 == a2;
    if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v31, v32, a1, a2, 0LL) & 1) != 0) {
      break;
    }
    sub_1000A7CD4((uint64_t)v14, type metadata accessor for DeviceRecord);
    v29 += v30;
    if (!--v27)
    {
      swift_bridgeObjectRelease(v26);
      goto LABEL_19;
    }
  }

  swift_bridgeObjectRelease(v26);
  uint64_t v35 = v55;
  sub_1000C998C((uint64_t)v14, v55, type metadata accessor for DeviceRecord);
  uint64_t v34 = 0LL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v35, v34, 1LL, v11);
  swift_bridgeObjectRelease(v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v35, 1LL, v11) == 1)
  {
    uint64_t v36 = sub_100099358(v35, &qword_100235848);
    uint64_t v37 = static os_log_type_t.debug.getter(v36);
    uint64_t v38 = qword_10023DFC0;
    uint64_t v39 = swift_allocObject(v58, 72LL, 7LL);
    *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v57;
    unint64_t v40 = v59;
    *(void *)(v39 + 56) = &type metadata for String;
    *(void *)(v39 + 64) = v40;
    *(void *)(v39 + 32) = a1;
    *(void *)(v39 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Device not found - %@", 21LL, 2LL, v39);
    swift_bridgeObjectRelease(v39);
  }

  else
  {
    uint64_t v41 = v53;
    uint64_t v42 = sub_1000C998C(v35, v53, type metadata accessor for DeviceRecord);
    uint64_t v43 = static os_log_type_t.default.getter(v42);
    uint64_t v44 = qword_10023DFC0;
    uint64_t v45 = swift_allocObject(v58, 72LL, 7LL);
    *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = v57;
    uint64_t v46 = sub_100094CA4();
    unint64_t v47 = v59;
    *(void *)(v45 + 56) = &type metadata for String;
    *(void *)(v45 + 64) = v47;
    *(void *)(v45 + 32) = v46;
    *(void *)(v45 + 40) = v48;
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Found device: %@", 16LL, 2LL, v45);
    swift_bridgeObjectRelease(v45);
    id v49 = sub_1000B1A88();
    sub_1000A7CD4(v41, type metadata accessor for DeviceRecord);
    uint64_t v50 = *v54;
    *uint64_t v54 = v49;
  }

uint64_t sub_1000B2CA4(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  NSString v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v10 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_10020BEB8, 32LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_1000C9B94;
  uint64_t v24 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020BED0;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v9;
  swift_retain(v10);
  static DispatchQoS.unspecified.getter(a1);
  id v22 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v16 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  uint64_t v17 = v24;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_1000B2ED8(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (result)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = sub_1000AE6C8();
    sub_100149EAC(a2);

    return swift_release(v7);
  }

  return result;
}

uint64_t sub_1000B2FA0()
{
  return sub_1000B2FB4((uint64_t)sub_1000C9B60, (uint64_t)&unk_10020BE80);
}

uint64_t sub_1000B2FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v12 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  aBlock[4] = a1;
  uint64_t v26 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = a2;
  id v13 = _Block_copy(aBlock);
  id v14 = v11;
  uint64_t v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v18 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  uint64_t v19 = v26;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_1000B31C0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = sub_1000AE6C8();
    sub_10014A1E4();

    return swift_release(v5);
  }

  return result;
}

uint64_t sub_1000B3258(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020BE40, (uint64_t)sub_1000C9B54, (uint64_t)&unk_10020BE58);
}

void sub_1000B3274(uint64_t a1, void (*a2)(uint64_t, unint64_t))
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v19, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    id v13 = (void *)Strong;
    uint64_t v14 = sub_1000AE6C8();
    sub_10013A844((uint64_t)v6);
    swift_release(v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      sub_100099358((uint64_t)v6, (uint64_t *)&unk_1002357E0);
      a2(0LL, 0xF000000000000000LL);
    }

    else
    {
      sub_1000C998C((uint64_t)v6, (uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
      uint64_t v15 = (uint64_t *)&v10[*(int *)(v7 + 20)];
      uint64_t v16 = *v15;
      unint64_t v17 = v15[1];
      sub_1000991CC(*v15, v17);
      a2(v16, v17);

      sub_100099394(v16, v17);
      sub_1000A7CD4((uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
    }
  }

  else
  {
    a2(0LL, 0xF000000000000000LL);
  }

uint64_t sub_1000B3438( void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  id v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

void sub_1000B34B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t sub_1000B3508(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020BD50, (uint64_t)sub_1000C9A70, (uint64_t)&unk_10020BD68);
}

uint64_t sub_1000B3524(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v128 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v8 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v119 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v126 = *(void *)(v14 - 8);
  uint64_t v127 = v14;
  __chkstk_darwin(v14);
  uint64_t v125 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  unint64_t v123 = *(void *)(v16 - 8);
  uint64_t v124 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v132, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v19);
  if (!Strong)
  {
    unint64_t v44 = sub_10009E7C0();
    uint64_t v45 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v44, 0LL, 0LL);
    *uint64_t v46 = 0;
    a2();
    return swift_errorRelease(v45);
  }

  uint64_t v115 = v13;
  uint64_t v116 = v11;
  uint64_t v117 = v10;
  uint64_t v118 = v8;
  id v120 = a2;
  uint64_t v121 = a3;
  int v122 = Strong;
  uint64_t v21 = static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v22 = qword_10023DFC0;
  uint64_t v114 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v23 = swift_allocObject(v114, 112LL, 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  id v24 = [a4 bluetoothAddress];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v27 = v26;

  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v28 = sub_10009914C();
  *(void *)(v23 + 64) = v28;
  *(void *)(v23 + 32) = v25;
  *(void *)(v23 + 40) = v27;
  id v29 = a4;
  id v30 = [v29 description];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  *(void *)(v23 + 96) = &type metadata for String;
  *(void *)(v23 + 104) = v28;
  *(void *)(v23 + 72) = v31;
  *(void *)(v23 + 80) = v33;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "addDevice(%@): %@", 17LL, 2LL, v23);
  swift_bridgeObjectRelease(v23);
  id v34 = [v29 bluetoothAddress];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  unint64_t v37 = v36;

  swift_bridgeObjectRelease(v37);
  uint64_t v38 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000LL) == 0) {
    uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v39 = v121;
  if (!v38) {
    goto LABEL_12;
  }
  id v40 = [v29 bluetoothAddress];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v43 = v42;

  if (v41 == 0xD000000000000011LL && v43 == 0x80000001001CCC20LL)
  {
    swift_bridgeObjectRelease(0x80000001001CCC20LL);
LABEL_12:
    id v49 = v122;
    uint64_t v50 = *(void **)&v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v51 = (void *)swift_allocObject(&unk_10020BDA0, 40LL, 7LL);
    uint64_t v52 = (uint64_t)v120;
    v51[2] = v29;
    v51[3] = v52;
    v51[4] = v39;
    aBlock[4] = sub_1000C9AC0;
    uint64_t v130 = v51;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = &unk_10020BDB8;
    uint64_t v53 = _Block_copy(aBlock);
    id v54 = v29;
    id v55 = v50;
    uint64_t v56 = swift_retain(v39);
    static DispatchQoS.unspecified.getter(v56);
    uint64_t v131 = _swiftEmptyArrayStorage;
    uint64_t v57 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v58 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v59 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    id v60 = v125;
    uint64_t v61 = v58;
    uint64_t v62 = v127;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v131, v61, v59, v127, v57);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v60, v53);
    _Block_release(v53);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v60, v62);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v18, v124);
    return swift_release(v130);
  }

  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
  swift_bridgeObjectRelease(v43);
  if ((v48 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v63 = &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
  swift_beginAccess(&v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap], aBlock, 0LL, 0LL);
  uint64_t v64 = *(void *)v63;
  uint64_t v65 = *(void *)v63 + 64LL;
  uint64_t v66 = 1LL << *(_BYTE *)(*(void *)v63 + 32LL);
  uint64_t v67 = -1LL;
  if (v66 < 64) {
    uint64_t v67 = ~(-1LL << v66);
  }
  unint64_t v68 = v67 & *(void *)(*(void *)v63 + 64LL);
  int64_t v69 = (unint64_t)(v66 + 63) >> 6;
  uint64_t v125 = *(char **)v63;
  uint64_t result = swift_bridgeObjectRetain(v64);
  int64_t v70 = 0LL;
  uint64_t v112 = v65;
  int64_t v111 = v69;
  if (!v68) {
    goto LABEL_17;
  }
LABEL_16:
  unint64_t v71 = __clz(__rbit64(v68));
  uint64_t v72 = (v68 - 1) & v68;
  for (unint64_t i = v71 | (v70 << 6); ; unint64_t i = __clz(__rbit64(v75)) + (v70 << 6))
  {
    uint64_t v77 = *(void *)(*((void *)v125 + 7) + 8 * i);
    uint64_t v78 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v77);
    id v79 = [v78 isFirstUnlocked];
    unint64_t v123 = v72;
    uint64_t v124 = v70;
    uint64_t v126 = v77;
    uint64_t v80 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v81 = v117;
    uint64_t v82 = sub_100098D58(v117, (uint64_t)qword_10023DCC0);
    uint64_t v83 = v116;
    uint64_t v84 = (uint64_t)v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v115, v82, v81);
    id v85 = sub_100138AA0(v84);
    swift_release(v80);
    uint64_t v86 = v81;
    uint64_t v87 = v85;
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v86);
    uint64_t v88 = v85[2];
    if (v88) {
      goto LABEL_37;
    }
LABEL_48:
    swift_release(v126);
    uint64_t result = swift_bridgeObjectRelease(v87);
LABEL_49:
    unint64_t v68 = v123;
    int64_t v70 = v124;
    if (v123) {
      goto LABEL_16;
    }
LABEL_17:
    int64_t v74 = v70 + 1;
    if (__OFADD__(v70, 1LL))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      return result;
    }

    if (v74 >= v69) {
      goto LABEL_53;
    }
    unint64_t v75 = *(void *)(v65 + 8 * v74);
    ++v70;
    if (!v75)
    {
      int64_t v70 = v74 + 1;
      if (v74 + 1 >= v69) {
        goto LABEL_53;
      }
      unint64_t v75 = *(void *)(v65 + 8 * v70);
      if (!v75)
      {
        int64_t v70 = v74 + 2;
        if (v74 + 2 >= v69) {
          goto LABEL_53;
        }
        unint64_t v75 = *(void *)(v65 + 8 * v70);
        if (!v75)
        {
          int64_t v70 = v74 + 3;
          if (v74 + 3 >= v69) {
            goto LABEL_53;
          }
          unint64_t v75 = *(void *)(v65 + 8 * v70);
          if (!v75)
          {
            int64_t v76 = v74 + 4;
            if (v76 >= v69)
            {
LABEL_53:
              swift_release(v125);
              id v108 = v122;
              uint64_t v109 = sub_1000AE6C8();
              swift_unknownObjectWeakInit(&v131, v108);
              swift_retain(v39);
              sub_1001671C4(v29, v109, (uint64_t)&v131, (uint64_t)v120, v39);
              swift_release(v39);

              swift_release(v109);
              return swift_unknownObjectWeakDestroy(&v131);
            }

            unint64_t v75 = *(void *)(v65 + 8 * v76);
            if (!v75)
            {
              while (1)
              {
                int64_t v70 = v76 + 1;
                if (__OFADD__(v76, 1LL)) {
                  goto LABEL_55;
                }
                if (v70 >= v69) {
                  goto LABEL_53;
                }
                unint64_t v75 = *(void *)(v65 + 8 * v70);
                ++v76;
                if (v75) {
                  goto LABEL_32;
                }
              }
            }

            int64_t v70 = v76;
          }
        }
      }
    }

uint64_t sub_1000B3F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020BDF0, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020BE08);
}

uint64_t sub_1000B3F64(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020BC60, (uint64_t)sub_1000C9A0C, (uint64_t)&unk_10020BC78);
}

uint64_t sub_1000B3F80(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v118 = *(void *)(v12 - 8);
  uint64_t v119 = v12;
  __chkstk_darwin(v12);
  uint64_t v117 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v125 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  int64_t v123 = *(void *)(v17 - 8);
  uint64_t v124 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v131, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v20);
  if (!Strong)
  {
    unint64_t v31 = sub_10009E7C0();
    uint64_t v32 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v31, 0LL, 0LL);
    *uint64_t v33 = 0;
    a2();
    return swift_errorRelease(v32);
  }

  uint64_t v126 = v8;
  uint64_t v116 = v9;
  id v120 = a2;
  uint64_t v121 = a3;
  int v122 = Strong;
  id v22 = [a4 bluetoothAddress];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v25 = v24;

  swift_bridgeObjectRelease(v25);
  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    uint64_t v127 = a4;
    id v27 = [a4 bluetoothAddress];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    if (v28 == 0xD000000000000011LL && v30 == 0x80000001001CCC20LL)
    {
      swift_bridgeObjectRelease(0x80000001001CCC20LL);
      a4 = v127;
    }

    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
      swift_bridgeObjectRelease(v30);
      a4 = v127;
      unint64_t v36 = &selRef__inCaseLidClosed_;
      if ((v35 & 1) == 0)
      {
        uint64_t v50 = &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
        swift_beginAccess( &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap],  aBlock,  0LL,  0LL);
        uint64_t v51 = *(void *)v50;
        uint64_t v52 = *(void *)v50 + 64LL;
        uint64_t v53 = 1LL << *(_BYTE *)(*(void *)v50 + 32LL);
        uint64_t v54 = -1LL;
        if (v53 < 64) {
          uint64_t v54 = ~(-1LL << v53);
        }
        unint64_t v55 = v54 & *(void *)(*(void *)v50 + 64LL);
        int64_t v112 = (unint64_t)(v53 + 63) >> 6;
        uint64_t v124 = v51;
        swift_bridgeObjectRetain(v51);
        int64_t v56 = 0LL;
        uint64_t v57 = type metadata accessor for DeviceRecord;
        uint64_t v58 = a4;
        uint64_t v59 = v116;
        uint64_t v113 = v52;
        if (!v55) {
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v115 = (v55 - 1) & v55;
        int64_t v123 = v56;
        for (unint64_t i = __clz(__rbit64(v55)) | (v56 << 6); ; unint64_t i = __clz(__rbit64(v62)) + (v63 << 6))
        {
          uint64_t v65 = *(void *)(*(void *)(v124 + 56) + 8 * i);
          uint64_t v66 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
          swift_retain(v65);
          id v67 = [v66 isFirstUnlocked];
          uint64_t v125 = v65;
          if ((_DWORD)v67)
          {
            unint64_t v68 = v57;
            uint64_t v69 = sub_10013A76C();
            if (qword_100234B30 != -1) {
              swift_once(&qword_100234B30, sub_100094AFC);
            }
            uint64_t v70 = v119;
            uint64_t v71 = sub_100098D58(v119, (uint64_t)qword_10023DCC0);
            uint64_t v73 = (uint64_t)v117;
            uint64_t v72 = v118;
            (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v117, v71, v70);
            int64_t v74 = sub_100138AA0(v73);
            swift_release(v69);
            uint64_t v75 = v70;
            int64_t v76 = v74;
            (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v75);
            uint64_t v57 = v68;
            uint64_t v52 = v113;
            uint64_t v77 = v74[2];
            if (v77) {
              goto LABEL_36;
            }
          }

          else
          {
            uint64_t v90 = static os_log_type_t.error.getter(v67);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v91 = v90;
            int64_t v76 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v91,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
            uint64_t v77 = _swiftEmptyArrayStorage[2];
            if (v77)
            {
LABEL_36:
              uint64_t v78 = (uint64_t)v76
                  + ((*(unsigned __int8 *)(v59 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
              uint64_t v114 = v76;
              swift_bridgeObjectRetain(v76);
              uint64_t v79 = *(void *)(v59 + 72);
              while (1)
              {
                sub_1000A7C90(v78, (uint64_t)v11, v57);
                uint64_t v80 = &v11[*(int *)(v126 + 24)];
                uint64_t v81 = v57;
                uint64_t v83 = *(void *)v80;
                uint64_t v82 = *((void *)v80 + 1);
                id v84 = [v58 v36[402]];
                uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
                uint64_t v87 = v86;

                if (v83 == v85 && v82 == v87) {
                  break;
                }
                char v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v82, v85, v87, 0LL);
                swift_bridgeObjectRelease(v87);
                sub_1000A7CD4((uint64_t)v11, v81);
                if ((v89 & 1) != 0) {
                  goto LABEL_51;
                }
                uint64_t v57 = v81;
                v78 += v79;
                --v77;
                uint64_t v58 = v127;
                unint64_t v36 = &selRef__inCaseLidClosed_;
                if (!v77)
                {
                  swift_release(v125);
                  swift_bridgeObjectRelease_n(v114, 2LL);
                  uint64_t v59 = v116;
                  uint64_t v52 = v113;
                  goto LABEL_48;
                }
              }

              swift_bridgeObjectRelease(v82);
              sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
LABEL_51:
              uint64_t v92 = swift_bridgeObjectRelease_n(v114, 2LL);
              uint64_t v93 = static os_log_type_t.error.getter(v92);
              uint64_t v94 = v127;
              if (qword_100234C20 != -1) {
                swift_once(&qword_100234C20, sub_10018A978);
              }
              uint64_t v95 = qword_10023DFC0;
              uint64_t v96 = sub_100098CD8((uint64_t *)&unk_100234E00);
              uint64_t v97 = swift_allocObject(v96, 72LL, 7LL);
              *(_OWORD *)(v97 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
              *(void *)(v97 + 56) = sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
              *(void *)(v97 + 64) = sub_1000C934C(&qword_100235858, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
              *(void *)(v97 + 32) = v94;
              id v98 = v94;
              os_log(_:dso:log:_:_:)( v93,  &_mh_execute_header,  v95,  "CloudSync: Cannot Modify Secondary Cloud DeviceRecord: %@",  57LL,  2LL,  v97);
              swift_release(v124);

              swift_release(v125);
              return swift_bridgeObjectRelease(v97);
            }
          }

          swift_release(v125);
          swift_bridgeObjectRelease(v76);
LABEL_48:
          int64_t v56 = v123;
          unint64_t v55 = v115;
          if (v115) {
            goto LABEL_15;
          }
LABEL_16:
          int64_t v61 = v56 + 1;
          if (__OFADD__(v56, 1LL))
          {
            __break(1u);
            goto LABEL_57;
          }

          if (v61 >= v112) {
            goto LABEL_54;
          }
          unint64_t v62 = *(void *)(v52 + 8 * v61);
          int64_t v63 = v56 + 1;
          if (!v62)
          {
            int64_t v63 = v56 + 2;
            if (v56 + 2 >= v112) {
              goto LABEL_54;
            }
            unint64_t v62 = *(void *)(v52 + 8 * v63);
            if (!v62)
            {
              int64_t v63 = v56 + 3;
              if (v56 + 3 >= v112) {
                goto LABEL_54;
              }
              unint64_t v62 = *(void *)(v52 + 8 * v63);
              if (!v62)
              {
                int64_t v63 = v56 + 4;
                if (v56 + 4 >= v112) {
                  goto LABEL_54;
                }
                unint64_t v62 = *(void *)(v52 + 8 * v63);
                if (!v62)
                {
                  uint64_t v64 = v56 + 5;
                  if (v56 + 5 >= v112)
                  {
LABEL_54:
                    uint64_t v99 = swift_release(v124);
                    unint64_t v55 = static os_log_type_t.default.getter(v99);
                    if (qword_100234C20 != -1) {
                      goto LABEL_58;
                    }
                    goto LABEL_55;
                  }

                  unint64_t v62 = *(void *)(v52 + 8 * v64);
                  if (!v62)
                  {
                    while (1)
                    {
                      int64_t v63 = v64 + 1;
                      if (__OFADD__(v64, 1LL)) {
                        break;
                      }
                      if (v63 >= v112) {
                        goto LABEL_54;
                      }
                      unint64_t v62 = *(void *)(v52 + 8 * v63);
                      ++v64;
                      if (v62) {
                        goto LABEL_31;
                      }
                    }

LABEL_57:
                    __break(1u);
LABEL_58:
                    swift_once(&qword_100234C20, sub_10018A978);
LABEL_55:
                    uint64_t v100 = qword_10023DFC0;
                    uint64_t v101 = sub_100098CD8((uint64_t *)&unk_100234E00);
                    uint64_t v102 = swift_allocObject(v101, 72LL, 7LL);
                    *(_OWORD *)(v102 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
                    id v103 = v58;
                    id v104 = [v103 description];
                    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
                    uint64_t v107 = v106;

                    *(void *)(v102 + 56) = &type metadata for String;
                    *(void *)(v102 + 64) = sub_10009914C();
                    *(void *)(v102 + 32) = v105;
                    *(void *)(v102 + 40) = v107;
                    os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  v100,  "CloudSync: updateDevice: %@",  27LL,  2LL,  v102);
                    swift_bridgeObjectRelease(v102);
                    id v108 = v122;
                    uint64_t v109 = sub_1000AE6C8();
                    swift_unknownObjectWeakInit(&v130, v108);
                    uint64_t v110 = v121;
                    swift_retain(v121);
                    sub_10016720C(v103, v109, (uint64_t)&v130, (uint64_t)v120, v110);
                    swift_release(v110);

                    swift_unknownObjectWeakDestroy(&v130);
                    uint64_t v49 = v109;
                    return swift_release(v49);
                  }

                  int64_t v63 = v56 + 5;
                }
              }
            }
          }

                    __break(1u);
LABEL_58:
                    swift_once(&qword_100234C20, sub_10018A978);
LABEL_55:
                    uint64_t v100 = qword_10023DFC0;
                    uint64_t v101 = sub_100098CD8((uint64_t *)&unk_100234E00);
                    uint64_t v102 = swift_allocObject(v101, 72LL, 7LL);
                    *(_OWORD *)(v102 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
                    id v103 = v58;
                    id v104 = [v103 description];
                    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
                    uint64_t v107 = v106;

                    *(void *)(v102 + 56) = &type metadata for String;
                    *(void *)(v102 + 64) = sub_10009914C();
                    *(void *)(v102 + 32) = v105;
                    *(void *)(v102 + 40) = v107;
                    os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  v100,  "CloudSync: updateDeviceSupportInformation: %@",  45LL,  2LL,  v102);
                    swift_bridgeObjectRelease(v102);
                    id v108 = v122;
                    uint64_t v109 = sub_1000AE6C8();
                    swift_unknownObjectWeakInit(&v130, v108);
                    uint64_t v110 = v121;
                    swift_retain(v121);
                    sub_100172F18(v103, v109, (uint64_t)&v130, (uint64_t)v120, v110);
                    swift_release(v110);

                    swift_unknownObjectWeakDestroy(&v130);
                    uint64_t v49 = v109;
                    return swift_release(v49);
                  }

                  int64_t v63 = v56 + 5;
                }
              }
            }
          }

                    __break(1u);
LABEL_58:
                    swift_once(&qword_100234C20, sub_10018A978);
LABEL_55:
                    uint64_t v100 = qword_10023DFC0;
                    uint64_t v101 = sub_100098CD8((uint64_t *)&unk_100234E00);
                    uint64_t v102 = swift_allocObject(v101, 72LL, 7LL);
                    *(_OWORD *)(v102 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
                    id v103 = v58;
                    id v104 = [v103 description];
                    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
                    uint64_t v107 = v106;

                    *(void *)(v102 + 56) = &type metadata for String;
                    *(void *)(v102 + 64) = sub_10009914C();
                    *(void *)(v102 + 32) = v105;
                    *(void *)(v102 + 40) = v107;
                    os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  v100,  "CloudSync: updateDeviceMagicSettings: %@",  40LL,  2LL,  v102);
                    swift_bridgeObjectRelease(v102);
                    id v108 = v122;
                    uint64_t v109 = sub_1000AE6C8();
                    swift_unknownObjectWeakInit(&v130, v108);
                    uint64_t v110 = v121;
                    swift_retain(v121);
                    sub_10017CD98(v103, v109, (uint64_t)&v130, (uint64_t)v120, v110);
                    swift_release(v110);

                    swift_unknownObjectWeakDestroy(&v130);
                    uint64_t v49 = v109;
                    return swift_release(v49);
                  }

                  int64_t v63 = v56 + 5;
                }
              }
            }
          }

                uint64_t v58 = v66;
LABEL_58:
                unint64_t v62 = (v65 - 1) & v65;
                uint64_t v64 = __clz(__rbit64(v65)) + (v58 << 6);
                goto LABEL_59;
              }
            }
          }
        }
      }

  __break(1u);
  return result;
}

uint64_t sub_1000B49A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020BD00, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020BD18);
}

uint64_t sub_1000B49E0( void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  id v14 = a3;
  id v15 = a1;
  a7(v14, a6, v13);

  return swift_release(v13);
}

uint64_t sub_1000B4A70(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020BB20, (uint64_t)sub_1000C9980, (uint64_t)&unk_10020BB38);
}

uint64_t sub_1000B4A8C(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  v183 = a4;
  uint64_t v161 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  v159 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v158 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v9);
  uint64_t v162 = (uint64_t)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v170 = (uint64_t)&v154 - v12;
  uint64_t v13 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  v163 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v155 = (uint64_t)&v154 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v154 - v19;
  __chkstk_darwin(v21);
  v171 = (char *)&v154 - v22;
  __chkstk_darwin(v23);
  unint64_t v25 = (char *)&v154 - v24;
  uint64_t v176 = type metadata accessor for URL(0LL);
  uint64_t v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 16, v188, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1 + 16, v27);
  if (!Strong)
  {
    unint64_t v66 = sub_10009E7C0();
    uint64_t v67 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v66, 0LL, 0LL);
    *unint64_t v68 = 0;
    a2();
    return swift_errorRelease(v67);
  }

  v154 = a2;
  v181 = v20;
  v166 = Strong;
  uint64_t v29 = (uint64_t *)&Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
  swift_beginAccess(&Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap], v187, 0LL, 0LL);
  uint64_t v30 = *v29;
  uint64_t v31 = *(void *)(*v29 + 64);
  uint64_t v167 = *v29 + 64;
  uint64_t v32 = 1LL << *(_BYTE *)(v30 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & v31;
  int64_t v168 = (unint64_t)(v32 + 63) >> 6;
  swift_bridgeObjectRetain(v30);
  int64_t v35 = 0LL;
  uint64_t v182 = v13;
  uint64_t v164 = a3;
  uint64_t v169 = v14;
  uint64_t v179 = v30;
  if (!v34) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v177 = (v34 - 1) & v34;
  int64_t v178 = v35;
  for (unint64_t i = __clz(__rbit64(v34)) | (v35 << 6); ; unint64_t i = __clz(__rbit64(v38)) + (v39 << 6))
  {
    uint64_t v41 = *(void *)(*(void *)(v30 + 56) + 8 * i);
    uint64_t v42 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v41);
    id v173 = v42;
    id v43 = [v42 isFirstUnlocked];
    uint64_t v180 = v41;
    if ((_DWORD)v43)
    {
      uint64_t v44 = v14;
      uint64_t v45 = a3;
      uint64_t v46 = sub_10013A76C();
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      uint64_t v47 = v176;
      uint64_t v48 = sub_100098D58(v176, (uint64_t)qword_10023DCC0);
      uint64_t v49 = v175;
      uint64_t v50 = (uint64_t)v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v48, v47);
      uint64_t v51 = sub_100138AA0(v50);
      uint64_t v52 = v46;
      uint64_t v53 = v51;
      swift_release(v52);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v47);
      a3 = v45;
      uint64_t v14 = v44;
      uint64_t v30 = v179;
      uint64_t v54 = v53[2];
      if (v54) {
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v65 = static os_log_type_t.error.getter(v43);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v65,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v53 = _swiftEmptyArrayStorage;
      uint64_t v54 = _swiftEmptyArrayStorage[2];
      if (v54)
      {
LABEL_26:
        unint64_t v165 = (*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
        uint64_t v55 = (uint64_t)v53 + v165;
        v172 = v53;
        swift_bridgeObjectRetain(v53);
        a3 = *(void *)(v14 + 72);
        while (1)
        {
          sub_1000A7C90(v55, (uint64_t)v25, type metadata accessor for DeviceRecord);
          int64_t v56 = &v25[*(int *)(v13 + 24)];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          id v59 = [v183 bluetoothAddress];
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          uint64_t v62 = v61;

          if (v58 == v60 && v57 == v62) {
            break;
          }
          char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v57, v60, v62, 0LL);
          swift_bridgeObjectRelease(v62);
          sub_1000A7CD4((uint64_t)v25, type metadata accessor for DeviceRecord);
          if ((v64 & 1) != 0) {
            goto LABEL_42;
          }
          v55 += a3;
          --v54;
          uint64_t v13 = v182;
          if (!v54)
          {
            swift_release(v180);
            swift_bridgeObjectRelease_n(v172, 2LL);
            a3 = v164;
            uint64_t v14 = v169;
            uint64_t v30 = v179;
            goto LABEL_38;
          }
        }

        swift_bridgeObjectRelease(v57);
        sub_1000A7CD4((uint64_t)v25, type metadata accessor for DeviceRecord);
LABEL_42:
        swift_bridgeObjectRelease_n(v172, 2LL);
        id v70 = [v173 isFirstUnlocked];
        uint64_t v13 = v182;
        if ((_DWORD)v70)
        {
          unint64_t v34 = sub_10013A76C();
          if (qword_100234B30 != -1) {
            goto LABEL_93;
          }
          goto LABEL_44;
        }

        uint64_t v76 = static os_log_type_t.error.getter(v70);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        uint64_t v75 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v76,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_48:
        uint64_t v77 = v179;
        uint64_t v78 = v75[2];
        if (v78)
        {
          uint64_t v79 = (uint64_t)v75 + v165;
          swift_bridgeObjectRetain(v75);
          uint64_t v80 = (uint64_t)v181;
          while (1)
          {
            sub_1000A7C90(v79, v80, type metadata accessor for DeviceRecord);
            uint64_t v81 = (uint64_t *)(v80 + *(int *)(v13 + 24));
            uint64_t v82 = *v81;
            uint64_t v83 = (void *)v81[1];
            id v84 = [v183 bluetoothAddress];
            uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
            uint64_t v87 = v86;

            if (v82 == v85 && v83 == v87)
            {
              swift_bridgeObjectRelease(v75);
              goto LABEL_61;
            }

            char v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, v85, v87, 0LL);
            swift_bridgeObjectRelease(v87);
            if ((v89 & 1) != 0) {
              break;
            }
            uint64_t v80 = (uint64_t)v181;
            sub_1000A7CD4((uint64_t)v181, type metadata accessor for DeviceRecord);
            v79 += a3;
            --v78;
            uint64_t v13 = v182;
            if (!v78)
            {
              swift_bridgeObjectRelease(v75);
              uint64_t v90 = 1LL;
              uint64_t v91 = v169;
              uint64_t v92 = (uint64_t)v171;
              uint64_t v77 = v179;
              goto LABEL_58;
            }
          }

          uint64_t v83 = v75;
LABEL_61:
          uint64_t v91 = v169;
          uint64_t v92 = (uint64_t)v171;
          swift_bridgeObjectRelease(v83);
          uint64_t v93 = v170;
          sub_1000C998C((uint64_t)v181, v170, type metadata accessor for DeviceRecord);
          uint64_t v90 = 0LL;
          uint64_t v13 = v182;
          uint64_t v77 = v179;
        }

        else
        {
          uint64_t v90 = 1LL;
          uint64_t v91 = v169;
          uint64_t v92 = (uint64_t)v171;
LABEL_58:
          uint64_t v93 = v170;
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v93, v90, 1LL, v13);
        swift_bridgeObjectRelease(v75);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v93, 1LL, v13) == 1)
        {

          swift_release(v180);
          swift_release(v77);
          return sub_100099358(v93, &qword_100235848);
        }

        uint64_t v94 = sub_1000C998C(v93, v92, type metadata accessor for DeviceRecord);
        uint64_t v95 = static os_log_type_t.error.getter(v94);
        if (qword_100234C20 != -1) {
          swift_once(&qword_100234C20, sub_10018A978);
        }
        uint64_t v96 = qword_10023DFC0;
        uint64_t v97 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v98 = swift_allocObject(v97, 72LL, 7LL);
        *(_OWORD *)(v98 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        *(void *)(v98 + 56) = sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        *(void *)(v98 + 64) = sub_1000C934C(&qword_100235858, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        id v99 = v183;
        *(void *)(v98 + 32) = v183;
        id v100 = v99;
        os_log(_:dso:log:_:_:)( v95,  &_mh_execute_header,  v96,  "CloudSync: Remove Secondary Cloud DeviceRecord: %@",  50LL,  2LL,  v98);
        swift_bridgeObjectRelease(v98);
        id v101 = v166;
        swift_unknownObjectWeakInit(aBlock, v166);
        uint64_t v102 = v164;
        swift_retain(v164);
        uint64_t v103 = v180;
        sub_100167DC4(v92, v180, (uint64_t)aBlock, (uint64_t)v154, v102);

        swift_release(v102);
        swift_release(v103);
        sub_1000A7CD4(v92, type metadata accessor for DeviceRecord);
        swift_release(v77);
        return swift_unknownObjectWeakDestroy(aBlock);
      }
    }

    swift_release(v180);
    swift_bridgeObjectRelease(v53);
LABEL_38:
    unint64_t v34 = v177;
    int64_t v35 = v178;
    if (v177) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v37 = v35 + 1;
    if (__OFADD__(v35, 1LL))
    {
      __break(1u);
LABEL_93:
      swift_once(&qword_100234B30, sub_100094AFC);
LABEL_44:
      uint64_t v71 = v176;
      uint64_t v72 = sub_100098D58(v176, (uint64_t)qword_10023DCC0);
      uint64_t v73 = v175;
      uint64_t v74 = (uint64_t)v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v72, v71);
      uint64_t v75 = sub_100138AA0(v74);
      swift_release(v34);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v71);
      goto LABEL_48;
    }

    if (v37 >= v168) {
      break;
    }
    unint64_t v38 = *(void *)(v167 + 8 * v37);
    int64_t v39 = v35 + 1;
    if (v38) {
      goto LABEL_21;
    }
    int64_t v39 = v35 + 2;
    if (v35 + 2 >= v168) {
      break;
    }
    unint64_t v38 = *(void *)(v167 + 8 * v39);
    if (v38) {
      goto LABEL_21;
    }
    int64_t v39 = v35 + 3;
    if (v35 + 3 >= v168) {
      break;
    }
    unint64_t v38 = *(void *)(v167 + 8 * v39);
    if (v38) {
      goto LABEL_21;
    }
    int64_t v39 = v35 + 4;
    if (v35 + 4 >= v168) {
      break;
    }
    unint64_t v38 = *(void *)(v167 + 8 * v39);
    if (v38) {
      goto LABEL_21;
    }
    uint64_t v40 = v35 + 5;
    if (v35 + 5 >= v168) {
      break;
    }
    unint64_t v38 = *(void *)(v167 + 8 * v40);
    if (!v38)
    {
      while (1)
      {
        int64_t v39 = v40 + 1;
        if (__OFADD__(v40, 1LL)) {
          break;
        }
        if (v39 >= v168) {
          goto LABEL_68;
        }
        unint64_t v38 = *(void *)(v167 + 8 * v39);
        ++v40;
        if (v38) {
          goto LABEL_21;
        }
      }

      __break(1u);
      goto LABEL_95;
    }

    int64_t v39 = v35 + 5;
LABEL_21:
    uint64_t v177 = (v38 - 1) & v38;
    int64_t v178 = v39;
  }

uint64_t sub_1000B5BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020BC10, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020BC28);
}

uint64_t sub_1000B5BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020BBC0, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020BBD8);
}

uint64_t sub_1000B5BF8(void (*a1)(void))
{
  unint64_t v2 = sub_10009E7C0();
  uint64_t v3 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v2, 0LL, 0LL);
  *uint64_t v4 = 3;
  a1();
  return swift_errorRelease(v3);
}

uint64_t sub_1000B5C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BC714(a1, a2, a3, a4, (uint64_t)&unk_10020BA30, (uint64_t)sub_1000C9964, (uint64_t)&unk_10020BA48);
}

uint64_t sub_1000B5C88( uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t a1), uint64_t a4, uint64_t a5)
{
  uint64_t v80 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v76 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v72 = *(void *)(v12 - 8);
  uint64_t v73 = v12;
  __chkstk_darwin(v12);
  uint64_t v71 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v82, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v14);
  if (!Strong)
  {
    unint64_t v63 = sub_10009E7C0();
    uint64_t v64 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v63, 0LL, 0LL);
    *uint64_t v65 = 0;
    a2();
    return swift_errorRelease(v64);
  }

  id v70 = a2;
  uint64_t v67 = a3;
  uint64_t v69 = (void *)Strong;
  uint64_t v16 = Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap;
  swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v81, 0LL, 0LL);
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(*(void *)v16 + 64LL);
  uint64_t v74 = *(void *)v16 + 64LL;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v75 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v77 = v17;
  swift_bridgeObjectRetain(v17);
  int64_t v22 = 0LL;
  uint64_t v23 = type metadata accessor for DeviceRecord;
  __int128 v68 = xmmword_1001A5EA0;
  while (1)
  {
    if (v21)
    {
      uint64_t v78 = (v21 - 1) & v21;
      int64_t v79 = v22;
      unint64_t v24 = __clz(__rbit64(v21)) | (v22 << 6);
      goto LABEL_25;
    }

    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    if (v25 >= v75) {
      goto LABEL_45;
    }
    unint64_t v26 = *(void *)(v74 + 8 * v25);
    int64_t v27 = v22 + 1;
    if (!v26)
    {
      int64_t v27 = v22 + 2;
      if (v22 + 2 >= v75) {
        goto LABEL_45;
      }
      unint64_t v26 = *(void *)(v74 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v22 + 3;
        if (v22 + 3 >= v75) {
          goto LABEL_45;
        }
        unint64_t v26 = *(void *)(v74 + 8 * v27);
        if (!v26)
        {
          int64_t v27 = v22 + 4;
          if (v22 + 4 >= v75) {
            goto LABEL_45;
          }
          unint64_t v26 = *(void *)(v74 + 8 * v27);
          if (!v26) {
            break;
          }
        }
      }
    }

uint64_t sub_1000B63B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BFB48(a1, a2, a3, a4, (uint64_t)&unk_10020BAD0, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020BAE8);
}

uint64_t sub_1000B63D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BFB48(a1, a2, a3, a4, (uint64_t)&unk_10020BA80, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020BA98);
}

uint64_t sub_1000B6408( void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  id v17 = a1;
  a7(v13, v15, a6, v16);

  swift_bridgeObjectRelease(v15);
  return swift_release(v16);
}

uint64_t sub_1000B64B0(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020B990, (uint64_t)sub_1000C9904, (uint64_t)&unk_10020B9A8);
}

uint64_t sub_1000B64CC(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v6);
  uint64_t v135 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v133 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v132 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  id v129 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v140 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v136 = (uint64_t)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  id v139 = (char *)&v128 - v13;
  __chkstk_darwin(v14);
  uint64_t v141 = (char *)&v128 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v128 - v17;
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v128 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v128 - v23;
  uint64_t v151 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v147 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v134 = (uint64_t)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v128 - v27;
  __chkstk_darwin(v29);
  uint64_t v153 = (uint64_t)&v128 - v30;
  id v31 = (uint64_t (*)(uint64_t))type metadata accessor for URL(0LL);
  *(void *)&__int128 v150 = *((void *)v31 - 1);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v128 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v158, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v34);
  uint64_t v145 = (char *)Strong;
  if (!Strong) {
    return a2();
  }
  uint64_t v137 = a2;
  uint64_t v138 = a3;
  uint64_t v128 = v8;
  uint64_t v36 = (uint64_t (*)(uint64_t))static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    goto LABEL_66;
  }
  while (1)
  {
    os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_10023DFC0,  "fetchDeviceSupportInformationRecords",  36LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v157 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v37 = sub_1000AE6C8();
    id v38 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    uint64_t v39 = (uint64_t)v141;
    if ((_DWORD)v38)
    {
      unint64_t v149 = v37;
      uint64_t v40 = sub_10013A76C();
      if (qword_100234BC8 != -1) {
        swift_once(&qword_100234BC8, sub_1000E72E4);
      }
      uint64_t v41 = sub_100098D58((uint64_t)v31, (uint64_t)qword_10023DF00);
      uint64_t v42 = v150;
      (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t)))(v150 + 16))(v33, v41, v31);
      uint64_t v43 = sub_100138AC4((uint64_t)v33);
      swift_release(v40);
      (*(void (**)(char *, uint64_t (*)(uint64_t)))(v42 + 8))(v33, v31);
      uint64_t v37 = v149;
    }

    else
    {
      uint64_t v45 = static os_log_type_t.error.getter(v38);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v43 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v37);
    uint64_t v144 = v43[2];
    if (!v144) {
      break;
    }
    unint64_t v46 = 0LL;
    uint64_t v142 = (char *)v43 + ((*(unsigned __int8 *)(v147 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
    id v31 = type metadata accessor for DeviceSupportInformationRecord;
    uint64_t v36 = type metadata accessor for BTDeferredRecord;
    unint64_t v149 = (unint64_t)"SoundProfileRecord";
    *(void *)&__int128 v150 = 0x80000001001CABA0LL;
    id v143 = v43;
    while (v46 < v43[2])
    {
      uint64_t v47 = *(void *)(v147 + 72);
      unint64_t v148 = v46;
      sub_1000A7C90((uint64_t)&v142[v47 * v46], v153, type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v48 = sub_1000AE6C8();
      uint64_t v49 = sub_10013BA34();
      swift_release(v48);
      uint64_t v50 = *(void *)(v49 + 16);
      if (v50)
      {
        uint64_t v51 = v140;
        uint64_t v52 = v49;
        uint64_t v33 = (char *)(v49
                     + ((*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80)));
        uint64_t v146 = v52;
        swift_bridgeObjectRetain(v52);
        uint64_t v53 = *(void *)(v51 + 72);
        while (1)
        {
          sub_1000A7C90((uint64_t)v33, (uint64_t)v24, type metadata accessor for BTDeferredRecord);
          uint64_t v54 = *((void *)v24 + 1);
          uint64_t v55 = *((void *)v24 + 2);
          if (v54 == 0xD00000000000001ELL && v55 == (void)v150)
          {
            sub_1000A7C90((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000A7C90(v153, (uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
          }

          else
          {
            char v56 = _stringCompareWithSmolCheck(_:_:expecting:)( v54,  v55,  0xD00000000000001ELL,  v149 | 0x8000000000000000LL,  0LL);
            sub_1000A7C90((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000A7C90(v153, (uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
            if ((v56 & 1) == 0)
            {
              sub_1000A7CD4((uint64_t)v21, type metadata accessor for BTDeferredRecord);
              sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
              sub_1000A7C90((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
              goto LABEL_20;
            }
          }

          uint64_t v57 = &v21[*(int *)(v152 + 28)];
          uint64_t v58 = *(void *)v57;
          uint64_t v59 = *((void *)v57 + 1);
          uint64_t v60 = &v28[*(int *)(v151 + 24)];
          uint64_t v61 = *((void *)v60 + 1);
          if (v58 == *(void *)v60 && v59 == v61)
          {
            sub_1000A7CD4((uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
            sub_1000A7C90((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
LABEL_33:
            if (*v18 == 1)
            {
              swift_bridgeObjectRelease(0xE600000000000000LL);
              sub_1000A7CD4((uint64_t)v18, type metadata accessor for BTDeferredRecord);
              sub_1000A7CD4((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_14:
              swift_bridgeObjectRelease_n(v146, 2LL);
              uint64_t v39 = (uint64_t)v141;
              goto LABEL_15;
            }

            char v64 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x657461647075LL,  0xE600000000000000LL,  0x6574656C6564LL,  0xE600000000000000LL,  0LL);
            swift_bridgeObjectRelease(0xE600000000000000LL);
            sub_1000A7CD4((uint64_t)v18, type metadata accessor for BTDeferredRecord);
            sub_1000A7CD4((uint64_t)v24, type metadata accessor for BTDeferredRecord);
            if ((v64 & 1) != 0) {
              goto LABEL_14;
            }
            goto LABEL_21;
          }

          char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, *(void *)v60, v61, 0LL);
          sub_1000A7CD4((uint64_t)v21, type metadata accessor for BTDeferredRecord);
          sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
          sub_1000A7C90((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
          if ((v63 & 1) != 0) {
            goto LABEL_33;
          }
LABEL_20:
          sub_1000A7CD4((uint64_t)v18, type metadata accessor for BTDeferredRecord);
          sub_1000A7CD4((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_21:
          v33 += v53;
          if (!--v50)
          {
            swift_bridgeObjectRelease_n(v146, 2LL);
            uint64_t v39 = (uint64_t)v141;
            goto LABEL_38;
          }
        }
      }

      swift_bridgeObjectRelease(v49);
LABEL_38:
      uint64_t v33 = (char *)sub_1000B737C();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      unint64_t v66 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v65 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v66 >= v65 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1LL);
      }
      uint64_t v67 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v66, v33);
      specialized Array._endMutation()(v67);
LABEL_15:
      unint64_t v46 = v148 + 1;
      sub_1000A7CD4(v153, type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v43 = v143;
      if (v46 == v144)
      {
        swift_bridgeObjectRelease(v143);
        goto LABEL_43;
      }
    }

    __break(1u);
LABEL_66:
    swift_once(&qword_100234C20, sub_10018A978);
  }

  swift_bridgeObjectRelease(v43);
LABEL_43:
  uint64_t v68 = sub_1000AE6C8();
  uint64_t v69 = sub_10013BA34();
  swift_release(v68);
  uint64_t v70 = *(void *)(v69 + 16);
  uint64_t v71 = v138;
  uint64_t v72 = v137;
  if (v70)
  {
    unint64_t v149 = 0LL;
    unint64_t v73 = (*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
    uint64_t v144 = v69;
    uint64_t v74 = v69 + v73;
    uint64_t v75 = *(void *)(v140 + 72);
    unint64_t v148 = (unint64_t)"SoundProfileRecord";
    uint64_t v153 = 0x80000001001CABA0LL;
    __int128 v150 = xmmword_1001A5EA0;
    uint64_t v76 = v139;
    uint64_t v146 = v75;
    while (1)
    {
      sub_1000A7C90(v74, v39, type metadata accessor for BTDeferredRecord);
      uint64_t v86 = *(void *)(v39 + 8);
      uint64_t v87 = *(void *)(v39 + 16);
      if (v86 == 0xD00000000000001ELL && v87 == v153)
      {
        sub_1000A7C90(v39, (uint64_t)v76, type metadata accessor for BTDeferredRecord);
      }

      else
      {
        char v88 = _stringCompareWithSmolCheck(_:_:expecting:)( v86,  v87,  0xD00000000000001ELL,  v148 | 0x8000000000000000LL,  0LL);
        sub_1000A7C90(v39, (uint64_t)v76, type metadata accessor for BTDeferredRecord);
        if ((v88 & 1) == 0)
        {
          sub_1000A7CD4((uint64_t)v76, type metadata accessor for BTDeferredRecord);
          goto LABEL_47;
        }
      }

      if ((*v76 & 1) != 0)
      {
        char v89 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6574656C6564LL,  0xE600000000000000LL,  0x657461647075LL,  0xE600000000000000LL,  0LL);
        swift_bridgeObjectRelease(0xE600000000000000LL);
        uint64_t v77 = sub_1000A7CD4((uint64_t)v76, type metadata accessor for BTDeferredRecord);
        if ((v89 & 1) == 0) {
          goto LABEL_47;
        }
      }

      else
      {
        swift_bridgeObjectRelease(0xE600000000000000LL);
        uint64_t v77 = sub_1000A7CD4((uint64_t)v76, type metadata accessor for BTDeferredRecord);
      }

      uint64_t v90 = v39 + *(int *)(v152 + 36);
      unint64_t v91 = *(void *)(v90 + 8);
      if (v91 >> 60 != 15)
      {
        uint64_t v92 = *(void *)v90;
        sub_1000991CC(*(void *)v90, *(void *)(v90 + 8));
        uint64_t v93 = objc_autoreleasePoolPush();
        uint64_t v94 = type metadata accessor for PropertyListDecoder(0LL);
        swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
        uint64_t v95 = PropertyListDecoder.init()();
        uint64_t v96 = sub_100098C98( &qword_100235838,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A8A8C);
        uint64_t v97 = (uint64_t)v135;
        uint64_t v98 = v151;
        unint64_t v99 = v149;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v151, v92, v91, v151, v96);
        if (!v99)
        {
          unint64_t v149 = 0LL;
          swift_release(v95);
          objc_autoreleasePoolPop(v93);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v97, 0LL, 1LL, v98);
          uint64_t v100 = v134;
          uint64_t v101 = sub_1000C998C(v97, v134, type metadata accessor for DeviceSupportInformationRecord);
          uint64_t v102 = static os_log_type_t.default.getter(v101);
          uint64_t v103 = qword_10023DFC0;
          uint64_t v104 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v105 = swift_allocObject(v104, 72LL, 7LL);
          *(_OWORD *)(v105 + swift_unknownObjectWeakDestroy(v0 + 16) = v150;
          Class v106 = sub_1000E7430();
          uint64_t v108 = v107;
          *(void *)(v105 + 56) = &type metadata for String;
          *(void *)(v105 + 64) = sub_10009914C();
          *(void *)(v105 + 32) = v106;
          *(void *)(v105 + 40) = v108;
          os_log(_:dso:log:_:_:)( v102,  &_mh_execute_header,  v103,  "Construct deferred BTCloudDeviceSupportInformation - %@",  55LL,  2LL,  v105);
          swift_bridgeObjectRelease(v105);
          id v109 = sub_1000B737C();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v109);
          unint64_t v111 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v110 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v111 >= v110 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1LL);
          }
          uint64_t v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v111, v109);
          specialized Array._endMutation()(v112);
          sub_1000AC4C0(v92, v91);
          sub_1000A7CD4(v100, type metadata accessor for DeviceSupportInformationRecord);
          uint64_t v71 = v138;
          uint64_t v72 = v137;
          uint64_t v76 = v139;
          uint64_t v39 = (uint64_t)v141;
          uint64_t v75 = v146;
          goto LABEL_47;
        }

        swift_release(v95);
        objc_autoreleasePoolPop(v93);
        swift_errorRelease(v99);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v97, 1LL, 1LL, v98);
        sub_1000AC4C0(v92, v91);
        uint64_t v77 = sub_100099358(v97, &qword_100235828);
        unint64_t v149 = 0LL;
        uint64_t v75 = v146;
      }

      uint64_t v78 = static os_log_type_t.default.getter(v77);
      uint64_t v79 = qword_10023DFC0;
      uint64_t v80 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v81 = swift_allocObject(v80, 72LL, 7LL);
      *(_OWORD *)(v81 + swift_unknownObjectWeakDestroy(v0 + 16) = v150;
      uint64_t v82 = v136;
      sub_1000A7C90(v39, v136, type metadata accessor for BTDeferredRecord);
      uint64_t v83 = String.init<A>(describing:)(v82, v152);
      uint64_t v85 = v84;
      *(void *)(v81 + 56) = &type metadata for String;
      *(void *)(v81 + 64) = sub_10009914C();
      *(void *)(v81 + 32) = v83;
      *(void *)(v81 + 40) = v85;
      os_log(_:dso:log:_:_:)( v78,  &_mh_execute_header,  v79,  "Unable to contruct deferred BTCloudDeviceSupportInformation - %@",  64LL,  2LL,  v81);
      swift_bridgeObjectRelease(v81);
      uint64_t v71 = v138;
      uint64_t v72 = v137;
      uint64_t v76 = v139;
LABEL_47:
      sub_1000A7CD4(v39, type metadata accessor for BTDeferredRecord);
      v74 += v75;
      if (!--v70)
      {
        uint64_t v113 = v144;
        goto LABEL_64;
      }
    }
  }

  uint64_t v113 = v69;
LABEL_64:
  swift_bridgeObjectRelease(v113);
  id v114 = v145;
  uint64_t v115 = *(void **)&v145[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  unint64_t v116 = v157;
  uint64_t v117 = (void *)swift_allocObject(&unk_10020B9E0, 40LL, 7LL);
  v117[2] = v116;
  v117[3] = v72;
  v117[4] = v71;
  aBlock[4] = sub_1000C9928;
  v156 = v117;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020B9F8;
  uint64_t v118 = _Block_copy(aBlock);
  id v119 = v115;
  uint64_t v120 = swift_retain(v71);
  uint64_t v121 = v129;
  static DispatchQoS.unspecified.getter(v120);
  v154 = _swiftEmptyArrayStorage;
  uint64_t v122 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v123 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v124 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  uint64_t v125 = v132;
  uint64_t v126 = v123;
  uint64_t v127 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v126, v124, v128, v122);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v121, v125, v118);
  _Block_release(v118);

  (*(void (**)(char *, uint64_t))(v133 + 8))(v125, v127);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v121, v131);
  return swift_release(v156);
}

id sub_1000B737C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 24) + 8);
  id v2 = objc_allocWithZone(&OBJC_CLASS___BTCloudDeviceSupportInformation);
  swift_bridgeObjectRetain(v1);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  id v4 = [v2 initWithBluetoothAddress:v3];

  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setBudsFirmwareVersion:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setCaseName:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v4 setCaseFirmwareVersion:v7];

  NSString v8 = String._bridgeToObjectiveC()();
  [v4 setCaseSerialNumber:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [v4 setHardwareVersion:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v4 setLeftBudSerialNumber:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v4 setRightBudSerialNumber:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v4 setAncAssetVersion:v12];

  return v4;
}

uint64_t sub_1000B756C( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t *a4, void *a5, const char *a6, uint64_t a7)
{
  uint64_t v13 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v14 = qword_10023DFC0;
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v17 = sub_1000A4A64(0LL, a4, a5);
  uint64_t v18 = swift_bridgeObjectRetain(a1);
  uint64_t v19 = Array.description.getter(v18, v17);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10009914C();
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, a6, a7, 2LL, v16);
  swift_bridgeObjectRelease(v16);
  return a2(a1);
}

void sub_1000B76BC(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  if (a1)
  {
    sub_1000A4A64(0LL, a3, a4);
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  Class isa = v5.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1000B7724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BC714(a1, a2, a3, a4, (uint64_t)&unk_10020B800, (uint64_t)sub_1000C95CC, (uint64_t)&unk_10020B818);
}

uint64_t sub_1000B7740(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v246 = a5;
  uint64_t v247 = a4;
  v240 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v236 = (char *)&v211 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v211 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v232 = type metadata accessor for URL(0LL);
  uint64_t v231 = *(void *)(v232 - 8);
  __chkstk_darwin(v232);
  v230 = (char *)&v211 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v15);
  v217 = (char *)&v211 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v225 = (uint64_t)&v211 - v18;
  __chkstk_darwin(v19);
  uint64_t v233 = (uint64_t)&v211 - v20;
  uint64_t v243 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v239 = *(void *)(v243 - 8);
  __chkstk_darwin(v243);
  uint64_t v228 = (uint64_t)&v211 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v216 = (uint64_t)&v211 - v23;
  __chkstk_darwin(v24);
  uint64_t v242 = (uint64_t)&v211 - v25;
  __chkstk_darwin(v26);
  uint64_t v218 = (uint64_t)&v211 - v27;
  __chkstk_darwin(v28);
  uint64_t v244 = (uint64_t)&v211 - v29;
  uint64_t v227 = v30;
  __chkstk_darwin(v31);
  uint64_t v226 = (uint64_t)&v211 - v32;
  uint64_t v33 = sub_100098CD8(&qword_100235830);
  __chkstk_darwin(v33);
  uint64_t v237 = (uint64_t)&v211 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v245 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v241 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v235 = (uint64_t)&v211 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  id v38 = (char *)&v211 - v37;
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v211 - v40;
  uint64_t v224 = v42;
  __chkstk_darwin(v43);
  v238 = (unsigned __int8 *)&v211 - v44;
  a1 += 16LL;
  swift_beginAccess(a1, v255, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v45);
  if (!Strong) {
    return v240();
  }
  uint64_t v47 = (char *)Strong;
  uint64_t v219 = v8;
  v220 = v13;
  uint64_t v221 = v11;
  uint64_t v222 = v7;
  uint64_t v223 = v10;
  uint64_t v48 = static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v49 = qword_10023DFC0;
  uint64_t v214 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v50 = swift_allocObject(v214, 72LL, 7LL);
  __int128 v213 = xmmword_1001A5EA0;
  *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v50 + 56) = &type metadata for String;
  unint64_t v215 = sub_10009914C();
  *(void *)(v50 + 64) = v215;
  uint64_t v51 = v246;
  *(void *)(v50 + 32) = v247;
  *(void *)(v50 + 40) = v51;
  swift_bridgeObjectRetain(v51);
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "fetchDeviceSupportInformationRecord: %@", 39LL, 2LL, v50);
  swift_bridgeObjectRelease(v50);
  uint64_t v52 = sub_1000AE6C8();
  uint64_t v53 = sub_10013BA34();
  swift_release(v52);
  uint64_t v54 = *(void *)(v53 + 16);
  uint64_t v55 = a3;
  char v56 = v47;
  uint64_t v57 = v241;
  v229 = v47;
  v234 = v55;
  if (!v54)
  {
LABEL_20:
    uint64_t v68 = v237;
    uint64_t v69 = v245;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v237, 1LL, 1LL, v245);
    goto LABEL_23;
  }

  uint64_t v58 = v53 + ((*(unsigned __int8 *)(v241 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
  uint64_t v59 = *(void *)(v241 + 72);
  uint64_t v212 = v53;
  swift_bridgeObjectRetain(v53);
  while (1)
  {
    sub_1000A7C90(v58, (uint64_t)v41, type metadata accessor for BTDeferredRecord);
    uint64_t v60 = *((void *)v41 + 1);
    uint64_t v61 = *((void *)v41 + 2);
    if (v60 == 0xD00000000000001ELL && v61 == 0x80000001001CABA0LL)
    {
      sub_1000A7C90((uint64_t)v41, (uint64_t)v38, type metadata accessor for BTDeferredRecord);
    }

    else
    {
      char v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 0xD00000000000001ELL, 0x80000001001CABA0LL, 0LL);
      sub_1000A7C90((uint64_t)v41, (uint64_t)v38, type metadata accessor for BTDeferredRecord);
      if ((v62 & 1) == 0)
      {
        sub_1000A7CD4((uint64_t)v38, type metadata accessor for BTDeferredRecord);
        goto LABEL_7;
      }
    }

    char v63 = &v38[*(int *)(v245 + 28)];
    uint64_t v64 = *((void *)v63 + 1);
    if (*(void *)v63 == v247 && v64 == v246) {
      break;
    }
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v63, v64, v247, v246, 0LL);
    sub_1000A7CD4((uint64_t)v38, type metadata accessor for BTDeferredRecord);
    if ((v66 & 1) != 0) {
      goto LABEL_22;
    }
LABEL_7:
    sub_1000A7CD4((uint64_t)v41, type metadata accessor for BTDeferredRecord);
    v58 += v59;
    if (!--v54)
    {
      uint64_t v53 = v212;
      swift_bridgeObjectRelease(v212);
      char v56 = v229;
      uint64_t v55 = v234;
      uint64_t v57 = v241;
      goto LABEL_20;
    }
  }

  sub_1000A7CD4((uint64_t)v38, type metadata accessor for BTDeferredRecord);
LABEL_22:
  uint64_t v53 = v212;
  swift_bridgeObjectRelease(v212);
  uint64_t v68 = v237;
  sub_1000C998C((uint64_t)v41, v237, type metadata accessor for BTDeferredRecord);
  uint64_t v57 = v241;
  uint64_t v69 = v245;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v241 + 56))(v68, 0LL, 1LL, v245);
  char v56 = v229;
  uint64_t v55 = v234;
LABEL_23:
  swift_bridgeObjectRelease(v53);
  int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v68, 1LL, v69);
  uint64_t v71 = v238;
  uint64_t v72 = v239;
  if (v70 == 1)
  {
    sub_100099358(v68, &qword_100235830);
    uint64_t v73 = sub_1000AE6C8();
    id v74 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v74)
    {
      uint64_t v75 = v72;
      uint64_t v76 = v56;
      uint64_t v77 = sub_10013A76C();
      uint64_t v78 = v243;
      uint64_t v79 = v246;
      if (qword_100234BC8 != -1) {
        swift_once(&qword_100234BC8, sub_1000E72E4);
      }
      uint64_t v80 = v232;
      uint64_t v81 = sub_100098D58(v232, (uint64_t)qword_10023DF00);
      uint64_t v82 = v231;
      uint64_t v83 = (uint64_t)v230;
      (*(void (**)(char *, uint64_t, uint64_t))(v231 + 16))(v230, v81, v80);
      uint64_t v84 = sub_100138AC4(v83);
      swift_release(v77);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v80);
      char v56 = v76;
      uint64_t v72 = v75;
      uint64_t v55 = v234;
    }

    else
    {
      uint64_t v105 = static os_log_type_t.error.getter(v74);
      uint64_t v78 = v243;
      uint64_t v79 = v246;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v84 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v105,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v73);
    uint64_t v106 = v84[2];
    if (v106)
    {
      uint64_t v107 = (uint64_t)v84
           + ((*(unsigned __int8 *)(v72 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      uint64_t v108 = *(void *)(v72 + 72);
      swift_bridgeObjectRetain(v84);
      uint64_t v109 = v244;
      while (1)
      {
        sub_1000A7C90(v107, v109, type metadata accessor for DeviceSupportInformationRecord);
        unint64_t v110 = (void *)(v109 + *(int *)(v78 + 24));
        uint64_t v111 = v110[1];
        BOOL v112 = *v110 == v247 && v111 == v79;
        if (v112 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v110, v111, v247, v79, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v109 = v244;
        sub_1000A7CD4(v244, type metadata accessor for DeviceSupportInformationRecord);
        v107 += v108;
        if (!--v106)
        {
          swift_bridgeObjectRelease(v84);
          char v56 = v229;
          goto LABEL_45;
        }
      }

      swift_bridgeObjectRelease(v84);
      uint64_t v113 = v233;
      sub_1000C998C(v244, v233, type metadata accessor for DeviceSupportInformationRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v113, 0LL, 1LL, v78);
      char v56 = v229;
    }

    else
    {
LABEL_45:
      uint64_t v113 = v233;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v233, 1LL, 1LL, v78);
    }

    swift_bridgeObjectRelease(v84);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v113, 1LL, v78) == 1)
    {
      sub_100099358(v113, &qword_100235828);
      uint64_t v142 = *(void **)&v56[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
      id v143 = (void *)swift_allocObject(&unk_10020B850, 48LL, 7LL);
      v143[2] = v247;
      v143[3] = v79;
      v143[4] = v240;
      v143[5] = v55;
      v253 = sub_1000C9604;
      v254 = v143;
      aBlock = _NSConcreteStackBlock;
      uint64_t v250 = 1107296256LL;
      v251 = sub_1000F2C54;
      v252 = &unk_10020B868;
      uint64_t v144 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain(v79);
      swift_retain(v55);
      id v145 = v142;
      uint64_t v146 = v220;
      static DispatchQoS.unspecified.getter(v145);
      v248 = _swiftEmptyArrayStorage;
      uint64_t v147 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v148 = sub_100098CD8((uint64_t *)&unk_100235790);
      uint64_t v149 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
      __int128 v150 = v236;
      uint64_t v151 = v148;
      uint64_t v152 = v222;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v151, v149, v222, v147);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v146, v150, v144);

      _Block_release(v144);
      (*(void (**)(char *, uint64_t))(v219 + 8))(v150, v152);
      (*(void (**)(char *, uint64_t))(v221 + 8))(v146, v223);
      return swift_release(v254);
    }

    uint64_t v153 = v226;
    sub_1000C998C(v113, v226, type metadata accessor for DeviceSupportInformationRecord);
    v154 = *(void **)&v56[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v155 = v228;
    sub_1000A7C90(v153, v228, type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v156 = *(unsigned __int8 *)(v72 + 80);
    uint64_t v157 = (v156 + 16) & ~v156;
    unint64_t v158 = (v227 + v157 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v159 = swift_allocObject(&unk_10020B8A0, v158 + 16, v156 | 7);
    sub_1000C998C(v155, v159 + v157, type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v160 = (uint64_t (**)(void))(v159 + v158);
    *uint64_t v160 = v240;
    v160[1] = v55;
    v253 = sub_1000C9614;
    v254 = (void *)v159;
    aBlock = _NSConcreteStackBlock;
    uint64_t v250 = 1107296256LL;
    v251 = sub_1000F2C54;
    v252 = &unk_10020B8B8;
    uint64_t v161 = _Block_copy(&aBlock);
    swift_retain(v55);
    id v162 = v154;
    v163 = v220;
    static DispatchQoS.unspecified.getter(v162);
    v248 = _swiftEmptyArrayStorage;
    uint64_t v164 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v165 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v166 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    uint64_t v167 = v236;
    uint64_t v168 = v165;
    uint64_t v169 = v222;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v168, v166, v222, v164);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v163, v167, v161);

    _Block_release(v161);
    (*(void (**)(char *, uint64_t))(v219 + 8))(v167, v169);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v163, v223);
    uint64_t v210 = v153;
    v209 = type metadata accessor for DeviceSupportInformationRecord;
LABEL_53:
    sub_1000A7CD4(v210, v209);
    return swift_release(v254);
  }

  else
  {
    uint64_t v85 = v56;
    uint64_t v86 = sub_1000C998C(v68, (uint64_t)v238, type metadata accessor for BTDeferredRecord);
    int v87 = *v71;
    uint64_t v88 = static os_log_type_t.default.getter(v86);
    uint64_t v89 = qword_10023DFC0;
    uint64_t v90 = swift_allocObject(v214, 72LL, 7LL);
    *(_OWORD *)(v90 + swift_unknownObjectWeakDestroy(v0 + 16) = v213;
    uint64_t v91 = v235;
    sub_1000A7C90((uint64_t)v71, v235, type metadata accessor for BTDeferredRecord);
    uint64_t v92 = String.init<A>(describing:)(v91, v69);
    unint64_t v93 = v215;
    *(void *)(v90 + 56) = &type metadata for String;
    *(void *)(v90 + 64) = v93;
    *(void *)(v90 + 32) = v92;
    *(void *)(v90 + 40) = v94;
    if (v87 != 1)
    {
      os_log(_:dso:log:_:_:)( v88,  &_mh_execute_header,  v89,  "Deferred Update DeviceSupportInfo found - %@",  44LL,  2LL,  v90);
      swift_bridgeObjectRelease(v90);
      id v114 = &v71[*(int *)(v69 + 36)];
      unint64_t v115 = *((void *)v114 + 1);
      unint64_t v116 = v85;
      if (v115 >> 60 == 15)
      {
        uint64_t v125 = *(void **)&v85[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
        uint64_t v126 = v235;
        sub_1000A7C90((uint64_t)v71, v235, type metadata accessor for BTDeferredRecord);
        uint64_t v127 = *(unsigned __int8 *)(v241 + 80);
        uint64_t v128 = (v127 + 16) & ~v127;
        unint64_t v129 = (v224 + v128 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v130 = swift_allocObject(&unk_10020B8F0, v129 + 16, v127 | 7);
        sub_1000C998C(v126, v130 + v128, type metadata accessor for BTDeferredRecord);
        uint64_t v131 = (uint64_t (**)(void))(v130 + v129);
        *uint64_t v131 = v240;
        v131[1] = v55;
        v253 = sub_1000C9704;
        v254 = (void *)v130;
        aBlock = _NSConcreteStackBlock;
        uint64_t v250 = 1107296256LL;
        v251 = sub_1000F2C54;
        v252 = &unk_10020B908;
        uint64_t v132 = _Block_copy(&aBlock);
        swift_retain(v55);
        id v133 = v125;
        uint64_t v134 = v220;
        static DispatchQoS.unspecified.getter(v133);
        v248 = _swiftEmptyArrayStorage;
        uint64_t v135 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v136 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v137 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
        uint64_t v138 = v71;
        id v139 = v236;
        uint64_t v140 = v136;
        uint64_t v141 = v222;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v140, v137, v222, v135);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v134, v139, v132);

        _Block_release(v132);
        (*(void (**)(char *, uint64_t))(v219 + 8))(v139, v141);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v134, v223);
        uint64_t v210 = (uint64_t)v138;
        v209 = type metadata accessor for BTDeferredRecord;
      }

      else
      {
        uint64_t v117 = v55;
        uint64_t v118 = *(void *)v114;
        sub_1000991CC(*(void *)v114, *((void *)v114 + 1));
        id v119 = objc_autoreleasePoolPush();
        uint64_t v120 = type metadata accessor for PropertyListDecoder(0LL);
        swift_allocObject(v120, *(unsigned int *)(v120 + 48), *(unsigned __int16 *)(v120 + 52));
        uint64_t v121 = PropertyListDecoder.init()();
        uint64_t v122 = sub_100098C98( &qword_100235838,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A8A8C);
        uint64_t v123 = (uint64_t)v217;
        uint64_t v124 = v243;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v243, v118, v115, v243, v122);
        swift_release(v121);
        objc_autoreleasePoolPop(v119);
        uint64_t v188 = v239;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v123, 0LL, 1LL, v124);
        uint64_t v189 = v216;
        sub_1000C998C(v123, v216, type metadata accessor for DeviceSupportInformationRecord);
        v190 = *(void **)&v85[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
        uint64_t v191 = v189;
        uint64_t v192 = v228;
        sub_1000A7C90(v191, v228, type metadata accessor for DeviceSupportInformationRecord);
        uint64_t v193 = *(unsigned __int8 *)(v188 + 80);
        uint64_t v194 = (v193 + 16) & ~v193;
        unint64_t v195 = (v227 + v194 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v196 = swift_allocObject(&unk_10020B940, v195 + 16, v193 | 7);
        sub_1000C998C(v192, v196 + v194, type metadata accessor for DeviceSupportInformationRecord);
        v197 = (uint64_t (**)(void))(v196 + v195);
        *v197 = v240;
        v197[1] = v117;
        v253 = sub_1000C9884;
        v254 = (void *)v196;
        aBlock = _NSConcreteStackBlock;
        uint64_t v250 = 1107296256LL;
        v251 = sub_1000F2C54;
        v252 = &unk_10020B958;
        v198 = _Block_copy(&aBlock);
        id v199 = v190;
        uint64_t v200 = swift_retain(v117);
        v201 = v220;
        static DispatchQoS.unspecified.getter(v200);
        v248 = _swiftEmptyArrayStorage;
        uint64_t v202 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v203 = v116;
        uint64_t v204 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v205 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
        v206 = v236;
        uint64_t v207 = v204;
        uint64_t v208 = v222;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v207, v205, v222, v202);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v201, v206, v198);

        sub_1000AC4C0(v118, v115);
        _Block_release(v198);

        (*(void (**)(char *, uint64_t))(v219 + 8))(v206, v208);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v201, v223);
        sub_1000A7CD4(v216, type metadata accessor for DeviceSupportInformationRecord);
        v209 = type metadata accessor for BTDeferredRecord;
        uint64_t v210 = (uint64_t)v238;
      }

      goto LABEL_53;
    }

    os_log(_:dso:log:_:_:)( v88,  &_mh_execute_header,  v89,  "DeviceSupportInfo Already deleted found - %@",  44LL,  2LL,  v90);
    swift_bridgeObjectRelease(v90);
    uint64_t v95 = v85;
    uint64_t v96 = sub_1000AE6C8();
    id v97 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v97)
    {
      uint64_t v98 = sub_10013A76C();
      uint64_t v99 = v239;
      if (qword_100234BC8 != -1) {
        swift_once(&qword_100234BC8, sub_1000E72E4);
      }
      uint64_t v100 = v232;
      uint64_t v101 = sub_100098D58(v232, (uint64_t)qword_10023DF00);
      uint64_t v102 = v231;
      uint64_t v103 = (uint64_t)v230;
      (*(void (**)(char *, uint64_t, uint64_t))(v231 + 16))(v230, v101, v100);
      uint64_t v104 = sub_100138AC4(v103);
      swift_release(v98);
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v100);
      uint64_t v69 = v245;
    }

    else
    {
      uint64_t v170 = static os_log_type_t.error.getter(v97);
      uint64_t v99 = v239;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v104 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v170,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
    }

    swift_release(v96);
    uint64_t v171 = v104[2];
    if (v171)
    {
      uint64_t v172 = (uint64_t)v104
           + ((*(unsigned __int8 *)(v99 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
      id v173 = &v71[*(int *)(v69 + 28)];
      uint64_t v174 = *(void *)(v99 + 72);
      swift_bridgeObjectRetain(v104);
      uint64_t v175 = v242;
      while (1)
      {
        sub_1000A7C90(v172, v175, type metadata accessor for DeviceSupportInformationRecord);
        uint64_t v176 = (void *)(v175 + *(int *)(v243 + 24));
        uint64_t v177 = v176[1];
        uint64_t v178 = *((void *)v173 + 1);
        BOOL v179 = *v176 == *(void *)v173 && v177 == v178;
        if (v179 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v176, v177, *(void *)v173, v178, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v175 = v242;
        sub_1000A7CD4(v242, type metadata accessor for DeviceSupportInformationRecord);
        v172 += v174;
        if (!--v171)
        {
          swift_bridgeObjectRelease(v104);
          goto LABEL_67;
        }
      }

      swift_bridgeObjectRelease(v104);
      uint64_t v181 = v225;
      sub_1000C998C(v242, v225, type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v180 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
      uint64_t v182 = v181;
      uint64_t v183 = 0LL;
    }

    else
    {
LABEL_67:
      uint64_t v180 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
      uint64_t v181 = v225;
      uint64_t v182 = v225;
      uint64_t v183 = 1LL;
    }

    uint64_t v184 = v243;
    v180(v182, v183, 1LL, v243);
    swift_bridgeObjectRelease(v104);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v181, 1LL, v184) == 1)
    {
      sub_100099358(v181, &qword_100235828);
    }

    else
    {
      uint64_t v185 = v181;
      uint64_t v186 = v218;
      sub_1000C998C(v185, v218, type metadata accessor for DeviceSupportInformationRecord);
      v187 = (char *)sub_1000AE6C8();
      sub_100151478(v186, v187);
      swift_release(v187);
      sub_1000A7CD4(v186, type metadata accessor for DeviceSupportInformationRecord);
    }

    ((void (*)(void))v240)(0LL);

    return sub_1000A7CD4((uint64_t)v71, type metadata accessor for BTDeferredRecord);
  }

uint64_t sub_1000B8CF4(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v3 = qword_10023DFC0;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v11 = a1;
  swift_errorRetain(a1);
  uint64_t v6 = sub_100098CD8(&qword_100235840);
  uint64_t v7 = String.init<A>(describing:)(&v11, v6);
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10009914C();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  v3,  "[Fetch] Removed deleted DeviceSupportInfo from cloud? - %@",  58LL,  2LL,  v5);
  return swift_bridgeObjectRelease(v5);
}

void sub_1000B8DFC(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v4 = qword_10023DFC0;
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  Class v7 = sub_1000E7430();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10009914C();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Constructed BTCloudDeviceSupportInformation - %@", 48LL, 2LL, v6);
  swift_bridgeObjectRelease(v6);
  id v10 = sub_1000B737C();
  a2();
}

uint64_t sub_1000B8F08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v9 = qword_10023DFC0;
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  sub_1000A7C90(a1, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
  uint64_t v12 = String.init<A>(describing:)(v6, v4);
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10009914C();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v9,  "Unable to contruct BTCloudDeviceSupportInformation - %@",  55LL,  2LL,  v11);
  swift_bridgeObjectRelease(v11);
  return a2(0LL);
}

uint64_t sub_1000B9058(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v7 = qword_10023DFC0;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10009914C();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Device info not found - %@", 26LL, 2LL, v9);
  swift_bridgeObjectRelease(v9);
  return a3(0LL);
}

void sub_1000B9150(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v5 = qword_10023DFC0;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 24));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10009914C();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Found device info: %@", 21LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  id v11 = sub_1000B737C();
  a2();
}

uint64_t sub_1000B9288(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020B6C0, (uint64_t)sub_1000C9580, (uint64_t)&unk_10020B6D8);
}

uint64_t sub_1000B92A4(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v160 = a4;
  uint64_t v147 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v139 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v146 = (uint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v10);
  uint64_t v138 = (uint64_t)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  id v143 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v159 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v153 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v152 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v165, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v19);
  if (!Strong)
  {
    unint64_t v54 = sub_10009E7C0();
    uint64_t v55 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v54, 0LL, 0LL);
    _BYTE *v56 = 0;
    a2();
    return swift_errorRelease(v55);
  }

  uint64_t v148 = Strong;
  uint64_t v21 = &Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
  swift_beginAccess(&Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap], v164, 0LL, 0LL);
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(*(void *)v21 + 64LL);
  uint64_t v149 = *(void *)v21 + 64LL;
  uint64_t v24 = 1LL << *(_BYTE *)(v22 + 32);
  uint64_t v25 = -1LL;
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v150 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v156 = v22;
  swift_bridgeObjectRetain(v22);
  int64_t v27 = 0LL;
  uint64_t v28 = &selRef__inCaseLidClosed_;
  uint64_t v29 = &_mh_execute_header;
  uint64_t v134 = a3;
  id v133 = a2;
  uint64_t v137 = v15;
  uint64_t v136 = v16;
  uint64_t v135 = v18;
  if (!v26) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v154 = (v26 - 1) & v26;
  int64_t v155 = v27;
  for (unint64_t i = __clz(__rbit64(v26)) | (v27 << 6); ; unint64_t i = __clz(__rbit64(v32)) + (v33 << 6))
  {
    uint64_t v35 = *(void *)(*(void *)(v156 + 56) + 8 * i);
    uint64_t v36 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v35);
    id v37 = [v36 isFirstUnlocked];
    uint64_t v157 = v35;
    if (!(_DWORD)v37) {
      break;
    }
    uint64_t v38 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v39 = sub_100098D58(v15, (uint64_t)qword_10023DCC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v39, v15);
    uint64_t v4 = (char **)sub_100138AA0((uint64_t)v18);
    swift_release(v38);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v5 = (uint64_t)v4[2];
    if (v5) {
      goto LABEL_26;
    }
LABEL_37:
    swift_release(v157);
    swift_bridgeObjectRelease(v4);
LABEL_38:
    unint64_t v26 = v154;
    int64_t v27 = v155;
    if (v154) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v31 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_79;
    }

    if (v31 >= v150) {
      goto LABEL_45;
    }
    unint64_t v32 = *(void *)(v149 + 8 * v31);
    int64_t v33 = v27 + 1;
    if (!v32)
    {
      int64_t v33 = v27 + 2;
      if (v27 + 2 >= v150) {
        goto LABEL_45;
      }
      unint64_t v32 = *(void *)(v149 + 8 * v33);
      if (!v32)
      {
        int64_t v33 = v27 + 3;
        if (v27 + 3 >= v150) {
          goto LABEL_45;
        }
        unint64_t v32 = *(void *)(v149 + 8 * v33);
        if (!v32)
        {
          int64_t v33 = v27 + 4;
          if (v27 + 4 >= v150) {
            goto LABEL_45;
          }
          unint64_t v32 = *(void *)(v149 + 8 * v33);
          if (!v32)
          {
            uint64_t v34 = v27 + 5;
            if (v27 + 5 >= v150)
            {
LABEL_45:
              uint64_t v65 = swift_release(v156);
              uint64_t v5 = (uint64_t)v18;
              uint64_t v29 = (const mach_header_64 *)v16;
              uint64_t v4 = (char **)static os_log_type_t.default.getter(v65);
              if (qword_100234C20 != -1) {
                goto LABEL_80;
              }
            }

            else
            {
              unint64_t v32 = *(void *)(v149 + 8 * v34);
              if (v32)
              {
                int64_t v33 = v27 + 5;
                goto LABEL_21;
              }

              while (1)
              {
                int64_t v33 = v34 + 1;
                if (__OFADD__(v34, 1LL)) {
                  break;
                }
                if (v33 >= v150) {
                  goto LABEL_45;
                }
                unint64_t v32 = *(void *)(v149 + 8 * v33);
                ++v34;
                if (v32) {
                  goto LABEL_21;
                }
              }

uint64_t sub_1000BA114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020B760, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B778);
}

uint64_t sub_1000BA130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020B7B0, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B7C8);
}

uint64_t sub_1000BA168(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020B5D0, (uint64_t)sub_1000C9534, (uint64_t)&unk_10020B5E8);
}

uint64_t sub_1000BA184(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v118 = *(void *)(v12 - 8);
  uint64_t v119 = v12;
  __chkstk_darwin(v12);
  uint64_t v117 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v125 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  int64_t v123 = *(void *)(v17 - 8);
  uint64_t v124 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v131, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v20);
  if (!Strong)
  {
    unint64_t v31 = sub_10009E7C0();
    uint64_t v32 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v31, 0LL, 0LL);
    *int64_t v33 = 0;
    a2();
    return swift_errorRelease(v32);
  }

  uint64_t v126 = v8;
  uint64_t v116 = v9;
  char v120 = a2;
  uint64_t v121 = a3;
  uint64_t v122 = Strong;
  id v22 = [a4 bluetoothAddress];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v25 = v24;

  swift_bridgeObjectRelease(v25);
  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    int v127 = a4;
    id v27 = [a4 bluetoothAddress];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    if (v28 == 0xD000000000000011LL && v30 == 0x80000001001CCC20LL)
    {
      swift_bridgeObjectRelease(0x80000001001CCC20LL);
      a4 = v127;
    }

    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
      swift_bridgeObjectRelease(v30);
      a4 = v127;
      uint64_t v36 = &selRef__inCaseLidClosed_;
      if ((v35 & 1) == 0)
      {
        uint64_t v50 = &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
        swift_beginAccess( &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap],  aBlock,  0LL,  0LL);
        uint64_t v51 = *(void *)v50;
        uint64_t v52 = *(void *)v50 + 64LL;
        uint64_t v53 = 1LL << *(_BYTE *)(*(void *)v50 + 32LL);
        uint64_t v54 = -1LL;
        if (v53 < 64) {
          uint64_t v54 = ~(-1LL << v53);
        }
        unint64_t v55 = v54 & *(void *)(*(void *)v50 + 64LL);
        int64_t v112 = (unint64_t)(v53 + 63) >> 6;
        uint64_t v124 = v51;
        swift_bridgeObjectRetain(v51);
        int64_t v56 = 0LL;
        uint64_t v57 = type metadata accessor for DeviceRecord;
        uint64_t v58 = a4;
        uint64_t v59 = v116;
        uint64_t v113 = v52;
        if (!v55) {
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v115 = (v55 - 1) & v55;
        int64_t v123 = v56;
        for (unint64_t i = __clz(__rbit64(v55)) | (v56 << 6); ; unint64_t i = __clz(__rbit64(v62)) + (v63 << 6))
        {
          uint64_t v65 = *(void *)(*(void *)(v124 + 56) + 8 * i);
          uint64_t v66 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
          swift_retain(v65);
          id v67 = [v66 isFirstUnlocked];
          uint64_t v125 = v65;
          if ((_DWORD)v67)
          {
            uint64_t v68 = v57;
            uint64_t v69 = sub_10013A76C();
            if (qword_100234B30 != -1) {
              swift_once(&qword_100234B30, sub_100094AFC);
            }
            uint64_t v70 = v119;
            uint64_t v71 = sub_100098D58(v119, (uint64_t)qword_10023DCC0);
            uint64_t v73 = (uint64_t)v117;
            uint64_t v72 = v118;
            (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v117, v71, v70);
            id v74 = sub_100138AA0(v73);
            swift_release(v69);
            uint64_t v75 = v70;
            uint64_t v76 = v74;
            (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v75);
            uint64_t v57 = v68;
            uint64_t v52 = v113;
            uint64_t v77 = v74[2];
            if (v77) {
              goto LABEL_36;
            }
          }

          else
          {
            uint64_t v90 = static os_log_type_t.error.getter(v67);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v91 = v90;
            uint64_t v76 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v91,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
            uint64_t v77 = _swiftEmptyArrayStorage[2];
            if (v77)
            {
LABEL_36:
              uint64_t v78 = (uint64_t)v76
                  + ((*(unsigned __int8 *)(v59 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
              uint64_t v114 = v76;
              swift_bridgeObjectRetain(v76);
              uint64_t v79 = *(void *)(v59 + 72);
              while (1)
              {
                sub_1000A7C90(v78, (uint64_t)v11, v57);
                id v80 = &v11[*(int *)(v126 + 24)];
                uint64_t v81 = v57;
                uint64_t v83 = *(void *)v80;
                uint64_t v82 = *((void *)v80 + 1);
                id v84 = [v58 v36[402]];
                uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
                uint64_t v87 = v86;

                if (v83 == v85 && v82 == v87) {
                  break;
                }
                char v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v82, v85, v87, 0LL);
                swift_bridgeObjectRelease(v87);
                sub_1000A7CD4((uint64_t)v11, v81);
                if ((v89 & 1) != 0) {
                  goto LABEL_51;
                }
                uint64_t v57 = v81;
                v78 += v79;
                --v77;
                uint64_t v58 = v127;
                uint64_t v36 = &selRef__inCaseLidClosed_;
                if (!v77)
                {
                  swift_release(v125);
                  swift_bridgeObjectRelease_n(v114, 2LL);
                  uint64_t v59 = v116;
                  uint64_t v52 = v113;
                  goto LABEL_48;
                }
              }

              swift_bridgeObjectRelease(v82);
              sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
LABEL_51:
              uint64_t v92 = swift_bridgeObjectRelease_n(v114, 2LL);
              uint64_t v93 = static os_log_type_t.error.getter(v92);
              uint64_t v94 = v127;
              if (qword_100234C20 != -1) {
                swift_once(&qword_100234C20, sub_10018A978);
              }
              uint64_t v95 = qword_10023DFC0;
              uint64_t v96 = sub_100098CD8((uint64_t *)&unk_100234E00);
              uint64_t v97 = swift_allocObject(v96, 72LL, 7LL);
              *(_OWORD *)(v97 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
              *(void *)(v97 + 56) = sub_1000A4A64( 0LL,  (unint64_t *)&unk_100236F00,  &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
              *(void *)(v97 + 64) = sub_1000C934C( &qword_100235820,  (unint64_t *)&unk_100236F00,  &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
              *(void *)(v97 + 32) = v94;
              id v98 = v94;
              os_log(_:dso:log:_:_:)( v93,  &_mh_execute_header,  v95,  "CloudSync: Cannot Update Secondary Cloud DeviceSupportInformation: %@",  69LL,  2LL,  v97);
              swift_release(v124);

              swift_release(v125);
              return swift_bridgeObjectRelease(v97);
            }
          }

          swift_release(v125);
          swift_bridgeObjectRelease(v76);
LABEL_48:
          int64_t v56 = v123;
          unint64_t v55 = v115;
          if (v115) {
            goto LABEL_15;
          }
LABEL_16:
          int64_t v61 = v56 + 1;
          if (__OFADD__(v56, 1LL))
          {
            __break(1u);
            goto LABEL_57;
          }

          if (v61 >= v112) {
            goto LABEL_54;
          }
          unint64_t v62 = *(void *)(v52 + 8 * v61);
          int64_t v63 = v56 + 1;
          if (!v62)
          {
            int64_t v63 = v56 + 2;
            if (v56 + 2 >= v112) {
              goto LABEL_54;
            }
            unint64_t v62 = *(void *)(v52 + 8 * v63);
            if (!v62)
            {
              int64_t v63 = v56 + 3;
              if (v56 + 3 >= v112) {
                goto LABEL_54;
              }
              unint64_t v62 = *(void *)(v52 + 8 * v63);
              if (!v62)
              {
                int64_t v63 = v56 + 4;
                if (v56 + 4 >= v112) {
                  goto LABEL_54;
                }
                unint64_t v62 = *(void *)(v52 + 8 * v63);
                if (!v62)
                {
                  uint64_t v64 = v56 + 5;
                  if (v56 + 5 >= v112)
                  {
LABEL_54:
                    uint64_t v99 = swift_release(v124);
                    unint64_t v55 = static os_log_type_t.default.getter(v99);
                    if (qword_100234C20 != -1) {
                      goto LABEL_58;
                    }
                    goto LABEL_55;
                  }

                  unint64_t v62 = *(void *)(v52 + 8 * v64);
                  if (!v62)
                  {
                    while (1)
                    {
                      int64_t v63 = v64 + 1;
                      if (__OFADD__(v64, 1LL)) {
                        break;
                      }
                      if (v63 >= v112) {
                        goto LABEL_54;
                      }
                      unint64_t v62 = *(void *)(v52 + 8 * v63);
                      ++v64;
                      if (v62) {
                        goto LABEL_31;
                      }
                    }

uint64_t sub_1000BABAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020B670, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B688);
}

uint64_t sub_1000BABE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BC714(a1, a2, a3, a4, (uint64_t)&unk_10020B4E0, (uint64_t)sub_1000C9518, (uint64_t)&unk_10020B4F8);
}

uint64_t sub_1000BAC00( uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t a1), uint64_t a4, uint64_t a5)
{
  uint64_t v81 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v77 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v73 = *(void *)(v13 - 8);
  uint64_t v74 = v13;
  __chkstk_darwin(v13);
  uint64_t v72 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v83, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v15);
  if (!Strong)
  {
    unint64_t v62 = sub_10009E7C0();
    uint64_t v63 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v62, 0LL, 0LL);
    *uint64_t v64 = 0;
    a2();
    return swift_errorRelease(v63);
  }

  uint64_t v71 = a2;
  uint64_t v68 = a3;
  uint64_t v70 = (void *)Strong;
  uint64_t v17 = Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap;
  swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v82, 0LL, 0LL);
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(*(void *)v17 + 64LL);
  uint64_t v75 = *(void *)v17 + 64LL;
  uint64_t v20 = 1LL << *(_BYTE *)(v18 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v76 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v78 = v18;
  swift_bridgeObjectRetain(v18);
  int64_t v23 = 0LL;
  unint64_t v24 = type metadata accessor for DeviceSupportInformationRecord;
  __int128 v69 = xmmword_1001A5EA0;
  uint64_t v66 = "SoundProfileRecord";
  uint64_t v67 = 0x80000001001CABA0LL;
  while (1)
  {
    if (v22)
    {
      uint64_t v79 = (v22 - 1) & v22;
      int64_t v80 = v23;
      unint64_t v25 = __clz(__rbit64(v22)) | (v23 << 6);
      goto LABEL_25;
    }

    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    if (v26 >= v76) {
      goto LABEL_45;
    }
    unint64_t v27 = *(void *)(v75 + 8 * v26);
    int64_t v28 = v23 + 1;
    if (!v27)
    {
      int64_t v28 = v23 + 2;
      if (v23 + 2 >= v76) {
        goto LABEL_45;
      }
      unint64_t v27 = *(void *)(v75 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v23 + 3;
        if (v23 + 3 >= v76) {
          goto LABEL_45;
        }
        unint64_t v27 = *(void *)(v75 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v23 + 4;
          if (v23 + 4 >= v76) {
            goto LABEL_45;
          }
          unint64_t v27 = *(void *)(v75 + 8 * v28);
          if (!v27) {
            break;
          }
        }
      }
    }

uint64_t sub_1000BB338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BFB48(a1, a2, a3, a4, (uint64_t)&unk_10020B580, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B598);
}

uint64_t sub_1000BB354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BFB48(a1, a2, a3, a4, (uint64_t)&unk_10020B530, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B548);
}

uint64_t sub_1000BB38C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v25 = *(void *)(v12 - 8);
  uint64_t v26 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void **)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v16 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  uint64_t v17 = swift_allocObject(&unk_10020B490, 49LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a4;
  *(void *)(v17 + 40) = a1;
  *(_BYTE *)(v17 + 4_Block_object_dispose(va, 8) = a2;
  aBlock[4] = sub_1000C9504;
  uint64_t v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020B4A8;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_retain(v16);
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(a1);
  int64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v22 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v26);
  uint64_t v23 = v30;
  swift_release(v16);
  return swift_release(v23);
}

uint64_t sub_1000BB5D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (!Strong) {
    return a2();
  }
  uint64_t v6 = (void *)Strong;
  uint64_t v7 = sub_1000AE6C8();
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_10023DFC8,  "CloudSync: Skip storing legacyMagicPairingSettingsCKRecord for TVOS",  67LL,  2LL,  _swiftEmptyArrayStorage);

  return swift_release(v7);
}

uint64_t sub_1000BB73C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void **)(v3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v15 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  uint64_t v16 = swift_allocObject(&unk_10020B440, 41LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(_BYTE *)(v16 + 40) = a1;
  aBlock[4] = sub_1000C94EC;
  uint64_t v30 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020B458;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain(v15);
  uint64_t v19 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v19);
  int64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v22 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v26);
  uint64_t v23 = v30;
  swift_release(v15);
  return swift_release(v23);
}

uint64_t sub_1000BB980(uint64_t a1, uint64_t (*a2)(void), void *a3, char a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v7, v8);
  if (!Strong) {
    return a2();
  }
  uint64_t v10 = (void *)Strong;
  uint64_t v11 = sub_1000AE6C8();
  sub_100156030(a4 & 1, (void (*)(void))a2, a3);

  return swift_release(v11);
}

uint64_t sub_1000BBA8C(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020B3F0, (uint64_t)sub_1000C94CC, (uint64_t)&unk_10020B408);
}

void sub_1000BBAA8(uint64_t a1, void (*a2)(uint64_t, unint64_t))
{
  uint64_t v4 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v4);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v26, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v7);
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    uint64_t v10 = sub_1000AE6C8();
    sub_10013C62C((uint64_t)v6);
    swift_release(v10);
    uint64_t v11 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v6, 1LL, v11) == 1)
    {
      uint64_t v12 = sub_100099358((uint64_t)v6, &qword_1002357D8);
      uint64_t v13 = static os_log_type_t.default.getter(v12);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_10023DFC0,  "No Legacy Magic Pairing Records cached",  38LL,  2LL,  _swiftEmptyArrayStorage);
      a2(0LL, 0xF000000000000000LL);
    }

    else
    {
      uint64_t v14 = (uint64_t *)&v6[*(int *)(v11 + 20)];
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      sub_1000991CC(*v14, v16);
      uint64_t v17 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for LegacyMagicPairingSettingsRecords);
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      uint64_t v19 = qword_10023DFC0;
      uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
      *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      sub_1000991CC(v15, v16);
      uint64_t v22 = Data.description.getter(v15, v16);
      uint64_t v24 = v23;
      sub_100099394(v15, v16);
      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = sub_10009914C();
      *(void *)(v21 + 32) = v22;
      *(void *)(v21 + 40) = v24;
      os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Fetched Legacy Magic Pairing Records: %@", 40LL, 2LL, v21);
      swift_bridgeObjectRelease(v21);
      sub_1000991CC(v15, v16);
      a2(v15, v16);
      sub_100099394(v15, v16);
      sub_100099394(v15, v16);
    }
  }

  else
  {
    a2(0LL, 0xF000000000000000LL);
  }

uint64_t sub_1000BBD80(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020B350, (uint64_t)sub_1000C945C, (uint64_t)&unk_10020B368);
}

uint64_t sub_1000BBD9C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v9 - 8);
  uint64_t v58 = v9;
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v55 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 16, v66, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 16, v18);
  if (!Strong) {
    return a2();
  }
  uint64_t v20 = (char *)Strong;
  uint64_t v60 = a3;
  int64_t v61 = a2;
  uint64_t v54 = v6;
  uint64_t v21 = static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_10023DFC0,  "fetchMagicPairingSettingsRecords",  32LL,  2LL,  _swiftEmptyArrayStorage);
  unint64_t v65 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v22 = sub_1000AE6C8();
  id v23 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  uint64_t v53 = v7;
  if ((_DWORD)v23)
  {
    uint64_t v24 = sub_10013A76C();
    if (qword_100234B70 != -1) {
      swift_once(&qword_100234B70, sub_1000CAF84);
    }
    uint64_t v25 = sub_100098D58(v14, (uint64_t)qword_10023DD70);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v25, v14);
    uint64_t v26 = sub_100138A68((uint64_t)v17);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

  else
  {
    uint64_t v28 = static os_log_type_t.error.getter(v23);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v26 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v30 = v60;
  uint64_t v29 = v61;
  swift_release(v22);
  uint64_t v31 = v26[2];
  if (v31)
  {
    id v32 = v20;
    uint64_t v33 = (uint64_t)v26 + ((*(unsigned __int8 *)(v55 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    uint64_t v34 = *(void *)(v55 + 72);
    do
    {
      sub_1000A7C90(v33, (uint64_t)v13, type metadata accessor for MagicPairingSettingsRecord);
      id v35 = sub_1000BC2B0();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      unint64_t v37 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v36 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v37 >= v36 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
      }
      uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      specialized Array._endMutation()(v38);
      sub_1000A7CD4((uint64_t)v13, type metadata accessor for MagicPairingSettingsRecord);
      v33 += v34;
      --v31;
    }

    while (v31);
    swift_bridgeObjectRelease(v26);
    uint64_t v30 = v60;
    uint64_t v29 = v61;
    uint64_t v20 = v32;
  }

  else
  {
    swift_bridgeObjectRelease(v26);
  }

  uint64_t v39 = v20;
  uint64_t v40 = *(void **)&v20[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  unint64_t v41 = v65;
  uint64_t v42 = (void *)swift_allocObject(&unk_10020B3A0, 40LL, 7LL);
  v42[2] = v41;
  v42[3] = v29;
  v42[4] = v30;
  aBlock[4] = sub_1000C9480;
  uint64_t v64 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020B3B8;
  id v43 = _Block_copy(aBlock);
  id v44 = v40;
  uint64_t v45 = swift_retain(v30);
  char v46 = v56;
  static DispatchQoS.unspecified.getter(v45);
  unint64_t v62 = _swiftEmptyArrayStorage;
  uint64_t v47 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v48 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v49 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  uint64_t v50 = v59;
  uint64_t v51 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v48, v49, v54, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v50, v43);
  _Block_release(v43);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v51);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v58);
  return swift_release(v64);
}

id sub_1000BC2B0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MagicPairingSettingsRecord(0LL) + 24) + 8);
  id v2 = objc_allocWithZone(&OBJC_CLASS___BTMagicPairingSettings);
  swift_bridgeObjectRetain(v1);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  id v4 = [v2 initWithBluetoothAddress:v3];

  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setProductID:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setVendorID:v6];

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v4 setMasterKey:isa];

  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  [v4 setMasterHint:v8];

  Class v9 = Data._bridgeToObjectiveC()().super.isa;
  [v4 setAccessoryKey:v9];

  Class v10 = Data._bridgeToObjectiveC()().super.isa;
  [v4 setAccessoryHint:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v4 setButtonModes:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v4 setColor:v12];

  NSString v13 = String._bridgeToObjectiveC()();
  [v4 setDeviceIDFeatureBitsV1:v13];

  NSString v14 = String._bridgeToObjectiveC()();
  [v4 setDeviceIDFeatureBitsV2:v14];

  Class v15 = Data._bridgeToObjectiveC()().super.isa;
  [v4 setEncryptionKey:v15];

  Class v16 = Data._bridgeToObjectiveC()().super.isa;
  [v4 setIrk:v16];

  NSString v17 = String._bridgeToObjectiveC()();
  [v4 setListeningServices:v17];

  NSString v18 = String._bridgeToObjectiveC()();
  [v4 setListeningServicesV2:v18];

  NSString v19 = String._bridgeToObjectiveC()();
  [v4 setOptimizedBatteryCharging:v19];

  NSString v20 = String._bridgeToObjectiveC()();
  [v4 setOptimizedBatteryFullChargeDeadline:v20];

  NSString v21 = String._bridgeToObjectiveC()();
  [v4 setRatchet:v21];

  NSString v22 = String._bridgeToObjectiveC()();
  [v4 setReserved:v22];

  NSString v23 = String._bridgeToObjectiveC()();
  [v4 setSettingsMask:v23];

  NSString v24 = String._bridgeToObjectiveC()();
  [v4 setSupportedServices:v24];

  NSString v25 = String._bridgeToObjectiveC()();
  [v4 setVersion:v25];

  return v4;
}

uint64_t sub_1000BC6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BC714(a1, a2, a3, a4, (uint64_t)&unk_10020B2B0, (uint64_t)sub_1000C942C, (uint64_t)&unk_10020B2C8);
}

uint64_t sub_1000BC714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v31 = a3;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  NSString v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v15 - 8);
  uint64_t v35 = v15;
  __chkstk_darwin(v15);
  NSString v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v18 = *(void **)(v7 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v19 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v19 + 16, v7);
  NSString v20 = (void *)swift_allocObject(a5, 56LL, 7LL);
  uint64_t v21 = v31;
  void v20[2] = v19;
  v20[3] = v21;
  void v20[4] = a4;
  v20[5] = a1;
  v20[6] = a2;
  aBlock[4] = v32;
  uint64_t v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = v33;
  NSString v22 = _Block_copy(aBlock);
  id v23 = v18;
  swift_retain(v19);
  swift_retain(a4);
  uint64_t v24 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v24);
  unint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v27 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v12, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  uint64_t v28 = v39;
  swift_release(v19);
  return swift_release(v28);
}

uint64_t sub_1000BC960(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v85 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v83 = *(void *)(v13 - 8);
  uint64_t v84 = v13;
  __chkstk_darwin(v13);
  uint64_t v82 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v15);
  uint64_t v81 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for URL(0LL);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  NSString v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v19);
  uint64_t v86 = (uint64_t)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v87 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v80 = (uint64_t)&v73 - v25;
  a1 += 16LL;
  swift_beginAccess(a1, v92, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v26);
  uint64_t v88 = (char *)Strong;
  if (!Strong) {
    return a2();
  }
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v76 = v11;
  uint64_t v77 = v10;
  uint64_t v28 = static os_log_type_t.default.getter(Strong);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v29 = qword_10023DFC0;
  uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_10009914C();
  *(void *)(v31 + 32) = a4;
  *(void *)(v31 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "fetchMagicSettingsRecord: %@", 28LL, 2LL, v31);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = sub_1000AE6C8();
  id v33 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v33)
  {
    uint64_t v34 = sub_10013A76C();
    if (qword_100234B70 != -1) {
      swift_once(&qword_100234B70, sub_1000CAF84);
    }
    uint64_t v35 = v79;
    uint64_t v36 = sub_100098D58(v79, (uint64_t)qword_10023DD70);
    uint64_t v37 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v18, v36, v35);
    uint64_t v38 = sub_100138A68((uint64_t)v18);
    swift_release(v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v35);
  }

  else
  {
    uint64_t v40 = static os_log_type_t.error.getter(v33);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v38 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v41 = v86;
  swift_release(v32);
  uint64_t v42 = v38[2];
  if (v42)
  {
    uint64_t v43 = (uint64_t)v38 + ((*(unsigned __int8 *)(v87 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
    uint64_t v44 = *(void *)(v87 + 72);
    swift_bridgeObjectRetain(v38);
    uint64_t v45 = v77;
    while (1)
    {
      sub_1000A7C90(v43, (uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
      char v46 = &v23[*(int *)(v21 + 24)];
      uint64_t v47 = *((void *)v46 + 1);
      BOOL v48 = *(void *)v46 == a4 && v47 == a5;
      if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v46, v47, a4, a5, 0LL) & 1) != 0) {
        break;
      }
      sub_1000A7CD4((uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
      v43 += v44;
      if (!--v42)
      {
        swift_bridgeObjectRelease(v38);
        uint64_t v49 = 1LL;
        uint64_t v41 = v86;
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease(v38);
    uint64_t v41 = v86;
    sub_1000C998C((uint64_t)v23, v86, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v49 = 0LL;
  }

  else
  {
    uint64_t v49 = 1LL;
    uint64_t v45 = v77;
  }

uint64_t sub_1000BD0FC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020B170, (uint64_t)sub_1000C93E0, (uint64_t)&unk_10020B188);
}

uint64_t sub_1000BD118(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v160 = a4;
  uint64_t v147 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v139 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v146 = (uint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v10);
  uint64_t v138 = (uint64_t)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  id v143 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v159 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v153 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v152 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  NSString v18 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v165, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v19);
  if (!Strong)
  {
    unint64_t v54 = sub_10009E7C0();
    uint64_t v55 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v54, 0LL, 0LL);
    _BYTE *v56 = 0;
    a2();
    return swift_errorRelease(v55);
  }

  uint64_t v148 = Strong;
  uint64_t v21 = &Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
  swift_beginAccess(&Strong[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap], v164, 0LL, 0LL);
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(*(void *)v21 + 64LL);
  uint64_t v149 = *(void *)v21 + 64LL;
  uint64_t v24 = 1LL << *(_BYTE *)(v22 + 32);
  uint64_t v25 = -1LL;
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v150 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v156 = v22;
  swift_bridgeObjectRetain(v22);
  int64_t v27 = 0LL;
  uint64_t v28 = &selRef__inCaseLidClosed_;
  uint64_t v29 = &_mh_execute_header;
  uint64_t v134 = a3;
  id v133 = a2;
  uint64_t v137 = v15;
  uint64_t v136 = v16;
  uint64_t v135 = v18;
  if (!v26) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v154 = (v26 - 1) & v26;
  int64_t v155 = v27;
  for (unint64_t i = __clz(__rbit64(v26)) | (v27 << 6); ; unint64_t i = __clz(__rbit64(v32)) + (v33 << 6))
  {
    uint64_t v35 = *(void *)(*(void *)(v156 + 56) + 8 * i);
    uint64_t v36 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_retain(v35);
    id v37 = [v36 isFirstUnlocked];
    uint64_t v157 = v35;
    if (!(_DWORD)v37) {
      break;
    }
    uint64_t v38 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v39 = sub_100098D58(v15, (uint64_t)qword_10023DCC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v39, v15);
    id v4 = (char **)sub_100138AA0((uint64_t)v18);
    swift_release(v38);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v5 = (uint64_t)v4[2];
    if (v5) {
      goto LABEL_26;
    }
LABEL_37:
    swift_release(v157);
    swift_bridgeObjectRelease(v4);
LABEL_38:
    unint64_t v26 = v154;
    int64_t v27 = v155;
    if (v154) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v31 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_79;
    }

    if (v31 >= v150) {
      goto LABEL_45;
    }
    unint64_t v32 = *(void *)(v149 + 8 * v31);
    int64_t v33 = v27 + 1;
    if (!v32)
    {
      int64_t v33 = v27 + 2;
      if (v27 + 2 >= v150) {
        goto LABEL_45;
      }
      unint64_t v32 = *(void *)(v149 + 8 * v33);
      if (!v32)
      {
        int64_t v33 = v27 + 3;
        if (v27 + 3 >= v150) {
          goto LABEL_45;
        }
        unint64_t v32 = *(void *)(v149 + 8 * v33);
        if (!v32)
        {
          int64_t v33 = v27 + 4;
          if (v27 + 4 >= v150) {
            goto LABEL_45;
          }
          unint64_t v32 = *(void *)(v149 + 8 * v33);
          if (!v32)
          {
            uint64_t v34 = v27 + 5;
            if (v27 + 5 >= v150)
            {
LABEL_45:
              uint64_t v65 = swift_release(v156);
              uint64_t v5 = (uint64_t)v18;
              uint64_t v29 = (const mach_header_64 *)v16;
              id v4 = (char **)static os_log_type_t.default.getter(v65);
              if (qword_100234C20 != -1) {
                goto LABEL_80;
              }
            }

            else
            {
              unint64_t v32 = *(void *)(v149 + 8 * v34);
              if (v32)
              {
                int64_t v33 = v27 + 5;
                goto LABEL_21;
              }

              while (1)
              {
                int64_t v33 = v34 + 1;
                if (__OFADD__(v34, 1LL)) {
                  break;
                }
                if (v33 >= v150) {
                  goto LABEL_45;
                }
                unint64_t v32 = *(void *)(v149 + 8 * v33);
                ++v34;
                if (v32) {
                  goto LABEL_21;
                }
              }

uint64_t sub_1000BDF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020B210, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B228);
}

uint64_t sub_1000BDFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020B260, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B278);
}

uint64_t sub_1000BDFDC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BDFF8(a1, a2, a3, (uint64_t)&unk_10020B080, (uint64_t)sub_1000C9394, (uint64_t)&unk_10020B098);
}

uint64_t sub_1000BDFF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v14 - 8);
  uint64_t v30 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void **)(v6 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v18 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v18 + 16, v6);
  uint64_t v19 = (void *)swift_allocObject(a4, 48LL, 7LL);
  v19[2] = v18;
  v19[3] = a2;
  v19[4] = a3;
  void v19[5] = a1;
  aBlock[4] = v27;
  uint64_t v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = v28;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v17;
  swift_retain(v18);
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(a1);
  unint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v24 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v23, v24, v11, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v30);
  uint64_t v25 = v34;
  swift_release(v18);
  return swift_release(v25);
}

uint64_t sub_1000BE234(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v118 = *(void *)(v12 - 8);
  uint64_t v119 = v12;
  __chkstk_darwin(v12);
  uint64_t v117 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v125 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  int64_t v123 = *(void *)(v17 - 8);
  uint64_t v124 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v131, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v20);
  if (!Strong)
  {
    unint64_t v31 = sub_10009E7C0();
    uint64_t v32 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v31, 0LL, 0LL);
    *int64_t v33 = 0;
    a2();
    return swift_errorRelease(v32);
  }

  uint64_t v126 = v8;
  uint64_t v116 = v9;
  char v120 = a2;
  uint64_t v121 = a3;
  uint64_t v122 = Strong;
  id v22 = [a4 bluetoothAddress];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v25 = v24;

  swift_bridgeObjectRelease(v25);
  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    int v127 = a4;
    id v27 = [a4 bluetoothAddress];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    if (v28 == 0xD000000000000011LL && v30 == 0x80000001001CCC20LL)
    {
      swift_bridgeObjectRelease(0x80000001001CCC20LL);
      a4 = v127;
    }

    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
      swift_bridgeObjectRelease(v30);
      a4 = v127;
      uint64_t v36 = &selRef__inCaseLidClosed_;
      if ((v35 & 1) == 0)
      {
        uint64_t v50 = &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
        swift_beginAccess( &v122[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap],  aBlock,  0LL,  0LL);
        uint64_t v51 = *(void *)v50;
        uint64_t v52 = *(void *)v50 + 64LL;
        uint64_t v53 = 1LL << *(_BYTE *)(*(void *)v50 + 32LL);
        uint64_t v54 = -1LL;
        if (v53 < 64) {
          uint64_t v54 = ~(-1LL << v53);
        }
        unint64_t v55 = v54 & *(void *)(*(void *)v50 + 64LL);
        int64_t v112 = (unint64_t)(v53 + 63) >> 6;
        uint64_t v124 = v51;
        swift_bridgeObjectRetain(v51);
        int64_t v56 = 0LL;
        uint64_t v57 = type metadata accessor for DeviceRecord;
        uint64_t v58 = a4;
        uint64_t v59 = v116;
        uint64_t v113 = v52;
        if (!v55) {
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v115 = (v55 - 1) & v55;
        int64_t v123 = v56;
        for (unint64_t i = __clz(__rbit64(v55)) | (v56 << 6); ; unint64_t i = __clz(__rbit64(v62)) + (v63 << 6))
        {
          uint64_t v65 = *(void *)(*(void *)(v124 + 56) + 8 * i);
          uint64_t v66 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
          swift_retain(v65);
          id v67 = [v66 isFirstUnlocked];
          uint64_t v125 = v65;
          if ((_DWORD)v67)
          {
            uint64_t v68 = v57;
            uint64_t v69 = sub_10013A76C();
            if (qword_100234B30 != -1) {
              swift_once(&qword_100234B30, sub_100094AFC);
            }
            uint64_t v70 = v119;
            uint64_t v71 = sub_100098D58(v119, (uint64_t)qword_10023DCC0);
            uint64_t v73 = (uint64_t)v117;
            uint64_t v72 = v118;
            (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v117, v71, v70);
            uint64_t v74 = sub_100138AA0(v73);
            swift_release(v69);
            uint64_t v75 = v70;
            uint64_t v76 = v74;
            (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v75);
            uint64_t v57 = v68;
            uint64_t v52 = v113;
            uint64_t v77 = v74[2];
            if (v77) {
              goto LABEL_36;
            }
          }

          else
          {
            uint64_t v90 = static os_log_type_t.error.getter(v67);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v91 = v90;
            uint64_t v76 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v91,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
            uint64_t v77 = _swiftEmptyArrayStorage[2];
            if (v77)
            {
LABEL_36:
              uint64_t v78 = (uint64_t)v76
                  + ((*(unsigned __int8 *)(v59 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
              uint64_t v114 = v76;
              swift_bridgeObjectRetain(v76);
              uint64_t v79 = *(void *)(v59 + 72);
              while (1)
              {
                sub_1000A7C90(v78, (uint64_t)v11, v57);
                id v80 = &v11[*(int *)(v126 + 24)];
                uint64_t v81 = v57;
                uint64_t v83 = *(void *)v80;
                uint64_t v82 = *((void *)v80 + 1);
                id v84 = [v58 v36[402]];
                uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
                uint64_t v87 = v86;

                if (v83 == v85 && v82 == v87) {
                  break;
                }
                char v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v82, v85, v87, 0LL);
                swift_bridgeObjectRelease(v87);
                sub_1000A7CD4((uint64_t)v11, v81);
                if ((v89 & 1) != 0) {
                  goto LABEL_51;
                }
                uint64_t v57 = v81;
                v78 += v79;
                --v77;
                uint64_t v58 = v127;
                uint64_t v36 = &selRef__inCaseLidClosed_;
                if (!v77)
                {
                  swift_release(v125);
                  swift_bridgeObjectRelease_n(v114, 2LL);
                  uint64_t v59 = v116;
                  uint64_t v52 = v113;
                  goto LABEL_48;
                }
              }

              swift_bridgeObjectRelease(v82);
              sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
LABEL_51:
              uint64_t v92 = swift_bridgeObjectRelease_n(v114, 2LL);
              uint64_t v93 = static os_log_type_t.error.getter(v92);
              uint64_t v94 = v127;
              if (qword_100234C20 != -1) {
                swift_once(&qword_100234C20, sub_10018A978);
              }
              uint64_t v95 = qword_10023DFC0;
              uint64_t v96 = sub_100098CD8((uint64_t *)&unk_100234E00);
              uint64_t v97 = swift_allocObject(v96, 72LL, 7LL);
              *(_OWORD *)(v97 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
              *(void *)(v97 + 56) = sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
              *(void *)(v97 + 64) = sub_1000C934C( &qword_100235808,  &qword_100235800,  &OBJC_CLASS___BTMagicPairingSettings_ptr);
              *(void *)(v97 + 32) = v94;
              id v98 = v94;
              os_log(_:dso:log:_:_:)( v93,  &_mh_execute_header,  v95,  "CloudSync: Cannot Update Secondary Cloud MagicSettings: %@",  58LL,  2LL,  v97);
              swift_release(v124);

              swift_release(v125);
              return swift_bridgeObjectRelease(v97);
            }
          }

          swift_release(v125);
          swift_bridgeObjectRelease(v76);
LABEL_48:
          int64_t v56 = v123;
          unint64_t v55 = v115;
          if (v115) {
            goto LABEL_15;
          }
LABEL_16:
          int64_t v61 = v56 + 1;
          if (__OFADD__(v56, 1LL))
          {
            __break(1u);
            goto LABEL_57;
          }

          if (v61 >= v112) {
            goto LABEL_54;
          }
          unint64_t v62 = *(void *)(v52 + 8 * v61);
          int64_t v63 = v56 + 1;
          if (!v62)
          {
            int64_t v63 = v56 + 2;
            if (v56 + 2 >= v112) {
              goto LABEL_54;
            }
            unint64_t v62 = *(void *)(v52 + 8 * v63);
            if (!v62)
            {
              int64_t v63 = v56 + 3;
              if (v56 + 3 >= v112) {
                goto LABEL_54;
              }
              unint64_t v62 = *(void *)(v52 + 8 * v63);
              if (!v62)
              {
                int64_t v63 = v56 + 4;
                if (v56 + 4 >= v112) {
                  goto LABEL_54;
                }
                unint64_t v62 = *(void *)(v52 + 8 * v63);
                if (!v62)
                {
                  uint64_t v64 = v56 + 5;
                  if (v56 + 5 >= v112)
                  {
LABEL_54:
                    uint64_t v99 = swift_release(v124);
                    unint64_t v55 = static os_log_type_t.default.getter(v99);
                    if (qword_100234C20 != -1) {
                      goto LABEL_58;
                    }
                    goto LABEL_55;
                  }

                  unint64_t v62 = *(void *)(v52 + 8 * v64);
                  if (!v62)
                  {
                    while (1)
                    {
                      int64_t v63 = v64 + 1;
                      if (__OFADD__(v64, 1LL)) {
                        break;
                      }
                      if (v63 >= v112) {
                        goto LABEL_54;
                      }
                      unint64_t v62 = *(void *)(v52 + 8 * v63);
                      ++v64;
                      if (v62) {
                        goto LABEL_31;
                      }
                    }

uint64_t sub_1000BEC5C(void *a1, void (*a2)(void), uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v7 = static os_log_type_t.error.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v8 = qword_10023DFC0;
  uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  id v11 = [a1 bluetoothAddress];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  id v16 = a1;
  id v17 = [v16 description];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 72) = v18;
  *(void *)(v10 + 80) = v20;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, a4, a5, 2LL, v10);
  swift_bridgeObjectRelease(v10);
  unint64_t v21 = sub_10009E7C0();
  uint64_t v22 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v21, 0LL, 0LL);
  *uint64_t v23 = 1;
  a2();
  return swift_errorRelease(v22);
}

uint64_t sub_1000BEDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4358(a1, a2, a3, a4, (uint64_t)&unk_10020B120, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B138);
}

uint64_t sub_1000BEE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = swift_allocObject(&unk_10020AEA0, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  uint64_t v51 = sub_1000C92C8;
  uint64_t v52 = (void *)v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  uint64_t v49 = sub_1000BF234;
  uint64_t v50 = &unk_10020AEB8;
  unint64_t v15 = _Block_copy(&aBlock);
  id v16 = v52;
  swift_bridgeObjectRetain(a2);
  swift_release(v16);
  [v5 removeAADeviceRecordWithBluetoothAddress:v13 completion:v15];
  _Block_release(v15);

  NSString v17 = String._bridgeToObjectiveC()();
  uint64_t v18 = swift_allocObject(&unk_10020AEF0, 32LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  uint64_t v51 = sub_1000C92EC;
  uint64_t v52 = (void *)v18;
  aBlock = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  uint64_t v49 = sub_1000BF234;
  uint64_t v50 = &unk_10020AF08;
  uint64_t v19 = _Block_copy(&aBlock);
  uint64_t v20 = v52;
  swift_bridgeObjectRetain(a2);
  swift_release(v20);
  [v5 removeAAProxCardsInfoWithBluetoothAddress:v17 completion:v19];
  _Block_release(v19);

  NSString v21 = String._bridgeToObjectiveC()();
  uint64_t v22 = swift_allocObject(&unk_10020AF40, 32LL, 7LL);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  uint64_t v51 = sub_1000C9310;
  uint64_t v52 = (void *)v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  uint64_t v49 = sub_1000BF234;
  uint64_t v50 = &unk_10020AF58;
  uint64_t v23 = _Block_copy(&aBlock);
  unint64_t v24 = v52;
  swift_bridgeObjectRetain(a2);
  swift_release(v24);
  [v5 removeHMDeviceCloudRecordWithBluetoothAddress:v21 completion:v23];
  _Block_release(v23);

  unint64_t v25 = *(void **)&v5[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v26 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v26 + 16, v5);
  id v27 = (void *)swift_allocObject(&unk_10020AF90, 56LL, 7LL);
  uint64_t v28 = v41;
  uint64_t v29 = v42;
  v27[2] = v26;
  v27[3] = v28;
  v27[4] = v29;
  void v27[5] = a1;
  v27[6] = a2;
  uint64_t v51 = sub_1000C9338;
  uint64_t v52 = v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  uint64_t v49 = sub_1000F2C54;
  uint64_t v50 = &unk_10020AFA8;
  uint64_t v30 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a2);
  id v31 = v25;
  swift_retain(v26);
  uint64_t v32 = swift_retain(v29);
  static DispatchQoS.unspecified.getter(v32);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v33 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v35 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  uint64_t v36 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v34, v35, v40, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v36);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
  id v37 = v52;
  swift_release(v26);
  return swift_release(v37);
}

void sub_1000BF234(uint64_t a1, void *a2)
{
  id v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_1000BF288(uint64_t result, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = swift_errorRetain(result);
    uint64_t v11 = static os_log_type_t.error.getter(v10);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v12 = qword_10023DFC0;
    uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10009914C();
    *(void *)(v14 + 32) = a2;
    *(void *)(v14 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v15 = _convertErrorToNSError(_:)(v9);
    *(void *)(v14 + 96) = sub_1000A4A64(0LL, (unint64_t *)&qword_1002357F0, &OBJC_CLASS___NSError_ptr);
    *(void *)(v14 + 104) = sub_1000C934C( &qword_1002357F8,  (unint64_t *)&qword_1002357F0,  &OBJC_CLASS___NSError_ptr);
    *(void *)(v14 + 72) = v15;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, a4, a5, 2LL, v14);
    swift_bridgeObjectRelease(v14);
    return swift_errorRelease(v9);
  }

  return result;
}

uint64_t sub_1000BF3DC( uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t a1), uint64_t a4, uint64_t a5)
{
  uint64_t v80 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v76 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v72 = *(void *)(v12 - 8);
  uint64_t v73 = v12;
  __chkstk_darwin(v12);
  uint64_t v71 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v82, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v14);
  if (!Strong)
  {
    unint64_t v63 = sub_10009E7C0();
    uint64_t v64 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v63, 0LL, 0LL);
    *uint64_t v65 = 0;
    a2();
    return swift_errorRelease(v64);
  }

  uint64_t v70 = a2;
  id v67 = a3;
  uint64_t v69 = (void *)Strong;
  uint64_t v16 = Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap;
  swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v81, 0LL, 0LL);
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(*(void *)v16 + 64LL);
  uint64_t v74 = *(void *)v16 + 64LL;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v75 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v77 = v17;
  swift_bridgeObjectRetain(v17);
  int64_t v22 = 0LL;
  uint64_t v23 = type metadata accessor for MagicPairingSettingsRecord;
  __int128 v68 = xmmword_1001A5EA0;
  while (1)
  {
    if (v21)
    {
      uint64_t v78 = (v21 - 1) & v21;
      int64_t v79 = v22;
      unint64_t v24 = __clz(__rbit64(v21)) | (v22 << 6);
      goto LABEL_25;
    }

    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    if (v25 >= v75) {
      goto LABEL_45;
    }
    unint64_t v26 = *(void *)(v74 + 8 * v25);
    int64_t v27 = v22 + 1;
    if (!v26)
    {
      int64_t v27 = v22 + 2;
      if (v22 + 2 >= v75) {
        goto LABEL_45;
      }
      unint64_t v26 = *(void *)(v74 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v22 + 3;
        if (v22 + 3 >= v75) {
          goto LABEL_45;
        }
        unint64_t v26 = *(void *)(v74 + 8 * v27);
        if (!v26)
        {
          int64_t v27 = v22 + 4;
          if (v22 + 4 >= v75) {
            goto LABEL_45;
          }
          unint64_t v26 = *(void *)(v74 + 8 * v27);
          if (!v26) {
            break;
          }
        }
      }
    }

uint64_t sub_1000BFB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BFB48(a1, a2, a3, a4, (uint64_t)&unk_10020B030, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020B048);
}

uint64_t sub_1000BFB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BFB48(a1, a2, a3, a4, (uint64_t)&unk_10020AFE0, (uint64_t)sub_1000C90AC, (uint64_t)&unk_10020AFF8);
}

uint64_t sub_1000BFB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v35, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2, v18);
  if (result)
  {
    uint64_t v20 = (void *)result;
    id v21 = *(id *)(result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);

    int64_t v22 = (void *)swift_allocObject(a5, 40LL, 7LL);
    v22[2] = a3;
    v22[3] = a4;
    v22[4] = a1;
    aBlock[4] = v28;
    uint64_t v34 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = v29;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain(a4);
    uint64_t v24 = swift_errorRetain(a1);
    static DispatchQoS.unspecified.getter(v24);
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v27 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v26, v27, v12, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v30);
    return swift_release(v34);
  }

  return result;
}

uint64_t sub_1000BFD9C@<X0>(uint64_t a1@<X8>)
{
  v28[1] = a1;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v28 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v28 - v13;
  type metadata accessor for DeviceStore(0LL);
  sub_100121DF8((uint64_t)v11);
  if (qword_100234B50 != -1) {
    swift_once(&qword_100234B50, sub_1000A513C);
  }
  uint64_t v15 = sub_100098D58(v5, (uint64_t)qword_10023DD30);
  v16.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
  uint64_t v17 = URL.path.getter(v16);
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v8, v5);
  URL.appendingPathComponent(_:isDirectory:)(v17, v19, 1LL);
  swift_bridgeObjectRelease(v19);
  v20(v11, v5);
  if (qword_100234B38 != -1) {
    swift_once(&qword_100234B38, sub_10009AD40);
  }
  uint64_t v21 = qword_10023DCD8;
  swift_bridgeObjectRetain(qword_10023DCD8);
  sub_10009ADB8();
  uint64_t v22 = swift_bridgeObjectRelease(v21);
  uint64_t v23 = UUID.init()(v22);
  uint64_t v24 = UUID.uuidString.getter(v23);
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  URL.appendingPathComponent(_:)(v24);
  swift_bridgeObjectRelease(v26);
  URL.appendingPathExtension(_:)(0x676E6967617473LL, 0xE700000000000000LL);
  v20(v11, v5);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v5);
}

uint64_t sub_1000C008C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v30 = *(id *)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v16 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v31, v12);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = (v17 + 40) & ~v17;
  uint64_t v19 = (char *)swift_allocObject(&unk_10020AE50, v18 + v14, v17 | 7);
  uint64_t v20 = v32;
  *((void *)v19 + 2) = v16;
  *((void *)v19 + 3) = v20;
  *((void *)v19 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[v18], v15, v12);
  aBlock[4] = sub_1000C9270;
  uint64_t v38 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020AE68;
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = v30;
  swift_retain(v16);
  uint64_t v23 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v26 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  uint64_t v27 = v38;
  swift_release(v16);
  return swift_release(v27);
}

uint64_t sub_1000C0344(uint64_t a1, void (*a2)(void), uint64_t a3, char *a4)
{
  uint64_t v8 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v34, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    HIDWORD(v33) = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v14 = qword_10023DFC0;
    uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    uint64_t v17 = sub_1000AE6C8();
    sub_10013C84C((uint64_t)v10);
    swift_release(v17);
    uint64_t v18 = type metadata accessor for SoundProfileRecord(0LL);
    int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v10, 1LL, v18);
    sub_100099358((uint64_t)v10, &qword_1002357D0);
    unint64_t v20 = sub_10009914C();
    unint64_t v21 = v20;
    uint64_t v22 = 0x676E697461647055LL;
    if (v19 == 1) {
      uint64_t v22 = 0x676E69646441LL;
    }
    unint64_t v23 = 0xE800000000000000LL;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = v20;
    if (v19 == 1) {
      unint64_t v23 = 0xE600000000000000LL;
    }
    *(void *)(v16 + 32) = v22;
    *(void *)(v16 + 40) = v23;
    uint64_t v24 = type metadata accessor for URL(0LL);
    uint64_t v25 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v21;
    *(void *)(v16 + 72) = v26;
    *(void *)(v16 + 80) = v27;
    os_log(_:dso:log:_:_:)( HIDWORD(v33),  &_mh_execute_header,  v14,  "%s Sound Profile Record with URL: %@",  36LL,  2LL,  v16);
    swift_bridgeObjectRelease(v16);
    uint64_t v28 = sub_1000AE6C8();
    sub_10015820C(a4, (void (*)(void))a2, a3);

    return swift_release(v28);
  }

  else
  {
    unint64_t v30 = sub_10009E7C0();
    uint64_t v31 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v30, 0LL, 0LL);
    *uint64_t v32 = 0;
    a2();
    return swift_errorRelease(v31);
  }

uint64_t sub_1000C0698(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020AE00, (uint64_t)sub_1000C91E8, (uint64_t)&unk_10020AE18);
}

void sub_1000C06B4(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    uint64_t v9 = sub_1000AE6C8();
    swift_release(v9);
    sub_1000C0C24((uint64_t)a2, a3);
  }

  else
  {
    unint64_t v10 = sub_10009E7C0();
    uint64_t v11 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v10, 0LL, 0LL);
    *uint64_t v12 = 0;
    a2(0LL, v11);
    swift_errorRelease(v11);
  }

void sub_1000C0780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000C07D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  int v19 = (void *)swift_allocObject(&unk_10020AD60, 56LL, 7LL);
  v19[2] = a1;
  v19[3] = a3;
  v19[4] = a4;
  void v19[5] = a5;
  v19[6] = a6;
  aBlock[4] = sub_1000C91B0;
  uint64_t v32 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020AD78;
  unint64_t v20 = _Block_copy(aBlock);
  id v21 = a1;
  swift_retain(a4);
  swift_bridgeObjectRetain(a6);
  id v22 = v18;
  static DispatchQoS.unspecified.getter(v22);
  unint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v25 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return swift_release(v32);
}

void sub_1000C09F8(void *a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    id v9 = a1;
    uint64_t v10 = static os_log_type_t.default.getter(v9);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v11 = qword_10023DFC0;
    uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    id v14 = v9;
    id v15 = [v14 description];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v19 = sub_10009914C();
    *(void *)(v13 + 32) = v16;
    *(void *)(v13 + 40) = v18;
    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v19;
    *(void *)(v13 + 64) = v19;
    *(void *)(v13 + 72) = a4;
    *(void *)(v13 + 80) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  v11,  "CloudSync: Fetched SoundProfileRecord %@ from cloud for the additional user: %@",  79LL,  2LL,  v13);
    swift_bridgeObjectRelease(v13);
    id v25 = v14;
    a2(a1, 0LL);
  }

  else
  {
    uint64_t v20 = static os_log_type_t.error.getter(0LL);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: No SoundProfileRecord found",  38LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v21 = sub_10009E7C0();
    uint64_t v22 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v21, 0LL, 0LL);
    *uint64_t v23 = 3;
    a2(0LL, v22);
    swift_errorRelease(v22);
  }

uint64_t sub_1000C0C24(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020AC98, (uint64_t)sub_1000C9138, (uint64_t)&unk_10020ACB0);
}

void sub_1000C0C40(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v155 = *(void *)(v10 - 8);
  *(void *)&__int128 v156 = v10;
  __chkstk_darwin(v10);
  uint64_t v154 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v159, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v16);
  if (!Strong)
  {
    unint64_t v37 = sub_10009E7C0();
    uint64_t v38 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v37, 0LL, 0LL);
    *uint64_t v39 = 0;
    a2(0LL, v38);
    swift_errorRelease(v38);
    return;
  }

  uint64_t v18 = (char *)Strong;
  v158[3] = &type metadata for AudioAccessoryFeatures;
  v158[4] = sub_10009E740();
  LOBYTE(v158[0]) = 2;
  char v19 = isFeatureEnabled(_:)(v158);
  sub_10009A498(v158);
  if ((v19 & 1) == 0
    || (uint64_t v20 = &v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices],
        swift_beginAccess(&v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices], v157, 0LL, 0LL),
        *(void *)(*(void *)v20 + 16LL) != 1LL))
  {
    uint64_t v26 = sub_1000C2A0C();
    if ((v26 & 1) != 0)
    {
      uint64_t v27 = static os_log_type_t.default.getter(v26);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      uint64_t v28 = qword_10023DFC0;
      uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
      *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v31 = v18;
      uint64_t v32 = &v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices];
      swift_beginAccess(v32, v158, 0LL, 0LL);
      uint64_t v33 = *(void *)(*(void *)v32 + 16LL);
      *(void *)(v30 + 56) = &type metadata for Int;
      *(void *)(v30 + 64) = &protocol witness table for Int;
      *(void *)(v30 + 32) = v33;
      os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v28,  "CloudSync: Number of connected devices %d. SoundProfileRecord for Additional user is not supported. SoundProfile Record not fetched.",  v138);
      swift_bridgeObjectRelease(v30);
      unint64_t v34 = sub_10009E7C0();
      uint64_t v35 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v34, 0LL, 0LL);
      *uint64_t v36 = 3;
      a2(0LL, v35);
      swift_errorRelease(v35);

      return;
    }

    goto LABEL_79;
  }

  uint64_t v141 = v15;
  unint64_t v21 = sub_1000C1970();
  unint64_t v22 = (unint64_t)v21;
  BOOL v23 = v21[2] >= 2uLL;
  uint64_t v152 = a2;
  uint64_t v153 = a3;
  uint64_t v149 = v18;
  uint64_t v143 = v12;
  uint64_t v142 = v13;
  if (v23)
  {
    uint64_t v13 = (void *)static os_log_type_t.default.getter(v21);
    if (qword_100234C20 != -1) {
      goto LABEL_87;
    }
    goto LABEL_13;
  }

  swift_bridgeObjectRelease(v21);
  uint64_t v24 = *(void *)v20;
  if (*(void *)(*(void *)v20 + 16LL))
  {
    uint64_t v20 = *(char **)(v24 + 32);
    uint64_t v25 = *(void *)(v24 + 40);
    swift_bridgeObjectRetain(v25);
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v25 = 0LL;
  }

  uint64_t v46 = &v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
  swift_beginAccess(&v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap], v158, 0LL, 0LL);
  uint64_t v47 = *(void *)v46;
  uint64_t v48 = *(void *)(*(void *)v46 + 64LL);
  uint64_t v139 = *(void *)v46 + 64LL;
  uint64_t v49 = 1LL << *(_BYTE *)(v47 + 32);
  uint64_t v50 = -1LL;
  if (v49 < 64) {
    uint64_t v50 = ~(-1LL << v49);
  }
  unint64_t v22 = v50 & v48;
  int64_t v140 = (unint64_t)(v49 + 63) >> 6;
  uint64_t v148 = v47;
  swift_bridgeObjectRetain(v47);
  int64_t v51 = 0LL;
  uint64_t v144 = v7;
  if (!v22) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v146 = (v22 - 1) & v22;
  int64_t v147 = v51;
  for (unint64_t i = __clz(__rbit64(v22)) | (v51 << 6); ; unint64_t i = __clz(__rbit64(v54)) + (v55 << 6))
  {
    uint64_t v57 = *(void *)(v148 + 56);
    uint64_t v58 = (uint64_t *)(*(void *)(v148 + 48) + 16 * i);
    uint64_t v59 = v58[1];
    uint64_t v145 = *v58;
    uint64_t v60 = *(void *)(v57 + 8 * i);
    uint64_t v61 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_bridgeObjectRetain(v59);
    swift_retain(v60);
    id v62 = [v61 isFirstUnlocked];
    uint64_t v150 = v60;
    uint64_t v151 = v59;
    if ((_DWORD)v62)
    {
      uint64_t v63 = sub_10013A76C();
      if (qword_100234B70 != -1) {
        swift_once(&qword_100234B70, sub_1000CAF84);
      }
      uint64_t v64 = v156;
      uint64_t v65 = sub_100098D58(v156, (uint64_t)qword_10023DD70);
      uint64_t v66 = (uint64_t)v154;
      uint64_t v67 = v155;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v154, v65, v64);
      uint64_t v13 = sub_100138A68(v66);
      swift_release(v63);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v64);
      uint64_t v7 = v144;
      a3 = v153;
    }

    else
    {
      uint64_t v68 = static os_log_type_t.error.getter(v62);
      a3 = v153;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v13 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
    }

    uint64_t v69 = v13[2];
    if (v69) {
      break;
    }
    swift_release(v150);
    swift_bridgeObjectRelease(v13);
LABEL_54:
    swift_bridgeObjectRelease(v151);
    a2 = v152;
    int64_t v51 = v147;
    unint64_t v22 = v146;
    if (v146) {
      goto LABEL_19;
    }
LABEL_20:
    int64_t v53 = v51 + 1;
    if (__OFADD__(v51, 1LL))
    {
      __break(1u);
LABEL_87:
      swift_once(&qword_100234C20, sub_10018A978);
LABEL_13:
      uint64_t v40 = qword_10023DFC0;
      uint64_t v41 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
      __int128 v156 = xmmword_1001A5EA0;
      *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v43 = *(void *)v20;
      if (*(void *)(*(void *)v20 + 16LL))
      {
        uint64_t v44 = *(void *)(v43 + 32);
        unint64_t v45 = *(void *)(v43 + 40);
        swift_bridgeObjectRetain(v45);
      }

      else
      {
        uint64_t v44 = 0LL;
        unint64_t v45 = 0LL;
      }

      *(void *)(v42 + 56) = &type metadata for String;
      unint64_t v90 = sub_10009914C();
      *(void *)(v42 + 64) = v90;
      if (v45) {
        uint64_t v91 = v44;
      }
      else {
        uint64_t v91 = 0LL;
      }
      unint64_t v92 = 0xE000000000000000LL;
      if (v45) {
        unint64_t v92 = v45;
      }
      *(void *)(v42 + 32) = v91;
      *(void *)(v42 + 40) = v92;
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v40, "CloudSync: Connected device %@ is shared.", 41LL, 2LL, v42);
      swift_bridgeObjectRelease(v42);
      uint64_t v18 = v149;
      uint64_t v93 = (uint64_t *)&v149[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID];
      char v94 = sub_1001228BC( *(void *)&v149[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID],  *(void *)&v149[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID + 8],  (void *)v22);
      uint64_t v95 = swift_bridgeObjectRelease(v22);
      if ((v94 & 1) != 0)
      {
        uint64_t v96 = *v93;
        uint64_t v97 = v93[1];
        id v98 = &v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap];
        uint64_t v26 = swift_beginAccess( &v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap],  v158,  0LL,  0LL);
        uint64_t v99 = *(void *)v98;
        a2 = v152;
        a3 = v153;
        if (*(void *)(*(void *)v98 + 16LL))
        {
          swift_bridgeObjectRetain(v97);
          swift_bridgeObjectRetain(v99);
          sub_1000A3A10(v96, v97);
          char v101 = v100;
          swift_bridgeObjectRelease(v97);
          uint64_t v26 = swift_bridgeObjectRelease(v99);
          if ((v101 & 1) != 0)
          {
            uint64_t v102 = *(void *)v98;
            if (*(void *)(v102 + 16))
            {
              uint64_t v103 = *v93;
              uint64_t v104 = v93[1];
              swift_bridgeObjectRetain(v104);
              swift_bridgeObjectRetain(v102);
              unint64_t v105 = sub_1000A3A10(v103, v104);
              if ((v106 & 1) != 0)
              {
                uint64_t v107 = *(void *)(*(void *)(v102 + 56) + 8 * v105);
                swift_retain(v107);
                swift_bridgeObjectRelease(v104);
                swift_bridgeObjectRelease(v102);
                id v108 = *(void **)&v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
                uint64_t v109 = v18;
                uint64_t v111 = *v93;
                uint64_t v110 = v93[1];
                int64_t v112 = v141;
                void *v141 = v108;
                uint64_t v113 = v142;
                uint64_t v114 = v143;
                ((void (*)(void *, void, uint64_t))v142[13])( v112,  enum case for DispatchPredicate.onQueue(_:),  v143);
                swift_bridgeObjectRetain(v110);
                id v115 = v108;
                LOBYTE(v10_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v112);
                ((void (*)(void *, uint64_t))v113[1])(v112, v114);
                uint64_t v116 = (void *)swift_allocObject(&unk_10020AD10, 56LL, 7LL);
                v116[2] = v109;
                v116[3] = a2;
                v116[4] = a3;
                v116[5] = v111;
                void v116[6] = v110;
                swift_bridgeObjectRetain(v110);
                id v117 = v109;
                swift_retain(a3);
                sub_100159E08((uint64_t)sub_1000C9160, (uint64_t)v116);

                swift_release(v107);
                swift_bridgeObjectRelease(v110);
                uint64_t v118 = v116;
                goto LABEL_83;
              }

              swift_bridgeObjectRelease(v104);
              uint64_t v26 = swift_bridgeObjectRelease(v102);
            }

            uint64_t v134 = static os_log_type_t.error.getter(v26);
            os_log(_:dso:log:_:_:)( v134,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: SecondaryDeviceStore is invalid. SoundProfileRecord not fetched.",  75LL,  2LL,  _swiftEmptyArrayStorage);
            unint64_t v135 = sub_10009E7C0();
            uint64_t v136 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v135, 0LL, 0LL);
            _BYTE *v137 = 0;
            a2(0LL, v136);
            swift_errorRelease(v136);

            return;
          }
        }

void *sub_1000C1970()
{
  uint64_t v99 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v90 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v3 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v88 = *(void *)(v4 - 8);
  uint64_t v89 = v4;
  __chkstk_darwin(v4);
  uint64_t v87 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))( v10,  enum case for DispatchPredicate.onQueue(_:),  v6,  v8);
  id v12 = v11;
  uint64_t v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) == 0)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    swift_once(&qword_100234B70, sub_1000CAF84);
LABEL_56:
    uint64_t v57 = v89;
    uint64_t v58 = sub_100098D58(v89, (uint64_t)qword_10023DD70);
    uint64_t v60 = (uint64_t)v87;
    uint64_t v59 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v58, v57);
    uint64_t v61 = sub_100138A68(v60);
    swift_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v57);
    goto LABEL_60;
  }

  uint64_t v85 = v0;
  uint64_t v14 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices, v101, 0LL, 0LL);
  uint64_t v15 = *v14;
  if (*(void *)(*v14 + 16))
  {
    uint64_t v1 = *(void *)(v15 + 32);
    uint64_t v10 = *(void **)(v15 + 40);
    swift_bridgeObjectRetain(v10);
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v16 = (uint64_t *)(v85 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
  swift_beginAccess(v85 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v100, 0LL, 0LL);
  uint64_t v17 = *v16;
  uint64_t v18 = *(void *)(*v16 + 64);
  uint64_t v91 = *v16 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v92 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v93 = v17;
  swift_bridgeObjectRetain(v17);
  int64_t v22 = 0LL;
  uint64_t v6 = (uint64_t)type metadata accessor for MagicPairingSettingsRecord;
  __int128 v86 = xmmword_1001A5EA0;
  char v94 = _swiftEmptyArrayStorage;
LABEL_10:
  if (v21)
  {
    uint64_t v96 = (v21 - 1) & v21;
    int64_t v97 = v22;
    unint64_t v23 = __clz(__rbit64(v21)) | (v22 << 6);
LABEL_26:
    uint64_t v28 = (uint64_t *)(*(void *)(v93 + 48) + 16 * v23);
    uint64_t v13 = *v28;
    uint64_t v29 = v28[1];
    uint64_t v30 = *(void *)(*(void *)(v93 + 56) + 8 * v23);
    uint64_t v31 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
    swift_bridgeObjectRetain(v29);
    swift_retain(v30);
    id v32 = [v31 isFirstUnlocked];
    uint64_t v98 = v30;
    uint64_t v95 = v13;
    if ((_DWORD)v32)
    {
      uint64_t v13 = sub_10013A76C();
      if (qword_100234B70 != -1) {
        swift_once(&qword_100234B70, sub_1000CAF84);
      }
      uint64_t v33 = v89;
      uint64_t v34 = sub_100098D58(v89, (uint64_t)qword_10023DD70);
      uint64_t v36 = (uint64_t)v87;
      uint64_t v35 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v34, v33);
      unint64_t v37 = sub_100138A68(v36);
      swift_release(v13);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v33);
      uint64_t v38 = v37[2];
      if (!v38) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v39 = static os_log_type_t.error.getter(v32);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v40 = v39;
      unint64_t v37 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v38 = _swiftEmptyArrayStorage[2];
      if (!v38)
      {
LABEL_8:
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(v37);
        goto LABEL_9;
      }
    }

    uint64_t v41 = v90;
    uint64_t v13 = (uint64_t)v37 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
    swift_bridgeObjectRetain(v37);
    uint64_t v42 = *(void *)(v41 + 72);
    while (1)
    {
      sub_1000A7C90(v13, (uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
      if (v10)
      {
        uint64_t v43 = &v3[*(int *)(v99 + 24)];
        uint64_t v44 = (void *)*((void *)v43 + 1);
        if (*(void *)v43 == v1 && v10 == v44)
        {
          sub_1000A7CD4((uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
LABEL_46:
          uint64_t v47 = swift_bridgeObjectRelease_n(v37, 2LL);
          uint64_t v48 = static os_log_type_t.default.getter(v47);
          if (qword_100234C20 != -1) {
            swift_once(&qword_100234C20, sub_10018A978);
          }
          uint64_t v13 = qword_10023DFC0;
          uint64_t v49 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v50 = swift_allocObject(v49, 72LL, 7LL);
          *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = v86;
          *(void *)(v50 + 56) = &type metadata for String;
          *(void *)(v50 + 64) = sub_10009914C();
          uint64_t v51 = v95;
          *(void *)(v50 + 32) = v95;
          *(void *)(v50 + 40) = v29;
          swift_bridgeObjectRetain(v29);
          os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  v13,  "CloudSync: Connected device belongs to %@ additional user's account",  67LL,  2LL,  v50);
          swift_bridgeObjectRelease(v50);
          if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) != 0) {
            uint64_t v52 = v94;
          }
          else {
            uint64_t v52 = sub_10018B814(0LL, v94[2] + 1LL, 1, v94);
          }
          unint64_t v54 = v52[2];
          unint64_t v53 = v52[3];
          if (v54 >= v53 >> 1) {
            uint64_t v52 = sub_10018B814((void *)(v53 > 1), v54 + 1, 1, v52);
          }
          v52[2] = v54 + 1;
          char v94 = v52;
          int64_t v55 = &v52[2 * v54];
          v55[4] = v51;
          v55[5] = v29;
LABEL_9:
          swift_release(v98);
          unint64_t v21 = v96;
          int64_t v22 = v97;
          goto LABEL_10;
        }

        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v43, v44, v1, v10, 0LL);
        sub_1000A7CD4((uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
        if ((v46 & 1) != 0) {
          goto LABEL_46;
        }
      }

      else
      {
        sub_1000A7CD4((uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
      }

      v13 += v42;
      if (!--v38)
      {
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease_n(v37, 2LL);
        goto LABEL_9;
      }
    }
  }

  int64_t v24 = v22 + 1;
  if (__OFADD__(v22, 1LL))
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  if (v24 >= v92) {
    goto LABEL_54;
  }
  unint64_t v25 = *(void *)(v91 + 8 * v24);
  int64_t v26 = v22 + 1;
  if (v25) {
    goto LABEL_25;
  }
  int64_t v26 = v22 + 2;
  if (v22 + 2 >= v92) {
    goto LABEL_54;
  }
  unint64_t v25 = *(void *)(v91 + 8 * v26);
  if (v25) {
    goto LABEL_25;
  }
  int64_t v26 = v22 + 3;
  if (v22 + 3 >= v92) {
    goto LABEL_54;
  }
  unint64_t v25 = *(void *)(v91 + 8 * v26);
  if (v25)
  {
LABEL_25:
    uint64_t v96 = (v25 - 1) & v25;
    int64_t v97 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
    goto LABEL_26;
  }

  uint64_t v27 = v22 + 4;
  if (v22 + 4 < v92)
  {
    unint64_t v25 = *(void *)(v91 + 8 * v27);
    if (!v25)
    {
      while (1)
      {
        int64_t v26 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_79;
        }
        if (v26 >= v92) {
          goto LABEL_54;
        }
        unint64_t v25 = *(void *)(v91 + 8 * v26);
        ++v27;
        if (v25) {
          goto LABEL_25;
        }
      }
    }

    int64_t v26 = v22 + 4;
    goto LABEL_25;
  }

LABEL_54:
  swift_release(v93);
  uint64_t v6 = sub_1000AE6C8();
  id v56 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v56)
  {
    uint64_t v13 = sub_10013A76C();
    if (qword_100234B70 != -1) {
      goto LABEL_81;
    }
    goto LABEL_56;
  }

  uint64_t v62 = static os_log_type_t.error.getter(v56);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v61 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v62,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_60:
  swift_release(v6);
  uint64_t v63 = v61[2];
  if (v63)
  {
    uint64_t v64 = (char *)v61 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
    uint64_t v65 = *(void *)(v90 + 72);
    while (1)
    {
      if (v10)
      {
        uint64_t v66 = &v64[*(int *)(v99 + 24)];
        uint64_t v67 = (void *)*((void *)v66 + 1);
        BOOL v68 = *(void *)v66 == v1 && v10 == v67;
        if (v68 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v66, v67, v1, v10, 0LL) & 1) != 0) {
          break;
        }
      }

      v64 += v65;
      if (!--v63) {
        goto LABEL_76;
      }
    }

    swift_bridgeObjectRelease(v10);
    uint64_t v69 = swift_bridgeObjectRelease(v61);
    uint64_t v70 = static os_log_type_t.default.getter(v69);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v71 = qword_10023DFC0;
    uint64_t v72 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
    *(_OWORD *)(v73 + swift_unknownObjectWeakDestroy(v0 + 16) = v86;
    uint64_t v74 = (uint64_t *)(v85 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID);
    uint64_t v76 = *(void *)(v85 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID);
    uint64_t v75 = *(void *)(v85 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID + 8);
    *(void *)(v73 + 56) = &type metadata for String;
    *(void *)(v73 + 64) = sub_10009914C();
    *(void *)(v73 + 32) = v76;
    *(void *)(v73 + 40) = v75;
    swift_bridgeObjectRetain(v75);
    os_log(_:dso:log:_:_:)( v70,  &_mh_execute_header,  v71,  "CloudSync: Connected device belongs to %@ primary user's account",  64LL,  2LL,  v73);
    swift_bridgeObjectRelease(v73);
    uint64_t v78 = *v74;
    uint64_t v77 = v74[1];
    swift_bridgeObjectRetain(v77);
    if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) != 0) {
      int64_t v79 = v94;
    }
    else {
      int64_t v79 = sub_10018B814(0LL, v94[2] + 1LL, 1, v94);
    }
    unint64_t v81 = v79[2];
    unint64_t v80 = v79[3];
    if (v81 >= v80 >> 1) {
      int64_t v79 = sub_10018B814((void *)(v80 > 1), v81 + 1, 1, v79);
    }
    v79[2] = v81 + 1;
    id v82 = &v79[2 * v81];
    v82[4] = v78;
    v82[5] = v77;
  }

  else
  {
LABEL_76:
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v61);
    return v94;
  }

  return v79;
}

  uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[26] + 8));
  if ((v229 & 1) != 0)
  {
LABEL_29:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[27] + 8));
    if ((v230 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_56:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[28] + 8));
    if ((v231 & 1) == 0) {
      return result;
    }
    goto LABEL_57;
  }

  uint64_t v165 = v149;
  uint64_t v166 = [v164 masterKey];
  if (!v166)
  {
    uint64_t v171 = v536;
    sub_1000D5630(v163, v536);
    goto LABEL_61;
  }

  uint64_t v167 = v166;
  uint64_t v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v170 = v169;

  sub_100099394(v168, v170);
  uint64_t v171 = v536;
  sub_1000D5630(v548, v536);
  uint64_t v172 = v170 >> 60;
  v163 = v548;
  if (v172 > 0xE)
  {
LABEL_61:
    sub_1000D5674(v171);
    sub_1000D5674(v163);
    uint64_t v186 = v547;
    goto LABEL_62;
  }

  id v173 = [v164 masterKey];
  if (!v173)
  {
    uint64_t v175 = 0LL;
    v309 = (uint64_t *)(v171 + v546[7]);
    BOOL v179 = *v309;
    uint64_t v180 = v309[1];
    uint64_t v177 = 0xF000000000000000LL;
    id v162 = (uint64_t)v537;
LABEL_165:
    uint64_t v184 = (uint64_t)v541;
    uint64_t v186 = v547;
    sub_1000991CC(v179, v180);
    sub_1000D5674(v171);
    sub_1000D5674(v548);
    sub_1000AC4C0(v175, v177);
    if (v180 >> 60 != 15)
    {
      sub_1000AC4C0(v179, v180);
      uint64_t v164 = v549;
      uint64_t v185 = v545;
      uint64_t v149 = v165;
      uint64_t v10 = v539;
      goto LABEL_111;
    }

    int64_t v140 = sub_10013A76C();
    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    uint64_t v141 = v179;
    uint64_t v142 = sub_100098D58(v179, (uint64_t)qword_10023DE08);
    uint64_t v143 = v178;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 16))(v115, v142, v141);
    uint64_t v144 = v184;
    uint64_t v122 = (void *)sub_100138608(v114, v184, v115, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
    swift_release(v140);
    uint64_t v145 = (*(uint64_t (**)(uint64_t, uint64_t))(v143 + 8))(v115, v141);
    if (v122)
    {
      a16 = a18;
      goto LABEL_58;
    }

    uint64_t v146 = static os_log_type_t.error.getter(v145);
    int64_t v147 = qword_10023DFC8;
    uint64_t v134 = swift_allocObject(v168, 72LL, 7LL);
    *(_OWORD *)(v134 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v148 = v169;
    *(void *)(v134 + 56) = &type metadata for String;
    *(void *)(v134 + 64) = v148;
    *(void *)(v134 + 32) = v114;
    *(void *)(v134 + 40) = v144;
    swift_bridgeObjectRetain(v144);
    os_log(_:dso:log:_:_:)( v146,  &_mh_execute_header,  v147,  "HMDeviceCloudRecord not found to remove: %@",  43LL,  2LL,  v134);
LABEL_60:
    uint64_t v149 = v134;
LABEL_61:
    swift_bridgeObjectRelease(v149);
    uint64_t v111 = v89;
    uint64_t v110 = v180;
    goto LABEL_29;
  }

  uint64_t v175 = a14;
  uint64_t v91 = sub_10013A76C();
  if (qword_100234B70 != -1) {
    swift_once(&qword_100234B70, sub_1000CAF84);
  }
  int64_t v92 = v179;
  uint64_t v93 = sub_100098D58(v179, (uint64_t)qword_10023DD70);
  char v94 = v178;
  (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v34, v93, v92);
  uint64_t v95 = objc_autoreleasePoolPush();
  __int128 v156 = v34;
  int64_t v97 = URL.path.getter(v96);
  uint64_t v99 = v98;
  char v100 = v176;
  URL.appendingPathComponent(_:)(v97);
  swift_bridgeObjectRelease(v99);
  char v101 = v177;
  uint64_t v102 = v184;
  URL.appendingPathComponent(_:)(a1);
  uint64_t v103 = *(void (**)(char *, uint64_t))(v94 + 8);
  v103(v100, v92);
  objc_autoreleasePoolPop(v95);
  uint64_t v104 = objc_autoreleasePoolPush();
  __chkstk_darwin(v104);
  *(&v155 - 2) = (uint64_t)v101;
  *(&v155 - 1) = v91;
  unint64_t v105 = v162;
  OS_dispatch_queue.sync<A>(execute:)(v162, v175, &v155 - 4, v159);
  objc_autoreleasePoolPop(v104);
  v103(v101, v92);
  swift_release(v91);
  v103(v156, v92);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v160 + 48))(v105, 1LL, v161) == 1)
  {
    char v106 = sub_100099358((uint64_t)v105, (uint64_t *)&unk_100235810);
    uint64_t v107 = static os_log_type_t.error.getter(v106);
    id v108 = qword_10023DFC8;
    uint64_t v62 = swift_allocObject(v168, 72LL, 7LL);
    *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v109 = v169;
    *(void *)(v62 + 56) = &type metadata for String;
    *(void *)(v62 + 64) = v109;
    *(void *)(v62 + 32) = v183;
    *(void *)(v62 + 40) = v102;
    swift_bridgeObjectRetain(v102);
    os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, v108, "Magic Record not found to remove: %@", 36LL, 2LL, v62);
    goto LABEL_28;
  }

  uint64_t v66 = type metadata accessor for MagicPairingSettingsRecord;
  uint64_t v88 = v158;
  sub_1000C998C((uint64_t)v105, v158, type metadata accessor for MagicPairingSettingsRecord);
  uint64_t v89 = v181;
  swift_retain(v181);
  uint64_t v90 = v182;
  swift_retain(v182);
  a15(v88, 0LL, v185, v89, v180, v90);
LABEL_20:
  swift_release(v89);
  swift_release(v90);
  sub_1000A7CD4(v88, v66);
LABEL_30:
  swift_release_n(v90, 2LL);
  int64_t v112 = v89;
LABEL_31:
  swift_release_n(v112, 3LL);
  swift_release_n(v89, 3LL);
  return swift_release_n(v90, 4LL);
}

uint64_t sub_1000C22B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  uint64_t v16 = (void *)swift_allocObject(&unk_10020ADB0, 40LL, 7LL);
  void v16[2] = a1;
  v16[3] = a3;
  void v16[4] = a4;
  aBlock[4] = sub_1000C91C8;
  uint64_t v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020ADC8;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a1;
  swift_retain(a4);
  id v19 = v15;
  static DispatchQoS.unspecified.getter(v19);
  unint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v22 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v27);
}

void sub_1000C24C8(void *a1, void (*a2)(void *, uint64_t))
{
  if (a1)
  {
    id v4 = a1;
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v6 = qword_10023DFC0;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v9 = v4;
    id v10 = [v9 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10009914C();
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v13;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "fetched SoundProfileRecord from cloud: %@", 41LL, 2LL, v8);
    swift_bridgeObjectRelease(v8);
    id v18 = v9;
    a2(a1, 0LL);
  }

  else
  {
    uint64_t v14 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_10023DFC0,  "No SoundProfileRecord found",  27LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v15 = sub_10009E7C0();
    uint64_t v16 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v15, 0LL, 0LL);
    *uint64_t v17 = 3;
    a2(0LL, v16);
    swift_errorRelease(v16);
  }

uint64_t sub_1000C26F0(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020AC48, (uint64_t)sub_1000C9118, (uint64_t)&unk_10020AC60);
}

void sub_1000C270C(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t v6 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v32, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v13);
  if (Strong)
  {
    unint64_t v15 = (void *)Strong;
    uint64_t v16 = sub_1000AE6C8();
    sub_10013C84C((uint64_t)v8);
    swift_release(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
    {
      uint64_t v17 = sub_100099358((uint64_t)v8, &qword_1002357D0);
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_10023DFC0,  "No SoundProfileRecord found",  27LL,  2LL,  _swiftEmptyArrayStorage);
      ((void (*)(void))a2)(0LL);
    }

    else
    {
      uint64_t v22 = sub_1000C998C((uint64_t)v8, (uint64_t)v12, type metadata accessor for SoundProfileRecord);
      uint64_t v23 = static os_log_type_t.default.getter(v22);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      uint64_t v24 = qword_10023DFC0;
      uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
      *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v27 = sub_1000A52AC();
      uint64_t v29 = v28;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 64) = sub_10009914C();
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Removing SoundProfileRecord: %@", 31LL, 2LL, v26);
      swift_bridgeObjectRelease(v26);
      uint64_t v30 = sub_1000AE6C8();
      sub_100159500(a2, a3);
      swift_release(v30);

      sub_1000A7CD4((uint64_t)v12, type metadata accessor for SoundProfileRecord);
    }
  }

  else
  {
    unint64_t v19 = sub_10009E7C0();
    uint64_t v20 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v19, 0LL, 0LL);
    *uint64_t v21 = 0;
    a2();
    swift_errorRelease(v20);
  }

uint64_t sub_1000C2A00()
{
  return notify_post("BTCloudServicesSoundProfileChangedNotification");
}

uint64_t sub_1000C2A0C()
{
  uint64_t v70 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v66 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  id v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))( v11,  enum case for DispatchPredicate.onQueue(_:),  v7,  v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    uint64_t v14 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices);
    uint64_t v15 = swift_beginAccess(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices, v72, 0LL, 0LL);
    uint64_t v8 = *v14;
    uint64_t v16 = *(void *)(*v14 + 16);
    if (!v16)
    {
      uint64_t i = static os_log_type_t.info.getter(v15);
      if (qword_100234C20 != -1) {
LABEL_55:
      }
        swift_once(&qword_100234C20, sub_10018A978);
      os_log(_:dso:log:_:_:)( i,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: connectedDevices list is empty.",  42LL,  2LL,  _swiftEmptyArrayStorage,  v56,  v57);
      return 0LL;
    }

    uint64_t v17 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
    uint64_t v18 = v8 + 32;
    swift_bridgeObjectRetain(v8);
    uint64_t v60 = v17;
    swift_beginAccess(v17, v71, 0LL, 0LL);
    unint64_t v19 = 0LL;
    uint64_t v59 = v8;
    uint64_t v56 = v8 + 32;
    uint64_t v57 = v16;
LABEL_4:
    if (v19 < *(void *)(v8 + 16))
    {
      uint64_t v20 = (uint64_t *)(v18 + 16 * v19);
      uint64_t v1 = *v20;
      uint64_t v2 = v20[1];
      unint64_t v58 = v19 + 1;
      uint64_t v21 = *v60;
      uint64_t v22 = *(void *)(*v60 + 64);
      uint64_t v61 = *v60 + 64;
      uint64_t v23 = 1LL << *(_BYTE *)(v21 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1LL << v23);
      }
      else {
        uint64_t v24 = -1LL;
      }
      unint64_t v25 = v24 & v22;
      int64_t v62 = (unint64_t)(v23 + 63) >> 6;
      swift_bridgeObjectRetain(v2);
      uint64_t v68 = v21;
      uint64_t result = swift_bridgeObjectRetain(v21);
      for (uint64_t i = 0LL; ; uint64_t i = v67)
      {
LABEL_9:
        if (v25)
        {
          unint64_t v28 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v29 = v28 | (i << 6);
        }

        else
        {
          int64_t v30 = i + 1;
          if (__OFADD__(i, 1LL))
          {
            __break(1u);
            goto LABEL_55;
          }

          if (v30 >= v62)
          {
LABEL_43:
            swift_bridgeObjectRelease(v2);
            swift_release(v68);
            unint64_t v19 = v58;
            uint64_t v8 = v59;
            uint64_t v18 = v56;
            if (v58 != v57) {
              goto LABEL_4;
            }
            swift_bridgeObjectRelease(v59);
            return 0LL;
          }

          unint64_t v31 = *(void *)(v61 + 8 * v30);
          ++i;
          if (!v31)
          {
            uint64_t i = v30 + 1;
            if (v30 + 1 >= v62) {
              goto LABEL_43;
            }
            unint64_t v31 = *(void *)(v61 + 8 * i);
            if (!v31)
            {
              uint64_t i = v30 + 2;
              if (v30 + 2 >= v62) {
                goto LABEL_43;
              }
              unint64_t v31 = *(void *)(v61 + 8 * i);
              if (!v31)
              {
                uint64_t i = v30 + 3;
                if (v30 + 3 >= v62) {
                  goto LABEL_43;
                }
                unint64_t v31 = *(void *)(v61 + 8 * i);
                if (!v31)
                {
                  int64_t v32 = v30 + 4;
                  if (v32 >= v62) {
                    goto LABEL_43;
                  }
                  unint64_t v31 = *(void *)(v61 + 8 * v32);
                  if (!v31)
                  {
                    while (1)
                    {
                      uint64_t i = v32 + 1;
                      if (__OFADD__(v32, 1LL)) {
                        break;
                      }
                      if (i >= v62) {
                        goto LABEL_43;
                      }
                      unint64_t v31 = *(void *)(v61 + 8 * i);
                      ++v32;
                      if (v31) {
                        goto LABEL_26;
                      }
                    }

                    __break(1u);
                    return result;
                  }

                  uint64_t i = v32;
                }
              }
            }
          }

uint64_t sub_1000C309C(uint64_t a1, uint64_t a2)
{
  return sub_1000C3340(a1, a2, (uint64_t)&unk_10020ABF8, (uint64_t)sub_1000C90F8, (uint64_t)&unk_10020AC10);
}

uint64_t sub_1000C30B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices;
  uint64_t result = swift_beginAccess(a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices, v28, 0LL, 0LL);
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void *)(*(void *)v5 + 16LL);
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t result = v7[4];
  uint64_t v9 = v7[5];
  if (result == a2 && v9 == a3) {
    return result;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v9, a2, a3, 0LL);
  if ((result & 1) != 0) {
    return result;
  }
  if (v8 == 1) {
    goto LABEL_8;
  }
  uint64_t result = v7[6];
  uint64_t v20 = v7[7];
  if (result == a2 && v20 == a3) {
    return result;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v20, a2, a3, 0LL);
  if ((result & 1) != 0) {
    return result;
  }
  if (v8 == 2)
  {
LABEL_8:
    uint64_t v11 = static os_log_type_t.default.getter(result);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v12 = qword_10023DFC0;
    uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10009914C();
    *(void *)(v14 + 32) = a2;
    *(void *)(v14 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Added %@ to connectedDevices", 28LL, 2LL, v14);
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v5, v27, 33LL, 0LL);
    uint64_t v15 = *(void **)v5;
    swift_bridgeObjectRetain(a3);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    *(void *)uint64_t v5 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v15 = sub_10018B814(0LL, v15[2] + 1LL, 1, v15);
      *(void *)uint64_t v5 = v15;
    }

    unint64_t v18 = v15[2];
    unint64_t v17 = v15[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t v15 = sub_10018B814((void *)(v17 > 1), v18 + 1, 1, v15);
      *(void *)uint64_t v5 = v15;
    }

    _OWORD v15[2] = v18 + 1;
    unint64_t v19 = &v15[2 * v18];
    v19[4] = a2;
    void v19[5] = a3;
    swift_endAccess(v27);
    return sub_1000C8DBC();
  }

  else
  {
    uint64_t v22 = v7 + 9;
    uint64_t v23 = 2LL;
    while (1)
    {
      uint64_t v24 = v23 + 1;
      if (__OFADD__(v23, 1LL)) {
        break;
      }
      uint64_t result = *(v22 - 1);
      uint64_t v25 = *v22;
      if (result == a2 && v25 == a3) {
        return result;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v25, a2, a3, 0LL);
      if ((result & 1) != 0) {
        return result;
      }
      v22 += 2;
      ++v23;
      if (v24 == v8) {
        goto LABEL_8;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000C3324(uint64_t a1, uint64_t a2)
{
  return sub_1000C3340(a1, a2, (uint64_t)&unk_10020ABA8, (uint64_t)sub_1000C90E0, (uint64_t)&unk_10020ABC0);
}

uint64_t sub_1000C3340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = *(void **)&v5[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  unint64_t v18 = (void *)swift_allocObject(a3, 40LL, 7LL);
  v18[2] = v5;
  v18[3] = a1;
  void v18[4] = a2;
  aBlock[4] = a4;
  int64_t v32 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = a5;
  unint64_t v19 = _Block_copy(aBlock);
  id v20 = v17;
  uint64_t v21 = v5;
  uint64_t v22 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v22);
  int64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v25 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v11, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  return swift_release(v32);
}

uint64_t sub_1000C353C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices;
  uint64_t result = swift_beginAccess(a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices, v26, 0LL, 0LL);
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void *)(*(void *)v5 + 16LL);
  if (v8)
  {
    uint64_t v9 = v7[4];
    uint64_t v10 = v7[5];
    BOOL v11 = v9 == a2 && v10 == a3;
    if (v11 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0LL), (result & 1) != 0))
    {
      unint64_t v12 = 0LL;
LABEL_8:
      swift_beginAccess(v5, v25, 33LL, 0LL);
      sub_1000C36F0(v12);
      uint64_t v14 = v13;
      swift_endAccess(v25);
      uint64_t v15 = swift_bridgeObjectRelease(v14);
      uint64_t v16 = static os_log_type_t.default.getter(v15);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      uint64_t v17 = qword_10023DFC0;
      uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
      *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      *(void *)(v19 + 56) = &type metadata for String;
      *(void *)(v19 + 64) = sub_10009914C();
      *(void *)(v19 + 32) = a2;
      *(void *)(v19 + 40) = a3;
      swift_bridgeObjectRetain(a3);
      os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Removed %@ from connectedDevices", 32LL, 2LL, v19);
      swift_bridgeObjectRelease(v19);
      return sub_1000C8DBC();
    }

    else
    {
      id v20 = v7 + 7;
      uint64_t v21 = 1LL;
      while (v8 != v21)
      {
        unint64_t v12 = v21;
        uint64_t v22 = *(v20 - 1);
        uint64_t v23 = *v20;
        if (v22 != a2 || v23 != a3)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, a2, a3, 0LL);
          uint64_t v21 = v12 + 1;
          v20 += 2;
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_8;
      }
    }
  }

  return result;
}

uint64_t sub_1000C36F0(unint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0) {
    uint64_t v3 = sub_10018BE0C(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      void *v1 = v3;
      return v8;
    }
  }

  char v10 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v10,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000C37D8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1000C382C(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020AAE0, (uint64_t)sub_1000C90C4, (uint64_t)&unk_10020AAF8);
}

uint64_t sub_1000C3848(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    uint64_t v9 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_10023DFC0,  "resetCachedData",  15LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v10 = sub_1000AE6C8();
    swift_unknownObjectWeakInit(v22, v8);
    uint64_t v11 = swift_retain(a3);
    uint64_t v12 = static os_log_type_t.default.getter(v11);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_10023DFC8,  "Local Records deleted",  21LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v13 = sub_10013A76C();
    uint64_t v14 = *(dispatch_queue_s **)(v13 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue);
    void v20[4] = sub_1000ADDD8;
    uint64_t v21 = 0LL;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256LL;
    void v20[2] = sub_1000F2CA0;
    v20[3] = &unk_10020AB20;
    uint64_t v15 = _Block_copy(v20);
    swift_release(v21);
    dispatch_sync(v14, v15);
    _Block_release(v15);
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(0LL, "", 118LL, 332LL, 26LL, 1LL);
    uint64_t result = swift_release(v13);
    if ((v14 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      sub_1000C4358( 0LL,  (uint64_t)v22,  (uint64_t)a2,  a3,  (uint64_t)&unk_10020AB58,  (uint64_t)sub_1000C90AC,  (uint64_t)&unk_10020AB70);
      swift_release(a3);

      swift_release(v10);
      return swift_unknownObjectWeakDestroy(v22);
    }
  }

  else
  {
    unint64_t v17 = sub_10009E7C0();
    uint64_t v18 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v17, 0LL, 0LL);
    *uint64_t v19 = 0;
    a2();
    return swift_errorRelease(v18);
  }

  return result;
}

uint64_t sub_1000C3AD8(uint64_t a1, uint64_t a2)
{
  return sub_1000C3AF4(a1, a2, (uint64_t)&unk_10020A9F0, (uint64_t)sub_1000C9068, (uint64_t)&unk_10020AA08);
}

uint64_t sub_1000C3AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v13 - 8);
  uint64_t v30 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void **)(v5 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v17 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v17 + 16, v5);
  uint64_t v18 = (void *)swift_allocObject(a3, 40LL, 7LL);
  v18[2] = v17;
  v18[3] = a1;
  void v18[4] = a2;
  aBlock[4] = a4;
  uint64_t v34 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = v28;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v16;
  swift_retain(v17);
  uint64_t v21 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v21);
  int64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v24 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
  uint64_t v25 = v34;
  swift_release(v17);
  return swift_release(v25);
}

uint64_t sub_1000C3D28(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v68 = v6;
  __chkstk_darwin(v6);
  uint64_t v66 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v63 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v78, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v9);
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    uint64_t v12 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_10023DFC0,  "resetCachedData",  15LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v13 = sub_1000AE6C8();
    swift_unknownObjectWeakInit(v77, v11);
    uint64_t v14 = swift_retain(a3);
    uint64_t v15 = static os_log_type_t.default.getter(v14);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_10023DFC8,  "Reset Local and Cloud Container",  31LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v61 = v13;
    uint64_t v16 = sub_10013B740();
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v18 = &unk_10023D000;
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_10023DFB8,  "Nuke and reset cloud container",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v19 = v16 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    uint64_t v20 = *(void *)(v19 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 32));
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      unint64_t v58 = v11;
      uint64_t v59 = a2;
      uint64_t v60 = a3;
      uint64_t v69 = v16 + 24;
      int64_t v62 = CKCurrentUserDefaultName;
      uint64_t v57 = swift_bridgeObjectRetain(v20);
      uint64_t v22 = (dispatch_group_s **)(v57 + 40);
      __int128 v73 = xmmword_1001A5EA0;
      do
      {
        uint64_t v24 = (uint64_t)*(v22 - 1);
        uint64_t v23 = *v22;
        uint64_t v25 = swift_bridgeObjectRetain(*v22);
        uint64_t v26 = static os_log_type_t.default.getter(v25);
        uint64_t v27 = v18[503];
        uint64_t v28 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
        *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v73;
        *(void *)(v29 + 56) = &type metadata for String;
        *(void *)(v29 + 64) = sub_10009914C();
        *(void *)(v29 + 32) = v24;
        *(void *)(v29 + 40) = v23;
        swift_bridgeObjectRetain(v23);
        os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Remove zone %@ from cloud container", 37LL, 2LL, v29);
        swift_bridgeObjectRelease(v29);
        if ((sub_1000FF098(v24, v23) & 1) != 0 && (uint64_t v31 = swift_unknownObjectWeakLoadStrong(v69, v30)) != 0)
        {
          uint64_t v32 = v31;
          sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
          v33._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          v33._object = v34;
          v35._uint64_t countAndFlagsBits = v24;
          v35._object = v23;
          Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v35, v33).super.isa;
          uint64_t v37 = *(void **)(v32 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
          uint64_t v38 = swift_allocObject(&unk_10020AA40, 32LL, 7LL);
          *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = isa;
          *(void *)(v38 + 24) = v32;
          aBlock[4] = sub_1000C90A0;
          uint64_t v76 = v38;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = sub_1000F2C54;
          void aBlock[3] = &unk_10020AA58;
          uint64_t v71 = _Block_copy(aBlock);
          id v70 = v37;
          uint64_t v72 = isa;
          uint64_t v39 = swift_unknownObjectRetain(v32);
          uint64_t v40 = v63;
          static DispatchQoS.unspecified.getter(v39);
          uint64_t v74 = _swiftEmptyArrayStorage;
          uint64_t v41 = v16;
          uint64_t v42 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v43 = sub_100098CD8((uint64_t *)&unk_100235790);
          uint64_t v44 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
          uint64_t v45 = v66;
          char v46 = v18;
          uint64_t v47 = v68;
          uint64_t v48 = v42;
          uint64_t v16 = v41;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v43, v44, v68, v48);
          char v49 = v70;
          uint64_t v50 = v71;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v45, v71);
          _Block_release(v50);

          uint64_t v51 = v47;
          uint64_t v18 = v46;
          (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v51);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v65);
          uint64_t v52 = v76;

          swift_unknownObjectRelease(v32);
          swift_release(v52);
        }

        else
        {
          swift_bridgeObjectRelease(v23);
        }

        v22 += 2;
        --v21;
      }

      while (v21);
      swift_unknownObjectRelease(v16);
      swift_bridgeObjectRelease(v57);
      a3 = v60;
      a2 = v59;
      uint64_t v11 = v58;
    }

    else
    {
      swift_unknownObjectRelease(v16);
    }

    sub_1000C4358( 0LL,  (uint64_t)v77,  (uint64_t)a2,  a3,  (uint64_t)&unk_10020AA90,  (uint64_t)sub_1000C90AC,  (uint64_t)&unk_10020AAA8);
    swift_release(a3);

    swift_release(v61);
    return swift_unknownObjectWeakDestroy(v77);
  }

  else
  {
    unint64_t v53 = sub_10009E7C0();
    uint64_t v54 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v53, 0LL, 0LL);
    *uint64_t v55 = 0;
    a2();
    return swift_errorRelease(v54);
  }

uint64_t sub_1000C4358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a2, v35, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2, v18);
  if (result)
  {
    uint64_t v20 = (void *)result;
    id v21 = *(id *)(result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);

    uint64_t v22 = (void *)swift_allocObject(a5, 40LL, 7LL);
    v22[2] = a3;
    v22[3] = a4;
    v22[4] = a1;
    aBlock[4] = v28;
    uint64_t v34 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = v29;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain(a4);
    uint64_t v24 = swift_errorRetain(a1);
    static DispatchQoS.unspecified.getter(v24);
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v27 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v26, v27, v12, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v30);
    return swift_release(v34);
  }

  return result;
}

char *sub_1000C45A8()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v4 = (char *)sub_1000AE6C8();
  uint64_t v5 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue];
  *uint64_t v3 = v6;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.notOnQueue(_:), v0);
  id v7 = v6;
  uint64_t v8 = _dispatchPreconditionTest(_:)(v3);
  (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  id v9 = *(id *)&v4[v5];
  uint64_t v3 = (void *)sub_100098CD8(&qword_1002357C8);
  OS_dispatch_queue.sync<A>(execute:)(&v20, sub_1000C900C, v4, v3);
  swift_release(v4);

  unint64_t v4 = v20;
  uint64_t v8 = static os_log_type_t.default.getter(v10);
  if (qword_100234C20 != -1) {
LABEL_5:
  }
    swift_once(&qword_100234C20, sub_10018A978);
  uint64_t v11 = qword_10023DFC0;
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v20 = v4;
  uint64_t v14 = v4;
  uint64_t v15 = String.init<A>(describing:)(&v20, v3);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10009914C();
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v11, "fetched accountInfo: %@", 23LL, 2LL, v13);
  swift_bridgeObjectRelease(v13);
  return v4;
}

uint64_t sub_1000C47AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000AE6C8();
  uint64_t v3 = sub_1000C4A98(v2);
  uint64_t v5 = v4;
  swift_release(v2);
  uint64_t v31 = v3;
  uint64_t v32 = v5;
  v6._uint64_t countAndFlagsBits = 2570LL;
  v6._object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  v29[0] = 0LL;
  v29[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v30._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v30._object = (void *)0x80000001001CC5B0LL;
  id v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
  swift_beginAccess(v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v29, 0LL, 0LL);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  uint64_t v10 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *v7;
  uint64_t v12 = v11 + 64;
  uint64_t v13 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v11 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(v11);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_5;
    }

    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v26 >= v16) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v12 + 8 * v26);
    ++v18;
    if (!v27)
    {
      int64_t v18 = v26 + 1;
      if (v26 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v12 + 8 * v18);
      if (!v27)
      {
        int64_t v18 = v26 + 2;
        if (v26 + 2 >= v16) {
          goto LABEL_23;
        }
        unint64_t v27 = *(void *)(v12 + 8 * v18);
        if (!v27)
        {
          int64_t v18 = v26 + 3;
          if (v26 + 3 >= v16) {
            goto LABEL_23;
          }
          unint64_t v27 = *(void *)(v12 + 8 * v18);
          if (!v27) {
            break;
          }
        }
      }
    }

uint64_t type metadata accessor for DeviceManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd13DeviceManager);
}

uint64_t sub_1000C4A98(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  Swift::String v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  *Swift::String v8 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))( v8,  enum case for DispatchPredicate.notOnQueue(_:),  v4,  v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v13 = 0x65736C6166LL;
  id v14 = *(id *)(a1 + v9);
  uint64_t v15 = sub_100098CD8(&qword_1002357C8);
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_1000C900C, a1, v15);

  uint64_t countAndFlagsBits = (void *)aBlock._countAndFlagsBits;
  v52[0] = 0xD00000000000002BLL;
  v52[1] = 0x80000001001CC1A0LL;
  v17._object = (void *)0x80000001001CC1D0LL;
  v17._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v18._object = (void *)0x80000001001CC200LL;
  String.append(_:)(v18);
  if (!countAndFlagsBits)
  {
    aBlock._uint64_t countAndFlagsBits = 0x6C62616C69617641LL;
    aBlock._object = (void *)0xEB00000000203A65LL;
LABEL_8:
    unint64_t v27 = 0xE500000000000000LL;
    uint64_t v28 = 0x65736C6166LL;
    goto LABEL_9;
  }

  id v19 = [countAndFlagsBits loginID];
  if (v19)
  {
    unint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    Swift::String v23 = v22;

    aBlock._uint64_t countAndFlagsBits = 540689481LL;
    aBlock._object = (void *)0xE400000000000000LL;
    v24._uint64_t countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v23);
    v25._uint64_t countAndFlagsBits = 10LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    object = aBlock._object;
    String.append(_:)(aBlock);
    swift_bridgeObjectRelease(object);
  }

  aBlock._uint64_t countAndFlagsBits = 0x6C62616C69617641LL;
  aBlock._object = (void *)0xEB00000000203A65LL;
  unint64_t v27 = 0xE400000000000000LL;
  uint64_t v28 = 1702195828LL;
LABEL_9:
  unint64_t v29 = v27;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease(v27);
  v30._uint64_t countAndFlagsBits = 10LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  uint64_t v31 = aBlock._object;
  String.append(_:)(aBlock);
  swift_bridgeObjectRelease(v31);
  aBlock._uint64_t countAndFlagsBits = 0x3A656574616E614DLL;
  aBlock._object = (void *)0xE900000000000020LL;
  if (countAndFlagsBits && ([countAndFlagsBits manateeAvailable] & 1) != 0)
  {
    uint64_t v32 = (void *)0xE400000000000000LL;
    uint64_t v13 = 1702195828LL;
  }

  else
  {
    uint64_t v32 = (void *)0xE500000000000000LL;
  }

  v33._uint64_t countAndFlagsBits = v13;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  v34._uint64_t countAndFlagsBits = 10LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  Swift::String v35 = aBlock._object;
  String.append(_:)(aBlock);
  swift_bridgeObjectRelease(v35);
  v36._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v36._object = (void *)0x80000001001CC230LL;
  String.append(_:)(v36);
  uint64_t v37 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v38 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v38 + 16, v2);
  uint64_t v39 = (void *)swift_allocObject(&unk_10020A978, 40LL, 7LL);
  v39[2] = v38;
  v39[3] = v52;
  v39[4] = a1;
  uint64_t v40 = swift_allocObject(&unk_10020A9A0, 32LL, 7LL);
  *(void *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000C9038;
  *(void *)(v40 + 24) = v39;
  uint64_t v50 = sub_1000CA2B4;
  uint64_t v51 = v40;
  aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  uint64_t v48 = sub_1000F2CA0;
  char v49 = &unk_10020A9B8;
  uint64_t v41 = _Block_copy(&aBlock);
  uint64_t v42 = v51;
  uint64_t v43 = v37;
  swift_retain(a1);
  swift_retain(v40);
  swift_release(v42);
  dispatch_sync(v43, v41);

  _Block_release(v41);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v40, "", 114LL, 1160LL, 27LL, 1LL);
  uint64_t result = swift_release(v40);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v45 = v52[0];
    swift_release(v39);
    return v45;
  }

void sub_1000C4EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v271 = a3;
  uint64_t v5 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v259 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v275 = (char *)&v248 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v277 = (uint64_t)&v248 - v8;
  uint64_t v9 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v257 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v258 = (char *)&v248 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v276 = (uint64_t)&v248 - v12;
  uint64_t v13 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v13);
  uint64_t v265 = (uint64_t)&v248 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v264 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v263 = *(void *)(v264 - 8);
  __chkstk_darwin(v264);
  uint64_t v255 = (uint64_t)&v248 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v256 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  *(void *)&__int128 v278 = (char *)&v248 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v18);
  uint64_t v262 = (uint64_t)&v248 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v261 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  uint64_t v260 = *(void *)(v261 - 8);
  __chkstk_darwin(v261);
  uint64_t v253 = (uint64_t)&v248 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v254 = (uint64_t)&v248 - v22;
  uint64_t v23 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  int64_t v26 = (char *)&v248 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for URL(0LL);
  uint64_t v268 = *(void *)(v27 - 8);
  v269 = (void *)v27;
  __chkstk_darwin(v27);
  v267 = (char *)&v248 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v248 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  Swift::String v35 = (char *)&v248 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v248 - v37;
  a1 += 16LL;
  swift_beginAccess(a1, v281, 0LL, 0LL);
  id Strong = (id)swift_unknownObjectWeakLoadStrong(a1, v39);
  if (!Strong) {
    return;
  }
  unint64_t v273 = (unint64_t)"===========================\n";
  v40._object = (void *)0x80000001001CB070LL;
  v40._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = 0xD000000000000029LL;
  v41._object = (void *)0x80000001001CC260LL;
  uint64_t v252 = 0xD000000000000029LL;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  unint64_t v272 = (unint64_t)"Device Record]------------\n";
  v42._object = (void *)0x80000001001CB0D0LL;
  uint64_t v279 = a2;
  String.append(_:)(v42);
  uint64_t v44 = static os_log_type_t.default.getter(v43);
  if (qword_100234C38 != -1) {
    swift_once(&qword_100234C38, sub_10018AAE4);
  }
  uint64_t v45 = qword_10023DFD8;
  os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_10023DFD8,  "-------------Account Keys-------------",  38LL,  2LL,  _swiftEmptyArrayStorage);
  sub_10013A844((uint64_t)v31);
  int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32);
  uint64_t v250 = v5;
  if (v46 == 1)
  {
    sub_100099358((uint64_t)v31, (uint64_t *)&unk_1002357E0);
    uint64_t v47 = v279;
  }

  else
  {
    *(void *)&__int128 v274 = v24;
    uint64_t v48 = sub_1000C998C((uint64_t)v31, (uint64_t)v38, type metadata accessor for LegacyAccountMagicKeysRecord);
    uint64_t v49 = static os_log_type_t.default.getter(v48);
    uint64_t v50 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
    *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    sub_1000A7C90((uint64_t)v38, (uint64_t)v35, type metadata accessor for LegacyAccountMagicKeysRecord);
    uint64_t v52 = sub_1000AA4B0();
    uint64_t v54 = v53;
    sub_1000A7CD4((uint64_t)v35, type metadata accessor for LegacyAccountMagicKeysRecord);
    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 64) = sub_10009914C();
    *(void *)(v51 + 32) = v52;
    *(void *)(v51 + 40) = v54;
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v45, "%@", 2LL, 2LL, v51);
    swift_bridgeObjectRelease(v51);
    sub_1000A7C90((uint64_t)v38, (uint64_t)v35, type metadata accessor for LegacyAccountMagicKeysRecord);
    uint64_t v55 = sub_1000AA4B0();
    uint64_t v57 = v56;
    sub_1000A7CD4((uint64_t)v35, type metadata accessor for LegacyAccountMagicKeysRecord);
    v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v280._object = (void *)0xE700000000000000LL;
    v58._uint64_t countAndFlagsBits = v55;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v57);
    object = v280._object;
    swift_bridgeObjectRetain(v280._object);
    v60._uint64_t countAndFlagsBits = 10LL;
    v60._object = (void *)0xE100000000000000LL;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(object);
    uint64_t v61 = v280._object;
    uint64_t v47 = v279;
    String.append(_:)(v280);
    swift_bridgeObjectRelease(v61);
    uint64_t v24 = v274;
    sub_1000A7CD4((uint64_t)v38, type metadata accessor for LegacyAccountMagicKeysRecord);
  }

  v62._object = (void *)(v273 | 0x8000000000000000LL);
  v62._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v62);
  v63._object = (void *)0x80000001001CC2C0LL;
  v63._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v63);
  v64._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v64._object = (void *)(v272 | 0x8000000000000000LL);
  String.append(_:)(v64);
  uint64_t v66 = static os_log_type_t.default.getter(v65);
  os_log(_:dso:log:_:_:)( v66,  &_mh_execute_header,  qword_10023DFD8,  "-------------Device Records-------------",  40LL,  2LL,  _swiftEmptyArrayStorage);
  id v266 = (id)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v67 = [v266 isFirstUnlocked];
  uint64_t v68 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
  if (!(_DWORD)v67)
  {
    uint64_t v95 = static os_log_type_t.error.getter(v67);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v76 = (char *)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v95,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v77 = _swiftEmptyArrayStorage[2];
    if (v77) {
      goto LABEL_11;
    }
LABEL_17:
    swift_bridgeObjectRelease(v76);
    goto LABEL_18;
  }

  uint64_t v69 = sub_10013A76C();
  if (qword_100234B30 != -1) {
    swift_once(&qword_100234B30, sub_100094AFC);
  }
  uint64_t v70 = (uint64_t)v269;
  uint64_t v71 = sub_100098D58((uint64_t)v269, (uint64_t)qword_10023DCC0);
  uint64_t v72 = v268;
  uint64_t v73 = (uint64_t)v267;
  (*(void (**)(char *, uint64_t, uint64_t))(v268 + 16))(v267, v71, v70);
  uint64_t v74 = (char *)sub_100138AA0(v73);
  swift_release(v69);
  uint64_t v75 = v70;
  uint64_t v76 = v74;
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v75);
  uint64_t v77 = *((void *)v74 + 2);
  if (!v77) {
    goto LABEL_17;
  }
LABEL_11:
  unint64_t v78 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v251 = (unint64_t)v76;
  uint64_t v79 = (uint64_t)&v76[v78];
  uint64_t v80 = *(void *)(v24 + 72);
  __int128 v274 = xmmword_1001A5EA0;
  do
  {
    uint64_t v81 = sub_1000A7C90(v79, (uint64_t)v26, type metadata accessor for DeviceRecord);
    uint64_t v82 = static os_log_type_t.default.getter(v81);
    uint64_t v83 = qword_10023DFD8;
    uint64_t v84 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v85 = swift_allocObject(v84, 72LL, 7LL);
    *(_OWORD *)(v85 + swift_unknownObjectWeakDestroy(v0 + 16) = v274;
    uint64_t v86 = sub_100094CA4();
    uint64_t v88 = v87;
    *(void *)(v85 + 56) = &type metadata for String;
    *(void *)(v85 + 64) = sub_10009914C();
    *(void *)(v85 + 32) = v86;
    *(void *)(v85 + 40) = v88;
    os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "%@", 2LL, 2LL, v85);
    uint64_t v89 = v85;
    uint64_t v47 = v279;
    swift_bridgeObjectRelease(v89);
    v90._uint64_t countAndFlagsBits = sub_100094CA4();
    uint64_t v91 = v90._object;
    v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v280._object = (void *)0xE700000000000000LL;
    String.append(_:)(v90);
    swift_bridgeObjectRelease(v91);
    int64_t v92 = v280._object;
    swift_bridgeObjectRetain(v280._object);
    v93._uint64_t countAndFlagsBits = 10LL;
    v93._object = (void *)0xE100000000000000LL;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(v92);
    char v94 = v280._object;
    String.append(_:)(v280);
    swift_bridgeObjectRelease(v94);
    sub_1000A7CD4((uint64_t)v26, type metadata accessor for DeviceRecord);
    v79 += v80;
    --v77;
  }

  while (v77);
  swift_bridgeObjectRelease(v251);
  uint64_t v68 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
LABEL_18:
  v96._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  unint64_t v251 = (unint64_t)"==========================\n\n";
  v96._object = (void *)0x80000001001CC230LL;
  String.append(_:)(v96);
  v97._object = (void *)(v273 | 0x8000000000000000LL);
  v97._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v97);
  v98._object = (void *)0x80000001001CC370LL;
  v98._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v98);
  v99._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v99._object = (void *)(v272 | 0x8000000000000000LL);
  String.append(_:)(v99);
  uint64_t v101 = static os_log_type_t.default.getter(v100);
  uint64_t v102 = &unk_10023D000;
  os_log(_:dso:log:_:_:)( v101,  &_mh_execute_header,  qword_10023DFD8,  "---Device Support Information Records---",  40LL,  2LL,  _swiftEmptyArrayStorage);
  id v103 = [v266 isFirstUnlocked];
  if ((_DWORD)v103)
  {
    uint64_t v104 = sub_10013A76C();
    if (qword_100234BC8 != -1) {
      swift_once(&qword_100234BC8, sub_1000E72E4);
    }
    uint64_t v105 = (uint64_t)v269;
    uint64_t v106 = sub_100098D58((uint64_t)v269, (uint64_t)qword_10023DF00);
    uint64_t v107 = v268;
    uint64_t v108 = (uint64_t)v267;
    (*(void (**)(char *, uint64_t, uint64_t))(v268 + 16))(v267, v106, v105);
    uint64_t v109 = sub_100138AC4(v108);
    swift_release(v104);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v105);
  }

  else
  {
    uint64_t v110 = static os_log_type_t.error.getter(v103);
    if (v68[43].prots != (__objc2_prot_list *)-1LL) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v109 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v110,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v111 = v109[2];
  uint64_t v112 = v278;
  if (v111)
  {
    unint64_t v113 = (*(unsigned __int8 *)(v256 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v256 + 80);
    v249 = v109;
    uint64_t v114 = (uint64_t)v109 + v113;
    uint64_t v115 = *(void *)(v256 + 72);
    __int128 v274 = xmmword_1001A5EA0;
    do
    {
      uint64_t v116 = sub_1000A7C90(v114, v112, type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v117 = static os_log_type_t.default.getter(v116);
      uint64_t v118 = v102[507];
      uint64_t v119 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v120 = swift_allocObject(v119, 72LL, 7LL);
      *(_OWORD *)(v120 + swift_unknownObjectWeakDestroy(v0 + 16) = v274;
      Class v121 = sub_1000E7430();
      uint64_t v123 = v122;
      *(void *)(v120 + 56) = &type metadata for String;
      *(void *)(v120 + 64) = sub_10009914C();
      *(void *)(v120 + 32) = v121;
      *(void *)(v120 + 40) = v123;
      uint64_t v47 = v279;
      os_log(_:dso:log:_:_:)(v117, &_mh_execute_header, v118, "%@", 2LL, 2LL, v120);
      uint64_t v124 = v120;
      uint64_t v102 = (void *)&unk_10023D000;
      swift_bridgeObjectRelease(v124);
      v125._uint64_t countAndFlagsBits = (uint64_t)sub_1000E7430();
      uint64_t v126 = v125._object;
      v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v280._object = (void *)0xE700000000000000LL;
      String.append(_:)(v125);
      swift_bridgeObjectRelease(v126);
      uint64_t v127 = v280._object;
      swift_bridgeObjectRetain(v280._object);
      v128._uint64_t countAndFlagsBits = 10LL;
      v128._object = (void *)0xE100000000000000LL;
      String.append(_:)(v128);
      swift_bridgeObjectRelease(v127);
      uint64_t v129 = v280._object;
      String.append(_:)(v280);
      uint64_t v112 = v278;
      swift_bridgeObjectRelease(v129);
      sub_1000A7CD4(v112, type metadata accessor for DeviceSupportInformationRecord);
      v114 += v115;
      --v111;
    }

    while (v111);
    uint64_t v130 = v249;
  }

  else
  {
    uint64_t v130 = v109;
  }

  swift_bridgeObjectRelease(v130);
  *(void *)&__int128 v274 = "Found AADeviceRecord: - %@";
  v131._object = (void *)0x80000001001CB040LL;
  v131._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v131);
  v132._object = (void *)(v273 | 0x8000000000000000LL);
  v132._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v132);
  v133._object = (void *)0x80000001001CC430LL;
  v133._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v133);
  v134._object = (void *)(v272 | 0x8000000000000000LL);
  v134._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v134);
  uint64_t v136 = static os_log_type_t.default.getter(v135);
  uint64_t v137 = v102[507];
  os_log(_:dso:log:_:_:)( v136,  &_mh_execute_header,  v137,  "---------Legacy Magic Settings Records---------",  47LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v138 = v262;
  sub_10013C62C(v262);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v260 + 48))(v138, 1LL, v261) == 1)
  {
    sub_100099358(v138, &qword_1002357D8);
  }

  else
  {
    uint64_t v139 = v254;
    uint64_t v140 = sub_1000C998C(v138, v254, type metadata accessor for LegacyMagicPairingSettingsRecords);
    uint64_t v141 = static os_log_type_t.default.getter(v140);
    uint64_t v142 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v143 = swift_allocObject(v142, 72LL, 7LL);
    *(_OWORD *)(v143 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v144 = v253;
    sub_1000A7C90(v139, v253, type metadata accessor for LegacyMagicPairingSettingsRecords);
    uint64_t v145 = sub_1000F05C4();
    uint64_t v147 = v146;
    sub_1000A7CD4(v144, type metadata accessor for LegacyMagicPairingSettingsRecords);
    *(void *)(v143 + 56) = &type metadata for String;
    *(void *)(v143 + 64) = sub_10009914C();
    *(void *)(v143 + 32) = v145;
    *(void *)(v143 + 40) = v147;
    os_log(_:dso:log:_:_:)(v141, &_mh_execute_header, v137, "%@", 2LL, 2LL, v143);
    uint64_t v148 = v143;
    uint64_t v47 = v279;
    swift_bridgeObjectRelease(v148);
    sub_1000A7C90(v139, v144, type metadata accessor for LegacyMagicPairingSettingsRecords);
    uint64_t v149 = sub_1000F05C4();
    uint64_t v151 = v150;
    sub_1000A7CD4(v144, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v280._object = (void *)0xE700000000000000LL;
    v152._uint64_t countAndFlagsBits = v149;
    v152._object = v151;
    String.append(_:)(v152);
    swift_bridgeObjectRelease(v151);
    uint64_t v153 = v280._object;
    swift_bridgeObjectRetain(v280._object);
    v154._uint64_t countAndFlagsBits = 10LL;
    v154._object = (void *)0xE100000000000000LL;
    String.append(_:)(v154);
    swift_bridgeObjectRelease(v153);
    uint64_t v155 = v280._object;
    String.append(_:)(v280);
    swift_bridgeObjectRelease(v155);
    sub_1000A7CD4(v139, type metadata accessor for LegacyMagicPairingSettingsRecords);
  }

  v156._object = (void *)(v274 | 0x8000000000000000LL);
  v156._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v156);
  v157._object = (void *)(v273 | 0x8000000000000000LL);
  v157._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v157);
  v158._object = (void *)0x80000001001CC490LL;
  v158._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v158);
  v159._object = (void *)(v272 | 0x8000000000000000LL);
  v159._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v159);
  uint64_t v161 = static os_log_type_t.default.getter(v160);
  os_log(_:dso:log:_:_:)( v161,  &_mh_execute_header,  v102[507],  "---------Magic Settings Records---------",  40LL,  2LL,  _swiftEmptyArrayStorage);
  id v162 = [v266 isFirstUnlocked];
  if (!(_DWORD)v162)
  {
    uint64_t v192 = static os_log_type_t.error.getter(v162);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v168 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v192,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v169 = _swiftEmptyArrayStorage[2];
    if (v169) {
      goto LABEL_37;
    }
LABEL_43:
    swift_bridgeObjectRelease(v168);
    goto LABEL_44;
  }

  uint64_t v163 = sub_10013A76C();
  if (qword_100234B70 != -1) {
    swift_once(&qword_100234B70, sub_1000CAF84);
  }
  uint64_t v164 = (uint64_t)v269;
  uint64_t v165 = sub_100098D58((uint64_t)v269, (uint64_t)qword_10023DD70);
  uint64_t v166 = v268;
  uint64_t v167 = (uint64_t)v267;
  (*(void (**)(char *, uint64_t, uint64_t))(v268 + 16))(v267, v165, v164);
  uint64_t v168 = sub_100138A68(v167);
  swift_release(v163);
  (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v167, v164);
  uint64_t v169 = v168[2];
  if (!v169) {
    goto LABEL_43;
  }
LABEL_37:
  uint64_t v170 = *(unsigned __int8 *)(v257 + 80);
  v269 = v168;
  uint64_t v171 = (uint64_t)v168 + ((v170 + 32) & ~v170);
  uint64_t v172 = *(void *)(v257 + 72);
  __int128 v278 = xmmword_1001A5EA0;
  uint64_t v173 = (uint64_t)v258;
  uint64_t v174 = v276;
  do
  {
    uint64_t v175 = sub_1000A7C90(v171, v174, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v176 = static os_log_type_t.default.getter(v175);
    uint64_t v177 = qword_10023DFD8;
    uint64_t v178 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v179 = swift_allocObject(v178, 72LL, 7LL);
    *(_OWORD *)(v179 + swift_unknownObjectWeakDestroy(v0 + 16) = v278;
    sub_1000A7C90(v276, v173, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v180 = sub_1000CB0DC();
    uint64_t v182 = v181;
    sub_1000A7CD4(v173, type metadata accessor for MagicPairingSettingsRecord);
    *(void *)(v179 + 56) = &type metadata for String;
    *(void *)(v179 + 64) = sub_10009914C();
    *(void *)(v179 + 32) = v180;
    *(void *)(v179 + 40) = v182;
    os_log(_:dso:log:_:_:)(v176, &_mh_execute_header, v177, "%@", 2LL, 2LL, v179);
    uint64_t v183 = v179;
    uint64_t v174 = v276;
    swift_bridgeObjectRelease(v183);
    sub_1000A7C90(v174, v173, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v184 = sub_1000CB0DC();
    uint64_t v186 = v185;
    sub_1000A7CD4(v173, type metadata accessor for MagicPairingSettingsRecord);
    v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v280._object = (void *)0xE700000000000000LL;
    v187._uint64_t countAndFlagsBits = v184;
    v187._object = v186;
    String.append(_:)(v187);
    uint64_t v188 = v186;
    uint64_t v47 = v279;
    swift_bridgeObjectRelease(v188);
    uint64_t v189 = v280._object;
    swift_bridgeObjectRetain(v280._object);
    v190._uint64_t countAndFlagsBits = 10LL;
    v190._object = (void *)0xE100000000000000LL;
    String.append(_:)(v190);
    swift_bridgeObjectRelease(v189);
    uint64_t v191 = v280._object;
    String.append(_:)(v280);
    swift_bridgeObjectRelease(v191);
    sub_1000A7CD4(v174, type metadata accessor for MagicPairingSettingsRecord);
    v171 += v172;
    --v169;
  }

  while (v169);
  swift_bridgeObjectRelease(v269);
LABEL_44:
  v193._object = (void *)(v274 | 0x8000000000000000LL);
  v193._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v193);
  v194._object = (void *)(v273 | 0x8000000000000000LL);
  v194._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v194);
  v195._object = (void *)0x80000001001CC4F0LL;
  v195._uint64_t countAndFlagsBits = v252;
  String.append(_:)(v195);
  v196._object = (void *)(v272 | 0x8000000000000000LL);
  v196._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v196);
  uint64_t v197 = sub_1000AE6C8();
  swift_release(v197);
  v198._uint64_t countAndFlagsBits = 0x7274203A70696B53LL;
  v198._object = (void *)0xEB000000000A6575LL;
  String.append(_:)(v198);
  uint64_t v200 = static os_log_type_t.default.getter(v199);
  uint64_t v201 = qword_10023DFD8;
  uint64_t v202 = os_log(_:dso:log:_:_:)( v200,  &_mh_execute_header,  qword_10023DFD8,  "---------Sound Profile Record---------",  38LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v203 = static os_log_type_t.default.getter(v202);
  uint64_t v204 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v205 = swift_allocObject(v204, 72LL, 7LL);
  __int128 v278 = xmmword_1001A5EA0;
  *(_OWORD *)(v205 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v205 + 56) = &type metadata for Bool;
  *(void *)(v205 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v205 + 32) = 1;
  os_log(_:dso:log:_:_:)(v203, &_mh_execute_header, v201, "Skip: %d", v248);
  swift_bridgeObjectRelease(v205);
  uint64_t v206 = v265;
  sub_10013C84C(v265);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v263 + 48))(v206, 1LL, v264) == 1)
  {
    uint64_t v207 = v204;
    sub_100099358(v206, &qword_1002357D0);
  }

  else
  {
    uint64_t v208 = v255;
    sub_1000C998C(v206, v255, type metadata accessor for SoundProfileRecord);
    v209._uint64_t countAndFlagsBits = sub_1000A52AC();
    uint64_t v210 = v209._object;
    v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v280._object = (void *)0xE700000000000000LL;
    String.append(_:)(v209);
    swift_bridgeObjectRelease(v210);
    uint64_t v211 = v280._object;
    swift_bridgeObjectRetain(v280._object);
    v212._uint64_t countAndFlagsBits = 10LL;
    v212._object = (void *)0xE100000000000000LL;
    String.append(_:)(v212);
    swift_bridgeObjectRelease(v211);
    __int128 v213 = v280._object;
    String.append(_:)(v280);
    uint64_t v214 = swift_bridgeObjectRelease(v213);
    uint64_t v215 = static os_log_type_t.default.getter(v214);
    uint64_t v216 = qword_10023DFD8;
    uint64_t v207 = v204;
    uint64_t v217 = swift_allocObject(v204, 72LL, 7LL);
    *(_OWORD *)(v217 + swift_unknownObjectWeakDestroy(v0 + 16) = v278;
    uint64_t v218 = sub_1000A52AC();
    uint64_t v220 = v219;
    *(void *)(v217 + 56) = &type metadata for String;
    *(void *)(v217 + 64) = sub_10009914C();
    *(void *)(v217 + 32) = v218;
    *(void *)(v217 + 40) = v220;
    os_log(_:dso:log:_:_:)(v215, &_mh_execute_header, v216, "%@", 2LL, 2LL, v217);
    uint64_t v221 = v217;
    uint64_t v47 = v279;
    swift_bridgeObjectRelease(v221);
    sub_1000A7CD4(v208, type metadata accessor for SoundProfileRecord);
  }

  uint64_t v222 = (uint64_t)v275;
  sub_10009D4D4(v47);
  sub_10011C02C(v47);
  sub_10011E190(v47);
  v223._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v223._object = (void *)(v251 | 0x8000000000000000LL);
  String.append(_:)(v223);
  v224._object = (void *)(v273 | 0x8000000000000000LL);
  v224._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v224);
  v225._object = (void *)0x80000001001CC550LL;
  v225._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v225);
  v226._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v226._object = (void *)(v272 | 0x8000000000000000LL);
  String.append(_:)(v226);
  uint64_t v228 = static os_log_type_t.default.getter(v227);
  os_log(_:dso:log:_:_:)( v228,  &_mh_execute_header,  qword_10023DFD8,  "--------Cloud Deferred State Dump-------",  40LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v229 = sub_10013BA34();
  uint64_t v230 = *(void *)(v229 + 16);
  if (v230)
  {
    uint64_t v231 = *(unsigned __int8 *)(v259 + 80);
    unint64_t v273 = v229;
    uint64_t v232 = v229 + ((v231 + 32) & ~v231);
    uint64_t v276 = *(void *)(v259 + 72);
    uint64_t v233 = v250;
    uint64_t v234 = v277;
    do
    {
      uint64_t v235 = sub_1000A7C90(v232, v234, type metadata accessor for BTDeferredRecord);
      uint64_t v236 = static os_log_type_t.default.getter(v235);
      uint64_t v237 = qword_10023DFD8;
      uint64_t v238 = swift_allocObject(v207, 72LL, 7LL);
      *(_OWORD *)(v238 + swift_unknownObjectWeakDestroy(v0 + 16) = v278;
      sub_1000A7C90(v277, v222, type metadata accessor for BTDeferredRecord);
      uint64_t v239 = String.init<A>(describing:)(v222, v233);
      uint64_t v241 = v240;
      *(void *)(v238 + 56) = &type metadata for String;
      *(void *)(v238 + 64) = sub_10009914C();
      *(void *)(v238 + 32) = v239;
      *(void *)(v238 + 40) = v241;
      uint64_t v222 = (uint64_t)v275;
      os_log(_:dso:log:_:_:)(v236, &_mh_execute_header, v237, "%@", 2LL, 2LL, v238);
      swift_bridgeObjectRelease(v238);
      sub_1000A7C90(v277, v222, type metadata accessor for BTDeferredRecord);
      v242._uint64_t countAndFlagsBits = String.init<A>(describing:)(v222, v233);
      uint64_t v243 = v242._object;
      v280._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v280._object = (void *)0xE700000000000000LL;
      String.append(_:)(v242);
      swift_bridgeObjectRelease(v243);
      uint64_t v244 = v280._object;
      swift_bridgeObjectRetain(v280._object);
      v245._uint64_t countAndFlagsBits = 10LL;
      v245._object = (void *)0xE100000000000000LL;
      String.append(_:)(v245);
      swift_bridgeObjectRelease(v244);
      uint64_t v246 = v280._object;
      String.append(_:)(v280);
      uint64_t v234 = v277;
      swift_bridgeObjectRelease(v246);
      sub_1000A7CD4(v234, type metadata accessor for BTDeferredRecord);
      v232 += v276;
      --v230;
    }

    while (v230);
    uint64_t v229 = v273;
  }

  swift_bridgeObjectRelease(v229);
  v247._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v247._object = (void *)(v274 | 0x8000000000000000LL);
  String.append(_:)(v247);
}

uint64_t sub_1000C6684()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v9 = swift_allocObject(&unk_10020A900, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_1000C8C10;
  uint64_t v19 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020A918;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v8;
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v14 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release(v19);
}

uint64_t sub_1000C6878(uint64_t a1)
{
  uint64_t v21 = &type metadata for AudioAccessoryFeatures;
  unint64_t v2 = sub_10009E740();
  unint64_t v22 = v2;
  LOBYTE(v20[0]) = 0;
  char v3 = isFeatureEnabled(_:)(v20);
  sub_10009A498(v20);
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices);
    swift_beginAccess(a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices, v19, 0LL, 0LL);
    uint64_t v5 = *v4;
    uint64_t v6 = swift_bridgeObjectRetain(v5);
    sub_10009C834(v6);
    swift_bridgeObjectRelease(v5);
  }

  uint64_t v21 = &type metadata for AudioAccessoryFeatures;
  unint64_t v22 = v2;
  LOBYTE(v20[0]) = 0;
  isFeatureEnabled(_:)(v20);
  sub_10009A498(v20);
  uint64_t v7 = a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices;
  uint64_t v8 = swift_beginAccess(a1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_connectedDevices, v20, 0LL, 0LL);
  if (*(void *)(*(void *)v7 + 16LL) == 1LL)
  {
    uint64_t v9 = sub_1000C1970();
    unint64_t v10 = v9[2];
    uint64_t v11 = swift_bridgeObjectRelease(v9);
    if (v10 > 1)
    {
      return sub_1000C8DBC();
    }

    else
    {
      uint64_t v12 = static os_log_type_t.default.getter(v11);
      if (qword_100234C20 != -1) {
        swift_once(&qword_100234C20, sub_10018A978);
      }
      return os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Current user switched. Connected device is not shared",  64LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  else
  {
    uint64_t v14 = static os_log_type_t.default.getter(v8);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v15 = qword_10023DFC0;
    uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v18 = *(void *)(*(void *)v7 + 16LL);
    *(void *)(v17 + 56) = &type metadata for Int;
    *(void *)(v17 + 64) = &protocol witness table for Int;
    *(void *)(v17 + 32) = v18;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v15,  "CloudSync: Current user switched. Number of connected devices: %d. Return",  v19[0]);
    return swift_bridgeObjectRelease(v17);
  }

uint64_t sub_1000C6A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v61 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  Swift::String v58 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
  swift_beginAccess(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v72, 0LL, 0LL);
  unint64_t v10 = *v9;
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID);
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID + 8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  uint64_t v13 = sub_1000AE6C8();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  uint64_t v71 = v10;
  sub_10009D998(v13, v11, v12, isUniquelyReferenced_nonNull_native);
  uint64_t v15 = v71;
  swift_bridgeObjectRelease(v12);
  uint64_t result = swift_bridgeObjectRelease(0x8000000000000000LL);
  int64_t v17 = 0LL;
  uint64_t v18 = v15[8];
  Swift::String v62 = v15 + 8;
  uint64_t v65 = v15;
  uint64_t v19 = 1LL << *((_BYTE *)v15 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v63 = (unint64_t)(v19 + 63) >> 6;
  Swift::String v64 = &_swiftEmptyDictionarySingleton;
  __int128 v57 = xmmword_1001A5EA0;
  while (1)
  {
    if (v21)
    {
      uint64_t v67 = (v21 - 1) & v21;
      unint64_t v22 = __clz(__rbit64(v21)) | (v17 << 6);
      goto LABEL_23;
    }

    int64_t v23 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_45;
    }

    if (v23 >= v63) {
      goto LABEL_43;
    }
    unint64_t v24 = v62[v23];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v23 + 1;
      if (v23 + 1 >= v63) {
        goto LABEL_43;
      }
      unint64_t v24 = v62[v17];
      if (!v24)
      {
        int64_t v17 = v23 + 2;
        if (v23 + 2 >= v63) {
          goto LABEL_43;
        }
        unint64_t v24 = v62[v17];
        if (!v24) {
          break;
        }
      }
    }

uint64_t sub_1000C704C(char a1, char a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  uint64_t v12 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  uint64_t v13 = swift_allocObject(&unk_10020A7E8, 33LL, 7LL);
  *(_BYTE *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v13 + 24) = v12;
  *(_BYTE *)(v13 + 32) = a2;
  aBlock[4] = sub_1000C88E0;
  uint64_t v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020A800;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v11;
  uint64_t v16 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v16);
  int64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v19 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  uint64_t v20 = v27;
  swift_release(v12);
  return swift_release(v20);
}

void sub_1000C7288(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a1;
  uint64_t v5 = a2 + 16;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v7 = qword_10023DFC0;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v9 + 56) = &type metadata for Bool;
  *(void *)(v9 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v9 + 32) = v4 & 1;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "accountStatus: %d", v15);
  swift_bridgeObjectRelease(v9);
  swift_beginAccess(v5, v16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v10);
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    uint64_t v14 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v12);

    if (v14)
    {
      [v14 accountStatusUpdateWithAvailable:v4 & 1 forced:a3 & 1];
      swift_unknownObjectRelease(v14);
    }
  }

void sub_1000C73D0(void *a1)
{
  uint64_t v156 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  Swift::String v154 = (char *)&v149 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v151 = (char *)&v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t isEscapingClosureAtFileLocation = static os_log_type_t.default.getter(v4);
  if (qword_100234C20 != -1) {
    goto LABEL_100;
  }
LABEL_2:
  uint64_t v6 = qword_10023DFC0;
  uint64_t v159 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v159, 72LL, 7LL);
  __int128 v157 = xmmword_1001A5EA0;
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v8 = [a1 userProfilesSnapshot];
  id v9 = [v8 selectedUserProfile];

  if (!v9) {
    goto LABEL_6;
  }
  id v10 = [v9 iCloudAltDSID];

  if (!v10)
  {
    id v9 = 0LL;
LABEL_6:
    unint64_t v12 = 0LL;
    goto LABEL_7;
  }

  id v9 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  unint64_t v12 = v11;

LABEL_7:
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v158 = sub_10009914C();
  *(void *)(v7 + 64) = v158;
  uint64_t v13 = 45LL;
  if (v12) {
    uint64_t v13 = (uint64_t)v9;
  }
  unint64_t v14 = 0xE100000000000000LL;
  if (v12) {
    unint64_t v14 = v12;
  }
  *(void *)(v7 + 32) = v13;
  *(void *)(v7 + 40) = v14;
  os_log(_:dso:log:_:_:)( isEscapingClosureAtFileLocation,  &_mh_execute_header,  v6,  "User Profile Changed: %@",  24LL,  2LL,  v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v173 = &type metadata for AudioAccessoryFeatures;
  unint64_t v149 = sub_10009E740();
  uint64_t v174 = (uint64_t (*)())v149;
  LOBYTE(aBlock) = 1;
  char v15 = isFeatureEnabled(_:)(&aBlock);
  uint64_t v16 = sub_10009A498(&aBlock);
  if ((v15 & 1) == 0) {
    return;
  }
  uint64_t v163 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue;
  __chkstk_darwin(v16);
  *(&v149 - 2) = v17;
  id v19 = v18;
  uint64_t v20 = sub_100098CD8(&qword_1002357A8);
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)v19;
  uint64_t v21 = 0LL;
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_1000C8908, &v149 - 4, v20);

  unint64_t v22 = (unint64_t)aBlock[8];
  uint64_t v161 = aBlock + 8;
  uint64_t v23 = 1LL << *((_BYTE *)aBlock + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v162 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v166 = aBlock;
  swift_bridgeObjectRetain(aBlock);
  int64_t v26 = 0LL;
  uint64_t v27 = &selRef_isAnySmartRoutingDeviceConnected_;
  uint64_t v28 = &OBJC_CLASS___PBSUserProfile_ptr;
  uint64_t v165 = a1;
  while (1)
  {
    if (v25)
    {
      uint64_t v167 = (v25 - 1) & v25;
      int64_t v168 = v26;
      unint64_t v29 = __clz(__rbit64(v25)) | (v26 << 6);
      goto LABEL_33;
    }

    BOOL v30 = __OFADD__(v26, 1LL);
    int64_t v31 = v26 + 1;
    if (v30) {
      goto LABEL_98;
    }
    if (v31 >= v162)
    {
LABEL_40:
      swift_release(v166);
      id v54 = [a1 userProfilesSnapshot];
      id v55 = [v54 v27[404]];

      uint64_t v56 = sub_1000A4A64(0LL, (unint64_t *)&unk_1002357B0, &OBJC_CLASS___PBSUserProfile_ptr);
      uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v55,  &type metadata for String,  v56,  &protocol witness table for String);

      a1 = v165;
      int64_t v58 = 0LL;
      uint64_t v59 = v57 + 64;
      uint64_t v60 = 1LL << *(_BYTE *)(v57 + 32);
      uint64_t v61 = -1LL;
      if (v60 < 64) {
        uint64_t v61 = ~(-1LL << v60);
      }
      unint64_t v62 = v61 & *(void *)(v57 + 64);
      int64_t v162 = (unint64_t)(v60 + 63) >> 6;
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)&selRef_setAllowsAutoRoute_;
      uint64_t v150 = v57;
      if (v62)
      {
        do
        {
          while (1)
          {
            unint64_t v63 = __clz(__rbit64(v62));
            v62 &= v62 - 1;
            unint64_t v64 = v63 | (v58 << 6);
LABEL_59:
            id v67 = *(id *)(*(void *)(v57 + 56) + 8 * v64);
            if ([v67 *(SEL *)(isEscapingClosureAtFileLocation + 3504)] == (id)1) {
              break;
            }

            if (!v62) {
              goto LABEL_46;
            }
          }

          uint64_t v167 = v62;
          int64_t v168 = v58;
          uint64_t v68 = static os_log_type_t.default.getter(1LL);
          uint64_t v69 = qword_10023DFC0;
          uint64_t v70 = swift_allocObject(v159, 72LL, 7LL);
          *(_OWORD *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v157;
          id v71 = [v67 description];
          uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
          uint64_t v74 = v73;

          unint64_t v75 = v158;
          *(void *)(v70 + 56) = &type metadata for String;
          *(void *)(v70 + 64) = v75;
          *(void *)(v70 + 32) = v72;
          *(void *)(v70 + 40) = v74;
          os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Add Additional User Profile: %@", 31LL, 2LL, v70);
          swift_bridgeObjectRelease(v70);
          id v76 = [v67 iCloudAltDSID];
          if (v76)
          {
            uint64_t v77 = v76;
            uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
            uint64_t v80 = v79;

            uint64_t v81 = v164;
            uint64_t v82 = *(void **)&v164[v163];
            uint64_t v83 = swift_allocObject(&unk_10020A7C0, 24LL, 7LL);
            swift_unknownObjectWeakInit(v83 + 16, v81);
            uint64_t v84 = (void *)swift_allocObject(&unk_10020A8B0, 40LL, 7LL);
            v84[2] = v83;
            v84[3] = v78;
            uint64_t v160 = v80;
            uint64_t v161 = (void **)v83;
            v84[4] = v80;
            uint64_t v174 = sub_1000C8BE0;
            uint64_t v175 = v84;
            Swift::String aBlock = _NSConcreteStackBlock;
            uint64_t v171 = 1107296256LL;
            uint64_t v172 = sub_1000F2C54;
            uint64_t v173 = (ValueMetadata *)&unk_10020A8C8;
            uint64_t v85 = _Block_copy(&aBlock);
            id v86 = v82;
            swift_retain(v83);
            uint64_t v87 = swift_bridgeObjectRetain(v80);
            uint64_t v88 = v151;
            static DispatchQoS.unspecified.getter(v87);
            uint64_t v169 = _swiftEmptyArrayStorage;
            uint64_t v89 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v90 = sub_100098CD8((uint64_t *)&unk_100235790);
            uint64_t v91 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
            int64_t v92 = v154;
            uint64_t v93 = v59;
            uint64_t v94 = v21;
            uint64_t v95 = v156;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v169, v90, v91, v156, v89);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v88, v92, v85);
            _Block_release(v85);

            uint64_t v96 = v95;
            uint64_t v21 = v94;
            uint64_t v59 = v93;
            (*(void (**)(char *, uint64_t))(v155 + 8))(v92, v96);
            Swift::String v97 = v88;
            uint64_t v57 = v150;
            (*(void (**)(char *, uint64_t))(v152 + 8))(v97, v153);
            Swift::String v98 = v175;
            swift_bridgeObjectRelease(v160);

            swift_release(v161);
            swift_release(v98);
          }

          else
          {
          }

          a1 = v165;
          uint64_t isEscapingClosureAtFileLocation = 0x10022F000LL;
          unint64_t v62 = v167;
          int64_t v58 = v168;
        }

        while (v167);
      }

LABEL_69:
      swift_release(v57);
      uint64_t v173 = &type metadata for AudioAccessoryFeatures;
      uint64_t v174 = (uint64_t (*)())v149;
      LOBYTE(aBlock) = 2;
      char v99 = isFeatureEnabled(_:)(&aBlock);
      sub_10009A498(&aBlock);
      if ((v99 & 1) != 0)
      {
        id v100 = [a1 userProfilesSnapshot];
        id v101 = [v100 primaryUserProfile];

        if (v101
          && (id v103 = [v101 iCloudAltDSID], v101, v103))
        {
          uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
          uint64_t v106 = v105;

          uint64_t v107 = (uint64_t *)&v164[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID];
          uint64_t v108 = *(void *)&v164[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID];
          unint64_t v109 = *(void *)&v164[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_primaryDSID + 8];
          uint64_t v110 = HIBYTE(v109) & 0xF;
          if ((v109 & 0x2000000000000000LL) == 0) {
            uint64_t v110 = *v107 & 0xFFFFFFFFFFFFLL;
          }
          if (v110)
          {
            if (v108 == v104 && v109 == v106
              || (uint64_t v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v108, v109, v104, v106, 0LL), (v111 & 1) != 0))
            {
              uint64_t v112 = v106;
              goto LABEL_83;
            }

            uint64_t v119 = static os_log_type_t.default.getter(v111);
            uint64_t v120 = qword_10023DFC0;
            uint64_t v117 = swift_allocObject(v159, 112LL, 7LL);
            *(_OWORD *)(v117 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
            uint64_t v121 = *v107;
            uint64_t v122 = v107[1];
            unint64_t v123 = v158;
            *(void *)(v117 + 56) = &type metadata for String;
            *(void *)(v117 + 64) = v123;
            *(void *)(v117 + 32) = v121;
            *(void *)(v117 + 40) = v122;
            *(void *)(v117 + 96) = &type metadata for String;
            *(void *)(v117 + 104) = v123;
            *(void *)(v117 + 72) = v104;
            *(void *)(v117 + 80) = v106;
            swift_bridgeObjectRetain(v106);
            swift_bridgeObjectRetain(v122);
            os_log(_:dso:log:_:_:)( v119,  &_mh_execute_header,  v120,  "CloudSync: Primary user's DSID updated from %@ to %@",  52LL,  2LL,  v117);
          }

          else
          {
            uint64_t v115 = static os_log_type_t.default.getter(v108);
            uint64_t v116 = qword_10023DFC0;
            uint64_t v117 = swift_allocObject(v159, 72LL, 7LL);
            *(_OWORD *)(v117 + swift_unknownObjectWeakDestroy(v0 + 16) = v157;
            unint64_t v118 = v158;
            *(void *)(v117 + 56) = &type metadata for String;
            *(void *)(v117 + 64) = v118;
            *(void *)(v117 + 32) = v104;
            *(void *)(v117 + 40) = v106;
            swift_bridgeObjectRetain(v106);
            os_log(_:dso:log:_:_:)( v115,  &_mh_execute_header,  v116,  "CloudSync: Primary user's DSID is set to %@",  43LL,  2LL,  v117);
          }

          swift_bridgeObjectRelease(v117);
          uint64_t v112 = v107[1];
          *uint64_t v107 = v104;
          v107[1] = v106;
LABEL_83:
          swift_bridgeObjectRelease(v112);
          uint64_t v114 = v165;
        }

        else
        {
          uint64_t v113 = static os_log_type_t.error.getter(v102);
          os_log(_:dso:log:_:_:)( v113,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Primary user's DSID is invalid",  41LL,  2LL,  _swiftEmptyArrayStorage);
          uint64_t v114 = v165;
        }

        id v124 = [v114 userProfilesSnapshot];
        id v125 = [v124 selectedUserProfile];

        if (v125
          && (id v127 = [v125 iCloudAltDSID], v125, v127))
        {
          uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
          uint64_t v130 = v129;

          Swift::String v131 = (uint64_t *)&v164[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID];
          uint64_t v132 = *(void *)&v164[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID];
          unint64_t v133 = *(void *)&v164[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_currentUserDSID + 8];
          uint64_t v134 = HIBYTE(v133) & 0xF;
          if ((v133 & 0x2000000000000000LL) == 0) {
            uint64_t v134 = *v131 & 0xFFFFFFFFFFFFLL;
          }
          if (v134)
          {
            if (v132 == v128 && v133 == v130
              || (uint64_t v135 = _stringCompareWithSmolCheck(_:_:expecting:)(v132, v133, v128, v130, 0LL), (v135 & 1) != 0))
            {
              swift_bridgeObjectRelease(v130);
            }

            else
            {
              uint64_t v142 = static os_log_type_t.default.getter(v135);
              uint64_t v143 = qword_10023DFC0;
              uint64_t v144 = swift_allocObject(v159, 112LL, 7LL);
              *(_OWORD *)(v144 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
              uint64_t v145 = *v131;
              uint64_t v146 = v131[1];
              unint64_t v147 = v158;
              *(void *)(v144 + 56) = &type metadata for String;
              *(void *)(v144 + 64) = v147;
              *(void *)(v144 + 32) = v145;
              *(void *)(v144 + 40) = v146;
              *(void *)(v144 + 96) = &type metadata for String;
              *(void *)(v144 + 104) = v147;
              *(void *)(v144 + 72) = v128;
              *(void *)(v144 + 80) = v130;
              swift_bridgeObjectRetain(v130);
              swift_bridgeObjectRetain(v146);
              os_log(_:dso:log:_:_:)( v142,  &_mh_execute_header,  v143,  "CloudSync: Current user's DSID updated from %@ to %@",  52LL,  2LL,  v144);
              swift_bridgeObjectRelease(v144);
              uint64_t v148 = v131[1];
              *Swift::String v131 = v128;
              v131[1] = v130;
              swift_bridgeObjectRelease(v148);
              sub_1000C6684();
            }
          }

          else
          {
            uint64_t v137 = static os_log_type_t.default.getter(v132);
            uint64_t v138 = qword_10023DFC0;
            uint64_t v139 = swift_allocObject(v159, 72LL, 7LL);
            *(_OWORD *)(v139 + swift_unknownObjectWeakDestroy(v0 + 16) = v157;
            unint64_t v140 = v158;
            *(void *)(v139 + 56) = &type metadata for String;
            *(void *)(v139 + 64) = v140;
            *(void *)(v139 + 32) = v128;
            *(void *)(v139 + 40) = v130;
            swift_bridgeObjectRetain(v130);
            os_log(_:dso:log:_:_:)( v137,  &_mh_execute_header,  v138,  "CloudSync: Current user's DSID is set to %@",  43LL,  2LL,  v139);
            swift_bridgeObjectRelease(v139);
            uint64_t v141 = (void **)v131[1];
            *Swift::String v131 = v128;
            v131[1] = v130;
            swift_bridgeObjectRelease(v166);
            uint64_t v166 = v141;
          }
        }

        else
        {
          uint64_t v136 = static os_log_type_t.error.getter(v126);
          os_log(_:dso:log:_:_:)( v136,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: Current user's DSID is invalid",  41LL,  2LL,  _swiftEmptyArrayStorage);
        }
      }

      swift_bridgeObjectRelease(v166);
      return;
    }

    unint64_t v32 = (unint64_t)v161[v31];
    if (v32) {
      goto LABEL_32;
    }
    int64_t v33 = v31 + 1;
    if (v31 + 1 >= v162) {
      goto LABEL_40;
    }
    unint64_t v32 = (unint64_t)v161[v33];
    if (!v32)
    {
      int64_t v33 = v31 + 2;
      if (v31 + 2 >= v162) {
        goto LABEL_40;
      }
      unint64_t v32 = (unint64_t)v161[v33];
      if (!v32)
      {
        int64_t v33 = v31 + 3;
        if (v31 + 3 >= v162) {
          goto LABEL_40;
        }
        unint64_t v32 = (unint64_t)v161[v33];
        if (!v32)
        {
          int64_t v33 = v31 + 4;
          if (v31 + 4 >= v162) {
            goto LABEL_40;
          }
          unint64_t v32 = (unint64_t)v161[v33];
          if (!v32)
          {
            int64_t v33 = v31 + 5;
            if (v31 + 5 >= v162) {
              goto LABEL_40;
            }
            unint64_t v32 = (unint64_t)v161[v33];
            if (!v32) {
              break;
            }
          }
        }
      }
    }

    int64_t v31 = v33;
LABEL_32:
    uint64_t v167 = (v32 - 1) & v32;
    int64_t v168 = v31;
    unint64_t v29 = __clz(__rbit64(v32)) + (v31 << 6);
LABEL_33:
    uint64_t v34 = (uint64_t *)((char *)v166[6] + 16 * v29);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    swift_bridgeObjectRetain(v35);
    id v37 = [a1 userProfilesSnapshot];
    id v38 = [v37 v27[404]];

    uint64_t v39 = sub_1000A4A64(0LL, (unint64_t *)&unk_1002357B0, v28);
    uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v38,  &type metadata for String,  v39,  &protocol witness table for String);

    swift_bridgeObjectRetain(v35);
    sub_1000C896C(v40, v36, v35);
    LOBYTE(v3_Block_object_dispose(va, 8) = v41;
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v35);
    if ((v38 & 1) != 0)
    {
      swift_bridgeObjectRelease(v35);
      unint64_t v25 = v167;
      int64_t v26 = v168;
    }

    else
    {
      uint64_t v42 = v28;
      uint64_t v43 = v27;
      uint64_t v44 = v21;
      uint64_t v45 = v164;
      int v46 = *(void **)&v164[v163];
      char v47 = (void *)swift_allocObject(&unk_10020A838, 40LL, 7LL);
      v47[2] = v45;
      v47[3] = v36;
      v47[4] = v35;
      uint64_t v48 = swift_allocObject(&unk_10020A860, 32LL, 7LL);
      *(void *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000C8BAC;
      *(void *)(v48 + 24) = v47;
      uint64_t v174 = sub_10009E99C;
      uint64_t v175 = (void *)v48;
      Swift::String aBlock = _NSConcreteStackBlock;
      uint64_t v171 = 1107296256LL;
      uint64_t v172 = sub_1000F2CA0;
      uint64_t v173 = (ValueMetadata *)&unk_10020A878;
      uint64_t v49 = _Block_copy(&aBlock);
      uint64_t v50 = v175;
      swift_bridgeObjectRetain(v35);
      uint64_t v51 = v46;
      id v52 = v45;
      uint64_t v21 = v44;
      uint64_t v27 = v43;
      uint64_t v28 = v42;
      swift_retain(v48);
      uint64_t v53 = v50;
      a1 = v165;
      swift_release(v53);
      dispatch_sync(v51, v49);

      _Block_release(v49);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v48, "", 114LL, 228LL, 31LL, 1LL);
      swift_bridgeObjectRelease(v35);
      swift_release(v47);
      swift_release(v48);
      unint64_t v25 = v167;
      int64_t v26 = v168;
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        swift_once(&qword_100234C20, sub_10018A978);
        goto LABEL_2;
      }
    }
  }

  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v31 >= v162) {
      goto LABEL_40;
    }
    unint64_t v32 = (unint64_t)v161[v31];
    ++v33;
    if (v32) {
      goto LABEL_32;
    }
  }

      __break(1u);
      goto LABEL_70;
    }

    swift_bridgeObjectRelease(v21);
    swift_beginAccess(v39 + 16, v178, 0LL, 0LL);
    uint64_t v88 = *v43;
    swift_retain(v44);
    uint64_t v89 = swift_bridgeObjectRetain(v88);
    uint64_t v90 = sub_10010F100(v89, v44);
    uint64_t v163 = 0LL;
    swift_bridgeObjectRelease(v88);
    uint64_t v91 = swift_release(v44);
    uint64_t v21 = (uint64_t)v43;
    if ((v90 & 1) == 0)
    {
      int64_t v92 = static os_log_type_t.default.getter(v91);
      os_log(_:dso:log:_:_:)( v92,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: New Account Setup Zones",  34LL,  2LL,  _swiftEmptyArrayStorage);
      sub_1000FD248();
    }

LABEL_102:
  __break(1u);
}

uint64_t sub_1000C8380(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_10013A76C();
  uint64_t v16 = v5;
  uint64_t v17 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1000C8FF4, v15, &type metadata for () + 1);
  uint64_t v6 = swift_release(v5);
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v8 = qword_10023DFC8;
  uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  sub_1000A7C90(a1, (uint64_t)v4, type metadata accessor for CloudCoordinatorConfiguration);
  uint64_t v11 = String.init<A>(describing:)(v4, v2);
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_10009914C();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Successfully cached record: %@", 30LL, 2LL, v10);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_1000C861C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4LL;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1000C86D0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void *sub_1000C8758(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v8;
    swift_bridgeObjectRetain(v7);
    swift_retain(v8);
    return (void *)v6;
  }

uint64_t sub_1000C87EC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 56) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000C8840(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000C8898()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000C88BC()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_1000C88E0()
{
}

uint64_t sub_1000C88F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C8900(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000C8908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap);
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a1 = *v3;
  return swift_bridgeObjectRetain(v4);
}

void sub_1000C896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v9 = 0LL;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_22:
    id v15 = *(id *)(*(void *)(a1 + 56) + 8 * v11);
    id v16 = [v15 iCloudAltDSID];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v20 = v19;

      if (v18 == a2 && v20 == a3)
      {
        swift_release(a1);

        swift_bridgeObjectRelease(a3);
        return;
      }

      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, a2, a3, 0LL);

      swift_bridgeObjectRelease(v20);
      if ((v22 & 1) != 0)
      {
LABEL_28:
        swift_release(a1);
        return;
      }
    }

    else
    {
    }
  }

  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v12 >= v24) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v23 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v24) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v23 + 8 * v9);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v24) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v23 + 8 * v9);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v9 = v12 + 3;
  if (v12 + 3 >= v24) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v23 + 8 * v9);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v24) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v23 + 8 * v14);
  int64_t v9 = v14;
  if (v13)
  {
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v24) {
      goto LABEL_28;
    }
    unint64_t v13 = *(void *)(v23 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

uint64_t sub_1000C8BA0()
{
  return sub_1000C9A88((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000C8BAC()
{
  return sub_1000AFFD4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C8BB8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C8BC8()
{
  return sub_1000C9DE4( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  40LL);
}

uint64_t sub_1000C8BE0()
{
  return sub_1000AFB6C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C8BEC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000C8C10()
{
  return sub_1000C6878(*(void *)(v0 + 16));
}

void *sub_1000C8C18(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v7;
    unint64_t v25 = v7 & 0xC000000000000001LL;
    uint64_t v4 = 4LL;
    while (1)
    {
      uint64_t v9 = v4 - 4;
      if (!v25) {
        break;
      }
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      uint64_t v11 = v4 - 3;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_20;
      }
LABEL_9:
      uint64_t v12 = v8;
      unint64_t v13 = v10;
      uint64_t v14 = a3;
      id v15 = objc_msgSend(v10, "bluetoothAddress", v23);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v18 = v17;

      a3 = v14;
      BOOL v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }

      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0LL);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        a3 = v24;
        goto LABEL_19;
      }

      ++v4;
      uint64_t v8 = v12;
      BOOL v19 = v11 == v12;
      uint64_t v7 = v24;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
        return 0LL;
      }
    }

    id v10 = *(id *)(v7 + 8 * v4);
    uint64_t v11 = v4 - 3;
    if (!__OFADD__(v9, 1LL)) {
      goto LABEL_9;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0) {
      uint64_t v21 = v7;
    }
    else {
      uint64_t v21 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }

  swift_bridgeObjectRelease(v7);
  return 0LL;
}

uint64_t sub_1000C8DBC()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.error.getter(v7);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_10023DFC0,  "CloudSync: send BTCloudServicesSoundProfileChangedNotification",  62LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1000C2A00;
  void aBlock[5] = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020A940;
  id v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v10);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v13 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v12, v13, v0, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v2, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000C8FF4()
{
}

void sub_1000C900C(uint64_t a1@<X8>)
{
}

uint64_t sub_1000C9024()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_1000C9038()
{
}

uint64_t sub_1000C9044()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C9054()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1000C9068()
{
  return sub_1000C3D28(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C9074()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C90A0()
{
  return sub_10015CF00(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000C90B0()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1000C90C4()
{
  return sub_1000C3848(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C90D4()
{
  return sub_1000C9A88((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000C90E0()
{
  return sub_1000C353C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C90EC()
{
  return sub_1000C9A88((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000C90F8()
{
  return sub_1000C30B8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C9104()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_1000C9118()
{
}

uint64_t sub_1000C9124()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_1000C9138()
{
}

uint64_t sub_1000C9144()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C9150(void *a1)
{
  return sub_1000C22B8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000C9168(void *a1)
{
  return sub_1000C07D8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000C917C()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000C91B0()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000C09F8);
}

uint64_t sub_1000C91BC()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

void sub_1000C91C8()
{
}

uint64_t sub_1000C91D4()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_1000C91E8()
{
}

uint64_t sub_1000C91F4()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C9270()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for URL(0LL) - 8) + 80LL);
  return sub_1000C0344( *(void *)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  (char *)(v0 + ((v1 + 40) & ~v1)));
}

uint64_t sub_1000C92A4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C92C8(uint64_t a1)
{
  return sub_1000BF288( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  "CloudSync: Failed to remove AADeviceRecord for address: %@ error: %@",  68LL);
}

uint64_t sub_1000C92EC(uint64_t a1)
{
  return sub_1000BF288( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  "CloudSync: Failed to remove AAProxCardsRecord for address: %@ error: %@",  71LL);
}

uint64_t sub_1000C9310(uint64_t a1)
{
  return sub_1000BF288( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  "CloudSync: Failed to remove HMDeviceCloudRecord for address: %@ error: %@",  73LL);
}

uint64_t sub_1000C9338()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000BF3DC);
}

uint64_t sub_1000C934C(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_1000A4A64(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000C938C()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C9394()
{
  return sub_1000BE234(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C93A0()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C93AC()
{
  return sub_1000BEC5C( *(void **)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  "Invalid BT Address for addMagicSettings(%@): %@",  47LL);
}

uint64_t sub_1000C93D8()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C93E0()
{
  return sub_1000BD118(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C93EC()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C93F8()
{
  return sub_1000BEC5C( *(void **)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  "Invalid BT Address for addDeviceMagicSettings(%@): %@",  53LL);
}

uint64_t sub_1000C942C()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000BC960);
}

uint64_t sub_1000C9438()
{
  return sub_1000C9BAC((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1000C9448()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1000C945C()
{
  return sub_1000BBD9C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C9468()
{
  return sub_1000C9DE4( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  40LL);
}

uint64_t sub_1000C9480()
{
  return sub_1000B756C( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  &qword_100235800,  &OBJC_CLASS___BTMagicPairingSettings_ptr,  "fetched Magic Settings List - %@",  32LL);
}

uint64_t sub_1000C94B8()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_1000C94CC()
{
}

uint64_t sub_1000C94D8()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 41LL);
}

uint64_t sub_1000C94EC()
{
  return sub_1000BB980(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1000C94FC()
{
  return sub_1000C9A30(49LL);
}

uint64_t sub_1000C9504()
{
  return sub_1000BB5D4(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1000C9518()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000BAC00);
}

uint64_t sub_1000C952C()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C9534()
{
  return sub_1000BA184(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C9540()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C954C()
{
  return sub_1000BEC5C( *(void **)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  "Invalid BT Address for addDeviceSupportInfo(%@): %@",  51LL);
}

uint64_t sub_1000C9578()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C9580()
{
  return sub_1000B92A4(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C958C()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C9598()
{
  return sub_1000BEC5C( *(void **)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  "Invalid BT Address for addDeviceSupportInformation(%@): %@",  58LL);
}

uint64_t sub_1000C95CC()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000B7740);
}

uint64_t sub_1000C95D8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000C9604()
{
  return sub_1000B9058(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_1000C9614()
{
  return sub_1000C9898( type metadata accessor for DeviceSupportInformationRecord,  (uint64_t (*)(unint64_t, void, void))sub_1000B9150);
}

uint64_t sub_1000C9628()
{
  uint64_t v1 = (int *)type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 16));
  uint64_t v6 = v0 + v4 + v1[6];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v4 + v1[9]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100099394(*v8, v9);
  }
  unint64_t v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = v10 + 16;
  swift_release(*(void *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_1000C9704()
{
  return sub_1000C9898( type metadata accessor for BTDeferredRecord,  (uint64_t (*)(unint64_t, void, void))sub_1000B8F08);
}

uint64_t sub_1000C971C()
{
  uint64_t v1 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  sub_100099394(*(void *)(v7 + v1[5]), *(void *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[9] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[10] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[11] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[14] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[15] + 8));
  uint64_t v9 = v7 + v1[16];
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000C9884()
{
  return sub_1000C9898( type metadata accessor for DeviceSupportInformationRecord,  (uint64_t (*)(unint64_t, void, void))sub_1000B8DFC);
}

uint64_t sub_1000C9898( uint64_t (*a1)(void), uint64_t (*a2)(unint64_t, void, void))
{
  uint64_t v3 = *(void *)(a1(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return a2(v2 + v4, *v5, v5[1]);
}

uint64_t sub_1000C98F0()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1000C9904()
{
  return sub_1000B64CC(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C9910()
{
  return sub_1000C9DE4( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  40LL);
}

uint64_t sub_1000C9928()
{
  return sub_1000B756C( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  (unint64_t *)&unk_100236F00,  &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr,  "fetched DeviceSupportInfo List - %@",  35LL);
}

uint64_t sub_1000C9964()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000B5C88);
}

uint64_t sub_1000C9978()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C9980()
{
  return sub_1000B4A8C(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C998C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C99D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C99F4()
{
  return sub_1000B5BF8(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000C9A04()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C9A0C()
{
  return sub_1000B3F80(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C9A18()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C9A28()
{
  return sub_1000C9A30(48LL);
}

uint64_t sub_1000C9A30(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_1000C9A70()
{
  return sub_1000B3524(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C9A7C()
{
  return sub_1000C9A88((void (*)(void))&_swift_release);
}

uint64_t sub_1000C9A88(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_1000C9AC0()
{
  return sub_1000BEC5C( *(void **)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  "Invalid BT Address for addDevice(%@): %@",  40LL);
}

uint64_t sub_1000C9AEC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000C9B18()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1000C9B40()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_1000C9B54()
{
}

uint64_t sub_1000C9B60()
{
  return sub_1000B31C0(v0);
}

uint64_t sub_1000C9B68()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C9B94()
{
  return sub_1000B2ED8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000C9B9C()
{
  return sub_1000C9BAC((void (*)(void))&_swift_bridgeObjectRelease, 48LL);
}

uint64_t sub_1000C9BAC(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

void sub_1000C9BE8()
{
}

uint64_t sub_1000C9BF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C9C08()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000B1C2C);
}

uint64_t sub_1000C9C14()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0LL);
}

uint64_t sub_1000C9C38()
{
  uint64_t v1 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 24));
  uint64_t v7 = v0 + v4;
  sub_100099394(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[9] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[10] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[11] + 8));
  uint64_t v10 = v7 + v1[12];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000C9D50()
{
  uint64_t v1 = *(void (**)(void))(v0 + 16);
  id v2 = sub_1000B1A88();
  v1();
}

uint64_t sub_1000C9DAC()
{
  return sub_1000C9DE4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1000C9DC0()
{
  return sub_1000B0BF0(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C9DCC()
{
  return sub_1000C9DE4( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  40LL);
}

uint64_t sub_1000C9DE4(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  return swift_deallocObject(v3, a3, 7LL);
}

uint64_t sub_1000C9E2C()
{
  return sub_1000B756C( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  &qword_100235850,  &OBJC_CLASS___BTCloudDevice_ptr,  "fetched Device List - %@",  24LL);
}

void sub_1000C9E64()
{
}

void sub_1000C9E6C()
{
}

void sub_1000C9E74()
{
}

uint64_t sub_1000C9E7C()
{
  return sub_1000AF600(v0);
}

void sub_1000C9E84()
{
}

uint64_t sub_1000C9E8C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000C9EB0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9EB8(uint64_t a1)
{
}

void sub_1000C9EE0(uint64_t a1, unint64_t a2)
{
}

void sub_1000C9EE8(uint64_t a1)
{
}

void sub_1000C9F10(uint64_t a1)
{
}

uint64_t sub_1000C9F38(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10009E910(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

const char *sub_1000C9F78(void *a1)
{
  return sub_1000CA914(a1, *(void *)(v1 + 16));
}

void sub_1000C9F80()
{
}

uint64_t sub_1000C9F88(uint64_t a1)
{
  return a1;
}

uint64_t storeEnumTagSinglePayload for DeviceManager.DeviceManagerError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000C9FF8 + 4 * byte_1001A79BC[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000CA02C + 4 * byte_1001A79B7[v4]))();
}

uint64_t sub_1000CA02C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CA03CLL);
  }
  return result;
}

uint64_t sub_1000CA048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CA050LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000CA054(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA05C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceManager.DeviceManagerError()
{
  return &type metadata for DeviceManager.DeviceManagerError;
}

uint64_t getEnumTagSinglePayload for AudioAccessoryFeatures(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for AudioAccessoryFeatures(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000CA154 + 4 * byte_1001A79C6[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CA188 + 4 * byte_1001A79C1[v4]))();
}

uint64_t sub_1000CA188(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CA198LL);
  }
  return result;
}

uint64_t sub_1000CA1A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CA1ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000CA1B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA1B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioAccessoryFeatures()
{
  return &type metadata for AudioAccessoryFeatures;
}

unint64_t sub_1000CA1D8()
{
  unint64_t result = qword_100235880;
  if (!qword_100235880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7A98, &type metadata for AudioAccessoryFeatures);
    atomic_store(result, (unint64_t *)&qword_100235880);
  }

  return result;
}

unint64_t sub_1000CA224()
{
  unint64_t result = qword_100235888;
  if (!qword_100235888)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7B40, &type metadata for DeviceManager.DeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_100235888);
  }

  return result;
}

unint64_t sub_1000CA268()
{
  unint64_t result = qword_100235890;
  if (!qword_100235890)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7AC0, &type metadata for DeviceManager.DeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_100235890);
  }

  return result;
}

uint64_t *DarwinNotificationManager.shared.unsafeMutableAddressor()
{
  if (qword_100234B68 != -1) {
    swift_once(&qword_100234B68, sub_1000CA624);
  }
  return &static DarwinNotificationManager.shared;
}

id sub_1000CA624()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DarwinNotificationManager()) init];
  static DarwinNotificationManager.shared = (uint64_t)result;
  return result;
}

id static DarwinNotificationManager.shared.getter()
{
  if (qword_100234B68 != -1) {
    swift_once(&qword_100234B68, sub_1000CA624);
  }
  return (id)static DarwinNotificationManager.shared;
}

uint64_t DarwinNotificationManager.registerHelper(helper:)(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
  swift_beginAccess(v3, v9, 33LL, 0LL);
  uint64_t v4 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  unint64_t v6 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v5 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v6 >= v5 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1LL);
  }
  uint64_t v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a1);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

uint64_t DarwinNotificationManager.unregisterHelper(helper:)(uint64_t a1)
{
  int v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
  swift_beginAccess(v3, v9, 1LL, 0LL);
  uint64_t v4 = *v3;
  swift_retain(a1);
  uint64_t v5 = swift_bridgeObjectRetain(v4);
  unint64_t v6 = sub_1000CAD84(v5, a1);
  swift_bridgeObjectRelease(v4);
  swift_release(a1);
  uint64_t v7 = *v3;
  *int v3 = (uint64_t)v6;
  return swift_bridgeObjectRelease(v7);
}

Swift::Void __swiftcall DarwinNotificationManager.setUp()()
{
  uint64_t v1 = v0;
  sub_1000CAEDC();
  int v2 = (dispatch_queue_s *)static OS_dispatch_queue.main.getter();
  uint64_t v3 = swift_allocObject(&unk_10020C850, 24LL, 7LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  void v7[4] = sub_1000C9F78;
  uint64_t v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  void v7[2] = sub_1000CAC20;
  v7[3] = &unk_10020C868;
  uint64_t v4 = _Block_copy(v7);
  uint64_t v5 = v8;
  id v6 = v1;
  swift_release(v5);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v4);
  _Block_release(v4);
}

const char *sub_1000CA914(void *a1, uint64_t a2)
{
  id result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    uint64_t v7 = static os_log_type_t.default.getter(v4);
    if (qword_100234C08 != -1) {
      swift_once(&qword_100234C08, sub_10018A87C);
    }
    uint64_t v8 = qword_10023DFA8;
    uint64_t v37 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v9 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v9 + 56) = &type metadata for String;
    unint64_t v36 = sub_10009914C();
    *(void *)(v9 + 64) = v36;
    *(void *)(v9 + 32) = v4;
    *(void *)(v9 + 40) = v6;
    swift_bridgeObjectRetain(v6);
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v8,  "On xpc event stream, com.apple.notifyd.matching, notification %@",  64LL,  2LL,  v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = (uint64_t *)(a2 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess(v10, v39, 0LL, 0LL);
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      if (v11 < 0) {
        uint64_t v33 = *v10;
      }
      else {
        uint64_t v33 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      id result = (const char *)_CocoaArrayWrapper.endIndex.getter(v33);
      uint64_t v12 = (uint64_t)result;
      if (result) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      id result = (const char *)swift_bridgeObjectRetain(*v10);
      if (v12)
      {
LABEL_6:
        if (v12 < 1)
        {
          __break(1u);
          return result;
        }

        uint64_t v13 = 0LL;
        unint64_t v14 = v11 & 0xC000000000000001LL;
        unint64_t v34 = v11 & 0xC000000000000001LL;
        uint64_t v35 = v11;
        do
        {
          if (v14)
          {
            uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
          }

          else
          {
            uint64_t v15 = *(void *)(v11 + 8 * v13 + 32);
            swift_retain(v15);
          }

          NSString v16 = String._bridgeToObjectiveC()();
          uint64_t v17 = *(void *)(v15 + 16);
          if (*(void *)(v17 + 16))
          {
            swift_bridgeObjectRetain(*(void *)(v15 + 16));
            unint64_t v18 = sub_1000A3A74((uint64_t)v16);
            if ((v19 & 1) != 0)
            {
              uint64_t v20 = *(void *)(v17 + 56) + 16 * v18;
              uint64_t v21 = *(void *)(v20 + 8);
              id v38 = *(void (**)(uint64_t))v20;
              swift_retain(v21);
              uint64_t v22 = swift_bridgeObjectRelease(v17);
              uint64_t v23 = static os_log_type_t.default.getter(v22);
              uint64_t v24 = qword_10023DFA8;
              uint64_t v25 = v4;
              uint64_t v26 = v6;
              uint64_t v27 = swift_allocObject(v37, 72LL, 7LL);
              *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
              uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
              *(void *)(v27 + 56) = &type metadata for String;
              *(void *)(v27 + 64) = v36;
              *(void *)(v27 + 32) = v28;
              *(void *)(v27 + 40) = v29;
              os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  v24,  "Invoking callback, notification, %@",  35LL,  2LL,  v27);
              uint64_t v30 = v27;
              uint64_t v6 = v26;
              uint64_t v4 = v25;
              unint64_t v14 = v34;
              uint64_t v31 = swift_bridgeObjectRelease(v30);
              v38(v31);
              swift_release(v15);

              uint64_t v32 = v21;
              uint64_t v11 = v35;
              swift_release(v32);
            }

            else
            {
              swift_release(v15);

              swift_bridgeObjectRelease(v17);
            }
          }

          else
          {
            swift_release(v15);
          }

          ++v13;
        }

        while (v12 != v13);
      }
    }

    swift_bridgeObjectRelease(v6);
    return (const char *)swift_bridgeObjectRelease(v11);
  }

  return result;
}

uint64_t sub_1000CAC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id DarwinNotificationManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DarwinNotificationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_1000CAD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        unint64_t v9 = v5 + 1;
        if (__OFADD__(v5, 1LL))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }

unint64_t sub_1000CAEDC()
{
  unint64_t result = qword_1002365E0;
  if (!qword_1002365E0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002365E0);
  }

  return result;
}

uint64_t sub_1000CAF18()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000CAF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CAF4C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for DarwinNotificationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd25DarwinNotificationManager);
}

uint64_t sub_1000CAF84()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v5, qword_10023DD70);
  sub_100098D58(v3, (uint64_t)qword_10023DD70);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x746553636967614DLL, 0xED000073676E6974LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

  return result;
}

uint64_t sub_1000CB0DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v2);
  uint64_t v202 = (uint64_t)&v196 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v205 = (char *)&v196 - v5;
  uint64_t v204 = type metadata accessor for Date(0LL);
  uint64_t v206 = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  uint64_t v197 = (char *)&v196 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v201 = (char *)&v196 - v11;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v196 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v196 - v16;
  Class v207 = sub_1000A4ED8();
  uint64_t v208 = 0LL;
  unint64_t v209 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(436LL);
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v18._object = (void *)0x80000001001CDC70LL;
  String.append(_:)(v18);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._uint64_t countAndFlagsBits = 8236LL;
  v23._object = (void *)0xE200000000000000LL;
  String.append(_:)(v23);
  uint64_t v24 = (uint64_t *)(v0 + v2[6]);
  uint64_t v26 = *v24;
  uint64_t v25 = (void *)v24[1];
  swift_bridgeObjectRetain(v25);
  v27._uint64_t countAndFlagsBits = v26;
  v27._object = v25;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v25);
  v28._uint64_t countAndFlagsBits = 0x203A646970202CLL;
  v28._object = (void *)0xE700000000000000LL;
  String.append(_:)(v28);
  uint64_t v29 = (uint64_t *)(v0 + v2[13]);
  uint64_t v30 = *v29;
  uint64_t v31 = (void *)v29[1];
  swift_bridgeObjectRetain(v31);
  v32._uint64_t countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v31);
  v33._uint64_t countAndFlagsBits = 0x203A646976202CLL;
  v33._object = (void *)0xE700000000000000LL;
  String.append(_:)(v33);
  unint64_t v34 = (uint64_t *)(v0 + v2[14]);
  uint64_t v35 = *v34;
  unint64_t v36 = (void *)v34[1];
  swift_bridgeObjectRetain(v36);
  v37._uint64_t countAndFlagsBits = v35;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38._uint64_t countAndFlagsBits = 0x72657473616D202CLL;
  v38._object = (void *)0xEE00203A746E6948LL;
  String.append(_:)(v38);
  Data.hexString.getter(*(void *)(v1 + v2[8]), *(void *)(v1 + v2[8] + 8));
  uint64_t v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41._uint64_t countAndFlagsBits = 0x72657473616D202CLL;
  v41._object = (void *)0xED0000203A79654BLL;
  String.append(_:)(v41);
  Data.hexString.getter(*(void *)(v1 + v2[7]), *(void *)(v1 + v2[7] + 8));
  uint64_t v43 = v42._object;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v43);
  v44._object = (void *)0x80000001001CDC90LL;
  v44._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v44);
  Data.hexString.getter(*(void *)(v1 + v2[10]), *(void *)(v1 + v2[10] + 8));
  int v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46);
  v47._object = (void *)0x80000001001CDCB0LL;
  v47._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v47);
  Data.hexString.getter(*(void *)(v1 + v2[9]), *(void *)(v1 + v2[9] + 8));
  uint64_t v49 = v48._object;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v49);
  v50._object = (void *)0x80000001001CDCD0LL;
  v50._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v50);
  Data.hexString.getter(*(void *)(v1 + v2[12]), *(void *)(v1 + v2[12] + 8));
  id v52 = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v52);
  v53._uint64_t countAndFlagsBits = 0x203A6B7269202CLL;
  v53._object = (void *)0xE700000000000000LL;
  String.append(_:)(v53);
  Data.hexString.getter(*(void *)(v1 + v2[11]), *(void *)(v1 + v2[11] + 8));
  id v55 = v54._object;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v55);
  v56._uint64_t countAndFlagsBits = 0x6E6F74747562202CLL;
  v56._object = (void *)0xEF203A7365646F4DLL;
  String.append(_:)(v56);
  uint64_t v57 = (uint64_t *)(v0 + v2[15]);
  uint64_t v58 = *v57;
  uint64_t v59 = (void *)v57[1];
  swift_bridgeObjectRetain(v59);
  v60._uint64_t countAndFlagsBits = v58;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v59);
  v61._uint64_t countAndFlagsBits = 0x3A726F6C6F63202CLL;
  v61._object = (void *)0xE900000000000020LL;
  String.append(_:)(v61);
  unint64_t v62 = (uint64_t *)(v0 + v2[16]);
  uint64_t v63 = *v62;
  unint64_t v64 = (void *)v62[1];
  swift_bridgeObjectRetain(v64);
  v65._uint64_t countAndFlagsBits = v63;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease(v64);
  v66._object = (void *)0x80000001001CDCF0LL;
  v66._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v66);
  id v67 = (uint64_t *)(v0 + v2[17]);
  uint64_t v68 = *v67;
  uint64_t v69 = (void *)v67[1];
  swift_bridgeObjectRetain(v69);
  v70._uint64_t countAndFlagsBits = v68;
  v70._object = v69;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v69);
  v71._object = (void *)0x80000001001CDD10LL;
  v71._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v71);
  uint64_t v72 = (uint64_t *)(v0 + v2[18]);
  uint64_t v73 = *v72;
  uint64_t v74 = (void *)v72[1];
  swift_bridgeObjectRetain(v74);
  v75._uint64_t countAndFlagsBits = v73;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v74);
  v76._object = (void *)0x80000001001CDD30LL;
  v76._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v76);
  uint64_t v77 = (uint64_t *)(v0 + v2[21]);
  uint64_t v78 = *v77;
  uint64_t v79 = (void *)v77[1];
  swift_bridgeObjectRetain(v79);
  v80._uint64_t countAndFlagsBits = v78;
  v80._object = v79;
  String.append(_:)(v80);
  swift_bridgeObjectRelease(v79);
  v81._object = (void *)0x80000001001CDD50LL;
  v81._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v81);
  uint64_t v82 = (uint64_t *)(v0 + v2[19]);
  uint64_t v83 = *v82;
  uint64_t v84 = (void *)v82[1];
  swift_bridgeObjectRetain(v84);
  v85._uint64_t countAndFlagsBits = v83;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease(v84);
  v86._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v86._object = (void *)0x80000001001CDD70LL;
  String.append(_:)(v86);
  uint64_t v87 = (uint64_t *)(v0 + v2[20]);
  uint64_t v88 = *v87;
  uint64_t v89 = (void *)v87[1];
  swift_bridgeObjectRetain(v89);
  v90._uint64_t countAndFlagsBits = v88;
  v90._object = v89;
  String.append(_:)(v90);
  swift_bridgeObjectRelease(v89);
  v91._object = (void *)0xEB00000000203A74LL;
  v91._uint64_t countAndFlagsBits = 0x656863746172202CLL;
  String.append(_:)(v91);
  int64_t v92 = (uint64_t *)(v0 + v2[24]);
  uint64_t v93 = *v92;
  uint64_t v94 = (void *)v92[1];
  swift_bridgeObjectRetain(v94);
  v95._uint64_t countAndFlagsBits = v93;
  v95._object = v94;
  String.append(_:)(v95);
  swift_bridgeObjectRelease(v94);
  v96._object = (void *)0x80000001001CDD90LL;
  v96._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v96);
  Swift::String v97 = (uint64_t *)(v0 + v2[26]);
  uint64_t v98 = *v97;
  char v99 = (void *)v97[1];
  swift_bridgeObjectRetain(v99);
  v100._uint64_t countAndFlagsBits = v98;
  v100._object = v99;
  String.append(_:)(v100);
  swift_bridgeObjectRelease(v99);
  v101._object = (void *)0x80000001001CDDB0LL;
  v101._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v101);
  uint64_t v102 = (uint64_t *)(v0 + v2[27]);
  uint64_t v103 = *v102;
  uint64_t v104 = (void *)v102[1];
  swift_bridgeObjectRetain(v104);
  v105._uint64_t countAndFlagsBits = v103;
  v105._object = v104;
  String.append(_:)(v105);
  swift_bridgeObjectRelease(v104);
  v106._uint64_t countAndFlagsBits = 0x6F6973726576202CLL;
  v106._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v106);
  uint64_t v107 = (uint64_t *)(v0 + v2[28]);
  uint64_t v108 = *v107;
  unint64_t v109 = (void *)v107[1];
  swift_bridgeObjectRetain(v109);
  v110._uint64_t countAndFlagsBits = v108;
  v110._object = v109;
  String.append(_:)(v110);
  swift_bridgeObjectRelease(v109);
  v111._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v111._object = (void *)0x80000001001CDDD0LL;
  String.append(_:)(v111);
  uint64_t v112 = (uint64_t *)(v0 + v2[22]);
  uint64_t v113 = *v112;
  uint64_t v114 = (void *)v112[1];
  swift_bridgeObjectRetain(v114);
  v115._uint64_t countAndFlagsBits = v113;
  v115._object = v114;
  String.append(_:)(v115);
  swift_bridgeObjectRelease(v114);
  v116._uint64_t countAndFlagsBits = 0xD000000000000026LL;
  v116._object = (void *)0x80000001001CDDF0LL;
  String.append(_:)(v116);
  uint64_t v117 = (uint64_t *)(v0 + v2[23]);
  uint64_t v118 = *v117;
  uint64_t v119 = (void *)v117[1];
  swift_bridgeObjectRetain(v119);
  v120._uint64_t countAndFlagsBits = v118;
  v120._object = v119;
  String.append(_:)(v120);
  swift_bridgeObjectRelease(v119);
  v121._uint64_t countAndFlagsBits = 2604LL;
  v121._object = (void *)0xE200000000000000LL;
  String.append(_:)(v121);
  uint64_t v122 = v208;
  unint64_t v123 = v209;
  uint64_t v208 = 0LL;
  unint64_t v209 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(59LL);
  v124._uint64_t countAndFlagsBits = 0x7461657263202020LL;
  v124._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v124);
  id v125 = -[objc_class creationDate](v207, "creationDate");
  uint64_t v203 = v122;
  if (v125)
  {
    uint64_t v126 = v125;
    id v127 = v9;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v125);

    uint64_t v128 = v206;
    uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56);
    uint64_t v130 = v14;
    uint64_t v131 = 0LL;
  }

  else
  {
    id v127 = v9;
    uint64_t v128 = v206;
    uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56);
    uint64_t v130 = v14;
    uint64_t v131 = 1LL;
  }

  uint64_t v132 = v204;
  Swift::String v198 = v129;
  v129((uint64_t)v130, v131, 1LL, v204);
  uint64_t v133 = (uint64_t)v205;
  sub_100099290((uint64_t)v14, (uint64_t)v17);
  uint64_t v134 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
  unsigned int v135 = v134(v17, 1LL, v132);
  uint64_t v199 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v134;
  unint64_t v200 = v123;
  if (v135)
  {
    uint64_t v136 = v132;
    sub_100099358((uint64_t)v17, (uint64_t *)&unk_100234E10);
    sub_1000D5630(v1, v133);
    uint64_t v137 = (uint64_t)v127;
  }

  else
  {
    uint64_t v138 = v197;
    (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v197, v17, v132);
    sub_100099358((uint64_t)v17, (uint64_t *)&unk_100234E10);
    uint64_t v139 = v132;
    unint64_t v140 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v142 = [v140 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
    uint64_t v145 = v144;

    uint64_t v146 = v138;
    uint64_t v136 = v139;
    uint64_t v147 = v139;
    uint64_t v133 = (uint64_t)v205;
    (*(void (**)(char *, uint64_t))(v128 + 8))(v146, v147);
    sub_1000D5630(v1, v133);
    uint64_t v137 = (uint64_t)v127;
    if (v145) {
      goto LABEL_8;
    }
  }

  uint64_t v148 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class v149 = Date._bridgeToObjectiveC()().super.isa;
  id v150 = [v148 localizedStringFromDate:v149 dateStyle:2 timeStyle:2];

  uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
  uint64_t v145 = v151;

LABEL_8:
  sub_1000D5674(v133);
  v152._uint64_t countAndFlagsBits = v143;
  v152._object = v145;
  String.append(_:)(v152);
  swift_bridgeObjectRelease(v145);
  v153._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v153._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v153);
  id v154 = -[objc_class modificationDate](v207, "modificationDate");
  if (v154)
  {
    uint64_t v155 = v154;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v154);

    uint64_t v156 = 0LL;
  }

  else
  {
    uint64_t v156 = 1LL;
  }

  uint64_t v157 = v136;
  unint64_t v159 = v200;
  uint64_t v158 = (uint64_t)v201;
  uint64_t v160 = v199;
  v198(v137, v156, 1LL, v157);
  sub_100099290(v137, v158);
  if (v160(v158, 1LL, v157))
  {
    sub_100099358(v158, (uint64_t *)&unk_100234E10);
    uint64_t v161 = v1;
    uint64_t v162 = v202;
    sub_1000D5630(v161, v202);
    Class v163 = v207;
  }

  else
  {
    uint64_t v164 = v206;
    uint64_t v165 = v197;
    (*(void (**)(char *, uint64_t, uint64_t))(v206 + 16))(v197, v158, v157);
    sub_100099358(v158, (uint64_t *)&unk_100234E10);
    uint64_t v166 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v167 = Date._bridgeToObjectiveC()().super.isa;
    id v168 = [v166 localizedStringFromDate:v167 dateStyle:2 timeStyle:2];

    uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
    uint64_t v171 = v170;

    (*(void (**)(char *, uint64_t))(v164 + 8))(v165, v204);
    uint64_t v172 = v1;
    uint64_t v162 = v202;
    sub_1000D5630(v172, v202);
    Class v163 = v207;
    if (v171) {
      goto LABEL_15;
    }
  }

  uint64_t v173 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class v174 = Date._bridgeToObjectiveC()().super.isa;
  id v175 = [v173 localizedStringFromDate:v174 dateStyle:2 timeStyle:2];

  uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
  uint64_t v171 = v176;

LABEL_15:
  sub_1000D5674(v162);
  v177._uint64_t countAndFlagsBits = v169;
  v177._object = v171;
  String.append(_:)(v177);
  swift_bridgeObjectRelease(v171);
  v178._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v178._object = (void *)0xEF203A7962206465LL;
  String.append(_:)(v178);
  id v179 = -[objc_class modifiedByDevice](v163, "modifiedByDevice");
  if (v179)
  {
    uint64_t v180 = v179;
    uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
    uint64_t v183 = v182;
  }

  else
  {
    uint64_t v183 = (void *)0xE200000000000000LL;
    uint64_t v181 = 15932LL;
  }

  v184._uint64_t countAndFlagsBits = v181;
  v184._object = v183;
  String.append(_:)(v184);
  swift_bridgeObjectRelease(v183);
  v185._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v185._object = (void *)0xE800000000000000LL;
  String.append(_:)(v185);
  id v186 = -[objc_class recordChangeTag](v163, "recordChangeTag");
  if (v186)
  {
    Swift::String v187 = v186;
    uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
    Swift::String v190 = v189;
  }

  else
  {
    Swift::String v190 = (void *)0xE200000000000000LL;
    uint64_t v188 = 15932LL;
  }

  v191._uint64_t countAndFlagsBits = v188;
  v191._object = v190;
  String.append(_:)(v191);
  swift_bridgeObjectRelease(v190);
  uint64_t v192 = v208;
  Swift::String v193 = (void *)v209;
  uint64_t v208 = v203;
  unint64_t v209 = v159;
  swift_bridgeObjectRetain(v159);
  v194._uint64_t countAndFlagsBits = v192;
  v194._object = v193;
  String.append(_:)(v194);

  swift_bridgeObjectRelease(v159);
  swift_bridgeObjectRelease(v193);
  return v208;
}

uint64_t sub_1000CBDD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v154 = type metadata accessor for Date(0LL);
  uint64_t v152 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v7 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  *(_OWORD *)(a3 + v8[5]) = xmmword_1001A7C10;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v153 = a1;
  v11(a3, a1, v9);
  id v12 = [a2 bluetoothAddress];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  uint64_t v16 = (uint64_t *)(a3 + v8[6]);
  *uint64_t v16 = v13;
  v16[1] = v15;
  id v17 = [a2 productID];
  if (v17)
  {
    Swift::String v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t v22 = (uint64_t *)(a3 + v8[13]);
  *uint64_t v22 = v19;
  v22[1] = v21;
  id v23 = [a2 vendorID];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    unint64_t v27 = v26;
  }

  else
  {
    uint64_t v25 = 0LL;
    unint64_t v27 = 0xE000000000000000LL;
  }

  Swift::String v28 = (uint64_t *)(a3 + v8[14]);
  *Swift::String v28 = v25;
  v28[1] = v27;
  id v29 = [a2 masterHint];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v33 = v32;
  }

  else
  {
    uint64_t v31 = 0LL;
    unint64_t v33 = 0xC000000000000000LL;
  }

  unint64_t v34 = (uint64_t *)(a3 + v8[8]);
  *unint64_t v34 = v31;
  v34[1] = v33;
  id v35 = [a2 masterKey];
  if (v35)
  {
    unint64_t v36 = v35;
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    unint64_t v39 = v38;
  }

  else
  {
    uint64_t v37 = 0LL;
    unint64_t v39 = 0xC000000000000000LL;
  }

  uint64_t v40 = (uint64_t *)(a3 + v8[7]);
  *uint64_t v40 = v37;
  v40[1] = v39;
  id v41 = [a2 accessoryHint];
  if (v41)
  {
    Swift::String v42 = v41;
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    unint64_t v45 = v44;
  }

  else
  {
    uint64_t v43 = 0LL;
    unint64_t v45 = 0xC000000000000000LL;
  }

  int v46 = (uint64_t *)(a3 + v8[10]);
  *int v46 = v43;
  v46[1] = v45;
  id v47 = [a2 accessoryKey];
  if (v47)
  {
    Swift::String v48 = v47;
    uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    unint64_t v51 = v50;
  }

  else
  {
    uint64_t v49 = 0LL;
    unint64_t v51 = 0xC000000000000000LL;
  }

  id v52 = (uint64_t *)(a3 + v8[9]);
  uint64_t *v52 = v49;
  v52[1] = v51;
  id v53 = [a2 buttonModes];
  if (v53)
  {
    Swift::String v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    unint64_t v57 = v56;
  }

  else
  {
    uint64_t v55 = 0LL;
    unint64_t v57 = 0xE000000000000000LL;
  }

  uint64_t v58 = (uint64_t *)(a3 + v8[15]);
  *uint64_t v58 = v55;
  v58[1] = v57;
  id v59 = [a2 color];
  if (v59)
  {
    Swift::String v60 = v59;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    unint64_t v63 = v62;
  }

  else
  {
    uint64_t v61 = 0LL;
    unint64_t v63 = 0xE000000000000000LL;
  }

  unint64_t v64 = (uint64_t *)(a3 + v8[16]);
  *unint64_t v64 = v61;
  v64[1] = v63;
  id v65 = [a2 deviceIDFeatureBitsV1];
  if (v65)
  {
    Swift::String v66 = v65;
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    unint64_t v69 = v68;
  }

  else
  {
    uint64_t v67 = 0LL;
    unint64_t v69 = 0xE000000000000000LL;
  }

  Swift::String v70 = (uint64_t *)(a3 + v8[17]);
  *Swift::String v70 = v67;
  v70[1] = v69;
  id v71 = [a2 deviceIDFeatureBitsV2];
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    unint64_t v75 = v74;
  }

  else
  {
    uint64_t v73 = 0LL;
    unint64_t v75 = 0xE000000000000000LL;
  }

  Swift::String v76 = (uint64_t *)(a3 + v8[18]);
  *Swift::String v76 = v73;
  v76[1] = v75;
  id v77 = [a2 encryptionKey];
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
    unint64_t v81 = v80;
  }

  else
  {
    uint64_t v79 = 0LL;
    unint64_t v81 = 0xC000000000000000LL;
  }

  uint64_t v82 = (uint64_t *)(a3 + v8[12]);
  *uint64_t v82 = v79;
  v82[1] = v81;
  id v83 = [a2 irk];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v83);
    unint64_t v87 = v86;
  }

  else
  {
    uint64_t v85 = 0LL;
    unint64_t v87 = 0xC000000000000000LL;
  }

  uint64_t v88 = (uint64_t *)(a3 + v8[11]);
  *uint64_t v88 = v85;
  v88[1] = v87;
  id v89 = [a2 listeningServices];
  if (v89)
  {
    Swift::String v90 = v89;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    unint64_t v93 = v92;
  }

  else
  {
    uint64_t v91 = 0LL;
    unint64_t v93 = 0xE000000000000000LL;
  }

  uint64_t v94 = (uint64_t *)(a3 + v8[19]);
  *uint64_t v94 = v91;
  v94[1] = v93;
  id v95 = [a2 listeningServicesV2];
  if (v95)
  {
    Swift::String v96 = v95;
    uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
    unint64_t v99 = v98;
  }

  else
  {
    uint64_t v97 = 0LL;
    unint64_t v99 = 0xE000000000000000LL;
  }

  Swift::String v100 = (uint64_t *)(a3 + v8[20]);
  *Swift::String v100 = v97;
  v100[1] = v99;
  id v101 = [a2 spatialAudio];
  if (v101)
  {
    uint64_t v102 = v101;
    uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
    unint64_t v105 = v104;
  }

  else
  {
    uint64_t v103 = 0LL;
    unint64_t v105 = 0xE000000000000000LL;
  }

  Swift::String v106 = (uint64_t *)(a3 + v8[21]);
  *Swift::String v106 = v103;
  v106[1] = v105;
  id v107 = [a2 optimizedBatteryCharging];
  if (v107)
  {
    uint64_t v108 = v107;
    uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    unint64_t v111 = v110;
  }

  else
  {
    uint64_t v109 = 0LL;
    unint64_t v111 = 0xE000000000000000LL;
  }

  uint64_t v112 = (uint64_t *)(a3 + v8[22]);
  *uint64_t v112 = v109;
  v112[1] = v111;
  id v113 = [a2 optimizedBatteryFullChargeDeadline];
  if (v113)
  {
    uint64_t v114 = v113;
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    unint64_t v117 = v116;
  }

  else
  {
    uint64_t v115 = 0LL;
    unint64_t v117 = 0xE000000000000000LL;
  }

  uint64_t v118 = (uint64_t *)(a3 + v8[23]);
  uint64_t *v118 = v115;
  v118[1] = v117;
  id v119 = [a2 ratchet];
  if (v119)
  {
    Swift::String v120 = v119;
    uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
    unint64_t v123 = v122;
  }

  else
  {
    uint64_t v121 = 0LL;
    unint64_t v123 = 0xE000000000000000LL;
  }

  Swift::String v124 = (uint64_t *)(a3 + v8[24]);
  *Swift::String v124 = v121;
  v124[1] = v123;
  id v125 = [a2 reserved];
  if (v125)
  {
    uint64_t v126 = v125;
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
    unint64_t v129 = v128;
  }

  else
  {
    uint64_t v127 = 0LL;
    unint64_t v129 = 0xE000000000000000LL;
  }

  uint64_t v130 = (uint64_t *)(a3 + v8[25]);
  uint64_t *v130 = v127;
  v130[1] = v129;
  id v131 = [a2 settingsMask];
  if (v131)
  {
    uint64_t v132 = v131;
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
    unint64_t v135 = v134;
  }

  else
  {
    uint64_t v133 = 0LL;
    unint64_t v135 = 0xE000000000000000LL;
  }

  uint64_t v136 = (uint64_t *)(a3 + v8[26]);
  *uint64_t v136 = v133;
  v136[1] = v135;
  id v137 = [a2 supportedServices];
  if (v137)
  {
    uint64_t v138 = v137;
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    unint64_t v141 = v140;
  }

  else
  {
    uint64_t v139 = 0LL;
    unint64_t v141 = 0xE000000000000000LL;
  }

  id v142 = (uint64_t *)(a3 + v8[27]);
  *id v142 = v139;
  v142[1] = v141;
  id v143 = [a2 version];
  if (v143)
  {
    uint64_t v144 = v143;
    uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
    unint64_t v147 = v146;
  }

  else
  {
    uint64_t v145 = 0LL;
    unint64_t v147 = 0xE000000000000000LL;
  }

  uint64_t v148 = (uint64_t *)(a3 + v8[28]);
  uint64_t *v148 = v145;
  v148[1] = v147;
  Class v149 = (void *)(a3 + v8[29]);
  *Class v149 = 0LL;
  v149[1] = 0xE000000000000000LL;
  static Date.now.getter(v143);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v153, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v152 + 32))(a3 + v8[30], v7, v154);
}

uint64_t sub_1000CC554@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v231 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v226 = (uint64_t)&v212 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v228 = (uint64_t)&v212 - v7;
  __chkstk_darwin(v8);
  uint64_t v230 = (uint64_t)&v212 - v9;
  uint64_t v214 = type metadata accessor for Date(0LL);
  uint64_t v213 = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  Swift::String v225 = (char *)&v212 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v229 = (char *)&v212 - v12;
  uint64_t v216 = type metadata accessor for UUID(0LL);
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v14 = (char *)&v212 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v232 = sub_100098CD8(&qword_100235A00);
  uint64_t v15 = *(void *)(v232 - 8);
  __chkstk_darwin(v232);
  id v17 = (char *)&v212 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v236 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v236);
  uint64_t v19 = (char *)&v212 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v212 - v21;
  __chkstk_darwin(v23);
  uint64_t v235 = (uint64_t)&v212 - v24;
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  uint64_t v227 = a1;
  sub_10009A430(a1, v25);
  unint64_t v27 = sub_1000D6D50();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MagicPairingSettingsRecord.CodingKeys,  &type metadata for MagicPairingSettingsRecord.CodingKeys,  v27,  v25,  v26);
  if (!v2)
  {
    Swift::String v28 = v14;
    uint64_t v222 = (uint64_t)v22;
    uint64_t v223 = (uint64_t)v19;
    uint64_t v224 = v15;
    char v240 = 1;
    unint64_t v29 = sub_10009A4B8();
    uint64_t v30 = v232;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v237,  &type metadata for Data,  &v240,  v232,  &type metadata for Data,  v29);
    unint64_t v233 = v29;
    uint64_t v41 = v30;
    unint64_t v42 = v238;
    uint64_t v43 = v17;
    uint64_t v44 = v235;
    unint64_t v45 = (int *)v236;
    int v46 = (uint64_t *)(v235 + *(int *)(v236 + 20));
    uint64_t v220 = (uint64_t)v237;
    *int v46 = (uint64_t)v237;
    v46[1] = v42;
    LOBYTE(v237) = 0;
    uint64_t v47 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    Swift::String v48 = v28;
    uint64_t v49 = v28;
    uint64_t v50 = v216;
    uint64_t v221 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v49, v216, &v237, v41, v216, v47);
    uint64_t v218 = v46;
    unint64_t v219 = v42;
    (*(void (**)(uint64_t, void *, uint64_t))(v215 + 32))(v44, v48, v50);
    LOBYTE(v237) = 2;
    uint64_t v51 = v232;
    id v52 = v221;
    uint64_t v53 = KeyedDecodingContainer.decode(_:forKey:)(&v237, v232);
    Swift::String v54 = (uint64_t *)(v44 + v45[6]);
    *Swift::String v54 = v53;
    v54[1] = v55;
    LOBYTE(v237) = 9;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v51);
    uint64_t v58 = v220;
    if (v57) {
      uint64_t v59 = v56;
    }
    else {
      uint64_t v59 = 0LL;
    }
    if (v57) {
      unint64_t v60 = v57;
    }
    else {
      unint64_t v60 = 0xE000000000000000LL;
    }
    uint64_t v61 = (uint64_t *)(v44 + v45[13]);
    *uint64_t v61 = v59;
    v61[1] = v60;
    LOBYTE(v237) = 10;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v51);
    if (v63) {
      uint64_t v64 = v62;
    }
    else {
      uint64_t v64 = 0LL;
    }
    if (v63) {
      unint64_t v65 = v63;
    }
    else {
      unint64_t v65 = 0xE000000000000000LL;
    }
    Swift::String v66 = (uint64_t *)(v44 + v45[14]);
    *Swift::String v66 = v64;
    v66[1] = v65;
    char v240 = 4;
    unint64_t v67 = v233;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v240,  v51,  &type metadata for Data,  v233);
    Class v68 = v237;
    unint64_t v69 = v238;
    if (v238 >> 60 == 15)
    {
      Class v68 = 0LL;
      unint64_t v69 = 0xC000000000000000LL;
    }

    Swift::String v70 = (Class *)(v44 + v45[8]);
    *Swift::String v70 = v68;
    v70[1] = (Class)v69;
    char v240 = 3;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v240,  v51,  &type metadata for Data,  v67);
    Class v71 = v237;
    unint64_t v72 = v238;
    if (v238 >> 60 == 15)
    {
      Class v71 = 0LL;
      unint64_t v72 = 0xC000000000000000LL;
    }

    uint64_t v73 = (Class *)(v44 + v45[7]);
    *uint64_t v73 = v71;
    v73[1] = (Class)v72;
    char v240 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v240,  v51,  &type metadata for Data,  v67);
    Class v74 = v237;
    unint64_t v75 = v238;
    if (v238 >> 60 == 15)
    {
      Class v74 = 0LL;
      unint64_t v75 = 0xC000000000000000LL;
    }

    Swift::String v76 = (Class *)(v44 + v45[10]);
    *Swift::String v76 = v74;
    v76[1] = (Class)v75;
    char v240 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v240,  v51,  &type metadata for Data,  v67);
    Class v77 = v237;
    unint64_t v78 = v238;
    if (v238 >> 60 == 15)
    {
      Class v77 = 0LL;
      unint64_t v78 = 0xC000000000000000LL;
    }

    uint64_t v79 = (Class *)(v44 + *(int *)(v236 + 36));
    *uint64_t v79 = v77;
    v79[1] = (Class)v78;
    LOBYTE(v237) = 11;
    uint64_t v80 = v51;
    uint64_t v81 = v51;
    uint64_t v82 = v52;
    uint64_t v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v81);
    uint64_t v234 = 0LL;
    if (v84) {
      uint64_t v85 = v83;
    }
    else {
      uint64_t v85 = 0LL;
    }
    if (v84) {
      unint64_t v86 = v84;
    }
    else {
      unint64_t v86 = 0xE000000000000000LL;
    }
    unint64_t v87 = (uint64_t *)(v235 + *(int *)(v236 + 60));
    *unint64_t v87 = v85;
    v87[1] = v86;
    LOBYTE(v237) = 12;
    uint64_t v88 = v234;
    uint64_t v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v88;
    if (v88)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 3711;
      goto LABEL_4;
    }

    if (v90) {
      uint64_t v91 = v89;
    }
    else {
      uint64_t v91 = 0LL;
    }
    if (v90) {
      unint64_t v92 = v90;
    }
    else {
      unint64_t v92 = 0xE000000000000000LL;
    }
    unint64_t v93 = (uint64_t *)(v235 + *(int *)(v236 + 64));
    *unint64_t v93 = v91;
    v93[1] = v92;
    LOBYTE(v237) = 13;
    uint64_t v94 = v234;
    uint64_t v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v94;
    if (v94)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 7807;
      goto LABEL_4;
    }

    if (v96) {
      uint64_t v97 = v95;
    }
    else {
      uint64_t v97 = 0LL;
    }
    if (v96) {
      unint64_t v98 = v96;
    }
    else {
      unint64_t v98 = 0xE000000000000000LL;
    }
    unint64_t v99 = (uint64_t *)(v235 + *(int *)(v236 + 68));
    *unint64_t v99 = v97;
    v99[1] = v98;
    LOBYTE(v237) = 14;
    uint64_t v100 = v234;
    uint64_t v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v100;
    if (v100)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 15999;
      goto LABEL_4;
    }

    if (v102) {
      uint64_t v103 = v101;
    }
    else {
      uint64_t v103 = 0LL;
    }
    if (v102) {
      unint64_t v104 = v102;
    }
    else {
      unint64_t v104 = 0xE000000000000000LL;
    }
    unint64_t v105 = (uint64_t *)(v235 + *(int *)(v236 + 72));
    *unint64_t v105 = v103;
    v105[1] = v104;
    char v240 = 8;
    uint64_t v106 = v234;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v240,  v80,  &type metadata for Data,  v233);
    uint64_t v234 = v106;
    if (v106)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 32383;
      goto LABEL_4;
    }

    Class v107 = v237;
    unint64_t v108 = v238;
    if (v238 >> 60 == 15)
    {
      Class v107 = 0LL;
      unint64_t v108 = 0xC000000000000000LL;
    }

    uint64_t v109 = (Class *)(v235 + *(int *)(v236 + 48));
    Class *v109 = v107;
    v109[1] = (Class)v108;
    char v240 = 7;
    uint64_t v110 = v234;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v240,  v80,  &type metadata for Data,  v233);
    uint64_t v234 = v110;
    if (v110)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 32639;
      goto LABEL_4;
    }

    Class v111 = v237;
    unint64_t v112 = v238;
    if (v238 >> 60 == 15)
    {
      Class v111 = 0LL;
      unint64_t v112 = 0xC000000000000000LL;
    }

    id v113 = (Class *)(v235 + *(int *)(v236 + 44));
    *id v113 = v111;
    v113[1] = (Class)v112;
    LOBYTE(v237) = 15;
    uint64_t v114 = v234;
    uint64_t v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v114;
    if (v114)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 0x7FFF;
      goto LABEL_4;
    }

    if (v116) {
      uint64_t v117 = v115;
    }
    else {
      uint64_t v117 = 0LL;
    }
    if (v116) {
      unint64_t v118 = v116;
    }
    else {
      unint64_t v118 = 0xE000000000000000LL;
    }
    id v119 = (uint64_t *)(v235 + *(int *)(v236 + 76));
    *id v119 = v117;
    v119[1] = v118;
    LOBYTE(v237) = 16;
    uint64_t v120 = v234;
    uint64_t v121 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v120;
    if (v120)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 0xFFFF;
      goto LABEL_4;
    }

    if (v122) {
      uint64_t v123 = v121;
    }
    else {
      uint64_t v123 = 0LL;
    }
    if (v122) {
      unint64_t v124 = v122;
    }
    else {
      unint64_t v124 = 0xE000000000000000LL;
    }
    id v125 = (uint64_t *)(v235 + *(int *)(v236 + 80));
    *id v125 = v123;
    v125[1] = v124;
    LOBYTE(v237) = 17;
    uint64_t v126 = v234;
    uint64_t v127 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v126;
    if (v126)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 0x1FFFF;
      goto LABEL_4;
    }

    if (v128) {
      uint64_t v129 = v127;
    }
    else {
      uint64_t v129 = 0LL;
    }
    if (v128) {
      unint64_t v130 = v128;
    }
    else {
      unint64_t v130 = 0xE000000000000000LL;
    }
    id v131 = (uint64_t *)(v235 + *(int *)(v236 + 84));
    *id v131 = v129;
    v131[1] = v130;
    LOBYTE(v237) = 18;
    uint64_t v132 = v234;
    uint64_t v133 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v132;
    if (v132)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 0x3FFFF;
      goto LABEL_4;
    }

    if (v134) {
      uint64_t v135 = v133;
    }
    else {
      uint64_t v135 = 0LL;
    }
    if (v134) {
      unint64_t v136 = v134;
    }
    else {
      unint64_t v136 = 0xE000000000000000LL;
    }
    id v137 = (uint64_t *)(v235 + *(int *)(v236 + 88));
    uint64_t *v137 = v135;
    v137[1] = v136;
    LOBYTE(v237) = 19;
    uint64_t v138 = v234;
    uint64_t v139 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v138;
    if (v138)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      unsigned int v31 = 0x7FFFF;
      goto LABEL_4;
    }

    if (v140) {
      uint64_t v141 = v139;
    }
    else {
      uint64_t v141 = 0LL;
    }
    if (v140) {
      unint64_t v142 = v140;
    }
    else {
      unint64_t v142 = 0xE000000000000000LL;
    }
    id v143 = (uint64_t *)(v235 + *(int *)(v236 + 92));
    uint64_t *v143 = v141;
    v143[1] = v142;
    LOBYTE(v237) = 20;
    uint64_t v144 = v234;
    uint64_t v145 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v144;
    if (v144)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      unsigned int v31 = 0xFFFFF;
      LODWORD(v232) = 1;
      goto LABEL_4;
    }

    if (v146) {
      uint64_t v147 = v145;
    }
    else {
      uint64_t v147 = 0LL;
    }
    if (v146) {
      unint64_t v148 = v146;
    }
    else {
      unint64_t v148 = 0xE000000000000000LL;
    }
    Class v149 = (uint64_t *)(v235 + *(int *)(v236 + 96));
    *Class v149 = v147;
    v149[1] = v148;
    LOBYTE(v237) = 21;
    uint64_t v150 = v234;
    uint64_t v151 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    LODWORD(v233) = v150 == 0;
    uint64_t v234 = v150;
    if (v150) {
      goto LABEL_173;
    }
    uint64_t v153 = v152 ? v151 : 0LL;
    unint64_t v154 = v152 ? v152 : 0xE000000000000000LL;
    uint64_t v155 = (uint64_t *)(v235 + *(int *)(v236 + 100));
    *uint64_t v155 = v153;
    v155[1] = v154;
    LOBYTE(v237) = 22;
    uint64_t v156 = v234;
    uint64_t v157 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v156;
    if (v156)
    {
LABEL_173:
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v22_Block_object_dispose(va, 8) = 0;
      LODWORD(v229) = 0;
      LODWORD(v230) = 0;
      LODWORD(v231) = 0;
LABEL_174:
      sub_10009A498(v227);
      uint64_t v32 = v235;
      (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v235, v216);
      LODWORD(v227) = 1;
      LODWORD(v232) = 1;
      LODWORD(v226) = 1;
      LODWORD(v225) = 1;
      LODWORD(v224) = 1;
      LODWORD(v223) = 1;
      LODWORD(v222) = 1;
      LODWORD(v221) = 1;
      LODWORD(v220) = 1;
      LODWORD(v219) = 1;
      LODWORD(v21_Block_object_dispose(va, 8) = 1;
      LODWORD(v217) = 1;
      int v239 = 1;
      int v39 = 1;
      int v38 = 1;
      int v37 = 1;
      int v36 = 1;
      int v35 = 1;
      LOBYTE(v34) = 1;
      uint64_t v40 = (int *)v236;
      goto LABEL_33;
    }

    if (v158) {
      uint64_t v159 = v157;
    }
    else {
      uint64_t v159 = 0LL;
    }
    if (v158) {
      unint64_t v160 = v158;
    }
    else {
      unint64_t v160 = 0xE000000000000000LL;
    }
    uint64_t v161 = (uint64_t *)(v235 + *(int *)(v236 + 104));
    *uint64_t v161 = v159;
    v161[1] = v160;
    LOBYTE(v237) = 23;
    uint64_t v162 = v234;
    uint64_t v163 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v162;
    if (v162)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v229) = 0;
      LODWORD(v230) = 0;
      LODWORD(v231) = 0;
      LODWORD(v22_Block_object_dispose(va, 8) = 1;
      goto LABEL_174;
    }

    if (v164) {
      uint64_t v165 = v163;
    }
    else {
      uint64_t v165 = 0LL;
    }
    if (v164) {
      unint64_t v166 = v164;
    }
    else {
      unint64_t v166 = 0xE000000000000000LL;
    }
    Class v167 = (uint64_t *)(v235 + *(int *)(v236 + 108));
    *Class v167 = v165;
    v167[1] = v166;
    LOBYTE(v237) = 24;
    uint64_t v168 = v234;
    uint64_t v169 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v168;
    if (v168)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v230) = 0;
      LODWORD(v231) = 0;
      LODWORD(v22_Block_object_dispose(va, 8) = 1;
      LODWORD(v229) = 1;
      goto LABEL_174;
    }

    if (v170) {
      uint64_t v171 = v169;
    }
    else {
      uint64_t v171 = 0LL;
    }
    if (v170) {
      unint64_t v172 = v170;
    }
    else {
      unint64_t v172 = 0xE000000000000000LL;
    }
    uint64_t v173 = (uint64_t *)(v235 + *(int *)(v236 + 112));
    *uint64_t v173 = v171;
    v173[1] = v172;
    LOBYTE(v237) = 25;
    uint64_t v174 = v234;
    uint64_t v175 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    uint64_t v234 = v174;
    if (v174)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v231) = 0;
      LODWORD(v22_Block_object_dispose(va, 8) = 1;
      LODWORD(v229) = 1;
      LODWORD(v230) = 1;
      goto LABEL_174;
    }

    if (v176) {
      uint64_t v177 = v175;
    }
    else {
      uint64_t v177 = 0LL;
    }
    unint64_t v178 = 0xE000000000000000LL;
    if (v176) {
      unint64_t v178 = v176;
    }
    uint64_t v179 = v235;
    uint64_t v180 = v236;
    uint64_t v181 = (uint64_t *)(v235 + *(int *)(v236 + 116));
    uint64_t *v181 = v177;
    v181[1] = v178;
    uint64_t v217 = v179 + *(int *)(v180 + 120);
    static Date.now.getter(v175);
    LOBYTE(v237) = 26;
    uint64_t v182 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v183 = v234;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v214, &v237, v80, v214, v182);
    uint64_t v234 = v183;
    if (v183)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v22_Block_object_dispose(va, 8) = 1;
      LODWORD(v229) = 1;
      LODWORD(v230) = 1;
      LODWORD(v231) = 1;
      goto LABEL_174;
    }

    uint64_t v236 = *(void *)(v213 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v236)(v230, 1LL, v214) != 1)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      (*(void (**)(char *, uint64_t, uint64_t))(v213 + 32))(v229, v230, v214);
LABEL_225:
      (*(void (**)(uint64_t, char *, uint64_t))(v213 + 40))(v217, v229, v214);
      uint64_t v211 = v235;
      sub_1000D5630(v235, v231);
      sub_10009A498(v227);
      return sub_1000D5674(v211);
    }

    Swift::String v184 = objc_autoreleasePoolPush();
    unint64_t v185 = v219;
    sub_1000991CC(v58, v219);
    sub_100118B60(v58, v185);
    Class isa = v186;
    sub_100099394(v58, v185);
    sub_1000D5630(v235, v222);
    if (isa)
    {
      uint64_t v188 = v222;
    }

    else
    {
      uint64_t v189 = v222;
      Class isa = sub_1000A33B8(v222).super.isa;
      uint64_t v188 = v189;
    }

    sub_1000D5674(v188);
    Class v237 = isa;
    sub_1000CEB74((id *)&v237);
    objc_autoreleasePoolPop(v184);
    id v190 = -[objc_class modificationDate](isa, "modificationDate");

    if (v190)
    {
      Swift::String v191 = v225;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v190);

      uint64_t v192 = v213;
      Swift::String v193 = *(void (**)(uint64_t, char *, uint64_t))(v213 + 32);
      uint64_t v194 = v228;
      uint64_t v195 = v214;
      v193(v228, v191, v214);
      uint64_t v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56);
      v196(v194, 0LL, 1LL, v195);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v236)(v194, 1LL, v195) != 1)
      {
        (*(void (**)(char *, uint64_t))(v224 + 8))(v82, v80);
        v193((uint64_t)v229, (char *)v228, v214);
LABEL_224:
        sub_100099358(v230, (uint64_t *)&unk_100234E10);
        goto LABEL_225;
      }
    }

    else
    {
      uint64_t v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v213 + 56);
      v196(v228, 1LL, 1LL, v214);
    }

    uint64_t v197 = objc_autoreleasePoolPush();
    uint64_t v198 = *v218;
    unint64_t v199 = v218[1];
    sub_1000991CC(*v218, v199);
    sub_100118B60(v198, v199);
    Class v201 = v200;
    sub_100099394(v198, v199);
    sub_1000D5630(v235, v223);
    if (v201)
    {
      uint64_t v202 = v223;
    }

    else
    {
      uint64_t v203 = v223;
      Class v201 = sub_1000A33B8(v223).super.isa;
      uint64_t v202 = v203;
    }

    sub_1000D5674(v202);
    Class v237 = v201;
    sub_1000CEB74((id *)&v237);
    objc_autoreleasePoolPop(v197);
    id v204 = -[objc_class creationDate](v201, "creationDate");

    if (v204)
    {
      uint64_t v205 = v225;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v204);

      uint64_t v206 = *(void (**)(uint64_t, char *, uint64_t))(v213 + 32);
      uint64_t v207 = v226;
      uint64_t v208 = v205;
      uint64_t v209 = v214;
      v206(v226, v208, v214);
      v196(v207, 0LL, 1LL, v209);
      uint64_t v210 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v236)(v207, 1LL, v209);
      if ((_DWORD)v210 != 1)
      {
        (*(void (**)(char *, uint64_t))(v224 + 8))(v82, v80);
        v206((uint64_t)v229, (char *)v226, v214);
LABEL_223:
        sub_100099358(v228, (uint64_t *)&unk_100234E10);
        goto LABEL_224;
      }
    }

    else
    {
      uint64_t v210 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v196)(v226, 1LL, 1LL, v214);
    }

    static Date.now.getter(v210);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v82, v80);
    sub_100099358(v226, (uint64_t *)&unk_100234E10);
    goto LABEL_223;
  }

  uint64_t v234 = v2;
  LODWORD(v232) = 0;
  unsigned int v31 = 0;
LABEL_4:
  uint64_t v32 = v235;
  uint64_t result = sub_10009A498(v227);
  int v34 = (v31 >> 2) & 1;
  int v35 = (v31 >> 3) & 1;
  int v36 = (v31 >> 4) & 1;
  int v37 = (v31 >> 5) & 1;
  int v38 = (v31 >> 6) & 1;
  int v39 = (v31 >> 7) & 1;
  int v239 = (v31 >> 8) & 1;
  LODWORD(v217) = (v31 >> 9) & 1;
  LODWORD(v21_Block_object_dispose(va, 8) = (v31 >> 10) & 1;
  LODWORD(v219) = (v31 >> 11) & 1;
  LODWORD(v220) = (v31 >> 12) & 1;
  LODWORD(v221) = (v31 >> 13) & 1;
  LODWORD(v222) = (v31 >> 14) & 1;
  LODWORD(v223) = (v31 >> 15) & 1;
  LODWORD(v224) = HIWORD(v31) & 1;
  LODWORD(v225) = (v31 >> 17) & 1;
  LODWORD(v226) = (v31 >> 18) & 1;
  if ((v31 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v215 + 8))(v32, v216);
  }
  uint64_t v40 = (int *)v236;
  if ((v31 & 2) == 0)
  {
    LODWORD(v227) = 0;
    LODWORD(v233) = 0;
    LODWORD(v22_Block_object_dispose(va, 8) = 0;
    LODWORD(v229) = 0;
    LODWORD(v230) = 0;
    LODWORD(v231) = 0;
    if ((v31 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }

  LODWORD(v231) = 0;
  LODWORD(v230) = 0;
  LODWORD(v229) = 0;
  LODWORD(v22_Block_object_dispose(va, 8) = 0;
  LODWORD(v233) = 0;
  LODWORD(v227) = 0;
LABEL_33:
  uint64_t result = sub_100099394(*(void *)(v32 + v40[5]), *(void *)(v32 + v40[5] + 8));
  if ((v34 & 1) == 0)
  {
LABEL_8:
    if (v35) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

LABEL_35:
  if (!v36)
  {
LABEL_10:
    if (v37) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

    swift_once(&qword_100234C18, sub_10018A920);
    goto LABEL_31;
  }

  sub_1000A4A64(0LL, &qword_100236590, &OBJC_CLASS___CKModifyRecordsOperation_ptr);
  v71.value._rawValue = (void *)swift_bridgeObjectRetain(a1);
  v71.is_nil = 0;
  unint64_t v33 = (id)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v71, v72);
  int v34 = sub_1000F44D0();
  [v33 setGroup:v34];

  [v33 setCallbackQueue:*(void *)(v5 + 80)];
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
    [v33 setQualityOfService:25];
  }
  uint64_t result = [v33 configuration];
  if (result)
  {
    int v36 = result;
    [result setAutomaticallyRetryNetworkFailures:0];

    uint64_t result = [v33 configuration];
    if (result)
    {
      int v37 = result;
      [result setDiscretionaryNetworkBehavior:0];

      int v38 = (void *)swift_allocObject(&unk_10020DC58, 48LL, 7LL);
      int v39 = v63;
      v38[2] = a1;
      v38[3] = v39;
      v38[4] = a3;
      v38[5] = v5;
      unint64_t v69 = sub_1001129E0;
      Swift::String v70 = v38;
      Swift::String aBlock = (unint64_t)_NSConcreteStackBlock;
      Swift::String v66 = 1107296256LL;
      unint64_t v67 = sub_100107288;
      Class v68 = &unk_10020DC70;
      uint64_t v40 = _Block_copy(&aBlock);
      uint64_t v41 = v70;
      swift_bridgeObjectRetain(a1);
      swift_retain(a3);
      swift_retain(v5);
      swift_release(v41);
      [v33 setModifyRecordsCompletionBlock:v40];
      _Block_release(v40);
      return v33;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

      swift_release(a1);
      return;
    }

    break;
  }

  __break(1u);
LABEL_37:
  __break(1u);
}

LABEL_50:
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[22] + 8));
  if ((v232 & 1) != 0)
  {
LABEL_25:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[23] + 8));
    goto LABEL_52;
  }

LABEL_52:
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[24] + 8));
  if ((v233 & 1) != 0)
  {
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v32 + v40[25] + 8));
    if ((v228 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }

            sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
LABEL_53:
            if (((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4] & 1) != 0
               || (*(_BYTE *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4] & 1) != 0
               || (*(_BYTE *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4] & 1) != 0
               || (*(_BYTE *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4] & 1) != 0
               || (*(_BYTE *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4] & 1) != 0
               || (*(_BYTE *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4] & 1) != 0
               || (*(_BYTE *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4] & 1) != 0
               || (*(_BYTE *)(v57
                            + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                            + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft] == *(_DWORD *)(v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft)))
            {
              uint64_t v43 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
              uint64_t v44 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight + 4];

              if ((v44 & 1) != 0
                || (*(_BYTE *)(v57
                             + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                             + 4) & 1) == 0
                && v43 == *(_DWORD *)(v57
                                    + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight))
              {
                sub_100099358(v56, (uint64_t *)&unk_100234E10);
                unsigned int v31 = 0LL;
LABEL_94:
                sub_100099358(v59, (uint64_t *)&unk_100234E10);
                return v31;
              }

              goto LABEL_92;
            }

void sub_1000CDB38(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v163 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v159 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v160 = (char *)&v152 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v164 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v161 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v152 - v11;
  uint64_t v13 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v165 = *(void *)(v16 - 8);
  uint64_t v166 = v16;
  __chkstk_darwin(v16);
  uint64_t v162 = (char *)&v152 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = CKRecord.recordType.getter(v18);
  uint64_t v21 = v20;
  if (v19 == 0x746553636967614DLL && v20 == 0xED000073676E6974LL)
  {
    swift_bridgeObjectRelease(0xED000073676E6974LL);
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0x746553636967614DLL, 0xED000073676E6974LL, 0LL);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
    {
      unint64_t v44 = sub_1000D56B0();
      uint64_t v45 = swift_allocError(&type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError, v44, 0LL, 0LL);
      *int v46 = 0;
      swift_willThrow(v45);

      return;
    }
  }

  uint64_t v157 = (int *)v8;
  unint64_t v158 = v12;
  id v23 = [a1 encryptedValues];
  Objectint Type = swift_getObjectType(v23);
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v23 objectForKeyedSubscript:v25];

  if (!v26) {
    goto LABEL_9;
  }
  id v168 = v26;
  uint64_t v155 = sub_100098CD8(&qword_100234E40);
  uint64_t v27 = swift_dynamicCast(&v167, &v168, v155, &type metadata for String, 6LL);
  if ((v27 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v154 = v2;
  __int128 v28 = v167;
  id v29 = [a1 recordID];
  id v30 = [v29 recordName];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = v165;
  uint64_t v34 = v166;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v15, 1LL, v166) != 1)
  {
    uint64_t v153 = a1;
    uint64_t v47 = v162;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v162, v15, v34);
    uint64_t v48 = v163;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v163, v47, v34);
    uint64_t v49 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
    *(_OWORD *)(v48 + v49[6]) = v28;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x49746375646F7270LL,  0xE900000000000044LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v50 = *((void *)&v167 + 1);
    uint64_t v51 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v51 = 0LL;
      unint64_t v50 = 0xE000000000000000LL;
    }

    id v52 = (void *)(v48 + v49[13]);
    void *v52 = v51;
    v52[1] = v50;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x4449726F646E6576LL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v53 = *((void *)&v167 + 1);
    uint64_t v54 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v54 = 0LL;
      unint64_t v53 = 0xE000000000000000LL;
    }

    uint64_t v55 = v48;
    uint64_t v56 = (void *)(v48 + v49[14]);
    void *v56 = v54;
    v56[1] = v53;
    NSString v57 = String._bridgeToObjectiveC()();
    id v58 = [v23 objectForKeyedSubscript:v57];

    __int128 v59 = xmmword_1001A7C10;
    uint64_t v60 = v155;
    __int128 v156 = xmmword_1001A7C10;
    if (v58)
    {
      id v168 = v58;
      else {
        __int128 v59 = v156;
      }
    }

    *(_OWORD *)(v48 + v49[8]) = v59;
    NSString v61 = String._bridgeToObjectiveC()();
    id v62 = [v23 objectForKeyedSubscript:v61];

    __int128 v63 = v156;
    uint64_t v64 = v153;
    if (v62)
    {
      id v168 = v62;
      else {
        __int128 v63 = v156;
      }
    }

    *(_OWORD *)(v48 + v49[7]) = v63;
    NSString v65 = String._bridgeToObjectiveC()();
    id v66 = [v23 objectForKeyedSubscript:v65];

    __int128 v67 = v156;
    if (v66)
    {
      id v168 = v66;
      else {
        __int128 v67 = v156;
      }
    }

    *(_OWORD *)(v48 + v49[10]) = v67;
    NSString v68 = String._bridgeToObjectiveC()();
    id v69 = [v23 objectForKeyedSubscript:v68];

    __int128 v70 = v156;
    if (v69)
    {
      id v168 = v69;
      else {
        __int128 v70 = v156;
      }
    }

    *(_OWORD *)(v48 + v49[9]) = v70;
    NSString v71 = String._bridgeToObjectiveC()();
    id v72 = [v23 objectForKeyedSubscript:v71];

    __int128 v73 = v156;
    if (v72)
    {
      id v168 = v72;
      else {
        __int128 v73 = v156;
      }
    }

    *(_OWORD *)(v48 + v49[12]) = v73;
    NSString v74 = String._bridgeToObjectiveC()();
    id v75 = [v23 objectForKeyedSubscript:v74];

    else {
      __int128 v76 = v156;
    }
    *(_OWORD *)(v48 + v49[11]) = v76;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x6F4D6E6F74747562LL,  0xEB00000000736564LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v77 = *((void *)&v167 + 1);
    uint64_t v78 = v167;
    if (!*((void *)&v167 + 1)) {
      uint64_t v78 = 0LL;
    }
    unint64_t v79 = 0xE000000000000000LL;
    if (!*((void *)&v167 + 1)) {
      unint64_t v77 = 0xE000000000000000LL;
    }
    uint64_t v80 = (void *)(v55 + v49[15]);
    *uint64_t v80 = v78;
    v80[1] = v77;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x726F6C6F63LL,  0xE500000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v81 = *((void *)&v167 + 1);
    uint64_t v82 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v82 = 0LL;
      unint64_t v81 = 0xE000000000000000LL;
    }

    uint64_t v83 = (void *)(v55 + v49[16]);
    *uint64_t v83 = v82;
    v83[1] = v81;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000015LL,  0x80000001001CDB80LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v84 = *((void *)&v167 + 1);
    uint64_t v85 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v85 = 0LL;
      unint64_t v84 = 0xE000000000000000LL;
    }

    unint64_t v86 = (void *)(v55 + v49[17]);
    *unint64_t v86 = v85;
    v86[1] = v84;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000015LL,  0x80000001001CDBA0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v87 = *((void *)&v167 + 1);
    uint64_t v88 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v88 = 0LL;
      unint64_t v87 = 0xE000000000000000LL;
    }

    uint64_t v89 = (void *)(v55 + v49[18]);
    *uint64_t v89 = v88;
    v89[1] = v87;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000011LL,  0x80000001001CDBC0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v90 = *((void *)&v167 + 1);
    uint64_t v91 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v91 = 0LL;
      unint64_t v90 = 0xE000000000000000LL;
    }

    unint64_t v92 = (void *)(v55 + v49[19]);
    *unint64_t v92 = v91;
    v92[1] = v90;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000013LL,  0x80000001001CDBE0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v93 = *((void *)&v167 + 1);
    uint64_t v94 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v94 = 0LL;
      unint64_t v93 = 0xE000000000000000LL;
    }

    uint64_t v95 = (void *)(v55 + v49[20]);
    *uint64_t v95 = v94;
    v95[1] = v93;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x416C616974617073LL,  0xEC0000006F696475LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v96 = *((void *)&v167 + 1);
    uint64_t v97 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v97 = 0LL;
      unint64_t v96 = 0xE000000000000000LL;
    }

    unint64_t v98 = (void *)(v55 + v49[21]);
    *unint64_t v98 = v97;
    v98[1] = v96;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000018LL,  0x80000001001CDC00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v99 = *((void *)&v167 + 1);
    uint64_t v100 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v100 = 0LL;
      unint64_t v99 = 0xE000000000000000LL;
    }

    uint64_t v101 = (void *)(v55 + v49[22]);
    void *v101 = v100;
    v101[1] = v99;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000022LL,  0x80000001001CDC20LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v102 = *((void *)&v167 + 1);
    uint64_t v103 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v103 = 0LL;
      unint64_t v102 = 0xE000000000000000LL;
    }

    unint64_t v104 = (void *)(v55 + v49[23]);
    void *v104 = v103;
    v104[1] = v102;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x74656863746172LL,  0xE700000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v105 = *((void *)&v167 + 1);
    uint64_t v106 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v106 = 0LL;
      unint64_t v105 = 0xE000000000000000LL;
    }

    Class v107 = (void *)(v55 + v49[24]);
    *Class v107 = v106;
    v107[1] = v105;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x6465767265736572LL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v108 = *((void *)&v167 + 1);
    uint64_t v109 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v109 = 0LL;
      unint64_t v108 = 0xE000000000000000LL;
    }

    uint64_t v110 = (void *)(v55 + v49[25]);
    *uint64_t v110 = v109;
    v110[1] = v108;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x73676E6974746573LL,  0xEC0000006B73614DLL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v111 = *((void *)&v167 + 1);
    uint64_t v112 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v112 = 0LL;
      unint64_t v111 = 0xE000000000000000LL;
    }

    id v113 = (void *)(v55 + v49[26]);
    *id v113 = v112;
    v113[1] = v111;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0xD000000000000011LL,  0x80000001001CDC50LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v114 = *((void *)&v167 + 1);
    uint64_t v115 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v115 = 0LL;
      unint64_t v114 = 0xE000000000000000LL;
    }

    unint64_t v116 = (void *)(v55 + v49[27]);
    *unint64_t v116 = v115;
    v116[1] = v114;
    CKRecordKeyValueSetting.subscript.getter( &v167,  0x6E6F6973726576LL,  0xE700000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v117 = *((void *)&v167 + 1);
    uint64_t v118 = v167;
    if (!*((void *)&v167 + 1))
    {
      uint64_t v118 = 0LL;
      unint64_t v117 = 0xE000000000000000LL;
    }

    id v119 = (void *)(v55 + v49[28]);
    *id v119 = v118;
    v119[1] = v117;
    id v120 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
    [v64 encodeSystemFieldsWithCoder:v120];
    [v120 finishEncoding];
    id v121 = [v120 encodedData];
    uint64_t v122 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v124 = v123;

    id v125 = (uint64_t *)(v55 + v49[5]);
    *id v125 = v122;
    v125[1] = v124;
    id v126 = [v64 valuesByKey];
    NSString v127 = String._bridgeToObjectiveC()();
    id v128 = [v126 objectForKeyedSubscript:v127];
    swift_unknownObjectRelease(v126);

    if (v128)
    {
      uint64_t v129 = objc_opt_self(&OBJC_CLASS___CKReference);
      unint64_t v130 = (void *)swift_dynamicCastObjCClass(v128, v129);
      if (v130)
      {
        id v131 = [v130 recordID];
        id v132 = [v131 recordName];

        uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
        unint64_t v79 = v134;
        swift_unknownObjectRelease(v128);

        goto LABEL_76;
      }

      swift_unknownObjectRelease(v128);
    }

    uint64_t v133 = 0LL;
LABEL_76:
    uint64_t v135 = (uint64_t *)(v55 + v49[29]);
    *uint64_t v135 = v133;
    v135[1] = v79;
    id v136 = [v64 modificationDate];
    uint64_t v137 = (uint64_t)v160;
    if (v136)
    {
      uint64_t v138 = v136;
      uint64_t v139 = v161;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v136);

      uint64_t v140 = v164;
      uint64_t v141 = *(void (**)(uint64_t, char *, int *))(v164 + 32);
      unint64_t v142 = v157;
      v141(v137, v139, v157);
      id v143 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v140 + 56);
      v143(v137, 0LL, 1LL, v142);
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v140 + 48))(v137, 1LL, v142) != 1)
      {
        swift_unknownObjectRelease(v23);

        (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v166);
        v141((uint64_t)v158, (char *)v137, v142);
LABEL_86:
        v141(v163 + v49[30], v158, v142);
        return;
      }
    }

    else
    {
      id v143 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v164 + 56);
      unint64_t v142 = v157;
      v143((uint64_t)v160, 1LL, 1LL, v157);
    }

    id v144 = [v64 creationDate];
    if (v144)
    {
      uint64_t v145 = v144;
      uint64_t v157 = v49;
      uint64_t v146 = v137;
      uint64_t v147 = v161;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v144);

      uint64_t v148 = v164;
      uint64_t v149 = (uint64_t)v159;
      uint64_t v150 = v147;
      uint64_t v137 = v146;
      uint64_t v49 = v157;
      uint64_t v161 = *(char **)(v164 + 32);
      ((void (*)(char *, char *, int *))v161)(v159, v150, v142);
      v143(v149, 0LL, 1LL, v142);
      uint64_t v151 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v148 + 48))(v149, 1LL, v142);
      if ((_DWORD)v151 != 1)
      {
        swift_unknownObjectRelease(v23);

        (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v166);
        ((void (*)(char *, uint64_t, int *))v161)(v158, v149, v142);
LABEL_85:
        sub_100099358(v137, (uint64_t *)&unk_100234E10);
        uint64_t v141 = *(void (**)(uint64_t, char *, int *))(v164 + 32);
        goto LABEL_86;
      }
    }

    else
    {
      uint64_t v149 = (uint64_t)v159;
      uint64_t v151 = ((uint64_t (*)(char *, uint64_t, uint64_t, int *))v143)(v159, 1LL, 1LL, v142);
    }

    static Date.now.getter(v151);
    swift_unknownObjectRelease(v23);

    (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v166);
    sub_100099358(v149, (uint64_t *)&unk_100234E10);
    goto LABEL_85;
  }

  swift_bridgeObjectRelease(*((void *)&v28 + 1));
  uint64_t v27 = sub_100099358((uint64_t)v15, &qword_100234E20);
LABEL_9:
  uint64_t v36 = static os_log_type_t.error.getter(v27);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v37 = qword_10023DFC8;
  uint64_t v38 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
  *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v39 + 56) = sub_10009931C();
  *(void *)(v39 + 64) = sub_100098C98( (unint64_t *)&qword_1002352D0,  (uint64_t (*)(uint64_t))sub_10009931C,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v39 + 32) = a1;
  id v40 = a1;
  os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  v37,  "Invalid MagicPairingSettingsRecord Record - %@",  46LL,  2LL,  v39);
  swift_bridgeObjectRelease(v39);
  unint64_t v41 = sub_1000D56B0();
  uint64_t v42 = swift_allocError(&type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError, v41, 0LL, 0LL);
  *uint64_t v43 = 2;
  swift_willThrow(v42);
  swift_unknownObjectRelease(v23);
}

uint64_t sub_1000CEB74(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v5 = qword_10023DFC8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v8 = *a1;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10009914C();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating magic settings record: %@", 34LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  id v13 = [v8 encryptedValues];
  Objectint Type = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000010LL,  0x80000001001CAB00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v15 = v141;
  unint64_t v16 = v142;
  uint64_t v139 = v2;
  uint64_t v140 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v17 = (uint64_t *)(v2 + v140[6]);
  uint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  if (!v16) {
    goto LABEL_8;
  }
  if (v15 == v19 && v16 == v18)
  {
    swift_bridgeObjectRelease(v16);
    goto LABEL_9;
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v17[1], 0LL);
  swift_bridgeObjectRelease(v16);
  if ((v20 & 1) == 0)
  {
LABEL_8:
    id v143 = &type metadata for String;
    id v144 = &protocol witness table for String;
    uint64_t v141 = v19;
    unint64_t v142 = v18;
    swift_bridgeObjectRetain(v18);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000010LL, 0x80000001001CAB00LL, ObjectType);
  }

LABEL_62:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x6974707972636E65LL,  0xED000079654B6E6FLL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v79 = v141;
  unint64_t v80 = v142;
  unint64_t v81 = (uint64_t *)(v139 + v140[12]);
  uint64_t v82 = *v81;
  unint64_t v83 = v81[1];
  sub_1000991CC(*v81, v83);
  if (v80 >> 60 == 15)
  {
    sub_1000AC4C0(v79, v80);
    sub_1000AC4C0(v82, v83);
  }

  else
  {
    sub_1000AC4D4(v79, v80);
    sub_1000D53B8(v79, v80);
    char v85 = v84;
    sub_100099394(v82, v83);
    sub_1000AC4C0(v79, v80);
    sub_1000AC4C0(v79, v80);
    if ((v85 & 1) != 0) {
      goto LABEL_66;
    }
  }

  id v143 = &type metadata for Data;
  id v144 = &protocol witness table for Data;
  uint64_t v141 = v82;
  unint64_t v142 = v83;
  sub_1000991CC(v82, v83);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x6974707972636E65LL, 0xED000079654B6E6FLL, ObjectType);
LABEL_66:
  CKRecordKeyValueSetting.subscript.getter( &v141,  7041641LL,  0xE300000000000000LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v86 = v141;
  unint64_t v87 = v142;
  uint64_t v88 = (uint64_t *)(v139 + v140[11]);
  uint64_t v89 = *v88;
  unint64_t v90 = v88[1];
  sub_1000991CC(*v88, v90);
  if (v87 >> 60 == 15)
  {
    sub_1000AC4C0(v86, v87);
    sub_1000AC4C0(v89, v90);
LABEL_69:
    id v143 = &type metadata for Data;
    id v144 = &protocol witness table for Data;
    uint64_t v141 = v89;
    unint64_t v142 = v90;
    sub_1000991CC(v89, v90);
    CKRecordKeyValueSetting.subscript.setter(&v141, 7041641LL, 0xE300000000000000LL, ObjectType);
    goto LABEL_70;
  }

  sub_1000AC4D4(v86, v87);
  sub_1000D53B8(v86, v87);
  char v92 = v91;
  sub_100099394(v89, v90);
  sub_1000AC4C0(v86, v87);
  sub_1000AC4C0(v86, v87);
  if ((v92 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_70:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000011LL,  0x80000001001CDBC0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unint64_t v93 = v142;
  uint64_t v94 = (uint64_t *)(v139 + v140[19]);
  uint64_t v96 = *v94;
  unint64_t v95 = v94[1];
  if (!v142) {
    goto LABEL_75;
  }
  if (v141 == v96 && v142 == v95)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_76;
  }

  char v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v94, v94[1], 0LL);
  swift_bridgeObjectRelease(v93);
  if ((v97 & 1) == 0)
  {
LABEL_75:
    id v143 = &type metadata for String;
    id v144 = &protocol witness table for String;
    uint64_t v141 = v96;
    unint64_t v142 = v95;
    swift_bridgeObjectRetain(v95);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000011LL, 0x80000001001CDBC0LL, ObjectType);
  }

    sub_1000D5630(v150, v186);
    uint64_t v164 = v549;
    uint64_t v149 = v165;
    uint64_t v10 = v539;
    goto LABEL_63;
  }

  uint64_t v174 = v173;
  uint64_t v175 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v177 = v176;

  unint64_t v178 = (uint64_t *)(v171 + v546[7]);
  uint64_t v179 = *v178;
  uint64_t v180 = v178[1];
  uint64_t v162 = (uint64_t)v537;
  if (v177 >> 60 == 15) {
    goto LABEL_165;
  }
  sub_1000991CC(v179, v180);
  sub_1000AC4D4(v175, v177);
  sub_1000D53B8(v175, v177);
  uint64_t v182 = v181;
  sub_100099394(v179, v180);
  sub_1000D5674(v171);
  sub_1000D5674(v548);
  sub_1000AC4C0(v175, v177);
  sub_1000AC4C0(v175, v177);
  uint64_t v183 = v547;
  sub_1000D5630(v150, v547);
  uint64_t v164 = v549;
  Swift::String v184 = (uint64_t)v541;
  unint64_t v185 = v545;
  uint64_t v149 = v165;
  uint64_t v10 = v539;
  if ((v182 & 1) == 0) {
    goto LABEL_112;
  }
LABEL_63:
  Swift::String v187 = v10;
  uint64_t v188 = v149;
  uint64_t v189 = [v164 masterHint];
  if (!v189)
  {
    uint64_t v194 = v547;
    uint64_t v195 = v535;
    sub_1000D5630(v547, v535);
    goto LABEL_70;
  }

  id v190 = v189;
  Swift::String v191 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v193 = v192;

  sub_100099394(v191, v193);
  uint64_t v194 = v547;
  uint64_t v195 = v535;
  sub_1000D5630(v547, v535);
  if (v193 >> 60 == 15)
  {
LABEL_70:
    sub_1000D5674(v195);
    sub_1000D5674(v194);
LABEL_71:
    sub_1000D5630(v150, v545);
    uint64_t v149 = v188;
    goto LABEL_72;
  }

  uint64_t v196 = [v164 masterHint];
  if (!v196)
  {
    uint64_t v198 = 0LL;
    v310 = (uint64_t *)(v195 + v546[8]);
    uint64_t v202 = *v310;
    uint64_t v203 = v310[1];
    unint64_t v200 = 0xF000000000000000LL;
LABEL_168:
    v311 = v547;
    sub_1000991CC(v202, v203);
    sub_1000D5674(v195);
    sub_1000D5674(v311);
    sub_1000AC4C0(v198, v200);
    if (v203 >> 60 != 15)
    {
      sub_1000AC4C0(v202, v203);
      Swift::String v184 = (uint64_t)v541;
      unint64_t v185 = v545;
      uint64_t v149 = v188;
      uint64_t v10 = v187;
      uint64_t v162 = (uint64_t)v537;
      goto LABEL_113;
    }

    goto LABEL_71;
  }

  uint64_t v197 = v196;
  uint64_t v198 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v200 = v199;

  Class v201 = (uint64_t *)(v195 + v546[8]);
  uint64_t v202 = *v201;
  uint64_t v203 = v201[1];
  if (v200 >> 60 == 15) {
    goto LABEL_168;
  }
  sub_1000991CC(v202, v203);
  sub_1000AC4D4(v198, v200);
  sub_1000D53B8(v198, v200);
  uint64_t v205 = v204;
  sub_100099394(v202, v203);
  sub_1000D5674(v195);
  sub_1000D5674(v547);
  sub_1000AC4C0(v198, v200);
  sub_1000AC4C0(v198, v200);
  unint64_t v185 = v545;
  sub_1000D5630(v150, v545);
  Swift::String v184 = (uint64_t)v541;
  uint64_t v149 = v188;
  uint64_t v10 = v187;
  uint64_t v162 = (uint64_t)v537;
  if ((v205 & 1) == 0) {
    goto LABEL_114;
  }
LABEL_72:
  uint64_t v206 = v149;
  uint64_t v207 = [v164 accessoryKey];
  if (!v207)
  {
    uint64_t v212 = v545;
    uint64_t v213 = v532;
    sub_1000D5630(v545, v532);
    uint64_t v214 = (uint64_t)v533;
    goto LABEL_79;
  }

  uint64_t v208 = v207;
  uint64_t v209 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v211 = v210;

  sub_100099394(v209, v211);
  uint64_t v212 = v545;
  uint64_t v213 = v532;
  sub_1000D5630(v545, v532);
  uint64_t v214 = (uint64_t)v533;
  if (v211 >> 60 == 15)
  {
LABEL_79:
    sub_1000D5674(v213);
    sub_1000D5674(v212);
    uint64_t v226 = v544;
LABEL_80:
    sub_1000D5630(v150, v226);
    uint64_t v149 = v206;
    uint64_t v10 = v539;
    goto LABEL_81;
  }

  uint64_t v215 = [v164 accessoryKey];
  if (!v215)
  {
    uint64_t v217 = 0LL;
    v329 = (uint64_t *)(v213 + v546[9]);
    uint64_t v221 = *v329;
    uint64_t v222 = v329[1];
    unint64_t v219 = 0xF000000000000000LL;
LABEL_180:
    uint64_t v226 = v544;
    sub_1000991CC(v221, v222);
    sub_1000D5674(v213);
    sub_1000D5674(v545);
    sub_1000AC4C0(v217, v219);
    if (v222 >> 60 != 15)
    {
      sub_1000AC4C0(v221, v222);
      uint64_t v162 = (uint64_t)v537;
      Swift::String v184 = (uint64_t)v541;
      uint64_t v149 = v206;
      uint64_t v10 = v539;
      goto LABEL_115;
    }

    goto LABEL_80;
  }

  uint64_t v216 = v215;
  uint64_t v217 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v219 = v218;

  uint64_t v220 = (uint64_t *)(v213 + v546[9]);
  uint64_t v221 = *v220;
  uint64_t v222 = v220[1];
  if (v219 >> 60 == 15) {
    goto LABEL_180;
  }
  sub_1000991CC(v221, v222);
  sub_1000AC4D4(v217, v219);
  sub_1000D53B8(v217, v219);
  uint64_t v224 = v223;
  sub_100099394(v221, v222);
  sub_1000D5674(v213);
  sub_1000D5674(v545);
  sub_1000AC4C0(v217, v219);
  sub_1000AC4C0(v217, v219);
  Swift::String v225 = v544;
  sub_1000D5630(v150, v544);
  uint64_t v162 = (uint64_t)v537;
  Swift::String v184 = (uint64_t)v541;
  uint64_t v149 = v206;
  uint64_t v10 = v539;
  if ((v224 & 1) == 0) {
    goto LABEL_116;
  }
LABEL_81:
  uint64_t v227 = [v164 accessoryHint];
  if (!v227)
  {
    uint64_t v232 = v544;
    sub_1000D5630(v544, v214);
    goto LABEL_89;
  }

  uint64_t v228 = v227;
  uint64_t v229 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v231 = v230;

  sub_100099394(v229, v231);
  uint64_t v232 = v544;
  sub_1000D5630(v544, v214);
  if (v231 >> 60 == 15)
  {
LABEL_89:
    sub_1000D5674(v214);
    sub_1000D5674(v232);
    Swift::String v245 = v543;
LABEL_90:
    sub_1000D5630(v150, v245);
    uint64_t v162 = (uint64_t)v537;
    Swift::String v184 = (uint64_t)v541;
    goto LABEL_91;
  }

  unint64_t v233 = [v164 accessoryHint];
  if (!v233)
  {
    uint64_t v235 = 0LL;
    v350 = (uint64_t *)(v214 + v546[10]);
    int v239 = *v350;
    char v240 = v350[1];
    Class v237 = 0xF000000000000000LL;
LABEL_193:
    Swift::String v245 = v543;
    sub_1000991CC(v239, v240);
    sub_1000D5674(v214);
    sub_1000D5674(v544);
    sub_1000AC4C0(v235, v237);
    if (v240 >> 60 != 15)
    {
      sub_1000AC4C0(v239, v240);
      uint64_t v162 = (uint64_t)v537;
      Swift::String v184 = (uint64_t)v541;
      goto LABEL_117;
    }

    goto LABEL_90;
  }

  uint64_t v234 = v233;
  uint64_t v235 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  Class v237 = v236;

  unint64_t v238 = (uint64_t *)(v214 + v546[10]);
  int v239 = *v238;
  char v240 = v238[1];
  if (v237 >> 60 == 15) {
    goto LABEL_193;
  }
  sub_1000991CC(v239, v240);
  sub_1000AC4D4(v235, v237);
  sub_1000D53B8(v235, v237);
  Swift::String v242 = v241;
  sub_100099394(v239, v240);
  sub_1000D5674(v214);
  sub_1000D5674(v544);
  sub_1000AC4C0(v235, v237);
  sub_1000AC4C0(v235, v237);
  uint64_t v243 = v543;
  sub_1000D5630(v150, v543);
  uint64_t v162 = (uint64_t)v537;
  uint64_t v244 = (uint64_t)v538;
  Swift::String v184 = (uint64_t)v541;
  if ((v242 & 1) == 0) {
    goto LABEL_118;
  }
LABEL_91:
  uint64_t v246 = v10;
  Swift::String v247 = v149;
  int v248 = [v164 buttonModes];
  if (!v248)
  {
    uint64_t v252 = v543;
    uint64_t v253 = v530;
    sub_1000D5630(v543, v530);
    goto LABEL_100;
  }

  v249 = v248;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
  unint64_t v251 = v250;

  swift_bridgeObjectRelease(v251);
  uint64_t v252 = v543;
  uint64_t v253 = v530;
  sub_1000D5630(v543, v530);
  if (!v251)
  {
LABEL_100:
    sub_1000D5674(v253);
    sub_1000D5674(v252);
    uint64_t v149 = v247;
    goto LABEL_101;
  }

  uint64_t v254 = [v164 buttonModes];
  if (!v254)
  {
    v348 = v530;
    v349 = *(void *)(v530 + v546[15] + 8);
    swift_bridgeObjectRetain(v349);
    sub_1000D5674(v348);
    sub_1000D5674(v543);
    swift_bridgeObjectRelease(v349);
    uint64_t v149 = v247;
    uint64_t v10 = v246;
    uint64_t v244 = (uint64_t)v538;
    goto LABEL_119;
  }

  uint64_t v255 = v254;
  uint64_t v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
  v258 = v257;

  uint64_t v259 = v530;
  uint64_t v260 = (void *)(v530 + v546[15]);
  uint64_t v261 = v260[1];
  uint64_t v149 = v247;
  if (v256 == *v260 && v258 == v261)
  {
    swift_bridgeObjectRetain(v258);
    sub_1000D5674(v259);
    sub_1000D5674(v543);
    swift_bridgeObjectRelease_n(v258, 2LL);
LABEL_101:
    uint64_t v10 = v246;
    sub_1000D5630(v150, v184);
    uint64_t v244 = (uint64_t)v538;
    goto LABEL_102;
  }

  v353 = _stringCompareWithSmolCheck(_:_:expecting:)(v256, v258, *v260, v261, 0LL);
  v354 = v259;
  v355 = v353;
  swift_bridgeObjectRetain(v258);
  sub_1000D5674(v354);
  sub_1000D5674(v543);
  swift_bridgeObjectRelease_n(v258, 2LL);
  sub_1000D5630(v150, v184);
  uint64_t v10 = v246;
  uint64_t v244 = (uint64_t)v538;
  if ((v355 & 1) == 0) {
    goto LABEL_120;
  }
LABEL_102:
  uint64_t v263 = [v164 color];
  if (!v263)
  {
    v267 = v526;
    sub_1000D5630(v184, v526);
    goto LABEL_147;
  }

  uint64_t v264 = v263;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
  id v266 = v265;

  swift_bridgeObjectRelease(v266);
  v267 = v526;
  sub_1000D5630(v184, v526);
  if (!v266)
  {
LABEL_147:
    sub_1000D5674(v267);
    sub_1000D5674(v184);
    goto LABEL_148;
  }

  uint64_t v268 = [v164 color];
  if (!v268)
  {
    v356 = v267;
    v357 = *(void *)(v267 + v546[16] + 8);
    swift_bridgeObjectRetain(v357);
    sub_1000D5674(v356);
    sub_1000D5674(v184);
    swift_bridgeObjectRelease(v357);
    goto LABEL_121;
  }

  v269 = v268;
  v549 = v149;
  v270 = static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
  unint64_t v272 = v271;

  unint64_t v273 = (void *)(v267 + v546[16]);
  __int128 v274 = v273[1];
  if (v270 == *v273 && v272 == v274)
  {
    swift_bridgeObjectRetain(v272);
    sub_1000D5674(v526);
    sub_1000D5674(v184);
    swift_bridgeObjectRelease_n(v272, 2LL);
    uint64_t v149 = v549;
LABEL_148:
    sub_1000D5630(v150, v162);
    goto LABEL_149;
  }

  v358 = _stringCompareWithSmolCheck(_:_:expecting:)(v270, v272, *v273, v274, 0LL);
  swift_bridgeObjectRetain(v272);
  sub_1000D5674(v526);
  sub_1000D5674(v184);
  swift_bridgeObjectRelease_n(v272, 2LL);
  sub_1000D5630(v150, v162);
  uint64_t v149 = v549;
  if ((v358 & 1) == 0) {
    goto LABEL_122;
  }
LABEL_149:
  v285 = [v164 deviceIDFeatureBitsV1];
  if (!v285)
  {
    v289 = v525;
    sub_1000D5630(v162, v525);
    goto LABEL_156;
  }

  v286 = v285;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v285);
  v288 = v287;

  swift_bridgeObjectRelease(v288);
  v289 = v525;
  sub_1000D5630(v162, v525);
  if (!v288)
  {
LABEL_156:
    sub_1000D5674(v289);
    sub_1000D5674(v162);
    goto LABEL_157;
  }

  v290 = [v164 deviceIDFeatureBitsV1];
  if (!v290)
  {
    v359 = v289;
    v360 = *(void *)(v289 + v546[17] + 8);
    swift_bridgeObjectRetain(v360);
    sub_1000D5674(v359);
    sub_1000D5674(v162);
    swift_bridgeObjectRelease(v360);
    goto LABEL_123;
  }

  v291 = v290;
  v292 = static String._unconditionallyBridgeFromObjectiveC(_:)(v290);
  v294 = v293;

  v295 = (void *)(v289 + v546[17]);
  v296 = v295[1];
  if (v292 == *v295 && v294 == v296)
  {
    swift_bridgeObjectRetain(v294);
    sub_1000D5674(v525);
    sub_1000D5674(v162);
    swift_bridgeObjectRelease_n(v294, 2LL);
LABEL_157:
    sub_1000D5630(v150, v244);
    v297 = (uint64_t)v524;
    goto LABEL_158;
  }

  v361 = _stringCompareWithSmolCheck(_:_:expecting:)(v292, v294, *v295, v296, 0LL);
  swift_bridgeObjectRetain(v294);
  sub_1000D5674(v525);
  sub_1000D5674(v162);
  swift_bridgeObjectRelease_n(v294, 2LL);
  sub_1000D5630(v150, v244);
  v297 = (uint64_t)v524;
  if ((v361 & 1) == 0) {
    goto LABEL_124;
  }
LABEL_158:
  v298 = [v164 deviceIDFeatureBitsV2];
  if (!v298)
  {
    sub_1000D5630(v244, v297);
    goto LABEL_171;
  }

  v299 = v298;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v298);
  v301 = v300;

  swift_bridgeObjectRelease(v301);
  sub_1000D5630(v244, v297);
  if (!v301)
  {
LABEL_171:
    sub_1000D5674(v297);
    sub_1000D5674(v244);
    goto LABEL_172;
  }

  v302 = [v164 deviceIDFeatureBitsV2];
  if (!v302)
  {
    v362 = *(void *)(v297 + v546[18] + 8);
    swift_bridgeObjectRetain(v362);
    sub_1000D5674(v297);
    sub_1000D5674(v244);
    swift_bridgeObjectRelease(v362);
    goto LABEL_125;
  }

  v303 = v302;
  v304 = static String._unconditionallyBridgeFromObjectiveC(_:)(v302);
  v306 = v305;

  v307 = (void *)(v297 + v546[18]);
  v308 = v307[1];
  if (v304 == *v307 && v306 == v308)
  {
    swift_bridgeObjectRetain(v306);
    sub_1000D5674(v297);
    sub_1000D5674(v244);
    swift_bridgeObjectRelease_n(v306, 2LL);
LABEL_172:
    sub_1000D5630(v150, v542);
    v312 = (uint64_t)v522;
    goto LABEL_173;
  }

  v363 = _stringCompareWithSmolCheck(_:_:expecting:)(v304, v306, *v307, v308, 0LL);
  swift_bridgeObjectRetain(v306);
  sub_1000D5674(v297);
  sub_1000D5674(v244);
  swift_bridgeObjectRelease_n(v306, 2LL);
  uint64_t v276 = v542;
  sub_1000D5630(v150, v542);
  v312 = (uint64_t)v522;
  if ((v363 & 1) == 0) {
    goto LABEL_126;
  }
LABEL_173:
  v313 = [v164 encryptionKey];
  if (!v313)
  {
    v318 = v542;
    sub_1000D5630(v542, v312);
    goto LABEL_183;
  }

  v314 = v313;
  v315 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v317 = v316;

  sub_100099394(v315, v317);
  v318 = v542;
  sub_1000D5630(v542, v312);
  if (v317 >> 60 == 15)
  {
LABEL_183:
    sub_1000D5674(v312);
    sub_1000D5674(v318);
LABEL_184:
    sub_1000D5630(v150, v540);
    goto LABEL_185;
  }

  v319 = [v164 encryptionKey];
  if (!v319)
  {
    v321 = 0LL;
    v364 = (uint64_t *)(v312 + v546[12]);
    v325 = *v364;
    v326 = v364[1];
    v323 = 0xF000000000000000LL;
LABEL_213:
    v365 = v542;
    sub_1000991CC(v325, v326);
    sub_1000D5674(v312);
    sub_1000D5674(v365);
    sub_1000AC4C0(v321, v323);
    if (v326 >> 60 != 15)
    {
      sub_1000AC4C0(v325, v326);
      goto LABEL_127;
    }

    goto LABEL_184;
  }

  v320 = v319;
  v321 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v323 = v322;

  v324 = (uint64_t *)(v312 + v546[12]);
  v325 = *v324;
  v326 = v324[1];
  if (v323 >> 60 == 15) {
    goto LABEL_213;
  }
  sub_1000991CC(v325, v326);
  sub_1000AC4D4(v321, v323);
  sub_1000D53B8(v321, v323);
  v328 = v327;
  sub_100099394(v325, v326);
  sub_1000D5674(v312);
  sub_1000D5674(v542);
  sub_1000AC4C0(v321, v323);
  sub_1000AC4C0(v321, v323);
  uint64_t v277 = v540;
  sub_1000D5630(v150, v540);
  if ((v328 & 1) == 0) {
    goto LABEL_128;
  }
LABEL_185:
  v330 = [v164 irk];
  if (!v330)
  {
    v335 = v540;
    v336 = v523;
    sub_1000D5630(v540, v523);
    goto LABEL_196;
  }

  v331 = v330;
  v332 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v334 = v333;

  sub_100099394(v332, v334);
  v335 = v540;
  v336 = v523;
  sub_1000D5630(v540, v523);
  if (v334 >> 60 == 15)
  {
LABEL_196:
    sub_1000D5674(v336);
    sub_1000D5674(v335);
    goto LABEL_197;
  }

  v337 = [v164 irk];
  if (!v337)
  {
    v339 = 0LL;
    v342 = v523;
    v407 = (uint64_t *)(v523 + v546[11]);
    v344 = *v407;
    v345 = v407[1];
    v341 = 0xF000000000000000LL;
LABEL_241:
    sub_1000991CC(v344, v345);
    sub_1000D5674(v342);
    sub_1000D5674(v540);
    sub_1000AC4C0(v339, v341);
    if (v345 >> 60 != 15)
    {
      sub_1000AC4C0(v344, v345);
      goto LABEL_129;
    }

    goto LABEL_197;
  }

  v338 = v337;
  v339 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v341 = v340;

  v342 = v523;
  v343 = (uint64_t *)(v523 + v546[11]);
  v344 = *v343;
  v345 = v343[1];
  if (v341 >> 60 == 15) {
    goto LABEL_241;
  }
  sub_1000991CC(v344, v345);
  sub_1000AC4D4(v339, v341);
  sub_1000D53B8(v339, v341);
  v347 = v346;
  sub_100099394(v344, v345);
  sub_1000D5674(v342);
  sub_1000D5674(v540);
  sub_1000AC4C0(v339, v341);
  sub_1000AC4C0(v339, v341);
  if ((v347 & 1) == 0) {
    goto LABEL_129;
  }
LABEL_197:
  v351 = [v164 listeningServices];
  if (v351 || (v351 = [v164 listeningServicesV2]) != 0)
  {

    __int128 v278 = (uint64_t)v529;
    sub_1000D5630(v150, (uint64_t)v529);
    v352 = v546;
    if ((v520 & 1) != 0) {
      goto LABEL_130;
    }
  }

  else
  {
    __int128 v278 = (uint64_t)v529;
    sub_1000D5630(v150, (uint64_t)v529);
    v352 = v546;
  }

  v366 = [v164 spatialAudio];
  if (!v366)
  {
    v370 = v521;
    sub_1000D5630(v278, v521);
    goto LABEL_223;
  }

  v367 = v366;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v366);
  v369 = v368;

  swift_bridgeObjectRelease(v369);
  v370 = v521;
  sub_1000D5630(v278, v521);
  if (!v369)
  {
LABEL_223:
    sub_1000D5674(v370);
    sub_1000D5674(v278);
    goto LABEL_224;
  }

  v371 = [v164 spatialAudio];
  if (!v371)
  {
    v444 = v370;
    v445 = *(void *)(v370 + v352[21] + 8);
    swift_bridgeObjectRetain(v445);
    sub_1000D5674(v444);
    sub_1000D5674((uint64_t)v529);
    swift_bridgeObjectRelease(v445);
    goto LABEL_131;
  }

  v372 = v371;
  v373 = static String._unconditionallyBridgeFromObjectiveC(_:)(v371);
  v374 = v370;
  v376 = v375;

  v377 = (void *)(v374 + v352[21]);
  v378 = v377[1];
  if (v373 == *v377 && v376 == v378)
  {
    swift_bridgeObjectRetain(v376);
    sub_1000D5674(v521);
    sub_1000D5674((uint64_t)v529);
    swift_bridgeObjectRelease_n(v376, 2LL);
LABEL_224:
    sub_1000D5630(v150, v534);
    goto LABEL_225;
  }

  v446 = _stringCompareWithSmolCheck(_:_:expecting:)(v373, v376, *v377, v378, 0LL);
  swift_bridgeObjectRetain(v376);
  sub_1000D5674(v521);
  sub_1000D5674((uint64_t)v529);
  swift_bridgeObjectRelease_n(v376, 2LL);
  uint64_t v279 = v534;
  sub_1000D5630(v150, v534);
  if ((v446 & 1) == 0) {
    goto LABEL_132;
  }
LABEL_225:
  v379 = [v164 optimizedBatteryCharging];
  if (!v379)
  {
    v383 = v534;
    v384 = (uint64_t)v519;
    sub_1000D5630(v534, (uint64_t)v519);
    goto LABEL_232;
  }

  v380 = v379;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v379);
  v382 = v381;

  swift_bridgeObjectRelease(v382);
  v383 = v534;
  v384 = (uint64_t)v519;
  sub_1000D5630(v534, (uint64_t)v519);
  if (!v382)
  {
LABEL_232:
    sub_1000D5674(v384);
    sub_1000D5674(v383);
    goto LABEL_233;
  }

  v385 = [v164 optimizedBatteryCharging];
  if (!v385)
  {
    v447 = (uint64_t)v519;
    v448 = *(void *)&v519[v352[22] + 8];
    swift_bridgeObjectRetain(v448);
    sub_1000D5674(v447);
    sub_1000D5674(v534);
    swift_bridgeObjectRelease(v448);
    goto LABEL_133;
  }

  v386 = v385;
  v387 = static String._unconditionallyBridgeFromObjectiveC(_:)(v385);
  v389 = v388;

  v390 = &v519[v352[22]];
  v391 = *((void *)v390 + 1);
  if (v387 == *(void *)v390 && v389 == v391)
  {
    swift_bridgeObjectRetain(v389);
    sub_1000D5674((uint64_t)v519);
    sub_1000D5674(v534);
    swift_bridgeObjectRelease_n(v389, 2LL);
LABEL_233:
    sub_1000D5630(v150, v531);
    goto LABEL_234;
  }

  v502 = _stringCompareWithSmolCheck(_:_:expecting:)(v387, v389, *(void *)v390, v391, 0LL);
  swift_bridgeObjectRetain(v389);
  sub_1000D5674((uint64_t)v519);
  sub_1000D5674(v534);
  swift_bridgeObjectRelease_n(v389, 2LL);
  Swift::String v280 = v531;
  sub_1000D5630(v150, v531);
  if ((v502 & 1) == 0) {
    goto LABEL_134;
  }
LABEL_234:
  v392 = [v164 optimizedBatteryFullChargeDeadline];
  if (!v392)
  {
    v396 = v531;
    v397 = v518;
    sub_1000D5630(v531, v518);
    goto LABEL_244;
  }

  v393 = v392;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v392);
  v395 = v394;

  swift_bridgeObjectRelease(v395);
  v396 = v531;
  v397 = v518;
  sub_1000D5630(v531, v518);
  if (!v395)
  {
LABEL_244:
    sub_1000D5674(v397);
    sub_1000D5674(v396);
    goto LABEL_245;
  }

  v398 = [v164 optimizedBatteryFullChargeDeadline];
  if (!v398)
  {
    v503 = v518;
    v504 = *(void *)(v518 + v352[23] + 8);
    swift_bridgeObjectRetain(v504);
    sub_1000D5674(v503);
    sub_1000D5674(v531);
    swift_bridgeObjectRelease(v504);
    goto LABEL_135;
  }

  v399 = v398;
  v400 = static String._unconditionallyBridgeFromObjectiveC(_:)(v398);
  v402 = v401;

  v403 = v352[23];
  v404 = v518;
  v405 = (void *)(v518 + v403);
  v406 = v405[1];
  if (v400 == *v405 && v402 == v406)
  {
    swift_bridgeObjectRetain(v402);
    sub_1000D5674(v404);
    sub_1000D5674(v531);
    swift_bridgeObjectRelease_n(v402, 2LL);
LABEL_245:
    v281 = v528;
    sub_1000D5630(v150, v528);
    goto LABEL_246;
  }

  v505 = _stringCompareWithSmolCheck(_:_:expecting:)(v400, v402, *v405, v406, 0LL);
  swift_bridgeObjectRetain(v402);
  sub_1000D5674(v404);
  sub_1000D5674(v531);
  swift_bridgeObjectRelease_n(v402, 2LL);
  v281 = v528;
  sub_1000D5630(v150, v528);
  if ((v505 & 1) == 0) {
    goto LABEL_136;
  }
LABEL_246:
  v408 = [v164 ratchet];
  if (!v408)
  {
    v412 = v517;
    sub_1000D5630(v281, v517);
    v413 = v281;
    v282 = v527;
    goto LABEL_261;
  }

  v409 = v408;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v408);
  v411 = v410;

  swift_bridgeObjectRelease(v411);
  v412 = v517;
  sub_1000D5630(v281, v517);
  v413 = v281;
  v282 = v527;
  if (!v411)
  {
LABEL_261:
    sub_1000D5674(v412);
    v443 = v413;
LABEL_267:
    sub_1000D5674(v443);
LABEL_268:
    sub_1000D5630(v150, v282);
    goto LABEL_269;
  }

  uint64_t result = [v164 ratchet];
  if (!result)
  {
LABEL_319:
    __break(1u);
    goto LABEL_320;
  }

  v414 = result;
  v415 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v417 = v416;

  v418 = sub_100133850(v415, v417);
  if ((v419 & 1) != 0) {
    v420 = 0LL;
  }
  else {
    v420 = v418;
  }
  v421 = v517;
  v422 = (uint64_t *)(v517 + v546[24]);
  v423 = *v422;
  v424 = v422[1];
  swift_bridgeObjectRetain(v424);
  v425 = v424;
  v426 = v421;
  v427 = sub_100133850(v423, v425);
  if ((v428 & 1) != 0) {
    v429 = 0LL;
  }
  else {
    v429 = v427;
  }
  v430 = v421;
  v431 = v513;
  sub_1000D5630(v430, v513);
  if (v429 >= v420)
  {
    sub_1000D5674(v431);
    sub_1000D5674(v426);
    v443 = v528;
    goto LABEL_267;
  }

  v432 = [v164 encryptionKey];
  if (!v432)
  {
    v434 = 0LL;
    v437 = v513;
    v511 = (uint64_t *)(v513 + v546[12]);
    v439 = *v511;
    v440 = v511[1];
    v436 = 0xF000000000000000LL;
    goto LABEL_314;
  }

  v433 = v432;
  v434 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v436 = v435;

  v437 = v513;
  v438 = (uint64_t *)(v513 + v546[12]);
  v439 = *v438;
  v440 = v438[1];
  if (v436 >> 60 == 15)
  {
LABEL_314:
    v512 = v517;
    sub_1000991CC(v439, v440);
    sub_1000D5674(v437);
    sub_1000D5674(v512);
    sub_1000D5674(v528);
    sub_1000AC4C0(v434, v436);
    if (v440 >> 60 == 15) {
      goto LABEL_137;
    }
    sub_1000AC4C0(v439, v440);
    v282 = v527;
    goto LABEL_268;
  }

  sub_1000991CC(v439, v440);
  sub_1000AC4D4(v434, v436);
  sub_1000D53B8(v434, v436);
  v442 = v441;
  sub_100099394(v439, v440);
  sub_1000AC4C0(v434, v436);
  sub_1000D5674(v437);
  sub_1000D5674(v517);
  sub_1000D5674(v528);
  sub_1000AC4C0(v434, v436);
  v282 = v527;
  sub_1000D5630(v150, v527);
  if ((v442 & 1) != 0) {
    goto LABEL_138;
  }
LABEL_269:
  v449 = [v164 settingsMask];
  if (!v449)
  {
    v453 = v516;
    sub_1000D5630(v282, v516);
    goto LABEL_276;
  }

  v450 = v449;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v449);
  v452 = v451;

  swift_bridgeObjectRelease(v452);
  v453 = v516;
  sub_1000D5630(v282, v516);
  if (!v452)
  {
LABEL_276:
    sub_1000D5674(v453);
    sub_1000D5674(v282);
    goto LABEL_277;
  }

  v454 = [v164 settingsMask];
  if (!v454)
  {
    v506 = v516;
    v507 = *(void *)(v516 + v546[26] + 8);
    swift_bridgeObjectRetain(v507);
    sub_1000D5674(v506);
    sub_1000D5674(v282);
    swift_bridgeObjectRelease(v507);
    goto LABEL_139;
  }

  v455 = v454;
  v456 = static String._unconditionallyBridgeFromObjectiveC(_:)(v454);
  v458 = v457;

  v459 = v516;
  v460 = (void *)(v516 + v546[26]);
  v461 = v460[1];
  if (v456 == *v460 && v458 == v461)
  {
    swift_bridgeObjectRetain(v458);
    sub_1000D5674(v459);
    sub_1000D5674(v282);
    swift_bridgeObjectRelease_n(v458, 2LL);
LABEL_277:
    sub_1000D5630(v150, (uint64_t)v10);
    goto LABEL_278;
  }

  v508 = _stringCompareWithSmolCheck(_:_:expecting:)(v456, v458, *v460, v461, 0LL);
  v509 = v459;
  v510 = v508;
  swift_bridgeObjectRetain(v458);
  sub_1000D5674(v509);
  sub_1000D5674(v282);
  swift_bridgeObjectRelease_n(v458, 2LL);
  sub_1000D5630(v150, (uint64_t)v10);
  if ((v510 & 1) == 0) {
    goto LABEL_140;
  }
LABEL_278:
  v462 = [v164 supportedServices];
  if (!v462)
  {
LABEL_291:
    v474 = v515;
    sub_1000D5630((uint64_t)v10, v515);
LABEL_292:
    sub_1000D5674(v474);
    sub_1000D5674((uint64_t)v10);
    sub_1000D5630(v150, (uint64_t)v149);
LABEL_293:
    v489 = [v164 version];
    if (v489)
    {
      v490 = v489;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v489);
      v492 = v491;

      swift_bridgeObjectRelease(v492);
      v493 = v514;
      sub_1000D5630((uint64_t)v149, v514);
      if (v492)
      {
        v494 = [v164 version];
        if (v494)
        {
          v495 = v494;
          v496 = static String._unconditionallyBridgeFromObjectiveC(_:)(v494);
          v498 = v497;

          v499 = (void *)(v493 + v546[28]);
          v500 = v499[1];
          if (v496 == *v499 && v498 == v500) {
            v501 = 1;
          }
          else {
            v501 = _stringCompareWithSmolCheck(_:_:expecting:)(v496, v498, *v499, v500, 0LL);
          }
          swift_bridgeObjectRetain(v498);

          sub_1000D5674(v493);
          sub_1000D5674((uint64_t)v149);
          swift_bridgeObjectRelease(v498);
        }

        else
        {
          v498 = *(void *)(v493 + v546[28] + 8);
          swift_bridgeObjectRetain(v498);

          sub_1000D5674(v493);
          sub_1000D5674((uint64_t)v149);
          v501 = 0;
        }

        swift_bridgeObjectRelease(v498);
        uint64_t v101 = v501 ^ 1;
        return (id)(v101 & 1);
      }
    }

    else
    {
      v493 = v514;
      sub_1000D5630((uint64_t)v149, v514);
    }

    sub_1000D5674(v493);
    sub_1000D5674((uint64_t)v149);
    uint64_t v101 = 0;
    return (id)(v101 & 1);
  }

  uint64_t result = [v164 supportedServices];
  if (!result)
  {
    __break(1u);
    goto LABEL_319;
  }

  v463 = result;
  v464 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v466 = v465;

  swift_bridgeObjectRelease(v466);
  v467 = HIBYTE(v466) & 0xF;
  if ((v466 & 0x2000000000000000LL) == 0) {
    v467 = v464 & 0xFFFFFFFFFFFFLL;
  }
  if (!v467) {
    goto LABEL_291;
  }
  uint64_t result = [v164 supportedServices];
  if (!result)
  {
LABEL_320:
    __break(1u);
    goto LABEL_321;
  }

  v468 = result;
  v469 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v471 = v470;

  v472 = sub_100133850(v469, v471);
  LOBYTE(v469) = v473;
  v474 = v515;
  sub_1000D5630((uint64_t)v10, v515);
  if ((v469 & 1) == 0 && !v472) {
    goto LABEL_292;
  }
  uint64_t result = [v164 supportedServices];
  if (result)
  {
    v475 = result;
    v476 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v478 = v477;

    v479 = sub_100133850(v476, v478);
    v481 = v480;
    v482 = v515;
    v483 = (uint64_t *)(v515 + v546[27]);
    v484 = *v483;
    v485 = v483[1];
    swift_bridgeObjectRetain(v485);
    v486 = sub_100133850(v484, v485);
    v488 = v487;
    sub_1000D5674(v482);
    sub_1000D5674((uint64_t)v10);
    if ((v481 & 1) != 0)
    {
      sub_1000D5630(v150, (uint64_t)v149);
      if ((v488 & 1) == 0) {
        goto LABEL_142;
      }
    }

    else
    {
      if ((v488 & 1) != 0) {
        goto LABEL_141;
      }
      sub_1000D5630(v150, (uint64_t)v149);
      if (v479 != v486) {
        goto LABEL_142;
      }
    }

    goto LABEL_293;
  }

        swift_once(&qword_100234B70, sub_1000CAF84);
        goto LABEL_28;
      }
    }

    else if (*(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_23;
    }

    swift_bridgeObjectRelease(v61);
    sub_1000A7CD4(v59, type metadata accessor for MagicPairingSettingsRecord);
    char v44 = v106;
    goto LABEL_52;
  }

  sub_100099358((uint64_t)v8, (uint64_t *)&unk_100235810);
LABEL_52:
  unint64_t v90 = swift_unknownObjectWeakLoadStrong(v50 + 24, v58);
  if (v90)
  {
    char v91 = v90;
    char v92 = [v111 v48[228]];
    if ((_DWORD)v92)
    {
      unint64_t v93 = sub_10013A76C();
      if (qword_100234B70 != -1) {
        swift_once(&qword_100234B70, sub_1000CAF84);
      }
      uint64_t v94 = sub_100098D58(v42, (uint64_t)qword_10023DD70);
      ((void (*)(uint64_t, uint64_t, uint64_t))v44)(v45, v94, v42);
      unint64_t v95 = sub_100139314( v45,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
      swift_release(v93);
      v47(v45, v42);
    }

    else
    {
      uint64_t v96 = static os_log_type_t.error.getter(v92);
      unint64_t v95 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v96,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
    }

    sub_1001313CC((uint64_t)v95, (uint64_t)&unk_10020FD10, (uint64_t)sub_10018769C, (uint64_t)&unk_10020FD28);
    swift_unknownObjectRelease(v91);
    swift_bridgeObjectRelease(v95);
  }

  return sub_1000A7CD4((uint64_t)v105, type metadata accessor for LegacyMagicPairingSettingsRecords);
}

LABEL_88:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000018LL,  0x80000001001CDC00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unint64_t v108 = v142;
  uint64_t v109 = (uint64_t *)(v139 + v140[22]);
  uint64_t v111 = *v109;
  unint64_t v110 = v109[1];
  if (!v142) {
    goto LABEL_94;
  }
  if (v141 != v111 || v142 != v110)
  {
    char v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v109, v109[1], 0LL);
    swift_bridgeObjectRelease(v108);
    if ((v112 & 1) != 0) {
      goto LABEL_95;
    }
LABEL_94:
    id v143 = &type metadata for String;
    id v144 = &protocol witness table for String;
    uint64_t v141 = v111;
    unint64_t v142 = v110;
    swift_bridgeObjectRetain(v110);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000018LL, 0x80000001001CDC00LL, ObjectType);
    goto LABEL_95;
  }

  swift_bridgeObjectRelease(v142);
LABEL_95:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000022LL,  0x80000001001CDC20LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unint64_t v113 = v142;
  unint64_t v114 = (uint64_t *)(v139 + v140[23]);
  uint64_t v116 = *v114;
  unint64_t v115 = v114[1];
  if (!v142) {
    goto LABEL_100;
  }
  if (v141 == v116 && v142 == v115)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_101;
  }

  char v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v114, v114[1], 0LL);
  swift_bridgeObjectRelease(v113);
  if ((v117 & 1) == 0)
  {
LABEL_100:
    id v143 = &type metadata for String;
    id v144 = &protocol witness table for String;
    uint64_t v141 = v116;
    unint64_t v142 = v115;
    swift_bridgeObjectRetain(v115);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000022LL, 0x80000001001CDC20LL, ObjectType);
  }

          if (v152 < 1)
          {
            __break(1u);
            goto LABEL_168;
          }

          uint64_t v257 = v149 & 0xC000000000000001LL;
          swift_beginAccess(v260, v261, 0LL, 0LL);
          uint64_t v153 = 0LL;
          uint64_t v253 = v152;
          uint64_t v254 = v149;
          do
          {
            if (v257) {
              uint64_t v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v153, v149);
            }
            else {
              uint64_t v154 = *(id *)(v149 + 8 * v153 + 32);
            }
            __int128 v156 = v154;
            uint64_t v157 = swift_unknownObjectWeakLoadStrong(v260, v155);
            if (v157)
            {
              unint64_t v158 = (void *)v157;
              uint64_t v159 = sub_1000AE6C8(v157);
              unint64_t v160 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
              uint64_t v161 = [v160 isFirstUnlocked];
              uint64_t v259 = (uint64_t)v158;
              if ((_DWORD)v161)
              {
                uint64_t v162 = sub_10013A76C();
                if (qword_100234B58 != -1) {
                  swift_once(&qword_100234B58, sub_1000AA360);
                }
                uint64_t v163 = v251;
                uint64_t v164 = sub_100098D58(v251, (uint64_t)qword_10023DD48);
                uint64_t v165 = v250;
                uint64_t v166 = (uint64_t)v249;
                (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v164, v163);
                __int128 v167 = sub_100139314( v166,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
                swift_release(v162);
                (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v166, v163);
                id v168 = v167[2];
                uint64_t v169 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
                unint64_t v170 = *(void *)(v169 - 8);
                if (v168)
                {
                  uint64_t v136 = (void *)v255;
                  sub_1000A7C90( (uint64_t)v167 + ((*(unsigned __int8 *)(v170 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80)),  v255,  type metadata accessor for LegacyAccountMagicKeysRecord);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(v136, 0LL, 1LL, v169);
                }

                else
                {
                  uint64_t v136 = (void *)v255;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56))(v255, 1LL, 1LL, v169);
                }

                swift_release(v159);
                swift_bridgeObjectRelease(v167);
                unint64_t v158 = (void *)v259;
              }

              else
              {
                uint64_t v171 = static os_log_type_t.error.getter(v161);
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                os_log(_:dso:log:_:_:)( v171,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
                uint64_t v169 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
                (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 56LL))( v136,  1LL,  1LL,  v169);
                swift_release(v159);
              }

              type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              unint64_t v172 = *(void *)(v169 - 8);
              uint64_t v173 = *(uint64_t **)(v172 + 48);
              if (((unsigned int (*)(void *, uint64_t, uint64_t))v173)(v136, 1LL, v169) == 1)
              {
                sub_100099358((uint64_t)v136, (uint64_t *)&unk_1002357E0);
                uint64_t v174 = 0LL;
              }

              else
              {
                uint64_t v175 = Data.subdata(in:)( 1LL,  17LL,  *(void *)((char *)v136 + *(int *)(v169 + 20)),  *(void *)((char *)v136 + *(int *)(v169 + 20) + 8));
                uint64_t v252 = v169;
                unint64_t v176 = v153;
                uint64_t v177 = v156;
                unint64_t v178 = v172;
                uint64_t v179 = v160;
                uint64_t v180 = v173;
                uint64_t v182 = v181;
                sub_1000A7CD4((uint64_t)v136, type metadata accessor for LegacyAccountMagicKeysRecord);
                uint64_t v174 = Data._bridgeToObjectiveC()().super.isa;
                uint64_t v183 = v182;
                uint64_t v173 = v180;
                unint64_t v160 = v179;
                unint64_t v172 = v178;
                __int128 v156 = v177;
                uint64_t v153 = v176;
                uint64_t v169 = v252;
                sub_100099394(v175, v183);
              }

              [v156 setMasterKey:v174];

              unint64_t v185 = sub_1000AE6C8(v184);
              id v186 = [v160 isFirstUnlocked];
              if ((_DWORD)v186)
              {
                int v248 = v173;
                uint64_t v252 = (uint64_t)v156;
                Swift::String v187 = sub_10013A76C();
                if (qword_100234B58 != -1) {
                  swift_once(&qword_100234B58, sub_1000AA360);
                }
                uint64_t v188 = v251;
                uint64_t v189 = sub_100098D58(v251, (uint64_t)qword_10023DD48);
                id v190 = v250;
                Swift::String v191 = (uint64_t)v249;
                (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v189, v188);
                uint64_t v192 = sub_100139314( v191,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
                swift_release(v187);
                (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v191, v188);
                if (v192[2])
                {
                  Swift::String v193 = (uint64_t)v258;
                  sub_1000A7C90( (uint64_t)v192 + ((*(unsigned __int8 *)(v172 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80)),  (uint64_t)v258,  type metadata accessor for LegacyAccountMagicKeysRecord);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v172 + 56))(v193, 0LL, 1LL, v169);
                }

                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v258, 1LL, 1LL, v169);
                }

                swift_release(v185);
                swift_bridgeObjectRelease(v192);
                uint64_t v136 = (void *)v255;
                __int128 v156 = (void *)v252;
                unint64_t v158 = (void *)v259;
                uint64_t v173 = v248;
              }

              else
              {
                uint64_t v194 = static os_log_type_t.error.getter(v186);
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                os_log(_:dso:log:_:_:)( v194,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v258, 1LL, 1LL, v169);
                swift_release(v185);
              }

              if (((unsigned int (*)(char *, uint64_t, uint64_t))v173)(v258, 1LL, v169) == 1)
              {
                sub_100099358((uint64_t)v258, (uint64_t *)&unk_1002357E0);
                uint64_t v195 = 0LL;
              }

              else
              {
                uint64_t v196 = (uint64_t)v258;
                uint64_t v197 = Data.subdata(in:)( 17LL,  33LL,  *(void *)&v258[*(int *)(v169 + 20)],  *(void *)&v258[*(int *)(v169 + 20) + 8]);
                unint64_t v199 = v198;
                sub_1000A7CD4(v196, type metadata accessor for LegacyAccountMagicKeysRecord);
                uint64_t v195 = Data._bridgeToObjectiveC()().super.isa;
                sub_100099394(v197, v199);
              }

              uint64_t v152 = v253;
              uint64_t v149 = v254;
              [v156 setMasterHint:v195];
            }

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v157);
            Class v201 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v200 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v201 >= v200 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v200 > 1, v201 + 1, 1LL);
            }
            ++v153;
            uint64_t v202 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v201, v156);
            specialized Array._endMutation()(v202);
          }

          while (v152 != v153);
          swift_bridgeObjectRelease(v149);
          uint64_t v205 = (void *)v262;
          char v25 = v247;
          a1 = v256;
          goto LABEL_146;
        }

        if ((v87 & 1) != 0) {
          goto LABEL_126;
        }
        unint64_t v95 = &v62[16 * v64];
        char v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        id v75 = __OFSUB__(v96, v97);
        unint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_129;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v103 = v17;
        unint64_t v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!*v133) {
          goto LABEL_144;
        }
        unint64_t v105 = v16;
        uint64_t v106 = &v62[16 * v104];
        char v107 = *(void *)v106;
        unint64_t v108 = &v62[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        unint64_t v110 = v128;
        sub_100164EF8( *v133 + *(void *)(v127 + 72) * *(void *)v106,  *v133 + *(void *)(v127 + 72) * *(void *)v108,  *v133 + *(void *)(v127 + 72) * v109,  v126);
        unint64_t v128 = v110;
        if (v110) {
          goto LABEL_116;
        }
        if (v109 < v107) {
          goto LABEL_119;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v62[16 * v104 + 8] = v109;
        uint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_121;
        }
        unint64_t v16 = v105;
        unint64_t v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        char v92 = v111 > 2;
        uint64_t v17 = v103;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v18 = 1LL;
LABEL_14:
    uint64_t v10 = v133[1];
    if (v17 >= v10) {
      goto LABEL_105;
    }
  }

  unint64_t v130 = v10;
  unint64_t v120 = v16;
  uint64_t v52 = 0LL;
  unint64_t v53 = v136 * (v17 - 1);
  uint64_t v54 = v17 * v136;
  uint64_t v55 = v19;
  unint64_t v56 = v19 * v136;
  unint64_t v35 = v133;
  unint64_t v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      char v57 = v129;
      if (!v129) {
        goto LABEL_145;
      }
      char v58 = v129 + v56;
      unint64_t v59 = v129 + v53;
      sub_1000C998C(v129 + v56, v124, type metadata accessor for SoundProfileRecord);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1LL, v134);
        char v51 = v136;
      }

      else
      {
        char v51 = v136;
        if (v56 != v53) {
          swift_arrayInitWithTakeBackToFront(v58, v59);
        }
      }

      sub_1000C998C(v124, v59, type metadata accessor for SoundProfileRecord);
      unint64_t v35 = v133;
      uint64_t v19 = v125;
    }

    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }

  while (v55 < v17 + v52);
  unint64_t v16 = v120;
  uint64_t v10 = v130;
  if (v17 >= v130) {
    goto LABEL_57;
  }
LABEL_25:
  if (__OFSUB__(v17, v19)) {
    goto LABEL_138;
  }
  if (v17 - v19 >= v122) {
    goto LABEL_57;
  }
  if (__OFADD__(v19, v122)) {
    goto LABEL_141;
  }
  if (v19 + v122 >= v10) {
    char v36 = v10;
  }
  else {
    char v36 = v19 + v122;
  }
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      unint64_t v120 = v16;
      char v37 = *(void *)(v127 + 72);
      uint64_t v136 = v37 * (v17 - 1);
      uint64_t v129 = v37;
      uint64_t v38 = v17 * v37;
      unint64_t v125 = v19;
      unint64_t v123 = v36;
      do
      {
        id v40 = 0LL;
        uint64_t v41 = v19;
        unint64_t v130 = v17;
        while (1)
        {
          unint64_t v42 = *v35;
          char v43 = v38;
          char v44 = v38 + v40 + *v35;
          uint64_t v45 = v131;
          unint64_t v46 = v35;
          sub_1000A7C90(v44, v131, type metadata accessor for SoundProfileRecord);
          uint64_t v47 = v132;
          sub_1000A7C90(v136 + v40 + v42, v132, type metadata accessor for SoundProfileRecord);
          LOBYTE(v42) = static Date.> infix(_:_:)(v45 + *(int *)(v134 + 28), v47 + *(int *)(v134 + 28));
          sub_1000A7CD4(v47, type metadata accessor for SoundProfileRecord);
          sub_1000A7CD4(v45, type metadata accessor for SoundProfileRecord);
          if ((v42 & 1) == 0) {
            break;
          }
          uint64_t v48 = *v46;
          if (!*v46) {
            goto LABEL_143;
          }
          uint64_t v38 = v43;
          unint64_t v49 = v48 + v43 + v40;
          char v50 = v48 + v136 + v40;
          sub_1000C998C(v49, v135, type metadata accessor for SoundProfileRecord);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, v134);
          sub_1000C998C(v135, v50, type metadata accessor for SoundProfileRecord);
          unint64_t v39 = v130;
          v40 -= v129;
          ++v41;
          unint64_t v35 = v133;
          if (v130 == v41) {
            goto LABEL_35;
          }
        }

        unint64_t v39 = v130;
        uint64_t v38 = v43;
        unint64_t v35 = v46;
LABEL_35:
        uint64_t v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        uint64_t v19 = v125;
      }

      while (v17 != v123);
      uint64_t v17 = v123;
      unint64_t v16 = v120;
    }

    goto LABEL_57;
  }

LABEL_113:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0xD000000000000011LL,  0x80000001001CDC50LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unint64_t v128 = v142;
  uint64_t v129 = (uint64_t *)(v139 + v140[27]);
  uint64_t v131 = *v129;
  unint64_t v130 = v129[1];
  if (!v142) {
    goto LABEL_118;
  }
  if (v141 != v131 || v142 != v130)
  {
    char v132 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v129, v129[1], 0LL);
    swift_bridgeObjectRelease(v128);
    if ((v132 & 1) != 0) {
      goto LABEL_119;
    }
LABEL_118:
    id v143 = &type metadata for String;
    id v144 = &protocol witness table for String;
    uint64_t v141 = v131;
    unint64_t v142 = v130;
    swift_bridgeObjectRetain(v130);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000011LL, 0x80000001001CDC50LL, ObjectType);
    goto LABEL_119;
  }

  swift_bridgeObjectRelease(v142);
LABEL_119:
  CKRecordKeyValueSetting.subscript.getter( &v141,  0x6E6F6973726576LL,  0xE700000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  unint64_t v133 = v142;
  unint64_t v134 = (uint64_t *)(v139 + v140[28]);
  uint64_t v136 = *v134;
  unint64_t v135 = v134[1];
  if (!v142) {
    goto LABEL_124;
  }
  if (v141 == v136 && v142 == v135)
  {
    swift_unknownObjectRelease(v13);
    return swift_bridgeObjectRelease(v133);
  }

  char v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v134, v134[1], 0LL);
  swift_bridgeObjectRelease(v133);
  if ((v138 & 1) == 0)
  {
LABEL_124:
    id v143 = &type metadata for String;
    id v144 = &protocol witness table for String;
    uint64_t v141 = v136;
    unint64_t v142 = v135;
    swift_bridgeObjectRetain(v135);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x6E6F6973726576LL, 0xE700000000000000LL, ObjectType);
  }

  return swift_unknownObjectRelease(v13);
}

uint64_t sub_1000CFEA4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v324 = (char *)&v322 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v325 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v325);
  id v8 = (char *)&v322 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = sub_1000D1540(a1);
  if ((v9 & 1) != 0)
  {
    uint64_t v322 = v5;
    uint64_t v323 = v4;
    uint64_t v10 = static os_log_type_t.debug.getter(v9);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v11 = qword_10023DFC8;
    uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    sub_1000D5630(v1, (uint64_t)v8);
    uint64_t v14 = sub_1000CB0DC();
    uint64_t v16 = v15;
    sub_1000D5674((uint64_t)v8);
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10009914C();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Updating magic settings record: %@", 34LL, 2LL, v13);
    swift_bridgeObjectRelease(v13);
    id v17 = [a1 accessoryHint];
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      char v22 = (uint64_t *)(v2 + v325[10]);
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      sub_1000991CC(*v22, v24);
      id v25 = [a1 accessoryHint];
      if (v25)
      {
        unint64_t v26 = v25;
        uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;

        sub_1000991CC(v23, v24);
        sub_1000D53B8(v23, v24);
        LOBYTE(v26) = v30;
        sub_100099394(v27, v29);
        sub_100099394(v23, v24);
        sub_100099394(v23, v24);
        if ((v26 & 1) != 0)
        {
          sub_100099394(v19, v21);
          goto LABEL_13;
        }
      }

      else
      {
        sub_1000AC4C0(v23, v24);
        sub_1000AC4C0(0LL, 0xF000000000000000LL);
      }

      sub_100099394(v23, v24);
      *char v22 = v19;
      v22[1] = v21;
    }

LABEL_178:
    v321 = v324;
    static Date.now.getter(v307);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v322 + 40))(v2 + v325[30], v321, v323);
  }

  uint64_t v31 = static os_log_type_t.info.getter(v9);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v32 = qword_10023DFC8;
  uint64_t v33 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
  *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v35 = a1;
  id v36 = [v35 description];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  *(void *)(v34 + 56) = &type metadata for String;
  *(void *)(v34 + 64) = sub_10009914C();
  *(void *)(v34 + 32) = v37;
  *(void *)(v34 + 40) = v39;
  os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v32,  "No change in updated magic settings record: %@",  46LL,  2LL,  v34);
  return swift_bridgeObjectRelease(v34);
}

id sub_1000D1540(void *a1)
{
  uint64_t v3 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v513 - v5;
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v513 - v9;
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v513 - v19;
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  uint64_t v521 = (uint64_t)&v513 - v23;
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v513 - v25;
  __chkstk_darwin(v27);
  uint64_t v523 = (uint64_t)&v513 - v28;
  __chkstk_darwin(v29);
  uint64_t v540 = (uint64_t)&v513 - v30;
  __chkstk_darwin(v31);
  v522 = (char *)&v513 - v32;
  __chkstk_darwin(v33);
  uint64_t v542 = (uint64_t)&v513 - v34;
  __chkstk_darwin(v35);
  v524 = (char *)&v513 - v36;
  __chkstk_darwin(v37);
  v538 = (char *)&v513 - v38;
  __chkstk_darwin(v39);
  uint64_t v525 = (uint64_t)&v513 - v40;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v513 - v42;
  __chkstk_darwin(v44);
  uint64_t v526 = (uint64_t)&v513 - v45;
  __chkstk_darwin(v46);
  v541 = (char *)&v513 - v47;
  __chkstk_darwin(v48);
  uint64_t v530 = (uint64_t)&v513 - v49;
  __chkstk_darwin(v50);
  uint64_t v543 = (uint64_t)&v513 - v51;
  __chkstk_darwin(v52);
  v533 = (char *)&v513 - v53;
  __chkstk_darwin(v54);
  uint64_t v544 = (uint64_t)&v513 - v55;
  __chkstk_darwin(v56);
  uint64_t v532 = (uint64_t)&v513 - v57;
  __chkstk_darwin(v58);
  uint64_t v545 = (uint64_t)&v513 - v59;
  __chkstk_darwin(v60);
  uint64_t v535 = (uint64_t)&v513 - v61;
  __chkstk_darwin(v62);
  uint64_t v547 = (uint64_t)&v513 - v63;
  __chkstk_darwin(v64);
  uint64_t v536 = (uint64_t)&v513 - v65;
  __chkstk_darwin(v66);
  uint64_t v548 = (uint64_t)&v513 - v67;
  __chkstk_darwin(v68);
  __int128 v70 = (char *)&v513 - v69;
  __chkstk_darwin(v71);
  uint64_t v73 = (char *)&v513 - v72;
  __chkstk_darwin(v74);
  uint64_t v87 = (char *)&v513 - v86;
  if (!a1)
  {
    char v101 = 0;
    return (id)(v101 & 1);
  }

  v537 = v43;
  v519 = v20;
  v529 = v26;
  uint64_t v518 = v82;
  uint64_t v534 = v81;
  uint64_t v513 = v80;
  uint64_t v517 = v79;
  uint64_t v531 = v78;
  uint64_t v516 = v77;
  uint64_t v528 = v76;
  uint64_t v515 = v85;
  v546 = v75;
  uint64_t v527 = v84;
  uint64_t v514 = v83;
  id v88 = a1;
  id v89 = [v88 listeningServices];
  uint64_t v90 = v89;
  id v549 = v88;
  v539 = v10;
  if (!v89)
  {
    id v97 = v6;
    uint64_t v102 = v1;
    goto LABEL_36;
  }

  uint64_t v520 = v1;
  uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
  unint64_t v93 = v92;

  id v94 = [v88 productID];
  if (!v94) {
    goto LABEL_17;
  }
  uint64_t v95 = v94;
  uint64_t v96 = v91;
  id v97 = v6;
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  uint64_t v100 = v99;

  if (v98 == 876163384 && v100 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    uint64_t v91 = v96;
  }

  else
  {
    char v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, 876163384LL, 0xE400000000000000LL, 0LL);
    swift_bridgeObjectRelease(v100);
    uint64_t v91 = v96;
    if ((v103 & 1) == 0) {
      goto LABEL_17;
    }
  }

  id v104 = [v549 productID];
  if (!v104)
  {
LABEL_17:
    id v97 = v6;
    id v111 = v546;
    uint64_t v112 = v520;
    uint64_t v113 = (uint64_t *)(v520 + v546[19]);
    uint64_t v114 = *v113;
    unint64_t v115 = v113[1];
    swift_bridgeObjectRetain(v115);
    __int16 v116 = sub_100133850(v114, v115);
    LOBYTE(v115) = v117;
    __int16 v118 = sub_100133850(v91, v93);
    if ((v115 & 1) != 0) {
      __int16 v120 = 0;
    }
    else {
      __int16 v120 = v116;
    }
    if ((v119 & 1) != 0) {
      __int16 v121 = 0;
    }
    else {
      __int16 v121 = v118;
    }
    uint64_t v122 = (unsigned __int16)(v121 ^ v120) & 0xFF8C;
    LODWORD(v90) = v122 != 0;
    id v123 = [v549 listeningServicesV2];
    if (!v123)
    {
      uint64_t v102 = v112;
      goto LABEL_35;
    }

    char v124 = v123;
    uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
    unint64_t v127 = v126;

    uint64_t v128 = sub_100133850(v125, v127);
    if ((v129 & 1) != 0) {
      uint64_t v90 = 0LL;
    }
    else {
      uint64_t v90 = (void *)v128;
    }
    uint64_t v130 = v111[20];
    uint64_t v102 = v112;
    uint64_t v131 = (uint64_t *)(v112 + v130);
    uint64_t v132 = *v131;
    unint64_t v133 = v131[1];
    swift_bridgeObjectRetain(v133);
    uint64_t v134 = sub_100133850(v132, v133);
    if ((v135 & 1) != 0)
    {
      if (!v122)
      {
        uint64_t v134 = 0LL;
LABEL_34:
        LODWORD(v90) = v90 != (void *)v134;
        goto LABEL_35;
      }
    }

    else if (!v122)
    {
      goto LABEL_34;
    }

    LODWORD(v90) = 1;
    goto LABEL_35;
  }

  id v105 = v104;
  uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
  uint64_t v108 = v107;

  if (v106 != 925905464 || v108 != 0xE400000000000000LL)
  {
    char v110 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v108, 925905464LL, 0xE400000000000000LL, 0LL);
    swift_bridgeObjectRelease(v108);
    uint64_t v91 = v96;
    if ((v110 & 1) != 0)
    {
      unint64_t v109 = v93;
      goto LABEL_16;
    }

    goto LABEL_17;
  }

  swift_bridgeObjectRelease(v93);
  unint64_t v109 = 0xE400000000000000LL;
LABEL_16:
  swift_bridgeObjectRelease(v109);
  LODWORD(v90) = 0;
  uint64_t v102 = v520;
LABEL_35:
  uint64_t v10 = v539;
LABEL_36:
  id v136 = [v549 productID];
  if (!v136)
  {
    sub_1000D5630(v102, (uint64_t)v87);
    goto LABEL_43;
  }

  unint64_t v137 = v136;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
  uint64_t v139 = v138;

  swift_bridgeObjectRelease(v139);
  sub_1000D5630(v102, (uint64_t)v87);
  if (!v139)
  {
LABEL_43:
    LODWORD(v520) = (_DWORD)v90;
    sub_1000D5674((uint64_t)v87);
    uint64_t v150 = v102;
    id v149 = v97;
    goto LABEL_44;
  }

  id v140 = [v549 productID];
  if (!v140)
  {
    sub_1000D5674((uint64_t)v87);
    uint64_t v150 = v102;
    sub_1000D5630(v102, (uint64_t)v73);
    id v149 = v97;
    goto LABEL_98;
  }

  uint64_t v141 = v140;
  LODWORD(v520) = (_DWORD)v90;
  uint64_t v142 = v10;
  uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
  uint64_t v145 = v144;

  uint64_t v146 = &v87[v546[13]];
  uint64_t v147 = *((void *)v146 + 1);
  uint64_t v148 = v102;
  if (v143 == *(void *)v146 && v145 == v147)
  {
    sub_1000D5674((uint64_t)v87);
    swift_bridgeObjectRelease(v145);
    uint64_t v10 = v142;
    id v149 = v97;
    uint64_t v150 = v148;
LABEL_44:
    sub_1000D5630(v150, (uint64_t)v73);
    goto LABEL_45;
  }

  char v262 = _stringCompareWithSmolCheck(_:_:expecting:)(v143, v145, *(void *)v146, v147, 0LL);
  sub_1000D5674((uint64_t)v87);
  swift_bridgeObjectRelease(v145);
  sub_1000D5630(v102, (uint64_t)v73);
  uint64_t v10 = v142;
  uint64_t v150 = v102;
  id v149 = v97;
  if ((v262 & 1) == 0)
  {
LABEL_98:
    sub_1000D5674((uint64_t)v73);
LABEL_109:
    uint64_t v162 = (uint64_t)v537;
    uint64_t v163 = v548;
    sub_1000D5630(v150, v548);
    id v164 = v549;
    goto LABEL_110;
  }

LABEL_321:
  __break(1u);
  return result;
}

uint64_t sub_1000D3EEC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  uint64_t v5 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v6 = (uint64_t *)(v1 + v5[5]);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000991CC(*v6, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_100099394(v7, v8);
  uint64_t v9 = (uint64_t *)(v1 + v5[6]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = (uint64_t *)(v1 + v5[7]);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000991CC(*v12, v14);
  Data.hash(into:)(a1, v13, v14);
  sub_100099394(v13, v14);
  uint64_t v15 = (uint64_t *)(v1 + v5[8]);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_1000991CC(*v15, v17);
  Data.hash(into:)(a1, v16, v17);
  sub_100099394(v16, v17);
  uint64_t v18 = (uint64_t *)(v1 + v5[9]);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_1000991CC(*v18, v20);
  Data.hash(into:)(a1, v19, v20);
  sub_100099394(v19, v20);
  uint64_t v21 = (uint64_t *)(v1 + v5[10]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_1000991CC(*v21, v23);
  Data.hash(into:)(a1, v22, v23);
  sub_100099394(v22, v23);
  uint64_t v24 = (uint64_t *)(v1 + v5[11]);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000991CC(*v24, v26);
  Data.hash(into:)(a1, v25, v26);
  sub_100099394(v25, v26);
  uint64_t v27 = (uint64_t *)(v1 + v5[12]);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_1000991CC(*v27, v29);
  Data.hash(into:)(a1, v28, v29);
  sub_100099394(v28, v29);
  uint64_t v30 = (uint64_t *)(v1 + v5[13]);
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  swift_bridgeObjectRetain(v32);
  String.hash(into:)(a1, v31, v32);
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = (uint64_t *)(v1 + v5[14]);
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  String.hash(into:)(a1, v34, v35);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = (uint64_t *)(v1 + v5[15]);
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  swift_bridgeObjectRetain(v38);
  String.hash(into:)(a1, v37, v38);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = (uint64_t *)(v1 + v5[16]);
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  swift_bridgeObjectRetain(v41);
  String.hash(into:)(a1, v40, v41);
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = (uint64_t *)(v1 + v5[17]);
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  swift_bridgeObjectRetain(v44);
  String.hash(into:)(a1, v43, v44);
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = (uint64_t *)(v1 + v5[18]);
  uint64_t v46 = *v45;
  uint64_t v47 = v45[1];
  swift_bridgeObjectRetain(v47);
  String.hash(into:)(a1, v46, v47);
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = (uint64_t *)(v1 + v5[19]);
  uint64_t v49 = *v48;
  uint64_t v50 = v48[1];
  swift_bridgeObjectRetain(v50);
  String.hash(into:)(a1, v49, v50);
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = (uint64_t *)(v1 + v5[20]);
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  swift_bridgeObjectRetain(v53);
  String.hash(into:)(a1, v52, v53);
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = (uint64_t *)(v1 + v5[21]);
  uint64_t v55 = *v54;
  uint64_t v56 = v54[1];
  swift_bridgeObjectRetain(v56);
  String.hash(into:)(a1, v55, v56);
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = (uint64_t *)(v1 + v5[22]);
  uint64_t v58 = *v57;
  uint64_t v59 = v57[1];
  swift_bridgeObjectRetain(v59);
  String.hash(into:)(a1, v58, v59);
  swift_bridgeObjectRelease(v59);
  uint64_t v60 = (uint64_t *)(v1 + v5[23]);
  uint64_t v61 = *v60;
  uint64_t v62 = v60[1];
  swift_bridgeObjectRetain(v62);
  String.hash(into:)(a1, v61, v62);
  swift_bridgeObjectRelease(v62);
  uint64_t v63 = (uint64_t *)(v1 + v5[24]);
  uint64_t v64 = *v63;
  uint64_t v65 = v63[1];
  swift_bridgeObjectRetain(v65);
  String.hash(into:)(a1, v64, v65);
  swift_bridgeObjectRelease(v65);
  uint64_t v66 = (uint64_t *)(v1 + v5[25]);
  uint64_t v67 = *v66;
  uint64_t v68 = v66[1];
  swift_bridgeObjectRetain(v68);
  String.hash(into:)(a1, v67, v68);
  swift_bridgeObjectRelease(v68);
  uint64_t v69 = (uint64_t *)(v1 + v5[26]);
  uint64_t v70 = *v69;
  uint64_t v71 = v69[1];
  swift_bridgeObjectRetain(v71);
  String.hash(into:)(a1, v70, v71);
  swift_bridgeObjectRelease(v71);
  uint64_t v72 = (uint64_t *)(v1 + v5[27]);
  uint64_t v73 = *v72;
  uint64_t v74 = v72[1];
  swift_bridgeObjectRetain(v74);
  String.hash(into:)(a1, v73, v74);
  swift_bridgeObjectRelease(v74);
  uint64_t v75 = (uint64_t *)(v1 + v5[28]);
  uint64_t v76 = *v75;
  uint64_t v77 = v75[1];
  swift_bridgeObjectRetain(v77);
  String.hash(into:)(a1, v76, v77);
  swift_bridgeObjectRelease(v77);
  uint64_t v78 = (uint64_t *)(v1 + v5[29]);
  uint64_t v79 = *v78;
  uint64_t v80 = v78[1];
  swift_bridgeObjectRetain(v80);
  String.hash(into:)(a1, v79, v80);
  swift_bridgeObjectRelease(v80);
  uint64_t v81 = type metadata accessor for Date(0LL);
  uint64_t v82 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v81, v82);
}

uint64_t sub_1000D4420(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D4458 + 4 * byte_1001A7C20[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_1000D4458()
{
  return 0x74654D64756F6C63LL;
}

unint64_t sub_1000D447C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000D470C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8(&qword_100235A18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000D6D50();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MagicPairingSettingsRecord.CodingKeys,  &type metadata for MagicPairingSettingsRecord.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v76) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v76, v5, v12, v13);
  if (!v2)
  {
    unint64_t v14 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
    __int128 v76 = *(_OWORD *)(v3 + v14[5]);
    char v75 = 1;
    unint64_t v15 = sub_10009A4FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    uint64_t v16 = (uint64_t *)(v3 + v14[6]);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    LOBYTE(v76) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v76, v5);
    __int128 v76 = *(_OWORD *)(v3 + v14[7]);
    char v75 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    __int128 v76 = *(_OWORD *)(v3 + v14[8]);
    char v75 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    __int128 v76 = *(_OWORD *)(v3 + v14[9]);
    char v75 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    __int128 v76 = *(_OWORD *)(v3 + v14[10]);
    char v75 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    __int128 v76 = *(_OWORD *)(v3 + v14[11]);
    char v75 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    __int128 v76 = *(_OWORD *)(v3 + v14[12]);
    char v75 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    uint64_t v19 = (uint64_t *)(v3 + v14[13]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    LOBYTE(v76) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v76, v5);
    uint64_t v22 = (uint64_t *)(v3 + v14[14]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    LOBYTE(v76) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v76, v5);
    uint64_t v25 = (uint64_t *)(v3 + v14[15]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    LOBYTE(v76) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v76, v5);
    uint64_t v28 = (uint64_t *)(v3 + v14[16]);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    LOBYTE(v76) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v76, v5);
    uint64_t v31 = (uint64_t *)(v3 + v14[17]);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    LOBYTE(v76) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v76, v5);
    uint64_t v34 = (uint64_t *)(v3 + v14[18]);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    LOBYTE(v76) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v76, v5);
    uint64_t v37 = (uint64_t *)(v3 + v14[19]);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    LOBYTE(v76) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v38, v39, &v76, v5);
    uint64_t v40 = (uint64_t *)(v3 + v14[20]);
    uint64_t v41 = *v40;
    uint64_t v42 = v40[1];
    LOBYTE(v76) = 16;
    KeyedEncodingContainer.encode(_:forKey:)(v41, v42, &v76, v5);
    uint64_t v43 = (uint64_t *)(v3 + v14[21]);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    LOBYTE(v76) = 17;
    KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &v76, v5);
    uint64_t v46 = (uint64_t *)(v3 + v14[22]);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    LOBYTE(v76) = 18;
    KeyedEncodingContainer.encode(_:forKey:)(v47, v48, &v76, v5);
    uint64_t v49 = (uint64_t *)(v3 + v14[23]);
    uint64_t v50 = *v49;
    uint64_t v51 = v49[1];
    LOBYTE(v76) = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v50, v51, &v76, v5);
    uint64_t v52 = (uint64_t *)(v3 + v14[24]);
    uint64_t v53 = *v52;
    uint64_t v54 = v52[1];
    LOBYTE(v76) = 20;
    KeyedEncodingContainer.encode(_:forKey:)(v53, v54, &v76, v5);
    uint64_t v55 = (uint64_t *)(v3 + v14[25]);
    uint64_t v56 = *v55;
    uint64_t v57 = v55[1];
    LOBYTE(v76) = 21;
    KeyedEncodingContainer.encode(_:forKey:)(v56, v57, &v76, v5);
    uint64_t v58 = (uint64_t *)(v3 + v14[26]);
    uint64_t v59 = *v58;
    uint64_t v60 = v58[1];
    LOBYTE(v76) = 22;
    KeyedEncodingContainer.encode(_:forKey:)(v59, v60, &v76, v5);
    uint64_t v61 = (uint64_t *)(v3 + v14[27]);
    uint64_t v62 = *v61;
    uint64_t v63 = v61[1];
    LOBYTE(v76) = 23;
    KeyedEncodingContainer.encode(_:forKey:)(v62, v63, &v76, v5);
    uint64_t v64 = (uint64_t *)(v3 + v14[28]);
    uint64_t v65 = *v64;
    uint64_t v66 = v64[1];
    LOBYTE(v76) = 24;
    KeyedEncodingContainer.encode(_:forKey:)(v65, v66, &v76, v5);
    uint64_t v67 = (uint64_t *)(v3 + v14[29]);
    uint64_t v68 = *v67;
    uint64_t v69 = v67[1];
    LOBYTE(v76) = 25;
    KeyedEncodingContainer.encode(_:forKey:)(v68, v69, &v76, v5);
    uint64_t v70 = v3 + v14[30];
    LOBYTE(v76) = 26;
    uint64_t v71 = type metadata accessor for Date(0LL);
    uint64_t v72 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v70, &v76, v5, v71, v72);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D4DBC()
{
  return sub_1000D4420(*v0);
}

uint64_t sub_1000D4DC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000D7444(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D4DE8(_BYTE *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_1000D4DF4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6D50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D4E1C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6D50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D4E44()
{
  return 0x746553636967614DLL;
}

uint64_t sub_1000D4E68(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 20);
  uint64_t v3 = *(void *)v2;
  sub_1000991CC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1000D4EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 120);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

Swift::Int sub_1000D4EE4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000D4F24(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000D4F64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CC554(a1, a2);
}

uint64_t sub_1000D4F78(void *a1)
{
  return sub_1000D470C(a1);
}

void sub_1000D4F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_1000D4FEC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1000D51D0LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  BOOL *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t type metadata accessor for MagicPairingSettingsRecord(uint64_t a1)
{
  uint64_t result = qword_100235938;
  if (!qword_100235938) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MagicPairingSettingsRecord);
  }
  return result;
}

uint64_t sub_1000D5230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1000D4F8C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1000D5304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_1000D4F8C(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_1000D53B8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1000D5404()
{
  return ((uint64_t (*)(void))((char *)&loc_1000D5438 + *((int *)qword_1000D5610 + (v0 >> 62))))();
}

uint64_t sub_1000D5448@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_1000D5630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5674(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000D56B0()
{
  unint64_t result = qword_1002358D0;
  if (!qword_1002358D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001A7E0C,  &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError);
    atomic_store(result, (unint64_t *)&qword_1002358D0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for MagicPairingSettingsRecord.MagicSettingsRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000D5740 + 4 * byte_1001A7C40[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000D5774 + 4 * byte_1001A7C3B[v4]))();
}

uint64_t sub_1000D5774(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D577C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D5784LL);
  }
  return result;
}

uint64_t sub_1000D5790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D5798LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000D579C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D57A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicPairingSettingsRecord.MagicSettingsRecordError()
{
  return &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError;
}

uint64_t *sub_1000D57C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v107 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v107 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v107);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    __int16 v9 = (uint64_t *)((char *)a1 + v8);
    char v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000991CC(*v10, v12);
    *__int16 v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    char v18 = (uint64_t *)((char *)a1 + v14);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v14);
    unint64_t v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain(v17);
    sub_1000991CC(v19, v20);
    *char v18 = v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    sub_1000991CC(*v23, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
    uint64_t v26 = a3[9];
    uint64_t v27 = (uint64_t *)((char *)a1 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    sub_1000991CC(*v28, v30);
    *uint64_t v27 = v29;
    v27[1] = v30;
    uint64_t v31 = a3[10];
    uint64_t v32 = (uint64_t *)((char *)a1 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    sub_1000991CC(*v33, v35);
    *uint64_t v32 = v34;
    v32[1] = v35;
    uint64_t v36 = a3[11];
    uint64_t v37 = (uint64_t *)((char *)a1 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    sub_1000991CC(*v38, v40);
    uint64_t *v37 = v39;
    v37[1] = v40;
    uint64_t v41 = a3[12];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    __int16 v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = *v43;
    unint64_t v45 = v43[1];
    sub_1000991CC(*v43, v45);
    *uint64_t v42 = v44;
    v42[1] = v45;
    uint64_t v46 = a3[13];
    uint64_t v47 = a3[14];
    uint64_t v48 = (uint64_t *)((char *)a1 + v46);
    uint64_t v49 = (uint64_t *)((char *)a2 + v46);
    uint64_t v119 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v119;
    uint64_t v50 = (uint64_t *)((char *)a1 + v47);
    uint64_t v51 = (uint64_t *)((char *)a2 + v47);
    uint64_t v120 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v120;
    uint64_t v52 = a3[15];
    uint64_t v53 = a3[16];
    uint64_t v54 = (uint64_t *)((char *)a1 + v52);
    uint64_t v55 = (uint64_t *)((char *)a2 + v52);
    uint64_t v117 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v117;
    uint64_t v56 = (uint64_t *)((char *)a1 + v53);
    uint64_t v57 = (uint64_t *)((char *)a2 + v53);
    uint64_t v118 = v57[1];
    void *v56 = *v57;
    v56[1] = v118;
    uint64_t v58 = a3[17];
    uint64_t v59 = a3[18];
    uint64_t v60 = (uint64_t *)((char *)a1 + v58);
    uint64_t v61 = (uint64_t *)((char *)a2 + v58);
    uint64_t v115 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v115;
    uint64_t v62 = (uint64_t *)((char *)a1 + v59);
    uint64_t v63 = (uint64_t *)((char *)a2 + v59);
    uint64_t v116 = v63[1];
    *uint64_t v62 = *v63;
    v62[1] = v116;
    uint64_t v64 = a3[19];
    uint64_t v65 = a3[20];
    uint64_t v66 = (uint64_t *)((char *)a1 + v64);
    uint64_t v67 = (uint64_t *)((char *)a2 + v64);
    uint64_t v113 = v67[1];
    *uint64_t v66 = *v67;
    v66[1] = v113;
    uint64_t v68 = (uint64_t *)((char *)a1 + v65);
    uint64_t v69 = (uint64_t *)((char *)a2 + v65);
    uint64_t v114 = v69[1];
    *uint64_t v68 = *v69;
    v68[1] = v114;
    uint64_t v70 = a3[21];
    uint64_t v71 = a3[22];
    uint64_t v72 = (uint64_t *)((char *)a1 + v70);
    uint64_t v73 = (uint64_t *)((char *)a2 + v70);
    uint64_t v74 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v74;
    char v75 = (uint64_t *)((char *)a1 + v71);
    __int128 v76 = (uint64_t *)((char *)a2 + v71);
    uint64_t v112 = v76[1];
    *char v75 = *v76;
    v75[1] = v112;
    uint64_t v77 = a3[23];
    uint64_t v78 = a3[24];
    uint64_t v79 = (uint64_t *)((char *)a1 + v77);
    uint64_t v80 = (uint64_t *)((char *)a2 + v77);
    uint64_t v81 = v80[1];
    *uint64_t v79 = *v80;
    v79[1] = v81;
    uint64_t v82 = (uint64_t *)((char *)a1 + v78);
    uint64_t v83 = (uint64_t *)((char *)a2 + v78);
    uint64_t v84 = v83[1];
    *uint64_t v82 = *v83;
    v82[1] = v84;
    uint64_t v85 = a3[25];
    uint64_t v86 = a3[26];
    uint64_t v87 = (uint64_t *)((char *)a1 + v85);
    id v88 = (uint64_t *)((char *)a2 + v85);
    uint64_t v89 = v88[1];
    *uint64_t v87 = *v88;
    v87[1] = v89;
    uint64_t v90 = (uint64_t *)((char *)a1 + v86);
    uint64_t v91 = (uint64_t *)((char *)a2 + v86);
    uint64_t v92 = v91[1];
    *uint64_t v90 = *v91;
    v90[1] = v92;
    uint64_t v93 = a3[27];
    uint64_t v94 = a3[28];
    uint64_t v95 = (uint64_t *)((char *)a1 + v93);
    uint64_t v96 = (uint64_t *)((char *)a2 + v93);
    uint64_t v97 = v96[1];
    *uint64_t v95 = *v96;
    v95[1] = v97;
    uint64_t v98 = (uint64_t *)((char *)a1 + v94);
    uint64_t v99 = (uint64_t *)((char *)a2 + v94);
    uint64_t v100 = v99[1];
    *uint64_t v98 = *v99;
    v98[1] = v100;
    uint64_t v101 = a3[29];
    uint64_t v102 = a3[30];
    char v103 = (uint64_t *)((char *)a1 + v101);
    id v104 = (uint64_t *)((char *)a2 + v101);
    uint64_t v105 = v104[1];
    id v111 = (char *)a2 + v102;
    char v110 = (char *)a1 + v102;
    void *v103 = *v104;
    v103[1] = v105;
    uint64_t v106 = type metadata accessor for Date(0LL);
    unint64_t v109 = *(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16LL);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v116);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v105);
    v109(v110, v111, v106);
  }

  return a1;
}

uint64_t sub_1000D5B68(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_100099394(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  sub_100099394(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  sub_100099394(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  sub_100099394(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  sub_100099394(*(void *)(a1 + a2[10]), *(void *)(a1 + a2[10] + 8));
  sub_100099394(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  sub_100099394(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[22] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[23] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[24] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[25] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[26] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[27] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[28] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[29] + 8));
  uint64_t v5 = a1 + a2[30];
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_1000D5D54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  __int16 v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000991CC(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (uint64_t *)(a1 + v13);
  uint64_t v18 = *(void *)(a2 + v13);
  unint64_t v19 = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain(v16);
  sub_1000991CC(v18, v19);
  *uint64_t v17 = v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_1000991CC(*v22, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = (uint64_t *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_1000991CC(*v27, v29);
  *uint64_t v26 = v28;
  v26[1] = v29;
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_1000991CC(*v32, v34);
  *uint64_t v31 = v33;
  v31[1] = v34;
  uint64_t v35 = a3[11];
  uint64_t v36 = (uint64_t *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  sub_1000991CC(*v37, v39);
  *uint64_t v36 = v38;
  v36[1] = v39;
  uint64_t v40 = a3[12];
  uint64_t v41 = (uint64_t *)(a1 + v40);
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  sub_1000991CC(*v42, v44);
  *uint64_t v41 = v43;
  v41[1] = v44;
  uint64_t v45 = a3[13];
  uint64_t v46 = a3[14];
  uint64_t v47 = (void *)(a1 + v45);
  uint64_t v48 = (void *)(a2 + v45);
  uint64_t v117 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v117;
  uint64_t v49 = (void *)(a1 + v46);
  uint64_t v50 = (void *)(a2 + v46);
  uint64_t v118 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v118;
  uint64_t v51 = a3[15];
  uint64_t v52 = a3[16];
  uint64_t v53 = (void *)(a1 + v51);
  uint64_t v54 = (void *)(a2 + v51);
  uint64_t v115 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v115;
  uint64_t v55 = (void *)(a1 + v52);
  uint64_t v56 = (void *)(a2 + v52);
  uint64_t v116 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v116;
  uint64_t v57 = a3[17];
  uint64_t v58 = a3[18];
  uint64_t v59 = (void *)(a1 + v57);
  uint64_t v60 = (void *)(a2 + v57);
  uint64_t v113 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v113;
  uint64_t v61 = (void *)(a1 + v58);
  uint64_t v62 = (void *)(a2 + v58);
  uint64_t v114 = v62[1];
  *uint64_t v61 = *v62;
  v61[1] = v114;
  uint64_t v63 = a3[19];
  uint64_t v64 = a3[20];
  uint64_t v65 = (void *)(a1 + v63);
  uint64_t v66 = (void *)(a2 + v63);
  uint64_t v111 = v66[1];
  *uint64_t v65 = *v66;
  v65[1] = v111;
  uint64_t v67 = (void *)(a1 + v64);
  uint64_t v68 = (void *)(a2 + v64);
  uint64_t v112 = v68[1];
  *uint64_t v67 = *v68;
  v67[1] = v112;
  uint64_t v69 = a3[21];
  uint64_t v70 = a3[22];
  uint64_t v71 = (void *)(a1 + v69);
  uint64_t v72 = (void *)(a2 + v69);
  uint64_t v73 = v72[1];
  *uint64_t v71 = *v72;
  v71[1] = v73;
  uint64_t v74 = (void *)(a1 + v70);
  char v75 = (void *)(a2 + v70);
  uint64_t v110 = v75[1];
  *uint64_t v74 = *v75;
  v74[1] = v110;
  uint64_t v76 = a3[23];
  uint64_t v77 = a3[24];
  uint64_t v78 = (void *)(a1 + v76);
  uint64_t v79 = (void *)(a2 + v76);
  uint64_t v80 = v79[1];
  *uint64_t v78 = *v79;
  v78[1] = v80;
  uint64_t v81 = (void *)(a1 + v77);
  uint64_t v82 = (void *)(a2 + v77);
  uint64_t v83 = v82[1];
  *uint64_t v81 = *v82;
  v81[1] = v83;
  uint64_t v84 = a3[25];
  uint64_t v85 = a3[26];
  uint64_t v86 = (void *)(a1 + v84);
  uint64_t v87 = (void *)(a2 + v84);
  uint64_t v88 = v87[1];
  *uint64_t v86 = *v87;
  v86[1] = v88;
  uint64_t v89 = (void *)(a1 + v85);
  uint64_t v90 = (void *)(a2 + v85);
  uint64_t v91 = v90[1];
  *uint64_t v89 = *v90;
  v89[1] = v91;
  uint64_t v92 = a3[27];
  uint64_t v93 = a3[28];
  uint64_t v94 = (void *)(a1 + v92);
  uint64_t v95 = (void *)(a2 + v92);
  uint64_t v96 = v95[1];
  *uint64_t v94 = *v95;
  v94[1] = v96;
  uint64_t v97 = (void *)(a1 + v93);
  uint64_t v98 = (void *)(a2 + v93);
  uint64_t v99 = v98[1];
  void *v97 = *v98;
  v97[1] = v99;
  uint64_t v100 = a3[29];
  uint64_t v101 = a3[30];
  uint64_t v102 = (void *)(a1 + v100);
  char v103 = (void *)(a2 + v100);
  uint64_t v104 = v103[1];
  uint64_t v109 = a2 + v101;
  uint64_t v108 = a1 + v101;
  void *v102 = *v103;
  v102[1] = v104;
  uint64_t v105 = type metadata accessor for Date(0LL);
  uint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16LL);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v104);
  v107(v108, v109, v105);
  return a1;
}