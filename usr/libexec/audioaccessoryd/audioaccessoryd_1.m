uint64_t sub_1000D60D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000991CC(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_100099394(v12, v13);
  v14 = a3[6];
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_1000991CC(*v21, v23);
  v24 = *v20;
  v25 = v20[1];
  *v20 = v22;
  v20[1] = v23;
  sub_100099394(v24, v25);
  v26 = a3[8];
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  v30 = v28[1];
  sub_1000991CC(*v28, v30);
  v31 = *v27;
  v32 = v27[1];
  *v27 = v29;
  v27[1] = v30;
  sub_100099394(v31, v32);
  v33 = a3[9];
  v34 = (uint64_t *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  v37 = v35[1];
  sub_1000991CC(*v35, v37);
  v38 = *v34;
  v39 = v34[1];
  *v34 = v36;
  v34[1] = v37;
  sub_100099394(v38, v39);
  v40 = a3[10];
  v41 = (uint64_t *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v43 = *v42;
  v44 = v42[1];
  sub_1000991CC(*v42, v44);
  v45 = *v41;
  v46 = v41[1];
  *v41 = v43;
  v41[1] = v44;
  sub_100099394(v45, v46);
  v47 = a3[11];
  v48 = (uint64_t *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v50 = *v49;
  v51 = v49[1];
  sub_1000991CC(*v49, v51);
  v52 = *v48;
  v53 = v48[1];
  *v48 = v50;
  v48[1] = v51;
  sub_100099394(v52, v53);
  v54 = a3[12];
  v55 = (uint64_t *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v57 = *v56;
  v58 = v56[1];
  sub_1000991CC(*v56, v58);
  v59 = *v55;
  v60 = v55[1];
  *v55 = v57;
  v55[1] = v58;
  sub_100099394(v59, v60);
  v61 = a3[13];
  v62 = (void *)(a1 + v61);
  v63 = (void *)(a2 + v61);
  *v62 = *v63;
  v64 = v63[1];
  v65 = v62[1];
  v62[1] = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  v66 = a3[14];
  v67 = (void *)(a1 + v66);
  v68 = (void *)(a2 + v66);
  *v67 = *v68;
  v69 = v68[1];
  v70 = v67[1];
  v67[1] = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  v71 = a3[15];
  v72 = (void *)(a1 + v71);
  v73 = (void *)(a2 + v71);
  *v72 = *v73;
  v74 = v73[1];
  v75 = v72[1];
  v72[1] = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  v76 = a3[16];
  v77 = (void *)(a1 + v76);
  v78 = (void *)(a2 + v76);
  *v77 = *v78;
  v79 = v78[1];
  v80 = v77[1];
  v77[1] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  v81 = a3[17];
  v82 = (void *)(a1 + v81);
  v83 = (void *)(a2 + v81);
  *v82 = *v83;
  v84 = v83[1];
  v85 = v82[1];
  v82[1] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  v86 = a3[18];
  v87 = (void *)(a1 + v86);
  v88 = (void *)(a2 + v86);
  *v87 = *v88;
  v89 = v88[1];
  v90 = v87[1];
  v87[1] = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v90);
  v91 = a3[19];
  v92 = (void *)(a1 + v91);
  v93 = (void *)(a2 + v91);
  *v92 = *v93;
  v94 = v93[1];
  v95 = v92[1];
  v92[1] = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95);
  v96 = a3[20];
  v97 = (void *)(a1 + v96);
  v98 = (void *)(a2 + v96);
  *v97 = *v98;
  v99 = v98[1];
  v100 = v97[1];
  v97[1] = v99;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRelease(v100);
  v101 = a3[21];
  v102 = (void *)(a1 + v101);
  v103 = (void *)(a2 + v101);
  *v102 = *v103;
  v104 = v103[1];
  v105 = v102[1];
  v102[1] = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  v106 = a3[22];
  v107 = (void *)(a1 + v106);
  v108 = (void *)(a2 + v106);
  *v107 = *v108;
  v109 = v108[1];
  v110 = v107[1];
  v107[1] = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  v111 = a3[23];
  v112 = (void *)(a1 + v111);
  v113 = (void *)(a2 + v111);
  *v112 = *v113;
  v114 = v113[1];
  v115 = v112[1];
  v112[1] = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  v116 = a3[24];
  v117 = (void *)(a1 + v116);
  v118 = (void *)(a2 + v116);
  *v117 = *v118;
  v119 = v118[1];
  v120 = v117[1];
  v117[1] = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  v121 = a3[25];
  v122 = (void *)(a1 + v121);
  v123 = (void *)(a2 + v121);
  *v122 = *v123;
  v124 = v123[1];
  v125 = v122[1];
  v122[1] = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125);
  v126 = a3[26];
  v127 = (void *)(a1 + v126);
  v128 = (void *)(a2 + v126);
  *v127 = *v128;
  v129 = v128[1];
  v130 = v127[1];
  v127[1] = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  v131 = a3[27];
  v132 = (void *)(a1 + v131);
  v133 = (void *)(a2 + v131);
  *v132 = *v133;
  v134 = v133[1];
  v135 = v132[1];
  v132[1] = v134;
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease(v135);
  v136 = a3[28];
  v137 = (void *)(a1 + v136);
  v138 = (void *)(a2 + v136);
  *v137 = *v138;
  v139 = v138[1];
  v140 = v137[1];
  v137[1] = v139;
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRelease(v140);
  v141 = a3[29];
  v142 = (void *)(a1 + v141);
  v143 = (void *)(a2 + v141);
  *v142 = *v143;
  v144 = v143[1];
  v145 = v142[1];
  v142[1] = v144;
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRelease(v145);
  v146 = a3[30];
  v147 = a1 + v146;
  v148 = a2 + v146;
  v149 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 24LL))(v147, v148, v149);
  return a1;
}

uint64_t sub_1000D6584(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[26];
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[29];
  uint64_t v20 = a3[30];
  __int128 v21 = *(_OWORD *)(a2 + v19);
  uint64_t v22 = a2 + v20;
  uint64_t v23 = a1 + v20;
  *(_OWORD *)(a1 + v19) = v21;
  uint64_t v24 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32LL))(v23, v22, v24);
  return a1;
}

uint64_t sub_1000D66F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100099394(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v11[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_100099394(v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void *)(a1 + v19);
  unint64_t v21 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_100099394(v20, v21);
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void *)(a1 + v22);
  unint64_t v24 = *(void *)(a1 + v22 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  sub_100099394(v23, v24);
  uint64_t v25 = a3[10];
  uint64_t v26 = *(void *)(a1 + v25);
  unint64_t v27 = *(void *)(a1 + v25 + 8);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  sub_100099394(v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = *(void *)(a1 + v28);
  unint64_t v30 = *(void *)(a1 + v28 + 8);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  sub_100099394(v29, v30);
  uint64_t v31 = a3[12];
  uint64_t v32 = *(void *)(a1 + v31);
  unint64_t v33 = *(void *)(a1 + v31 + 8);
  *(_OWORD *)(a1 + v31) = *(_OWORD *)(a2 + v31);
  sub_100099394(v32, v33);
  uint64_t v34 = a3[13];
  v35 = (void *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v39 = v35[1];
  void *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a3[14];
  v41 = (void *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  uint64_t v45 = v41[1];
  void *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a3[15];
  v47 = (void *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  uint64_t v51 = v47[1];
  void *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = a3[16];
  v53 = (void *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  uint64_t v57 = v53[1];
  void *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  uint64_t v58 = a3[17];
  v59 = (void *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  uint64_t v63 = v59[1];
  void *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = a3[18];
  v65 = (void *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  uint64_t v69 = v65[1];
  void *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  uint64_t v70 = a3[19];
  v71 = (void *)(a1 + v70);
  v72 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  uint64_t v75 = v71[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  uint64_t v76 = a3[20];
  v77 = (void *)(a1 + v76);
  v78 = (uint64_t *)(a2 + v76);
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  uint64_t v81 = v77[1];
  void *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  uint64_t v82 = a3[21];
  v83 = (void *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  uint64_t v86 = *v84;
  uint64_t v85 = v84[1];
  uint64_t v87 = v83[1];
  void *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  uint64_t v88 = a3[22];
  v89 = (void *)(a1 + v88);
  v90 = (uint64_t *)(a2 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  uint64_t v93 = v89[1];
  void *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  uint64_t v94 = a3[23];
  v95 = (void *)(a1 + v94);
  v96 = (uint64_t *)(a2 + v94);
  uint64_t v98 = *v96;
  uint64_t v97 = v96[1];
  uint64_t v99 = v95[1];
  void *v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = a3[24];
  v101 = (void *)(a1 + v100);
  v102 = (uint64_t *)(a2 + v100);
  uint64_t v104 = *v102;
  uint64_t v103 = v102[1];
  uint64_t v105 = v101[1];
  void *v101 = v104;
  v101[1] = v103;
  swift_bridgeObjectRelease(v105);
  uint64_t v106 = a3[25];
  v107 = (void *)(a1 + v106);
  v108 = (uint64_t *)(a2 + v106);
  uint64_t v110 = *v108;
  uint64_t v109 = v108[1];
  uint64_t v111 = v107[1];
  void *v107 = v110;
  v107[1] = v109;
  swift_bridgeObjectRelease(v111);
  uint64_t v112 = a3[26];
  v113 = (void *)(a1 + v112);
  v114 = (uint64_t *)(a2 + v112);
  uint64_t v116 = *v114;
  uint64_t v115 = v114[1];
  uint64_t v117 = v113[1];
  void *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease(v117);
  uint64_t v118 = a3[27];
  v119 = (void *)(a1 + v118);
  v120 = (uint64_t *)(a2 + v118);
  uint64_t v122 = *v120;
  uint64_t v121 = v120[1];
  uint64_t v123 = v119[1];
  void *v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease(v123);
  uint64_t v124 = a3[28];
  v125 = (void *)(a1 + v124);
  v126 = (uint64_t *)(a2 + v124);
  uint64_t v128 = *v126;
  uint64_t v127 = v126[1];
  uint64_t v129 = v125[1];
  void *v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease(v129);
  uint64_t v130 = a3[29];
  v131 = (void *)(a1 + v130);
  v132 = (uint64_t *)(a2 + v130);
  uint64_t v134 = *v132;
  uint64_t v133 = v132[1];
  uint64_t v135 = v131[1];
  void *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease(v135);
  uint64_t v136 = a3[30];
  uint64_t v137 = a1 + v136;
  uint64_t v138 = a2 + v136;
  uint64_t v139 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 40LL))(v137, v138, v139);
  return a1;
}

uint64_t sub_1000D6A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6A20);
}

uint64_t sub_1000D6A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 120);
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1000D6ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D6AD8);
}

uint64_t sub_1000D6AD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 120);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000D6B80(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1001A7CA0;
    v5[2] = &unk_1001A7CB8;
    v5[3] = &unk_1001A7CA0;
    v5[4] = &unk_1001A7CA0;
    v5[5] = &unk_1001A7CA0;
    v5[6] = &unk_1001A7CA0;
    v5[7] = &unk_1001A7CA0;
    v5[8] = &unk_1001A7CA0;
    v5[9] = &unk_1001A7CB8;
    v5[10] = &unk_1001A7CB8;
    v5[11] = &unk_1001A7CB8;
    v5[12] = &unk_1001A7CB8;
    v5[13] = &unk_1001A7CB8;
    v5[14] = &unk_1001A7CB8;
    v5[15] = &unk_1001A7CB8;
    v5[16] = &unk_1001A7CB8;
    v5[17] = &unk_1001A7CB8;
    v5[18] = &unk_1001A7CB8;
    v5[19] = &unk_1001A7CB8;
    v5[20] = &unk_1001A7CB8;
    v5[21] = &unk_1001A7CB8;
    v5[22] = &unk_1001A7CB8;
    v5[23] = &unk_1001A7CB8;
    v5[24] = &unk_1001A7CB8;
    v5[25] = &unk_1001A7CB8;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[26] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 27LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000D6C44(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100098C98( &qword_1002359D8,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)&unk_1001A7E74);
  uint64_t result = sub_100098C98( &qword_1002359E0,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)&unk_1001A7E4C);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000D6CA0()
{
  return sub_100098C98(&qword_1002359E8, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)&unk_1001A7CD0);
}

unint64_t sub_1000D6CD0()
{
  unint64_t result = qword_1002359F0;
  if (!qword_1002359F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001A7DE4,  &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError);
    atomic_store(result, (unint64_t *)&qword_1002359F0);
  }

  return result;
}

uint64_t sub_1000D6D14(uint64_t a1)
{
  uint64_t result = sub_100098C98( &qword_1002359F8,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)&unk_1001A7CF8);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D6D50()
{
  unint64_t result = qword_100235A08;
  if (!qword_100235A08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7F7C, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235A08);
  }

  return result;
}

uint64_t sub_1000D6D94(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1) & 1) == 0) {
    return 0LL;
  }
  unint64_t v4 = (int *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  sub_1000D53B8(*(void *)(a1 + v4[5]), *(void *)(a1 + v4[5] + 8));
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = v4[6];
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  BOOL v11 = v7 == *v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL) & 1) == 0) {
    return 0LL;
  }
  sub_1000D53B8(*(void *)(a1 + v4[7]), *(void *)(a1 + v4[7] + 8));
  if ((v12 & 1) == 0) {
    return 0LL;
  }
  sub_1000D53B8(*(void *)(a1 + v4[8]), *(void *)(a1 + v4[8] + 8));
  if ((v13 & 1) == 0) {
    return 0LL;
  }
  sub_1000D53B8(*(void *)(a1 + v4[9]), *(void *)(a1 + v4[9] + 8));
  if ((v14 & 1) == 0) {
    return 0LL;
  }
  sub_1000D53B8(*(void *)(a1 + v4[10]), *(void *)(a1 + v4[10] + 8));
  if ((v15 & 1) == 0) {
    return 0LL;
  }
  sub_1000D53B8(*(void *)(a1 + v4[11]), *(void *)(a1 + v4[11] + 8));
  if ((v16 & 1) == 0) {
    return 0LL;
  }
  sub_1000D53B8(*(void *)(a1 + v4[12]), *(void *)(a1 + v4[12] + 8));
  if ((v17 & 1) == 0) {
    return 0LL;
  }
  uint64_t v18 = v4[13];
  uint64_t v19 = *(void *)(a1 + v18);
  uint64_t v20 = *(void *)(a1 + v18 + 8);
  unint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  if ((v19 != *v21 || v20 != v22) && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v23 = v4[14];
  uint64_t v24 = *(void *)(a1 + v23);
  uint64_t v25 = *(void *)(a1 + v23 + 8);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  if ((v24 != *v26 || v25 != v27) && (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v28 = v4[15];
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v30 = *(void *)(a1 + v28 + 8);
  uint64_t v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  if ((v29 != *v31 || v30 != v32) && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, *v31, v32, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v33 = v4[16];
  uint64_t v34 = *(void *)(a1 + v33);
  uint64_t v35 = *(void *)(a1 + v33 + 8);
  v36 = (void *)(a2 + v33);
  uint64_t v37 = v36[1];
  if ((v34 != *v36 || v35 != v37) && (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, *v36, v37, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v38 = v4[17];
  uint64_t v39 = *(void *)(a1 + v38);
  uint64_t v40 = *(void *)(a1 + v38 + 8);
  v41 = (void *)(a2 + v38);
  uint64_t v42 = v41[1];
  if ((v39 != *v41 || v40 != v42) && (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, *v41, v42, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v43 = v4[18];
  uint64_t v44 = *(void *)(a1 + v43);
  uint64_t v45 = *(void *)(a1 + v43 + 8);
  uint64_t v46 = (void *)(a2 + v43);
  uint64_t v47 = v46[1];
  if ((v44 != *v46 || v45 != v47) && (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, *v46, v47, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v48 = v4[19];
  uint64_t v49 = *(void *)(a1 + v48);
  uint64_t v50 = *(void *)(a1 + v48 + 8);
  uint64_t v51 = (void *)(a2 + v48);
  uint64_t v52 = v51[1];
  if ((v49 != *v51 || v50 != v52) && (_stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v51, v52, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v53 = v4[20];
  uint64_t v54 = *(void *)(a1 + v53);
  uint64_t v55 = *(void *)(a1 + v53 + 8);
  uint64_t v56 = (void *)(a2 + v53);
  uint64_t v57 = v56[1];
  if ((v54 != *v56 || v55 != v57) && (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, *v56, v57, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v58 = v4[21];
  uint64_t v59 = *(void *)(a1 + v58);
  uint64_t v60 = *(void *)(a1 + v58 + 8);
  uint64_t v61 = (void *)(a2 + v58);
  uint64_t v62 = v61[1];
  if ((v59 != *v61 || v60 != v62) && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *v61, v62, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v63 = v4[22];
  uint64_t v64 = *(void *)(a1 + v63);
  uint64_t v65 = *(void *)(a1 + v63 + 8);
  v66 = (void *)(a2 + v63);
  uint64_t v67 = v66[1];
  if ((v64 != *v66 || v65 != v67) && (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, *v66, v67, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v68 = v4[23];
  uint64_t v69 = *(void *)(a1 + v68);
  uint64_t v70 = *(void *)(a1 + v68 + 8);
  v71 = (void *)(a2 + v68);
  uint64_t v72 = v71[1];
  if ((v69 != *v71 || v70 != v72) && (_stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, *v71, v72, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v73 = v4[24];
  uint64_t v74 = *(void *)(a1 + v73);
  uint64_t v75 = *(void *)(a1 + v73 + 8);
  uint64_t v76 = (void *)(a2 + v73);
  uint64_t v77 = v76[1];
  if ((v74 != *v76 || v75 != v77) && (_stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, *v76, v77, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v78 = v4[25];
  uint64_t v79 = *(void *)(a1 + v78);
  uint64_t v80 = *(void *)(a1 + v78 + 8);
  uint64_t v81 = (void *)(a2 + v78);
  uint64_t v82 = v81[1];
  if ((v79 != *v81 || v80 != v82) && (_stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, *v81, v82, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v83 = v4[26];
  uint64_t v84 = *(void *)(a1 + v83);
  uint64_t v85 = *(void *)(a1 + v83 + 8);
  uint64_t v86 = (void *)(a2 + v83);
  uint64_t v87 = v86[1];
  if ((v84 != *v86 || v85 != v87) && (_stringCompareWithSmolCheck(_:_:expecting:)(v84, v85, *v86, v87, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v88 = v4[27];
  uint64_t v89 = *(void *)(a1 + v88);
  uint64_t v90 = *(void *)(a1 + v88 + 8);
  uint64_t v91 = (void *)(a2 + v88);
  uint64_t v92 = v91[1];
  if ((v89 != *v91 || v90 != v92) && (_stringCompareWithSmolCheck(_:_:expecting:)(v89, v90, *v91, v92, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v93 = v4[28];
  uint64_t v94 = *(void *)(a1 + v93);
  uint64_t v95 = *(void *)(a1 + v93 + 8);
  v96 = (void *)(a2 + v93);
  uint64_t v97 = v96[1];
  if ((v94 != *v96 || v95 != v97) && (_stringCompareWithSmolCheck(_:_:expecting:)(v94, v95, *v96, v97, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v98 = v4[29];
  uint64_t v99 = *(void *)(a1 + v98);
  uint64_t v100 = *(void *)(a1 + v98 + 8);
  v101 = (void *)(a2 + v98);
  uint64_t v102 = v101[1];
  if (v99 == *v101 && v100 == v102) {
    return static Date.== infix(_:_:)(a1 + v4[30], a2 + v4[30]);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v99, v100, *v101, v102, 0LL) & 1) != 0) {
    return static Date.== infix(_:_:)(a1 + v4[30], a2 + v4[30]);
  }
  else {
    return 0LL;
  }
}

uint64_t getEnumTagSinglePayload for MagicPairingSettingsRecord.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

uint64_t storeEnumTagSinglePayload for MagicPairingSettingsRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE5) {
    return ((uint64_t (*)(void))((char *)&loc_1000D72EC + 4 * byte_1001A7C4A[v4]))();
  }
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_1000D7320 + 4 * byte_1001A7C45[v4]))();
}

uint64_t sub_1000D7320(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D7330LL);
  }
  return result;
}

uint64_t sub_1000D733C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D7344LL);
  }
  *(_BYTE *)unint64_t result = a2 + 26;
  return result;
}

uint64_t sub_1000D7348(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7350(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicPairingSettingsRecord.CodingKeys()
{
  return &type metadata for MagicPairingSettingsRecord.CodingKeys;
}

unint64_t sub_1000D7370()
{
  unint64_t result = qword_100235A38;
  if (!qword_100235A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7F54, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235A38);
  }

  return result;
}

unint64_t sub_1000D73B8()
{
  unint64_t result = qword_100235A40;
  if (!qword_100235A40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7EC4, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235A40);
  }

  return result;
}

unint64_t sub_1000D7400()
{
  unint64_t result = qword_100235A48;
  if (!qword_100235A48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7EEC, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235A48);
  }

  return result;
}

uint64_t sub_1000D7444(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v7 = 0xED00006174616461LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x654B72657473616DLL && a2 == 0xE900000000000079LL)
  {
    unint64_t v9 = 0xE900000000000079LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B72657473616DLL, 0xE900000000000079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x694872657473616DLL && a2 == 0xEA0000000000746ELL)
  {
    unint64_t v10 = 0xEA0000000000746ELL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x694872657473616DLL, 0xEA0000000000746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x726F737365636361LL && a2 == 0xEC00000079654B79LL)
  {
    unint64_t v11 = 0xEC00000079654B79LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361LL, 0xEC00000079654B79LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x726F737365636361LL && a2 == 0xED0000746E694879LL)
  {
    unint64_t v12 = 0xED0000746E694879LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361LL, 0xED0000746E694879LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 7041641 && a2 == 0xE300000000000000LL)
  {
    unint64_t v13 = 0xE300000000000000LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7041641LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0x6974707972636E65LL && a2 == 0xED000079654B6E6FLL)
  {
    unint64_t v14 = 0xED000079654B6E6FLL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974707972636E65LL, 0xED000079654B6E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_55;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v15 = 0xE900000000000044LL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_61;
  }

  if (a1 == 0x4449726F646E6576LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v16 = 0xE800000000000000LL;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F646E6576LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_67;
  }

  if (a1 == 0x6F4D6E6F74747562LL && a2 == 0xEB00000000736564LL)
  {
    unint64_t v17 = 0xEB00000000736564LL;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4D6E6F74747562LL, 0xEB00000000736564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_73;
  }

  if (a1 == 0x726F6C6F63LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v18 = 0xE500000000000000LL;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_79;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v19 = 0x80000001001CDB80LL;
    if (a2 == 0x80000001001CDB80LL) {
      goto LABEL_84;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001001CDB80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v20 = 0x80000001001CDBA0LL;
    if (a2 == 0x80000001001CDBA0LL) {
      goto LABEL_89;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001001CDBA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v21 = 0x80000001001CDBC0LL;
    if (a2 == 0x80000001001CDBC0LL) {
      goto LABEL_94;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001CDBC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_94:
    swift_bridgeObjectRelease(v21);
    return 15LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001001CDBE0LL)
  {
    unint64_t v22 = 0x80000001001CDBE0LL;
LABEL_100:
    swift_bridgeObjectRelease(v22);
    return 16LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CDBE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
    goto LABEL_100;
  }

  if (a1 == 0x416C616974617073LL && a2 == 0xEC0000006F696475LL)
  {
    unint64_t v23 = 0xEC0000006F696475LL;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 17LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x416C616974617073LL, 0xEC0000006F696475LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
    goto LABEL_106;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x80000001001CDC00LL)
  {
    unint64_t v24 = 0x80000001001CDC00LL;
LABEL_112:
    swift_bridgeObjectRelease(v24);
    return 18LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001001CDC00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
    goto LABEL_112;
  }

  if (a1 == 0xD000000000000022LL && a2 == 0x80000001001CDC20LL)
  {
    unint64_t v25 = 0x80000001001CDC20LL;
LABEL_118:
    swift_bridgeObjectRelease(v25);
    return 19LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x80000001001CDC20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v25 = a2;
    goto LABEL_118;
  }

  if (a1 == 0x74656863746172LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v26 = 0xE700000000000000LL;
LABEL_124:
    swift_bridgeObjectRelease(v26);
    return 20LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74656863746172LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
    goto LABEL_124;
  }

  if (a1 == 0x6465767265736572LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v27 = 0xE800000000000000LL;
LABEL_130:
    swift_bridgeObjectRelease(v27);
    return 21LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465767265736572LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v27 = a2;
    goto LABEL_130;
  }

  if (a1 == 0x73676E6974746573LL && a2 == 0xEC0000006B73614DLL)
  {
    unint64_t v28 = 0xEC0000006B73614DLL;
LABEL_136:
    swift_bridgeObjectRelease(v28);
    return 22LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73676E6974746573LL, 0xEC0000006B73614DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
    goto LABEL_136;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v29 = 0x80000001001CDC50LL;
    if (a2 == 0x80000001001CDC50LL) {
      goto LABEL_141;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001CDC50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
LABEL_141:
    swift_bridgeObjectRelease(v29);
    return 23LL;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v30 = 0xE700000000000000LL;
LABEL_147:
    swift_bridgeObjectRelease(v30);
    return 24LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
    goto LABEL_147;
  }

  if (a1 == 0x6552746E65726170LL && a2 == 0xEC00000064726F63LL)
  {
    unint64_t v31 = 0xEC00000064726F63LL;
LABEL_153:
    swift_bridgeObjectRelease(v31);
    return 25LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552746E65726170LL, 0xEC00000064726F63LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v31 = a2;
    goto LABEL_153;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 26LL;
  }

  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v32 & 1) != 0) {
      return 26LL;
    }
    else {
      return 27LL;
    }
  }

uint64_t sub_1000D7F54()
{
  uint64_t result = sub_1000D8CF8((uint64_t)v1, (uint64_t)v2, &qword_100235A68);
  if (*((void *)&v2[0] + 1))
  {
    xmmword_10023DDA8 = v2[2];
    *(_OWORD *)&byte_10023DDB8 = v2[3];
    xmmword_10023DDC8 = v2[4];
    xmmword_10023DD88 = v2[0];
    *(_OWORD *)&qword_10023DD98 = v2[1];
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000D7FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D8CF8((uint64_t)v4, a2, &qword_100235A68);
}

uint64_t sub_1000D800C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000D8018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000D90A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000D8074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000D90A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000D80C4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1000D8CF8((uint64_t)v6, (uint64_t)v7, &qword_100235A68);
  if (*((void *)&v7[0] + 1))
  {
    __int128 v4 = v7[3];
    a2[2] = v7[2];
    a2[3] = v4;
    a2[4] = v7[4];
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000D8130(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D88EC(v8, v9) & 1;
}

BOOL sub_1000D8188(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D81E0(v8, v9);
}

BOOL sub_1000D81E0(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  BOOL v4 = v2 < v3;
  if (v2 == v3)
  {
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    BOOL v11 = v7 == v9 && v8 == v10;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a2[3], a2[4], v9, v10, 0LL) & 1) == 0)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL);
      return (v20 & 1) == 0;
    }

    uint64_t v12 = a2[7];
    uint64_t v13 = a1[7];
    BOOL v4 = v12 < v13;
    if (v12 == v13)
    {
      uint64_t v14 = a2[9];
      if (v14)
      {
        uint64_t v15 = a2[8];
        unint64_t v16 = a2[9];
        unint64_t v17 = a1[9];
        if (v17) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v15 = 0LL;
        unint64_t v16 = 0xE000000000000000LL;
        unint64_t v17 = a1[9];
        if (v17)
        {
LABEL_10:
          uint64_t v18 = a1[8];
          unint64_t v19 = v17;
          if (v15 != v18) {
            goto LABEL_20;
          }
LABEL_18:
          if (v16 == v19)
          {
            char v20 = 0;
LABEL_21:
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v14);
            swift_bridgeObjectRelease(v16);
            swift_bridgeObjectRelease(v19);
            return (v20 & 1) == 0;
          }

BOOL sub_1000D8320(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D8378(v8, v9);
}

BOOL sub_1000D8378(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = v2 < v3;
  if (v2 == v3)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    BOOL v11 = v7 == v9 && v8 == v10;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1[3], v8, v9, v10, 0LL) & 1) == 0)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL);
      return (v20 & 1) == 0;
    }

    uint64_t v12 = a1[7];
    uint64_t v13 = a2[7];
    BOOL v4 = v12 < v13;
    if (v12 == v13)
    {
      uint64_t v14 = a1[9];
      if (v14)
      {
        uint64_t v15 = a1[8];
        unint64_t v16 = a1[9];
        unint64_t v17 = a2[9];
        if (v17) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v15 = 0LL;
        unint64_t v16 = 0xE000000000000000LL;
        unint64_t v17 = a2[9];
        if (v17)
        {
LABEL_10:
          uint64_t v18 = a2[8];
          unint64_t v19 = v17;
          if (v15 != v18) {
            goto LABEL_20;
          }
LABEL_18:
          if (v16 == v19)
          {
            char v20 = 0;
LABEL_21:
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v14);
            swift_bridgeObjectRelease(v16);
            swift_bridgeObjectRelease(v19);
            return (v20 & 1) == 0;
          }

uint64_t sub_1000D84B8(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D8510(v8, v9) & 1;
}

uint64_t sub_1000D8510(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  BOOL v4 = v2 < v3;
  if (v2 != v3) {
    goto LABEL_12;
  }
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  BOOL v11 = v7 == v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a2[3], a2[4], v9, v10, 0LL) & 1) == 0) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL);
  }
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  BOOL v4 = v12 < v13;
  if (v12 != v13)
  {
LABEL_12:
    char v20 = v4;
    return v20 & 1;
  }

  uint64_t v14 = a2[9];
  if (v14)
  {
    uint64_t v15 = a2[8];
    unint64_t v16 = a2[9];
    unint64_t v17 = a1[9];
    if (v17) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
    unint64_t v17 = a1[9];
    if (v17)
    {
LABEL_10:
      uint64_t v18 = a1[8];
      unint64_t v19 = v17;
      if (v15 != v18) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }

  uint64_t v18 = 0LL;
  unint64_t v19 = 0xE000000000000000LL;
  if (v15)
  {
LABEL_20:
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1LL);
    goto LABEL_21;
  }

uint64_t sub_1000D8654(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL);
  }
}

uint64_t sub_1000D8684()
{
  uint64_t v1 = v0;
  sub_1000D8CF8(v0 + 40, (uint64_t)v19, &qword_100235A58);
  sub_1000D8CF8((uint64_t)v19, (uint64_t)&v20, &qword_100235A58);
  if ((v21 & 1) != 0)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (void *)0xE000000000000000LL;
  }

  else
  {
    uint64_t v22 = v20;
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v3 = v4;
  }

  sub_1000D8CF8(v0 + 64, (uint64_t)v18, &qword_100235A60);
  sub_1000D8CF8((uint64_t)v18, (uint64_t)&v22, &qword_100235A60);
  if (v23)
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
    Character.write<A>(to:)( &v16,  v22,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v6 = v16;
    uint64_t v5 = (void *)v17;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = (void *)0xE000000000000000LL;
  }

  uint64_t v16 = 0LL;
  unint64_t v17 = 0xE000000000000000LL;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain(v10);
  Character.write<A>(to:)( &v16,  v9,  v10,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = v2;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v3);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = v6;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v5);
  return v16;
}

uint64_t sub_1000D8864()
{
  return sub_1000D8684();
}

unint64_t sub_1000D88A8()
{
  unint64_t result = qword_100235A50;
  if (!qword_100235A50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A7FF8, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100235A50);
  }

  return result;
}

uint64_t sub_1000D88EC(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = v2 < v3;
  if (v2 != v3) {
    goto LABEL_12;
  }
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  BOOL v11 = v7 == v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1[3], v8, v9, v10, 0LL) & 1) == 0) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL);
  }
  uint64_t v12 = a1[7];
  uint64_t v13 = a2[7];
  BOOL v4 = v12 < v13;
  if (v12 != v13)
  {
LABEL_12:
    char v20 = v4;
    return v20 & 1;
  }

  uint64_t v14 = a1[9];
  if (v14)
  {
    uint64_t v15 = a1[8];
    unint64_t v16 = a1[9];
    unint64_t v17 = a2[9];
    if (v17) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
    unint64_t v17 = a2[9];
    if (v17)
    {
LABEL_10:
      uint64_t v18 = a2[8];
      unint64_t v19 = v17;
      if (v15 != v18) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }

  uint64_t v18 = 0LL;
  unint64_t v19 = 0xE000000000000000LL;
  if (v15)
  {
LABEL_20:
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1LL);
    goto LABEL_21;
  }

uint64_t sub_1000D8A30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NSScanner.NumberRepresentation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = objc_allocWithZone(&OBJC_CLASS___NSScanner);
  swift_bridgeObjectRetain(a2);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = [v10 initWithString:v11];

  uint64_t v13 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v14(v9, enum case for NSScanner.NumberRepresentation.decimal(_:), v6);
  uint64_t v39 = NSScanner.scanInt(representation:)(v9);
  char v16 = v15;
  unint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  if ((v16 & 1) != 0)
  {

    goto LABEL_19;
  }

  Swift::String_optional v18 = NSScanner.scanCharacter()();
  object = v18.value._object;
  if (v18.value._object)
  {
    uint64_t countAndFlagsBits = v18.value._countAndFlagsBits;
    v14(v9, v13, v6);
    uint64_t v20 = NSScanner.scanInt(representation:)(v9);
    char v22 = v21;
    v17(v9, v6);
    if ((v22 & 1) == 0)
    {
      if (v20 >= 1000) {
        unint64_t v23 = v20 % 0x3E8uLL;
      }
      else {
        unint64_t v23 = v20;
      }
      if (v20 >= 1000) {
        unint64_t v24 = v20 / 0x3E8uLL;
      }
      else {
        unint64_t v24 = 0LL;
      }
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v18.value._object);
      Swift::String_optional v25 = NSScanner.scanCharacter()();
      uint64_t v26 = v25.value._countAndFlagsBits;
      unint64_t v27 = v25.value._object;
      uint64_t v28 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000LL) == 0) {
        uint64_t v28 = a1;
      }
      uint64_t v29 = 7LL;
      if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
        uint64_t v29 = 11LL;
      }
      uint64_t v37 = v29 | (v28 << 16);
      uint64_t v30 = swift_bridgeObjectRetain(v25.value._object);
      uint64_t v31 = NSScanner.currentIndex.getter(v30);
      uint64_t v37 = String.distance(from:to:)(v37, v31, a1, a2);

      if (!v37)
      {
        BOOL v35 = v20 < 1000;
        swift_bridgeObjectRelease(v25.value._object);
        swift_bridgeObjectRelease(v18.value._object);
        uint64_t result = swift_bridgeObjectRelease(a2);
        uint64_t v34 = countAndFlagsBits;
        uint64_t v33 = v39;
        goto LABEL_22;
      }

      swift_bridgeObjectRelease_n(v18.value._object, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
      uint64_t result = swift_bridgeObjectRelease_n(v25.value._object, 2LL);
      goto LABEL_20;
    }

    swift_bridgeObjectRelease(v18.value._object);
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a2);
LABEL_20:
    a1 = 0LL;
    a2 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    object = 0LL;
    goto LABEL_21;
  }

  uint64_t result = swift_bridgeObjectRelease(a2);
  a1 = 0LL;
  a2 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
LABEL_21:
  unint64_t v24 = 0LL;
  BOOL v35 = 0LL;
  unint64_t v23 = 0LL;
  uint64_t v26 = 0LL;
  unint64_t v27 = 0LL;
LABEL_22:
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v33;
  a3[3] = v34;
  a3[4] = (uint64_t)object;
  a3[5] = v24;
  a3[6] = v35;
  a3[7] = v23;
  a3[8] = v26;
  a3[9] = (uint64_t)v27;
  return result;
}

uint64_t sub_1000D8CF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100098CD8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemVersionNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SystemVersionNumber(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemVersionNumber(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SystemVersionNumber()
{
  return &type metadata for SystemVersionNumber;
}

void *sub_1000D8FF0()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D9000()
{
  unint64_t result = qword_100235A70;
  if (!qword_100235A70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8094, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100235A70);
  }

  return result;
}

void *sub_1000D9044()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D9054()
{
  unint64_t result = qword_100235A78;
  if (!qword_100235A78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A80CC, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100235A78);
  }

  return result;
}

void *sub_1000D9098()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D90A4()
{
  unint64_t result = qword_100235A80;
  if (!qword_100235A80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A819C, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100235A80);
  }

  return result;
}

uint64_t sub_1000D90E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v32 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v32);
  uint64_t v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __n128 v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL, v6);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v13);
  char v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.init(string:)(0x736E656B6F544B43LL, 0xE800000000000000LL);
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))( v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_ckTokenBaseURL,  v15,  v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))( v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL,  a1,  v16);
    unint64_t v29 = sub_1000CAEDC();
    v19._uint64_t countAndFlagsBits = URL.lastPathComponent.getter(v29);
    uint64_t v30 = a1;
    object = v19._object;
    uint64_t v33 = (void *)0xD00000000000002FLL;
    unint64_t v34 = 0x80000001001CE090LL;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    char v21 = v33;
    unint64_t v22 = v34;
    uint64_t v23 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v9);
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_100098C98( (unint64_t *)&unk_100237030,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235870);
    unint64_t v26 = sub_1000DB8E8();
    unint64_t v27 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v32, v24);
    uint64_t v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v21, v22, v8, v27, v12, 0LL);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v30, v16);
    *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue) = v28;
    return v2;
  }

  return result;
}

uint64_t sub_1000D93A8(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = a2;
  uint64_t v4 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v122 - v13;
  id v15 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if (!(_DWORD)v15)
  {
    uint64_t v31 = static os_log_type_t.error.getter(v15);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_21;
  }

  uint64_t v129 = v5;
  v131 = v7;
  uint64_t v132 = v9;
  id v128 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v16 = [v128 defaultManager];
  uint64_t v133 = a1;
  URL.path.getter(v17);
  uint64_t v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  unsigned int v21 = [v16 fileExistsAtPath:v20];

  if (v21)
  {
    uint64_t v22 = static URL.== infix(_:_:)(v133, v134);
    if ((v22 & 1) != 0)
    {
      uint64_t v23 = static os_log_type_t.info.getter(v22);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v24 = qword_10023DFD0;
      uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
      *(_OWORD *)(v26 + 16) = xmmword_1001A5EA0;
      uint64_t v27 = URL.path.getter((__n128)xmmword_1001A5EA0);
      uint64_t v29 = v28;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 64) = sub_10009914C();
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Skipping file already exists at: %@", 35LL, 2LL, v26);
      return swift_bridgeObjectRelease(v26);
    }
  }

  uint64_t v32 = URL.pathExtension.getter();
  uint64_t v34 = v33;
  uint64_t v35 = String.count.getter(v32);
  uint64_t v36 = swift_bridgeObjectRelease(v34);
  if (v35 < 1)
  {
    uint64_t v89 = static os_log_type_t.error.getter(v36);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v89,  &_mh_execute_header,  qword_10023DFD0,  "Invalid filename, missing file extension",  40LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_21:
    unint64_t v90 = sub_1000DB8A4();
    uint64_t v91 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v90, 0LL, 0LL);
    *uint64_t v92 = 0x8000000000000010LL;
    return swift_willThrow(v91);
  }

  uint64_t v123 = v4;
  uint64_t v125 = v2;
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 16))(v14, v133, v8);
  uint64_t Path = URL.deletingLastPathComponent()(v37);
  uint64_t v39 = static os_log_type_t.default.getter(Path);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  uint64_t v127 = v14;
  uint64_t v40 = qword_10023DFD0;
  uint64_t v126 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v41 = swift_allocObject(v126, 72LL, 7LL);
  __int128 v130 = xmmword_1001A5EA0;
  *(_OWORD *)(v41 + 16) = xmmword_1001A5EA0;
  uint64_t v42 = URL.path.getter((__n128)xmmword_1001A5EA0);
  uint64_t v44 = v43;
  *(void *)(v41 + 56) = &type metadata for String;
  unint64_t v45 = sub_10009914C();
  *(void *)(v41 + 64) = v45;
  *(void *)(v41 + 32) = v42;
  *(void *)(v41 + 40) = v44;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Creating file directory: %@", 27LL, 2LL, v41);
  swift_bridgeObjectRelease(v41);
  if (qword_100234B38 != -1) {
    swift_once(&qword_100234B38, sub_10009AD40);
  }
  uint64_t v46 = qword_10023DCD8;
  swift_bridgeObjectRetain(qword_10023DCD8);
  uint64_t v122 = v11;
  sub_10009ADB8();
  uint64_t v47 = swift_bridgeObjectRelease(v46);
  URLResourceValues.init()(v47);
  uint64_t v48 = URLResourceValues.isExcludedFromBackup.setter(1LL);
  uint64_t v49 = static os_log_type_t.info.getter(v48);
  uint64_t v50 = qword_10023DFD0;
  uint64_t v51 = v126;
  uint64_t v52 = swift_allocObject(v126, 72LL, 7LL);
  *(_OWORD *)(v52 + 16) = v130;
  uint64_t v53 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v8, v53);
  *(void *)(v52 + 56) = &type metadata for String;
  *(void *)(v52 + 64) = v45;
  *(void *)(v52 + 32) = v54;
  *(void *)(v52 + 40) = v55;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Moving asset from: %@", 21LL, 2LL, v52);
  uint64_t v56 = swift_bridgeObjectRelease(v52);
  uint64_t v57 = static os_log_type_t.info.getter(v56);
  uint64_t v58 = qword_10023DFD0;
  uint64_t v59 = swift_allocObject(v51, 72LL, 7LL);
  *(_OWORD *)(v59 + 16) = v130;
  uint64_t v124 = v8;
  uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v8, v53);
  *(void *)(v59 + 56) = &type metadata for String;
  *(void *)(v59 + 64) = v45;
  *(void *)(v59 + 32) = v60;
  *(void *)(v59 + 40) = v61;
  os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Moving asset to: %@", 19LL, 2LL, v59);
  swift_bridgeObjectRelease(v59);
  id v62 = v128;
  id v63 = [v128 defaultManager];
  URL.path.getter(v64);
  uint64_t v66 = v65;
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  LODWORD(v66) = [v63 fileExistsAtPath:v67];

  if ((_DWORD)v66)
  {
    uint64_t v69 = static os_log_type_t.info.getter(v68);
    uint64_t v70 = qword_10023DFD0;
    uint64_t v71 = swift_allocObject(v126, 72LL, 7LL);
    __n128 v72 = (__n128)v130;
    *(_OWORD *)(v71 + 16) = v130;
    uint64_t v73 = URL.path.getter(v72);
    *(void *)(v71 + 56) = &type metadata for String;
    *(void *)(v71 + 64) = v45;
    *(void *)(v71 + 32) = v73;
    *(void *)(v71 + 40) = v74;
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "File already exists replace at: %@", 34LL, 2LL, v71);
    swift_bridgeObjectRelease(v71);
    id v75 = [v62 defaultManager];
    uint64_t v76 = v127;
    URL._bridgeToObjectiveC()(v77);
    uint64_t v79 = v78;
    URL._bridgeToObjectiveC()(v80);
    uint64_t v82 = v81;
    id v135 = 0LL;
    unsigned __int8 v83 = [v75 replaceItemAtURL:v79 withItemAtURL:v81 backupItemName:0 options:0 resultingItemURL:0 error:&v135];

    id v84 = v135;
    if ((v83 & 1) == 0)
    {
LABEL_17:
      id v85 = v84;
      _convertNSErrorToError(_:)(v84);

      swift_willThrow(v86);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v131, v123);
      uint64_t v87 = *(void (**)(char *, uint64_t))(v132 + 8);
      uint64_t v88 = v124;
      v87(v122, v124);
      return ((uint64_t (*)(char *, uint64_t))v87)(v76, v88);
    }
  }

  else
  {
    id v93 = [v62 defaultManager];
    URL._bridgeToObjectiveC()(v94);
    v96 = v95;
    uint64_t v76 = v127;
    URL._bridgeToObjectiveC()(v97);
    uint64_t v99 = v98;
    id v135 = 0LL;
    unsigned int v100 = [v93 moveItemAtURL:v96 toURL:v98 error:&v135];

    id v84 = v135;
    if (!v100) {
      goto LABEL_17;
    }
  }

  uint64_t v101 = v124;
  id v102 = v84;
  uint64_t v103 = sub_100098CD8(&qword_100235BD8);
  uint64_t inited = swift_initStackObject(v103, v136);
  *(_OWORD *)(inited + 16) = v130;
  *(void *)(inited + 32) = NSFileProtectionKey;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v105 = NSFileProtectionKey;
  uint64_t v106 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  unint64_t v107 = sub_10009EFF0(inited);
  id v108 = [v62 defaultManager];
  uint64_t v109 = sub_1001382AC(v107);
  swift_bridgeObjectRelease(v107);
  type metadata accessor for FileAttributeKey(0LL);
  sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v109);
  URL.path.getter(v111);
  uint64_t v113 = v112;
  NSString v114 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v113);
  id v135 = 0LL;
  unsigned int v115 = [v108 setAttributes:isa ofItemAtPath:v114 error:&v135];

  id v116 = v135;
  if (v115)
  {
    id v117 = v135;
    uint64_t v118 = v131;
    URL.setResourceValues(_:)(v131);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v118, v123);
  }

  else
  {
    id v119 = v135;
    _convertNSErrorToError(_:)(v116);

    swift_willThrow(v120);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v131, v123);
  }

  uint64_t v121 = *(void (**)(char *, uint64_t))(v132 + 8);
  v121(v122, v101);
  return ((uint64_t (*)(char *, uint64_t))v121)(v76, v101);
}

uint64_t sub_1000D9D70@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  id v63 = a2;
  __n128 v64 = a4;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v13 = objc_autoreleasePoolPush();
  uint64_t v61 = a3;
  uint64_t v15 = URL.path.getter(v14);
  uint64_t v17 = v16;
  URL.appendingPathComponent(_:)(v15);
  swift_bridgeObjectRelease(v17);
  URL.appendingPathComponent(_:)(a1);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v19 = v6;
  NSString v20 = v12;
  v18(v9, v6);
  objc_autoreleasePoolPop(v13);
  unsigned int v21 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v22 = [v21 defaultManager];
  URL.path.getter(v23);
  uint64_t v25 = v24;
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  LODWORD(v25) = [v22 fileExistsAtPath:v26];

  if (!(_DWORD)v25)
  {
LABEL_6:
    char v42 = 1;
    goto LABEL_10;
  }

  id v27 = [v21 defaultManager];
  URL._bridgeToObjectiveC()(v28);
  uint64_t v30 = v29;
  id v65 = 0LL;
  unsigned int v31 = [v27 removeItemAtURL:v29 error:&v65];

  id v32 = v65;
  if (v31)
  {
    LODWORD(v63) = static os_log_type_t.default.getter(v65);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v60 = qword_10023DFD0;
    uint64_t v33 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v34 = swift_allocObject(v33, 112LL, 7LL);
    *(_OWORD *)(v34 + 16) = xmmword_1001A6F30;
    uint64_t v35 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v19, v35);
    uint64_t v38 = v37;
    *(void *)(v34 + 56) = &type metadata for String;
    unint64_t v39 = sub_10009914C();
    *(void *)(v34 + 64) = v39;
    *(void *)(v34 + 32) = v36;
    *(void *)(v34 + 40) = v38;
    uint64_t v40 = URL.lastPathComponent.getter(v39);
    *(void *)(v34 + 96) = &type metadata for String;
    *(void *)(v34 + 104) = v39;
    *(void *)(v34 + 72) = v40;
    *(void *)(v34 + 80) = v41;
    os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v60, "Deleted record %@ from %@", 25LL, 2LL, v34);
    swift_bridgeObjectRelease(v34);
    goto LABEL_6;
  }

  uint64_t v62 = v19;
  id v63 = v20;
  id v43 = v65;
  uint64_t v44 = (void *)_convertNSErrorToError(_:)(v32);

  uint64_t v46 = swift_willThrow(v45);
  uint64_t v47 = static os_log_type_t.default.getter(v46);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  uint64_t v48 = qword_10023DFD0;
  uint64_t v49 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v50 = swift_allocObject(v49, 112LL, 7LL);
  *(_OWORD *)(v50 + 16) = xmmword_1001A6F30;
  id v65 = v44;
  swift_errorRetain(v44);
  uint64_t v51 = sub_100098CD8(&qword_1002357C0);
  uint64_t v52 = String.init<A>(describing:)(&v65, v51);
  uint64_t v54 = v53;
  *(void *)(v50 + 56) = &type metadata for String;
  unint64_t v55 = sub_10009914C();
  *(void *)(v50 + 64) = v55;
  *(void *)(v50 + 32) = v52;
  *(void *)(v50 + 40) = v54;
  uint64_t v56 = URL.lastPathComponent.getter(v55);
  *(void *)(v50 + 96) = &type metadata for String;
  *(void *)(v50 + 104) = v55;
  *(void *)(v50 + 72) = v56;
  *(void *)(v50 + 80) = v57;
  os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Could not delete record %@ from %@", 34LL, 2LL, v50);
  swift_bridgeObjectRelease(v50);
  swift_errorRelease(v44);
  char v42 = 0;
  uint64_t v19 = v62;
  NSString v20 = v63;
LABEL_10:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v20, v19);
  *__n128 v64 = v42;
  return result;
}

uint64_t sub_1000DA1AC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v6 + 104))( v9,  enum case for DispatchPredicate.onQueue(_:),  v5,  v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    uint64_t v14 = URL.path.getter(v13);
    uint64_t v16 = v15;
    URL.appendingPathComponent(_:)(v14);
    swift_bridgeObjectRelease(v16);
    sub_10009B1B0();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000DA304()
{
  return 0LL;
}

uint64_t sub_1000DA468()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_10023DFD0,  "Purging sound profile data",  26LL,  2LL,  _swiftEmptyArrayStorage);
  if (qword_100234B48 != -1) {
    swift_once(&qword_100234B48, sub_1000A5118);
  }
  uint64_t v6 = sub_100098D58(v0, (uint64_t)qword_10023DD18);
  __n128 v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v7(v3, v6, v0);
  uint64_t v8 = sub_1000DA304();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  if (qword_100234B50 != -1) {
    swift_once(&qword_100234B50, sub_1000A513C);
  }
  uint64_t v10 = sub_100098D58(v0, (uint64_t)qword_10023DD30);
  v7(v3, v10, v0);
  uint64_t v11 = sub_1000DA304();
  swift_errorRelease(v8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v9)(v3, v0);
  if (v11) {
    return swift_willThrow(result);
  }
  return result;
}

uint64_t sub_1000DA620()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  unint64_t v39 = (char *)&v38[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v38[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38[-1] - v7;
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_10023DFD0,  "Purging local cache storage",  27LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v11 = sub_1000DA304();
  if (qword_100234B58 != -1) {
    swift_once(&qword_100234B58, sub_1000AA360);
  }
  uint64_t v12 = sub_100098D58(v2, (uint64_t)qword_10023DD48);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13(v8, v12, v2);
  uint64_t v14 = sub_1000DA304();
  swift_errorRelease(v11);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v8, v2);
  if (qword_100234B30 != -1) {
    swift_once(&qword_100234B30, sub_100094AFC);
  }
  uint64_t v16 = sub_100098D58(v2, (uint64_t)qword_10023DCC0);
  v13(v8, v16, v2);
  uint64_t v17 = sub_1000DA304();
  swift_errorRelease(v14);
  v15(v8, v2);
  if (qword_100234BC8 != -1) {
    swift_once(&qword_100234BC8, sub_1000E72E4);
  }
  uint64_t v18 = sub_100098D58(v2, (uint64_t)qword_10023DF00);
  v13(v8, v18, v2);
  uint64_t v19 = sub_1000DA304();
  swift_errorRelease(v17);
  v15(v8, v2);
  if (qword_100234BD0 != -1) {
    swift_once(&qword_100234BD0, sub_1000F0478);
  }
  uint64_t v20 = sub_100098D58(v2, (uint64_t)qword_10023DF18);
  v13(v8, v20, v2);
  uint64_t v21 = sub_1000DA304();
  swift_errorRelease(v19);
  v15(v8, v2);
  if (qword_100234B70 != -1) {
    swift_once(&qword_100234B70, sub_1000CAF84);
  }
  uint64_t v22 = sub_100098D58(v2, (uint64_t)qword_10023DD70);
  v13(v8, v22, v2);
  uint64_t v23 = sub_1000DA304();
  swift_errorRelease(v21);
  v15(v8, v2);
  if (qword_100234B48 != -1) {
    swift_once(&qword_100234B48, sub_1000A5118);
  }
  uint64_t v24 = sub_100098D58(v2, (uint64_t)qword_10023DD18);
  v13(v8, v24, v2);
  uint64_t v25 = sub_1000DA304();
  swift_errorRelease(v23);
  v15(v8, v2);
  if (qword_100234B50 != -1) {
    swift_once(&qword_100234B50, sub_1000A513C);
  }
  uint64_t v26 = sub_100098D58(v2, (uint64_t)qword_10023DD30);
  v13(v8, v26, v2);
  uint64_t v27 = sub_1000DA304();
  swift_errorRelease(v25);
  v15(v8, v2);
  uint64_t v28 = v39;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v28, 1LL, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v28, v2);
    uint64_t v30 = sub_1000DA304();
    swift_errorRelease(v27);
    v15(v5, v2);
    v38[3] = &type metadata for AudioAccessoryFeatures;
    v38[4] = sub_10009E740();
    LOBYTE(v38[0]) = 0;
    char v31 = isFeatureEnabled(_:)(v38);
    sub_10009A498(v38);
    if ((v31 & 1) != 0)
    {
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      uint64_t v32 = sub_100098D58(v2, (uint64_t)qword_10023DF40);
      v13(v8, v32, v2);
      uint64_t v33 = sub_1000DA304();
      swift_errorRelease(v30);
      v15(v8, v2);
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      uint64_t v34 = sub_100098D58(v2, (uint64_t)qword_10023DCE0);
      v13(v8, v34, v2);
      uint64_t v30 = sub_1000DA304();
      swift_errorRelease(v33);
      v15(v8, v2);
    }

    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    uint64_t v35 = sub_100098D58(v2, (uint64_t)qword_10023DE08);
    v13(v8, v35, v2);
    uint64_t v36 = sub_1000DA304();
    swift_errorRelease(v30);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v8, v2);
    if (v36) {
      return swift_willThrow(result);
    }
  }

  return result;
}

uint64_t sub_1000DAC54()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_10023DFD0,  "Purging Audio Accessory Zone data",  33LL,  2LL,  _swiftEmptyArrayStorage);
  if (qword_100234BF8 != -1) {
    swift_once(&qword_100234BF8, sub_100113FD8);
  }
  uint64_t v6 = sub_100098D58(v0, (uint64_t)qword_10023DF40);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v7(v3, v6, v0);
  uint64_t v8 = sub_1000DA304();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  if (qword_100234B40 != -1) {
    swift_once(&qword_100234B40, sub_10009F940);
  }
  uint64_t v10 = sub_100098D58(v0, (uint64_t)qword_10023DCE0);
  v7(v3, v10, v0);
  uint64_t v11 = sub_1000DA304();
  swift_errorRelease(v8);
  v9(v3, v0);
  if (qword_100234BC0 != -1) {
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }
  uint64_t v12 = sub_100098D58(v0, (uint64_t)qword_10023DE08);
  v7(v3, v12, v0);
  uint64_t v13 = sub_1000DA304();
  swift_errorRelease(v11);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v9)(v3, v0);
  if (v13) {
    return swift_willThrow(result);
  }
  return result;
}

uint64_t sub_1000DAE74()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v87 = (char *)v86 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v86 - v3;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v86[0] = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v86 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v86 - v12;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_10023DFD0,  "Obliterating all iCloud user's local storage",  44LL,  2LL,  _swiftEmptyArrayStorage);
  id v93 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v16 = [v93 defaultManager];
  v86[1] = type metadata accessor for DeviceStore(0LL);
  sub_100121DF8((uint64_t)v13);
  uint64_t v17 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v13, 0LL, 0LL, 0LL, 0LL);

  uint64_t v92 = *(void (**)(char *, uint64_t))(v6 + 8);
  v92(v13, v5);
  id v91 = v17;
  if (v17)
  {
    *(void *)&__int128 v90 = (char *)&type metadata for Any + 8;
    __int128 v89 = xmmword_1001A5EA0;
    while (1)
    {
      id v26 = [v91 nextObject];
      if (v26)
      {
        id v27 = v26;
        _bridgeAnyObjectToAny(_:)(&v94);
        swift_unknownObjectRelease(v27);
      }

      else
      {
        __int128 v94 = 0u;
        __int128 v95 = 0u;
      }

      sub_1000DB934((uint64_t)&v94, (uint64_t)v96);
      if (!v97) {
        break;
      }
      int v28 = swift_dynamicCast(v4, v96, v90, v5, 6LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, v28 ^ 1u, 1LL, v5);
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
      id v29 = [v93 defaultManager];
      URL._bridgeToObjectiveC()(v30);
      uint64_t v32 = v31;
      v96[0] = 0LL;
      unsigned int v33 = [v29 removeItemAtURL:v31 error:v96];

      id v34 = v96[0];
      if (v33)
      {
        uint64_t v18 = static os_log_type_t.default.getter(v96[0]);
        uint64_t v19 = qword_10023DFD0;
        uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
        *(_OWORD *)(v21 + 16) = v89;
        uint64_t v22 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v5, v22);
        uint64_t v25 = v24;
        *(void *)(v21 + 56) = &type metadata for String;
        *(void *)(v21 + 64) = sub_10009914C();
        *(void *)(v21 + 32) = v23;
        *(void *)(v21 + 40) = v25;
        os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Deleted iCloud user files: %@", 29LL, 2LL, v21);
        swift_bridgeObjectRelease(v21);
      }

      else
      {
        id v35 = v96[0];
        uint64_t v36 = (void *)_convertNSErrorToError(_:)(v34);

        uint64_t v38 = swift_willThrow(v37);
        uint64_t v39 = static os_log_type_t.default.getter(v38);
        uint64_t v88 = qword_10023DFD0;
        uint64_t v40 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
        *(_OWORD *)(v41 + 16) = v89;
        v96[0] = v36;
        swift_errorRetain(v36);
        uint64_t v42 = sub_100098CD8(&qword_1002357C0);
        uint64_t v43 = String.init<A>(describing:)(v96, v42);
        uint64_t v44 = v5;
        uint64_t v45 = v4;
        uint64_t v46 = v10;
        uint64_t v47 = v6;
        uint64_t v48 = v13;
        uint64_t v50 = v49;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 64) = sub_10009914C();
        *(void *)(v41 + 32) = v43;
        *(void *)(v41 + 40) = v50;
        uint64_t v13 = v48;
        uint64_t v6 = v47;
        uint64_t v10 = v46;
        uint64_t v4 = v45;
        uint64_t v5 = v44;
        os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v88, "Could not delete iCloud user files: %@", 38LL, 2LL, v41);
        swift_bridgeObjectRelease(v41);
        swift_errorRelease(v36);
      }

      v92(v10, v5);
    }

    sub_100099358((uint64_t)v96, &qword_100236570);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
LABEL_15:

    sub_100099358((uint64_t)v4, (uint64_t *)&unk_100235270);
  }

  uint64_t v97 = &type metadata for AudioAccessoryFeatures;
  unint64_t v98 = sub_10009E740();
  LOBYTE(v96[0]) = 1;
  char v51 = isFeatureEnabled(_:)(v96);
  uint64_t result = sub_10009A498(v96);
  if ((v51 & 1) != 0)
  {
    id v53 = [v93 defaultManager];
    sub_1001221A4((uint64_t)v13);
    uint64_t v54 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v13, 0LL, 0LL, 0LL, 0LL);

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v92)(v13, v5);
    if (v54)
    {
      id v91 = (char *)&type metadata for Any + 8;
      __int128 v90 = xmmword_1001A5EA0;
      uint64_t v55 = (uint64_t)v87;
      for (i = (char *)v86[0]; ; v92(i, v5))
      {
        id v65 = [v54 nextObject];
        if (v65)
        {
          id v66 = v65;
          _bridgeAnyObjectToAny(_:)(&v94);
          swift_unknownObjectRelease(v66);
        }

        else
        {
          __int128 v94 = 0u;
          __int128 v95 = 0u;
        }

        sub_1000DB934((uint64_t)&v94, (uint64_t)v96);
        if (!v97) {
          break;
        }
        int v67 = swift_dynamicCast(v55, v96, v91, v5, 6LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v55, v67 ^ 1u, 1LL, v5);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(i, v55, v5);
        id v68 = [v93 defaultManager];
        URL._bridgeToObjectiveC()(v69);
        uint64_t v71 = v70;
        v96[0] = 0LL;
        unsigned int v72 = [v68 removeItemAtURL:v70 error:v96];

        id v73 = v96[0];
        if (v72)
        {
          uint64_t v57 = static os_log_type_t.default.getter(v96[0]);
          uint64_t v58 = qword_10023DFD0;
          uint64_t v59 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v60 = swift_allocObject(v59, 72LL, 7LL);
          *(_OWORD *)(v60 + 16) = v90;
          uint64_t v61 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v5, v61);
          uint64_t v64 = v63;
          *(void *)(v60 + 56) = &type metadata for String;
          *(void *)(v60 + 64) = sub_10009914C();
          *(void *)(v60 + 32) = v62;
          *(void *)(v60 + 40) = v64;
          os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  v58,  "Deleted secondary iCloud user(s) files: %@",  42LL,  2LL,  v60);
          swift_bridgeObjectRelease(v60);
        }

        else
        {
          id v74 = v96[0];
          id v75 = (void *)_convertNSErrorToError(_:)(v73);

          uint64_t v77 = swift_willThrow(v76);
          uint64_t v78 = static os_log_type_t.error.getter(v77);
          uint64_t v79 = qword_10023DFD0;
          uint64_t v80 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v81 = swift_allocObject(v80, 72LL, 7LL);
          *(_OWORD *)(v81 + 16) = v90;
          v96[0] = v75;
          swift_errorRetain(v75);
          uint64_t v82 = sub_100098CD8(&qword_1002357C0);
          uint64_t v83 = String.init<A>(describing:)(v96, v82);
          uint64_t v85 = v84;
          *(void *)(v81 + 56) = &type metadata for String;
          *(void *)(v81 + 64) = sub_10009914C();
          *(void *)(v81 + 32) = v83;
          *(void *)(v81 + 40) = v85;
          uint64_t v55 = (uint64_t)v87;
          os_log(_:dso:log:_:_:)( v78,  &_mh_execute_header,  v79,  "Could not delete secondary iCloud user(s) files: %@",  51LL,  2LL,  v81);
          swift_bridgeObjectRelease(v81);
          swift_errorRelease(v75);
        }
      }

      sub_100099358((uint64_t)v96, &qword_100236570);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v55, 1LL, 1LL, v5);
LABEL_29:

      return sub_100099358(v55, (uint64_t *)&unk_100235270);
    }
  }

  return result;
}

uint64_t sub_1000DB764()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);

  v3(v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_ckTokenBaseURL, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000DB7E4()
{
  return type metadata accessor for RecordFileManager(0LL);
}

uint64_t type metadata accessor for RecordFileManager(uint64_t a1)
{
  uint64_t result = qword_100235AB0;
  if (!qword_100235AB0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecordFileManager);
  }
  return result;
}

uint64_t sub_1000DB828(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = v4[0];
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1000DB8A4()
{
  unint64_t result = qword_100235BD0;
  if (!qword_100235BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A96B4, &type metadata for DeviceStore.DeviceStoreError);
    atomic_store(result, (unint64_t *)&qword_100235BD0);
  }

  return result;
}

unint64_t sub_1000DB8E8()
{
  unint64_t result = qword_100237040;
  if (!qword_100237040)
  {
    uint64_t v1 = sub_10009E910((uint64_t *)&unk_100235870);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100237040);
  }

  return result;
}

uint64_t sub_1000DB934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8(&qword_100236570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000DB97C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for URL(0LL);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    v20(v17, v18, v19);
    uint64_t v21 = a3[8];
    uint64_t v22 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v22;
    swift_bridgeObjectRetain(v22);
  }

  return a1;
}

uint64_t sub_1000DBA84(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[8]));
}

uint64_t sub_1000DBB14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v19(v16, v17, v18);
  uint64_t v20 = a3[8];
  uint64_t v21 = *(void *)(a2 + v20);
  *(void *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1000DBBF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24LL))(v18, v19, v20);
  uint64_t v21 = a3[8];
  uint64_t v22 = *(void *)(a2 + v21);
  uint64_t v23 = *(void *)(a1 + v21);
  *(void *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_1000DBCE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000DBD8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))(v20, v21, v22);
  uint64_t v23 = a3[8];
  uint64_t v24 = *(void *)(a1 + v23);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_1000DBE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DBE68);
}

uint64_t sub_1000DBE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1000DBF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DBF20);
}

uint64_t sub_1000DBF20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CloudCoordinatorConfiguration(uint64_t a1)
{
  uint64_t result = qword_100235C38;
  if (!qword_100235C38) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudCoordinatorConfiguration);
  }
  return result;
}

uint64_t sub_1000DC004(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1001A8290;
    v5[2] = &unk_1001A82A8;
    uint64_t result = type metadata accessor for URL(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256LL, 5LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000DC0A8()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  sub_100098D18(v3, qword_10023DDF0);
  uint64_t v4 = sub_100098D58(v3, (uint64_t)qword_10023DDF0);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1LL, v3);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DC190()
{
  v1._object = (void *)0x80000001001CE220LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000034LL;
  String.append(_:)(v1);
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  uint64_t v3 = (uint64_t *)(v0 + *(int *)(v2 + 24));
  uint64_t v4 = *v3;
  uint64_t v5 = (void *)v3[1];
  swift_bridgeObjectRetain(v5);
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v7._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)(v0 + *(int *)(v2 + 32));
  uint64_t v9 = swift_bridgeObjectRetain(v8);
  v10._uint64_t countAndFlagsBits = Array.description.getter(v9, &type metadata for String);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  return 0LL;
}

uint64_t sub_1000DC298(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000DC2D0 + 4 * byte_1001A8210[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

unint64_t sub_1000DC2D0()
{
  return 0xD000000000000011LL;
}

unint64_t sub_1000DC2EC()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000DC30C()
{
  return 0x726F746365726964LL;
}

uint64_t sub_1000DC32C()
{
  return 0x734449656E6F7ALL;
}

uint64_t sub_1000DC344(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8(&qword_100235CA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000DCBB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CloudCoordinatorConfiguration.CodingKeys,  &type metadata for CloudCoordinatorConfiguration.CodingKeys,  v11,  v9,  v10);
  char v33 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v33, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for CloudCoordinatorConfiguration(0LL);
    uint64_t v15 = (uint64_t *)(v3 + v14[5]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v32 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v5);
    uint64_t v18 = (uint64_t *)(v3 + v14[6]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    char v31 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v31, v5);
    uint64_t v21 = v3 + v14[7];
    char v30 = 3;
    uint64_t v22 = type metadata accessor for URL(0LL);
    uint64_t v23 = sub_100098C98( &qword_100235408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v30, v5, v22, v23);
    uint64_t v29 = *(void *)(v3 + v14[8]);
    char v28 = 4;
    uint64_t v24 = sub_100098CD8(&qword_100235170);
    uint64_t v25 = sub_1000DCC7C( &qword_100235CA8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, v24, v25);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000DC594@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v39 = (uint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100098CD8(&qword_100235C88);
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  uint64_t v45 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v44);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001001CE260LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = v7;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v14, v6);
    uint64_t v19 = a1;
    uint64_t v20 = a1[3];
    uint64_t v21 = a1[4];
    uint64_t v22 = v19;
    sub_10009A430(v19, v20);
    unint64_t v23 = sub_1000DCBB8();
    dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CloudCoordinatorConfiguration.CodingKeys,  &type metadata for CloudCoordinatorConfiguration.CodingKeys,  v23,  v20,  v21);
    if (v2)
    {
      sub_10009A498(v22);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v16, v6);
    }

    else
    {
      char v51 = 0;
      uint64_t v24 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v25 = v41;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v9, v6, &v51, v41, v6, v24);
      (*(void (**)(char *, void *, uint64_t))(v18 + 40))(v16, v9, v6);
      char v50 = 1;
      uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v25);
      uint64_t v27 = (int *)v44;
      char v28 = (uint64_t *)&v16[*(int *)(v44 + 20)];
      *char v28 = v26;
      v28[1] = v29;
      char v49 = 2;
      uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v25);
      char v31 = (uint64_t *)&v16[v27[6]];
      *char v31 = v30;
      v31[1] = v32;
      char v48 = 3;
      uint64_t v33 = sub_100098C98( &qword_100235418,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v34 = v43;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v43, &v48, v25, v43, v33);
      (*(void (**)(char *, void *, uint64_t))(v42 + 32))(&v16[v27[7]], v39, v34);
      uint64_t v35 = sub_100098CD8(&qword_100235170);
      char v47 = 4;
      uint64_t v36 = sub_1000DCC7C( &qword_100235C98,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, v35, &v47, v25, v35, v36);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v25);
      *(void *)&v16[v27[8]] = v46;
      sub_1000DCBFC((uint64_t)v16, v38);
      sub_10009A498(v22);
      return sub_1000DCC40((uint64_t)v16);
    }
  }

  return result;
}

uint64_t sub_1000DCAB4()
{
  return sub_1000DC298(*v0);
}

uint64_t sub_1000DCABC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000DCE80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000DCAE0(uint64_t a1)
{
  unint64_t v2 = sub_1000DCBB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DCB08(uint64_t a1)
{
  unint64_t v2 = sub_1000DCBB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DCB34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DC594(a1, a2);
}

uint64_t sub_1000DCB48(void *a1)
{
  return sub_1000DC344(a1);
}

uint64_t sub_1000DCB5C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100098C98( &qword_100237050,  type metadata accessor for CloudCoordinatorConfiguration,  (uint64_t)&unk_1001A82E8);
  uint64_t result = sub_100098C98( &qword_100235C80,  type metadata accessor for CloudCoordinatorConfiguration,  (uint64_t)&unk_1001A82C0);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000DCBB8()
{
  unint64_t result = qword_100235C90;
  if (!qword_100235C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8440, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235C90);
  }

  return result;
}

uint64_t sub_1000DCBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DCC40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000DCC7C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10009E910(&qword_100235170);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CloudCoordinatorConfiguration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000DCD28 + 4 * byte_1001A821A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000DCD5C + 4 * byte_1001A8215[v4]))();
}

uint64_t sub_1000DCD5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DCD64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DCD6CLL);
  }
  return result;
}

uint64_t sub_1000DCD78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DCD80LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000DCD84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DCD8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinatorConfiguration.CodingKeys()
{
  return &type metadata for CloudCoordinatorConfiguration.CodingKeys;
}

unint64_t sub_1000DCDAC()
{
  unint64_t result = qword_100235CB0;
  if (!qword_100235CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8418, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235CB0);
  }

  return result;
}

unint64_t sub_1000DCDF4()
{
  unint64_t result = qword_100235CB8;
  if (!qword_100235CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8388, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235CB8);
  }

  return result;
}

unint64_t sub_1000DCE3C()
{
  unint64_t result = qword_100235CC0;
  if (!qword_100235CC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A83B0, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235CC0);
  }

  return result;
}

uint64_t sub_1000DCE80(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v7 = 0x80000001001CE290LL;
    if (a2 == 0x80000001001CE290LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001CE290LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001001CE2B0LL)
  {
    unint64_t v8 = 0x80000001001CE2B0LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CE2B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0x726F746365726964LL && a2 == 0xEC0000004C525579LL)
  {
    unint64_t v9 = 0xEC0000004C525579LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F746365726964LL, 0xEC0000004C525579LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x734449656E6F7ALL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x734449656E6F7ALL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

os_activity_t _BTActivityCreate(_:dso:)(char *description, int a2, char a3, void *dso)
{
  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_100234B88 == -1) {
          return _os_activity_create(dso, description, (os_activity_t)qword_100235CC8, OS_ACTIVITY_FLAG_DEFAULT);
        }
LABEL_18:
        swift_once(&qword_100234B88, sub_1000DD658);
        return _os_activity_create(dso, description, (os_activity_t)qword_100235CC8, OS_ACTIVITY_FLAG_DEFAULT);
      }

      goto LABEL_28;
    }

    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (description >> 16 > 0x10)
  {
    __break(1u);
  }

  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      unsigned int v7 = ((_BYTE)description + 1);
      goto LABEL_12;
    }

    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int v8 = (description & 0x3F) << 8;
  unsigned int v9 = (v8 | (description >> 6)) + 33217;
  unsigned int v10 = (v8 | (description >> 6) & 0x3F) << 8;
  unsigned int v11 = (((v10 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  unsigned int v12 = (v10 | (description >> 12)) + 8487393;
  else {
    unsigned int v7 = v12;
  }
LABEL_12:
  *(void *)descriptiona = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << ((32 - (__clz(v7) & 0x38)) & 0x38));
  if (!dso)
  {
LABEL_28:
    os_activity_t result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001FLL,  0x80000001001CE3B0LL,  "audioaccessoryd/BluetoothServicesConstants.swift",  48LL,  2LL,  71LL,  0);
    __break(1u);
    return result;
  }

  if (qword_100234B88 != -1) {
    swift_once(&qword_100234B88, sub_1000DD658);
  }
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_100235CC8, OS_ACTIVITY_FLAG_DEFAULT);
}

const char *XPCArguments.CloudDevice.unsafeMutableAddressor()
{
  return "kCloudDevice";
}

uint64_t static XPCArguments.CloudDevice.getter()
{
  return 0x654464756F6C436BLL;
}

void *XPCArguments.CloudDeviceAddress.unsafeMutableAddressor()
{
  return &static XPCArguments.CloudDeviceAddress;
}

unint64_t static XPCArguments.CloudDeviceAddress.getter()
{
  return 0xD000000000000013LL;
}

id XPCArguments.init()()
{
  return sub_1000DD5A0(type metadata accessor for XPCArguments);
}

id XPCArguments.__deallocating_deinit()
{
  return sub_1000DD624(type metadata accessor for XPCArguments);
}

void *XPCMessages.fetchDeviceList.unsafeMutableAddressor()
{
  return &static XPCMessages.fetchDeviceList;
}

unint64_t static XPCMessages.fetchDeviceList.getter()
{
  return 0xD000000000000010LL;
}

void *XPCMessages.fetchNicknameDevice.unsafeMutableAddressor()
{
  return &static XPCMessages.fetchNicknameDevice;
}

unint64_t static XPCMessages.fetchNicknameDevice.getter()
{
  return 0xD000000000000014LL;
}

void *XPCMessages.nicknameDevice.unsafeMutableAddressor()
{
  return &static XPCMessages.nicknameDevice;
}

uint64_t static XPCMessages.nicknameDevice.getter()
{
  return 0x6D616E6B63694E6BLL;
}

void *XPCMessages.removeDeviceNickname.unsafeMutableAddressor()
{
  return &static XPCMessages.removeDeviceNickname;
}

unint64_t static XPCMessages.removeDeviceNickname.getter()
{
  return 0xD000000000000015LL;
}

void *XPCMessages.purgeCloudData.unsafeMutableAddressor()
{
  return &static XPCMessages.purgeCloudData;
}

uint64_t static XPCMessages.purgeCloudData.getter()
{
  return 0x6C4365677275506BLL;
}

void *XPCMessages.resetCachedData.unsafeMutableAddressor()
{
  return &static XPCMessages.resetCachedData;
}

unint64_t static XPCMessages.resetCachedData.getter()
{
  return 0xD000000000000010LL;
}

id XPCMessages.init()()
{
  return sub_1000DD5A0(type metadata accessor for XPCMessages);
}

id sub_1000DD5A0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "init");
}

id sub_1000DD5DC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id XPCMessages.__deallocating_deinit()
{
  return sub_1000DD624(type metadata accessor for XPCMessages);
}

id sub_1000DD624(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000DD658()
{
  qword_100235CC8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_100235CC8);
}

os_activity_t sub_1000DD680@<X0>(char *description@<X0>, void *dso@<X2>, os_activity_t *a3@<X8>)
{
  if (dso && description)
  {
    if (qword_100234B88 != -1) {
      swift_once(&qword_100234B88, sub_1000DD658);
    }
    os_activity_t result = _os_activity_create(dso, description, (os_activity_t)qword_100235CC8, OS_ACTIVITY_FLAG_DEFAULT);
    *a3 = result;
  }

  else
  {
    os_activity_t result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001FLL,  0x80000001001CE3B0LL,  "audioaccessoryd/BluetoothServicesConstants.swift",  48LL,  2LL,  71LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for XPCArguments()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd12XPCArguments);
}

uint64_t type metadata accessor for XPCMessages()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd11XPCMessages);
}

void sub_1000DD89C()
{
  byte_100235D20 = 0;
}

void sub_1000DD8A8()
{
  byte_100235D21 = 0;
}

void sub_1000DD8B4()
{
  byte_100235D22 = 0;
}

void sub_1000DD8C0()
{
  byte_100235D23 = 0;
}

void sub_1000DD8CC()
{
  byte_100235D24 = 0;
}

void sub_1000DD8D8()
{
  byte_100235D25 = 0;
}

uint64_t sub_1000DD8E4()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unsigned int v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v5, qword_10023DE08);
  sub_100098D58(v3, (uint64_t)qword_10023DE08);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013LL, 0x80000001001A85A0LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

  return result;
}

Class HMDeviceCloudRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v192 = *(void (**)(char *, uint64_t))(v2 - 8);
  __chkstk_darwin(v2);
  v196 = (char *)&v185 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v187 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v187);
  v193 = (char *)&v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v194 = (uint64_t)&v185 - v6;
  __chkstk_darwin(v7);
  v189 = (char *)&v185 - v8;
  __chkstk_darwin(v9);
  uint64_t v191 = (uint64_t)&v185 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v185 - v12;
  uint64_t v14 = objc_autoreleasePoolPush();
  uint64_t v15 = &v0[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  unint64_t v17 = *((void *)v15 + 1);
  sub_1000991CC(v16, v17);
  sub_100118B60(v16, v17);
  Class isa = v18;
  sub_100099394(v16, v17);
  uint64_t v195 = v2;
  if (!isa)
  {
    uint64_t v20 = v1;
    Class isa = sub_1000A3774((uint64_t)v20).super.isa;
  }

  Class v200 = isa;
  sub_1000E329C((id *)&v200);
  objc_autoreleasePoolPop(v14);
  Class v200 = 0LL;
  unint64_t v201 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(856LL);
  Class v202 = v200;
  unint64_t v203 = v201;
  v21._object = (void *)0x80000001001CE4E0LL;
  v21._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  uint64_t v186 = 0xD000000000000014LL;
  String.append(_:)(v21);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  v26._uint64_t countAndFlagsBits = 2108704LL;
  v26._object = (void *)0xE300000000000000LL;
  String.append(_:)(v26);
  uint64_t v27 = *(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
  char v28 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain(v28);
  v29._uint64_t countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._object = (void *)0x80000001001CE500LL;
  v30._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v30);
  LOBYTE(v200) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus];
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._object = (void *)0x80000001001CE520LL;
  uint64_t v188 = 0xD000000000000012LL;
  v33._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v33);
  LOBYTE(v200) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus];
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v36._object = (void *)0x80000001001CE540LL;
  String.append(_:)(v36);
  LOBYTE(v200) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled];
  v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int8,  &protocol witness table for Int8);
  uint64_t v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._object = (void *)0x80000001001CE560LL;
  v39._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v39);
  LOBYTE(v200) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled];
  v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int8,  &protocol witness table for Int8);
  uint64_t v41 = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v41);
  v42._object = (void *)0x80000001001CE580LL;
  uint64_t v190 = 0xD000000000000013LL;
  v42._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v42);
  LOBYTE(v200) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled];
  v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int8,  &protocol witness table for Int8);
  uint64_t v44 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v44);
  v45._object = (void *)0x80000001001CE5A0LL;
  v45._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v45);
  LOBYTE(v200) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled];
  v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int8,  &protocol witness table for Int8);
  char v47 = v46._object;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v47);
  v48._object = (void *)0x80000001001CE5C0LL;
  v48._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  char v49 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  BYTE4(v200) = v49;
  uint64_t v50 = sub_100098CD8((uint64_t *)&unk_100235D40);
  v51._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  uint64_t v52 = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v52);
  v53._object = (void *)0x80000001001CE5E0LL;
  v53._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v53);
  char v54 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  BYTE4(v200) = v54;
  v55._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  uint64_t v56 = v55._object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v56);
  v57._object = (void *)0x80000001001CE600LL;
  v57._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v57);
  char v58 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  BYTE4(v200) = v58;
  v59._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  Class v60 = isa;
  uint64_t v61 = v59._object;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v61);
  v62._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v62._object = (void *)0x80000001001CE620LL;
  String.append(_:)(v62);
  char v63 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  BYTE4(v200) = v63;
  v64._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  id v65 = v64._object;
  String.append(_:)(v64);
  id v66 = v65;
  Class v67 = v60;
  swift_bridgeObjectRelease(v66);
  v68._object = (void *)0x80000001001CE640LL;
  v68._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v68);
  char v69 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  BYTE4(v200) = v69;
  v70._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  uint64_t v71 = v70._object;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v71);
  v72._object = (void *)0x80000001001CE660LL;
  v72._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v72);
  char v73 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  BYTE4(v200) = v73;
  v74._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  id v75 = v74._object;
  String.append(_:)(v74);
  swift_bridgeObjectRelease(v75);
  v76._object = (void *)0x80000001001CE680LL;
  v76._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v76);
  char v77 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  BYTE4(v200) = v77;
  v78._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  uint64_t v79 = v78._object;
  String.append(_:)(v78);
  swift_bridgeObjectRelease(v79);
  v80._object = (void *)0x80000001001CE6A0LL;
  v80._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v80);
  char v81 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  BYTE4(v200) = v81;
  v82._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  uint64_t v83 = v82._object;
  String.append(_:)(v82);
  swift_bridgeObjectRelease(v83);
  v84._object = (void *)0x80000001001CE6C0LL;
  v84._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v84);
  char v85 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4];
  LODWORD(v200) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  BYTE4(v200) = v85;
  v86._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v200, v50);
  uint64_t v87 = v86._object;
  String.append(_:)(v86);
  swift_bridgeObjectRelease(v87);
  v88._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v88._object = (void *)0x80000001001CE6E0LL;
  String.append(_:)(v88);
  uint64_t v89 = (uint64_t)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  swift_beginAccess( &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft],  &v200,  0LL,  0LL);
  sub_1000E6164(v89, (uint64_t)v13);
  uint64_t v90 = v187;
  v91._uint64_t countAndFlagsBits = String.init<A>(describing:)(v13, v187);
  uint64_t v92 = v91._object;
  String.append(_:)(v91);
  swift_bridgeObjectRelease(v92);
  v93._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  v93._object = (void *)0x80000001001CE710LL;
  String.append(_:)(v93);
  uint64_t v94 = (uint64_t)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  swift_beginAccess( &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight],  v199,  0LL,  0LL);
  sub_1000E6164(v94, (uint64_t)v13);
  v95._uint64_t countAndFlagsBits = String.init<A>(describing:)(v13, v90);
  v96 = v95._object;
  String.append(_:)(v95);
  swift_bridgeObjectRelease(v96);
  v97._object = (void *)0x80000001001CE740LL;
  v97._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v97);
  char v98 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  char v198 = v98;
  v99._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  unsigned int v100 = v99._object;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(v100);
  v101._object = (void *)0x80000001001CE760LL;
  v101._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v101);
  char v102 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  char v198 = v102;
  v103._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  uint64_t v104 = v103._object;
  String.append(_:)(v103);
  swift_bridgeObjectRelease(v104);
  v105._object = (void *)0x80000001001CE780LL;
  v105._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v105);
  char v106 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  char v198 = v106;
  v107._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  id v108 = v107._object;
  String.append(_:)(v107);
  swift_bridgeObjectRelease(v108);
  v109._object = (void *)0x80000001001CE7A0LL;
  v109._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v109);
  char v110 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  char v198 = v110;
  v111._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  uint64_t v112 = v111._object;
  String.append(_:)(v111);
  swift_bridgeObjectRelease(v112);
  v113._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v113._object = (void *)0x80000001001CE7C0LL;
  String.append(_:)(v113);
  char v114 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  char v198 = v114;
  v115._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  id v116 = v115._object;
  String.append(_:)(v115);
  swift_bridgeObjectRelease(v116);
  v117._object = (void *)0x80000001001CE7E0LL;
  v117._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v117);
  char v118 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  char v198 = v118;
  v119._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  uint64_t v120 = v119._object;
  String.append(_:)(v119);
  swift_bridgeObjectRelease(v120);
  v121._uint64_t countAndFlagsBits = 0xD000000000000029LL;
  v121._object = (void *)0x80000001001CE800LL;
  String.append(_:)(v121);
  char v122 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  char v198 = v122;
  v123._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  uint64_t v124 = v123._object;
  String.append(_:)(v123);
  swift_bridgeObjectRelease(v124);
  v125._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v125._object = (void *)0x80000001001CE830LL;
  String.append(_:)(v125);
  char v126 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight + 4];
  int v197 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  char v198 = v126;
  v127._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v197, v50);
  id v128 = v127._object;
  String.append(_:)(v127);
  swift_bridgeObjectRelease(v128);
  v129._object = (void *)0x80000001001CB230LL;
  v129._uint64_t countAndFlagsBits = v186;
  String.append(_:)(v129);
  __int128 v130 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], &v197, 0LL, 0LL);
  v131 = v192;
  uint64_t v132 = (void (*)(char *, char *, uint64_t))*((void *)v192 + 2);
  uint64_t v133 = v195;
  uint64_t v134 = v196;
  v132(v196, v130, v195);
  uint64_t v135 = sub_100098C98( &qword_1002367A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v136._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v133, v135);
  uint64_t v137 = v136._object;
  String.append(_:)(v136);
  swift_bridgeObjectRelease(v137);
  uint64_t v138 = (void (*)(char *, uint64_t))*((void *)v131 + 1);
  v138(v134, v133);
  v139._object = (void *)0x80000001001CB250LL;
  v139._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v139);
  id v140 = -[objc_class creationDate](v67, "creationDate");
  if (v140)
  {
    v141 = v140;
    uint64_t v142 = (uint64_t)v189;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v140);

    v143 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v131 + 7);
    v143(v142, 0LL, 1LL, v133);
  }

  else
  {
    v143 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v131 + 7);
    uint64_t v142 = (uint64_t)v189;
    v143((uint64_t)v189, 1LL, 1LL, v133);
  }

  uint64_t v144 = v191;
  sub_100099290(v142, v191);
  v145 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v131 + 6);
  if (v145(v144, 1LL, v133))
  {
    sub_100099358(v144, (uint64_t *)&unk_100234E10);
    v146 = (void *)0xE200000000000000LL;
    uint64_t v147 = 15932LL;
  }

  else
  {
    v192 = v138;
    v148 = v67;
    v149 = v196;
    v132(v196, (char *)v144, v133);
    sub_100099358(v144, (uint64_t *)&unk_100234E10);
    v150 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v151 = Date._bridgeToObjectiveC()().super.isa;
    id v152 = [v150 localizedStringFromDate:v151 dateStyle:2 timeStyle:2];

    uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
    v146 = v153;

    v154 = v149;
    Class v67 = v148;
    uint64_t v138 = v192;
    v192(v154, v133);
  }

  v155._uint64_t countAndFlagsBits = v147;
  v155._object = v146;
  String.append(_:)(v155);
  swift_bridgeObjectRelease(v146);
  v156._object = (void *)0x80000001001CB270LL;
  v156._uint64_t countAndFlagsBits = v188;
  String.append(_:)(v156);
  id v157 = -[objc_class modificationDate](v67, "modificationDate");
  if (v157)
  {
    v158 = v157;
    uint64_t v159 = (uint64_t)v193;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v157);

    uint64_t v160 = 0LL;
  }

  else
  {
    uint64_t v160 = 1LL;
    uint64_t v159 = (uint64_t)v193;
  }

  v143(v159, v160, 1LL, v133);
  uint64_t v161 = v194;
  sub_100099290(v159, v194);
  if (v145(v161, 1LL, v133))
  {
    sub_100099358(v161, (uint64_t *)&unk_100234E10);
    v162 = (void *)0xE200000000000000LL;
    uint64_t v163 = 15932LL;
  }

  else
  {
    v164 = v196;
    v132(v196, (char *)v161, v133);
    sub_100099358(v161, (uint64_t *)&unk_100234E10);
    v165 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v166 = Date._bridgeToObjectiveC()().super.isa;
    id v167 = [v165 localizedStringFromDate:v166 dateStyle:2 timeStyle:2];

    uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
    v162 = v168;

    v138(v164, v133);
  }

  v169._uint64_t countAndFlagsBits = v163;
  v169._object = v162;
  String.append(_:)(v169);
  swift_bridgeObjectRelease(v162);
  v170._object = (void *)0x80000001001CB290LL;
  v170._uint64_t countAndFlagsBits = v190;
  String.append(_:)(v170);
  id v171 = -[objc_class modifiedByDevice](v67, "modifiedByDevice");
  if (v171)
  {
    v172 = v171;
    uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v171);
    v175 = v174;
  }

  else
  {
    v175 = (void *)0xE200000000000000LL;
    uint64_t v173 = 15932LL;
  }

  v176._uint64_t countAndFlagsBits = v173;
  v176._object = v175;
  String.append(_:)(v176);
  swift_bridgeObjectRelease(v175);
  v177._uint64_t countAndFlagsBits = 0x746520202020202CLL;
  v177._object = (void *)0xEC000000203A6761LL;
  String.append(_:)(v177);
  id v178 = -[objc_class recordChangeTag](v67, "recordChangeTag");
  if (v178)
  {
    v179 = v178;
    uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
    v182 = v181;
  }

  else
  {
    v182 = (void *)0xE200000000000000LL;
    uint64_t v180 = 15932LL;
  }

  v183._uint64_t countAndFlagsBits = v180;
  v183._object = v182;
  String.append(_:)(v183);

  swift_bridgeObjectRelease(v182);
  return v202;
}

id sub_1000DEA18(id a1)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v268 = (char *)&v240 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v246 = (char *)&v240 - v8;
  uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v9);
  v264 = (char *)&v240 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  v265 = (char *)&v240 - v12;
  __chkstk_darwin(v13);
  v257 = (char *)&v240 - v14;
  __chkstk_darwin(v15);
  v255 = (char *)&v240 - v16;
  uint64_t v17 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v240 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v270 = *(void *)(v20 - 8);
  uint64_t v271 = v20;
  __n128 v21 = __chkstk_darwin(v20);
  v269 = (char *)&v240 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  *(_DWORD *)uint64_t v23 = 0;
  v23[4] = 1;
  Swift::String v24 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  *(_DWORD *)Swift::String v24 = 0;
  v247 = v24;
  v24[4] = 1;
  uint64_t v25 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  *(_DWORD *)uint64_t v25 = 0;
  v248 = v25;
  v25[4] = 1;
  Swift::String v26 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  *(_DWORD *)Swift::String v26 = 0;
  v249 = v26;
  v26[4] = 1;
  uint64_t v27 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  *(_DWORD *)uint64_t v27 = 0;
  v250 = v27;
  v27[4] = 1;
  char v28 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  *(_DWORD *)char v28 = 0;
  v251 = v28;
  v28[4] = 1;
  Swift::String v29 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  *(_DWORD *)Swift::String v29 = 0;
  v252 = v29;
  v29[4] = 1;
  Swift::String v30 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  *(_DWORD *)Swift::String v30 = 0;
  v253 = v30;
  v30[4] = 1;
  Swift::String v31 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  *(_DWORD *)Swift::String v31 = 0;
  v254 = v31;
  v31[4] = 1;
  uint64_t v266 = v5;
  uint64_t v32 = *(void (**)(__n128))(v5 + 56);
  v274 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  v32(v21);
  v275 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  uint64_t v267 = v4;
  v272 = v32;
  ((void (*)(void))v32)();
  Swift::String v33 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  *(_DWORD *)Swift::String v33 = 0;
  v256 = v33;
  v33[4] = 1;
  Swift::String v34 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  *(_DWORD *)Swift::String v34 = 0;
  v258 = v34;
  v34[4] = 1;
  uint64_t v35 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  *(_DWORD *)uint64_t v35 = 0;
  v259 = v35;
  v35[4] = 1;
  Swift::String v36 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  *(_DWORD *)Swift::String v36 = 0;
  v260 = v36;
  v36[4] = 1;
  Swift::String v37 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  *(_DWORD *)Swift::String v37 = 0;
  v261 = v37;
  v37[4] = 1;
  uint64_t v38 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  *(_DWORD *)uint64_t v38 = 0;
  v262 = v38;
  v38[4] = 1;
  Swift::String v39 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  *(_DWORD *)Swift::String v39 = 0;
  v263 = v39;
  v39[4] = 1;
  Swift::String v40 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  *(_DWORD *)Swift::String v40 = 0;
  v40[4] = 1;
  uint64_t v41 = v1;
  uint64_t v42 = CKRecord.recordType.getter(v41);
  uint64_t v44 = v43;
  if (v42 == 0xD000000000000013LL && v43 == 0x80000001001A85A0LL)
  {
    swift_bridgeObjectRelease(0x80000001001A85A0LL);
LABEL_5:
    v244 = v40;
    v273 = v41;
    id v46 = [a1 encryptedValues];
    NSString v47 = String._bridgeToObjectiveC()();
    id v48 = [v46 objectForKeyedSubscript:v47];

    if (!v48) {
      goto LABEL_9;
    }
    id v278 = v48;
    uint64_t v245 = sub_100098CD8(&qword_100234E40);
    uint64_t v49 = swift_dynamicCast(v277, &v278, v245, &type metadata for String, 6LL);
    if ((v49 & 1) == 0) {
      goto LABEL_9;
    }
    uint64_t v243 = v2;
    uint64_t v50 = v277[1];
    id v242 = (id)v277[0];
    Swift::String v51 = a1;
    id v52 = [a1 recordID];
    id v53 = [v52 recordName];

    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    uint64_t v56 = v55;

    UUID.init(uuidString:)(v54, v56);
    swift_bridgeObjectRelease(v56);
    uint64_t v58 = v270;
    uint64_t v57 = v271;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v270 + 48))(v19, 1LL, v271) == 1)
    {
      swift_bridgeObjectRelease(v50);
      uint64_t v49 = sub_100099358((uint64_t)v19, &qword_100234E20);
      a1 = v51;
LABEL_9:
      id v59 = v46;
      uint64_t v60 = static os_log_type_t.error.getter(v49);
      uint64_t v41 = v273;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v61 = qword_10023DFC8;
      uint64_t v62 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v63 = swift_allocObject(v62, 72LL, 7LL);
      *(_OWORD *)(v63 + 16) = xmmword_1001A5EA0;
      *(void *)(v63 + 56) = sub_10009931C();
      *(void *)(v63 + 64) = sub_100098C98( (unint64_t *)&qword_1002352D0,  (uint64_t (*)(uint64_t))sub_10009931C,  (uint64_t)&protocol conformance descriptor for NSObject);
      *(void *)(v63 + 32) = a1;
      a1 = a1;
      os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Invalid HMDeviceCloudRecord - %@", 32LL, 2LL, v63);
      swift_bridgeObjectRelease(v63);
      unint64_t v64 = sub_1000E7150();
      uint64_t v65 = swift_allocError(&type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError, v64, 0LL, 0LL);
      _BYTE *v66 = 4;
      swift_willThrow(v65);
      swift_unknownObjectRelease(v59);
      goto LABEL_13;
    }

    char v73 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    id v241 = v46;
    Swift::String v74 = v269;
    v73(v269, v19, v57);
    uint64_t v75 = v57;
    Swift::String v76 = v273;
    char v77 = v74;
    Swift::String v78 = v241;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))( &v273[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier],  v77,  v75);
    uint64_t v79 = (void *)((char *)v76 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress);
    *uint64_t v79 = v242;
    v79[1] = v50;
    NSString v80 = String._bridgeToObjectiveC()();
    id v81 = [v78 objectForKeyedSubscript:v80];

    id v242 = v51;
    if (v81 && (v277[0] = v81, swift_dynamicCast(&v278, v277, v245, &type metadata for UInt8, 6LL)))
    {
      char v82 = (char)v278;
    }

    else
    {
      if (qword_100234B90 != -1) {
        swift_once(&qword_100234B90, sub_1000DD89C);
      }
      char v82 = byte_100235D20;
    }

    v273[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] = v82;
    NSString v83 = String._bridgeToObjectiveC()();
    id v84 = [v78 objectForKeyedSubscript:v83];

    if (v84 && (v277[0] = v84, swift_dynamicCast(&v278, v277, v245, &type metadata for UInt8, 6LL)))
    {
      char v85 = (char)v278;
    }

    else
    {
      if (qword_100234B98 != -1) {
        swift_once(&qword_100234B98, sub_1000DD8A8);
      }
      char v85 = byte_100235D21;
    }

    Swift::String v86 = v273;
    v273[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] = v85;
    NSString v87 = String._bridgeToObjectiveC()();
    id v88 = [v78 objectForKeyedSubscript:v87];

    if (v88 && (v277[0] = v88, swift_dynamicCast(&v278, v277, v245, &type metadata for Int8, 6LL)))
    {
      char v89 = (char)v278;
    }

    else
    {
      if (qword_100234BA0 != -1) {
        swift_once(&qword_100234BA0, sub_1000DD8B4);
      }
      char v89 = byte_100235D22;
    }

    v86[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] = v89;
    NSString v90 = String._bridgeToObjectiveC()();
    id v91 = [v78 objectForKeyedSubscript:v90];

    if (v91 && (v277[0] = v91, swift_dynamicCast(&v278, v277, v245, &type metadata for Int8, 6LL)))
    {
      char v92 = (char)v278;
    }

    else
    {
      if (qword_100234BA8 != -1) {
        swift_once(&qword_100234BA8, sub_1000DD8C0);
      }
      char v92 = byte_100235D23;
    }

    v86[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] = v92;
    NSString v93 = String._bridgeToObjectiveC()();
    id v94 = [v78 objectForKeyedSubscript:v93];

    if (v94 && (v277[0] = v94, swift_dynamicCast(&v278, v277, v245, &type metadata for Int8, 6LL)))
    {
      char v95 = (char)v278;
    }

    else
    {
      if (qword_100234BB0 != -1) {
        swift_once(&qword_100234BB0, sub_1000DD8CC);
      }
      char v95 = byte_100235D24;
    }

    v86[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] = v95;
    NSString v96 = String._bridgeToObjectiveC()();
    id v97 = [v78 objectForKeyedSubscript:v96];

    if (v97 && (v277[0] = v97, swift_dynamicCast(&v278, v277, v245, &type metadata for Int8, 6LL)))
    {
      char v98 = (char)v278;
    }

    else
    {
      if (qword_100234BB8 != -1) {
        swift_once(&qword_100234BB8, sub_1000DD8D8);
      }
      char v98 = byte_100235D25;
    }

    v86[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] = v98;
    NSString v99 = String._bridgeToObjectiveC()();
    id v100 = [v78 objectForKeyedSubscript:v99];

    if (v100)
    {
      v277[0] = v100;
      int v101 = swift_dynamicCast(&v278, v277, v245, &type metadata for UInt32, 6LL);
      int v102 = (int)v278;
      if (!v101) {
        int v102 = 0;
      }
      char v103 = v101 ^ 1;
    }

    else
    {
      int v102 = 0;
      char v103 = 1;
    }

    *(_DWORD *)uint64_t v23 = v102;
    v23[4] = v103;
    NSString v104 = String._bridgeToObjectiveC()();
    id v105 = [v78 objectForKeyedSubscript:v104];

    if (v105)
    {
      v277[0] = v105;
      uint64_t v106 = v245;
      int v107 = swift_dynamicCast(&v278, v277, v245, &type metadata for UInt32, 6LL);
      int v108 = (int)v278;
      if (!v107) {
        int v108 = 0;
      }
      char v109 = v107 ^ 1;
      uint64_t v110 = (uint64_t)v264;
    }

    else
    {
      int v108 = 0;
      char v109 = 1;
      uint64_t v110 = (uint64_t)v264;
      uint64_t v106 = v245;
    }

    Swift::String v111 = v247;
    *(_DWORD *)v247 = v108;
    v111[4] = v109;
    NSString v112 = String._bridgeToObjectiveC()();
    id v113 = [v78 objectForKeyedSubscript:v112];

    if (v113)
    {
      v277[0] = v113;
      int v114 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v115 = (int)v278;
      if (!v114) {
        int v115 = 0;
      }
      char v116 = v114 ^ 1;
    }

    else
    {
      int v115 = 0;
      char v116 = 1;
    }

    uint64_t v117 = v267;
    char v118 = v248;
    *(_DWORD *)v248 = v115;
    v118[4] = v116;
    NSString v119 = String._bridgeToObjectiveC()();
    id v120 = [v78 objectForKeyedSubscript:v119];

    if (v120)
    {
      v277[0] = v120;
      int v121 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v122 = (int)v278;
      if (!v121) {
        int v122 = 0;
      }
      char v123 = v121 ^ 1;
    }

    else
    {
      int v122 = 0;
      char v123 = 1;
    }

    uint64_t v124 = v249;
    *(_DWORD *)v249 = v122;
    v124[4] = v123;
    NSString v125 = String._bridgeToObjectiveC()();
    id v126 = [v78 objectForKeyedSubscript:v125];

    if (v126)
    {
      v277[0] = v126;
      int v127 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v128 = (int)v278;
      if (!v127) {
        int v128 = 0;
      }
      char v129 = v127 ^ 1;
    }

    else
    {
      int v128 = 0;
      char v129 = 1;
    }

    __int128 v130 = v250;
    *(_DWORD *)v250 = v128;
    v130[4] = v129;
    NSString v131 = String._bridgeToObjectiveC()();
    id v132 = [v78 objectForKeyedSubscript:v131];

    if (v132)
    {
      v277[0] = v132;
      int v133 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v134 = (int)v278;
      if (!v133) {
        int v134 = 0;
      }
      char v135 = v133 ^ 1;
    }

    else
    {
      int v134 = 0;
      char v135 = 1;
    }

    Swift::String v136 = v251;
    *(_DWORD *)v251 = v134;
    v136[4] = v135;
    NSString v137 = String._bridgeToObjectiveC()();
    id v138 = [v78 objectForKeyedSubscript:v137];

    if (v138)
    {
      v277[0] = v138;
      int v139 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v140 = (int)v278;
      if (!v139) {
        int v140 = 0;
      }
      char v141 = v139 ^ 1;
    }

    else
    {
      int v140 = 0;
      char v141 = 1;
    }

    uint64_t v142 = v252;
    *(_DWORD *)v252 = v140;
    v142[4] = v141;
    NSString v143 = String._bridgeToObjectiveC()();
    id v144 = [v78 objectForKeyedSubscript:v143];

    if (v144)
    {
      v277[0] = v144;
      int v145 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v146 = (int)v278;
      if (!v145) {
        int v146 = 0;
      }
      char v147 = v145 ^ 1;
    }

    else
    {
      int v146 = 0;
      char v147 = 1;
    }

    v148 = v253;
    *(_DWORD *)v253 = v146;
    v148[4] = v147;
    NSString v149 = String._bridgeToObjectiveC()();
    id v150 = [v78 objectForKeyedSubscript:v149];

    if (v150)
    {
      v277[0] = v150;
      int v151 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v152 = (int)v278;
      if (!v151) {
        int v152 = 0;
      }
      char v153 = v151 ^ 1;
    }

    else
    {
      int v152 = 0;
      char v153 = 1;
    }

    v154 = v254;
    *(_DWORD *)v254 = v152;
    v154[4] = v153;
    NSString v155 = String._bridgeToObjectiveC()();
    id v156 = [v78 objectForKeyedSubscript:v155];

    if (v156)
    {
      v277[0] = v156;
      uint64_t v157 = (uint64_t)v255;
      uint64_t v158 = swift_dynamicCast(v255, v277, v106, v117, 6LL) ^ 1;
      uint64_t v159 = (char *)v157;
    }

    else
    {
      uint64_t v157 = (uint64_t)v255;
      uint64_t v159 = v255;
      uint64_t v158 = 1LL;
    }

    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v272)(v159, v158, 1LL, v117);
    uint64_t v160 = (uint64_t)v274;
    swift_beginAccess(v274, v277, 33LL, 0LL);
    sub_1000E622C(v157, v160);
    swift_endAccess(v277);
    NSString v161 = String._bridgeToObjectiveC()();
    id v162 = [v78 objectForKeyedSubscript:v161];

    if (v162)
    {
      v277[0] = v162;
      uint64_t v163 = (uint64_t)v257;
      uint64_t v164 = swift_dynamicCast(v257, v277, v106, v117, 6LL) ^ 1;
      v165 = (char *)v163;
    }

    else
    {
      uint64_t v163 = (uint64_t)v257;
      v165 = v257;
      uint64_t v164 = 1LL;
    }

    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v272)(v165, v164, 1LL, v117);
    uint64_t v166 = (uint64_t)v275;
    swift_beginAccess(v275, v277, 33LL, 0LL);
    sub_1000E622C(v163, v166);
    swift_endAccess(v277);
    NSString v167 = String._bridgeToObjectiveC()();
    id v168 = [v78 objectForKeyedSubscript:v167];

    if (v168)
    {
      v277[0] = v168;
      int v169 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v170 = (int)v278;
      if (!v169) {
        int v170 = 0;
      }
      char v171 = v169 ^ 1;
    }

    else
    {
      int v170 = 0;
      char v171 = 1;
    }

    v172 = v256;
    *(_DWORD *)v256 = v170;
    v172[4] = v171;
    NSString v173 = String._bridgeToObjectiveC()();
    id v174 = [v78 objectForKeyedSubscript:v173];

    if (v174)
    {
      v277[0] = v174;
      int v175 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v176 = (int)v278;
      if (!v175) {
        int v176 = 0;
      }
      char v177 = v175 ^ 1;
    }

    else
    {
      int v176 = 0;
      char v177 = 1;
    }

    id v178 = v258;
    *(_DWORD *)v258 = v176;
    v178[4] = v177;
    NSString v179 = String._bridgeToObjectiveC()();
    id v180 = [v78 objectForKeyedSubscript:v179];

    if (v180)
    {
      v277[0] = v180;
      int v181 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v182 = (int)v278;
      if (!v181) {
        int v182 = 0;
      }
      char v183 = v181 ^ 1;
    }

    else
    {
      int v182 = 0;
      char v183 = 1;
    }

    v184 = v259;
    *(_DWORD *)v259 = v182;
    v184[4] = v183;
    NSString v185 = String._bridgeToObjectiveC()();
    id v186 = [v78 objectForKeyedSubscript:v185];

    if (v186)
    {
      v277[0] = v186;
      int v187 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v188 = (int)v278;
      if (!v187) {
        int v188 = 0;
      }
      char v189 = v187 ^ 1;
    }

    else
    {
      int v188 = 0;
      char v189 = 1;
    }

    uint64_t v190 = v260;
    *(_DWORD *)v260 = v188;
    v190[4] = v189;
    NSString v191 = String._bridgeToObjectiveC()();
    id v192 = [v78 objectForKeyedSubscript:v191];

    if (v192)
    {
      v277[0] = v192;
      int v193 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v194 = (int)v278;
      if (!v193) {
        int v194 = 0;
      }
      char v195 = v193 ^ 1;
    }

    else
    {
      int v194 = 0;
      char v195 = 1;
    }

    v196 = v261;
    *(_DWORD *)v261 = v194;
    v196[4] = v195;
    NSString v197 = String._bridgeToObjectiveC()();
    id v198 = [v78 objectForKeyedSubscript:v197];

    if (v198)
    {
      v277[0] = v198;
      int v199 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v200 = (int)v278;
      if (!v199) {
        int v200 = 0;
      }
      char v201 = v199 ^ 1;
    }

    else
    {
      int v200 = 0;
      char v201 = 1;
    }

    Class v202 = v262;
    *(_DWORD *)v262 = v200;
    v202[4] = v201;
    NSString v203 = String._bridgeToObjectiveC()();
    id v204 = [v78 objectForKeyedSubscript:v203];

    if (v204)
    {
      v277[0] = v204;
      int v205 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v206 = (int)v278;
      if (!v205) {
        int v206 = 0;
      }
      char v207 = v205 ^ 1;
    }

    else
    {
      int v206 = 0;
      char v207 = 1;
    }

    v208 = v263;
    *(_DWORD *)v263 = v206;
    v208[4] = v207;
    NSString v209 = String._bridgeToObjectiveC()();
    id v210 = [v78 objectForKeyedSubscript:v209];

    if (v210)
    {
      v277[0] = v210;
      int v211 = swift_dynamicCast(&v278, v277, v106, &type metadata for UInt32, 6LL);
      int v212 = (int)v278;
      if (!v211) {
        int v212 = 0;
      }
      char v213 = v211 ^ 1;
    }

    else
    {
      int v212 = 0;
      char v213 = 1;
    }

    v214 = v244;
    *(_DWORD *)v244 = v212;
    v214[4] = v213;
    id v215 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
    id v216 = v242;
    [v242 encodeSystemFieldsWithCoder:v215];
    [v215 finishEncoding];
    id v217 = [v215 encodedData];
    uint64_t v218 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v220 = v219;

    v221 = (uint64_t *)&v273[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    uint64_t *v221 = v218;
    v221[1] = v220;
    id v222 = [v216 modificationDate];
    if (v222)
    {
      v223 = v222;
      v224 = v268;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v222);

      uint64_t v226 = (uint64_t)v265;
      uint64_t v225 = v266;
      v227 = *(void (**)(char *, char *, uint64_t))(v266 + 32);
      v227(v265, v224, v117);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v272)(v226, 0LL, 1LL, v117);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48))(v226, 1LL, v117) != 1)
      {
        swift_unknownObjectRelease(v78);
        (*(void (**)(char *, uint64_t))(v270 + 8))(v269, v271);
        v228 = v246;
        v227(v246, (char *)v226, v117);
        v229 = v273;
LABEL_152:
        v227(&v229[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], v228, v117);

        v239 = (objc_class *)type metadata accessor for HMDeviceCloudRecord(0LL);
        v276.receiver = v229;
        v276.super_class = v239;
        id v70 = objc_msgSendSuper2(&v276, "init");

        return v70;
      }
    }

    else
    {
      uint64_t v226 = (uint64_t)v265;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v272)(v265, 1LL, 1LL, v117);
      uint64_t v225 = v266;
    }

    id v230 = [v216 creationDate];
    v229 = v273;
    if (v230)
    {
      v231 = v230;
      v232 = v268;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v230);

      v233 = *(void (**)(uint64_t, char *, uint64_t))(v225 + 32);
      v234 = v232;
      Swift::String v78 = v241;
      uint64_t v235 = v271;
      v233(v110, v234, v117);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v272)(v110, 0LL, 1LL, v117);
      uint64_t v236 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v225 + 48))(v110, 1LL, v117);
      if ((_DWORD)v236 != 1)
      {
        swift_unknownObjectRelease(v78);
        (*(void (**)(char *, uint64_t))(v270 + 8))(v269, v235);
        v228 = v246;
        v233((uint64_t)v246, (char *)v110, v117);
LABEL_151:
        sub_100099358(v226, (uint64_t *)&unk_100234E10);
        v227 = *(void (**)(char *, char *, uint64_t))(v225 + 32);
        id v216 = v242;
        goto LABEL_152;
      }
    }

    else
    {
      uint64_t v236 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v272)(v110, 1LL, 1LL, v117);
      uint64_t v235 = v271;
    }

    v237 = v246;
    static Date.now.getter(v236);
    v238 = v78;
    v228 = v237;
    swift_unknownObjectRelease(v238);
    (*(void (**)(char *, uint64_t))(v270 + 8))(v269, v235);
    sub_100099358(v110, (uint64_t *)&unk_100234E10);
    goto LABEL_151;
  }

  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, 0xD000000000000013LL, 0x80000001001A85A0LL, 0LL);
  swift_bridgeObjectRelease(v44);
  if ((v45 & 1) != 0) {
    goto LABEL_5;
  }
  unint64_t v67 = sub_1000E7150();
  uint64_t v68 = swift_allocError(&type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError, v67, 0LL, 0LL);
  *char v69 = 0;
  swift_willThrow(v68);
LABEL_13:

  id v70 = &unk_100234E10;
  sub_100099358((uint64_t)v274, (uint64_t *)&unk_100234E10);
  sub_100099358((uint64_t)v275, (uint64_t *)&unk_100234E10);

  uint64_t v71 = type metadata accessor for HMDeviceCloudRecord(0LL);
  swift_deallocPartialClassInstance( v41,  v71,  *(unsigned int *)((swift_isaMask & *(void *)v41) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v41) + 0x34LL));
  return v70;
}

void *sub_1000E0444(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v5);
  char v195 = (char *)&v173 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  char v177 = (char *)&v173 - v8;
  __chkstk_darwin(v9);
  v196 = (char *)&v173 - v10;
  uint64_t v11 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v11);
  int v176 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v198 = (char *)&v173 - v14;
  __n128 v16 = __chkstk_darwin(v15);
  int v175 = (char *)&v173 - v17;
  uint64_t v18 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  *uint64_t v18 = 0;
  id v178 = v18;
  *((_BYTE *)v18 + 4) = 1;
  uint64_t v19 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  *uint64_t v19 = 0;
  NSString v179 = v19;
  *((_BYTE *)v19 + 4) = 1;
  uint64_t v20 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  *uint64_t v20 = 0;
  id v180 = v20;
  *((_BYTE *)v20 + 4) = 1;
  __n128 v21 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  *__n128 v21 = 0;
  int v181 = v21;
  *((_BYTE *)v21 + 4) = 1;
  uint64_t v22 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  *uint64_t v22 = 0;
  int v182 = v22;
  *((_BYTE *)v22 + 4) = 1;
  uint64_t v23 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  *uint64_t v23 = 0;
  char v183 = v23;
  *((_BYTE *)v23 + 4) = 1;
  Swift::String v24 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  *Swift::String v24 = 0;
  v184 = v24;
  *((_BYTE *)v24 + 4) = 1;
  uint64_t v25 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  *uint64_t v25 = 0;
  NSString v185 = v25;
  *((_BYTE *)v25 + 4) = 1;
  Swift::String v26 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  *Swift::String v26 = 0;
  id v186 = v26;
  *((_BYTE *)v26 + 4) = 1;
  uint64_t v199 = v27;
  char v28 = *(void (**)(__n128))(v27 + 56);
  int v200 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  v28(v16);
  char v201 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  NSString v197 = v28;
  ((void (*)(void))v28)();
  Swift::String v29 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  *Swift::String v29 = 0;
  int v187 = v29;
  *((_BYTE *)v29 + 4) = 1;
  Swift::String v30 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  *Swift::String v30 = 0;
  int v188 = v30;
  *((_BYTE *)v30 + 4) = 1;
  Swift::String v31 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  *Swift::String v31 = 0;
  char v189 = v31;
  *((_BYTE *)v31 + 4) = 1;
  uint64_t v32 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  *uint64_t v32 = 0;
  uint64_t v190 = v32;
  *((_BYTE *)v32 + 4) = 1;
  Swift::String v33 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  *Swift::String v33 = 0;
  NSString v191 = v33;
  *((_BYTE *)v33 + 4) = 1;
  Swift::String v34 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  *Swift::String v34 = 0;
  id v192 = v34;
  *((_BYTE *)v34 + 4) = 1;
  uint64_t v35 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  unsigned int *v35 = 0;
  int v193 = v35;
  *((_BYTE *)v35 + 4) = 1;
  Swift::String v36 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  unsigned int *v36 = 0;
  int v194 = v36;
  *((_BYTE *)v36 + 4) = 1;
  Swift::String v37 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  *(_OWORD *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata] = xmmword_1001A7C10;
  uint64_t v38 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier];
  uint64_t v39 = type metadata accessor for UUID(0LL);
  uint64_t v202 = *(void *)(v39 - 8);
  uint64_t v203 = v39;
  (*(void (**)(char *, uint64_t))(v202 + 16))(v38, a1);
  int v206 = v2;
  id v40 = [a2 bluetoothAddress];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  unint64_t v43 = v42;

  swift_bridgeObjectRelease(v43);
  uint64_t v44 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000LL) == 0) {
    uint64_t v44 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (!v44) {
    goto LABEL_8;
  }
  uint64_t v174 = v11;
  id v45 = [a2 bluetoothAddress];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  uint64_t v48 = v47;

  if (v46 == 0xD000000000000011LL && v48 == 0x80000001001CCC20LL)
  {
    swift_bridgeObjectRelease(0x80000001001CCC20LL);
LABEL_8:
    unint64_t v51 = sub_1000E7150();
    uint64_t v52 = swift_allocError(&type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError, v51, 0LL, 0LL);
    _BYTE *v53 = 3;
    swift_willThrow(v52);

    uint64_t v54 = v203;
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v202 + 8);
    v55(a1, v203);
    sub_100099394(*(void *)v37, *((void *)v37 + 1));
    v55((uint64_t)v38, v54);
    sub_100099358((uint64_t)v200, (uint64_t *)&unk_100234E10);
    sub_100099358((uint64_t)v201, (uint64_t *)&unk_100234E10);
    uint64_t v56 = v206;

    uint64_t v57 = type metadata accessor for HMDeviceCloudRecord(0LL);
    swift_deallocPartialClassInstance( v56,  v57,  *(unsigned int *)((swift_isaMask & *v56) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v56) + 0x34LL));
    return v56;
  }

  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
  swift_bridgeObjectRelease(v48);
  uint64_t v50 = v174;
  if ((v49 & 1) != 0) {
    goto LABEL_8;
  }
  unsigned __int8 v59 = [a2 haRegionStatus];
  uint64_t v60 = v206;
  v206[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] = v59;
  unsigned __int8 v61 = [a2 hpRegionStatus];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] = v61;
  unsigned __int8 v62 = [a2 mediaAssistEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] = v62;
  unsigned __int8 v63 = [a2 pmeMediaEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] = v63;
  unsigned __int8 v64 = [a2 pmeVoiceEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] = v64;
  unsigned __int8 v65 = [a2 swipeGainEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] = v65;
  id v66 = [a2 bluetoothAddress];
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
  uint64_t v69 = v68;

  id v70 = (uint64_t *)&v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
  *id v70 = v67;
  v70[1] = v69;
  id v71 = [a2 bottomMicFaultCountLeft];
  if (v71)
  {
    Swift::String v72 = v71;
    unsigned int v73 = [v71 unsignedIntValue];

    Swift::String v74 = v178;
    *id v178 = v73;
    *((_BYTE *)v74 + 4) = 0;
  }

  id v75 = [a2 bottomMicFaultCountRight];
  Swift::String v76 = v196;
  char v77 = v197;
  if (v75)
  {
    Swift::String v78 = v75;
    unsigned int v79 = [v75 unsignedIntValue];

    NSString v80 = v179;
    unsigned int *v179 = v79;
    *((_BYTE *)v80 + 4) = 0;
  }

  id v81 = [a2 diagnosticMeasurementsCount];
  if (v81)
  {
    char v82 = v81;
    unsigned int v83 = [v81 unsignedIntValue];

    id v84 = v180;
    *id v180 = v83;
    *((_BYTE *)v84 + 4) = 0;
  }

  id v85 = [a2 freqAccuracyFaultCountLeft];
  if (v85)
  {
    Swift::String v86 = v85;
    unsigned int v87 = [v85 unsignedIntValue];

    id v88 = v181;
    unsigned int *v181 = v87;
    *((_BYTE *)v88 + 4) = 0;
  }

  id v89 = [a2 freqAccuracyFaultCountRight];
  if (v89)
  {
    NSString v90 = v89;
    unsigned int v91 = [v89 unsignedIntValue];

    char v92 = v182;
    unsigned int *v182 = v91;
    *((_BYTE *)v92 + 4) = 0;
  }

  id v93 = [a2 frontVentFaultCountLeft];
  if (v93)
  {
    id v94 = v93;
    unsigned int v95 = [v93 unsignedIntValue];

    NSString v96 = v183;
    *char v183 = v95;
    *((_BYTE *)v96 + 4) = 0;
  }

  id v97 = [a2 frontVentFaultCountRight];
  if (v97)
  {
    char v98 = v97;
    unsigned int v99 = [v97 unsignedIntValue];

    id v100 = v184;
    unsigned int *v184 = v99;
    *((_BYTE *)v100 + 4) = 0;
  }

  id v101 = [a2 innerMicFaultCountLeft];
  if (v101)
  {
    int v102 = v101;
    unsigned int v103 = [v101 unsignedIntValue];

    NSString v104 = v185;
    *NSString v185 = v103;
    *((_BYTE *)v104 + 4) = 0;
  }

  id v105 = [a2 innerMicFaultCountRight];
  if (v105)
  {
    uint64_t v106 = v105;
    unsigned int v107 = [v105 unsignedIntValue];

    int v108 = v186;
    *id v186 = v107;
    *((_BYTE *)v108 + 4) = 0;
  }

  id v109 = [a2 latestDiagnosticTimestampLeft];
  if (v109)
  {
    uint64_t v110 = v109;
    Swift::String v111 = v77;
    NSString v112 = v198;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v109);

    uint64_t v113 = v199;
    int v114 = *(void (**)(char *, char *, uint64_t))(v199 + 32);
    int v115 = v112;
    char v77 = v111;
    v114(v76, v115, v50);
    ((void (*)(char *, void, uint64_t, uint64_t))v111)(v76, 0LL, 1LL, v50);
    char v116 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48);
    uint64_t v117 = v76;
    uint64_t v118 = (uint64_t)v76;
    uint64_t v119 = v50;
    if (v116(v117, 1LL, v50) != 1)
    {
      id v120 = v175;
      v114(v175, (char *)v118, v50);
      uint64_t v121 = (uint64_t)v177;
      int v122 = v120;
      char v77 = v111;
      v114(v177, v122, v50);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v111)(v121, 0LL, 1LL, v50);
      uint64_t v123 = (uint64_t)v200;
      swift_beginAccess(v200, v204, 33LL, 0LL);
      sub_1000E622C(v121, v123);
      swift_endAccess(v204);
      uint64_t v124 = (uint64_t)v195;
      goto LABEL_33;
    }
  }

  else
  {
    NSString v125 = v76;
    uint64_t v118 = (uint64_t)v76;
    uint64_t v119 = v50;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77)(v125, 1LL, 1LL, v50);
  }

  sub_100099358(v118, (uint64_t *)&unk_100234E10);
  uint64_t v124 = (uint64_t)v195;
  uint64_t v50 = v119;
LABEL_33:
  id v126 = [a2 latestDiagnosticTimestampRight];
  if (!v126)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v77)(v124, 1LL, 1LL, v50);
    goto LABEL_37;
  }

  int v127 = v126;
  uint64_t v128 = v50;
  char v129 = v77;
  __int128 v130 = v198;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v126);

  uint64_t v131 = v199;
  id v132 = *(void (**)(uint64_t, char *, uint64_t))(v199 + 32);
  int v133 = v130;
  int v134 = v129;
  uint64_t v50 = v128;
  v132(v124, v133, v128);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v134)(v124, 0LL, 1LL, v128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v124, 1LL, v128) == 1)
  {
LABEL_37:
    sub_100099358(v124, (uint64_t *)&unk_100234E10);
    goto LABEL_38;
  }

  char v135 = v176;
  v132((uint64_t)v176, (char *)v124, v128);
  uint64_t v136 = (uint64_t)v177;
  v132((uint64_t)v177, v135, v128);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v134)(v136, 0LL, 1LL, v128);
  uint64_t v137 = (uint64_t)v201;
  swift_beginAccess(v201, v204, 33LL, 0LL);
  sub_1000E622C(v136, v137);
  swift_endAccess(v204);
LABEL_38:
  id v138 = [a2 rearVentFaultCountLeft];
  if (v138)
  {
    int v139 = v138;
    unsigned int v140 = [v138 unsignedIntValue];

    char v141 = v187;
    *int v187 = v140;
    *((_BYTE *)v141 + 4) = 0;
  }

  id v142 = [a2 rearVentFaultCountRight];
  if (v142)
  {
    NSString v143 = v142;
    unsigned int v144 = [v142 unsignedIntValue];

    int v145 = v188;
    *int v188 = v144;
    *((_BYTE *)v145 + 4) = 0;
  }

  id v146 = [a2 speakerFaultCountLeft];
  if (v146)
  {
    char v147 = v146;
    unsigned int v148 = [v146 unsignedIntValue];

    NSString v149 = v189;
    unsigned int *v189 = v148;
    *((_BYTE *)v149 + 4) = 0;
  }

  id v150 = [a2 speakerFaultCountRight];
  if (v150)
  {
    int v151 = v150;
    unsigned int v152 = [v150 unsignedIntValue];

    char v153 = v190;
    *uint64_t v190 = v152;
    *((_BYTE *)v153 + 4) = 0;
  }

  id v154 = [a2 topMicFaultCountLeft];
  if (v154)
  {
    NSString v155 = v154;
    unsigned int v156 = [v154 unsignedIntValue];

    uint64_t v157 = v191;
    *NSString v191 = v156;
    *((_BYTE *)v157 + 4) = 0;
  }

  id v158 = [a2 topMicFaultCountRight];
  if (v158)
  {
    uint64_t v159 = v158;
    unsigned int v160 = [v158 unsignedIntValue];

    NSString v161 = v192;
    *id v192 = v160;
    *((_BYTE *)v161 + 4) = 0;
  }

  id v162 = [a2 totalHarmonicDistortionFaultCountLeft];
  if (v162)
  {
    uint64_t v163 = v162;
    unsigned int v164 = [v162 unsignedIntValue];

    v165 = v193;
    unsigned int *v193 = v164;
    *((_BYTE *)v165 + 4) = 0;
  }

  id v166 = [a2 totalHarmonicDistortionFaultCountRight];
  if (v166)
  {
    NSString v167 = v166;
    unsigned int v168 = [v166 unsignedIntValue];

    int v169 = v194;
    *int v194 = v168;
    *((_BYTE *)v169 + 4) = 0;
  }

  int v170 = v198;
  static Date.now.getter(v166);
  char v171 = v206;
  (*(void (**)(char *, char *, uint64_t))(v199 + 32))( &v206[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate],  v170,  v50);

  v172 = (objc_class *)type metadata accessor for HMDeviceCloudRecord(0LL);
  v205.receiver = v171;
  v205.super_class = v172;
  uint64_t v56 = objc_msgSendSuper2(&v205, "init");

  (*(void (**)(uint64_t, uint64_t))(v202 + 8))(a1, v203);
  return v56;
}

char *HMDeviceCloudRecord.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return HMDeviceCloudRecord.init(from:)(a1);
}

char *HMDeviceCloudRecord.init(from:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v145 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unsigned int v140 = (char *)&v125 - v7;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v8);
  char v141 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  id v142 = (char *)&v125 - v11;
  __chkstk_darwin(v12);
  NSString v143 = (char *)&v125 - v13;
  __chkstk_darwin(v14);
  uint64_t v135 = (uint64_t)&v125 - v15;
  __chkstk_darwin(v16);
  uint64_t v131 = (uint64_t)&v125 - v17;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v152 = v18;
  uint64_t v153 = v19;
  __chkstk_darwin(v18);
  NSString v155 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = sub_100098CD8(&qword_100235D50);
  uint64_t v154 = *(void *)(v156 - 8);
  __n128 v21 = __chkstk_darwin(v156);
  unsigned int v160 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  *(_DWORD *)uint64_t v23 = 0;
  int v151 = v23;
  v23[4] = 1;
  Swift::String v24 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  *(_DWORD *)Swift::String v24 = 0;
  id v150 = v24;
  v24[4] = 1;
  uint64_t v25 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  *(_DWORD *)uint64_t v25 = 0;
  NSString v149 = v25;
  v25[4] = 1;
  Swift::String v26 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  *(_DWORD *)Swift::String v26 = 0;
  unsigned int v148 = v26;
  v26[4] = 1;
  uint64_t v27 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  *(_DWORD *)uint64_t v27 = 0;
  char v147 = v27;
  v27[4] = 1;
  char v28 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  *(_DWORD *)char v28 = 0;
  id v146 = v28;
  v28[4] = 1;
  Swift::String v29 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  *(_DWORD *)Swift::String v29 = 0;
  int v127 = v29;
  v29[4] = 1;
  Swift::String v30 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  *(_DWORD *)Swift::String v30 = 0;
  uint64_t v128 = v30;
  v30[4] = 1;
  Swift::String v31 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  *(_DWORD *)Swift::String v31 = 0;
  char v129 = v31;
  v31[4] = 1;
  uint64_t v144 = v4;
  uint64_t v32 = *(void (**)(__n128))(v4 + 56);
  __int128 v130 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  v32(v21);
  id v132 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  uint64_t v138 = v3;
  int v139 = v32;
  ((void (*)(void))v32)();
  Swift::String v33 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  *(_DWORD *)Swift::String v33 = 0;
  int v133 = v33;
  v33[4] = 1;
  Swift::String v34 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  *(_DWORD *)Swift::String v34 = 0;
  int v134 = v34;
  v34[4] = 1;
  uint64_t v35 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  *(_DWORD *)uint64_t v35 = 0;
  uint64_t v136 = v35;
  v35[4] = 1;
  Swift::String v36 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  *(_DWORD *)Swift::String v36 = 0;
  uint64_t v137 = v36;
  v36[4] = 1;
  Swift::String v37 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  *(_DWORD *)Swift::String v37 = 0;
  v37[4] = 1;
  uint64_t v38 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  *(_DWORD *)uint64_t v38 = 0;
  v38[4] = 1;
  uint64_t v39 = (uint64_t *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  *(_DWORD *)uint64_t v39 = 0;
  *((_BYTE *)v39 + 4) = 1;
  id v40 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  *(_DWORD *)id v40 = 0;
  v40[4] = 1;
  uint64_t v41 = a1[3];
  uint64_t v157 = (uint64_t *)a1[4];
  uint64_t v159 = a1;
  sub_10009A430(a1, v41);
  unint64_t v42 = sub_1000E61AC();
  unint64_t v43 = v1;
  uint64_t v44 = v158;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for HMDeviceCloudRecord.CodingKeys,  &type metadata for HMDeviceCloudRecord.CodingKeys,  v42,  v41,  v157);
  if (!v44)
  {
    id v45 = v155;
    NSString v125 = v37;
    id v126 = v38;
    uint64_t v157 = v39;
    id v158 = v40;
    uint64_t v46 = v43;
    uint64_t v47 = v154;
    char v163 = 0;
    unint64_t v48 = sub_10009A4B8();
    uint64_t v49 = v156;
    uint64_t v50 = v160;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v162,  &type metadata for Data,  &v163,  v156,  &type metadata for Data,  v48);
    *(_OWORD *)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata] = v162;
    LOBYTE(v162) = 1;
    uint64_t v54 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v55 = v152;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45, v152, &v162, v49, v152, v54);
    (*(void (**)(char *, void *, uint64_t))(v153 + 32))( &v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier],  v45,  v55);
    LOBYTE(v162) = 2;
    NSString v155 = 0LL;
    uint64_t v56 = KeyedDecodingContainer.decode(_:forKey:)(&v162, v49);
    uint64_t v57 = (uint64_t *)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
    *uint64_t v57 = v56;
    v57[1] = v58;
    LOBYTE(v162) = 3;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] = KeyedDecodingContainer.decode(_:forKey:)( &v162,  v49);
    LOBYTE(v162) = 4;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] = KeyedDecodingContainer.decode(_:forKey:)( &v162,  v49);
    LOBYTE(v162) = 5;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] = KeyedDecodingContainer.decode(_:forKey:)( &v162,  v49);
    LOBYTE(v162) = 6;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] = KeyedDecodingContainer.decode(_:forKey:)( &v162,  v49);
    LOBYTE(v162) = 7;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] = KeyedDecodingContainer.decode(_:forKey:)( &v162,  v49);
    LOBYTE(v162) = 8;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] = KeyedDecodingContainer.decode(_:forKey:)( &v162,  v49);
    LOBYTE(v162) = 9;
    unsigned __int8 v59 = v50;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v49);
    unsigned __int8 v61 = v151;
    *(_DWORD *)int v151 = v60;
    v61[4] = BYTE4(v60) & 1;
    LOBYTE(v162) = 10;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    unsigned __int8 v63 = v150;
    *(_DWORD *)id v150 = v62;
    v63[4] = BYTE4(v62) & 1;
    LOBYTE(v162) = 11;
    uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    unsigned __int8 v65 = v149;
    *(_DWORD *)NSString v149 = v64;
    v65[4] = BYTE4(v64) & 1;
    LOBYTE(v162) = 12;
    uint64_t v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    uint64_t v67 = v148;
    *(_DWORD *)unsigned int v148 = v66;
    v67[4] = BYTE4(v66) & 1;
    LOBYTE(v162) = 13;
    uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    uint64_t v69 = v147;
    *(_DWORD *)char v147 = v68;
    v69[4] = BYTE4(v68) & 1;
    LOBYTE(v162) = 14;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    id v71 = v146;
    *(_DWORD *)id v146 = v70;
    v71[4] = BYTE4(v70) & 1;
    LOBYTE(v162) = 15;
    uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    unsigned int v73 = v127;
    *(_DWORD *)int v127 = v72;
    v73[4] = BYTE4(v72) & 1;
    LOBYTE(v162) = 16;
    uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    id v75 = v128;
    *(_DWORD *)uint64_t v128 = v74;
    v75[4] = BYTE4(v74) & 1;
    LOBYTE(v162) = 17;
    uint64_t v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    char v77 = v129;
    *(_DWORD *)char v129 = v76;
    v77[4] = BYTE4(v76) & 1;
    LOBYTE(v162) = 18;
    uint64_t v78 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v138, &v162, v156, v138, v78);
    uint64_t v79 = (uint64_t)v130;
    swift_beginAccess(v130, &v162, 33LL, 0LL);
    sub_1000E622C(v131, v79);
    swift_endAccess(&v162);
    LOBYTE(v162) = 19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v138, &v162, v156, v138, v78);
    uint64_t v80 = (uint64_t)v132;
    swift_beginAccess(v132, &v162, 33LL, 0LL);
    sub_1000E622C(v135, v80);
    swift_endAccess(&v162);
    LOBYTE(v162) = 20;
    uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    char v82 = v133;
    *(_DWORD *)int v133 = v81;
    v82[4] = BYTE4(v81) & 1;
    LOBYTE(v162) = 21;
    uint64_t v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    id v84 = v134;
    *(_DWORD *)int v134 = v83;
    v84[4] = BYTE4(v83) & 1;
    LOBYTE(v162) = 22;
    uint64_t v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    Swift::String v86 = v136;
    *(_DWORD *)uint64_t v136 = v85;
    v86[4] = BYTE4(v85) & 1;
    LOBYTE(v162) = 23;
    uint64_t v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    id v88 = v137;
    *(_DWORD *)uint64_t v137 = v87;
    v88[4] = BYTE4(v87) & 1;
    LOBYTE(v162) = 24;
    uint64_t v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    NSString v90 = v125;
    *(_DWORD *)NSString v125 = v89;
    v90[4] = BYTE4(v89) & 1;
    LOBYTE(v162) = 25;
    uint64_t v91 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    char v92 = v126;
    *(_DWORD *)id v126 = v91;
    v92[4] = BYTE4(v91) & 1;
    LOBYTE(v162) = 26;
    uint64_t v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v156);
    uint64_t v94 = v156;
    unsigned int v95 = v157;
    *(_DWORD *)uint64_t v157 = v93;
    *((_BYTE *)v95 + 4) = BYTE4(v93) & 1;
    LOBYTE(v162) = 27;
    uint64_t v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v162, v94);
    id v97 = v158;
    *(_DWORD *)id v158 = v96;
    v97[4] = BYTE4(v96) & 1;
    char v98 = v140;
    static Date.now.getter(v96);
    uint64_t v99 = v138;
    id v100 = *(void (**)(char *, char *, uint64_t))(v144 + 32);
    v100(&v46[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], v98, v138);

    id v101 = (objc_class *)type metadata accessor for HMDeviceCloudRecord(0LL);
    v161.receiver = v46;
    v161.super_class = v101;
    id v102 = objc_msgSendSuper2(&v161, "init");
    LOBYTE(v162) = 28;
    unint64_t v51 = (char *)v102;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v99, &v162, v156, v99, v78);
    id v158 = *(char **)(v144 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v158)(v143, 1LL, v138) != 1)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v156);
      v100(v145, v143, v138);
LABEL_22:
      uint64_t v124 = &v51[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate];
      swift_beginAccess(&v51[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], &v162, 33LL, 0LL);
      (*(void (**)(char *, char *, uint64_t))(v144 + 40))(v124, v145, v138);
      swift_endAccess(&v162);
      sub_10009A498(v159);

      return v51;
    }

    unsigned int v103 = objc_autoreleasePoolPush();
    uint64_t v104 = *(void *)&v51[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    unint64_t v105 = *(void *)&v51[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata + 8];
    uint64_t v157 = (uint64_t *)&v51[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    sub_1000991CC(v104, v105);
    sub_100118B60(v104, v105);
    Class isa = v106;
    sub_100099394(v104, v105);
    if (!isa)
    {
      int v108 = v51;
      Class isa = sub_1000A3774((uint64_t)v108).super.isa;
    }

    *(void *)&__int128 v162 = isa;
    sub_1000E329C((id *)&v162);
    objc_autoreleasePoolPop(v103);
    id v109 = -[objc_class modificationDate](isa, "modificationDate");

    if (v109)
    {
      uint64_t v110 = v140;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v109);

      uint64_t v111 = (uint64_t)v142;
      uint64_t v112 = v138;
      v100(v142, v110, v138);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v139)(v111, 0LL, 1LL, v112);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v158)(v111, 1LL, v112) != 1)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v156);
        v100(v145, v142, v138);
LABEL_21:
        sub_100099358((uint64_t)v143, (uint64_t *)&unk_100234E10);
        goto LABEL_22;
      }
    }

    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v139)(v142, 1LL, 1LL, v138);
    }

    uint64_t v113 = objc_autoreleasePoolPush();
    uint64_t v114 = *v157;
    unint64_t v115 = v157[1];
    sub_1000991CC(*v157, v115);
    sub_100118B60(v114, v115);
    Class v117 = v116;
    sub_100099394(v114, v115);
    if (!v117)
    {
      uint64_t v118 = v51;
      Class v117 = sub_1000A3774((uint64_t)v118).super.isa;
    }

    *(void *)&__int128 v162 = v117;
    sub_1000E329C((id *)&v162);
    objc_autoreleasePoolPop(v113);
    id v119 = -[objc_class creationDate](v117, "creationDate");

    if (v119)
    {
      id v120 = v140;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v119);

      uint64_t v121 = (uint64_t)v141;
      uint64_t v122 = v138;
      v100(v141, v120, v138);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v139)(v121, 0LL, 1LL, v122);
      uint64_t v123 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v158)(v121, 1LL, v122);
      if ((_DWORD)v123 != 1)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v156);
        v100(v145, v141, v138);
LABEL_20:
        sub_100099358((uint64_t)v142, (uint64_t *)&unk_100234E10);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v123 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v139)(v141, 1LL, 1LL, v138);
    }

    static Date.now.getter(v123);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v156);
    sub_100099358((uint64_t)v141, (uint64_t *)&unk_100234E10);
    goto LABEL_20;
  }

  sub_10009A498(v159);
  unint64_t v51 = (char *)&unk_100234E10;
  sub_100099358( (uint64_t)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft],  (uint64_t *)&unk_100234E10);
  sub_100099358( (uint64_t)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight],  (uint64_t *)&unk_100234E10);
  uint64_t v52 = type metadata accessor for HMDeviceCloudRecord(0LL);
  swift_deallocPartialClassInstance( v43,  v52,  *(unsigned int *)((swift_isaMask & *(void *)v43) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v43) + 0x34LL));
  return v51;
}

void HMDeviceCloudRecord.init()()
{
}

uint64_t sub_1000E2368(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E23A8 + 4 * byte_1001A84F0[a1]))( 0x74654D64756F6C63LL,  0xED00006174616461LL);
}

uint64_t sub_1000E23A8()
{
  return 0x696669746E656469LL;
}

unint64_t sub_1000E23C4()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000E2648()
{
  return sub_1000E2368(*v0);
}

uint64_t sub_1000E2650@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000E669C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E2674(_BYTE *a1@<X8>)
{
  *a1 = 29;
}

uint64_t sub_1000E2680(uint64_t a1)
{
  unint64_t v2 = sub_1000E61AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E26A8(uint64_t a1)
{
  unint64_t v2 = sub_1000E61AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

id HMDeviceCloudRecord.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HMDeviceCloudRecord(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t HMDeviceCloudRecord.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v78 = type metadata accessor for Date(0LL);
  uint64_t v80 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v79 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v78 - v9;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100235D68);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  sub_10009A430(a1, v16);
  unint64_t v17 = sub_1000E61AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for HMDeviceCloudRecord.CodingKeys,  &type metadata for HMDeviceCloudRecord.CodingKeys,  v17,  v16,  v15);
  uint64_t v81 = v2;
  v86[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata);
  v85[0] = 0;
  unint64_t v18 = sub_10009A4FC();
  uint64_t v83 = v11;
  uint64_t v19 = v82;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v86, v85, v11, &type metadata for Data, v18);
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v83);
  }
  uint64_t v21 = (uint64_t)v10;
  uint64_t v22 = v81;
  uint64_t v23 = v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier;
  LOBYTE(v86[0]) = 1;
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v25 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v26 = v83;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, v86, v83, v24, v25);
  uint64_t v27 = *(void *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress);
  uint64_t v28 = *(void *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8);
  LOBYTE(v86[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v27, v28, v86, v26);
  uint64_t v29 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus);
  LOBYTE(v86[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v29, v86, v26);
  uint64_t v30 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus);
  LOBYTE(v86[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v30, v86, v26);
  uint64_t v31 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled);
  LOBYTE(v86[0]) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(v31, v86, v26);
  uint64_t v32 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled);
  LOBYTE(v86[0]) = 6;
  KeyedEncodingContainer.encode(_:forKey:)(v32, v86, v26);
  uint64_t v33 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled);
  LOBYTE(v86[0]) = 7;
  KeyedEncodingContainer.encode(_:forKey:)(v33, v86, v26);
  uint64_t v34 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled);
  LOBYTE(v86[0]) = 8;
  KeyedEncodingContainer.encode(_:forKey:)(v34, v86, v26);
  uint64_t v35 = *(unsigned int *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft);
  unsigned __int8 v36 = *(_BYTE *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4);
  LOBYTE(v86[0]) = 9;
  v85[0] = v36;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35 | ((unint64_t)v36 << 32), v86, v26);
  uint64_t v37 = *(unsigned int *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight);
  unsigned __int8 v38 = *(_BYTE *)(v22 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4);
  LOBYTE(v86[0]) = 10;
  v85[0] = v38;
  uint64_t v39 = v26;
  id v40 = v14;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37 | ((unint64_t)v38 << 32), v86, v39);
  uint64_t v41 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount);
  unsigned __int8 v42 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4);
  LOBYTE(v86[0]) = 11;
  v85[0] = v42;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v41 | ((unint64_t)v42 << 32), v86, v83);
  uint64_t v43 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft);
  unsigned __int8 v44 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4);
  LOBYTE(v86[0]) = 12;
  v85[0] = v44;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43 | ((unint64_t)v44 << 32), v86, v83);
  uint64_t v45 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight);
  unsigned __int8 v46 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4);
  LOBYTE(v86[0]) = 13;
  v85[0] = v46;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45 | ((unint64_t)v46 << 32), v86, v83);
  uint64_t v47 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft);
  unsigned __int8 v48 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4);
  LOBYTE(v86[0]) = 14;
  v85[0] = v48;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v47 | ((unint64_t)v48 << 32), v86, v83);
  uint64_t v49 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight);
  unsigned __int8 v50 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4);
  LOBYTE(v86[0]) = 15;
  v85[0] = v50;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v49 | ((unint64_t)v50 << 32), v86, v83);
  uint64_t v51 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft);
  unsigned __int8 v52 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4);
  LOBYTE(v86[0]) = 16;
  v85[0] = v52;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51 | ((unint64_t)v52 << 32), v86, v83);
  uint64_t v53 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight);
  unsigned __int8 v54 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4);
  LOBYTE(v86[0]) = 17;
  v85[0] = v54;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v53 | ((unint64_t)v54 << 32), v86, v83);
  uint64_t v55 = v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
  swift_beginAccess( v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft,  v86,  0LL,  0LL);
  sub_1000E6164(v55, v21);
  v85[0] = 18;
  uint64_t v56 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, v85, v83, v78, v56);
  sub_100099358(v21, (uint64_t *)&unk_100234E10);
  uint64_t v57 = v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
  swift_beginAccess( v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight,  v85,  0LL,  0LL);
  sub_1000E6164(v57, (uint64_t)v7);
  v84[0] = 19;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v7, v84, v83, v78, v56);
  sub_100099358((uint64_t)v7, (uint64_t *)&unk_100234E10);
  uint64_t v58 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft);
  unsigned __int8 v59 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4);
  v84[0] = 20;
  v87[0] = v59;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58 | ((unint64_t)v59 << 32), v84, v83);
  uint64_t v60 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight);
  unsigned __int8 v61 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4);
  v84[0] = 21;
  v87[0] = v61;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60 | ((unint64_t)v61 << 32), v84, v83);
  uint64_t v62 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft);
  unsigned __int8 v63 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4);
  v84[0] = 22;
  v87[0] = v63;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62 | ((unint64_t)v63 << 32), v84, v83);
  uint64_t v64 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight);
  unsigned __int8 v65 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4);
  v84[0] = 23;
  v87[0] = v65;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64 | ((unint64_t)v65 << 32), v84, v83);
  uint64_t v66 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft);
  unsigned __int8 v67 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4);
  v84[0] = 24;
  v87[0] = v67;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66 | ((unint64_t)v67 << 32), v84, v83);
  uint64_t v68 = *(unsigned int *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight);
  unsigned __int8 v69 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4);
  v84[0] = 25;
  v87[0] = v69;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68 | ((unint64_t)v69 << 32), v84, v83);
  uint64_t v70 = *(unsigned int *)(v81
                        + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft);
  unsigned __int8 v71 = *(_BYTE *)(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4);
  v84[0] = 26;
  v87[0] = v71;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70 | ((unint64_t)v71 << 32), v84, v83);
  uint64_t v72 = *(unsigned int *)(v81
                        + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight);
  unsigned __int8 v73 = *(_BYTE *)(v81
                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                 + 4);
  v84[0] = 27;
  v87[0] = v73;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72 | ((unint64_t)v73 << 32), v84, v83);
  uint64_t v74 = v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate;
  swift_beginAccess(v81 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate, v84, 0LL, 0LL);
  id v75 = v79;
  uint64_t v76 = v74;
  uint64_t v77 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v76, v78);
  v87[0] = 28;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v75, v87, v83, v77, v56);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v78);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v40, v83);
}

unint64_t sub_1000E31B8()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000E31D4()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata;
  uint64_t v2 = *(void *)v1;
  sub_1000991CC(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000E3214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000E327C(id *a1)
{
  return sub_1000E329C(a1);
}

uint64_t sub_1000E329C(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v109 = v4;
  uint64_t v110 = v5;
  __chkstk_darwin(v4);
  char v98 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = sub_100098CD8(&qword_100235DF0);
  __chkstk_darwin(v108);
  uint64_t v104 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v107 = (uint64_t)&v96 - v9;
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v10);
  uint64_t v101 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  unsigned int v103 = (char *)&v96 - v13;
  __chkstk_darwin(v14);
  id v102 = (uint64_t *)((char *)&v96 - v15);
  __chkstk_darwin(v16);
  uint64_t v100 = (uint64_t)&v96 - v17;
  __chkstk_darwin(v18);
  uint64_t v97 = (uint64_t)&v96 - v19;
  __chkstk_darwin(v20);
  unint64_t v105 = (uint64_t *)((char *)&v96 - v21);
  uint64_t v23 = static os_log_type_t.debug.getter(v22);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v24 = qword_10023DFC8;
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
  *(_OWORD *)(v26 + 16) = xmmword_1001A5EA0;
  id v27 = *a1;
  id v28 = [v27 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 64) = sub_10009914C();
  *(void *)(v26 + 32) = v29;
  *(void *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Updating HMDeviceCloudRecord: %@", 32LL, 2LL, v26);
  swift_bridgeObjectRelease(v26);
  id v32 = [v27 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v32);
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000010LL,  0x80000001001CAB00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v34 = *((void *)&v114 + 1);
  uint64_t v111 = v2;
  unint64_t v36 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress);
  unint64_t v35 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8);
  if (!*((void *)&v114 + 1)) {
    goto LABEL_7;
  }
  if (v114 != __PAIR128__(v35, v36))
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)( v114,  *((void *)&v114 + 1),  *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress),  *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8),  0LL);
    swift_bridgeObjectRelease(v34);
    if ((v37 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_7:
    *((void *)&v115 + 1) = &type metadata for String;
    char v116 = &protocol witness table for String;
    *(void *)&__int128 v114 = v36;
    *((void *)&v114 + 1) = v35;
    swift_bridgeObjectRetain(v35);
    CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000010LL, 0x80000001001CAB00LL, ObjectType);
    goto LABEL_8;
  }

  swift_bridgeObjectRelease(*((void *)&v114 + 1));
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0x6E6F696765526168LL,  0xEE00737574617453LL,  ObjectType,  &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v38 = v111;
  int v39 = *(unsigned __int8 *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus);
  if ((BYTE1(v114) & 1) != 0 || v114 != v39)
  {
    *((void *)&v115 + 1) = &type metadata for UInt8;
    char v116 = &protocol witness table for UInt8;
    LOBYTE(v114) = v39;
    CKRecordKeyValueSetting.subscript.setter(&v114, 0x6E6F696765526168LL, 0xEE00737574617453LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v114,  0x6E6F696765527068LL,  0xEE00737574617453LL,  ObjectType,  &type metadata for UInt8,  &protocol witness table for UInt8);
  int v40 = *(unsigned __int8 *)(v38 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus);
  if ((BYTE1(v114) & 1) != 0 || v114 != v40)
  {
    *((void *)&v115 + 1) = &type metadata for UInt8;
    char v116 = &protocol witness table for UInt8;
    LOBYTE(v114) = v40;
    CKRecordKeyValueSetting.subscript.setter(&v114, 0x6E6F696765527068LL, 0xEE00737574617453LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000012LL,  0x80000001001CE910LL,  ObjectType,  &type metadata for Int8,  &protocol witness table for Int8);
  int v41 = *(unsigned __int8 *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled);
  if ((BYTE1(v114) & 1) != 0 || v114 != v41)
  {
    *((void *)&v115 + 1) = &type metadata for Int8;
    char v116 = &protocol witness table for Int8;
    LOBYTE(v114) = v41;
    CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000012LL, 0x80000001001CE910LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v114,  0x616964654D656D70LL,  0xEF64656C62616E45LL,  ObjectType,  &type metadata for Int8,  &protocol witness table for Int8);
  uint64_t v42 = v111;
  int v43 = *(unsigned __int8 *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled);
  if ((BYTE1(v114) & 1) != 0 || v114 != v43)
  {
    *((void *)&v115 + 1) = &type metadata for Int8;
    char v116 = &protocol witness table for Int8;
    LOBYTE(v114) = v43;
    CKRecordKeyValueSetting.subscript.setter(&v114, 0x616964654D656D70LL, 0xEF64656C62616E45LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v114,  0x6563696F56656D70LL,  0xEF64656C62616E45LL,  ObjectType,  &type metadata for Int8,  &protocol witness table for Int8);
  int v44 = *(unsigned __int8 *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled);
  if ((BYTE1(v114) & 1) != 0 || v114 != v44)
  {
    *((void *)&v115 + 1) = &type metadata for Int8;
    char v116 = &protocol witness table for Int8;
    LOBYTE(v114) = v44;
    CKRecordKeyValueSetting.subscript.setter(&v114, 0x6563696F56656D70LL, 0xEF64656C62616E45LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000010LL,  0x80000001001CE950LL,  ObjectType,  &type metadata for Int8,  &protocol witness table for Int8);
  int v45 = *(unsigned __int8 *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled);
  if ((BYTE1(v114) & 1) != 0 || v114 != v45)
  {
    *((void *)&v115 + 1) = &type metadata for Int8;
    char v116 = &protocol witness table for Int8;
    LOBYTE(v114) = v45;
    CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000010LL, 0x80000001001CE950LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000017LL,  0x80000001001CE970LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v46 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_33:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000017LL, 0x80000001001CE970LL, ObjectType);
      goto LABEL_34;
    }

    if ((_DWORD)v114 == v46) {
      goto LABEL_34;
    }
LABEL_32:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v46;
    goto LABEL_33;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_32;
  }
LABEL_34:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000018LL,  0x80000001001CE990LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v47 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_41:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000018LL, 0x80000001001CE990LL, ObjectType);
      goto LABEL_42;
    }

    if ((_DWORD)v114 == v47) {
      goto LABEL_42;
    }
LABEL_40:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v47;
    goto LABEL_41;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) == 0) {
    goto LABEL_40;
  }
LABEL_42:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD00000000000001BLL,  0x80000001001CE9B0LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v48 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_49:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD00000000000001BLL, 0x80000001001CE9B0LL, ObjectType);
      goto LABEL_50;
    }

    if ((_DWORD)v114 == v48) {
      goto LABEL_50;
    }
LABEL_48:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v48;
    goto LABEL_49;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) == 0) {
    goto LABEL_48;
  }
LABEL_50:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD00000000000001ALL,  0x80000001001CE9D0LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v49 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_57:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD00000000000001ALL, 0x80000001001CE9D0LL, ObjectType);
      goto LABEL_58;
    }

    if ((_DWORD)v114 == v49) {
      goto LABEL_58;
    }
LABEL_56:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v49;
    goto LABEL_57;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_56;
  }
LABEL_58:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD00000000000001BLL,  0x80000001001CE9F0LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v50 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_65:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD00000000000001BLL, 0x80000001001CE9F0LL, ObjectType);
      goto LABEL_66;
    }

    if ((_DWORD)v114 == v50) {
      goto LABEL_66;
    }
LABEL_64:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v50;
    goto LABEL_65;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) == 0) {
    goto LABEL_64;
  }
LABEL_66:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000017LL,  0x80000001001CEA10LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v51 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_73:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000017LL, 0x80000001001CEA10LL, ObjectType);
      goto LABEL_74;
    }

    if ((_DWORD)v114 == v51) {
      goto LABEL_74;
    }
LABEL_72:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v51;
    goto LABEL_73;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_72;
  }
LABEL_74:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000018LL,  0x80000001001CEA30LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v52 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_81:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000018LL, 0x80000001001CEA30LL, ObjectType);
      goto LABEL_82;
    }

    if ((_DWORD)v114 == v52) {
      goto LABEL_82;
    }
LABEL_80:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v52;
    goto LABEL_81;
  }

  if ((*(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) == 0) {
    goto LABEL_80;
  }
LABEL_82:
  unint64_t v106 = 0xD000000000000016LL;
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000016LL,  0x80000001001CEA50LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v53 = *(_DWORD *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft);
  char v54 = *(_BYTE *)(v42 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4);
  if ((BYTE4(v114) & 1) == 0)
  {
    uint64_t v55 = (uint64_t)v103;
    uint64_t v56 = v105;
    if ((v54 & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_89:
      CKRecordKeyValueSetting.subscript.setter(&v114, v106, 0x80000001001CEA50LL, ObjectType);
      goto LABEL_90;
    }

    if ((_DWORD)v114 == v53) {
      goto LABEL_90;
    }
LABEL_88:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v53;
    goto LABEL_89;
  }

  uint64_t v55 = (uint64_t)v103;
  uint64_t v56 = v105;
  if ((v54 & 1) == 0) {
    goto LABEL_88;
  }
LABEL_90:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000017LL,  0x80000001001CEA70LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v57 = *(_DWORD *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_97:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000017LL, 0x80000001001CEA70LL, ObjectType);
      goto LABEL_98;
    }

    if ((_DWORD)v114 == v57) {
      goto LABEL_98;
    }
LABEL_96:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v57;
    goto LABEL_97;
  }

  if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) == 0) {
    goto LABEL_96;
  }
LABEL_98:
  unint64_t v99 = (unint64_t)"innerMicFaultCountRight";
  uint64_t v58 = v109;
  CKRecordKeyValueSetting.subscript.getter( v56,  0xD00000000000001DLL,  0x80000001001CEA90LL,  ObjectType,  v109,  &protocol witness table for Date);
  uint64_t v59 = v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
  swift_beginAccess( v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft,  v113,  0LL,  0LL);
  uint64_t v60 = v107;
  uint64_t v61 = v107 + *(int *)(v108 + 48);
  sub_1000E6164((uint64_t)v56, v107);
  sub_1000E6164(v59, v61);
  uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
  if (v62(v60, 1LL, v58) == 1)
  {
    sub_100099358((uint64_t)v56, (uint64_t *)&unk_100234E10);
    if (v62(v61, 1LL, v58) == 1)
    {
      sub_100099358(v107, (uint64_t *)&unk_100234E10);
      goto LABEL_109;
    }
  }

  else
  {
    uint64_t v63 = v97;
    sub_1000E6164(v60, v97);
    if (v62(v61, 1LL, v58) != 1)
    {
      uint64_t v64 = v110;
      unsigned __int8 v65 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v98, v61, v58);
      uint64_t v66 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      char v67 = dispatch thunk of static Equatable.== infix(_:_:)(v63, v65, v58, v66);
      uint64_t v68 = *(void (**)(char *, uint64_t))(v64 + 8);
      unsigned __int8 v69 = v65;
      uint64_t v55 = (uint64_t)v103;
      v68(v69, v58);
      sub_100099358((uint64_t)v105, (uint64_t *)&unk_100234E10);
      v68((char *)v63, v109);
      uint64_t v58 = v109;
      sub_100099358(v60, (uint64_t *)&unk_100234E10);
      if ((v67 & 1) != 0) {
        goto LABEL_109;
      }
      goto LABEL_105;
    }

    sub_100099358((uint64_t)v105, (uint64_t *)&unk_100234E10);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v63, v58);
  }

  sub_100099358(v107, &qword_100235DF0);
LABEL_105:
  uint64_t v70 = v100;
  sub_1000E6164(v59, v100);
  if (v62(v70, 1LL, v58) == 1)
  {
    sub_100099358(v70, (uint64_t *)&unk_100234E10);
    __int128 v114 = 0u;
    __int128 v115 = 0u;
    char v116 = 0LL;
  }

  else
  {
    *((void *)&v115 + 1) = v58;
    char v116 = &protocol witness table for Date;
    unsigned __int8 v71 = sub_1000E7194(&v114);
    (*(void (**)(void *, uint64_t, uint64_t))(v110 + 32))(v71, v70, v58);
  }

  CKRecordKeyValueSetting.subscript.setter(&v114, 0xD00000000000001DLL, v99 | 0x8000000000000000LL, ObjectType);
LABEL_109:
  uint64_t v72 = v102;
  CKRecordKeyValueSetting.subscript.getter( v102,  0xD00000000000001ELL,  0x80000001001CEAB0LL,  ObjectType,  v58,  &protocol witness table for Date);
  uint64_t v73 = v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
  swift_beginAccess( v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight,  v112,  0LL,  0LL);
  uint64_t v74 = v104;
  uint64_t v75 = v104 + *(int *)(v108 + 48);
  sub_1000E6164((uint64_t)v72, v104);
  sub_1000E6164(v73, v75);
  if (v62(v74, 1LL, v58) == 1)
  {
    sub_100099358((uint64_t)v72, (uint64_t *)&unk_100234E10);
    if (v62(v75, 1LL, v58) == 1)
    {
      sub_100099358(v74, (uint64_t *)&unk_100234E10);
      unint64_t v76 = v106;
      goto LABEL_120;
    }
  }

  else
  {
    sub_1000E6164(v74, v55);
    if (v62(v75, 1LL, v58) != 1)
    {
      uint64_t v77 = v110;
      uint64_t v78 = v55;
      uint64_t v79 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v98, v75, v58);
      uint64_t v80 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      char v81 = dispatch thunk of static Equatable.== infix(_:_:)(v78, v79, v58, v80);
      uint64_t v82 = *(void (**)(char *, uint64_t))(v77 + 8);
      v82(v79, v58);
      sub_100099358((uint64_t)v102, (uint64_t *)&unk_100234E10);
      v82((char *)v78, v109);
      uint64_t v58 = v109;
      sub_100099358(v104, (uint64_t *)&unk_100234E10);
      unint64_t v76 = v106;
      if ((v81 & 1) != 0) {
        goto LABEL_120;
      }
      goto LABEL_116;
    }

    sub_100099358((uint64_t)v72, (uint64_t *)&unk_100234E10);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v55, v58);
  }

  sub_100099358(v74, &qword_100235DF0);
  unint64_t v76 = v106;
LABEL_116:
  uint64_t v83 = v101;
  sub_1000E6164(v73, v101);
  if (v62(v83, 1LL, v58) == 1)
  {
    sub_100099358(v83, (uint64_t *)&unk_100234E10);
    __int128 v114 = 0u;
    __int128 v115 = 0u;
    char v116 = 0LL;
  }

  else
  {
    *((void *)&v115 + 1) = v58;
    char v116 = &protocol witness table for Date;
    id v84 = sub_1000E7194(&v114);
    (*(void (**)(void *, uint64_t, uint64_t))(v110 + 32))(v84, v83, v58);
  }

  CKRecordKeyValueSetting.subscript.setter(&v114, 0xD00000000000001ELL, 0x80000001001CEAB0LL, ObjectType);
LABEL_120:
  CKRecordKeyValueSetting.subscript.getter( &v114,  v76,  0x80000001001CEAD0LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  uint64_t v85 = v111;
  int v86 = *(_DWORD *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_127:
      CKRecordKeyValueSetting.subscript.setter(&v114, v76, 0x80000001001CEAD0LL, ObjectType);
      goto LABEL_128;
    }

    if ((_DWORD)v114 == v86) {
      goto LABEL_128;
    }
LABEL_126:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v86;
    goto LABEL_127;
  }

  if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_126;
  }
LABEL_128:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000017LL,  0x80000001001CEAF0LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v87 = *(_DWORD *)(v85 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v85 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_135:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000017LL, 0x80000001001CEAF0LL, ObjectType);
      goto LABEL_136;
    }

    if ((_DWORD)v114 == v87) {
      goto LABEL_136;
    }
LABEL_134:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v87;
    goto LABEL_135;
  }

  if ((*(_BYTE *)(v85 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4) & 1) == 0) {
    goto LABEL_134;
  }
LABEL_136:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000015LL,  0x80000001001CEB10LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v88 = *(_DWORD *)(v85 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v85 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_143:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000015LL, 0x80000001001CEB10LL, ObjectType);
      goto LABEL_144;
    }

    if ((_DWORD)v114 == v88) {
      goto LABEL_144;
    }
LABEL_142:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v88;
    goto LABEL_143;
  }

  if ((*(_BYTE *)(v85 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_142;
  }
LABEL_144:
  CKRecordKeyValueSetting.subscript.getter( &v114,  v76,  0x80000001001CEB30LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v89 = *(_DWORD *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_151:
      CKRecordKeyValueSetting.subscript.setter(&v114, v76, 0x80000001001CEB30LL, ObjectType);
      goto LABEL_152;
    }

    if ((_DWORD)v114 == v89) {
      goto LABEL_152;
    }
LABEL_150:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v89;
    goto LABEL_151;
  }

  if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) == 0) {
    goto LABEL_150;
  }
LABEL_152:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000014LL,  0x80000001001CEB50LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v90 = *(_DWORD *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_159:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000014LL, 0x80000001001CEB50LL, ObjectType);
      goto LABEL_160;
    }

    if ((_DWORD)v114 == v90) {
      goto LABEL_160;
    }
LABEL_158:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v90;
    goto LABEL_159;
  }

  if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_158;
  }
LABEL_160:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000015LL,  0x80000001001CEB70LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  uint64_t v91 = v111;
  int v92 = *(_DWORD *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_167:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000015LL, 0x80000001001CEB70LL, ObjectType);
      goto LABEL_168;
    }

    if ((_DWORD)v114 == v92) {
      goto LABEL_168;
    }
LABEL_166:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v92;
    goto LABEL_167;
  }

  if ((*(_BYTE *)(v111 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) == 0) {
    goto LABEL_166;
  }
LABEL_168:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000025LL,  0x80000001001CEB90LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v93 = *(_DWORD *)(v91 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft);
  if ((BYTE4(v114) & 1) == 0)
  {
    if ((*(_BYTE *)(v91
                   + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                   + 4) & 1) != 0)
    {
      char v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
LABEL_175:
      CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000025LL, 0x80000001001CEB90LL, ObjectType);
      goto LABEL_176;
    }

    if ((_DWORD)v114 == v93) {
      goto LABEL_176;
    }
LABEL_174:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v93;
    goto LABEL_175;
  }

  if ((*(_BYTE *)(v91 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_174;
  }
LABEL_176:
  CKRecordKeyValueSetting.subscript.getter( &v114,  0xD000000000000026LL,  0x80000001001CEBC0LL,  ObjectType,  &type metadata for UInt32,  &protocol witness table for UInt32);
  int v94 = *(_DWORD *)(v91 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight);
  if ((BYTE4(v114) & 1) != 0)
  {
    if ((*(_BYTE *)(v91
                   + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                   + 4) & 1) != 0)
      return swift_unknownObjectRelease(v32);
    goto LABEL_182;
  }

  if ((*(_BYTE *)(v91
                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                 + 4) & 1) != 0)
  {
    char v116 = 0LL;
    __int128 v114 = 0u;
    __int128 v115 = 0u;
LABEL_183:
    CKRecordKeyValueSetting.subscript.setter(&v114, 0xD000000000000026LL, 0x80000001001CEBC0LL, ObjectType);
    return swift_unknownObjectRelease(v32);
  }

  if ((_DWORD)v114 != v94)
  {
LABEL_182:
    *((void *)&v115 + 1) = &type metadata for UInt32;
    char v116 = &protocol witness table for UInt32;
    LODWORD(v114) = v94;
    goto LABEL_183;
  }

  return swift_unknownObjectRelease(v32);
}

uint64_t sub_1000E48E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

char *sub_1000E492C@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for HMDeviceCloudRecord(0LL));
  uint64_t result = HMDeviceCloudRecord.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000E4980(void *a1)
{
  return HMDeviceCloudRecord.encode(to:)(a1);
}

uint64_t sub_1000E49A0(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v112[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v120 = sub_100098CD8(&qword_100235DF0);
  __chkstk_darwin(v120);
  uint64_t v121 = &v112[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  uint64_t v11 = &v112[-v10];
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v12);
  uint64_t v122 = &v112[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v16 = &v112[-v15];
  __chkstk_darwin(v17);
  uint64_t v19 = &v112[-v18];
  __chkstk_darwin(v20);
  uint64_t v118 = &v112[-v21];
  __chkstk_darwin(v22);
  char v116 = &v112[-v23];
  __chkstk_darwin(v24);
  uint64_t v26 = &v112[-v25];
  __chkstk_darwin(v27);
  uint64_t v123 = &v112[-v28];
  uint64_t v29 = sub_1000E5760(a1);
  if ((v29 & 1) != 0)
  {
    __int128 v115 = v19;
    Class v117 = v7;
    int v30 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus];
    if (qword_100234B90 != -1) {
      swift_once(&qword_100234B90, sub_1000DD89C);
    }
    if (v30 != byte_100235D20
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus) != v30)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus) = v30;
    }

    int v31 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus];
    if (qword_100234B98 != -1) {
      swift_once(&qword_100234B98, sub_1000DD8A8);
    }
    if (v31 != byte_100235D21
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus) != v31)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus) = v31;
    }

    int v32 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled];
    if (qword_100234BA0 != -1) {
      swift_once(&qword_100234BA0, sub_1000DD8B4);
    }
    if (v32 != byte_100235D22
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled) != v32)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled) = v32;
    }

    int v33 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled];
    if (qword_100234BA8 != -1) {
      swift_once(&qword_100234BA8, sub_1000DD8C0);
    }
    if (v33 != byte_100235D23
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled) != v33)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled) = v33;
    }

    int v34 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled];
    if (qword_100234BB0 != -1) {
      swift_once(&qword_100234BB0, sub_1000DD8CC);
    }
    if (v34 != byte_100235D24
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled) != v34)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled) = v34;
    }

    int v35 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled];
    if (qword_100234BB8 != -1) {
      swift_once(&qword_100234BB8, sub_1000DD8D8);
    }
    if (v35 != byte_100235D25
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled) != v35)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled) = v35;
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4] & 1) == 0)
    {
      int v36 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
      uint64_t v37 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v37 != v36)
      {
        *(_DWORD *)uint64_t v37 = v36;
        *(_BYTE *)(v37 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4] & 1) == 0)
    {
      int v38 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
      uint64_t v39 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v39 != v38)
      {
        *(_DWORD *)uint64_t v39 = v38;
        *(_BYTE *)(v39 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4] & 1) == 0)
    {
      int v40 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
      uint64_t v41 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) != 0
        || *(_DWORD *)v41 != v40)
      {
        *(_DWORD *)uint64_t v41 = v40;
        *(_BYTE *)(v41 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4] & 1) == 0)
    {
      int v42 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
      uint64_t v43 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v43 != v42)
      {
        *(_DWORD *)uint64_t v43 = v42;
        *(_BYTE *)(v43 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4] & 1) == 0)
    {
      int v44 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
      uint64_t v45 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v45 != v44)
      {
        *(_DWORD *)uint64_t v45 = v44;
        *(_BYTE *)(v45 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4] & 1) == 0)
    {
      int v46 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
      uint64_t v47 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v47 != v46)
      {
        *(_DWORD *)uint64_t v47 = v46;
        *(_BYTE *)(v47 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4] & 1) == 0)
    {
      int v48 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
      uint64_t v49 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v49 != v48)
      {
        *(_DWORD *)uint64_t v49 = v48;
        *(_BYTE *)(v49 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4] & 1) == 0)
    {
      int v50 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
      uint64_t v51 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v51 != v50)
      {
        *(_DWORD *)uint64_t v51 = v50;
        *(_BYTE *)(v51 + 4) = 0;
      }
    }

    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4] & 1) == 0)
    {
      int v52 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
      uint64_t v53 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v53 != v52)
      {
        *(_DWORD *)uint64_t v53 = v52;
        *(_BYTE *)(v53 + 4) = 0;
      }
    }

    uint64_t v54 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
    swift_beginAccess( &a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft],  v128,  0LL,  0LL);
    uint64_t v55 = v123;
    sub_1000E6164(v54, (uint64_t)v123);
    uint64_t v119 = v5;
    uint64_t v56 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
    LODWORD(v54) = v56(v55, 1LL, v4);
    sub_1000E6164((uint64_t)v55, (uint64_t)v26);
    if ((_DWORD)v54 == 1)
    {
      uint64_t v57 = (uint64_t)v26;
LABEL_76:
      sub_100099358(v57, (uint64_t *)&unk_100234E10);
      uint64_t v70 = (uint64_t)v122;
      goto LABEL_81;
    }

    uint64_t v68 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
    swift_beginAccess( v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft,  v124,  0LL,  0LL);
    uint64_t v69 = (uint64_t)&v11[*(int *)(v120 + 48)];
    sub_1000E6164(v68, (uint64_t)v11);
    sub_1000E6164((uint64_t)v26, v69);
    if (v56(v11, 1LL, v4) == 1)
    {
      sub_100099358((uint64_t)v26, (uint64_t *)&unk_100234E10);
      if (v56((_BYTE *)v69, 1LL, v4) == 1)
      {
        uint64_t v57 = (uint64_t)v11;
        goto LABEL_76;
      }
    }

    else
    {
      unsigned __int8 v71 = v116;
      sub_1000E6164((uint64_t)v11, (uint64_t)v116);
      if (v56((_BYTE *)v69, 1LL, v4) != 1)
      {
        uint64_t v100 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v119 + 32);
        __int128 v114 = v16;
        uint64_t v101 = v71;
        id v102 = v117;
        v100(v117, v69, v4);
        uint64_t v103 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        int v113 = dispatch thunk of static Equatable.== infix(_:_:)(v101, v102, v4, v103);
        uint64_t v104 = *(void (**)(_BYTE *, uint64_t))(v119 + 8);
        v104(v102, v4);
        sub_100099358((uint64_t)v26, (uint64_t *)&unk_100234E10);
        unint64_t v105 = v101;
        uint64_t v16 = v114;
        v104(v105, v4);
        sub_100099358((uint64_t)v11, (uint64_t *)&unk_100234E10);
        uint64_t v70 = (uint64_t)v122;
        if ((v113 & 1) != 0)
        {
LABEL_81:
          uint64_t v73 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
          swift_beginAccess( &a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight],  v127,  0LL,  0LL);
          uint64_t v74 = (uint64_t)v115;
          sub_1000E6164(v73, (uint64_t)v115);
          LODWORD(v73) = v56((_BYTE *)v74, 1LL, v4);
          sub_1000E6164(v74, (uint64_t)v16);
          uint64_t v75 = (uint64_t)v121;
          if ((_DWORD)v73 == 1)
          {
            uint64_t v76 = (uint64_t)v16;
LABEL_86:
            uint64_t v79 = sub_100099358(v76, (uint64_t *)&unk_100234E10);
            goto LABEL_91;
          }

          uint64_t v77 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
          swift_beginAccess( v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight,  v125,  0LL,  0LL);
          uint64_t v78 = v75 + *(int *)(v120 + 48);
          sub_1000E6164(v77, v75);
          sub_1000E6164((uint64_t)v16, v78);
          if (v56((_BYTE *)v75, 1LL, v4) == 1)
          {
            sub_100099358((uint64_t)v16, (uint64_t *)&unk_100234E10);
            if (v56((_BYTE *)v78, 1LL, v4) == 1)
            {
              uint64_t v76 = v75;
              goto LABEL_86;
            }
          }

          else
          {
            sub_1000E6164(v75, v70);
            if (v56((_BYTE *)v78, 1LL, v4) != 1)
            {
              uint64_t v106 = v119;
              uint64_t v107 = v70;
              uint64_t v108 = v117;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v119 + 32))(v117, v78, v4);
              uint64_t v109 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              char v110 = dispatch thunk of static Equatable.== infix(_:_:)(v107, v108, v4, v109);
              uint64_t v111 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
              v111(v108, v4);
              sub_100099358((uint64_t)v16, (uint64_t *)&unk_100234E10);
              v111(v122, v4);
              uint64_t v74 = (uint64_t)v115;
              uint64_t v79 = sub_100099358(v75, (uint64_t *)&unk_100234E10);
              if ((v110 & 1) != 0)
              {
LABEL_91:
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4] & 1) == 0)
                {
                  int v81 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
                  uint64_t v82 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft;
                  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) != 0
                    || *(_DWORD *)v82 != v81)
                  {
                    *(_DWORD *)uint64_t v82 = v81;
                    *(_BYTE *)(v82 + 4) = 0;
                  }
                }

                uint64_t v83 = v119;
                id v84 = v117;
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4] & 1) == 0)
                {
                  int v85 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
                  uint64_t v86 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight;
                  if ((*(_BYTE *)(v2
                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight
                                 + 4) & 1) != 0
                    || *(_DWORD *)v86 != v85)
                  {
                    *(_DWORD *)uint64_t v86 = v85;
                    *(_BYTE *)(v86 + 4) = 0;
                  }
                }

                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4] & 1) == 0)
                {
                  int v87 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
                  uint64_t v88 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft;
                  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) != 0
                    || *(_DWORD *)v88 != v87)
                  {
                    *(_DWORD *)uint64_t v88 = v87;
                    *(_BYTE *)(v88 + 4) = 0;
                  }
                }

                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4] & 1) == 0)
                {
                  int v89 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
                  uint64_t v90 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight;
                  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) != 0
                    || *(_DWORD *)v90 != v89)
                  {
                    *(_DWORD *)uint64_t v90 = v89;
                    *(_BYTE *)(v90 + 4) = 0;
                  }
                }

                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4] & 1) == 0)
                {
                  int v91 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
                  uint64_t v92 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft;
                  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) != 0
                    || *(_DWORD *)v92 != v91)
                  {
                    *(_DWORD *)uint64_t v92 = v91;
                    *(_BYTE *)(v92 + 4) = 0;
                  }
                }

                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4] & 1) == 0)
                {
                  int v93 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
                  uint64_t v94 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight;
                  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) != 0
                    || *(_DWORD *)v94 != v93)
                  {
                    *(_DWORD *)uint64_t v94 = v93;
                    *(_BYTE *)(v94 + 4) = 0;
                  }
                }

                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                       + 4] & 1) == 0)
                {
                  int v95 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
                  uint64_t v96 = v2
                      + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft;
                  if ((*(_BYTE *)(v2
                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                                 + 4) & 1) != 0
                    || *(_DWORD *)v96 != v95)
                  {
                    *(_DWORD *)uint64_t v96 = v95;
                    *(_BYTE *)(v96 + 4) = 0;
                  }
                }

                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                       + 4] & 1) == 0)
                {
                  int v97 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
                  uint64_t v98 = v2
                      + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight;
                  if ((*(_BYTE *)(v2
                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                                 + 4) & 1) != 0
                    || *(_DWORD *)v98 != v97)
                  {
                    *(_DWORD *)uint64_t v98 = v97;
                    *(_BYTE *)(v98 + 4) = 0;
                  }
                }

                static Date.now.getter(v79);
                uint64_t v99 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate;
                swift_beginAccess( v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate,  v126,  33LL,  0LL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t))(v83 + 40))(v99, v84, v4);
                swift_endAccess(v126);
                sub_100099358(v74, (uint64_t *)&unk_100234E10);
                return sub_100099358((uint64_t)v123, (uint64_t *)&unk_100234E10);
              }

LABEL_90:
              uint64_t v80 = v118;
              sub_1000E6164(v74, (uint64_t)v118);
              swift_beginAccess(v77, v126, 33LL, 0LL);
              sub_1000E622C((uint64_t)v80, v77);
              uint64_t v79 = swift_endAccess(v126);
              goto LABEL_91;
            }

            sub_100099358((uint64_t)v16, (uint64_t *)&unk_100234E10);
            (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v70, v4);
          }

          sub_100099358(v75, &qword_100235DF0);
          goto LABEL_90;
        }

uint64_t sub_1000E5760(char *a1)
{
  uint64_t v60 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100098CD8(&qword_100235DF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v54 - v10;
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v54 - v14;
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v54 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v54 - v21;
  __chkstk_darwin(v23);
  if (!a1) {
    return 0LL;
  }
  if (a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] == *(_BYTE *)(v1
                                                                                             + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] == *(_BYTE *)(v1
                                                                                             + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] == *(_BYTE *)(v1
                                                                                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] == *(_BYTE *)(v1
                                                                                              + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] == *(_BYTE *)(v1
                                                                                              + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] == *(_BYTE *)(v1
                                                                                               + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled)
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4] & 1) != 0
     || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft)))
  {
    uint64_t v59 = (uint64_t)&v54 - v25;
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4] & 1) != 0
      || (*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) == 0
      && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight] == *(_DWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight))
    {
      uint64_t v56 = v26;
      uint64_t v57 = v1;
      uint64_t v54 = v24;
      uint64_t v27 = &a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
      swift_beginAccess( &a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft],  v64,  0LL,  0LL);
      uint64_t v28 = (uint64_t)v27;
      uint64_t v29 = v59;
      sub_1000E6164(v28, v59);
      uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
      LODWORD(v55) = v58(v29, 1LL, v60);
      sub_1000E6164(v29, (uint64_t)v22);
      if ((_DWORD)v55 == 1)
      {
        int v30 = a1;
LABEL_47:
        sub_100099358((uint64_t)v22, (uint64_t *)&unk_100234E10);
        goto LABEL_48;
      }

      uint64_t v55 = v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
      swift_beginAccess( v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft,  v61,  0LL,  0LL);
      uint64_t v33 = (uint64_t)&v11[*(int *)(v6 + 48)];
      sub_1000E6164((uint64_t)v22, (uint64_t)v11);
      uint64_t v34 = v55;
      uint64_t v55 = v33;
      sub_1000E6164(v34, v33);
      uint64_t v35 = v60;
      if (v58((uint64_t)v11, 1LL, v60) == 1)
      {
        int v36 = a1;
        sub_100099358((uint64_t)v22, (uint64_t *)&unk_100234E10);
        if (v58(v55, 1LL, v35) == 1)
        {
          uint64_t v22 = v11;
          goto LABEL_47;
        }
      }

      else
      {
        sub_1000E6164((uint64_t)v11, (uint64_t)v19);
        if (v58(v55, 1LL, v35) != 1)
        {
          uint64_t v46 = v60;
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v55, v60);
          uint64_t v55 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v47 = a1;
          LODWORD(v55) = dispatch thunk of static Equatable.== infix(_:_:)(v19, v5, v46, v55);
          int v48 = *(void (**)(char *, uint64_t))(v3 + 8);
          v48(v5, v60);
          sub_100099358((uint64_t)v22, (uint64_t *)&unk_100234E10);
          v48(v19, v60);
          sub_100099358((uint64_t)v11, (uint64_t *)&unk_100234E10);
          if ((v55 & 1) != 0)
          {
LABEL_48:
            uint64_t v37 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
            swift_beginAccess( &a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight],  v63,  0LL,  0LL);
            uint64_t v38 = v56;
            sub_1000E6164(v37, v56);
            uint64_t v39 = v60;
            int v40 = (unsigned int (*)(char *, uint64_t, uint64_t))v58;
            LODWORD(v37) = v58(v38, 1LL, v60);
            sub_1000E6164(v38, (uint64_t)v15);
            if ((_DWORD)v37 != 1)
            {
              uint64_t v41 = v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
              swift_beginAccess( v57 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight,  v62,  0LL,  0LL);
              uint64_t v42 = (uint64_t)&v8[*(int *)(v6 + 48)];
              sub_1000E6164((uint64_t)v15, (uint64_t)v8);
              sub_1000E6164(v41, v42);
              if (v40(v8, 1LL, v39) == 1)
              {
                sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
                if (v58(v42, 1LL, v60) == 1)
                {
                  uint64_t v15 = v8;
                  goto LABEL_52;
                }
              }

              else
              {
                sub_1000E6164((uint64_t)v8, v54);
                if (v58(v42, 1LL, v60) != 1)
                {
                  uint64_t v49 = v60;
                  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v42, v60);
                  uint64_t v50 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                  uint64_t v51 = v54;
                  char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v5, v49, v50);
                  uint64_t v53 = *(void (**)(char *, uint64_t))(v3 + 8);
                  v53(v5, v49);
                  sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
                  v53((char *)v51, v49);
                  sub_100099358((uint64_t)v8, (uint64_t *)&unk_100234E10);
                  if ((v52 & 1) == 0) {
                    goto LABEL_91;
                  }
                  goto LABEL_53;
                }

                sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
                (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v54, v60);
              }

              sub_100099358((uint64_t)v8, &qword_100235DF0);
              goto LABEL_91;
            }

LABEL_91:
LABEL_92:
            sub_100099358(v56, (uint64_t *)&unk_100234E10);
            goto LABEL_93;
          }

LABEL_77:
LABEL_93:
          uint64_t v31 = 1LL;
          goto LABEL_94;
        }

        uint64_t v45 = a1;
        sub_100099358((uint64_t)v22, (uint64_t *)&unk_100234E10);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v19, v60);
      }

      sub_100099358((uint64_t)v11, &qword_100235DF0);
      goto LABEL_77;
    }
  }

  return 1LL;
}

uint64_t sub_1000E6164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E61AC()
{
  unint64_t result = qword_100235D58;
  if (!qword_100235D58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A86E4, &type metadata for HMDeviceCloudRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235D58);
  }

  return result;
}

uint64_t type metadata accessor for HMDeviceCloudRecord(uint64_t a1)
{
  uint64_t result = qword_100235DB8;
  if (!qword_100235DB8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HMDeviceCloudRecord);
  }
  return result;
}

uint64_t sub_1000E622C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E6274(uint64_t a1)
{
  uint64_t result = sub_100098C98(&qword_100235D78, type metadata accessor for HMDeviceCloudRecord, (uint64_t)&unk_1001A8540);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000E62B0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100098C98( &qword_100235D80,  type metadata accessor for HMDeviceCloudRecord,  (uint64_t)&protocol conformance descriptor for HMDeviceCloudRecord);
  uint64_t result = sub_100098C98( &qword_100235D88,  type metadata accessor for HMDeviceCloudRecord,  (uint64_t)&protocol conformance descriptor for HMDeviceCloudRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000E630C()
{
  return type metadata accessor for HMDeviceCloudRecord(0LL);
}

void sub_1000E6314(uint64_t a1)
{
  v8[0] = &unk_1001A85D8;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    v8[2] = &unk_1001A85F0;
    v8[3] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[4] = (char *)&value witness table for Builtin.Int8 + 64;
    _OWORD v8[5] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[6] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[7] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[8] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[9] = &unk_1001A8608;
    v8[10] = &unk_1001A8608;
    v8[11] = &unk_1001A8608;
    v8[12] = &unk_1001A8608;
    v8[13] = &unk_1001A8608;
    v8[14] = &unk_1001A8608;
    v8[15] = &unk_1001A8608;
    v8[16] = &unk_1001A8608;
    v8[17] = &unk_1001A8608;
    sub_1000E6414(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = v9;
      uint64_t v11 = &unk_1001A8608;
      uint64_t v12 = &unk_1001A8608;
      uint64_t v13 = &unk_1001A8608;
      uint64_t v14 = &unk_1001A8608;
      uint64_t v15 = &unk_1001A8608;
      uint64_t v16 = &unk_1001A8608;
      uint64_t v17 = &unk_1001A8608;
      uint64_t v18 = &unk_1001A8608;
      uint64_t v6 = type metadata accessor for Date(319LL);
      if (v7 <= 0x3F)
      {
        uint64_t v19 = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 29LL, v8, a1 + 80);
      }
    }
  }

void sub_1000E6414(uint64_t a1)
{
  if (!qword_100236820)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100236820);
    }
  }

uint64_t getEnumTagSinglePayload for HMDeviceCloudRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }

uint64_t storeEnumTagSinglePayload for HMDeviceCloudRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE3) {
    return ((uint64_t (*)(void))((char *)&loc_1000E6544 + 4 * byte_1001A8512[v4]))();
  }
  *a1 = a2 + 28;
  return ((uint64_t (*)(void))((char *)sub_1000E6578 + 4 * byte_1001A850D[v4]))();
}

uint64_t sub_1000E6578(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E6588LL);
  }
  return result;
}

uint64_t sub_1000E6594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E659CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 28;
  return result;
}

uint64_t sub_1000E65A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E65A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HMDeviceCloudRecord.CodingKeys()
{
  return &type metadata for HMDeviceCloudRecord.CodingKeys;
}

unint64_t sub_1000E65C8()
{
  unint64_t result = qword_100235DD0;
  if (!qword_100235DD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A86BC, &type metadata for HMDeviceCloudRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235DD0);
  }

  return result;
}

unint64_t sub_1000E6610()
{
  unint64_t result = qword_100235DD8;
  if (!qword_100235DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A862C, &type metadata for HMDeviceCloudRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235DD8);
  }

  return result;
}

unint64_t sub_1000E6658()
{
  unint64_t result = qword_100235DE0;
  if (!qword_100235DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8654, &type metadata for HMDeviceCloudRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235DE0);
  }

  return result;
}

uint64_t sub_1000E669C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v5 = 0xED00006174616461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v7 = 0xEA00000000007265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x6E6F696765526168LL && a2 == 0xEE00737574617453LL)
  {
    unint64_t v9 = 0xEE00737574617453LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F696765526168LL, 0xEE00737574617453LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x6E6F696765527068LL && a2 == 0xEE00737574617453LL)
  {
    unint64_t v10 = 0xEE00737574617453LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F696765527068LL, 0xEE00737574617453LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x80000001001CE910LL)
  {
    unint64_t v11 = 0x80000001001CE910LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001001CE910LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x616964654D656D70LL && a2 == 0xEF64656C62616E45LL)
  {
    unint64_t v12 = 0xEF64656C62616E45LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616964654D656D70LL, 0xEF64656C62616E45LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0x6563696F56656D70LL && a2 == 0xEF64656C62616E45LL)
  {
    unint64_t v13 = 0xEF64656C62616E45LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563696F56656D70LL, 0xEF64656C62616E45LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v14 = 0x80000001001CE950LL;
    if (a2 == 0x80000001001CE950LL) {
      goto LABEL_54;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CE950LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v15 = 0x80000001001CE970LL;
    if (a2 == 0x80000001001CE970LL) {
      goto LABEL_59;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001001CE970LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v16 = 0x80000001001CE990LL;
    if (a2 == 0x80000001001CE990LL) {
      goto LABEL_64;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001001CE990LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v17 = 0x80000001001CE9B0LL;
    if (a2 == 0x80000001001CE9B0LL) {
      goto LABEL_69;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001001CE9B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_69:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001CE9D0LL)
  {
    unint64_t v18 = 0x80000001001CE9D0LL;
LABEL_75:
    swift_bridgeObjectRelease(v18);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001CE9D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_75;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v19 = 0x80000001001CE9F0LL;
    if (a2 == 0x80000001001CE9F0LL) {
      goto LABEL_80;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001001CE9F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v19);
    return 13LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v20 = 0x80000001001CEA10LL;
    if (a2 == 0x80000001001CEA10LL) {
      goto LABEL_85;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001001CEA10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_85:
    swift_bridgeObjectRelease(v20);
    return 14LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v21 = 0x80000001001CEA30LL;
    if (a2 == 0x80000001001CEA30LL) {
      goto LABEL_90;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001001CEA30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_90:
    swift_bridgeObjectRelease(v21);
    return 15LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v22 = 0x80000001001CEA50LL;
    if (a2 == 0x80000001001CEA50LL) {
      goto LABEL_95;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001001CEA50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_95:
    swift_bridgeObjectRelease(v22);
    return 16LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v23 = 0x80000001001CEA70LL;
    if (a2 == 0x80000001001CEA70LL) {
      goto LABEL_100;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001001CEA70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_100:
    swift_bridgeObjectRelease(v23);
    return 17LL;
  }

  if (a1 == 0xD00000000000001DLL && a2 == 0x80000001001CEA90LL)
  {
    unint64_t v24 = 0x80000001001CEA90LL;
LABEL_106:
    swift_bridgeObjectRelease(v24);
    return 18LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000001001CEA90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
    goto LABEL_106;
  }

  if (a1 == 0xD00000000000001ELL && a2 == 0x80000001001CEAB0LL)
  {
    unint64_t v25 = 0x80000001001CEAB0LL;
LABEL_112:
    swift_bridgeObjectRelease(v25);
    return 19LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CEAB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v25 = a2;
    goto LABEL_112;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v26 = 0x80000001001CEAD0LL;
    if (a2 == 0x80000001001CEAD0LL) {
      goto LABEL_117;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001001CEAD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
LABEL_117:
    swift_bridgeObjectRelease(v26);
    return 20LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v27 = 0x80000001001CEAF0LL;
    if (a2 == 0x80000001001CEAF0LL) {
      goto LABEL_122;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001001CEAF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v27 = a2;
LABEL_122:
    swift_bridgeObjectRelease(v27);
    return 21LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v28 = 0x80000001001CEB10LL;
    if (a2 == 0x80000001001CEB10LL) {
      goto LABEL_127;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001001CEB10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
LABEL_127:
    swift_bridgeObjectRelease(v28);
    return 22LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v29 = 0x80000001001CEB30LL;
    if (a2 == 0x80000001001CEB30LL) {
      goto LABEL_132;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001001CEB30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
LABEL_132:
    swift_bridgeObjectRelease(v29);
    return 23LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x80000001001CEB50LL)
  {
    unint64_t v30 = 0x80000001001CEB50LL;
LABEL_138:
    swift_bridgeObjectRelease(v30);
    return 24LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001001CEB50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
    goto LABEL_138;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v31 = 0x80000001001CEB70LL;
    if (a2 == 0x80000001001CEB70LL) {
      goto LABEL_143;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001001CEB70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v31 = a2;
LABEL_143:
    swift_bridgeObjectRelease(v31);
    return 25LL;
  }

  if (a1 == 0xD000000000000025LL && a2 == 0x80000001001CEB90LL)
  {
    unint64_t v32 = 0x80000001001CEB90LL;
LABEL_149:
    swift_bridgeObjectRelease(v32);
    return 26LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x80000001001CEB90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v32 = a2;
    goto LABEL_149;
  }

  if (a1 == 0xD000000000000026LL && a2 == 0x80000001001CEBC0LL)
  {
    unint64_t v33 = 0x80000001001CEBC0LL;
LABEL_155:
    swift_bridgeObjectRelease(v33);
    return 27LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026LL, 0x80000001001CEBC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v33 = a2;
    goto LABEL_155;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 28LL;
  }

  else
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v34 & 1) != 0) {
      return 28LL;
    }
    else {
      return 29LL;
    }
  }

unint64_t sub_1000E7150()
{
  unint64_t result = qword_100235DF8;
  if (!qword_100235DF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A87C4, &type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError);
    atomic_store(result, (unint64_t *)&qword_100235DF8);
  }

  return result;
}

void *sub_1000E7194(void *a1)
{
  __int16 v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t storeEnumTagSinglePayload for HMDeviceCloudRecord.HMDeviceCloudRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000E721C + 4 * byte_1001A851C[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000E7250 + 4 * byte_1001A8517[v4]))();
}

uint64_t sub_1000E7250(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E7260LL);
  }
  return result;
}

uint64_t sub_1000E726C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E7274LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000E7278(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7280(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HMDeviceCloudRecord.HMDeviceCloudRecordError()
{
  return &type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError;
}

unint64_t sub_1000E72A0()
{
  unint64_t result = qword_100235E08;
  if (!qword_100235E08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A879C, &type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError);
    atomic_store(result, (unint64_t *)&qword_100235E08);
  }

  return result;
}

uint64_t sub_1000E72E4()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v5, qword_10023DF00);
  sub_100098D58(v3, (uint64_t)qword_10023DF00);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001ELL, 0x80000001001A8840LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

  return result;
}

Class sub_1000E7430()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  Class v117 = *(objc_class **)(v1 - 8);
  __chkstk_darwin(v1);
  char v116 = (char *)&v116 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v118 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v119 = (uint64_t)&v116 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v116 - v8;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v116 - v11;
  unint64_t v13 = objc_autoreleasePoolPush();
  sub_1000E95EC(v0, &v121);
  objc_autoreleasePoolPop(v13);
  id v120 = v121;
  Class v121 = 0LL;
  unint64_t v122 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(205LL);
  v14._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v14._object = (void *)0x80000001001CEF50LL;
  String.append(_:)(v14);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._uint64_t countAndFlagsBits = 8236LL;
  v19._object = (void *)0xE200000000000000LL;
  String.append(_:)(v19);
  unint64_t v20 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
  unint64_t v21 = (uint64_t *)(v0 + v20[6]);
  uint64_t v23 = *v21;
  unint64_t v22 = (void *)v21[1];
  swift_bridgeObjectRetain(v22);
  v24._uint64_t countAndFlagsBits = v23;
  v24._object = v22;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v22);
  v25._object = (void *)0x80000001001CEF80LL;
  v25._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v25);
  unint64_t v26 = (uint64_t *)(v0 + v20[7]);
  uint64_t v27 = *v26;
  unint64_t v28 = (void *)v26[1];
  swift_bridgeObjectRetain(v28);
  v29._uint64_t countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._object = (void *)0x80000001001CEFA0LL;
  v30._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v30);
  unint64_t v31 = (uint64_t *)(v0 + v20[9]);
  uint64_t v32 = *v31;
  unint64_t v33 = (void *)v31[1];
  swift_bridgeObjectRetain(v33);
  v34._uint64_t countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  v35._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v35._object = (void *)0x80000001001CEFC0LL;
  String.append(_:)(v35);
  int v36 = (uint64_t *)(v0 + v20[10]);
  uint64_t v37 = *v36;
  uint64_t v38 = (void *)v36[1];
  swift_bridgeObjectRetain(v38);
  v39._uint64_t countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  v40._object = (void *)0x80000001001CEFE0LL;
  v40._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v40);
  uint64_t v41 = (uint64_t *)(v0 + v20[11]);
  uint64_t v42 = *v41;
  int v43 = (void *)v41[1];
  swift_bridgeObjectRetain(v43);
  v44._uint64_t countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._object = (void *)0x80000001001CF000LL;
  v45._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v45);
  uint64_t v46 = (uint64_t *)(v0 + v20[12]);
  uint64_t v47 = *v46;
  int v48 = (void *)v46[1];
  swift_bridgeObjectRetain(v48);
  v49._uint64_t countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v50._object = (void *)0x80000001001CF020LL;
  String.append(_:)(v50);
  uint64_t v51 = (uint64_t *)(v0 + v20[13]);
  uint64_t v52 = *v51;
  uint64_t v53 = (void *)v51[1];
  swift_bridgeObjectRetain(v53);
  v54._uint64_t countAndFlagsBits = v52;
  v54._object = v53;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v53);
  v55._object = (void *)0x80000001001CF040LL;
  v55._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v55);
  uint64_t v56 = (uint64_t *)(v0 + v20[14]);
  uint64_t v57 = *v56;
  uint64_t v58 = (void *)v56[1];
  swift_bridgeObjectRetain(v58);
  v59._uint64_t countAndFlagsBits = v57;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v58);
  v60._uint64_t countAndFlagsBits = 10LL;
  v60._object = (void *)0xE100000000000000LL;
  String.append(_:)(v60);
  uint64_t v62 = v121;
  unint64_t v61 = v122;
  Class v121 = 0LL;
  unint64_t v122 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(59LL);
  v63._uint64_t countAndFlagsBits = 0x7461657263202020LL;
  v63._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v63);
  id v64 = [v120 creationDate];
  if (v64)
  {
    uint64_t v65 = v64;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v64);

    uint64_t v66 = v117;
    Class isa = (void (*)(void, void, void, void))v117[7].isa;
    isa(v9, 0LL, 1LL, v1);
  }

  else
  {
    uint64_t v66 = v117;
    Class isa = (void (*)(void, void, void, void))v117[7].isa;
    isa(v9, 1LL, 1LL, v1);
  }

  sub_1000D8CF8((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_100234E10);
  uint64_t v68 = (unsigned int (*)(char *, uint64_t, uint64_t))v66[6].isa;
  if (v68(v12, 1LL, v1))
  {
    sub_100099358((uint64_t)v12, (uint64_t *)&unk_100234E10);
    uint64_t v69 = (void *)0xE200000000000000LL;
    uint64_t v70 = 15932LL;
  }

  else
  {
    unsigned __int8 v71 = v116;
    ((void (*)(char *, char *, uint64_t))v66[2].isa)(v116, v12, v1);
    sub_100099358((uint64_t)v12, (uint64_t *)&unk_100234E10);
    uint64_t v72 = objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v117 = v62;
    uint64_t v73 = v1;
    unint64_t v74 = v61;
    uint64_t v75 = v66;
    uint64_t v76 = (void *)v72;
    Class v77 = Date._bridgeToObjectiveC()().super.isa;
    id v78 = [v76 localizedStringFromDate:v77 dateStyle:2 timeStyle:2];

    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
    uint64_t v69 = v79;

    uint64_t v66 = v75;
    unint64_t v61 = v74;
    uint64_t v1 = v73;
    uint64_t v62 = v117;
    ((void (*)(char *, uint64_t))v66[1].isa)(v71, v1);
  }

  v80._uint64_t countAndFlagsBits = v70;
  v80._object = v69;
  String.append(_:)(v80);
  swift_bridgeObjectRelease(v69);
  v81._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v81._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v81);
  id v82 = [v120 modificationDate];
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = (uint64_t)v118;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

    uint64_t v85 = 0LL;
  }

  else
  {
    uint64_t v85 = 1LL;
    uint64_t v84 = (uint64_t)v118;
  }

  isa(v84, v85, 1LL, v1);
  uint64_t v86 = v119;
  sub_1000D8CF8(v84, v119, (uint64_t *)&unk_100234E10);
  if (v68((char *)v86, 1LL, v1))
  {
    sub_100099358(v86, (uint64_t *)&unk_100234E10);
    int v87 = (void *)0xE200000000000000LL;
    uint64_t v88 = 15932LL;
  }

  else
  {
    int v89 = v116;
    ((void (*)(char *, uint64_t, uint64_t))v66[2].isa)(v116, v86, v1);
    sub_100099358(v86, (uint64_t *)&unk_100234E10);
    unint64_t v90 = v61;
    int v91 = v66;
    uint64_t v92 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v93 = Date._bridgeToObjectiveC()().super.isa;
    id v94 = [v92 localizedStringFromDate:v93 dateStyle:2 timeStyle:2];

    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    int v87 = v95;

    uint64_t v96 = (void (*)(char *, uint64_t))v91[1].isa;
    unint64_t v61 = v90;
    v96(v89, v1);
  }

  v97._uint64_t countAndFlagsBits = v88;
  v97._object = v87;
  String.append(_:)(v97);
  swift_bridgeObjectRelease(v87);
  v98._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v98._object = (void *)0xEF203A7962206465LL;
  String.append(_:)(v98);
  id v99 = [v120 modifiedByDevice];
  if (v99)
  {
    uint64_t v100 = v99;
    uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    uint64_t v103 = v102;
  }

  else
  {
    uint64_t v103 = (void *)0xE200000000000000LL;
    uint64_t v101 = 15932LL;
  }

  v104._uint64_t countAndFlagsBits = v101;
  v104._object = v103;
  String.append(_:)(v104);
  swift_bridgeObjectRelease(v103);
  v105._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v105._object = (void *)0xE800000000000000LL;
  String.append(_:)(v105);
  id v106 = [v120 recordChangeTag];
  if (v106)
  {
    uint64_t v107 = v106;
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
    char v110 = v109;
  }

  else
  {
    char v110 = (void *)0xE200000000000000LL;
    uint64_t v108 = 15932LL;
  }

  v111._uint64_t countAndFlagsBits = v108;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease(v110);
  Class v112 = v121;
  int v113 = (void *)v122;
  Class v121 = v62;
  unint64_t v122 = v61;
  swift_bridgeObjectRetain(v61);
  v114._uint64_t countAndFlagsBits = (uint64_t)v112;
  v114._object = v113;
  String.append(_:)(v114);

  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v113);
  return v121;
}

uint64_t sub_1000E7C54@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v70 = type metadata accessor for Date(0LL);
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
  *(_OWORD *)(a3 + v8[5]) = xmmword_1001A7C10;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v69 = a1;
  v11(a3, a1, v9);
  id v12 = [a2 bluetoothAddress];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  uint64_t v16 = (uint64_t *)(a3 + v8[6]);
  *uint64_t v16 = v13;
  v16[1] = v15;
  id v17 = [a2 budsFirmwareVersion];
  if (v17)
  {
    unint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  unint64_t v22 = (uint64_t *)(a3 + v8[7]);
  *unint64_t v22 = v19;
  v22[1] = v21;
  id v23 = [a2 caseName];
  if (v23)
  {
    Swift::String v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    unint64_t v27 = v26;
  }

  else
  {
    uint64_t v25 = 0LL;
    unint64_t v27 = 0xE000000000000000LL;
  }

  unint64_t v28 = (uint64_t *)(a3 + v8[8]);
  *unint64_t v28 = v25;
  v28[1] = v27;
  id v29 = [a2 caseFirmwareVersion];
  if (v29)
  {
    Swift::String v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v33 = v32;
  }

  else
  {
    uint64_t v31 = 0LL;
    unint64_t v33 = 0xE000000000000000LL;
  }

  Swift::String v34 = (uint64_t *)(a3 + v8[9]);
  *Swift::String v34 = v31;
  v34[1] = v33;
  id v35 = [a2 caseSerialNumber];
  if (v35)
  {
    int v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    unint64_t v39 = v38;
  }

  else
  {
    uint64_t v37 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
  }

  Swift::String v40 = (uint64_t *)(a3 + v8[10]);
  *Swift::String v40 = v37;
  v40[1] = v39;
  id v41 = [a2 hardwareVersion];
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    unint64_t v45 = v44;
  }

  else
  {
    uint64_t v43 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
  }

  uint64_t v46 = (uint64_t *)(a3 + v8[11]);
  *uint64_t v46 = v43;
  v46[1] = v45;
  id v47 = [a2 leftBudSerialNumber];
  if (v47)
  {
    int v48 = v47;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    unint64_t v51 = v50;
  }

  else
  {
    uint64_t v49 = 0LL;
    unint64_t v51 = 0xE000000000000000LL;
  }

  uint64_t v52 = (uint64_t *)(a3 + v8[12]);
  *uint64_t v52 = v49;
  v52[1] = v51;
  id v53 = [a2 rightBudSerialNumber];
  if (v53)
  {
    Swift::String v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    unint64_t v57 = v56;
  }

  else
  {
    uint64_t v55 = 0LL;
    unint64_t v57 = 0xE000000000000000LL;
  }

  uint64_t v58 = (uint64_t *)(a3 + v8[13]);
  *uint64_t v58 = v55;
  v58[1] = v57;
  id v59 = [a2 ancAssetVersion];
  if (v59)
  {
    Swift::String v60 = v59;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    unint64_t v63 = v62;
  }

  else
  {
    uint64_t v61 = 0LL;
    unint64_t v63 = 0xE000000000000000LL;
  }

  id v64 = (uint64_t *)(a3 + v8[14]);
  *id v64 = v61;
  v64[1] = v63;
  uint64_t v65 = (void *)(a3 + v8[15]);
  void *v65 = 0LL;
  v65[1] = 0xE000000000000000LL;
  static Date.now.getter(v59);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v69, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(a3 + v8[16], v7, v70);
}

void sub_1000E7FE0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v122 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  char v116 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  Class v117 = (char *)&v113 - v7;
  __chkstk_darwin(v8);
  uint64_t v123 = (uint64_t)&v113 - v9;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v118 = *(void *)(v10 - 8);
  uint64_t v119 = v10;
  __chkstk_darwin(v10);
  uint64_t v124 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v113 - v13;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v120 = *(void *)(v15 - 8);
  uint64_t v121 = v15;
  __chkstk_darwin(v15);
  id v17 = (uint64_t *)((char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_100098CD8(&qword_100235F10);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  __chkstk_darwin(v128);
  uint64_t v127 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = a1[3];
  uint64_t v23 = a1[4];
  NSString v125 = a1;
  sub_10009A430(a1, v24);
  unint64_t v25 = sub_1000EDEC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceSupportInformationRecord.CodingKeys,  &type metadata for DeviceSupportInformationRecord.CodingKeys,  v25,  v24,  v23);
  if (v2)
  {
    uint64_t v126 = v2;
    uint64_t v30 = v127;
    sub_10009A498(v125);
    uint64_t v31 = (int *)v128;
    int v130 = 0;
    int v32 = 0;
    LODWORD(v122) = 0;
    LODWORD(v123) = 0;
    LODWORD(v124) = 0;
    goto LABEL_10;
  }

  unint64_t v26 = v124;
  uint64_t v27 = v19;
  __int128 v115 = v14;
  char v131 = 1;
  unint64_t v28 = sub_10009A4B8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v129, &type metadata for Data, &v131, v18, &type metadata for Data, v28);
  id v29 = v21;
  uint64_t v33 = v127;
  Swift::String v34 = (int *)v128;
  uint64_t v35 = v18;
  int v36 = v29;
  *(_OWORD *)(v127 + *(int *)(v128 + 20)) = v129;
  LOBYTE(v129) = 0;
  uint64_t v37 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v38 = v121;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v121, &v129, v35, v121, v37);
  (*(void (**)(uint64_t, void *, uint64_t))(v120 + 32))(v33, v17, v38);
  LOBYTE(v129) = 2;
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)(&v129, v35);
  Swift::String v40 = (uint64_t *)(v33 + v34[6]);
  *Swift::String v40 = v39;
  v40[1] = v41;
  LOBYTE(v129) = 3;
  uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v43) {
    uint64_t v44 = v42;
  }
  else {
    uint64_t v44 = 0LL;
  }
  if (v43) {
    unint64_t v45 = v43;
  }
  else {
    unint64_t v45 = 0xE000000000000000LL;
  }
  uint64_t v46 = (uint64_t *)(v33 + v34[7]);
  *uint64_t v46 = v44;
  v46[1] = v45;
  LOBYTE(v129) = 4;
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v48) {
    uint64_t v49 = v47;
  }
  else {
    uint64_t v49 = 0LL;
  }
  if (v48) {
    unint64_t v50 = v48;
  }
  else {
    unint64_t v50 = 0xE000000000000000LL;
  }
  unint64_t v51 = (uint64_t *)(v33 + v34[8]);
  *unint64_t v51 = v49;
  v51[1] = v50;
  LOBYTE(v129) = 5;
  uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v53) {
    uint64_t v54 = v52;
  }
  else {
    uint64_t v54 = 0LL;
  }
  if (v53) {
    unint64_t v55 = v53;
  }
  else {
    unint64_t v55 = 0xE000000000000000LL;
  }
  unint64_t v56 = (uint64_t *)(v33 + v34[9]);
  *unint64_t v56 = v54;
  v56[1] = v55;
  LOBYTE(v129) = 6;
  uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v58) {
    uint64_t v59 = v57;
  }
  else {
    uint64_t v59 = 0LL;
  }
  if (v58) {
    unint64_t v60 = v58;
  }
  else {
    unint64_t v60 = 0xE000000000000000LL;
  }
  uint64_t v61 = (uint64_t *)(v33 + v34[10]);
  *uint64_t v61 = v59;
  v61[1] = v60;
  LOBYTE(v129) = 7;
  uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  int v130 = 1;
  if (v63) {
    uint64_t v64 = v62;
  }
  else {
    uint64_t v64 = 0LL;
  }
  if (v63) {
    unint64_t v65 = v63;
  }
  else {
    unint64_t v65 = 0xE000000000000000LL;
  }
  uint64_t v66 = (uint64_t *)(v33 + v34[11]);
  uint64_t *v66 = v64;
  v66[1] = v65;
  LOBYTE(v129) = 8;
  uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v68) {
    uint64_t v69 = v67;
  }
  else {
    uint64_t v69 = 0LL;
  }
  if (v68) {
    unint64_t v70 = v68;
  }
  else {
    unint64_t v70 = 0xE000000000000000LL;
  }
  unsigned __int8 v71 = (uint64_t *)(v33 + v34[12]);
  uint64_t *v71 = v69;
  v71[1] = v70;
  LOBYTE(v129) = 9;
  uint64_t v72 = v35;
  uint64_t v73 = v35;
  unint64_t v74 = v36;
  uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v73);
  uint64_t v126 = 0LL;
  if (v76) {
    uint64_t v77 = v75;
  }
  else {
    uint64_t v77 = 0LL;
  }
  if (v76) {
    unint64_t v78 = v76;
  }
  else {
    unint64_t v78 = 0xE000000000000000LL;
  }
  uint64_t v79 = (uint64_t *)(v127 + *(int *)(v128 + 52));
  *uint64_t v79 = v77;
  v79[1] = v78;
  LOBYTE(v129) = 10;
  uint64_t v80 = v126;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v72);
  uint64_t v126 = v80;
  if (!v80)
  {
    if (v82) {
      uint64_t v83 = v81;
    }
    else {
      uint64_t v83 = 0LL;
    }
    if (v82) {
      unint64_t v84 = v82;
    }
    else {
      unint64_t v84 = 0xE000000000000000LL;
    }
    uint64_t v85 = (uint64_t *)(v127 + *(int *)(v128 + 56));
    *uint64_t v85 = v83;
    v85[1] = v84;
    LOBYTE(v129) = 11;
    uint64_t v86 = v126;
    uint64_t v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v72);
    uint64_t v126 = v86;
    if (v86)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
      LODWORD(v124) = 0;
      int v32 = 1;
      LODWORD(v122) = 1;
      LODWORD(v123) = 1;
      goto LABEL_75;
    }

    if (v88) {
      uint64_t v89 = v87;
    }
    else {
      uint64_t v89 = 0LL;
    }
    unint64_t v90 = 0xE000000000000000LL;
    if (v88) {
      unint64_t v90 = v88;
    }
    uint64_t v91 = v127;
    uint64_t v92 = v128;
    Class v93 = (uint64_t *)(v127 + *(int *)(v128 + 60));
    *Class v93 = v89;
    v93[1] = v90;
    uint64_t v114 = v91 + *(int *)(v92 + 64);
    static Date.now.getter(v87);
    LOBYTE(v129) = 12;
    uint64_t v94 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v95 = v126;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v119, &v129, v72, v119, v94);
    uint64_t v126 = v95;
    if (v95)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
      int v32 = 1;
      LODWORD(v122) = 1;
      LODWORD(v123) = 1;
      LODWORD(v124) = 1;
      goto LABEL_75;
    }

    uint64_t v128 = *(void *)(v118 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v123, 1LL, v119) != 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v115, v123, v119);
LABEL_91:
      (*(void (**)(uint64_t, char *, uint64_t))(v118 + 40))(v114, v115, v119);
      uint64_t v112 = v127;
      sub_1000ECDFC(v127, v122);
      sub_10009A498(v125);
      sub_1000ECE40(v112);
      return;
    }

    uint64_t v96 = objc_autoreleasePoolPush();
    uint64_t v97 = v126;
    sub_1000E95EC(v127, (Class *)&v129);
    uint64_t v126 = v97;
    if (v97) {
      goto LABEL_92;
    }
    objc_autoreleasePoolPop(v96);
    Swift::String v98 = (void *)v129;
    id v99 = [(id)v129 modificationDate];

    if (v99)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v99);

      uint64_t v100 = (uint64_t)v117;
      uint64_t v101 = v118;
      id v102 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 32);
      uint64_t v103 = v119;
      v102((uint64_t)v117, v26, v119);
      Swift::String v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
      v104(v100, 0LL, 1LL, v103);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v100, 1LL, v103) != 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v74, v72);
        v102((uint64_t)v115, v117, v119);
LABEL_90:
        sub_100099358(v123, (uint64_t *)&unk_100234E10);
        goto LABEL_91;
      }
    }

    else
    {
      Swift::String v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56);
      v104((uint64_t)v117, 1LL, 1LL, v119);
    }

    uint64_t v96 = objc_autoreleasePoolPush();
    uint64_t v105 = v126;
    sub_1000E95EC(v127, (Class *)&v129);
    uint64_t v126 = v105;
    if (v105)
    {
LABEL_92:
      objc_autoreleasePoolPop(v96);
      __break(1u);
      return;
    }

    objc_autoreleasePoolPop(v96);
    id v106 = (void *)v129;
    id v107 = [(id)v129 creationDate];

    if (v107)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v107);

      uint64_t v108 = v119;
      uint64_t v109 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 32);
      uint64_t v110 = (uint64_t)v116;
      v109((uint64_t)v116, v26, v119);
      v104(v110, 0LL, 1LL, v108);
      uint64_t v111 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v128)(v110, 1LL, v108);
      if ((_DWORD)v111 != 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v74, v72);
        v109((uint64_t)v115, v116, v119);
LABEL_89:
        sub_100099358((uint64_t)v117, (uint64_t *)&unk_100234E10);
        goto LABEL_90;
      }
    }

    else
    {
      uint64_t v111 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v104)(v116, 1LL, 1LL, v119);
    }

    static Date.now.getter(v111);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v74, v72);
    sub_100099358((uint64_t)v116, (uint64_t *)&unk_100234E10);
    goto LABEL_89;
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
  LODWORD(v123) = 0;
  LODWORD(v124) = 0;
  int v32 = 1;
  LODWORD(v122) = 1;
LABEL_75:
  uint64_t v30 = v127;
  uint64_t v31 = (int *)v128;
  sub_10009A498(v125);
  (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v30, v121);
  sub_100099394(*(void *)(v30 + v31[5]), *(void *)(v30 + v31[5] + 8));
  swift_bridgeObjectRelease(*(void *)(v30 + v31[6] + 8));
  swift_bridgeObjectRelease(*(void *)(v30 + v31[7] + 8));
  swift_bridgeObjectRelease(*(void *)(v30 + v31[8] + 8));
  swift_bridgeObjectRelease(*(void *)(v30 + v31[9] + 8));
  swift_bridgeObjectRelease(*(void *)(v30 + v31[10] + 8));
  if ((v130 & 1) != 0)
  {
    swift_bridgeObjectRelease(*(void *)(v30 + v31[11] + 8));
    goto LABEL_11;
  }

void sub_1000E8B5C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v5);
  char v116 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v109 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v117 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  __int128 v115 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v109 - v13;
  uint64_t v15 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v15);
  id v17 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v119 = *(void *)(v18 - 8);
  uint64_t v120 = v18;
  __chkstk_darwin(v18);
  uint64_t v118 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = CKRecord.recordType.getter(v20);
  uint64_t v23 = v22;
  if (v21 == 0xD00000000000001ELL && v22 == 0x80000001001A8840LL)
  {
    swift_bridgeObjectRelease(0x80000001001A8840LL);
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0xD00000000000001ELL, 0x80000001001A8840LL, 0LL);
    swift_bridgeObjectRelease(v23);
    if ((v24 & 1) == 0)
    {
      unint64_t v47 = sub_1000ED0C8();
      uint64_t v48 = swift_allocError( &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError,  v47,  0LL,  0LL);
      *uint64_t v49 = 0;
      swift_willThrow(v48);

      return;
    }
  }

  uint64_t v113 = v10;
  uint64_t v114 = v14;
  uint64_t v112 = v9;
  id v25 = [a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v25);
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v25 objectForKeyedSubscript:v27];

  if (!v28) {
    goto LABEL_9;
  }
  id v123 = v28;
  uint64_t v30 = sub_100098CD8(&qword_100234E40);
  uint64_t v29 = swift_dynamicCast(&v121, &v123, v30, &type metadata for String, 6LL);
  if ((v29 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v109 = v2;
  unint64_t v31 = v122;
  uint64_t v110 = v121;
  uint64_t v111 = a2;
  id v32 = [a1 recordID];
  id v33 = [v32 recordName];

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  UUID.init(uuidString:)(v34, v36);
  swift_bridgeObjectRelease(v36);
  uint64_t v38 = v119;
  uint64_t v37 = v120;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v17, 1LL, v120) != 1)
  {
    unint64_t v50 = v118;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v118, v17, v37);
    uint64_t v51 = v111;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v111, v50, v37);
    uint64_t v52 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
    unint64_t v53 = (int **)(v51 + v52[6]);
    void *v53 = v110;
    v53[1] = (int *)v31;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0xD000000000000013LL,  0x80000001001CEDA0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v55 = v121;
    unint64_t v54 = v122;
    if (!v122) {
      unint64_t v55 = 0LL;
    }
    unint64_t v56 = 0xE000000000000000LL;
    if (!v122) {
      unint64_t v54 = 0xE000000000000000LL;
    }
    uint64_t v57 = (int **)(v51 + v52[7]);
    *uint64_t v57 = v55;
    v57[1] = (int *)v54;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0x656D614E65736163LL,  0xE800000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    uint64_t v59 = v121;
    unint64_t v58 = v122;
    if (!v122)
    {
      uint64_t v59 = 0LL;
      unint64_t v58 = 0xE000000000000000LL;
    }

    unint64_t v60 = (int **)(v51 + v52[8]);
    void *v60 = v59;
    v60[1] = (int *)v58;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0xD000000000000013LL,  0x80000001001CEDC0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    uint64_t v62 = v121;
    unint64_t v61 = v122;
    if (!v122)
    {
      uint64_t v62 = 0LL;
      unint64_t v61 = 0xE000000000000000LL;
    }

    unint64_t v63 = (int **)(v51 + v52[9]);
    *unint64_t v63 = v62;
    v63[1] = (int *)v61;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0xD000000000000010LL,  0x80000001001CEDE0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v65 = v121;
    unint64_t v64 = v122;
    if (!v122)
    {
      unint64_t v65 = 0LL;
      unint64_t v64 = 0xE000000000000000LL;
    }

    uint64_t v66 = (int **)(v51 + v52[10]);
    uint64_t *v66 = v65;
    v66[1] = (int *)v64;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0x6572617764726168LL,  0xEF6E6F6973726556LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v68 = v121;
    unint64_t v67 = v122;
    if (!v122)
    {
      unint64_t v68 = 0LL;
      unint64_t v67 = 0xE000000000000000LL;
    }

    uint64_t v69 = (int **)(v51 + v52[11]);
    *uint64_t v69 = v68;
    v69[1] = (int *)v67;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0xD000000000000013LL,  0x80000001001CEE00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unsigned __int8 v71 = v121;
    unint64_t v70 = v122;
    if (!v122)
    {
      unsigned __int8 v71 = 0LL;
      unint64_t v70 = 0xE000000000000000LL;
    }

    uint64_t v72 = (int **)(v51 + v52[12]);
    _BYTE *v72 = v71;
    v72[1] = (int *)v70;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0xD000000000000014LL,  0x80000001001CEE20LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    unint64_t v74 = v121;
    unint64_t v73 = v122;
    if (!v122)
    {
      unint64_t v74 = 0LL;
      unint64_t v73 = 0xE000000000000000LL;
    }

    uint64_t v75 = (int **)(v51 + v52[13]);
    *uint64_t v75 = v74;
    v75[1] = (int *)v73;
    CKRecordKeyValueSetting.subscript.getter( &v121,  0x7465737341434E41LL,  0xEF6E6F6973726556LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
    uint64_t v77 = v121;
    unint64_t v76 = v122;
    if (!v122)
    {
      uint64_t v77 = 0LL;
      unint64_t v76 = 0xE000000000000000LL;
    }

    unint64_t v78 = (int **)(v51 + v52[14]);
    void *v78 = v77;
    v78[1] = (int *)v76;
    id v79 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
    [a1 encodeSystemFieldsWithCoder:v79];
    [v79 finishEncoding];
    id v80 = [v79 encodedData];
    uint64_t v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v83 = v82;

    uint64_t v110 = v52;
    unint64_t v84 = (uint64_t *)(v51 + v52[5]);
    uint64_t *v84 = v81;
    v84[1] = v83;
    id v85 = [a1 valuesByKey];
    NSString v86 = String._bridgeToObjectiveC()();
    id v87 = [v85 objectForKeyedSubscript:v86];
    swift_unknownObjectRelease(v85);

    if (v87)
    {
      uint64_t v88 = objc_opt_self(&OBJC_CLASS___CKReference);
      uint64_t v89 = (void *)swift_dynamicCastObjCClass(v87, v88);
      unint64_t v90 = v115;
      if (v89)
      {
        id v91 = [v89 recordID];
        id v92 = [v91 recordName];

        uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        unint64_t v56 = v94;
        swift_unknownObjectRelease(v87);
      }

      else
      {
        swift_unknownObjectRelease(v87);
        uint64_t v93 = 0LL;
      }
    }

    else
    {
      uint64_t v93 = 0LL;
      unint64_t v90 = v115;
    }

    uint64_t v95 = (uint64_t *)(v111 + v110[15]);
    uint64_t *v95 = v93;
    v95[1] = v56;
    id v96 = [a1 modificationDate];
    uint64_t v97 = v117;
    if (v96)
    {
      Swift::String v98 = v96;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

      id v99 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
      uint64_t v101 = (uint64_t)v112;
      uint64_t v100 = v113;
      v99(v112, v90, v113);
      id v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
      v102(v101, 0LL, 1LL, v100);
      int v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v101, 1LL, v100);
      uint64_t v104 = (uint64_t)v116;
      if (v103 != 1)
      {
        swift_unknownObjectRelease(v25);

        (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
        v99(v114, (char *)v101, v100);
LABEL_46:
        v99((char *)(v111 + v110[16]), v114, v100);
        return;
      }
    }

    else
    {
      id v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56);
      uint64_t v101 = (uint64_t)v112;
      uint64_t v100 = v113;
      v102((uint64_t)v112, 1LL, 1LL, v113);
      uint64_t v104 = (uint64_t)v116;
    }

    id v105 = [a1 creationDate];
    if (v105)
    {
      id v106 = v105;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v105);

      id v107 = *(void (**)(uint64_t, char *, uint64_t))(v97 + 32);
      v107(v104, v90, v100);
      v102(v104, 0LL, 1LL, v100);
      uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v104, 1LL, v100);
      if ((_DWORD)v108 != 1)
      {
        swift_unknownObjectRelease(v25);

        (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
        v107((uint64_t)v114, (char *)v104, v100);
LABEL_45:
        sub_100099358(v101, (uint64_t *)&unk_100234E10);
        id v99 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v102)(v104, 1LL, 1LL, v100);
    }

    static Date.now.getter(v108);
    swift_unknownObjectRelease(v25);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
    sub_100099358(v104, (uint64_t *)&unk_100234E10);
    goto LABEL_45;
  }

  swift_bridgeObjectRelease(v31);
  uint64_t v29 = sub_100099358((uint64_t)v17, &qword_100234E20);
LABEL_9:
  uint64_t v39 = static os_log_type_t.error.getter(v29);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v40 = qword_10023DFC8;
  uint64_t v41 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
  *(_OWORD *)(v42 + 16) = xmmword_1001A5EA0;
  *(void *)(v42 + 56) = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  *(void *)(v42 + 64) = sub_1000A4AF0();
  *(void *)(v42 + 32) = a1;
  id v43 = a1;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Invalid DeviceSupportInformationRecord - %@", 43LL, 2LL, v42);
  swift_bridgeObjectRelease(v42);
  unint64_t v44 = sub_1000ED0C8();
  uint64_t v45 = swift_allocError( &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError,  v44,  0LL,  0LL);
  *uint64_t v46 = 2;
  swift_willThrow(v45);
  swift_unknownObjectRelease(v25);
}

void sub_1000E95EC(uint64_t a1@<X0>, Class *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100118B60(*(void *)(a1 + *(int *)(v7 + 20)), *(void *)(a1 + *(int *)(v7 + 20) + 8));
  Class v9 = v8;
  sub_1000ECDFC(a1, (uint64_t)v6);
  if (v9)
  {
    sub_1000ECE40((uint64_t)v6);
    Class v25 = v9;
    sub_1000E9858((id *)&v25);
    id v10 = -[objc_class valueStore](v9, "valueStore");
    [v10 resetChangedKeys];

    id v11 = -[objc_class encryptedValueStore](v9, "encryptedValueStore");
    [v11 resetChangedKeys];
  }

  else
  {
    sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v12 = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v13 = UUID.uuidString.getter(v12);
    uint64_t v15 = v14;
    sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
    v16._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v16._object = v17;
    v18._object = (void *)0x80000001001CABE0LL;
    v18._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
    v20._uint64_t countAndFlagsBits = v13;
    v20._object = v15;
    v21.super.Class isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
    uint64_t v22 = static os_log_type_t.default.getter(v21.super.isa);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_10023DFC8,  "Failed to unarchive record -- creating new support info record",  62LL,  2LL,  _swiftEmptyArrayStorage);
    v23._object = (void *)0x80000001001A8840LL;
    v23._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    Class v9 = CKRecord.init(recordType:recordID:)(v23, v21).super.isa;
    sub_1000ECE40((uint64_t)v6);
    Class v25 = v9;
    sub_1000E9858((id *)&v25);
  }

  *a2 = v9;
}

uint64_t sub_1000E9858(id *a1)
{
  uint64_t v2 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v78 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static os_log_type_t.debug.getter(v8);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v10 = qword_10023DFC8;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1001A5EA0;
  id v80 = a1;
  id v13 = *a1;
  id v14 = [v13 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10009914C();
  *(void *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v17;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Updating device support info record: %@", 39LL, 2LL, v12);
  swift_bridgeObjectRelease(v12);
  uint64_t v81 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v18 = v79;
  UUID.init(uuidString:)(*(void *)(v79 + v81[15]), *(void *)(v79 + v81[15] + 8));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100099358((uint64_t)v4, &qword_100234E20);
  }

  else
  {
    uint64_t v19 = v78;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v78, v4, v5);
    id v20 = [v13 valuesByKey];
    UUID.uuidString.getter(v20);
    uint64_t v22 = v21;
    id v23 = objc_allocWithZone(&OBJC_CLASS___CKRecordID);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    id v25 = [v23 initWithRecordName:v24];

    id v26 = [objc_allocWithZone(CKReference) initWithRecordID:v25 action:1];
    NSString v27 = String._bridgeToObjectiveC()();
    [v20 setObject:v26 forKeyedSubscript:v27];
    swift_unknownObjectRelease(v20);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }

  id v28 = [*v80 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v28);
  id v80 = (id *)0xD000000000000010LL;
  CKRecordKeyValueSetting.subscript.getter( &v82,  0xD000000000000010LL,  0x80000001001CAB00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v30 = v83;
  uint64_t v31 = v18;
  id v32 = (void *)(v18 + v81[6]);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  if (!v83) {
    goto LABEL_11;
  }
  if (v82 == v34 && v83 == v33)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_12;
  }

  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v32, v32[1], 0LL);
  swift_bridgeObjectRelease(v30);
  if ((v35 & 1) == 0)
  {
LABEL_11:
    unint64_t v84 = &type metadata for String;
    id v85 = &protocol witness table for String;
    uint64_t v82 = v34;
    uint64_t v83 = v33;
    swift_bridgeObjectRetain(v33);
    CKRecordKeyValueSetting.subscript.setter(&v82, v80, 0x80000001001CAB00LL, ObjectType);
  }

uint64_t sub_1000EA220(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = sub_1000EAD44(a1);
  if ((v7 & 1) != 0)
  {
    id v8 = [a1 budsFirmwareVersion];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v154 = v4;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      unint64_t v12 = v11;

      uint64_t v13 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 28);
      id v14 = (uint64_t *)(v1 + v13);
      uint64_t v15 = *(void *)(v1 + v13);
      unint64_t v16 = *(void *)(v1 + v13 + 8);
      BOOL v17 = v15 == v10 && v16 == v12;
      if (v17
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)(v1 + v13), *(void *)(v1 + v13 + 8), v10, v12, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v12);
      }

      else
      {
        uint64_t v144 = v6;
        uint64_t v153 = v3;
        swift_bridgeObjectRetain(v16);
        sub_1000D8A30(v15, v16, v155);
        uint64_t v28 = v155[1];
        uint64_t v150 = v155[2];
        uint64_t v151 = v155[0];
        uint64_t v152 = v155[4];
        char v29 = v156;
        uint64_t v148 = v155[5];
        uint64_t v149 = v155[3];
        uint64_t v30 = v159;
        uint64_t v146 = v158;
        uint64_t v147 = v157;
        sub_1000D8CF8((uint64_t)v155, (uint64_t)v178, &qword_100235A68);
        if (v178[1])
        {
          char v31 = v29 & 1;
          uint64_t v32 = v151;
          uint64_t v33 = v152;
          uint64_t v35 = v149;
          uint64_t v34 = v150;
          uint64_t v37 = v147;
          uint64_t v36 = v148;
          uint64_t v38 = v146;
        }

        else
        {
          if (qword_100234B78 != -1) {
            swift_once(&qword_100234B78, sub_1000D7F54);
          }
          uint64_t v28 = *((void *)&xmmword_10023DD88 + 1);
          uint64_t v150 = qword_10023DD98;
          uint64_t v151 = xmmword_10023DD88;
          uint64_t v148 = *((void *)&xmmword_10023DDA8 + 1);
          uint64_t v33 = xmmword_10023DDA8;
          uint64_t v149 = qword_10023DDA0;
          LODWORD(v152) = byte_10023DDB8;
          uint64_t v30 = *((void *)&xmmword_10023DDC8 + 1);
          uint64_t v146 = xmmword_10023DDC8;
          uint64_t v147 = qword_10023DDC0;
          swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v33);
          uint64_t v38 = v146;
          uint64_t v37 = v147;
          uint64_t v36 = v148;
          uint64_t v35 = v149;
          uint64_t v34 = v150;
          uint64_t v32 = v151;
          char v31 = v152;
        }

        v194[0] = v32;
        v194[1] = v28;
        uint64_t v145 = v30;
        uint64_t v146 = v28;
        v194[2] = v34;
        v194[3] = v35;
        uint64_t v152 = v33;
        v194[4] = v33;
        v194[5] = v36;
        char v195 = v31;
        uint64_t v196 = v37;
        uint64_t v197 = v38;
        uint64_t v198 = v30;
        swift_bridgeObjectRetain(v12);
        uint64_t v142 = v10;
        sub_1000D8A30(v10, v12, v160);
        uint64_t v39 = v160[1];
        uint64_t v147 = v160[0];
        uint64_t v151 = v160[2];
        uint64_t v40 = v160[4];
        uint64_t v150 = v160[3];
        char v41 = v161;
        uint64_t v149 = v160[5];
        uint64_t v148 = v162;
        uint64_t v42 = v164;
        uint64_t v143 = v163;
        sub_1000D8CF8((uint64_t)v160, (uint64_t)v177, &qword_100235A68);
        unint64_t v141 = v16;
        if (v177[1])
        {
          char v43 = v41 & 1;
          uint64_t v44 = v39;
          uint64_t v45 = v147;
          uint64_t v46 = v148;
          uint64_t v47 = v143;
          uint64_t v6 = v144;
          uint64_t v49 = v150;
          uint64_t v48 = v151;
          uint64_t v50 = v149;
        }

        else
        {
          uint64_t v6 = v144;
          if (qword_100234B78 != -1) {
            swift_once(&qword_100234B78, sub_1000D7F54);
          }
          uint64_t v44 = *((void *)&xmmword_10023DD88 + 1);
          uint64_t v40 = xmmword_10023DDA8;
          uint64_t v150 = qword_10023DDA0;
          uint64_t v151 = qword_10023DD98;
          uint64_t v149 = *((void *)&xmmword_10023DDA8 + 1);
          LODWORD(v143) = byte_10023DDB8;
          uint64_t v47 = xmmword_10023DDC8;
          uint64_t v147 = xmmword_10023DD88;
          uint64_t v148 = qword_10023DDC0;
          uint64_t v42 = *((void *)&xmmword_10023DDC8 + 1);
          swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
          swift_bridgeObjectRetain(v44);
          swift_bridgeObjectRetain(v40);
          uint64_t v46 = v148;
          uint64_t v50 = v149;
          uint64_t v49 = v150;
          uint64_t v48 = v151;
          uint64_t v45 = v147;
          char v43 = v143;
        }

        v189[0] = v45;
        v189[1] = v44;
        v189[2] = v48;
        v189[3] = v49;
        v189[4] = v40;
        v189[5] = v50;
        char v190 = v43;
        uint64_t v191 = v46;
        uint64_t v192 = v47;
        uint64_t v193 = v42;
        BOOL v51 = sub_1000D8378(v189, v194);
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v146);
        swift_bridgeObjectRelease(v145);
        if (v51)
        {
          swift_bridgeObjectRelease(v141);
          *id v14 = v142;
          v14[1] = v12;
        }

        else
        {
          swift_bridgeObjectRelease(v12);
        }

        uint64_t v3 = v153;
      }

      uint64_t v4 = v154;
    }

    id v52 = [a1 caseName];
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v56 = v55;

      uint64_t v57 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 32);
      uint64_t v58 = (uint64_t *)(v1 + v57);
      uint64_t v59 = *(void *)(v1 + v57);
      uint64_t v60 = *(void *)(v1 + v57 + 8);
      BOOL v61 = v59 == v54 && v60 == v56;
      if (v61 || (_stringCompareWithSmolCheck(_:_:expecting:)(v59, *(void *)(v1 + v57 + 8), v54, v56, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v56);
      }

      else
      {
        swift_bridgeObjectRelease(v60);
        *uint64_t v58 = v54;
        v58[1] = v56;
      }
    }

    id v62 = [a1 caseFirmwareVersion];
    if (v62)
    {
      uint64_t v63 = v62;
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      uint64_t v66 = v65;

      uint64_t v67 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 36);
      uint64_t v68 = (uint64_t *)(v1 + v67);
      uint64_t v69 = *(void *)(v1 + v67);
      uint64_t v70 = *(void *)(v1 + v67 + 8);
      if (v69 == v64 && v70 == v66
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v69, *(void *)(v1 + v67 + 8), v64, v66, 1LL) & 1) == 0)
      {
        swift_bridgeObjectRelease(v66);
      }

      else
      {
        swift_bridgeObjectRelease(v70);
        *uint64_t v68 = v64;
        v68[1] = v66;
      }
    }

    id v71 = [a1 caseSerialNumber];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      uint64_t v75 = v74;

      uint64_t v76 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 40);
      uint64_t v77 = (uint64_t *)(v1 + v76);
      uint64_t v78 = *(void *)(v1 + v76);
      uint64_t v79 = *(void *)(v1 + v76 + 8);
      if (v78 == v73 && v79 == v75
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v78, *(void *)(v1 + v76 + 8), v73, v75, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v75);
      }

      else
      {
        swift_bridgeObjectRelease(v79);
        uint64_t *v77 = v73;
        v77[1] = v75;
      }
    }

    id v80 = [a1 hardwareVersion];
    if (v80)
    {
      uint64_t v81 = v80;
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      uint64_t v84 = v83;

      uint64_t v85 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 44);
      NSString v86 = (uint64_t *)(v1 + v85);
      uint64_t v87 = *(void *)(v1 + v85);
      uint64_t v88 = *(void *)(v1 + v85 + 8);
      if (v87 == v82 && v88 == v84
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, *(void *)(v1 + v85 + 8), v82, v84, 1LL) & 1) == 0)
      {
        swift_bridgeObjectRelease(v84);
      }

      else
      {
        swift_bridgeObjectRelease(v88);
        *NSString v86 = v82;
        v86[1] = v84;
      }
    }

    id v89 = [a1 leftBudSerialNumber];
    if (v89)
    {
      unint64_t v90 = v89;
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      uint64_t v93 = v92;

      uint64_t v94 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 48);
      uint64_t v95 = (uint64_t *)(v1 + v94);
      uint64_t v96 = *(void *)(v1 + v94);
      uint64_t v97 = *(void *)(v1 + v94 + 8);
      if (v96 == v91 && v97 == v93
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v96, *(void *)(v1 + v94 + 8), v91, v93, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v93);
      }

      else
      {
        swift_bridgeObjectRelease(v97);
        uint64_t *v95 = v91;
        v95[1] = v93;
      }
    }

    id v98 = [a1 rightBudSerialNumber];
    if (v98)
    {
      id v99 = v98;
      uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
      uint64_t v102 = v101;

      uint64_t v103 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 52);
      uint64_t v104 = (uint64_t *)(v1 + v103);
      uint64_t v105 = *(void *)(v1 + v103);
      uint64_t v106 = *(void *)(v1 + v103 + 8);
      if (v105 == v100 && v106 == v102
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v105, *(void *)(v1 + v103 + 8), v100, v102, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v102);
      }

      else
      {
        swift_bridgeObjectRelease(v106);
        *uint64_t v104 = v100;
        v104[1] = v102;
      }
    }

    id v107 = [a1 ancAssetVersion];
    if (v107)
    {
      uint64_t v108 = v107;
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      unint64_t v111 = v110;

      uint64_t v112 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0LL) + 56);
      uint64_t v113 = (uint64_t *)(v1 + v112);
      uint64_t v114 = *(void *)(v1 + v112);
      unint64_t v115 = *(void *)(v1 + v112 + 8);
      if (v114 == v109 && v115 == v111
        || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)(v1 + v112),  *(void *)(v1 + v112 + 8),  v109,  v111,  0LL) & 1) != 0)
      {
        id v107 = (id)swift_bridgeObjectRelease(v111);
      }

      else
      {
        uint64_t v153 = v3;
        uint64_t v154 = v4;
        swift_bridgeObjectRetain(v115);
        sub_1000D8A30(v114, v115, v165);
        uint64_t v116 = v165[1];
        uint64_t v150 = v165[2];
        uint64_t v151 = v165[0];
        uint64_t v117 = v165[4];
        char v118 = v166;
        uint64_t v148 = v165[5];
        uint64_t v149 = v165[3];
        uint64_t v146 = v168;
        uint64_t v147 = v167;
        uint64_t v152 = v169;
        sub_1000D8CF8((uint64_t)v165, (uint64_t)v176, &qword_100235A68);
        if (v176[1])
        {
          char v119 = v118 & 1;
          uint64_t v120 = v151;
          uint64_t v121 = v152;
          uint64_t v123 = v149;
          uint64_t v122 = v150;
          uint64_t v125 = v147;
          uint64_t v124 = v148;
          uint64_t v126 = v146;
        }

        else
        {
          if (qword_100234B78 != -1) {
            swift_once(&qword_100234B78, sub_1000D7F54);
          }
          uint64_t v116 = *((void *)&xmmword_10023DD88 + 1);
          uint64_t v150 = qword_10023DD98;
          uint64_t v151 = xmmword_10023DD88;
          uint64_t v148 = *((void *)&xmmword_10023DDA8 + 1);
          uint64_t v117 = xmmword_10023DDA8;
          uint64_t v149 = qword_10023DDA0;
          LODWORD(v152) = byte_10023DDB8;
          uint64_t v121 = *((void *)&xmmword_10023DDC8 + 1);
          uint64_t v146 = xmmword_10023DDC8;
          uint64_t v147 = qword_10023DDC0;
          swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
          swift_bridgeObjectRetain(v116);
          swift_bridgeObjectRetain(v117);
          uint64_t v126 = v146;
          uint64_t v125 = v147;
          uint64_t v124 = v148;
          uint64_t v123 = v149;
          uint64_t v122 = v150;
          uint64_t v120 = v151;
          char v119 = v152;
        }

        v184[0] = v120;
        uint64_t v145 = v117;
        uint64_t v146 = v116;
        v184[1] = v116;
        v184[2] = v122;
        v184[3] = v123;
        v184[4] = v117;
        v184[5] = v124;
        char v185 = v119;
        uint64_t v186 = v125;
        uint64_t v187 = v126;
        uint64_t v152 = v121;
        uint64_t v188 = v121;
        swift_bridgeObjectRetain(v111);
        uint64_t v143 = v109;
        sub_1000D8A30(v109, v111, v170);
        uint64_t v127 = v170[1];
        uint64_t v150 = v170[2];
        uint64_t v151 = v170[0];
        uint64_t v128 = v170[4];
        char v129 = v171;
        uint64_t v148 = v170[5];
        uint64_t v149 = v170[3];
        uint64_t v147 = v172;
        uint64_t v130 = v174;
        uint64_t v144 = v173;
        sub_1000D8CF8((uint64_t)v170, (uint64_t)v175, &qword_100235A68);
        if (v175[1])
        {
          char v131 = v129 & 1;
          uint64_t v133 = v150;
          uint64_t v132 = v151;
          uint64_t v135 = v148;
          uint64_t v134 = v149;
          uint64_t v136 = v147;
          uint64_t v137 = v144;
        }

        else
        {
          if (qword_100234B78 != -1) {
            swift_once(&qword_100234B78, sub_1000D7F54);
          }
          uint64_t v127 = *((void *)&xmmword_10023DD88 + 1);
          uint64_t v150 = qword_10023DD98;
          uint64_t v151 = xmmword_10023DD88;
          uint64_t v148 = *((void *)&xmmword_10023DDA8 + 1);
          uint64_t v128 = xmmword_10023DDA8;
          uint64_t v149 = qword_10023DDA0;
          LODWORD(v144) = byte_10023DDB8;
          uint64_t v137 = (char *)xmmword_10023DDC8;
          uint64_t v147 = qword_10023DDC0;
          uint64_t v130 = *((void *)&xmmword_10023DDC8 + 1);
          swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
          swift_bridgeObjectRetain(v127);
          swift_bridgeObjectRetain(v128);
          uint64_t v136 = v147;
          uint64_t v135 = v148;
          uint64_t v134 = v149;
          uint64_t v133 = v150;
          uint64_t v132 = v151;
          char v131 = (char)v144;
        }

        v179[0] = v132;
        v179[1] = v127;
        v179[2] = v133;
        v179[3] = v134;
        v179[4] = v128;
        v179[5] = v135;
        char v180 = v131;
        uint64_t v181 = v136;
        int v182 = v137;
        uint64_t v183 = v130;
        BOOL v138 = sub_1000D8378(v179, v184);
        swift_bridgeObjectRelease(v130);
        swift_bridgeObjectRelease(v128);
        swift_bridgeObjectRelease(v127);
        swift_bridgeObjectRelease(v145);
        swift_bridgeObjectRelease(v146);
        swift_bridgeObjectRelease(v152);
        if (v138)
        {
          id v107 = (id)swift_bridgeObjectRelease(v115);
          uint64_t *v113 = v143;
          v113[1] = v111;
        }

        else
        {
          id v107 = (id)swift_bridgeObjectRelease(v111);
        }

        uint64_t v3 = v153;
        uint64_t v4 = v154;
      }
    }

    static Date.now.getter(v107);
    uint64_t v139 = type metadata accessor for DeviceSupportInformationRecord(0LL);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(v139 + 64), v6, v3);
  }

  else
  {
    uint64_t v18 = static os_log_type_t.info.getter(v7);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v19 = qword_10023DFC8;
    uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
    *(_OWORD *)(v21 + 16) = xmmword_1001A5EA0;
    id v22 = a1;
    id v23 = [v22 description];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_10009914C();
    *(void *)(v21 + 32) = v24;
    *(void *)(v21 + 40) = v26;
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "No change in updated device support info record: %@",  51LL,  2LL,  v21);
    return swift_bridgeObjectRelease(v21);
  }

id sub_1000EAD44(void *a1)
{
  uint64_t v3 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v213 - v5;
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v237 = (char *)&v213 - v9;
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v236 = (char *)&v213 - v12;
  __chkstk_darwin(v13);
  __chkstk_darwin((char *)&v213 - v14);
  uint64_t v240 = (uint64_t)&v213 - v15;
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  uint64_t v241 = (uint64_t)&v213 - v18;
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v238 = (uint64_t)&v213 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v213 - v23;
  __chkstk_darwin(v25);
  NSString v27 = (char *)&v213 - v26;
  __chkstk_darwin(v28);
  uint64_t v36 = (char *)&v213 - v35;
  if (!a1)
  {
    char v51 = 0;
    return (id)(v51 & 1);
  }

  uint64_t v232 = v30;
  uint64_t v233 = v31;
  uint64_t v230 = v34;
  uint64_t v231 = v29;
  uint64_t v228 = v32;
  uint64_t v229 = v33;
  id v235 = a1;
  id v37 = [v235 budsFirmwareVersion];
  uint64_t v239 = v1;
  v234 = (int *)v3;
  if (!v37)
  {
    sub_1000ECDFC(v1, (uint64_t)v36);
    goto LABEL_9;
  }

  uint64_t v38 = v37;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v40 = v39;

  swift_bridgeObjectRelease(v40);
  sub_1000ECDFC(v1, (uint64_t)v36);
  if (!v40)
  {
LABEL_9:
    sub_1000ECE40((uint64_t)v36);
    sub_1000ECDFC(v1, (uint64_t)v27);
    goto LABEL_20;
  }

  v227 = v6;
  id result = [v235 budsFirmwareVersion];
  if (!result)
  {
    __break(1u);
    goto LABEL_116;
  }

  uint64_t v42 = result;
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  unint64_t v45 = v44;

  sub_1000D8A30(v43, v45, v242);
  uint64_t v47 = v242[0];
  uint64_t v46 = v242[1];
  uint64_t v48 = v242[4];
  uint64_t v225 = v242[3];
  uint64_t v226 = v242[2];
  char v49 = v243;
  uint64_t v223 = v244;
  uint64_t v224 = v242[5];
  uint64_t v50 = v246;
  uint64_t v222 = v245;
  sub_1000D8CF8((uint64_t)v242, (uint64_t)v265, &qword_100235A68);
  char v213 = v27;
  v214 = v24;
  if (v265[1])
  {
    uint64_t v216 = v47;
    uint64_t v217 = v48;
    uint64_t v218 = v50;
    uint64_t v219 = v46;
    int v215 = v49 & 1;
  }

  else
  {
    if (qword_100234B78 != -1) {
      swift_once(&qword_100234B78, sub_1000D7F54);
    }
    uint64_t v52 = *((void *)&xmmword_10023DD88 + 1);
    uint64_t v216 = xmmword_10023DD88;
    uint64_t v53 = xmmword_10023DDA8;
    uint64_t v225 = qword_10023DDA0;
    uint64_t v226 = qword_10023DD98;
    int v215 = byte_10023DDB8;
    uint64_t v223 = qword_10023DDC0;
    uint64_t v224 = *((void *)&xmmword_10023DDA8 + 1);
    uint64_t v218 = *((void *)&xmmword_10023DDC8 + 1);
    uint64_t v222 = xmmword_10023DDC8;
    swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
    uint64_t v219 = v52;
    swift_bridgeObjectRetain(v52);
    uint64_t v217 = v53;
    swift_bridgeObjectRetain(v53);
  }

  uint64_t v54 = (uint64_t *)&v36[*(int *)(v3 + 28)];
  uint64_t v55 = *v54;
  unint64_t v56 = v54[1];
  swift_bridgeObjectRetain(v56);
  sub_1000D8A30(v55, v56, v247);
  uint64_t v57 = v247[1];
  uint64_t v58 = v247[3];
  uint64_t v220 = v247[2];
  uint64_t v221 = v247[0];
  uint64_t v60 = v247[4];
  uint64_t v59 = v247[5];
  char v62 = v248;
  uint64_t v61 = v249;
  uint64_t v64 = v250;
  uint64_t v63 = v251;
  sub_1000D8CF8((uint64_t)v247, (uint64_t)v264, &qword_100235A68);
  if (v264[1])
  {
    char v65 = v62 & 1;
    uint64_t v66 = v216;
    uint64_t v68 = v220;
    uint64_t v67 = v221;
    uint64_t v69 = v58;
    uint64_t v70 = v59;
  }

  else
  {
    if (qword_100234B78 != -1) {
      swift_once(&qword_100234B78, sub_1000D7F54);
    }
    uint64_t v57 = *((void *)&xmmword_10023DD88 + 1);
    uint64_t v71 = qword_10023DDA0;
    uint64_t v220 = qword_10023DD98;
    uint64_t v221 = xmmword_10023DD88;
    uint64_t v72 = *((void *)&xmmword_10023DDA8 + 1);
    uint64_t v60 = xmmword_10023DDA8;
    char v73 = byte_10023DDB8;
    uint64_t v61 = qword_10023DDC0;
    uint64_t v63 = *((void *)&xmmword_10023DDC8 + 1);
    uint64_t v64 = xmmword_10023DDC8;
    swift_bridgeObjectRetain(*((void *)&xmmword_10023DDC8 + 1));
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v60);
    uint64_t v70 = v72;
    uint64_t v69 = v71;
    uint64_t v68 = v220;
    uint64_t v67 = v221;
    char v65 = v73;
    uint64_t v66 = v216;
  }

  uint64_t v75 = v218;
  uint64_t v74 = v219;
  v276[0] = v66;
  v276[1] = v219;
  v276[2] = v226;
  uint64_t v76 = v217;
  v276[3] = v225;
  v276[4] = v217;
  v276[5] = v224;
  char v277 = v215;
  uint64_t v278 = v223;
  uint64_t v279 = v222;
  uint64_t v280 = v218;
  v281[0] = v67;
  v281[1] = v57;
  v281[2] = v68;
  v281[3] = v69;
  v281[4] = v60;
  v281[5] = v70;
  char v282 = v65;
  uint64_t v283 = v61;
  uint64_t v284 = v64;
  uint64_t v285 = v63;
  char v77 = sub_1000D8510(v276, v281);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v75);
  sub_1000ECE40((uint64_t)v36);
  uint64_t v78 = v239;
  NSString v27 = v213;
  sub_1000ECDFC(v239, (uint64_t)v213);
  uint64_t v6 = v227;
  uint64_t v24 = v214;
  if ((v77 & 1) != 0)
  {
    sub_1000ECE40((uint64_t)v27);
    id v79 = v235;
    uint64_t v80 = v241;
LABEL_71:
    uint64_t v93 = v238;
    sub_1000ECDFC(v78, v238);
LABEL_72:
    sub_1000ECE40(v93);
    sub_1000ECDFC(v78, v80);
    uint64_t v98 = v78;
LABEL_73:
    sub_1000ECE40(v80);
    uint64_t v108 = (uint64_t)v236;
    uint64_t v107 = (uint64_t)v237;
LABEL_74:
    uint64_t v159 = v240;
    sub_1000ECDFC(v98, v240);
LABEL_75:
    sub_1000ECE40(v159);
    sub_1000ECDFC(v98, v108);
LABEL_76:
    sub_1000ECE40(v108);
LABEL_77:
    sub_1000ECDFC(v98, v107);
LABEL_78:
    sub_1000ECE40(v107);
LABEL_79:
    sub_1000ECDFC(v98, (uint64_t)v6);
LABEL_80:
    sub_1000ECE40((uint64_t)v6);

    char v51 = 1;
    return (id)(v51 & 1);
  }

uint64_t sub_1000EBE80(unint64_t a1)
{
  uint64_t v4 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v5 = (uint64_t *)(v1 + *(int *)(v4 + 36));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(v7) & 0xF;
  }
  else {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10) {
    goto LABEL_61;
  }
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(v7);
    unint64_t v13 = sub_10016175C(v6, v7, 10LL);
    char v29 = v28;
    uint64_t v4 = swift_bridgeObjectRelease(v7);
    if ((v29 & 1) != 0) {
      goto LABEL_61;
    }
    goto LABEL_39;
  }

  if ((v7 & 0x2000000000000000LL) != 0)
  {
    v44[0] = v6;
    v44[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    if (v6 == 43)
    {
      if (!v8) {
        goto LABEL_81;
      }
      if (v8 == 1) {
        goto LABEL_79;
      }
      unint64_t v13 = (BYTE1(v6) - 48);
      if (v8 != 2)
      {
        unint64_t v13 = 10LL * (BYTE1(v6) - 48) + (BYTE2(v6) - 48);
        uint64_t v17 = v8 - 3;
        if (v8 != 3)
        {
          uint64_t v18 = (unsigned __int8 *)v44 + 3;
          while (1)
          {
            unsigned int v19 = *v18 - 48;
            if (v19 > 9) {
              goto LABEL_34;
            }
            if (!is_mul_ok(v13, 0xAuLL)) {
              goto LABEL_34;
            }
            BOOL v15 = __CFADD__(10 * v13, v19);
            unint64_t v13 = 10 * v13 + v19;
            if (v15) {
              goto LABEL_34;
            }
            LOBYTE(v8) = 0;
            ++v18;
            if (!--v17) {
              goto LABEL_38;
            }
          }
        }
      }
    }

    else
    {
      if (v6 == 45)
      {
        if (v8)
        {
          if (v8 != 1)
          {
            unsigned __int8 v14 = BYTE1(v6) - 48;
            if ((BYTE1(v6) - 48) <= 9u)
            {
              unint64_t v13 = 0LL;
              BOOL v15 = v14 == 0LL;
              unint64_t v16 = -(uint64_t)v14;
              if (!v15) {
                goto LABEL_35;
              }
              if (v8 == 2)
              {
                LOBYTE(v8) = 0;
                unint64_t v13 = v16;
                goto LABEL_38;
              }

              unsigned __int8 v23 = BYTE2(v6) - 48;
              if ((BYTE2(v6) - 48) <= 9u && is_mul_ok(v16, 0xAuLL))
              {
                unint64_t v24 = 10 * v16;
                unint64_t v13 = v24 - v23;
                if (v24 >= v23)
                {
                  uint64_t v25 = v8 - 3;
                  if (v8 != 3)
                  {
                    uint64_t v26 = (unsigned __int8 *)v44 + 3;
                    while (1)
                    {
                      unsigned int v27 = *v26 - 48;
                      if (v27 > 9) {
                        goto LABEL_34;
                      }
                      if (!is_mul_ok(v13, 0xAuLL)) {
                        goto LABEL_34;
                      }
                      BOOL v15 = 10 * v13 >= v27;
                      unint64_t v13 = 10 * v13 - v27;
                      if (!v15) {
                        goto LABEL_34;
                      }
                      LOBYTE(v8) = 0;
                      ++v26;
                      if (!--v25) {
                        goto LABEL_38;
                      }
                    }
                  }

                  goto LABEL_37;
                }
              }
            }

uint64_t sub_1000EC434(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100098C98( (unint64_t *)&unk_100235060,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  uint64_t v5 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v6 = (uint64_t *)(v1 + v5[5]);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000991CC(*v6, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_100099394(v7, v8);
  uint64_t v9 = (uint64_t *)(v1 + v5[6]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  char v12 = (uint64_t *)(v1 + v5[7]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  BOOL v15 = (uint64_t *)(v1 + v5[8]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = (uint64_t *)(v1 + v5[9]);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  String.hash(into:)(a1, v19, v20);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = (uint64_t *)(v1 + v5[10]);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23);
  unint64_t v24 = (uint64_t *)(v1 + v5[11]);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  String.hash(into:)(a1, v25, v26);
  swift_bridgeObjectRelease(v26);
  unsigned int v27 = (uint64_t *)(v1 + v5[12]);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  swift_bridgeObjectRetain(v29);
  String.hash(into:)(a1, v28, v29);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = (uint64_t *)(v1 + v5[13]);
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  swift_bridgeObjectRetain(v32);
  String.hash(into:)(a1, v31, v32);
  swift_bridgeObjectRelease(v32);
  unint64_t v33 = (uint64_t *)(v1 + v5[14]);
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  String.hash(into:)(a1, v34, v35);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = (uint64_t *)(v1 + v5[15]);
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  swift_bridgeObjectRetain(v38);
  String.hash(into:)(a1, v37, v38);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = type metadata accessor for Date(0LL);
  uint64_t v40 = sub_100098C98( &qword_100235A30,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v39, v40);
}

uint64_t sub_1000EC6D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000EC708 + 4 * byte_1001A8830[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_1000EC708()
{
  return 0x74654D64756F6C63LL;
}

unint64_t sub_1000EC72C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000EC838(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100235F28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000EDEC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceSupportInformationRecord.CodingKeys,  &type metadata for DeviceSupportInformationRecord.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v52) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v52, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
    __int128 v52 = *(_OWORD *)(v3 + v14[5]);
    char v51 = 1;
    unint64_t v15 = sub_10009A4FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v52, &v51, v5, &type metadata for Data, v15);
    uint64_t v16 = (uint64_t *)(v3 + v14[6]);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    LOBYTE(v52) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v52, v5);
    uint64_t v19 = (uint64_t *)(v3 + v14[7]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    LOBYTE(v52) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v52, v5);
    uint64_t v22 = (uint64_t *)(v3 + v14[8]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    LOBYTE(v52) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v52, v5);
    uint64_t v25 = (uint64_t *)(v3 + v14[9]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    LOBYTE(v52) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v52, v5);
    uint64_t v28 = (uint64_t *)(v3 + v14[10]);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    LOBYTE(v52) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v52, v5);
    uint64_t v31 = (uint64_t *)(v3 + v14[11]);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    LOBYTE(v52) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v52, v5);
    uint64_t v34 = (uint64_t *)(v3 + v14[12]);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    LOBYTE(v52) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v52, v5);
    uint64_t v37 = (uint64_t *)(v3 + v14[13]);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    LOBYTE(v52) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v38, v39, &v52, v5);
    uint64_t v40 = (uint64_t *)(v3 + v14[14]);
    uint64_t v41 = *v40;
    uint64_t v42 = v40[1];
    LOBYTE(v52) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v41, v42, &v52, v5);
    uint64_t v43 = (uint64_t *)(v3 + v14[15]);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    LOBYTE(v52) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &v52, v5);
    uint64_t v46 = v3 + v14[16];
    LOBYTE(v52) = 12;
    uint64_t v47 = type metadata accessor for Date(0LL);
    uint64_t v48 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v46, &v52, v5, v47, v48);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000ECBE4()
{
  return sub_1000EC6D0(*v0);
}

uint64_t sub_1000ECBEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000EE140(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000ECC10(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1000ECC1C(uint64_t a1)
{
  unint64_t v2 = sub_1000EDEC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ECC44(uint64_t a1)
{
  unint64_t v2 = sub_1000EDEC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000ECC6C()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for DeviceSupportInformationRecord(uint64_t a1)
{
  uint64_t result = qword_100235E80;
  if (!qword_100235E80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceSupportInformationRecord);
  }
  return result;
}

uint64_t sub_1000ECCC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 64);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

Class sub_1000ECD04()
{
  uint64_t v1 = objc_autoreleasePoolPush();
  sub_1000E95EC(v0, &v3);
  objc_autoreleasePoolPop(v1);
  return v3;
}

Swift::Int sub_1000ECD54()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000ECD94(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_1000ECDD4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000ECDE8(void *a1)
{
  return sub_1000EC838(a1);
}

uint64_t sub_1000ECDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ECE40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000ECE7C(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = (int *)type metadata accessor for DeviceSupportInformationRecord(0LL);
  sub_1000D53B8(*(void *)(a1 + v4[5]), *(void *)(a1 + v4[5] + 8));
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = v4[6];
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  BOOL v11 = v7 == *v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v12 = v4[7];
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  unint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  BOOL v17 = v13 == *v15 && v14 == v16;
  if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v18 = v4[8];
  uint64_t v19 = *(void *)(a1 + v18);
  uint64_t v20 = *(void *)(a1 + v18 + 8);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  BOOL v23 = v19 == *v21 && v20 == v22;
  if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v24 = v4[9];
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  if ((v25 != *v27 || v26 != v28) && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v29 = v4[10];
  uint64_t v30 = *(void *)(a1 + v29);
  uint64_t v31 = *(void *)(a1 + v29 + 8);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  if ((v30 != *v32 || v31 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *v32, v33, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v34 = v4[11];
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = *(void *)(a1 + v34 + 8);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  if ((v35 != *v37 || v36 != v38) && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *v37, v38, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v39 = v4[12];
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = *(void *)(a1 + v39 + 8);
  uint64_t v42 = (void *)(a2 + v39);
  uint64_t v43 = v42[1];
  if ((v40 != *v42 || v41 != v43) && (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v42, v43, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v44 = v4[13];
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v46 = *(void *)(a1 + v44 + 8);
  uint64_t v47 = (void *)(a2 + v44);
  uint64_t v48 = v47[1];
  if ((v45 != *v47 || v46 != v48) && (_stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, *v47, v48, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v49 = v4[14];
  uint64_t v50 = *(void *)(a1 + v49);
  uint64_t v51 = *(void *)(a1 + v49 + 8);
  __int128 v52 = (void *)(a2 + v49);
  uint64_t v53 = v52[1];
  if ((v50 != *v52 || v51 != v53) && (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *v52, v53, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v54 = v4[15];
  uint64_t v55 = *(void *)(a1 + v54);
  uint64_t v56 = *(void *)(a1 + v54 + 8);
  uint64_t v57 = (void *)(a2 + v54);
  uint64_t v58 = v57[1];
  if (v55 == *v57 && v56 == v58) {
    return static Date.== infix(_:_:)(a1 + v4[16], a2 + v4[16]);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, *v57, v58, 0LL) & 1) != 0) {
    return static Date.== infix(_:_:)(a1 + v4[16], a2 + v4[16]);
  }
  else {
    return 0LL;
  }
}

unint64_t sub_1000ED0C8()
{
  unint64_t result = qword_100235E18;
  if (!qword_100235E18)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001A8A24,  &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError);
    atomic_store(result, (unint64_t *)&qword_100235E18);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceSupportInformationRecord.DeviceSupportInformationRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000ED158 + 4 * byte_1001A8842[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000ED18C + 4 * byte_1001A883D[v4]))();
}

uint64_t sub_1000ED18C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ED194(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ED19CLL);
  }
  return result;
}

uint64_t sub_1000ED1A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ED1B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000ED1B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ED1BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSupportInformationRecord.DeviceSupportInformationRecordError()
{
  return &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError;
}

uint64_t *sub_1000ED1D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v54 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v54 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v54);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000991CC(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v59 = v16[1];
    *unint64_t v15 = *v16;
    v15[1] = v59;
    BOOL v17 = (uint64_t *)((char *)a1 + v14);
    uint64_t v18 = (uint64_t *)((char *)a2 + v14);
    uint64_t v60 = v18[1];
    *BOOL v17 = *v18;
    v17[1] = v60;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (uint64_t *)((char *)a1 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v58 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v58;
    uint64_t v26 = a3[10];
    uint64_t v27 = a3[11];
    uint64_t v28 = (uint64_t *)((char *)a1 + v26);
    uint64_t v29 = (uint64_t *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = (uint64_t *)((char *)a1 + v27);
    uint64_t v32 = (uint64_t *)((char *)a2 + v27);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = a3[12];
    uint64_t v35 = a3[13];
    uint64_t v36 = (uint64_t *)((char *)a1 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    void *v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = (uint64_t *)((char *)a1 + v35);
    uint64_t v40 = (uint64_t *)((char *)a2 + v35);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = a3[14];
    uint64_t v43 = a3[15];
    uint64_t v44 = (uint64_t *)((char *)a1 + v42);
    uint64_t v45 = (uint64_t *)((char *)a2 + v42);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = (uint64_t *)((char *)a1 + v43);
    uint64_t v48 = (uint64_t *)((char *)a2 + v43);
    uint64_t v49 = *v48;
    uint64_t v50 = v48[1];
    uint64_t v51 = a3[16];
    uint64_t v56 = (char *)a1 + v51;
    uint64_t v57 = (char *)a2 + v51;
    void *v47 = v49;
    v47[1] = v50;
    uint64_t v52 = type metadata accessor for Date(0LL);
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16LL);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v50);
    v53(v56, v57, v52);
  }

  return a1;
}

uint64_t sub_1000ED3D4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_100099394(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  uint64_t v5 = a1 + a2[16];
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_1000ED4E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000991CC(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  unint64_t v15 = (void *)(a2 + v12);
  uint64_t v57 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v57;
  uint64_t v16 = (void *)(a1 + v13);
  BOOL v17 = (void *)(a2 + v13);
  uint64_t v58 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v58;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v18);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (void *)(a1 + v19);
  uint64_t v24 = (void *)(a2 + v19);
  uint64_t v56 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v56;
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v25);
  uint64_t v28 = (void *)(a2 + v25);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = (void *)(a1 + v26);
  uint64_t v31 = (void *)(a2 + v26);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = a3[12];
  uint64_t v34 = a3[13];
  uint64_t v35 = (void *)(a1 + v33);
  uint64_t v36 = (void *)(a2 + v33);
  uint64_t v37 = v36[1];
  void *v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = (void *)(a1 + v34);
  uint64_t v39 = (void *)(a2 + v34);
  uint64_t v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v40;
  uint64_t v41 = a3[14];
  uint64_t v42 = a3[15];
  uint64_t v43 = (void *)(a1 + v41);
  uint64_t v44 = (void *)(a2 + v41);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = (void *)(a1 + v42);
  uint64_t v47 = (uint64_t *)(a2 + v42);
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  uint64_t v50 = a3[16];
  uint64_t v54 = a1 + v50;
  uint64_t v55 = a2 + v50;
  *uint64_t v46 = v48;
  v46[1] = v49;
  uint64_t v51 = type metadata accessor for Date(0LL);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16LL);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v49);
  v52(v54, v55, v51);
  return a1;
}

uint64_t sub_1000ED6B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000991CC(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100099394(v12, v13);
  uint64_t v14 = a3[6];
  unint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *unint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  *uint64_t v25 = *v26;
  uint64_t v27 = v26[1];
  uint64_t v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  uint64_t v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a3[10];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  void *v35 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = a3[11];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  *uint64_t v40 = *v41;
  uint64_t v42 = v41[1];
  uint64_t v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = a3[12];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  *uint64_t v45 = *v46;
  uint64_t v47 = v46[1];
  uint64_t v48 = v45[1];
  v45[1] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  uint64_t v49 = a3[13];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (void *)(a2 + v49);
  *uint64_t v50 = *v51;
  uint64_t v52 = v51[1];
  uint64_t v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = a3[14];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (void *)(a2 + v54);
  *uint64_t v55 = *v56;
  uint64_t v57 = v56[1];
  uint64_t v58 = v55[1];
  v55[1] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  uint64_t v59 = a3[15];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (void *)(a2 + v59);
  void *v60 = *v61;
  uint64_t v62 = v61[1];
  uint64_t v63 = v60[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = a3[16];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = a2 + v64;
  uint64_t v67 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 24LL))(v65, v66, v67);
  return a1;
}

uint64_t sub_1000ED914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[15];
  uint64_t v13 = a3[16];
  __int128 v14 = *(_OWORD *)(a2 + v12);
  uint64_t v15 = a2 + v13;
  uint64_t v16 = a1 + v13;
  *(_OWORD *)(a1 + v12) = v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32LL))(v16, v15, v17);
  return a1;
}

uint64_t sub_1000ED9FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100099394(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v11[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v21 = v17[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v27 = v23[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a3[9];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v33 = v29[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a3[10];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v39 = v35[1];
  void *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a3[11];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  uint64_t v45 = v41[1];
  void *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a3[12];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  uint64_t v51 = v47[1];
  void *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = a3[13];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)(a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  uint64_t v57 = v53[1];
  void *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  uint64_t v58 = a3[14];
  uint64_t v59 = (void *)(a1 + v58);
  uint64_t v60 = (uint64_t *)(a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  uint64_t v63 = v59[1];
  void *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = a3[15];
  uint64_t v65 = (void *)(a1 + v64);
  uint64_t v66 = (uint64_t *)(a2 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  uint64_t v69 = v65[1];
  void *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  uint64_t v70 = a3[16];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = a2 + v70;
  uint64_t v73 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 40LL))(v71, v72, v73);
  return a1;
}

uint64_t sub_1000EDBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EDBB4);
}

uint64_t sub_1000EDBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 64);
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1000EDC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EDC6C);
}

uint64_t sub_1000EDC6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 64);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000EDD14(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1001A88B8;
    v5[2] = &unk_1001A88D0;
    v5[3] = &unk_1001A88D0;
    v5[4] = &unk_1001A88D0;
    void v5[5] = &unk_1001A88D0;
    v5[6] = &unk_1001A88D0;
    v5[7] = &unk_1001A88D0;
    v5[8] = &unk_1001A88D0;
    v5[9] = &unk_1001A88D0;
    v5[10] = &unk_1001A88D0;
    v5[11] = &unk_1001A88D0;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[12] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 13LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000EDDBC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100098C98( &qword_100235838,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A8A8C);
  uint64_t result = sub_100098C98( &qword_100235EF0,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A8A64);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000EDE18()
{
  return sub_100098C98( &qword_100235EF8,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A88E8);
}

unint64_t sub_1000EDE48()
{
  unint64_t result = qword_100235F00;
  if (!qword_100235F00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001A89FC,  &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError);
    atomic_store(result, (unint64_t *)&qword_100235F00);
  }

  return result;
}

uint64_t sub_1000EDE8C(uint64_t a1)
{
  uint64_t result = sub_100098C98( &qword_100235F08,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A8910);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EDEC8()
{
  unint64_t result = qword_100235F18;
  if (!qword_100235F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8B94, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235F18);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DeviceSupportInformationRecord.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for DeviceSupportInformationRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_1000EDFE8 + 4 * byte_1001A884C[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000EE01C + 4 * byte_1001A8847[v4]))();
}

uint64_t sub_1000EE01C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EE024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EE02CLL);
  }
  return result;
}

uint64_t sub_1000EE038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EE040LL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_1000EE044(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EE04C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSupportInformationRecord.CodingKeys()
{
  return &type metadata for DeviceSupportInformationRecord.CodingKeys;
}

unint64_t sub_1000EE06C()
{
  unint64_t result = qword_100235F38;
  if (!qword_100235F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8B6C, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235F38);
  }

  return result;
}

unint64_t sub_1000EE0B4()
{
  unint64_t result = qword_100235F40;
  if (!qword_100235F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8ADC, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235F40);
  }

  return result;
}

unint64_t sub_1000EE0FC()
{
  unint64_t result = qword_100235F48;
  if (!qword_100235F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8B04, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100235F48);
  }

  return result;
}

uint64_t sub_1000EE140(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v7 = 0xED00006174616461LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v9 = 0x80000001001CEDA0LL;
    if (a2 == 0x80000001001CEDA0LL) {
      goto LABEL_24;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CEDA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0x656D614E65736163LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v10 = 0xE800000000000000LL;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E65736163LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_30;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v11 = 0x80000001001CEDC0LL;
    if (a2 == 0x80000001001CEDC0LL) {
      goto LABEL_35;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CEDC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v12 = 0x80000001001CEDE0LL;
    if (a2 == 0x80000001001CEDE0LL) {
      goto LABEL_40;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CEDE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if (a1 == 0x6572617764726168LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v13 = 0xEF6E6F6973726556LL;
LABEL_46:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572617764726168LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_46;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v14 = 0x80000001001CEE00LL;
    if (a2 == 0x80000001001CEE00LL) {
      goto LABEL_51;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CEE00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x80000001001CEE20LL)
  {
    unint64_t v15 = 0x80000001001CEE20LL;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001001CEE20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_57;
  }

  if (a1 == 0x7465737341636E61LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v16 = 0xEF6E6F6973726556LL;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465737341636E61LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_63;
  }

  if (a1 == 0x6552746E65726170LL && a2 == 0xEC00000064726F63LL)
  {
    unint64_t v17 = 0xEC00000064726F63LL;
LABEL_69:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552746E65726170LL, 0xEC00000064726F63LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_69;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 12LL;
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0) {
      return 12LL;
    }
    else {
      return 13LL;
    }
  }

uint64_t sub_1000EE6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001001CF0A0LL, 1LL);
  switch(a2)
  {
    case 3LL:
      uint64_t v8 = 0x646572616853LL;
      goto LABEL_6;
    case 2LL:
      uint64_t v9 = 0x2E65746176697250LL;
      goto LABEL_11;
    case 1LL:
      uint64_t v8 = 0x63696C627550LL;
LABEL_6:
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFLL | 0x742E000000000000LL;
      goto LABEL_11;
  }

  uint64_t v10 = static os_log_type_t.error.getter(v7);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_10023DFB8,  "Unknown CKDatabase.Scope!",  25LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v9 = 0x2E6E776F6E6B6E55LL;
LABEL_11:
  URL.appendingPathComponent(_:)(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000EE83C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
  if (a2 == 3)
  {
    uint64_t v6 = 0x646572616853LL;
    unint64_t v7 = 0xE600000000000000LL;
    goto LABEL_11;
  }

  if (a2 == 2)
  {
    uint64_t v6 = 0x65746176697250LL;
LABEL_10:
    unint64_t v7 = 0xE700000000000000LL;
    goto LABEL_11;
  }

  if (a2 != 1)
  {
    uint64_t v8 = static os_log_type_t.error.getter(v5);
    if (qword_100234C18 != -1)
    {
      uint64_t v21 = v8;
      swift_once(&qword_100234C18, sub_10018A920);
      uint64_t v8 = v21;
    }

    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_10023DFB8,  "Unknown CKDatabase.Scope!",  25LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v6 = 0x6E776F6E6B6E55LL;
    goto LABEL_10;
  }

  uint64_t v6 = 0x63696C627550LL;
  unint64_t v7 = 0xE600000000000000LL;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v6);
  id v9 = [a3 ownerName];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  URL.appendPathComponent(_:)(v13);
  swift_bridgeObjectRelease(v12);
  id v14 = [a3 zoneName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  unint64_t v17 = v16;

  v18._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
  v18._object = (void *)0xE600000000000000LL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = v15;
  v19._object = v17;
  URL.appendPathComponent(_:)(v19);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_1000EEA18(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter(v3);
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  LODWORD(v5) = [v2 fileExistsAtPath:v6];

  uint64_t result = 0LL;
  if ((_DWORD)v5)
  {
    uint64_t v8 = Data.init(contentsOf:options:)(a1, 0LL);
    unint64_t v10 = v9;
    sub_1000A4A64(0LL, (unint64_t *)&unk_100236670, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v11 = sub_100098CD8(&qword_100235F50);
    uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_1001A5EA0;
    uint64_t v13 = sub_1000A4A64(0LL, &qword_100236680, &OBJC_CLASS___CKServerChangeToken_ptr);
    *(void *)(v12 + 32) = v13;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v15, v12, v8, v10);
    sub_100099394(v8, v10);
    swift_bridgeObjectRelease(v12);
    if (v15[3])
    {
      else {
        return 0LL;
      }
    }

    else
    {
      sub_1000AD3A8((uint64_t)v15);
      return 0LL;
    }
  }

  return result;
}

id sub_1000EEC84()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v1);
  __n128 v3 = v2;
  id v8 = 0LL;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v8];

  id v5 = v8;
  if (v4) {
    return v8;
  }
  id v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

uint64_t sub_1000EED68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  __chkstk_darwin(v4);
  uint64_t v32 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - v11;
  id v13 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v14);
  unint64_t v16 = v15;
  unint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  id v36 = 0LL;
  LODWORD(v12) = [v13 createDirectoryAtURL:v16 withIntermediateDirectories:1 attributes:0 error:&v36];

  id v18 = v36;
  if (!(_DWORD)v12)
  {
    uint64_t v29 = v18;
    _convertNSErrorToError(_:)(v18);

    return swift_willThrow(v30);
  }

  Swift::String v19 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  id v36 = 0LL;
  id v20 = [v19 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v36];
  id v21 = v36;
  if (!v20)
  {
    uint64_t v31 = v21;
    _convertNSErrorToError(_:)(v21);

    return swift_willThrow(v30);
  }

  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  unint64_t v24 = v23;

  uint64_t v25 = v35;
  uint64_t v26 = Data.write(to:options:)(a2, 1073741825LL, v22, v24);
  if (!v25)
  {
    uint64_t v27 = v32;
    URLResourceValues.init()(v26);
    URLResourceValues.isExcludedFromBackup.setter(1LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    URL.setResourceValues(_:)(v27);
    v17(v9, v6);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v34);
  }

  return sub_100099394(v22, v24);
}

void sub_1000EF00C()
{
  uint64_t v4 = type metadata accessor for CharacterSet(0LL);
  v3[2] = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v3[1] = (char *)v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = *(void *)(v0 + *(int *)(type metadata accessor for LegacyMagicPairingSettingsRecords(0LL) + 20) + 8);
  uint64_t v5 = _swiftEmptyArrayStorage;
  __asm { BR              X9 }

void sub_1000EF0B4()
{
  if (BYTE6(v2) >= 0x9AuLL)
  {
    *(void *)(v3 - 432) = v0;
    *(void *)(v3 - 112) = Data.subdata(in:)(0LL, 2LL, v1, v2);
    *(void *)(v3 - 104) = v4;
    sub_1000F19C4();
    __asm { BR              X10 }
  }

void sub_1000F035C()
{
}

uint64_t type metadata accessor for LegacyMagicPairingSettingsRecords(uint64_t a1)
{
  uint64_t result = qword_100235FB8;
  if (!qword_100235FB8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyMagicPairingSettingsRecords);
  }
  return result;
}

uint64_t sub_1000F0478()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v7, qword_10023DF18);
  sub_100098D58(v3, (uint64_t)qword_10023DF18);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001001CB3E0LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return result;
}

uint64_t sub_1000F05C4()
{
  uint64_t v143 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  __chkstk_darwin(v143);
  uint64_t v2 = (char *)&v132 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v144 = (char *)&v132 - v4;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v140 = *(void *)(v5 - 8);
  uint64_t v141 = v5;
  __chkstk_darwin(v5);
  id v133 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v137 = (char *)&v132 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v132 - v13;
  __chkstk_darwin(v15);
  uint64_t v139 = (uint64_t)&v132 - v16;
  id v142 = (id)sub_1000A4DA0();
  uint64_t v145 = v0;
  sub_1000EF00C();
  uint64_t v18 = v17;
  v148._uint64_t countAndFlagsBits = 0LL;
  v148._object = (void *)0xE000000000000000LL;
  unint64_t v19 = (unint64_t)v17 >> 62;
  BOOL v138 = v2;
  uint64_t v135 = v14;
  uint64_t v136 = v9;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0) {
      uint64_t v32 = v17;
    }
    else {
      uint64_t v32 = v17 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v17);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v32);
    uint64_t v20 = result;
    if (!result) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v20 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v17);
    if (!v20) {
      goto LABEL_13;
    }
  }

  if (v20 < 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v22 = 0LL;
  do
  {
    if ((v18 & 0xC000000000000001LL) != 0) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v18);
    }
    else {
      id v23 = *(id *)(v18 + 8 * v22 + 32);
    }
    unint64_t v24 = v23;
    ++v22;
    id v25 = [v23 description];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    v29._uint64_t countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v28);
    v30._uint64_t countAndFlagsBits = 0x2D2D2D2D2D2D0ALL;
    v30._object = (void *)0xE700000000000000LL;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 10LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
  }

  while (v20 != v22);
LABEL_13:
  swift_bridgeObjectRelease(v18);
  if (v19)
  {
    if (v18 < 0) {
      uint64_t v34 = v18;
    }
    else {
      uint64_t v34 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v18);
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t v33 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v35 = v140;
  uint64_t v36 = (uint64_t)v135;
  swift_bridgeObjectRelease(v18);
  if (v33 >= 2)
  {
    sub_1000F0F28();
    swift_bridgeObjectRelease(v37);
  }

  uint64_t v146 = 0LL;
  unint64_t v147 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(52LL);
  v38._object = (void *)0x80000001001CF120LL;
  v38._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v38);
  uint64_t v39 = type metadata accessor for UUID(0LL);
  uint64_t v40 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v41 = v145;
  v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
  object = v42._object;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(object);
  v44._uint64_t countAndFlagsBits = 0x616261746164202CLL;
  v44._object = (void *)0xEC000000203A6573LL;
  String.append(_:)(v44);
  uint64_t v45 = Data.subdata(in:)(0LL, 4LL, *(void *)(v41 + *(int *)(v143 + 20)), *(void *)(v41 + *(int *)(v143 + 20) + 8));
  unint64_t v47 = v46;
  Data.hexString.getter(v45, v46);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  sub_100099394(v45, v47);
  v52._uint64_t countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v51);
  uint64_t v53 = v146;
  unint64_t v134 = v147;
  uint64_t v146 = 0LL;
  unint64_t v147 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(60LL);
  v54._uint64_t countAndFlagsBits = 0x7461657263202020LL;
  v54._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v54);
  id v55 = v142;
  id v56 = [v142 creationDate];
  if (v56)
  {
    uint64_t v57 = v56;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v56);

    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
    uint64_t v59 = v36;
    uint64_t v60 = 0LL;
  }

  else
  {
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
    uint64_t v59 = v36;
    uint64_t v60 = 1LL;
  }

  uint64_t v61 = v141;
  v58(v59, v60, 1LL, v141);
  uint64_t v62 = (uint64_t)v144;
  uint64_t v63 = v139;
  sub_100099290(v36, v139);
  uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  uint64_t v65 = &selRef_isAnySmartRoutingDeviceConnected_;
  if (v64(v63, 1LL, v61))
  {
    sub_1000AC480(v63);
    sub_1000F253C(v145, v62);
LABEL_26:
    uint64_t v66 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v68 = objc_msgSend(v66, v65[358], isa, 2, 2);

    uint64_t v69 = (uint64_t)v144;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    uint64_t v72 = v71;

    goto LABEL_28;
  }

  uint64_t v73 = v53;
  uint64_t v74 = v133;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v133, v63, v61);
  sub_1000AC480(v63);
  uint64_t v75 = v61;
  uint64_t v76 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class v77 = Date._bridgeToObjectiveC()().super.isa;
  id v78 = [v76 localizedStringFromDate:v77 dateStyle:2 timeStyle:2];

  uint64_t v69 = (uint64_t)v144;
  uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
  uint64_t v72 = v79;

  uint64_t v65 = &selRef_isAnySmartRoutingDeviceConnected_;
  uint64_t v80 = v74;
  uint64_t v53 = v73;
  id v55 = v142;
  uint64_t v81 = v75;
  uint64_t v35 = v140;
  (*(void (**)(char *, uint64_t))(v140 + 8))(v80, v81);
  sub_1000F253C(v145, v69);
  if (!v72) {
    goto LABEL_26;
  }
LABEL_28:
  sub_1000F2580(v69);
  v82._uint64_t countAndFlagsBits = v70;
  v82._object = v72;
  String.append(_:)(v82);
  swift_bridgeObjectRelease(v72);
  v83._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v83._object = (void *)0xEE00203A6E4F6465LL;
  String.append(_:)(v83);
  id v84 = [v55 modificationDate];
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v86 = (uint64_t)v136;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

    uint64_t v87 = 0LL;
  }

  else
  {
    uint64_t v87 = 1LL;
    uint64_t v86 = (uint64_t)v136;
  }

  uint64_t v88 = (uint64_t)v137;
  uint64_t v89 = &selRef_isAnySmartRoutingDeviceConnected_;
  uint64_t v90 = v141;
  v58(v86, v87, 1LL, v141);
  sub_100099290(v86, v88);
  if (v64(v88, 1LL, v90))
  {
    sub_1000AC480(v88);
    uint64_t v91 = (uint64_t)v138;
    sub_1000F253C(v145, (uint64_t)v138);
  }

  else
  {
    uint64_t v98 = v53;
    id v99 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v133, v88, v90);
    sub_1000AC480(v88);
    uint64_t v100 = v90;
    unint64_t v101 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v102 = Date._bridgeToObjectiveC()().super.isa;
    id v103 = [v101 localizedStringFromDate:v102 dateStyle:2 timeStyle:2];

    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
    uint64_t v97 = v104;

    uint64_t v89 = &selRef_isAnySmartRoutingDeviceConnected_;
    char v105 = v99;
    uint64_t v53 = v98;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v105, v100);
    uint64_t v91 = (uint64_t)v138;
    sub_1000F253C(v145, (uint64_t)v138);
    if (v97) {
      goto LABEL_35;
    }
  }

  uint64_t v92 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class v93 = Date._bridgeToObjectiveC()().super.isa;
  id v94 = objc_msgSend(v92, v89[358], v93, 2, 2);

  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  uint64_t v97 = v96;

LABEL_35:
  sub_1000F2580(v91);
  v106._uint64_t countAndFlagsBits = v95;
  v106._object = v97;
  String.append(_:)(v106);
  swift_bridgeObjectRelease(v97);
  v107._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v107._object = (void *)0xEF203A7962206465LL;
  String.append(_:)(v107);
  id v108 = [v55 modifiedByDevice];
  if (v108)
  {
    uint64_t v109 = v108;
    uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    uint64_t v112 = v111;
  }

  else
  {
    uint64_t v112 = (void *)0xE200000000000000LL;
    uint64_t v110 = 15932LL;
  }

  v113._uint64_t countAndFlagsBits = v110;
  v113._object = v112;
  String.append(_:)(v113);
  swift_bridgeObjectRelease(v112);
  v114._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v114._object = (void *)0xE800000000000000LL;
  String.append(_:)(v114);
  id v115 = [v55 recordChangeTag];
  if (v115)
  {
    uint64_t v116 = v115;
    uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    char v119 = v118;
  }

  else
  {
    char v119 = (void *)0xE200000000000000LL;
    uint64_t v117 = 15932LL;
  }

  v120._uint64_t countAndFlagsBits = v117;
  v120._object = v119;
  String.append(_:)(v120);
  swift_bridgeObjectRelease(v119);
  v121._uint64_t countAndFlagsBits = 10LL;
  v121._object = (void *)0xE100000000000000LL;
  String.append(_:)(v121);
  uint64_t v122 = v146;
  uint64_t v123 = (void *)v147;
  unint64_t v124 = v134;
  uint64_t v146 = v53;
  unint64_t v147 = v134;
  swift_bridgeObjectRetain(v134);
  v125._uint64_t countAndFlagsBits = v122;
  v125._object = v123;
  String.append(_:)(v125);
  swift_bridgeObjectRelease(v124);
  swift_bridgeObjectRelease(v123);
  uint64_t v127 = v146;
  unint64_t v126 = v147;
  uint64_t v146 = 10LL;
  unint64_t v147 = 0xE100000000000000LL;
  uint64_t v128 = v148._object;
  String.append(_:)(v148);
  swift_bridgeObjectRelease(v128);
  uint64_t v129 = v146;
  uint64_t v130 = (void *)v147;
  uint64_t v146 = v127;
  unint64_t v147 = v126;
  swift_bridgeObjectRetain(v126);
  v131._uint64_t countAndFlagsBits = v129;
  v131._object = v130;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v130);

  return v146;
}

void sub_1000F0F28()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if ((v2 & 0x2000000000000000LL) == 0)
  {
    uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }

  uint64_t v3 = HIBYTE(v2) & 0xF;
  if (!v3)
  {
    __break(1u);
    return;
  }

uint64_t sub_1000F0F7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v89 = (char *)&v80 - v7;
  __chkstk_darwin(v8);
  uint64_t v92 = (char *)&v80 - v9;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v95 = *(void **)(v10 - 8);
  uint64_t v96 = v10;
  __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v80 - v13;
  uint64_t v14 = sub_100098CD8(&qword_100236018);
  uint64_t v93 = *(void *)(v14 - 8);
  uint64_t v94 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (int *)type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  __chkstk_darwin(v20);
  uint64_t v86 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v87 = (uint64_t)&v80 - v23;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v80 - v25;
  UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001001CF1A0LL);
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1LL, v27);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v19, v27);
    Swift::String v30 = a1;
    uint64_t v32 = a1[3];
    uint64_t v31 = a1[4];
    uint64_t v97 = v30;
    sub_10009A430(v30, v32);
    unint64_t v33 = sub_1000F2890();
    dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys,  &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys,  v33,  v32,  v31);
    if (v2)
    {
      sub_10009A498(v97);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    }

    char v99 = 2;
    unint64_t v34 = sub_10009A4B8();
    uint64_t v35 = v94;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v98, &type metadata for Data, &v99, v94, &type metadata for Data, v34);
    id v36 = v98[1];
    uint64_t v37 = &v26[v20[6]];
    id v83 = v98[1];
    id v84 = v98[0];
    *(id *)uint64_t v37 = v98[0];
    *((void *)v37 + 1) = v36;
    char v99 = 1;
    Swift::String v38 = KeyedDecodingContainer.decode<A>(_:forKey:)( v98,  &type metadata for Data,  &v99,  v35,  &type metadata for Data,  v34);
    *(_OWORD *)&v26[v20[5]] = *(_OWORD *)v98;
    uint64_t v39 = &v26[v20[7]];
    uint64_t v81 = (uint64_t *)v37;
    Swift::String v82 = v39;
    static Date.now.getter(v38);
    LOBYTE(v98[0]) = 3;
    uint64_t v40 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v41 = v16;
    uint64_t v42 = v96;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v96, v98, v35, v96, v40);
    uint64_t v80 = v41;
    uint64_t v43 = v95;
    Swift::String v44 = (unsigned int (*)(char *, uint64_t, uint64_t))v95[6];
    uint64_t v45 = v92;
    if (v44(v92, 1LL, v42) != 1)
    {
      uint64_t v58 = v42;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
      uint64_t v62 = v90;
      ((void (*)(char *, char *, uint64_t))v43[4])(v90, v45, v42);
      uint64_t v63 = v97;
      uint64_t v64 = v91;
      uint64_t v66 = v82;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v43[5])(v66, v62, v58);
      sub_1000F253C((uint64_t)v26, v64);
      sub_10009A498(v63);
      return sub_1000F2580((uint64_t)v26);
    }

    uint64_t v46 = objc_autoreleasePoolPush();
    unint64_t v48 = (unint64_t)v83;
    uint64_t v47 = (uint64_t)v84;
    sub_1000991CC((uint64_t)v84, (unint64_t)v83);
    sub_100118B60(v47, v48);
    Class isa = v49;
    sub_100099394(v47, v48);
    uint64_t v51 = v87;
    sub_1000F253C((uint64_t)v26, v87);
    if (!isa) {
      Class isa = sub_1000A31B0(v51).super.isa;
    }
    sub_1000F2580(v51);
    v98[0] = isa;
    sub_1000F1770(v98);
    objc_autoreleasePoolPop(v46);
    id v52 = -[objc_class modificationDate](isa, "modificationDate");

    if (v52)
    {
      uint64_t v53 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

      Swift::String v54 = v95;
      id v55 = (void (*)(uint64_t, char *, uint64_t))v95[4];
      uint64_t v56 = (uint64_t)v89;
      uint64_t v57 = v53;
      uint64_t v58 = v96;
      v55((uint64_t)v89, v57, v96);
      uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v54[7];
      v59(v56, 0LL, 1LL, v58);
      unsigned int v60 = v44((char *)v56, 1LL, v58);
      uint64_t v61 = v81;
      if (v60 != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        uint64_t v62 = v90;
        v55((uint64_t)v90, v89, v58);
        uint64_t v63 = v97;
        uint64_t v43 = v95;
        uint64_t v64 = v91;
        uint64_t v65 = (uint64_t)v92;
LABEL_21:
        uint64_t v66 = v82;
        sub_1000AC480(v65);
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v95[7];
      v59((uint64_t)v89, 1LL, 1LL, v96);
      uint64_t v61 = v81;
    }

    uint64_t v67 = objc_autoreleasePoolPush();
    uint64_t v69 = *v61;
    unint64_t v68 = v61[1];
    sub_1000991CC(*v61, v68);
    sub_100118B60(v69, v68);
    Class v71 = v70;
    sub_100099394(v69, v68);
    uint64_t v72 = v86;
    sub_1000F253C((uint64_t)v26, v86);
    if (!v71) {
      Class v71 = sub_1000A31B0(v72).super.isa;
    }
    sub_1000F2580(v72);
    v98[0] = v71;
    sub_1000F1770(v98);
    objc_autoreleasePoolPop(v67);
    id v73 = -[objc_class creationDate](v71, "creationDate");

    uint64_t v65 = (uint64_t)v92;
    if (v73)
    {
      uint64_t v74 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v73);

      uint64_t v43 = v95;
      uint64_t v75 = (void (*)(char *, char *, uint64_t))v95[4];
      uint64_t v76 = v85;
      Class v77 = v74;
      uint64_t v58 = v96;
      v75(v85, v77, v96);
      v59((uint64_t)v76, 0LL, 1LL, v58);
      uint64_t v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v76, 1LL, v58);
      uint64_t v79 = (uint64_t)v76;
      uint64_t v64 = v91;
      if ((_DWORD)v78 != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        uint64_t v62 = v90;
        v75(v90, (char *)v79, v58);
LABEL_20:
        uint64_t v63 = v97;
        sub_1000AC480((uint64_t)v89);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v79 = (uint64_t)v85;
      uint64_t v58 = v96;
      uint64_t v78 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v59)(v85, 1LL, 1LL, v96);
      uint64_t v43 = v95;
      uint64_t v64 = v91;
    }

    uint64_t v62 = v90;
    static Date.now.getter(v78);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
    sub_1000AC480(v79);
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F1770(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v5 = qword_10023DFC8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
  id v8 = *a1;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10009914C();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating LEGACY magic settings record: %@", 41LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  id v13 = [v8 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter( &v23,  0xD000000000000016LL,  0x80000001001CF180LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v15 = v23;
  unint64_t v16 = v24;
  uint64_t v17 = (uint64_t *)(v2 + *(int *)(type metadata accessor for LegacyMagicPairingSettingsRecords(0LL) + 20));
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000991CC(*v17, v19);
  if (v16 >> 60 == 15)
  {
    sub_1000AC4C0(v15, v16);
    sub_1000AC4C0(v18, v19);
LABEL_6:
    uint64_t v25 = &type metadata for Data;
    uint64_t v26 = &protocol witness table for Data;
    uint64_t v23 = v18;
    unint64_t v24 = v19;
    sub_1000991CC(v18, v19);
    CKRecordKeyValueSetting.subscript.setter(&v23, 0xD000000000000016LL, 0x80000001001CF180LL, ObjectType);
    return swift_unknownObjectRelease(v13);
  }

  sub_1000AC4D4(v15, v16);
  sub_1000D53B8(v15, v16);
  char v21 = v20;
  sub_100099394(v18, v19);
  sub_1000AC4C0(v15, v16);
  sub_1000AC4C0(v15, v16);
  if ((v21 & 1) == 0) {
    goto LABEL_6;
  }
  return swift_unknownObjectRelease(v13);
}

void sub_1000F19C4()
{
  __asm { BR              X12 }

void sub_1000F1CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1000F1E44LL);
}

uint64_t sub_1000F1E78(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100098CD8(&qword_100236028);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10009A430(a1, v9);
  unint64_t v11 = sub_1000F2890();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys,  &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v22) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
    __int128 v22 = *(_OWORD *)(v3 + v14[5]);
    char v21 = 1;
    unint64_t v15 = sub_10009A4FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    __int128 v22 = *(_OWORD *)(v3 + v14[6]);
    char v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    uint64_t v16 = v3 + v14[7];
    LOBYTE(v22) = 3;
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v22, v5, v17, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000F2088()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F20BC + 4 * byte_1001A8BF0[*v0]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

unint64_t sub_1000F20BC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000F20DC()
{
  return 0x74654D64756F6C63LL;
}

unint64_t sub_1000F2100()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000F211C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000F2A78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F2140(uint64_t a1)
{
  unint64_t v2 = sub_1000F2890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2168(uint64_t a1)
{
  unint64_t v2 = sub_1000F2890();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000F2190()
{
  return 0xD000000000000011LL;
}

unint64_t sub_1000F21AC()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000F21D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F0F7C(a1, a2);
}

uint64_t sub_1000F21E4(void *a1)
{
  return sub_1000F1E78(a1);
}

void sub_1000F21F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_1000F2274()
{
  if (BYTE6(v0))
  {
    uint64_t v6 = sub_100098CD8(&qword_100236FA0);
    uint64_t v4 = (void *)swift_allocObject(v6, BYTE6(v0) + 32LL, 7LL);
    size_t v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    void v4[3] = 2 * v7 - 64;
    sub_1000991CC(v2, v0);
    uint64_t v8 = ((uint64_t (*)(uint64_t, void *, void, uint64_t, unint64_t))Data._copyContents(initializing:))( v3,  v4 + 4,  BYTE6(v0),  v2,  v0);
    sub_100099394(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000F2348LL);
    }
  }

  return v4;
}

uint64_t sub_1000F2360(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1000F23C0LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_1000F2378 + dword_1000F23C4[a4 >> 62]))(v5);
}

uint64_t sub_1000F23D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1000F23E4 + dword_1000F248C[a4 >> 62]))();
}

uint64_t sub_1000F23F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1000F2484LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1000F2434 + dword_1000F249C[a3]))();
}

uint64_t sub_1000F24AC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  uint64_t v2 = result;
  int v3 = *(unsigned __int8 *)(result + 32);
  result += 32LL;
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    uint64_t v6 = v2 + 33;
    while (v5 != v4)
    {
    }

    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = 0LL;
  return static String._fromUTF8Repairing(_:)(result, v4);
}

unint64_t sub_1000F24F4()
{
  unint64_t result = qword_100235F58;
  if (!qword_100235F58)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100235F58);
  }

  return result;
}

uint64_t sub_1000F253C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F2580(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000F25BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F25C8);
}

uint64_t sub_1000F25C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 12)
  {
    uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v10);
  }

uint64_t sub_1000F2680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F268C);
}

uint64_t sub_1000F268C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 12)
    {
      uint64_t v13 = (void *)(a1 + *(int *)(a4 + 20));
      *uint64_t v13 = 0LL;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000F273C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1001A8C38;
    v5[2] = &unk_1001A8C38;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000F27CC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100098C98( &qword_100235FF8,  type metadata accessor for LegacyMagicPairingSettingsRecords,  (uint64_t)&unk_1001A8D68);
  uint64_t result = sub_100098C98( &qword_100236000,  type metadata accessor for LegacyMagicPairingSettingsRecords,  (uint64_t)&unk_1001A8C50);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000F2828()
{
  return sub_100098C98( &qword_100236008,  type metadata accessor for LegacyMagicPairingSettingsRecords,  (uint64_t)&unk_1001A8C78);
}

uint64_t sub_1000F2854(uint64_t a1)
{
  uint64_t result = sub_100098C98( &qword_100236010,  type metadata accessor for LegacyMagicPairingSettingsRecords,  (uint64_t)&unk_1001A8CA0);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F2890()
{
  unint64_t result = qword_100236020;
  if (!qword_100236020)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8E54, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236020);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LegacyMagicPairingSettingsRecords.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000F2920 + 4 * byte_1001A8BF9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000F2954 + 4 * byte_1001A8BF4[v4]))();
}

uint64_t sub_1000F2954(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F295C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F2964LL);
  }
  return result;
}

uint64_t sub_1000F2970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F2978LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000F297C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F2984(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyMagicPairingSettingsRecords.CodingKeys()
{
  return &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys;
}

unint64_t sub_1000F29A4()
{
  unint64_t result = qword_100236030;
  if (!qword_100236030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8E2C, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236030);
  }

  return result;
}

unint64_t sub_1000F29EC()
{
  unint64_t result = qword_100236038;
  if (!qword_100236038)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8D9C, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236038);
  }

  return result;
}

unint64_t sub_1000F2A34()
{
  unint64_t result = qword_100236040;
  if (!qword_100236040)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A8DC4, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236040);
  }

  return result;
}

uint64_t sub_1000F2A78(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v7 = 0x80000001001CF1D0LL;
    if (a2 == 0x80000001001CF1D0LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001CF1D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v8 = 0xED00006174616461LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000F2C54(uint64_t a1)
{
  __int16 v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000F2C80(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000F2CA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000F2CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = (char *)&v29 + 8;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  uint64_t v35 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_24;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v11 >= v23) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v22 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v23) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v22 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v23) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v22 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v23) {
            goto LABEL_27;
          }
          unint64_t v12 = *(void *)(v22 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

void *sub_1000F2FB0(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(a3);
    int64_t v8 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v10 = *v8;
      v16[0] = *(v8 - 1);
      v16[1] = v10;
      swift_bridgeObjectRetain(v10);
      a1(&v15, v16);
      if (v3)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(v10);
        return (void *)swift_bridgeObjectRelease(v17);
      }

      uint64_t v11 = swift_bridgeObjectRelease(v10);
      uint64_t v12 = v15;
      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        unint64_t v14 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v13 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v9);
      }

      v8 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(a3);
    return (void *)v17;
  }

  return result;
}

void sub_1000F30E8(uint64_t a1)
{
  uint64_t v21 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  unint64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_17;
    }

    if (__OFADD__(v6++, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v6 >= v27) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    if (!v11) {
      break;
    }
LABEL_16:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_17:
    uint64_t v13 = *(void *)(a1 + 56);
    id v25 = *(id *)(*(void *)(a1 + 48) + 8 * v9);
    __int128 v26 = *(_OWORD *)(v13 + 16 * v9);
    uint64_t v22 = *((void *)&v26 + 1);
    id v14 = v25;
    swift_retain(v22);
    sub_10010838C((uint64_t)&v25, &v23);
    if (v1)
    {
      swift_bridgeObjectRelease(v7);
      swift_release(a1);
      swift_release(v22);

      return;
    }

    swift_release(v22);

    uint64_t v15 = v24;
    if (v24)
    {
      uint64_t v16 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        unint64_t v7 = sub_10018B814(0LL, v7[2] + 1LL, 1, v7);
      }
      unint64_t v18 = v7[2];
      unint64_t v17 = v7[3];
      if (v18 >= v17 >> 1) {
        unint64_t v7 = sub_10018B814((void *)(v17 > 1), v18 + 1, 1, v7);
      }
      v7[2] = v18 + 1;
      __int128 v19 = &v7[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
    }
  }

  int64_t v12 = v6 + 1;
  if (v6 + 1 >= v27) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v6 + 2;
  if (v6 + 2 >= v27) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v6 + 3;
  if (v6 + 3 >= v27) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11)
  {
LABEL_15:
    int64_t v6 = v12;
    goto LABEL_16;
  }

  int64_t v20 = v6 + 4;
  if (v6 + 4 >= v27)
  {
LABEL_31:
    swift_release(a1);
    return;
  }

  unint64_t v11 = *(void *)(v21 + 8 * v20);
  v6 += 4LL;
  if (v11) {
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v6 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v6 >= v27) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    ++v20;
    if (v11) {
      goto LABEL_16;
    }
  }

uint64_t sub_1000F336C(uint64_t a1)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v14 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v13);
    id v15 = [v14 recordName];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;
    swift_release(v13);

    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10018B814(0LL, v7[2] + 1LL, 1, v7);
      unint64_t v7 = (void *)result;
    }

    unint64_t v20 = v7[2];
    unint64_t v19 = v7[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t result = (uint64_t)sub_10018B814((void *)(v19 > 1), v20 + 1, 1, v7);
      unint64_t v7 = (void *)result;
    }

    v7[2] = v20 + 1;
    uint64_t v21 = &v7[2 * v20];
    v21[4] = v16;
    v21[5] = v18;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v10 >= v23) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v22 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v23) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v22 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v23) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v22 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 3;
          if (v10 + 3 >= v23) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v22 + 8 * v6);
          if (!v11) {
            break;
          }
        }
      }
    }

unint64_t sub_1000F35C8(unint64_t a1)
{
  switch(a1)
  {
    case 0uLL:
      uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t inited = swift_initStackObject(v2, v32);
      *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(inited + 40) = v4;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v5 = 0x206E776F6E6B6E55LL;
      unint64_t v6 = 0xED0000726F727245LL;
      goto LABEL_10;
    case 1uLL:
      uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t inited = swift_initStackObject(v20, v33);
      *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(inited + 40) = v21;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v5 = 0xD000000000000014LL;
      uint64_t v22 = "No Account Available";
      goto LABEL_9;
    case 2uLL:
      uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t inited = swift_initStackObject(v23, v34);
      *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(inited + 40) = v24;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v5 = 0xD000000000000015LL;
      uint64_t v22 = "Manatee not available";
      goto LABEL_9;
    case 3uLL:
      uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t inited = swift_initStackObject(v25, v36);
      *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(inited + 40) = v26;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v5 = 0xD000000000000016LL;
      uint64_t v22 = "Retry Attempts Expired";
      goto LABEL_9;
    case 4uLL:
      uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t inited = swift_initStackObject(v27, v35);
      *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(inited + 40) = v28;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v5 = 0xD000000000000018LL;
      uint64_t v22 = "No CloudKit Zone Defined";
      goto LABEL_9;
    case 5uLL:
      uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t inited = swift_initStackObject(v29, v37);
      *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(inited + 40) = v30;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v5 = 0xD000000000000013LL;
      uint64_t v22 = "Operation cancelled";
LABEL_9:
      unint64_t v6 = (unint64_t)(v22 - 32) | 0x8000000000000000LL;
LABEL_10:
      *(void *)(inited + 48) = v5;
      *(void *)(inited + 56) = v6;
      unint64_t v19 = sub_10009ED94(inited);
      break;
    default:
      uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100236770);
      uint64_t v8 = swift_initStackObject(v7, v44);
      *(_OWORD *)(v8 + 16) = xmmword_1001A6F30;
      *(void *)(v8 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(void *)(v8 + 40) = v9;
      swift_errorRetain(a1);
      _StringGuts.grow(_:)(27LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      unint64_t v42 = 0xD000000000000019LL;
      unint64_t v43 = 0x80000001001D20D0LL;
      unint64_t v41 = a1;
      swift_errorRetain(a1);
      uint64_t v10 = sub_100098CD8(&qword_1002357C0);
      v11._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v41, v10);
      object = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(object);
      unint64_t v13 = v42;
      unint64_t v14 = v43;
      *(void *)(v8 + 72) = &type metadata for String;
      *(void *)(v8 + 48) = v13;
      *(void *)(v8 + 56) = v14;
      *(void *)(v8 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      *(void *)(v8 + 88) = v15;
      swift_getErrorValue(a1, v40, &v38);
      uint64_t v16 = v38;
      uint64_t v17 = v39;
      *(void *)(v8 + 120) = v39;
      uint64_t v18 = sub_1000E7194((void *)(v8 + 96));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v18, v16, v17);
      unint64_t v19 = sub_10009ED94(v8);
      sub_100113AB4(a1);
      break;
  }

  return v19;
}

unint64_t sub_1000F398C()
{
  return sub_1000F35C8(*v0);
}

uint64_t sub_1000F3994(uint64_t a1)
{
  unint64_t v2 = sub_100113A70();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000F39BC(uint64_t a1)
{
  unint64_t v2 = sub_100113A70();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000F39F0()
{
  uint64_t v1 = (int *)type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26[0] = 0LL;
  v26[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(76LL);
  v4._uint64_t countAndFlagsBits = 0xD000000000000020LL;
  v4._object = (void *)0x80000001001D2060LL;
  String.append(_:)(v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  unint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration + v1[6]);
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)v6[1];
  swift_bridgeObjectRetain(v8);
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v10._object = (void *)0x80000001001D2090LL;
  String.append(_:)(v10);
  Swift::String v25 = *(Swift::String *)(v5 + v1[5]);
  uint64_t v11 = sub_100098CD8(&qword_100236640);
  _print_unlocked<A, B>(_:_:)( &v25,  v26,  v11,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v12._object = (void *)0x80000001001D20B0LL;
  v12._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v12);
  sub_1000DCBFC(v5, (uint64_t)v3);
  v25._uint64_t countAndFlagsBits = 0LL;
  v25._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(67LL);
  v13._uint64_t countAndFlagsBits = 0xD000000000000034LL;
  v13._object = (void *)0x80000001001CE220LL;
  String.append(_:)(v13);
  unint64_t v14 = (uint64_t *)&v3[v1[6]];
  uint64_t v15 = *v14;
  uint64_t v16 = (void *)v14[1];
  swift_bridgeObjectRetain(v16);
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v18._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v18);
  uint64_t v19 = *(void *)&v3[v1[8]];
  uint64_t v20 = swift_bridgeObjectRetain(v19);
  v21._uint64_t countAndFlagsBits = Array.description.getter(v20, &type metadata for String);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(object);
  uint64_t v23 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v23);
  sub_1000DCC40((uint64_t)v3);
  return v26[0];
}

void *sub_1000F3CA8(__n128 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL, a1);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v13 = *(void **)(v1 + 16);
  unint64_t v14 = v13;
  if (v13 == (void *)1)
  {
    uint64_t v28 = sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v15 = v2 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    Swift::String v16 = *(Swift::String *)(v15 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 24));
    uint64_t v29 = (void *)0xD000000000000028LL;
    unint64_t v30 = 0x80000001001D2030LL;
    String.append(_:)(v16);
    unint64_t v26 = v30;
    uint64_t v27 = v29;
    static DispatchQoS.unspecified.getter(v17);
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v18 = sub_100098C98( (unint64_t *)&unk_100237030,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v25 = v3;
    uint64_t v19 = v18;
    uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100235870);
    uint64_t v21 = sub_1000A4318( (unint64_t *)&qword_100237040,  (uint64_t *)&unk_100235870,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v20, v21, v7, v19);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v25);
    unint64_t v14 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v27, v26, v12, v9, v6, 0LL);
    uint64_t v22 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v14;
    id v23 = v14;
    sub_1001136A8(v22);
  }

  sub_1001136B8(v13);
  return v14;
}

uint64_t sub_1000F3F14@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 105);
  return result;
}

uint64_t sub_1000F3F20@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 104);
  return result;
}

id sub_1000F3F2C()
{
  uint64_t v1 = OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container);
  }

  else
  {
    id v4 = sub_1000F3F8C(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + sub_1000D8A30(0x3030304130LL, 0xE500000000000000LL, v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_1000F3F8C(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v3 = qword_10023DFB8;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1001A5EA0;
  uint64_t v6 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v7 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  uint64_t v8 = (uint64_t *)(v6 + *(int *)(v7 + 24));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10009914C();
  *(void *)(v5 + 32) = v10;
  *(void *)(v5 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "CloudSync: Create CloudKit container named: %@", 46LL, 2LL, v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v11 = *(void *)(v6 + *(int *)(v7 + 20) + 8);
  if (v11)
  {
    id v12 = objc_allocWithZone(&OBJC_CLASS___CKContainerOptions);
    swift_bridgeObjectRetain(v11);
    id v13 = [v12 init];
    id v14 = objc_allocWithZone(&OBJC_CLASS___CKAccountOverrideInfo);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    id v16 = [v14 initWithAltDSID:v15];

    [v13 setAccountOverrideInfo:v16];
    uint64_t v17 = *(void *)(v6 + *(int *)(v7 + 24) + 8);
    id v18 = objc_allocWithZone(&OBJC_CLASS___CKContainerID);
    swift_bridgeObjectRetain(v17);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    NSString v20 = [v18 initWithContainerIdentifier:v19 environment:1];

    id v21 = [objc_allocWithZone(CKContainer) initWithContainerID:v20 options:v13];
  }

  else
  {
    uint64_t v22 = *(void *)(v6 + *(int *)(v7 + 24) + 8);
    swift_bridgeObjectRetain(v22);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    id v21 = [(id)objc_opt_self(CKContainer) containerWithIdentifier:v20];
  }

  return v21;
}

uint64_t sub_1000F4214()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId + 8];
  if (v2)
  {
    uint64_t v3 = *v1;
  }

  else
  {
    uint64_t v3 = sub_1000F428C(v0);
    uint64_t v4 = v1[1];
    *uint64_t v1 = v3;
    v1[1] = v5;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRelease(v4);
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000F428C(void *a1)
{
  os_log_type_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v3 = (os_log_s *)qword_10023DFB8;
  if (os_log_type_enabled((os_log_t)qword_10023DFB8, v2))
  {
    swift_retain_n(a1, 2LL);
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    id v6 = [a1 cloudContainerIdentifier];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v9 = v8;

    uint64_t v13 = sub_10010C034(v7, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v4 + 4, v4 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "CloudSync: Setting privateSubscriptionId value: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  id v10 = [a1 cloudContainerIdentifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return v11;
}

id sub_1000F4460()
{
  return sub_1000F4520(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup);
}

id sub_1000F448C()
{
  return sub_1000F4520(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___forcedGroup);
}

id sub_1000F44A8()
{
  return sub_1000F4520(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup);
}

id sub_1000F44D0()
{
  return sub_1000F4520(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup);
}

id sub_1000F44F4()
{
  return sub_1000F4520(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___deferredUpdatesGroup);
}

id sub_1000F4520(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }

  else
  {
    id v5 = [objc_allocWithZone(CKOperationGroup) init];
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setName:v6];

    uint64_t v7 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    id v4 = v5;

    uint64_t v3 = 0LL;
  }

  id v8 = v3;
  return v4;
}

uint64_t sub_1000F45C8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available);
  return result;
}

uint64_t sub_1000F45DC()
{
  if (qword_100234C00 != -1) {
    swift_once(&qword_100234C00, sub_100118D98);
  }
  uint64_t v1 = qword_10023DF98;
  uint64_t v2 = *(void **)(qword_10023DF98 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  uint64_t v3 = swift_allocObject(&unk_10020EB80, 24LL, 7LL);
  swift_unknownObjectWeakInit(v3 + 16, v1);
  uint64_t v4 = swift_allocObject(&unk_10020EC70, 32LL, 7LL);
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = swift_allocObject(&unk_10020EC98, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_100113704;
  *(void *)(v5 + 24) = v4;
  v10[4] = sub_100113AC8;
  uint64_t v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_1000F2CA0;
  v10[3] = &unk_10020ECB0;
  NSString v6 = _Block_copy(v10);
  uint64_t v7 = v11;
  id v8 = v2;
  swift_retain(v0);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v8, v6);

  _Block_release(v6);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v5, "", 123LL, 105LL, 31LL, 1LL);
  swift_release(v4);
  uint64_t result = swift_release(v5);
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1001136A8(*(id *)(v0 + 16));
    sub_1000C9F88(v0 + 24);

    swift_release(*(void *)(v0 + 48));
    swift_bridgeObjectRelease(*(void *)(v0 + 112));
    swift_bridgeObjectRelease(*(void *)(v0 + 120));
    swift_bridgeObjectRelease(*(void *)(v0 + 144));
    sub_1000DCC40(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration);

    swift_bridgeObjectRelease(*(void *)(v0
                                        + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId
                                        + 8));
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup));

    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup));
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup));

    swift_release(*(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener));
    return v0;
  }

  return result;
}

uint64_t sub_1000F4870()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000F4894()
{
  return type metadata accessor for CloudCoordinator(0LL);
}

uint64_t type metadata accessor for CloudCoordinator(uint64_t a1)
{
  uint64_t result = qword_1002360C0;
  if (!qword_1002360C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudCoordinator);
  }
  return result;
}

uint64_t sub_1000F48D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v7 = qword_10023DFB8;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001A5EA0;
  sub_1000DCBFC(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration, (uint64_t)v4);
  aBlock = 0LL;
  unint64_t v35 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(67LL);
  v10._object = (void *)0x80000001001CE220LL;
  v10._uint64_t countAndFlagsBits = 0xD000000000000034LL;
  String.append(_:)(v10);
  uint64_t v11 = (uint64_t *)&v4[*(int *)(v2 + 24)];
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)v11[1];
  swift_bridgeObjectRetain(v13);
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v15._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)&v4[*(int *)(v2 + 32)];
  swift_bridgeObjectRetain(v16);
  v17._uint64_t countAndFlagsBits = Array.description.getter(v16, &type metadata for String);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(object);
  NSString v19 = aBlock;
  unint64_t v20 = v35;
  sub_1000DCC40((uint64_t)v4);
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10009914C();
  *(void *)(v9 + 32) = v19;
  *(void *)(v9 + 40) = v20;
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v7,  "Start APS & Cloud Coordinator with identifier: %@",  49LL,  2LL,  v9);
  swift_bridgeObjectRelease(v9);
  if (qword_100234C00 != -1) {
    swift_once(&qword_100234C00, sub_100118D98);
  }
  uint64_t v21 = qword_10023DF98;
  uint64_t v22 = *(void **)(qword_10023DF98 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  uint64_t v23 = swift_allocObject(&unk_10020EB80, 24LL, 7LL);
  swift_unknownObjectWeakInit(v23 + 16, v21);
  uint64_t v24 = swift_allocObject(&unk_10020EBA8, 32LL, 7LL);
  *(void *)(v24 + 16) = v1;
  *(void *)(v24 + 24) = v23;
  uint64_t v25 = swift_allocObject(&unk_10020EBD0, 32LL, 7LL);
  *(void *)(v25 + 16) = sub_100113678;
  *(void *)(v25 + 24) = v24;
  uint64_t v38 = sub_100113AC8;
  uint64_t v39 = v25;
  aBlock = _NSConcreteStackBlock;
  unint64_t v35 = 1107296256LL;
  id v36 = sub_1000F2CA0;
  uint64_t v37 = &unk_10020EBE8;
  unint64_t v26 = _Block_copy(&aBlock);
  uint64_t v27 = v39;
  uint64_t v28 = v22;
  swift_retain(v1);
  swift_retain(v25);
  swift_release(v27);
  dispatch_sync(v28, v26);

  _Block_release(v26);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v25, "", 123LL, 94LL, 31LL, 1LL);
  swift_release(v24);
  uint64_t result = swift_release(v25);
  if ((v26 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  sub_1000FE934();
  unint64_t v30 = *(dispatch_queue_s **)(v1 + 72);
  uint64_t v31 = swift_allocObject(&unk_10020EC20, 32LL, 7LL);
  *(void *)(v31 + 16) = sub_100113690;
  *(void *)(v31 + 24) = v1;
  uint64_t v38 = sub_100113AC8;
  uint64_t v39 = v31;
  aBlock = _NSConcreteStackBlock;
  unint64_t v35 = 1107296256LL;
  id v36 = sub_1000F2CA0;
  uint64_t v37 = &unk_10020EC38;
  uint64_t v32 = _Block_copy(&aBlock);
  uint64_t v33 = v39;
  swift_retain(v1);
  swift_retain(v31);
  swift_release(v33);
  dispatch_sync(v30, v32);
  _Block_release(v32);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v31, "", 123LL, 194LL, 26LL, 1LL);
  swift_release(v1);
  uint64_t result = swift_release(v31);
  if ((v30 & 1) != 0) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000F4CFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_10023DFB8, "CloudSync: Initial fetch complete", 33LL, 2LL);
  aBlock[4] = sub_100113640;
  uint64_t v26 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020EB48;
  Swift::String v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v14 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  uint64_t v15 = swift_release(v26);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  uint64_t v17 = qword_10023DFB8;
  os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_10023DFB8,  "Signaling availableSemaphore",  28LL,  2LL,  _swiftEmptyArrayStorage);
  Swift::Int v18 = OS_dispatch_semaphore.signal()();
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  return os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v17,  "Signaled availableSemaphore",  27LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_1000F4F94(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFB8,  "available set to true",  21LL,  2LL,  _swiftEmptyArrayStorage);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) = 1;
  return result;
}

void sub_1000F5020(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v29 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = *(void **)(v2 + 72);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  int v28 = a1;
  uint64_t v10 = static os_log_type_t.default.getter(v16);
  if (qword_100234C18 != -1) {
LABEL_5:
  }
    swift_once(&qword_100234C18, sub_10018A920);
  os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_10023DFB8,  "Resetting CloudKitCoordinator available flags",  45LL,  2LL,  _swiftEmptyArrayStorage);
  *(void *)(v2 + 96) = 3LL;
  *(_BYTE *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) = 0;
  id v36 = sub_100113608;
  uint64_t v37 = (void *)v2;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256LL;
  uint64_t v34 = sub_1000F2C54;
  unint64_t v35 = &unk_10020EAA8;
  uint64_t v17 = _Block_copy(&aBlock);
  uint64_t v18 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v21 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v17);
  _Block_release(v17);
  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v6, v4);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v29);
  swift_release(v37);
  uint64_t v22 = swift_allocObject(&unk_10020EAE0, 25LL, 7LL);
  *(void *)(v22 + 16) = v2;
  *(_BYTE *)(v22 + 24) = v28 & 1;
  swift_retain(v2);
  id v23 = sub_1000F3F2C();
  uint64_t v24 = (void *)swift_allocObject(&unk_10020EB08, 40LL, 7LL);
  v24[2] = v2;
  v24[3] = sub_100113D00;
  v24[4] = v22;
  id v36 = sub_100113CF8;
  uint64_t v37 = v24;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256LL;
  uint64_t v34 = sub_10010140C;
  unint64_t v35 = &unk_10020EB20;
  uint64_t v25 = _Block_copy(&aBlock);
  uint64_t v26 = v37;
  swift_retain(v2);
  swift_retain(v22);
  swift_release(v26);
  [v23 accountStatusWithCompletionHandler:v25];
  _Block_release(v25);
  swift_release(v22);
}

uint64_t sub_1000F53DC(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v2 = qword_10023DFB8;
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_10023DFB8,  "Waiting for CloudKit to become available",  40LL,  2LL,  _swiftEmptyArrayStorage);
  OS_dispatch_semaphore.wait()();
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  return os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v2,  "Done waiting for CloudKit to become available",  45LL,  2LL,  _swiftEmptyArrayStorage);
}

void sub_1000F549C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v38 - 8);
  uint64_t v5 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v38);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v37 - v8;
  sub_10010E7DC(v10, 0.0, 120.0);
  double v12 = v11;
  uint64_t v13 = v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 20));
  uint64_t v15 = v14[1];
  if (v15)
  {
    uint64_t v16 = *v14;
    uint64_t v17 = (void *)v14[1];
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = (void *)0xE000000000000000LL;
  }

  aBlock = (void **)0xD00000000000002DLL;
  unint64_t v40 = 0x80000001001D1CC0LL;
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  unint64_t v19 = v40;
  uint64_t v37 = aBlock;
  uint64_t v20 = swift_bridgeObjectRetain(v15);
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v22 = qword_10023DFB8;
  uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v24 = swift_allocObject(v23, 152LL, 7LL);
  *(_OWORD *)(v24 + 16) = xmmword_1001A8EB0;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_10009914C();
  *(void *)(v24 + 32) = v16;
  *(void *)(v24 + 40) = v17;
  *(void *)(v24 + 96) = &type metadata for Double;
  *(void *)(v24 + 104) = &protocol witness table for Double;
  *(double *)(v24 + 72) = a1;
  *(void *)(v24 + 136) = &type metadata for Double;
  *(void *)(v24 + 144) = &protocol witness table for Double;
  *(double *)(v24 + 112) = v12;
  os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  v22,  "timer id: %@ checkinRetryFetch %f with random delay: %f",  55LL,  2LL,  v24);
  uint64_t v25 = swift_bridgeObjectRelease(v24);
  uint64_t v26 = Date.init()(v25);
  Date.addingTimeInterval(_:)(v26, v12 + a1);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v28 = v38;
  v27(v7, v38);
  uint64_t v29 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v29 + 16, v2);
  id v30 = objc_allocWithZone((Class)&OBJC_CLASS___BTXPCTimer);
  swift_retain(v29);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  unint64_t v43 = sub_1001135F8;
  uint64_t v44 = v29;
  aBlock = _NSConcreteStackBlock;
  unint64_t v40 = 1107296256LL;
  unint64_t v41 = sub_1000F9B78;
  unint64_t v42 = &unk_10020EA58;
  uint64_t v33 = _Block_copy(&aBlock);
  id v34 = [v30 initWithName:v31 date:isa gracePeriod:1 priority:705 options:v33 block:1.0];
  _Block_release(v33);

  v27(v9, v28);
  uint64_t v35 = v44;
  swift_release(v29);
  swift_release(v35);
  id v36 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = v34;
}

uint64_t sub_1000F57C8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2 + 16;
  uint64_t v12 = static os_log_type_t.default.getter(v8);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v13 = qword_10023DFB8;
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
  id v16 = a1;
  id v17 = [v16 description];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10009914C();
  *(void *)(v15 + 32) = v18;
  *(void *)(v15 + 40) = v20;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "scheduleRetryFetch timer fired: %@", 34LL, 2LL, v15);
  swift_bridgeObjectRelease(v15);
  swift_beginAccess(v11, v37, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v11);
  if (result)
  {
    uint64_t v22 = result;
    aBlock[4] = sub_100113600;
    uint64_t v36 = result;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020EA80;
    uint64_t v23 = _Block_copy(aBlock);
    uint64_t v24 = swift_retain(v22);
    static DispatchQoS.unspecified.getter(v24);
    id v34 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v27 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = v26;
    uint64_t v29 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v28, v27, v33, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
    swift_release(v22);
    return swift_release(v36);
  }

  return result;
}

void sub_1000F5AAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;

  sub_1000F5020(1);
}

uint64_t sub_1000F5AEC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (void *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v2 + 72);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))( v8,  enum case for DispatchPredicate.onQueue(_:),  v4,  v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  if ((*(_BYTE *)(v2 + 128) & 1) != 0)
  {
    uint64_t v4 = static os_log_type_t.default.getter(v11);
    if (qword_100234C18 == -1) {
      return os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_10023DFB8,  "scheduleCloudUpdate: update in progress, new update will be scheduled for pending updates, after current operation completes",  124LL,  2LL,  _swiftEmptyArrayStorage);
    }
LABEL_15:
    swift_once(&qword_100234C18, sub_10018A920);
    return os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_10023DFB8,  "scheduleCloudUpdate: update in progress, new update will be scheduled for pending updates, after current op eration completes",  124LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v13 = *(void *)(v2 + 48);
  if (!v13) {
    return sub_1000F5F40(a1 & 1, 0);
  }
  uint64_t v14 = *(void *)(v2 + 40);
  uint64_t v15 = swift_retain(*(void *)(v2 + 48));
  if (v14)
  {
    uint64_t v16 = static os_log_type_t.default.getter(v15);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_10023DFB8,  "Defer fetch until scheduled changes are pushed to cloud",  55LL,  2LL,  _swiftEmptyArrayStorage);
    [*(id *)(v2 + 40) invalidate];
    id v17 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;

    swift_getObjectType(*(void *)(v13 + 40));
    OS_dispatch_source.cancel()();
    uint64_t v18 = *(void *)(v2 + 48);
    *(void *)(v2 + 48) = 0LL;
    swift_release(v18);
    uint64_t v15 = sub_1000F5F40(a1 & 1, 1);
  }

  unsigned int v42 = static os_log_type_t.default.getter(v15);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v19 = qword_10023DFB8;
  uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  __int128 v41 = xmmword_1001A5EA0;
  *(_OWORD *)(v21 + 16) = xmmword_1001A5EA0;
  swift_beginAccess(v2 + 112, v44, 0LL, 0LL);
  uint64_t v22 = *(void *)(v2 + 112);
  uint64_t v23 = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  swift_bridgeObjectRetain(v22);
  uint64_t v24 = sub_100098CD8(&qword_100236728);
  uint64_t v25 = sub_100112958( &qword_100236730,  (unint64_t *)&qword_100234E30,  &OBJC_CLASS___CKRecord_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v26 = Dictionary.Keys.description.getter(v22, v23, v24, v25);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease(v22);
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v29 = sub_10009914C();
  *(void *)(v21 + 64) = v29;
  *(void *)(v21 + 32) = v26;
  *(void *)(v21 + 40) = v28;
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v19, "Already Scheduled changes: %@", 29LL, 2LL, v21);
  uint64_t v30 = swift_bridgeObjectRelease(v21);
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  uint64_t v32 = qword_10023DFB8;
  uint64_t v33 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v33 + 16) = v41;
  swift_beginAccess(v2 + 120, v43, 0LL, 0LL);
  uint64_t v34 = *(void *)(v2 + 120);
  uint64_t v35 = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
  swift_bridgeObjectRetain(v34);
  uint64_t v36 = sub_100098CD8(&qword_100236738);
  uint64_t v37 = sub_100112958( (unint64_t *)&unk_100236740,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v38 = Dictionary.Keys.description.getter(v34, v35, v36, v37);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease(v34);
  *(void *)(v33 + 56) = &type metadata for String;
  *(void *)(v33 + 64) = v29;
  *(void *)(v33 + 32) = v38;
  *(void *)(v33 + 40) = v40;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Already Scheduled deletion: %@", 30LL, 2LL, v33);
  swift_release(v13);
  return swift_bridgeObjectRelease(v33);
}

uint64_t sub_1000F5F40(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  id v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v3 + 72);
  *id v10 = v11;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))( v10,  enum case for DispatchPredicate.onQueue(_:),  v6,  v8);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)(v10);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) != 0)
  {
    uint64_t v6 = static os_log_type_t.default.getter(v14);
    if (qword_100234C18 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100234C18, sub_10018A920);
LABEL_3:
  uint64_t v15 = qword_10023DFB8;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1001A5EA0;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  char v18 = a1 & 1;
  *(_BYTE *)(v17 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v15, "checkInPendingCloudUpdates, userInitiated: %d", v27);
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v19 + 16, v3);
  uint64_t v20 = swift_allocObject(&unk_10020E928, 26LL, 7LL);
  *(void *)(v20 + 16) = v19;
  *(_BYTE *)(v20 + 24) = v18;
  *(_BYTE *)(v20 + 25) = a2 & 1;
  uint64_t v21 = type metadata accessor for LocalDispatchTimer();
  swift_allocObject(v21, 72LL, 7LL);
  id v22 = v12;
  uint64_t v23 = LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(v12, (uint64_t)sub_1001134BC, v20, 3.0, 0.0, 1.0);
  uint64_t v24 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v23;
  uint64_t result = swift_release(v24);
  uint64_t v26 = *(void *)(v3 + 48);
  if (v26)
  {
    swift_getObjectType(*(void *)(v26 + 40));
    swift_retain(v26);
    OS_dispatch_source.resume()();
    return swift_release(v26);
  }

  return result;
}

void sub_1000F617C(uint64_t a1, int a2, int a3)
{
  LODWORD(v3) = a3;
  LODWORD(v4) = a2;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    goto LABEL_55;
  }
  while (1)
  {
    uint64_t v7 = qword_10023DFB8;
    os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_10023DFB8,  "checkInPendingCloudUpdates timer fired",  38LL,  2LL,  _swiftEmptyArrayStorage);
    swift_beginAccess(v5, v135, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v5);
    if (!Strong) {
      break;
    }
    uint64_t v9 = Strong;
    uint64_t v10 = static os_log_type_t.default.getter(Strong);
    os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  v7,  "checkInPendingCloudUpdates: operation starting",  46LL,  2LL,  _swiftEmptyArrayStorage);
    *(_BYTE *)(v9 + 128) = 1;
    uint64_t v11 = *(void *)(v9 + 48);
    int v116 = (int)v3;
    int v122 = v4;
    if (v11)
    {
      swift_getObjectType(*(void *)(v11 + 40));
      swift_retain(v11);
      OS_dispatch_source.cancel()();
      swift_release(v11);
      uint64_t v12 = *(void *)(v9 + 48);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    *(void *)(v9 + 48) = 0LL;
    swift_release(v12);
    char v13 = *(void **)(v9 + 72);
    uint64_t v14 = swift_allocObject(&unk_10020E950, 24LL, 7LL);
    swift_beginAccess(v9 + 120, v134, 1LL, 0LL);
    uint64_t v15 = *(void *)(v9 + 120);
    uint64_t v115 = v14;
    *(void *)(v14 + 16) = v15;
    id v113 = v13;
    swift_bridgeObjectRetain(v15);
    unint64_t v16 = sub_10009F0F8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v17 = *(void *)(v9 + 120);
    *(void *)(v9 + 120) = v16;
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = swift_allocObject(&unk_10020E978, 24LL, 7LL);
    swift_beginAccess(v9 + 112, v133, 1LL, 0LL);
    uint64_t v19 = *(void *)(v9 + 112);
    uint64_t v114 = v18;
    *(void *)(v18 + 16) = v19;
    swift_bridgeObjectRetain(v19);
    unint64_t v20 = sub_10009F10C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v21 = *(void *)(v9 + 112);
    *(void *)(v9 + 112) = v20;
    swift_bridgeObjectRelease(v21);
    uint64_t v22 = swift_bridgeObjectRetain(v19);
    uint64_t v23 = sub_100161568(v22);
    swift_bridgeObjectRelease(v19);
    uint64_t v24 = swift_bridgeObjectRetain(v15);
    uint64_t v121 = sub_100161568(v24);
    uint64_t v25 = swift_bridgeObjectRelease(v15);
    uint64_t v6 = static os_log_type_t.default.getter(v25);
    uint64_t v26 = qword_10023DFB8;
    uint64_t v125 = sub_100098CD8((uint64_t *)&unk_100234E00);
    unint64_t v4 = swift_allocObject(v125, 72LL, 7LL);
    __int128 v124 = xmmword_1001A5EA0;
    *(_OWORD *)(v4 + 16) = xmmword_1001A5EA0;
    BOOL v27 = v23 < 0 || (v23 & 0x4000000000000000LL) != 0;
    if (v27)
    {
      uint64_t v110 = swift_bridgeObjectRetain(v23);
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v110);
      swift_release(v23);
    }

    else
    {
      uint64_t v28 = *(void *)(v23 + 16);
    }

    uint64_t v132 = v28;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v31 = v30;
    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v123 = sub_10009914C();
    *(void *)(v4 + 64) = v123;
    *(void *)(v4 + 32) = v29;
    *(void *)(v4 + 40) = v31;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v26, "checkInPendingCloudUpdates updates count: %@", 44LL, 2LL, v4);
    uint64_t v32 = swift_bridgeObjectRelease(v4);
    uint64_t v33 = IsAppleInternalBuild(v32);
    if ((_DWORD)v33) {
      unsigned int v34 = static os_log_type_t.default.getter(v33);
    }
    else {
      unsigned int v34 = static os_log_type_t.debug.getter(v33);
    }
    unsigned int v120 = v34;
    uint64_t v119 = qword_10023DFB8;
    uint64_t v118 = swift_allocObject(v125, 72LL, 7LL);
    *(_OWORD *)(v118 + 16) = v124;
    if (v27)
    {
      uint64_t v35 = swift_retain(v23);
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v35);
    }

    else
    {
      uint64_t v36 = *(void *)(v23 + 16);
      swift_retain(v23);
    }

    uint64_t v117 = v9;
    uint64_t v37 = _swiftEmptyArrayStorage;
    if (!v36)
    {
      uint64_t v39 = _swiftEmptyArrayStorage;
LABEL_39:
      swift_release(v23);
      uint64_t v63 = Array.description.getter(v39, &type metadata for String);
      uint64_t v65 = v64;
      swift_bridgeObjectRelease(v39);
      uint64_t v66 = (void *)v118;
      unint64_t v67 = v123;
      *(void *)(v118 + 56) = &type metadata for String;
      v66[8] = v67;
      v66[4] = v63;
      v66[5] = v65;
      os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v119, "Staged CKRecords updates - %@", 29LL, 2LL, v66);
      uint64_t v68 = swift_bridgeObjectRelease(v66);
      uint64_t v69 = static os_log_type_t.default.getter(v68);
      uint64_t v70 = qword_10023DFB8;
      uint64_t v71 = swift_allocObject(v125, 72LL, 7LL);
      *(_OWORD *)(v71 + 16) = v124;
      BOOL v72 = v121;
      if (v121 < 0 || (v121 & 0x4000000000000000LL) != 0)
      {
        uint64_t v111 = swift_bridgeObjectRetain(v121);
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter(v111);
        swift_release(v121);
      }

      else
      {
        uint64_t v73 = *(void *)(v121 + 16);
      }

      uint64_t v74 = v117;
      uint64_t v132 = v73;
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      unint64_t v76 = v123;
      *(void *)(v71 + 56) = &type metadata for String;
      *(void *)(v71 + 64) = v76;
      *(void *)(v71 + 32) = v75;
      *(void *)(v71 + 40) = v77;
      os_log(_:dso:log:_:_:)( v69,  &_mh_execute_header,  v70,  "checkInPendingCloudUpdates deletes count: %@",  44LL,  2LL,  v71);
      uint64_t v78 = swift_bridgeObjectRelease(v71);
      uint64_t v79 = IsAppleInternalBuild(v78);
      if ((_DWORD)v79) {
        uint64_t v80 = static os_log_type_t.default.getter(v79);
      }
      else {
        uint64_t v80 = static os_log_type_t.debug.getter(v79);
      }
      uint64_t v81 = v80;
      uint64_t v82 = qword_10023DFB8;
      uint64_t v83 = swift_allocObject(v125, 72LL, 7LL);
      *(_OWORD *)(v83 + 16) = v124;
      uint64_t v84 = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v85 = swift_bridgeObjectRetain(v72);
      uint64_t v86 = Array.description.getter(v85, v84);
      uint64_t v88 = v87;
      swift_release(v72);
      unint64_t v89 = v123;
      *(void *)(v83 + 56) = &type metadata for String;
      *(void *)(v83 + 64) = v89;
      *(void *)(v83 + 32) = v86;
      *(void *)(v83 + 40) = v88;
      os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v82, "Staged CKRecords deletes - %@", 29LL, 2LL, v83);
      swift_bridgeObjectRelease(v83);
      sub_1000A4A64(0LL, &qword_100236590, &OBJC_CLASS___CKModifyRecordsOperation_ptr);
      v136.value._rawValue = (void *)v23;
      v136.is_nil = v72;
      id v90 = (id)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v136, v137);
      char v91 = v122;
      if ((v122 & 1) != 0) {
        id v92 = sub_1000F44D0();
      }
      else {
        id v92 = sub_1000F44F4();
      }
      uint64_t v93 = v92;
      [v90 setGroup:v92];

      [v90 setCallbackQueue:*(void *)(v74 + 80)];
      if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
        [v90 setQualityOfService:25];
      }
      id v94 = [v90 configuration];
      if (v94)
      {
        uint64_t v95 = v94;
        [v94 setAutomaticallyRetryNetworkFailures:0];

        id v96 = [v90 configuration];
        if (v96)
        {
          uint64_t v97 = v96;
          [v96 setDiscretionaryNetworkBehavior:0];

          uint64_t v98 = swift_allocObject(&unk_10020E9A0, 32LL, 7LL);
          uint64_t v99 = v114;
          *(void *)(v98 + 16) = v114;
          *(void *)(v98 + 24) = v74;
          swift_retain(v99);
          swift_retain(v74);
          CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1001134D8, v98);
          uint64_t v100 = v115;
          swift_retain(v115);
          CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1001134E4, v115);
          uint64_t v101 = swift_allocObject(&unk_10020E9C8, 50LL, 7LL);
          Class v102 = v113;
          *(void *)(v101 + 16) = v113;
          *(void *)(v101 + 24) = v74;
          *(void *)(v101 + 32) = v99;
          *(void *)(v101 + 40) = v100;
          *(_BYTE *)(v101 + 48) = v91 & 1;
          *(_BYTE *)(v101 + 49) = v116 & 1;
          id v103 = v102;
          swift_retain(v99);
          swift_retain(v74);
          swift_retain(v100);
          CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_10011352C, v101);
          char v104 = *(void **)(v74 + 64);
          uint64_t v105 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
          uint64_t v106 = swift_weakInit(v105 + 16, v74);
          uint64_t v107 = v74;
          __chkstk_darwin(v106);
          v112[2] = v105;
          v112[3] = v90;
          id v108 = v104;
          uint64_t v109 = sub_100098CD8((uint64_t *)&unk_100236528);
          OS_dispatch_queue.sync<A>(execute:)(&v132, sub_100113544, v112, v109);
          swift_release(v100);
          swift_release(v99);
          swift_release(v107);

          swift_release(v105);
          return;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      return;
    }

    uint64_t v38 = 0LL;
    uint64_t v128 = v23;
    unint64_t v129 = v23 & 0xC000000000000001LL;
    uint64_t v126 = v23 + 32;
    uint64_t v127 = v36;
    uint64_t v3 = &selRef_deviceForIDSDevice_createNew_;
    uint64_t v39 = _swiftEmptyArrayStorage;
    while (1)
    {
      Swift::String v131 = v39;
      id v40 = v129 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v23) : *(id *)(v126 + 8 * v38);
      __int128 v41 = v40;
      BOOL v42 = __OFADD__(v38, 1LL);
      uint64_t v5 = v38 + 1;
      if (v42) {
        break;
      }
      uint64_t v130 = v5;
      id v43 = [v40 encryptedValues];
      id v44 = [v43 allKeys];
      swift_unknownObjectRelease(v43);
      uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String);

      uint64_t v132 = (uint64_t)v37;
      uint64_t v46 = v37;
      uint64_t v47 = *(void *)(v45 + 16);
      if (v47)
      {
        swift_bridgeObjectRetain(v45);
        unint64_t v48 = (void *)(v45 + 40);
        do
        {
          uint64_t v50 = *v48;
          swift_bridgeObjectRetain(*v48);
          id v51 = [v41 encryptedValues];
          NSString v52 = String._bridgeToObjectiveC()();
          id v53 = [v51 objectForKeyedSubscript:v52];
          swift_bridgeObjectRelease(v50);

          uint64_t v54 = swift_unknownObjectRelease(v51);
          if (v53)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
            unint64_t v56 = *(void *)((v132 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v55 = *(void *)((v132 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v56 >= v55 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1LL);
            }
            uint64_t v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
            specialized Array._endMutation()(v49);
          }

          v48 += 2;
          --v47;
        }

        while (v47);
        swift_bridgeObjectRelease(v45);
        uint64_t v57 = (void *)v132;
        uint64_t v36 = v127;
        uint64_t v23 = v128;
        uint64_t v37 = _swiftEmptyArrayStorage;
      }

      else
      {
        uint64_t v57 = v46;
        uint64_t v37 = v46;
      }

      swift_bridgeObjectRelease(v45);
      uint64_t v58 = sub_100098CD8(&qword_100234E40);
      uint64_t v59 = Array.description.getter(v57, v58);
      uint64_t v6 = v60;

      swift_bridgeObjectRelease(v57);
      uint64_t v39 = v131;
      if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0) {
        uint64_t v39 = sub_10018B814(0LL, v131[2] + 1LL, 1, v131);
      }
      unint64_t v4 = v39[2];
      unint64_t v61 = v39[3];
      if (v4 >= v61 >> 1) {
        uint64_t v39 = sub_10018B814((void *)(v61 > 1), v4 + 1, 1, v39);
      }
      v39[2] = v4 + 1;
      uint64_t v62 = &v39[2 * v4];
      v62[4] = v59;
      v62[5] = v6;
      uint64_t v38 = v130;
      if (v130 == v36) {
        goto LABEL_39;
      }
    }

    __break(1u);
LABEL_55:
    swift_once(&qword_100234C18, sub_10018A920);
  }

void sub_1000F6C44(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v8 = a4 + 16;
  swift_beginAccess(a4 + 16, v61, 0LL, 0LL);
  uint64_t v9 = *(void *)(a4 + 16);
  id v10 = a1;
  uint64_t v11 = swift_bridgeObjectRetain(v9);
  sub_10010FEDC(v11, v10);
  char v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v9);

  if (v13)
  {
    uint64_t v19 = swift_allocObject(&unk_10020EA40, 32LL, 7LL);
    *(void *)(v19 + 16) = v15;
    *(void *)(v19 + 24) = v17;
    swift_retain(v17);
    if ((a3 & 1) == 0)
    {
      sub_10010BF1C(a2, 0);
      sub_1000F8298(a2, (uint64_t)sub_100110E90, v19);
      unint64_t v20 = a2;
      char v21 = 0;
      goto LABEL_15;
    }

    uint64_t v57 = v15;
    uint64_t v58 = v8;
    id v31 = sub_10010BF1C(a2, 1);
    unsigned int v56 = static os_log_type_t.error.getter(v31);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v55 = qword_10023DFB8;
    uint64_t v32 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v33 = swift_allocObject(v32, 152LL, 7LL);
    *(_OWORD *)(v33 + 16) = xmmword_1001A8EB0;
    id v34 = v10;
    id v35 = [v34 description];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v38 = v37;

    *(void *)(v33 + 56) = &type metadata for String;
    unint64_t v39 = sub_10009914C();
    *(void *)(v33 + 64) = v39;
    *(void *)(v33 + 32) = v36;
    *(void *)(v33 + 40) = v38;
    uint64_t v59 = a2;
    swift_errorRetain(a2);
    uint64_t v40 = sub_100098CD8(&qword_1002357C0);
    uint64_t v41 = String.init<A>(describing:)(&v59, v40);
    *(void *)(v33 + 96) = &type metadata for String;
    *(void *)(v33 + 104) = v39;
    *(void *)(v33 + 72) = v41;
    *(void *)(v33 + 80) = v42;
    id v43 = [v13 recordChangeTag];
    if (v43)
    {
      id v44 = v43;
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      unint64_t v47 = v46;

      unint64_t v48 = (uint64_t *)(v33 + 112);
      *(void *)(v33 + 136) = &type metadata for String;
      *(void *)(v33 + 144) = v39;
      if (v47)
      {
        uint64_t *v48 = v45;
        uint64_t v49 = v57;
        uint64_t v8 = v58;
        uint64_t v50 = v56;
        uint64_t v51 = v55;
LABEL_14:
        *(void *)(v33 + 120) = v47;
        os_log(_:dso:log:_:_:)( v50,  &_mh_execute_header,  v51,  "CheckInPendingCloudUpdates CKRecord save failed (%@) with error: %@. Record change tag: %@",  90LL,  2LL,  v33);
        swift_bridgeObjectRelease(v33);
        uint64_t v59 = a2;
        char v60 = 1;
        sub_10010BF1C(a2, 1);
        swift_retain(v19);
        v49(&v59);
        sub_100112C7C(a2, 1);
        swift_release(v19);
        unint64_t v20 = a2;
        char v21 = 1;
LABEL_15:
        sub_100112C7C(v20, v21);
        swift_beginAccess(v8, &v59, 33LL, 0LL);
        uint64_t v52 = sub_10010C568((uint64_t)v13, (uint64_t (*)(uint64_t))sub_1000A3AFC, &qword_1002352E8);
        uint64_t v54 = v53;
        swift_endAccess(&v59);
        swift_release(v17);
        swift_release(v19);

        if (v52) {
          sub_10010BFB8(v52, v54);
        }
        return;
      }
    }

    else
    {
      unint64_t v48 = (uint64_t *)(v33 + 112);
      *(void *)(v33 + 136) = &type metadata for String;
      *(void *)(v33 + 144) = v39;
    }

    uint64_t v49 = v57;
    uint64_t v8 = v58;
    uint64_t v50 = v56;
    uint64_t v51 = v55;
    uint64_t *v48 = 15932LL;
    unint64_t v47 = 0xE200000000000000LL;
    goto LABEL_14;
  }

  uint64_t v22 = static os_log_type_t.error.getter(v18);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v23 = qword_10023DFB8;
  uint64_t v24 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
  *(_OWORD *)(v25 + 16) = xmmword_1001A5EA0;
  id v26 = v10;
  id v27 = [v26 description];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;

  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = sub_10009914C();
  *(void *)(v25 + 32) = v28;
  *(void *)(v25 + 40) = v30;
  os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  v23,  "CheckInPendingCloudUpdates CKRecord attempted to saved record with unknown recordID (%@)",  88LL,  2LL,  v25);
  swift_bridgeObjectRelease(v25);
}

void sub_1000F7060(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = a4 + 16;
  swift_beginAccess(a4 + 16, v50, 0LL, 0LL);
  uint64_t v9 = *(void *)(a4 + 16);
  id v10 = a1;
  uint64_t v11 = swift_bridgeObjectRetain(v9);
  sub_100110190(v11);
  char v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v9);

  if (v13)
  {
    if ((a3 & 1) != 0)
    {
      uint64_t v36 = swift_errorRetain(a2);
      uint64_t v37 = static os_log_type_t.error.getter(v36);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v38 = qword_10023DFB8;
      uint64_t v39 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
      *(_OWORD *)(v40 + 16) = xmmword_1001A5EA0;
      v49[0] = a2;
      swift_errorRetain(a2);
      uint64_t v41 = sub_100098CD8(&qword_1002357C0);
      uint64_t v42 = String.init<A>(describing:)(v49, v41);
      uint64_t v44 = v43;
      *(void *)(v40 + 56) = &type metadata for String;
      *(void *)(v40 + 64) = sub_10009914C();
      *(void *)(v40 + 32) = v42;
      *(void *)(v40 + 40) = v44;
      os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  v38,  "CheckInPendingCloudUpdates CKRecord deletion failed with error: %@",  66LL,  2LL,  v40);
      swift_bridgeObjectRelease(v40);
      v49[0] = a2;
      swift_errorRetain(a2);
      v15(v49);
      sub_100112AC0(a2, 1);
      sub_100112AC0(a2, 1);
    }

    else
    {
      unsigned int v48 = static os_log_type_t.default.getter(v18);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v19 = qword_10023DFB8;
      uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
      *(_OWORD *)(v21 + 16) = xmmword_1001A5EA0;
      id v22 = v10;
      id v23 = [v22 description];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;

      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = sub_10009914C();
      *(void *)(v21 + 32) = v24;
      *(void *)(v21 + 40) = v26;
      os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  v19,  "CheckInPendingCloudUpdates CKRecord deleted: %@",  47LL,  2LL,  v21);
      swift_bridgeObjectRelease(v21);
      v49[0] = 0LL;
      v15(v49);
    }

    swift_beginAccess(v8, v49, 33LL, 0LL);
    uint64_t v45 = sub_10010C568((uint64_t)v13, (uint64_t (*)(uint64_t))sub_1000A3B48, &qword_1002352F0);
    uint64_t v47 = v46;
    swift_endAccess(v49);
    swift_release(v17);

    if (v45) {
      sub_10010BFB8(v45, v47);
    }
  }

  else
  {
    uint64_t v27 = static os_log_type_t.error.getter(v18);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v28 = qword_10023DFB8;
    uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_1001A5EA0;
    id v31 = v10;
    id v32 = [v31 description];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v35 = v34;

    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_10009914C();
    *(void *)(v30 + 32) = v33;
    *(void *)(v30 + 40) = v35;
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v28,  "CheckInPendingCloudUpdates CKRecord attempted to delete record with unknown recordID (%@)",  89LL,  2LL,  v30);
    swift_bridgeObjectRelease(v30);
  }

uint64_t sub_1000F7440(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  int v30 = a8;
  uint64_t v34 = a3;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = &v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v20 + 16, a4);
  uint64_t v21 = swift_allocObject(&unk_10020E9F0, 58LL, 7LL);
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = a1;
  *(_BYTE *)(v21 + 32) = a2 & 1;
  *(void *)(v21 + 40) = a5;
  *(void *)(v21 + 48) = a6;
  *(_BYTE *)(v21 + 56) = a7;
  *(_BYTE *)(v21 + 57) = v30;
  aBlock[4] = sub_10011359C;
  uint64_t v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020EA08;
  id v22 = _Block_copy(aBlock);
  swift_retain(v20);
  sub_1001135B4(a1, a2 & 1);
  swift_retain(a5);
  uint64_t v23 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v26 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v14, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v22);
  _Block_release(v22);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v16, v14);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v19, v32);
  uint64_t v27 = v37;
  swift_release(v20);
  return swift_release(v27);
}

uint64_t sub_1000F76A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v140 = a6;
  int v141 = a7;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v139 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  BOOL v138 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v166, 0LL, 0LL);
  uint64_t v142 = a1;
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v137 = v12;
    uint64_t v143 = result;
    if ((a3 & 1) == 0)
    {
      uint64_t v15 = static os_log_type_t.default.getter(result);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v16 = os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_10023DFB8,  "CKRecords modify operation finished successfully",  48LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_55:
      *(_BYTE *)(v143 + 128) = 0;
      uint64_t v23 = static os_log_type_t.default.getter(v16);
      if (qword_100234C18 != -1) {
        goto LABEL_76;
      }
      goto LABEL_56;
    }

    uint64_t v17 = v142;
    swift_beginAccess(v142, v165, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v17);
    uint64_t v19 = v143;
    if (Strong)
    {
      uint64_t v136 = Strong;
      uint64_t v20 = (uint64_t *)(a4 + 16);
      uint64_t v21 = swift_errorRetain(a2);
      uint64_t v22 = static os_log_type_t.error.getter(v21);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v144 = a5 + 16;
      uint64_t v23 = qword_10023DFB8;
      uint64_t v153 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v24 = swift_allocObject(v153, 72LL, 7LL);
      *(_OWORD *)(v24 + 16) = xmmword_1001A5EA0;
      v164[0] = a2;
      *(void *)&__int128 v154 = a2;
      swift_errorRetain(a2);
      uint64_t v152 = sub_100098CD8(&qword_1002357C0);
      uint64_t v25 = String.init<A>(describing:)(v164, v152);
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for String;
      unint64_t v151 = sub_10009914C();
      *(void *)(v24 + 64) = v151;
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  v23,  "CKRecords modify operation finished with error: %@",  50LL,  2LL,  v24);
      swift_bridgeObjectRelease(v24);
      swift_beginAccess(a4 + 16, v164, 0LL, 0LL);
      uint64_t v28 = *v20;
      uint64_t v29 = *(void *)(*v20 + 64);
      int64_t v145 = *v20 + 64;
      uint64_t v30 = 1LL << *(_BYTE *)(v28 + 32);
      uint64_t v31 = -1LL;
      if (v30 < 64) {
        uint64_t v31 = ~(-1LL << v30);
      }
      unint64_t v32 = v31 & v29;
      *(void *)&__int128 v146 = (unint64_t)(v30 + 63) >> 6;
      uint64_t v148 = v28;
      swift_bridgeObjectRetain(v28);
      uint64_t v33 = 0LL;
      __int128 v147 = xmmword_1001A8EB0;
      while (1)
      {
        if (v32)
        {
          uint64_t v149 = (v32 - 1) & v32;
          uint64_t v150 = (void (*)(void *))v33;
          unint64_t v36 = __clz(__rbit64(v32)) | ((void)v33 << 6);
        }

        else
        {
          uint64_t v37 = (uint64_t)v33 + 1;
          if (__OFADD__(v33, 1LL))
          {
            __break(1u);
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }

          unint64_t v38 = *(void *)(v145 + 8 * v37);
          uint64_t v39 = (uint64_t)v33 + 1;
          if (!v38)
          {
            uint64_t v39 = (uint64_t)v33 + 2;
            unint64_t v38 = *(void *)(v145 + 8 * v39);
            if (!v38)
            {
              uint64_t v39 = (uint64_t)v33 + 3;
              unint64_t v38 = *(void *)(v145 + 8 * v39);
              if (!v38)
              {
                uint64_t v40 = (char *)v33 + 4;
                if ((uint64_t)v33 + 4 >= (uint64_t)v146)
                {
LABEL_34:
                  swift_release(v148);
                  uint64_t v64 = v144;
                  swift_beginAccess(v144, &v162, 0LL, 0LL);
                  uint64_t v65 = *(void *)v64;
                  uint64_t v66 = *(void *)(*(void *)v64 + 64LL);
                  uint64_t v144 = *(void *)v64 + 64LL;
                  uint64_t v67 = 1LL << *(_BYTE *)(v65 + 32);
                  uint64_t v68 = -1LL;
                  if (v67 < 64) {
                    uint64_t v68 = ~(-1LL << v67);
                  }
                  unint64_t v69 = v68 & v66;
                  int64_t v145 = (unint64_t)(v67 + 63) >> 6;
                  *(void *)&__int128 v147 = v65;
                  swift_bridgeObjectRetain(v65);
                  uint64_t v70 = 0LL;
                  __int128 v146 = xmmword_1001A6F30;
                  unint64_t v71 = v151;
                  while (1)
                  {
                    if (v69)
                    {
                      uint64_t v148 = (v69 - 1) & v69;
                      uint64_t v149 = v70;
                      unint64_t v72 = __clz(__rbit64(v69)) | (v70 << 6);
                    }

                    else
                    {
                      int64_t v88 = v70 + 1;
                      if (__OFADD__(v70, 1LL)) {
                        goto LABEL_73;
                      }
                      uint64_t v89 = v154;
                      if (v88 >= v145)
                      {
LABEL_54:
                        swift_release(v136);
                        sub_100112AC0(v89, 1);
                        uint64_t v16 = swift_release(v147);
                        goto LABEL_55;
                      }

                      unint64_t v90 = *(void *)(v144 + 8 * v88);
                      int64_t v91 = v70 + 1;
                      if (!v90)
                      {
                        int64_t v91 = v70 + 2;
                        if (v70 + 2 >= v145) {
                          goto LABEL_54;
                        }
                        unint64_t v90 = *(void *)(v144 + 8 * v91);
                        if (!v90)
                        {
                          int64_t v91 = v70 + 3;
                          if (v70 + 3 >= v145) {
                            goto LABEL_54;
                          }
                          unint64_t v90 = *(void *)(v144 + 8 * v91);
                          if (!v90)
                          {
                            uint64_t v92 = v70 + 4;
                            if (v70 + 4 >= v145) {
                              goto LABEL_54;
                            }
                            unint64_t v90 = *(void *)(v144 + 8 * v92);
                            if (!v90)
                            {
                              while (1)
                              {
                                int64_t v91 = v92 + 1;
                                if (__OFADD__(v92, 1LL)) {
                                  break;
                                }
                                if (v91 >= v145) {
                                  goto LABEL_54;
                                }
                                unint64_t v90 = *(void *)(v144 + 8 * v91);
                                ++v92;
                                if (v90) {
                                  goto LABEL_53;
                                }
                              }

LABEL_74:
                  __break(1u);
                  goto LABEL_75;
                }

                uint64_t v39 = (uint64_t)v33 + 4;
              }
            }
          }

uint64_t sub_1000F8298(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = a3;
  uint64_t v58 = a2;
  uint64_t v56 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v64 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unint64_t v63 = &v54[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v5 - 8);
  uint64_t v62 = v5;
  __chkstk_darwin(v5);
  unint64_t v57 = &v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unsigned int v55 = static os_log_type_t.default.getter(v7);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v8 = qword_10023DFB8;
  uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001A6F30;
  id v11 = [a1 recordID];
  id v12 = [v11 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v16 = sub_10009914C();
  *(void *)(v10 + 64) = v16;
  *(void *)(v10 + 32) = v13;
  *(void *)(v10 + 40) = v15;
  id v17 = [a1 recordChangeTag];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;

    uint64_t v22 = (uint64_t *)(v10 + 72);
    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v16;
    if (v21)
    {
      *uint64_t v22 = v19;
      uint64_t v23 = v56;
      uint64_t v24 = (void *)&unk_10023D000;
      uint64_t v25 = v55;
      uint64_t v26 = v8;
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v10 + 72);
    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v16;
  }

  uint64_t v23 = v56;
  uint64_t v24 = &unk_10023D000;
  uint64_t v25 = v55;
  uint64_t v26 = v8;
  *uint64_t v22 = 15932LL;
  unint64_t v21 = 0xE200000000000000LL;
LABEL_8:
  *(void *)(v10 + 80) = v21;
  os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v26,  "CheckInPendingCloudUpdates CKRecord successfully saved (%@). new changeTag: %@",  78LL,  2LL,  v10);
  uint64_t v27 = swift_bridgeObjectRelease(v10);
  uint64_t v28 = IsAppleInternalBuild(v27);
  if ((_DWORD)v28) {
    uint64_t v29 = static os_log_type_t.default.getter(v28);
  }
  else {
    uint64_t v29 = static os_log_type_t.debug.getter(v28);
  }
  uint64_t v30 = v29;
  uint64_t v31 = v24[503];
  uint64_t v32 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v32 + 16) = xmmword_1001A5EA0;
  id v33 = [a1 encryptedValues];
  id v34 = [v33 allKeys];
  swift_unknownObjectRelease(v33);
  uint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);

  id v36 = a1;
  uint64_t v37 = sub_100110B98(v35, v36);
  swift_bridgeObjectRelease(v35);

  uint64_t v38 = sub_100098CD8(&qword_100234E40);
  uint64_t v39 = Array.description.getter(v37, v38);
  uint64_t v41 = v40;
  swift_bridgeObjectRelease(v37);
  *(void *)(v32 + 56) = &type metadata for String;
  *(void *)(v32 + 64) = v16;
  *(void *)(v32 + 32) = v39;
  *(void *)(v32 + 40) = v41;
  os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  v31,  "CheckInPendingCloudUpdates saved CKRecords values - %@",  54LL,  2LL,  v32);
  swift_bridgeObjectRelease(v32);
  uint64_t v42 = v59;
  uint64_t v43 = (void *)swift_allocObject(&unk_10020E860, 48LL, 7LL);
  v43[2] = v36;
  v43[3] = v42;
  uint64_t v44 = v60;
  v43[4] = v58;
  v43[5] = v44;
  aBlock[4] = sub_1001133E0;
  uint64_t v67 = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E878;
  uint64_t v45 = _Block_copy(aBlock);
  id v46 = v36;
  swift_retain(v42);
  uint64_t v47 = swift_retain(v44);
  uint64_t v48 = v57;
  static DispatchQoS.unspecified.getter(v47);
  uint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t v49 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v50 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v51 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v52 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v50, v51, v23, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v48, v52, v45);
  _Block_release(v45);
  (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v52, v23);
  (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v48, v62);
  return swift_release(v67);
}

void sub_1000F8744(void *a1, uint64_t a2, void (*a3)(void *, void), uint64_t a4)
{
  id v7 = [a1 encryptedValues];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 objectForKeyedSubscript:v8];
  swift_unknownObjectRelease(v7);

  if (v9)
  {
    v91[0] = v9;
    uint64_t v11 = sub_100098CD8(&qword_100234E40);
    uint64_t v10 = swift_dynamicCast(v92, v91, v11, &type metadata for String, 6LL);
    if ((_DWORD)v10) {
      uint64_t v12 = v92[0];
    }
    else {
      uint64_t v12 = 0LL;
    }
    if ((_DWORD)v10) {
      uint64_t v13 = v92[1];
    }
    else {
      uint64_t v13 = 0LL;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = CKRecord.recordType.getter(v10);
  uint64_t v16 = v15;
  swift_beginAccess(a2 + 112, v92, 0LL, 0LL);
  uint64_t v17 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain(v13);
  uint64_t v18 = swift_bridgeObjectRetain(v17);
  sub_10010F518(v18, v12, v13, v14, v16);
  unint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  if (v20)
  {
    uint64_t v87 = a4;
    uint64_t v86 = (void *)(a2 + 112);
    uint64_t v25 = swift_allocObject(&unk_10020E8B0, 32LL, 7LL);
    *(void *)(v25 + 16) = v22;
    *(void *)(v25 + 24) = v24;
    id v26 = v20;
    uint64_t v85 = v25;
    uint64_t v27 = swift_retain(v25);
    uint64_t v28 = static os_log_type_t.default.getter(v27);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v29 = qword_10023DFB8;
    uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
    *(_OWORD *)(v31 + 16) = xmmword_1001A5EA0;
    id v32 = v26;
    id v33 = [v32 description];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;

    *(void *)(v31 + 56) = &type metadata for String;
    unint64_t v37 = sub_10009914C();
    *(void *)(v31 + 64) = v37;
    *(void *)(v31 + 32) = v34;
    *(void *)(v31 + 40) = v36;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Replacing existing pending record: %@", 37LL, 2LL, v31);
    uint64_t v38 = swift_bridgeObjectRelease(v31);
    uint64_t v39 = IsAppleInternalBuild(v38);
    uint64_t v89 = a1;
    if ((_DWORD)v39) {
      unsigned int v40 = static os_log_type_t.default.getter(v39);
    }
    else {
      unsigned int v40 = static os_log_type_t.debug.getter(v39);
    }
    unsigned int v84 = v40;
    uint64_t v83 = qword_10023DFB8;
    uint64_t v41 = swift_allocObject(v30, 112LL, 7LL);
    *(_OWORD *)(v41 + 16) = xmmword_1001A6F30;
    id v42 = [v32 recordID];
    id v43 = [v42 description];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = v37;
    *(void *)(v41 + 32) = v44;
    *(void *)(v41 + 40) = v46;
    uint64_t v47 = &selRef_deviceForIDSDevice_createNew_;
    id v48 = [v32 encryptedValues];
    id v49 = [v48 allKeys];
    swift_unknownObjectRelease(v48);
    uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for String);

    id v51 = v32;
    uint64_t v52 = sub_100110B98(v50, v51);
    swift_bridgeObjectRelease(v50);

    uint64_t v53 = sub_100098CD8(&qword_100234E40);
    uint64_t v54 = Array.description.getter(v52, v53);
    uint64_t v56 = v55;
    swift_bridgeObjectRelease(v52);
    *(void *)(v41 + 96) = &type metadata for String;
    *(void *)(v41 + 104) = v37;
    unint64_t v57 = v51;
    *(void *)(v41 + 72) = v54;
    *(void *)(v41 + 80) = v56;
    os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v83, "Replacing existing pending CKRecord %@ - %@", 43LL, 2LL, v41);
    swift_bridgeObjectRelease(v41);
    id v58 = [v51 encryptedValues];
    id v59 = [v58 allKeys];
    swift_unknownObjectRelease(v58);
    uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for String);

    uint64_t v61 = *(void *)(v60 + 16);
    uint64_t v62 = v89;
    if (v61)
    {
      unint64_t v63 = (void *)(v60 + 40);
      do
      {
        uint64_t v64 = *v63;
        swift_bridgeObjectRetain(*v63);
        id v65 = [v62 v47[40]];
        id v66 = [v57 v47[40]];
        NSString v67 = String._bridgeToObjectiveC()();
        uint64_t v68 = v57;
        id v69 = [v66 objectForKeyedSubscript:v67];

        uint64_t v47 = &selRef_deviceForIDSDevice_createNew_;
        swift_unknownObjectRelease(v66);
        NSString v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v64);
        [v65 setObject:v69 forKeyedSubscript:v70];
        id v71 = v69;
        unint64_t v57 = v68;
        swift_unknownObjectRelease(v71);
        id v72 = v65;
        uint64_t v62 = v89;
        swift_unknownObjectRelease(v72);

        v63 += 2;
        --v61;
      }

      while (v61);
    }

    swift_bridgeObjectRelease(v60);
    uint64_t v73 = (void *)swift_allocObject(&unk_10020E8D8, 48LL, 7LL);
    v73[2] = sub_100110E90;
    v73[3] = v85;
    v73[4] = a3;
    v73[5] = v87;
    swift_beginAccess(v86, v91, 33LL, 0LL);
    swift_retain(v85);
    swift_retain(v87);
    uint64_t v74 = sub_10010C568((uint64_t)v57, (uint64_t (*)(uint64_t))sub_1000A3AFC, &qword_1002352E8);
    uint64_t v76 = v75;
    swift_endAccess(v91);
    if (v74) {
      sub_10010BFB8(v74, v76);
    }
    uint64_t v77 = swift_allocObject(&unk_10020E900, 32LL, 7LL);
    *(void *)(v77 + 16) = sub_100113418;
    *(void *)(v77 + 24) = v73;
    swift_beginAccess(v86, v91, 33LL, 0LL);
    swift_retain(v73);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v86);
    uint64_t v90 = *v86;
    *uint64_t v86 = 0x8000000000000000LL;
    uint64_t v79 = sub_10010E884( (uint64_t)sub_100110E8C,  v77,  v89,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_1000A3AFC,  &qword_1002352E8,  (unint64_t *)&qword_100234E30,  &OBJC_CLASS___CKRecord_ptr);
    uint64_t v81 = v80;
    uint64_t v82 = *v86;
    *uint64_t v86 = v90;
    swift_bridgeObjectRelease(v82);
    swift_endAccess(v91);
    swift_release(v73);
    swift_release_n(v85, 2LL);

    if (v79) {
      sub_10010BFB8(v79, v81);
    }
  }

  else
  {
    a3(a1, 0LL);
  }

uint64_t sub_1000F8E24(void *a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  char v11 = a2 & 1;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v6 + 72);
  uint64_t v18 = swift_allocObject(&unk_10020E6A8, 56LL, 7LL);
  *(void *)(v18 + 16) = v6;
  *(void *)(v18 + 24) = a1;
  *(_BYTE *)(v18 + 32) = a3;
  *(_BYTE *)(v18 + 33) = v11;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = a5;
  aBlock[4] = sub_10011325C;
  uint64_t v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E6C0;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(v6);
  id v20 = a1;
  uint64_t v21 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v24 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release(v31);
}

void sub_1000F9040(uint64_t a1, void *a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v77 = a6;
  uint64_t v75 = a5;
  int v73 = a4;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v71 - v14;
  uint64_t v79 = swift_allocObject(&unk_10020E6F8, 24LL, 7LL);
  *(void *)(v79 + 16) = _swiftEmptyArrayStorage;
  uint64_t v78 = swift_allocObject(&unk_10020E6F8, 24LL, 7LL);
  *(void *)(v78 + 16) = _swiftEmptyArrayStorage;
  uint64_t v16 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v17 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v16 + *(int *)(v17 + 28), v9);
  sub_1000EE6A4((uint64_t)v12, (uint64_t)[a2 scope]);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  uint64_t v19 = (void *)sub_1000EEA18((uint64_t)v15);
  v18(v15, v9);
  id v20 = objc_allocWithZone(&OBJC_CLASS___CKFetchDatabaseChangesOperation);
  id v80 = v19;
  id v21 = [v20 initWithPreviousServerChangeToken:v19];
  [v21 setCallbackQueue:*(void *)(a1 + 80)];
  id v22 = v21;
  if ((a3 & 1) != 0) {
    id v23 = sub_1000F448C();
  }
  else {
    id v23 = sub_1000F4460();
  }
  uint64_t v24 = v23;
  uint64_t v76 = a1;
  [v22 setGroup:v23];

  uint64_t v26 = static os_log_type_t.default.getter(v25);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v27 = qword_10023DFB8;
  uint64_t v74 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v28 = swift_allocObject(v74, 112LL, 7LL);
  *(_OWORD *)(v28 + 16) = xmmword_1001A6F30;
  uint64_t v29 = a2;
  aBlock = (void **)[a2 scope];
  type metadata accessor for Scope(0LL);
  uint64_t v31 = String.init<A>(describing:)(&aBlock, v30);
  uint64_t v33 = v32;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v34 = sub_10009914C();
  *(void *)(v28 + 64) = v34;
  *(void *)(v28 + 32) = v31;
  *(void *)(v28 + 40) = v33;
  if (v80)
  {
    uint64_t v72 = v27;
    uint64_t v35 = v26;
    id v36 = [v80 data];
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v39 = v38;

    Data.hexString.getter(v37, v39);
    uint64_t v41 = v40;
    unint64_t v43 = v42;
    sub_100099394(v37, v39);
    uint64_t v44 = (void *)(v28 + 72);
    *(void *)(v28 + 96) = &type metadata for String;
    *(void *)(v28 + 104) = v34;
    if (v43)
    {
      *uint64_t v44 = v41;
      uint64_t v45 = v29;
      uint64_t v26 = v35;
      uint64_t v27 = v72;
      goto LABEL_12;
    }

    uint64_t v45 = v29;
    uint64_t v26 = v35;
    uint64_t v27 = v72;
  }

  else
  {
    uint64_t v44 = (void *)(v28 + 72);
    *(void *)(v28 + 96) = &type metadata for String;
    *(void *)(v28 + 104) = v34;
    uint64_t v45 = v29;
  }

  *uint64_t v44 = 7104878LL;
  unint64_t v43 = 0xE300000000000000LL;
LABEL_12:
  *(void *)(v28 + 80) = v43;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "CloudSync: Old %@ database change token: %@", 43LL, 2LL, v28);
  swift_bridgeObjectRelease(v28);
  [v22 setFetchAllChanges:1];
  id v46 = [v22 configuration];
  if (v46)
  {
    uint64_t v47 = v46;
    [v46 setAutomaticallyRetryNetworkFailures:0];

    id v48 = [v22 configuration];
    if (v48)
    {
      id v49 = v48;
      char v50 = v73 & 1;
      [v48 setDiscretionaryNetworkBehavior:0];

      uint64_t v51 = v79;
      uint64_t v85 = sub_100113270;
      uint64_t v86 = v79;
      aBlock = _NSConcreteStackBlock;
      uint64_t v82 = 1107296256LL;
      uint64_t v83 = sub_1000F9974;
      unsigned int v84 = &unk_10020E710;
      uint64_t v52 = _Block_copy(&aBlock);
      uint64_t v53 = v86;
      swift_retain(v51);
      swift_release(v53);
      [v22 setRecordZoneWithIDChangedBlock:v52];
      _Block_release(v52);
      uint64_t v54 = v78;
      uint64_t v85 = sub_100113278;
      uint64_t v86 = v78;
      aBlock = _NSConcreteStackBlock;
      uint64_t v82 = 1107296256LL;
      uint64_t v83 = sub_1000F9974;
      unsigned int v84 = &unk_10020E738;
      uint64_t v55 = _Block_copy(&aBlock);
      uint64_t v56 = v86;
      swift_retain(v54);
      swift_release(v56);
      [v22 setRecordZoneWithIDWasDeletedBlock:v55];
      _Block_release(v55);
      uint64_t v57 = swift_allocObject(&unk_10020E770, 17LL, 7LL);
      *(_BYTE *)(v57 + 16) = v50;
      uint64_t v85 = sub_100113290;
      uint64_t v86 = v57;
      aBlock = _NSConcreteStackBlock;
      uint64_t v82 = 1107296256LL;
      uint64_t v83 = sub_1000F9974;
      unsigned int v84 = &unk_10020E788;
      id v58 = _Block_copy(&aBlock);
      swift_release(v86);
      [v22 setChangeTokenUpdatedBlock:v58];
      _Block_release(v58);
      uint64_t v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:_:_:)( v60,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: fetchDatabaseChanges for the new layer",  49LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v61 = swift_allocObject(&unk_10020E7C0, 72LL, 7LL);
      uint64_t v62 = v75;
      uint64_t v63 = v76;
      *(void *)(v61 + 16) = v76;
      *(void *)(v61 + 24) = v62;
      uint64_t v64 = v77;
      *(void *)(v61 + 32) = v77;
      *(_BYTE *)(v61 + 40) = v50;
      *(void *)(v61 + 48) = v54;
      *(void *)(v61 + 56) = v51;
      *(void *)(v61 + 64) = v45;
      swift_retain(v51);
      swift_retain(v54);
      swift_retain(v63);
      swift_retain(v64);
      id v65 = v45;
      uint64_t v66 = CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter(sub_1001132DC, v61);
      uint64_t v67 = static os_log_type_t.default.getter(v66);
      uint64_t v68 = qword_10023DFB8;
      uint64_t v69 = swift_allocObject(v74, 72LL, 7LL);
      *(_OWORD *)(v69 + 16) = xmmword_1001A5EA0;
      *(void *)(v69 + 56) = sub_1000A4A64(0LL, &qword_100236700, &OBJC_CLASS___CKFetchDatabaseChangesOperation_ptr);
      *(void *)(v69 + 64) = sub_100112958( &qword_100236708,  &qword_100236700,  &OBJC_CLASS___CKFetchDatabaseChangesOperation_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
      *(void *)(v69 + 32) = v22;
      id v70 = v22;
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "CloudSync: Adding Cloud operation %@", 36LL, 2LL, v69);
      swift_bridgeObjectRelease(v69);
      [v65 addOperation:v70];
      swift_release(v51);
      swift_release(v54);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000F96F0(void *a1, uint64_t a2)
{
  id v4 = [a1 zoneName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == 0xD000000000000016LL && v7 == 0x80000001001D0F90LL)
  {
    uint64_t v8 = swift_bridgeObjectRelease(0x80000001001D0F90LL);
LABEL_5:
    uint64_t v10 = static os_log_type_t.default.getter(v8);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    return os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: Ignoring cloudPairedDevicesZone Changed",  50LL,  2LL,  _swiftEmptyArrayStorage);
  }

  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, 0xD000000000000016LL, 0x80000001001D0F90LL, 0LL);
  uint64_t v8 = swift_bridgeObjectRelease(v7);
  if ((v9 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v12 = (void *)(a2 + 16);
  swift_beginAccess(v12, v27, 33LL, 0LL);
  id v13 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  unint64_t v15 = *(void *)((*v12 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v14 = *(void *)((*v12 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v15 >= v14 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1LL);
  }
  uint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
  specialized Array._endMutation()(v16);
  uint64_t v17 = swift_endAccess(v27);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v19 = qword_10023DFB8;
  uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_1001A5EA0;
  id v22 = v13;
  id v23 = [v22 description];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_10009914C();
  *(void *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v26;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "CloudSync: Record Zone ID Changed: %@", 37LL, 2LL, v21);
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_1000F9978(void *a1, uint64_t a2)
{
  id v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  uint64_t v5 = *(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v7 = *(void *)(v5 + 0x10);
  unint64_t v6 = *(void *)(v5 + 24);
  if (v7 >= v6 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1LL);
  }
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_1000F9A10(void *a1, char a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  char v5 = a2 & 1;
  uint64_t v6 = qword_10023DFB8;
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1001A6F30;
  char v22 = v5;
  uint64_t v9 = String.init<A>(describing:)(&v22, &type metadata for CloudCoordinator.DatabaseToken);
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10009914C();
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  id v13 = [a1 data];
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
  unint64_t v16 = v15;

  Data.hexString.getter(v14, v16);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_100099394(v14, v16);
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 72) = v18;
  *(void *)(v8 + 80) = v20;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v6,  "CloudSync: change token updated, database, %@, token, %@",  56LL,  2LL,  v8);
  return swift_bridgeObjectRelease(v8);
}

void sub_1000F9B78(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_1000F9BC8( void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t), uint64_t a5, char a6, unint64_t a7, unint64_t a8, void *a9)
{
  unint64_t v177 = a7;
  uint64_t v152 = a5;
  uint64_t v170 = a3;
  uint64_t v172 = type metadata accessor for URL(0LL);
  uint64_t v158 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v157 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v171 = (char *)&v147 - v16;
  uint64_t v164 = (NSString *)type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v163 = (uint64_t)*(v164 - 1);
  __chkstk_darwin(v164);
  uint64_t v162 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v159 = (char *)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x100) != 0)
  {
    uint64_t v72 = a4;
    uint64_t v73 = a2;
    uint64_t v74 = swift_errorRetain(a1);
    uint64_t v75 = static os_log_type_t.default.getter(v74);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v76 = qword_10023DFB8;
    uint64_t v77 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v78 = swift_allocObject(v77, 72LL, 7LL);
    *(_OWORD *)(v78 + 16) = xmmword_1001A5EA0;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v79 = sub_100098CD8(&qword_1002357C0);
    uint64_t v80 = String.init<A>(describing:)(aBlock, v79);
    uint64_t v82 = v81;
    *(void *)(v78 + 56) = &type metadata for String;
    *(void *)(v78 + 64) = sub_10009914C();
    *(void *)(v78 + 32) = v80;
    *(void *)(v78 + 40) = v82;
    os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  v76,  "CloudSync: Error during fetch database changes operation: %@",  60LL,  2LL,  v78);
    swift_bridgeObjectRelease(v78);
    sub_1000FF954((uint64_t)a1, 1);
    swift_errorRetain(a1);
    v72(a1, 1LL);
    sub_100113314(a1, v73, 1);
    uint64_t v83 = a1;
    uint64_t v84 = v73;
    char v85 = 1;
    goto LABEL_83;
  }

  unint64_t v176 = a8;
  uint64_t v150 = a4;
  LODWORD(v19) = a6 & 1;
  unint64_t v151 = a1;
  id v20 = a1;
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  if (qword_100234C18 != -1) {
    goto LABEL_72;
  }
  while (1)
  {
    uint64_t v22 = qword_10023DFB8;
    uint64_t v175 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v23 = swift_allocObject(v175, 152LL, 7LL);
    uint64_t v24 = (void *)v23;
    *(_OWORD *)(v23 + 16) = xmmword_1001A8EB0;
    if ((a2 & 1) != 0) {
      uint64_t v25 = 1702195828LL;
    }
    else {
      uint64_t v25 = 0x65736C6166LL;
    }
    if ((a2 & 1) != 0) {
      unint64_t v26 = 0xE400000000000000LL;
    }
    else {
      unint64_t v26 = 0xE500000000000000LL;
    }
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v27 = sub_10009914C();
    v24[8] = v27;
    v24[4] = v25;
    v24[5] = v26;
    int v149 = (int)v19;
    LOBYTE(aBlock[0]) = (_BYTE)v19;
    uint64_t v28 = String.init<A>(describing:)(aBlock, &type metadata for CloudCoordinator.DatabaseToken);
    v24[12] = &type metadata for String;
    v24[13] = v27;
    v24[9] = v28;
    v24[10] = v29;
    id v169 = v20;
    id v30 = [v20 data];
    uint64_t v19 = (_UNKNOWN **)static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
    unint64_t v32 = v31;

    Data.hexString.getter((uint64_t)v19, v32);
    id v20 = v33;
    uint64_t v35 = v34;
    sub_100099394((uint64_t)v19, v32);
    v24[17] = &type metadata for String;
    v24[18] = v27;
    unint64_t v154 = v27;
    v24[14] = v20;
    v24[15] = v35;
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  v22,  "CloudSync: Fetch database changes complete, moreComing %@, database, %@, token, %@",  82LL,  2LL,  v24);
    swift_bridgeObjectRelease(v24);
    uint64_t v36 = v170 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    uint64_t v37 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
    uint64_t v155 = v37;
    uint64_t v38 = *(int *)(v37 + 32);
    uint64_t v156 = v36;
    if (!*(void *)(*(void *)(v36 + v38) + 16LL))
    {
      uint64_t v86 = static os_log_type_t.error.getter(v37);
      os_log(_:dso:log:_:_:)( v86,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: Configuration did not define any zoneIDs!",  52LL,  2LL,  _swiftEmptyArrayStorage);
      id v87 = [objc_allocWithZone(NSError) init];
      v150(v87, 1LL);

      uint64_t v83 = v151;
      uint64_t v84 = a2;
      goto LABEL_82;
    }

    unint64_t v39 = v176;
    uint64_t v40 = (uint64_t *)(v177 + 16);
    swift_beginAccess(v177 + 16, v183, 0LL, 0LL);
    uint64_t v21 = *v40;
    if ((unint64_t)*v40 >> 62)
    {
      if (v21 < 0) {
        uint64_t v142 = *v40;
      }
      else {
        uint64_t v142 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v21);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v142);
    }

    else
    {
      uint64_t v41 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v21);
    }

    id v42 = v169;
    unsigned int v148 = a2;
    unint64_t v43 = (uint64_t *)(v39 + 16);
    uint64_t v44 = v170;
    a2 = v41;
    uint64_t v165 = v39 + 16;
    if (v41)
    {
      unint64_t v45 = 0LL;
      int v46 = 0;
      unint64_t v167 = (void *)(v170 + 24);
      unint64_t v168 = v21 & 0xC000000000000001LL;
      uint64_t v153 = v21 & 0xFFFFFFFFFFFFFF8LL;
      __int128 v166 = xmmword_1001A5EA0;
      while (1)
      {
        if (v168)
        {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v21);
        }

        else
        {
          if (v45 >= *(void *)(v153 + 16)) {
            goto LABEL_71;
          }
          id v47 = *(id *)(v21 + 8 * v45 + 32);
        }

        id v48 = v47;
        if (__OFADD__(v45, 1LL)) {
          break;
        }
        unint64_t v176 = v45 + 1;
        LODWORD(v177) = v46;
        uint64_t v49 = static os_log_type_t.default.getter(v47);
        id v20 = (id)qword_10023DFB8;
        uint64_t v50 = swift_allocObject(v175, 72LL, 7LL);
        *(_OWORD *)(v50 + 16) = v166;
        uint64_t v19 = &OBJC_CLASS___CKRecordZoneID_ptr;
        *(void *)(v50 + 56) = sub_1000A4A64( 0LL,  (unint64_t *)&qword_100235280,  &OBJC_CLASS___CKRecordZoneID_ptr);
        *(void *)(v50 + 64) = sub_100112958( &qword_100236710,  (unint64_t *)&qword_100235280,  &OBJC_CLASS___CKRecordZoneID_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
        *(void *)(v50 + 32) = v48;
        uint64_t v51 = v48;
        os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v20, "CloudSync: Cloud zone deleted: %@", 33LL, 2LL, v50);
        swift_bridgeObjectRelease(v50);
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(v167, v52);
        if (Strong)
        {
          id v20 = (id)Strong;
          uint64_t v54 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
          uint64_t v55 = swift_allocObject(&unk_10020E7E8, 32LL, 7LL);
          *(void *)(v55 + 16) = v51;
          *(void *)(v55 + 24) = v20;
          aBlock[4] = sub_100113ACC;
          uint64_t v182 = v55;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = sub_1000F2C54;
          aBlock[3] = &unk_10020E800;
          uint64_t v56 = _Block_copy(aBlock);
          uint64_t v57 = v51;
          id v58 = v54;
          uint64_t v59 = swift_unknownObjectRetain(v20);
          unint64_t v174 = v45;
          uint64_t v60 = v159;
          static DispatchQoS.unspecified.getter(v59);
          char v180 = _swiftEmptyArrayStorage;
          uint64_t v61 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v173 = v51;
          uint64_t v62 = sub_100098CD8((uint64_t *)&unk_100235790);
          uint64_t v63 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
          uint64_t v19 = (_UNKNOWN **)a2;
          uint64_t v64 = v162;
          uint64_t v65 = v21;
          uint64_t v66 = v164;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v62, v63, v164, v61);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v60, v64, v56);
          _Block_release(v56);

          uint64_t v67 = v64;
          a2 = (uint64_t)v19;
          uint64_t v68 = v66;
          uint64_t v21 = v65;
          uint64_t v51 = v173;
          (*(void (**)(char *, NSString *))(v163 + 8))(v67, v68);
          uint64_t v69 = v60;
          unint64_t v45 = v174;
          (*(void (**)(char *, uint64_t))(v160 + 8))(v69, v161);
          uint64_t v70 = v182;
          swift_unknownObjectRelease(v20);
          uint64_t Strong = swift_release(v70);
        }

        if ((v177 & 1) == 0)
        {
          uint64_t v71 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)( v71,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: Re-Setup Zones",  25LL,  2LL,  _swiftEmptyArrayStorage);
          sub_1000FD248();
        }

        if (v176 == a2)
        {
          swift_bridgeObjectRelease(v21);
          uint64_t v163 = 0LL;
          id v42 = v169;
          uint64_t v21 = v165;
          goto LABEL_32;
        }

        ++v45;
        int v46 = 1;
      }

LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_once(&qword_100234C18, sub_10018A920);
  }

LABEL_65:
  swift_beginAccess(v21, &v180, 0LL, 0LL);
  uint64_t v132 = *(void *)v21;
  if (*(void *)v21 >> 62)
  {
    if (v132 < 0) {
      uint64_t v143 = *(void *)v21;
    }
    else {
      uint64_t v143 = v132 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)v21);
    uint64_t v144 = _CocoaArrayWrapper.endIndex.getter(v143);
    swift_bridgeObjectRelease(v132);
    if (v144) {
      goto LABEL_67;
    }
  }

  else if (*(void *)((v132 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_67:
    swift_beginAccess(v21, v179, 0LL, 0LL);
    uint64_t v133 = *(void *)v21;
    uint64_t v134 = (void *)swift_allocObject(&unk_10020E838, 56LL, 7LL);
    uint64_t v135 = v170;
    uint64_t v136 = v167;
    v134[2] = v170;
    v134[3] = v136;
    uint64_t v137 = v150;
    v134[4] = v42;
    v134[5] = v137;
    uint64_t v138 = v152;
    v134[6] = v152;
    uint64_t v139 = v151;
    uint64_t v140 = v148;
    sub_1001133A0(v151, v148, 0);
    swift_retain(v135);
    swift_bridgeObjectRetain(v133);
    id v141 = v136;
    swift_retain(v138);
    sub_1000FADF8(v141, v149, v133, (uint64_t)sub_10011338C, (uint64_t)v134);
    sub_100113314(v139, v140, 0);
    swift_bridgeObjectRelease(v133);
    swift_release(v134);
    return;
  }

  int64_t v145 = v151;
  uint64_t v146 = v148;
  sub_1001133A0(v151, v148, 0);
  sub_1001045F0(v167, v145);
  sub_100113314(v145, v146, 0);
  v150(0LL, 0LL);
  uint64_t v83 = v145;
  uint64_t v84 = v146;
LABEL_82:
  char v85 = 0;
LABEL_83:
  sub_100113314(v83, v84, v85);
}

uint64_t sub_1000FAC2C( uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    uint64_t v12 = swift_errorRetain(a1);
    uint64_t v13 = static os_log_type_t.error.getter(v12);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v14 = qword_10023DFB8;
    uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + 16) = xmmword_1001A5EA0;
    uint64_t v22 = a1;
    swift_errorRetain(a1);
    uint64_t v17 = sub_100098CD8(&qword_1002357C0);
    uint64_t v18 = String.init<A>(describing:)(&v22, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10009914C();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "CloudSync: Database Error from fetchZoneChanges: %@",  51LL,  2LL,  v16);
    swift_bridgeObjectRelease(v16);
    sub_100112AC0(a1, 1);
  }

  else
  {
    uint64_t v11 = static os_log_type_t.default.getter(a1);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: Database fetchZoneChanges succeeded",  46LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1001045F0(a4, a5);
  }

  return a6(a1, v8);
}

uint64_t sub_1000FADF8(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  int v29 = a2 & 1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __n128 v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass(0LL, v11);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for DispatchQoS.QoSClass.default(_:),  v14);
  uint64_t v18 = (void *)static OS_dispatch_queue.global(qos:)(v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v19 = swift_allocObject(&unk_10020E568, 57LL, 7LL);
  uint64_t v20 = v30;
  uint64_t v21 = v31;
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = v20;
  *(void *)(v19 + 32) = a5;
  *(void *)(v19 + 40) = v21;
  uint64_t v22 = v28;
  *(void *)(v19 + 48) = v28;
  *(_BYTE *)(v19 + 56) = v29;
  aBlock[4] = sub_100113098;
  uint64_t v37 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E580;
  uint64_t v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  swift_retain(v21);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v26 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v7, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v33);
  return swift_release(v37);
}

id sub_1000FB0B0( uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, uint64_t a4, void *a5, int a6)
{
  LODWORD(v6) = a6;
  id v110 = a5;
  uint64_t v100 = a4;
  uint64_t v99 = a3;
  uint64_t v98 = a2;
  uint64_t v103 = type metadata accessor for URL(0LL);
  uint64_t v109 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v108 = &v96[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  id v117 = &v96[-v10];
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v13 = qword_10023DFB8;
  uint64_t v111 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v111, 72LL, 7LL);
  __int128 v101 = xmmword_1001A5EA0;
  *(_OWORD *)(v14 + 16) = xmmword_1001A5EA0;
  uint64_t v15 = sub_100098CD8(&qword_1002366B8);
  *(void *)(v14 + 56) = v15;
  uint64_t v16 = (void *)sub_1000A4318(&qword_1002366C0, &qword_1002366B8, (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v14 + 64) = v16;
  *(void *)(v14 + 32) = a1;
  swift_bridgeObjectRetain(a1);
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "zoneIDs changed: %@", 19LL, 2LL, v14);
  swift_bridgeObjectRelease(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v32 = a1;
    }
    else {
      uint64_t v32 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    id result = (id)_CocoaArrayWrapper.endIndex.getter(v32);
    uint64_t v17 = (uint64_t)result;
    if (result) {
      goto LABEL_5;
    }
LABEL_22:
    uint64_t v30 = swift_bridgeObjectRelease(a1);
    unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_23;
  }

  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  id result = (id)swift_bridgeObjectRetain(a1);
  if (!v17) {
    goto LABEL_22;
  }
LABEL_5:
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_55;
  }

  uint64_t v115 = v16;
  uint64_t v116 = (void (*)(_BYTE *, uint64_t))v15;
  LODWORD(v118) = v6;
  for (uint64_t i = 0LL; i != v17; ++i)
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    }
    else {
      id v20 = *(id *)(a1 + 8 * i + 32);
    }
    uint64_t v21 = v20;
    id v22 = [v20 zoneName];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    if (v23 == 0xD000000000000016LL && v25 == 0x80000001001D0F90LL)
    {

      swift_bridgeObjectRelease(0x80000001001D0F90LL);
    }

    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, 0xD000000000000016LL, 0x80000001001D0F90LL, 0LL);
      uint64_t v27 = swift_bridgeObjectRelease(v25);
      if ((v26 & 1) != 0)
      {
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        uint64_t v28 = *(void *)(aBlock[0] + 16LL);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        uint64_t v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v21);
        specialized ContiguousArray._endMutation()(v29);
      }
    }
  }

  uint64_t v30 = swift_bridgeObjectRelease(a1);
  unint64_t v31 = aBlock[0];
  LOBYTE(v6) = (_BYTE)v118;
  uint64_t v16 = v115;
  uint64_t v15 = (uint64_t)v116;
LABEL_23:
  uint64_t v33 = static os_log_type_t.default.getter(v30);
  uint64_t v34 = qword_10023DFB8;
  uint64_t v35 = swift_allocObject(v111, 72LL, 7LL);
  *(_OWORD *)(v35 + 16) = v101;
  *(void *)(v35 + 56) = v15;
  *(void *)(v35 + 64) = v16;
  *(void *)(v35 + 32) = v31;
  swift_retain(v31);
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "zoneIDs changed(after filter): %@", 33LL, 2LL, v35);
  id result = (id)swift_bridgeObjectRelease(v35);
  if ((v31 & 0x8000000000000000LL) != 0 || (v31 & 0x4000000000000000LL) != 0)
  {
LABEL_53:
    uint64_t v95 = swift_retain(v31);
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v95);
    id result = (id)swift_release(v31);
  }

  else
  {
    uint64_t v36 = *(void *)(v31 + 16);
  }

  uint64_t v37 = v103;
  if (!v36)
  {
LABEL_50:
    uint64_t v92 = static os_log_type_t.default.getter(result);
    uint64_t v93 = qword_10023DFB8;
    uint64_t v94 = swift_allocObject(v111, 72LL, 7LL);
    *(_OWORD *)(v94 + 16) = v101;
    *(void *)(v94 + 56) = v15;
    *(void *)(v94 + 64) = v16;
    *(void *)(v94 + 32) = v31;
    os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "zoneIDs is empty, nothing to fetch", 34LL, 2LL, v94);
    swift_bridgeObjectRelease(v94);
    return (id)v98(0LL, 0LL);
  }

  if (v36 < 1)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  int v97 = v6 & 1;
  uint64_t v107 = v100 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  unint64_t v106 = v31 & 0xC000000000000001LL;
  swift_retain(v31);
  uint64_t v15 = 0LL;
  Swift::Int v38 = (Swift::Int)_swiftEmptyDictionarySingleton;
  __int128 v104 = xmmword_1001A6F30;
  uint64_t v102 = (dispatch_queue_s *)v31;
  uint64_t v105 = v36;
  do
  {
    if (v106) {
      unint64_t v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v31);
    }
    else {
      unint64_t v43 = *(id *)(v31 + 8 * v15 + 32);
    }
    uint64_t v16 = v43;
    id v44 = [objc_allocWithZone(CKFetchRecordZoneChangesConfiguration) init];
    uint64_t v45 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
    uint64_t v46 = (uint64_t)v108;
    uint64_t v47 = v109;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v109 + 16))(v108, v107 + *(int *)(v45 + 28), v37);
    id v48 = [v110 scope];
    uint64_t v6 = (uint64_t)v117;
    sub_1000EE83C(v46, (uint64_t)v48, v16);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v49(v46, v37);
    id v118 = (id)sub_1000EEA18(v6);
    uint64_t v50 = (void *)sub_1000EEA18(v6);
    [v44 setPreviousServerChangeToken:v50];

    uint64_t v116 = (void (*)(_BYTE *, uint64_t))v49;
    if ((v38 & 0xC000000000000001LL) != 0)
    {
      if (v38 < 0) {
        uint64_t v51 = v38;
      }
      else {
        uint64_t v51 = v38 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v52 = v16;
      id v53 = v44;
      uint64_t v54 = __CocoaDictionary.count.getter(v51);
      if (__OFADD__(v54, 1LL))
      {
        __break(1u);
        goto LABEL_53;
      }

      Swift::Int v38 = sub_10010C714(v51, v54 + 1);
    }

    else
    {
      uint64_t v55 = v16;
      id v56 = v44;
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
    aBlock[0] = v38;
    id v114 = v44;
    sub_10009DAC4((uint64_t)v44, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v115 = (void *)aBlock[0];

    uint64_t v58 = swift_bridgeObjectRelease(0x8000000000000000LL);
    unsigned int v112 = static os_log_type_t.default.getter(v58);
    uint64_t v113 = qword_10023DFB8;
    uint64_t v59 = swift_allocObject(v111, 112LL, 7LL);
    *(_OWORD *)(v59 + 16) = v104;
    id v60 = [v16 zoneName];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    uint64_t v63 = v62;

    *(void *)(v59 + 56) = &type metadata for String;
    unint64_t v64 = sub_10009914C();
    *(void *)(v59 + 64) = v64;
    *(void *)(v59 + 32) = v61;
    *(void *)(v59 + 40) = v63;
    if (!v118)
    {
      id v39 = 0LL;
      uint64_t v40 = (void *)(v59 + 72);
      *(void *)(v59 + 96) = &type metadata for String;
      *(void *)(v59 + 104) = v64;
      Swift::Int v38 = (Swift::Int)v115;
      uint64_t v41 = v116;
LABEL_30:
      *uint64_t v40 = 7104878LL;
      unint64_t v42 = 0xE300000000000000LL;
      goto LABEL_31;
    }

    id v65 = [v118 data];
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
    unint64_t v68 = v67;

    Data.hexString.getter(v66, v68);
    uint64_t v70 = v69;
    unint64_t v42 = v71;
    sub_100099394(v66, v68);
    uint64_t v40 = (void *)(v59 + 72);
    *(void *)(v59 + 96) = &type metadata for String;
    *(void *)(v59 + 104) = v64;
    if (!v42)
    {
      unint64_t v31 = (unint64_t)v102;
      uint64_t v37 = v103;
      Swift::Int v38 = (Swift::Int)v115;
      uint64_t v41 = v116;
      id v39 = v118;
      goto LABEL_30;
    }

    *uint64_t v40 = v70;
    unint64_t v31 = (unint64_t)v102;
    uint64_t v37 = v103;
    Swift::Int v38 = (Swift::Int)v115;
    uint64_t v41 = v116;
    id v39 = v118;
LABEL_31:
    ++v15;
    *(void *)(v59 + 80) = v42;
    os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, v113, "Old change token for %@: %@", 27LL, 2LL, v59);

    swift_bridgeObjectRelease(v59);
    v41(v117, v37);
  }

  while (v105 != v15);
  uint64_t v72 = swift_release(v31);
  uint64_t v73 = static os_log_type_t.default.getter(v72);
  uint64_t v74 = qword_10023DFB8;
  uint64_t v75 = swift_allocObject(v111, 72LL, 7LL);
  *(_OWORD *)(v75 + 16) = v101;
  *(void *)(v75 + 56) = sub_100098CD8(&qword_1002366C8);
  *(void *)(v75 + 64) = sub_1000A4318( &qword_1002366D0,  &qword_1002366C8,  (uint64_t)&protocol conformance descriptor for [A : B]);
  *(void *)(v75 + 32) = v38;
  swift_bridgeObjectRetain(v38);
  os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "optionsByRecordZoneID: %@", 25LL, 2LL, v75);
  swift_bridgeObjectRelease(v75);
  uint64_t v76 = swift_allocObject(&unk_10020E5B8, 24LL, 7LL);
  *(void *)(v76 + 16) = _swiftEmptyArrayStorage;
  uint64_t v15 = swift_allocObject(&unk_10020D708, 24LL, 7LL);
  *(void *)(v15 + 16) = _swiftEmptyArrayStorage;
  sub_1000A4A64(0LL, &qword_1002366D8, &OBJC_CLASS___CKFetchRecordZoneChangesOperation_ptr);
  swift_retain(v31);
  swift_bridgeObjectRetain(v38);
  v121.value._rawValue = (void *)v31;
  v121.is_nil = v38;
  uint64_t v77 = (void *)CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v121, v122);
  [v77 setCallbackQueue:*(void *)(v100 + 80)];
  id result = [v77 configuration];
  if (!result) {
    goto LABEL_56;
  }
  uint64_t v78 = result;
  [result setAutomaticallyRetryNetworkFailures:0];

  id result = [v77 configuration];
  if (result)
  {
    uint64_t v79 = result;
    swift_bridgeObjectRelease(v38);
    [v79 setDiscretionaryNetworkBehavior:0];

    [v77 setFetchAllChanges:1];
    swift_retain(v15);
    CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_1001130AC, v15);
    swift_retain(v76);
    CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_1001130B8, v76);
    uint64_t v80 = swift_allocObject(&unk_10020E5E0, 56LL, 7LL);
    char v81 = v97;
    *(_BYTE *)(v80 + 16) = v97;
    uint64_t v82 = v100;
    *(void *)(v80 + 24) = v100;
    *(void *)(v80 + 32) = v15;
    id v83 = v110;
    *(void *)(v80 + 40) = v76;
    *(void *)(v80 + 48) = v83;
    swift_retain(v15);
    swift_retain(v76);
    swift_retain(v82);
    id v84 = v83;
    CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(sub_1001130FC, v80);
    uint64_t v85 = swift_allocObject(&unk_10020E608, 56LL, 7LL);
    *(_BYTE *)(v85 + 16) = v81;
    *(void *)(v85 + 24) = v102;
    *(void *)(v85 + 32) = v82;
    uint64_t v86 = v99;
    *(void *)(v85 + 40) = v98;
    *(void *)(v85 + 48) = v86;
    swift_retain(v82);
    swift_retain(v86);
    CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(sub_100113194, v85);
    unint64_t v31 = *(void *)(v82 + 64);
    uint64_t v87 = swift_allocObject(&unk_10020E630, 32LL, 7LL);
    *(void *)(v87 + 16) = v77;
    *(void *)(v87 + 24) = v84;
    uint64_t v16 = (void *)swift_allocObject(&unk_10020E658, 32LL, 7LL);
    void v16[2] = sub_1001131D4;
    v16[3] = v87;
    aBlock[4] = sub_100113AC8;
    uint64_t v120 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2CA0;
    aBlock[3] = &unk_10020E670;
    uint64_t v88 = _Block_copy(aBlock);
    unint64_t v89 = v120;
    id v90 = v84;
    id v91 = v77;
    swift_retain(v16);
    swift_release(v89);
    dispatch_sync((dispatch_queue_t)v31, v88);

    _Block_release(v88);
    LOBYTE(v91) = swift_isEscapingClosureAtFileLocation(v16, "", 123LL, 738LL, 34LL, 1LL);
    swift_release(v87);
    swift_release(v76);
    swift_release(v15);
    id result = (id)swift_release(v16);
    __break(1u);
    goto LABEL_50;
  }

void sub_1000FBC1C(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v7 = qword_10023DFB8;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001A5EA0;
  id v10 = a1;
  id v11 = [v10 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v9 + 64) = v15;
  *(void *)(v9 + 32) = v12;
  *(void *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "RecordID changed: %@", 20LL, 2LL, v9);
  swift_bridgeObjectRelease(v9);
  char v16 = a3;
  if ((a3 & 1) != 0)
  {
    uint64_t v17 = swift_errorRetain(a2);
    uint64_t v18 = static os_log_type_t.error.getter(v17);
    uint64_t v19 = qword_10023DFB8;
    uint64_t v20 = swift_allocObject(v8, 112LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_1001A6F30;
    id v21 = v10;
    id v22 = [v21 description];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = v15;
    *(void *)(v20 + 32) = v23;
    *(void *)(v20 + 40) = v25;
    char v26 = a2;
    v52[0] = a2;
    swift_errorRetain(a2);
    uint64_t v27 = sub_100098CD8(&qword_1002357C0);
    uint64_t v28 = String.init<A>(describing:)(v52, v27);
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v15;
    *(void *)(v20 + 72) = v28;
    *(void *)(v20 + 80) = v29;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "%@ failed to be fetched: %@", 27LL, 2LL, v20, a4);
  }

  else
  {
    swift_beginAccess(a4 + 16, v52, 33LL, 0LL);
    id v30 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    unint64_t v32 = *(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v31 = *(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v32 >= v31 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
    }
    uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v33);
    uint64_t v34 = swift_endAccess(v52);
    uint64_t v35 = IsAppleInternalBuild(v34);
    if ((_DWORD)v35) {
      int v36 = static os_log_type_t.default.getter(v35);
    }
    else {
      int v36 = static os_log_type_t.debug.getter(v35);
    }
    LODWORD(a4) = v36;
    uint64_t v37 = qword_10023DFB8;
    uint64_t v20 = swift_allocObject(v8, 112LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_1001A6F30;
    id v38 = [v10 recordName];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v41 = v40;

    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = v15;
    *(void *)(v20 + 32) = v39;
    *(void *)(v20 + 40) = v41;
    id v42 = [v30 encryptedValues];
    id v43 = [v42 allKeys];
    swift_unknownObjectRelease(v42);
    uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String);

    char v26 = a2;
    sub_10010BF1C(a2, 0);
    uint64_t v45 = sub_100110B98(v44, v30);
    sub_100112C7C(a2, 0);
    swift_bridgeObjectRelease(v44);
    uint64_t v46 = sub_100098CD8(&qword_100234E40);
    uint64_t v47 = Array.description.getter(v45, v46);
    uint64_t v49 = v48;
    swift_bridgeObjectRelease(v45);
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v15;
    *(void *)(v20 + 72) = v47;
    *(void *)(v20 + 80) = v49;
    os_log(_:dso:log:_:_:)(a4, &_mh_execute_header, v37, "CKRecord fetched: %@ - %@", 25LL, 2LL, v20, a4);
  }

  swift_bridgeObjectRelease(v20);
  sub_100112C7C(v26, v16 & 1);
}

uint64_t sub_1000FC008(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void **)(a4 + 16);
  uint64_t v8 = static os_log_type_t.debug.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v9 = qword_10023DFB8;
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1001A5EA0;
  *(void *)(v11 + 56) = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
  *(void *)(v11 + 64) = sub_100112958( (unint64_t *)&unk_100236ED0,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v11 + 32) = a1;
  id v12 = a1;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Record deleted: %@", 18LL, 2LL, v11);
  swift_bridgeObjectRelease(v11);
  swift_beginAccess(v7, v20, 33LL, 0LL);
  uint64_t v13 = *v7;
  id v14 = v12;
  swift_bridgeObjectRetain(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  *uint64_t v7 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = sub_10018B95C(0LL, v13[2] + 1LL, 1, v13);
    *uint64_t v7 = v13;
  }

  unint64_t v17 = v13[2];
  unint64_t v16 = v13[3];
  if (v17 >= v16 >> 1)
  {
    uint64_t v13 = sub_10018B95C((void *)(v16 > 1), v17 + 1, 1, v13);
    *uint64_t v7 = v13;
  }

  v13[2] = v17 + 1;
  uint64_t v18 = &v13[3 * v17];
  v18[4] = v14;
  v18[5] = a2;
  v18[6] = a3;
  return swift_endAccess(v20);
}

void sub_1000FC1E4( void *a1, void *a2, uint64_t a3, unint64_t a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  char v11 = a6 & 1;
  uint64_t v12 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v13 = qword_10023DFB8;
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001A6F30;
  v93[0] = v11;
  uint64_t v16 = String.init<A>(describing:)(v93, &type metadata for CloudCoordinator.DatabaseToken);
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  char v78 = v11;
  unint64_t v19 = sub_10009914C();
  *(void *)(v15 + 64) = v19;
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  id v20 = [a1 zoneName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v19;
  *(void *)(v15 + 72) = v21;
  *(void *)(v15 + 80) = v23;
  os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v13,  "record zone fetch complete, database, %@, zone, %@",  50LL,  2LL,  v15);
  swift_bridgeObjectRelease(v15);
  if ((a5 & 0x100) != 0)
  {
    uint64_t v64 = swift_errorRetain(a2);
    uint64_t v65 = static os_log_type_t.error.getter(v64);
    uint64_t v66 = qword_10023DFB8;
    uint64_t v67 = swift_allocObject(v14, 112LL, 7LL);
    *(_OWORD *)(v67 + 16) = xmmword_1001A6F30;
    v93[0] = v78;
    uint64_t v68 = String.init<A>(describing:)(v93, &type metadata for CloudCoordinator.DatabaseToken);
    *(void *)(v67 + 56) = &type metadata for String;
    *(void *)(v67 + 64) = v19;
    *(void *)(v67 + 32) = v68;
    *(void *)(v67 + 40) = v69;
    swift_getErrorValue(a2, v86, v83);
    uint64_t v70 = Error.localizedDescription.getter(v84, v85);
    *(void *)(v67 + 96) = &type metadata for String;
    *(void *)(v67 + 104) = v19;
    *(void *)(v67 + 72) = v70;
    *(void *)(v67 + 80) = v71;
    os_log(_:dso:log:_:_:)( v65,  &_mh_execute_header,  v66,  "Error fetching zone changes for %@ database: %@",  47LL,  2LL,  v67);
    swift_bridgeObjectRelease(v67);
    sub_1000FF954((uint64_t)a2, 1);
    sub_1001131F4(a2, a3, a4, a5, 1);
  }

  else
  {
    uint64_t v24 = (uint64_t *)(a8 + 16);
    uint64_t v25 = (uint64_t *)(a9 + 16);
    id v26 = a2;
    unsigned int v77 = static os_log_type_t.default.getter(v26);
    uint64_t v75 = qword_10023DFB8;
    uint64_t v27 = swift_allocObject(v14, 232LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_1001A8EC0;
    v93[0] = v78;
    uint64_t v28 = String.init<A>(describing:)(v93, &type metadata for CloudCoordinator.DatabaseToken);
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = v19;
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v29;
    uint64_t v80 = a1;
    id v30 = a1;
    unint64_t v31 = v26;
    id v32 = [v30 zoneName];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v35 = v34;

    *(void *)(v27 + 96) = &type metadata for String;
    *(void *)(v27 + 104) = v19;
    *(void *)(v27 + 72) = v33;
    *(void *)(v27 + 80) = v35;
    id v36 = [v31 data];
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v39 = v38;

    Data.hexString.getter(v37, v39);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    sub_100099394(v37, v39);
    *(void *)(v27 + 136) = &type metadata for String;
    *(void *)(v27 + 144) = v19;
    *(void *)(v27 + 112) = v41;
    *(void *)(v27 + 120) = v43;
    swift_beginAccess(a8 + 16, v93, 0LL, 0LL);
    uint64_t v44 = *(void *)(a8 + 16);
    if ((unint64_t)v44 >> 62)
    {
      if (v44 < 0) {
        uint64_t v72 = *v24;
      }
      else {
        uint64_t v72 = v44 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v24);
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v44);
    }

    else
    {
      uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    *(void *)(v27 + 176) = &type metadata for Int;
    *(void *)(v27 + 184) = &protocol witness table for Int;
    *(void *)(v27 + 152) = v45;
    swift_beginAccess(v25, v92, 0LL, 0LL);
    uint64_t v46 = *(void *)(*v25 + 16);
    *(void *)(v27 + 216) = &type metadata for Int;
    *(void *)(v27 + 224) = &protocol witness table for Int;
    *(void *)(v27 + 192) = v46;
    os_log(_:dso:log:_:_:)( v77,  &_mh_execute_header,  v75,  "record zone fetch database, %@, zone, %@, token: %@, records changed: %d, deleted: %d,",  86LL,  2LL,  v27);
    swift_bridgeObjectRelease(v27);
    uint64_t v47 = swift_beginAccess(a7 + 120, v91, 0LL, 0LL);
    uint64_t v48 = *(void *)(a7 + 120);
    __chkstk_darwin(v47);
    uint64_t v49 = swift_bridgeObjectRetain(v48);
    sub_1001110E0(v49, (void (*)(id, uint64_t (*)(uint64_t), _OWORD *))sub_1001131EC);
    swift_bridgeObjectRelease(v48);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(a7 + 24, v50);
    if (Strong)
    {
      uint64_t v52 = Strong;
      swift_beginAccess(v25, v90, 0LL, 0LL);
      uint64_t v53 = *v25;
      swift_beginAccess(v24, v89, 0LL, 0LL);
      uint64_t v54 = *v24;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
      sub_10010E9F0(a7, v53, v54, v52);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v54);
      swift_unknownObjectRelease(v52);
    }

    swift_beginAccess(v24, v88, 1LL, 0LL);
    uint64_t v55 = *v24;
    *uint64_t v24 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v55);
    swift_beginAccess(v25, v87, 1LL, 0LL);
    uint64_t v56 = *v25;
    *uint64_t v25 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v56);
    uint64_t v57 = a7 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    uint64_t v58 = *(void **)(v57 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 32));
    swift_bridgeObjectRetain(v58);
    id v59 = [v80 zoneName];
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    uint64_t v62 = v61;

    LOBYTE(v59) = sub_1001228BC(v60, v62, v58);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v62);
    if ((v59 & 1) != 0)
    {
      id v63 = v31;
      sub_10010488C(a10, v80, a2);
    }

    else
    {
    }
  }

void sub_1000FC844(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  id v7 = a1;
  uint64_t v8 = swift_bridgeObjectRetain(v6);
  uint64_t v9 = (void *)sub_1001109B8(v8, v7);
  swift_bridgeObjectRelease(v6);

  if (v9)
  {
    swift_beginAccess(a4, v28, 33LL, 0LL);
    id v10 = v7;
    uint64_t v11 = sub_100111B30(a4, v10);

    uint64_t v12 = *a4;
    if ((unint64_t)*a4 >> 62)
    {
      if (v12 < 0) {
        uint64_t v27 = *a4;
      }
      else {
        uint64_t v27 = v12 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*a4);
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v12);
      if (v13 >= v11)
      {
LABEL_4:
        sub_100111F20(v11, v13);
        uint64_t v14 = swift_endAccess(v28);
        uint64_t v11 = static os_log_type_t.default.getter(v14);
        if (qword_100234C18 == -1)
        {
LABEL_5:
          uint64_t v15 = qword_10023DFB8;
          uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v17 = swift_allocObject(v16, 112LL, 7LL);
          *(_OWORD *)(v17 + 16) = xmmword_1001A6F30;
          uint64_t v18 = CKRecord.recordType.getter(v17);
          uint64_t v20 = v19;
          *(void *)(v17 + 56) = &type metadata for String;
          unint64_t v21 = sub_10009914C();
          *(void *)(v17 + 64) = v21;
          *(void *)(v17 + 32) = v18;
          *(void *)(v17 + 40) = v20;
          id v22 = v9;
          id v23 = [v22 description];
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          uint64_t v26 = v25;

          *(void *)(v17 + 96) = &type metadata for String;
          *(void *)(v17 + 104) = v21;
          *(void *)(v17 + 72) = v24;
          *(void *)(v17 + 80) = v26;
          os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v15,  "Don't send this record as part of update list as it is in queue for deletion: %@, %@",  84LL,  2LL,  v17);

          swift_bridgeObjectRelease(v17);
          return;
        }

uint64_t sub_1000FCA64( uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  char v8 = a3 & 1;
  uint64_t v9 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v10 = qword_10023DFB8;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1001A6F30;
  char v36 = v8;
  uint64_t v13 = String.init<A>(describing:)(&v36, &type metadata for CloudCoordinator.DatabaseToken);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10009914C();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  *(void *)(v12 + 96) = sub_100098CD8(&qword_1002366B8);
  *(void *)(v12 + 104) = sub_1000A4318( &qword_1002366C0,  &qword_1002366B8,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v12 + 72) = a4;
  swift_bridgeObjectRetain(a4);
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Fetch record zone changes complete, database, %@, zoneIds, %@",  61LL,  2LL,  v12);
  uint64_t v17 = swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    uint64_t v24 = swift_errorRetain(a1);
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    uint64_t v26 = qword_10023DFB8;
    uint64_t v27 = swift_allocObject(v11, 112LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_1001A6F30;
    char v36 = v8;
    uint64_t v28 = String.init<A>(describing:)(&v36, &type metadata for CloudCoordinator.DatabaseToken);
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = v16;
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v29;
    swift_getErrorValue(a1, v35, v34);
    uint64_t v30 = Error.localizedDescription.getter(v34[1], v34[2]);
    *(void *)(v27 + 96) = &type metadata for String;
    *(void *)(v27 + 104) = v16;
    *(void *)(v27 + 72) = v30;
    *(void *)(v27 + 80) = v31;
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v26,  "Error fetching zone changes for %@ database: %@",  47LL,  2LL,  v27);
    swift_bridgeObjectRelease(v27);
    sub_1000FF954(a1, 1);
    swift_errorRetain(a1);
    a6(a1, 1LL);
    sub_100112AC0(a1, 1);
    return sub_100112AC0(a1, 1);
  }

  else
  {
    uint64_t v18 = static os_log_type_t.default.getter(v17);
    uint64_t v19 = qword_10023DFB8;
    uint64_t v20 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_1001A5EA0;
    char v36 = v8;
    uint64_t v21 = String.init<A>(describing:)(&v36, &type metadata for CloudCoordinator.DatabaseToken);
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = v16;
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v22;
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "Successfully fetched zone changes for database: %@",  50LL,  2LL,  v20);
    swift_bridgeObjectRelease(v20);
    return ((uint64_t (*)(void, void))a6)(0LL, 0LL);
  }

id sub_1000FCD54(void *a1, void *a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v5 = qword_10023DFB8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
  *(void *)(v7 + 56) = sub_1000A4A64(0LL, &qword_1002366D8, &OBJC_CLASS___CKFetchRecordZoneChangesOperation_ptr);
  *(void *)(v7 + 64) = sub_100112958( (unint64_t *)&unk_1002366E0,  &qword_1002366D8,  &OBJC_CLASS___CKFetchRecordZoneChangesOperation_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v7 + 32) = a1;
  id v8 = a1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Adding Cloud operation %@", 25LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  return [a2 addOperation:v8];
}

void sub_1000FCE7C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(v4 + 40))
  {
    switch(a1)
    {
      case 1LL:
        uint64_t v35 = static os_log_type_t.default.getter(v11);
        if (qword_100234C18 != -1) {
          swift_once(&qword_100234C18, sub_10018A920);
        }
        uint64_t v36 = qword_10023DFB8;
        uint64_t v37 = "NOT USING PUBLIC DB";
        break;
      case 3LL:
        uint64_t v35 = static os_log_type_t.default.getter(v11);
        if (qword_100234C18 != -1) {
          swift_once(&qword_100234C18, sub_10018A920);
        }
        uint64_t v36 = qword_10023DFB8;
        uint64_t v37 = "NOT USING SHARED DB";
        break;
      case 2LL:
        id v31 = sub_1000F3F2C();
        id v42 = [v31 privateCloudDatabase];

        sub_1000F8E24(v42, 0, a2 & 1, a3, a4);
        return;
      default:
        uint64_t v40 = static os_log_type_t.error.getter(v11);
        if (qword_100234C18 != -1) {
          swift_once(&qword_100234C18, sub_10018A920);
        }
        uint64_t v36 = qword_10023DFB8;
        uint64_t v37 = "Unknown CKDatabase.Scope!";
        uint64_t v38 = v40;
        uint64_t v39 = 25LL;
        goto LABEL_26;
    }

    uint64_t v38 = v35;
    uint64_t v39 = 19LL;
LABEL_26:
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v36, v37, v39, 2LL, _swiftEmptyArrayStorage);
    return;
  }

  uint64_t v14 = static os_log_type_t.default.getter(v11);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v15 = qword_10023DFB8;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 112LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1001A6F30;
  unint64_t v18 = sub_10009914C();
  unint64_t v19 = v18;
  uint64_t v20 = 0x206563726F46LL;
  if ((a2 & 1) == 0) {
    uint64_t v20 = 0LL;
  }
  unint64_t v21 = 0xE000000000000000LL;
  if ((a2 & 1) != 0) {
    unint64_t v21 = 0xE600000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = v18;
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v21;
  uint64_t v22 = *(void **)(v4 + 40);
  if (v22)
  {
    id v23 = [v22 date];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v26 = v14;
    id v27 = [v24 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    uint64_t v14 = v26;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }

  else
  {
    uint64_t v28 = 0LL;
    uint64_t v30 = 0LL;
  }

  v43[0] = v28;
  v43[1] = v30;
  uint64_t v32 = sub_100098CD8(&qword_100236640);
  uint64_t v33 = String.init<A>(describing:)(v43, v32);
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v19;
  *(void *)(v17 + 72) = v33;
  *(void *)(v17 + 80) = v34;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "CloudSync: %@Fetch already in-progress: %@", 42LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
}

void sub_1000FD248()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v67 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v66 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v69 = v0;
  uint64_t v12 = *(void **)(v0 + 72);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))( v11,  enum case for DispatchPredicate.notOnQueue(_:),  v7,  v9);
  uint64_t v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v14 & 1) != 0)
  {
    uint64_t v64 = v13;
    uint64_t v65 = v5;
    id v63 = v4;
    uint64_t v13 = dispatch_group_create();
    LODWORD(v70) = static os_log_type_t.default.getter(v13);
    if (qword_100234C18 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100234C18, sub_10018A920);
LABEL_3:
  dispatch_group_t v68 = (dispatch_group_t)qword_10023DFB8;
  uint64_t v61 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v15 = swift_allocObject(v61, 72LL, 7LL);
  __int128 v62 = xmmword_1001A5EA0;
  *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
  uint64_t v16 = v69 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v17 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  uint64_t v18 = *(void *)(v16 + *(int *)(v17 + 32));
  uint64_t v19 = swift_bridgeObjectRetain(v18);
  uint64_t v20 = Array.description.getter(v19, &type metadata for String);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v18);
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v23 = sub_10009914C();
  *(void *)(v15 + 64) = v23;
  *(void *)(v15 + 32) = v20;
  *(void *)(v15 + 40) = v22;
  os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v68, "setupZones: %@", 14LL, 2LL, v15);
  swift_bridgeObjectRelease(v15);
  uint64_t v24 = *(void *)(v16 + *(int *)(v17 + 32));
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v26 = swift_bridgeObjectRetain(v24);
    dispatch_group_t v68 = v13;
    uint64_t v57 = v26;
    id v27 = (void *)(v26 + 40);
    __int128 v58 = xmmword_1001A6F30;
    uint64_t v60 = v1;
    uint64_t v59 = v2;
    do
    {
      uint64_t v70 = v25;
      uint64_t v28 = *(v27 - 1);
      uint64_t v29 = *v27;
      swift_bridgeObjectRetain(*v27);
      dispatch_group_t v30 = v68;
      dispatch_group_enter(v68);
      uint64_t v32 = static os_log_type_t.default.getter(v31);
      uint64_t v33 = qword_10023DFB8;
      uint64_t v34 = v61;
      uint64_t v35 = swift_allocObject(v61, 72LL, 7LL);
      *(_OWORD *)(v35 + 16) = v62;
      *(void *)(v35 + 56) = &type metadata for String;
      *(void *)(v35 + 64) = v23;
      *(void *)(v35 + 32) = v28;
      *(void *)(v35 + 40) = v29;
      swift_bridgeObjectRetain(v29);
      os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Attempting to create zone: %@", 29LL, 2LL, v35);
      swift_bridgeObjectRelease(v35);
      uint64_t v36 = (void *)swift_allocObject(&unk_10020E4F0, 40LL, 7LL);
      v36[2] = v28;
      v36[3] = v29;
      v36[4] = v30;
      swift_bridgeObjectRetain(v29);
      uint64_t v37 = static os_log_type_t.default.getter(v30);
      uint64_t v38 = qword_10023DFB8;
      uint64_t v39 = swift_allocObject(v34, 112LL, 7LL);
      *(_OWORD *)(v39 + 16) = v58;
      *(void *)(v39 + 56) = &type metadata for Int;
      *(void *)(v39 + 64) = &protocol witness table for Int;
      *(void *)(v39 + 32) = 0LL;
      *(void *)(v39 + 96) = &type metadata for String;
      *(void *)(v39 + 104) = v23;
      *(void *)(v39 + 72) = v28;
      *(void *)(v39 + 80) = v29;
      swift_bridgeObjectRetain(v29);
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Setup zone (attempt: %d): %@", 28LL, 2LL, v39);
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = (void *)swift_allocObject(&unk_10020E518, 64LL, 7LL);
      v40[2] = v28;
      v40[3] = v29;
      uint64_t v41 = v69;
      uint64_t v42 = v60;
      v40[4] = v69;
      v40[5] = sub_100113028;
      v40[6] = v36;
      v40[7] = 0LL;
      aBlock[4] = sub_100112EF0;
      uint64_t v73 = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000F2C54;
      aBlock[3] = &unk_10020E530;
      uint64_t v43 = _Block_copy(aBlock);
      swift_bridgeObjectRetain(v29);
      swift_retain(v41);
      uint64_t v44 = swift_retain(v36);
      uint64_t v45 = v66;
      static DispatchQoS.unspecified.getter(v44);
      uint64_t v71 = _swiftEmptyArrayStorage;
      uint64_t v46 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v47 = sub_100098CD8((uint64_t *)&unk_100235790);
      uint64_t v48 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v49 = v63;
      uint64_t v50 = v46;
      uint64_t v51 = v59;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v47, v48, v42, v50);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v49, v43);
      _Block_release(v43);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v42);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v65);
      uint64_t v52 = v73;
      swift_bridgeObjectRelease(v29);
      swift_release(v36);
      uint64_t v53 = v52;
      uint64_t v54 = v70;
      swift_release(v53);
      v27 += 2;
      uint64_t v25 = v54 - 1;
    }

    while (v25);
    uint64_t v24 = swift_bridgeObjectRelease(v57);
    uint64_t v13 = v68;
  }

  uint64_t v55 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  qword_10023DFB8,  "Waiting for all zone create tasks to complete.",  46LL,  2LL,  _swiftEmptyArrayStorage);
  OS_dispatch_group.wait()();
}

void sub_1000FD80C(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  if (a1)
  {
    uint64_t v6 = swift_errorRetain(a1);
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v8 = qword_10023DFB8;
    uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1001A5EA0;
    uint64_t v21 = a1;
    swift_errorRetain(a1);
    uint64_t v11 = sub_100098CD8(&qword_1002357C0);
    uint64_t v12 = String.init<A>(describing:)(&v21, v11);
    uint64_t v14 = v13;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10009914C();
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Error creating zone: %@", 23LL, 2LL, v10);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v17 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v18 = qword_10023DFB8;
    uint64_t v19 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_1001A5EA0;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_10009914C();
    *(void *)(v20 + 32) = a2;
    *(void *)(v20 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Completed Zone Setup: %@", 24LL, 2LL, v20);
    swift_bridgeObjectRelease(v20);
  }

  dispatch_group_leave(a4);
}

uint64_t sub_1000FD9F4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = static os_log_type_t.default.getter(v13);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v17 = qword_10023DFB8;
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v19 = swift_allocObject(v18, 112LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_1001A6F30;
  *(void *)(v19 + 56) = &type metadata for Int;
  *(void *)(v19 + 64) = &protocol witness table for Int;
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 96) = &type metadata for String;
  *(void *)(v19 + 104) = sub_10009914C();
  *(void *)(v19 + 72) = a1;
  *(void *)(v19 + 80) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Setup zone (attempt: %d): %@", 28LL, 2LL, v19);
  swift_bridgeObjectRelease(v19);
  if (a3 > 2)
  {
    unint64_t v29 = sub_100110974();
    uint64_t v30 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v29, 0LL, 0LL);
    *uint64_t v31 = 3LL;
    v36();
    return swift_errorRelease(v30);
  }

  else
  {
    v32[1] = *(void *)(v5 + 72);
    uint64_t v20 = (void *)swift_allocObject(&unk_10020E3B0, 64LL, 7LL);
    v20[2] = a1;
    v20[3] = a2;
    uint64_t v21 = v36;
    uint64_t v22 = v37;
    v20[4] = v5;
    v20[5] = v21;
    v20[6] = v22;
    v20[7] = a3;
    aBlock[4] = sub_100112EF0;
    uint64_t v40 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020E3C8;
    unint64_t v23 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    swift_retain(v5);
    uint64_t v24 = swift_retain(v22);
    static DispatchQoS.unspecified.getter(v24);
    uint64_t v38 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v27 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v9, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
    return swift_release(v40);
  }

void sub_1000FDD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = objc_allocWithZone(&OBJC_CLASS___CKRecordZone);
  swift_bridgeObjectRetain(a2);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v14 = [v12 initWithZoneName:v13];

  sub_1000A4A64(0LL, &qword_100236698, &OBJC_CLASS___CKModifyRecordZonesOperation_ptr);
  uint64_t v15 = sub_100098CD8(&qword_100236588);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1001A8ED0;
  *(void *)(v16 + 32) = v14;
  uint64_t v32 = v16;
  specialized Array._endMutation()(v16);
  id v17 = v14;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v19 = v32;
  id v20 = (id)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)( *(Swift::OpaquePointer_optional *)(&v18 - 1),  v33);
  id v21 = sub_1000F44A8();
  [v20 setGroup:v21];

  uint64_t v22 = (void *)swift_allocObject(&unk_10020E400, 72LL, 7LL);
  v22[2] = v17;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a3;
  v22[6] = a1;
  v22[7] = a2;
  v22[8] = a6;
  swift_bridgeObjectRetain(a2);
  id v23 = v17;
  swift_retain(a5);
  swift_retain(a3);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_100112F30, v22);
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
    [v20 setQualityOfService:25];
  }
  id v24 = [v20 configuration];
  if (v24)
  {
    uint64_t v25 = v24;
    [v24 setAutomaticallyRetryNetworkFailures:0];

    id v26 = [v20 configuration];
    if (v26)
    {
      uint64_t v27 = v26;
      [v26 setDiscretionaryNetworkBehavior:0];

      uint64_t v28 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
      uint64_t v29 = swift_weakInit(v28 + 16, a3);
      __chkstk_darwin(v29);
      v31[2] = v28;
      v31[3] = v20;
      uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100236528);
      OS_dispatch_queue.sync<A>(execute:)(&v32, sub_100113CE0, v31, v30);
      swift_release(v28);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000FDFE4( uint64_t a1, char a2, void *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v22 = swift_errorRetain(a1);
    uint64_t v23 = static os_log_type_t.error.getter(v22);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v24 = qword_10023DFB8;
    uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + 16) = xmmword_1001A5EA0;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v27 = sub_100098CD8(&qword_1002357C0);
    uint64_t v28 = String.init<A>(describing:)(aBlock, v27);
    uint64_t v30 = v29;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_10009914C();
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Error creating zone: %@", 23LL, 2LL, v26);
    swift_bridgeObjectRelease(v26);
    uint64_t v31 = (void *)swift_allocObject(&unk_10020E428, 64LL, 7LL);
    v31[2] = a4;
    v31[3] = a5;
    v31[4] = a6;
    void v31[5] = a7;
    v31[6] = a8;
    v31[7] = a9;
    swift_retain(a5);
    swift_retain(a6);
    swift_bridgeObjectRetain(a8);
    id v32 = sub_1000F3F2C();
    uint64_t v33 = swift_allocObject(&unk_10020E450, 32LL, 7LL);
    *(void *)(v33 + 16) = sub_100112F7C;
    *(void *)(v33 + 24) = v31;
    aBlock[4] = sub_100113CF4;
    uint64_t v38 = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001040C0;
    aBlock[3] = &unk_10020E468;
    uint64_t v34 = _Block_copy(aBlock);
    uint64_t v35 = v38;
    swift_retain(v31);
    swift_release(v35);
    [v32 accountInfoWithCompletionHandler:v34];
    _Block_release(v34);
    swift_release(v31);

    return sub_100112AC0(a1, 1);
  }

  else
  {
    uint64_t v12 = static os_log_type_t.default.getter(a1);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v13 = qword_10023DFB8;
    uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
    *(void *)(v15 + 56) = sub_1000A4A64(0LL, &qword_1002366A0, &OBJC_CLASS___CKRecordZone_ptr);
    *(void *)(v15 + 64) = sub_100112958( &qword_1002366B0,  &qword_1002366A0,  &OBJC_CLASS___CKRecordZone_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v15 + 32) = a3;
    id v16 = a3;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Created Zone: %@", 16LL, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    return a4(0LL);
  }

void sub_1000FE30C( void *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = a6;
  uint64_t v68 = a8;
  uint64_t v69 = a5;
  uint64_t v70 = a7;
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v74 = *(void *)(v10 - 8);
  uint64_t v75 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v13 - 8);
  uint64_t v73 = v13;
  __n128 v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for DispatchTime(0LL, v14);
  uint64_t v17 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = type metadata accessor for DispatchQoS.QoSClass(0LL, v21);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v33 = swift_errorRetain(a1);
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v35 = qword_10023DFB8;
    uint64_t v36 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    *(_OWORD *)(v37 + 16) = xmmword_1001A5EA0;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v38 = sub_100098CD8(&qword_1002357C0);
    uint64_t v39 = String.init<A>(describing:)(aBlock, v38);
    uint64_t v41 = v40;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_10009914C();
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v41;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Unable to get account info - %@", 31LL, 2LL, v37);
    swift_bridgeObjectRelease(v37);
    swift_errorRetain(a1);
    ((void (*)(void *))v76)(a1);
    sub_100112C7C(a1, 1);
    sub_100112C7C(a1, 1);
  }

  else
  {
    id v28 = a1;
    if ([v28 accountStatus] == (id)3)
    {
      uint64_t v29 = static os_log_type_t.error.getter(3LL);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_10023DFB8,  "No account found, move on finish setup",  38LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v30 = sub_100110974();
      uint64_t v31 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v30, 0LL, 0LL);
      *id v32 = 1LL;
LABEL_16:
      v76();
      sub_100112C7C(a1, 0);
      swift_errorRelease(v31);
      return;
    }

    id v42 = [v28 supportsDeviceToDeviceEncryption];
    int v43 = (int)v42;
    uint64_t v44 = static os_log_type_t.error.getter(v42);
    if (!v43)
    {
      if (qword_100234C18 != -1)
      {
        uint64_t v65 = v44;
        swift_once(&qword_100234C18, sub_10018A920);
        uint64_t v44 = v65;
      }

      os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_10023DFB8,  "Error creating Zone. Try again when Manatee is Available",  56LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v62 = sub_100110974();
      uint64_t v31 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v62, 0LL, 0LL);
      *id v63 = 2LL;
      goto LABEL_16;
    }

    if (qword_100234C18 != -1)
    {
      uint64_t v64 = v44;
      swift_once(&qword_100234C18, sub_10018A920);
      uint64_t v44 = v64;
    }

    os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_10023DFB8,  "Failure creating Zone. retrying...",  34LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v25 + 104))( v27,  enum case for DispatchQoS.QoSClass.default(_:),  v24);
    uint64_t v66 = static OS_dispatch_queue.global(qos:)(v27);
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    static DispatchTime.now()(v45);
    + infix(_:_:)(v19, 30.0);
    uint64_t v46 = *(void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v47 = v71;
    v46(v19, v71);
    uint64_t v48 = (void *)swift_allocObject(&unk_10020E4A0, 64LL, 7LL);
    uint64_t v50 = v69;
    uint64_t v49 = v70;
    uint64_t v51 = v67;
    v48[2] = v69;
    v48[3] = v51;
    uint64_t v52 = v68;
    v48[4] = v49;
    v48[5] = v52;
    uint64_t v53 = v77;
    v48[6] = v76;
    v48[7] = v53;
    aBlock[4] = sub_100112FC4;
    uint64_t v80 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020E4B8;
    uint64_t v54 = _Block_copy(aBlock);
    swift_retain(v50);
    swift_bridgeObjectRetain(v49);
    uint64_t v55 = swift_retain(v53);
    static DispatchQoS.unspecified.getter(v55);
    char v78 = _swiftEmptyArrayStorage;
    uint64_t v56 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v57 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v58 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v59 = v57;
    uint64_t v60 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v59, v58, v75, v56);
    uint64_t v61 = (void *)v66;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v23, v16, v12, v54);
    sub_100112C7C(a1, 0);
    _Block_release(v54);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v12, v60);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v73);
    v46(v23, v47);
    swift_release(v80);
  }

uint64_t sub_1000FE934()
{
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v2 = static os_log_type_t.default.getter(v1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v3 = qword_10023DFB8;
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFB8,  "Add listener for CKAccountChanged",  33LL,  2LL,  _swiftEmptyArrayStorage);
  [v1 addObserver:v0 selector:"accountDidChange:" name:CKAccountChangedNotification object:0];
  uint64_t v4 = static os_log_type_t.default.getter( [v1 addObserver:v0 selector:"onIdentityUpdateNotification" name:CKIdentityUpdateNotification object:0]);
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v3,  "Add listener for CKIdentityUpdateNotification",  45LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v5 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v5 + 16, v0);
  uint64_t v6 = sub_100098CD8(&qword_1002366A8);
  uint64_t inited = swift_initStackObject(v6, &v13);
  *(_OWORD *)(inited + 16) = xmmword_1001A5EA0;
  uint64_t v8 = swift_allocObject(&unk_10020E360, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_100112EC8;
  *(void *)(v8 + 24) = v5;
  *(void *)(inited + 32) = 0xD00000000000001CLL;
  *(void *)(inited + 40) = 0x80000001001D0D10LL;
  *(void *)(inited + 48) = sub_10010BFD8;
  *(void *)(inited + 56) = v8;
  swift_retain(v5);
  uint64_t v9 = (void *)sub_10009EEC8(inited);
  uint64_t v10 = _s15audioaccessoryd24DarwinNotificationHelperC20notificationHandlersACSgSDySSyycG_tcfC_0(v9);

  swift_release(v5);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener);
  *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener) = v10;
  return swift_release(v11);
}

uint64_t sub_1000FEB34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1 + 16;
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_10023DFB8,  "Darwin CKIdentityUpdateNotification",  35LL,  2LL,  _swiftEmptyArrayStorage);
  swift_beginAccess(v10, v32, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v10);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v28 = *(void *)(result + 72);
    uint64_t v15 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
    swift_weakInit(v15 + 16, v14);
    aBlock[4] = sub_100112ED0;
    uint64_t v31 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020E378;
    id v16 = _Block_copy(aBlock);
    uint64_t v27 = v7;
    uint64_t v17 = v16;
    uint64_t v18 = swift_retain(v15);
    static DispatchQoS.unspecified.getter(v18);
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v19 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v26 = v6;
    uint64_t v21 = v3;
    uint64_t v22 = v20;
    uint64_t v23 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v2, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v26);
    swift_release(v14);
    uint64_t v24 = v31;
    swift_release(v15);
    return swift_release(v24);
  }

  return result;
}

uint64_t sub_1000FEDCC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = static os_log_type_t.default.getter(result);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v5 = qword_10023DFB8;
    uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10009914C();
    *(void *)(v7 + 32) = 0xD00000000000001ELL;
    *(void *)(v7 + 40) = 0x80000001001D0C70LL;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@", 2LL, 2LL, v7);
    uint64_t v8 = swift_bridgeObjectRelease(v7);
    if (*(_BYTE *)(v3 + 104) == 1)
    {
      uint64_t v9 = static os_log_type_t.default.getter(v8);
      os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_10023DFB8,  "Manatee already available",  25LL,  2LL,  _swiftEmptyArrayStorage);
    }

    else
    {
      sub_1001042A0(150.0);
    }

    return swift_release(v3);
  }

  return result;
}

uint64_t sub_1000FEF38(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v3 = qword_10023DFB8;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1001A5EA0;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10009914C();
  *(void *)(v5 + 32) = 0xD00000000000001ELL;
  *(void *)(v5 + 40) = 0x80000001001D0C70LL;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "%@", 2LL, 2LL, v5);
  uint64_t v6 = swift_bridgeObjectRelease(v5);
  if ((*(_BYTE *)(v1 + 104) & 1) == 0) {
    return sub_1001042A0(150.0);
  }
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  return os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_10023DFB8,  "Manatee already available",  25LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_1000FF098(uint64_t a1, dispatch_group_s *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (void *)((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v16 = *(void **)(v2 + 72);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t, __n128))(v12 + 104))( v15,  enum case for DispatchPredicate.notOnQueue(_:),  v11,  v13);
  v27[1] = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v11 = swift_allocObject(&unk_10020E298, 17LL, 7LL);
  *(_BYTE *)(v11 + 16) = 1;
  uint64_t v15 = (void *)(v11 + 16);
  uint64_t v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  uint64_t v18 = (void *)swift_allocObject(&unk_10020E2C0, 56LL, 7LL);
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v11;
  v18[5] = v17;
  v18[6] = v2;
  aBlock[4] = sub_100112E7C;
  uint64_t v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E2D8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain(v11);
  a2 = v17;
  uint64_t v20 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v23 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v22, v23, v5, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v29);
  uint64_t v24 = swift_release(v33);
  uint64_t v5 = static os_log_type_t.default.getter(v24);
  if (qword_100234C18 != -1) {
LABEL_5:
  }
    swift_once(&qword_100234C18, sub_10018A920);
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_10023DFB8,  "Waiting for all zone delete tasks to complete.",  46LL,  2LL,  _swiftEmptyArrayStorage);
  OS_dispatch_group.wait()();

  swift_beginAccess(v15, aBlock, 0LL, 0LL);
  uint64_t v25 = *(unsigned __int8 *)(v11 + 16);
  swift_release(v11);
  return v25;
}

void sub_1000FF3EC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  uint64_t v10 = v9;
  swift_bridgeObjectRetain(a2);
  v11._uint64_t countAndFlagsBits = a1;
  v11._object = a2;
  v12._uint64_t countAndFlagsBits = v8;
  v12._object = v10;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v11, v12).super.isa;
  sub_1000A4A64(0LL, &qword_100236698, &OBJC_CLASS___CKModifyRecordZonesOperation_ptr);
  uint64_t v14 = sub_100098CD8(&qword_100236588);
  uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001A8ED0;
  *(void *)(v15 + 32) = isa;
  LOBYTE(v33[0]) = v15;
  specialized Array._endMutation()(v15);
  id v16 = isa;
  v35.value._rawValue = _swiftEmptyArrayStorage;
  v35.is_nil = v33[0];
  uint64_t v17 = (void *)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v35, v36);
  uint64_t v18 = (void *)swift_allocObject(&unk_10020E310, 48LL, 7LL);
  v18[2] = a3;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a4;
  v33[4] = sub_100112EBC;
  uint64_t v34 = v18;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1107296256LL;
  _OWORD v33[2] = sub_1000FF930;
  v33[3] = &unk_10020E328;
  uint64_t v19 = _Block_copy(v33);
  uint64_t v20 = v34;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  id v21 = a4;
  swift_release(v20);
  [v17 setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
    [v17 setQualityOfService:25];
  }
  id v22 = [v17 configuration];
  if (!v22)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v23 = v22;
  [v22 setAutomaticallyRetryNetworkFailures:0];

  id v24 = [v17 configuration];
  if (!v24)
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v25 = v24;
  [v24 setDiscretionaryNetworkBehavior:0];

  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v28 = qword_10023DFB8;
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001A5EA0;
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10009914C();
  *(void *)(v30 + 32) = a1;
  *(void *)(v30 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Queuing operation to deleting zone: %@", 38LL, 2LL, v30);
  swift_bridgeObjectRelease(v30);
  id v31 = sub_1000F3F2C();
  id v32 = [v31 privateCloudDatabase];

  [v32 addOperation:v17];
}

void sub_1000FF728( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, dispatch_group_s *a7)
{
  if (a3)
  {
    uint64_t v9 = (_BYTE *)(a4 + 16);
    uint64_t v10 = swift_errorRetain(a3);
    uint64_t v11 = static os_log_type_t.error.getter(v10);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v12 = qword_10023DFB8;
    uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + 16) = xmmword_1001A5EA0;
    v25[0] = a3;
    swift_errorRetain(a3);
    uint64_t v15 = sub_100098CD8(&qword_1002357C0);
    uint64_t v16 = String.init<A>(describing:)(v25, v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10009914C();
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error deleting zone: %@", 23LL, 2LL, v14);
    swift_errorRelease(a3);
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v9, v25, 1LL, 0LL);
    *uint64_t v9 = 0;
  }

  else
  {
    uint64_t v21 = static os_log_type_t.default.getter(a1);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v22 = qword_10023DFB8;
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + 16) = xmmword_1001A5EA0;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10009914C();
    *(void *)(v24 + 32) = a5;
    *(void *)(v24 + 40) = a6;
    swift_bridgeObjectRetain(a6);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Deleted Zone: %@", 16LL, 2LL, v24);
    swift_bridgeObjectRelease(v24);
  }

  dispatch_group_leave(a7);
}

uint64_t sub_1000FF930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1001072AC( a1,  a2,  a3,  a4,  &qword_1002366A0,  &OBJC_CLASS___CKRecordZone_ptr,  (unint64_t *)&qword_100235280,  &OBJC_CLASS___CKRecordZoneID_ptr);
}

void sub_1000FF954(uint64_t a1, int a2)
{
  LODWORD(v219) = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v201 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v210 = (char *)&v201 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v225 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v225 - 8);
  __chkstk_darwin(v225);
  uint64_t v13 = (char *)&v201 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v217 = (char *)&v201 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v201 - v17;
  __chkstk_darwin(v19);
  uint64_t v212 = (char *)&v201 - v20;
  aBlock._uint64_t countAndFlagsBits = a1;
  swift_errorRetain(a1);
  uint64_t v21 = sub_100098CD8(&qword_1002357C0);
  type metadata accessor for CKError(0LL);
  uint64_t v220 = v21;
  uint64_t v224 = v22;
  uint64_t v23 = swift_dynamicCast(&v226, &aBlock, v21, v22, 6LL);
  if ((_DWORD)v23)
  {
    uint64_t v215 = v11;
    uint64_t v218 = v2;
    uint64_t v205 = v9;
    uint64_t v206 = v8;
    uint64_t v207 = v7;
    uint64_t v208 = v5;
    uint64_t v209 = v4;
    uint64_t v24 = v226;
    uint64_t v25 = static os_log_type_t.default.getter(v23);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v26 = qword_10023DFB8;
    uint64_t v223 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v27 = swift_allocObject(v223, 72LL, 7LL);
    __int128 v221 = xmmword_1001A5EA0;
    *(_OWORD *)(v27 + 16) = xmmword_1001A5EA0;
    id v28 = v24;
    uint64_t v29 = related decl 'e' for CKErrorCode.description.getter();
    uint64_t v31 = v30;

    *(void *)(v27 + 56) = &type metadata for String;
    unint64_t v222 = sub_10009914C();
    *(void *)(v27 + 64) = v222;
    *(void *)(v27 + 32) = v29;
    *(void *)(v27 + 40) = v31;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Error with cloud operation %@", 29LL, 2LL, v27);
    swift_bridgeObjectRelease(v27);
    NSString v32 = String._bridgeToObjectiveC()();
    uint64_t v33 = sub_100098CD8(&qword_1002365B8);
    uint64_t inited = swift_initStackObject(v33, v231);
    __int128 v211 = xmmword_1001A6F30;
    *(_OWORD *)(inited + 16) = xmmword_1001A6F30;
    *(void *)(inited + 32) = 0x43726F7272456B63LL;
    *(void *)(inited + 40) = 0xEB0000000065646FLL;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)v28;
    uint64_t v35 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
    uint64_t v36 = v224;
    *(void *)(inited + 48) = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  _BridgedStoredNSError.errorCode.getter(v224, v35));
    *(void *)(inited + 56) = 0xD000000000000012LL;
    *(void *)(inited + 64) = 0x80000001001D09D0LL;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)v28;
    uint64_t v37 = sub_100098C98( &qword_100234F70,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6768);
    Error.localizedDescription.getter(v36, v37);
    uint64_t v39 = v38;
    id v40 = objc_allocWithZone(&OBJC_CLASS___NSString);
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    id v42 = v40;
    uint64_t v43 = v35;
    id v44 = [v42 initWithString:v41];

    *(void *)(inited + 72) = v44;
    unint64_t v45 = sub_10009F23C(inited);
    sub_1000A4A64(0LL, &qword_1002365C0, &OBJC_CLASS___NSObject_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    CUMetricsLog(v32, isa);

    uint64_t v226 = v28;
    uint64_t v47 = _BridgedStoredNSError.userInfo.getter(v36, v35);
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
    uint64_t v50 = v49;
    if (*(void *)(v47 + 16))
    {
      unint64_t v51 = sub_1000A3A10(v48, v49);
      uint64_t v52 = v225;
      if ((v53 & 1) != 0)
      {
        sub_100112834(*(void *)(v47 + 56) + 32 * v51, (uint64_t)&aBlock);
      }

      else
      {
        Swift::String aBlock = (Swift::String)0;
        __int128 v228 = 0u;
      }
    }

    else
    {
      Swift::String aBlock = (Swift::String)0;
      __int128 v228 = 0u;
      uint64_t v52 = v225;
    }

    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v47);
    if (*((void *)&v228 + 1))
    {
      uint64_t v54 = sub_100098CD8(&qword_1002365C8);
      uint64_t v55 = swift_dynamicCast(&v226, &aBlock, (char *)&type metadata for Any + 8, v54, 6LL);
      if ((v55 & 1) != 0)
      {
        uint64_t v56 = (uint64_t)v226;
        uint64_t v57 = static os_log_type_t.error.getter(v55);
        uint64_t v58 = qword_10023DFB8;
        uint64_t v59 = swift_allocObject(v223, 72LL, 7LL);
        *(_OWORD *)(v59 + 16) = v221;
        uint64_t v60 = swift_bridgeObjectRetain(v56);
        uint64_t v61 = v35;
        uint64_t v62 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  v224,  &protocol witness table for AnyHashable);
        uint64_t v64 = v63;
        swift_bridgeObjectRelease(v56);
        unint64_t v65 = v222;
        *(void *)(v59 + 56) = &type metadata for String;
        *(void *)(v59 + 64) = v65;
        *(void *)(v59 + 32) = v62;
        *(void *)(v59 + 40) = v64;
        uint64_t v43 = v61;
        os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Handling partial internal errors - %@", 37LL, 2LL, v59);
        uint64_t v66 = v59;
        uint64_t v52 = v225;
        uint64_t v67 = swift_bridgeObjectRelease(v66);
        __chkstk_darwin(v67);
        *(&v201 - 2) = v218;
        *((_BYTE *)&v201 - 8) = v219 & 1;
        sub_100110F44(v56, (void (*)(_BYTE *, id))sub_100112DB4);
        swift_bridgeObjectRelease(v56);
      }
    }

    else
    {
      sub_100099358((uint64_t)&aBlock, &qword_100236570);
    }

    aBlock._uint64_t countAndFlagsBits = (uint64_t)v28;
    uint64_t v68 = _BridgedStoredNSError.code.getter(&v226, v224, v43);
    switch((unint64_t)v226)
    {
      case 3uLL:
      case 4uLL:
        uint64_t v69 = (void *)&unk_10023D000;
        unint64_t v70 = v222;
        if ((v219 & 1) != 0) {
          sub_1001042A0(150.0);
        }
        goto LABEL_36;
      case 6uLL:
      case 7uLL:
        double v71 = COERCE_DOUBLE(related decl 'e' for CKErrorCode.retryAfterSeconds.getter(v28));
        if ((v72 & 1) != 0) {
          double v71 = 600.0;
        }
        sub_1001042A0(v71);
        uint64_t v69 = (void *)&unk_10023D000;
        unint64_t v70 = v222;
        goto LABEL_36;
      case 0xEuLL:
        uint64_t v134 = static os_log_type_t.error.getter(v68);
        uint64_t v135 = qword_10023DFB8;
        uint64_t v136 = v223;
        uint64_t v137 = swift_allocObject(v223, 72LL, 7LL);
        *(_OWORD *)(v137 + 16) = v221;
        id v138 = v28;
        uint64_t v139 = related decl 'e' for CKErrorCode.description.getter();
        uint64_t v141 = v140;

        unint64_t v142 = v222;
        *(void *)(v137 + 56) = &type metadata for String;
        *(void *)(v137 + 64) = v142;
        *(void *)(v137 + 32) = v139;
        *(void *)(v137 + 40) = v141;
        os_log(_:dso:log:_:_:)( v134,  &_mh_execute_header,  v135,  "Server Record Changed, We need to Fetch the data again: %@",  58LL,  2LL,  v137);
        swift_bridgeObjectRelease(v137);
        uint64_t v143 = related decl 'e' for CKErrorCode.serverRecord.getter(v138);
        if (v143)
        {
          uint64_t v144 = (void *)v143;
          uint64_t v145 = static os_log_type_t.error.getter(v143);
          uint64_t v146 = qword_10023DFB8;
          uint64_t v147 = swift_allocObject(v136, 72LL, 7LL);
          *(_OWORD *)(v147 + 16) = v221;
          id v148 = v144;
          id v149 = [v148 description];
          uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
          uint64_t v152 = v151;

          *(void *)(v147 + 56) = &type metadata for String;
          *(void *)(v147 + 64) = v142;
          *(void *)(v147 + 32) = v150;
          *(void *)(v147 + 40) = v152;
          os_log(_:dso:log:_:_:)(v145, &_mh_execute_header, v146, "Resolving with server record - %@", 33LL, 2LL, v147);
          swift_bridgeObjectRelease(v147);
          uint64_t v153 = v218;
          uint64_t Strong = swift_unknownObjectWeakLoadStrong(v218 + 24, v154);
          if (Strong)
          {
            uint64_t v157 = Strong;
            uint64_t v158 = sub_100098CD8(&qword_100236588);
            uint64_t v159 = swift_allocObject(v158, 40LL, 7LL);
            *(_OWORD *)(v159 + 16) = xmmword_1001A8ED0;
            *(void *)(v159 + 32) = v148;
            aBlock._uint64_t countAndFlagsBits = v159;
            specialized Array._endMutation()(v159);
            uint64_t countAndFlagsBits = aBlock._countAndFlagsBits;
            id v161 = v148;
            sub_10010E9F0(v153, (uint64_t)_swiftEmptyArrayStorage, countAndFlagsBits, v157);
            swift_bridgeObjectRelease(countAndFlagsBits);
            swift_unknownObjectRelease(v157);
          }

          uint64_t v162 = swift_unknownObjectWeakLoadStrong(v153 + 24, v156);
          if (v162)
          {
            uint64_t v163 = v162;
            sub_1001112E8(*(_BYTE *)(v153 + 104), v162);
            swift_unknownObjectRelease(v163);
          }
        }

        else
        {
          sub_1001042A0(30.0);
        }

        return;
      case 0x15uLL:
        uint64_t v80 = v218 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
        uint64_t v219 = v218 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
        uint64_t v81 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
        uint64_t v82 = v80 + *(int *)(v81 + 28);
        uint64_t v83 = v215;
        uint64_t v216 = *(void (**)(char *, uint64_t, uint64_t))(v215 + 16);
        v216(v18, v82, v52);
        uint64_t v84 = v217;
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001001CF0A0LL, 1LL);
        uint64_t v85 = (uint64_t)v212;
        URL.appendingPathComponent(_:)(0x2E65746176697250LL);
        uint64_t v86 = *(void (**)(char *, uint64_t))(v83 + 8);
        v86(v84, v52);
        v86(v18, v52);
        sub_100111524(v85, 0LL);
        uint64_t v217 = (char *)v81;
        uint64_t v87 = *(void *)(v219 + *(int *)(v81 + 32));
        uint64_t v88 = *(void *)(v87 + 16);
        if (v88)
        {
          uint64_t v203 = v43;
          id v204 = v28;
          uint64_t v215 = sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
          id v214 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
          char v213 = CKCurrentUserDefaultName;
          swift_bridgeObjectRetain(v87);
          uint64_t v202 = v87;
          unint64_t v89 = (void **)(v87 + 40);
          do
          {
            uint64_t v102 = (uint64_t)*(v89 - 1);
            uint64_t v103 = *v89;
            v216(v18, v219 + *((int *)v217 + 7), v52);
            uint64_t v104 = v52;
            uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
            uint64_t v107 = v106;
            swift_bridgeObjectRetain(v103);
            v108._uint64_t countAndFlagsBits = v102;
            v108._object = v103;
            v109._uint64_t countAndFlagsBits = v105;
            v109._object = v107;
            Class v110 = CKRecordZoneID.init(zoneName:ownerName:)(v108, v109).super.isa;
            URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
            v111._uint64_t countAndFlagsBits = 0x65746176697250LL;
            v111._object = (void *)0xE700000000000000LL;
            URL.appendPathComponent(_:)(v111);
            id v112 = -[objc_class ownerName](v110, "ownerName");
            uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
            uint64_t v115 = v114;

            v116._uint64_t countAndFlagsBits = v113;
            v116._object = v115;
            URL.appendPathComponent(_:)(v116);
            swift_bridgeObjectRelease(v115);
            id v117 = -[objc_class zoneName](v110, "zoneName");
            uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
            uint64_t v120 = v119;

            aBlock._uint64_t countAndFlagsBits = v118;
            aBlock._object = v120;
            v121._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
            v121._object = (void *)0xE600000000000000LL;
            String.append(_:)(v121);
            object = aBlock._object;
            URL.appendPathComponent(_:)(aBlock);

            swift_bridgeObjectRelease(object);
            v86(v18, v104);
            id v123 = [v214 defaultManager];
            URL._bridgeToObjectiveC()(v124);
            uint64_t v126 = v125;
            aBlock._uint64_t countAndFlagsBits = 0LL;
            LODWORD(object) = [v123 removeItemAtURL:v125 error:&aBlock];

            uint64_t v127 = aBlock._countAndFlagsBits;
            if ((_DWORD)object)
            {
              uint64_t v128 = static os_log_type_t.default.getter((id)aBlock._countAndFlagsBits);
              uint64_t v129 = qword_10023DFB8;
              uint64_t v130 = swift_allocObject(v223, 72LL, 7LL);
              *(_OWORD *)(v130 + 16) = v221;
              uint64_t v131 = URL.absoluteString.getter();
              unint64_t v132 = v222;
              *(void *)(v130 + 56) = &type metadata for String;
              *(void *)(v130 + 64) = v132;
              *(void *)(v130 + 32) = v131;
              *(void *)(v130 + 40) = v133;
              os_log(_:dso:log:_:_:)(v128, &_mh_execute_header, v129, "Deleted change token, URL, %@", 29LL, 2LL, v130);
              swift_bridgeObjectRelease(v130);
            }

            else
            {
              id v90 = (id)aBlock._countAndFlagsBits;
              uint64_t v91 = _convertNSErrorToError(_:)(v127);

              uint64_t v93 = swift_willThrow(v92);
              uint64_t v94 = static os_log_type_t.error.getter(v93);
              uint64_t v95 = qword_10023DFB8;
              uint64_t v96 = swift_allocObject(v223, 112LL, 7LL);
              *(_OWORD *)(v96 + 16) = v211;
              uint64_t v97 = URL.absoluteString.getter();
              unint64_t v98 = v222;
              *(void *)(v96 + 56) = &type metadata for String;
              *(void *)(v96 + 64) = v98;
              *(void *)(v96 + 32) = v97;
              *(void *)(v96 + 40) = v99;
              aBlock._uint64_t countAndFlagsBits = v91;
              swift_errorRetain(v91);
              uint64_t v100 = String.init<A>(describing:)(&aBlock, v220);
              *(void *)(v96 + 96) = &type metadata for String;
              *(void *)(v96 + 104) = v98;
              *(void *)(v96 + 72) = v100;
              *(void *)(v96 + 80) = v101;
              os_log(_:dso:log:_:_:)( v94,  &_mh_execute_header,  v95,  "Unable to delete change token, URL, %@, error, %@ ",  50LL,  2LL,  v96);
              swift_bridgeObjectRelease(v96);
              swift_errorRelease(v91);
            }

            v89 += 2;
            uint64_t v52 = v225;
            v86(v13, v225);
            --v88;
          }

          while (v88);
          swift_bridgeObjectRelease(v202);
          id v28 = v204;
          uint64_t v43 = v203;
        }

        sub_1001042A0(30.0);
        v86(v212, v52);
        unint64_t v70 = v222;
        uint64_t v69 = &unk_10023D000;
        goto LABEL_36;
      case 0x1AuLL:
        uint64_t v164 = static os_log_type_t.error.getter(v68);
        uint64_t v69 = &unk_10023D000;
        uint64_t v165 = qword_10023DFB8;
        uint64_t v75 = swift_allocObject(v223, 72LL, 7LL);
        *(_OWORD *)(v75 + 16) = v221;
        id v166 = v28;
        uint64_t v167 = related decl 'e' for CKErrorCode.description.getter();
        uint64_t v169 = v168;

        unint64_t v70 = v222;
        *(void *)(v75 + 56) = &type metadata for String;
        *(void *)(v75 + 64) = v70;
        *(void *)(v75 + 32) = v167;
        *(void *)(v75 + 40) = v169;
        os_log(_:dso:log:_:_:)(v164, &_mh_execute_header, v165, "Zone not found: %@", 18LL, 2LL, v75);
        goto LABEL_33;
      default:
        uint64_t v73 = static os_log_type_t.error.getter(v68);
        uint64_t v69 = &unk_10023D000;
        uint64_t v74 = qword_10023DFB8;
        uint64_t v75 = swift_allocObject(v223, 72LL, 7LL);
        *(_OWORD *)(v75 + 16) = v221;
        id v76 = v28;
        uint64_t v77 = related decl 'e' for CKErrorCode.description.getter();
        uint64_t v79 = v78;

        unint64_t v70 = v222;
        *(void *)(v75 + 56) = &type metadata for String;
        *(void *)(v75 + 64) = v70;
        *(void *)(v75 + 32) = v77;
        *(void *)(v75 + 40) = v79;
        os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Uncaught error: %@", 18LL, 2LL, v75);
LABEL_33:
        swift_bridgeObjectRelease(v75);
LABEL_36:
        uint64_t v226 = v28;
        uint64_t v170 = _BridgedStoredNSError.code.getter(&aBlock, v224, v43);
        if (aBlock._countAndFlagsBits == 110)
        {
          uint64_t v179 = static os_log_type_t.error.getter(v170);
          uint64_t v180 = v69[503];
          uint64_t v181 = os_log(_:dso:log:_:_:)( v179,  &_mh_execute_header,  v180,  "Attempting to use Manatee from a non-HSA2 account!",  50LL,  2LL,  _swiftEmptyArrayStorage);
          if (*(_BYTE *)(v218 + 104) == 1)
          {
            *(_BYTE *)(v218 + 104) = 0;
            uint64_t v182 = static os_log_type_t.fault.getter(v181);
            os_log(_:dso:log:_:_:)( v182,  &_mh_execute_header,  v180,  "Manatee was available, but is not available now.",  48LL,  2LL,  _swiftEmptyArrayStorage);
          }
        }

        else
        {
          uint64_t v171 = v223;
          if (aBlock._countAndFlagsBits == 112)
          {
            uint64_t v183 = static os_log_type_t.default.getter(v170);
            os_log(_:dso:log:_:_:)( v183,  &_mh_execute_header,  v69[503],  "Private Missing Manatee Identity, Reset...",  42LL,  2LL,  _swiftEmptyArrayStorage);
            uint64_t v184 = v218;
            uint64_t v229 = sub_100112DAC;
            uint64_t v230 = v218;
            aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
            aBlock._object = (void *)1107296256;
            *(void *)&__int128 v228 = sub_1000F2C54;
            *((void *)&v228 + 1) = &unk_10020E1E8;
            uint64_t v185 = _Block_copy(&aBlock);
            uint64_t v186 = swift_retain(v184);
            uint64_t v187 = v210;
            static DispatchQoS.unspecified.getter(v186);
            uint64_t v226 = _swiftEmptyArrayStorage;
            uint64_t v188 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v189 = sub_100098CD8((uint64_t *)&unk_100235790);
            uint64_t v190 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
            unint64_t v191 = v207;
            uint64_t v192 = v189;
            uint64_t v193 = v209;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v226, v192, v190, v209, v188);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v187, v191, v185);
            _Block_release(v185);

            (*(void (**)(char *, uint64_t))(v208 + 8))(v191, v193);
            (*(void (**)(char *, uint64_t))(v205 + 8))(v187, v206);
            swift_release(v230);
          }

          else if (aBlock._countAndFlagsBits == 111)
          {
            uint64_t v172 = static os_log_type_t.default.getter(v170);
            uint64_t v173 = v69[503];
            uint64_t v174 = swift_allocObject(v171, 72LL, 7LL);
            *(_OWORD *)(v174 + 16) = v221;
            uint64_t v175 = v218 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
            unint64_t v176 = (uint64_t *)(v175 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 24));
            uint64_t v178 = *v176;
            uint64_t v177 = v176[1];
            *(void *)(v174 + 56) = &type metadata for String;
            *(void *)(v174 + 64) = v70;
            *(void *)(v174 + 32) = v178;
            *(void *)(v174 + 40) = v177;
            swift_bridgeObjectRetain(v177);
            os_log(_:dso:log:_:_:)( v172,  &_mh_execute_header,  v173,  "PCS Keys for %@ are not yet synced.",  35LL,  2LL,  v174);
            swift_bridgeObjectRelease(v174);
          }

          else
          {
            uint64_t v194 = static os_log_type_t.error.getter(v170);
            uint64_t v195 = v69[503];
            uint64_t v196 = swift_allocObject(v171, 72LL, 7LL);
            *(_OWORD *)(v196 + 16) = v221;
            id v197 = v28;
            uint64_t v198 = related decl 'e' for CKErrorCode.description.getter();
            uint64_t v200 = v199;

            *(void *)(v196 + 56) = &type metadata for String;
            *(void *)(v196 + 64) = v70;
            *(void *)(v196 + 32) = v198;
            *(void *)(v196 + 40) = v200;
            os_log(_:dso:log:_:_:)(v194, &_mh_execute_header, v195, "Uncaught private error: %@", 26LL, 2LL, v196);
            swift_bridgeObjectRelease(v196);
          }
        }

        break;
    }
  }

uint64_t sub_100100C74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v9 = *(void *)(v8 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 32));
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain(v9);
    uint64_t v11 = (dispatch_group_s **)(v9 + 40);
    do
    {
      uint64_t v12 = (uint64_t)*(v11 - 1);
      uint64_t v13 = *v11;
      swift_bridgeObjectRetain(*v11);
      sub_1000FF098(v12, v13);
      swift_bridgeObjectRelease(v13);
      v11 += 2;
      --v10;
    }

    while (v10);
    swift_bridgeObjectRelease(v9);
  }

  sub_1000FD248();
  uint64_t v14 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v14 + 16, a1);
  aBlock[4] = sub_100112E28;
  uint64_t v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E260;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain(v14);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v19 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  uint64_t v20 = v27;
  swift_release(v14);
  return swift_release(v20);
}

uint64_t sub_100100EE0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_1000F5020(0);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100100F38(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v43[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v49 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a2)
  {
    uint64_t v14 = swift_errorRetain(a2);
    uint64_t v15 = static os_log_type_t.error.getter(v14);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v16 = qword_10023DFB8;
    uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_1001A5EA0;
    Swift::String aBlock = a2;
    swift_errorRetain(a2);
    uint64_t v19 = sub_100098CD8(&qword_1002357C0);
    uint64_t v20 = String.init<A>(describing:)(&aBlock, v19);
    uint64_t v22 = v21;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10009914C();
    *(void *)(v18 + 32) = v20;
    *(void *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "error fetching account status: %@", 33LL, 2LL, v18);
    swift_bridgeObjectRelease(v18);
    uint64_t v23 = swift_allocObject(&unk_10020E040, 32LL, 7LL);
    *(void *)(v23 + 16) = v46;
    *(void *)(v23 + 24) = a5;
    uint64_t v55 = sub_1000C9C14;
    uint64_t v56 = (void *)v23;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v52 = 1107296256LL;
    char v53 = sub_1000F2C54;
    uint64_t v54 = &unk_10020E058;
    uint64_t v24 = _Block_copy(&aBlock);
    uint64_t v25 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v25);
    uint64_t v50 = _swiftEmptyArrayStorage;
    uint64_t v26 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v28 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v27, v28, v8, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v24);
    _Block_release(v24);
    swift_errorRelease(a2);
  }

  else
  {
    unsigned int v44 = static os_log_type_t.default.getter(v11);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v29 = qword_10023DFB8;
    uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
    *(_OWORD *)(v31 + 16) = xmmword_1001A5EA0;
    id v32 = (id)CKStringFromAccountStatus(a1);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v35 = v34;

    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_10009914C();
    *(void *)(v31 + 32) = v33;
    *(void *)(v31 + 40) = v35;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v29, "Fetched CK account status: %{public}@", 37LL, 2LL, v31);
    swift_bridgeObjectRelease(v31);
    uint64_t v36 = (void *)swift_allocObject(&unk_10020DFF0, 40LL, 7LL);
    v36[2] = v46;
    v36[3] = a5;
    v36[4] = a1;
    uint64_t v55 = sub_1000C9B18;
    uint64_t v56 = v36;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v52 = 1107296256LL;
    char v53 = sub_1000F2C54;
    uint64_t v54 = &unk_10020E008;
    uint64_t v37 = _Block_copy(&aBlock);
    uint64_t v38 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v38);
    uint64_t v50 = _swiftEmptyArrayStorage;
    uint64_t v39 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v40 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v41 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v40, v41, v8, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v37);
    _Block_release(v37);
  }

  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v13, v49);
  return swift_release(v56);
}

void sub_10010140C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_10010146C(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFB8,  "CKAccountChanged notification received",  38LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v3 = swift_allocObject(&unk_10020DF78, 25LL, 7LL);
  *(void *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 0;
  swift_retain(v1);
  id v4 = sub_1000F3F2C();
  uint64_t v5 = (void *)swift_allocObject(&unk_10020DFA0, 40LL, 7LL);
  v5[2] = v1;
  v5[3] = sub_100112D1C;
  void v5[4] = v3;
  v8[4] = sub_100112D2C;
  uint64_t v9 = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  v8[2] = sub_10010140C;
  v8[3] = &unk_10020DFB8;
  uint64_t v6 = _Block_copy(v8);
  id v7 = v9;
  swift_retain(v1);
  swift_retain(v3);
  swift_release(v7);
  [v4 accountStatusWithCompletionHandler:v6];
  _Block_release(v6);
  swift_release(v3);
}

uint64_t sub_100101674(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_1001A8FC0;
  v4[2] = &unk_1001A8FD8;
  void v4[3] = &unk_1001A8FD8;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v4[10] = &unk_1001A8FF0;
  v4[11] = &unk_1001A8FF0;
  v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[14] = &unk_1001A8FF0;
  v4[15] = &unk_1001A9008;
  uint64_t result = type metadata accessor for CloudCoordinatorConfiguration(319LL);
  if (v3 <= 0x3F)
  {
    v4[16] = *(void *)(result - 8) + 64LL;
    v4[17] = &unk_1001A8FD8;
    v4[18] = &unk_1001A9020;
    v4[19] = &unk_1001A8FD8;
    v4[20] = &unk_1001A8FD8;
    v4[21] = &unk_1001A8FD8;
    v4[22] = &unk_1001A8FD8;
    v4[23] = &unk_1001A8FD8;
    _BYTE v4[24] = &unk_1001A8FD8;
    v4[25] = &unk_1001A8FD8;
    v4[26] = &unk_1001A8FF0;
    return swift_updateClassMetadata2(a1, 256LL, 27LL, v4, a1 + 80);
  }

  return result;
}

uint64_t sub_10010176C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a2 + 72);
  uint64_t v14 = swift_allocObject(&unk_10020E090, 33LL, 7LL);
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a1;
  *(_BYTE *)(v14 + 32) = a3;
  aBlock[4] = sub_100112D80;
  uint64_t v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E0A8;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v19 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_100101964(uint64_t a1, uint64_t a2, int a3)
{
  int v68 = a3;
  uint64_t v74 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  double v71 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v70 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v69 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v9 = qword_10023DFB8;
  uint64_t v67 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v10 = swift_allocObject(v67, 112LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001A6F30;
  id v11 = (id)CKStringFromAccountStatus(*(void *)(a1 + 96));
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  id v16 = (id)CKStringFromAccountStatus(a2);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 72) = v17;
  *(void *)(v10 + 80) = v19;
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v9,  "iCloud accountDidChange %{public}@ -> %{public}@",  48LL,  2LL,  v10);
  uint64_t v20 = swift_bridgeObjectRelease(v10);
  uint64_t v21 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = a2;
  *(_BYTE *)(a1 + 105) = a2 == 1;
  switch(a2)
  {
    case 0LL:
      uint64_t v22 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_10023DFB8,  "Could not determine account status!",  35LL,  2LL,  _swiftEmptyArrayStorage);
      break;
    case 1LL:
      uint64_t v24 = static os_log_type_t.default.getter(v20);
      os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_10023DFB8,  "iCloud accountDidChange available",  33LL,  2LL,  _swiftEmptyArrayStorage);
      sub_100102730(v68 & 1);
      break;
    case 2LL:
      uint64_t v25 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_10023DFB8,  "iCloud Account not available due to restrictions!",  49LL,  2LL,  _swiftEmptyArrayStorage);
      if (*(void *)(a1 + 96) != 2LL)
      {
        uint64_t v80 = sub_100112D94;
        uint64_t v81 = a1;
        Swift::String aBlock = _NSConcreteStackBlock;
        uint64_t v77 = 1107296256LL;
        uint64_t v78 = sub_1000F2C54;
        uint64_t v79 = &unk_10020E0F8;
        uint64_t v26 = _Block_copy(&aBlock);
        uint64_t v27 = swift_retain(a1);
        uint64_t v28 = v69;
        static DispatchQoS.unspecified.getter(v27);
        v83[0] = _swiftEmptyArrayStorage;
        uint64_t v29 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v31 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
        id v32 = v71;
        uint64_t v33 = v30;
        uint64_t v34 = v74;
        dispatch thunk of SetAlgebra.init<A>(_:)(v83, v33, v31, v74, v29);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v32, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v32, v34);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v28, v73);
        swift_release(v81);
        goto LABEL_17;
      }

      break;
    case 3LL:
      uint64_t v35 = static os_log_type_t.error.getter(v20);
      uint64_t v36 = qword_10023DFB8;
      uint64_t v37 = os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_10023DFB8,  "iCloud Account not available!",  29LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v38 = static os_log_type_t.default.getter(v37);
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v36, "reset timers", 12LL, 2LL, _swiftEmptyArrayStorage);
      [*(id *)(a1 + 40) invalidate];
      uint64_t v39 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0LL;

      uint64_t v40 = *(void *)(a1 + 48);
      if (v40)
      {
        swift_getObjectType(*(void *)(v40 + 40));
        swift_retain(v40);
        OS_dispatch_source.cancel()();
        swift_release(v40);
        uint64_t v41 = *(void *)(a1 + 48);
      }

      else
      {
        uint64_t v41 = 0LL;
      }

      *(void *)(a1 + 48) = 0LL;
      swift_release(v41);
      swift_beginAccess(a1 + 112, v83, 1LL, 0LL);
      uint64_t v43 = *(void *)(a1 + 112);
      *(void *)(a1 + 112) = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v43);
      swift_beginAccess(a1 + 120, v82, 1LL, 0LL);
      uint64_t v44 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = _swiftEmptyDictionarySingleton;
      uint64_t v45 = swift_bridgeObjectRelease(v44);
      if (v21 == 3)
      {
        uint64_t v46 = static os_log_type_t.default.getter(v45);
        os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  qword_10023DFB8,  "Account was already in .noAccount state",  39LL,  2LL,  _swiftEmptyArrayStorage);
      }

      else
      {
        uint64_t v47 = static os_log_type_t.error.getter(v45);
        uint64_t v48 = qword_10023DFB8;
        uint64_t v49 = swift_allocObject(v67, 72LL, 7LL);
        *(_OWORD *)(v49 + 16) = xmmword_1001A5EA0;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 24, v50);
        uint64_t v52 = *(void *)(a1 + 32);
        Swift::String aBlock = (void **)Strong;
        uint64_t v77 = v52;
        uint64_t v53 = sub_100098CD8((uint64_t *)&unk_100236688);
        uint64_t v54 = String.init<A>(describing:)(&aBlock, v53);
        *(void *)(v49 + 56) = &type metadata for String;
        *(void *)(v49 + 64) = v15;
        *(void *)(v49 + 32) = v54;
        *(void *)(v49 + 40) = v55;
        os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Tell delegate to remove local cache: %@", 39LL, 2LL, v49);
        swift_bridgeObjectRelease(v49);
        uint64_t v80 = sub_100112D8C;
        uint64_t v81 = a1;
        Swift::String aBlock = _NSConcreteStackBlock;
        uint64_t v77 = 1107296256LL;
        uint64_t v78 = sub_1000F2C54;
        uint64_t v79 = &unk_10020E0D0;
        uint64_t v56 = _Block_copy(&aBlock);
        uint64_t v57 = swift_retain(a1);
        uint64_t v58 = v69;
        static DispatchQoS.unspecified.getter(v57);
        uint64_t v75 = _swiftEmptyArrayStorage;
        uint64_t v59 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v60 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v61 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v62 = v71;
        uint64_t v63 = v60;
        uint64_t v64 = v74;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v63, v61, v74, v59);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v58, v62, v56);
        _Block_release(v56);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v62, v64);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v73);
        uint64_t v65 = swift_release(v81);
        if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) & 1) != 0)
        {
LABEL_17:
          sub_1000F5020(0);
        }

        else
        {
          uint64_t v66 = static os_log_type_t.default.getter(v65);
          os_log(_:dso:log:_:_:)( v66,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: finish Setup",  23LL,  2LL,  _swiftEmptyArrayStorage);
          sub_1000F4CFC();
        }
      }

      break;
    case 4LL:
      uint64_t v42 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  qword_10023DFB8,  "Account available but not ready!",  32LL,  2LL,  _swiftEmptyArrayStorage);
      break;
    default:
      uint64_t v23 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_10023DFB8,  "Unknown CKAccountStatus!",  24LL,  2LL,  _swiftEmptyArrayStorage);
      break;
  }

uint64_t sub_100102114(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  __chkstk_darwin(v2);
  uint64_t v38 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t result = *(void *)(v6 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 32));
  uint64_t v8 = *(void *)(result + 16);
  if (v8)
  {
    uint64_t v41 = a1 + 24;
    uint64_t v34 = CKCurrentUserDefaultName;
    uint64_t v33 = swift_bridgeObjectRetain(result);
    uint64_t v10 = (void **)(v33 + 40);
    id v11 = v38;
    do
    {
      uint64_t v12 = (uint64_t)*(v10 - 1);
      uint64_t v13 = *v10;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v41, v9);
      if (Strong)
      {
        uint64_t v15 = Strong;
        sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        uint64_t v18 = v17;
        swift_bridgeObjectRetain(v13);
        v19._uint64_t countAndFlagsBits = v12;
        v19._object = v13;
        v20._uint64_t countAndFlagsBits = v16;
        v20._object = v18;
        Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v19, v20).super.isa;
        uint64_t v22 = *(void **)(v15 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
        uint64_t v23 = swift_allocObject(&unk_10020E130, 32LL, 7LL);
        *(void *)(v23 + 16) = isa;
        *(void *)(v23 + 24) = v15;
        aBlock[4] = sub_1000C90A0;
        uint64_t v45 = v23;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1000F2C54;
        aBlock[3] = &unk_10020E148;
        uint64_t v24 = _Block_copy(aBlock);
        id v25 = v22;
        uint64_t v42 = isa;
        uint64_t v26 = swift_unknownObjectRetain(v15);
        uint64_t v27 = v35;
        static DispatchQoS.unspecified.getter(v26);
        uint64_t v43 = _swiftEmptyArrayStorage;
        uint64_t v28 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v30 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v31 = v40;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v29, v30, v40, v28);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v27, v11, v24);
        _Block_release(v24);

        (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v31);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
        uint64_t v32 = v45;

        swift_unknownObjectRelease(v15);
        swift_release(v32);
      }

      v10 += 2;
      --v8;
    }

    while (v8);
    return swift_bridgeObjectRelease(v33);
  }

  return result;
}

uint64_t sub_100102410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin(v2);
  uint64_t v43 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v7 = *(void *)(v6 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 32));
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v38 = a1;
    uint64_t v46 = a1 + 24;
    uint64_t v39 = CKCurrentUserDefaultName;
    uint64_t v37 = swift_bridgeObjectRetain(v7);
    id v11 = (void **)(v37 + 40);
    uint64_t v12 = v43;
    do
    {
      uint64_t v13 = (uint64_t)*(v11 - 1);
      uint64_t v14 = *v11;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v46, v10);
      if (Strong)
      {
        uint64_t v16 = Strong;
        sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        Swift::String v19 = v18;
        swift_bridgeObjectRetain(v14);
        v20._uint64_t countAndFlagsBits = v13;
        v20._object = v14;
        v21._uint64_t countAndFlagsBits = v17;
        v21._object = v19;
        Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v20, v21).super.isa;
        uint64_t v23 = *(void **)(v16 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
        uint64_t v24 = swift_allocObject(&unk_10020E180, 32LL, 7LL);
        *(void *)(v24 + 16) = isa;
        *(void *)(v24 + 24) = v16;
        aBlock[4] = sub_100113ACC;
        uint64_t v50 = v24;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1000F2C54;
        aBlock[3] = &unk_10020E198;
        id v25 = _Block_copy(aBlock);
        id v26 = v23;
        uint64_t v47 = isa;
        uint64_t v27 = swift_unknownObjectRetain(v16);
        uint64_t v28 = v40;
        static DispatchQoS.unspecified.getter(v27);
        uint64_t v48 = _swiftEmptyArrayStorage;
        uint64_t v29 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v31 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v32 = v45;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v30, v31, v45, v29);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v12, v25);
        _Block_release(v25);

        (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v32);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v42);
        uint64_t v33 = v50;

        swift_unknownObjectRelease(v16);
        swift_release(v33);
      }

      v11 += 2;
      --v9;
    }

    while (v9);
    swift_bridgeObjectRelease(v37);
    a1 = v38;
  }

  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 24, v8);
  if (result)
  {
    uint64_t v35 = result;
    sub_10010F32C(result);
    return swift_unknownObjectRelease(v35);
  }

  return result;
}

void sub_100102730(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v1 + 72);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t, __n128))(v4 + 104))( v7,  enum case for DispatchPredicate.onQueue(_:),  v3,  v5);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v3 = static os_log_type_t.default.getter(v10);
  if (qword_100234C18 != -1) {
LABEL_5:
  }
    swift_once(&qword_100234C18, sub_10018A920);
  os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: iCloud Account available",  35LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v11 = swift_allocObject(&unk_10020DDC0, 25LL, 7LL);
  *(void *)(v11 + 16) = v1;
  *(_BYTE *)(v11 + 24) = a1 & 1;
  swift_retain(v1);
  id v12 = sub_1000F3F2C();
  uint64_t v13 = swift_allocObject(&unk_10020DDE8, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_100112C64;
  *(void *)(v13 + 24) = v11;
  aBlock[4] = sub_100112C74;
  uint64_t v17 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001040C0;
  aBlock[3] = &unk_10020DE00;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v17;
  swift_retain(v11);
  swift_release(v15);
  [v12 accountInfoWithCompletionHandler:v14];
  _Block_release(v14);
  swift_release(v11);
}

void sub_10010291C(void *a1, char a2, uint64_t a3, int a4)
{
  int v202 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v200 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v199 = (char *)&v179 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v13);
  uint64_t v201 = (char *)&v179 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  if ((a2 & 1) != 0)
  {
    uint64_t v118 = swift_errorRetain(a1);
    uint64_t v119 = static os_log_type_t.error.getter(v118);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v120 = qword_10023DFB8;
    uint64_t v121 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v122 = swift_allocObject(v121, 72LL, 7LL);
    *(_OWORD *)(v122 + 16) = xmmword_1001A5EA0;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)a1;
    swift_errorRetain(a1);
    uint64_t v123 = sub_100098CD8(&qword_1002357C0);
    uint64_t v124 = String.init<A>(describing:)(&aBlock, v123);
    uint64_t v126 = v125;
    *(void *)(v122 + 56) = &type metadata for String;
    *(void *)(v122 + 64) = sub_10009914C();
    *(void *)(v122 + 32) = v124;
    *(void *)(v122 + 40) = v126;
    os_log(_:dso:log:_:_:)(v119, &_mh_execute_header, v120, "CloudSync: accountInfo error: %@", 32LL, 2LL, v122);
    swift_bridgeObjectRelease(v122);
    uint64_t v127 = a1;
    char v128 = 1;
    goto LABEL_24;
  }

  uint64_t v192 = v22;
  uint64_t v193 = v21;
  uint64_t v194 = v20;
  uint64_t v196 = (char *)&v179 - v19;
  uint64_t v198 = v18;
  uint64_t v187 = v11;
  uint64_t v188 = v10;
  uint64_t v189 = v8;
  uint64_t v190 = v7;
  uint64_t v197 = a3;
  id v23 = a1;
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  id v25 = a1;
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v26 = qword_10023DFB8;
  uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v28 = swift_allocObject(v27, 72LL, 7LL);
  __int128 v203 = xmmword_1001A5EA0;
  *(_OWORD *)(v28 + 16) = xmmword_1001A5EA0;
  id v29 = v23;
  id v30 = [v29 description];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  sub_100112C7C(v25, 0);
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v195 = sub_10009914C();
  *(void *)(v28 + 64) = v195;
  *(void *)(v28 + 32) = v31;
  *(void *)(v28 + 40) = v33;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v26, "CloudSync: accountInfo: %@", 26LL, 2LL, v28);
  swift_bridgeObjectRelease(v28);
  id v34 = [v29 accountStatus];
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  uint64_t v36 = v35;
  uint64_t v37 = qword_10023DFB8;
  if (v34 != (id)1)
  {
    os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: Account not available",  32LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100112C7C(v25, 0);
    return;
  }

  unint64_t v191 = v25;
  uint64_t v38 = swift_allocObject(v27, 72LL, 7LL);
  *(_OWORD *)(v38 + 16) = v203;
  uint64_t v39 = v197;
  char v40 = *(_BYTE *)(v197 + 104);
  *(void *)(v38 + 56) = &type metadata for Bool;
  *(void *)(v38 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v38 + 32) = v40;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "CloudSync: Setting previousManateeState to %d", v179);
  uint64_t v41 = swift_bridgeObjectRelease(v38);
  int v42 = *(unsigned __int8 *)(v39 + 104);
  uint64_t v43 = static os_log_type_t.default.getter(v41);
  uint64_t v44 = qword_10023DFB8;
  uint64_t v45 = swift_allocObject(v27, 72LL, 7LL);
  *(_OWORD *)(v45 + 16) = v203;
  unsigned __int8 v46 = [v29 supportsDeviceToDeviceEncryption];
  *(void *)(v45 + 56) = &type metadata for Bool;
  *(void *)(v45 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v45 + 32) = v46;
  os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "CloudSync: Setting manateeAvailable to %d", v179);
  swift_bridgeObjectRelease(v45);
  unsigned __int8 v47 = [v29 supportsDeviceToDeviceEncryption];
  *(_BYTE *)(v39 + 104) = v47;
  if (v42 == 1 && (v47 & 1) == 0)
  {
    NSString v49 = String._bridgeToObjectiveC()();
    uint64_t v50 = sub_100098CD8(&qword_1002365B8);
    uint64_t inited = swift_initStackObject(v50, v204);
    *(_OWORD *)(inited + 16) = v203;
    *(void *)(inited + 32) = 0xD000000000000027LL;
    *(void *)(inited + 40) = 0x80000001001D05E0LL;
    *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithBool:*(unsigned __int8 *)(v39 + 104)];
    unint64_t v52 = sub_10009F23C(inited);
    sub_1000A4A64(0LL, &qword_1002365C0, &OBJC_CLASS___NSObject_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v52);
    CUMetricsLog(v49, isa);
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v39 + 24, v48);
  if (Strong)
  {
    uint64_t v55 = Strong;
    sub_1001112E8(*(_BYTE *)(v39 + 104), Strong);
    swift_unknownObjectRelease(v55);
  }

  if ((v42 & 1) != 0 || (id v56 = [v29 supportsDeviceToDeviceEncryption], (v56 & 1) == 0))
  {
    uint64_t v127 = v191;
    char v128 = 0;
LABEL_24:
    sub_100112C7C(v127, v128);
    return;
  }

  uint64_t v57 = static os_log_type_t.default.getter(v56);
  uint64_t v185 = qword_10023DFB8;
  uint64_t v181 = v27;
  uint64_t v58 = swift_allocObject(v27, 72LL, 7LL);
  *(_OWORD *)(v58 + 16) = v203;
  uint64_t v59 = v39 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v60 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  uint64_t v61 = v192;
  uint64_t v62 = (void (*)(char *, uint64_t, uint64_t))*((void *)v192 + 2);
  uint64_t v63 = (uint64_t)v196;
  uint64_t v64 = v198;
  v62(v196, v59 + *(int *)(v60 + 28), v198);
  uint64_t v65 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v64, v65);
  uint64_t v68 = v67;
  uint64_t v69 = (void (*)(uint64_t, uint64_t))*((void *)v61 + 1);
  v69(v63, v64);
  unint64_t v70 = v195;
  *(void *)(v58 + 56) = &type metadata for String;
  *(void *)(v58 + 64) = v70;
  *(void *)(v58 + 32) = v66;
  *(void *)(v58 + 40) = v68;
  os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v185, "CloudSync: directoryURL: %@", 27LL, 2LL, v58);
  swift_bridgeObjectRelease(v58);
  uint64_t v71 = v59 + *(int *)(v60 + 28);
  uint64_t v72 = v193;
  uint64_t v192 = v62;
  v62((char *)v193, v71, v64);
  uint64_t v73 = v194;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001001CF0A0LL, 1LL);
  URL.appendingPathComponent(_:)(0x2E65746176697250LL);
  v69(v73, v64);
  v69(v72, v64);
  id v74 = (id)sub_1000EEA18(v63);
  uint64_t v75 = ((uint64_t (*)(uint64_t, uint64_t))v69)(v63, v64);
  uint64_t v193 = v60;
  uint64_t v76 = *(int *)(v60 + 32);
  uint64_t v194 = v59;
  uint64_t v77 = *(void *)(v59 + v76);
  uint64_t v78 = *(char **)(v77 + 16);
  id v180 = v74;
  if (v78)
  {
    uint64_t v185 = sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v77);
    id v184 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
    uint64_t v183 = CKCurrentUserDefaultName;
    uint64_t v179 = v77;
    uint64_t v79 = (void **)(v77 + 40);
    uint64_t v182 = (char *)&type metadata for Any + 8;
    uint64_t v80 = v198;
    uint64_t v81 = v201;
    uint64_t v186 = v69;
    while (1)
    {
      uint64_t v201 = v78;
      uint64_t v83 = (uint64_t)*(v79 - 1);
      uint64_t v82 = *v79;
      uint64_t v84 = v196;
      v192(v196, v194 + *(int *)(v193 + 28), v80);
      uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
      uint64_t v87 = v86;
      swift_bridgeObjectRetain(v82);
      v88._uint64_t countAndFlagsBits = v83;
      v88._object = v82;
      v89._uint64_t countAndFlagsBits = v85;
      v89._object = v87;
      Class v90 = CKRecordZoneID.init(zoneName:ownerName:)(v88, v89).super.isa;
      URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
      v91._uint64_t countAndFlagsBits = 0x65746176697250LL;
      v91._object = (void *)0xE700000000000000LL;
      URL.appendPathComponent(_:)(v91);
      id v92 = -[objc_class ownerName](v90, "ownerName");
      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      uint64_t v95 = v94;

      v96._uint64_t countAndFlagsBits = v93;
      v96._object = v95;
      URL.appendPathComponent(_:)(v96);
      swift_bridgeObjectRelease(v95);
      id v97 = -[objc_class zoneName](v90, "zoneName");
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
      uint64_t v100 = v99;

      aBlock._uint64_t countAndFlagsBits = v98;
      aBlock._object = v100;
      v101._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
      v101._object = (void *)0xE600000000000000LL;
      String.append(_:)(v101);
      object = aBlock._object;
      URL.appendPathComponent(_:)(aBlock);

      swift_bridgeObjectRelease(object);
      uint64_t v103 = v84;
      uint64_t v104 = (void (*)(char *, uint64_t))v186;
      v186((uint64_t)v103, v80);
      id v105 = [v184 defaultManager];
      URL.path.getter(v106);
      uint64_t v108 = v107;
      NSString v109 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v108);
      LODWORD(v108) = [v105 fileExistsAtPath:v109];

      Class v110 = v81;
      if (!(_DWORD)v108) {
        break;
      }
      uint64_t v111 = Data.init(contentsOf:options:)(v81, 0LL);
      unint64_t v113 = v112;
      sub_1000A4A64(0LL, (unint64_t *)&unk_100236670, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
      uint64_t v114 = sub_100098CD8(&qword_100235F50);
      uint64_t v115 = swift_allocObject(v114, 40LL, 7LL);
      *(_OWORD *)(v115 + 16) = v203;
      uint64_t v116 = sub_1000A4A64(0LL, &qword_100236680, &OBJC_CLASS___CKServerChangeToken_ptr);
      *(void *)(v115 + 32) = v116;
      static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&aBlock, v115, v111, v113);
      sub_100099394(v111, v113);
      swift_bridgeObjectRelease(v115);
      if (!v208)
      {
        sub_100099358((uint64_t)&aBlock, &qword_100236570);
        break;
      }

      if ((swift_dynamicCast(&v205, &aBlock, v182, v116, 6LL) & 1) == 0) {
        break;
      }
      v79 += 2;
      id v117 = v205;
      uint64_t v80 = v198;
      v104(v110, v198);

      uint64_t v78 = v201 - 1;
      uint64_t v81 = v110;
    }

    v104(v110, v198);
    LODWORD(v78) = 1;
LABEL_28:
    uint64_t v75 = swift_bridgeObjectRelease(v179);
    uint64_t v129 = v191;
    char v130 = v202;
    uint64_t v131 = &unk_10023D000;
    id v74 = v180;
  }

  else
  {
    uint64_t v129 = v191;
    char v130 = v202;
    uint64_t v131 = (void *)&unk_10023D000;
  }

  uint64_t v132 = static os_log_type_t.default.getter(v75);
  uint64_t v133 = v131[503];
  uint64_t v134 = os_log(_:dso:log:_:_:)( v132,  &_mh_execute_header,  v133,  "CloudSync: Manatee PCS keys are now available",  45LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v135 = static os_log_type_t.default.getter(v134);
  if ((v130 & 1) != 0 || !v74 || (_DWORD)v78)
  {
    uint64_t v139 = v181;
    uint64_t v140 = swift_allocObject(v181, 112LL, 7LL);
    uint64_t v141 = v140;
    uint64_t v142 = 0x206563726F46LL;
    if ((v130 & 1) == 0) {
      uint64_t v142 = 0LL;
    }
    unint64_t v143 = 0xE000000000000000LL;
    unint64_t v144 = 0xE600000000000000LL;
    if ((v130 & 1) == 0) {
      unint64_t v144 = 0xE000000000000000LL;
    }
    BOOL v147 = v74 == 0LL;
    *(_OWORD *)(v140 + 16) = xmmword_1001A6F30;
    unint64_t v145 = v195;
    *(void *)(v140 + 56) = &type metadata for String;
    *(void *)(v140 + 64) = v145;
    *(void *)(v140 + 32) = v142;
    *(void *)(v140 + 40) = v144;
    if (v147) {
      int v146 = 1;
    }
    else {
      int v146 = (int)v78;
    }
    BOOL v147 = v146 == 0;
    if (v146) {
      unint64_t v148 = 0xD000000000000034LL;
    }
    else {
      unint64_t v148 = 0LL;
    }
    *(void *)(v140 + 96) = &type metadata for String;
    *(void *)(v140 + 104) = v145;
    if (!v147) {
      unint64_t v143 = 0x80000001001D0460LL;
    }
    *(void *)(v140 + 72) = v148;
    *(void *)(v140 + 80) = v143;
    os_log(_:dso:log:_:_:)( v135,  &_mh_execute_header,  v133,  "CloudSync: %@Fetching from CloudKit %@",  38LL,  2LL,  v140,  v179);
    uint64_t v149 = swift_bridgeObjectRelease(v141);
    uint64_t v150 = static os_log_type_t.default.getter(v149);
    uint64_t v151 = v131[503];
    uint64_t v152 = swift_allocObject(v139, 72LL, 7LL);
    *(_OWORD *)(v152 + 16) = v203;
    uint64_t v153 = v197;
    uint64_t v154 = sub_1000F4214();
    *(void *)(v152 + 56) = &type metadata for String;
    *(void *)(v152 + 64) = v145;
    *(void *)(v152 + 32) = v154;
    *(void *)(v152 + 40) = v155;
    os_log(_:dso:log:_:_:)(v150, &_mh_execute_header, v151, "CloudSync: Subscribing to %@", 28LL, 2LL, v152);
    swift_bridgeObjectRelease(v152);
    uint64_t v156 = sub_1000F4214();
    uint64_t v158 = v157;
    Class v159 = sub_1001040C4(v156, v157);
    swift_bridgeObjectRelease(v158);
    uint64_t v160 = v159;
    id v161 = sub_1000F44A8();
    -[objc_class setGroup:](v160, "setGroup:", v161);

    swift_retain(v153);
    CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_100112C88, v153);
    uint64_t v162 = *(dispatch_queue_s **)(v153 + 64);
    uint64_t v163 = swift_allocObject(&unk_10020DE38, 32LL, 7LL);
    *(void *)(v163 + 16) = v153;
    *(void *)(v163 + 24) = v160;
    uint64_t v164 = swift_allocObject(&unk_10020DE60, 32LL, 7LL);
    *(void *)(v164 + 16) = sub_100113AC4;
    *(void *)(v164 + 24) = v163;
    uint64_t v209 = sub_100113AC8;
    uint64_t v210 = v164;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    uint64_t v207 = sub_1000F2CA0;
    uint64_t v208 = &unk_10020DE78;
    uint64_t v165 = _Block_copy(&aBlock);
    uint64_t v166 = v210;
    uint64_t v167 = v160;
    swift_retain(v153);
    swift_retain(v164);
    swift_release(v166);
    dispatch_sync(v162, v165);
    _Block_release(v165);
    LOBYTE(v165) = swift_isEscapingClosureAtFileLocation(v164, "", 123LL, 1190LL, 55LL, 1LL);
    swift_release(v164);
    if ((v165 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v168 = swift_allocObject(&unk_10020DEB0, 25LL, 7LL);
      *(void *)(v168 + 16) = v153;
      *(_BYTE *)(v168 + 24) = v130 & 1;
      uint64_t v209 = sub_100112CD4;
      uint64_t v210 = v168;
      aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
      aBlock._object = (void *)1107296256;
      uint64_t v207 = sub_1000F2C54;
      uint64_t v208 = &unk_10020DEC8;
      uint64_t v169 = _Block_copy(&aBlock);
      uint64_t v170 = swift_retain(v153);
      uint64_t v171 = v199;
      static DispatchQoS.unspecified.getter(v170);
      uint64_t v205 = _swiftEmptyArrayStorage;
      uint64_t v172 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v173 = sub_100098CD8((uint64_t *)&unk_100235790);
      uint64_t v174 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v175 = v188;
      uint64_t v176 = v173;
      uint64_t v177 = v190;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v205, v176, v174, v190, v172);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v171, v175, v169);

      _Block_release(v169);
      sub_100112C7C(v191, 0);
      (*(void (**)(char *, uint64_t))(v189 + 8))(v175, v177);
      (*(void (**)(char *, uint64_t))(v200 + 8))(v171, v187);
      uint64_t v178 = v210;
      swift_release(v163);
      swift_release(v178);
    }
  }

  else
  {
    uint64_t v136 = swift_allocObject(v181, 152LL, 7LL);
    *(_OWORD *)(v136 + 16) = xmmword_1001A8EB0;
    *(void *)(v136 + 56) = &type metadata for Bool;
    *(void *)(v136 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v136 + 32) = 0;
    *(void *)(v136 + 96) = &type metadata for Int;
    *(void *)(v136 + 104) = &protocol witness table for Int;
    *(void *)(v136 + 72) = 0LL;
    *(void *)(v136 + 136) = &type metadata for Bool;
    *(void *)(v136 + 144) = &protocol witness table for Bool;
    *(_BYTE *)(v136 + 112) = 0;
    os_log(_:dso:log:_:_:)( v135,  &_mh_execute_header,  v133,  "CloudSync: not fetching from CloudKit. Conditions not met - forceFetch: %d, serverDatabaseChangeToken == nil: %d, missingZoneChangeTokens: %d",  v179,  (_DWORD)v180,  v181);
    uint64_t v137 = swift_bridgeObjectRelease(v136);
    uint64_t v138 = static os_log_type_t.default.getter(v137);
    os_log(_:dso:log:_:_:)( v138,  &_mh_execute_header,  v131[503],  "CloudSync: finish Setup",  23LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1000F4CFC();
    sub_100112C7C(v129, 0);
  }

uint64_t sub_100103B08(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v11 = swift_errorRetain(a1);
    uint64_t v12 = static os_log_type_t.error.getter(v11);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v13 = qword_10023DFB8;
    uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
    uint64_t v20 = a1;
    swift_errorRetain(a1);
    uint64_t v16 = sub_100098CD8(&qword_1002357C0);
    uint64_t v17 = String.init<A>(describing:)(&v20, v16);
    uint64_t v19 = v18;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10009914C();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "CloudSync: Subscription error: %@", 33LL, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    return sub_100112AC0(a1, 1);
  }

  else
  {
    uint64_t v2 = static os_log_type_t.default.getter(a1);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v3 = qword_10023DFB8;
    uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
    *(_OWORD *)(v5 + 16) = xmmword_1001A5EA0;
    uint64_t v6 = sub_1000F4214();
    uint64_t v8 = v7;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_10009914C();
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v8;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "CloudSync: Successfully subscribed to %@", 40LL, 2LL, v5);
    return swift_bridgeObjectRelease(v5);
  }

uint64_t sub_100103CF0(uint64_t a1, char a2)
{
  return swift_release(a1);
}

uint64_t sub_100103D30(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = swift_errorRetain(a1);
    uint64_t v6 = static os_log_type_t.error.getter(v5);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v7 = qword_10023DFB8;
    uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_1001A5EA0;
    uint64_t v22 = a1;
    swift_errorRetain(a1);
    uint64_t v10 = sub_100098CD8(&qword_1002357C0);
    uint64_t v11 = String.init<A>(describing:)(&v22, v10);
    uint64_t v13 = v12;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_10009914C();
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "CloudSync: Error from fetchChanges: %@", 38LL, 2LL, v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v22 = a1;
    swift_errorRetain(a1);
    type metadata accessor for CKError(0LL);
    uint64_t v15 = v14;
    if ((swift_dynamicCast(&v21, &v22, v10, v14, 6LL) & 1) != 0)
    {
      uint64_t v16 = v21;
      uint64_t v17 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
      _BridgedStoredNSError.code.getter(&v22, v15, v17);
      if ((unint64_t)(v22 - 3) > 1)
      {
        id v18 = v16;
        sub_1000FF954((uint64_t)v18, 0);
        sub_100112AC0(a1, 1);
      }

      else
      {
        sub_1001042A0(150.0);
        sub_100112AC0(a1, 1);
      }
    }

    else
    {
      uint64_t v3 = sub_100112AC0(a1, 1);
    }
  }

  else
  {
    uint64_t v2 = static os_log_type_t.default.getter(a1);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v3 = os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: fetchChanges succeeded",  33LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v19 = static os_log_type_t.default.getter(v3);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_10023DFB8,  "CloudSync: finish Setup",  23LL,  2LL,  _swiftEmptyArrayStorage);
  return sub_1000F4CFC();
}

void sub_100103FF0(void *a1, void *a2, void (*a3)(void *, uint64_t))
{
  if (a2)
  {
    swift_errorRetain(a2);
    a3(a2, 1LL);
    swift_errorRelease(a2);
  }

  else if (a1)
  {
    id v6 = a1;
    a3(a1, 0LL);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000038LL,  0x80000001001D0320LL,  "audioaccessoryd/CloudCoordinator.swift",  38LL,  2LL,  1232LL,  0);
    __break(1u);
  }

Class sub_1001040C4(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  sub_1000A4A64(0LL, &qword_100236648, &OBJC_CLASS___CKDatabaseSubscription_ptr);
  swift_bridgeObjectRetain(a2);
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  Class isa = CKDatabaseSubscription.init(subscriptionID:)(v6).super.super.isa;
  id v8 = [objc_allocWithZone(CKNotificationInfo) init];
  [v8 setShouldSendContentAvailable:1];
  -[objc_class setNotificationInfo:](isa, "setNotificationInfo:", v8);
  sub_1000A4A64(0LL, &qword_100236650, &OBJC_CLASS___CKModifySubscriptionsOperation_ptr);
  uint64_t v9 = sub_100098CD8(&qword_100236588);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001A8ED0;
  *(void *)(v10 + 32) = isa;
  uint64_t v20 = (void *)v10;
  specialized Array._endMutation()(v10);
  uint64_t v11 = sub_100098CD8(&qword_100236658);
  uint64_t v12 = swift_allocObject(v11, 48LL, 7LL);
  Swift::Bool v13 = v12;
  *(_OWORD *)(v12 + 16) = xmmword_1001A5EA0;
  uint64_t v14 = *(void *)(v3 + 144);
  *(void *)(v12 + 32) = *(void *)(v3 + 136);
  *(void *)(v12 + 40) = v14;
  uint64_t v15 = isa;
  swift_bridgeObjectRetain(v14);
  v21.value._rawValue = v20;
  v21.is_nil = v13;
  CKModifySubscriptionsOperation v23 = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v21, v22);
  Class v16 = v23.super.super.super.super.isa;
  Class result = (Class) -[objc_class configuration]( v23.super.super.super.super.isa,  "configuration",  *(void *)&v23.super.super.super._private1);
  if (result)
  {
    Class v18 = result;
    -[objc_class setAutomaticallyRetryNetworkFailures:](result, "setAutomaticallyRetryNetworkFailures:", 0LL);

    Class result = (Class)-[objc_class configuration](v16, "configuration");
    if (result)
    {
      Class v19 = result;
      -[objc_class setDiscretionaryNetworkBehavior:](result, "setDiscretionaryNetworkBehavior:", 0LL);

      return v16;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001042A0(double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(v1 + 72);
  uint64_t v10 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_10020DD70, 32LL, 7LL);
  *(double *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100112C34;
  uint64_t v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020DD88;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  Swift::OpaquePointer_optional v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v16 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_1001044D4(uint64_t a1, double a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v5 = qword_10023DFB8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
  *(void *)(v7 + 56) = &type metadata for Double;
  *(void *)(v7 + 64) = &protocol witness table for Double;
  *(double *)(v7 + 32) = a2;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "scheduleRetryFetch for %f", v10);
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v3, v11, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v9 = result;
    if (!*(void *)(result + 40)) {
      sub_1000F549C(a2);
    }
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_1001045F0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  double v10 = (char *)&v38 - v9;
  unsigned int v42 = static os_log_type_t.default.getter(v11);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v41 = qword_10023DFB8;
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001A6F30;
  uint64_t v44 = a1;
  id v45 = [a1 scope];
  type metadata accessor for Scope(0LL);
  uint64_t v15 = String.init<A>(describing:)(&v45, v14);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_10009914C();
  unint64_t v19 = v18;
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  if (!a2)
  {
    uint64_t v28 = (void *)(v13 + 72);
    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v18;
LABEL_8:
    uint64_t v29 = v43;
    id v30 = v44;
    uint64_t v31 = v42;
    uint64_t v32 = &selRef_isAnySmartRoutingDeviceConnected_;
    uint64_t v33 = v41;
    *uint64_t v28 = 7104878LL;
    unint64_t v27 = 0xE300000000000000LL;
    goto LABEL_9;
  }

  uint64_t v39 = v5;
  char v40 = a2;
  id v20 = [a2 data];
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  unint64_t v23 = v22;

  Data.hexString.getter(v21, v23);
  uint64_t v25 = v24;
  unint64_t v27 = v26;
  sub_100099394(v21, v23);
  uint64_t v28 = (void *)(v13 + 72);
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v19;
  if (!v27)
  {
    uint64_t v5 = v39;
    a2 = v40;
    goto LABEL_8;
  }

  *uint64_t v28 = v25;
  uint64_t v5 = v39;
  a2 = v40;
  uint64_t v29 = v43;
  id v30 = v44;
  uint64_t v31 = v42;
  uint64_t v32 = &selRef_isAnySmartRoutingDeviceConnected_;
  uint64_t v33 = v41;
LABEL_9:
  *(void *)(v13 + 80) = v27;
  os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v33,  "New database change token, database, %@, token, %@",  50LL,  2LL,  v13);
  swift_bridgeObjectRelease(v13);
  uint64_t v34 = v29 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v35 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v34 + *(int *)(v35 + 28), v4);
  sub_1000EE6A4((uint64_t)v7, (uint64_t)[v30 v32[488]]);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
  v36(v7, v4);
  sub_100111524((uint64_t)v10, a2);
  return ((uint64_t (*)(char *, uint64_t))v36)(v10, v4);
}

uint64_t sub_10010488C(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v51 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)&v45 - v10;
  unsigned int v47 = static os_log_type_t.default.getter(v11);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v46 = qword_10023DFB8;
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v13 = swift_allocObject(v12, 152LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001A8EB0;
  NSString v49 = a1;
  id v52 = [a1 scope];
  type metadata accessor for Scope(0LL);
  uint64_t v15 = String.init<A>(describing:)(&v52, v14);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_10009914C();
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  unint64_t v19 = a2;
  id v20 = [a2 zoneName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v18;
  *(void *)(v13 + 72) = v21;
  *(void *)(v13 + 80) = v23;
  if (!a3)
  {
    uint64_t v33 = (void *)(v13 + 112);
    *(void *)(v13 + 136) = &type metadata for String;
    *(void *)(v13 + 144) = v18;
LABEL_8:
    uint64_t v35 = v19;
    uint64_t v37 = (uint64_t)v50;
    uint64_t v36 = v51;
    uint64_t v38 = v48;
    uint64_t v39 = v49;
    uint64_t v40 = v47;
    uint64_t v34 = v46;
    *uint64_t v33 = 7104878LL;
    unint64_t v32 = 0xE300000000000000LL;
    goto LABEL_9;
  }

  uint64_t v45 = v6;
  uint64_t v24 = a3;
  id v25 = [a3 data];
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
  unint64_t v28 = v27;

  Data.hexString.getter(v26, v28);
  uint64_t v30 = v29;
  unint64_t v32 = v31;
  sub_100099394(v26, v28);
  uint64_t v33 = (void *)(v13 + 112);
  *(void *)(v13 + 136) = &type metadata for String;
  *(void *)(v13 + 144) = v18;
  if (!v32)
  {
    a3 = v24;
    uint64_t v6 = v45;
    goto LABEL_8;
  }

  *uint64_t v33 = v30;
  a3 = v24;
  uint64_t v6 = v45;
  uint64_t v34 = v46;
  uint64_t v35 = v19;
  uint64_t v37 = (uint64_t)v50;
  uint64_t v36 = v51;
  uint64_t v38 = v48;
  uint64_t v39 = v49;
  uint64_t v40 = v47;
LABEL_9:
  *(void *)(v13 + 120) = v32;
  os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v34,  "New zone change token, database, %@, zoneName, %@, token, %@",  60LL,  2LL,  v13);
  swift_bridgeObjectRelease(v13);
  uint64_t v41 = v38 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v42 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v8, v41 + *(int *)(v42 + 28), v6);
  sub_1000EE83C((uint64_t)v8, (uint64_t)[v39 scope], v35);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v36 + 8);
  v43(v8, v6);
  sub_100111524(v37, a3);
  return ((uint64_t (*)(uint64_t, uint64_t))v43)(v37, v6);
}

uint64_t sub_100104B84()
{
  return sub_1000F39F0();
}

uint64_t sub_100104BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_10010BDB0, v2, &type metadata for Bool);
  int v10 = aBlock;
  uint64_t v11 = static os_log_type_t.default.getter(v9);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v12 = qword_10023DFB8;
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1001A5EA0;
  *(void *)(v14 + 56) = &type metadata for Bool;
  *(void *)(v14 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 32) = v10;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "localAvailable: %d", v31);
  uint64_t v15 = swift_bridgeObjectRelease(v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  uint64_t v17 = qword_10023DFB8;
  if (v10)
  {
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_10023DFB8,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v18 = (void *)swift_allocObject(&unk_10020D668, 40LL, 7LL);
    uint64_t v19 = v33;
    v18[2] = v32;
    v18[3] = v19;
    v18[4] = v3;
    uint64_t v42 = sub_10010BDF8;
    uint64_t v43 = v18;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256LL;
    id v20 = &unk_10020D680;
  }

  else
  {
    uint64_t v21 = os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_10023DFB8,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  v17,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v23 = (void *)swift_allocObject(&unk_10020D618, 40LL, 7LL);
    uint64_t v24 = v32;
    uint64_t v19 = v33;
    v23[2] = v3;
    v23[3] = v24;
    v23[4] = v19;
    uint64_t v42 = sub_10010BDC8;
    uint64_t v43 = v23;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256LL;
    id v20 = &unk_10020D630;
  }

  uint64_t v40 = sub_1000F2C54;
  uint64_t v41 = v20;
  id v25 = _Block_copy(&aBlock);
  swift_retain(v19);
  uint64_t v26 = swift_retain(v3);
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v29 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v4, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v6, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v36);
  return swift_release(v43);
}

uint64_t sub_100104F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static os_log_type_t.default.getter(v10);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v14 = qword_10023DFB8;
  uint64_t v15 = os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_10023DFB8,  "Done waiting for availableWaitQueue",  35LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v14,  "Call completion on non-head-of-queue job",  40LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v17 = (void *)swift_allocObject(&unk_10020D6B8, 40LL, 7LL);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a1;
  aBlock[4] = sub_10010BDF8;
  uint64_t v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020D6D0;
  unint64_t v18 = _Block_copy(aBlock);
  swift_retain(a3);
  uint64_t v19 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v22 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release(v29);
}

uint64_t sub_1001051E0(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v57 = a3;
  int v58 = a2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  uint64_t v7 = *(void *)(v60 + 64);
  __chkstk_darwin(v6);
  id v56 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v62 = (char *)&v54 - v9;
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v12 = qword_10023DFB8;
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1001A5EA0;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v20 = sub_10009914C();
  *(void *)(v14 + 64) = v20;
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v12,  "CloudSync: Attempting to create the record: %@",  46LL,  2LL,  v14);
  uint64_t v21 = swift_bridgeObjectRelease(v14);
  uint64_t v22 = IsAppleInternalBuild(v21);
  if ((_DWORD)v22) {
    unsigned int v23 = static os_log_type_t.default.getter(v22);
  }
  else {
    unsigned int v23 = static os_log_type_t.debug.getter(v22);
  }
  unsigned int v55 = v23;
  uint64_t v54 = qword_10023DFB8;
  uint64_t v24 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v24 + 16) = xmmword_1001A6F30;
  id v25 = [v15 recordID];
  id v26 = [v25 description];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = v20;
  *(void *)(v24 + 32) = v27;
  *(void *)(v24 + 40) = v29;
  id v30 = [v15 encryptedValues];
  id v31 = [v30 allKeys];
  swift_unknownObjectRelease(v30);
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String);

  id v33 = v15;
  uint64_t v34 = sub_100110B98(v32, v33);
  swift_bridgeObjectRelease(v32);

  uint64_t v35 = sub_100098CD8(&qword_100234E40);
  uint64_t v36 = Array.description.getter(v34, v35);
  uint64_t v38 = v37;
  swift_bridgeObjectRelease(v34);
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 104) = v20;
  *(void *)(v24 + 72) = v36;
  *(void *)(v24 + 80) = v38;
  os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v54, "Creating CKRecord %@ - values: %@", 33LL, 2LL, v24);
  uint64_t v39 = swift_bridgeObjectRelease(v24);
  uint64_t v40 = v62;
  static Date.now.getter(v39);
  uint64_t v42 = v60;
  uint64_t v41 = v61;
  uint64_t v43 = v56;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v56, v40, v61);
  uint64_t v44 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v45 = (v44 + 40) & ~v44;
  uint64_t v46 = v45 + v7;
  unint64_t v47 = (v45 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v48 = (char *)swift_allocObject(&unk_10020D9D8, v47 + 16, v44 | 7);
  uint64_t v49 = v59;
  *((void *)v48 + 2) = v57;
  *((void *)v48 + 3) = v49;
  *((void *)v48 + 4) = v4;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v48[v45], v43, v41);
  LOBYTE(v43) = v58 & 1;
  v48[v46] = v58 & 1;
  *(void *)&v48[v47 + 8] = v33;
  uint64_t v50 = swift_allocObject(&unk_10020DA00, 49LL, 7LL);
  *(void *)(v50 + 16) = v4;
  *(void *)(v50 + 24) = v33;
  *(void *)(v50 + 32) = sub_100110D80;
  *(void *)(v50 + 40) = v48;
  *(_BYTE *)(v50 + 48) = (_BYTE)v43;
  id v51 = v33;
  swift_retain_n(v4, 2LL);
  id v52 = v51;
  swift_retain(v49);
  swift_retain(v48);
  sub_100104BA4((uint64_t)sub_100110DF0, v50);
  swift_release(v48);
  swift_release(v50);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v62, v41);
}

void sub_1001055F4( void *a1, char a2, void (*a3)(void *, void), uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8)
{
  Swift::String v91 = a8;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) == 0)
  {
    id v20 = a1;
    a3(a1, 0LL);
    sub_1001121FC(v20, a6, a7 & 1, 0LL);
    sub_100112C7C(a1, 0);
    return;
  }

  uint64_t v87 = v18;
  uint64_t v88 = a5;
  Swift::String v89 = (void (*)(void, void))a3;
  uint64_t v90 = a4;
  *(void *)&__int128 v92 = a1;
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  uint64_t v21 = sub_100098CD8(&qword_1002357C0);
  type metadata accessor for CKError(0LL);
  uint64_t v23 = v22;
  uint64_t v24 = swift_dynamicCast(v98, &v92, v21, v22, 6LL);
  if ((_DWORD)v24)
  {
    uint64_t v86 = a6;
    id v25 = (void *)v98[0];
    uint64_t v26 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
    uint64_t v27 = _BridgedStoredNSError.code.getter(&v92, v23, v26);
    if ((void)v92 == 26LL)
    {
LABEL_5:
      id v84 = v25;
      int v85 = a7;
      uint64_t v28 = v91;
      uint64_t v29 = static os_log_type_t.error.getter(v27);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v30 = qword_10023DFB8;
      uint64_t v31 = os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_10023DFB8,  "Setting up zone after zoneNotFound error",  40LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v32 = static os_log_type_t.default.getter(v31);
      os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  v30,  "Re-attempting created record after creating zone",  48LL,  2LL,  _swiftEmptyArrayStorage);
      id v33 = [v28 recordID];
      id v34 = [v33 zoneID];

      id v35 = [v34 zoneName];
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v82 = v36;

      uint64_t v37 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
      swift_weakInit(v37 + 16, v88);
      uint64_t v38 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))( (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v86,  v87);
      uint64_t v39 = *(unsigned __int8 *)(v16 + 80);
      uint64_t v40 = (v39 + 48) & ~v39;
      uint64_t v41 = v40 + v17;
      uint64_t v42 = (char *)swift_allocObject(&unk_10020DB90, v40 + v17 + 1, v39 | 7);
      uint64_t v43 = v89;
      *((void *)v42 + 2) = v37;
      *((void *)v42 + 3) = v43;
      uint64_t v44 = v90;
      uint64_t v45 = v91;
      *((void *)v42 + 4) = v90;
      *((void *)v42 + 5) = v45;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v42[v40], v19, v38);
      v42[v41] = v85 & 1;
      swift_retain(v37);
      swift_retain(v44);
      id v46 = v45;
      uint64_t v47 = v82;
      sub_1000FD9F4(v83, v82, 0LL, (void (*)(void))sub_1001127E4, (uint64_t)v42);
      swift_bridgeObjectRelease(v47);

      sub_100112C7C(a1, 1);
      swift_release(v37);
      swift_release(v42);
      return;
    }

    v98[0] = (uint64_t)v25;
    uint64_t v57 = _BridgedStoredNSError.userInfo.getter(v23, v26);
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
    uint64_t v60 = v59;
    if (*(void *)(v57 + 16) && (unint64_t v61 = sub_1000A3A10(v58, v59), (v62 & 1) != 0))
    {
      sub_100112834(*(void *)(v57 + 56) + 32 * v61, (uint64_t)&v92);
    }

    else
    {
      __int128 v92 = 0u;
      __int128 v93 = 0u;
    }

    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v57);
    if (*((void *)&v93 + 1))
    {
      uint64_t v63 = sub_100098CD8(&qword_100236578);
      uint64_t v64 = swift_dynamicCast(v98, &v92, (char *)&type metadata for Any + 8, v63, 6LL);
      if ((v64 & 1) == 0)
      {
        uint64_t v68 = v25;
LABEL_25:
        uint64_t v70 = static os_log_type_t.error.getter(v64);
        uint64_t v71 = (void (*)(void *, uint64_t))v89;
        if (qword_100234C18 != -1) {
          swift_once(&qword_100234C18, sub_10018A920);
        }
        uint64_t v72 = qword_10023DFB8;
        uint64_t v73 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
        *(_OWORD *)(v74 + 16) = xmmword_1001A5EA0;
        swift_getErrorValue(a1, v95, v94);
        uint64_t v75 = Error.localizedDescription.getter(v94[1], v94[2]);
        uint64_t v77 = v76;
        *(void *)(v74 + 56) = &type metadata for String;
        *(void *)(v74 + 64) = sub_10009914C();
        *(void *)(v74 + 32) = v75;
        *(void *)(v74 + 40) = v77;
        os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v72, "Error saving ck record to cloud - %@", 36LL, 2LL, v74);
        swift_bridgeObjectRelease(v74);
        id v78 = v68;
        v71(v68, 1LL);

        id v79 = v78;
        sub_1000FF954((uint64_t)v79, 0);

        id v80 = v79;
        sub_1001121FC(v91, v86, a7 & 1, (uint64_t)v68);

        sub_100112C7C(a1, 1);
        return;
      }

      uint64_t v65 = v98[0];
      sub_1000F2CC0(v98[0], (uint64_t)&v92);
      uint64_t v66 = swift_bridgeObjectRelease(v65);
      if (*((void *)&v93 + 1))
      {
        uint64_t v67 = static os_log_type_t.error.getter(v66);
        if (qword_100234C18 != -1) {
          swift_once(&qword_100234C18, sub_10018A920);
        }
        os_log(_:dso:log:_:_:)( v67,  &_mh_execute_header,  qword_10023DFB8,  "zoneNotFound error in partial errors.",  37LL,  2LL,  _swiftEmptyArrayStorage);
        uint64_t v27 = (void *)sub_100099358((uint64_t)&v92, &qword_100236580);
        goto LABEL_5;
      }

      uint64_t v68 = v25;
      uint64_t v69 = &qword_100236580;
    }

    else
    {
      uint64_t v68 = v25;
      uint64_t v69 = &qword_100236570;
    }

    uint64_t v64 = sub_100099358((uint64_t)&v92, v69);
    goto LABEL_25;
  }

  uint64_t v48 = a6;
  uint64_t v49 = v91;
  uint64_t v50 = static os_log_type_t.error.getter(v24);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v51 = qword_10023DFB8;
  uint64_t v52 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v53 = swift_allocObject(v52, 72LL, 7LL);
  *(_OWORD *)(v53 + 16) = xmmword_1001A5EA0;
  swift_getErrorValue(a1, v97, v96);
  uint64_t v54 = Error.localizedDescription.getter(v96[1], v96[2]);
  uint64_t v56 = v55;
  *(void *)(v53 + 56) = &type metadata for String;
  *(void *)(v53 + 64) = sub_10009914C();
  *(void *)(v53 + 32) = v54;
  *(void *)(v53 + 40) = v56;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Error saving record to cloud - %@", 33LL, 2LL, v53);
  swift_bridgeObjectRelease(v53);
  swift_errorRetain(a1);
  v89(a1, 1LL);
  sub_1001121FC(v49, v48, a7 & 1, (uint64_t)a1);
  sub_100112C7C(a1, 1);
  sub_100112C7C(a1, 1);
}

uint64_t sub_100105DB0( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6, int a7)
{
  uint64_t v58 = a6;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v61, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    unint64_t v32 = sub_100110974();
    uint64_t v33 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v32, 0LL, 0LL);
    *id v34 = 0LL;
    a3(v33, 1LL);
    return swift_errorRelease(v33);
  }

  uint64_t isEscapingClosureAtFileLocation = Strong;
  int v57 = a7;
  if (a1)
  {
    uint64_t v19 = swift_errorRetain(a1);
    uint64_t v20 = static os_log_type_t.error.getter(v19);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v21 = qword_10023DFB8;
    uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_1001A5EA0;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v24 = sub_100098CD8(&qword_1002357C0);
    uint64_t v25 = String.init<A>(describing:)(aBlock, v24);
    uint64_t v27 = v26;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10009914C();
    *(void *)(v23 + 32) = v25;
    *(void *)(v23 + 40) = v27;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Unable to create zone - %@", 26LL, 2LL, v23);
    swift_bridgeObjectRelease(v23);
    unint64_t v28 = sub_100110974();
    uint64_t v29 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v28, 0LL, 0LL);
    *uint64_t v30 = a1;
    swift_errorRetain(a1);
    a3(v29, 1LL);
    swift_errorRelease(v29);
    swift_errorRetain(a1);
    sub_1001121FC(a5, v58, v57 & 1, a1);
    swift_release(isEscapingClosureAtFileLocation);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }

  uint64_t v35 = sub_100098CD8(&qword_100236588);
  uint64_t v36 = swift_allocObject(v35, 40LL, 7LL);
  *(_OWORD *)(v36 + 16) = xmmword_1001A8ED0;
  *(void *)(v36 + 32) = a5;
  aBlock[0] = v36;
  specialized Array._endMutation()(v36);
  uint64_t v56 = aBlock[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v58,  v13);
  uint64_t v37 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v38 = (v37 + 48) & ~v37;
  uint64_t v39 = v38 + v15;
  uint64_t v40 = (char *)swift_allocObject(&unk_10020DBB8, v38 + v15 + 1, v37 | 7);
  *((void *)v40 + 2) = a3;
  *((void *)v40 + 3) = a4;
  *((void *)v40 + 4) = isEscapingClosureAtFileLocation;
  *((void *)v40 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v40[v38], v16, v13);
  v40[v39] = v57 & 1;
  id v41 = a5;
  swift_retain(a4);
  swift_retain(isEscapingClosureAtFileLocation);
  uint64_t v42 = v56;
  id v43 = sub_100106420(v56, (uint64_t)sub_1001128F8, (uint64_t)v40);
  swift_release(v40);
  uint64_t v44 = swift_bridgeObjectRelease(v42);
  if (!v43) {
    return swift_release(isEscapingClosureAtFileLocation);
  }
  uint64_t v45 = static os_log_type_t.default.getter(v44);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v46 = qword_10023DFB8;
  uint64_t v47 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
  *(_OWORD *)(v48 + 16) = xmmword_1001A5EA0;
  *(void *)(v48 + 56) = sub_1000A4A64(0LL, &qword_100236590, &OBJC_CLASS___CKModifyRecordsOperation_ptr);
  *(void *)(v48 + 64) = sub_100112958( &qword_100236598,  &qword_100236590,  &OBJC_CLASS___CKModifyRecordsOperation_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v48 + 32) = v43;
  id v49 = v43;
  os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  v46,  "[Second Attempt] Adding CloudKit operation for create record %@",  63LL,  2LL,  v48);
  swift_bridgeObjectRelease(v48);
  uint64_t v50 = *(dispatch_queue_s **)(isEscapingClosureAtFileLocation + 64);
  uint64_t v51 = swift_allocObject(&unk_10020DBE0, 32LL, 7LL);
  *(void *)(v51 + 16) = isEscapingClosureAtFileLocation;
  *(void *)(v51 + 24) = v49;
  uint64_t v52 = swift_allocObject(&unk_10020DC08, 32LL, 7LL);
  *(void *)(v52 + 16) = sub_100113AC4;
  *(void *)(v52 + 24) = v51;
  aBlock[4] = sub_100113AC8;
  uint64_t v60 = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2CA0;
  aBlock[3] = &unk_10020DC20;
  uint64_t v53 = _Block_copy(aBlock);
  uint64_t v54 = v60;
  swift_retain(isEscapingClosureAtFileLocation);
  id v55 = v49;
  swift_retain(v52);
  swift_release(v54);
  dispatch_sync(v50, v53);
  swift_release(isEscapingClosureAtFileLocation);

  _Block_release(v53);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v52, "", 123LL, 1399LL, 69LL, 1LL);
  swift_release(v51);
  uint64_t result = swift_release(v52);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    return swift_release(isEscapingClosureAtFileLocation);
  }

  return result;
}

void sub_1001062E4( uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(a1, 1LL);
    sub_1001121FC(a6, a7, a8 & 1, a1);
    sub_100112A5C(a1, 1);
    return;
  }

  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v13) {
      goto LABEL_4;
    }
LABEL_13:
    sub_100112A5C(a1, 0);
    __break(1u);
    goto LABEL_14;
  }

  if (a1 >= 0) {
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v16 = a1;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v16)) {
    goto LABEL_13;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
LABEL_14:
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    goto LABEL_7;
  }

  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v14 = *(id *)(a1 + 32);
LABEL_7:
    uint64_t v15 = v14;
    sub_100112A5C(a1, 0);
    a3((uint64_t)v15, 0LL);

    sub_1001121FC(a6, a7, a8 & 1, 0LL);
    return;
  }

  __break(1u);
}

id sub_100106420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  __chkstk_darwin(v12);
  id v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t aBlock = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    uint64_t v63 = a2;
    if (v15) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease(a1);
    unint64_t v29 = aBlock;
    if ((aBlock & 0x8000000000000000LL) != 0) {
      goto LABEL_33;
    }
    goto LABEL_22;
  }

  if (a1 < 0) {
    uint64_t v30 = a1;
  }
  else {
    uint64_t v30 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v30);
  uint64_t v63 = a2;
  if (!v15) {
    goto LABEL_21;
  }
LABEL_3:
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v16 = a3;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    for (uint64_t i = 0LL; i != v15; ++i)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      uint64_t v21 = CKRecord.changedKeys()();
      uint64_t v22 = *(void *)(v21 + 16);
      swift_bridgeObjectRelease(v21);
      if (v22)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v18 = *(void **)(aBlock + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v20);
        specialized ContiguousArray._endMutation()(v19);
      }

      else
      {
        swift_unknownObjectRelease(v20);
      }
    }
  }

  else
  {
    for (uint64_t j = 0LL; j != v15; ++j)
    {
      id v26 = *(id *)(a1 + 8 * j + 32);
      uint64_t v27 = CKRecord.changedKeys()();
      uint64_t v28 = *(void *)(v27 + 16);
      swift_bridgeObjectRelease(v27);
      if (v28)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v24 = *(void **)(aBlock + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
        uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v26);
        specialized ContiguousArray._endMutation()(v25);
      }

      else
      {
      }
    }
  }

  swift_bridgeObjectRelease(a1);
  a3 = v16;
  unint64_t v29 = aBlock;
  if ((aBlock & 0x8000000000000000LL) != 0) {
    goto LABEL_33;
  }
LABEL_22:
  if ((v29 & 0x4000000000000000LL) == 0)
  {
    uint64_t v31 = *(void *)(v29 + 16);
    goto LABEL_24;
  }

uint64_t sub_100106A58()
{
  v0._uint64_t countAndFlagsBits = 8236LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  type metadata accessor for CKError(0LL);
  uint64_t v2 = v1;
  uint64_t v3 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
  _BridgedStoredNSError.code.getter(&v10, v2, v3);
  id v4 = (id)stringForCKErrorCode(v10);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  return swift_bridgeObjectRelease(v7);
}

void sub_100106B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a3;
  if (a1)
  {
    if (!a3)
    {
      uint64_t v8 = static os_log_type_t.default.getter(a1);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v9 = qword_10023DFB8;
      uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
      *(_OWORD *)(v11 + 16) = xmmword_1001A5EA0;
      *(void *)(v11 + 56) = sub_100098CD8(&qword_1002365A0);
      *(void *)(v11 + 64) = sub_1000A4318( &qword_1002365A8,  &qword_1002365A0,  (uint64_t)&protocol conformance descriptor for [A]);
      *(void *)(v11 + 32) = a4;
      swift_bridgeObjectRetain(a4);
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Records (%@) saved successfully.", 32LL, 2LL, v11);
      uint64_t v12 = swift_bridgeObjectRelease(v11);
      uint64_t v13 = IsAppleInternalBuild(v12);
      if ((_DWORD)v13) {
        unsigned int v14 = static os_log_type_t.default.getter(v13);
      }
      else {
        unsigned int v14 = static os_log_type_t.debug.getter(v13);
      }
      unsigned int v62 = v14;
      uint64_t v64 = qword_10023DFB8;
      uint64_t v63 = swift_allocObject(v10, 72LL, 7LL);
      *(_OWORD *)(v63 + 16) = xmmword_1001A5EA0;
      if ((unint64_t)a4 >> 62)
      {
        if (a4 < 0) {
          uint64_t v59 = a4;
        }
        else {
          uint64_t v59 = a4 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a4);
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v59);
      }

      else
      {
        uint64_t v6 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(a4);
      }

      uint64_t v66 = (void (*)(uint64_t, void))a5;
      a5 = _swiftEmptyArrayStorage;
      if (!v6)
      {
        uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_42:
        swift_bridgeObjectRelease(a4);
        uint64_t v56 = Array.description.getter(v32, &type metadata for String);
        uint64_t v58 = v57;
        swift_bridgeObjectRelease(v32);
        *(void *)(v63 + 56) = &type metadata for String;
        *(void *)(v63 + 64) = sub_10009914C();
        *(void *)(v63 + 32) = v56;
        *(void *)(v63 + 40) = v58;
        os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v64, "Update cloud with CKRecords - %@", 32LL, 2LL, v63);
        swift_bridgeObjectRelease(v63);
        v66(a1, 0LL);
        return;
      }

      uint64_t v31 = 0LL;
      uint64_t v69 = v6;
      unint64_t v70 = a4 & 0xC000000000000001LL;
      uint64_t v67 = a4 + 32;
      uint64_t v68 = a4;
      uint64_t v32 = _swiftEmptyArrayStorage;
      while (1)
      {
        id v33 = v70 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, a4) : *(id *)(v67 + 8 * v31);
        id v34 = v33;
        BOOL v35 = __OFADD__(v31, 1LL);
        uint64_t v36 = v31 + 1;
        if (v35) {
          break;
        }
        Swift::OpaquePointer_optional v71 = v32;
        uint64_t v72 = v36;
        id v37 = [v33 encryptedValues];
        id v38 = [v37 allKeys];
        swift_unknownObjectRelease(v37);
        uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, &type metadata for String);

        uint64_t v74 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v40 = *(void *)(v39 + 16);
        if (v40)
        {
          swift_bridgeObjectRetain(v39);
          id v41 = (void *)(v39 + 40);
          do
          {
            uint64_t v43 = *v41;
            swift_bridgeObjectRetain(*v41);
            id v44 = [v34 encryptedValues];
            NSString v45 = String._bridgeToObjectiveC()();
            id v46 = [v44 objectForKeyedSubscript:v45];
            swift_bridgeObjectRelease(v43);

            uint64_t v47 = swift_unknownObjectRelease(v44);
            if (v46)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
              unint64_t v49 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v48 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v49 >= v48 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1LL);
              }
              uint64_t v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v46);
              specialized Array._endMutation()(v42);
            }

            v41 += 2;
            --v40;
          }

          while (v40);
          swift_bridgeObjectRelease(v39);
          a5 = (void *)v74;
          a4 = v68;
        }

        swift_bridgeObjectRelease(v39);
        uint64_t v50 = sub_100098CD8(&qword_100234E40);
        uint64_t v51 = Array.description.getter(a5, v50);
        uint64_t v11 = v52;

        swift_bridgeObjectRelease(a5);
        uint64_t v32 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0) {
          uint64_t v32 = sub_10018B814(0LL, v71[2] + 1LL, 1, v71);
        }
        a5 = _swiftEmptyArrayStorage;
        unint64_t v54 = v32[2];
        unint64_t v53 = v32[3];
        if (v54 >= v53 >> 1) {
          uint64_t v32 = sub_10018B814((void *)(v53 > 1), v54 + 1, 1, v32);
        }
        void v32[2] = v54 + 1;
        uint64_t v55 = &v32[2 * v54];
        v55[4] = v51;
        v55[5] = v11;
        uint64_t v6 = v69;
        uint64_t v31 = v72;
        if (v72 == v69) {
          goto LABEL_42;
        }
      }

      __break(1u);
      goto LABEL_44;
    }
  }

  else if (!a3)
  {
    uint64_t v27 = static os_log_type_t.error.getter(0LL);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFB8,  "Record not found in saved records.",  34LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_100110974();
    uint64_t v29 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v28, 0LL, 0LL);
    *uint64_t v30 = 0LL;
    ((void (*)(uint64_t, uint64_t))a5)(v29, 1LL);
    swift_errorRelease(v29);
    return;
  }

  a4 = a1;
  uint64_t v15 = swift_errorRetain(a3);
  uint64_t v11 = static os_log_type_t.error.getter(v15);
  if (qword_100234C18 != -1) {
LABEL_44:
  }
    swift_once(&qword_100234C18, sub_10018A920);
  uint64_t v16 = qword_10023DFB8;
  uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1001A5EA0;
  swift_getErrorValue(v6, v76, v75);
  uint64_t v19 = Error.localizedDescription.getter(v75[1], v75[2]);
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_10009914C();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v16, "Error saving records. Error - %@", 32LL, 2LL, v18);
  swift_bridgeObjectRelease(v18);
  sub_1000FF954(v6, 0);
  uint64_t v74 = v6;
  swift_errorRetain(v6);
  uint64_t v22 = sub_100098CD8(&qword_1002357C0);
  type metadata accessor for CKError(0LL);
  uint64_t v24 = v23;
  if ((swift_dynamicCast(&v73, &v74, v22, v23, 6LL) & 1) != 0)
  {
    uint64_t v25 = v73;
    uint64_t v26 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
    _BridgedStoredNSError.code.getter(&v74, v24, v26);
    if (v74 == 2 && a4)
    {
      if ((unint64_t)a4 >> 62)
      {
        if (a4 >= 0) {
          uint64_t v60 = a4 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v60 = a4;
        }
        swift_bridgeObjectRetain(a4);
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(a4);
        if (v61 >= 2) {
          goto LABEL_14;
        }
      }

      else if (*(uint64_t *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10) >= 2)
      {
LABEL_14:
        ((void (*)(uint64_t, void))a5)(a4, 0LL);
        swift_errorRetain(v6);
        ((void (*)(uint64_t, uint64_t))a5)(v6, 1LL);
        swift_errorRelease(v6);
        swift_errorRelease(v6);

        return;
      }
    }
  }

  swift_errorRetain(v6);
  ((void (*)(uint64_t, uint64_t))a5)(v6, 1LL);
  swift_errorRelease(v6);
  swift_errorRelease(v6);
}

uint64_t sub_100107288(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1001072AC( a1,  a2,  a3,  a4,  (unint64_t *)&qword_100234E30,  &OBJC_CLASS___CKRecord_ptr,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr);
}

uint64_t sub_1001072AC( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5, void *a6, unint64_t *a7, void *a8)
{
  uint64_t v12 = a2;
  unsigned int v14 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v15 = sub_1000A4A64(0LL, a5, a6);
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v15);
  }

  if (a3)
  {
    uint64_t v16 = sub_1000A4A64(0LL, a7, a8);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v16);
  }

  swift_retain(v13);
  id v17 = a4;
  v14(v12, a3, a4);
  swift_release(v13);

  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_100107374(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = a1;
  uint64_t v7 = a1 + 120;
  swift_beginAccess(a1 + 120, v208, 0LL, 0LL);
  uint64_t v8 = *(void *)(v6 + 120);
  id v9 = a2;
  uint64_t v10 = swift_bridgeObjectRetain(v8);
  sub_100110394(v10, v9);
  uint64_t v12 = v11;
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v8);

  uint64_t v202 = v6;
  if (v12)
  {
    unint64_t v17 = sub_100110974();
    uint64_t v18 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v17, 0LL, 0LL);
    *uint64_t v19 = 5LL;
    v207[0] = v18;
    v14(v207);
    swift_errorRelease(v18);
    swift_beginAccess(v7, v207, 33LL, 0LL);
    uint64_t v20 = sub_10010C568((uint64_t)v12, (uint64_t (*)(uint64_t))sub_1000A3B48, &qword_1002352F0);
    uint64_t v22 = v21;
    uint64_t v23 = swift_endAccess(v207);
    if (v20) {
      uint64_t v23 = sub_10010BFB8(v20, v22);
    }
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v25 = qword_10023DFB8;
    uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_1001A5EA0;
    id v28 = v12;
    id v29 = [v28 description];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_10009914C();
    *(void *)(v27 + 32) = v30;
    *(void *)(v27 + 40) = v32;
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v25,  "Updating cancelled pending record deletion for: %@",  50LL,  2LL,  v27);
    swift_release(v16);

    swift_bridgeObjectRelease(v27);
    uint64_t v6 = v202;
  }

  swift_beginAccess(v6 + 112, v207, 0LL, 0LL);
  uint64_t v33 = *(void *)(v6 + 112);
  id v34 = v9;
  uint64_t v35 = swift_bridgeObjectRetain(v33);
  sub_10010F88C(v35, v34);
  id v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  swift_bridgeObjectRelease(v33);

  uint64_t v201 = (void *)(v6 + 112);
  if (v37)
  {
    uint64_t v42 = swift_allocObject(&unk_10020DB18, 32LL, 7LL);
    *(void *)(v42 + 16) = v39;
    *(void *)(v42 + 24) = v41;
    uint64_t v193 = v42;
    uint64_t v43 = static os_log_type_t.default.getter(v42);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v44 = qword_10023DFB8;
    uint64_t v45 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
    *(_OWORD *)(v46 + 16) = xmmword_1001A5EA0;
    id v47 = v37;
    id v48 = [v47 description];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v51 = v50;
    uint64_t v190 = v47;

    *(void *)(v46 + 56) = &type metadata for String;
    unint64_t v52 = sub_10009914C();
    *(void *)(v46 + 64) = v52;
    *(void *)(v46 + 32) = v49;
    *(void *)(v46 + 40) = v51;
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Existing pending record: %@", 27LL, 2LL, v46);
    uint64_t v53 = swift_bridgeObjectRelease(v46);
    uint64_t v54 = static os_log_type_t.default.getter(v53);
    uint64_t v55 = qword_10023DFB8;
    uint64_t v56 = swift_allocObject(v45, 72LL, 7LL);
    *(_OWORD *)(v56 + 16) = xmmword_1001A5EA0;
    id v57 = v34;
    id v58 = [v57 description];
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    uint64_t v61 = v60;

    *(void *)(v56 + 56) = &type metadata for String;
    *(void *)(v56 + 64) = v52;
    *(void *)(v56 + 32) = v59;
    *(void *)(v56 + 40) = v61;
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  v55,  "Replacing existing pending record with updated record: %@",  57LL,  2LL,  v56);
    uint64_t v62 = swift_bridgeObjectRelease(v56);
    uint64_t v63 = IsAppleInternalBuild(v62);
    if ((_DWORD)v63) {
      uint64_t v64 = static os_log_type_t.default.getter(v63);
    }
    else {
      uint64_t v64 = static os_log_type_t.debug.getter(v63);
    }
    uint64_t v107 = v64;
    uint64_t v108 = qword_10023DFB8;
    uint64_t v109 = swift_allocObject(v45, 112LL, 7LL);
    *(_OWORD *)(v109 + 16) = xmmword_1001A6F30;
    id v110 = [v57 recordID];
    id v111 = [v110 description];
    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
    uint64_t v114 = v113;

    *(void *)(v109 + 56) = &type metadata for String;
    *(void *)(v109 + 64) = v52;
    *(void *)(v109 + 32) = v112;
    *(void *)(v109 + 40) = v114;
    id v115 = [v57 encryptedValues];
    id v116 = [v115 allKeys];
    swift_unknownObjectRelease(v115);
    uint64_t v117 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v116, &type metadata for String);

    id v118 = v57;
    uint64_t v119 = sub_100110B98(v117, v118);
    swift_bridgeObjectRelease(v117);

    uint64_t v120 = sub_100098CD8(&qword_100234E40);
    uint64_t v121 = Array.description.getter(v119, v120);
    uint64_t v123 = v122;
    swift_bridgeObjectRelease(v119);
    *(void *)(v109 + 96) = &type metadata for String;
    *(void *)(v109 + 104) = v52;
    *(void *)(v109 + 72) = v121;
    *(void *)(v109 + 80) = v123;
    os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, v108, "Updated record CKRecord %@ - %@", 31LL, 2LL, v109);
    swift_bridgeObjectRelease(v109);
    swift_beginAccess(v201, &v204, 33LL, 0LL);
    uint64_t v124 = sub_10010C568((uint64_t)v190, (uint64_t (*)(uint64_t))sub_1000A3AFC, &qword_1002352E8);
    uint64_t v126 = v125;
    swift_endAccess(&v204);
    uint64_t v6 = v202;
    if (v124) {
      sub_10010BFB8(v124, v126);
    }
    uint64_t v127 = (void *)swift_allocObject(&unk_10020DB40, 56LL, 7LL);
    v127[2] = v190;
    v127[3] = sub_100110E90;
    v127[4] = v193;
    v127[5] = a3;
    v127[6] = a4;
    uint64_t v128 = swift_allocObject(&unk_10020DB68, 32LL, 7LL);
    *(void *)(v128 + 16) = sub_100110ECC;
    *(void *)(v128 + 24) = v127;
    swift_beginAccess(v201, &v204, 33LL, 0LL);
    id v129 = v190;
    swift_retain(v193);
    swift_retain(a4);
    swift_retain(v127);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v201);
    id v203 = (id)*v201;
    *uint64_t v201 = 0x8000000000000000LL;
    uint64_t v131 = sub_10010E884( (uint64_t)sub_100110E8C,  v128,  v118,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_1000A3AFC,  &qword_1002352E8,  (unint64_t *)&qword_100234E30,  &OBJC_CLASS___CKRecord_ptr);
    uint64_t v133 = v132;
    uint64_t v134 = *v201;
    *uint64_t v201 = v203;
    swift_bridgeObjectRelease(v134);
    swift_endAccess(&v204);
    swift_release(v193);

    uint64_t v135 = swift_release(v127);
    if (v131)
    {
LABEL_27:
      char v136 = a5;
LABEL_28:
      uint64_t v135 = sub_10010BFB8(v131, v133);
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  id v65 = [v34 encryptedValues];
  NSString v66 = String._bridgeToObjectiveC()();
  id v67 = [v65 objectForKeyedSubscript:v66];
  swift_unknownObjectRelease(v65);

  if (!v67) {
    goto LABEL_21;
  }
  id v203 = v67;
  uint64_t v69 = sub_100098CD8(&qword_100234E40);
  uint64_t v68 = swift_dynamicCast(&v204, &v203, v69, &type metadata for String, 6LL);
  if ((v68 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v71 = v204;
  uint64_t v70 = (uint64_t)v205;
  uint64_t v72 = *(void *)(v6 + 112);
  id v73 = v34;
  swift_bridgeObjectRetain(v70);
  uint64_t v74 = swift_bridgeObjectRetain(v72);
  sub_10010FB64(v74, v71, v70);
  uint64_t v76 = v75;
  uint64_t v194 = v77;
  uint64_t v79 = v78;
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease_n(v70, 2LL);

  if (!v76)
  {
LABEL_21:
    uint64_t v105 = IsAppleInternalBuild(v68);
    if ((_DWORD)v105) {
      unsigned int v106 = static os_log_type_t.default.getter(v105);
    }
    else {
      unsigned int v106 = static os_log_type_t.debug.getter(v105);
    }
    unsigned int v197 = v106;
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v195 = qword_10023DFB8;
    uint64_t v137 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v138 = swift_allocObject(v137, 112LL, 7LL);
    *(_OWORD *)(v138 + 16) = xmmword_1001A6F30;
    id v139 = [v34 recordID];
    id v140 = [v139 description];
    uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
    uint64_t v143 = v142;

    *(void *)(v138 + 56) = &type metadata for String;
    unint64_t v144 = sub_10009914C();
    *(void *)(v138 + 64) = v144;
    *(void *)(v138 + 32) = v141;
    *(void *)(v138 + 40) = v143;
    id v145 = [v34 encryptedValues];
    id v146 = [v145 allKeys];
    swift_unknownObjectRelease(v145);
    uint64_t v147 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v146, &type metadata for String);

    id v148 = v34;
    uint64_t v149 = sub_100110B98(v147, v148);
    swift_bridgeObjectRelease(v147);

    uint64_t v150 = sub_100098CD8(&qword_100234E40);
    uint64_t v151 = Array.description.getter(v149, v150);
    uint64_t v153 = v152;
    swift_bridgeObjectRelease(v149);
    *(void *)(v138 + 96) = &type metadata for String;
    *(void *)(v138 + 104) = v144;
    *(void *)(v138 + 72) = v151;
    *(void *)(v138 + 80) = v153;
    os_log(_:dso:log:_:_:)(v197, &_mh_execute_header, v195, "Staging pending CKRecord %@ - %@", 32LL, 2LL, v138);
    swift_bridgeObjectRelease(v138);
    uint64_t v154 = swift_allocObject(&unk_10020DA78, 32LL, 7LL);
    *(void *)(v154 + 16) = a3;
    *(void *)(v154 + 24) = a4;
    swift_beginAccess(v201, &v204, 33LL, 0LL);
    swift_retain(a4);
    char v155 = swift_isUniquelyReferenced_nonNull_native(*v201);
    id v203 = (id)*v201;
    *uint64_t v201 = 0x8000000000000000LL;
    uint64_t v131 = sub_10010E884( (uint64_t)sub_100110E8C,  v154,  v148,  v155,  (uint64_t (*)(void *))sub_1000A3AFC,  &qword_1002352E8,  (unint64_t *)&qword_100234E30,  &OBJC_CLASS___CKRecord_ptr);
    uint64_t v133 = v156;
    uint64_t v157 = *v201;
    *uint64_t v201 = v203;
    swift_bridgeObjectRelease(v157);
    uint64_t v135 = swift_endAccess(&v204);
    if (v131) {
      goto LABEL_27;
    }
LABEL_33:
    char v136 = a5;
    goto LABEL_34;
  }

  uint64_t v188 = v69;
  uint64_t v80 = v79;
  uint64_t v81 = swift_allocObject(&unk_10020DAA0, 32LL, 7LL);
  *(void *)(v81 + 16) = v194;
  *(void *)(v81 + 24) = v80;
  uint64_t v82 = swift_retain(v80);
  unsigned int v191 = static os_log_type_t.default.getter(v82);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v189 = qword_10023DFB8;
  uint64_t v187 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v83 = swift_allocObject(v187, 112LL, 7LL);
  *(_OWORD *)(v83 + 16) = xmmword_1001A6F30;
  uint64_t v84 = swift_allocObject(&unk_10020DAC8, 32LL, 7LL);
  *(void *)(v84 + 16) = sub_100110E90;
  *(void *)(v84 + 24) = v81;
  uint64_t v204 = (uint64_t)v76;
  uint64_t v205 = sub_100110E8C;
  uint64_t v206 = v84;
  id v85 = v76;
  swift_retain(v81);
  uint64_t v86 = sub_100098CD8(&qword_100236568);
  uint64_t v87 = String.init<A>(describing:)(&v204, v86);
  uint64_t v89 = v88;
  *(void *)(v83 + 56) = &type metadata for String;
  unint64_t v90 = sub_10009914C();
  *(void *)(v83 + 64) = v90;
  *(void *)(v83 + 32) = v87;
  *(void *)(v83 + 40) = v89;
  id v91 = v73;
  id v92 = [v91 description];
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  uint64_t v95 = v94;

  *(void *)(v83 + 96) = &type metadata for String;
  *(void *)(v83 + 104) = v90;
  *(void *)(v83 + 72) = v93;
  *(void *)(v83 + 80) = v95;
  os_log(_:dso:log:_:_:)( v191,  &_mh_execute_header,  v189,  "Updating existing pending record %@ with same bluetooth address with: %@",  72LL,  2LL,  v83);
  swift_bridgeObjectRelease(v83);
  unint64_t v96 = sub_100110974();
  uint64_t v97 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v96, 0LL, 0LL);
  *uint64_t v98 = 5LL;
  uint64_t v204 = v97;
  LOBYTE(v205) = 1;
  swift_retain(v81);
  uint64_t v192 = v80;
  v194(&v204);
  swift_errorRelease(v97);
  swift_release(v81);
  swift_beginAccess(v201, &v204, 33LL, 0LL);
  uint64_t v99 = sub_10010C568((uint64_t)v85, (uint64_t (*)(uint64_t))sub_1000A3AFC, &qword_1002352E8);
  uint64_t v101 = v100;
  uint64_t v102 = swift_endAccess(&v204);
  if (v99) {
    uint64_t v102 = sub_10010BFB8(v99, v101);
  }
  uint64_t v103 = IsAppleInternalBuild(v102);
  if ((_DWORD)v103) {
    unsigned int v104 = static os_log_type_t.default.getter(v103);
  }
  else {
    unsigned int v104 = static os_log_type_t.debug.getter(v103);
  }
  unsigned int v196 = v104;
  uint64_t v186 = qword_10023DFB8;
  uint64_t v168 = swift_allocObject(v187, 112LL, 7LL);
  *(_OWORD *)(v168 + 16) = xmmword_1001A6F30;
  id v169 = [v91 recordID];
  id v170 = [v169 description];
  uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
  uint64_t v173 = v172;

  *(void *)(v168 + 56) = &type metadata for String;
  *(void *)(v168 + 64) = v90;
  *(void *)(v168 + 32) = v171;
  *(void *)(v168 + 40) = v173;
  id v174 = [v91 encryptedValues];
  id v175 = [v174 allKeys];
  swift_unknownObjectRelease(v174);
  uint64_t v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v175, &type metadata for String);

  id v177 = v91;
  uint64_t v178 = sub_100110B98(v176, v177);
  swift_bridgeObjectRelease(v176);

  uint64_t v179 = Array.description.getter(v178, v188);
  uint64_t v181 = v180;
  swift_bridgeObjectRelease(v178);
  *(void *)(v168 + 96) = &type metadata for String;
  *(void *)(v168 + 104) = v90;
  *(void *)(v168 + 72) = v179;
  *(void *)(v168 + 80) = v181;
  os_log(_:dso:log:_:_:)(v196, &_mh_execute_header, v186, "Updating existing pending CKRecord %@ - %@", 42LL, 2LL, v168);
  swift_bridgeObjectRelease(v168);
  uint64_t v182 = swift_allocObject(&unk_10020DAF0, 32LL, 7LL);
  *(void *)(v182 + 16) = a3;
  *(void *)(v182 + 24) = a4;
  swift_beginAccess(v201, &v204, 33LL, 0LL);
  swift_retain(a4);
  char v183 = swift_isUniquelyReferenced_nonNull_native(*v201);
  id v203 = (id)*v201;
  *uint64_t v201 = 0x8000000000000000LL;
  uint64_t v131 = sub_10010E884( (uint64_t)sub_100110E8C,  v182,  v177,  v183,  (uint64_t (*)(void *))sub_1000A3AFC,  &qword_1002352E8,  (unint64_t *)&qword_100234E30,  &OBJC_CLASS___CKRecord_ptr);
  uint64_t v133 = v184;
  uint64_t v185 = *v201;
  *uint64_t v201 = v203;
  swift_bridgeObjectRelease(v185);
  swift_endAccess(&v204);
  swift_release(v192);
  swift_release(v81);

  if (v131)
  {
    char v136 = a5;
    uint64_t v6 = v202;
    goto LABEL_28;
  }

  char v136 = a5;
  uint64_t v6 = v202;
LABEL_34:
  uint64_t v158 = static os_log_type_t.default.getter(v135);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v159 = qword_10023DFB8;
  uint64_t v160 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v161 = swift_allocObject(v160, 112LL, 7LL);
  *(_OWORD *)(v161 + 16) = xmmword_1001A6F30;
  uint64_t v162 = *(void *)(v6 + 112);
  uint64_t v163 = *(void *)(v162 + 16);
  *(void *)(v161 + 56) = &type metadata for Int;
  *(void *)(v161 + 64) = &protocol witness table for Int;
  *(void *)(v161 + 32) = v163;
  uint64_t v164 = swift_bridgeObjectRetain(v162);
  sub_1000F30E8(v164);
  uint64_t v166 = v165;
  swift_bridgeObjectRelease(v162);
  *(void *)(v161 + 96) = sub_100098CD8(&qword_100235170);
  *(void *)(v161 + 104) = sub_1000A4318( &qword_100236548,  &qword_100235170,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v161 + 72) = v166;
  os_log(_:dso:log:_:_:)(v158, &_mh_execute_header, v159, "Pending records[%d]: %@", 23LL, 2LL, v161);
  swift_bridgeObjectRelease(v161);
  return sub_1000F5AEC(v136 & 1);
}

uint64_t sub_10010838C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  id v4 = *(id *)a1;
  swift_retain(v3);
  id v5 = [v4 recordID];
  id v6 = [v5 recordName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  id v9 = v8;

  swift_bridgeObjectRetain(v9);
  v10._uint64_t countAndFlagsBits = 58LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = v9;
  id v12 = v4;
  uint64_t v13 = CKRecord.recordType.getter(v12);
  uint64_t v15 = v14;

  uint64_t v29 = v7;
  uint64_t v30 = v11;
  swift_bridgeObjectRetain(v11);
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRetain(v11);
  v17._uint64_t countAndFlagsBits = 58LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  swift_release(v3);
  swift_bridgeObjectRelease(v11);
  uint64_t v19 = v7;
  uint64_t v18 = v11;
  id v20 = [v12 encryptedValues];

  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 objectForKeyedSubscript:v21];
  swift_unknownObjectRelease(v20);

  if (v22
    && (id v31 = v22,
        uint64_t v23 = sub_100098CD8(&qword_100234E40),
        swift_dynamicCast(&v29, &v31, v23, &type metadata for String, 6LL)))
  {
    uint64_t v24 = v29;
    uint64_t v25 = v30;
  }

  else
  {
    uint64_t v25 = (void *)0xE200000000000000LL;
    uint64_t v24 = 15932LL;
  }

  uint64_t v29 = v19;
  uint64_t v30 = v18;
  swift_bridgeObjectRetain(v18);
  v26._uint64_t countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  uint64_t result = swift_bridgeObjectRelease(v18);
  uint64_t v28 = (uint64_t)v30;
  *a2 = v29;
  a2[1] = v28;
  return result;
}

uint64_t sub_1001085C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7)
{
  return sub_1001085FC( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t)&unk_10020D8E8,  (uint64_t)sub_10010C028,  (uint64_t)&unk_10020D900);
}

uint64_t sub_1001085FC( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v30[0] = a10;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v19 - 8);
  uint64_t v32 = v19;
  __chkstk_darwin(v19);
  NSString v21 = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v30[1] = *(void *)(a3 + 72);
  uint64_t v22 = swift_allocObject(a8, 49LL, 7LL);
  *(void *)(v22 + 16) = a3;
  *(void *)(v22 + 24) = a4;
  *(void *)(v22 + 32) = a5;
  *(void *)(v22 + 40) = a6;
  *(_BYTE *)(v22 + 48) = a7;
  aBlock[4] = a9;
  uint64_t v36 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = v30[0];
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain(a3);
  id v24 = a4;
  uint64_t v25 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v25);
  id v34 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v28 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v27, v28, v16, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v21, v18, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  return swift_release(v36);
}

uint64_t sub_10010880C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = a1;
  uint64_t v7 = a1 + 112;
  swift_beginAccess(a1 + 112, v87, 0LL, 0LL);
  uint64_t v8 = *(void *)(v6 + 112);
  id v9 = a2;
  uint64_t v10 = swift_bridgeObjectRetain(v8);
  sub_10010FEDC(v10, v9);
  id v12 = v11;
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v8);

  uint64_t v81 = v6;
  if (v12)
  {
    uint64_t v77 = v14;
    uint64_t v18 = v16;
    uint64_t v19 = static os_log_type_t.default.getter(v17);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v20 = qword_10023DFB8;
    uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + 16) = xmmword_1001A5EA0;
    id v23 = v12;
    id v24 = [v23 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v27 = v26;

    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_10009914C();
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Removing pending update for record: %@", 38LL, 2LL, v22);
    swift_bridgeObjectRelease(v22);
    unint64_t v28 = sub_100110974();
    uint64_t v29 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v28, 0LL, 0LL);
    *uint64_t v30 = 5LL;
    uint64_t v85 = v29;
    char v86 = 1;
    v77(&v85);
    swift_errorRelease(v29);
    swift_beginAccess(v7, &v85, 33LL, 0LL);
    uint64_t v31 = sub_10010C568((uint64_t)v23, (uint64_t (*)(uint64_t))sub_1000A3AFC, &qword_1002352E8);
    uint64_t v33 = v32;
    swift_endAccess(&v85);
    swift_release(v18);

    uint64_t v6 = v81;
    if (v31) {
      sub_10010BFB8(v31, v33);
    }
  }

  id v34 = (void *)(v6 + 120);
  swift_beginAccess(v6 + 120, &v85, 0LL, 0LL);
  uint64_t v35 = *(void *)(v6 + 120);
  id v36 = v9;
  uint64_t v37 = swift_bridgeObjectRetain(v35);
  sub_100110648(v37, v36);
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  swift_bridgeObjectRelease(v35);

  if (v39)
  {
    uint64_t v44 = swift_allocObject(&unk_10020D960, 32LL, 7LL);
    *(void *)(v44 + 16) = v41;
    *(void *)(v44 + 24) = v43;
    uint64_t v45 = (void *)swift_allocObject(&unk_10020D988, 56LL, 7LL);
    v45[2] = v39;
    v45[3] = sub_100110900;
    v45[4] = v44;
    v45[5] = a3;
    v45[6] = a4;
    swift_retain(a4);
    id v46 = v39;
    uint64_t v47 = swift_retain(v44);
    uint64_t v48 = static os_log_type_t.default.getter(v47);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v49 = qword_10023DFB8;
    uint64_t v50 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
    *(_OWORD *)(v51 + 16) = xmmword_1001A5EA0;
    id v52 = v46;
    id v53 = [v52 description];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    uint64_t v56 = v55;

    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 64) = sub_10009914C();
    *(void *)(v51 + 32) = v54;
    *(void *)(v51 + 40) = v56;
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Updating existing pending record: %@", 36LL, 2LL, v51);
    swift_bridgeObjectRelease(v51);
    uint64_t v57 = swift_allocObject(&unk_10020D9B0, 32LL, 7LL);
    *(void *)(v57 + 16) = sub_100110934;
    *(void *)(v57 + 24) = v45;
    swift_beginAccess(v34, v84, 33LL, 0LL);
    swift_retain(v45);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
    uint64_t v82 = *v34;
    *id v34 = 0x8000000000000000LL;
    uint64_t v59 = sub_10010E884( (uint64_t)sub_100113AD0,  v57,  v52,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_1000A3B48,  &qword_1002352F0,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v61 = v60;
    uint64_t v62 = *v34;
    *id v34 = v82;
    swift_bridgeObjectRelease(v62);
    swift_endAccess(v84);
    swift_release(v44);

    uint64_t v63 = swift_release(v45);
    uint64_t v6 = v81;
    if (v59) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v73 = swift_allocObject(&unk_10020D938, 32LL, 7LL);
    *(void *)(v73 + 16) = a3;
    *(void *)(v73 + 24) = a4;
    swift_beginAccess(v6 + 120, v84, 33LL, 0LL);
    swift_retain(a4);
    char v74 = swift_isUniquelyReferenced_nonNull_native(*v34);
    uint64_t v83 = *v34;
    *id v34 = 0x8000000000000000LL;
    uint64_t v59 = sub_10010E884( (uint64_t)sub_1001108DC,  v73,  v36,  v74,  (uint64_t (*)(void *))sub_1000A3B48,  &qword_1002352F0,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v61 = v75;
    uint64_t v76 = *v34;
    *id v34 = v83;
    swift_bridgeObjectRelease(v76);
    uint64_t v63 = swift_endAccess(v84);
    if (v59) {
LABEL_10:
    }
      uint64_t v63 = sub_10010BFB8(v59, v61);
  }

  uint64_t v64 = static os_log_type_t.default.getter(v63);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v65 = qword_10023DFB8;
  uint64_t v66 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v67 = swift_allocObject(v66, 112LL, 7LL);
  *(_OWORD *)(v67 + 16) = xmmword_1001A6F30;
  uint64_t v68 = *(void *)(v6 + 120);
  uint64_t v69 = *(void *)(v68 + 16);
  *(void *)(v67 + 56) = &type metadata for Int;
  *(void *)(v67 + 64) = &protocol witness table for Int;
  *(void *)(v67 + 32) = v69;
  uint64_t v70 = swift_bridgeObjectRetain(v68);
  uint64_t v71 = sub_1000F336C(v70);
  swift_bridgeObjectRelease(v68);
  *(void *)(v67 + 96) = sub_100098CD8(&qword_100235170);
  *(void *)(v67 + 104) = sub_1000A4318( &qword_100236548,  &qword_100235170,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v67 + 72) = v71;
  os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Pending deletion for records[%d]: %@", 36LL, 2LL, v67);
  swift_bridgeObjectRelease(v67);
  return sub_1000F5AEC(a5 & 1);
}

uint64_t sub_100108E80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = result;
    sub_1000A4A64(0LL, &qword_100236520, &OBJC_CLASS___CKQuery_ptr);
    uint64_t v9 = objc_opt_self(&OBJC_CLASS___NSPredicate);
    queue = *(dispatch_queue_s **)(v6 + 64);
    id v28 = (id)v9;
    swift_bridgeObjectRetain(v8);
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v10 = v7 - 1;
    uint64_t v26 = v8;
    uint64_t v11 = (void *)(v8 + 40);
    uint64_t v12 = v6;
    while (1)
    {
      uint64_t v13 = *(v11 - 1);
      unsigned int v14 = (void *)*v11;
      swift_bridgeObjectRetain_n(*v11, 2LL);
      uint64_t v15 = (NSPredicate *)[v28 predicateWithValue:1];
      v16._uint64_t countAndFlagsBits = v13;
      v16._object = v14;
      Class isa = CKQuery.init(recordType:predicate:)(v16, v15).super.isa;
      id v18 = [objc_allocWithZone(CKQueryOperation) initWithQuery:isa];
      [v18 setZoneID:a2];
      uint64_t v19 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
      swift_weakInit(v19 + 16, v12);
      uint64_t v20 = (void *)swift_allocObject(&unk_10020D7F8, 72LL, 7LL);
      v20[2] = a3;
      v20[3] = a4;
      v20[4] = a5;
      v20[5] = a6;
      v20[6] = v19;
      v20[7] = v13;
      v20[8] = v14;
      sub_10010BEA8(a3, a4, a5, a6);
      swift_retain(v19);
      CKQueryOperation.recordMatchedBlock.setter(sub_10010BF68, v20);
      swift_release(v19);
      uint64_t v21 = swift_allocObject(&unk_10020D820, 32LL, 7LL);
      *(void *)(v21 + 16) = v12;
      *(void *)(v21 + 24) = v18;
      swift_retain(v12);
      id v22 = v18;
      sub_10010BFB8((uint64_t)v35, v34);
      uint64_t v23 = swift_allocObject(&unk_10020D848, 32LL, 7LL);
      *(void *)(v23 + 16) = sub_10010BFA0;
      *(void *)(v23 + 24) = v21;
      aBlock[4] = sub_10010BFD8;
      uint64_t v37 = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000F2CA0;
      aBlock[3] = &unk_10020D860;
      id v24 = _Block_copy(aBlock);
      uint64_t v25 = v37;
      swift_retain(v23);
      swift_release(v25);
      dispatch_sync(queue, v24);

      _Block_release(v24);
      LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v23, "", 123LL, 1596LL, 29LL, 1LL);
      uint64_t result = swift_release(v23);
      if (!v10)
      {
        swift_release(v21);
        return swift_bridgeObjectRelease(v26);
      }

      v11 += 2;
      --v10;
      uint64_t v34 = v21;
      uint64_t v35 = sub_10010BFA0;
    }

    __break(1u);
  }

  return result;
}

void sub_100109144( void *a1, void **a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a3 & 1) != 0)
  {
    uint64_t v24 = swift_errorRetain(a2);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v26 = qword_10023DFB8;
    uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
    *(_OWORD *)(v28 + 16) = xmmword_1001A6F30;
    id v29 = a1;
    id v30 = [v29 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v33 = v32;

    *(void *)(v28 + 56) = &type metadata for String;
    unint64_t v34 = sub_10009914C();
    *(void *)(v28 + 64) = v34;
    *(void *)(v28 + 32) = v31;
    *(void *)(v28 + 40) = v33;
    unint64_t aBlock = a2;
    swift_errorRetain(a2);
    uint64_t v35 = sub_100098CD8(&qword_1002357C0);
    uint64_t v36 = String.init<A>(describing:)(&aBlock, v35);
    *(void *)(v28 + 96) = &type metadata for String;
    *(void *)(v28 + 104) = v34;
    *(void *)(v28 + 72) = v36;
    *(void *)(v28 + 80) = v37;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "error querying the record to delete: %@: %@", 43LL, 2LL, v28);
    swift_bridgeObjectRelease(v28);
    uint64_t v38 = a2;
    char v39 = 1;
    goto LABEL_11;
  }

  uint64_t v14 = a10;
  if (!a5)
  {
    uint64_t v40 = a2;
LABEL_18:
    uint64_t v49 = a8 + 16;
    uint64_t v50 = static os_log_type_t.default.getter(v40);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v51 = qword_10023DFB8;
    uint64_t v52 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v53 = swift_allocObject(v52, 72LL, 7LL);
    *(_OWORD *)(v53 + 16) = xmmword_1001A5EA0;
    id v54 = a1;
    id v55 = [v54 description];
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v58 = v57;

    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 64) = sub_10009914C();
    *(void *)(v53 + 32) = v56;
    *(void *)(v53 + 40) = v58;
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "CloudSync: Attempting to delete record: %@", 42LL, 2LL, v53);
    swift_bridgeObjectRelease(v53);
    swift_beginAccess(v49, v74, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v49);
    if (Strong)
    {
      uint64_t v60 = Strong;
      id v61 = sub_1000F3F2C();
      id v62 = [v61 privateCloudDatabase];
      swift_release(v60);

      uint64_t v63 = swift_allocObject(&unk_10020D898, 32LL, 7LL);
      *(void *)(v63 + 16) = a9;
      *(void *)(v63 + 24) = v14;
      uint64_t v72 = sub_10010C01C;
      uint64_t v73 = v63;
      unint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v69 = 1107296256LL;
      uint64_t v70 = sub_1001040C0;
      uint64_t v71 = &unk_10020D8B0;
      uint64_t v64 = _Block_copy(&aBlock);
      uint64_t v65 = v73;
      swift_bridgeObjectRetain(v14);
      swift_release(v65);
      [v62 deleteRecordWithID:v54 completionHandler:v64];
      sub_100112C7C(a2, 0);
      _Block_release(v64);

      return;
    }

    uint64_t v38 = a2;
    char v39 = 0;
LABEL_11:
    sub_100112C7C(v38, v39);
    return;
  }

  sub_10010BF1C(a2, 0);
  sub_10010BEA8(a4, a5, a6, a7);
  id v18 = [a2 encryptedValues];
  swift_bridgeObjectRetain(a5);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  id v20 = [v18 objectForKeyedSubscript:v19];
  swift_unknownObjectRelease(v18);

  if (!v20)
  {
    sub_100112C7C(a2, 0);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
    return;
  }

  v74[0] = v20;
  uint64_t v21 = sub_100098CD8(&qword_100234E40);
  if ((swift_dynamicCast(&aBlock, v74, v21, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v22 = v69;
    if (aBlock == (void **)a6 && v69 == a7)
    {
      uint64_t v23 = swift_bridgeObjectRelease(v69);
LABEL_15:
      unsigned int v67 = static os_log_type_t.default.getter(v23);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v66 = qword_10023DFB8;
      uint64_t v42 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v43 = swift_allocObject(v42, 152LL, 7LL);
      *(_OWORD *)(v43 + 16) = xmmword_1001A8EB0;
      *(void *)(v43 + 56) = &type metadata for String;
      unint64_t v44 = sub_10009914C();
      *(void *)(v43 + 32) = a4;
      *(void *)(v43 + 40) = a5;
      *(void *)(v43 + 96) = &type metadata for String;
      *(void *)(v43 + 104) = v44;
      *(void *)(v43 + 64) = v44;
      *(void *)(v43 + 72) = a6;
      *(void *)(v43 + 80) = a7;
      id v45 = [a2 description];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t v48 = v47;

      sub_100112C7C(a2, 0);
      *(void *)(v43 + 136) = &type metadata for String;
      *(void *)(v43 + 144) = v44;
      *(void *)(v43 + 112) = v46;
      *(void *)(v43 + 120) = v48;
      os_log(_:dso:log:_:_:)( v67,  &_mh_execute_header,  v66,  "CloudSync: Found %@ to delete record: %@: %@",  44LL,  2LL,  v43);
      uint64_t v40 = (void **)swift_bridgeObjectRelease(v43);
      uint64_t v14 = a10;
      goto LABEL_18;
    }

    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(aBlock, v69, a6, a7, 0LL);
    uint64_t v23 = swift_bridgeObjectRelease(v22);
    if ((v41 & 1) != 0) {
      goto LABEL_15;
    }
  }

  sub_100112C7C(a2, 0);
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(a5);
}

uint64_t sub_100109714(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = swift_errorRetain(a2);
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v8 = qword_10023DFB8;
    uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1001A6F30;
    uint64_t v32 = a1;
    id v11 = a1;
    uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100236538);
    uint64_t v13 = String.init<A>(describing:)(&v32, v12);
    uint64_t v15 = v14;
    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v16 = sub_10009914C();
    *(void *)(v10 + 64) = v16;
    *(void *)(v10 + 32) = v13;
    *(void *)(v10 + 40) = v15;
    uint64_t v32 = a2;
    swift_errorRetain(a2);
    uint64_t v17 = sub_100098CD8(&qword_1002357C0);
    uint64_t v18 = String.init<A>(describing:)(&v32, v17);
    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v16;
    *(void *)(v10 + 72) = v18;
    *(void *)(v10 + 80) = v19;
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v8,  "CloudSync: error deleting the recordID: %@: %@",  46LL,  2LL,  v10);
    swift_bridgeObjectRelease(v10);
    return swift_errorRelease(a2);
  }

  else
  {
    uint64_t v23 = static os_log_type_t.default.getter(a1);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v24 = qword_10023DFB8;
    uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v26 = swift_allocObject(v25, 112LL, 7LL);
    *(_OWORD *)(v26 + 16) = xmmword_1001A6F30;
    *(void *)(v26 + 56) = &type metadata for String;
    unint64_t v27 = sub_10009914C();
    *(void *)(v26 + 64) = v27;
    *(void *)(v26 + 32) = a3;
    *(void *)(v26 + 40) = a4;
    uint64_t v32 = a1;
    id v28 = a1;
    swift_bridgeObjectRetain(a4);
    uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100236538);
    uint64_t v30 = String.init<A>(describing:)(&v32, v29);
    *(void *)(v26 + 96) = &type metadata for String;
    *(void *)(v26 + 104) = v27;
    *(void *)(v26 + 72) = v30;
    *(void *)(v26 + 80) = v31;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "CloudSync: Deleted record Type: %@: %@", 38LL, 2LL, v26);
    return swift_bridgeObjectRelease(v26);
  }

void sub_100109950(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_1001099C4(uint64_t a1, uint64_t a2)
{
  id v3 = sub_1000F3F2C();
  id v4 = [v3 privateCloudDatabase];

  [v4 addOperation:a2];
}

uint64_t sub_100109A28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v78 = a8;
  uint64_t v79 = a6;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v87, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v81 = result;
    uint64_t v71 = v22;
    uint64_t v72 = v20;
    uint64_t v70 = a11;
    uint64_t v24 = a10;
    dispatch_group_t v80 = dispatch_group_create();
    uint64_t v25 = swift_allocObject(&unk_10020D708, 24LL, 7LL);
    *(void *)(v25 + 16) = _swiftEmptyArrayStorage;
    uint64_t v26 = a4;
    uint64_t v27 = *(void *)(a4 + 16);
    uint64_t v82 = v25;
    if (v27)
    {
      uint64_t v64 = a10;
      uint64_t v66 = v19;
      unsigned int v67 = v18;
      uint64_t v68 = v16;
      uint64_t v69 = v15;
      uint64_t v77 = a9;
      uint64_t v76 = sub_1000A4A64(0LL, &qword_100236520, &OBJC_CLASS___CKQuery_ptr);
      id v75 = (id)objc_opt_self(&OBJC_CLASS___NSPredicate);
      swift_bridgeObjectRetain(v26);
      uint64_t v28 = 0LL;
      uint64_t v65 = v26;
      uint64_t v29 = (void *)(v26 + 40);
      uint64_t v74 = a7;
      uint64_t v73 = a5;
      uint64_t v30 = v79;
      do
      {
        uint64_t v83 = v28;
        uint64_t v31 = *(v29 - 1);
        uint64_t v32 = (void *)*v29;
        swift_bridgeObjectRetain(*v29);
        uint64_t v33 = v27;
        dispatch_group_t v34 = v80;
        dispatch_group_enter(v80);
        uint64_t v35 = (NSPredicate *)[v75 predicateWithValue:1];
        v36._uint64_t countAndFlagsBits = v31;
        v36._object = v32;
        Class isa = CKQuery.init(recordType:predicate:)(v36, v35).super.isa;
        id v38 = [objc_allocWithZone(CKQueryOperation) initWithQuery:isa];
        [v38 setZoneID:v73];
        char v39 = (void *)swift_allocObject(&unk_10020D730, 56LL, 7LL);
        uint64_t v40 = v74;
        v39[2] = v30;
        v39[3] = v40;
        uint64_t v41 = v77;
        uint64_t v42 = v78;
        v39[4] = v78;
        v39[5] = v41;
        uint64_t v43 = v82;
        v39[6] = v82;
        swift_retain(v43);
        sub_10010BEA8(v30, v40, v42, v41);
        CKQueryOperation.recordMatchedBlock.setter(sub_10010BE94, v39);
        uint64_t v44 = swift_allocObject(&unk_10020D758, 24LL, 7LL);
        *(void *)(v44 + 16) = v34;
        id v45 = v34;
        uint64_t v46 = v33;
        CKQueryOperation.queryResultBlock.setter(sub_10010BEFC, v44);
        uint64_t v47 = v81;
        uint64_t v48 = *(void **)(v81 + 64);
        uint64_t v49 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
        uint64_t v50 = swift_weakInit(v49 + 16, v47);
        __chkstk_darwin(v50);
        *(&v64 - 2) = v49;
        *(&v64 - 1) = (uint64_t)v38;
        id v51 = v48;
        uint64_t v52 = sub_100098CD8((uint64_t *)&unk_100236528);
        uint64_t v28 = v83;
        OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100113CE0, &v64 - 4, v52);

        swift_release(v49);
        v29 += 2;
        uint64_t v27 = v46 - 1;
      }

      while (v27);
      swift_bridgeObjectRelease(v65);
      uint64_t v15 = v69;
      uint64_t v16 = v68;
      uint64_t v18 = v67;
      uint64_t v19 = v66;
      uint64_t v25 = v82;
      uint64_t v24 = v64;
    }

    uint64_t v53 = v81;
    uint64_t v83 = *(void *)(v81 + 80);
    id v54 = (void *)swift_allocObject(&unk_10020D7A8, 40LL, 7LL);
    uint64_t v55 = v70;
    v54[2] = v24;
    v54[3] = v55;
    _BYTE v54[4] = v25;
    aBlock[4] = sub_10010BF10;
    char v86 = v54;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020D7C0;
    uint64_t v56 = _Block_copy(aBlock);
    swift_retain(v55);
    uint64_t v57 = swift_retain(v25);
    uint64_t v58 = v71;
    static DispatchQoS.unspecified.getter(v57);
    uint64_t v84 = _swiftEmptyArrayStorage;
    uint64_t v59 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v60 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v61 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v60, v61, v15, v59);
    dispatch_group_t v62 = v80;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v58, v18, v83, v56);
    _Block_release(v56);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v19);
    swift_release(v53);
    uint64_t v63 = v86;
    swift_release(v82);
    return swift_release(v63);
  }

  return result;
}

void sub_100109F64(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 1) != 0)
  {
    uint64_t v21 = swift_errorRetain(a2);
    uint64_t v22 = static os_log_type_t.error.getter(v21);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v23 = qword_10023DFB8;
    uint64_t v24 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v25 = swift_allocObject(v24, 112LL, 7LL);
    *(_OWORD *)(v25 + 16) = xmmword_1001A6F30;
    id v26 = a1;
    id v27 = [v26 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    *(void *)(v25 + 56) = &type metadata for String;
    unint64_t v31 = sub_10009914C();
    *(void *)(v25 + 64) = v31;
    *(void *)(v25 + 32) = v28;
    *(void *)(v25 + 40) = v30;
    uint64_t v63 = a2;
    swift_errorRetain(a2);
    uint64_t v32 = sub_100098CD8(&qword_1002357C0);
    uint64_t v33 = String.init<A>(describing:)(&v63, v32);
    *(void *)(v25 + 96) = &type metadata for String;
    *(void *)(v25 + 104) = v31;
    *(void *)(v25 + 72) = v33;
    *(void *)(v25 + 80) = v34;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "error querying the record: %@: %@", 33LL, 2LL, v25);
    swift_bridgeObjectRelease(v25);
    uint64_t v35 = a2;
    char v36 = 1;
    goto LABEL_24;
  }

  if (!a5)
  {
    id v37 = a2;
LABEL_18:
    uint64_t v47 = (void *)(a8 + 16);
    uint64_t v48 = static os_log_type_t.default.getter(v37);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v49 = qword_10023DFB8;
    uint64_t v50 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
    *(_OWORD *)(v51 + 16) = xmmword_1001A5EA0;
    id v52 = a2;
    id v53 = [v52 description];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    uint64_t v56 = v55;

    sub_100112C7C(a2, 0);
    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 64) = sub_10009914C();
    *(void *)(v51 + 32) = v54;
    *(void *)(v51 + 40) = v56;
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Found record: %@", 16LL, 2LL, v51);
    swift_bridgeObjectRelease(v51);
    swift_beginAccess(v47, &v63, 33LL, 0LL);
    id v57 = v52;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
    unint64_t v59 = *(void *)((*v47 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v58 = *(void *)((*v47 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v59 >= v58 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1LL);
    }
    uint64_t v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
    specialized Array._endMutation()(v60);
    swift_endAccess(&v63);
    goto LABEL_23;
  }

  sub_10010BF1C(a2, 0);
  sub_10010BEA8(a4, a5, a6, a7);
  id v14 = [a2 encryptedValues];
  swift_bridgeObjectRetain(a5);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  id v16 = [v14 objectForKeyedSubscript:v15];
  swift_unknownObjectRelease(v14);

  if (!v16)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
    sub_100112C7C(a2, 0);
    return;
  }

  id v62 = v16;
  uint64_t v17 = sub_100098CD8(&qword_100234E40);
  if ((swift_dynamicCast(&v63, &v62, v17, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
LABEL_23:
    uint64_t v35 = a2;
    char v36 = 0;
LABEL_24:
    sub_100112C7C(v35, v36);
    return;
  }

  uint64_t v18 = v64;
  if (v63 == (void *)a6 && v64 == a7)
  {
    uint64_t v19 = swift_bridgeObjectRelease(v64);
LABEL_15:
    unsigned int v61 = static os_log_type_t.default.getter(v19);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v39 = qword_10023DFB8;
    uint64_t v40 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v41 = swift_allocObject(v40, 152LL, 7LL);
    *(_OWORD *)(v41 + 16) = xmmword_1001A8EB0;
    *(void *)(v41 + 56) = &type metadata for String;
    unint64_t v42 = sub_10009914C();
    *(void *)(v41 + 32) = a4;
    *(void *)(v41 + 40) = a5;
    *(void *)(v41 + 96) = &type metadata for String;
    *(void *)(v41 + 104) = v42;
    *(void *)(v41 + 64) = v42;
    *(void *)(v41 + 72) = a6;
    *(void *)(v41 + 80) = a7;
    id v43 = [a2 description];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    sub_100112C7C(a2, 0);
    *(void *)(v41 + 136) = &type metadata for String;
    *(void *)(v41 + 144) = v42;
    *(void *)(v41 + 112) = v44;
    *(void *)(v41 + 120) = v46;
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v39, "Found %@ record: %@: %@", 23LL, 2LL, v41);
    id v37 = (id)swift_bridgeObjectRelease(v41);
    goto LABEL_18;
  }

  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, a6, a7, 0LL);
  uint64_t v19 = swift_bridgeObjectRelease(v18);
  if ((v38 & 1) != 0) {
    goto LABEL_15;
  }
  sub_100112C7C(a2, 0);
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(a5);
}

void sub_10010A4A4(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    id v7 = sub_1000F3F2C();
    id v8 = [v7 privateCloudDatabase];
    swift_release(Strong);

    [v8 addOperation:a2];
  }

  *a3 = Strong == 0;
}

uint64_t sub_10010A55C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = swift_bridgeObjectRetain(v5);
  a1(v6);
  return swift_bridgeObjectRelease(v5);
}

id sub_10010A5C8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = swift_retain(a1);
  a3(v5);
  uint64_t v7 = v6;
  swift_release(a1);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10010A624()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  id v3 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v3[1];
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0xE000000000000000LL;
  }

  uint64_t v7 = swift_bridgeObjectRetain(v4);
  unsigned int v29 = static os_log_type_t.default.getter(v7);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v28 = qword_10023DFB8;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001A6F30;
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  unint64_t v11 = v10[1];
  uint64_t v32 = *v10;
  unint64_t v33 = v11;
  swift_bridgeObjectRetain(v11);
  uint64_t v12 = sub_100098CD8(&qword_100236640);
  uint64_t v13 = String.init<A>(describing:)(&v32, v12);
  uint64_t v15 = v14;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v16 = sub_10009914C();
  *(void *)(v9 + 64) = v16;
  *(void *)(v9 + 32) = v13;
  *(void *)(v9 + 40) = v15;
  uint64_t v17 = (uint64_t *)(v1 + *(int *)(v2 + 24));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v32 = v5;
  unint64_t v33 = v6;
  uint64_t v30 = v18;
  uint64_t v31 = v19;
  swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v30 = String.init<A>(_:)( &v30,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v31 = v20;
  String.append<A>(contentsOf:)(&v32, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v19);
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v16;
  *(void *)(v9 + 72) = v21;
  *(void *)(v9 + 80) = v22;
  os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  v28,  "accountIdentifier: %@ cloudContainerIdentifier: %@",  50LL,  2LL,  v9);
  swift_bridgeObjectRelease(v9);
  uint64_t v23 = (uint64_t *)(v1 + *(int *)(v2 + 24));
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  uint64_t v32 = v5;
  unint64_t v33 = v6;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  swift_bridgeObjectRetain_n(v25, 2LL);
  uint64_t v30 = String.init<A>(_:)( &v30,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v31 = v26;
  String.append<A>(contentsOf:)(&v32, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v25);
  return v30;
}

uint64_t sub_10010AA58(void *a1)
{
  id v3 = [a1 databaseScope];
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v5 = qword_10023DFB8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
  *(void *)(v7 + 56) = sub_1000A4A64(0LL, &qword_100236630, &OBJC_CLASS___CKDatabaseNotification_ptr);
  *(void *)(v7 + 64) = sub_100112958( &qword_100236638,  &qword_100236630,  &OBJC_CLASS___CKDatabaseNotification_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v7 + 32) = a1;
  id v8 = a1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "DatabaseNotification: %@", 24LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
  swift_weakInit(v9 + 16, v1);
  uint64_t v10 = swift_allocObject(&unk_10020DCF8, 32LL, 7LL);
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v3;
  swift_retain(v9);
  sub_100104BA4((uint64_t)sub_100112AF0, v10);
  swift_release(v9);
  return swift_release(v10);
}

uint64_t sub_10010ABDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v33, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v29 = *(void *)(result + 72);
    uint64_t v16 = swift_allocObject(&unk_10020D780, 24LL, 7LL);
    uint64_t v28 = v7;
    uint64_t v17 = v16;
    swift_weakInit(v16 + 16, v15);
    uint64_t v18 = swift_allocObject(&unk_10020DD20, 32LL, 7LL);
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = a4;
    aBlock[4] = sub_100112AF8;
    uint64_t v32 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020DD38;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = swift_retain(v17);
    static DispatchQoS.unspecified.getter(v20);
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v21 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v27 = v10;
    uint64_t v23 = v22;
    uint64_t v24 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v23, v24, v6, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    swift_release(v15);
    uint64_t v25 = v32;
    swift_release(v17);
    return swift_release(v25);
  }

  return result;
}

uint64_t sub_10010AE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    swift_retain(a1);
    sub_1000FCE7C(a2, 0, (uint64_t)sub_100112B00, a1);
    swift_release(v6);
    return swift_release(a1);
  }

  return result;
}

void sub_10010AEC0(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = swift_errorRetain(a1);
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v8 = qword_10023DFB8;
    uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1001A5EA0;
    swift_getErrorValue(a1, v24, v23);
    uint64_t v11 = Error.localizedDescription.getter(v23[1], v23[2]);
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10009914C();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "APS fetchChanges error: %@", 26LL, 2LL, v10);
    swift_bridgeObjectRelease(v10);
    v21[0] = a1;
    swift_errorRetain(a1);
    uint64_t v14 = sub_100098CD8(&qword_1002357C0);
    type metadata accessor for CKError(0LL);
    uint64_t v16 = v15;
    if ((swift_dynamicCast(&v22, v21, v14, v15, 6LL) & 1) != 0)
    {
      uint64_t v17 = v22;
      uint64_t v18 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
      _BridgedStoredNSError.code.getter(v21, v16, v18);
      if (v21[0] != 4LL)
      {
        uint64_t v22 = v17;
        _BridgedStoredNSError.code.getter(v21, v16, v18);
        if (v21[0] != 3LL)
        {
          sub_100112AC0(a1, 1);

          return;
        }
      }

      swift_beginAccess(a3 + 16, v21, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(a3 + 16);
      if (Strong)
      {
        uint64_t v20 = Strong;
        sub_1001042A0(150.0);

        sub_100112AC0(a1, 1);
        swift_release(v20);
        return;
      }
    }

    sub_100112AC0(a1, 1);
    return;
  }

  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_10023DFB8,  "APS fetchChanges completed.",  27LL,  2LL,  _swiftEmptyArrayStorage);
}

void sub_10010B174(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 recordZoneID];
  if (v4)
  {
    id v30 = v4;
    id v5 = [a1 databaseScope];
    uint64_t v6 = static os_log_type_t.default.getter(v5);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v7 = qword_10023DFB8;
    uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_1001A5EA0;
    *(void *)(v9 + 56) = sub_1000A4A64(0LL, &qword_100236610, &OBJC_CLASS___CKRecordZoneNotification_ptr);
    *(void *)(v9 + 64) = sub_100112958( &qword_100236618,  &qword_100236610,  &OBJC_CLASS___CKRecordZoneNotification_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v9 + 32) = a1;
    id v10 = a1;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "RecordZoneNotification: %@", 26LL, 2LL, v9);
    uint64_t v11 = swift_bridgeObjectRelease(v9);
    if (v5 == (id)1)
    {
      uint64_t v21 = static os_log_type_t.default.getter(v11);
      os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_10023DFB8,  "Nothing",  7LL,  2LL,  _swiftEmptyArrayStorage,  1LL,  2LL);
      goto LABEL_13;
    }

    if (v5 == (id)3)
    {
      uint64_t v22 = static os_log_type_t.default.getter(v11);
      os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_10023DFB8,  "Nothing shared",  14LL,  2LL,  _swiftEmptyArrayStorage,  1LL,  2LL);
      goto LABEL_13;
    }

    if (v5 == (id)2)
    {
      id v12 = sub_1000F3F2C();
      id v13 = [v12 privateCloudDatabase];

      uint64_t v14 = sub_100098CD8(&qword_100236588);
      uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
      *(_OWORD *)(v15 + 16) = xmmword_1001A8ED0;
      *(void *)(v15 + 32) = v30;
      uint64_t v31 = v15;
      specialized Array._endMutation()(v15);
      id v30 = v30;
      swift_retain(v2);
      sub_1000FADF8(v13, 0, v31, (uint64_t)sub_100112AB4, v2);

      swift_bridgeObjectRelease(v31);
      swift_release(v2);
LABEL_13:

      return;
    }

    uint64_t v23 = static os_log_type_t.error.getter(v11);
    uint64_t v24 = qword_10023DFB8;
    uint64_t v25 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v25 + 16) = xmmword_1001A5EA0;
    uint64_t v31 = (uint64_t)v5;
    type metadata accessor for Scope(0LL);
    uint64_t v27 = String.init<A>(describing:)(&v31, v26);
    uint64_t v29 = v28;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_10009914C();
    *(void *)(v25 + 32) = v27;
    *(void *)(v25 + 40) = v29;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Unknown databaseScope: %@", 25LL, 2LL, v25);
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    uint64_t v16 = static os_log_type_t.error.getter(0LL);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v17 = qword_10023DFB8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + 16) = xmmword_1001A5EA0;
    *(void *)(v19 + 56) = sub_1000A4A64(0LL, &qword_100236610, &OBJC_CLASS___CKRecordZoneNotification_ptr);
    *(void *)(v19 + 64) = sub_100112958( &qword_100236618,  &qword_100236610,  &OBJC_CLASS___CKRecordZoneNotification_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v19 + 32) = a1;
    id v20 = a1;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "No recordZoneID in %@", 21LL, 2LL, v19);
    swift_bridgeObjectRelease(v19);
  }

void sub_10010B59C(uint64_t a1, char a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v5 = qword_10023DFB8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001A5EA0;
  id v8 = sub_1000F3F2C();
  id v9 = [v8 privateCloudDatabase];

  *(void *)(v7 + 56) = sub_1000A4A64(0LL, &qword_100236620, &OBJC_CLASS___CKDatabase_ptr);
  *(void *)(v7 + 64) = sub_100112958( &qword_100236628,  &qword_100236620,  &OBJC_CLASS___CKDatabase_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v7 + 32) = v9;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "database: %@ updateCache completed.", 35LL, 2LL, v7);
  uint64_t v10 = swift_bridgeObjectRelease(v7);
  if ((a2 & 1) != 0)
  {
    uint64_t v12 = swift_errorRetain(a1);
    uint64_t v13 = static os_log_type_t.error.getter(v12);
    uint64_t v14 = qword_10023DFB8;
    uint64_t v15 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
    swift_getErrorValue(a1, v27, v26);
    uint64_t v16 = Error.localizedDescription.getter(v26[1], v26[2]);
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10009914C();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "APS fetchZoneChanges error: %@", 30LL, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    uint64_t v25 = a1;
    swift_errorRetain(a1);
    uint64_t v19 = sub_100098CD8(&qword_1002357C0);
    type metadata accessor for CKError(0LL);
    uint64_t v21 = v20;
    if ((swift_dynamicCast(&v24, &v25, v19, v20, 6LL) & 1) != 0)
    {
      uint64_t v22 = v24;
      uint64_t v23 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
      _BridgedStoredNSError.code.getter(&v25, v21, v23);
      if (v25 == 4 || (uint64_t v24 = v22, _BridgedStoredNSError.code.getter(&v25, v21, v23), v25 == 3)) {
        sub_1001042A0(150.0);
      }
      sub_100112AC0(a1, 1);
    }

    else
    {
      sub_100112AC0(a1, 1);
    }
  }

  else
  {
    uint64_t v11 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_10023DFB8,  "APS fetchZoneChanges completed.",  31LL,  2LL,  _swiftEmptyArrayStorage);
  }

void sub_10010B8B8(void *a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v3 = qword_10023DFB8;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1001A5EA0;
  *(void *)(v5 + 56) = sub_1000A4A64(0LL, &qword_1002365F8, &OBJC_CLASS___APSIncomingMessage_ptr);
  *(void *)(v5 + 64) = sub_100112958( (unint64_t *)&unk_100236600,  &qword_1002365F8,  &OBJC_CLASS___APSIncomingMessage_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v5 + 32) = a1;
  id v6 = a1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "ContainerPushDelegate: didReceiveMessage: %@", 44LL, 2LL, v5);
  swift_bridgeObjectRelease(v5);
  id v7 = [v6 userInfo];
  if (!v7)
  {
    __break(1u);
    JUMPOUT(0x10010BD64LL);
  }

  id v8 = v7;
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  id v11 =  [(id)objc_opt_self(CKNotification) notificationFromRemoteNotificationDictionary:isa];

  uint64_t v13 = static os_log_type_t.error.getter(v12);
  uint64_t v14 = qword_10023DFB8;
  uint64_t v15 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001A5EA0;
  id v48 = v11;
  uint64_t v16 = v4;
  id v17 = v11;
  uint64_t v18 = sub_100098CD8(&qword_100236940);
  uint64_t v19 = String.init<A>(describing:)(&v48, v18);
  uint64_t v21 = v20;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v22 = sub_10009914C();
  *(void *)(v15 + 64) = v22;
  *(void *)(v15 + 32) = v19;
  *(void *)(v15 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CKNotification received: %@", 27LL, 2LL, v15);
  uint64_t v23 = v15;
  uint64_t v24 = v17;
  uint64_t v25 = swift_bridgeObjectRelease(v23);
  if (v17)
  {
    id v26 = [v17 notificationType];
    switch((unint64_t)v26)
    {
      case 1uLL:
        uint64_t v27 = static os_log_type_t.error.getter(v26);
        os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFB8,  "Query notifications are not handled",  35LL,  2LL,  _swiftEmptyArrayStorage);
        goto LABEL_16;
      case 2uLL:
        uint64_t v33 = objc_opt_self(&OBJC_CLASS___CKRecordZoneNotification);
        uint64_t v34 = swift_dynamicCastObjCClass(v17, v33);
        if (!v34) {
          goto LABEL_15;
        }
        uint64_t v35 = (void *)v34;
        id v36 = v24;
        sub_10010B174(v35);
        goto LABEL_13;
      case 3uLL:
        uint64_t v37 = static os_log_type_t.error.getter(v26);
        os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_10023DFB8,  "Read notifications are not handled",  34LL,  2LL,  _swiftEmptyArrayStorage);
        goto LABEL_16;
      case 4uLL:
        uint64_t v38 = objc_opt_self(&OBJC_CLASS___CKDatabaseNotification);
        uint64_t v34 = swift_dynamicCastObjCClass(v17, v38);
        if (v34)
        {
          uint64_t v39 = (void *)v34;
          id v36 = v24;
          sub_10010AA58(v39);
LABEL_13:
        }

        else
        {
LABEL_15:
          uint64_t v47 = static os_log_type_t.error.getter(v34);
          os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  qword_10023DFB8,  "Unable to cast to CKRecordZoneNotification",  42LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_16:
        }

        break;
      default:
        id v40 = v26;
        uint64_t v41 = static os_log_type_t.error.getter(v26);
        uint64_t v42 = qword_10023DFB8;
        uint64_t v43 = swift_allocObject(v16, 72LL, 7LL);
        *(_OWORD *)(v43 + 16) = xmmword_1001A5EA0;
        id v48 = v40;
        type metadata accessor for NotificationType(0LL);
        uint64_t v45 = String.init<A>(describing:)(&v48, v44);
        *(void *)(v43 + 56) = &type metadata for String;
        *(void *)(v43 + 64) = v22;
        *(void *)(v43 + 32) = v45;
        *(void *)(v43 + 40) = v46;
        os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Unknown notificationType: %@", 28LL, 2LL, v43);
        swift_bridgeObjectRelease(v43);
        goto LABEL_16;
    }
  }

  else
  {
    uint64_t v28 = static os_log_type_t.error.getter(v25);
    uint64_t v29 = qword_10023DFB8;
    uint64_t v30 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_1001A5EA0;
    id v48 = 0LL;
    uint64_t v31 = String.init<A>(describing:)(&v48, v18);
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = v22;
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v32;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Unknown notification: %@", 24LL, 2LL, v30);
    swift_bridgeObjectRelease(v30);
  }

void sub_10010BDB0(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available);
}

uint64_t sub_10010BDC8()
{
  return sub_100104F58(v0[2], v0[3], v0[4]);
}

uint64_t sub_10010BDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010BDE4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10010BDEC()
{
  return sub_1001129F8((void (*)(void))&_swift_release);
}

uint64_t sub_10010BDFC()
{
  return sub_1001129F8((void (*)(void))&_swift_release);
}

uint64_t sub_10010BE08()
{
  return (*(uint64_t (**)(void, _UNKNOWN **))(v0 + 16))(*(void *)(v0 + 32), &off_10020D598);
}

uint64_t sub_10010BE38()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10010BE5C()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
  }

  swift_release(v0[6]);
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10010BE94(void *a1, void *a2, char a3)
{
}

uint64_t sub_10010BEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_10010BED8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10010BEFC()
{
}

uint64_t sub_10010BF04()
{
  return sub_1001129F8((void (*)(void))&_swift_release);
}

uint64_t sub_10010BF10()
{
  return sub_10010A55C(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

id sub_10010BF1C(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t sub_10010BF28()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
  }

  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10010BF68(void *a1, void **a2, char a3)
{
}

void sub_10010BFA0()
{
}

uint64_t sub_10010BFB8(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10010BFC8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10010BFD8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10010BFF8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10010C01C(void *a1, void *a2)
{
  return sub_100109714(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10010C028()
{
  return sub_100110E78((uint64_t (*)(void, void, void, void, void))sub_10010880C);
}

uint64_t sub_10010C034(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10010C104(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100112834((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100112834((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10009A498(v12);
  return v7;
}

uint64_t sub_10010C104(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_10010C2BC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10018BC98(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_10010C350(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10010C350(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_10010C350(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100098CD8(&qword_100236FA0);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10010C49C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1000A3A10(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10010DF64();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10010DB50(v7, v10);
  uint64_t v12 = *v3;
  *unint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10010C568(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3)
{
  uint64_t v6 = v3;
  uint64_t v8 = *v6;
  swift_bridgeObjectRetain(*v6);
  unint64_t v9 = a2(a1);
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  uint64_t v12 = *v6;
  uint64_t v16 = *v6;
  *uint64_t v6 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10010E2D0(a3);
    uint64_t v12 = v16;
  }

  uint64_t v13 = *(void *)(*(void *)(v12 + 56) + 16 * v9);
  sub_10010DD24(v9, v12);
  uint64_t v14 = *v6;
  *uint64_t v6 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_10010C648(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1000A3A10(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10010E628();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10010DB50(v7, v10);
  uint64_t v12 = *v3;
  *unint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

Swift::Int sub_10010C714(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100098CD8(&qword_1002366F0);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = sub_1000A4A64(0LL, &qword_1002366F8, &OBJC_CLASS___CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_10010D56C(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }

  return v4;
}

Swift::Int sub_10010C964(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100098CD8(&qword_100236560);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10010CC78(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100098CD8(&qword_100235300);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          unint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10010CF80(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100098CD8((uint64_t *)&unk_100236750);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v24 = v23 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v25 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v12) {
      break;
    }
    char v26 = (void *)(v5 + 64);
    unint64_t v27 = *(void *)(v36 + 8 * v25);
    ++v15;
    if (!v27)
    {
      int64_t v15 = v25 + 1;
      if (v25 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v27 = *(void *)(v36 + 8 * v15);
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v12)
        {
LABEL_36:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = *(void *)(v36 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            int64_t v15 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v27 = *(void *)(v36 + 8 * v15);
            ++v28;
            if (v27) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v28;
      }
    }

Swift::Int sub_10010D2A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100098CD8(a3);
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    id v34 = v4;
    uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
    unint64_t v11 = (void *)(v6 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1LL << v10);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v14 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v15 = v8 + 64;
    Swift::Int result = swift_retain(v6);
    int64_t v17 = 0LL;
    while (1)
    {
      if (v13)
      {
        unint64_t v22 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v23 = v22 | (v17 << 6);
      }

      else
      {
        int64_t v24 = v17 + 1;
        if (__OFADD__(v17, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v24 >= v14) {
          goto LABEL_36;
        }
        unint64_t v25 = v11[v24];
        ++v17;
        if (!v25)
        {
          int64_t v17 = v24 + 1;
          if (v24 + 1 >= v14) {
            goto LABEL_36;
          }
          unint64_t v25 = v11[v17];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v14)
            {
LABEL_36:
              swift_release(v6);
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v6);
                uint64_t v4 = v34;
                goto LABEL_43;
              }

              uint64_t v33 = 1LL << *(_BYTE *)(v6 + 32);
              if (v33 >= 64) {
                bzero((void *)(v6 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v11 = -1LL << v33;
              }
              uint64_t v4 = v34;
              *(void *)(v6 + 16) = 0LL;
              break;
            }

            unint64_t v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v17 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_45;
                }
                if (v17 >= v14) {
                  goto LABEL_36;
                }
                unint64_t v25 = v11[v17];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v17 = v26;
          }
        }

Swift::Int sub_10010D56C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100098CD8(&qword_1002366F0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  __int128 v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          unint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_10010D83C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100098CD8(&qword_1002365F0);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_10010DB50(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          unint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_10010DD24(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_10010DED4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_10010DF1C(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

void *sub_10010DF64()
{
  uint64_t v1 = v0;
  sub_100098CD8(&qword_100236560);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10010E118()
{
  uint64_t v1 = v0;
  sub_100098CD8(&qword_100235300);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

void *sub_10010E2C4()
{
  return sub_10010E2D0((uint64_t *)&unk_100236750);
}

void *sub_10010E2D0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100098CD8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  Swift::Int result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }

id sub_10010E484()
{
  uint64_t v1 = v0;
  sub_100098CD8(&qword_1002366F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10010E628()
{
  uint64_t v1 = v0;
  sub_100098CD8(&qword_1002365F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_10010E7DC(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }

  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000LL) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  id result = swift_stdlib_random(&v7, 8LL);
  return result;
}

uint64_t sub_10010E884( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t (*a5)(void *), uint64_t *a6, unint64_t *a7, void *a8)
{
  uint64_t v11 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = a5(a3);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_10010E2D0(a6);
LABEL_7:
    int64_t v24 = (void *)*v11;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      int64_t v25 = (uint64_t *)(v24[7] + 16 * v18);
      uint64_t result = *v25;
      *int64_t v25 = a1;
      v25[1] = a2;
      return result;
    }

uint64_t sub_10010E9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = v11;
  __chkstk_darwin(v11);
  int64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = *(void **)(a4 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  unint64_t v15 = (void *)swift_allocObject(&unk_10020E220, 56LL, 7LL);
  v15[2] = a4;
  v15[3] = a1;
  v15[4] = &off_10020D598;
  void v15[5] = a2;
  v15[6] = a3;
  aBlock[4] = sub_100112E1C;
  char v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E238;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v14;
  swift_retain(a4);
  swift_retain(a1);
  swift_bridgeObjectRetain(a2);
  uint64_t v18 = swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v18);
  BOOL v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v21 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
  return swift_release(v28);
}

uint64_t sub_10010EC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v54 = a2;
  uint64_t v55 = a4;
  uint64_t v52 = a1;
  uint64_t v53 = a3;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL, v10);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + 16) = 1LL;
  *(void *)(v4 + 32) = 0LL;
  uint64_t v51 = v4 + 24;
  swift_unknownObjectWeakInit(v4 + 24, 0LL);
  *(void *)(v4 + 40) = 0LL;
  *(void *)(v4 + 48) = 0LL;
  *(void *)(v4 + 56) = dispatch_semaphore_create(0LL);
  uint64_t v48 = sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v56 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v49 = *(uint64_t (**)(char *))(v14 + 104);
  uint64_t v17 = v49(v16);
  static DispatchQoS.unspecified.getter(v17);
  id v57 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100098C98( (unint64_t *)&unk_100237030,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v19 = sub_100098CD8((uint64_t *)&unk_100235870);
  uint64_t v20 = sub_1000A4318( (unint64_t *)&qword_100237040,  (uint64_t *)&unk_100235870,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v46 = v18;
  uint64_t v47 = v20;
  uint64_t v45 = v6;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v19, v20, v6, v18);
  uint64_t v21 = v12;
  char v22 = v12;
  uint64_t v23 = v8;
  uint64_t v44 = v16;
  *(void *)(v4 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000013LL,  0x80000001001CF2A0LL,  v22,  v8,  v16,  0LL);
  uint64_t v24 = v16;
  BOOL v26 = v49;
  uint64_t v25 = v50;
  uint64_t v27 = ((uint64_t (*)(char *, void, uint64_t))v49)(v24, v56, v50);
  static DispatchQoS.unspecified.getter(v27);
  id v57 = _swiftEmptyArrayStorage;
  uint64_t v28 = v20;
  uint64_t v29 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v19, v28, v45, v18);
  uint64_t v30 = v44;
  *(void *)(v4 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000039LL,  0x80000001001CFD80LL,  v21,  v23,  v44,  0LL);
  uint64_t v31 = ((uint64_t (*)(char *, void, uint64_t))v26)(v30, v56, v25);
  static DispatchQoS.unspecified.getter(v31);
  id v57 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v19, v47, v29, v46);
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000040LL,  0x80000001001CFDC0LL,  v21,  v23,  v30,  0LL);
  *(void *)(v4 + 88) = v32;
  *(void *)(v4 + 96) = 0LL;
  *(_WORD *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = &_swiftEmptyDictionarySingleton;
  *(void *)(v4 + 120) = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 0x2D65746176697270LL;
  *(void *)(v4 + 144) = 0xEF7365676E616863LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container) = 0LL;
  id v33 = (void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId);
  *id v33 = 0LL;
  v33[1] = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup) = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___forcedGroup) = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup) = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup) = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___deferredUpdatesGroup) = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___multipleUpdatesGroup) = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener) = 0LL;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) = 0;
  uint64_t v34 = static os_log_type_t.default.getter(v32);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v35 = qword_10023DFB8;
  uint64_t v36 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
  *(_OWORD *)(v37 + 16) = xmmword_1001A5EA0;
  uint64_t v38 = v52;
  uint64_t v39 = sub_1000DC190();
  uint64_t v41 = v40;
  *(void *)(v37 + 56) = &type metadata for String;
  *(void *)(v37 + 64) = sub_10009914C();
  *(void *)(v37 + 32) = v39;
  *(void *)(v37 + 40) = v41;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "CloudCoordinator init for %@", 28LL, 2LL, v37);
  swift_bridgeObjectRelease(v37);
  sub_100112A70(v38, v5 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration);
  uint64_t v42 = v54;
  *(void *)(v5 + 32) = v53;
  swift_unknownObjectWeakAssign(v51, v42);
  *(void *)(v5 + 80) = v55;
  return v5;
}

uint64_t sub_10010F100(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v24))
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = v3 & 0xC000000000000001LL;
    a2 += OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    uint64_t v26 = v3 + 32;
    uint64_t v27 = a2;
    unint64_t v28 = v3 & 0xC000000000000001LL;
    uint64_t v29 = v4;
    while (1)
    {
      id v7 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3) : *(id *)(v26 + 8 * v5);
      uint64_t v8 = v7;
      if (__OFADD__(v5++, 1LL)) {
        break;
      }
      __n128 v10 = *(void **)(a2 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0LL) + 32));
      swift_bridgeObjectRetain(v10);
      uint64_t v30 = v8;
      id v11 = [v8 zoneName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      uint64_t v15 = v10[2];
      if (v15)
      {
        a2 = v3;
        uint64_t v16 = v10[4];
        uint64_t v17 = v10[5];
        BOOL v18 = v16 == v12 && v17 == v14;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v12, v14, 0LL) & 1) != 0)
        {
LABEL_27:
          swift_bridgeObjectRelease(a2);

          swift_bridgeObjectRelease(v10);
          uint64_t v4 = 1LL;
          goto LABEL_36;
        }

        if (v15 != 1)
        {
          uint64_t v19 = v10 + 7;
          uint64_t v20 = 1LL;
          while (1)
          {
            uint64_t v3 = v20 + 1;
            if (__OFADD__(v20, 1LL)) {
              break;
            }
            uint64_t v21 = *(v19 - 1);
            uint64_t v22 = *v19;
            BOOL v23 = v21 == v12 && v22 == v14;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v12, v14, 0LL) & 1) != 0) {
              goto LABEL_27;
            }
            v19 += 2;
            ++v20;
            if (v3 == v15) {
              goto LABEL_4;
            }
          }

          __break(1u);
          break;
        }

uint64_t sub_10010F32C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  aBlock[4] = sub_100112DA4;
  uint64_t v20 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020E1C0;
  __n128 v10 = _Block_copy(aBlock);
  id v11 = v9;
  uint64_t v12 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v12);
  BOOL v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v15 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v20);
}

void sub_10010F518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v34 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v9 = 0LL;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_24:
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 16 * v11 + 8);
    id v16 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
    swift_retain_n(v15, 2LL);
    id v17 = v16;
    id v18 = [v17 encryptedValues];
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 objectForKeyedSubscript:v19];
    swift_unknownObjectRelease(v18);

    if (v20
      && (id v38 = v20,
          uint64_t v22 = sub_100098CD8(&qword_100234E40),
          uint64_t v21 = swift_dynamicCast(&v36, &v38, v22, &type metadata for String, 6LL),
          (_DWORD)v21))
    {
      uint64_t v23 = v37;
      if (!a3)
      {
        swift_release(v15);

        swift_bridgeObjectRelease(v23);
        goto LABEL_6;
      }

      if (v36 == a2 && v37 == a3)
      {
        uint64_t v21 = swift_bridgeObjectRelease(v37);
      }

      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, a2, a3, 0LL);
        uint64_t v21 = swift_bridgeObjectRelease(v23);
        if ((v24 & 1) == 0)
        {
LABEL_5:
          swift_release(v15);

          goto LABEL_6;
        }
      }
    }

    else if (a3)
    {
      goto LABEL_5;
    }

    uint64_t v25 = CKRecord.recordType.getter(v21);
    if (v25 == a4 && v26 == a5)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(a5);
      swift_release(v15);

      return;
    }

    uint64_t v28 = v26;
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, a4, a5, 0LL);
    swift_bridgeObjectRelease(v28);
    swift_release(v15);

    if ((v29 & 1) != 0)
    {
LABEL_37:
      swift_release(a1);
      return;
    }

void sub_10010F88C(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v30 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordID];
    id v15 = [v14 recordName];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    id v19 = [a2 recordID];
    id v20 = [v19 recordName];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    if (v16 == v21 && v18 == v23)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2LL);
      return;
    }

    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v21, v23, 0LL);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v23);
    if ((v25 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v30;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v27) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v26 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v27) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v26 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v27) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v26 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v27) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v26 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v27) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v26 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

void sub_10010FB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v33 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  if (v6) {
    goto LABEL_6;
  }
LABEL_7:
  while (2)
  {
    int64_t v10 = v7 + 1;
    if (!__OFADD__(v7, 1LL))
    {
      if (v10 < v33)
      {
        unint64_t v11 = *(void *)(v32 + 8 * v10);
        ++v7;
        if (v11) {
          goto LABEL_21;
        }
        int64_t v7 = v10 + 1;
        if (v10 + 1 >= v33) {
          goto LABEL_35;
        }
        unint64_t v11 = *(void *)(v32 + 8 * v7);
        if (v11) {
          goto LABEL_21;
        }
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v33) {
          goto LABEL_35;
        }
        unint64_t v11 = *(void *)(v32 + 8 * v7);
        if (v11) {
          goto LABEL_21;
        }
        int64_t v7 = v10 + 3;
        if (v10 + 3 >= v33) {
          goto LABEL_35;
        }
        unint64_t v11 = *(void *)(v32 + 8 * v7);
        if (v11)
        {
LABEL_21:
          unint64_t v6 = (v11 - 1) & v11;
          for (unint64_t i = __clz(__rbit64(v11)) + (v7 << 6); ; unint64_t i = v8 | (v7 << 6))
          {
            uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
            id v14 = *(id *)(*(void *)(a1 + 48) + 8 * i);
            swift_retain_n(v13, 2LL);
            id v15 = v14;
            id v16 = [v15 encryptedValues];
            NSString v17 = String._bridgeToObjectiveC()();
            id v18 = [v16 objectForKeyedSubscript:v17];
            swift_unknownObjectRelease(v16);

            if (!v18) {
              break;
            }
            id v36 = v18;
            uint64_t v19 = sub_100098CD8(&qword_100234E40);
            if ((swift_dynamicCast(&v34, &v36, v19, &type metadata for String, 6LL) & 1) == 0) {
              break;
            }
            uint64_t v20 = v35;
            if (v34 == a2 && v35 == a3)
            {
              uint64_t v21 = swift_bridgeObjectRelease(a3);
            }

            else
            {
              char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, a2, a3, 0LL);
              uint64_t v21 = swift_bridgeObjectRelease(v20);
              if ((v22 & 1) == 0) {
                break;
              }
            }

            uint64_t v23 = CKRecord.recordType.getter(v21);
            uint64_t v25 = v24;
            uint64_t v27 = CKRecord.recordType.getter(v23);
            uint64_t v28 = v26;
            if (v23 == v27 && v25 == v26)
            {
              swift_bridgeObjectRelease_n(v25, 2LL);
              swift_release(v13);

              goto LABEL_35;
            }

            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0LL);
            swift_bridgeObjectRelease(v25);
            swift_bridgeObjectRelease(v28);
            swift_release(v13);

            if ((v29 & 1) != 0) {
              goto LABEL_35;
            }
            swift_release(v13);

            if (!v6) {
              goto LABEL_7;
            }
LABEL_6:
            unint64_t v8 = __clz(__rbit64(v6));
            v6 &= v6 - 1;
          }

          swift_release_n(v13, 2LL);

          if (!v6) {
            continue;
          }
          goto LABEL_6;
        }

        int64_t v12 = v10 + 4;
        if (v12 < v33)
        {
          unint64_t v11 = *(void *)(v32 + 8 * v12);
          int64_t v7 = v12;
          if (!v11)
          {
            while (1)
            {
              int64_t v7 = v12 + 1;
              if (__OFADD__(v12, 1LL)) {
                goto LABEL_37;
              }
              if (v7 >= v33) {
                goto LABEL_35;
              }
              unint64_t v11 = *(void *)(v32 + 8 * v7);
              ++v12;
              if (v11) {
                goto LABEL_21;
              }
            }
          }

          goto LABEL_21;
        }
      }

void sub_10010FEDC(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v29 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordID];
    id v15 = [v14 recordName];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    id v19 = [a2 recordName];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if (v16 == v20 && v18 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2LL);
      return;
    }

    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0LL);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v29;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v25 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v26) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v25 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v26) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v25 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v26) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v25 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

void sub_100110190(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v17 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    sub_1000A4A64(0LL, &qword_1002365C0, &OBJC_CLASS___NSObject_ptr);
    id v14 = v12;
    swift_retain_n(v13, 2LL);
    id v15 = v14;
    char v16 = static NSObject.== infix(_:_:)();
    swift_release(v13);

    if ((v16 & 1) != 0)
    {
LABEL_23:
      swift_release(a1);
      return;
    }

    swift_release(v13);

    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v9 >= v17) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v2 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v17) {
          goto LABEL_23;
        }
        unint64_t v10 = *(void *)(v2 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v17) {
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v2 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v17) {
              goto LABEL_23;
            }
            unint64_t v10 = *(void *)(v2 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }

void sub_100110394(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v29 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    id v18 = [a2 recordID];
    id v19 = [v18 recordName];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if (v15 == v20 && v17 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2LL);
      return;
    }

    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v22, 0LL);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v29;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v25 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v26) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v25 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v26) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v25 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v26) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v25 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

void sub_100110648(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v28 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    id v18 = [a2 recordName];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    if (v15 == v19 && v17 == v21)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2LL);
      return;
    }

    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v21, 0LL);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v28;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v25) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v24 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v25) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v24 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v25) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v24 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v25) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v24 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_1001108DC(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100110900(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_100110934(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  (*(void (**)(void))(v1 + 24))();
  return v3(a1);
}

unint64_t sub_100110974()
{
  unint64_t result = qword_100236550;
  if (!qword_100236550)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A9180, &type metadata for CloudCoordinator.CloudCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_100236550);
  }

  return result;
}

uint64_t sub_1001109B8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      uint64_t v5 = i - 4;
      if ((a1 & 0xC000000000000001LL) == 0) {
        break;
      }
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      uint64_t v7 = i - 3;
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_19;
      }
LABEL_9:
      uint64_t v22 = v6;
      id v8 = [v6 recordID];
      id v9 = [v8 recordName];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      id v13 = [a2 recordName];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      if (v10 == v14 && v12 == v16)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v12);
LABEL_18:
        uint64_t v3 = (uint64_t)v22;
        swift_bridgeObjectRelease(v12);
        return v3;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v16, 0LL);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        uint64_t v12 = a1;
        goto LABEL_18;
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease(a1);
        return 0LL;
      }
    }

    id v6 = *(id *)(a1 + 8 * i);
    uint64_t v7 = i - 3;
    if (!__OFADD__(v5, 1LL)) {
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v19);
  }

  swift_bridgeObjectRelease(a1);
  return v3;
}

void *sub_100110B98(uint64_t a1, void *a2)
{
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    id v6 = (void *)(a1 + 40);
    do
    {
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      id v9 = [a2 encryptedValues];
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v9 objectForKeyedSubscript:v10];
      swift_bridgeObjectRelease(v8);

      uint64_t v12 = swift_unknownObjectRelease(v9);
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        unint64_t v14 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v13 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized Array._endMutation()(v7);
      }

      v6 += 2;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_100110CE8()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v8, v6);
}

void sub_100110D80(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1001055F4( a1,  v4,  *(void (**)(void *, void))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  v2 + v6,  *(unsigned __int8 *)(v2 + v6 + *(void *)(v5 + 64)),  *(void **)(((v6 + *(void *)(v5 + 64)) & 0xFFFFFFFFFFFFF8LL) + v2 + 8));
}

uint64_t sub_100110DF0(uint64_t a1, uint64_t a2)
{
  return sub_1001085FC( a1,  a2,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(_BYTE *)(v2 + 48),  (uint64_t)&unk_10020DA28,  (uint64_t)sub_100110E6C,  (uint64_t)&unk_10020DA40);
}

uint64_t sub_100110E38()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_100110E6C()
{
  return sub_100110E78((uint64_t (*)(void, void, void, void, void))sub_100107374);
}

uint64_t sub_100110E78(uint64_t (*a1)(void, void, void, void, void))
{
  return a1( *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100110E98()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100110ECC(uint64_t a1, char a2)
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_100110F20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100110F44(uint64_t a1, void (*a2)(_BYTE *, id))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v10 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v8) {
      return swift_release(a1);
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release(a1);
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release(a1);
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release(a1);
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }

void sub_1001110E0(uint64_t a1, void (*a2)(id, uint64_t (*)(uint64_t), _OWORD *))
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v19) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    ++v7;
    if (!v14)
    {
      int64_t v7 = v13 + 1;
      if (v13 + 1 >= v19) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v7);
      if (!v14)
      {
        int64_t v7 = v13 + 2;
        if (v13 + 2 >= v19) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v7);
        if (!v14)
        {
          int64_t v7 = v13 + 3;
          if (v13 + 3 >= v19) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v7);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_1001112E8(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  uint64_t v11 = swift_allocObject(&unk_10020DF00, 24LL, 7LL);
  swift_weakInit(v11 + 16, a2);
  uint64_t v12 = swift_allocObject(&unk_10020DF28, 25LL, 7LL);
  *(void *)(v12 + 16) = v11;
  *(_BYTE *)(v12 + 24) = a1;
  aBlock[4] = sub_100112D10;
  uint64_t v26 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020DF40;
  int64_t v13 = _Block_copy(aBlock);
  id v14 = v10;
  uint64_t v15 = swift_retain(v11);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v18 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  uint64_t v19 = v26;
  swift_release(v11);
  return swift_release(v19);
}

void sub_100111524(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v28 = a2;
    uint64_t v3 = sub_1000EED68((uint64_t)v28, a1);
    uint64_t v5 = static os_log_type_t.default.getter(v3);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v6 = qword_10023DFB8;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_1001A6F30;
    uint64_t v9 = URL.absoluteString.getter();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    unint64_t v12 = sub_10009914C();
    *(void *)(v8 + 64) = v12;
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    id v13 = [v28 data];
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v16 = v15;

    Data.hexString.getter(v14, v16);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    sub_100099394(v14, v16);
    *(void *)(v8 + 96) = &type metadata for String;
    *(void *)(v8 + 104) = v12;
    *(void *)(v8 + 72) = v18;
    *(void *)(v8 + 80) = v20;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Updated change token, URL, %@, token, %@", 40LL, 2LL, v8);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    id v4 = sub_1000EEC84();
    uint64_t v21 = static os_log_type_t.default.getter(v4);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    uint64_t v22 = qword_10023DFB8;
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + 16) = xmmword_1001A5EA0;
    uint64_t v25 = URL.absoluteString.getter();
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10009914C();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Deleted change token, URL, %@", 29LL, 2LL, v24);
    swift_bridgeObjectRelease(v24);
  }

uint64_t sub_100111970(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v22 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, "recordID", v22);
      id v10 = [v9 recordName];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      id v14 = [a2 recordName];
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v16 = v15;

      if (v11 == v3 && v13 == v16)
      {

        swift_bridgeObjectRelease_n(v13, 2LL);
        return v6;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v3, v16, 0LL);

      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0) {
        return v6;
      }
      uint64_t v19 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        break;
      }
      ++v6;
      if (v19 == v5) {
        return 0LL;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }

  return 0LL;
}

uint64_t sub_100111B30(uint64_t *a1, void *a2)
{
  unint64_t v5 = *a1;
  uint64_t v6 = swift_bridgeObjectRetain(*a1);
  id v45 = a2;
  unint64_t v46 = sub_100111970(v6, a2);
  char v8 = v7;
  swift_bridgeObjectRelease(v5);
  uint64_t v44 = v2;
  if (v2) {
    return v46;
  }
  if ((v8 & 1) == 0)
  {
    id v9 = (id)(v46 + 1);
    if (__OFADD__(v46, 1LL)) {
      goto LABEL_63;
    }
    unint64_t v5 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_64:
      if ((v5 & 0x8000000000000000LL) != 0LL) {
        uint64_t v40 = v5;
      }
      else {
        uint64_t v40 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v5);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v5);
      if (v9 != (id)v41) {
        goto LABEL_6;
      }
    }

    else if (v9 != *(id *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v46 + 5; ; ++i)
      {
        unint64_t v5 = i - 4;
        unint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v11);
        }

        else
        {
          if ((v5 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }

          if (v5 >= *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_54;
          }
          id v12 = *(id *)(v11 + 8 * i);
        }

        uint64_t v13 = v12;
        id v14 = objc_msgSend(v12, "recordID", v44);
        id v15 = [v14 recordName];

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        uint64_t v18 = v17;

        id v9 = [v45 recordName];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        uint64_t v21 = v20;

        if (v16 == v19 && v18 == v21)
        {

          swift_bridgeObjectRelease_n(v18, 2LL);
          goto LABEL_38;
        }

        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v21, 0LL);

        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v21);
        if ((v23 & 1) != 0) {
          goto LABEL_38;
        }
        if (v5 != v46) {
          break;
        }
LABEL_35:
        if (__OFADD__(v46, 1LL)) {
          goto LABEL_56;
        }
        ++v46;
LABEL_38:
        id v9 = (id)(i - 3);
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_55;
        }
        uint64_t v35 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v35 < 0) {
            uint64_t v37 = *a1;
          }
          else {
            uint64_t v37 = v35 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*a1);
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v35);
        }

        else
        {
          uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v9 == (id)v36) {
          return v46;
        }
      }

      uint64_t v24 = *a1;
      if ((*a1 & 0xC000000000000001LL) != 0)
      {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, *a1);
        uint64_t v24 = *a1;
        if ((*a1 & 0xC000000000000001LL) == 0)
        {
LABEL_21:
          if ((v5 & 0x8000000000000000LL) != 0) {
            goto LABEL_59;
          }
          if (v5 >= *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_60;
          }
          id v26 = *(id *)(v24 + 8 * i);
          goto LABEL_24;
        }
      }

      else
      {
        if ((v46 & 0x8000000000000000LL) != 0) {
          goto LABEL_57;
        }
        if (v46 >= *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_58;
        }
        id v25 = *(id *)(v24 + 8 * v46 + 32);
        if ((v24 & 0xC000000000000001LL) == 0) {
          goto LABEL_21;
        }
      }

      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v24);
      uint64_t v24 = *a1;
LABEL_24:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v24);
      *a1 = v24;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v24 < 0 || (v24 & 0x4000000000000000LL) != 0)
      {
        uint64_t v24 = sub_10018BE20(v24);
        *a1 = v24;
      }

      id v28 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8LL) + 8 * v46 + 0x20);
      *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 8 * v46 + 0x20) = v26;

      specialized Array._endMutation()(v29);
      uint64_t v30 = *a1;
      int v31 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v30;
      if (!v31 || v30 < 0 || (v30 & 0x4000000000000000LL) != 0)
      {
        uint64_t v30 = sub_10018BE20(v30);
        *a1 = v30;
      }

      if ((v5 & 0x8000000000000000LL) != 0) {
        goto LABEL_61;
      }
      uint64_t v32 = v30 & 0xFFFFFFFFFFFFFF8LL;
      if (v5 >= *(void *)((v30 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_62;
      }
      int64_t v33 = *(void **)(v32 + 8 * i);
      *(void *)(v32 + 8 * i) = v25;

      specialized Array._endMutation()(v34);
      goto LABEL_35;
    }

    return v46;
  }

  uint64_t v38 = *a1;
  if (v38 < 0) {
    uint64_t v42 = v38;
  }
  else {
    uint64_t v42 = v38 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v38);
  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease(v38);
  return v43;
}

uint64_t sub_100111F20(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v7;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }

void sub_1001121FC(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    swift_getErrorValue(a4, &v47, v46);
    v49[0] = Error.localizedDescription.getter(v46[1], v46[2]);
    v49[1] = v6;
    *(void *)&__int128 v43 = a4;
    swift_errorRetain(a4);
    uint64_t v7 = sub_100098CD8(&qword_1002357C0);
    type metadata accessor for CKError(0LL);
    uint64_t v9 = v8;
    if ((swift_dynamicCast(&v45, &v43, v7, v8, 6LL) & 1) != 0)
    {
      id v10 = v45;
      uint64_t v11 = sub_100098C98( &qword_100234FD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001A6858);
      _BridgedStoredNSError.code.getter(&v43, v9, v11);
      id v12 = (id)stringForCKErrorCode(v43);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      swift_bridgeObjectRelease(v49[1]);
      v49[0] = v13;
      v49[1] = v15;
      id v45 = v10;
      uint64_t v16 = _BridgedStoredNSError.userInfo.getter(v9, v11);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
      uint64_t v19 = v18;
      if (*(void *)(v16 + 16) && (unint64_t v20 = sub_1000A3A10(v17, v18), (v21 & 1) != 0))
      {
        sub_100112834(*(void *)(v16 + 56) + 32 * v20, (uint64_t)&v43);
      }

      else
      {
        __int128 v43 = 0u;
        __int128 v44 = 0u;
      }

      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v16);
      if (*((void *)&v44 + 1))
      {
        uint64_t v22 = sub_100098CD8(&qword_1002365C8);
        uint64_t v23 = swift_dynamicCast(&v45, &v43, (char *)&type metadata for Any + 8, v22, 6LL);
        if ((v23 & 1) != 0)
        {
          uint64_t v24 = (uint64_t)v45;
          __chkstk_darwin(v23);
          sub_100110F44(v24, (void (*)(_BYTE *, id))sub_100112A68);
          swift_bridgeObjectRelease(v24);
        }
      }

      else
      {

        sub_100099358((uint64_t)&v43, &qword_100236570);
      }
    }
  }

  else
  {
    strcpy((char *)v49, "NotApplicable");
    HIWORD(v49[1]) = -4864;
  }

  NSString v41 = String._bridgeToObjectiveC()();
  uint64_t v25 = sub_100098CD8(&qword_1002365B8);
  uint64_t inited = swift_initStackObject(v25, &v48);
  *(_OWORD *)(inited + 16) = xmmword_1001A8EE0;
  *(void *)(inited + 32) = 0x726F727245LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  uint64_t v27 = v49[1];
  id v28 = objc_allocWithZone(&OBJC_CLASS___NSString);
  swift_bridgeObjectRetain(v27);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  id v30 = [v28 initWithString:v29];

  *(void *)(inited + 48) = v30;
  *(void *)(inited + 56) = 0x6D69547473726946LL;
  *(void *)(inited + 64) = 0xE900000000000065LL;
  id v31 = [a1 recordChangeTag];
  id v32 = v31;
  if (v31) {

  }
  id v33 = [objc_allocWithZone(NSNumber) initWithBool:v32 == 0];
  *(void *)(inited + 72) = v33;
  *(void *)(inited + 80) = 0x795464726F636552LL;
  *(void *)(inited + 88) = 0xEA00000000006570LL;
  CKRecord.recordType.getter(v33);
  uint64_t v35 = v34;
  id v36 = objc_allocWithZone(&OBJC_CLASS___NSString);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  id v38 = [v36 initWithString:v37];

  *(void *)(inited + 96) = v38;
  *(void *)(inited + 104) = 0x73736563637553LL;
  *(void *)(inited + 112) = 0xE700000000000000LL;
  *(void *)(inited + 120) = [objc_allocWithZone(NSNumber) initWithBool:a4 == 0];
  strcpy((char *)(inited + 128), "SyncDuration");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(void *)(inited + 144) = [objc_allocWithZone(NSNumber) initWithDouble:0.0];
  strcpy((char *)(inited + 152), "UploadDuration");
  *(_BYTE *)(inited + 167) = -18;
  *(void *)(inited + 168) = [objc_allocWithZone(NSNumber) initWithDouble:-Date.timeIntervalSinceNow.getter()];
  strcpy((char *)(inited + 176), "UserInitiated");
  *(_WORD *)(inited + 190) = -4864;
  *(void *)(inited + 192) = [objc_allocWithZone(NSNumber) initWithBool:a3 & 1];
  unint64_t v39 = sub_10009F23C(inited);
  sub_1000A4A64(0LL, &qword_1002365C0, &OBJC_CLASS___NSObject_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v39);
  CUMetricsLog(v41, isa);
  swift_bridgeObjectRelease(v27);
}

uint64_t sub_10011275C()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001127E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100105DB0( a1,  *(void *)(v1 + 16),  *(void (**)(uint64_t, uint64_t))(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  v1 + v4,  *(unsigned __int8 *)(v1 + v4 + *(void *)(v3 + 64)));
}

uint64_t sub_100112834(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100112870()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_1001128F8(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1001062E4( a1,  v4,  *(void (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void **)(v2 + 40),  v2 + v6,  *(_BYTE *)(v2 + v6 + *(void *)(v5 + 64)));
}

uint64_t sub_100112958(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000A4A64(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10011299C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001129AC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001129E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001129EC()
{
  return sub_1001129F8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001129F8(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_100112A30()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0LL);
}

uint64_t sub_100112A5C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_100112A68()
{
  return sub_100106A58();
}

uint64_t sub_100112A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100112AB4(uint64_t a1, char a2)
{
}

uint64_t sub_100112AC0(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_100112ACC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100112AF0(uint64_t a1, uint64_t a2)
{
  return sub_10010ABDC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100112AF8()
{
  return sub_10010AE34(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100112B00(uint64_t a1, char a2)
{
}

uint64_t sub_100112B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v13 = qword_10023DFB8;
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v15 = swift_allocObject(v14, 152LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001A8EB0;
  Data.hexString.getter(a1, a2);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_10009914C();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = a3;
  *(void *)(v15 + 80) = a4;
  *(void *)(v15 + 136) = &type metadata for String;
  *(void *)(v15 + 144) = v20;
  *(void *)(v15 + 112) = a5;
  *(void *)(v15 + 120) = a6;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v13,  "APS token: <%@> forTopic: [%@] identifier: [%@]",  47LL,  2LL,  v15);
  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_100112C34()
{
  return sub_1001044D4(*(void *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_100112C40()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_100112C64(void *a1, char a2)
{
}

void sub_100112C74(void *a1, void *a2)
{
}

void sub_100112C7C(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_100112C88(uint64_t a1, char a2)
{
  return sub_100103B08(a1, a2 & 1);
}

uint64_t sub_100112C98()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100112CC4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100112CD4()
{
  return sub_100103CF0(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100112CE0(uint64_t a1, char a2)
{
  return sub_100103D30(a1, a2 & 1);
}

uint64_t sub_100112CEC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100112D10()
{
  return sub_10015DFA4(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100112D1C(uint64_t a1)
{
  return sub_10010176C(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100112D2C(uint64_t a1, void **a2)
{
  return sub_100100F38(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100112D38()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100112D5C()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_100112D80()
{
}

uint64_t sub_100112D8C()
{
  return sub_100102410(v0);
}

uint64_t sub_100112D94()
{
  return sub_100102114(v0);
}

void sub_100112DA4()
{
}

uint64_t sub_100112DAC()
{
  return sub_100100C74(v0);
}

uint64_t sub_100112DB4(uint64_t a1, uint64_t a2)
{
  return sub_1000FF954(a2, *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_100112DE0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100112E1C()
{
  return sub_10009E9F8(sub_10015CED8);
}

uint64_t sub_100112E28()
{
  return sub_100100EE0(v0);
}

uint64_t sub_100112E30()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100112E40()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100112E7C()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_1000FF3EC);
}

uint64_t sub_100112E88()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100112EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100112EC8()
{
  return sub_1000FEB34(v0);
}

uint64_t sub_100112ED0()
{
  return sub_1000FEDCC(v0);
}

uint64_t sub_100112ED8()
{
  return sub_100113144( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  64LL);
}

uint64_t sub_100112EF4()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100112F30(uint64_t a1, char a2)
{
  return sub_1000FDFE4( a1,  a2 & 1,  *(void **)(v2 + 16),  *(uint64_t (**)(void))(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 64));
}

uint64_t sub_100112F64()
{
  return sub_100113144( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  64LL);
}

void sub_100112F7C(void *a1, char a2)
{
}

uint64_t sub_100112F90()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100112FC4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!__OFADD__(v1, 1LL)) {
    return sub_1000FD9F4( *(void *)(v0 + 24),  *(void *)(v0 + 32),  v1 + 1,  *(void (**)(void))(v0 + 48),  *(void *)(v0 + 56));
  }
  __break(1u);
  return result;
}

uint64_t sub_100112FFC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100113028(uint64_t a1)
{
}

uint64_t sub_100113034()
{
  return sub_100113144( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  64LL);
}

void sub_10011304C()
{
}

uint64_t sub_10011305C()
{
  return swift_deallocObject(v0, 57LL, 7LL);
}

id sub_100113098()
{
  return sub_1000FB0B0( *(void *)(v0 + 16),  *(uint64_t (**)(void, void))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void **)(v0 + 48),  *(unsigned __int8 *)(v0 + 56));
}

void sub_1001130AC(void *a1, void *a2, char a3)
{
}

uint64_t sub_1001130B8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FC008(a1, a2, a3, v3);
}

uint64_t sub_1001130C0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1001130FC(void *a1, void *a2, uint64_t a3, unint64_t a4, __int16 a5)
{
}

uint64_t sub_10011312C()
{
  return sub_100113144( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  56LL);
}

uint64_t sub_100113144(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  return swift_deallocObject(v3, a3, 7LL);
}

uint64_t sub_100113194(uint64_t a1, char a2)
{
  return sub_1000FCA64( a1,  a2 & 1,  *(_BYTE *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void (**)(uint64_t, uint64_t))(v2 + 40));
}

uint64_t sub_1001131A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_1001131D4()
{
  return sub_1000FCD54(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001131DC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001131EC(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001131F4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRelease(a1);
  }

  return sub_1000AC4C0(a2, a3);
}

uint64_t sub_100113228()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10011325C()
{
}

uint64_t sub_100113270(void *a1)
{
  return sub_1000F96F0(a1, v1);
}

uint64_t sub_100113278(void *a1)
{
  return sub_1000F9978(a1, v1);
}

uint64_t sub_100113280()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100113290(void *a1)
{
  return sub_1000F9A10(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_100113298()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_1001132DC(void *a1, __int16 a2)
{
}

void sub_100113314(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_100113324()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100113350()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10011338C(uint64_t a1, char a2)
{
  return sub_1000FAC2C( a1,  a2 & 1,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  *(void **)(v2 + 32),  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40));
}

id sub_1001133A0(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t sub_1001133AC()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001133E0()
{
}

uint64_t sub_1001133EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100113418(uint64_t a1, char a2)
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_10011346C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100113498()
{
  return swift_deallocObject(v0, 26LL, 7LL);
}

void sub_1001134BC()
{
}

uint64_t sub_1001134CC()
{
  return sub_1001136D4((void (*)(void))&_swift_release);
}

void sub_1001134D8(void *a1, void *a2, char a3)
{
}

void sub_1001134E4(void *a1, uint64_t a2, char a3)
{
}

uint64_t sub_1001134F0()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 50LL, 7LL);
}

uint64_t sub_10011352C(uint64_t a1, char a2)
{
  return sub_1000F7440( a1,  a2 & 1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(_BYTE *)(v2 + 48),  *(unsigned __int8 *)(v2 + 49));
}

void sub_100113544(BOOL *a1@<X8>)
{
}

uint64_t sub_10011355C()
{
  return swift_deallocObject(v0, 58LL, 7LL);
}

uint64_t sub_10011359C()
{
  return sub_1000F76A8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(_BYTE *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(unsigned __int8 *)(v0 + 56),  *(unsigned __int8 *)(v0 + 57));
}

uint64_t sub_1001135B4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_1001135C0(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1001135F8(void *a1)
{
  return sub_1000F57C8(a1, v1);
}

void sub_100113600()
{
}

uint64_t sub_100113608()
{
  return sub_1000F53DC(v0);
}

uint64_t sub_100113614()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100113640()
{
  return sub_1000F4F94(v0);
}

uint64_t sub_100113648()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10011366C()
{
  return sub_1001136D4((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_100113678()
{
}

uint64_t sub_100113680()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100113690()
{
}

uint64_t sub_100113698()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001136A8(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_1001136B8(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_1001136C8()
{
  return sub_1001136D4((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1001136D4(void (*a1)(void))
{
  return swift_deallocObject(v1, 32LL, 7LL);
}

uint64_t sub_100113704()
{
  return sub_10011A0C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10011370C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for CloudCoordinator.DatabaseToken( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100113768 + 4 * byte_1001A8EFB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10011379C + 4 * byte_1001A8EF6[v4]))();
}

uint64_t sub_10011379C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001137A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001137ACLL);
  }
  return result;
}

uint64_t sub_1001137B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001137C0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001137C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001137CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinator.DatabaseToken()
{
  return &type metadata for CloudCoordinator.DatabaseToken;
}

void *initializeBufferWithCopyOfBuffer for CloudCoordinator.CloudCoordinatorError(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for CloudCoordinator.CloudCoordinatorError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for CloudCoordinator.CloudCoordinatorError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF) {
      swift_errorRetain(*a2);
    }
    *a1 = v4;
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }

  else
  {
    swift_errorRetain(*a2);
    unint64_t v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }

  return a1;
}

void *initializeWithTake for CloudCoordinator.CloudCoordinatorError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for CloudCoordinator.CloudCoordinatorError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudCoordinator.CloudCoordinatorError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFF9 && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CloudCoordinator.CloudCoordinatorError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 5;
    }
  }

  return result;
}

uint64_t sub_1001139DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_1001139F4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinator.CloudCoordinatorError()
{
  return &type metadata for CloudCoordinator.CloudCoordinatorError;
}

unint64_t sub_100113A2C()
{
  unint64_t result = qword_100236760;
  if (!qword_100236760)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A9158, &type metadata for CloudCoordinator.DatabaseToken);
    atomic_store(result, (unint64_t *)&qword_100236760);
  }

  return result;
}

unint64_t sub_100113A70()
{
  unint64_t result = qword_100236768;
  if (!qword_100236768)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A90D8, &type metadata for CloudCoordinator.CloudCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_100236768);
  }

  return result;
}

unint64_t sub_100113AB4(unint64_t result)
{
  if (result >= 6) {
    return swift_errorRelease(result);
  }
  return result;
}

void sub_100113CE0(BOOL *a1@<X8>)
{
}

void sub_100113FA8()
{
  byte_100236780 = 0;
}

void sub_100113FB4()
{
  byte_100236781 = 0;
}

void sub_100113FC0()
{
  byte_100236782 = 0;
}

void sub_100113FCC()
{
  byte_100236783 = 0;
}

uint64_t sub_100113FD8()
{
  uint64_t v0 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v0);
  unsigned int v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100098D18(v7, qword_10023DF40);
  sub_100098D58(v3, (uint64_t)qword_10023DF40);
  URL.init(string:)(0x6552646568636143LL, 0xED00007364726F63LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x6563697665444141LL, 0xEE0064726F636552LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return result;
}

Class AADeviceRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v108 = (uint64_t)&v103 - v9;
  __chkstk_darwin(v10);
  uint64_t v105 = (char *)&v103 - v11;
  __chkstk_darwin(v12);
  uint64_t v106 = (uint64_t)&v103 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v103 - v15;
  uint64_t v17 = objc_autoreleasePoolPush();
  uint64_t v18 = &v0[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  uint64_t v19 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  unint64_t v20 = *((void *)v18 + 1);
  sub_1000991CC(v19, v20);
  sub_100118B60(v19, v20);
  Class isa = v21;
  sub_100099394(v19, v20);
  if (!isa)
  {
    uint64_t v23 = v1;
    Class isa = sub_1000A3964((uint64_t)v23).super.isa;
  }

  Class v110 = isa;
  sub_100116DE8((id *)&v110);
  objc_autoreleasePoolPop(v17);
  Class v110 = 0LL;
  unint64_t v111 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(271LL);
  Class v112 = v110;
  unint64_t v113 = v111;
  v24._uint64_t countAndFlagsBits = 0x6563697665444141LL;
  v24._object = (void *)0xEF2864726F636552LL;
  String.append(_:)(v24);
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v26 = sub_100098C98( (unint64_t *)&unk_100235180,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
  object = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(object);
  v29._uint64_t countAndFlagsBits = 2108704LL;
  v29._object = (void *)0xE300000000000000LL;
  String.append(_:)(v29);
  uint64_t v30 = *(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  id v31 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain(v31);
  v32._uint64_t countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v31);
  v33._object = (void *)0x80000001001D2190LL;
  v33._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v33);
  LOBYTE(v110) = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig];
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v36._object = (void *)0x80000001001D21B0LL;
  String.append(_:)(v36);
  LOBYTE(v110) = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff];
  v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int8,  &protocol witness table for Int8);
  id v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._object = (void *)0x80000001001D21D0LL;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v39);
  uint64_t v40 = (uint64_t)&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp], &v110, 0LL, 0LL);
  sub_1000E6164(v40, (uint64_t)v16);
  NSString v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v41(v16, 1LL, v2))
  {
    sub_100099358((uint64_t)v16, (uint64_t *)&unk_100234E10);
    uint64_t v42 = (void *)0xE200000000000000LL;
    uint64_t v43 = 15932LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v16, v2);
    sub_100099358((uint64_t)v16, (uint64_t *)&unk_100234E10);
    __int128 v44 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v45 = Date._bridgeToObjectiveC()().super.isa;
    id v46 = [v44 localizedStringFromDate:v45 dateStyle:2 timeStyle:2];

    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v42 = v47;

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  v48._uint64_t countAndFlagsBits = v43;
  v48._object = v42;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v42);
  v49._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v49._object = (void *)0x80000001001D21F0LL;
  String.append(_:)(v49);
  v109[0] = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig];
  v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v51 = v50._object;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v51);
  v52._object = (void *)0x80000001001D2210LL;
  v52._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v52);
  v109[0] = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode];
  v53._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int8,  &protocol witness table for Int8);
  uint64_t v54 = v53._object;
  String.append(_:)(v53);
  swift_bridgeObjectRelease(v54);
  v55._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v55._object = (void *)0x80000001001CB230LL;
  String.append(_:)(v55);
  unsigned int v56 = &v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v109, 0LL, 0LL);
  id v57 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v57(v5, v56, v2);
  uint64_t v58 = sub_100098C98( &qword_1002367A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v59._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v58);
  uint64_t v60 = v59._object;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v60);
  unsigned int v104 = *(void (**)(char *, uint64_t))(v3 + 8);
  v104(v5, v2);
  v61._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v61._object = (void *)0x80000001001CB250LL;
  String.append(_:)(v61);
  id v62 = -[objc_class creationDate](isa, "creationDate");
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = (uint64_t)v105;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v65(v64, 0LL, 1LL, v2);
  }

  else
  {
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v64 = (uint64_t)v105;
    v65((uint64_t)v105, 1LL, 1LL, v2);
  }

  uint64_t v66 = v106;
  sub_100099290(v64, v106);
  unsigned int v67 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v41;
  if (v41((char *)v66, 1LL, v2))
  {
    sub_100099358(v66, (uint64_t *)&unk_100234E10);
    uint64_t v68 = (void *)0xE200000000000000LL;
    uint64_t v69 = 15932LL;
  }

  else
  {
    v57(v5, (char *)v66, v2);
    sub_100099358(v66, (uint64_t *)&unk_100234E10);
    uint64_t v70 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v71 = Date._bridgeToObjectiveC()().super.isa;
    id v72 = [v70 localizedStringFromDate:v71 dateStyle:2 timeStyle:2];

    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    uint64_t v68 = v73;

    v104(v5, v2);
  }

  v74._uint64_t countAndFlagsBits = v69;
  v74._object = v68;
  String.append(_:)(v74);
  swift_bridgeObjectRelease(v68);
  v75._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v75._object = (void *)0x80000001001CB270LL;
  String.append(_:)(v75);
  id v76 = -[objc_class modificationDate](isa, "modificationDate");
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = (uint64_t)v107;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

    uint64_t v79 = 0LL;
  }

  else
  {
    uint64_t v79 = 1LL;
    uint64_t v78 = (uint64_t)v107;
  }

  v65(v78, v79, 1LL, v2);
  uint64_t v80 = v108;
  sub_100099290(v78, v108);
  if (v67(v80, 1LL, v2))
  {
    sub_100099358(v80, (uint64_t *)&unk_100234E10);
    uint64_t v81 = (void *)0xE200000000000000LL;
    uint64_t v82 = 15932LL;
  }

  else
  {
    v57(v5, (char *)v80, v2);
    sub_100099358(v80, (uint64_t *)&unk_100234E10);
    uint64_t v83 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    Class v84 = Date._bridgeToObjectiveC()().super.isa;
    id v85 = [v83 localizedStringFromDate:v84 dateStyle:2 timeStyle:2];

    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    uint64_t v81 = v86;

    v104(v5, v2);
  }

  v87._uint64_t countAndFlagsBits = v82;
  v87._object = v81;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(v81);
  v88._object = (void *)0x80000001001CB290LL;
  v88._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v88);
  id v89 = -[objc_class modifiedByDevice](isa, "modifiedByDevice");
  if (v89)
  {
    unint64_t v90 = v89;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    uint64_t v93 = v92;
  }

  else
  {
    uint64_t v93 = (void *)0xE200000000000000LL;
    uint64_t v91 = 15932LL;
  }

  v94._uint64_t countAndFlagsBits = v91;
  v94._object = v93;
  String.append(_:)(v94);
  swift_bridgeObjectRelease(v93);
  v95._uint64_t countAndFlagsBits = 0x746520202020202CLL;
  v95._object = (void *)0xEC000000203A6761LL;
  String.append(_:)(v95);
  id v96 = -[objc_class recordChangeTag](isa, "recordChangeTag");
  if (v96)
  {
    uint64_t v97 = v96;
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    uint64_t v100 = v99;
  }

  else
  {
    uint64_t v100 = (void *)0xE200000000000000LL;
    uint64_t v98 = 15932LL;
  }

  v101._uint64_t countAndFlagsBits = v98;
  v101._object = v100;
  String.append(_:)(v101);

  swift_bridgeObjectRelease(v100);
  return v112;
}

id sub_100114B2C(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v101 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v98 = (char *)&v93 - v7;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v8);
  uint64_t v97 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v102 = (uint64_t)&v93 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v93 - v13;
  uint64_t v15 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = type metadata accessor for UUID(0LL);
  uint64_t v104 = *(void *)(v106 - 8);
  __n128 v18 = __chkstk_darwin(v106);
  uint64_t v103 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (uint64_t)&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp];
  uint64_t v99 = v4;
  char v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v100 = v3;
  uint64_t v105 = v21;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v21)( &v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp],  1LL,  1LL,  v3,  v18);
  uint64_t v22 = v1;
  uint64_t v23 = CKRecord.recordType.getter(v22);
  id v25 = v24;
  if (v23 == 0x6563697665444141LL && v24 == (void *)0xEE0064726F636552LL)
  {
    swift_bridgeObjectRelease(0xEE0064726F636552LL);
LABEL_5:
    id v27 = [a1 encryptedValues];
    NSString v28 = String._bridgeToObjectiveC()();
    id v29 = [v27 objectForKeyedSubscript:v28];

    if (!v29) {
      goto LABEL_9;
    }
    id v109 = v29;
    uint64_t v96 = sub_100098CD8(&qword_100234E40);
    uint64_t v30 = swift_dynamicCast(v108, &v109, v96, &type metadata for String, 6LL);
    if ((v30 & 1) == 0) {
      goto LABEL_9;
    }
    uint64_t v31 = v108[1];
    uint64_t v94 = v108[0];
    id v95 = v27;
    id v32 = [a1 recordID];
    id v33 = [v32 recordName];

    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;

    UUID.init(uuidString:)(v34, v36);
    swift_bridgeObjectRelease(v36);
    uint64_t v37 = v104;
    uint64_t v38 = v106;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v17, 1LL, v106) == 1)
    {
      swift_bridgeObjectRelease(v31);
      uint64_t v30 = sub_100099358((uint64_t)v17, &qword_100234E20);
      id v27 = v95;
LABEL_9:
      id v39 = v27;
      uint64_t v40 = static os_log_type_t.error.getter(v30);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      id v25 = (id)qword_10023DFC8;
      uint64_t v41 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
      *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      *(void *)(v42 + 56) = sub_10009931C();
      *(void *)(v42 + 64) = sub_100098C98( (unint64_t *)&qword_1002352D0,  (uint64_t (*)(uint64_t))sub_10009931C,  (uint64_t)&protocol conformance descriptor for NSObject);
      *(void *)(v42 + 32) = a1;
      id v43 = a1;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v25, "Invalid AADeviceRecord - %@", 27LL, 2LL, v42);
      swift_bridgeObjectRelease(v42);
      unint64_t v44 = sub_10011858C();
      uint64_t v45 = swift_allocError(&type metadata for AADeviceRecord.AADeviceRecordError, v44, 0LL, 0LL);
      *id v46 = 4;
      swift_willThrow(v45);
      swift_unknownObjectRelease(v39);

      goto LABEL_13;
    }

    Swift::String v52 = v103;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v103, v17, v38);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))( &v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier],  v52,  v38);
    Swift::String v53 = &v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    *(void *)Swift::String v53 = v94;
    *((void *)v53 + 1) = v31;
    NSString v54 = String._bridgeToObjectiveC()();
    id v55 = v95;
    id v56 = [v95 objectForKeyedSubscript:v54];

    uint64_t v57 = v100;
    if (v56 && (v108[0] = v56, swift_dynamicCast(&v109, v108, v96, &type metadata for UInt8, 6LL)))
    {
      char v58 = (char)v109;
    }

    else
    {
      if (qword_100234BD8 != -1) {
        swift_once(&qword_100234BD8, sub_100113FA8);
      }
      char v58 = byte_100236780;
    }

    v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig] = v58;
    NSString v59 = String._bridgeToObjectiveC()();
    id v60 = [v55 objectForKeyedSubscript:v59];

    if (v60 && (v108[0] = v60, swift_dynamicCast(&v109, v108, v96, &type metadata for Int8, 6LL)))
    {
      char v61 = (char)v109;
    }

    else
    {
      if (qword_100234BE0 != -1) {
        swift_once(&qword_100234BE0, sub_100113FB4);
      }
      char v61 = byte_100236781;
    }

    v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff] = v61;
    NSString v62 = String._bridgeToObjectiveC()();
    id v63 = [v55 objectForKeyedSubscript:v62];

    if (v63)
    {
      v108[0] = v63;
      uint64_t v64 = swift_dynamicCast(v14, v108, v96, v57, 6LL) ^ 1;
      uint64_t v65 = v14;
    }

    else
    {
      uint64_t v65 = v14;
      uint64_t v64 = 1LL;
    }

    v105(v65, v64, 1LL, v57);
    swift_beginAccess(v20, v108, 33LL, 0LL);
    sub_1000E622C((uint64_t)v14, v20);
    swift_endAccess(v108);
    NSString v66 = String._bridgeToObjectiveC()();
    id v67 = [v55 objectForKeyedSubscript:v66];

    uint64_t v68 = v102;
    if (v67 && (v108[0] = v67, swift_dynamicCast(&v109, v108, v96, &type metadata for UInt8, 6LL)))
    {
      char v69 = (char)v109;
    }

    else
    {
      if (qword_100234BE8 != -1) {
        swift_once(&qword_100234BE8, sub_100113FC0);
      }
      char v69 = byte_100236782;
    }

    v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig] = v69;
    NSString v70 = String._bridgeToObjectiveC()();
    id v71 = [v55 objectForKeyedSubscript:v70];

    if (v71 && (v108[0] = v71, swift_dynamicCast(&v109, v108, v96, &type metadata for Int8, 6LL)))
    {
      char v72 = (char)v109;
    }

    else
    {
      if (qword_100234BF0 != -1) {
        swift_once(&qword_100234BF0, sub_100113FCC);
      }
      char v72 = byte_100236783;
    }

    v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode] = v72;
    id v73 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
    [a1 encodeSystemFieldsWithCoder:v73];
    [v73 finishEncoding];
    id v74 = [v73 encodedData];
    uint64_t v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v77 = v76;

    uint64_t v78 = (uint64_t *)&v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
    uint64_t *v78 = v75;
    v78[1] = v77;
    id v79 = [a1 modificationDate];
    if (v79)
    {
      uint64_t v80 = v79;
      uint64_t v81 = v101;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v79);

      uint64_t v82 = v99;
      uint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v99 + 32);
      v83(v68, v81, v57);
      v105((char *)v68, 0LL, 1LL, v57);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v68, 1LL, v57) != 1)
      {
        swift_unknownObjectRelease(v95);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v103, v106);
        Class v84 = v98;
        v83((uint64_t)v98, (char *)v68, v57);
LABEL_52:
        v83((uint64_t)&v22[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v84, v57);

        id v92 = (objc_class *)type metadata accessor for AADeviceRecord(0LL);
        v107.receiver = v22;
        v107.super_class = v92;
        id v25 = objc_msgSendSuper2(&v107, "init");

        return v25;
      }
    }

    else
    {
      v105((char *)v68, 1LL, 1LL, v57);
      uint64_t v82 = v99;
    }

    id v85 = [a1 creationDate];
    if (v85)
    {
      char v86 = v85;
      Swift::String v87 = v101;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v85);

      Swift::String v88 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
      uint64_t v89 = (uint64_t)v97;
      unint64_t v90 = v87;
      uint64_t v37 = v104;
      v88(v97, v90, v57);
      v105((char *)v89, 0LL, 1LL, v57);
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v89, 1LL, v57);
      if ((_DWORD)v91 != 1)
      {
        swift_unknownObjectRelease(v95);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v103, v106);
        Class v84 = v98;
        v88(v98, (char *)v89, v57);
LABEL_51:
        sub_100099358(v102, (uint64_t *)&unk_100234E10);
        uint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v82 + 32);
        goto LABEL_52;
      }
    }

    else
    {
      uint64_t v89 = (uint64_t)v97;
      uint64_t v91 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v105)(v97, 1LL, 1LL, v57);
    }

    Class v84 = v98;
    static Date.now.getter(v91);
    swift_unknownObjectRelease(v95);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v103, v106);
    sub_100099358(v89, (uint64_t *)&unk_100234E10);
    goto LABEL_51;
  }

  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 0x6563697665444141LL, 0xEE0064726F636552LL, 0LL);
  swift_bridgeObjectRelease(v25);
  if ((v26 & 1) != 0) {
    goto LABEL_5;
  }
  unint64_t v47 = sub_10011858C();
  uint64_t v48 = swift_allocError(&type metadata for AADeviceRecord.AADeviceRecordError, v47, 0LL, 0LL);
  *Swift::String v49 = 0;
  swift_willThrow(v48);

LABEL_13:
  sub_100099358(v20, (uint64_t *)&unk_100234E10);

  uint64_t v50 = type metadata accessor for AADeviceRecord(0LL);
  swift_deallocPartialClassInstance( v22,  v50,  *(unsigned int *)((swift_isaMask & *(void *)v22) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v22) + 0x34LL));
  return v25;
}

void (*sub_1001156D4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4))(uint64_t, uint64_t)
{
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSString v54 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __n128 v13 = __chkstk_darwin(v12);
  Swift::String v53 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v10;
  uint64_t v56 = v9;
  uint64_t v15 = *(void (**)(__n128))(v10 + 56);
  id v60 = &v4[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp];
  Swift::String v52 = v15;
  v15(v13);
  uint64_t v16 = &v4[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  *(void *)uint64_t v16 = a2;
  *((void *)v16 + 1) = a3;
  uint64_t v17 = &v4[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier];
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v61 = *(void *)(v18 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  uint64_t v59 = a1;
  v19(v17, a1, v18);
  uint64_t v20 = v4;
  uint64_t v57 = a2;
  unint64_t v58 = a3;
  sub_1000991CC(a2, a3);
  id v64 = a4;
  id v21 = [a4 bluetoothAddress];
  if (!v21)
  {
    char v28 = 2;
    goto LABEL_11;
  }

  uint64_t v22 = v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  unint64_t v25 = v24;

  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (!v26) {
    goto LABEL_8;
  }
  if (v23 == 0xD000000000000011LL)
  {
    unint64_t v27 = 0x80000001001CCC20LL;
    if (v25 == 0x80000001001CCC20LL) {
      goto LABEL_9;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL) & 1) != 0)
  {
LABEL_8:
    unint64_t v27 = v25;
LABEL_9:
    swift_bridgeObjectRelease(v27);
    char v28 = 3;
LABEL_11:
    unint64_t v30 = v58;
    uint64_t v29 = v59;
    uint64_t v31 = v57;
    unint64_t v32 = sub_10011858C();
    uint64_t v33 = swift_allocError(&type metadata for AADeviceRecord.AADeviceRecordError, v32, 0LL, 0LL);
    *uint64_t v34 = v28;
    swift_willThrow(v33);

    sub_100099394(v31, v30);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v35(v29, v18);
    sub_100099394(*(void *)v16, *((void *)v16 + 1));
    v35((uint64_t)v17, v18);
    sub_100099358((uint64_t)v60, (uint64_t *)&unk_100234E10);

    uint64_t v36 = type metadata accessor for AADeviceRecord(0LL);
    swift_deallocPartialClassInstance( v20,  v36,  *(unsigned int *)((swift_isaMask & *(void *)v20) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v20) + 0x34LL));
    return v35;
  }

  uint64_t v38 = (uint64_t *)&v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  *uint64_t v38 = v23;
  v38[1] = v25;
  id v39 = v64;
  unsigned __int8 v40 = [v64 acceptReplyPlayPauseConfig];
  v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig] = v40;
  unsigned __int8 v41 = [v39 listeningModeOffAllowed];
  v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff] = v41;
  id v42 = [v39 audiogramEnrolledTimestamp];
  if (v42)
  {
    id v43 = v42;
    uint64_t v44 = (uint64_t)v53;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

    uint64_t v45 = 0LL;
  }

  else
  {
    uint64_t v45 = 1LL;
    uint64_t v44 = (uint64_t)v53;
  }

  uint64_t v46 = v56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v52)(v44, v45, 1LL, v56);
  uint64_t v47 = (uint64_t)v60;
  swift_beginAccess(v60, v63, 33LL, 0LL);
  sub_1000E622C(v44, v47);
  swift_endAccess(v63);
  unsigned __int8 v48 = [v39 declineDismissSkipConfig];
  v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig] = v48;
  id v49 = [v39 headGestureToggle];
  v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode] = (char)v49;
  uint64_t v50 = v54;
  static Date.now.getter(v49);
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))( &v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate],  v50,  v46);

  uint64_t v51 = (objc_class *)type metadata accessor for AADeviceRecord(0LL);
  v62.receiver = v20;
  v62.super_class = v51;
  uint64_t v35 = (void (*)(uint64_t, uint64_t))objc_msgSendSuper2(&v62, "init");

  sub_100099394(v57, v58);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v18);
  return v35;
}

char *AADeviceRecord.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return AADeviceRecord.init(from:)(a1);
}

char *AADeviceRecord.init(from:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v74 - v7;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v8);
  uint64_t v75 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (uint64_t)&v74 - v11;
  __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v74 - v13;
  __chkstk_darwin(v14);
  uint64_t v82 = (uint64_t)&v74 - v15;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v83 = v16;
  uint64_t v84 = v17;
  __chkstk_darwin(v16);
  id v85 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = sub_100098CD8(&qword_1002367A8);
  uint64_t v19 = *(void *)(v86 - 8);
  __n128 v20 = __chkstk_darwin(v86);
  uint64_t v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = &v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp];
  uint64_t v80 = v4;
  uint64_t v81 = v3;
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
  v24(&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp], 1LL, 1LL, v3, v20);
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  Swift::String v87 = a1;
  Swift::String v88 = sub_10009A430(a1, v25);
  unint64_t v27 = sub_100117E48();
  char v28 = v1;
  uint64_t v29 = v89;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AADeviceRecord.CodingKeys,  &type metadata for AADeviceRecord.CodingKeys,  v27,  v25,  v26);
  if (!v29)
  {
    unint64_t v30 = v85;
    Swift::String v88 = v24;
    uint64_t v89 = v23;
    uint64_t v31 = v28;
    char v92 = 0;
    unint64_t v32 = sub_10009A4B8();
    uint64_t v33 = v86;
    uint64_t v34 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v91, &type metadata for Data, &v92, v86, &type metadata for Data, v32);
    *(_OWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata] = *(_OWORD *)v91;
    LOBYTE(v91[0]) = 1;
    uint64_t v37 = sub_100098C98( (unint64_t *)&unk_100235000,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v38 = v83;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v83, v91, v33, v83, v37);
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))( &v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier],  v30,  v38);
    LOBYTE(v91[0]) = 2;
    id v85 = 0LL;
    uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)(v91, v33);
    unsigned __int8 v40 = (uint64_t *)&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    *unsigned __int8 v40 = v39;
    v40[1] = v41;
    LOBYTE(v91[0]) = 3;
    v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig] = KeyedDecodingContainer.decode(_:forKey:)( v91,  v33);
    LOBYTE(v91[0]) = 4;
    v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff] = KeyedDecodingContainer.decode(_:forKey:)( v91,  v33);
    LOBYTE(v91[0]) = 5;
    uint64_t v42 = sub_100098C98( &qword_1002351C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v81, v91, v33, v81, v42);
    uint64_t v43 = (uint64_t)v89;
    swift_beginAccess(v89, v91, 33LL, 0LL);
    sub_1000E622C(v82, v43);
    swift_endAccess(v91);
    LOBYTE(v91[0]) = 6;
    v31[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig] = KeyedDecodingContainer.decode(_:forKey:)( v91,  v33);
    LOBYTE(v91[0]) = 7;
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)(v91, v33);
    v31[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode] = v44;
    uint64_t v45 = v78;
    static Date.now.getter(v44);
    uint64_t v46 = v81;
    uint64_t v89 = *(char **)(v80 + 32);
    ((void (*)(char *, char *, uint64_t))v89)( &v31[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate],  v45,  v81);

    uint64_t v47 = (objc_class *)type metadata accessor for AADeviceRecord(0LL);
    v90.receiver = v31;
    v90.super_class = v47;
    id v48 = objc_msgSendSuper2(&v90, "init");
    LOBYTE(v91[0]) = 8;
    char v28 = (char *)v48;
    uint64_t v49 = v79;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v46, v91, v33, v46, v42);
    id v85 = v34;
    uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
    if (v50(v49, 1LL, v46) != 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v85, v86);
      ((void (*)(char *, uint64_t, uint64_t))v89)(v77, v79, v81);
LABEL_22:
      id v73 = &v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
      swift_beginAccess(&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v91, 33LL, 0LL);
      (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v73, v77, v81);
      swift_endAccess(v91);
      sub_10009A498(v87);

      return v28;
    }

    uint64_t v51 = objc_autoreleasePoolPush();
    Swift::String v52 = (uint64_t *)&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
    uint64_t v54 = *(void *)&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
    unint64_t v53 = *(void *)&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
    sub_1000991CC(v54, v53);
    sub_100118B60(v54, v53);
    Class isa = v55;
    sub_100099394(v54, v53);
    if (!isa)
    {
      uint64_t v57 = v28;
      Class isa = sub_1000A3964((uint64_t)v57).super.isa;
    }

    v91[0] = isa;
    sub_100116DE8(v91);
    objc_autoreleasePoolPop(v51);
    id v58 = -[objc_class modificationDate](isa, "modificationDate");

    if (v58)
    {
      uint64_t v59 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

      uint64_t v60 = v76;
      uint64_t v61 = v81;
      ((void (*)(uint64_t, char *, uint64_t))v89)(v76, v59, v81);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v60, 0LL, 1LL, v61);
      if (v50(v60, 1LL, v61) != 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v85, v86);
        ((void (*)(char *, uint64_t, uint64_t))v89)(v77, v76, v81);
LABEL_21:
        sub_100099358(v79, (uint64_t *)&unk_100234E10);
        goto LABEL_22;
      }
    }

    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v76, 1LL, 1LL, v81);
    }

    objc_super v62 = objc_autoreleasePoolPush();
    uint64_t v64 = *v52;
    unint64_t v63 = v52[1];
    sub_1000991CC(*v52, v63);
    sub_100118B60(v64, v63);
    Class v66 = v65;
    sub_100099394(v64, v63);
    if (!v66)
    {
      id v67 = v28;
      Class v66 = sub_1000A3964((uint64_t)v67).super.isa;
    }

    v91[0] = v66;
    sub_100116DE8(v91);
    objc_autoreleasePoolPop(v62);
    id v68 = -[objc_class creationDate](v66, "creationDate");

    if (v68)
    {
      char v69 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

      uint64_t v70 = v75;
      uint64_t v71 = v81;
      ((void (*)(uint64_t, char *, uint64_t))v89)(v75, v69, v81);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v70, 0LL, 1LL, v71);
      uint64_t v72 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50)(v70, 1LL, v71);
      if ((_DWORD)v72 != 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v85, v86);
        ((void (*)(char *, uint64_t, uint64_t))v89)(v77, v75, v81);
LABEL_20:
        sub_100099358(v76, (uint64_t *)&unk_100234E10);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v72 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v75, 1LL, 1LL, v81);
    }

    static Date.now.getter(v72);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v85, v86);
    sub_100099358(v75, (uint64_t *)&unk_100234E10);
    goto LABEL_20;
  }

  sub_10009A498(v87);
  sub_100099358( (uint64_t)&v28[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp],  (uint64_t *)&unk_100234E10);
  uint64_t v35 = type metadata accessor for AADeviceRecord(0LL);
  swift_deallocPartialClassInstance( v28,  v35,  *(unsigned int *)((swift_isaMask & *(void *)v28) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v28) + 0x34LL));
  return v28;
}

void AADeviceRecord.init()()
{
}

uint64_t sub_10011667C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001166BC + 4 * a5[a1]))( 0x74654D64756F6C63LL,  0xED00006174616461LL);
}

uint64_t sub_1001166BC()
{
  return 0x696669746E656469LL;
}

unint64_t sub_1001166D8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100116794()
{
  return sub_10011667C(*v0);
}

uint64_t sub_10011679C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001181D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001167C0(uint64_t a1)
{
  unint64_t v2 = sub_100117E48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001167E8(uint64_t a1)
{
  unint64_t v2 = sub_100117E48();
  return CodingKey.debugDescription.getter(a1, v2);
}

id AADeviceRecord.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AADeviceRecord(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AADeviceRecord.encode(to:)(void *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_1002367C0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_10009A430(a1, v15);
  unint64_t v16 = sub_100117E48();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AADeviceRecord.CodingKeys,  &type metadata for AADeviceRecord.CodingKeys,  v16,  v15,  v14);
  v48[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v47[0] = 0;
  unint64_t v17 = sub_10009A4FC();
  uint64_t v18 = v10;
  uint64_t v19 = v13;
  __n128 v20 = v46;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v48, v47, v10, &type metadata for Data, v17);
  if (!v20)
  {
    uint64_t v43 = v6;
    uint64_t v21 = v45;
    uint64_t v46 = v2;
    uint64_t v22 = &v2[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier];
    LOBYTE(v48[0]) = 1;
    uint64_t v23 = type metadata accessor for UUID(0LL);
    uint64_t v24 = sub_100098C98( (unint64_t *)&unk_100235020,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v48, v18, v23, v24);
    uint64_t v25 = v46;
    uint64_t v26 = *(void *)&v46[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    uint64_t v27 = *(void *)&v46[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
    LOBYTE(v48[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, v48, v18);
    uint64_t v28 = v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig];
    LOBYTE(v48[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v48, v18);
    uint64_t v29 = v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff];
    LOBYTE(v48[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v48, v18);
    uint64_t v30 = (uint64_t)&v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp];
    swift_beginAccess(v30, v48, 0LL, 0LL);
    uint64_t v31 = (uint64_t)v9;
    sub_1000E6164(v30, (uint64_t)v9);
    v47[0] = 5;
    uint64_t v32 = sub_100098C98( (unint64_t *)&unk_100235A20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v33 = v9;
    uint64_t v34 = v21;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v33, v47, v18, v21, v32);
    sub_100099358(v31, (uint64_t *)&unk_100234E10);
    uint64_t v35 = v46[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig];
    v47[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v47, v18);
    uint64_t v36 = v46[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode];
    v47[0] = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v36, v47, v18);
    uint64_t v38 = &v46[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
    swift_beginAccess(&v46[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v47, 0LL, 0LL);
    uint64_t v39 = v44;
    unsigned __int8 v40 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    uint64_t v46 = 0LL;
    uint64_t v41 = v43;
    v40(v43, v38, v34);
    char v49 = 8;
    uint64_t v19 = v46;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v41, &v49, v18, v34, v32);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v34);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v19, v18);
}

uint64_t sub_100116CFC()
{
  return 0x6563697665444141LL;
}

uint64_t sub_100116D20()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata;
  uint64_t v2 = *(void *)v1;
  sub_1000991CC(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_100116D60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100116DC8(id *a1)
{
  return sub_100116DE8(a1);
}

uint64_t sub_100116DE8(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v55 = type metadata accessor for Date(0LL);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v50 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v53 = (const char *)sub_100098CD8(&qword_100235DF0);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v6);
  uint64_t v51 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  Swift::String v52 = (char *)&v49 - v9;
  __chkstk_darwin(v10);
  uint64_t v56 = (uint64_t *)((char *)&v49 - v11);
  uint64_t v13 = static os_log_type_t.debug.getter(v12);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v14 = qword_10023DFC8;
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v17 = *a1;
  id v18 = [v17 description];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10009914C();
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Updating main aaDevice record: %@", 33LL, 2LL, v16);
  swift_bridgeObjectRelease(v16);
  id v22 = [v17 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v22);
  CKRecordKeyValueSetting.subscript.getter( &v59,  0xD000000000000010LL,  0x80000001001CAB00LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v24 = *((void *)&v59 + 1);
  uint64_t v25 = v2;
  unint64_t v26 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
  unint64_t v27 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8);
  if (!*((void *)&v59 + 1)) {
    goto LABEL_7;
  }
  if (v59 != __PAIR128__(v27, v26))
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)( v59,  *((void *)&v59 + 1),  *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress),  *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8),  0LL);
    swift_bridgeObjectRelease(v24);
    if ((v28 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_7:
    *((void *)&v60 + 1) = &type metadata for String;
    uint64_t v61 = &protocol witness table for String;
    *(void *)&__int128 v59 = v26;
    *((void *)&v59 + 1) = v27;
    swift_bridgeObjectRetain(v27);
    CKRecordKeyValueSetting.subscript.setter(&v59, 0xD000000000000010LL, 0x80000001001CAB00LL, ObjectType);
    goto LABEL_8;
  }

  swift_bridgeObjectRelease(*((void *)&v59 + 1));
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter( &v59,  0xD00000000000001ALL,  0x80000001001D22D0LL,  ObjectType,  &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v29 = v25;
  int v30 = *(unsigned __int8 *)(v25 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig);
  if ((BYTE1(v59) & 1) != 0 || v59 != v30)
  {
    *((void *)&v60 + 1) = &type metadata for UInt8;
    uint64_t v61 = &protocol witness table for UInt8;
    LOBYTE(v59) = v30;
    CKRecordKeyValueSetting.subscript.setter(&v59, 0xD00000000000001ALL, 0x80000001001D22D0LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v59,  0xD000000000000017LL,  0x80000001001D22F0LL,  ObjectType,  &type metadata for Int8,  &protocol witness table for Int8);
  int v31 = *(unsigned __int8 *)(v25 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff);
  if ((BYTE1(v59) & 1) != 0 || v59 != v31)
  {
    *((void *)&v60 + 1) = &type metadata for Int8;
    uint64_t v61 = &protocol witness table for Int8;
    LOBYTE(v59) = v31;
    CKRecordKeyValueSetting.subscript.setter(&v59, 0xD000000000000017LL, 0x80000001001D22F0LL, ObjectType);
  }

  uint64_t v32 = "allowNoiseManagementOff";
  uint64_t v34 = v55;
  uint64_t v33 = v56;
  CKRecordKeyValueSetting.subscript.getter( v56,  0xD00000000000001ALL,  0x80000001001D2310LL,  ObjectType,  v55,  &protocol witness table for Date);
  uint64_t v35 = v25 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp;
  swift_beginAccess(v29 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp, v58, 0LL, 0LL);
  uint64_t v36 = v54;
  uint64_t v37 = v54 + *((int *)v53 + 12);
  sub_1000E6164((uint64_t)v33, v54);
  sub_1000E6164(v35, v37);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v38(v36, 1LL, v34) == 1)
  {
    sub_100099358((uint64_t)v33, (uint64_t *)&unk_100234E10);
    if (v38(v37, 1LL, v34) == 1)
    {
      sub_100099358(v36, (uint64_t *)&unk_100234E10);
      goto LABEL_25;
    }
  }

  else
  {
    unint64_t v53 = "allowNoiseManagementOff";
    uint64_t v39 = (uint64_t)v52;
    sub_1000E6164(v36, (uint64_t)v52);
    if (v38(v37, 1LL, v34) != 1)
    {
      unsigned __int8 v40 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v50, v37, v34);
      uint64_t v41 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v40, v34, v41);
      uint64_t v43 = *(void (**)(char *, uint64_t))(v57 + 8);
      v43(v40, v34);
      sub_100099358((uint64_t)v56, (uint64_t *)&unk_100234E10);
      v43(v52, v34);
      sub_100099358(v36, (uint64_t *)&unk_100234E10);
      uint64_t v32 = v53;
      if ((v42 & 1) != 0) {
        goto LABEL_25;
      }
      goto LABEL_21;
    }

    sub_100099358((uint64_t)v33, (uint64_t *)&unk_100234E10);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v39, v34);
    uint64_t v32 = v53;
  }

  sub_100099358(v36, &qword_100235DF0);
LABEL_21:
  uint64_t v44 = v51;
  sub_1000E6164(v35, v51);
  if (v38(v44, 1LL, v34) == 1)
  {
    sub_100099358(v44, (uint64_t *)&unk_100234E10);
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    uint64_t v61 = 0LL;
  }

  else
  {
    *((void *)&v60 + 1) = v34;
    uint64_t v61 = &protocol witness table for Date;
    uint64_t v45 = sub_1000E7194(&v59);
    (*(void (**)(void *, uint64_t, uint64_t))(v57 + 32))(v45, v44, v34);
  }

  CKRecordKeyValueSetting.subscript.setter( &v59,  0xD00000000000001ALL,  (unint64_t)v32 | 0x8000000000000000LL,  ObjectType);
LABEL_25:
  CKRecordKeyValueSetting.subscript.getter( &v59,  0xD000000000000018LL,  0x80000001001D2330LL,  ObjectType,  &type metadata for UInt8,  &protocol witness table for UInt8);
  int v46 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig);
  if ((BYTE1(v59) & 1) != 0 || v59 != v46)
  {
    *((void *)&v60 + 1) = &type metadata for UInt8;
    uint64_t v61 = &protocol witness table for UInt8;
    LOBYTE(v59) = v46;
    CKRecordKeyValueSetting.subscript.setter(&v59, 0xD000000000000018LL, 0x80000001001D2330LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v59,  0x7473654764616568LL,  0xEF65646F4D657275LL,  ObjectType,  &type metadata for Int8,  &protocol witness table for Int8);
  int v47 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode);
  if ((BYTE1(v59) & 1) != 0 || v59 != v47)
  {
    *((void *)&v60 + 1) = &type metadata for Int8;
    uint64_t v61 = &protocol witness table for Int8;
    LOBYTE(v59) = v47;
    CKRecordKeyValueSetting.subscript.setter(&v59, 0x7473654764616568LL, 0xEF65646F4D657275LL, ObjectType);
  }

  return swift_unknownObjectRelease(v22);
}

uint64_t sub_1001175AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

char *sub_1001175F4@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for AADeviceRecord(0LL));
  uint64_t result = AADeviceRecord.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100117648(void *a1)
{
  return AADeviceRecord.encode(to:)(a1);
}

uint64_t sub_100117668(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v47 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8(&qword_100235DF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - v14;
  __chkstk_darwin(v16);
  id v18 = (char *)&v45 - v17;
  uint64_t v19 = sub_100117B20((uint64_t)a1);
  if ((v19 & 1) != 0)
  {
    int v20 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig];
    int v46 = v6;
    int v21 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff];
    uint64_t v22 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp];
    swift_beginAccess(&a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp], v50, 0LL, 0LL);
    sub_1000E6164(v22, (uint64_t)v18);
    uint64_t v23 = v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp;
    swift_beginAccess(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp, v49, 0LL, 0LL);
    uint64_t v24 = (uint64_t)&v9[*(int *)(v7 + 48)];
    sub_1000E6164(v23, (uint64_t)v9);
    sub_1000E6164((uint64_t)v18, v24);
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    if (v25((uint64_t)v9, 1LL, v4) == 1)
    {
      if (v25(v24, 1LL, v4) == 1)
      {
        uint64_t v26 = sub_100099358((uint64_t)v9, (uint64_t *)&unk_100234E10);
LABEL_17:
        int v41 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig];
        int v42 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode];
        uint64_t v43 = v46;
        static Date.now.getter(v26);
        uint64_t v44 = v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate;
        swift_beginAccess(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate, v48, 33LL, 0LL);
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 40))(v44, v43, v4);
        swift_endAccess(v48);
        return sub_100099358((uint64_t)v18, (uint64_t *)&unk_100234E10);
      }
    }

    else
    {
      sub_1000E6164((uint64_t)v9, (uint64_t)v15);
      if (v25(v24, 1LL, v4) != 1)
      {
        uint64_t v37 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v46, v24, v4);
        uint64_t v38 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        char v39 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v37, v4, v38);
        unsigned __int8 v40 = *(void (**)(char *, uint64_t))(v47 + 8);
        v40(v46, v4);
        v40(v15, v4);
        uint64_t v26 = sub_100099358((uint64_t)v9, (uint64_t *)&unk_100234E10);
        if ((v39 & 1) != 0) {
          goto LABEL_17;
        }
LABEL_16:
        sub_1000E6164((uint64_t)v18, (uint64_t)v12);
        swift_beginAccess(v23, v48, 33LL, 0LL);
        sub_1000E622C((uint64_t)v12, v23);
        uint64_t v26 = swift_endAccess(v48);
        goto LABEL_17;
      }

      (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v4);
    }

    sub_100099358((uint64_t)v9, &qword_100235DF0);
    goto LABEL_16;
  }

  uint64_t v27 = static os_log_type_t.info.getter(v19);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v28 = qword_10023DFC8;
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  int v31 = a1;
  id v32 = [v31 description];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10009914C();
  *(void *)(v30 + 32) = v33;
  *(void *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "No change in updated device: %@", 31LL, 2LL, v30);
  return swift_bridgeObjectRelease(v30);
}

uint64_t sub_100117B20(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_100098CD8(&qword_100235DF0);
  __chkstk_darwin(v7);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v10);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v25[-v14];
  if (!a1) {
    goto LABEL_9;
  }
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig)
    || *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff)
    || *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig)
    || *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode))
  {
    char v20 = 1;
    return v20 & 1;
  }

  uint64_t v16 = a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp;
  swift_beginAccess(v16, v26, 0LL, 0LL);
  sub_1000E6164(v16, (uint64_t)v15);
  uint64_t v17 = v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_audiogramCreationTimestamp, v25, 0LL, 0LL);
  uint64_t v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1000E6164((uint64_t)v15, (uint64_t)v9);
  sub_1000E6164(v17, v18);
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1LL, v3) != 1)
  {
    sub_1000E6164((uint64_t)v9, (uint64_t)v12);
    if (v19(v18, 1LL, v3) != 1)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
      uint64_t v22 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v6, v3, v22);
      uint64_t v24 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
      v24(v6, v3);
      sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
      v24(v12, v3);
      sub_100099358((uint64_t)v9, (uint64_t *)&unk_100234E10);
      char v20 = v23 ^ 1;
      return v20 & 1;
    }

    sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v12, v3);
    goto LABEL_14;
  }

  sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
  if (v19(v18, 1LL, v3) != 1)
  {
LABEL_14:
    sub_100099358((uint64_t)v9, &qword_100235DF0);
    char v20 = 1;
    return v20 & 1;
  }

  sub_100099358((uint64_t)v9, (uint64_t *)&unk_100234E10);
LABEL_9:
  char v20 = 0;
  return v20 & 1;
}

unint64_t sub_100117E48()
{
  unint64_t result = qword_1002367B0;
  if (!qword_1002367B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A939C, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002367B0);
  }

  return result;
}

uint64_t type metadata accessor for AADeviceRecord(uint64_t a1)
{
  uint64_t result = qword_100236810;
  if (!qword_100236810) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AADeviceRecord);
  }
  return result;
}

uint64_t sub_100117EC8(uint64_t a1)
{
  uint64_t result = sub_100098C98( (unint64_t *)&unk_1002367D0,  type metadata accessor for AADeviceRecord,  (uint64_t)&unk_1001A921C);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100117F04(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100098C98( &qword_100236E50,  type metadata accessor for AADeviceRecord,  (uint64_t)&protocol conformance descriptor for AADeviceRecord);
  uint64_t result = sub_100098C98( &qword_1002367E0,  type metadata accessor for AADeviceRecord,  (uint64_t)&protocol conformance descriptor for AADeviceRecord);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_100117F60()
{
  return type metadata accessor for AADeviceRecord(0LL);
}

void sub_100117F68(uint64_t a1)
{
  v8[0] = &unk_1001A92A8;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    v8[2] = &unk_1001A92C0;
    v8[3] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[4] = (char *)&value witness table for Builtin.Int8 + 64;
    sub_1000E6414(319LL);
    if (v5 <= 0x3F)
    {
      void v8[5] = *(void *)(v4 - 8) + 64LL;
      v8[6] = (char *)&value witness table for Builtin.Int8 + 64;
      v8[7] = (char *)&value witness table for Builtin.Int8 + 64;
      uint64_t v6 = type metadata accessor for Date(319LL);
      if (v7 <= 0x3F)
      {
        v8[8] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 9LL, v8, a1 + 80);
      }
    }
  }

uint64_t storeEnumTagSinglePayload for AADeviceRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10011807C + 4 * byte_1001A91EE[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001180B0 + 4 * byte_1001A91E9[v4]))();
}

uint64_t sub_1001180B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001180B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001180C0LL);
  }
  return result;
}

uint64_t sub_1001180CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001180D4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1001180D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001180E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AADeviceRecord.CodingKeys()
{
  return &type metadata for AADeviceRecord.CodingKeys;
}

unint64_t sub_100118100()
{
  unint64_t result = qword_100236828;
  if (!qword_100236828)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A9374, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236828);
  }

  return result;
}

unint64_t sub_100118148()
{
  unint64_t result = qword_100236830;
  if (!qword_100236830)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A92E4, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236830);
  }

  return result;
}

unint64_t sub_100118190()
{
  unint64_t result = qword_100236838;
  if (!qword_100236838)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A930C, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100236838);
  }

  return result;
}

uint64_t sub_1001181D4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v5 = 0xED00006174616461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v7 = 0xEA00000000007265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x80000001001CAB00LL;
    if (a2 == 0x80000001001CAB00LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v9 = 0x80000001001D22D0LL;
    if (a2 == 0x80000001001D22D0LL) {
      goto LABEL_24;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001D22D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x80000001001D22F0LL)
  {
    unint64_t v10 = 0x80000001001D22F0LL;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001001D22F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_30;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v11 = 0x80000001001D2310LL;
    if (a2 == 0x80000001001D2310LL) {
      goto LABEL_35;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001D2310LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x80000001001D2330LL)
  {
    unint64_t v12 = 0x80000001001D2330LL;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001001D2330LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_41;
  }

  if (a1 == 0x7473654764616568LL && a2 == 0xEF65646F4D657275LL)
  {
    unint64_t v13 = 0xEF65646F4D657275LL;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7473654764616568LL, 0xEF65646F4D657275LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_47;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001001CAC70LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAC70LL);
    return 8LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001CAC70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

unint64_t sub_10011858C()
{
  unint64_t result = qword_100236850;
  if (!qword_100236850)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A946C, &type metadata for AADeviceRecord.AADeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100236850);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AADeviceRecord.AADeviceRecordError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10011861C + 4 * byte_1001A91F8[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100118650 + 4 * byte_1001A91F3[v4]))();
}

uint64_t sub_100118650(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100118658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100118660LL);
  }
  return result;
}

uint64_t sub_10011866C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100118674LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100118678(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100118680(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AADeviceRecord.AADeviceRecordError()
{
  return &type metadata for AADeviceRecord.AADeviceRecordError;
}

unint64_t sub_1001186A0()
{
  unint64_t result = qword_100236860;
  if (!qword_100236860)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001A9444, &type metadata for AADeviceRecord.AADeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100236860);
  }

  return result;
}

Class sub_1001186E4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = objc_autoreleasePoolPush();
  sub_100118758(v2, a1, a2, &v7);
  objc_autoreleasePoolPop(v5);
  return v7;
}

uint64_t sub_100118758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Class *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  __n128 v9 = __chkstk_darwin(a1);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 32))(v13, v12, v9);
  unint64_t v16 = v15;
  sub_100118B60(v14, v15);
  Class isa = v17;
  sub_100099394(v14, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a2);
  if (!isa) {
    Class isa = sub_100118860((uint64_t)v11, a2, a3).super.isa;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
  Class v21 = isa;
  uint64_t result = (*(uint64_t (**)(Class *, uint64_t, uint64_t))(a3 + 64))(&v21, a2, a3);
  *a4 = isa;
  return result;
}

CKRecord sub_100118860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 32LL))(a2);
  uint64_t v10 = UUID.uuidString.getter(v9);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v15 = v14;
  v16._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v16._object = v17;
  v18._uint64_t countAndFlagsBits = v13;
  v18._object = v15;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  v20._uint64_t countAndFlagsBits = v10;
  v20._object = v12;
  v21.super.Class isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
  uint64_t v22 = static os_log_type_t.default.getter(v21.super.isa);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v23 = qword_10023DFC8;
  uint64_t v24 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  uint64_t v27 = v26(a2, a3);
  uint64_t v29 = v28;
  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = sub_10009914C();
  *(void *)(v25 + 32) = v27;
  *(void *)(v25 + 40) = v29;
  os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  v23,  "Failed to unarchive record -- creating new %@ record",  52LL,  2LL,  v25);
  swift_bridgeObjectRelease(v25);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
  v30._uint64_t countAndFlagsBits = v26(a2, a3);
  return CKRecord.init(recordType:recordID:)(v30, v21);
}

id sub_100118AA4()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = 0LL;
  id v2 = [v0 initForReadingFromData:isa error:&v7];

  id v3 = v7;
  if (v2)
  {
    id v4 = v7;
  }

  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }

  return v2;
}

void sub_100118B60(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

id sub_100118BA0()
{
  if ((v1 & 0xFF000000000000LL) != 0)
  {
    id v3 = objc_allocWithZone(&OBJC_CLASS___NSKeyedUnarchiver);
    sub_1000991CC(v2, v1);
    id v4 = sub_100118AA4();
    uint64_t v5 = sub_100099394(v2, v1);
    if (v0)
    {
      uint64_t v6 = ((uint64_t (*)(uint64_t))static os_log_type_t.error.getter)(v5);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v7 = qword_10023DFC8;
      uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
      *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v18 = v0;
      swift_errorRetain(v0);
      uint64_t v10 = sub_100098CD8(&qword_1002357C0);
      uint64_t v11 = ((uint64_t (*)(uint64_t *, uint64_t))String.init<A>(describing:))(&v18, v10);
      uint64_t v13 = v12;
      *(void *)(v9 + 56) = &type metadata for String;
      *(void *)(v9 + 64) = sub_10009914C();
      *(void *)(v9 + 32) = v11;
      *(void *)(v9 + 40) = v13;
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Unable to create unarchiver: %@", 31LL, 2LL, v9, v18);
      swift_bridgeObjectRelease(v9);
      swift_errorRelease(v0);
    }

    else
    {
      id v16 = [objc_allocWithZone(CKRecord) initWithCoder:v4];
      if (v16)
      {
        id v14 = v16;

        return v14;
      }

      uint64_t v17 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_10023DFC8,  "Unable to extract CKRecord from cloudKitMetadata",  48LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  return 0LL;
}

id sub_100118D98()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CloudPushService()) init];
  qword_10023DF98 = (uint64_t)result;
  return result;
}

id sub_100118E04()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  id v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __n128 v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL, v6);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates] = _swiftEmptyDictionarySingleton;
  uint64_t v24 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue;
  sub_1000CAEDC();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v9);
  uint64_t v13 = v1;
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100098C98( (unint64_t *)&unk_100237030,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100235870);
  uint64_t v16 = sub_1000C9F38((unint64_t *)&qword_100237040, (uint64_t *)&unk_100235870);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v15, v16, v2, v14);
  uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000020LL,  0x80000001001D2990LL,  v8,  v4,  v12,  0LL);
  *(void *)&v1[v24] = v17;
  uint64_t v18 = &v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushEnvironment];
  *(void *)uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *((void *)v18 + 1) = v19;
  *(void *)&v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection] = 0LL;
  *(void *)&v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher] = 0LL;
  *(void *)&v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher] = 0LL;

  Swift::String v20 = (objc_class *)type metadata accessor for CloudPushService();
  v25.receiver = v13;
  v25.super_class = v20;
  id v21 = objc_msgSendSuper2(&v25, "init");
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  if (qword_100234C10 != -1) {
    swift_once(&qword_100234C10, sub_10018A8CC);
  }
  os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_10023DFB0,  "APS Wrapper init, add needed delegates before we start...",  57LL,  2LL,  _swiftEmptyArrayStorage);

  return v21;
}

void sub_1001190DC()
{
  unint64_t v1 = v0;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v3 = [v2 isBuddyComplete];
  if (!(_DWORD)v3)
  {
    uint64_t v15 = static os_log_type_t.default.getter(v3);
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_10023DFB8,  "CloudPushService buddy is NOT done, wait...",  43LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v16 = swift_allocObject(&unk_10020F158, 24LL, 7LL);
    swift_unknownObjectWeakInit(v16 + 16, v1);
    uint64_t v29 = sub_10011BE70;
    uint64_t v30 = v16;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256LL;
    uint64_t v27 = sub_1000F2C54;
    uint64_t v28 = &unk_10020F350;
    uint64_t v17 = _Block_copy(&aBlock);
    swift_release(v30);
    id v18 = [v2 addBuddyCompleteObserver:v17];
    _Block_release(v17);
    uint64_t v19 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher;
    goto LABEL_13;
  }

  id v4 = [v2 isFirstUnlocked];
  int v5 = (int)v4;
  uint64_t v6 = static os_log_type_t.default.getter(v4);
  if (!v5)
  {
    if (qword_100234C18 != -1) {
      swift_once(&qword_100234C18, sub_10018A920);
    }
    os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_10023DFB8,  "CloudPushService cannot start, device needs to be first unlocked after boot",  75LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v20 = swift_allocObject(&unk_10020F158, 24LL, 7LL);
    swift_unknownObjectWeakInit(v20 + 16, v1);
    uint64_t v29 = sub_10011BE78;
    uint64_t v30 = v20;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256LL;
    uint64_t v27 = sub_1000F2C54;
    uint64_t v28 = &unk_10020F378;
    id v21 = _Block_copy(&aBlock);
    swift_release(v30);
    id v18 = [v2 addFirstUnlockObserver:v21];
    _Block_release(v21);
    uint64_t v19 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher;
LABEL_13:
    uint64_t v22 = *(void **)&v1[v19];
    *(void *)&v1[v19] = v18;

    return;
  }

  if (qword_100234C10 != -1) {
    swift_once(&qword_100234C10, sub_10018A8CC);
  }
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_10023DFB0,  "Start APS connection",  20LL,  2LL,  _swiftEmptyArrayStorage);
  id v7 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v8 = [v7 bundleIdentifier];

  if (v8)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v12);
    id v14 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
    uint64_t v24 = sub_1000AD3E8("com.apple.bluetooth.user.setupAPS", 33LL, 2LL);
    sub_100119724(v24, v1, 0xD000000000000018LL, 0x80000001001D2770LL, 0xD00000000000001BLL, 0x80000001001D2750LL);
    swift_bridgeObjectRelease(0x80000001001D2750LL);
  }

  else
  {
    uint64_t v23 = static os_log_type_t.error.getter(v9);
    os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_10023DFB0,  "Unable to get bundleIdentifier!",  31LL,  2LL,  _swiftEmptyArrayStorage);
  }

void sub_1001194EC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  uint64_t v3 = qword_10023DFB8;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  unsigned __int8 v6 = [(id)objc_opt_self(BTSystemConfiguration) isBuddyComplete];
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v6;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "CloudPushService buddy done callback: %i", v13[0]);
  swift_bridgeObjectRelease(v5);
  swift_beginAccess(v1, v14, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v7);
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    sub_1001190DC();
  }

  swift_beginAccess(v1, v13, 0LL, 0LL);
  uint64_t v11 = (char *)swift_unknownObjectWeakLoadStrong(v1, v10);
  if (v11)
  {
    uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher];
    *(void *)&v11[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher] = 0LL;
  }

void sub_10011963C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C18 != -1) {
    swift_once(&qword_100234C18, sub_10018A920);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFB8,  "Setting up CloudPushService after device first unlocked after boot",  66LL,  2LL,  _swiftEmptyArrayStorage);
  swift_beginAccess(v1, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_1001190DC();
  }

  swift_beginAccess(v1, &v9, 0LL, 0LL);
  uint64_t v7 = (char *)swift_unknownObjectWeakLoadStrong(v1, v6);
  if (v7)
  {
    id v8 = *(void **)&v7[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher];
    *(void *)&v7[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher] = 0LL;
  }

uint64_t sub_100119724(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v14 - 8);
  uint64_t v33 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CAEDC();
  uint64_t v31 = static OS_dispatch_queue.main.getter();
  uint64_t v17 = (void *)swift_allocObject(&unk_10020F3B0, 64LL, 7LL);
  v17[2] = a2;
  v17[3] = a3;
  uint64_t v18 = v30;
  v17[4] = a4;
  v17[5] = v18;
  v17[6] = a6;
  v17[7] = a1;
  aBlock[4] = sub_10011BEBC;
  uint64_t v36 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020F3C8;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v36;
  id v21 = a2;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  id v22 = a1;
  uint64_t v23 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v26 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v11, v24);
  uint64_t v27 = (void *)v31;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v33);
}

uint64_t sub_100119958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushEnvironment + 8);
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  id v11 = objc_allocWithZone(&OBJC_CLASS___APSConnection);
  swift_bridgeObjectRetain(v9);
  id v12 = v10;
  swift_bridgeObjectRetain(a3);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v15 = [v11 initWithEnvironmentName:v13 namedDelegatePort:v14 queue:v12];

  uint64_t v16 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection;
  uint64_t v17 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection);
  *(void *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection) = v15;

  uint64_t v19 = *(void **)(a1 + v16);
  if (v19)
  {
    uint64_t v20 = sub_100098CD8(&qword_100236658);
    uint64_t v21 = swift_allocObject(v20, 48LL, 7LL);
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v21 + 32) = a4;
    *(void *)(v21 + 40) = a5;
    id v22 = v19;
    swift_bridgeObjectRetain(a5);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    [v22 _setEnabledTopics:isa];

    uint64_t v24 = *(void **)(a1 + v16);
    if (v24)
    {
      id v25 = v24;
      NSString v26 = String._bridgeToObjectiveC()();
      [v25 requestTokenForTopic:v26 identifier:0];

      id v18 = *(id *)(a1 + v16);
      if (v18) {
        id v18 = [v18 setDelegate:a1];
      }
    }
  }

  uint64_t v27 = static os_log_type_t.default.getter(v18);
  if (qword_100234C10 != -1) {
    swift_once(&qword_100234C10, sub_10018A8CC);
  }
  return os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFB0,  "Set up APS connection",  21LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_100119BBC(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  uint64_t v4 = swift_allocObject(&unk_10020F158, 24LL, 7LL);
  swift_unknownObjectWeakInit(v4 + 16, v1);
  uint64_t v5 = swift_allocObject(&unk_10020F2E8, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = swift_allocObject(&unk_10020F310, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100113678;
  *(void *)(v6 + 24) = v5;
  v11[4] = sub_1000CA2B4;
  uint64_t v12 = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1000F2CA0;
  v11[3] = &unk_10020F328;
  uint64_t v7 = _Block_copy(v11);
  uint64_t v8 = v12;
  swift_unknownObjectRetain(a1);
  swift_retain(v6);
  uint64_t v9 = v3;
  swift_release(v8);
  dispatch_sync(v9, v7);

  _Block_release(v7);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v6, "", 123LL, 94LL, 31LL, 1LL);
  swift_release(v5);
  uint64_t result = swift_release(v6);
  return result;
}

void sub_100119D1C(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a2 + 16;
    uint64_t v4 = swift_unknownObjectRetain(a1);
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    if (qword_100234C10 != -1) {
      swift_once(&qword_100234C10, sub_10018A8CC);
    }
    uint64_t v6 = qword_10023DFB0;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    v30[0] = a1;
    swift_unknownObjectRetain(a1);
    uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100236928);
    uint64_t v10 = String.init<A>(describing:)(v30, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    unint64_t v13 = sub_10009914C();
    *(void *)(v8 + 64) = v13;
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    id v14 = [a1 cloudContainerIdentifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    *(void *)(v8 + 96) = &type metadata for String;
    *(void *)(v8 + 104) = v13;
    *(void *)(v8 + 72) = v15;
    *(void *)(v8 + 80) = v17;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Add push delegate: %@ using key: %@", 35LL, 2LL, v8);
    swift_bridgeObjectRelease(v8);
    swift_beginAccess(v3, v30, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3, v18);
    if (Strong)
    {
      uint64_t v20 = (char *)Strong;
      id v21 = [a1 cloudContainerIdentifier];
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v24 = v23;

      id v25 = &v20[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates];
      swift_beginAccess(&v20[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates], v29, 33LL, 0LL);
      swift_unknownObjectRetain(a1);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v25);
      uint64_t v28 = *(void *)v25;
      *(void *)id v25 = 0x8000000000000000LL;
      sub_10009DBE0((uint64_t)a1, v22, v24, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = *(void *)v25;
      *(void *)id v25 = v28;
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v27);
      swift_endAccess(v29);
      swift_unknownObjectRelease(a1);
    }

    else
    {
      swift_unknownObjectRelease(a1);
    }
  }

uint64_t sub_100119F68(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  uint64_t v4 = swift_allocObject(&unk_10020F158, 24LL, 7LL);
  swift_unknownObjectWeakInit(v4 + 16, v1);
  uint64_t v5 = swift_allocObject(&unk_10020F270, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = swift_allocObject(&unk_10020F298, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100113704;
  *(void *)(v6 + 24) = v5;
  v11[4] = sub_10009E99C;
  uint64_t v12 = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1000F2CA0;
  v11[3] = &unk_10020F2B0;
  uint64_t v7 = _Block_copy(v11);
  uint64_t v8 = v12;
  swift_unknownObjectRetain(a1);
  swift_retain(v6);
  uint64_t v9 = v3;
  swift_release(v8);
  dispatch_sync(v9, v7);

  _Block_release(v7);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v6, "", 123LL, 105LL, 31LL, 1LL);
  swift_release(v5);
  uint64_t result = swift_release(v6);
  return result;
}

uint64_t sub_10011A0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_100234C10 != -1) {
    swift_once(&qword_100234C10, sub_10018A8CC);
  }
  uint64_t v5 = qword_10023DFB0;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  v22[0] = a1;
  swift_unknownObjectRetain(a1);
  uint64_t v8 = sub_100098CD8(&qword_100236938);
  uint64_t v9 = String.init<A>(describing:)(v22, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10009914C();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Remove push delegate: %@", 24LL, 2LL, v7);
  uint64_t result = swift_bridgeObjectRelease(v7);
  if (a1)
  {
    uint64_t v13 = a2 + 16;
    swift_beginAccess(v13, v22, 0LL, 0LL);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v13, v14);
    if (result)
    {
      uint64_t v15 = (char *)result;
      id v16 = [(id)swift_unknownObjectRetain(a1) cloudContainerIdentifier];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      swift_beginAccess(&v15[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates], v21, 33LL, 0LL);
      uint64_t v20 = sub_10010C648(v17, v19);
      swift_endAccess(v21);

      swift_unknownObjectRelease(a1);
      swift_bridgeObjectRelease(v19);
      return swift_unknownObjectRelease(v20);
    }
  }

  return result;
}

void sub_10011A298(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);
}

void sub_10011A39C(void *a1)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = String._bridgeToObjectiveC()();
  [a1 didReceiveWithToken:isa forTopic:v3 identifier:v4];
}

uint64_t sub_10011A5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  uint64_t v12 = swift_allocObject(&unk_10020F158, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  uint64_t v13 = (void *)swift_allocObject(&unk_10020F180, 40LL, 7LL);
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10011ABF8;
  uint64_t v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  aBlock[3] = &unk_10020F198;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v11;
  swift_retain(v12);
  uint64_t v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  id v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v19 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  uint64_t v20 = v27;
  swift_release(v12);
  return swift_release(v20);
}

void sub_10011A804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    uint64_t v9 = Strong + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates;
    uint64_t v10 = swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates, v25, 0LL, 0LL);
    uint64_t v11 = *(void *)(*(void *)v9 + 16LL);
    uint64_t v12 = static os_log_type_t.default.getter(v10);
    if (v11)
    {
      if (qword_100234C10 != -1) {
        swift_once(&qword_100234C10, sub_10018A8CC);
      }
      uint64_t v13 = qword_10023DFB0;
      uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
      *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
      uint64_t v16 = *(void *)v9;
      uint64_t v17 = *(void *)(v16 + 16);
      *(void *)(v15 + 56) = &type metadata for Int;
      *(void *)(v15 + 64) = &protocol witness table for Int;
      *(void *)(v15 + 32) = v17;
      swift_bridgeObjectRetain(v16);
      uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100236928);
      uint64_t v19 = Dictionary.description.getter(v16, &type metadata for String, v18, &protocol witness table for String);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease(v16);
      *(void *)(v15 + 96) = &type metadata for String;
      *(void *)(v15 + 104) = sub_10009914C();
      *(void *)(v15 + 72) = v19;
      *(void *)(v15 + 80) = v21;
      os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "invokeDelegates[%i] : %@", 24LL, 2LL, v15);
      swift_bridgeObjectRelease(v15);
      swift_unknownObjectWeakInit(v24, v8);
      id v22 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
      uint64_t v23 = sub_1000AD3E8("com.apple.bluetooth.user.services.aps.processPush", 49LL, 2LL);
      sub_10011BB34((uint64_t)v24, a2, a3);

      swift_unknownObjectWeakDestroy(v24);
    }

    else
    {
      if (qword_100234C10 != -1) {
        swift_once(&qword_100234C10, sub_10018A8CC);
      }
      os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_10023DFB0,  "No delegates to invoke",  22LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

uint64_t sub_10011AA50(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = (uint64_t *)(result + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates);
    swift_beginAccess(result + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates, v11, 0LL, 0LL);
    uint64_t v10 = *v9;
    swift_bridgeObjectRetain(v10);

    swift_retain(a3);
    sub_10011AC1C(v10, a2, a3);
    swift_bridgeObjectRelease(v10);
    return swift_release(a3);
  }

  return result;
}

id sub_10011AB04()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudPushService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudPushService()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd16CloudPushService);
}

uint64_t sub_10011ABD0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10011ABF8()
{
}

uint64_t sub_10011AC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011AC14(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10011AC1C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  id v48 = a2;
  uint64_t v49 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  int v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v47 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v50 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  uint64_t v14 = v46;
  if (v11) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v31 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v31 < v47)
    {
      unint64_t v32 = *(void *)(v40 + 8 * v31);
      ++v13;
      if (v32) {
        goto LABEL_22;
      }
      int64_t v13 = v31 + 1;
      if (v31 + 1 >= v47) {
        return swift_release(v50);
      }
      unint64_t v32 = *(void *)(v40 + 8 * v13);
      if (v32) {
        goto LABEL_22;
      }
      int64_t v13 = v31 + 2;
      if (v31 + 2 >= v47) {
        return swift_release(v50);
      }
      unint64_t v32 = *(void *)(v40 + 8 * v13);
      if (v32) {
        goto LABEL_22;
      }
      int64_t v13 = v31 + 3;
      if (v31 + 3 >= v47) {
        return swift_release(v50);
      }
      unint64_t v32 = *(void *)(v40 + 8 * v13);
      if (v32)
      {
LABEL_22:
        unint64_t v11 = (v32 - 1) & v32;
        for (unint64_t i = __clz(__rbit64(v32)) + (v13 << 6); ; unint64_t i = v29 | (v13 << 6))
        {
          uint64_t v34 = (uint64_t *)(*(void *)(v50 + 48) + 16 * i);
          uint64_t v35 = *v34;
          uint64_t v36 = v34[1];
          uint64_t v37 = *(void *)(*(void *)(v50 + 56) + 8 * i);
          swift_bridgeObjectRetain(v36);
          id v38 = [(id)swift_unknownObjectRetain(v37) pushDelegateQueue];
          if (v38)
          {
            uint64_t v15 = v38;
            uint64_t v16 = (void *)swift_allocObject(&unk_10020F220, 56LL, 7LL);
            uint64_t v17 = v49;
            _OWORD v16[2] = v48;
            v16[3] = v17;
            v16[4] = v35;
            v16[5] = v36;
            v16[6] = v37;
            aBlock[4] = sub_10011BDF4;
            uint64_t v55 = v16;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256LL;
            aBlock[2] = sub_1000F2C54;
            aBlock[3] = &unk_10020F238;
            uint64_t v18 = _Block_copy(aBlock);
            unint64_t v51 = v11;
            uint64_t v19 = v18;
            swift_bridgeObjectRetain(v36);
            swift_unknownObjectRetain(v37);
            uint64_t v20 = swift_retain(v17);
            int64_t v52 = v13;
            uint64_t v21 = v41;
            static DispatchQoS.unspecified.getter(v20);
            unint64_t v53 = _swiftEmptyArrayStorage;
            uint64_t v22 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
            uint64_t v24 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
            id v25 = v44;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v23, v24, v14, v22);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v21, v25, v19);
            NSString v26 = v19;
            unint64_t v11 = v51;
            _Block_release(v26);

            (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v14);
            uint64_t v27 = v21;
            int64_t v13 = v52;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v43);
            uint64_t v28 = v55;
            swift_unknownObjectRelease(v37);
            swift_bridgeObjectRelease(v36);
            uint64_t result = swift_release(v28);
            if (!v11) {
              goto LABEL_7;
            }
          }

          else
          {
            v48(v37);
            swift_unknownObjectRelease(v37);
            uint64_t result = swift_bridgeObjectRelease(v36);
            if (!v11) {
              goto LABEL_7;
            }
          }

uint64_t sub_10011B018(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    uint64_t v2 = static os_log_type_t.error.getter(a1);
    if (qword_100234C10 != -1) {
      swift_once(&qword_100234C10, sub_10018A8CC);
    }
    return os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFB0,  "Invalid Public Token",  20LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v6 = sub_1000991CC(a1, a2);
    uint64_t v7 = IsAppleInternalBuild(v6);
    if ((_DWORD)v7)
    {
      uint64_t v8 = static os_log_type_t.default.getter(v7);
      if (qword_100234C10 != -1) {
        swift_once(&qword_100234C10, sub_10018A8CC);
      }
      uint64_t v9 = qword_10023DFB0;
      uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
      *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      Swift::String v12 = Data.base64EncodedString(options:)(0LL);
      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 64) = sub_10009914C();
      *(Swift::String *)(v11 + 32) = v12;
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "didReceivePublicToken: %@", 25LL, 2LL, v11);
      swift_bridgeObjectRelease(v11);
    }

    uint64_t v13 = swift_allocObject(&unk_10020F4A0, 32LL, 7LL);
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v13 + 24) = a2;
    sub_1000991CC(a1, a2);
    sub_10011A5C4((uint64_t)sub_10011BFA4, v13);
    swift_release(v13);
    return sub_1000AC4C0(a1, a2);
  }

uint64_t sub_10011B1E4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    uint64_t v8 = static os_log_type_t.error.getter(a1);
    if (qword_100234C10 != -1) {
      swift_once(&qword_100234C10, sub_10018A8CC);
    }
    return os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_10023DFB0,  "Invalid APS data arguments",  26LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    sub_1000AC4D4(a1, a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v16 = swift_bridgeObjectRetain(a6);
    uint64_t v17 = IsAppleInternalBuild(v16);
    if ((_DWORD)v17)
    {
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      if (qword_100234C10 != -1) {
        swift_once(&qword_100234C10, sub_10018A8CC);
      }
      uint64_t v24 = qword_10023DFB0;
      uint64_t v19 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v20 = swift_allocObject(v19, 152LL, 7LL);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8EB0;
      Swift::String v21 = Data.base64EncodedString(options:)(0LL);
      *(void *)(v20 + 56) = &type metadata for String;
      unint64_t v22 = sub_10009914C();
      *(Swift::String *)(v20 + 32) = v21;
      *(void *)(v20 + 96) = &type metadata for String;
      *(void *)(v20 + 104) = v22;
      *(void *)(v20 + 64) = v22;
      *(void *)(v20 + 72) = a3;
      *(void *)(v20 + 80) = a4;
      *(void *)(v20 + 136) = &type metadata for String;
      *(void *)(v20 + 144) = v22;
      *(void *)(v20 + 112) = a5;
      *(void *)(v20 + 120) = a6;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a6);
      os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v24,  "didReceiveToken: %@, for topic: %@, identifier: %@",  50LL,  2LL,  v20);
      swift_bridgeObjectRelease(v20);
    }

    uint64_t v23 = (void *)swift_allocObject(&unk_10020F478, 64LL, 7LL);
    v23[2] = a1;
    void v23[3] = a2;
    v23[4] = a3;
    v23[5] = a4;
    v23[6] = a5;
    v23[7] = a6;
    sub_1000991CC(a1, a2);
    sub_10011A5C4((uint64_t)sub_10011BF70, (uint64_t)v23);
    swift_release(v23);
    return sub_1000AC4C0(a1, a2);
  }

void sub_10011B428(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    id v12 = a1;
    id v13 = [v12 userInfo];
    if (v13)
    {
      uint64_t v14 = v13;
      id v77 = v12;
      uint64_t v78 = v1;
      uint64_t v70 = v11;
      uint64_t v71 = v8;
      uint64_t v72 = v7;
      id v73 = v6;
      uint64_t v74 = v4;
      uint64_t v75 = v3;
      uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15);
      id v17 =  [(id)objc_opt_self(CKNotification) notificationFromRemoteNotificationDictionary:isa];

      uint64_t v19 = static os_log_type_t.error.getter(v18);
      if (qword_100234C18 != -1) {
        swift_once(&qword_100234C18, sub_10018A920);
      }
      uint64_t v20 = qword_10023DFB8;
      uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
      __int128 v76 = xmmword_1001A5EA0;
      *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      aBlock[0] = v17;
      id v23 = v17;
      uint64_t v24 = sub_100098CD8(&qword_100236940);
      uint64_t v25 = String.init<A>(describing:)(aBlock, v24);
      uint64_t v27 = v26;
      *(void *)(v22 + 56) = &type metadata for String;
      unint64_t v28 = sub_10009914C();
      *(void *)(v22 + 64) = v28;
      *(void *)(v22 + 32) = v25;
      *(void *)(v22 + 40) = v27;
      unint64_t v29 = v23;
      os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "payload received: %@", 20LL, 2LL, v22);
      swift_bridgeObjectRelease(v22);
      if (!v23
        || (id v30 = v23, v31 = CKNotification.subscriptionID.getter(), v33 = v32, v30, !v33))
      {
        swift_bridgeObjectRelease(0LL);
        uint64_t v31 = 0LL;
        uint64_t v33 = 0xE000000000000000LL;
      }

      if (v31 || v33 != 0xE000000000000000LL)
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, 0LL, 0xE000000000000000LL, 0LL) & 1) != 0
          || (uint64_t v36 = (unint64_t *)(v78 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates),
              swift_beginAccess(v78 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates, v82, 0LL, 0LL),
              unint64_t v37 = *v36,
              !*(void *)(v37 + 16)))
        {
          unint64_t v34 = v33;
        }

        else
        {
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v37);
          unint64_t v38 = sub_1000A3A10(v31, v33);
          if ((v39 & 1) != 0)
          {
            uint64_t v40 = *(void **)(*(void *)(v37 + 56) + 8 * v38);
            swift_unknownObjectRetain(v40);
            swift_bridgeObjectRelease(v33);
            uint64_t v41 = swift_bridgeObjectRelease(v37);
            LODWORD(v78) = static os_log_type_t.default.getter(v41);
            if (qword_100234C10 != -1) {
              swift_once(&qword_100234C10, sub_10018A8CC);
            }
            *(void *)&__int128 v76 = qword_10023DFB0;
            uint64_t v42 = swift_allocObject(v21, 112LL, 7LL);
            *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
            *(void *)(v42 + 56) = &type metadata for String;
            *(void *)(v42 + 64) = v28;
            *(void *)(v42 + 32) = v31;
            *(void *)(v42 + 40) = v33;
            aBlock[0] = v17;
            uint64_t v43 = Optional.debugDescription.getter(v24);
            *(void *)(v42 + 96) = &type metadata for String;
            *(void *)(v42 + 104) = v28;
            *(void *)(v42 + 72) = v43;
            *(void *)(v42 + 80) = v44;
            os_log(_:dso:log:_:_:)( v78,  &_mh_execute_header,  v76,  "didReceive: message for container %@",  36LL,  2LL,  v42);
            swift_bridgeObjectRelease(v42);
            id v45 = [v40 pushDelegateQueue];
            uint64_t v46 = v40;
            if (v45)
            {
              int64_t v47 = v45;
              uint64_t v48 = swift_allocObject(&unk_10020F428, 32LL, 7LL);
              uint64_t v49 = v77;
              *(void *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
              *(void *)(v48 + 24) = v49;
              aBlock[4] = sub_10011BF2C;
              uint64_t v81 = v48;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256LL;
              aBlock[2] = sub_1000F2C54;
              aBlock[3] = &unk_10020F440;
              uint64_t v50 = _Block_copy(aBlock);
              id v51 = v49;
              uint64_t v52 = swift_unknownObjectRetain(v40);
              unint64_t v53 = v70;
              static DispatchQoS.unspecified.getter(v52);
              uint64_t v79 = _swiftEmptyArrayStorage;
              uint64_t v54 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              uint64_t v55 = sub_100098CD8((uint64_t *)&unk_100235790);
              uint64_t v56 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
              uint64_t v57 = v29;
              id v58 = v73;
              uint64_t v59 = v55;
              uint64_t v60 = v75;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v59, v56, v75, v54);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v58, v50);
              _Block_release(v50);

              swift_unknownObjectRelease(v46);
              (*(void (**)(char *, uint64_t))(v74 + 8))(v58, v60);
              (*(void (**)(char *, uint64_t))(v71 + 8))(v53, v72);
              swift_release(v81);
              return;
            }

            id v69 = v77;
            [v40 didReceiveWithMessage:v77];
            swift_unknownObjectRelease(v40);
            goto LABEL_25;
          }

          swift_bridgeObjectRelease_n(v33, 2LL);
          unint64_t v34 = v37;
        }
      }

      else
      {
        unint64_t v34 = 0xE000000000000000LL;
      }

      uint64_t v61 = swift_bridgeObjectRelease(v34);
      uint64_t v62 = static os_log_type_t.default.getter(v61);
      if (qword_100234C10 != -1) {
        swift_once(&qword_100234C10, sub_10018A8CC);
      }
      uint64_t v63 = qword_10023DFB0;
      uint64_t v64 = swift_allocObject(v21, 72LL, 7LL);
      *(_OWORD *)(v64 + swift_unknownObjectWeakDestroy(v0 + 16) = v76;
      aBlock[0] = v17;
      uint64_t v65 = Optional.debugDescription.getter(v24);
      *(void *)(v64 + 56) = &type metadata for String;
      *(void *)(v64 + 64) = v28;
      *(void *)(v64 + 32) = v65;
      *(void *)(v64 + 40) = v66;
      os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "didReceive: message: %@", 23LL, 2LL, v64);
      swift_bridgeObjectRelease(v64);
      uint64_t v67 = swift_allocObject(&unk_10020F400, 24LL, 7LL);
      id v68 = v77;
      *(void *)(v67 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
      id v69 = v68;
      sub_10011A5C4((uint64_t)sub_10011BEF0, v67);
      swift_release(v67);
LABEL_25:

      return;
    }

    __break(1u);
  }

  else
  {
    uint64_t v35 = static os_log_type_t.error.getter(v9);
    if (qword_100234C10 != -1) {
      swift_once(&qword_100234C10, sub_10018A8CC);
    }
    os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_10023DFB0,  "Invalid message Token",  21LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t sub_10011BB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  __chkstk_darwin(v11);
  id v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1, v39, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1, v14);
  if (result)
  {
    uint64_t v16 = (void *)result;
    uint64_t v34 = v3;
    id v17 = *(void **)(result + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
    uint64_t v18 = swift_allocObject(&unk_10020F158, 24LL, 7LL);
    uint64_t v33 = v10;
    uint64_t v19 = v18;
    swift_unknownObjectWeakInit(v18 + 16, v16);
    uint64_t v20 = (void *)swift_allocObject(&unk_10020F1D0, 40LL, 7LL);
    v20[2] = v19;
    v20[3] = a2;
    v20[4] = a3;
    aBlock[4] = sub_10011BDB4;
    unint64_t v38 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    aBlock[3] = &unk_10020F1E8;
    uint64_t v21 = _Block_copy(aBlock);
    id v32 = v17;
    swift_retain(v19);
    uint64_t v22 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v22);
    uint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v23 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = v8;
    uint64_t v24 = v23;
    uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v26 = sub_1000C9F38((unint64_t *)&qword_100236EF0, (uint64_t *)&unk_100235790);
    uint64_t v27 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v25, v26, v7, v24);
    unint64_t v28 = v32;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v27, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v7);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
    unint64_t v29 = v38;
    swift_release(v19);
    return swift_release(v29);
  }

  return result;
}

uint64_t sub_10011BDB4()
{
  return sub_10011AA50(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10011BDC0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10011BDF4()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 48));
}

uint64_t sub_10011BE20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011BE34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011BE60()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10011BE70()
{
}

void sub_10011BE78()
{
}

uint64_t sub_10011BE80()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10011BEBC()
{
  return sub_100119958(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10011BECC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_10011BEF0(void *a1)
{
  return [a1 didReceiveWithMessage:*(void *)(v1 + 16)];
}

uint64_t sub_10011BF00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_10011BF2C()
{
  return [*(id *)(v0 + 16) didReceiveWithMessage:*(void *)(v0 + 24)];
}

uint64_t sub_10011BF3C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10011BF70(void *a1)
{
}

uint64_t sub_10011BF80()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10011BFA4(void *a1)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 didReceiveWithPublicToken:isa];
}

uint64_t sub_10011C02C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = &type metadata for AudioAccessoryFeatures;
  unint64_t v6 = sub_10009E740();
  unint64_t v49 = v6;
  LOBYTE(v47._countAndFlagsBits) = 0;
  char v7 = isFeatureEnabled(_:)(&v47);
  uint64_t result = sub_10009A498(&v47);
  if ((v7 & 1) != 0)
  {
    v9._object = (void *)0x80000001001CB040LL;
    v9._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v10._object = (void *)0x80000001001CB070LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v11._object = (void *)0x80000001001D2BC0LL;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001001CB0D0LL;
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    uint64_t v14 = static os_log_type_t.default.getter(v13);
    if (qword_100234C38 != -1) {
      swift_once(&qword_100234C38, sub_10018AAE4);
    }
    uint64_t v15 = (uint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_10023DFD8,  "-------------AAProxCards Records-------------",  45LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v16 = sub_1000AE6C8();
    uint64_t v48 = &type metadata for AudioAccessoryFeatures;
    unint64_t v49 = v6;
    LOBYTE(v47._countAndFlagsBits) = 0;
    uint64_t v17 = isFeatureEnabled(_:)(&v47);
    sub_10009A498(&v47);
    if ((v17 & 1) == 0) {
      goto LABEL_11;
    }
    id v18 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if (!(_DWORD)v18)
    {
      uint64_t v17 = static os_log_type_t.error.getter(v18);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
      goto LABEL_11;
    }

    uint64_t v17 = sub_10013A76C();
    if (qword_100234B40 != -1) {
      goto LABEL_26;
    }
    while (1)
    {
      uint64_t v19 = sub_100098D58(v2, (uint64_t)qword_10023DCE0);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
      uint64_t v15 = sub_100138AE8((uint64_t)v5);
      swift_release(v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_11:
      swift_release(v16);
      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v15);
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(v15);
        if (!v20) {
          return swift_bridgeObjectRelease(v15);
        }
      }

      else
      {
        uint64_t v20 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v20) {
          return swift_bridgeObjectRelease(v15);
        }
      }

      if (v20 >= 1) {
        break;
      }
      __break(1u);
LABEL_26:
      swift_once(&qword_100234B40, sub_10009F940);
    }

    uint64_t v21 = 0LL;
    unint64_t v45 = v15 & 0xC000000000000001LL;
    __int128 v44 = xmmword_1001A5EA0;
    uint64_t v46 = a1;
    uint64_t v43 = v15;
    do
    {
      if (v45) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v15);
      }
      else {
        id v22 = *(id *)(v15 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      ++v21;
      uint64_t v24 = static os_log_type_t.default.getter(v22);
      uint64_t v25 = qword_10023DFD8;
      uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
      *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
      id v28 = v23;
      id v29 = [v28 description];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v32 = v31;

      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10009914C();
      *(void *)(v27 + 32) = v30;
      *(void *)(v27 + 40) = v32;
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@", 2LL, 2LL, v27);
      swift_bridgeObjectRelease(v27);
      id v33 = v28;
      id v34 = [v33 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      unint64_t v37 = v36;

      v47._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v47._object = (void *)0xE700000000000000LL;
      v38._uint64_t countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v37);
      object = v47._object;
      swift_bridgeObjectRetain(v47._object);
      v40._uint64_t countAndFlagsBits = 10LL;
      v40._object = (void *)0xE100000000000000LL;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(object);
      uint64_t v41 = v47._object;
      String.append(_:)(v47);

      swift_bridgeObjectRelease(v41);
      uint64_t v15 = v43;
    }

    while (v20 != v21);
    return swift_bridgeObjectRelease(v15);
  }

  return result;
}

void sub_10011C4EC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    Swift::String v11 = (void *)Strong;
    uint64_t v12 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v13 = qword_10023DFC0;
    uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10009914C();
    *(void *)(v15 + 32) = a4;
    *(void *)(v15 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "fetchAAProxCardsRecord: %@", 26LL, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    v18[3] = &type metadata for AudioAccessoryFeatures;
    v18[4] = sub_10009E740();
    LOBYTE(v18[0]) = 0;
    char v16 = isFeatureEnabled(_:)(v18);
    sub_10009A498(v18);
    if ((v16 & 1) != 0) {
      id v17 = sub_10011D208(a4, a5);
    }
    else {
      id v17 = 0LL;
    }
    ((void (*)(id))a2)(v17);
  }

  else
  {
    a2();
  }

uint64_t sub_10011C684(uint64_t a1, uint64_t a2)
{
  id v17 = &type metadata for AudioAccessoryFeatures;
  unint64_t v18 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  char v5 = isFeatureEnabled(_:)(aBlock);
  sub_10009A498(aBlock);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v20 = 0LL;
  unint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  char v7 = (void *)swift_allocObject(&unk_10020F568, 48LL, 7LL);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = &v20;
  _OWORD v7[5] = v2;
  uint64_t v8 = swift_allocObject(&unk_10020F590, 32LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10011E104;
  *(void *)(v8 + 24) = v7;
  unint64_t v18 = (unint64_t)sub_10009E99C;
  uint64_t v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2CA0;
  id v17 = (ValueMetadata *)&unk_10020F5A8;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = v19;
  Swift::String v11 = v6;
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = v2;
  swift_retain(v8);
  swift_release(v10);
  dispatch_sync(v11, v9);

  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 131LL, 36LL, 27LL, 1LL);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v15 = v20;
    swift_release(v7);
    return v15;
  }

  __break(1u);
  return result;
}

void sub_10011C820(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v7 = qword_10023DFC0;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10009914C();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "fetchAAProxCardsRecordSync: %@", 30LL, 2LL, v9);
  swift_bridgeObjectRelease(v9);
  v13[3] = &type metadata for AudioAccessoryFeatures;
  v13[4] = sub_10009E740();
  LOBYTE(v13[0]) = 0;
  char v10 = isFeatureEnabled(_:)(v13);
  sub_10009A498(v13);
  if ((v10 & 1) != 0) {
    id v11 = sub_10011D208(a1, a2);
  }
  else {
    id v11 = 0LL;
  }
  uint64_t v12 = *a3;
  *a3 = v11;
}

uint64_t sub_10011C9C8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v83 = a5;
  uint64_t v75 = type metadata accessor for URL(0LL);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  id v73 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v86, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v12);
  if (!Strong)
  {
    unint64_t v68 = sub_10009E7C0();
    uint64_t v69 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v68, 0LL, 0LL);
    *uint64_t v70 = 0;
    a2();
    return swift_errorRelease(v69);
  }

  id v77 = a2;
  uint64_t v78 = a3;
  uint64_t v72 = (void *)Strong;
  uint64_t v14 = Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap;
  swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_secondaryDeviceStoreMap, v85, 0LL, 0LL);
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *(void *)(*(void *)v14 + 64LL);
  uint64_t v80 = *(void *)v14 + 64LL;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v81 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v82 = v15;
  swift_bridgeObjectRetain(v15);
  int64_t v20 = 0LL;
  __int128 v79 = xmmword_1001A5EA0;
  uint64_t v71 = "ord with address: %@";
  uint64_t v76 = 0x80000001001D2A80LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_25;
    }

    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      goto LABEL_79;
    }
    if (v23 >= v81) {
      break;
    }
    unint64_t v24 = *(void *)(v80 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v81) {
        break;
      }
      unint64_t v24 = *(void *)(v80 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v81) {
          break;
        }
        unint64_t v24 = *(void *)(v80 + 8 * v20);
        if (!v24)
        {
          int64_t v20 = v23 + 3;
          if (v23 + 3 >= v81) {
            break;
          }
          unint64_t v24 = *(void *)(v80 + 8 * v20);
          if (!v24)
          {
            int64_t v25 = v23 + 4;
            if (v25 >= v81) {
              break;
            }
            unint64_t v24 = *(void *)(v80 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v20 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_81;
                }
                if (v20 >= v81) {
                  goto LABEL_75;
                }
                unint64_t v24 = *(void *)(v80 + 8 * v20);
                ++v25;
                if (v24) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v20 = v25;
          }
        }
      }
    }

id sub_10011D208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000ADDDC(a1, a2);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  unint64_t v37 = &type metadata for AudioAccessoryFeatures;
  unint64_t v10 = sub_10009E740();
  unint64_t v38 = v10;
  LOBYTE(v36[0]) = 0;
  char v11 = isFeatureEnabled(_:)(v36);
  uint64_t v12 = sub_10009A498(v36);
  if ((v11 & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t v37 = &type metadata for AudioAccessoryFeatures;
  unint64_t v38 = v10;
  LOBYTE(v36[0]) = 0;
  char v13 = isFeatureEnabled(_:)(v36);
  sub_10009A498(v36);
  if ((v13 & 1) != 0)
  {
    id v14 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v14)
    {
      uint64_t v15 = sub_10013A76C();
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      uint64_t v16 = sub_100098D58(v4, (uint64_t)qword_10023DCE0);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
      uint64_t v17 = (void *)sub_100138AE8((uint64_t)v7);
      swift_release(v15);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    else
    {
      uint64_t v18 = static os_log_type_t.error.getter(v14);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v17 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v19 = sub_10011D9A4((uint64_t)v17, a1, a2);
  swift_bridgeObjectRelease(v17);
  uint64_t v12 = swift_bridgeObjectRelease(a2);
  if (!v19)
  {
LABEL_16:
    uint64_t v30 = static os_log_type_t.default.getter(v12);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v31 = qword_10023DFC0;
    uint64_t v32 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
    *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_10009914C();
    *(void *)(v33 + 32) = a1;
    *(void *)(v33 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "AAProxCardsRecord not found for owner: - %@", 43LL, 2LL, v33);
    swift_release(v9);
    swift_bridgeObjectRelease(v33);
    return 0LL;
  }

  uint64_t v20 = static os_log_type_t.default.getter(v12);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v21 = qword_10023DFC0;
  uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v24 = v19;
  id v25 = [v24 description];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_10009914C();
  *(void *)(v23 + 32) = v26;
  *(void *)(v23 + 40) = v28;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Found AAProxCardsRecord: - %@", 29LL, 2LL, v23);
  swift_bridgeObjectRelease(v23);
  id v29 = sub_10011D5EC();
  swift_release(v9);

  return v29;
}

id sub_10011D5EC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
  id v2 = objc_allocWithZone(&OBJC_CLASS___AAProxCardsInfo);
  swift_bridgeObjectRetain(v1);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  id v4 = [v2 initWithBluetoothAddress:v3];

  uint64_t v5 = (void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions, v37, 0LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v5 + 16LL);
  id v8 = v4;
  if (v7)
  {
    swift_bridgeObjectRetain(v6);
    unint64_t v9 = sub_1000A3A10(0x62756F4465736163LL, 0xED0000706154656CLL);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * v9);
      swift_bridgeObjectRelease(v6);
      if (v11) {
        [v8 setCaseDoubleTapVersion:v11];
      }
    }

    else
    {
      swift_bridgeObjectRelease(v6);
    }
  }

  uint64_t v12 = *v5;
  if (*(void *)(*v5 + 16LL))
  {
    swift_bridgeObjectRetain(*v5);
    unint64_t v13 = sub_1000A3A10(0x7473654764616568LL, 0xEC00000073657275LL);
    if ((v14 & 1) != 0)
    {
      uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease(v12);
      if (v15) {
        [v8 setHeadGesturesVersion:v15];
      }
    }

    else
    {
      swift_bridgeObjectRelease(v12);
    }
  }

  uint64_t v16 = *v5;
  if (*(void *)(*v5 + 16LL))
  {
    swift_bridgeObjectRetain(*v5);
    unint64_t v17 = sub_1000A3A10(0x41676E6972616568LL, 0xED00007473697373LL);
    if ((v18 & 1) != 0)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRelease(v16);
      if (v19) {
        [v8 setHearingAssistVersion:v19];
      }
    }

    else
    {
      swift_bridgeObjectRelease(v16);
    }
  }

  uint64_t v20 = *v5;
  if (*(void *)(*v5 + 16LL))
  {
    swift_bridgeObjectRetain(*v5);
    unint64_t v21 = sub_1000A3A10(0x54676E6972616568LL, 0xEB00000000747365LL);
    if ((v22 & 1) != 0)
    {
      uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
      swift_bridgeObjectRelease(v20);
      if (v23) {
        [v8 setHearingTestVersion:v23];
      }
    }

    else
    {
      swift_bridgeObjectRelease(v20);
    }
  }

  uint64_t v24 = *v5;
  if (*(void *)(*v5 + 16LL))
  {
    swift_bridgeObjectRetain(*v5);
    unint64_t v25 = sub_1000A3A10(0x7461527472616568LL, 0xE900000000000065LL);
    if ((v26 & 1) != 0)
    {
      uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
      swift_bridgeObjectRelease(v24);
      if (v27) {
        [v8 setHeartRateVersion:v27];
      }
    }

    else
    {
      swift_bridgeObjectRelease(v24);
    }
  }

  uint64_t v28 = *v5;
  if (*(void *)(*v5 + 16LL))
  {
    swift_bridgeObjectRetain(*v5);
    unint64_t v29 = sub_1000A3A10(0x6175516563696F76LL, 0xEC0000007974696CLL);
    if ((v30 & 1) != 0)
    {
      uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
      swift_bridgeObjectRelease(v28);
      if (v31) {
        [v8 setVoiceQualityVersion:v31];
      }
    }

    else
    {
      swift_bridgeObjectRelease(v28);
    }
  }

  uint64_t v32 = *v5;
  if (*(void *)(*v5 + 16LL))
  {
    swift_bridgeObjectRetain(*v5);
    unint64_t v33 = sub_1000A3A10(0x77654E7374616877LL, 0xE800000000000000LL);
    if ((v34 & 1) == 0)
    {

      swift_bridgeObjectRelease(v32);
      return v8;
    }

    uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
    swift_bridgeObjectRelease(v32);
    if (v35) {
      [v8 setWhatsNewVersion:v35];
    }
  }

  return v8;
}

void *sub_10011D9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001LL) != 0
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = &v8[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      uint64_t v12 = *(void *)&v8[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      uint64_t v13 = *((void *)v11 + 1);
      BOOL v14 = *(void *)v11 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_17:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_10011DAE4(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_10020F5E0, 24LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  unint64_t v33 = &type metadata for AudioAccessoryFeatures;
  unint64_t v34 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  _Block_copy(a4);
  char v15 = isFeatureEnabled(_:)(aBlock);
  sub_10009A498(aBlock);
  if ((v15 & 1) != 0)
  {
    uint64_t v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v17 = swift_allocObject(&unk_10020F4F0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    char v18 = (void *)swift_allocObject(&unk_10020F608, 56LL, 7LL);
    v18[2] = v17;
    v18[3] = sub_10009E9A4;
    v18[4] = v14;
    void v18[5] = a1;
    v18[6] = a2;
    unint64_t v34 = (unint64_t)sub_10011E124;
    uint64_t v35 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    unint64_t v33 = (ValueMetadata *)&unk_10020F620;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    uint64_t v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v31 = _swiftEmptyArrayStorage;
    unint64_t v22 = sub_10009E87C();
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
    unint64_t v24 = sub_10009E8C4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
    unint64_t v25 = v35;
    swift_release(v14);
    swift_release(v17);
    uint64_t v26 = (uint64_t)v25;
  }

  else
  {
    a4[2](a4, 0LL);
    uint64_t v26 = v14;
  }

  return swift_release(v26);
}

uint64_t sub_10011DD88(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_10020F4C8, 24LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  unint64_t v37 = &type metadata for AudioAccessoryFeatures;
  unint64_t v38 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  _Block_copy(a4);
  char v15 = isFeatureEnabled(_:)(aBlock);
  sub_10009A498(aBlock);
  if ((v15 & 1) != 0)
  {
    uint64_t v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v17 = swift_allocObject(&unk_10020F4F0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    char v18 = (void *)swift_allocObject(&unk_10020F518, 56LL, 7LL);
    v18[2] = v17;
    v18[3] = sub_10009E828;
    v18[4] = v14;
    void v18[5] = a1;
    v18[6] = a2;
    unint64_t v38 = (unint64_t)sub_10011E0B4;
    uint64_t v39 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    unint64_t v37 = (ValueMetadata *)&unk_10020F530;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    uint64_t v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v35 = _swiftEmptyArrayStorage;
    unint64_t v22 = sub_10009E87C();
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
    unint64_t v24 = sub_10009E8C4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
    unint64_t v25 = v39;
    swift_release(v14);
    swift_release(v17);
    uint64_t v26 = (uint64_t)v25;
  }

  else
  {
    unint64_t v27 = sub_10009E7C0();
    uint64_t v28 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v27, 0LL, 0LL);
    *uint64_t v29 = 4;
    uint64_t v30 = (void *)_convertErrorToNSError(_:)(v28);
    ((void (**)(void, void *))a4)[2](a4, v30);

    swift_errorRelease(v28);
    uint64_t v26 = v14;
  }

  return swift_release(v26);
}

uint64_t sub_10011E068()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10011E08C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10011E0B4()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_10011C9C8);
}

uint64_t sub_10011E0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011E0D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10011E0D8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10011E104()
{
}

uint64_t sub_10011E110()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011E124()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_10011C4EC);
}

void sub_10011E144(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10011E190(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6._object = (void *)0x80000001001CB040LL;
  v6._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v7._object = (void *)0x80000001001CB070LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000031LL;
  v8._object = (void *)0x80000001001D2DA0LL;
  String.append(_:)(v8);
  v9._object = (void *)0x80000001001CB0D0LL;
  v9._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  uint64_t v43 = a1;
  String.append(_:)(v9);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  if (qword_100234C38 != -1) {
    swift_once(&qword_100234C38, sub_10018AAE4);
  }
  os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_10023DFD8,  "-------------HMDevice Cloud Records-------------",  48LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v12 = sub_1000AE6C8();
  id v13 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if (!(_DWORD)v13)
  {
    uint64_t v14 = static os_log_type_t.error.getter(v13);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v16 = (uint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_9;
  }

  uint64_t v14 = sub_10013A76C();
  if (qword_100234BC0 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v15 = sub_100098D58(v2, (uint64_t)qword_10023DE08);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
    uint64_t v16 = sub_100139300((uint64_t)v5);
    swift_release(v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_9:
    swift_release(v12);
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0) {
        uint64_t v14 = v16;
      }
      else {
        uint64_t v14 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v16);
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease(v16);
      if (!v2) {
        return swift_bridgeObjectRelease(v16);
      }
    }

    else
    {
      uint64_t v2 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (!v2) {
        return swift_bridgeObjectRelease(v16);
      }
    }

    if (v2 >= 1) {
      break;
    }
    __break(1u);
LABEL_23:
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }

  uint64_t v17 = 0LL;
  unint64_t v42 = v16 & 0xC000000000000001LL;
  __int128 v41 = xmmword_1001A5EA0;
  uint64_t v40 = v16;
  do
  {
    if (v42) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v16);
    }
    else {
      id v18 = *(id *)(v16 + 8 * v17 + 32);
    }
    uint64_t v19 = v18;
    ++v17;
    uint64_t v20 = static os_log_type_t.default.getter(v18);
    uint64_t v21 = qword_10023DFD8;
    uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v41;
    id v24 = v19;
    id v25 = [v24 description];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10009914C();
    *(void *)(v23 + 32) = v26;
    *(void *)(v23 + 40) = v28;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "%@", 2LL, 2LL, v23);
    swift_bridgeObjectRelease(v23);
    id v29 = v24;
    id v30 = [v29 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v33 = v32;

    v44._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v44._object = (void *)0xE700000000000000LL;
    v34._uint64_t countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v33);
    object = v44._object;
    swift_bridgeObjectRetain(v44._object);
    v36._uint64_t countAndFlagsBits = 10LL;
    v36._object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(object);
    unint64_t v37 = v44._object;
    String.append(_:)(v44);

    swift_bridgeObjectRelease(v37);
    uint64_t v16 = v40;
  }

  while (v2 != v17);
  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_10011E5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10011EE70(a1, a2, a3, a4, (uint64_t)&unk_10020F810, (uint64_t)sub_1001202AC, (uint64_t)&unk_10020F828);
}

void sub_10011E618(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    uint64_t v12 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v13 = qword_10023DFC0;
    uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10009914C();
    *(void *)(v15 + 32) = a4;
    *(void *)(v15 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "fetchHMDeviceCloudRecord: %@", 28LL, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    id v16 = sub_10011E768(a4, a5);
    a2();
  }

  else
  {
    a2();
  }

id sub_10011E768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000AE6C8();
  id v9 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v9)
  {
    uint64_t v10 = sub_10013A76C();
    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    uint64_t v11 = sub_100098D58(v4, (uint64_t)qword_10023DE08);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
    uint64_t v12 = (void *)sub_100139300((uint64_t)v7);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(v9);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v12 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
  }

  swift_bridgeObjectRetain(a2);
  uint64_t v14 = sub_100120168((uint64_t)v12, a1, a2);
  swift_release(v8);
  swift_bridgeObjectRelease(v12);
  uint64_t v15 = swift_bridgeObjectRelease(a2);
  if (v14)
  {
    uint64_t v16 = static os_log_type_t.default.getter(v15);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v17 = qword_10023DFC0;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v20 = v14;
    id v21 = [v20 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v22;
    *(void *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Found HMDeviceCloudRecord: %@", 29LL, 2LL, v19);
    swift_bridgeObjectRelease(v19);
    id v25 = [v20 hmDeviceCloudRecordInfo];
  }

  else
  {
    uint64_t v26 = static os_log_type_t.debug.getter(v15);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v27 = qword_10023DFC0;
    uint64_t v28 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_10009914C();
    *(void *)(v29 + 32) = a1;
    *(void *)(v29 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "HMDeviceCloudRecord not found for  - %@", 39LL, 2LL, v29);
    swift_bridgeObjectRelease(v29);
    return 0LL;
  }

  return v25;
}

uint64_t sub_10011EB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0LL;
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v6 = (void *)swift_allocObject(&unk_10020F770, 48LL, 7LL);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v17;
  v6[5] = v2;
  uint64_t v7 = swift_allocObject(&unk_10020F798, 32LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012014C;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_10009E99C;
  uint64_t v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2CA0;
  void aBlock[3] = &unk_10020F7B0;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v16;
  uint64_t v10 = v5;
  swift_bridgeObjectRetain(a2);
  uint64_t v11 = v2;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 134LL, 28LL, 27LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = v17;
    swift_release(v6);
    return v14;
  }

  return result;
}

void sub_10011ECF0(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v7 = qword_10023DFC0;
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10009914C();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "fetchHMDeviceCloudRecordSync: %@", 32LL, 2LL, v9);
  swift_bridgeObjectRelease(v9);
  id v10 = sub_10011E768(a1, a2);
  uint64_t v11 = *a3;
  *a3 = v10;
}

uint64_t sub_10011EE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10011EE70(a1, a2, a3, a4, (uint64_t)&unk_10020F720, (uint64_t)sub_100120114, (uint64_t)&unk_10020F738);
}

uint64_t sub_10011EE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v31 = a1;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v15 - 8);
  uint64_t v35 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void **)(v7 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v19 = swift_allocObject(&unk_10020F680, 24LL, 7LL);
  swift_unknownObjectWeakInit(v19 + 16, v7);
  id v20 = (void *)swift_allocObject(a5, 56LL, 7LL);
  v20[2] = v19;
  v20[3] = a3;
  uint64_t v21 = v31;
  v20[4] = a4;
  v20[5] = v21;
  v20[6] = a2;
  aBlock[4] = v32;
  uint64_t v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = v33;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v18;
  swift_retain(v19);
  swift_retain(a4);
  uint64_t v24 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v24);
  unint64_t v37 = _swiftEmptyArrayStorage;
  unint64_t v25 = sub_10009E87C();
  uint64_t v26 = sub_100098CD8((uint64_t *)&unk_100235790);
  unint64_t v27 = sub_10009E8C4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v12, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  uint64_t v28 = v39;
  swift_release(v19);
  return swift_release(v28);
}

uint64_t sub_10011F098(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    uint64_t v12 = (void *)Strong;
    uint64_t v13 = static os_log_type_t.default.getter(Strong);
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v14 = qword_10023DFC0;
    uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10009914C();
    *(void *)(v16 + 32) = a4;
    *(void *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "CloudSync: remove HMDeviceCloudRecord with BT Address: %@",  57LL,  2LL,  v16);
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = sub_1000AE6C8();
    sub_10014A464(a4, a5, 0xD000000000000013LL, 0x80000001001CB4E0LL, a2, a3);

    return swift_release(v17);
  }

  else
  {
    unint64_t v19 = sub_10009E7C0();
    uint64_t v20 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v19, 0LL, 0LL);
    *uint64_t v21 = 0;
    a2();
    return swift_errorRelease(v20);
  }

uint64_t sub_10011F2E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void **)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v15 = swift_allocObject(&unk_10020F680, 24LL, 7LL);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  uint64_t v16 = (void *)swift_allocObject(&unk_10020F6A8, 48LL, 7LL);
  _OWORD v16[2] = v15;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a1;
  aBlock[4] = sub_1001200EC;
  uint64_t v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_10020F6C0;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain(v15);
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(a1);
  unint64_t v27 = _swiftEmptyArrayStorage;
  unint64_t v19 = sub_10009E87C();
  uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100235790);
  unint64_t v21 = sub_10009E8C4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v25);
  uint64_t v22 = v29;
  swift_release(v15);
  return swift_release(v22);
}

uint64_t sub_10011F504(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v33, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    id v14 = a4;
    UUID.init()(v14);
    id v15 = objc_allocWithZone((Class)type metadata accessor for HMDeviceCloudRecord(0LL));
    uint64_t v20 = (char *)sub_1000E0444((uint64_t)v10, v14);
    unsigned int v21 = static os_log_type_t.default.getter(v20);
    unsigned int v32 = v21;
    if (qword_100234C20 != -1) {
      swift_once(&qword_100234C20, sub_10018A978);
    }
    uint64_t v22 = qword_10023DFC0;
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v25 = v14;
    id v26 = [v25 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v29 = v28;

    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10009914C();
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v29;
    os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  v22,  "CloudSync: update HMDeviceCloudRecordInfo: %@",  45LL,  2LL,  v24);
    swift_bridgeObjectRelease(v24);
    uint64_t v30 = sub_1000AE6C8();
    sub_100154AA0(v20, (void (*)(void))a2, a3);

    return swift_release(v30);
  }

  else
  {
    unint64_t v16 = sub_10009E7C0();
    uint64_t v17 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v16, 0LL, 0LL);
    *id v18 = 0;
    a2();
    return swift_errorRelease(v17);
  }

id sub_10011F7D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v42 - v6;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v43 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8);
  id v15 = objc_allocWithZone(&OBJC_CLASS___HMDeviceCloudRecordInfo);
  swift_bridgeObjectRetain(v14);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  id v17 = [v15 initWithBluetoothAddress:v16];

  [v17 setHaRegionStatus:*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus)];
  [v17 setHpRegionStatus:*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus)];
  [v17 setMediaAssistEnabled:*(char *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled)];
  [v17 setPmeMediaEnabled:*(char *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled)];
  [v17 setPmeVoiceEnabled:*(char *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled)];
  [v17 setSwipeGainEnabled:*(char *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled)];
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) == 0)
  {
    id v18 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft)];
    [v17 setBottomMicFaultCountLeft:v18];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) == 0)
  {
    id v19 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight)];
    [v17 setBottomMicFaultCountRight:v19];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) == 0)
  {
    id v20 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount)];
    [v17 setDiagnosticMeasurementsCount:v20];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) == 0)
  {
    id v21 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft)];
    [v17 setFreqAccuracyFaultCountLeft:v21];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) == 0)
  {
    id v22 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight)];
    [v17 setFreqAccuracyFaultCountRight:v22];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) == 0)
  {
    id v23 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft)];
    [v17 setFrontVentFaultCountLeft:v23];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) == 0)
  {
    id v24 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight)];
    [v17 setFrontVentFaultCountRight:v24];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4) & 1) == 0)
  {
    id v25 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft)];
    [v17 setInnerMicFaultCountLeft:v25];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) == 0)
  {
    id v26 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight)];
    [v17 setInnerMicFaultCountRight:v26];
  }

  uint64_t v27 = v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
  swift_beginAccess( v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft,  v45,  0LL,  0LL);
  sub_1000E6164(v27, (uint64_t)v7);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v28(v7, 1LL, v8) == 1)
  {
    sub_1000AC480((uint64_t)v7);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v7, v8);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v17 setLatestDiagnosticTimestampLeft:isa];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v30 = v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
  swift_beginAccess( v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight,  v44,  0LL,  0LL);
  sub_1000E6164(v30, (uint64_t)v4);
  if (v28(v4, 1LL, v8) == 1)
  {
    sub_1000AC480((uint64_t)v4);
  }

  else
  {
    uint64_t v31 = v43;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v43, v4, v8);
    Class v32 = Date._bridgeToObjectiveC()().super.isa;
    [v17 setLatestDiagnosticTimestampRight:v32];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v8);
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) == 0)
  {
    id v33 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft)];
    [v17 setRearVentFaultCountLeft:v33];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4) & 1) == 0)
  {
    id v34 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight)];
    [v17 setRearVentFaultCountRight:v34];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) == 0)
  {
    id v35 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft)];
    [v17 setSpeakerFaultCountLeft:v35];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) == 0)
  {
    id v36 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight)];
    [v17 setSpeakerFaultCountRight:v36];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) == 0)
  {
    id v37 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft)];
    [v17 setTopMicFaultCountLeft:v37];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) == 0)
  {
    id v38 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight)];
    [v17 setTopMicFaultCountRight:v38];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4) & 1) == 0)
  {
    id v39 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft)];
    [v17 setTotalHarmonicDistortionFaultCountLeft:v39];
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight + 4) & 1) == 0)
  {
    id v40 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:*(unsigned int *)(v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight)];
    [v17 setTotalHarmonicDistortionFaultCountRight:v40];
  }

  return v17;
}

uint64_t sub_100120070()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100120094()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001200B8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001200EC()
{
  return sub_10011F504(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1001200F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100120108(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100120114()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_10011F098);
}

uint64_t sub_100120120()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10012014C()
{
}

uint64_t sub_100120158()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100120168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      uint64_t v8 = (a1 & 0xC000000000000001LL) != 0
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = &v8[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
      uint64_t v12 = *(void *)&v8[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
      uint64_t v13 = *((void *)v11 + 1);
      BOOL v14 = *(void *)v11 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_17:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_1001202AC()
{
  return sub_10009E9F8((uint64_t (*)(void, void, void, void, void))sub_10011E618);
}

id DefaultsObserver.__allocating_init(keys:defaults:notificationBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys] = a1;
  *(void *)&v9[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults] = a2;
  uint64_t v10 = &v9[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify];
  *(void *)uint64_t v10 = a3;
  *((void *)v10 + 1) = a4;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, "init");
}

id DefaultsObserver.init(keys:defaults:notificationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys] = a1;
  *(void *)&v4[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults] = a2;
  uint64_t v5 = &v4[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify];
  *(void *)uint64_t v5 = a3;
  *((void *)v5 + 1) = a4;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for DefaultsObserver();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t type metadata accessor for DefaultsObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd16DefaultsObserver);
}

id DefaultsObserver.__deallocating_deinit()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults];
    swift_bridgeObjectRetain(*(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys]);
    uint64_t v4 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      [v3 removeObserver:v0 forKeyPath:v6 context:0];

      v4 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for DefaultsObserver();
  return objc_msgSendSuper2(&v8, "dealloc");
}

Swift::Void __swiftcall DefaultsObserver.start()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults);
    swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys));
    uint64_t v4 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      [v3 addObserver:v0 forKeyPath:v6 options:0 context:0];

      v4 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

Swift::Void __swiftcall DefaultsObserver.stop()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults);
    swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys));
    uint64_t v4 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      [v3 removeObserver:v0 forKeyPath:v6 context:0];

      v4 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

uint64_t DefaultsObserver.observeValue(forKeyPath:of:change:context:)(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = result;
    NSString v6 = *(void (**)(uint64_t, uint64_t))(v2 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify);
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify + 8);
    swift_retain(v5);
    v6(v4, a2);
    return swift_release(v5);
  }

  return result;
}

void DefaultsObserver.init()()
{
}

unint64_t sub_1001209E4()
{
  unint64_t result = qword_100235030;
  if (!qword_100235030)
  {
    type metadata accessor for NSKeyValueChangeKey(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001A67AC, v1);
    atomic_store(result, (unint64_t *)&qword_100235030);
  }

  return result;
}

uint64_t sub_100120A2C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100120A50()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t DarwinNotificationHelper.__allocating_init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 24LL, 7LL);
  DarwinNotificationHelper.init(notificationHandlers:)(a1);
  return v3;
}

uint64_t DarwinNotificationHelper.init(notificationHandlers:)(uint64_t a1)
{
  id v2 = v1;
  id v36 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v36)
  {
    v1[2] = a1;
    uint64_t v4 = qword_100234B68;
    swift_bridgeObjectRetain(a1);
    if (v4 != -1) {
LABEL_30:
    }
      swift_once(&qword_100234B68, sub_1000CA624);
    uint64_t v5 = (void *)(static DarwinNotificationManager.shared
                  + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess( static DarwinNotificationManager.shared + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers,  v37,  33LL,  0LL);
    uint64_t v6 = swift_retain(v2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    unint64_t v8 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v7 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v8 >= v7 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1LL);
    }
    uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v2);
    specialized Array._endMutation()(v9);
    uint64_t v10 = swift_endAccess(v37);
    uint64_t v11 = static os_log_type_t.default.getter(v10);
    if (qword_100234C08 != -1) {
      swift_once(&qword_100234C08, sub_10018A87C);
    }
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_10023DFA8,  "Setup darwin callback handlers",  30LL,  2LL,  _swiftEmptyArrayStorage);
    int64_t v12 = 0LL;
    uint64_t v33 = a1 + 64;
    uint64_t v13 = 1LL << *(_BYTE *)(a1 + 32);
    uint64_t v14 = -1LL;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    unint64_t v15 = v14 & *(void *)(a1 + 64);
    int64_t v34 = (unint64_t)(v13 + 63) >> 6;
    id v35 = v2;
    while (1)
    {
      if (v15)
      {
        unint64_t v16 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v17 = v16 | (v12 << 6);
      }

      else
      {
        int64_t v28 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }

        if (v28 >= v34) {
          goto LABEL_27;
        }
        unint64_t v29 = *(void *)(v33 + 8 * v28);
        ++v12;
        if (!v29)
        {
          int64_t v12 = v28 + 1;
          if (v28 + 1 >= v34) {
            goto LABEL_27;
          }
          unint64_t v29 = *(void *)(v33 + 8 * v12);
          if (!v29)
          {
            int64_t v12 = v28 + 2;
            if (v28 + 2 >= v34) {
              goto LABEL_27;
            }
            unint64_t v29 = *(void *)(v33 + 8 * v12);
            if (!v29)
            {
              int64_t v30 = v28 + 3;
              if (v30 >= v34)
              {
LABEL_27:
                swift_release(a1);

                return (uint64_t)v2;
              }

              unint64_t v29 = *(void *)(v33 + 8 * v30);
              if (!v29)
              {
                while (1)
                {
                  int64_t v12 = v30 + 1;
                  if (__OFADD__(v30, 1LL)) {
                    goto LABEL_29;
                  }
                  if (v12 >= v34) {
                    goto LABEL_27;
                  }
                  unint64_t v29 = *(void *)(v33 + 8 * v12);
                  ++v30;
                  if (v29) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v30;
            }
          }
        }

void sub_100120EF8(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a1;
  id v9 = a3;
  id v10 = a5;
  sub_1001217A4(a2, a3);
}

uint64_t DarwinNotificationHelper.deinit()
{
  uint64_t v1 = v0;
  if (qword_100234B68 != -1) {
    goto LABEL_29;
  }
  while (1)
  {
    id v2 = (uint64_t *)(static DarwinNotificationManager.shared
                   + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess( static DarwinNotificationManager.shared + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers,  v33,  1LL,  0LL);
    uint64_t v3 = *v2;
    swift_retain(v1);
    uint64_t v4 = swift_bridgeObjectRetain(v3);
    uint64_t v5 = sub_1000CAD84(v4, v1);
    swift_bridgeObjectRelease(v3);
    swift_release(v1);
    uint64_t v6 = *v2;
    *id v2 = (uint64_t)v5;
    swift_bridgeObjectRelease(v6);
    center = CFNotificationCenterGetDarwinNotifyCenter();
    if (!center) {
      break;
    }
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v29 = v7 + 64;
    uint64_t v8 = 1LL << *(_BYTE *)(v7 + 32);
    uint64_t v9 = -1LL;
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    unint64_t v10 = v9 & *(void *)(v7 + 64);
    int64_t v30 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v31 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain(v7);
    int64_t v11 = 0LL;
    if (v10)
    {
LABEL_6:
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }

    while (1)
    {
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1LL))
      {
        __break(1u);
        goto LABEL_28;
      }

      if (v14 >= v30) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v14);
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v30) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v30) {
            goto LABEL_25;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v11);
          if (!v15) {
            break;
          }
        }
      }

uint64_t DarwinNotificationHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

Swift::Void __swiftcall DarwinNotificationHelper.onNotification(notificationName:)(CFStringRef notificationName)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = (id)notificationName;
    swift_bridgeObjectRetain(v2);
    unint64_t v4 = sub_1000A3A74((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = *(void *)(v2 + 56) + 16 * v4;
      uint64_t v8 = *(void (**)(uint64_t))v6;
      uint64_t v7 = *(void *)(v6 + 8);
      swift_retain(v7);

      uint64_t v9 = swift_bridgeObjectRelease(v2);
      uint64_t v10 = static os_log_type_t.default.getter(v9);
      if (qword_100234C08 != -1) {
        swift_once(&qword_100234C08, sub_10018A87C);
      }
      uint64_t v11 = qword_10023DFA8;
      uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      uint64_t v16 = v15;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 64) = sub_10009914C();
      *(void *)(v13 + 32) = v14;
      *(void *)(v13 + 40) = v16;
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Invoking callback, notification, %@", 35LL, 2LL, v13);
      uint64_t v17 = swift_bridgeObjectRelease(v13);
      v8(v17);
      swift_release(v7);
    }

    else
    {

      swift_bridgeObjectRelease(v2);
    }
  }

uint64_t _s15audioaccessoryd24DarwinNotificationHelperC20notificationHandlersACSgSDySSyycG_tcfC_0(void *a1)
{
  int64_t v1 = 0LL;
  uint64_t v4 = a1[8];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  uint64_t v5 = 1LL << *((_BYTE *)v2 - 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v3;
  id v38 = v2;
  int64_t v39 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v1 << 6);
    }

    else
    {
      int64_t v11 = v1 + 1;
      if (__OFADD__(v1, 1LL)) {
        goto LABEL_36;
      }
      if (v11 >= v39)
      {
LABEL_33:
        swift_release(a1);
        uint64_t v34 = type metadata accessor for DarwinNotificationHelper();
        uint64_t v35 = swift_allocObject(v34, 24LL, 7LL);
        DarwinNotificationHelper.init(notificationHandlers:)((uint64_t)&_swiftEmptyDictionarySingleton);
        return v35;
      }

      unint64_t v12 = v38[v11];
      ++v1;
      if (!v12)
      {
        int64_t v1 = v11 + 1;
        if (v11 + 1 >= v39) {
          goto LABEL_33;
        }
        unint64_t v12 = v38[v1];
        if (!v12)
        {
          int64_t v1 = v11 + 2;
          if (v11 + 2 >= v39) {
            goto LABEL_33;
          }
          unint64_t v12 = v38[v1];
          if (!v12)
          {
            int64_t v13 = v11 + 3;
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v12 = v38[v13];
            if (!v12)
            {
              while (1)
              {
                int64_t v1 = v13 + 1;
                if (__OFADD__(v13, 1LL)) {
                  goto LABEL_37;
                }
                if (v1 >= v39) {
                  goto LABEL_33;
                }
                unint64_t v12 = v38[v1];
                ++v13;
                if (v12) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v1 = v13;
          }
        }
      }

uint64_t type metadata accessor for DarwinNotificationHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC15audioaccessoryd24DarwinNotificationHelper);
}

void sub_1001217A4(uint64_t a1, void *a2)
{
  if (!a1)
  {
    uint64_t v12 = static os_log_type_t.error.getter(0LL);
    if (qword_100234C08 != -1) {
      swift_once(&qword_100234C08, sub_10018A87C);
    }
    uint64_t v13 = qword_10023DFA8;
    uint64_t v14 = "Observer for darwin callback handler not found";
    uint64_t v15 = v12;
    uint64_t v16 = 46LL;
    goto LABEL_12;
  }

  if (!a2)
  {
    uint64_t v17 = static os_log_type_t.error.getter(a1);
    if (qword_100234C08 != -1) {
      swift_once(&qword_100234C08, sub_10018A87C);
    }
    uint64_t v13 = qword_10023DFA8;
    uint64_t v14 = "cfNotificationName for darwin callback handler not found";
    uint64_t v15 = v17;
    uint64_t v16 = 56LL;
LABEL_12:
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v13, v14, v16, 2LL, _swiftEmptyArrayStorage);
    return;
  }

  id v4 = a2;
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  if (qword_100234C08 != -1) {
    swift_once(&qword_100234C08, sub_10018A87C);
  }
  uint64_t v6 = qword_10023DFA8;
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10009914C();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "On darwin notification, %@", 26LL, 2LL, v8);
  swift_bridgeObjectRelease(v8);
  notificationName = (__CFString *)v4;
  swift_retain(a1);
  DarwinNotificationHelper.onNotification(notificationName:)(notificationName);
  swift_release(a1);
}

uint64_t sub_1001219AC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001219D4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100121A40(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100121B10 + 4 * byte_1001A9577[a2]))(0x7473654764616568LL);
}

uint64_t sub_100121B10(uint64_t a1)
{
  if (a1 == 0x7473654764616568LL && v1 == 0xEC00000073657275LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7473654764616568LL, 0xEC00000073657275LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000073657275LL);
  return v2 & 1;
}

uint64_t sub_100121C3C(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 0x6574656C6564LL;
  }
  else {
    uint64_t v2 = 0x657461647075LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6574656C6564LL;
  }
  else {
    uint64_t v3 = 0x657461647075LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE600000000000000LL, v3, 0xE600000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE600000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_100121CB0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  return sub_100121CC8(a1, a2, a3) & 1;
}

uint64_t sub_100121CC8(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3)
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      id v17 = v8;
      char v11 = a1(&v17);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v13 & 1;
      }

      char v12 = v11;

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        char v13 = 1;
        return v13 & 1;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

uint64_t sub_100121DF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  char v11 = (char *)&v29 - v10;
  id v12 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v13 = [v12 environment];

  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (*(void *)(v14 + 16))
  {
    sub_1000A3A10(0xD00000000000001BLL, 0x80000001001D3A30LL);
    char v16 = v15;
    uint64_t v17 = swift_bridgeObjectRelease(v14);
    if ((v16 & 1) != 0)
    {
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_10023DFC8,  "Under test appContainerURL to tmp",  33LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v19 = NSTemporaryDirectory();
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;

      URL.init(fileURLWithPath:isDirectory:)(v20, v22, 1LL);
      return swift_bridgeObjectRelease(v22);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v14);
  }

  id v24 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v25 = 1LL;
  id v26 = [v24 URLsForDirectory:5 inDomains:1];

  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v5);
  if (*(void *)(v27 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v4,  v27 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  v5);
    uint64_t v25 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v25, 1LL, v5);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100099358((uint64_t)v4, (uint64_t *)&unk_100235270);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000031LL,  0x80000001001D3A80LL,  "audioaccessoryd/DeviceStore.swift",  33LL,  2LL,  2243LL,  0);
    __break(1u);
  }

  else
  {
    char v28 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v28(v11, v4, v5);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000022LL, 0x80000001001D3AC0LL, 1LL);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(a1, v9, v5);
  }

  return result;
}

uint64_t sub_1001221A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v33[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  char v11 = (char *)&v33[-1] - v10;
  id v12 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v13 = [v12 environment];

  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (*(void *)(v14 + 16))
  {
    sub_1000A3A10(0xD00000000000001BLL, 0x80000001001D3A30LL);
    char v16 = v15;
    uint64_t v17 = swift_bridgeObjectRelease(v14);
    if ((v16 & 1) != 0)
    {
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_10023DFC8,  "Under test appContainerURL to tmp",  33LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v19 = NSTemporaryDirectory();
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;

      URL.init(fileURLWithPath:isDirectory:)(v20, v22, 1LL);
      return swift_bridgeObjectRelease(v22);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v14);
  }

  id v24 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v25 = 1LL;
  id v26 = [v24 URLsForDirectory:5 inDomains:1];

  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v5);
  if (*(void *)(v27 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v4,  v27 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  v5);
    uint64_t v25 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v25, 1LL, v5);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100099358((uint64_t)v4, (uint64_t *)&unk_100235270);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000031LL,  0x80000001001D3A80LL,  "audioaccessoryd/DeviceStore.swift",  33LL,  2LL,  2260LL,  0);
    __break(1u);
  }

  else
  {
    char v28 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v28(v11, v4, v5);
    v33[3] = &type metadata for AudioAccessoryFeatures;
    v33[4] = sub_10009E740();
    LOBYTE(v33[0]) = 1;
    char v29 = isFeatureEnabled(_:)(v33);
    sub_10009A498(v33);
    if ((v29 & 1) != 0)
    {
      URL.appendingPathComponent(_:isDirectory:)(0xD00000000000002CLL, 0x80000001001D5510LL, 1LL);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      uint64_t v30 = a1;
      BOOL v31 = v8;
    }

    else
    {
      uint64_t v30 = a1;
      BOOL v31 = v11;
    }

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v30, v31, v5);
  }

  return result;
}

uint64_t sub_10012259C(uint64_t a1)
{
  return sub_1001313CC(a1, (uint64_t)&unk_10020FEC8, (uint64_t)sub_100187B64, (uint64_t)&unk_10020FEE0);
}

uint64_t sub_1001225B8(uint64_t a1)
{
  return sub_1001313CC(a1, (uint64_t)&unk_10020FF18, (uint64_t)sub_100187BB8, (uint64_t)&unk_10020FF30);
}

uint64_t sub_1001225D4(uint64_t a1)
{
  return sub_1001313CC(a1, (uint64_t)&unk_10020FD10, (uint64_t)sub_10018769C, (uint64_t)&unk_10020FD28);
}

void *sub_1001225F0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  return sub_100122604(a1, a2, a3);
}

void *sub_100122604(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v15 = v9;
      char v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

char *sub_100122724(uint64_t a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    uint64_t v7 = &a2[*(int *)(a3(0LL) + 24)];
    uint64_t v8 = 4LL;
    while (1)
    {
      a3 = (uint64_t (*)(void))(v8 - 4);
      id v9 = (a1 & 0xC000000000000001LL) != 0
      a2 = v9;
      uint64_t v10 = v8 - 3;
      if (__OFADD__(a3, 1LL)) {
        break;
      }
      id v11 = [v9 bluetoothAddress];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      uint64_t v15 = *((void *)v7 + 1);
      if (v12 == *(void *)v7 && v14 == v15)
      {
        swift_bridgeObjectRelease(a1);
LABEL_17:
        swift_bridgeObjectRelease(v14);
        return a2;
      }

      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, *(void *)v7, v15, 0LL);
      swift_bridgeObjectRelease(v14);
      if ((v17 & 1) != 0)
      {
        uint64_t v14 = a1;
        goto LABEL_17;
      }

      ++v8;
      if (v10 == v6) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_19:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_1001228BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  id v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100122980(uint64_t a1, void (*a2)(void, uint64_t, void))
{
  unint64_t v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  a2(0LL, v5 & ~(v5 >> 63), 0LL);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v4)
  {
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(a1);
    if (!v8) {
      return (uint64_t)v6;
    }
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    return (uint64_t)v6;
  }

  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_release(_swiftEmptyArrayStorage);
    swift_unknownObjectRelease(v12);
    return 0LL;
  }

  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_release(_swiftEmptyArrayStorage);
  if (v9) {
    return 0LL;
  }
  __break(1u);
  return result;
}

void *sub_100122A9C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    uint64_t result = (void *)swift_bridgeObjectRelease(a1);
    if (!v3) {
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v3) {
      return _swiftEmptyArrayStorage;
    }
  }

  if (v3 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v4 = 0LL;
      do
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4++, a1);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v6 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
        specialized ContiguousArray._endMutation()(v7);
      }

      while (v3 != v4);
    }

    else
    {
      uint64_t v8 = (void **)(a1 + 32);
      do
      {
        uint64_t v9 = *v8++;
        id v10 = v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        --v3;
      }

      while (v3);
    }

    return _swiftEmptyArrayStorage;
  }

  __break(1u);
  return result;
}

void *sub_100122C10( uint64_t a1, uint64_t *a2, void (*a3)(void, uint64_t, void, __n128), uint64_t (*a4)(void))
{
  uint64_t v8 = sub_100098CD8(a2);
  __n128 v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v19 = _swiftEmptyArrayStorage;
  a3(0LL, v12, 0LL, v9);
  if (v12)
  {
    uint64_t v13 = a4(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_1000A7C90( a1 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)),  (uint64_t)v11,  a4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
    sub_100099358((uint64_t)v11, a2);
    swift_release(v19);
    return 0LL;
  }

  else
  {
    uint64_t v15 = v19;
    uint64_t v16 = a4(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v11, 1LL, 1LL, v16);
  }

  return v15;
}

void *sub_100122D40(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_100098CD8(a2);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v9 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v9);
  uint64_t v10 = a3(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (v9)
  {
    sub_1000A7C90( a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)),  (uint64_t)v8,  a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    sub_100099358((uint64_t)v8, a2);
    swift_release(v14);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1LL, 1LL, v10);
    return v14;
  }

void *sub_100122E54( uint64_t a1, uint64_t (*a2)(void), void (*a3)(BOOL, unint64_t, uint64_t))
{
  uint64_t v6 = a2(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v20 = _swiftEmptyArrayStorage;
  ((void (*)(void, uint64_t, void, __n128))a3)(0LL, v11, 0LL, v8);
  uint64_t v12 = v20;
  if (v11)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = *(void *)(v7 + 72);
    do
    {
      sub_1000A7C90(v14, (uint64_t)v10, a2);
      uint64_t v20 = v12;
      unint64_t v17 = v12[2];
      unint64_t v16 = v12[3];
      if (v17 >= v16 >> 1)
      {
        a3(v16 > 1, v17 + 1, 1LL);
        uint64_t v12 = v20;
      }

      v12[2] = v17 + 1;
      sub_1000C998C((uint64_t)v10, (uint64_t)v12 + v13 + v17 * v15, a2);
      v14 += v15;
      --v11;
    }

    while (v11);
  }

  return v12;
}

void *sub_100122F80(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  sub_1001611C8(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v2)
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      return v4;
    }
    goto LABEL_10;
  }

  if (a1 < 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(a1);
  if (v6)
  {
LABEL_10:
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
      swift_release(_swiftEmptyArrayStorage);
      swift_unknownObjectRelease(v9);
    }

    else
    {
      swift_release(_swiftEmptyArrayStorage);
    }

    return 0LL;
  }

  return v4;
}

void *sub_100123088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v279 = (uint64_t)&v263 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v275 = (uint64_t)&v263 - v7;
  uint64_t v8 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v8);
  uint64_t v268 = (char *)&v263 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v266 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  *(void *)&__int128 v265 = *(void *)(v266 - 8);
  __chkstk_darwin(v266);
  uint64_t v273 = (uint64_t)&v263 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v263 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v264 = (char *)&v263 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v271 = type metadata accessor for URL(0LL);
  uint64_t v270 = *(void *)(v271 - 8);
  __chkstk_darwin(v271);
  uint64_t v269 = (char *)&v263 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v14);
  uint64_t v272 = (uint64_t)&v263 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DeviceRecord(0LL);
  unint64_t v277 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v263 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v274 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v263 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  char v267 = (uint64_t *)((char *)&v263 - v23);
  __chkstk_darwin(v24);
  id v26 = (char *)&v263 - v25;
  uint64_t v278 = (void *)(a2 + 16);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v29 = qword_10023DFC0;
  uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v32 = swift_bridgeObjectRetain(a1);
  unint64_t v276 = v19;
  uint64_t v33 = Array.description.getter(v32, v19);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease(a1);
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_10009914C();
  *(void *)(v31 + 32) = v33;
  *(void *)(v31 + 40) = v35;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "records Updated: %@", 19LL, 2LL, v31);
  swift_bridgeObjectRelease(v31);
  id v36 = sub_100122E54( a1,  type metadata accessor for MagicPairingSettingsRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161128);
  if (v36)
  {
    uint64_t v37 = v36;
    id v38 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v38, v39);
    if (Strong)
    {
      uint64_t v42 = (void *)Strong;
      uint64_t v43 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v41);

      if (v43)
      {
        Swift::String v44 = _swiftEmptyArrayStorage;
        v283[0] = _swiftEmptyArrayStorage;
        uint64_t v45 = v37[2];
        if (v45)
        {
          uint64_t v278 = v37;
          uint64_t v279 = (uint64_t)v43;
          uint64_t v46 = (uint64_t)v37
              + ((*(unsigned __int8 *)(v274 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v274 + 80));
          uint64_t v47 = *(void *)(v274 + 72);
          swift_bridgeObjectRetain(v37);
          unint64_t v48 = v276;
          do
          {
            sub_1000A7C90(v46, (uint64_t)v26, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v49 = &v26[*(int *)(v48 + 24)];
            uint64_t v50 = *((void *)v49 + 1);
            if (*(void *)v49 == 0xD000000000000011LL && v50 == 0x80000001001CCC20LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v49,  v50,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL) & 1) != 0)
            {
              sub_1000A7CD4((uint64_t)v26, type metadata accessor for MagicPairingSettingsRecord);
            }

            else
            {
              id v51 = sub_1000BC2B0();
              uint64_t v52 = sub_1000A7CD4((uint64_t)v26, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
              unint64_t v54 = *(void *)((v283[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v53 = *(void *)((v283[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v54 >= v53 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1LL);
              }
              uint64_t v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
              specialized Array._endMutation()(v55);
              unint64_t v48 = v276;
            }

            v46 += v47;
            --v45;
          }

          while (v45);
          uint64_t v37 = v278;
          swift_bridgeObjectRelease(v278);
          Swift::String v44 = (void *)v283[0];
          uint64_t v43 = (void *)v279;
        }

        swift_bridgeObjectRelease(v37);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v84.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v44);
        [v43 magicPairingRecordsUpdatedWithRecords:v84.super.isa];
LABEL_29:

        return (void *)swift_unknownObjectRelease(v43);
      }
    }

    uint64_t v56 = (uint64_t)v37;
    return (void *)swift_bridgeObjectRelease(v56);
  }

  BOOL v58 = sub_100122C10( a1,  (uint64_t *)&unk_100235810,  (void (*)(void, uint64_t, void, __n128))sub_100161180,  type metadata accessor for MagicPairingSettingsRecord);
  if (v58)
  {
    uint64_t v59 = v58;
    uint64_t v60 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    uint64_t v62 = swift_unknownObjectWeakLoadStrong(v60, v61);
    unint64_t v64 = v276;
    uint64_t v65 = v274;
    if (v62)
    {
      uint64_t v66 = (void *)v62;
      uint64_t v67 = (void *)swift_unknownObjectWeakLoadStrong( v62 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v63);

      if (v67)
      {
        unint64_t v68 = _swiftEmptyArrayStorage;
        v283[0] = _swiftEmptyArrayStorage;
        uint64_t v69 = v59[2];
        if (v69)
        {
          uint64_t v275 = (uint64_t)v67;
          uint64_t v70 = (uint64_t)v59
              + ((*(unsigned __int8 *)(v277 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80));
          uint64_t v279 = *(void *)(v277 + 72);
          uint64_t v266 = (uint64_t)v59;
          swift_bridgeObjectRetain(v59);
          do
          {
            sub_1000A7C90(v70, (uint64_t)v18, type metadata accessor for DeviceRecord);
            uint64_t v71 = *(void *)&v18[*(int *)(v16 + 24) + 8];
            id v72 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
            swift_bridgeObjectRetain(v71);
            NSString v73 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v71);
            id v74 = [v72 initWithBluetoothAddress:v73];

            NSString v75 = String._bridgeToObjectiveC()();
            [v74 setNickname:v75];

            NSString v76 = String._bridgeToObjectiveC()();
            [v74 setModelNumber:v76];

            NSString v77 = String._bridgeToObjectiveC()();
            [v74 setManufacturer:v77];

            NSString v78 = String._bridgeToObjectiveC()();
            [v74 setProductID:v78];

            NSString v79 = String._bridgeToObjectiveC()();
            [v74 setVendorID:v79];

            uint64_t v80 = sub_1000A7CD4((uint64_t)v18, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v80);
            unint64_t v82 = *(void *)((v283[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v81 = *(void *)((v283[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v82 >= v81 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1LL);
            }
            uint64_t v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v74);
            specialized Array._endMutation()(v83);
            v70 += v279;
            --v69;
          }

          while (v69);
          uint64_t v59 = (void *)v266;
          swift_bridgeObjectRelease(v266);
          unint64_t v68 = (void *)v283[0];
          uint64_t v67 = (void *)v275;
          unint64_t v64 = v276;
          uint64_t v65 = v274;
        }

        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v68);
        [v67 devicesUpdatedWithRecords:isa];

        swift_unknownObjectRelease(v67);
      }
    }

    uint64_t v103 = v59[2];
    if (!v103)
    {
      uint64_t v56 = (uint64_t)v59;
      return (void *)swift_bridgeObjectRelease(v56);
    }

    unint64_t v104 = v277;
    uint64_t v105 = (uint64_t)v59
         + ((*(unsigned __int8 *)(v277 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80));
    uint64_t v266 = (uint64_t)v59;
    swift_bridgeObjectRetain(v59);
    uint64_t v268 = (char *)v103;
    uint64_t v106 = v278;
    swift_beginAccess(v278, v283, 0LL, 0LL);
    objc_super v107 = v106;
    uint64_t v108 = (uint64_t)v268;
    swift_beginAccess(v107, v281, 0LL, 0LL);
    uint64_t v109 = 0LL;
    uint64_t v279 = *(void *)(v104 + 72);
    uint64_t v110 = v105;
    uint64_t v275 = (uint64_t)"ddress: %@ error: %@";
    unint64_t v277 = 0x80000001001CCC20LL;
    __int128 v265 = xmmword_1001A8ED0;
    uint64_t v111 = v272;
    uint64_t v273 = v110;
    while (1)
    {
      Class v112 = (void *)(v110 + v279 * v109 + *(int *)(v16 + 24));
      uint64_t v113 = v112[1];
      if ((*v112 != 0xD000000000000011LL || v113 != v277)
        && (_stringCompareWithSmolCheck(_:_:expecting:)( *v112,  v113,  0xD000000000000011LL,  v275 | 0x8000000000000000LL,  0LL) & 1) == 0)
      {
        uint64_t v115 = swift_unknownObjectWeakLoadStrong(v278, v114);
        if (v115)
        {
          id v116 = (void *)v115;
          uint64_t v117 = sub_1000AE6C8(v115);

          id v118 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
          if ((v118 & 1) != 0)
          {
            uint64_t v119 = sub_10013A76C();
            if (qword_100234B70 != -1) {
              swift_once(&qword_100234B70, sub_1000CAF84);
            }
            uint64_t v120 = v271;
            uint64_t v121 = sub_100098D58(v271, (uint64_t)qword_10023DD70);
            uint64_t v122 = v270;
            uint64_t v123 = (uint64_t)v269;
            (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v121, v120);
            uint64_t v124 = sub_100139314( v123,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
            swift_release(v119);
            (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v120);
            unint64_t v64 = v276;
            uint64_t v65 = v274;
          }

          else
          {
            uint64_t v125 = static os_log_type_t.error.getter(v118);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v126 = v125;
            uint64_t v124 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v126,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          }

          uint64_t v110 = v273;
          swift_release(v117);
          uint64_t v127 = v124[2];
          if (v127)
          {
            uint64_t v128 = (uint64_t)v124
                 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
            swift_bridgeObjectRetain(v124);
            uint64_t v129 = *(void *)(v65 + 72);
            while (1)
            {
              sub_1000A7C90(v128, (uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
              char v130 = &v21[*(int *)(v64 + 24)];
              uint64_t v131 = *((void *)v130 + 1);
              uint64_t v132 = v112[1];
              BOOL v133 = *(void *)v130 == *v112 && v131 == v132;
              if (v133
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v130, v131, *v112, v132, 0LL) & 1) != 0)
              {
                break;
              }

              sub_1000A7CD4((uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
              v128 += v129;
              if (!--v127)
              {
                swift_bridgeObjectRelease(v124);
                uint64_t v110 = v273;
                uint64_t v65 = v274;
                goto LABEL_65;
              }
            }

            swift_bridgeObjectRelease(v124);
            uint64_t v111 = v272;
            sub_1000C998C((uint64_t)v21, v272, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v65 = v274;
            (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v274 + 56))(v111, 0LL, 1LL, v64);
            uint64_t v110 = v273;
          }

          else
          {
LABEL_65:
            uint64_t v111 = v272;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v65 + 56))(v272, 1LL, 1LL, v64);
          }

          swift_bridgeObjectRelease(v124);
          int v134 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v65 + 48))(v111, 1LL, v64);
          uint64_t v108 = (uint64_t)v268;
          if (v134 != 1)
          {
            uint64_t v135 = (uint64_t)v267;
            sub_1000C998C(v111, (uint64_t)v267, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v137 = swift_unknownObjectWeakLoadStrong(v278, v136);
            if (v137)
            {
              id v139 = (void *)v137;
              id v140 = (void *)swift_unknownObjectWeakLoadStrong( v137 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v138);

              if (v140)
              {
                uint64_t v141 = sub_100098CD8(&qword_100236588);
                uint64_t v142 = swift_allocObject(v141, 40LL, 7LL);
                *(_OWORD *)(v142 + swift_unknownObjectWeakDestroy(v0 + 16) = v265;
                id v143 = sub_1000BC2B0();
                *(void *)(v142 + 32) = v143;
                v280[0] = v142;
                specialized Array._endMutation()(v143);
                uint64_t v144 = v280[0];
                sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
                Class v145 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v144);
                [v140 magicPairingRecordsUpdatedWithRecords:v145];
                swift_unknownObjectRelease(v140);

                uint64_t v111 = v272;
              }
            }

            sub_1000A7CD4(v135, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v108 = (uint64_t)v268;
            uint64_t v110 = v273;
            goto LABEL_44;
          }
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v65 + 56))(v111, 1LL, 1LL, v64);
          uint64_t v110 = v273;
        }

        sub_100099358(v111, (uint64_t *)&unk_100235810);
      }

LABEL_163:
          __break(1u);
          return result;
        }
      }

      else
      {
        uint64_t v243 = *(void *)((v241 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t result = (void *)swift_bridgeObjectRetain(v241);
        if (v243) {
          goto LABEL_146;
        }
      }

      swift_bridgeObjectRelease(v242);
      uint64_t v260 = _swiftEmptyArrayStorage;
LABEL_160:
      swift_bridgeObjectRelease(v242);
      sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
      Class v262 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v260);
      [v240 devicesUpdatedWithRecords:v262];
      swift_unknownObjectRelease(v240);

      return (void *)sub_1000A7CD4(v273, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }

    sub_1000EF00C();
    uint64_t v166 = v165;
    uint64_t v167 = v278;
    swift_beginAccess(v278, v283, 0LL, 0LL);
    id v169 = (void *)swift_unknownObjectWeakLoadStrong(v167, v168);
    swift_unknownObjectWeakInit(v280, v169);

    unint64_t v282 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v166 >> 62)
    {
      if (v166 < 0) {
        uint64_t v233 = v166;
      }
      else {
        uint64_t v233 = v166 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v166);
      uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v233);
      uint64_t v170 = (uint64_t)result;
      if (result) {
        goto LABEL_92;
      }
    }

    else
    {
      uint64_t v170 = *(void *)((v166 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = (void *)swift_bridgeObjectRetain(v166);
      if (v170)
      {
LABEL_92:
        uint64_t v266 = (uint64_t)v164;
        if (v170 < 1)
        {
          __break(1u);
          goto LABEL_163;
        }

        unint64_t v276 = v166 & 0xC000000000000001LL;
        swift_beginAccess(v280, v281, 0LL, 0LL);
        uint64_t v171 = 0LL;
        uint64_t v274 = v166;
        uint64_t v272 = v170;
        do
        {
          if (v276) {
            uint64_t v172 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v171, v166);
          }
          else {
            uint64_t v172 = (char *)*(id *)(v166 + 8 * v171 + 32);
          }
          id v174 = v172;
          uint64_t v175 = swift_unknownObjectWeakLoadStrong(v280, v173);
          if (v175)
          {
            uint64_t v176 = (void *)v175;
            uint64_t v177 = sub_1000AE6C8(v175);
            uint64_t v178 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
            id v179 = [v178 isFirstUnlocked];
            unint64_t v277 = (unint64_t)v176;
            if ((v179 & 1) != 0)
            {
              uint64_t v180 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v181 = v271;
              uint64_t v182 = sub_100098D58(v271, (uint64_t)qword_10023DD48);
              uint64_t v183 = v270;
              uint64_t v184 = (uint64_t)v269;
              (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v182, v181);
              uint64_t v185 = sub_100139314( v184,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v180);
              (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v184, v181);
              uint64_t v186 = v185[2];
              uint64_t v187 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              uint64_t v188 = *(void *)(v187 - 8);
              uint64_t v151 = v275;
              if (v186)
              {
                sub_1000A7C90( (uint64_t)v185 + ((*(unsigned __int8 *)(v188 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80)),  v275,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v188 + 56))(v151, 0LL, 1LL, v187);
              }

              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56))(v275, 1LL, 1LL, v187);
              }

              swift_release(v177);
              swift_bridgeObjectRelease(v185);
              uint64_t v176 = (void *)v277;
            }

            else
            {
              uint64_t v189 = static os_log_type_t.error.getter(v179);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v189,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              uint64_t v187 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56LL))( v151,  1LL,  1LL,  v187);
              swift_release(v177);
            }

            type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
            uint64_t v190 = *(void *)(v187 - 8);
            unsigned int v191 = *(uint64_t **)(v190 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v191)(v151, 1LL, v187) == 1)
            {
              sub_100099358(v151, (uint64_t *)&unk_1002357E0);
              Class v192 = 0LL;
            }

            else
            {
              uint64_t v193 = Data.subdata(in:)( 1LL,  17LL,  *(void *)(v151 + *(int *)(v187 + 20)),  *(void *)(v151 + *(int *)(v187 + 20) + 8));
              uint64_t v268 = (char *)v187;
              uint64_t v194 = v171;
              uint64_t v195 = v174;
              uint64_t v196 = v190;
              unsigned int v197 = v178;
              uint64_t v198 = v191;
              unint64_t v200 = v199;
              sub_1000A7CD4(v151, type metadata accessor for LegacyAccountMagicKeysRecord);
              Class v192 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v201 = v200;
              unsigned int v191 = v198;
              uint64_t v178 = v197;
              uint64_t v190 = v196;
              id v174 = v195;
              uint64_t v171 = v194;
              uint64_t v187 = (uint64_t)v268;
              sub_100099394(v193, v201);
            }

            [v174 setMasterKey:v192];

            uint64_t v203 = sub_1000AE6C8(v202);
            id v204 = [v178 isFirstUnlocked];
            if ((v204 & 1) != 0)
            {
              char v267 = v191;
              uint64_t v268 = v174;
              uint64_t v205 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v206 = v271;
              uint64_t v207 = sub_100098D58(v271, (uint64_t)qword_10023DD48);
              uint64_t v208 = v270;
              uint64_t v209 = (uint64_t)v269;
              (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v207, v206);
              uint64_t v210 = sub_100139314( v209,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v205);
              (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v209, v206);
              if (v210[2])
              {
                uint64_t v211 = v279;
                sub_1000A7C90( (uint64_t)v210 + ((*(unsigned __int8 *)(v190 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80)),  v279,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v190 + 56))(v211, 0LL, 1LL, v187);
              }

              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56))(v279, 1LL, 1LL, v187);
              }

              swift_release(v203);
              swift_bridgeObjectRelease(v210);
              uint64_t v151 = v275;
              id v174 = v268;
              uint64_t v176 = (void *)v277;
              unsigned int v191 = v267;
            }

            else
            {
              uint64_t v212 = static os_log_type_t.error.getter(v204);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v212,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56))(v279, 1LL, 1LL, v187);
              swift_release(v203);
            }

            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v191)(v279, 1LL, v187) == 1)
            {
              sub_100099358(v279, (uint64_t *)&unk_1002357E0);
              Class v213 = 0LL;
            }

            else
            {
              uint64_t v214 = v279;
              uint64_t v215 = Data.subdata(in:)( 17LL,  33LL,  *(void *)(v279 + *(int *)(v187 + 20)),  *(void *)(v279 + *(int *)(v187 + 20) + 8));
              unint64_t v217 = v216;
              sub_1000A7CD4(v214, type metadata accessor for LegacyAccountMagicKeysRecord);
              Class v213 = Data._bridgeToObjectiveC()().super.isa;
              sub_100099394(v215, v217);
            }

            uint64_t v166 = v274;
            uint64_t v170 = v272;
            [v174 setMasterHint:v213];
          }

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v175);
          unint64_t v219 = *(void *)((v282 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v218 = *(void *)((v282 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v219 >= v218 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v218 > 1, v219 + 1, 1LL);
          }
          ++v171;
          uint64_t v220 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v219, v174);
          specialized Array._endMutation()(v220);
        }

        while (v170 != v171);
        swift_bridgeObjectRelease(v166);
        uint64_t v232 = (void *)v282;
        uint64_t v164 = (void *)v266;
        goto LABEL_141;
      }
    }

    swift_bridgeObjectRelease(v166);
    uint64_t v232 = _swiftEmptyArrayStorage;
LABEL_141:
    swift_bridgeObjectRelease(v166);
    swift_unknownObjectWeakDestroy(v280);
    sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
    Class v234 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v232);
    [v164 magicPairingRecordsUpdatedWithRecords:v234];

    swift_unknownObjectRelease(v164);
    goto LABEL_142;
  }

          __break(1u);
          return result;
        }
      }

      else
      {
        uint64_t v242 = *(void *)((v240 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t result = (void *)swift_bridgeObjectRetain(v240);
        if (v242) {
          goto LABEL_146;
        }
      }

      swift_bridgeObjectRelease(v241);
      uint64_t v259 = _swiftEmptyArrayStorage;
LABEL_160:
      swift_bridgeObjectRelease(v241);
      sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
      uint64_t v261 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v259);
      [v239 devicesUpdatedWithRecords:v261];
      swift_unknownObjectRelease(v239);

      return (void *)sub_1000A7CD4(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }

    sub_1000EF00C();
    uint64_t v165 = v164;
    uint64_t v166 = v277;
    swift_beginAccess(v277, v282, 0LL, 0LL);
    uint64_t v168 = (void *)swift_unknownObjectWeakLoadStrong(v166, v167);
    swift_unknownObjectWeakInit(v279, v168);

    v281 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v165 >> 62)
    {
      if (v165 < 0) {
        uint64_t v232 = v165;
      }
      else {
        uint64_t v232 = v165 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v165);
      uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v232);
      id v169 = (uint64_t)result;
      if (result) {
        goto LABEL_92;
      }
    }

    else
    {
      id v169 = *(void *)((v165 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = (void *)swift_bridgeObjectRetain(v165);
      if (v169)
      {
LABEL_92:
        __int128 v265 = (uint64_t)v163;
        if (v169 < 1)
        {
          __break(1u);
          goto LABEL_163;
        }

        uint64_t v275 = v165 & 0xC000000000000001LL;
        swift_beginAccess(v279, v280, 0LL, 0LL);
        uint64_t v170 = 0LL;
        uint64_t v273 = v165;
        uint64_t v271 = v169;
        do
        {
          if (v275) {
            uint64_t v171 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v170, v165);
          }
          else {
            uint64_t v171 = (char *)*(id *)(v165 + 8 * v170 + 32);
          }
          uint64_t v173 = v171;
          id v174 = swift_unknownObjectWeakLoadStrong(v279, v172);
          if (v174)
          {
            uint64_t v175 = (void *)v174;
            uint64_t v176 = sub_1000AE6C8(v174);
            uint64_t v177 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
            uint64_t v178 = [v177 isFirstUnlocked];
            unint64_t v276 = (unint64_t)v175;
            if ((v178 & 1) != 0)
            {
              id v179 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v180 = v270;
              uint64_t v181 = sub_100098D58(v270, (uint64_t)qword_10023DD48);
              uint64_t v182 = v269;
              uint64_t v183 = (uint64_t)v268;
              (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v181, v180);
              uint64_t v184 = sub_100139314( v183,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v179);
              (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v183, v180);
              uint64_t v185 = v184[2];
              uint64_t v186 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              uint64_t v187 = *(void *)(v186 - 8);
              uint64_t v150 = v274;
              if (v185)
              {
                sub_1000A7C90( (uint64_t)v184 + ((*(unsigned __int8 *)(v187 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80)),  v274,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v187 + 56))(v150, 0LL, 1LL, v186);
              }

              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 56))(v274, 1LL, 1LL, v186);
              }

              swift_release(v176);
              swift_bridgeObjectRelease(v184);
              uint64_t v175 = (void *)v276;
            }

            else
            {
              uint64_t v188 = static os_log_type_t.error.getter(v178);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v188,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              uint64_t v186 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 56LL))( v150,  1LL,  1LL,  v186);
              swift_release(v176);
            }

            type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
            uint64_t v189 = *(void *)(v186 - 8);
            uint64_t v190 = *(uint64_t **)(v189 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v190)(v150, 1LL, v186) == 1)
            {
              sub_100099358(v150, (uint64_t *)&unk_1002357E0);
              unsigned int v191 = 0LL;
            }

            else
            {
              Class v192 = Data.subdata(in:)( 1LL,  17LL,  *(void *)(v150 + *(int *)(v186 + 20)),  *(void *)(v150 + *(int *)(v186 + 20) + 8));
              char v267 = (char *)v186;
              uint64_t v193 = v170;
              uint64_t v194 = v173;
              uint64_t v195 = v189;
              uint64_t v196 = v177;
              unsigned int v197 = v190;
              unint64_t v199 = v198;
              sub_1000A7CD4(v150, type metadata accessor for LegacyAccountMagicKeysRecord);
              unsigned int v191 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v200 = v199;
              uint64_t v190 = v197;
              uint64_t v177 = v196;
              uint64_t v189 = v195;
              uint64_t v173 = v194;
              uint64_t v170 = v193;
              uint64_t v186 = (uint64_t)v267;
              sub_100099394(v192, v200);
            }

            [v173 setMasterKey:v191];

            uint64_t v202 = sub_1000AE6C8(v201);
            uint64_t v203 = [v177 isFirstUnlocked];
            if ((v203 & 1) != 0)
            {
              uint64_t v266 = v190;
              char v267 = v173;
              id v204 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v205 = v270;
              uint64_t v206 = sub_100098D58(v270, (uint64_t)qword_10023DD48);
              uint64_t v207 = v269;
              uint64_t v208 = (uint64_t)v268;
              (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v206, v205);
              uint64_t v209 = sub_100139314( v208,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v204);
              (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v208, v205);
              if (v209[2])
              {
                uint64_t v210 = v278;
                sub_1000A7C90( (uint64_t)v209 + ((*(unsigned __int8 *)(v189 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80)),  v278,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v189 + 56))(v210, 0LL, 1LL, v186);
              }

              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v278, 1LL, 1LL, v186);
              }

              swift_release(v202);
              swift_bridgeObjectRelease(v209);
              uint64_t v150 = v274;
              uint64_t v173 = v267;
              uint64_t v175 = (void *)v276;
              uint64_t v190 = v266;
            }

            else
            {
              uint64_t v211 = static os_log_type_t.error.getter(v203);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v211,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v278, 1LL, 1LL, v186);
              swift_release(v202);
            }

            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v190)(v278, 1LL, v186) == 1)
            {
              sub_100099358(v278, (uint64_t *)&unk_1002357E0);
              uint64_t v212 = 0LL;
            }

            else
            {
              Class v213 = v278;
              uint64_t v214 = Data.subdata(in:)( 17LL,  33LL,  *(void *)(v278 + *(int *)(v186 + 20)),  *(void *)(v278 + *(int *)(v186 + 20) + 8));
              unint64_t v216 = v215;
              sub_1000A7CD4(v213, type metadata accessor for LegacyAccountMagicKeysRecord);
              uint64_t v212 = Data._bridgeToObjectiveC()().super.isa;
              sub_100099394(v214, v216);
            }

            uint64_t v165 = v273;
            id v169 = v271;
            [v173 setMasterHint:v212];
          }

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v174);
          unint64_t v218 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v217 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v218 >= v217 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v217 > 1, v218 + 1, 1LL);
          }
          ++v170;
          unint64_t v219 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v218, v173);
          specialized Array._endMutation()(v219);
        }

        while (v169 != v170);
        swift_bridgeObjectRelease(v165);
        Class v231 = (void *)v281;
        uint64_t v163 = (void *)v265;
        goto LABEL_141;
      }
    }

    swift_bridgeObjectRelease(v165);
    Class v231 = _swiftEmptyArrayStorage;
LABEL_141:
    swift_bridgeObjectRelease(v165);
    swift_unknownObjectWeakDestroy(v279);
    sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
    uint64_t v233 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v231);
    [v163 magicPairingRecordsUpdatedWithRecords:v233];

    swift_unknownObjectRelease(v163);
    goto LABEL_142;
  }

          __break(1u);
          return result;
        }
      }

      else
      {
        uint64_t v242 = *(void *)((v240 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t result = (void *)swift_bridgeObjectRetain(v240);
        if (v242) {
          goto LABEL_146;
        }
      }

      swift_bridgeObjectRelease(v241);
      uint64_t v259 = _swiftEmptyArrayStorage;
LABEL_160:
      swift_bridgeObjectRelease(v241);
      sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
      uint64_t v261 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v259);
      [v239 devicesUpdatedWithRecords:v261];
      swift_unknownObjectRelease(v239);

      return (void *)sub_1000A7CD4(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }

    sub_1000EF00C();
    uint64_t v165 = v164;
    uint64_t v166 = v277;
    swift_beginAccess(v277, v282, 0LL, 0LL);
    uint64_t v168 = (void *)swift_unknownObjectWeakLoadStrong(v166, v167);
    swift_unknownObjectWeakInit(v279, v168);

    v281 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v165 >> 62)
    {
      if (v165 < 0) {
        uint64_t v232 = v165;
      }
      else {
        uint64_t v232 = v165 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v165);
      uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v232);
      id v169 = (uint64_t)result;
      if (result) {
        goto LABEL_92;
      }
    }

    else
    {
      id v169 = *(void *)((v165 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = (void *)swift_bridgeObjectRetain(v165);
      if (v169)
      {
LABEL_92:
        __int128 v265 = (uint64_t)v163;
        if (v169 < 1)
        {
          __break(1u);
          goto LABEL_163;
        }

        uint64_t v275 = v165 & 0xC000000000000001LL;
        swift_beginAccess(v279, v280, 0LL, 0LL);
        uint64_t v170 = 0LL;
        uint64_t v273 = v165;
        uint64_t v271 = v169;
        do
        {
          if (v275) {
            uint64_t v171 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v170, v165);
          }
          else {
            uint64_t v171 = (char *)*(id *)(v165 + 8 * v170 + 32);
          }
          uint64_t v173 = v171;
          id v174 = swift_unknownObjectWeakLoadStrong(v279, v172);
          if (v174)
          {
            uint64_t v175 = (void *)v174;
            uint64_t v176 = sub_1000AE6C8(v174);
            uint64_t v177 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
            uint64_t v178 = [v177 isFirstUnlocked];
            unint64_t v276 = (unint64_t)v175;
            if ((v178 & 1) != 0)
            {
              id v179 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v180 = v270;
              uint64_t v181 = sub_100098D58(v270, (uint64_t)qword_10023DD48);
              uint64_t v182 = v269;
              uint64_t v183 = (uint64_t)v268;
              (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v181, v180);
              uint64_t v184 = sub_100139314( v183,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v179);
              (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v183, v180);
              uint64_t v185 = v184[2];
              uint64_t v186 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              uint64_t v187 = *(void *)(v186 - 8);
              uint64_t v150 = v274;
              if (v185)
              {
                sub_1000A7C90( (uint64_t)v184 + ((*(unsigned __int8 *)(v187 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80)),  v274,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v187 + 56))(v150, 0LL, 1LL, v186);
              }

              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 56))(v274, 1LL, 1LL, v186);
              }

              swift_release(v176);
              swift_bridgeObjectRelease(v184);
              uint64_t v175 = (void *)v276;
            }

            else
            {
              uint64_t v188 = static os_log_type_t.error.getter(v178);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v188,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              uint64_t v186 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 56LL))( v150,  1LL,  1LL,  v186);
              swift_release(v176);
            }

            type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
            uint64_t v189 = *(void *)(v186 - 8);
            uint64_t v190 = *(uint64_t **)(v189 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v190)(v150, 1LL, v186) == 1)
            {
              sub_100099358(v150, (uint64_t *)&unk_1002357E0);
              unsigned int v191 = 0LL;
            }

            else
            {
              Class v192 = Data.subdata(in:)( 1LL,  17LL,  *(void *)(v150 + *(int *)(v186 + 20)),  *(void *)(v150 + *(int *)(v186 + 20) + 8));
              char v267 = (char *)v186;
              uint64_t v193 = v170;
              uint64_t v194 = v173;
              uint64_t v195 = v189;
              uint64_t v196 = v177;
              unsigned int v197 = v190;
              unint64_t v199 = v198;
              sub_1000A7CD4(v150, type metadata accessor for LegacyAccountMagicKeysRecord);
              unsigned int v191 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v200 = v199;
              uint64_t v190 = v197;
              uint64_t v177 = v196;
              uint64_t v189 = v195;
              uint64_t v173 = v194;
              uint64_t v170 = v193;
              uint64_t v186 = (uint64_t)v267;
              sub_100099394(v192, v200);
            }

            [v173 setMasterKey:v191];

            uint64_t v202 = sub_1000AE6C8(v201);
            uint64_t v203 = [v177 isFirstUnlocked];
            if ((v203 & 1) != 0)
            {
              uint64_t v266 = v190;
              char v267 = v173;
              id v204 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v205 = v270;
              uint64_t v206 = sub_100098D58(v270, (uint64_t)qword_10023DD48);
              uint64_t v207 = v269;
              uint64_t v208 = (uint64_t)v268;
              (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v206, v205);
              uint64_t v209 = sub_100139314( v208,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v204);
              (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v208, v205);
              if (v209[2])
              {
                uint64_t v210 = v278;
                sub_1000A7C90( (uint64_t)v209 + ((*(unsigned __int8 *)(v189 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80)),  v278,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v189 + 56))(v210, 0LL, 1LL, v186);
              }

              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v278, 1LL, 1LL, v186);
              }

              swift_release(v202);
              swift_bridgeObjectRelease(v209);
              uint64_t v150 = v274;
              uint64_t v173 = v267;
              uint64_t v175 = (void *)v276;
              uint64_t v190 = v266;
            }

            else
            {
              uint64_t v211 = static os_log_type_t.error.getter(v203);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v211,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v278, 1LL, 1LL, v186);
              swift_release(v202);
            }

            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v190)(v278, 1LL, v186) == 1)
            {
              sub_100099358(v278, (uint64_t *)&unk_1002357E0);
              uint64_t v212 = 0LL;
            }

            else
            {
              Class v213 = v278;
              uint64_t v214 = Data.subdata(in:)( 17LL,  33LL,  *(void *)(v278 + *(int *)(v186 + 20)),  *(void *)(v278 + *(int *)(v186 + 20) + 8));
              unint64_t v216 = v215;
              sub_1000A7CD4(v213, type metadata accessor for LegacyAccountMagicKeysRecord);
              uint64_t v212 = Data._bridgeToObjectiveC()().super.isa;
              sub_100099394(v214, v216);
            }

            uint64_t v165 = v273;
            id v169 = v271;
            [v173 setMasterHint:v212];
          }

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v174);
          unint64_t v218 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v217 = *(void *)((v281 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v218 >= v217 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v217 > 1, v218 + 1, 1LL);
          }
          ++v170;
          unint64_t v219 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v218, v173);
          specialized Array._endMutation()(v219);
        }

        while (v169 != v170);
        swift_bridgeObjectRelease(v165);
        Class v231 = (void *)v281;
        uint64_t v163 = (void *)v265;
        goto LABEL_141;
      }
    }

    swift_bridgeObjectRelease(v165);
    Class v231 = _swiftEmptyArrayStorage;
LABEL_141:
    swift_bridgeObjectRelease(v165);
    swift_unknownObjectWeakDestroy(v279);
    sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
    uint64_t v233 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v231);
    [v163 magicPairingRecordsUpdatedWithRecords:v233];

    swift_unknownObjectRelease(v163);
    goto LABEL_142;
  }

LABEL_83:
  uint64_t v153 = sub_100122D40(a1, (uint64_t *)&unk_100235810, type metadata accessor for MagicPairingSettingsRecord);
  if (v153)
  {
    uint64_t v154 = (uint64_t)v153;
    char v155 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    uint64_t v157 = swift_unknownObjectWeakLoadStrong(v155, v156);
    if (!v157)
    {
LABEL_87:
      uint64_t v56 = v154;
      return (void *)swift_bridgeObjectRelease(v56);
    }

    uint64_t v158 = (void *)v157;
    sub_10009C630(v154);
LABEL_86:

    goto LABEL_87;
  }

  __int128 v221 = sub_100122D40(a1, (uint64_t *)&unk_100235810, type metadata accessor for MagicPairingSettingsRecord);
  if (v221)
  {
    uint64_t v154 = (uint64_t)v221;
    unint64_t v222 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    uint64_t v224 = (void *)swift_unknownObjectWeakLoadStrong(v222, v223);
    if (v224)
    {

      uint64_t v56 = v154;
      return (void *)swift_bridgeObjectRelease(v56);
    }

    goto LABEL_87;
  }

  uint64_t result = sub_100122D40(a1, (uint64_t *)&unk_100235810, type metadata accessor for MagicPairingSettingsRecord);
  if (result)
  {
    uint64_t v154 = (uint64_t)result;
    uint64_t v225 = v278;
    swift_beginAccess(v278, v284, 0LL, 0LL);
    uint64_t v227 = swift_unknownObjectWeakLoadStrong(v225, v226);
    if (!v227) {
      goto LABEL_87;
    }
    uint64_t v158 = (void *)v227;
    uint64_t v229 = swift_unknownObjectWeakLoadStrong( v227 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v228);
    if (v229)
    {
      uint64_t v230 = (void *)v229;
      type metadata accessor for HMDeviceCloudRecord(0LL);
      Class v231 = Array._bridgeToObjectiveC()().super.isa;
      [v230 hmDeviceCloudRecordsUpdatedWithRecords:v231];

      swift_bridgeObjectRelease(v154);
      return (void *)swift_unknownObjectRelease(v230);
    }

    goto LABEL_86;
  }

  return result;
}

  uint64_t v152 = sub_100122D40(a1, &qword_100235828, type metadata accessor for DeviceSupportInformationRecord);
  if (v152)
  {
    uint64_t v153 = (uint64_t)v152;
    uint64_t v154 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v156 = swift_unknownObjectWeakLoadStrong(v154, v155);
    if (!v156)
    {
LABEL_87:
      uint64_t v55 = v153;
      return (void *)swift_bridgeObjectRelease(v55);
    }

    uint64_t v157 = (void *)v156;
    sub_10009C630(v153);
LABEL_86:

    goto LABEL_87;
  }

  uint64_t v220 = sub_100122D40(a1, &qword_100235828, type metadata accessor for DeviceSupportInformationRecord);
  if (v220)
  {
    uint64_t v153 = (uint64_t)v220;
    __int128 v221 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v223 = (void *)swift_unknownObjectWeakLoadStrong(v221, v222);
    if (v223)
    {

      uint64_t v55 = v153;
      return (void *)swift_bridgeObjectRelease(v55);
    }

    goto LABEL_87;
  }

  uint64_t result = sub_100122D40(a1, &qword_100235828, type metadata accessor for DeviceSupportInformationRecord);
  if (result)
  {
    uint64_t v153 = (uint64_t)result;
    uint64_t v224 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v226 = swift_unknownObjectWeakLoadStrong(v224, v225);
    if (!v226) {
      goto LABEL_87;
    }
    uint64_t v157 = (void *)v226;
    uint64_t v228 = swift_unknownObjectWeakLoadStrong( v226 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v227);
    if (v228)
    {
      uint64_t v229 = (void *)v228;
      type metadata accessor for HMDeviceCloudRecord(0LL);
      uint64_t v230 = Array._bridgeToObjectiveC()().super.isa;
      [v229 hmDeviceCloudRecordsUpdatedWithRecords:v230];

      swift_bridgeObjectRelease(v153);
      return (void *)swift_unknownObjectRelease(v229);
    }

    goto LABEL_86;
  }

  return result;
}

  uint64_t v152 = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
  if (v152)
  {
    uint64_t v153 = (uint64_t)v152;
    uint64_t v154 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v156 = swift_unknownObjectWeakLoadStrong(v154, v155);
    if (!v156)
    {
LABEL_87:
      uint64_t v55 = v153;
      return (void *)swift_bridgeObjectRelease(v55);
    }

    uint64_t v157 = (void *)v156;
    sub_10009C630(v153);
LABEL_86:

    goto LABEL_87;
  }

  uint64_t v220 = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
  if (v220)
  {
    uint64_t v153 = (uint64_t)v220;
    __int128 v221 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v223 = (void *)swift_unknownObjectWeakLoadStrong(v221, v222);
    if (v223)
    {

      uint64_t v55 = v153;
      return (void *)swift_bridgeObjectRelease(v55);
    }

    goto LABEL_87;
  }

  uint64_t result = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
  if (result)
  {
    uint64_t v153 = (uint64_t)result;
    uint64_t v224 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v226 = swift_unknownObjectWeakLoadStrong(v224, v225);
    if (!v226) {
      goto LABEL_87;
    }
    uint64_t v157 = (void *)v226;
    uint64_t v228 = swift_unknownObjectWeakLoadStrong( v226 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v227);
    if (v228)
    {
      uint64_t v229 = (void *)v228;
      type metadata accessor for HMDeviceCloudRecord(0LL);
      uint64_t v230 = Array._bridgeToObjectiveC()().super.isa;
      [v229 hmDeviceCloudRecordsUpdatedWithRecords:v230];

      swift_bridgeObjectRelease(v153);
      return (void *)swift_unknownObjectRelease(v229);
    }

    goto LABEL_86;
  }

  return result;
}

void *sub_100124C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v278 = (uint64_t)&v262 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v274 = (uint64_t)&v262 - v7;
  uint64_t v8 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v8);
  char v267 = (char *)&v262 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v265 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  *(void *)&__int128 v264 = *(void *)(v265 - 8);
  __chkstk_darwin(v265);
  uint64_t v272 = (uint64_t)&v262 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v262 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v263 = (char *)&v262 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v270 = type metadata accessor for URL(0LL);
  uint64_t v269 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  uint64_t v268 = (char *)&v262 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v14);
  uint64_t v271 = (uint64_t)&v262 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DeviceRecord(0LL);
  unint64_t v276 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v262 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v275 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v273 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v20 = (char *)&v262 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v266 = (uint64_t *)((char *)&v262 - v22);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v262 - v24;
  unint64_t v277 = (void *)(a2 + 16);
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v28 = qword_10023DFC0;
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v31 = swift_bridgeObjectRetain(a1);
  uint64_t v32 = Array.description.getter(v31, v11);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10009914C();
  *(void *)(v30 + 32) = v32;
  *(void *)(v30 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19LL, 2LL, v30);
  swift_bridgeObjectRelease(v30);
  uint64_t v35 = sub_100122C10( a1,  &qword_100235828,  (void (*)(void, uint64_t, void, __n128))sub_100161128,  type metadata accessor for DeviceSupportInformationRecord);
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v37, v38);
    if (Strong)
    {
      uint64_t v41 = (void *)Strong;
      uint64_t v42 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v40);

      if (v42)
      {
        uint64_t v43 = _swiftEmptyArrayStorage;
        v282[0] = _swiftEmptyArrayStorage;
        uint64_t v44 = v36[2];
        if (v44)
        {
          unint64_t v277 = v36;
          uint64_t v278 = (uint64_t)v42;
          uint64_t v45 = (uint64_t)v36
              + ((*(unsigned __int8 *)(v273 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
          uint64_t v46 = *(void *)(v273 + 72);
          swift_bridgeObjectRetain(v36);
          unint64_t v47 = v275;
          do
          {
            sub_1000A7C90(v45, (uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            unint64_t v48 = &v25[*(int *)(v47 + 24)];
            uint64_t v49 = *((void *)v48 + 1);
            if (*(void *)v48 == 0xD000000000000011LL && v49 == 0x80000001001CCC20LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v48,  v49,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL) & 1) != 0)
            {
              sub_1000A7CD4((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            }

            else
            {
              id v50 = sub_1000BC2B0();
              uint64_t v51 = sub_1000A7CD4((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
              unint64_t v53 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v52 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v53 >= v52 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1LL);
              }
              uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
              specialized Array._endMutation()(v54);
              unint64_t v47 = v275;
            }

            v45 += v46;
            --v44;
          }

          while (v44);
          id v36 = v277;
          swift_bridgeObjectRelease(v277);
          uint64_t v43 = (void *)v282[0];
          uint64_t v42 = (void *)v278;
        }

        swift_bridgeObjectRelease(v36);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        [v42 magicPairingRecordsUpdatedWithRecords:v83.super.isa];
LABEL_29:

        return (void *)swift_unknownObjectRelease(v42);
      }
    }

    uint64_t v55 = (uint64_t)v36;
    return (void *)swift_bridgeObjectRelease(v55);
  }

  uint64_t v57 = sub_100122C10( a1,  &qword_100235828,  (void (*)(void, uint64_t, void, __n128))sub_100161180,  type metadata accessor for DeviceSupportInformationRecord);
  if (v57)
  {
    BOOL v58 = v57;
    uint64_t v59 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v61 = swift_unknownObjectWeakLoadStrong(v59, v60);
    unint64_t v63 = v275;
    uint64_t v64 = v273;
    if (v61)
    {
      uint64_t v65 = (void *)v61;
      uint64_t v66 = (void *)swift_unknownObjectWeakLoadStrong( v61 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v62);

      if (v66)
      {
        uint64_t v67 = _swiftEmptyArrayStorage;
        v282[0] = _swiftEmptyArrayStorage;
        uint64_t v68 = v58[2];
        if (v68)
        {
          uint64_t v274 = (uint64_t)v66;
          uint64_t v69 = (uint64_t)v58
              + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80));
          uint64_t v278 = *(void *)(v276 + 72);
          uint64_t v265 = (uint64_t)v58;
          swift_bridgeObjectRetain(v58);
          do
          {
            sub_1000A7C90(v69, (uint64_t)v18, type metadata accessor for DeviceRecord);
            uint64_t v70 = *(void *)&v18[*(int *)(v16 + 24) + 8];
            id v71 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
            swift_bridgeObjectRetain(v70);
            NSString v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v70);
            id v73 = [v71 initWithBluetoothAddress:v72];

            NSString v74 = String._bridgeToObjectiveC()();
            [v73 setNickname:v74];

            NSString v75 = String._bridgeToObjectiveC()();
            [v73 setModelNumber:v75];

            NSString v76 = String._bridgeToObjectiveC()();
            [v73 setManufacturer:v76];

            NSString v77 = String._bridgeToObjectiveC()();
            [v73 setProductID:v77];

            NSString v78 = String._bridgeToObjectiveC()();
            [v73 setVendorID:v78];

            uint64_t v79 = sub_1000A7CD4((uint64_t)v18, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            unint64_t v81 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v80 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v81 >= v80 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
            }
            uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v73);
            specialized Array._endMutation()(v82);
            v69 += v278;
            --v68;
          }

          while (v68);
          BOOL v58 = (void *)v265;
          swift_bridgeObjectRelease(v265);
          uint64_t v67 = (void *)v282[0];
          uint64_t v66 = (void *)v274;
          unint64_t v63 = v275;
          uint64_t v64 = v273;
        }

        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v67);
        [v66 devicesUpdatedWithRecords:isa];

        swift_unknownObjectRelease(v66);
      }
    }

    uint64_t v102 = v58[2];
    if (!v102)
    {
      uint64_t v55 = (uint64_t)v58;
      return (void *)swift_bridgeObjectRelease(v55);
    }

    unint64_t v103 = v276;
    uint64_t v104 = (uint64_t)v58
         + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80));
    uint64_t v265 = (uint64_t)v58;
    swift_bridgeObjectRetain(v58);
    char v267 = (char *)v102;
    uint64_t v105 = v277;
    swift_beginAccess(v277, v282, 0LL, 0LL);
    uint64_t v106 = v105;
    uint64_t v107 = (uint64_t)v267;
    swift_beginAccess(v106, v280, 0LL, 0LL);
    uint64_t v108 = 0LL;
    uint64_t v278 = *(void *)(v103 + 72);
    uint64_t v109 = v104;
    uint64_t v274 = (uint64_t)"ddress: %@ error: %@";
    unint64_t v276 = 0x80000001001CCC20LL;
    __int128 v264 = xmmword_1001A8ED0;
    uint64_t v110 = v271;
    uint64_t v272 = v109;
    while (1)
    {
      uint64_t v111 = (void *)(v109 + v278 * v108 + *(int *)(v16 + 24));
      uint64_t v112 = v111[1];
      if ((*v111 != 0xD000000000000011LL || v112 != v276)
        && (_stringCompareWithSmolCheck(_:_:expecting:)( *v111,  v112,  0xD000000000000011LL,  v274 | 0x8000000000000000LL,  0LL) & 1) == 0)
      {
        uint64_t v114 = swift_unknownObjectWeakLoadStrong(v277, v113);
        if (v114)
        {
          uint64_t v115 = (void *)v114;
          uint64_t v116 = sub_1000AE6C8(v114);

          id v117 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
          if ((v117 & 1) != 0)
          {
            uint64_t v118 = sub_10013A76C();
            if (qword_100234B70 != -1) {
              swift_once(&qword_100234B70, sub_1000CAF84);
            }
            uint64_t v119 = v270;
            uint64_t v120 = sub_100098D58(v270, (uint64_t)qword_10023DD70);
            uint64_t v121 = v269;
            uint64_t v122 = (uint64_t)v268;
            (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v120, v119);
            uint64_t v123 = sub_100139314( v122,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
            swift_release(v118);
            (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v119);
            unint64_t v63 = v275;
            uint64_t v64 = v273;
          }

          else
          {
            uint64_t v124 = static os_log_type_t.error.getter(v117);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v125 = v124;
            uint64_t v123 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v125,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          }

          uint64_t v109 = v272;
          swift_release(v116);
          uint64_t v126 = v123[2];
          if (v126)
          {
            uint64_t v127 = (uint64_t)v123
                 + ((*(unsigned __int8 *)(v64 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
            swift_bridgeObjectRetain(v123);
            uint64_t v128 = *(void *)(v64 + 72);
            while (1)
            {
              sub_1000A7C90(v127, (uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              uint64_t v129 = &v20[*(int *)(v63 + 24)];
              uint64_t v130 = *((void *)v129 + 1);
              uint64_t v131 = v111[1];
              BOOL v132 = *(void *)v129 == *v111 && v130 == v131;
              if (v132
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v129, v130, *v111, v131, 0LL) & 1) != 0)
              {
                break;
              }

              sub_1000A7CD4((uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              v127 += v128;
              if (!--v126)
              {
                swift_bridgeObjectRelease(v123);
                uint64_t v109 = v272;
                uint64_t v64 = v273;
                goto LABEL_65;
              }
            }

            swift_bridgeObjectRelease(v123);
            uint64_t v110 = v271;
            sub_1000C998C((uint64_t)v20, v271, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v64 = v273;
            (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v273 + 56))(v110, 0LL, 1LL, v63);
            uint64_t v109 = v272;
          }

          else
          {
LABEL_65:
            uint64_t v110 = v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v271, 1LL, 1LL, v63);
          }

          swift_bridgeObjectRelease(v123);
          int v133 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v64 + 48))(v110, 1LL, v63);
          uint64_t v107 = (uint64_t)v267;
          if (v133 != 1)
          {
            uint64_t v134 = (uint64_t)v266;
            sub_1000C998C(v110, (uint64_t)v266, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v136 = swift_unknownObjectWeakLoadStrong(v277, v135);
            if (v136)
            {
              uint64_t v138 = (void *)v136;
              id v139 = (void *)swift_unknownObjectWeakLoadStrong( v136 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v137);

              if (v139)
              {
                uint64_t v140 = sub_100098CD8(&qword_100236588);
                uint64_t v141 = swift_allocObject(v140, 40LL, 7LL);
                *(_OWORD *)(v141 + swift_unknownObjectWeakDestroy(v0 + 16) = v264;
                id v142 = sub_1000BC2B0();
                *(void *)(v141 + 32) = v142;
                v279[0] = v141;
                specialized Array._endMutation()(v142);
                uint64_t v143 = v279[0];
                sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
                Class v144 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v143);
                [v139 magicPairingRecordsUpdatedWithRecords:v144];
                swift_unknownObjectRelease(v139);

                uint64_t v110 = v271;
              }
            }

            sub_1000A7CD4(v134, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v107 = (uint64_t)v267;
            uint64_t v109 = v272;
            goto LABEL_44;
          }
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v110, 1LL, 1LL, v63);
          uint64_t v109 = v272;
        }

        sub_100099358(v110, (uint64_t *)&unk_100235810);
      }

void *sub_100126778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v278 = (uint64_t)&v262 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v274 = (uint64_t)&v262 - v7;
  uint64_t v8 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v8);
  char v267 = (char *)&v262 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v265 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  *(void *)&__int128 v264 = *(void *)(v265 - 8);
  __chkstk_darwin(v265);
  uint64_t v272 = (uint64_t)&v262 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v262 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v263 = (char *)&v262 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v270 = type metadata accessor for URL(0LL);
  uint64_t v269 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  uint64_t v268 = (char *)&v262 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v14);
  uint64_t v271 = (uint64_t)&v262 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DeviceRecord(0LL);
  unint64_t v276 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v262 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v275 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v273 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v20 = (char *)&v262 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v266 = (uint64_t *)((char *)&v262 - v22);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v262 - v24;
  unint64_t v277 = (void *)(a2 + 16);
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v28 = qword_10023DFC0;
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v31 = swift_bridgeObjectRetain(a1);
  uint64_t v32 = Array.description.getter(v31, v16);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10009914C();
  *(void *)(v30 + 32) = v32;
  *(void *)(v30 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19LL, 2LL, v30);
  swift_bridgeObjectRelease(v30);
  uint64_t v35 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_100161128,  type metadata accessor for DeviceRecord);
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v37, v38);
    if (Strong)
    {
      uint64_t v41 = (void *)Strong;
      uint64_t v42 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v40);

      if (v42)
      {
        uint64_t v43 = _swiftEmptyArrayStorage;
        v282[0] = _swiftEmptyArrayStorage;
        uint64_t v44 = v36[2];
        if (v44)
        {
          unint64_t v277 = v36;
          uint64_t v278 = (uint64_t)v42;
          uint64_t v45 = (uint64_t)v36
              + ((*(unsigned __int8 *)(v273 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
          uint64_t v46 = *(void *)(v273 + 72);
          swift_bridgeObjectRetain(v36);
          unint64_t v47 = v275;
          do
          {
            sub_1000A7C90(v45, (uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            unint64_t v48 = &v25[*(int *)(v47 + 24)];
            uint64_t v49 = *((void *)v48 + 1);
            if (*(void *)v48 == 0xD000000000000011LL && v49 == 0x80000001001CCC20LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v48,  v49,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL) & 1) != 0)
            {
              sub_1000A7CD4((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            }

            else
            {
              id v50 = sub_1000BC2B0();
              uint64_t v51 = sub_1000A7CD4((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
              unint64_t v53 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v52 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v53 >= v52 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1LL);
              }
              uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
              specialized Array._endMutation()(v54);
              unint64_t v47 = v275;
            }

            v45 += v46;
            --v44;
          }

          while (v44);
          id v36 = v277;
          swift_bridgeObjectRelease(v277);
          uint64_t v43 = (void *)v282[0];
          uint64_t v42 = (void *)v278;
        }

        swift_bridgeObjectRelease(v36);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        [v42 magicPairingRecordsUpdatedWithRecords:v83.super.isa];
LABEL_29:

        return (void *)swift_unknownObjectRelease(v42);
      }
    }

    uint64_t v55 = (uint64_t)v36;
    return (void *)swift_bridgeObjectRelease(v55);
  }

  uint64_t v57 = sub_100122E54( a1,  type metadata accessor for DeviceRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161180);
  if (v57)
  {
    BOOL v58 = v57;
    uint64_t v59 = v277;
    swift_beginAccess(v277, v283, 0LL, 0LL);
    uint64_t v61 = swift_unknownObjectWeakLoadStrong(v59, v60);
    unint64_t v63 = v275;
    uint64_t v64 = v273;
    if (v61)
    {
      uint64_t v65 = (void *)v61;
      uint64_t v66 = (void *)swift_unknownObjectWeakLoadStrong( v61 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v62);

      if (v66)
      {
        uint64_t v67 = _swiftEmptyArrayStorage;
        v282[0] = _swiftEmptyArrayStorage;
        uint64_t v68 = v58[2];
        if (v68)
        {
          uint64_t v274 = (uint64_t)v66;
          uint64_t v69 = (uint64_t)v58
              + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80));
          uint64_t v278 = *(void *)(v276 + 72);
          uint64_t v265 = (uint64_t)v58;
          swift_bridgeObjectRetain(v58);
          do
          {
            sub_1000A7C90(v69, (uint64_t)v18, type metadata accessor for DeviceRecord);
            uint64_t v70 = *(void *)&v18[*(int *)(v16 + 24) + 8];
            id v71 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
            swift_bridgeObjectRetain(v70);
            NSString v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v70);
            id v73 = [v71 initWithBluetoothAddress:v72];

            NSString v74 = String._bridgeToObjectiveC()();
            [v73 setNickname:v74];

            NSString v75 = String._bridgeToObjectiveC()();
            [v73 setModelNumber:v75];

            NSString v76 = String._bridgeToObjectiveC()();
            [v73 setManufacturer:v76];

            NSString v77 = String._bridgeToObjectiveC()();
            [v73 setProductID:v77];

            NSString v78 = String._bridgeToObjectiveC()();
            [v73 setVendorID:v78];

            uint64_t v79 = sub_1000A7CD4((uint64_t)v18, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            unint64_t v81 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v80 = *(void *)((v282[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v81 >= v80 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
            }
            uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v73);
            specialized Array._endMutation()(v82);
            v69 += v278;
            --v68;
          }

          while (v68);
          BOOL v58 = (void *)v265;
          swift_bridgeObjectRelease(v265);
          uint64_t v67 = (void *)v282[0];
          uint64_t v66 = (void *)v274;
          unint64_t v63 = v275;
          uint64_t v64 = v273;
        }

        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v67);
        [v66 devicesUpdatedWithRecords:isa];

        swift_unknownObjectRelease(v66);
      }
    }

    uint64_t v102 = v58[2];
    if (!v102)
    {
      uint64_t v55 = (uint64_t)v58;
      return (void *)swift_bridgeObjectRelease(v55);
    }

    unint64_t v103 = v276;
    uint64_t v104 = (uint64_t)v58
         + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80));
    uint64_t v265 = (uint64_t)v58;
    swift_bridgeObjectRetain(v58);
    char v267 = (char *)v102;
    uint64_t v105 = v277;
    swift_beginAccess(v277, v282, 0LL, 0LL);
    uint64_t v106 = v105;
    uint64_t v107 = (uint64_t)v267;
    swift_beginAccess(v106, v280, 0LL, 0LL);
    uint64_t v108 = 0LL;
    uint64_t v278 = *(void *)(v103 + 72);
    uint64_t v109 = v104;
    uint64_t v274 = (uint64_t)"ddress: %@ error: %@";
    unint64_t v276 = 0x80000001001CCC20LL;
    __int128 v264 = xmmword_1001A8ED0;
    uint64_t v110 = v271;
    uint64_t v272 = v109;
    while (1)
    {
      uint64_t v111 = (void *)(v109 + v278 * v108 + *(int *)(v16 + 24));
      uint64_t v112 = v111[1];
      if ((*v111 != 0xD000000000000011LL || v112 != v276)
        && (_stringCompareWithSmolCheck(_:_:expecting:)( *v111,  v112,  0xD000000000000011LL,  v274 | 0x8000000000000000LL,  0LL) & 1) == 0)
      {
        uint64_t v114 = swift_unknownObjectWeakLoadStrong(v277, v113);
        if (v114)
        {
          uint64_t v115 = (void *)v114;
          uint64_t v116 = sub_1000AE6C8(v114);

          id v117 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
          if ((v117 & 1) != 0)
          {
            uint64_t v118 = sub_10013A76C();
            if (qword_100234B70 != -1) {
              swift_once(&qword_100234B70, sub_1000CAF84);
            }
            uint64_t v119 = v270;
            uint64_t v120 = sub_100098D58(v270, (uint64_t)qword_10023DD70);
            uint64_t v121 = v269;
            uint64_t v122 = (uint64_t)v268;
            (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v120, v119);
            uint64_t v123 = sub_100139314( v122,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
            swift_release(v118);
            (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v119);
            unint64_t v63 = v275;
            uint64_t v64 = v273;
          }

          else
          {
            uint64_t v124 = static os_log_type_t.error.getter(v117);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v125 = v124;
            uint64_t v123 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v125,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          }

          uint64_t v109 = v272;
          swift_release(v116);
          uint64_t v126 = v123[2];
          if (v126)
          {
            uint64_t v127 = (uint64_t)v123
                 + ((*(unsigned __int8 *)(v64 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
            swift_bridgeObjectRetain(v123);
            uint64_t v128 = *(void *)(v64 + 72);
            while (1)
            {
              sub_1000A7C90(v127, (uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              uint64_t v129 = &v20[*(int *)(v63 + 24)];
              uint64_t v130 = *((void *)v129 + 1);
              uint64_t v131 = v111[1];
              BOOL v132 = *(void *)v129 == *v111 && v130 == v131;
              if (v132
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v129, v130, *v111, v131, 0LL) & 1) != 0)
              {
                break;
              }

              sub_1000A7CD4((uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              v127 += v128;
              if (!--v126)
              {
                swift_bridgeObjectRelease(v123);
                uint64_t v109 = v272;
                uint64_t v64 = v273;
                goto LABEL_65;
              }
            }

            swift_bridgeObjectRelease(v123);
            uint64_t v110 = v271;
            sub_1000C998C((uint64_t)v20, v271, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v64 = v273;
            (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v273 + 56))(v110, 0LL, 1LL, v63);
            uint64_t v109 = v272;
          }

          else
          {
LABEL_65:
            uint64_t v110 = v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v271, 1LL, 1LL, v63);
          }

          swift_bridgeObjectRelease(v123);
          int v133 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v64 + 48))(v110, 1LL, v63);
          uint64_t v107 = (uint64_t)v267;
          if (v133 != 1)
          {
            uint64_t v134 = (uint64_t)v266;
            sub_1000C998C(v110, (uint64_t)v266, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v136 = swift_unknownObjectWeakLoadStrong(v277, v135);
            if (v136)
            {
              uint64_t v138 = (void *)v136;
              id v139 = (void *)swift_unknownObjectWeakLoadStrong( v136 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v137);

              if (v139)
              {
                uint64_t v140 = sub_100098CD8(&qword_100236588);
                uint64_t v141 = swift_allocObject(v140, 40LL, 7LL);
                *(_OWORD *)(v141 + swift_unknownObjectWeakDestroy(v0 + 16) = v264;
                id v142 = sub_1000BC2B0();
                *(void *)(v141 + 32) = v142;
                v279[0] = v141;
                specialized Array._endMutation()(v142);
                uint64_t v143 = v279[0];
                sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
                Class v144 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v143);
                [v139 magicPairingRecordsUpdatedWithRecords:v144];
                swift_unknownObjectRelease(v139);

                uint64_t v110 = v271;
              }
            }

            sub_1000A7CD4(v134, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v107 = (uint64_t)v267;
            uint64_t v109 = v272;
            goto LABEL_44;
          }
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v110, 1LL, 1LL, v63);
          uint64_t v109 = v272;
        }

        sub_100099358(v110, (uint64_t *)&unk_100235810);
      }

uint64_t sub_1001282EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v10 = qword_10023DFC0;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v13 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  uint64_t v14 = swift_bridgeObjectRetain(a1);
  uint64_t v15 = Array.description.getter(v14, v13);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(a1);
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10009914C();
  *(void *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v17;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "records Updated: %@", 19LL, 2LL, v12);
  swift_bridgeObjectRelease(v12);
  int64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = _swiftEmptyArrayStorage;
  unint64_t v48 = _swiftEmptyArrayStorage;
  sub_100161128(0, v18, 0);
  uint64_t v20 = v48;
  if (v18)
  {
    swift_release(v48);
    unint64_t v48 = _swiftEmptyArrayStorage;
    sub_100161180(0, v18, 0);
    swift_release(v48);
    unint64_t v48 = _swiftEmptyArrayStorage;
    sub_100161154(0, v18, 0);
    swift_release(v48);
    unint64_t v48 = _swiftEmptyArrayStorage;
    sub_1001611C8(0, v18, 0);
    swift_release(v48);
    unint64_t v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    swift_release(v48);
    unint64_t v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    swift_release(v48);
    unint64_t v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    uint64_t v21 = v48;
    return swift_release(v21);
  }

  swift_beginAccess(a2 + 16, &v48, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2 + 16, v22);
  if (!Strong
    || (uint64_t v25 = (void *)Strong,
        uint64_t v26 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v24),  v25,  !v26))
  {
    uint64_t v21 = v20;
    return swift_release(v21);
  }

  unint64_t v47 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = v20[2];
  if (v27)
  {
    uint64_t v44 = v26;
    uint64_t v45 = v20;
    uint64_t v28 = (uint64_t)v20 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v29 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain(v20);
    unint64_t v30 = (unint64_t)"ddress: %@ error: %@";
    unint64_t v31 = 0x80000001001CCC20LL;
    unint64_t v46 = 0x80000001001CCC20LL;
    do
    {
      sub_1000A7C90(v28, (uint64_t)v7, type metadata accessor for MagicPairingSettingsRecord);
      uint64_t v32 = &v7[*(int *)(v4 + 24)];
      uint64_t v33 = *((void *)v32 + 1);
      if (*(void *)v32 == 0xD000000000000011LL && v33 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v32,  v33,  0xD000000000000011LL,  v30 | 0x8000000000000000LL,  0LL) & 1) != 0)
      {
        sub_1000A7CD4((uint64_t)v7, type metadata accessor for MagicPairingSettingsRecord);
      }

      else
      {
        uint64_t v34 = v4;
        uint64_t v35 = (char *)v30;
        id v36 = sub_1000BC2B0();
        uint64_t v37 = sub_1000A7CD4((uint64_t)v7, type metadata accessor for MagicPairingSettingsRecord);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
        unint64_t v39 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v38 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v39 >= v38 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1LL);
        }
        uint64_t v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v36);
        specialized Array._endMutation()(v40);
        unint64_t v30 = (unint64_t)v35;
        uint64_t v4 = v34;
        unint64_t v31 = v46;
      }

      v28 += v29;
      --v27;
    }

    while (v27);
    uint64_t v20 = v45;
    swift_release(v45);
    uint64_t v19 = (void *)v47;
    uint64_t v26 = v44;
  }

  swift_release(v20);
  sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  [v26 magicPairingRecordsUpdatedWithRecords:isa];

  return swift_unknownObjectRelease(v26);
}

void *sub_1001286F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v265 = (char *)&v249 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v261 = (uint64_t)&v249 - v7;
  uint64_t v8 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v8);
  id v253 = (char *)&v249 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v252 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  *(void *)&__int128 v251 = *(void *)(v252 - 8);
  __chkstk_darwin(v252);
  uint64_t v263 = (uint64_t)&v249 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v249 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v250 = (char *)&v249 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v258 = type metadata accessor for DeviceRecord(0LL);
  unint64_t v264 = *(void *)(v258 - 8);
  __chkstk_darwin(v258);
  uint64_t v14 = (char *)&v249 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v257 = type metadata accessor for URL(0LL);
  uint64_t v256 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  uint64_t v255 = (char *)&v249 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v16);
  uint64_t v259 = (uint64_t)&v249 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v266 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  int64_t v260 = *(void *)(v266 - 8);
  __chkstk_darwin(v266);
  uint64_t v19 = (char *)&v249 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  id v254 = (uint64_t *)((char *)&v249 - v21);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v249 - v23;
  uint64_t v262 = a2 + 16;
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v27 = qword_10023DFC0;
  uint64_t v28 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
  *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v30 = type metadata accessor for HMDeviceCloudRecord(0LL);
  uint64_t v31 = swift_bridgeObjectRetain(a1);
  uint64_t v32 = Array.description.getter(v31, v30);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 64) = sub_10009914C();
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "records Updated: %@", 19LL, 2LL, v29);
  swift_bridgeObjectRelease(v29);
  uint64_t v35 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = v262;
    swift_beginAccess(v262, v271, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v37, v38);
    if (Strong)
    {
      uint64_t v41 = (void *)Strong;
      uint64_t v42 = (char *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v40);

      if (v42)
      {
        uint64_t v43 = _swiftEmptyArrayStorage;
        v270[0] = _swiftEmptyArrayStorage;
        uint64_t v44 = *(void *)(v36 + 16);
        if (v44)
        {
          unint64_t v264 = v36;
          uint64_t v265 = v42;
          uint64_t v45 = v36 + ((*(unsigned __int8 *)(v260 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80));
          uint64_t v46 = *(void *)(v260 + 72);
          swift_bridgeObjectRetain(v36);
          do
          {
            sub_1000A7C90(v45, (uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
            unint64_t v47 = &v24[*(int *)(v266 + 24)];
            uint64_t v48 = *((void *)v47 + 1);
            if (*(void *)v47 == 0xD000000000000011LL && v48 == 0x80000001001CCC20LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v47,  v48,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL) & 1) != 0)
            {
              sub_1000A7CD4((uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
            }

            else
            {
              id v49 = sub_1000BC2B0();
              uint64_t v50 = sub_1000A7CD4((uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
              unint64_t v52 = *(void *)((v270[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v51 = *(void *)((v270[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v52 >= v51 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1LL);
              }
              uint64_t v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
              specialized Array._endMutation()(v53);
            }

            v45 += v46;
            --v44;
          }

          while (v44);
          uint64_t v36 = v264;
          swift_bridgeObjectRelease(v264);
          uint64_t v43 = (void *)v270[0];
          uint64_t v42 = v265;
        }

        swift_bridgeObjectRelease(v36);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v71.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        [v42 magicPairingRecordsUpdatedWithRecords:v71.super.isa];
LABEL_27:

        return (void *)swift_unknownObjectRelease(v42);
      }
    }

    return (void *)swift_bridgeObjectRelease(v36);
  }

  uint64_t v54 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  uint64_t v55 = v262;
  if (v54)
  {
    uint64_t v36 = v54;
    swift_beginAccess(v262, v271, 0LL, 0LL);
    uint64_t v57 = swift_unknownObjectWeakLoadStrong(v55, v56);
    uint64_t v59 = v266;
    if (v57)
    {
      uint64_t v60 = (void *)v57;
      uint64_t v61 = (void *)swift_unknownObjectWeakLoadStrong( v57 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v58);

      if (v61)
      {
        uint64_t v62 = _swiftEmptyArrayStorage;
        v270[0] = _swiftEmptyArrayStorage;
        uint64_t v63 = *(void *)(v36 + 16);
        if (v63)
        {
          uint64_t v64 = v36 + ((*(unsigned __int8 *)(v264 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v264 + 80));
          uint64_t v65 = *(void *)(v264 + 72);
          uint64_t v252 = v36;
          swift_bridgeObjectRetain(v36);
          do
          {
            sub_1000A7C90(v64, (uint64_t)v14, type metadata accessor for DeviceRecord);
            id v66 = sub_1000B1A88();
            uint64_t v67 = sub_1000A7CD4((uint64_t)v14, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
            unint64_t v69 = *(void *)((v270[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v68 = *(void *)((v270[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v69 >= v68 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1LL);
            }
            uint64_t v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v66);
            specialized Array._endMutation()(v70);
            v64 += v65;
            --v63;
          }

          while (v63);
          uint64_t v36 = v252;
          swift_bridgeObjectRelease(v252);
          uint64_t v62 = (void *)v270[0];
          uint64_t v59 = v266;
        }

        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v62);
        [v61 devicesUpdatedWithRecords:isa];

        swift_unknownObjectRelease(v61);
        uint64_t v55 = v262;
      }
    }

    uint64_t v90 = *(char **)(v36 + 16);
    int64_t v91 = v260;
    if (!v90) {
      return (void *)swift_bridgeObjectRelease(v36);
    }
    unint64_t v92 = v264;
    uint64_t v265 = (char *)(v36 + ((*(unsigned __int8 *)(v264 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v264 + 80)));
    uint64_t v252 = v36;
    swift_bridgeObjectRetain(v36);
    swift_beginAccess(v55, v270, 0LL, 0LL);
    swift_beginAccess(v55, v268, 0LL, 0LL);
    uint64_t v93 = 0LL;
    unint64_t v94 = *(void *)(v92 + 72);
    uint64_t v261 = (uint64_t)"ddress: %@ error: %@";
    uint64_t v263 = 0x80000001001CCC20LL;
    unint64_t v264 = v94;
    __int128 v251 = xmmword_1001A8ED0;
    uint64_t v95 = v258;
    id v253 = v90;
    while (1)
    {
      uint64_t v97 = &v265[v264 * v93 + *(int *)(v95 + 24)];
      uint64_t v98 = *((void *)v97 + 1);
      if ((*(void *)v97 != 0xD000000000000011LL || v98 != v263)
        && (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v97,  v98,  0xD000000000000011LL,  v261 | 0x8000000000000000LL,  0LL) & 1) == 0)
      {
        uint64_t v100 = swift_unknownObjectWeakLoadStrong(v55, v99);
        if (v100)
        {
          uint64_t v101 = (void *)v100;
          uint64_t v102 = sub_1000AE6C8(v100);

          id v103 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
          if ((v103 & 1) != 0)
          {
            uint64_t v104 = sub_10013A76C();
            if (qword_100234B70 != -1) {
              swift_once(&qword_100234B70, sub_1000CAF84);
            }
            uint64_t v105 = v257;
            uint64_t v106 = sub_100098D58(v257, (uint64_t)qword_10023DD70);
            uint64_t v107 = v256;
            uint64_t v108 = (uint64_t)v255;
            (*(void (**)(char *, uint64_t, uint64_t))(v256 + 16))(v255, v106, v105);
            uint64_t v109 = sub_100139314( v108,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
            swift_release(v104);
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v105);
            uint64_t v55 = v262;
            uint64_t v59 = v266;
            int64_t v91 = v260;
          }

          else
          {
            uint64_t v110 = static os_log_type_t.error.getter(v103);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v111 = v110;
            uint64_t v109 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v111,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          }

          swift_release(v102);
          uint64_t v112 = v109[2];
          if (v112)
          {
            uint64_t v113 = (uint64_t)v109
                 + ((*(unsigned __int8 *)(v91 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
            swift_bridgeObjectRetain(v109);
            uint64_t v114 = *(void *)(v91 + 72);
            while (1)
            {
              sub_1000A7C90(v113, (uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              uint64_t v115 = &v19[*(int *)(v59 + 24)];
              uint64_t v116 = *((void *)v115 + 1);
              uint64_t v117 = *((void *)v97 + 1);
              BOOL v118 = *(void *)v115 == *(void *)v97 && v116 == v117;
              if (v118
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v115, v116, *(void *)v97, v117, 0LL) & 1) != 0)
              {
                break;
              }

              sub_1000A7CD4((uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v113 += v114;
              if (!--v112)
              {
                swift_bridgeObjectRelease(v109);
                uint64_t v55 = v262;
                int64_t v91 = v260;
                goto LABEL_64;
              }
            }

            swift_bridgeObjectRelease(v109);
            uint64_t v96 = v259;
            sub_1000C998C((uint64_t)v19, v259, type metadata accessor for MagicPairingSettingsRecord);
            int64_t v91 = v260;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v260 + 56))(v96, 0LL, 1LL, v59);
            uint64_t v55 = v262;
          }

          else
          {
LABEL_64:
            uint64_t v96 = v259;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v259, 1LL, 1LL, v59);
          }

          swift_bridgeObjectRelease(v109);
          int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v96, 1LL, v59);
          uint64_t v95 = v258;
          uint64_t v90 = v253;
          if (v119 != 1)
          {
            uint64_t v120 = (uint64_t)v254;
            sub_1000C998C(v96, (uint64_t)v254, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v122 = swift_unknownObjectWeakLoadStrong(v55, v121);
            if (v122)
            {
              uint64_t v124 = (void *)v122;
              uint64_t v125 = (void *)swift_unknownObjectWeakLoadStrong( v122 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v123);

              if (v125)
              {
                uint64_t v126 = sub_100098CD8(&qword_100236588);
                uint64_t v127 = swift_allocObject(v126, 40LL, 7LL);
                *(_OWORD *)(v127 + swift_unknownObjectWeakDestroy(v0 + 16) = v251;
                id v128 = sub_1000BC2B0();
                *(void *)(v127 + 32) = v128;
                v267[0] = v127;
                specialized Array._endMutation()(v128);
                uint64_t v129 = v267[0];
                sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
                Class v130 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v129);
                [v125 magicPairingRecordsUpdatedWithRecords:v130];
                swift_unknownObjectRelease(v125);

                uint64_t v95 = v258;
              }
            }

            sub_1000A7CD4(v120, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v90 = v253;
            goto LABEL_43;
          }
        }

        else
        {
          uint64_t v96 = v259;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v259, 1LL, 1LL, v59);
        }

        sub_100099358(v96, (uint64_t *)&unk_100235810);
      }

LABEL_170:
            __break(1u);
            return result;
          }
        }

        else
        {
          uint64_t v229 = *(void *)((v227 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t result = (void *)swift_bridgeObjectRetain(v227);
          if (v229) {
            goto LABEL_152;
          }
        }

        swift_bridgeObjectRelease(v228);
        id v246 = _swiftEmptyArrayStorage;
LABEL_166:
        swift_bridgeObjectRelease(v228);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class v248 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v246);
        [v226 devicesUpdatedWithRecords:v248];
        swift_unknownObjectRelease(v226);

        return (void *)sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }

      id v253 = v154;
      sub_1000EF00C();
      int64_t v139 = v155;
      uint64_t v156 = v262;
      swift_beginAccess(v262, v270, 0LL, 0LL);
      uint64_t v158 = (void *)swift_unknownObjectWeakLoadStrong(v156, v157);
      swift_unknownObjectWeakInit(v267, v158);

      unint64_t v269 = (unint64_t)_swiftEmptyArrayStorage;
      if (!((unint64_t)v139 >> 62))
      {
        uint64_t v159 = *(void *)((v139 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t result = (void *)swift_bridgeObjectRetain(v139);
        if (!v159)
        {
LABEL_146:
          swift_bridgeObjectRelease(v139);
          uint64_t v210 = _swiftEmptyArrayStorage;
LABEL_147:
          swift_bridgeObjectRelease(v139);
          swift_unknownObjectWeakDestroy(v267);
          sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
          Class v219 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v210);
          uint64_t v220 = v253;
          [v253 magicPairingRecordsUpdatedWithRecords:v219];

          swift_unknownObjectRelease(v220);
          goto LABEL_148;
        }

LABEL_94:
        if (v159 < 1)
        {
          __break(1u);
          goto LABEL_170;
        }

        unint64_t v264 = v139 & 0xC000000000000001LL;
        swift_beginAccess(v267, v268, 0LL, 0LL);
        uint64_t v160 = 0LL;
        uint64_t v259 = v159;
        int64_t v260 = v139;
        do
        {
          if (v264) {
            id v161 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v160, v139);
          }
          else {
            id v161 = *(id *)(v139 + 8 * v160 + 32);
          }
          uint64_t v163 = v161;
          uint64_t v164 = swift_unknownObjectWeakLoadStrong(v267, v162);
          if (v164)
          {
            uint64_t v165 = (void *)v164;
            uint64_t v166 = sub_1000AE6C8(v164);
            uint64_t v167 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
            id v168 = [v167 isFirstUnlocked];
            uint64_t v266 = (uint64_t)v165;
            if ((_DWORD)v168)
            {
              uint64_t v169 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v170 = v257;
              uint64_t v171 = sub_100098D58(v257, (uint64_t)qword_10023DD48);
              uint64_t v172 = v256;
              uint64_t v173 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t))(v256 + 16))(v255, v171, v170);
              uint64_t v174 = sub_100139314( v173,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v169);
              (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v173, v170);
              uint64_t v175 = v174[2];
              uint64_t v176 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              uint64_t v177 = *(void *)(v176 - 8);
              if (v175)
              {
                uint64_t v136 = (void *)v261;
                sub_1000A7C90( (uint64_t)v174 + ((*(unsigned __int8 *)(v177 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80)),  v261,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v177 + 56))(v136, 0LL, 1LL, v176);
              }

              else
              {
                uint64_t v136 = (void *)v261;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56))(v261, 1LL, 1LL, v176);
              }

              swift_release(v166);
              swift_bridgeObjectRelease(v174);
              uint64_t v165 = (void *)v266;
            }

            else
            {
              uint64_t v178 = static os_log_type_t.error.getter(v168);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v178,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              uint64_t v176 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 56LL))( v136,  1LL,  1LL,  v176);
              swift_release(v166);
            }

            type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
            uint64_t v179 = *(void *)(v176 - 8);
            uint64_t v180 = *(uint64_t **)(v179 + 48);
            if (((unsigned int (*)(void *, uint64_t, uint64_t))v180)(v136, 1LL, v176) == 1)
            {
              sub_100099358((uint64_t)v136, (uint64_t *)&unk_1002357E0);
              Class v181 = 0LL;
            }

            else
            {
              uint64_t v182 = Data.subdata(in:)( 1LL,  17LL,  *(void *)((char *)v136 + *(int *)(v176 + 20)),  *(void *)((char *)v136 + *(int *)(v176 + 20) + 8));
              uint64_t v258 = v176;
              uint64_t v183 = v160;
              uint64_t v184 = v163;
              uint64_t v185 = v179;
              uint64_t v186 = v167;
              uint64_t v187 = v180;
              unint64_t v189 = v188;
              sub_1000A7CD4((uint64_t)v136, type metadata accessor for LegacyAccountMagicKeysRecord);
              Class v181 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v190 = v189;
              uint64_t v180 = v187;
              uint64_t v167 = v186;
              uint64_t v179 = v185;
              uint64_t v163 = v184;
              uint64_t v160 = v183;
              uint64_t v176 = v258;
              sub_100099394(v182, v190);
            }

            [v163 setMasterKey:v181];

            uint64_t v192 = sub_1000AE6C8(v191);
            id v193 = [v167 isFirstUnlocked];
            if ((_DWORD)v193)
            {
              id v254 = v180;
              uint64_t v258 = (uint64_t)v163;
              uint64_t v194 = sub_10013A76C();
              if (qword_100234B58 != -1) {
                swift_once(&qword_100234B58, sub_1000AA360);
              }
              uint64_t v195 = v257;
              uint64_t v196 = sub_100098D58(v257, (uint64_t)qword_10023DD48);
              uint64_t v197 = v256;
              uint64_t v198 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t))(v256 + 16))(v255, v196, v195);
              unint64_t v199 = sub_100139314( v198,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
              swift_release(v194);
              (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v195);
              if (v199[2])
              {
                uint64_t v200 = (uint64_t)v265;
                sub_1000A7C90( (uint64_t)v199 + ((*(unsigned __int8 *)(v179 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80)),  (uint64_t)v265,  type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56))(v200, 0LL, 1LL, v176);
              }

              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v265, 1LL, 1LL, v176);
              }

              swift_release(v192);
              swift_bridgeObjectRelease(v199);
              uint64_t v136 = (void *)v261;
              uint64_t v163 = (void *)v258;
              uint64_t v165 = (void *)v266;
              uint64_t v180 = v254;
            }

            else
            {
              uint64_t v201 = static os_log_type_t.error.getter(v193);
              if (qword_100234C28 != -1) {
                swift_once(&qword_100234C28, sub_10018A9E0);
              }
              os_log(_:dso:log:_:_:)( v201,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v265, 1LL, 1LL, v176);
              swift_release(v192);
            }

            if (((unsigned int (*)(char *, uint64_t, uint64_t))v180)(v265, 1LL, v176) == 1)
            {
              sub_100099358((uint64_t)v265, (uint64_t *)&unk_1002357E0);
              Class v202 = 0LL;
            }

            else
            {
              uint64_t v203 = (uint64_t)v265;
              uint64_t v204 = Data.subdata(in:)( 17LL,  33LL,  *(void *)&v265[*(int *)(v176 + 20)],  *(void *)&v265[*(int *)(v176 + 20) + 8]);
              unint64_t v206 = v205;
              sub_1000A7CD4(v203, type metadata accessor for LegacyAccountMagicKeysRecord);
              Class v202 = Data._bridgeToObjectiveC()().super.isa;
              sub_100099394(v204, v206);
            }

            uint64_t v159 = v259;
            int64_t v139 = v260;
            [v163 setMasterHint:v202];
          }

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v164);
          unint64_t v208 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v207 = *(void *)((v269 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v208 >= v207 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v207 > 1, v208 + 1, 1LL);
          }
          ++v160;
          uint64_t v209 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v208, v163);
          specialized Array._endMutation()(v209);
        }

        while (v159 != v160);
        swift_bridgeObjectRelease(v139);
        uint64_t v210 = (void *)v269;
        a1 = v263;
        goto LABEL_147;
      }

LABEL_142:
      if (v139 < 0) {
        uint64_t v218 = v139;
      }
      else {
        uint64_t v218 = v139 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v139);
      uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v218);
      uint64_t v159 = (uint64_t)result;
      if (!result) {
        goto LABEL_146;
      }
      goto LABEL_94;
    }

    sub_100099358((uint64_t)v134, &qword_1002357D8);
    uint64_t v55 = v262;
  }

  uint64_t v136 = _swiftEmptyArrayStorage;
  v271[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v138 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    specialized ContiguousArray.reserveCapacity(_:)(v138);
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_82;
    }
LABEL_137:
    uint64_t v213 = v271[0];
    swift_beginAccess(v55, v271, 0LL, 0LL);
    uint64_t v215 = swift_unknownObjectWeakLoadStrong(v55, v214);
    if (v215)
    {
      unint64_t v216 = (void *)v215;
      sub_10009C630(v213);
    }

    return (void *)swift_release(v213);
  }

  if (a1 < 0) {
    uint64_t v211 = a1;
  }
  else {
    uint64_t v211 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v138 = _CocoaArrayWrapper.endIndex.getter(v211);
  swift_bridgeObjectRelease(a1);
  specialized ContiguousArray.reserveCapacity(_:)(v138);
  swift_bridgeObjectRetain(a1);
  uint64_t v212 = _CocoaArrayWrapper.endIndex.getter(v211);
  swift_bridgeObjectRelease(a1);
  if (!v212) {
    goto LABEL_137;
  }
LABEL_82:
  int64_t v139 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_84;
    }
    __break(1u);
    goto LABEL_142;
  }

  uint64_t v217 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  swift_unknownObjectRelease(v217);
LABEL_84:
  swift_release(v271[0]);
  v271[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v138);
  if (v139)
  {
    uint64_t v140 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v140);
  }

  swift_release(v271[0]);
  uint64_t result = sub_100122A9C(a1);
  if (result)
  {
    uint64_t v141 = result;
    swift_beginAccess(v55, v271, 0LL, 0LL);
    uint64_t v143 = swift_unknownObjectWeakLoadStrong(v55, v142);
    if (v143)
    {
      Class v145 = (void *)v143;
      uint64_t v146 = swift_unknownObjectWeakLoadStrong( v143 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v144);
      if (v146)
      {
        uint64_t v147 = (void *)v146;
        Class v148 = Array._bridgeToObjectiveC()().super.isa;
        [v147 hmDeviceCloudRecordsUpdatedWithRecords:v148];

        swift_bridgeObjectRelease(v141);
        return (void *)swift_unknownObjectRelease(v147);
      }
    }

    return (void *)swift_bridgeObjectRelease(v141);
  }

  return result;
}

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
}

uint64_t sub_10012A134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v258 = (char *)&v242 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v255 = (uint64_t)&v242 - v7;
  uint64_t v8 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v8);
  id v246 = (char *)&v242 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v245 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  *(void *)&__int128 v244 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v256 = (uint64_t)&v242 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v242 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v243 = (char *)&v242 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v252 = type metadata accessor for DeviceRecord(0LL);
  unint64_t v257 = *(void *)(v252 - 8);
  __chkstk_darwin(v252);
  uint64_t v14 = (char *)&v242 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v251 = type metadata accessor for URL(0LL);
  uint64_t v250 = *(void *)(v251 - 8);
  __chkstk_darwin(v251);
  uint64_t v249 = (char *)&v242 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v16);
  uint64_t v253 = (uint64_t)&v242 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v259 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  int64_t v254 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v19 = (char *)&v242 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  Class v248 = (uint64_t *)((char *)&v242 - v21);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v242 - v23;
  uint64_t v25 = a2 + 16;
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v28 = qword_10023DFC0;
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v31 = type metadata accessor for AAProxCardsRecord(0LL);
  uint64_t v32 = swift_bridgeObjectRetain(a1);
  uint64_t v33 = Array.description.getter(v32, v31);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease(a1);
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10009914C();
  *(void *)(v30 + 32) = v33;
  *(void *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19LL, 2LL, v30);
  swift_bridgeObjectRelease(v30);
  uint64_t v36 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v36)
  {
    uint64_t v37 = v36;
    swift_beginAccess(v25, v264, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25, v38);
    if (Strong)
    {
      uint64_t v41 = (void *)Strong;
      uint64_t v42 = (char *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v40);

      if (v42)
      {
        uint64_t v43 = _swiftEmptyArrayStorage;
        v263[0] = _swiftEmptyArrayStorage;
        uint64_t v44 = *(void *)(v37 + 16);
        if (v44)
        {
          unint64_t v257 = v37;
          uint64_t v258 = v42;
          uint64_t v45 = v37 + ((*(unsigned __int8 *)(v254 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80));
          uint64_t v46 = *(void *)(v254 + 72);
          swift_bridgeObjectRetain(v37);
          do
          {
            sub_1000A7C90(v45, (uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
            unint64_t v47 = &v24[*(int *)(v259 + 24)];
            uint64_t v48 = *((void *)v47 + 1);
            if (*(void *)v47 == 0xD000000000000011LL && v48 == 0x80000001001CCC20LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v47,  v48,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL) & 1) != 0)
            {
              sub_1000A7CD4((uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
            }

            else
            {
              id v49 = sub_1000BC2B0();
              uint64_t v50 = sub_1000A7CD4((uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
              unint64_t v52 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v51 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v52 >= v51 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1LL);
              }
              uint64_t v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
              specialized Array._endMutation()(v53);
            }

            v45 += v46;
            --v44;
          }

          while (v44);
          uint64_t v37 = v257;
          swift_bridgeObjectRelease(v257);
          uint64_t v43 = (void *)v263[0];
          uint64_t v42 = v258;
        }

        swift_bridgeObjectRelease(v37);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v70.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        [v42 magicPairingRecordsUpdatedWithRecords:v70.super.isa];
LABEL_27:

        return swift_unknownObjectRelease(v42);
      }
    }

    return swift_bridgeObjectRelease(v37);
  }

  uint64_t v54 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  uint64_t v55 = v25;
  uint64_t v247 = v25;
  if (v54)
  {
    uint64_t v37 = v54;
    swift_beginAccess(v25, v264, 0LL, 0LL);
    uint64_t v57 = swift_unknownObjectWeakLoadStrong(v25, v56);
    if (v57)
    {
      uint64_t v59 = (void *)v57;
      uint64_t v60 = (void *)swift_unknownObjectWeakLoadStrong( v57 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v58);

      if (v60)
      {
        uint64_t v61 = _swiftEmptyArrayStorage;
        v263[0] = _swiftEmptyArrayStorage;
        uint64_t v62 = *(void *)(v37 + 16);
        if (v62)
        {
          uint64_t v63 = v37 + ((*(unsigned __int8 *)(v257 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v257 + 80));
          uint64_t v64 = *(void *)(v257 + 72);
          uint64_t v245 = v37;
          swift_bridgeObjectRetain(v37);
          do
          {
            sub_1000A7C90(v63, (uint64_t)v14, type metadata accessor for DeviceRecord);
            id v65 = sub_1000B1A88();
            uint64_t v66 = sub_1000A7CD4((uint64_t)v14, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
            unint64_t v68 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v67 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v68 >= v67 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1LL);
            }
            uint64_t v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v65);
            specialized Array._endMutation()(v69);
            v63 += v64;
            --v62;
          }

          while (v62);
          uint64_t v37 = v245;
          swift_bridgeObjectRelease(v245);
          uint64_t v61 = (void *)v263[0];
        }

        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v61);
        [v60 devicesUpdatedWithRecords:isa];

        swift_unknownObjectRelease(v60);
        uint64_t v55 = v247;
      }
    }

    uint64_t v89 = *(char **)(v37 + 16);
    int64_t v90 = v254;
    if (!v89) {
      return swift_bridgeObjectRelease(v37);
    }
    unint64_t v91 = v257;
    uint64_t v258 = (char *)(v37 + ((*(unsigned __int8 *)(v257 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v257 + 80)));
    uint64_t v245 = v37;
    swift_bridgeObjectRetain(v37);
    swift_beginAccess(v55, v263, 0LL, 0LL);
    swift_beginAccess(v55, v261, 0LL, 0LL);
    uint64_t v92 = 0LL;
    unint64_t v93 = *(void *)(v91 + 72);
    uint64_t v255 = (uint64_t)"ddress: %@ error: %@";
    uint64_t v256 = 0x80000001001CCC20LL;
    unint64_t v257 = v93;
    __int128 v244 = xmmword_1001A8ED0;
    uint64_t v94 = v259;
    uint64_t v95 = v252;
    id v246 = v89;
    while (1)
    {
      uint64_t v97 = &v258[v257 * v92 + *(int *)(v95 + 24)];
      uint64_t v98 = *((void *)v97 + 1);
      if ((*(void *)v97 != 0xD000000000000011LL || v98 != v256)
        && (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v97,  v98,  0xD000000000000011LL,  v255 | 0x8000000000000000LL,  0LL) & 1) == 0)
      {
        uint64_t v100 = swift_unknownObjectWeakLoadStrong(v55, v99);
        if (v100)
        {
          uint64_t v101 = (void *)v100;
          uint64_t v102 = sub_1000AE6C8(v100);

          id v103 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
          if ((v103 & 1) != 0)
          {
            uint64_t v104 = sub_10013A76C();
            if (qword_100234B70 != -1) {
              swift_once(&qword_100234B70, sub_1000CAF84);
            }
            uint64_t v105 = v251;
            uint64_t v106 = sub_100098D58(v251, (uint64_t)qword_10023DD70);
            uint64_t v107 = v250;
            uint64_t v108 = (uint64_t)v249;
            (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v106, v105);
            uint64_t v109 = sub_100139314( v108,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
            swift_release(v104);
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v105);
            uint64_t v94 = v259;
            uint64_t v55 = v247;
            int64_t v90 = v254;
          }

          else
          {
            uint64_t v110 = static os_log_type_t.error.getter(v103);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v111 = v110;
            uint64_t v109 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v111,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          }

          swift_release(v102);
          uint64_t v112 = v109[2];
          if (v112)
          {
            uint64_t v113 = (uint64_t)v109
                 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
            swift_bridgeObjectRetain(v109);
            uint64_t v114 = *(void *)(v90 + 72);
            while (1)
            {
              sub_1000A7C90(v113, (uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              uint64_t v115 = &v19[*(int *)(v94 + 24)];
              uint64_t v116 = *((void *)v115 + 1);
              uint64_t v117 = *((void *)v97 + 1);
              BOOL v118 = *(void *)v115 == *(void *)v97 && v116 == v117;
              if (v118
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v115, v116, *(void *)v97, v117, 0LL) & 1) != 0)
              {
                break;
              }

              sub_1000A7CD4((uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v113 += v114;
              if (!--v112)
              {
                swift_bridgeObjectRelease(v109);
                uint64_t v55 = v247;
                int64_t v90 = v254;
                goto LABEL_64;
              }
            }

            swift_bridgeObjectRelease(v109);
            uint64_t v96 = v253;
            sub_1000C998C((uint64_t)v19, v253, type metadata accessor for MagicPairingSettingsRecord);
            int64_t v90 = v254;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v254 + 56))(v96, 0LL, 1LL, v94);
            uint64_t v55 = v247;
          }

          else
          {
LABEL_64:
            uint64_t v96 = v253;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v253, 1LL, 1LL, v94);
          }

          swift_bridgeObjectRelease(v109);
          int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v96, 1LL, v94);
          uint64_t v95 = v252;
          uint64_t v89 = v246;
          if (v119 != 1)
          {
            uint64_t v120 = (uint64_t)v248;
            sub_1000C998C(v96, (uint64_t)v248, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v122 = swift_unknownObjectWeakLoadStrong(v55, v121);
            if (v122)
            {
              uint64_t v124 = (void *)v122;
              uint64_t v125 = (void *)swift_unknownObjectWeakLoadStrong( v122 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v123);

              if (v125)
              {
                uint64_t v126 = sub_100098CD8(&qword_100236588);
                uint64_t v127 = swift_allocObject(v126, 40LL, 7LL);
                *(_OWORD *)(v127 + swift_unknownObjectWeakDestroy(v0 + 16) = v244;
                id v128 = sub_1000BC2B0();
                *(void *)(v127 + 32) = v128;
                v260[0] = v127;
                specialized Array._endMutation()(v128);
                uint64_t v129 = v260[0];
                sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
                Class v130 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v129);
                [v125 magicPairingRecordsUpdatedWithRecords:v130];
                swift_unknownObjectRelease(v125);

                uint64_t v95 = v252;
              }
            }

            sub_1000A7CD4(v120, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v89 = v246;
            goto LABEL_43;
          }
        }

        else
        {
          uint64_t v96 = v253;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v253, 1LL, 1LL, v94);
        }

        sub_100099358(v96, (uint64_t *)&unk_100235810);
      }

LABEL_168:
              __break(1u);
              return result;
            }
          }

          else
          {
            uint64_t v222 = *(void *)((v220 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            uint64_t result = swift_bridgeObjectRetain(v220);
            if (v222) {
              goto LABEL_151;
            }
          }

          swift_bridgeObjectRelease(v221);
          id v239 = _swiftEmptyArrayStorage;
LABEL_165:
          swift_bridgeObjectRelease(v221);
          sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
          Class v241 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v239);
          [v219 devicesUpdatedWithRecords:v241];
          swift_unknownObjectRelease(v219);

          return sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        }

        id v246 = v148;
        sub_1000EF00C();
        int64_t v139 = v149;
        swift_beginAccess(v25, v263, 0LL, 0LL);
        uint64_t v151 = (void *)swift_unknownObjectWeakLoadStrong(v25, v150);
        swift_unknownObjectWeakInit(v260, v151);

        unint64_t v262 = (unint64_t)_swiftEmptyArrayStorage;
        if (!((unint64_t)v139 >> 62))
        {
          uint64_t v152 = *(void *)((v139 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t result = swift_bridgeObjectRetain(v139);
          if (!v152)
          {
LABEL_145:
            swift_bridgeObjectRelease(v139);
            uint64_t v204 = _swiftEmptyArrayStorage;
LABEL_146:
            swift_bridgeObjectRelease(v139);
            swift_unknownObjectWeakDestroy(v260);
            sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
            Class v213 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v204);
            uint64_t v214 = v246;
            [v246 magicPairingRecordsUpdatedWithRecords:v213];

            swift_unknownObjectRelease(v214);
            goto LABEL_147;
          }

              __break(1u);
              return result;
            }
          }

          else
          {
            uint64_t v222 = *(void *)((v220 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            uint64_t result = swift_bridgeObjectRetain(v220);
            if (v222) {
              goto LABEL_151;
            }
          }

          swift_bridgeObjectRelease(v221);
          id v239 = _swiftEmptyArrayStorage;
LABEL_165:
          swift_bridgeObjectRelease(v221);
          sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
          Class v241 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v239);
          [v219 devicesUpdatedWithRecords:v241];
          swift_unknownObjectRelease(v219);

          return sub_1000A7CD4(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        }

        id v246 = v147;
        sub_1000EF00C();
        int64_t v149 = v148;
        swift_beginAccess(v25, v263, 0LL, 0LL);
        uint64_t v151 = (void *)swift_unknownObjectWeakLoadStrong(v25, v150);
        swift_unknownObjectWeakInit(v260, v151);

        unint64_t v262 = (unint64_t)_swiftEmptyArrayStorage;
        if (!((unint64_t)v149 >> 62))
        {
          uint64_t v152 = *(void *)((v149 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t result = swift_bridgeObjectRetain(v149);
          if (!v152)
          {
LABEL_145:
            swift_bridgeObjectRelease(v149);
            uint64_t v205 = _swiftEmptyArrayStorage;
LABEL_146:
            swift_bridgeObjectRelease(v149);
            swift_unknownObjectWeakDestroy(v260);
            sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
            Class v213 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v205);
            uint64_t v214 = v246;
            [v246 magicPairingRecordsUpdatedWithRecords:v213];

            swift_unknownObjectRelease(v214);
            goto LABEL_147;
          }

LABEL_92:
          if (v152 < 1)
          {
            __break(1u);
            goto LABEL_168;
          }

          unint64_t v257 = v139 & 0xC000000000000001LL;
          swift_beginAccess(v260, v261, 0LL, 0LL);
          uint64_t v153 = 0LL;
          uint64_t v253 = v152;
          int64_t v254 = v139;
          do
          {
            if (v257) {
              id v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v153, v139);
            }
            else {
              id v154 = *(id *)(v139 + 8 * v153 + 32);
            }
            uint64_t v156 = v154;
            uint64_t v157 = swift_unknownObjectWeakLoadStrong(v260, v155);
            if (v157)
            {
              uint64_t v158 = (void *)v157;
              uint64_t v159 = sub_1000AE6C8(v157);
              uint64_t v160 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
              id v161 = [v160 isFirstUnlocked];
              uint64_t v259 = (uint64_t)v158;
              if ((_DWORD)v161)
              {
                uint64_t v162 = sub_10013A76C();
                if (qword_100234B58 != -1) {
                  swift_once(&qword_100234B58, sub_1000AA360);
                }
                uint64_t v163 = v251;
                uint64_t v164 = sub_100098D58(v251, (uint64_t)qword_10023DD48);
                uint64_t v165 = v250;
                uint64_t v166 = (uint64_t)v249;
                (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v164, v163);
                uint64_t v167 = sub_100139314( v166,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
                swift_release(v162);
                (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v166, v163);
                uint64_t v168 = v167[2];
                uint64_t v169 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
                uint64_t v170 = *(void *)(v169 - 8);
                if (v168)
                {
                  uint64_t v136 = (void *)v255;
                  sub_1000A7C90( (uint64_t)v167 + ((*(unsigned __int8 *)(v170 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80)),  v255,  type metadata accessor for LegacyAccountMagicKeysRecord);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(v136, 0LL, 1LL, v169);
                }

                else
                {
                  uint64_t v136 = (void *)v255;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56))(v255, 1LL, 1LL, v169);
                }

                swift_release(v159);
                swift_bridgeObjectRelease(v167);
                uint64_t v158 = (void *)v259;
              }

              else
              {
                uint64_t v171 = static os_log_type_t.error.getter(v161);
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                os_log(_:dso:log:_:_:)( v171,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
                uint64_t v169 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
                (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 56LL))( v136,  1LL,  1LL,  v169);
                swift_release(v159);
              }

              type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
              uint64_t v172 = *(void *)(v169 - 8);
              uint64_t v173 = *(uint64_t **)(v172 + 48);
              if (((unsigned int (*)(void *, uint64_t, uint64_t))v173)(v136, 1LL, v169) == 1)
              {
                sub_100099358((uint64_t)v136, (uint64_t *)&unk_1002357E0);
                Class v174 = 0LL;
              }

              else
              {
                uint64_t v175 = Data.subdata(in:)( 1LL,  17LL,  *(void *)((char *)v136 + *(int *)(v169 + 20)),  *(void *)((char *)v136 + *(int *)(v169 + 20) + 8));
                uint64_t v252 = v169;
                uint64_t v176 = v153;
                uint64_t v177 = v156;
                uint64_t v178 = v172;
                uint64_t v179 = v160;
                uint64_t v180 = v173;
                unint64_t v182 = v181;
                sub_1000A7CD4((uint64_t)v136, type metadata accessor for LegacyAccountMagicKeysRecord);
                Class v174 = Data._bridgeToObjectiveC()().super.isa;
                unint64_t v183 = v182;
                uint64_t v173 = v180;
                uint64_t v160 = v179;
                uint64_t v172 = v178;
                uint64_t v156 = v177;
                uint64_t v153 = v176;
                uint64_t v169 = v252;
                sub_100099394(v175, v183);
              }

              [v156 setMasterKey:v174];

              uint64_t v185 = sub_1000AE6C8(v184);
              id v186 = [v160 isFirstUnlocked];
              if ((_DWORD)v186)
              {
                Class v248 = v173;
                uint64_t v252 = (uint64_t)v156;
                uint64_t v187 = sub_10013A76C();
                if (qword_100234B58 != -1) {
                  swift_once(&qword_100234B58, sub_1000AA360);
                }
                uint64_t v188 = v251;
                uint64_t v189 = sub_100098D58(v251, (uint64_t)qword_10023DD48);
                uint64_t v190 = v250;
                uint64_t v191 = (uint64_t)v249;
                (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v189, v188);
                uint64_t v192 = sub_100139314( v191,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
                swift_release(v187);
                (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v191, v188);
                if (v192[2])
                {
                  uint64_t v193 = (uint64_t)v258;
                  sub_1000A7C90( (uint64_t)v192 + ((*(unsigned __int8 *)(v172 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80)),  (uint64_t)v258,  type metadata accessor for LegacyAccountMagicKeysRecord);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v172 + 56))(v193, 0LL, 1LL, v169);
                }

                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v258, 1LL, 1LL, v169);
                }

                swift_release(v185);
                swift_bridgeObjectRelease(v192);
                uint64_t v136 = (void *)v255;
                uint64_t v156 = (void *)v252;
                uint64_t v158 = (void *)v259;
                uint64_t v173 = v248;
              }

              else
              {
                uint64_t v194 = static os_log_type_t.error.getter(v186);
                if (qword_100234C28 != -1) {
                  swift_once(&qword_100234C28, sub_10018A9E0);
                }
                os_log(_:dso:log:_:_:)( v194,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v258, 1LL, 1LL, v169);
                swift_release(v185);
              }

              if (((unsigned int (*)(char *, uint64_t, uint64_t))v173)(v258, 1LL, v169) == 1)
              {
                sub_100099358((uint64_t)v258, (uint64_t *)&unk_1002357E0);
                Class v195 = 0LL;
              }

              else
              {
                uint64_t v196 = (uint64_t)v258;
                uint64_t v197 = Data.subdata(in:)( 17LL,  33LL,  *(void *)&v258[*(int *)(v169 + 20)],  *(void *)&v258[*(int *)(v169 + 20) + 8]);
                unint64_t v199 = v198;
                sub_1000A7CD4(v196, type metadata accessor for LegacyAccountMagicKeysRecord);
                Class v195 = Data._bridgeToObjectiveC()().super.isa;
                sub_100099394(v197, v199);
              }

              uint64_t v152 = v253;
              int64_t v139 = v254;
              [v156 setMasterHint:v195];
            }

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v157);
            unint64_t v201 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v200 = *(void *)((v262 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v201 >= v200 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v200 > 1, v201 + 1, 1LL);
            }
            ++v153;
            uint64_t v202 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v201, v156);
            specialized Array._endMutation()(v202);
          }

          while (v152 != v153);
          swift_bridgeObjectRelease(v139);
          uint64_t v204 = (void *)v262;
          uint64_t v25 = v247;
          a1 = v256;
          goto LABEL_146;
        }

uint64_t sub_10012BB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v258 = (char *)&v242 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v255 = (uint64_t)&v242 - v7;
  uint64_t v8 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v8);
  id v246 = (char *)&v242 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v245 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  *(void *)&__int128 v244 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v256 = (uint64_t)&v242 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v242 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v243 = (char *)&v242 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v252 = type metadata accessor for DeviceRecord(0LL);
  unint64_t v257 = *(void *)(v252 - 8);
  __chkstk_darwin(v252);
  uint64_t v14 = (char *)&v242 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v251 = type metadata accessor for URL(0LL);
  uint64_t v250 = *(void *)(v251 - 8);
  __chkstk_darwin(v251);
  uint64_t v249 = (char *)&v242 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v16);
  uint64_t v253 = (uint64_t)&v242 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v259 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  int64_t v254 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v19 = (char *)&v242 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  Class v248 = (uint64_t *)((char *)&v242 - v21);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v242 - v23;
  uint64_t v25 = a2 + 16;
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v28 = qword_10023DFC0;
  uint64_t v29 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v31 = type metadata accessor for AADeviceRecord(0LL);
  uint64_t v32 = swift_bridgeObjectRetain(a1);
  uint64_t v33 = Array.description.getter(v32, v31);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease(a1);
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10009914C();
  *(void *)(v30 + 32) = v33;
  *(void *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19LL, 2LL, v30);
  swift_bridgeObjectRelease(v30);
  uint64_t v36 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v36)
  {
    uint64_t v37 = v36;
    swift_beginAccess(v25, v264, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25, v38);
    if (Strong)
    {
      uint64_t v41 = (void *)Strong;
      uint64_t v42 = (char *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v40);

      if (v42)
      {
        uint64_t v43 = _swiftEmptyArrayStorage;
        v263[0] = _swiftEmptyArrayStorage;
        uint64_t v44 = *(void *)(v37 + 16);
        if (v44)
        {
          unint64_t v257 = v37;
          uint64_t v258 = v42;
          uint64_t v45 = v37 + ((*(unsigned __int8 *)(v254 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80));
          uint64_t v46 = *(void *)(v254 + 72);
          swift_bridgeObjectRetain(v37);
          do
          {
            sub_1000A7C90(v45, (uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
            unint64_t v47 = &v24[*(int *)(v259 + 24)];
            uint64_t v48 = *((void *)v47 + 1);
            if (*(void *)v47 == 0xD000000000000011LL && v48 == 0x80000001001CCC20LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v47,  v48,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL) & 1) != 0)
            {
              sub_1000A7CD4((uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
            }

            else
            {
              id v49 = sub_1000BC2B0();
              uint64_t v50 = sub_1000A7CD4((uint64_t)v24, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
              unint64_t v52 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v51 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v52 >= v51 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1LL);
              }
              uint64_t v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
              specialized Array._endMutation()(v53);
            }

            v45 += v46;
            --v44;
          }

          while (v44);
          uint64_t v37 = v257;
          swift_bridgeObjectRelease(v257);
          uint64_t v43 = (void *)v263[0];
          uint64_t v42 = v258;
        }

        swift_bridgeObjectRelease(v37);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v70.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        [v42 magicPairingRecordsUpdatedWithRecords:v70.super.isa];
LABEL_27:

        return swift_unknownObjectRelease(v42);
      }
    }

    return swift_bridgeObjectRelease(v37);
  }

  uint64_t v54 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  uint64_t v55 = v25;
  uint64_t v247 = v25;
  if (v54)
  {
    uint64_t v37 = v54;
    swift_beginAccess(v25, v264, 0LL, 0LL);
    uint64_t v57 = swift_unknownObjectWeakLoadStrong(v25, v56);
    if (v57)
    {
      uint64_t v59 = (void *)v57;
      uint64_t v60 = (void *)swift_unknownObjectWeakLoadStrong( v57 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v58);

      if (v60)
      {
        uint64_t v61 = _swiftEmptyArrayStorage;
        v263[0] = _swiftEmptyArrayStorage;
        uint64_t v62 = *(void *)(v37 + 16);
        if (v62)
        {
          uint64_t v63 = v37 + ((*(unsigned __int8 *)(v257 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v257 + 80));
          uint64_t v64 = *(void *)(v257 + 72);
          uint64_t v245 = v37;
          swift_bridgeObjectRetain(v37);
          do
          {
            sub_1000A7C90(v63, (uint64_t)v14, type metadata accessor for DeviceRecord);
            id v65 = sub_1000B1A88();
            uint64_t v66 = sub_1000A7CD4((uint64_t)v14, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
            unint64_t v68 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v67 = *(void *)((v263[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v68 >= v67 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1LL);
            }
            uint64_t v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v65);
            specialized Array._endMutation()(v69);
            v63 += v64;
            --v62;
          }

          while (v62);
          uint64_t v37 = v245;
          swift_bridgeObjectRelease(v245);
          uint64_t v61 = (void *)v263[0];
        }

        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v61);
        [v60 devicesUpdatedWithRecords:isa];

        swift_unknownObjectRelease(v60);
        uint64_t v55 = v247;
      }
    }

    uint64_t v89 = *(char **)(v37 + 16);
    int64_t v90 = v254;
    if (!v89) {
      return swift_bridgeObjectRelease(v37);
    }
    unint64_t v91 = v257;
    uint64_t v258 = (char *)(v37 + ((*(unsigned __int8 *)(v257 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v257 + 80)));
    uint64_t v245 = v37;
    swift_bridgeObjectRetain(v37);
    swift_beginAccess(v55, v263, 0LL, 0LL);
    swift_beginAccess(v55, v261, 0LL, 0LL);
    uint64_t v92 = 0LL;
    unint64_t v93 = *(void *)(v91 + 72);
    uint64_t v255 = (uint64_t)"ddress: %@ error: %@";
    uint64_t v256 = 0x80000001001CCC20LL;
    unint64_t v257 = v93;
    __int128 v244 = xmmword_1001A8ED0;
    uint64_t v94 = v259;
    uint64_t v95 = v252;
    id v246 = v89;
    while (1)
    {
      uint64_t v97 = &v258[v257 * v92 + *(int *)(v95 + 24)];
      uint64_t v98 = *((void *)v97 + 1);
      if ((*(void *)v97 != 0xD000000000000011LL || v98 != v256)
        && (_stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v97,  v98,  0xD000000000000011LL,  v255 | 0x8000000000000000LL,  0LL) & 1) == 0)
      {
        uint64_t v100 = swift_unknownObjectWeakLoadStrong(v55, v99);
        if (v100)
        {
          uint64_t v101 = (void *)v100;
          uint64_t v102 = sub_1000AE6C8(v100);

          id v103 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
          if ((v103 & 1) != 0)
          {
            uint64_t v104 = sub_10013A76C();
            if (qword_100234B70 != -1) {
              swift_once(&qword_100234B70, sub_1000CAF84);
            }
            uint64_t v105 = v251;
            uint64_t v106 = sub_100098D58(v251, (uint64_t)qword_10023DD70);
            uint64_t v107 = v250;
            uint64_t v108 = (uint64_t)v249;
            (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v106, v105);
            uint64_t v109 = sub_100139314( v108,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
            swift_release(v104);
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v105);
            uint64_t v94 = v259;
            uint64_t v55 = v247;
            int64_t v90 = v254;
          }

          else
          {
            uint64_t v110 = static os_log_type_t.error.getter(v103);
            if (qword_100234C28 != -1) {
              swift_once(&qword_100234C28, sub_10018A9E0);
            }
            uint64_t v111 = v110;
            uint64_t v109 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)( v111,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          }

          swift_release(v102);
          uint64_t v112 = v109[2];
          if (v112)
          {
            uint64_t v113 = (uint64_t)v109
                 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
            swift_bridgeObjectRetain(v109);
            uint64_t v114 = *(void *)(v90 + 72);
            while (1)
            {
              sub_1000A7C90(v113, (uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              uint64_t v115 = &v19[*(int *)(v94 + 24)];
              uint64_t v116 = *((void *)v115 + 1);
              uint64_t v117 = *((void *)v97 + 1);
              BOOL v118 = *(void *)v115 == *(void *)v97 && v116 == v117;
              if (v118
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v115, v116, *(void *)v97, v117, 0LL) & 1) != 0)
              {
                break;
              }

              sub_1000A7CD4((uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v113 += v114;
              if (!--v112)
              {
                swift_bridgeObjectRelease(v109);
                uint64_t v55 = v247;
                int64_t v90 = v254;
                goto LABEL_64;
              }
            }

            swift_bridgeObjectRelease(v109);
            uint64_t v96 = v253;
            sub_1000C998C((uint64_t)v19, v253, type metadata accessor for MagicPairingSettingsRecord);
            int64_t v90 = v254;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v254 + 56))(v96, 0LL, 1LL, v94);
            uint64_t v55 = v247;
          }

          else
          {
LABEL_64:
            uint64_t v96 = v253;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v253, 1LL, 1LL, v94);
          }

          swift_bridgeObjectRelease(v109);
          int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v96, 1LL, v94);
          uint64_t v95 = v252;
          uint64_t v89 = v246;
          if (v119 != 1)
          {
            uint64_t v120 = (uint64_t)v248;
            sub_1000C998C(v96, (uint64_t)v248, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v122 = swift_unknownObjectWeakLoadStrong(v55, v121);
            if (v122)
            {
              uint64_t v124 = (void *)v122;
              uint64_t v125 = (void *)swift_unknownObjectWeakLoadStrong( v122 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v123);

              if (v125)
              {
                uint64_t v126 = sub_100098CD8(&qword_100236588);
                uint64_t v127 = swift_allocObject(v126, 40LL, 7LL);
                *(_OWORD *)(v127 + swift_unknownObjectWeakDestroy(v0 + 16) = v244;
                id v128 = sub_1000BC2B0();
                *(void *)(v127 + 32) = v128;
                v260[0] = v127;
                specialized Array._endMutation()(v128);
                uint64_t v129 = v260[0];
                sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
                Class v130 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v129);
                [v125 magicPairingRecordsUpdatedWithRecords:v130];
                swift_unknownObjectRelease(v125);

                uint64_t v95 = v252;
              }
            }

            sub_1000A7CD4(v120, type metadata accessor for MagicPairingSettingsRecord);
            uint64_t v89 = v246;
            goto LABEL_43;
          }
        }

        else
        {
          uint64_t v96 = v253;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v253, 1LL, 1LL, v94);
        }

        sub_100099358(v96, (uint64_t *)&unk_100235810);
      }

uint64_t sub_10012D4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v99 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v100 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v101 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = (void *)(a2 + 16);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = type metadata accessor for AADeviceRecord(0LL);
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v20 = Array.description.getter(v19, v18);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v23 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25, v26);
    if (Strong)
    {
      uint64_t v29 = (void *)Strong;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v28);

      if (v30)
      {
        uint64_t v31 = _swiftEmptyArrayStorage;
        unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v32 = *(void *)(v24 + 16);
        if (v32)
        {
          uint64_t v102 = v30;
          uint64_t v33 = v24 + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
          uint64_t v34 = *(void *)(v101 + 72);
          uint64_t v101 = v24;
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000A7C90(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            uint64_t v35 = *(void *)&v12[*(int *)(v10 + 24) + 8];
            id v36 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
            swift_bridgeObjectRetain(v35);
            NSString v37 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v35);
            id v38 = [v36 initWithBluetoothAddress:v37];

            NSString v39 = String._bridgeToObjectiveC()();
            [v38 setNickname:v39];

            NSString v40 = String._bridgeToObjectiveC()();
            [v38 setModelNumber:v40];

            NSString v41 = String._bridgeToObjectiveC()();
            [v38 setManufacturer:v41];

            NSString v42 = String._bridgeToObjectiveC()();
            [v38 setProductID:v42];

            NSString v43 = String._bridgeToObjectiveC()();
            [v38 setVendorID:v43];

            uint64_t v44 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
            unint64_t v46 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v45 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v46 >= v45 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1LL);
            }
            uint64_t v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v38);
            specialized Array._endMutation()(v47);
            v33 += v34;
            --v32;
          }

          while (v32);
          uint64_t v24 = v101;
          swift_bridgeObjectRelease(v101);
          uint64_t v30 = v102;
          uint64_t v31 = (void *)v103;
        }

        swift_bridgeObjectRelease(v24);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        [v30 devicesRemovedWithRecords:isa];

        return swift_unknownObjectRelease(v30);
      }
    }

    uint64_t v48 = (void *)v24;
    return swift_bridgeObjectRelease(v48);
  }

  uint64_t v49 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v49)
  {
    uint64_t v50 = v49;
    unint64_t v51 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t v53 = swift_unknownObjectWeakLoadStrong(v51, v52);
    if (v53)
    {
      uint64_t v55 = (void *)v53;
      uint64_t v56 = (void *)swift_unknownObjectWeakLoadStrong( v53 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v54);

      if (v56)
      {
        uint64_t v57 = _swiftEmptyArrayStorage;
        unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v58 = *(void *)(v50 + 16);
        if (v58)
        {
          uint64_t v59 = v50 + ((*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
          uint64_t v60 = *(void *)(v100 + 72);
          swift_bridgeObjectRetain(v50);
          do
          {
            sub_1000A7C90(v59, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            id v61 = sub_1000B737C();
            uint64_t v62 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
            unint64_t v64 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v63 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v64 >= v63 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1LL);
            }
            uint64_t v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v61);
            specialized Array._endMutation()(v65);
            v59 += v60;
            --v58;
          }

          while (v58);
          swift_bridgeObjectRelease(v50);
          uint64_t v57 = (void *)v103;
        }

        swift_bridgeObjectRelease(v50);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v57);
        objc_msgSend(v56, "deviceSupportInformationRecordsRemovedWithRecords:", v83.super.isa, v99);
LABEL_40:

        return swift_unknownObjectRelease(v56);
      }
    }

    goto LABEL_32;
  }

  uint64_t v68 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v68)
  {
    uint64_t v50 = v68;
    uint64_t v69 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t v71 = swift_unknownObjectWeakLoadStrong(v69, v70);
    if (v71)
    {
      uint64_t v73 = (void *)v71;
      uint64_t v56 = (void *)swift_unknownObjectWeakLoadStrong( v71 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v72);

      if (v56)
      {
        uint64_t v74 = _swiftEmptyArrayStorage;
        unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v75 = *(void *)(v50 + 16);
        if (v75)
        {
          uint64_t v76 = v50 + ((*(unsigned __int8 *)(v99 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
          uint64_t v77 = *(void *)(v99 + 72);
          swift_bridgeObjectRetain(v50);
          do
          {
            sub_1000A7C90(v76, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            id v78 = sub_1000BC2B0();
            uint64_t v79 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            unint64_t v81 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v80 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v81 >= v80 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
            }
            uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
            specialized Array._endMutation()(v82);
            v76 += v77;
            --v75;
          }

          while (v75);
          swift_bridgeObjectRelease(v50);
          uint64_t v74 = (void *)v103;
        }

        swift_bridgeObjectRelease(v50);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v74);
        objc_msgSend(v56, "magicPairingRecordsRemovedWithRecords:", v83.super.isa, v99);
        goto LABEL_40;
      }
    }

void *sub_10012DDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v104 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v105 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v106 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v107 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = (void *)(a2 + 16);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v14 = qword_10023DFC0;
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v17 = type metadata accessor for HMDeviceCloudRecord(0LL);
  uint64_t v18 = swift_bridgeObjectRetain(a1);
  uint64_t v19 = Array.description.getter(v18, v17);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10009914C();
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "records Removed: %@", 19LL, 2LL, v16);
  swift_bridgeObjectRelease(v16);
  uint64_t v22 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = v108;
    swift_beginAccess(v108, v110, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v24, v25);
    if (Strong)
    {
      uint64_t v28 = (void *)Strong;
      uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v27);

      if (v29)
      {
        uint64_t v30 = _swiftEmptyArrayStorage;
        unint64_t v109 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v31 = *(void *)(v23 + 16);
        if (v31)
        {
          uint64_t v108 = v29;
          uint64_t v32 = v23 + ((*(unsigned __int8 *)(v107 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
          uint64_t v33 = *(void *)(v107 + 72);
          uint64_t v107 = v23;
          swift_bridgeObjectRetain(v23);
          do
          {
            sub_1000A7C90(v32, (uint64_t)v11, type metadata accessor for DeviceRecord);
            uint64_t v34 = *(void *)&v11[*(int *)(v9 + 24) + 8];
            id v35 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
            swift_bridgeObjectRetain(v34);
            NSString v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v34);
            id v37 = [v35 initWithBluetoothAddress:v36];

            NSString v38 = String._bridgeToObjectiveC()();
            [v37 setNickname:v38];

            NSString v39 = String._bridgeToObjectiveC()();
            [v37 setModelNumber:v39];

            NSString v40 = String._bridgeToObjectiveC()();
            [v37 setManufacturer:v40];

            NSString v41 = String._bridgeToObjectiveC()();
            [v37 setProductID:v41];

            NSString v42 = String._bridgeToObjectiveC()();
            [v37 setVendorID:v42];

            uint64_t v43 = sub_1000A7CD4((uint64_t)v11, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
            unint64_t v45 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v44 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v45 >= v44 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1LL);
            }
            uint64_t v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
            specialized Array._endMutation()(v46);
            v32 += v33;
            --v31;
          }

          while (v31);
          uint64_t v23 = v107;
          swift_bridgeObjectRelease(v107);
          uint64_t v29 = v108;
          uint64_t v30 = (void *)v109;
        }

        swift_bridgeObjectRelease(v23);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v30);
        [v29 devicesRemovedWithRecords:isa];

        return (void *)swift_unknownObjectRelease(v29);
      }
    }

    uint64_t v47 = (void *)v23;
    return (void *)swift_bridgeObjectRelease(v47);
  }

  uint64_t v48 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = v108;
    swift_beginAccess(v108, v110, 0LL, 0LL);
    uint64_t v52 = swift_unknownObjectWeakLoadStrong(v50, v51);
    if (v52)
    {
      uint64_t v54 = (void *)v52;
      uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( v52 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v53);

      if (v55)
      {
        uint64_t v56 = _swiftEmptyArrayStorage;
        unint64_t v109 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v57 = *(void *)(v49 + 16);
        if (v57)
        {
          uint64_t v58 = v49 + ((*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
          uint64_t v59 = *(void *)(v106 + 72);
          swift_bridgeObjectRetain(v49);
          do
          {
            sub_1000A7C90(v58, (uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
            id v60 = sub_1000B737C();
            uint64_t v61 = sub_1000A7CD4((uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
            unint64_t v63 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v62 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v63 >= v62 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
            }
            uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
            specialized Array._endMutation()(v64);
            v58 += v59;
            --v57;
          }

          while (v57);
          swift_bridgeObjectRelease(v49);
          uint64_t v56 = (void *)v109;
        }

        swift_bridgeObjectRelease(v49);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v56);
        [v55 deviceSupportInformationRecordsRemovedWithRecords:v83.super.isa];
LABEL_47:

        return (void *)swift_unknownObjectRelease(v55);
      }
    }

    goto LABEL_32;
  }

  uint64_t v67 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v67)
  {
    uint64_t v49 = v67;
    uint64_t v68 = v108;
    swift_beginAccess(v108, v110, 0LL, 0LL);
    uint64_t v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
    if (v70)
    {
      uint64_t v72 = (void *)v70;
      uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v71);

      if (v55)
      {
        uint64_t v73 = _swiftEmptyArrayStorage;
        unint64_t v109 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v74 = *(void *)(v49 + 16);
        if (v74)
        {
          uint64_t v75 = v49 + ((*(unsigned __int8 *)(v104 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
          uint64_t v76 = *(void *)(v104 + 72);
          swift_bridgeObjectRetain(v49);
          uint64_t v77 = (uint64_t)v105;
          do
          {
            sub_1000A7C90(v75, v77, type metadata accessor for MagicPairingSettingsRecord);
            id v78 = sub_1000BC2B0();
            uint64_t v79 = sub_1000A7CD4(v77, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            unint64_t v81 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v80 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v81 >= v80 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
            }
            uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
            specialized Array._endMutation()(v82);
            v75 += v76;
            --v74;
          }

          while (v74);
          swift_bridgeObjectRelease(v49);
          uint64_t v73 = (void *)v109;
        }

        swift_bridgeObjectRelease(v49);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v73);
        [v55 magicPairingRecordsRemovedWithRecords:v83.super.isa];
        goto LABEL_47;
      }
    }

uint64_t sub_10012E710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v99 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v100 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v101 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = (void *)(a2 + 16);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = type metadata accessor for AAProxCardsRecord(0LL);
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v20 = Array.description.getter(v19, v18);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v23 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25, v26);
    if (Strong)
    {
      uint64_t v29 = (void *)Strong;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v28);

      if (v30)
      {
        uint64_t v31 = _swiftEmptyArrayStorage;
        unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v32 = *(void *)(v24 + 16);
        if (v32)
        {
          uint64_t v102 = v30;
          uint64_t v33 = v24 + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
          uint64_t v34 = *(void *)(v101 + 72);
          uint64_t v101 = v24;
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000A7C90(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            uint64_t v35 = *(void *)&v12[*(int *)(v10 + 24) + 8];
            id v36 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
            swift_bridgeObjectRetain(v35);
            NSString v37 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v35);
            id v38 = [v36 initWithBluetoothAddress:v37];

            NSString v39 = String._bridgeToObjectiveC()();
            [v38 setNickname:v39];

            NSString v40 = String._bridgeToObjectiveC()();
            [v38 setModelNumber:v40];

            NSString v41 = String._bridgeToObjectiveC()();
            [v38 setManufacturer:v41];

            NSString v42 = String._bridgeToObjectiveC()();
            [v38 setProductID:v42];

            NSString v43 = String._bridgeToObjectiveC()();
            [v38 setVendorID:v43];

            uint64_t v44 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
            unint64_t v46 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v45 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v46 >= v45 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1LL);
            }
            uint64_t v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v38);
            specialized Array._endMutation()(v47);
            v33 += v34;
            --v32;
          }

          while (v32);
          uint64_t v24 = v101;
          swift_bridgeObjectRelease(v101);
          uint64_t v30 = v102;
          uint64_t v31 = (void *)v103;
        }

        swift_bridgeObjectRelease(v24);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        [v30 devicesRemovedWithRecords:isa];

        return swift_unknownObjectRelease(v30);
      }
    }

    uint64_t v48 = (void *)v24;
    return swift_bridgeObjectRelease(v48);
  }

  uint64_t v49 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t v53 = swift_unknownObjectWeakLoadStrong(v51, v52);
    if (v53)
    {
      uint64_t v55 = (void *)v53;
      uint64_t v56 = (void *)swift_unknownObjectWeakLoadStrong( v53 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v54);

      if (v56)
      {
        uint64_t v57 = _swiftEmptyArrayStorage;
        unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v58 = *(void *)(v50 + 16);
        if (v58)
        {
          uint64_t v59 = v50 + ((*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
          uint64_t v60 = *(void *)(v100 + 72);
          swift_bridgeObjectRetain(v50);
          do
          {
            sub_1000A7C90(v59, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            id v61 = sub_1000B737C();
            uint64_t v62 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
            unint64_t v64 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v63 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v64 >= v63 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1LL);
            }
            uint64_t v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v61);
            specialized Array._endMutation()(v65);
            v59 += v60;
            --v58;
          }

          while (v58);
          swift_bridgeObjectRelease(v50);
          uint64_t v57 = (void *)v103;
        }

        swift_bridgeObjectRelease(v50);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v57);
        objc_msgSend(v56, "deviceSupportInformationRecordsRemovedWithRecords:", v83.super.isa, v99);
LABEL_44:

        return swift_unknownObjectRelease(v56);
      }
    }

    goto LABEL_32;
  }

  uint64_t v68 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v68)
  {
    uint64_t v50 = v68;
    uint64_t v69 = v102;
    swift_beginAccess(v102, v104, 0LL, 0LL);
    uint64_t v71 = swift_unknownObjectWeakLoadStrong(v69, v70);
    if (v71)
    {
      uint64_t v73 = (void *)v71;
      uint64_t v56 = (void *)swift_unknownObjectWeakLoadStrong( v71 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v72);

      if (v56)
      {
        uint64_t v74 = _swiftEmptyArrayStorage;
        unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v75 = *(void *)(v50 + 16);
        if (v75)
        {
          uint64_t v76 = v50 + ((*(unsigned __int8 *)(v99 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
          uint64_t v77 = *(void *)(v99 + 72);
          swift_bridgeObjectRetain(v50);
          do
          {
            sub_1000A7C90(v76, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            id v78 = sub_1000BC2B0();
            uint64_t v79 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            unint64_t v81 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v80 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v81 >= v80 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
            }
            uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
            specialized Array._endMutation()(v82);
            v76 += v77;
            --v75;
          }

          while (v75);
          swift_bridgeObjectRelease(v50);
          uint64_t v74 = (void *)v103;
        }

        swift_bridgeObjectRelease(v50);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v74);
        objc_msgSend(v56, "magicPairingRecordsRemovedWithRecords:", v83.super.isa, v99);
        goto LABEL_44;
      }
    }

void *sub_10012EFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v102 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v103 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v104 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v105 = *(void **)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = (void *)(a2 + 16);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v14 = qword_10023DFC0;
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v17 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v18 = swift_bridgeObjectRetain(a1);
  uint64_t v19 = Array.description.getter(v18, v17);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10009914C();
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "records Removed: %@", 19LL, 2LL, v16);
  swift_bridgeObjectRelease(v16);
  uint64_t v22 = sub_100122C10( a1,  &qword_1002357D0,  (void (*)(void, uint64_t, void, __n128))sub_100161180,  type metadata accessor for SoundProfileRecord);
  if (!v22)
  {
    uint64_t v48 = sub_100122C10( a1,  &qword_1002357D0,  (void (*)(void, uint64_t, void, __n128))sub_100161154,  type metadata accessor for SoundProfileRecord);
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = v106;
      swift_beginAccess(v106, v108, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        uint64_t v54 = (void *)Strong;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v53);

        if (v55)
        {
          uint64_t v56 = _swiftEmptyArrayStorage;
          unint64_t v107 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v57 = v49[2];
          if (v57)
          {
            uint64_t v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v104 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
            uint64_t v59 = *(void *)(v104 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v58, (uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
              id v60 = sub_1000B737C();
              uint64_t v61 = sub_1000A7CD4((uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              unint64_t v63 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v62 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v63 >= v62 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
              }
              uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }

            while (v57);
            swift_bridgeObjectRelease(v49);
            uint64_t v56 = (void *)v107;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
          v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          [v55 deviceSupportInformationRecordsRemovedWithRecords:v83.super.isa];
LABEL_42:

          return (void *)swift_unknownObjectRelease(v55);
        }
      }

      goto LABEL_32;
    }

    uint64_t v67 = sub_100122C10( a1,  &qword_1002357D0,  (void (*)(void, uint64_t, void, __n128))sub_100161128,  type metadata accessor for SoundProfileRecord);
    if (v67)
    {
      uint64_t v49 = v67;
      uint64_t v68 = v106;
      swift_beginAccess(v106, v108, 0LL, 0LL);
      uint64_t v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        uint64_t v72 = (void *)v70;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v71);

        if (v55)
        {
          uint64_t v73 = _swiftEmptyArrayStorage;
          unint64_t v107 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v74 = v49[2];
          if (v74)
          {
            uint64_t v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v102 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
            uint64_t v76 = *(void *)(v102 + 72);
            swift_bridgeObjectRetain(v49);
            uint64_t v77 = (uint64_t)v103;
            do
            {
              sub_1000A7C90(v75, v77, type metadata accessor for MagicPairingSettingsRecord);
              id v78 = sub_1000BC2B0();
              uint64_t v79 = sub_1000A7CD4(v77, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
              unint64_t v81 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v80 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v81 >= v80 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
              }
              uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
              specialized Array._endMutation()(v82);
              v75 += v76;
              --v74;
            }

            while (v74);
            swift_bridgeObjectRelease(v49);
            uint64_t v73 = (void *)v107;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
          v83.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          [v55 magicPairingRecordsRemovedWithRecords:v83.super.isa];
          goto LABEL_42;
        }
      }

void *sub_10012F900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v100 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v101 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v102 = *(void **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v103 = (void *)(a2 + 16);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = swift_bridgeObjectRetain(a1);
  uint64_t v19 = Array.description.getter(v18, v4);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v22 = sub_100122C10( a1,  (uint64_t *)&unk_100235810,  (void (*)(void, uint64_t, void, __n128))sub_100161180,  type metadata accessor for MagicPairingSettingsRecord);
  if (!v22)
  {
    uint64_t v48 = sub_100122C10( a1,  (uint64_t *)&unk_100235810,  (void (*)(void, uint64_t, void, __n128))sub_100161154,  type metadata accessor for MagicPairingSettingsRecord);
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        uint64_t v54 = (void *)Strong;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v53);

        if (v55)
        {
          uint64_t v56 = _swiftEmptyArrayStorage;
          unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v57 = v49[2];
          if (v57)
          {
            uint64_t v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
            uint64_t v59 = *(void *)(v101 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v58, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              id v60 = sub_1000B737C();
              uint64_t v61 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              unint64_t v63 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v62 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v63 >= v62 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
              }
              uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }

            while (v57);
            swift_bridgeObjectRelease(v49);
            uint64_t v56 = (void *)v104;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
          v82.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v82.super.isa, v100);
LABEL_42:

          return (void *)swift_unknownObjectRelease(v55);
        }
      }

      goto LABEL_32;
    }

    uint64_t v67 = sub_100122E54( a1,  type metadata accessor for MagicPairingSettingsRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161128);
    if (v67)
    {
      uint64_t v49 = v67;
      uint64_t v68 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      uint64_t v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        uint64_t v72 = (void *)v70;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v71);

        if (v55)
        {
          uint64_t v73 = _swiftEmptyArrayStorage;
          unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v74 = v49[2];
          if (v74)
          {
            uint64_t v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
            uint64_t v76 = *(void *)(v100 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v75, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              id v77 = sub_1000BC2B0();
              uint64_t v78 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              unint64_t v80 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v79 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v80 >= v79 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
              }
              uint64_t v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v81);
              v75 += v76;
              --v74;
            }

            while (v74);
            swift_bridgeObjectRelease(v49);
            uint64_t v73 = (void *)v104;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
          v82.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v82.super.isa, v100);
          goto LABEL_42;
        }
      }

void *sub_1001301F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v100 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v101 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v102 = *(void **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v103 = (void *)(a2 + 16);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = swift_bridgeObjectRetain(a1);
  uint64_t v19 = Array.description.getter(v18, v7);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v22 = sub_100122C10( a1,  &qword_100235828,  (void (*)(void, uint64_t, void, __n128))sub_100161180,  type metadata accessor for DeviceSupportInformationRecord);
  if (!v22)
  {
    uint64_t v48 = sub_100122E54( a1,  type metadata accessor for DeviceSupportInformationRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161154);
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        uint64_t v54 = (void *)Strong;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v53);

        if (v55)
        {
          uint64_t v56 = _swiftEmptyArrayStorage;
          unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v57 = v49[2];
          if (v57)
          {
            uint64_t v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
            uint64_t v59 = *(void *)(v101 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v58, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              id v60 = sub_1000B737C();
              uint64_t v61 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              unint64_t v63 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v62 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v63 >= v62 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
              }
              uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }

            while (v57);
            swift_bridgeObjectRelease(v49);
            uint64_t v56 = (void *)v104;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
          v82.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v82.super.isa, v100);
LABEL_42:

          return (void *)swift_unknownObjectRelease(v55);
        }
      }

      goto LABEL_32;
    }

    uint64_t v67 = sub_100122C10( a1,  &qword_100235828,  (void (*)(void, uint64_t, void, __n128))sub_100161128,  type metadata accessor for DeviceSupportInformationRecord);
    if (v67)
    {
      uint64_t v49 = v67;
      uint64_t v68 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      uint64_t v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        uint64_t v72 = (void *)v70;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v71);

        if (v55)
        {
          uint64_t v73 = _swiftEmptyArrayStorage;
          unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v74 = v49[2];
          if (v74)
          {
            uint64_t v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
            uint64_t v76 = *(void *)(v100 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v75, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              id v77 = sub_1000BC2B0();
              uint64_t v78 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              unint64_t v80 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v79 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v80 >= v79 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
              }
              uint64_t v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v81);
              v75 += v76;
              --v74;
            }

            while (v74);
            swift_bridgeObjectRelease(v49);
            uint64_t v73 = (void *)v104;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
          v82.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v82.super.isa, v100);
          goto LABEL_42;
        }
      }

void *sub_100130AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v100 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v101 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v102 = *(void **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v103 = (void *)(a2 + 16);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = swift_bridgeObjectRetain(a1);
  uint64_t v19 = Array.description.getter(v18, v10);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v22 = sub_100122E54( a1,  type metadata accessor for DeviceRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161180);
  if (!v22)
  {
    uint64_t v48 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_100161154,  type metadata accessor for DeviceRecord);
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        uint64_t v54 = (void *)Strong;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v53);

        if (v55)
        {
          uint64_t v56 = _swiftEmptyArrayStorage;
          unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v57 = v49[2];
          if (v57)
          {
            uint64_t v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
            uint64_t v59 = *(void *)(v101 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v58, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              id v60 = sub_1000B737C();
              uint64_t v61 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              unint64_t v63 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v62 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v63 >= v62 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
              }
              uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }

            while (v57);
            swift_bridgeObjectRelease(v49);
            uint64_t v56 = (void *)v104;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
          v82.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v82.super.isa, v100);
LABEL_42:

          return (void *)swift_unknownObjectRelease(v55);
        }
      }

      goto LABEL_32;
    }

    uint64_t v67 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_100161128,  type metadata accessor for DeviceRecord);
    if (v67)
    {
      uint64_t v49 = v67;
      uint64_t v68 = v103;
      swift_beginAccess(v103, v105, 0LL, 0LL);
      uint64_t v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        uint64_t v72 = (void *)v70;
        uint64_t v55 = (void *)swift_unknownObjectWeakLoadStrong( v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v71);

        if (v55)
        {
          uint64_t v73 = _swiftEmptyArrayStorage;
          unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v74 = v49[2];
          if (v74)
          {
            uint64_t v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
            uint64_t v76 = *(void *)(v100 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000A7C90(v75, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              id v77 = sub_1000BC2B0();
              uint64_t v78 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              unint64_t v80 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v79 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v80 >= v79 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
              }
              uint64_t v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v81);
              v75 += v76;
              --v74;
            }

            while (v74);
            swift_bridgeObjectRelease(v49);
            uint64_t v73 = (void *)v104;
          }

          swift_bridgeObjectRelease(v49);
          sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
          v82.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v82.super.isa, v100);
          goto LABEL_42;
        }
      }

uint64_t sub_1001313CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v12 - 8);
  uint64_t v27 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void **)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  uint64_t v16 = swift_allocObject(&unk_10020FA18, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  uint64_t v17 = swift_allocObject(a2, 32LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = a3;
  uint64_t v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = a4;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = swift_retain(v16);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v23 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v9, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  uint64_t v24 = v31;
  swift_release(v16);
  return swift_release(v24);
}

void *sub_100131600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v97 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v98 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v99 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = a2 + 16;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = type metadata accessor for HMDeviceCloudRecord(0LL);
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v20 = Array.description.getter(v19, v18);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Purged: %@", 18LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v23 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v100;
    swift_beginAccess(v100, v102, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25, v26);
    if (Strong)
    {
      uint64_t v29 = (void *)Strong;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v28);

      if (v30)
      {
        uint64_t v31 = _swiftEmptyArrayStorage;
        unint64_t v101 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v32 = *(void *)(v24 + 16);
        if (v32)
        {
          uint64_t v33 = v24 + ((*(unsigned __int8 *)(v99 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
          uint64_t v34 = *(void *)(v99 + 72);
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000A7C90(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            id v35 = sub_1000B1A88();
            uint64_t v36 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
            unint64_t v38 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v37 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v38 >= v37 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1LL);
            }
            uint64_t v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
            specialized Array._endMutation()(v39);
            v33 += v34;
            --v32;
          }

          while (v32);
          swift_bridgeObjectRelease(v24);
          uint64_t v31 = (void *)v101;
        }

        swift_bridgeObjectRelease(v24);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        objc_msgSend(v30, "allDevicesRemovedWithRecords:", v57.super.isa, v97);
LABEL_47:

        uint64_t v86 = v30;
        return (void *)swift_unknownObjectRelease(v86);
      }
    }

    NSString v40 = (void *)v24;
    return (void *)swift_bridgeObjectRelease(v40);
  }

  uint64_t v41 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = v100;
    swift_beginAccess(v100, v102, 0LL, 0LL);
    uint64_t v45 = swift_unknownObjectWeakLoadStrong(v43, v44);
    if (v45)
    {
      uint64_t v47 = (void *)v45;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( v45 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v46);

      if (v30)
      {
        uint64_t v48 = _swiftEmptyArrayStorage;
        unint64_t v101 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v49 = *(void *)(v42 + 16);
        if (v49)
        {
          uint64_t v50 = v42 + ((*(unsigned __int8 *)(v98 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
          uint64_t v51 = *(void *)(v98 + 72);
          swift_bridgeObjectRetain(v42);
          do
          {
            sub_1000A7C90(v50, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            id v52 = sub_1000B737C();
            uint64_t v53 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
            unint64_t v55 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v54 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v55 >= v54 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1LL);
            }
            uint64_t v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v52);
            specialized Array._endMutation()(v56);
            v50 += v51;
            --v49;
          }

          while (v49);
          swift_bridgeObjectRelease(v42);
          uint64_t v48 = (void *)v101;
        }

        swift_bridgeObjectRelease(v42);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v48);
        objc_msgSend(v30, "allDeviceSupportInformationRecordsRemovedWithRecords:", v57.super.isa, v97);
        goto LABEL_47;
      }
    }

    NSString v40 = (void *)v42;
    return (void *)swift_bridgeObjectRelease(v40);
  }

  uint64_t v58 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v58)
  {
    uint64_t v59 = v58;
    uint64_t v60 = v100;
    swift_beginAccess(v100, v102, 0LL, 0LL);
    uint64_t v62 = swift_unknownObjectWeakLoadStrong(v60, v61);
    if (v62)
    {
      uint64_t v64 = (void *)v62;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( v62 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v63);

      if (v30)
      {
        Class v65 = _swiftEmptyArrayStorage;
        unint64_t v101 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v66 = *(void *)(v59 + 16);
        if (v66)
        {
          uint64_t v67 = v59 + ((*(unsigned __int8 *)(v97 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
          uint64_t v68 = *(void *)(v97 + 72);
          swift_bridgeObjectRetain(v59);
          do
          {
            sub_1000A7C90(v67, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            id v69 = sub_1000BC2B0();
            uint64_t v70 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
            unint64_t v72 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v71 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v72 >= v71 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1LL);
            }
            uint64_t v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v69);
            specialized Array._endMutation()(v73);
            v67 += v68;
            --v66;
          }

          while (v66);
          swift_bridgeObjectRelease(v59);
          Class v65 = (void *)v101;
        }

        swift_bridgeObjectRelease(v59);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v65);
        objc_msgSend(v30, "allMagicPairingRecordsRemovedWithRecords:", v57.super.isa, v97);
        goto LABEL_47;
      }
    }

    NSString v40 = (void *)v59;
    return (void *)swift_bridgeObjectRelease(v40);
  }

  v102[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v75 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v75);
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_38;
    }
LABEL_56:
    uint64_t v89 = v102[0];
    uint64_t v90 = v100;
    swift_beginAccess(v100, v102, 0LL, 0LL);
    uint64_t v92 = swift_unknownObjectWeakLoadStrong(v90, v91);
    if (v92)
    {
      uint64_t v94 = (void *)v92;
      uint64_t v95 = swift_unknownObjectWeakLoadStrong( v92 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate,  v93);
      if (v95)
      {
        uint64_t v84 = (void *)v95;
        type metadata accessor for AADeviceRecord(0LL);
        v85.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v84 aaDeviceRecordsRemovedWithRecords:v85.super.isa];

        swift_release(v89);
        goto LABEL_59;
      }
    }

    return (void *)swift_release(v89);
  }

  if (a1 < 0) {
    uint64_t v87 = a1;
  }
  else {
    uint64_t v87 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v87);
  swift_bridgeObjectRelease(a1);
  specialized ContiguousArray.reserveCapacity(_:)(v75);
  swift_bridgeObjectRetain(a1);
  uint64_t v88 = _CocoaArrayWrapper.endIndex.getter(v87);
  uint64_t result = (void *)swift_bridgeObjectRelease(a1);
  if (!v88) {
    goto LABEL_56;
  }
LABEL_38:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v96 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v96);
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return result;
  }

  swift_release(v102[0]);
  v102[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v75);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v76 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v76);
  }

  swift_release(v102[0]);
  uint64_t result = sub_100122A9C(a1);
  if (result)
  {
    id v77 = result;
    uint64_t v78 = v100;
    swift_beginAccess(v100, v102, 0LL, 0LL);
    uint64_t v80 = swift_unknownObjectWeakLoadStrong(v78, v79);
    if (v80)
    {
      NSArray v82 = (void *)v80;
      uint64_t v83 = swift_unknownObjectWeakLoadStrong( v80 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v81);
      if (v83)
      {
        uint64_t v84 = (void *)v83;
        v85.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v84 hmDeviceCloudRecordsRemovedWithRecords:v85.super.isa];

        swift_bridgeObjectRelease(v77);
LABEL_59:

        uint64_t v86 = v84;
        return (void *)swift_unknownObjectRelease(v86);
      }
    }

    NSString v40 = v77;
    return (void *)swift_bridgeObjectRelease(v40);
  }

  return result;
}

uint64_t sub_100131E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v92 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v93 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v94 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2 + 16;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v16 = qword_10023DFC0;
  uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v19 = type metadata accessor for AAProxCardsRecord(0LL);
  uint64_t v20 = swift_bridgeObjectRetain(a1);
  uint64_t v21 = Array.description.getter(v20, v19);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease(a1);
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_10009914C();
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v23;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "records Purged: %@", 18LL, 2LL, v18);
  swift_bridgeObjectRelease(v18);
  uint64_t v24 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  if (v24)
  {
    uint64_t v25 = v24;
    swift_beginAccess(v13, v96, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v13, v26);
    if (Strong)
    {
      uint64_t v29 = (void *)Strong;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v28);

      if (v30)
      {
        uint64_t v31 = _swiftEmptyArrayStorage;
        unint64_t v95 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v32 = *(void *)(v25 + 16);
        if (v32)
        {
          uint64_t v33 = v25 + ((*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
          uint64_t v34 = *(void *)(v94 + 72);
          swift_bridgeObjectRetain(v25);
          do
          {
            sub_1000A7C90(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            id v35 = sub_1000B1A88();
            uint64_t v36 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
            unint64_t v38 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v37 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v38 >= v37 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1LL);
            }
            uint64_t v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
            specialized Array._endMutation()(v39);
            v33 += v34;
            --v32;
          }

          while (v32);
          swift_bridgeObjectRelease(v25);
          uint64_t v31 = (void *)v95;
        }

        swift_bridgeObjectRelease(v25);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        v56.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        [v30 allDevicesRemovedWithRecords:v56.super.isa];
LABEL_45:

        uint64_t v78 = v30;
        return swift_unknownObjectRelease(v78);
      }
    }

    NSString v40 = (void *)v25;
    return swift_bridgeObjectRelease(v40);
  }

  uint64_t v41 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v41)
  {
    uint64_t v42 = v41;
    swift_beginAccess(v13, v96, 0LL, 0LL);
    uint64_t v44 = swift_unknownObjectWeakLoadStrong(v13, v43);
    if (v44)
    {
      uint64_t v46 = (void *)v44;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( v44 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v45);

      if (v30)
      {
        uint64_t v47 = _swiftEmptyArrayStorage;
        unint64_t v95 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v48 = *(void *)(v42 + 16);
        if (v48)
        {
          uint64_t v49 = v42 + ((*(unsigned __int8 *)(v93 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
          uint64_t v50 = *(void *)(v93 + 72);
          swift_bridgeObjectRetain(v42);
          do
          {
            sub_1000A7C90(v49, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            id v51 = sub_1000B737C();
            uint64_t v52 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
            unint64_t v54 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v53 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v54 >= v53 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1LL);
            }
            uint64_t v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
            specialized Array._endMutation()(v55);
            v49 += v50;
            --v48;
          }

          while (v48);
          swift_bridgeObjectRelease(v42);
          uint64_t v47 = (void *)v95;
        }

        swift_bridgeObjectRelease(v42);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v56.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v47);
        [v30 allDeviceSupportInformationRecordsRemovedWithRecords:v56.super.isa];
        goto LABEL_45;
      }
    }

    NSString v40 = (void *)v42;
    return swift_bridgeObjectRelease(v40);
  }

  uint64_t v57 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v57)
  {
    uint64_t v58 = v57;
    swift_beginAccess(v13, v96, 0LL, 0LL);
    uint64_t v60 = swift_unknownObjectWeakLoadStrong(v13, v59);
    if (v60)
    {
      uint64_t v62 = (void *)v60;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( v60 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v61);

      if (v30)
      {
        uint64_t v63 = _swiftEmptyArrayStorage;
        unint64_t v95 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v64 = *(void *)(v58 + 16);
        if (v64)
        {
          uint64_t v65 = v58 + ((*(unsigned __int8 *)(v92 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
          uint64_t v66 = *(void *)(v92 + 72);
          swift_bridgeObjectRetain(v58);
          do
          {
            sub_1000A7C90(v65, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            id v67 = sub_1000BC2B0();
            uint64_t v68 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v68);
            unint64_t v70 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v69 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v70 >= v69 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1LL);
            }
            uint64_t v71 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v67);
            specialized Array._endMutation()(v71);
            v65 += v66;
            --v64;
          }

          while (v64);
          swift_bridgeObjectRelease(v58);
          uint64_t v63 = (void *)v95;
        }

        swift_bridgeObjectRelease(v58);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v56.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v63);
        [v30 allMagicPairingRecordsRemovedWithRecords:v56.super.isa];
        goto LABEL_45;
      }
    }

    NSString v40 = (void *)v58;
    return swift_bridgeObjectRelease(v40);
  }

  v96[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v80 = a1;
    }
    else {
      uint64_t v80 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v72);
    swift_bridgeObjectRetain(a1);
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v80);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (v81) {
      goto LABEL_37;
    }
LABEL_54:
    uint64_t v82 = v96[0];
    swift_beginAccess(v13, v96, 0LL, 0LL);
    uint64_t v84 = swift_unknownObjectWeakLoadStrong(v13, v83);
    if (v84)
    {
      uint64_t v86 = (void *)v84;
      uint64_t v87 = swift_unknownObjectWeakLoadStrong( v84 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate,  v85);
      if (v87)
      {
        uint64_t v88 = (void *)v87;
        type metadata accessor for AADeviceRecord(0LL);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v88 aaDeviceRecordsRemovedWithRecords:isa];

        swift_release(v82);
        uint64_t v78 = v88;
        return swift_unknownObjectRelease(v78);
      }
    }

    return swift_release(v82);
  }

  uint64_t v72 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v72);
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_54;
  }
LABEL_37:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v90 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v90);
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return result;
  }

  swift_release(v96[0]);
  uint64_t v74 = sub_100122A9C(a1);
  if (v74)
  {
    uint64_t v75 = v74;
    swift_beginAccess(v13, v96, 0LL, 0LL);
    id v77 = (void *)swift_unknownObjectWeakLoadStrong(v13, v76);
    if (v77) {

    }
    NSString v40 = v75;
    return swift_bridgeObjectRelease(v40);
  }

  v96[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v72);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v79 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v79);
  }

  return swift_release(v96[0]);
}

uint64_t sub_10013262C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v94 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v95 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v96 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = a2 + 16;
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v15 = qword_10023DFC0;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v18 = type metadata accessor for AADeviceRecord(0LL);
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v20 = Array.description.getter(v19, v18);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10009914C();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Purged: %@", 18LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v23 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161180);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v97;
    swift_beginAccess(v97, v99, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25, v26);
    if (Strong)
    {
      uint64_t v29 = (void *)Strong;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v28);

      if (v30)
      {
        uint64_t v31 = _swiftEmptyArrayStorage;
        unint64_t v98 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v32 = *(void *)(v24 + 16);
        if (v32)
        {
          uint64_t v33 = v24 + ((*(unsigned __int8 *)(v96 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
          uint64_t v34 = *(void *)(v96 + 72);
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000A7C90(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            id v35 = sub_1000B1A88();
            uint64_t v36 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
            unint64_t v38 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v37 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v38 >= v37 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1LL);
            }
            uint64_t v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
            specialized Array._endMutation()(v39);
            v33 += v34;
            --v32;
          }

          while (v32);
          swift_bridgeObjectRelease(v24);
          uint64_t v31 = (void *)v98;
        }

        swift_bridgeObjectRelease(v24);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        objc_msgSend(v30, "allDevicesRemovedWithRecords:", v57.super.isa, v94);
LABEL_40:

        return swift_unknownObjectRelease(v30);
      }
    }

    NSString v40 = (void *)v24;
    return swift_bridgeObjectRelease(v40);
  }

  uint64_t v41 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161154);
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = v97;
    swift_beginAccess(v97, v99, 0LL, 0LL);
    uint64_t v45 = swift_unknownObjectWeakLoadStrong(v43, v44);
    if (v45)
    {
      uint64_t v47 = (void *)v45;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( v45 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v46);

      if (v30)
      {
        uint64_t v48 = _swiftEmptyArrayStorage;
        unint64_t v98 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v49 = *(void *)(v42 + 16);
        if (v49)
        {
          uint64_t v50 = v42 + ((*(unsigned __int8 *)(v95 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
          uint64_t v51 = *(void *)(v95 + 72);
          swift_bridgeObjectRetain(v42);
          do
          {
            sub_1000A7C90(v50, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            id v52 = sub_1000B737C();
            uint64_t v53 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
            unint64_t v55 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v54 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v55 >= v54 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1LL);
            }
            uint64_t v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v52);
            specialized Array._endMutation()(v56);
            v50 += v51;
            --v49;
          }

          while (v49);
          swift_bridgeObjectRelease(v42);
          uint64_t v48 = (void *)v98;
        }

        swift_bridgeObjectRelease(v42);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v48);
        objc_msgSend(v30, "allDeviceSupportInformationRecordsRemovedWithRecords:", v57.super.isa, v94);
        goto LABEL_40;
      }
    }

    NSString v40 = (void *)v42;
    return swift_bridgeObjectRelease(v40);
  }

  uint64_t v58 = sub_100122980(a1, (void (*)(void, uint64_t, void))sub_100161128);
  if (v58)
  {
    uint64_t v59 = v58;
    uint64_t v60 = v97;
    swift_beginAccess(v97, v99, 0LL, 0LL);
    uint64_t v62 = swift_unknownObjectWeakLoadStrong(v60, v61);
    if (v62)
    {
      uint64_t v64 = (void *)v62;
      uint64_t v30 = (void *)swift_unknownObjectWeakLoadStrong( v62 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v63);

      if (v30)
      {
        uint64_t v65 = _swiftEmptyArrayStorage;
        unint64_t v98 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v66 = *(void *)(v59 + 16);
        if (v66)
        {
          uint64_t v67 = v59 + ((*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
          uint64_t v68 = *(void *)(v94 + 72);
          swift_bridgeObjectRetain(v59);
          do
          {
            sub_1000A7C90(v67, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            id v69 = sub_1000BC2B0();
            uint64_t v70 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
            unint64_t v72 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v71 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v72 >= v71 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1LL);
            }
            uint64_t v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v69);
            specialized Array._endMutation()(v73);
            v67 += v68;
            --v66;
          }

          while (v66);
          swift_bridgeObjectRelease(v59);
          uint64_t v65 = (void *)v98;
        }

        swift_bridgeObjectRelease(v59);
        sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
        v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v65);
        objc_msgSend(v30, "allMagicPairingRecordsRemovedWithRecords:", v57.super.isa, v94);
        goto LABEL_40;
      }
    }

    NSString v40 = (void *)v59;
    return swift_bridgeObjectRelease(v40);
  }

  uint64_t v74 = sub_100122A9C(a1);
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v76 = v97;
    swift_beginAccess(v97, v99, 0LL, 0LL);
    uint64_t v78 = swift_unknownObjectWeakLoadStrong(v76, v77);
    if (v78)
    {
      uint64_t v80 = (void *)v78;
      uint64_t v81 = swift_unknownObjectWeakLoadStrong( v78 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate,  v79);
      if (v81)
      {
        uint64_t v82 = (void *)v81;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v82 aaDeviceRecordsRemovedWithRecords:isa];

        swift_bridgeObjectRelease(v75);
        return swift_unknownObjectRelease(v82);
      }
    }

    NSString v40 = v75;
    return swift_bridgeObjectRelease(v40);
  }

  v99[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v87 = a1;
    }
    else {
      uint64_t v87 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter(v87);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v85);
    swift_bridgeObjectRetain(a1);
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter(v87);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (v88) {
      goto LABEL_43;
    }
LABEL_55:
    uint64_t v89 = v99[0];
    uint64_t v90 = v97;
    swift_beginAccess(v97, v99, 0LL, 0LL);
    uint64_t v92 = (void *)swift_unknownObjectWeakLoadStrong(v90, v91);
    if (v92) {

    }
    return swift_release(v89);
  }

  uint64_t v85 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v85);
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_55;
  }
LABEL_43:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v93 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v93);
  }

  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return result;
  }

  swift_release(v99[0]);
  v99[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v85);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v86 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_unknownObjectRelease(v86);
  }

  return swift_release(v99[0]);
}

void *sub_100132E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v90 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v91 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v92 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2 + 16;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_100234C20 != -1) {
    swift_once(&qword_100234C20, sub_10018A978);
  }
  uint64_t v16 = qword_10023DFC0;
  uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v20 = Array.description.getter(v19, v10);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_10009914C();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "records Purged: %@", 18LL, 2LL, v18);
  swift_bridgeObjectRelease(v18);
  uint64_t v23 = sub_100122E54( a1,  type metadata accessor for DeviceRecord,  (void (*)(BOOL, unint64_t, uint64_t))sub_100161180);
  if (v23)
  {
    uint64_t v24 = v23;
    swift_beginAccess(v13, v94, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v13, v25);
    if (Strong)
    {
      uint64_t v28 = (void *)Strong;
      uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v27);

      if (v29)
      {
        uint64_t v30 = _swiftEmptyArrayStorage;
        unint64_t v93 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v31 = v24[2];
        if (v31)
        {
          uint64_t v32 = (uint64_t)v24
              + ((*(unsigned __int8 *)(v92 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
          uint64_t v33 = *(void *)(v92 + 72);
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000A7C90(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
            id v34 = sub_1000B1A88();
            uint64_t v35 = sub_1000A7CD4((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
            unint64_t v37 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v36 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v37 >= v36 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
            }
            uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
            specialized Array._endMutation()(v38);
            v32 += v33;
            --v31;
          }

          while (v31);
          swift_bridgeObjectRelease(v24);
          uint64_t v30 = (void *)v93;
        }

        swift_bridgeObjectRelease(v24);
        sub_1000A4A64(0LL, &qword_100235850, &OBJC_CLASS___BTCloudDevice_ptr);
        v55.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v30);
        [v29 allDevicesRemovedWithRecords:v55.super.isa];
LABEL_35:

        unint64_t v72 = v29;
        return (void *)swift_unknownObjectRelease(v72);
      }
    }

    uint64_t v39 = v24;
    return (void *)swift_bridgeObjectRelease(v39);
  }

  NSString v40 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_100161154,  type metadata accessor for DeviceRecord);
  if (v40)
  {
    uint64_t v41 = v40;
    swift_beginAccess(v13, v94, 0LL, 0LL);
    uint64_t v43 = swift_unknownObjectWeakLoadStrong(v13, v42);
    if (v43)
    {
      uint64_t v45 = (void *)v43;
      uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong( v43 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v44);

      if (v29)
      {
        uint64_t v46 = _swiftEmptyArrayStorage;
        unint64_t v93 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v47 = v41[2];
        if (v47)
        {
          uint64_t v48 = (uint64_t)v41
              + ((*(unsigned __int8 *)(v91 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
          uint64_t v49 = *(void *)(v91 + 72);
          swift_bridgeObjectRetain(v41);
          do
          {
            sub_1000A7C90(v48, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            id v50 = sub_1000B737C();
            uint64_t v51 = sub_1000A7CD4((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
            unint64_t v53 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v52 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v53 >= v52 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1LL);
            }
            uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
            specialized Array._endMutation()(v54);
            v48 += v49;
            --v47;
          }

          while (v47);
          swift_bridgeObjectRelease(v41);
          uint64_t v46 = (void *)v93;
        }

        swift_bridgeObjectRelease(v41);
        sub_1000A4A64(0LL, (unint64_t *)&unk_100236F00, &OBJC_CLASS___BTCloudDeviceSupportInformation_ptr);
        v55.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v46);
        [v29 allDeviceSupportInformationRecordsRemovedWithRecords:v55.super.isa];
        goto LABEL_35;
      }
    }

    goto LABEL_32;
  }

  uint64_t v56 = sub_100122C10( a1,  &qword_100235848,  (void (*)(void, uint64_t, void, __n128))sub_100161128,  type metadata accessor for DeviceRecord);
  if (v56)
  {
    uint64_t v41 = v56;
    swift_beginAccess(v13, v94, 0LL, 0LL);
    uint64_t v58 = swift_unknownObjectWeakLoadStrong(v13, v57);
    if (!v58
      || (uint64_t v60 = (void *)v58,
          uint64_t v61 = (void *)swift_unknownObjectWeakLoadStrong( v58 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate,  v59),  v60,  !v61))
    {
LABEL_32:
      uint64_t v39 = v41;
      return (void *)swift_bridgeObjectRelease(v39);
    }

    uint64_t v62 = _swiftEmptyArrayStorage;
    unint64_t v93 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v63 = v41[2];
    if (v63)
    {
      uint64_t v64 = (uint64_t)v41 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
      uint64_t v65 = *(void *)(v90 + 72);
      swift_bridgeObjectRetain(v41);
      do
      {
        sub_1000A7C90(v64, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
        id v66 = sub_1000BC2B0();
        uint64_t v67 = sub_1000A7CD4((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
        unint64_t v69 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v68 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v69 >= v68 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1LL);
        }
        uint64_t v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v66);
        specialized Array._endMutation()(v70);
        v64 += v65;
        --v63;
      }

      while (v63);
      swift_bridgeObjectRelease(v41);
      uint64_t v62 = (void *)v93;
    }

    swift_bridgeObjectRelease(v41);
    sub_1000A4A64(0LL, &qword_100235800, &OBJC_CLASS___BTMagicPairingSettings_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v62);
    [v61 allMagicPairingRecordsRemovedWithRecords:isa];

LABEL_44:
    unint64_t v72 = v61;
    return (void *)swift_unknownObjectRelease(v72);
  }

  uint64_t v73 = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
  if (v73)
  {
    uint64_t v74 = v73;
    swift_beginAccess(v13, v94, 0LL, 0LL);
    uint64_t v76 = swift_unknownObjectWeakLoadStrong(v13, v75);
    if (v76)
    {
      uint64_t v78 = (void *)v76;
      uint64_t v79 = swift_unknownObjectWeakLoadStrong( v76 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate,  v77);
      if (v79)
      {
        uint64_t v61 = (void *)v79;
        type metadata accessor for AADeviceRecord(0LL);
        v80.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v61 aaDeviceRecordsRemovedWithRecords:v80.super.isa];
LABEL_42:

        swift_bridgeObjectRelease(v74);
        goto LABEL_44;
      }

      goto LABEL_53;
    }

    goto LABEL_48;
  }

  uint64_t v82 = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
  if (v82)
  {
    uint64_t v74 = v82;
    swift_beginAccess(v13, v94, 0LL, 0LL);
    uint64_t v84 = (void *)swift_unknownObjectWeakLoadStrong(v13, v83);
    if (v84) {

    }
    goto LABEL_48;
  }

  uint64_t result = sub_100122D40(a1, &qword_100235848, type metadata accessor for DeviceRecord);
  if (result)
  {
    uint64_t v74 = result;
    swift_beginAccess(v13, v94, 0LL, 0LL);
    uint64_t v86 = swift_unknownObjectWeakLoadStrong(v13, v85);
    if (v86)
    {
      uint64_t v78 = (void *)v86;
      uint64_t v88 = swift_unknownObjectWeakLoadStrong( v86 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_hmDeviceDelegate,  v87);
      if (v88)
      {
        uint64_t v61 = (void *)v88;
        type metadata accessor for HMDeviceCloudRecord(0LL);
        v80.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v61 hmDeviceCloudRecordsRemovedWithRecords:v80.super.isa];
        goto LABEL_42;
      }

unint64_t sub_1001335EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v8 = sub_100161768(a1, a2, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161858);
    char v10 = v22;
    goto LABEL_39;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    }
    unint64_t v8 = (unint64_t)sub_100161858(v7, v5, 10LL);
    char v10 = v9 & 1;
    goto LABEL_39;
  }

  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }

uint64_t sub_100133850(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      }
      uint64_t v7 = (uint64_t)sub_100161AD4(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_37;
    }

    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          uint64_t v7 = v17 + v16;
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                uint64_t v7 = v13 - v12;
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }

uint64_t sub_100133AA4( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v13 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = PropertyListDecoder.init()();
  uint64_t v15 = a3(0LL);
  uint64_t v16 = sub_100098C98(a4, a3, a5);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v15, a1, a2, v15, v16);
  if (v6)
  {
    uint64_t v17 = swift_release(v14);
    uint64_t v18 = static os_log_type_t.error.getter(v17);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v19 = qword_10023DFD0;
    uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    v32[0] = v15;
    uint64_t v22 = sub_100098CD8(a6);
    uint64_t v23 = String.init<A>(describing:)(v32, v22);
    uint64_t v25 = v24;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v26 = sub_10009914C();
    *(void *)(v21 + 64) = v26;
    *(void *)(v21 + 32) = v23;
    *(void *)(v21 + 40) = v25;
    v32[0] = v6;
    swift_errorRetain(v6);
    uint64_t v27 = sub_100098CD8(&qword_1002357C0);
    uint64_t v28 = String.init<A>(describing:)(v32, v27);
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v26;
    *(void *)(v21 + 72) = v28;
    *(void *)(v21 + 80) = v29;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Error decoding %@: %@", 21LL, 2LL, v21);
    uint64_t v30 = swift_bridgeObjectRelease(v21);
    return swift_willThrow(v30);
  }

  else
  {
    swift_release(v14);
    return v32[2];
  }

uint64_t sub_100133C80( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = PropertyListDecoder.init()();
  uint64_t v14 = a3(0LL);
  uint64_t v15 = sub_100098C98(a4, a3, a5);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v14, a1, a2, v14, v15);
  if (!v6) {
    return swift_release(v13);
  }
  uint64_t v16 = swift_release(v13);
  uint64_t v17 = static os_log_type_t.error.getter(v16);
  if (qword_100234C30 != -1) {
    swift_once(&qword_100234C30, sub_10018AA44);
  }
  uint64_t v18 = qword_10023DFD0;
  uint64_t v19 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  uint64_t v32 = v14;
  uint64_t v21 = sub_100098CD8(a6);
  uint64_t v22 = String.init<A>(describing:)(&v32, v21);
  uint64_t v24 = v23;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v25 = sub_10009914C();
  *(void *)(v20 + 64) = v25;
  *(void *)(v20 + 32) = v22;
  *(void *)(v20 + 40) = v24;
  uint64_t v32 = v6;
  swift_errorRetain(v6);
  uint64_t v26 = sub_100098CD8(&qword_1002357C0);
  uint64_t v27 = String.init<A>(describing:)(&v32, v26);
  *(void *)(v20 + 96) = &type metadata for String;
  *(void *)(v20 + 104) = v25;
  *(void *)(v20 + 72) = v27;
  *(void *)(v20 + 80) = v28;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Error decoding %@: %@", 21LL, 2LL, v20);
  uint64_t v29 = swift_bridgeObjectRelease(v20);
  return swift_willThrow(v29);
}

void sub_100133E54(uint64_t a1, uint64_t a2)
{
}

void sub_100133ECC( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t a6, double (*a7)(char *, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v94 = a8;
  uint64_t v95 = a1;
  uint64_t v97 = a7;
  *(void *)&__int128 v96 = a6;
  uint64_t v12 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v99 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  unint64_t v98 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v90 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v90 - v21;
  id v23 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v23)
  {
    uint64_t v91 = v13;
    uint64_t v92 = v12;
    unint64_t v93 = objc_autoreleasePoolPush();
    uint64_t v24 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    uint64_t v25 = PropertyListEncoder.init()();
    uint64_t v26 = a3(0LL);
    uint64_t v27 = sub_100098C98(a4, a3, a5);
    Class v28 = isa;
    uint64_t v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v26, v27);
    if (v28)
    {
      swift_release(v25);
      objc_autoreleasePoolPop(v93);
    }

    else
    {
      uint64_t v35 = v29;
      unint64_t v36 = v30;
      uint64_t v90 = 0LL;
      swift_release(v25);
      objc_autoreleasePoolPop(v93);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v35, v36);
      uint64_t v37 = v95 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (*(void *)v96 != -1LL) {
        swift_once(v96, v94);
      }
      uint64_t v38 = v100;
      uint64_t v39 = sub_100098D58(v100, (uint64_t)v97);
      uint64_t v97 = *(double (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v40.n128_f64[0] = v97(v19, v39, v38);
      uint64_t v41 = URL.path.getter(v40);
      uint64_t v43 = v42;
      uint64_t v44 = *(void (**)(char *, uint64_t))(v15 + 8);
      v44(v19, v38);
      URL.appendingPathComponent(_:)(v41);
      swift_bridgeObjectRelease(v43);
      *(void *)&__int128 v96 = v37;
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v45 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v45);
      uint64_t v46 = ((uint64_t (*)(char *, uint64_t))v44)(v22, v38);
      uint64_t v47 = UUID.uuidString.getter(v46);
      uint64_t v49 = v48;
      v97(v22, v39, v38);
      id v50 = objc_autoreleasePoolPush();
      uint64_t v52 = URL.path.getter(v51);
      unint64_t v53 = v44;
      uint64_t v55 = v54;
      URL.appendingPathComponent(_:)(v52);
      swift_bridgeObjectRelease(v55);
      uint64_t v56 = v98;
      URL.appendingPathComponent(_:)(v47);
      v53(v19, v38);
      objc_autoreleasePoolPop(v50);
      swift_bridgeObjectRelease(v49);
      uint64_t v97 = (double (*)(char *, uint64_t, uint64_t))v53;
      v53(v22, v38);
      unint64_t v104 = &type metadata for AudioAccessoryFeatures;
      unint64_t v57 = sub_10009E740();
      unint64_t v105 = v57;
      LOBYTE(v103[0]) = 0;
      isFeatureEnabled(_:)(v103);
      sub_10009A498(v103);
      unint64_t v104 = &type metadata for AudioAccessoryFeatures;
      unint64_t v105 = v57;
      LOBYTE(v103[0]) = 0;
      isFeatureEnabled(_:)(v103);
      uint64_t v58 = sub_10009A498(v103);
      uint64_t v59 = v99;
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      uint64_t v64 = static os_log_type_t.default.getter(v63);
      uint64_t v65 = v38;
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v66 = qword_10023DFD0;
      uint64_t v67 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
      __int128 v96 = xmmword_1001A5EA0;
      *(_OWORD *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v69 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v65, v69);
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      *(void *)(v68 + 64) = sub_10009914C();
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v66, "Writing record to file: %@", 26LL, 2LL, v68);
      swift_bridgeObjectRelease(v68);
      uint64_t v73 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v73, v102);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v96;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10009EFF0(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      uint64_t v79 = sub_1001382AC(v77);
      swift_bridgeObjectRelease(v77);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v79);
      URL.path.getter(v81);
      uint64_t v83 = v82;
      NSString v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v83);
      v103[0] = 0LL;
      LOBYTE(v83) = [v78 setAttributes:v80 ofItemAtPath:v84 error:v103];

      id v85 = v103[0];
      if ((v83 & 1) != 0)
      {
        id v86 = v103[0];
        URL.setResourceValues(_:)(v59);
        uint64_t v87 = v91;

        (*(void (**)(char *, uint64_t))(v87 + 8))(v59, v92);
      }

      else
      {
        id v88 = v103[0];
        _convertNSErrorToError(_:)(v85);

        swift_willThrow(v89);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v59, v92);
      }

      ((void (*)(char *, uint64_t))v97)(v56, v65);
    }
  }

  else
  {
    uint64_t v31 = static os_log_type_t.default.getter(v23);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v32 = sub_1000DB8A4();
    uint64_t v33 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v32, 0LL, 0LL);
    *id v34 = 0x8000000000000010LL;
    swift_willThrow(v33);
  }

void sub_10013462C(uint64_t a1, uint64_t a2)
{
  uint64_t v105 = a1;
  uint64_t v4 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DeviceRecord(0LL);
  __chkstk_darwin(v8);
  unint64_t v107 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  *(void *)&__int128 v106 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v108 = (char *)&v96 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v96 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v96 - v18;
  id v20 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v20)
  {
    uint64_t v102 = v5;
    uint64_t v103 = v10;
    unint64_t v101 = v7;
    uint64_t v21 = objc_autoreleasePoolPush();
    uint64_t v22 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    uint64_t v23 = PropertyListEncoder.init()();
    uint64_t v24 = sub_100098C98(&qword_100234F30, type metadata accessor for DeviceRecord, (uint64_t)&unk_1001A6830);
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v8, v24);
    uint64_t v104 = v2;
    if (v2)
    {
      swift_release(v23);
      objc_autoreleasePoolPop(v21);
    }

    else
    {
      uint64_t v31 = v25;
      unint64_t v32 = v26;
      swift_release(v23);
      objc_autoreleasePoolPop(v21);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v31, v32);
      v105 += OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      uint64_t v99 = v4;
      uint64_t v33 = v109;
      uint64_t v34 = sub_100098D58(v109, (uint64_t)qword_10023DCC0);
      uint64_t v35 = v103;
      uint64_t v100 = *(double (**)(char *, uint64_t, uint64_t))(v103 + 16);
      v36.n128_f64[0] = v100(v16, v34, v33);
      uint64_t v37 = URL.path.getter(v36);
      uint64_t v39 = v38;
      __n128 v40 = *(void (**)(char *, uint64_t))(v35 + 8);
      v40(v16, v33);
      URL.appendingPathComponent(_:)(v37);
      swift_bridgeObjectRelease(v39);
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v41 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v41);
      uint64_t v42 = ((uint64_t (*)(char *, uint64_t))v40)(v19, v33);
      uint64_t v96 = UUID.uuidString.getter(v42);
      uint64_t v43 = v40;
      uint64_t v45 = v44;
      v100(v19, v34, v109);
      uint64_t v46 = objc_autoreleasePoolPush();
      uint64_t v48 = URL.path.getter(v47);
      uint64_t v97 = v34;
      uint64_t v50 = v49;
      URL.appendingPathComponent(_:)(v48);
      swift_bridgeObjectRelease(v50);
      URL.appendingPathComponent(_:)(v96);
      v43(v16, v109);
      objc_autoreleasePoolPop(v46);
      swift_bridgeObjectRelease(v45);
      v43(v19, v109);
      __n128 v51 = v107;
      sub_1000A7C90(a2, (uint64_t)v107, type metadata accessor for DeviceRecord);
      uint64_t v52 = (uint64_t *)&v51[*(int *)(v8 + 24)];
      uint64_t v53 = v52[1];
      uint64_t v96 = *v52;
      v100(v16, v97, v109);
      swift_bridgeObjectRetain(v53);
      uint64_t v54 = objc_autoreleasePoolPush();
      uint64_t v56 = URL.path.getter(v55);
      uint64_t v58 = v57;
      uint64_t v59 = (char *)v106;
      URL.appendingPathComponent(_:)(v56);
      uint64_t v60 = v58;
      uint64_t v61 = v108;
      swift_bridgeObjectRelease(v60);
      URL.appendingPathComponent(_:)(v96);
      v43(v59, v109);
      objc_autoreleasePoolPop(v54);
      swift_bridgeObjectRelease(v53);
      v43(v16, v109);
      uint64_t v62 = (uint64_t)v51;
      uint64_t v63 = v109;
      sub_1000A7CD4(v62, type metadata accessor for DeviceRecord);
      unint64_t v107 = (char *)v43;
      v43(v61, v63);
      uint64_t v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v103 + 32))(v61, v19, v63);
      uint64_t v65 = v101;
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      URL._bridgeToObjectiveC()(v66);
      uint64_t v68 = v67;
      Class v69 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1LL);

      uint64_t v71 = static os_log_type_t.default.getter(v70);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v72 = qword_10023DFD0;
      uint64_t v73 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
      __int128 v106 = xmmword_1001A5EA0;
      *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v75 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v63, v75);
      uint64_t v78 = v77;
      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = sub_10009914C();
      *(void *)(v74 + 32) = v76;
      *(void *)(v74 + 40) = v78;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Writing record to file: %@", 26LL, 2LL, v74);
      swift_bridgeObjectRelease(v74);
      uint64_t v79 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v79, v111);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v106;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      __n128 v81 = NSFileProtectionKey;
      uint64_t v82 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v83 = sub_10009EFF0(inited);
      id v84 = [(id)objc_opt_self(NSFileManager) defaultManager];
      id v85 = sub_1001382AC(v83);
      swift_bridgeObjectRelease(v83);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v85);
      URL.path.getter(v87);
      uint64_t v89 = v88;
      NSString v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v89);
      id v110 = 0LL;
      LOBYTE(v89) = [v84 setAttributes:v86 ofItemAtPath:v90 error:&v110];

      id v91 = v110;
      uint64_t v92 = v99;
      if ((v89 & 1) != 0)
      {
        id v93 = v110;
        URL.setResourceValues(_:)(v65);
      }

      else
      {
        id v94 = v110;
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v95);
      }

      (*(void (**)(char *, uint64_t))(v102 + 8))(v65, v92);
      ((void (*)(char *, uint64_t))v107)(v61, v63);
    }
  }

  else
  {
    uint64_t v27 = static os_log_type_t.default.getter(v20);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000DB8A4();
    uint64_t v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0x8000000000000010LL;
    swift_willThrow(v29);
  }

void sub_100134E6C( double (*a1)(char *), uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v116 = a8;
  uint64_t v117 = a1;
  BOOL v118 = a6;
  int v119 = (char *)a7;
  uint64_t v13 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  uint64_t v124 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = ((uint64_t (*)(void, __n128))a3)(0LL, v15);
  __chkstk_darwin(v17);
  uint64_t v122 = (void **)((char *)&v109 - v18);
  uint64_t v126 = type metadata accessor for URL(0LL);
  *(void *)&__int128 v125 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v121 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v123 = (char *)&v109 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v109 - v23;
  __chkstk_darwin(v25);
  uint64_t v120 = (char *)&v109 - v26;
  id v27 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v27)
  {
    uint64_t v114 = v14;
    uint64_t v115 = v13;
    unint64_t v28 = objc_autoreleasePoolPush();
    uint64_t v29 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    uint64_t v30 = PropertyListEncoder.init()();
    uint64_t v31 = sub_100098C98(a4, a3, a5);
    uint64_t v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v17, v31);
    if (v8)
    {
      swift_release(v30);
      objc_autoreleasePoolPop(v28);
    }

    else
    {
      uint64_t v38 = v32;
      unint64_t v39 = v33;
      uint64_t v111 = v17;
      uint64_t v110 = a2;
      uint64_t v112 = a3;
      swift_release(v30);
      objc_autoreleasePoolPop(v28);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v38, v39);
      __n128 v40 = (char *)v117 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (*v118 != -1LL) {
        swift_once(v118, v116);
      }
      BOOL v118 = 0LL;
      uint64_t v41 = v126;
      uint64_t v42 = sub_100098D58(v126, (uint64_t)v119);
      uint64_t v43 = v125;
      uint64_t v44 = v42;
      uint64_t v117 = *(double (**)(char *))(v125 + 16);
      v45.n128_f64[0] = v117(v24);
      uint64_t v46 = URL.path.getter(v45);
      uint64_t v48 = v47;
      uint64_t v49 = *(void ***)(v43 + 8);
      ((void (*)(char *, uint64_t))v49)(v24, v41);
      uint64_t v50 = v120;
      URL.appendingPathComponent(_:)(v46);
      swift_bridgeObjectRelease(v48);
      uint64_t v51 = v110;
      int v119 = v40;
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v52 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v52);
      uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v49)(v50, v41);
      uint64_t v54 = UUID.uuidString.getter(v53);
      uint64_t v56 = v55;
      uint64_t v57 = v44;
      uint64_t v116 = v44;
      uint64_t v58 = (void (*)(char *, uint64_t, uint64_t))v117;
      ((void (*)(char *, uint64_t, uint64_t))v117)(v50, v57, v126);
      uint64_t v109 = objc_autoreleasePoolPush();
      uint64_t v60 = URL.path.getter(v59);
      uint64_t v62 = v61;
      URL.appendingPathComponent(_:)(v60);
      swift_bridgeObjectRelease(v62);
      uint64_t v63 = v51;
      uint64_t v64 = v123;
      URL.appendingPathComponent(_:)(v54);
      ((void (*)(char *, uint64_t))v49)(v24, v126);
      objc_autoreleasePoolPop(v109);
      swift_bridgeObjectRelease(v56);
      ((void (*)(char *, uint64_t))v49)(v50, v126);
      uint64_t v65 = v63;
      uint64_t v66 = (char *)v122;
      sub_1000A7C90(v65, (uint64_t)v122, v112);
      uint64_t v67 = (uint64_t *)&v66[*(int *)(v111 + 24)];
      uint64_t v68 = v67[1];
      uint64_t v111 = *v67;
      v58(v24, v116, v126);
      swift_bridgeObjectRetain(v68);
      uint64_t v117 = (double (*)(char *))objc_autoreleasePoolPush();
      uint64_t v70 = URL.path.getter(v69);
      uint64_t v72 = v71;
      uint64_t v73 = v121;
      URL.appendingPathComponent(_:)(v70);
      uint64_t v74 = v72;
      uint64_t v75 = v126;
      swift_bridgeObjectRelease(v74);
      URL.appendingPathComponent(_:)(v111);
      ((void (*)(char *, uint64_t))v49)(v73, v75);
      objc_autoreleasePoolPop(v117);
      swift_bridgeObjectRelease(v68);
      ((void (*)(char *, uint64_t))v49)(v24, v75);
      sub_1000A7CD4((uint64_t)v66, v112);
      uint64_t v122 = v49;
      ((void (*)(char *, uint64_t))v49)(v64, v75);
      uint64_t v76 = v50;
      uint64_t v77 = v64;
      uint64_t v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v125 + 32))(v64, v76, v75);
      uint64_t v79 = v124;
      URLResourceValues.init()(v78);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      URL._bridgeToObjectiveC()(v80);
      uint64_t v82 = v81;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v81, 1LL);

      uint64_t v84 = static os_log_type_t.default.getter(v83);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v85 = qword_10023DFD0;
      uint64_t v86 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v87 = swift_allocObject(v86, 72LL, 7LL);
      __int128 v125 = xmmword_1001A5EA0;
      *(_OWORD *)(v87 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v88 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter(v75, v88);
      uint64_t v91 = v90;
      *(void *)(v87 + 56) = &type metadata for String;
      *(void *)(v87 + 64) = sub_10009914C();
      *(void *)(v87 + 32) = v89;
      *(void *)(v87 + 40) = v91;
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "Writing record to file: %@", 26LL, 2LL, v87);
      swift_bridgeObjectRelease(v87);
      uint64_t v92 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v92, v128);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v125;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v94 = NSFileProtectionKey;
      uint64_t v95 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v96 = sub_10009EFF0(inited);
      id v97 = [(id)objc_opt_self(NSFileManager) defaultManager];
      unint64_t v98 = sub_1001382AC(v96);
      swift_bridgeObjectRelease(v96);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v99 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v98);
      URL.path.getter(v100);
      uint64_t v102 = v101;
      NSString v103 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v102);
      id v127 = 0LL;
      LOBYTE(v102) = [v97 setAttributes:v99 ofItemAtPath:v103 error:&v127];

      id v104 = v127;
      uint64_t v105 = v114;
      if ((v102 & 1) != 0)
      {
        id v106 = v127;
        URL.setResourceValues(_:)(v79);
      }

      else
      {
        id v107 = v127;
        _convertNSErrorToError(_:)(v104);

        swift_willThrow(v108);
      }

      (*(void (**)(char *, uint64_t))(v105 + 8))(v79, v115);
      ((void (*)(char *, uint64_t))v122)(v77, v75);
    }
  }

  else
  {
    uint64_t v34 = static os_log_type_t.default.getter(v27);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v35 = sub_1000DB8A4();
    uint64_t v36 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v35, 0LL, 0LL);
    *uint64_t v37 = 0x8000000000000010LL;
    swift_willThrow(v36);
  }

void sub_1001356D8(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v93 = a1;
  uint64_t v4 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v10 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v86 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v86 - v15;
  id v17 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v17)
  {
    uint64_t v90 = v10;
    uint64_t v91 = v7;
    uint64_t v88 = v5;
    uint64_t v89 = v4;
    uint64_t v18 = objc_autoreleasePoolPush();
    uint64_t v19 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    uint64_t v20 = PropertyListEncoder.init()();
    uint64_t v21 = type metadata accessor for SoundProfileRecord(0LL);
    uint64_t v22 = sub_100098C98(&qword_1002353D8, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001A7124);
    uint64_t v23 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v21, v22);
    uint64_t v92 = v2;
    if (v2)
    {
      swift_release(v20);
      objc_autoreleasePoolPop(v18);
    }

    else
    {
      uint64_t v29 = v23;
      unint64_t v30 = v24;
      v86[1] = a2;
      swift_release(v20);
      objc_autoreleasePoolPop(v18);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v29, v30);
      *(void *)&__int128 v93 = v93 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100234B48 != -1) {
        swift_once(&qword_100234B48, sub_1000A5118);
      }
      uint64_t v31 = v94;
      uint64_t v32 = sub_100098D58(v94, (uint64_t)qword_10023DD18);
      unint64_t v33 = *(double (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v34.n128_f64[0] = v33(v13, v32, v31);
      uint64_t v35 = URL.path.getter(v34);
      uint64_t v37 = v36;
      uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
      v38(v13, v31);
      URL.appendingPathComponent(_:)(v35);
      swift_bridgeObjectRelease(v37);
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v39 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = ((uint64_t (*)(char *, uint64_t))v38)(v16, v31);
      uint64_t v41 = UUID.uuidString.getter(v40);
      uint64_t v43 = v42;
      v33(v16, v32, v31);
      uint64_t v44 = v38;
      __n128 v45 = objc_autoreleasePoolPush();
      uint64_t v47 = URL.path.getter(v46);
      uint64_t v49 = v48;
      URL.appendingPathComponent(_:)(v47);
      swift_bridgeObjectRelease(v49);
      URL.appendingPathComponent(_:)(v41);
      v44(v13, v31);
      objc_autoreleasePoolPop(v45);
      swift_bridgeObjectRelease(v43);
      uint64_t v50 = v16;
      uint64_t v51 = v44;
      v44(v50, v31);
      id v97 = &type metadata for AudioAccessoryFeatures;
      unint64_t v52 = sub_10009E740();
      unint64_t v98 = v52;
      LOBYTE(v96[0]) = 0;
      isFeatureEnabled(_:)(v96);
      sub_10009A498(v96);
      id v97 = &type metadata for AudioAccessoryFeatures;
      unint64_t v98 = v52;
      LOBYTE(v96[0]) = 0;
      isFeatureEnabled(_:)(v96);
      uint64_t v53 = sub_10009A498(v96);
      URLResourceValues.init()(v53);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      URL._bridgeToObjectiveC()(v54);
      uint64_t v56 = v55;
      Class v57 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v55, 1LL);

      uint64_t v59 = static os_log_type_t.default.getter(v58);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v60 = qword_10023DFD0;
      uint64_t v61 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
      __int128 v93 = xmmword_1001A5EA0;
      *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v63 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v31, v63);
      uint64_t v66 = v65;
      *(void *)(v62 + 56) = &type metadata for String;
      *(void *)(v62 + 64) = sub_10009914C();
      *(void *)(v62 + 32) = v64;
      *(void *)(v62 + 40) = v66;
      uint64_t v67 = v90;
      os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Writing record to file: %@", 26LL, 2LL, v62);
      swift_bridgeObjectRelease(v62);
      uint64_t v68 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v68, v95);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v93;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v70 = NSFileProtectionKey;
      uint64_t v71 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v72 = sub_10009EFF0(inited);
      id v73 = [(id)objc_opt_self(NSFileManager) defaultManager];
      uint64_t v74 = sub_1001382AC(v72);
      swift_bridgeObjectRelease(v72);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v75 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v74);
      URL.path.getter(v76);
      uint64_t v78 = v77;
      NSString v79 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v78);
      v96[0] = 0LL;
      LOBYTE(v78) = [v73 setAttributes:v75 ofItemAtPath:v79 error:v96];

      id v80 = v96[0];
      if ((v78 & 1) != 0)
      {
        id v81 = v96[0];
        uint64_t v82 = v91;
        URL.setResourceValues(_:)(v91);
        uint64_t v83 = v88;

        (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v89);
      }

      else
      {
        id v84 = v96[0];
        _convertNSErrorToError(_:)(v80);

        swift_willThrow(v85);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v89);
      }

      v51(v67, v31);
    }
  }

  else
  {
    uint64_t v25 = static os_log_type_t.default.getter(v17);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v26 = sub_1000DB8A4();
    uint64_t v27 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v26, 0LL, 0LL);
    *unint64_t v28 = 0x8000000000000010LL;
    swift_willThrow(v27);
  }

void sub_100135E10(char *a1, void *a2)
{
  id v106 = a1;
  uint64_t v4 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v107 = (char *)&v96 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v96 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v96 - v17;
  id v19 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v19)
  {
    uint64_t v102 = v7;
    uint64_t v103 = v5;
    uint64_t v104 = v4;
    uint64_t v20 = objc_autoreleasePoolPush();
    v110[0] = a2;
    uint64_t v21 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = PropertyListEncoder.init()();
    uint64_t v23 = type metadata accessor for HMDeviceCloudRecord(0LL);
    uint64_t v24 = sub_100098C98( &qword_100235D88,  type metadata accessor for HMDeviceCloudRecord,  (uint64_t)&protocol conformance descriptor for HMDeviceCloudRecord);
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v110, v23, v24);
    uint64_t v105 = v2;
    if (v2)
    {
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
    }

    else
    {
      uint64_t v31 = v25;
      unint64_t v32 = v26;
      *(void *)&__int128 v100 = a2;
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v31, v32);
      unint64_t v33 = &v106[OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL];
      if (qword_100234BC0 != -1) {
        swift_once(&qword_100234BC0, sub_1000DD8E4);
      }
      uint64_t v34 = v108;
      uint64_t v35 = sub_100098D58(v108, (uint64_t)qword_10023DE08);
      id v106 = *(char **)(v8 + 16);
      v36.n128_f64[0] = ((double (*)(char *, uint64_t, uint64_t))v106)(v15, v35, v34);
      uint64_t v37 = URL.path.getter(v36);
      uint64_t v39 = v38;
      uint64_t v98 = v8;
      uint64_t v40 = *(void (**)(char *, uint64_t))(v8 + 8);
      v40(v15, v34);
      URL.appendingPathComponent(_:)(v37);
      swift_bridgeObjectRelease(v39);
      Class v99 = v33;
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v41 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v41);
      uint64_t v42 = ((uint64_t (*)(char *, uint64_t))v40)(v18, v34);
      uint64_t v43 = UUID.uuidString.getter(v42);
      uint64_t v45 = v44;
      ((void (*)(char *, uint64_t, uint64_t))v106)(v18, v35, v34);
      __n128 v46 = objc_autoreleasePoolPush();
      uint64_t v97 = v35;
      uint64_t v47 = v46;
      uint64_t v49 = URL.path.getter(v48);
      uint64_t v51 = v50;
      URL.appendingPathComponent(_:)(v49);
      swift_bridgeObjectRelease(v51);
      URL.appendingPathComponent(_:)(v43);
      v40(v15, v108);
      objc_autoreleasePoolPop(v47);
      swift_bridgeObjectRelease(v45);
      v40(v18, v108);
      uint64_t v111 = &type metadata for AudioAccessoryFeatures;
      unint64_t v52 = sub_10009E740();
      unint64_t v112 = v52;
      LOBYTE(v110[0]) = 0;
      isFeatureEnabled(_:)(v110);
      sub_10009A498(v110);
      uint64_t v111 = &type metadata for AudioAccessoryFeatures;
      unint64_t v112 = v52;
      LOBYTE(v110[0]) = 0;
      isFeatureEnabled(_:)(v110);
      sub_10009A498(v110);
      uint64_t v53 = (void *)v100;
      uint64_t v54 = *(void *)(v100 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress);
      ((void (*)(char *, uint64_t, uint64_t))v106)(v15, v97, v108);
      *(void *)&__int128 v100 = v53;
      uint64_t v55 = objc_autoreleasePoolPush();
      uint64_t v57 = URL.path.getter(v56);
      uint64_t v59 = v58;
      URL.appendingPathComponent(_:)(v57);
      swift_bridgeObjectRelease(v59);
      URL.appendingPathComponent(_:)(v54);
      v40(v10, v108);
      uint64_t v60 = v55;
      uint64_t v61 = v108;
      objc_autoreleasePoolPop(v60);
      v40(v15, v61);
      uint64_t v62 = v107;
      id v106 = (char *)v40;
      v40(v107, v61);

      uint64_t v63 = v18;
      uint64_t v64 = v62;
      uint64_t v65 = (*(uint64_t (**)(char *, char *, uint64_t))(v98 + 32))(v62, v63, v61);
      uint64_t v66 = v102;
      URLResourceValues.init()(v65);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      URL._bridgeToObjectiveC()(v67);
      __n128 v69 = v68;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v68, 1LL);

      uint64_t v71 = static os_log_type_t.default.getter(v70);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v72 = qword_10023DFD0;
      uint64_t v73 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
      __int128 v100 = xmmword_1001A5EA0;
      *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v75 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v61, v75);
      uint64_t v78 = v77;
      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = sub_10009914C();
      *(void *)(v74 + 32) = v76;
      *(void *)(v74 + 40) = v78;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Writing record to file: %@", 26LL, 2LL, v74);
      swift_bridgeObjectRelease(v74);
      uint64_t v79 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v79, v109);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v100;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v81 = NSFileProtectionKey;
      uint64_t v82 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v83 = sub_10009EFF0(inited);
      id v84 = [(id)objc_opt_self(NSFileManager) defaultManager];
      uint64_t v85 = sub_1001382AC(v83);
      swift_bridgeObjectRelease(v83);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v85);
      URL.path.getter(v87);
      uint64_t v89 = v88;
      NSString v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v89);
      v110[0] = 0LL;
      LODWORD(v89) = [v84 setAttributes:v86 ofItemAtPath:v90 error:v110];

      id v91 = v110[0];
      if ((_DWORD)v89)
      {
        id v92 = v110[0];
        URL.setResourceValues(_:)(v66);
        uint64_t v93 = v103;

        (*(void (**)(char *, uint64_t))(v93 + 8))(v66, v104);
      }

      else
      {
        id v94 = v110[0];
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v95);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v66, v104);
      }

      ((void (*)(char *, uint64_t))v106)(v64, v61);
    }
  }

  else
  {
    uint64_t v27 = static os_log_type_t.default.getter(v19);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000DB8A4();
    uint64_t v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0x8000000000000010LL;
    swift_willThrow(v29);
  }

void sub_100136680(uint64_t a1, char *a2)
{
  uint64_t v5 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  *(void *)&__int128 v111 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v112 = (char *)&v99 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v99 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v99 - v17;
  id v19 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v19)
  {
    uint64_t v107 = v6;
    uint64_t v108 = v5;
    uint64_t v110 = v8;
    uint64_t v20 = objc_autoreleasePoolPush();
    v115[0] = a2;
    uint64_t v21 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = PropertyListEncoder.init()();
    uint64_t v23 = type metadata accessor for AAProxCardsRecord(0LL);
    uint64_t v24 = sub_100098C98( (unint64_t *)&unk_100236FC0,  type metadata accessor for AAProxCardsRecord,  (uint64_t)&protocol conformance descriptor for AAProxCardsRecord);
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v115, v23, v24);
    uint64_t v109 = v2;
    if (v2)
    {
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
    }

    else
    {
      uint64_t v31 = v25;
      unint64_t v32 = v26;
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v31, v32);
      uint64_t v33 = a1 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      uint64_t v34 = v110;
      uint64_t v35 = sub_100098D58(v110, (uint64_t)qword_10023DCE0);
      __n128 v36 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      uint64_t v105 = v35;
      uint64_t v104 = v36;
      v37.n128_f64[0] = ((double (*)(char *))v36)(v15);
      uint64_t v38 = URL.path.getter(v37);
      uint64_t v40 = v39;
      uint64_t v101 = v9;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v9 + 8);
      v41(v15, v34);
      URL.appendingPathComponent(_:)(v38);
      swift_bridgeObjectRelease(v40);
      uint64_t v103 = v33;
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v42 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v42);
      uint64_t v43 = ((uint64_t (*)(char *, uint64_t))v41)(v18, v34);
      uint64_t v44 = UUID.uuidString.getter(v43);
      uint64_t v46 = v45;
      v104(v18, v105, v34);
      uint64_t v47 = objc_autoreleasePoolPush();
      __int128 v100 = a2;
      __n128 v48 = v47;
      uint64_t v50 = URL.path.getter(v49);
      uint64_t v52 = v51;
      URL.appendingPathComponent(_:)(v50);
      uint64_t v53 = v110;
      swift_bridgeObjectRelease(v52);
      uint64_t v54 = v112;
      URL.appendingPathComponent(_:)(v44);
      v41(v15, v53);
      objc_autoreleasePoolPop(v48);
      swift_bridgeObjectRelease(v46);
      id v106 = v41;
      v41(v18, v53);
      uint64_t v116 = &type metadata for AudioAccessoryFeatures;
      unint64_t v55 = sub_10009E740();
      unint64_t v117 = v55;
      LOBYTE(v115[0]) = 0;
      isFeatureEnabled(_:)(v115);
      sub_10009A498(v115);
      uint64_t v116 = &type metadata for AudioAccessoryFeatures;
      unint64_t v117 = v55;
      LOBYTE(v115[0]) = 0;
      LOBYTE(v55) = isFeatureEnabled(_:)(v115);
      uint64_t v56 = sub_10009A498(v115);
      if ((v55 & 1) != 0)
      {
        uint64_t v57 = v100;
        uint64_t v99 = *(void *)&v100[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
        v104(v15, v105, v53);
        id v58 = v57;
        uint64_t v59 = objc_autoreleasePoolPush();
        uint64_t v61 = URL.path.getter(v60);
        uint64_t v63 = v62;
        uint64_t v64 = (char *)v111;
        URL.appendingPathComponent(_:)(v61);
        swift_bridgeObjectRelease(v63);
        URL.appendingPathComponent(_:)(v99);
        uint64_t v65 = v106;
        v106(v64, v110);
        uint64_t v53 = v110;
        objc_autoreleasePoolPop(v59);
        v65(v15, v53);
        v65(v54, v53);

        uint64_t v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v101 + 32))(v54, v18, v53);
      }

      uint64_t v66 = v113;
      URLResourceValues.init()(v56);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v67 = v54;
      URL._bridgeToObjectiveC()(v68);
      uint64_t v70 = v69;
      Class v71 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v69, 1LL);

      uint64_t v73 = static os_log_type_t.default.getter(v72);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v74 = qword_10023DFD0;
      uint64_t v75 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v76 = swift_allocObject(v75, 72LL, 7LL);
      __int128 v111 = xmmword_1001A5EA0;
      *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v77 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v53, v77);
      uint64_t v79 = v53;
      uint64_t v81 = v80;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = sub_10009914C();
      *(void *)(v76 + 32) = v78;
      *(void *)(v76 + 40) = v81;
      os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Writing record to file: %@", 26LL, 2LL, v76);
      swift_bridgeObjectRelease(v76);
      uint64_t v82 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v82, v114);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v111;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v84 = NSFileProtectionKey;
      uint64_t v85 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v86 = sub_10009EFF0(inited);
      id v87 = [(id)objc_opt_self(NSFileManager) defaultManager];
      uint64_t v88 = sub_1001382AC(v86);
      swift_bridgeObjectRelease(v86);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v89 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v88);
      URL.path.getter(v90);
      uint64_t v92 = v91;
      NSString v93 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v92);
      v115[0] = 0LL;
      LODWORD(v92) = [v87 setAttributes:v89 ofItemAtPath:v93 error:v115];

      id v94 = v115[0];
      uint64_t v95 = v106;
      if ((_DWORD)v92)
      {
        id v96 = v115[0];
        URL.setResourceValues(_:)(v66);
      }

      else
      {
        id v97 = v115[0];
        _convertNSErrorToError(_:)(v94);

        swift_willThrow(v98);
      }

      (*(void (**)(char *, uint64_t))(v107 + 8))(v66, v108);
      v95(v67, v79);
    }
  }

  else
  {
    uint64_t v27 = static os_log_type_t.default.getter(v19);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000DB8A4();
    uint64_t v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0x8000000000000010LL;
    swift_willThrow(v29);
  }

void sub_100136EF8(uint64_t a1, char *a2)
{
  uint64_t v5 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v105 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v104 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  *(void *)&__int128 v107 = (char *)&v95 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v95 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v95 - v17;
  id v19 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v19)
  {
    uint64_t v101 = v6;
    uint64_t v102 = v5;
    uint64_t v106 = v8;
    uint64_t v20 = objc_autoreleasePoolPush();
    v109[0] = a2;
    uint64_t v21 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = PropertyListEncoder.init()();
    uint64_t v23 = type metadata accessor for AADeviceRecord(0LL);
    uint64_t v24 = sub_100098C98( &qword_1002367E0,  type metadata accessor for AADeviceRecord,  (uint64_t)&protocol conformance descriptor for AADeviceRecord);
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v109, v23, v24);
    uint64_t v103 = v2;
    if (v2)
    {
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
    }

    else
    {
      uint64_t v31 = v25;
      unint64_t v32 = v26;
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100099394(v31, v32);
      uint64_t v33 = a1 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      uint64_t v34 = v106;
      uint64_t v35 = sub_100098D58(v106, (uint64_t)qword_10023DF40);
      __int128 v100 = *(char **)(v9 + 16);
      v36.n128_f64[0] = ((double (*)(char *, uint64_t, uint64_t))v100)(v15, v35, v34);
      uint64_t v37 = URL.path.getter(v36);
      uint64_t v39 = v38;
      uint64_t v96 = v9;
      uint64_t v40 = *(void (**)(char *, uint64_t))(v9 + 8);
      v40(v15, v34);
      URL.appendingPathComponent(_:)(v37);
      swift_bridgeObjectRelease(v39);
      uint64_t v99 = v33;
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v41 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v41);
      uint64_t v42 = ((uint64_t (*)(char *, uint64_t))v40)(v18, v34);
      uint64_t v43 = UUID.uuidString.getter(v42);
      uint64_t v45 = v44;
      ((void (*)(char *, uint64_t, uint64_t))v100)(v18, v35, v34);
      uint64_t v46 = objc_autoreleasePoolPush();
      uint64_t v95 = v35;
      uint64_t v47 = v46;
      uint64_t v49 = URL.path.getter(v48);
      uint64_t v51 = v50;
      URL.appendingPathComponent(_:)(v49);
      swift_bridgeObjectRelease(v51);
      URL.appendingPathComponent(_:)(v43);
      v40(v15, v106);
      uint64_t v52 = v47;
      uint64_t v53 = v106;
      objc_autoreleasePoolPop(v52);
      swift_bridgeObjectRelease(v45);
      v40(v18, v53);
      uint64_t v110 = &type metadata for AudioAccessoryFeatures;
      unint64_t v54 = sub_10009E740();
      unint64_t v111 = v54;
      LOBYTE(v109[0]) = 0;
      LOBYTE(v51) = isFeatureEnabled(_:)(v109);
      sub_10009A498(v109);
      id v97 = (void (*)(uint64_t, uint64_t))v40;
      if ((v51 & 1) != 0)
      {
        uint64_t v55 = *(void *)&a2[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
        ((void (*)(char *, uint64_t, uint64_t))v100)(v15, v95, v53);
        __int128 v100 = a2;
        uint64_t v56 = objc_autoreleasePoolPush();
        uint64_t v58 = URL.path.getter(v57);
        uint64_t v60 = v59;
        uint64_t v61 = v104;
        URL.appendingPathComponent(_:)(v58);
        swift_bridgeObjectRelease(v60);
        URL.appendingPathComponent(_:)(v55);
        v40(v61, v106);
        uint64_t v62 = v56;
        uint64_t v53 = v106;
        objc_autoreleasePoolPop(v62);
        v40(v15, v53);
        uint64_t v63 = v107;
        v40((char *)v107, v53);

        uint64_t v64 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v96 + 32))(v63, v18, v53);
      }

      else
      {
        uint64_t v110 = &type metadata for AudioAccessoryFeatures;
        unint64_t v111 = v54;
        LOBYTE(v109[0]) = 0;
        isFeatureEnabled(_:)(v109);
        uint64_t v64 = sub_10009A498(v109);
        uint64_t v63 = v107;
      }

      uint64_t v65 = v105;
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      URL._bridgeToObjectiveC()(v66);
      uint64_t v68 = v67;
      Class v69 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1LL);

      uint64_t v71 = static os_log_type_t.default.getter(v70);
      if (qword_100234C30 != -1) {
        swift_once(&qword_100234C30, sub_10018AA44);
      }
      uint64_t v72 = qword_10023DFD0;
      uint64_t v73 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
      __int128 v107 = xmmword_1001A5EA0;
      *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v75 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v53, v75);
      uint64_t v78 = v77;
      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = sub_10009914C();
      *(void *)(v74 + 32) = v76;
      *(void *)(v74 + 40) = v78;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Writing record to file: %@", 26LL, 2LL, v74);
      swift_bridgeObjectRelease(v74);
      uint64_t v79 = sub_100098CD8(&qword_100235BD8);
      uint64_t inited = swift_initStackObject(v79, v108);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v107;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v81 = NSFileProtectionKey;
      uint64_t v82 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v83 = sub_10009EFF0(inited);
      id v84 = [(id)objc_opt_self(NSFileManager) defaultManager];
      uint64_t v85 = sub_1001382AC(v83);
      swift_bridgeObjectRelease(v83);
      type metadata accessor for FileAttributeKey(0LL);
      sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v85);
      URL.path.getter(v87);
      uint64_t v89 = v88;
      NSString v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v89);
      v109[0] = 0LL;
      LODWORD(v89) = [v84 setAttributes:v86 ofItemAtPath:v90 error:v109];

      id v91 = v109[0];
      if ((_DWORD)v89)
      {
        id v92 = v109[0];
        URL.setResourceValues(_:)(v65);
      }

      else
      {
        id v93 = v109[0];
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v94);
      }

      (*(void (**)(char *, uint64_t))(v101 + 8))(v65, v102);
      v97(v63, v53);
    }
  }

  else
  {
    uint64_t v27 = static os_log_type_t.default.getter(v19);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFD0,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000DB8A4();
    uint64_t v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0x8000000000000010LL;
    swift_willThrow(v29);
  }

void sub_100137768(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v155 = a2;
  uint64_t v148 = a1;
  uint64_t v3 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v7);
  uint64_t v152 = (uint64_t)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v9);
  uint64_t v147 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  int64_t v149 = (char *)&v135 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v135 - v14;
  uint64_t v154 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void **)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v145 = (char *)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v144 = (char *)&v135 - v19;
  __chkstk_darwin(v20);
  uint64_t v150 = (char *)&v135 - v21;
  __chkstk_darwin(v22);
  uint64_t v151 = (char *)&v135 - v23;
  __chkstk_darwin(v24);
  uint64_t v146 = (char *)&v135 - v25;
  __chkstk_darwin(v26);
  uint64_t v153 = (char *)&v135 - v27;
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v135 - v29;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v135 - v32;
  id v34 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((_DWORD)v34)
  {
    uint64_t v142 = v6;
    uint64_t v140 = v4;
    uint64_t v141 = v3;
    uint64_t v35 = objc_autoreleasePoolPush();
    uint64_t v36 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    uint64_t v37 = PropertyListEncoder.init()();
    uint64_t v38 = sub_100098C98( (unint64_t *)&unk_100236EC0,  type metadata accessor for BTDeferredRecord,  (uint64_t)&unk_1001A7394);
    uint64_t v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v155, v7, v38);
    uint64_t v143 = v2;
    if (v2)
    {
      swift_release(v37);
      objc_autoreleasePoolPop(v35);
      return;
    }

    uint64_t v45 = v39;
    unint64_t v46 = v40;
    uint64_t v139 = v7;
    swift_release(v37);
    objc_autoreleasePoolPop(v35);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100099394(v45, v46);
    URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
    uint64_t v47 = (unsigned int (*)(char *, uint64_t, uint64_t))v16[6];
    uint64_t v48 = v154;
    if (v47(v15, 1LL, v154) == 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v49 = v148 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      uint64_t v138 = (double (*)(char *, char *, uint64_t))v16[4];
      v50.n128_f64[0] = v138(v30, v15, v48);
      uint64_t v51 = URL.path.getter(v50);
      uint64_t v53 = v52;
      unint64_t v54 = (void (*)(char *, uint64_t))v16[1];
      v54(v30, v48);
      URL.appendingPathComponent(_:)(v51);
      swift_bridgeObjectRelease(v53);
      if (qword_100234B38 != -1) {
        swift_once(&qword_100234B38, sub_10009AD40);
      }
      uint64_t v148 = v49;
      uint64_t v55 = qword_10023DCD8;
      swift_bridgeObjectRetain(qword_10023DCD8);
      sub_10009ADB8();
      swift_bridgeObjectRelease(v55);
      uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v54)(v33, v48);
      uint64_t v57 = UUID.uuidString.getter(v56);
      uint64_t v59 = v58;
      uint64_t v60 = v149;
      URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
      unsigned int v61 = v47(v60, 1LL, v48);
      uint64_t v136 = v47;
      if (v61 != 1)
      {
        uint64_t v62 = v146;
        uint64_t v63 = (void (*)(char *, char *, uint64_t))v138;
        v138(v146, v60, v48);
        uint64_t v64 = objc_autoreleasePoolPush();
        uint64_t v66 = URL.path.getter(v65);
        uint64_t v68 = v67;
        Class v69 = v151;
        URL.appendingPathComponent(_:)(v66);
        swift_bridgeObjectRelease(v68);
        URL.appendingPathComponent(_:)(v57);
        v54(v69, v154);
        uint64_t v70 = v154;
        objc_autoreleasePoolPop(v64);
        swift_bridgeObjectRelease(v59);
        v54(v62, v70);
        uint64_t v71 = v152;
        sub_1000A7C90(v155, v152, type metadata accessor for BTDeferredRecord);
        uint64_t v72 = v147;
        URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
        if (v136(v72, 1LL, v70) != 1)
        {
          uint64_t v73 = v144;
          v63(v144, v72, v70);
          uint64_t v75 = *(void *)(v71 + 8);
          uint64_t v74 = *(void *)(v71 + 16);
          swift_bridgeObjectRetain(v74);
          URL.appendingPathComponent(_:)(v75);
          swift_bridgeObjectRelease(v74);
          v76.n128_f64[0] = ((double (*)(char *, uint64_t))v54)(v73, v70);
          uint64_t v77 = URL.path.getter(v76);
          uint64_t v79 = v78;
          URL.appendingPathComponent(_:)(v77);
          swift_bridgeObjectRelease(v79);
          uint64_t v80 = qword_10023DCD8;
          swift_bridgeObjectRetain(qword_10023DCD8);
          sub_10009ADB8();
          swift_bridgeObjectRelease(v80);
          v54(v69, v70);
          uint64_t v81 = *(void *)(v71 + 8);
          uint64_t v82 = *(void *)(v71 + 16);
          if (v81 == 0xD000000000000012LL && v82 == 0x80000001001CAB80LL
            || (uint64_t v81 = _stringCompareWithSmolCheck(_:_:expecting:)( v81,  v82,  0xD000000000000012LL,  0x80000001001CAB80LL,  0LL),  (v81 & 1) != 0))
          {
            unint64_t v83 = v54;
            uint64_t v84 = UUID.uuidString.getter(v81);
            uint64_t v86 = v85;
          }

          else
          {
            unint64_t v83 = v54;
            __n128 v87 = (uint64_t *)(v71 + *(int *)(v139 + 28));
            uint64_t v84 = *v87;
            uint64_t v86 = v87[1];
            swift_bridgeObjectRetain(v86);
          }

          uint64_t v88 = v153;
          uint64_t v89 = objc_autoreleasePoolPush();
          NSString v90 = v150;
          uint64_t v92 = URL.path.getter(v91);
          uint64_t v94 = v93;
          uint64_t v95 = v145;
          URL.appendingPathComponent(_:)(v92);
          swift_bridgeObjectRelease(v94);
          uint64_t v96 = v151;
          URL.appendingPathComponent(_:)(v84);
          id v97 = v95;
          uint64_t v98 = v154;
          v83(v97, v154);
          objc_autoreleasePoolPop(v89);
          swift_bridgeObjectRelease(v86);
          uint64_t v99 = v90;
          __int128 v100 = v83;
          v83(v99, v98);
          sub_1000A7CD4(v152, type metadata accessor for BTDeferredRecord);
          v83(v88, v98);
          uint64_t v101 = ((uint64_t (*)(char *, char *, uint64_t))v138)(v88, v96, v98);
          uint64_t v102 = v142;
          URLResourceValues.init()(v101);
          URLResourceValues.isExcludedFromBackup.setter(1LL);
          uint64_t v103 = v88;
          URL._bridgeToObjectiveC()(v104);
          uint64_t v106 = v105;
          -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v105, 1LL);

          uint64_t v108 = static os_log_type_t.default.getter(v107);
          if (qword_100234C30 != -1) {
            swift_once(&qword_100234C30, sub_10018AA44);
          }
          uint64_t v109 = qword_10023DFD0;
          uint64_t v110 = sub_100098CD8((uint64_t *)&unk_100234E00);
          uint64_t v111 = swift_allocObject(v110, 72LL, 7LL);
          __int128 v155 = xmmword_1001A5EA0;
          *(_OWORD *)(v111 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
          uint64_t v112 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v98, v112);
          uint64_t v115 = v114;
          *(void *)(v111 + 56) = &type metadata for String;
          *(void *)(v111 + 64) = sub_10009914C();
          *(void *)(v111 + 32) = v113;
          *(void *)(v111 + 40) = v115;
          os_log(_:dso:log:_:_:)(v108, &_mh_execute_header, v109, "Writing record to file: %@", 26LL, 2LL, v111);
          swift_bridgeObjectRelease(v111);
          uint64_t v116 = sub_100098CD8(&qword_100235BD8);
          uint64_t inited = swift_initStackObject(v116, v157);
          *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v155;
          *(void *)(inited + 32) = NSFileProtectionKey;
          *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
          BOOL v118 = NSFileProtectionKey;
          int v119 = NSFileProtectionCompleteUntilFirstUserAuthentication;
          unint64_t v120 = sub_10009EFF0(inited);
          id v121 = [(id)objc_opt_self(NSFileManager) defaultManager];
          uint64_t v122 = sub_1001382AC(v120);
          swift_bridgeObjectRelease(v120);
          type metadata accessor for FileAttributeKey(0LL);
          sub_100098C98( &qword_100235050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1001A6968);
          Class v123 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v122);
          URL.path.getter(v124);
          uint64_t v126 = v125;
          NSString v127 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v126);
          id v156 = 0LL;
          LODWORD(v126) = [v121 setAttributes:v123 ofItemAtPath:v127 error:&v156];

          id v128 = v156;
          if ((_DWORD)v126)
          {
            id v129 = v156;
            URL.setResourceValues(_:)(v102);
            uint64_t v130 = v140;

            (*(void (**)(char *, uint64_t))(v130 + 8))(v102, v141);
            uint64_t v131 = v103;
            uint64_t v132 = v154;
          }

          else
          {
            id v133 = v156;
            _convertNSErrorToError(_:)(v128);

            swift_willThrow(v134);
            (*(void (**)(char *, uint64_t))(v140 + 8))(v102, v141);
            uint64_t v131 = v103;
            uint64_t v132 = v98;
          }

          v100(v131, v132);
          return;
        }

_OWORD *sub_1001382AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100098CD8(&qword_1002352A8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v35 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v36 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = (_OWORD *)swift_retain(v2);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_26;
    }

    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v12 >= v36) {
      goto LABEL_35;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v36) {
        goto LABEL_35;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v36) {
          goto LABEL_35;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v8);
        if (!v13) {
          break;
        }
      }
    }

uint64_t sub_100138608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  v24[1] = a2;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)v24 - v12;
  int64_t v14 = objc_autoreleasePoolPush();
  uint64_t v16 = URL.path.getter(v15);
  uint64_t v18 = v17;
  URL.appendingPathComponent(_:)(v16);
  swift_bridgeObjectRelease(v18);
  URL.appendingPathComponent(_:)(a1);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  objc_autoreleasePoolPop(v14);
  id v20 = objc_autoreleasePoolPush();
  uint64_t v28 = v13;
  uint64_t v29 = v5;
  uint64_t v21 = sub_100098CD8(v25);
  OS_dispatch_queue.sync<A>(execute:)(&v30, v26, v27, v21);
  uint64_t v22 = v30;
  objc_autoreleasePoolPop(v20);
  v19(v13, v7);
  return v22;
}

uint64_t sub_100138768@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v27 = a6;
  uint64_t v12 = a2(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __n128 v15 = (char *)&v24 - v14;
  id v16 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v16 & 1) != 0)
  {
    uint64_t v17 = Data.init(contentsOf:options:)(a1, 0LL);
    if (v6)
    {
      swift_errorRelease(v6);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1LL, 1LL, v12);
    }

    else
    {
      uint64_t v26 = v12;
      unint64_t v21 = v18;
      uint64_t v22 = v17;
      uint64_t v25 = objc_autoreleasePoolPush();
      sub_100133C80(v22, v21, a2, a3, a4, a5);
      objc_autoreleasePoolPop(v25);
      sub_100099394(v22, v21);
      uint64_t v23 = v27;
      sub_1000C998C((uint64_t)v15, v27, a2);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v23, 0LL, 1LL, v26);
    }
  }

  else
  {
    uint64_t v20 = static os_log_type_t.default.getter(v16);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_10023DFD0,  "record call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1LL, 1LL, v12);
  }

void *sub_100138A68(uint64_t a1)
{
  return sub_100139314( a1,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
}

uint64_t sub_100138A8C(uint64_t a1)
{
  return sub_100138AFC(a1, &qword_100236E48, (uint64_t)sub_100166F6C);
}

void *sub_100138AA0(uint64_t a1)
{
  return sub_100139314( a1,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
}

void *sub_100138AC4(uint64_t a1)
{
  return sub_100139314( a1,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
}

uint64_t sub_100138AE8(uint64_t a1)
{
  return sub_100138AFC(a1, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
}

uint64_t sub_100138AFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 v100 = a2;
  uint64_t v101 = a3;
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v97 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v86 - v12;
  __chkstk_darwin(v14);
  uint64_t v104 = (char *)&v86 - v15;
  __n128 v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v86 - v18;
  uint64_t v107 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v98 = a1;
  uint64_t v99 = v3;
  uint64_t v20 = v3 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  uint64_t v21 = URL.path.getter(v17);
  uint64_t v23 = v22;
  uint64_t v96 = v20;
  URL.appendingPathComponent(_:isDirectory:)(v21, v22, 1LL);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v25 = [v24 defaultManager];
  id v26 = [v24 defaultManager];
  NSString v90 = v19;
  uint64_t v27 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v19, 0LL, 1LL, 0LL, 0LL);

  id v103 = v27;
  if (v27)
  {
    uint64_t v102 = v7;
    uint64_t v29 = static os_log_type_t.default.getter(v28);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v30 = qword_10023DFD0;
    uint64_t v87 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v31 = swift_allocObject(v87, 72LL, 7LL);
    *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v89 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = &type metadata for String;
    unint64_t v88 = sub_10009914C();
    *(void *)(v31 + 64) = v88;
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Enumerate: %@", 13LL, 2LL, v31);
    swift_bridgeObjectRelease(v31);
    uint64_t v35 = 0LL;
    uint64_t v94 = OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue;
    uint64_t v95 = (char *)&type metadata for Any + 8;
    __int128 v86 = xmmword_1001A6F30;
    uint64_t v93 = v9;
    while (1)
    {
      id v41 = objc_msgSend(v103, "nextObject", (void)v86, *((void *)&v86 + 1));
      if (v41)
      {
        id v42 = v41;
        _bridgeAnyObjectToAny(_:)(v105);
        swift_unknownObjectRelease(v42);
      }

      else
      {
        memset(v105, 0, sizeof(v105));
      }

      uint64_t v43 = (uint64_t)v102;
      sub_1000D8CF8((uint64_t)v105, (uint64_t)v106, &qword_100236570);
      if (!v106[3]) {
        break;
      }
      int v44 = swift_dynamicCast(v43, v106, v95, v8, 6LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v43, v44 ^ 1u, 1LL, v8);
      uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 32))(v104, v43, v8);
      uint64_t v46 = URL.deletingPathExtension()(v45);
      uint64_t v47 = URL.lastPathComponent.getter(v46);
      uint64_t v49 = v48;
      __n128 v50 = *(void (**)(char *, uint64_t))(v9 + 8);
      v50(v13, v8);
      uint64_t v51 = objc_autoreleasePoolPush();
      uint64_t v53 = URL.path.getter(v52);
      uint64_t v55 = v54;
      uint64_t v56 = v97;
      URL.appendingPathComponent(_:)(v53);
      swift_bridgeObjectRelease(v55);
      URL.appendingPathComponent(_:)(v47);
      v50(v56, v8);
      objc_autoreleasePoolPop(v51);
      uint64_t v57 = objc_autoreleasePoolPush();
      __chkstk_darwin(v57);
      *((void *)&v86 - 2) = v13;
      *((void *)&v86 - 1) = v58;
      uint64_t v59 = sub_100098CD8(v100);
      OS_dispatch_queue.sync<A>(execute:)(v106, v101, &v86 - 2, v59);
      uint64_t v60 = v106[0];
      objc_autoreleasePoolPop(v57);
      v50(v13, v8);
      if (v60)
      {
        uint64_t v61 = swift_bridgeObjectRelease(v49);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
        unint64_t v63 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v62 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v63 >= v62 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
        }
        uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
        specialized Array._endMutation()(v64);
      }

      else
      {
        unsigned int v91 = static os_log_type_t.error.getter();
        uint64_t v92 = qword_10023DFD0;
        uint64_t v36 = swift_allocObject(v87, 112LL, 7LL);
        *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = v86;
        uint64_t v37 = v35;
        unint64_t v38 = v88;
        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = v38;
        *(void *)(v36 + 32) = v47;
        *(void *)(v36 + 40) = v49;
        uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
        *(void *)(v36 + 96) = &type metadata for String;
        *(void *)(v36 + 104) = v38;
        uint64_t v35 = v37;
        *(void *)(v36 + 72) = v39;
        *(void *)(v36 + 80) = v40;
        os_log(_:dso:log:_:_:)( v91,  &_mh_execute_header,  v92,  "Could not read item %@ for records at %@",  40LL,  2LL,  v36);
        swift_bridgeObjectRelease(v36);
      }

      uint64_t v9 = v93;
      v50(v104, v8);
    }

    sub_100099358((uint64_t)v106, &qword_100236570);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v43, 1LL, 1LL, v8);
LABEL_20:
    uint64_t v75 = sub_100099358(v43, (uint64_t *)&unk_100235270);
    uint64_t v76 = static os_log_type_t.debug.getter(v75);
    uint64_t v77 = qword_10023DFD0;
    uint64_t v68 = swift_allocObject(v87, 112LL, 7LL);
    *(_OWORD *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = v86;
    uint64_t v78 = v107;
    if ((unint64_t)v107 >> 62)
    {
      if (v107 < 0) {
        uint64_t v85 = v107;
      }
      else {
        uint64_t v85 = v107 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v107);
      uint64_t v79 = _CocoaArrayWrapper.endIndex.getter(v85);
      swift_bridgeObjectRelease(v78);
    }

    else
    {
      uint64_t v79 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    *(void *)(v68 + 56) = &type metadata for Int;
    *(void *)(v68 + 64) = &protocol witness table for Int;
    *(void *)(v68 + 32) = v79;
    uint64_t v74 = v90;
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
    unint64_t v81 = v88;
    *(void *)(v68 + 96) = &type metadata for String;
    *(void *)(v68 + 104) = v81;
    *(void *)(v68 + 72) = v80;
    *(void *)(v68 + 80) = v82;
    os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v77, "Found %i records at %@", 22LL, 2LL, v68);
  }

  else
  {
    uint64_t v65 = static os_log_type_t.error.getter();
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v66 = qword_10023DFD0;
    uint64_t v67 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
    *(_OWORD *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v69 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v70 = v90;
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v8, v69);
    uint64_t v73 = v72;
    *(void *)(v68 + 56) = &type metadata for String;
    *(void *)(v68 + 64) = sub_10009914C();
    *(void *)(v68 + 32) = v71;
    *(void *)(v68 + 40) = v73;
    uint64_t v74 = v70;
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Could not enumerate %@", 22LL, 2LL, v68);
  }

  swift_bridgeObjectRelease(v68);
  uint64_t v83 = v107;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v74, v8);
  return v83;
}

uint64_t sub_100139300(uint64_t a1)
{
  return sub_100138AFC(a1, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
}

void *sub_100139314( uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(BOOL, uint64_t, uint64_t, void *))
{
  uint64_t v102 = a5;
  uint64_t v123 = a4;
  id v103 = a2;
  uint64_t v120 = sub_100098CD8(a2);
  __n128 v8 = __chkstk_darwin(v120);
  uint64_t v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = a3;
  uint64_t v119 = ((uint64_t (*)(void, __n128))a3)(0LL, v8);
  uint64_t v128 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v114 = (uint64_t)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v113 = (uint64_t)&v102 - v13;
  uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  BOOL v118 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  unint64_t v117 = (char *)&v102 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v102 - v23;
  __n128 v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v102 - v27;
  uint64_t v121 = a1;
  uint64_t v122 = v5;
  uint64_t v29 = v5 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  uint64_t v30 = URL.path.getter(v26);
  uint64_t v32 = v31;
  uint64_t v116 = v29;
  URL.appendingPathComponent(_:isDirectory:)(v30, v31, 1LL);
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v34 = [v33 defaultManager];
  id v35 = [v33 defaultManager];
  uint64_t v108 = v28;
  uint64_t v36 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v28, 0LL, 1LL, 0LL, 0LL);

  id v126 = v36;
  if (v36)
  {
    __n128 v124 = v16;
    uint64_t v125 = v10;
    uint64_t v38 = static os_log_type_t.default.getter(v37);
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v39 = qword_10023DFD0;
    uint64_t v107 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v40 = swift_allocObject(v107, 72LL, 7LL);
    *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v106 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v17, v106);
    uint64_t v43 = v42;
    *(void *)(v40 + 56) = &type metadata for String;
    unint64_t v105 = sub_10009914C();
    *(void *)(v40 + 64) = v105;
    *(void *)(v40 + 32) = v41;
    *(void *)(v40 + 40) = v43;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Enumerate: %@", 13LL, 2LL, v40);
    swift_bridgeObjectRelease(v40);
    uint64_t v44 = 0LL;
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v110 = OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue;
    uint64_t v112 = (char *)&type metadata for Any + 8;
    __int128 v104 = xmmword_1001A6F30;
    uint64_t v111 = v18;
    uint64_t v109 = v24;
    while (1)
    {
      id v53 = objc_msgSend(v126, "nextObject", v102);
      if (v53)
      {
        id v54 = v53;
        _bridgeAnyObjectToAny(_:)(v131);
        swift_unknownObjectRelease(v54);
      }

      else
      {
        memset(v131, 0, sizeof(v131));
      }

      uint64_t v55 = (uint64_t)v124;
      uint64_t v56 = v125;
      sub_1000D8CF8((uint64_t)v131, (uint64_t)v132, &qword_100236570);
      if (!v133) {
        break;
      }
      int v57 = swift_dynamicCast(v55, v132, v112, v17, 6LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v55, v57 ^ 1u, 1LL, v17);
      id v129 = v45;
      uint64_t v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 32))(v24, v55, v17);
      uint64_t v59 = v17;
      uint64_t v60 = v117;
      uint64_t v61 = URL.deletingPathExtension()(v58);
      uint64_t v62 = URL.lastPathComponent.getter(v61);
      uint64_t v130 = v44;
      unint64_t v63 = v56;
      uint64_t v65 = v64;
      uint64_t v66 = *(void (**)(char *, uint64_t))(v18 + 8);
      v66(v60, v59);
      uint64_t v67 = objc_autoreleasePoolPush();
      uint64_t v69 = URL.path.getter(v68);
      uint64_t v71 = v70;
      uint64_t v72 = v118;
      URL.appendingPathComponent(_:)(v69);
      swift_bridgeObjectRelease(v71);
      uint64_t v127 = v62;
      uint64_t v73 = v62;
      uint64_t v74 = v65;
      uint64_t v75 = (uint64_t)v63;
      URL.appendingPathComponent(_:)(v73);
      v66(v72, v59);
      objc_autoreleasePoolPop(v67);
      uint64_t v76 = objc_autoreleasePoolPush();
      __chkstk_darwin(v76);
      *(&v102 - 2) = (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))v60;
      *(&v102 - 1) = v77;
      uint64_t v78 = v63;
      uint64_t v44 = v130;
      OS_dispatch_queue.sync<A>(execute:)(v78, v123, &v102 - 4, v120);
      objc_autoreleasePoolPop(v76);
      uint64_t v79 = v60;
      uint64_t v17 = v59;
      v66(v79, v59);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v75, 1LL, v119) == 1)
      {
        uint64_t v46 = sub_100099358(v75, v103);
        uint64_t v47 = static os_log_type_t.error.getter(v46);
        uint64_t v48 = qword_10023DFD0;
        uint64_t v49 = swift_allocObject(v107, 112LL, 7LL);
        *(_OWORD *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = v104;
        unint64_t v50 = v105;
        *(void *)(v49 + 56) = &type metadata for String;
        *(void *)(v49 + 64) = v50;
        *(void *)(v49 + 32) = v127;
        *(void *)(v49 + 40) = v74;
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v17, v106);
        *(void *)(v49 + 96) = &type metadata for String;
        *(void *)(v49 + 104) = v50;
        *(void *)(v49 + 72) = v51;
        *(void *)(v49 + 80) = v52;
        os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  v48,  "Could not read item %@ for records at %@",  40LL,  2LL,  v49);
        swift_bridgeObjectRelease(v49);
        uint64_t v24 = v109;
        uint64_t v45 = v129;
      }

      else
      {
        swift_bridgeObjectRelease(v74);
        uint64_t v80 = v113;
        unint64_t v81 = v115;
        sub_1000C998C(v75, v113, v115);
        sub_1000A7C90(v80, v114, v81);
        uint64_t v45 = v129;
        if ((swift_isUniquelyReferenced_nonNull_native(v129) & 1) == 0) {
          uint64_t v45 = (void *)v102(0, v45[2] + 1LL, 1LL, v45);
        }
        uint64_t v24 = v109;
        unint64_t v83 = v45[2];
        unint64_t v82 = v45[3];
        if (v83 >= v82 >> 1) {
          uint64_t v45 = (void *)v102(v82 > 1, v83 + 1, 1LL, v45);
        }
        v45[2] = v83 + 1;
        uint64_t v84 = v115;
        sub_1000C998C( v114,  (uint64_t)v45 + ((*(unsigned __int8 *)(v128 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80))
        + *(void *)(v128 + 72) * v83,
          v115);
        sub_1000A7CD4(v113, v84);
      }

      v66(v24, v17);
      uint64_t v18 = v111;
    }

    sub_100099358((uint64_t)v132, &qword_100236570);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v55, 1LL, 1LL, v17);
LABEL_22:
    uint64_t v94 = sub_100099358(v55, (uint64_t *)&unk_100235270);
    uint64_t v95 = static os_log_type_t.debug.getter(v94);
    uint64_t v96 = qword_10023DFD0;
    uint64_t v88 = swift_allocObject(v107, 112LL, 7LL);
    *(_OWORD *)(v88 + swift_unknownObjectWeakDestroy(v0 + 16) = v104;
    uint64_t v97 = v45[2];
    *(void *)(v88 + 56) = &type metadata for Int;
    *(void *)(v88 + 64) = &protocol witness table for Int;
    *(void *)(v88 + 32) = v97;
    NSString v90 = v108;
    uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v17, v106);
    unint64_t v99 = v105;
    *(void *)(v88 + 96) = &type metadata for String;
    *(void *)(v88 + 104) = v99;
    *(void *)(v88 + 72) = v98;
    *(void *)(v88 + 80) = v100;
    os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Found %i records at %@", 22LL, 2LL, v88);
  }

  else
  {
    uint64_t v85 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    if (qword_100234C30 != -1) {
      swift_once(&qword_100234C30, sub_10018AA44);
    }
    uint64_t v86 = qword_10023DFD0;
    uint64_t v87 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v88 = swift_allocObject(v87, 72LL, 7LL);
    *(_OWORD *)(v88 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v89 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    NSString v90 = v108;
    uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter(v17, v89);
    uint64_t v93 = v92;
    *(void *)(v88 + 56) = &type metadata for String;
    *(void *)(v88 + 64) = sub_10009914C();
    *(void *)(v88 + 32) = v91;
    *(void *)(v88 + 40) = v93;
    os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "Could not enumerate %@", 22LL, 2LL, v88);
    uint64_t v45 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v88);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v90, v17);
  return v45;
}

unint64_t sub_100139CB0(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1) {
      __asm { BR              X10 }
    }

    uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100236770);
    uint64_t inited = swift_initStackObject(v2, v18);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    *(void *)(inited + 40) = v4;
    swift_errorRetain(a1 & 0x3FFFFFFFFFFFFFFFLL);
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v17[0] = 0x2074736973726550LL;
    v17[1] = 0xEF203A726F727245LL;
    uint64_t v16 = a1 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v5 = a1 & 0x3FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100236770);
    uint64_t inited = swift_initStackObject(v6, v15);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    *(void *)(inited + 40) = v7;
    strcpy((char *)v17, "Cloud Error: ");
    HIWORD(v17[1]) = -4864;
    uint64_t v16 = a1;
    sub_10018A36C(a1);
    uint64_t v5 = a1;
  }

  swift_errorRetain(v5);
  uint64_t v8 = sub_100098CD8(&qword_1002357C0);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v16, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  uint64_t v11 = v17[0];
  uint64_t v12 = v17[1];
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v12;
  unint64_t v13 = sub_10009ED94(inited);
  sub_10018A390(a1);
  return v13;
}

unint64_t sub_10013A18C()
{
  return sub_100139CB0(*v0);
}

uint64_t sub_10013A194(uint64_t a1)
{
  unint64_t v2 = sub_10018A52C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10013A1BC(uint64_t a1)
{
  unint64_t v2 = sub_10018A52C();
  return Error<>._code.getter(a1, v2);
}

id sub_10013A1E4()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  uint64_t v3 = *(void *)(v0 + 48);
  if (v3)
  {
    uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
    swift_bridgeObjectRetain(v3);
    id result = [v4 defaultStore];
    if (result)
    {
      uint64_t v6 = result;
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
      id v2 = objc_msgSend(v6, "aa_appleAccountWithAltDSID:", v7);

LABEL_7:
      uint64_t v8 = *(void **)(v0 + 56);
      *(void *)(v0 + 56) = v2;
      id v9 = v2;
      sub_1001136A8(v8);
LABEL_8:
      sub_1001136B8(v1);
      return v2;
    }

    __break(1u);
  }

  else
  {
    id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
    if (result)
    {
      NSString v7 = result;
      id v2 = objc_msgSend(result, "aa_primaryAppleAccount");
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

void sub_10013A30C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v9 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v10 = [v9 isBuddyComplete];
  if ((v10 & 1) == 0)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v10);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_10023DFC8,  "cloud account info call failed because in device is in buddy state",  66LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_12;
  }

  id v11 = [v9 isFirstUnlocked];
  if ((v11 & 1) == 0)
  {
    id v17 = (id)static os_log_type_t.default.getter(v11);
    if (qword_100234C28 == -1)
    {
LABEL_11:
      os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_10023DFC8,  "cloud account info call failed because in device is in beforeFirstUnlock state",  78LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_12:
      id v12 = 0LL;
      goto LABEL_25;
    }

uint64_t sub_10013A76C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager;
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager);
  if (v8)
  {
    uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager);
  }

  else
  {
    (*(void (**)(char *, uint64_t, __n128))(v3 + 16))( v6,  v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL,  v4);
    uint64_t v10 = type metadata accessor for RecordFileManager(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v9 = sub_1000D90E8((uint64_t)v6);
    uint64_t v11 = *(void *)(v1 + v7);
    *(void *)(v1 + v7) = v9;
    swift_retain(v9);
    swift_release(v11);
    uint64_t v8 = 0LL;
  }

  swift_retain(v8);
  return v9;
}

uint64_t sub_10013A844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = sub_10013A76C();
    if (qword_100234B58 != -1) {
      swift_once(&qword_100234B58, sub_1000AA360);
    }
    uint64_t v8 = sub_100098D58(v2, (uint64_t)qword_10023DD48);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    uint64_t v9 = sub_100139314( (uint64_t)v5,  (uint64_t *)&unk_1002357E0,  type metadata accessor for LegacyAccountMagicKeysRecord,  (uint64_t)sub_1001876A4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B920);
    swift_release(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v10 = v9[2];
    uint64_t v11 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (v10)
    {
      sub_1000A7C90( (uint64_t)v9 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)),  a1,  type metadata accessor for LegacyAccountMagicKeysRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1, 0LL, 1LL, v11);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1LL, 1LL, v11);
    }

    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(v6);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_10023DFC8,  "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state",  82LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v14 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a1,  1LL,  1LL,  v14);
  }

uint64_t sub_10013AA64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  *(void *)&__int128 v133 = a1;
  uint64_t v129 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  uint64_t v3 = *(unsigned __int8 **)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v131 = (uint64_t)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100098CD8(&qword_100237048);
  __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v134 = (uint64_t)&v119 - v8;
  uint64_t v9 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  unint64_t v135 = *(void *)(v12 - 8);
  uint64_t v136 = v12;
  __chkstk_darwin(v12);
  uint64_t v125 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = type metadata accessor for URL(0LL);
  unint64_t v14 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  __n128 v124 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v119 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v119 - v20;
  uint64_t v128 = (unsigned __int8 *)objc_opt_self(&OBJC_CLASS___NSBundle);
  id v22 = [v128 mainBundle];
  id v23 = [v22 infoDictionary];

  if (!v23)
  {
    v137._uint64_t countAndFlagsBits = 0LL;
    v137._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease(v137._object);
    v137._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v137._object = (void *)0x80000001001D50B0LL;
    id v106 = [v128 mainBundle];
    id v107 = [v106 description];
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    uint64_t v110 = v109;

    v111._uint64_t countAndFlagsBits = v108;
    v111._object = v110;
    String.append(_:)(v111);

    swift_bridgeObjectRelease(v110);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v137._countAndFlagsBits,  v137._object,  "audioaccessoryd/DeviceStore.swift",  33LL,  2LL,  160LL,  0);
LABEL_68:
    __break(1u);
    return result;
  }

  uint64_t v24 = (char **)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v23,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  if (!v24[2]) {
    goto LABEL_64;
  }
  unint64_t v25 = sub_1000A3A10(0xD00000000000001ALL, 0x80000001001D50D0LL);
  if ((v26 & 1) == 0) {
    goto LABEL_64;
  }
  sub_100112834((uint64_t)&v24[7][32 * v25], (uint64_t)&v137);
  swift_bridgeObjectRelease(v24);
  if (!*((void *)&v138 + 1))
  {
LABEL_65:
    sub_100099358((uint64_t)&v137, &qword_100236570);
    goto LABEL_67;
  }

  if ((swift_dynamicCast(v140, &v137, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_67:
    v137._uint64_t countAndFlagsBits = 0LL;
    v137._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(63LL);
    v112._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    v112._object = (void *)0x80000001001D50F0LL;
    String.append(_:)(v112);
    id v113 = [v128 mainBundle];
    id v114 = [v113 description];
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    unint64_t v117 = v116;

    v118._uint64_t countAndFlagsBits = v115;
    v118._object = v117;
    String.append(_:)(v118);

    swift_bridgeObjectRelease(v117);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v137._countAndFlagsBits,  v137._object,  "audioaccessoryd/DeviceStore.swift",  33LL,  2LL,  163LL,  0);
    goto LABEL_68;
  }

  uint64_t v122 = (void (*)(uint64_t, unint64_t))v140[0];
  uint64_t v121 = v140[1];
  uint64_t v27 = sub_100098CD8(&qword_100236658);
  uint64_t v28 = (void *)swift_allocObject(v27, 64LL, 7LL);
  *((_OWORD *)v28 + 1) = xmmword_1001A6F30;
  unint64_t v126 = (unint64_t)"Updating main device record: %@";
  v28[4] = 0xD00000000000001ELL;
  v28[5] = 0x80000001001CABE0LL;
  v28[6] = 0xD000000000000010LL;
  v28[7] = 0x80000001001CB350LL;
  *((void *)&v138 + 1) = &type metadata for AudioAccessoryFeatures;
  unint64_t v139 = sub_10009E740();
  LOBYTE(v137._countAndFlagsBits) = 0;
  char v29 = isFeatureEnabled(_:)(&v137);
  sub_10009A498(&v137);
  uint64_t v127 = v18;
  uint64_t v128 = v3;
  if ((v29 & 1) != 0)
  {
    unint64_t v31 = v28[2];
    unint64_t v30 = v28[3];
    if (v31 >= v30 >> 1) {
      uint64_t v28 = sub_10018B814((void *)(v30 > 1), v31 + 1, 1, v28);
    }
    v28[2] = v31 + 1;
    unint64_t v32 = &v28[2 * v31];
    v32[4] = 0xD000000000000012LL;
    v32[5] = 0x80000001001CB4C0LL;
  }

  uint64_t v33 = *(void *)(v2 + 40);
  uint64_t v24 = *(char ***)(v2 + 48);
  uint64_t v34 = *(NSString **)(v14 + 16);
  uint64_t v123 = v2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL;
  uint64_t v119 = v2;
  unint64_t v35 = v130;
  uint64_t v36 = v21;
  uint64_t v120 = v34;
  ((void (*)(char *))v34)(v21);
  swift_bridgeObjectRetain(v24);
  UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001001CE260LL);
  unint64_t v38 = v135;
  uint64_t v37 = v136;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  uint64_t v40 = v125;
  v39(v125, v11, v37);
  uint64_t v41 = (char *)v133;
  v39((char *)v133, v40, v37);
  uint64_t v42 = v129;
  uint64_t v43 = &v41[*(int *)(v129 + 20)];
  *(void *)uint64_t v43 = v33;
  *((void *)v43 + 1) = v24;
  uint64_t v44 = v42;
  uint64_t v45 = &v41[*(int *)(v42 + 24)];
  uint64_t v46 = v121;
  *(void *)uint64_t v45 = v122;
  *((void *)v45 + 1) = v46;
  (*(void (**)(char *, char *, unint64_t))(v14 + 32))(&v41[*(int *)(v44 + 28)], v36, v35);
  uint64_t v47 = *(int *)(v44 + 32);
  *(void *)&v41[v47] = v28;
  uint64_t v48 = sub_10013A76C();
  unint64_t v49 = v14;
  if (qword_100234B80 != -1) {
LABEL_61:
  }
    swift_once(&qword_100234B80, sub_1000DC0A8);
  uint64_t v50 = sub_100098D58(v35, (uint64_t)qword_10023DDF0);
  uint64_t v51 = (uint64_t)v127;
  ((void (*)(char *, uint64_t, unint64_t))v120)(v127, v50, v35);
  uint64_t v52 = sub_100139314( v51,  &qword_100237048,  type metadata accessor for CloudCoordinatorConfiguration,  (uint64_t)sub_10018817C,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B800);
  swift_release(v48);
  uint64_t v122 = *(void (**)(uint64_t, unint64_t))(v49 + 8);
  v122(v51, v35);
  if (v52[2])
  {
    id v53 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v128;
    uint64_t v48 = v134;
    sub_1000A7C90( (uint64_t)v52 + ((v128[80] + 32LL) & ~(unint64_t)v128[80]),  v134,  type metadata accessor for CloudCoordinatorConfiguration);
    uint64_t v54 = 0LL;
  }

  else
  {
    uint64_t v54 = 1LL;
    id v53 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v128;
    uint64_t v48 = v134;
  }

  v53[7](v48, v54, 1LL, v44);
  swift_bridgeObjectRelease(v52);
  uint64_t v47 = *(void *)&v41[v47];
  uint64_t v55 = *(char **)(v47 + 16);
  if (v55)
  {
    uint64_t v136 = v47 + 32;
    uint64_t v120 = CKCurrentUserDefaultName;
    swift_bridgeObjectRetain(v47);
    unint64_t v35 = 0LL;
    uint64_t v125 = 0LL;
    unint64_t v49 = v126;
    unint64_t v135 = v126 | 0x8000000000000000LL;
    uint64_t v121 = v47;
    uint64_t v127 = v55;
    __int128 v133 = xmmword_1001A5EA0;
    while (1)
    {
      if (v35 >= *(void *)(v47 + 16))
      {
        __break(1u);
        goto LABEL_61;
      }

      uint64_t v56 = (uint64_t *)(v136 + 16 * v35);
      uint64_t v57 = *v56;
      uint64_t v41 = (char *)v56[1];
      if ((*v56 != 0xD00000000000001ELL || v41 != (char *)v135)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v41, 0xD00000000000001ELL, v49 | 0x8000000000000000LL, 0LL) & 1) == 0)
      {
        uint64_t v58 = v132;
        sub_1000A4D5C(v48, v132, &qword_100237048);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v53[6])(v58, 1LL, v44) == 1)
        {
          swift_bridgeObjectRetain(v41);
          uint64_t v59 = sub_100099358(v58, &qword_100237048);
          goto LABEL_35;
        }

        uint64_t v60 = v58;
        uint64_t v61 = v131;
        sub_1000C998C(v60, v131, type metadata accessor for CloudCoordinatorConfiguration);
        uint64_t v62 = *(void **)(v61 + *(int *)(v44 + 32));
        uint64_t v63 = v62[2];
        if (!v63) {
          goto LABEL_34;
        }
        uint64_t v64 = v62[4];
        uint64_t v65 = (char *)v62[5];
        BOOL v66 = v64 == v57 && v65 == v41;
        if (!v66 && (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v57, v41, 0LL) & 1) == 0)
        {
          if (v63 == 1) {
            goto LABEL_34;
          }
          uint64_t v97 = v62[6];
          uint64_t v98 = (char *)v62[7];
          BOOL v99 = v97 == v57 && v98 == v41;
          if (!v99 && (_stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, v57, v41, 0LL) & 1) == 0)
          {
            if (v63 != 2)
            {
              uint64_t v24 = (char **)(v62 + 9);
              uint64_t v100 = 2LL;
              while (1)
              {
                uint64_t v101 = v100 + 1;
                if (__OFADD__(v100, 1LL)) {
                  break;
                }
                uint64_t v102 = (uint64_t)*(v24 - 1);
                id v103 = *v24;
                BOOL v104 = v102 == v57 && v103 == v41;
                if (v104 || (_stringCompareWithSmolCheck(_:_:expecting:)(v102, v103, v57, v41, 0LL) & 1) != 0)
                {
                  uint64_t v47 = v121;
                  goto LABEL_32;
                }

                v24 += 2;
                ++v100;
                if (v101 == v63) {
                  goto LABEL_34;
                }
              }

              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              Swift::String v137 = (Swift::String)0;
              __int128 v138 = 0u;
              swift_bridgeObjectRelease(v24);
              goto LABEL_65;
            }

uint64_t sub_10013B740()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __n128 v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL, v5);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CloudCoordinatorConfiguration(0LL);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v31 - v16;
  uint64_t v18 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  if (v19)
  {
    uint64_t v20 = *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  }

  else
  {
    unint64_t v32 = v3;
    sub_10013AA64((uint64_t)v31 - v16);
    sub_1000A7C90((uint64_t)v17, (uint64_t)v14, type metadata accessor for CloudCoordinatorConfiguration);
    v31[1] = sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
    uint64_t v21 = swift_unknownObjectRetain(v0);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v22 = sub_100098C98( (unint64_t *)&unk_100237030,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235870);
    uint64_t v24 = sub_1000A4318( (unint64_t *)&qword_100237040,  (uint64_t *)&unk_100235870,  (uint64_t)&protocol conformance descriptor for [A]);
    v31[0] = v0;
    unint64_t v25 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v23, v24, v1, v22);
    uint64_t v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000040LL,  0x80000001001D5060LL,  v7,  v25,  v11,  0LL);
    uint64_t v27 = type metadata accessor for CloudCoordinator(0LL);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    uint64_t v28 = v31[0];
    uint64_t v20 = sub_10010EC28((uint64_t)v14, v31[0], (uint64_t)&off_10020F8C8, v26);
    swift_release(v28);
    sub_1000A7CD4((uint64_t)v17, type metadata accessor for CloudCoordinatorConfiguration);
    uint64_t v29 = *v18;
    *uint64_t v18 = v20;
    v18[1] = (uint64_t)&off_10020D598;
    swift_unknownObjectRetain(v20);
    swift_unknownObjectRelease(v29);
    uint64_t v19 = 0LL;
  }

  swift_unknownObjectRetain(v19);
  return v20;
}

uint64_t sub_10013BA34()
{
  uint64_t v1 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v95 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  id v103 = (char *)&v95 - v5;
  __chkstk_darwin(v6);
  BOOL v104 = (char *)&v95 - v7;
  __chkstk_darwin(v8);
  Swift::String v111 = (char *)&v95 - v9;
  __chkstk_darwin(v10);
  Swift::String v112 = (char *)&v95 - v11;
  __chkstk_darwin(v12);
  id v113 = (char *)&v95 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v95 - v15;
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void **)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v105 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  id v106 = (char *)&v95 - v21;
  __chkstk_darwin(v22);
  uint64_t v100 = (char *)&v95 - v23;
  __chkstk_darwin(v24);
  uint64_t v101 = (char *)&v95 - v25;
  __chkstk_darwin(v26);
  uint64_t v102 = (char *)&v95 - v27;
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v95 - v29;
  __chkstk_darwin(v31);
  id v107 = (char *)&v95 - v32;
  __chkstk_darwin(v33);
  uint64_t v108 = (char *)&v95 - v34;
  __chkstk_darwin(v35);
  uint64_t v109 = (char *)&v95 - v36;
  __chkstk_darwin(v37);
  uint64_t v110 = (char *)&v95 - v38;
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v95 - v40;
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v95 - v43;
  __chkstk_darwin(v45);
  uint64_t v47 = (char *)&v95 - v46;
  __chkstk_darwin(v48);
  uint64_t v50 = (char *)&v95 - v49;
  id v51 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v51 & 1) == 0)
  {
    uint64_t v94 = static os_log_type_t.error.getter(v51);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v93 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v94,  &_mh_execute_header,  qword_10023DFC8,  "deferredRecords call failed because in device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
    return (uint64_t)v93;
  }

  uint64_t v96 = v30;
  uint64_t v97 = v3;
  uint64_t v115 = _swiftEmptyArrayStorage;
  uint64_t v52 = sub_10013A76C();
  uint64_t v99 = v0;
  uint64_t v53 = v52;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t v54 = (uint64_t (*)(char *, uint64_t, uint64_t))v18[6];
  uint64_t result = v54(v16, 1LL, v17);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v98 = (void (*)(char *, char *, uint64_t))v18[4];
  v98(v47, v16, v17);
  URL.appendingPathComponent(_:)(0x6552656369766544LL);
  uint64_t v56 = (void (*)(char *, uint64_t))v18[1];
  v56(v47, v17);
  uint64_t v57 = sub_100139314( (uint64_t)v50,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
  swift_release(v53);
  uint64_t v58 = v50;
  uint64_t v59 = v56;
  v56(v58, v17);
  sub_10013C4B8((uint64_t)v57);
  uint64_t v60 = sub_10013A76C();
  uint64_t v61 = v113;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = v54(v61, 1LL, v17);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v62 = v54;
  uint64_t v63 = v98;
  v98(v41, v61, v17);
  URL.appendingPathComponent(_:)(0x746553636967614DLL);
  v59(v41, v17);
  uint64_t v64 = sub_100139314( (uint64_t)v44,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
  swift_release(v60);
  v59(v44, v17);
  sub_10013C4B8((uint64_t)v64);
  uint64_t v65 = sub_10013A76C();
  BOOL v66 = v112;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = v62(v66, 1LL, v17);
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v67 = v109;
  v63(v109, v66, v17);
  uint64_t v68 = (uint64_t)v110;
  URL.appendingPathComponent(_:)(0xD00000000000001ELL);
  v59(v67, v17);
  uint64_t v69 = sub_100139314( v68,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
  swift_release(v65);
  v59((char *)v68, v17);
  sub_10013C4B8((uint64_t)v69);
  uint64_t v70 = sub_10013A76C();
  unint64_t v71 = v111;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = v62(v71, 1LL, v17);
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v72 = v107;
  v63(v107, v71, v17);
  uint64_t v73 = (uint64_t)v108;
  URL.appendingPathComponent(_:)(0xD000000000000012LL);
  v59(v72, v17);
  uint64_t v74 = sub_100139314( v73,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
  swift_release(v70);
  v59((char *)v73, v17);
  sub_10013C4B8((uint64_t)v74);
  v114[3] = &type metadata for AudioAccessoryFeatures;
  v114[4] = sub_10009E740();
  LOBYTE(v114[0]) = 0;
  char v75 = isFeatureEnabled(_:)(v114);
  sub_10009A498(v114);
  if ((v75 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v76 = sub_10013A76C();
  CKRecordZoneID v77 = v104;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = v62(v77, 1LL, v17);
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v78 = v102;
  v63(v102, v77, v17);
  uint64_t v79 = (uint64_t)v96;
  URL.appendingPathComponent(_:)(0x6563697665444141LL);
  v59(v78, v17);
  id v80 = sub_100139314( v79,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
  swift_release(v76);
  v59((char *)v79, v17);
  sub_10013C4B8((uint64_t)v80);
  uint64_t v81 = sub_10013A76C();
  unint64_t v82 = v103;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  unint64_t v83 = v63;
  Swift::String v84 = v62;
  uint64_t result = v62(v82, 1LL, v17);
  if ((_DWORD)result != 1)
  {
    id v85 = v100;
    v83(v100, v82, v17);
    uint64_t v86 = (uint64_t)v101;
    URL.appendingPathComponent(_:)(0xD000000000000011LL);
    v59(v85, v17);
    uint64_t v87 = sub_100139314( v86,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
    swift_release(v81);
    v59((char *)v86, v17);
    sub_10013C4B8((uint64_t)v87);
    uint64_t v62 = v84;
    uint64_t v63 = v83;
LABEL_10:
    uint64_t v88 = sub_10013A76C();
    Swift::String v89 = v97;
    URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
    uint64_t result = v62(v89, 1LL, v17);
    if ((_DWORD)result != 1)
    {
      NSString v90 = v105;
      v63(v105, v89, v17);
      uint64_t v91 = (uint64_t)v106;
      URL.appendingPathComponent(_:)(0xD000000000000013LL);
      v59(v90, v17);
      uint64_t v92 = sub_100139314( v91,  &qword_100235830,  type metadata accessor for BTDeferredRecord,  (uint64_t)sub_100188144,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B934);
      swift_release(v88);
      v59((char *)v91, v17);
      sub_10013C4B8((uint64_t)v92);
      return (uint64_t)v115;
    }

    goto LABEL_20;
  }

uint64_t sub_10013C4B8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v24 = v4 + v2;
  }
  else {
    int64_t v24 = v4;
  }
  unint64_t v3 = sub_10018B934(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = type metadata accessor for BTDeferredRecord(0LL);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 72);
  unint64_t v15 = v3 + v13 + v14 * v9;
  unint64_t v16 = a1 + v13;
  uint64_t v17 = v14 * v8;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFADD__(v21, v8);
  uint64_t v23 = v21 + v8;
  if (!v22)
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

uint64_t sub_10013C62C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = sub_10013A76C();
    if (qword_100234BD0 != -1) {
      swift_once(&qword_100234BD0, sub_1000F0478);
    }
    uint64_t v8 = sub_100098D58(v2, (uint64_t)qword_10023DF18);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    uint64_t v9 = sub_100139314( (uint64_t)v5,  &qword_1002357D8,  type metadata accessor for LegacyMagicPairingSettingsRecords,  (uint64_t)sub_10018810C,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B948);
    swift_release(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v10 = v9[2];
    uint64_t v11 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (v10)
    {
      sub_1000A7C90( (uint64_t)v9 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)),  a1,  type metadata accessor for LegacyMagicPairingSettingsRecords);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1, 0LL, 1LL, v11);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1LL, 1LL, v11);
    }

    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(v6);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_10023DFC8,  "Legacy magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  94LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v14 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a1,  1LL,  1LL,  v14);
  }

uint64_t sub_10013C84C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = sub_10013A76C();
    if (qword_100234B48 != -1) {
      swift_once(&qword_100234B48, sub_1000A5118);
    }
    uint64_t v8 = sub_100098D58(v2, (uint64_t)qword_10023DD18);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    uint64_t v9 = sub_100139314( (uint64_t)v5,  &qword_1002357D0,  type metadata accessor for SoundProfileRecord,  (uint64_t)sub_1001880D4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7EC);
    swift_release(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    unint64_t v18 = v9;
    swift_bridgeObjectRetain(v9);
    sub_10016220C(&v18);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = v18;
    uint64_t v11 = v18[2];
    uint64_t v12 = type metadata accessor for SoundProfileRecord(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if (v11)
    {
      sub_1000A7C90( (uint64_t)v10 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)),  a1,  type metadata accessor for SoundProfileRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0LL, 1LL, v12);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1LL, 1LL, v12);
    }

    return swift_release(v10);
  }

  else
  {
    uint64_t v14 = static os_log_type_t.error.getter(v6);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_10023DFC8,  "Unable to read sound profile record because device is in beforeFirstUnlock state",  80LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v15 = type metadata accessor for SoundProfileRecord(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( a1,  1LL,  1LL,  v15);
  }

void *sub_10013CAA0()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12[3] = &type metadata for AudioAccessoryFeatures;
  v12[4] = sub_10009E740();
  LOBYTE(v12[0]) = 0;
  char v4 = isFeatureEnabled(_:)(v12);
  sub_10009A498(v12);
  if ((v4 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  id v5 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = sub_10013A76C();
    if (qword_100234BF8 != -1) {
      swift_once(&qword_100234BF8, sub_100113FD8);
    }
    uint64_t v7 = sub_100098D58(v0, (uint64_t)qword_10023DF40);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7, v0);
    uint64_t v8 = (void *)sub_100138AFC((uint64_t)v3, &qword_100236E48, (uint64_t)sub_100166F6C);
    swift_release(v6);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }

  else
  {
    uint64_t v9 = static os_log_type_t.error.getter(v5);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v8 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
  }

  return v8;
}

void *sub_10013CC54()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12[3] = &type metadata for AudioAccessoryFeatures;
  v12[4] = sub_10009E740();
  LOBYTE(v12[0]) = 0;
  char v4 = isFeatureEnabled(_:)(v12);
  sub_10009A498(v12);
  if ((v4 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  id v5 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = sub_10013A76C();
    if (qword_100234B40 != -1) {
      swift_once(&qword_100234B40, sub_10009F940);
    }
    uint64_t v7 = sub_100098D58(v0, (uint64_t)qword_10023DCE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7, v0);
    uint64_t v8 = (void *)sub_100138AFC((uint64_t)v3, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
    swift_release(v6);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }

  else
  {
    uint64_t v9 = static os_log_type_t.error.getter(v5);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v8 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
  }

  return v8;
}

uint64_t sub_10013CE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Notification(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __n128 v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v27 = *(id *)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v13);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  unint64_t v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_100210710, v17 + 8, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, v14, v10);
  *(void *)(v18 + v17) = a2;
  aBlock[4] = sub_100189968;
  uint64_t v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_100210728;
  unint64_t v19 = _Block_copy(aBlock);
  id v20 = v27;
  uint64_t v21 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v24 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  return swift_release(v33);
}

void sub_10013D090(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3)
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
LABEL_15:
    sub_100099358((uint64_t)&v20, &qword_100236570);
    return;
  }

  uint64_t v4 = v3;
  v18[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"IsNetworkAvailable");
  v18[1] = v5;
  AnyHashable.init<A>(_:)(v19, v18, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_1000A3BE0((uint64_t)v19), (v7 & 1) != 0))
  {
    sub_100112834(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v20);
  }

  else
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
  }

  swift_bridgeObjectRelease(v4);
  sub_1000A4B84((uint64_t)v19);
  if (!*((void *)&v21 + 1)) {
    goto LABEL_15;
  }
  uint64_t v8 = sub_1000A4A64(0LL, &qword_100237060, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v9 = swift_dynamicCast(v19, &v20, (char *)&type metadata for Any + 8, v8, 6LL);
  if ((v9 & 1) != 0)
  {
    uint64_t v10 = (void *)v19[0];
    uint64_t v11 = static os_log_type_t.debug.getter(v9);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v12 = qword_10023DFC8;
    uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v14 + 56) = v8;
    *(void *)(v14 + 64) = sub_1000C934C(&qword_100237068, &qword_100237060, &OBJC_CLASS___NSNumber_ptr);
    *(void *)(v14 + 32) = v10;
    id v15 = v10;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Network changed: %@", 19LL, 2LL, v14);
    swift_bridgeObjectRelease(v14);
    unsigned int v16 = [v15 BOOLValue];
    int v17 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_networkUp);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_networkUp) = v16;
    if (v17 != 1)
    {
      if (v16) {
        sub_10013D59C();
      }
    }
  }

uint64_t sub_10013D2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10013D348(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_10023DFC8,  "Deinit Device Store",  19LL,  2LL,  _swiftEmptyArrayStorage);
  id v3 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v3 removeObserver:v1];

  sub_1000C9F88(v1 + 24);
  swift_bridgeObjectRelease(*(void *)(v1 + 48));
  sub_1001136A8(*(id *)(v1 + 56));
  uint64_t v4 = v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL;
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);

  swift_release(*(void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager));
  swift_unknownObjectRelease(*(void *)(v1
                                       + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator));
  return v1;
}

uint64_t sub_10013D47C(uint64_t a1)
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_10013D4A0()
{
  return type metadata accessor for DeviceStore(0LL);
}

uint64_t type metadata accessor for DeviceStore(uint64_t a1)
{
  uint64_t result = qword_100236AA0;
  if (!qword_100236AA0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceStore);
  }
  return result;
}

uint64_t sub_10013D4E4(uint64_t a1)
{
  v4[0] = &unk_1001A95D8;
  v4[1] = &unk_1001A95F0;
  v4[2] = &unk_1001A9608;
  void v4[3] = &unk_1001A9620;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = &unk_1001A95D8;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_1001A9638;
    v4[8] = &unk_1001A9638;
    v4[9] = &unk_1001A9608;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10013D59C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  char v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v14 = qword_10023DFC8;
  uint64_t v15 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  int v17 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer);
  if (v17)
  {
    id v18 = [v17 date];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    unint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
    uint64_t v47 = v9;
    v20.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v46 = v11;
    Class isa = v20.super.isa;
    uint64_t v22 = v8;
    uint64_t v23 = v14;
    uint64_t v24 = v7;
    uint64_t v25 = v1;
    uint64_t v26 = v4;
    uint64_t v27 = v13;
    id v28 = [v19 localizedStringFromDate:v20.super.isa dateStyle:2 timeStyle:2];

    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    unint64_t v31 = v30;

    uint64_t v13 = v27;
    uint64_t v4 = v26;
    uint64_t v1 = v25;
    char v7 = v24;
    uint64_t v14 = v23;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v22);
  }

  else
  {
    uint64_t v29 = 0LL;
    unint64_t v31 = 0LL;
  }

  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10009914C();
  unint64_t v32 = 0xD000000000000010LL;
  if (v31) {
    unint64_t v32 = v29;
  }
  unint64_t v33 = 0x80000001001D4E40LL;
  if (v31) {
    unint64_t v33 = v31;
  }
  *(void *)(v16 + 32) = v32;
  *(void *)(v16 + 40) = v33;
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "Device Store scheduleDeviceStoreDeferredActions to run at %@",  60LL,  2LL,  v16);
  swift_bridgeObjectRelease(v16);
  uint64_t v34 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  uint64_t v35 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v35 + 16, v1);
  aBlock[4] = sub_1001880BC;
  uint64_t v54 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_1002104D0;
  uint64_t v36 = _Block_copy(aBlock);
  id v37 = v34;
  uint64_t v38 = swift_retain(v35);
  static DispatchQoS.unspecified.getter(v38);
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v39 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v40 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v41 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v42 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v40, v41, v51, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v36);
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v4, v42);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v49);
  uint64_t v43 = v54;
  swift_release(v35);
  return swift_release(v43);
}

void sub_10013D998(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    uint64_t v4 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer;
    if (*(void *)(Strong + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer))
    {
      swift_release(Strong);
    }

    else
    {
      uint64_t v5 = static os_log_type_t.default.getter(Strong);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_10023DFC8,  "Device Store checkin activity handler",  37LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v6 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
      swift_weakInit(v6 + 16, v3);
      id v7 = objc_allocWithZone((Class)&OBJC_CLASS___BTXPCTimer);
      swift_retain(v6);
      NSString v8 = String._bridgeToObjectiveC()();
      aBlock[4] = sub_1001880C4;
      uint64_t v14 = v6;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000F9B78;
      void aBlock[3] = &unk_1002104F8;
      uint64_t v9 = _Block_copy(aBlock);
      id v10 = [v7 initWithName:v8 timeInterval:1 gracePeriod:705 priority:v9 options:300.0 block:60.0];

      _Block_release(v9);
      uint64_t v11 = v14;
      swift_release(v6);
      swift_release(v11);
      uint64_t v12 = *(void **)(v3 + v4);
      *(void *)(v3 + v4) = v10;
      swift_release(v3);
    }
  }

uint64_t sub_10013DB78(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v35, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v29 = v9;
    uint64_t v30 = v8;
    uint64_t v31 = v5;
    uint64_t v14 = static os_log_type_t.default.getter(result);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v15 = qword_10023DFC8;
    uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    *(void *)(v17 + 56) = sub_1000A4A64(0LL, &qword_100236FE8, &off_1002051D8);
    *(void *)(v17 + 64) = sub_1000C934C((unint64_t *)&unk_100236FF0, &qword_100236FE8, &off_1002051D8);
    *(void *)(v17 + 32) = a1;
    id v18 = a1;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v15,  "Device Store scheduled activity handler timer fired: %@",  55LL,  2LL,  v17);
    swift_bridgeObjectRelease(v17);
    unint64_t v19 = *(void **)(v13 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    uint64_t v20 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
    swift_weakInit(v20 + 16, v13);
    aBlock[4] = sub_1001880CC;
    uint64_t v34 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = &unk_100210520;
    __int128 v21 = _Block_copy(aBlock);
    id v22 = v19;
    uint64_t v23 = swift_retain(v20);
    static DispatchQoS.unspecified.getter(v23);
    unint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v26 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v4, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v21);
    _Block_release(v21);
    swift_release(v13);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    uint64_t v27 = v34;
    swift_release(v20);
    return swift_release(v27);
  }

  return result;
}

void sub_10013DE9C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    sub_10013DF80();
    swift_release(v3);
  }

  swift_beginAccess(v1, v10, 0LL, 0LL);
  uint64_t v4 = swift_weakLoadStrong(v1);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = *(id *)(v4 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer);
    swift_release(v5);
    [v6 invalidate];
  }

  swift_beginAccess(v1, v9, 0LL, 0LL);
  uint64_t v7 = swift_weakLoadStrong(v1);
  if (v7)
  {
    uint64_t v8 = *(void **)(v7 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer);
    *(void *)(v7 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer) = 0LL;
    swift_release(v7);
  }

uint64_t sub_10013DF80()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  uint64_t v8 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v8 + 16, v0);
  aBlock[4] = sub_100187CE8;
  uint64_t v22 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = &unk_100210278;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = v7;
  uint64_t v11 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v14 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v3, v9);
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
  uint64_t v15 = v22;
  swift_release(v8);
  return swift_release(v15);
}

uint64_t sub_10013E19C(uint64_t a1)
{
  uint64_t v2 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v2);
  uint64_t v437 = (uint64_t)&v424 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v424 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  id v10 = (uint64_t *)((char *)&v424 - v9);
  uint64_t v476 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v453 = *(void *)(v476 - 8);
  __chkstk_darwin(v476);
  v477 = (char *)&v424 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v12);
  v440 = (char *)&v424 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  v433 = (char *)&v424 - v15;
  __chkstk_darwin(v16);
  v436 = (char *)&v424 - v17;
  __chkstk_darwin(v18);
  v443 = (char *)&v424 - v19;
  __chkstk_darwin(v20);
  v451 = (char *)&v424 - v21;
  __chkstk_darwin(v22);
  v456 = (char *)&v424 - v23;
  uint64_t v479 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v460 = *(void *)(v479 - 8);
  __chkstk_darwin(v479);
  v480 = (char *)&v424 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v475 = type metadata accessor for URL(0LL);
  uint64_t v473 = *(void *)(v475 - 8);
  __chkstk_darwin(v475);
  v439 = (char *)&v424 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  v438 = (char *)&v424 - v27;
  __chkstk_darwin(v28);
  v432 = (char *)&v424 - v29;
  __chkstk_darwin(v30);
  v431 = (char *)&v424 - v31;
  __chkstk_darwin(v32);
  v435 = (char *)&v424 - v33;
  __chkstk_darwin(v34);
  v434 = (char *)&v424 - v35;
  __chkstk_darwin(v36);
  v442 = (char *)&v424 - v37;
  __chkstk_darwin(v38);
  v441 = (char *)&v424 - v39;
  __chkstk_darwin(v40);
  v450 = (char *)&v424 - v41;
  __chkstk_darwin(v42);
  v449 = (char *)&v424 - v43;
  __chkstk_darwin(v44);
  v455 = (char *)&v424 - v45;
  __chkstk_darwin(v46);
  v454 = (char *)&v424 - v47;
  __chkstk_darwin(v48);
  v465 = (char *)&v424 - v49;
  uint64_t v474 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v464 = *(void *)(v474 - 8);
  uint64_t v50 = *(void *)(v464 + 64);
  __chkstk_darwin(v474);
  uint64_t v448 = (uint64_t)&v424 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v51);
  uint64_t v444 = (uint64_t)&v424 - v52;
  __chkstk_darwin(v53);
  uint64_t v445 = (uint64_t)&v424 - v54;
  __chkstk_darwin(v55);
  v447 = (char *)&v424 - v56;
  __chkstk_darwin(v57);
  uint64_t v446 = (uint64_t)&v424 - v58;
  __chkstk_darwin(v59);
  uint64_t v61 = (char *)&v424 - v60;
  __chkstk_darwin(v62);
  uint64_t v468 = (uint64_t)&v424 - v63;
  __chkstk_darwin(v64);
  BOOL v66 = (char *)&v424 - v65;
  a1 += 16LL;
  swift_beginAccess(a1, v484, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (!result) {
    return result;
  }
  uint64_t v68 = result;
  uint64_t v428 = v5;
  uint64_t v429 = v4;
  v427 = v7;
  v430 = v10;
  uint64_t v69 = static os_log_type_t.default.getter(result);
  if (qword_100234C28 != -1) {
    goto LABEL_187;
  }
LABEL_3:
  uint64_t v70 = qword_10023DFC8;
  uint64_t v467 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v71 = swift_allocObject(v467, 72LL, 7LL);
  __int128 v466 = xmmword_1001A5EA0;
  *(_OWORD *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v72 = sub_10013BA34();
  uint64_t v478 = v68;
  *(void *)(v71 + 56) = sub_100098CD8(&qword_100236FD0);
  uint64_t v73 = v478;
  *(void *)(v71 + 64) = sub_1000A4318( (unint64_t *)&unk_100236FD8,  &qword_100236FD0,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v71 + 32) = v72;
  os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Run to delete for deferred records: %@", 38LL, 2LL, v71);
  swift_bridgeObjectRelease(v71);
  uint64_t v74 = sub_10013BA34();
  char v75 = *(char **)(v74 + 16);
  v472 = v61;
  if (!v75) {
    goto LABEL_15;
  }
  uint64_t v76 = *(unsigned __int8 *)(v464 + 80);
  unint64_t v426 = v74;
  uint64_t v77 = v74 + ((v76 + 32) & ~v76);
  unint64_t v470 = *(void *)(v464 + 72);
  uint64_t v463 = v76 | 7;
  uint64_t v469 = (v76 + 16) & ~v76;
  unint64_t v462 = (v50 + v469 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v461 = (char *)(v462 + 8);
  v459 = CKCurrentUserDefaultName;
  uint64_t v78 = type metadata accessor for BTDeferredRecord;
  v452 = "tsNew";
  unint64_t v458 = 0x80000001001CAB80LL;
  v457 = (void *)0x80000001001CB350LL;
  do
  {
    sub_1000A7C90(v77, (uint64_t)v66, v78);
    if ((*v66 & 1) != 0)
    {
      uint64_t v84 = swift_bridgeObjectRelease(0xE600000000000000LL);
    }

    else
    {
      char v85 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x657461647075LL,  0xE600000000000000LL,  0x6574656C6564LL,  0xE600000000000000LL,  0LL);
      uint64_t v84 = swift_bridgeObjectRelease(0xE600000000000000LL);
      if ((v85 & 1) == 0) {
        goto LABEL_6;
      }
    }

    uint64_t v86 = static os_log_type_t.default.getter(v84);
    uint64_t v87 = qword_10023DFC8;
    uint64_t v88 = swift_allocObject(v467, 72LL, 7LL);
    v471 = v75;
    Swift::String v89 = (void *)v88;
    *(_OWORD *)(v88 + swift_unknownObjectWeakDestroy(v0 + 16) = v466;
    uint64_t v90 = (uint64_t)v66;
    uint64_t v91 = (uint64_t)v66;
    uint64_t v92 = v78;
    uint64_t v93 = v468;
    sub_1000A7C90(v90, v468, v92);
    uint64_t v94 = String.init<A>(describing:)(v93, v474);
    uint64_t v96 = v95;
    v89[7] = &type metadata for String;
    v89[8] = sub_10009914C();
    v89[4] = v94;
    v89[5] = v96;
    os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "Delete deferred record: %@", 26LL, 2LL, v89);
    swift_bridgeObjectRelease(v89);
    uint64_t v97 = sub_10013B740();
    uint64_t v61 = v472;
    UUID.uuidString.getter(v97);
    uint64_t v99 = v98;
    id v100 = objc_allocWithZone(&OBJC_CLASS___CKRecordID);
    NSString v101 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v99);
    id v102 = [v100 initWithRecordName:v101];

    sub_1000A7C90(v91, v93, v92);
    uint64_t v103 = swift_allocObject(&unk_1002102B0, v461, v463);
    uint64_t v104 = v93;
    uint64_t v78 = v92;
    BOOL v66 = (char *)v91;
    sub_1000C998C(v104, v103 + v469, v78);
    *(void *)(v103 + v462) = v478;
    uint64_t v105 = swift_allocObject(&unk_1002102D8, 49LL, 7LL);
    *(void *)(v105 + swift_unknownObjectWeakDestroy(v0 + 16) = v97;
    *(void *)(v105 + 24) = v102;
    *(void *)(v105 + 32) = sub_100187E1C;
    *(void *)(v105 + 40) = v103;
    *(_BYTE *)(v105 + 48) = 0;
    swift_retain(v478);
    swift_unknownObjectRetain(v97);
    id v106 = v102;
    swift_retain(v103);
    sub_100104BA4((uint64_t)sub_10018749C, v105);
    uint64_t v107 = v103;
    char v75 = v471;
    swift_release(v107);
    uint64_t v108 = v97;
    uint64_t v73 = v478;
    swift_unknownObjectRelease(v108);

    swift_release(v105);
    uint64_t v109 = *(void *)(v91 + 8);
    uint64_t v110 = *(const char **)(v91 + 16);
    if (v109 == 0xD000000000000012LL && v110 == (const char *)v458
      || (_stringCompareWithSmolCheck(_:_:expecting:)( v109,  v110,  0xD000000000000012LL,  (unint64_t)v452 | 0x8000000000000000LL,  0LL) & 1) != 0)
    {
      sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
      v79._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v459);
      v79._object = v80;
      v81._uint64_t countAndFlagsBits = 0xD000000000000010LL;
      v81._object = v457;
      Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v81, v79).super.isa;
      uint64_t v83 = sub_10013B740();
      sub_100108E80((uint64_t)&off_100209550, (uint64_t)isa, 0LL, 0LL, 0LL, 0LL);
      swift_arrayDestroy(&unk_100209570, 1LL, &type metadata for String);

      swift_unknownObjectRelease(v83);
    }

LABEL_66:
      id v200 = [v471 isFirstUnlocked];
      if ((_DWORD)v200)
      {
        uint64_t v201 = sub_10013A76C();
        if (qword_100234B70 != -1) {
          swift_once(&qword_100234B70, sub_1000CAF84);
        }
        uint64_t v202 = v475;
        uint64_t v203 = sub_100098D58(v475, (uint64_t)qword_10023DD70);
        uint64_t v204 = v473;
        uint64_t v205 = (uint64_t)v465;
        (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v203, v202);
        uint64_t v206 = sub_100139314( v205,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
        swift_release(v201);
        (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v205, v202);
        uint64_t v207 = v206[2];
        if (v207)
        {
LABEL_70:
          uint64_t v208 = type metadata accessor for MagicPairingSettingsRecord(0LL);
          uint64_t v209 = *(void *)(v208 - 8);
          uint64_t v210 = (char *)v206
               + ((*(unsigned __int8 *)(v209 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80));
          uint64_t v211 = &v61[*(int *)(v474 + 28)];
          uint64_t v212 = *(void *)v211;
          uint64_t v213 = *((void *)v211 + 1);
          uint64_t v214 = *(void *)(v209 + 72);
          while (1)
          {
            uint64_t v215 = &v210[*(int *)(v208 + 24)];
            uint64_t v216 = *((void *)v215 + 1);
            BOOL v217 = *(void *)v215 == v212 && v216 == v213;
            if (v217 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v215, v216, v212, v213, 0LL) & 1) != 0) {
              break;
            }
            v210 += v214;
            if (!--v207)
            {
              uint64_t v218 = swift_bridgeObjectRelease(v206);
              uint64_t v73 = v478;
              goto LABEL_80;
            }
          }

          swift_bridgeObjectRelease(v206);
          uint64_t v73 = v478;
LABEL_86:
          v482 = &type metadata for AudioAccessoryFeatures;
          unint64_t v241 = sub_10009E740();
          unint64_t v483 = v241;
          LOBYTE(v481) = 0;
          char v242 = isFeatureEnabled(_:)(&v481);
          sub_10009A498(&v481);
          uint64_t v243 = v446;
          sub_1000A7C90((uint64_t)v61, v446, type metadata accessor for BTDeferredRecord);
          uint64_t v244 = (uint64_t)v447;
          if ((v242 & 1) != 0)
          {
            uint64_t v245 = sub_10013CAA0();
            __chkstk_darwin(v245);
            *(&v424 - 2) = v243;
            char v246 = sub_100121CC8((uint64_t (*)(id *))sub_100187D20, (uint64_t)(&v424 - 4), (uint64_t)v245);
            swift_bridgeObjectRelease(v245);
            sub_1000A7CD4(v243, type metadata accessor for BTDeferredRecord);
            sub_1000A7C90((uint64_t)v61, v244, type metadata accessor for BTDeferredRecord);
            if ((v246 & 1) == 0)
            {
              uint64_t v247 = *(void *)(v244 + 8);
              uint64_t v248 = *(void *)(v244 + 16);
              if (v247 == 0x6563697665444141LL && v248 == 0xEE0064726F636552LL)
              {
                uint64_t v249 = sub_1000A7CD4(v244, type metadata accessor for BTDeferredRecord);
LABEL_130:
                uint64_t v304 = static os_log_type_t.default.getter(v249);
                uint64_t v305 = qword_10023DFC8;
                uint64_t v306 = swift_allocObject(v467, 72LL, 7LL);
                *(_OWORD *)(v306 + swift_unknownObjectWeakDestroy(v0 + 16) = v466;
                uint64_t v307 = v468;
                sub_1000A7C90((uint64_t)v61, v468, type metadata accessor for BTDeferredRecord);
                uint64_t v308 = v474;
                uint64_t v309 = String.init<A>(describing:)(v307, v474);
                uint64_t v311 = v310;
                *(void *)(v306 + 56) = &type metadata for String;
                *(void *)(v306 + 64) = sub_10009914C();
                *(void *)(v306 + 32) = v309;
                *(void *)(v306 + 40) = v311;
                os_log(_:dso:log:_:_:)( v304,  &_mh_execute_header,  v305,  "Remove deferred AADeviceRecord not found in cache anymore: %@",  61LL,  2LL,  v306);
                swift_bridgeObjectRelease(v306);
                uint64_t v312 = sub_10013A76C();
                v313 = (uint64_t *)&v61[*(int *)(v308 + 28)];
                uint64_t v314 = v313[1];
                uint64_t v469 = *v313;
                swift_bridgeObjectRetain(v314);
                v315 = v436;
                URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
                uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v473 + 48))(v315, 1LL, v475);
                if ((_DWORD)result == 1) {
                  goto LABEL_231;
                }
                v316 = v435;
                uint64_t v317 = v475;
                (*(void (**)(char *, char *, uint64_t))(v473 + 32))(v435, v315, v475);
                uint64_t v318 = *((void *)v61 + 1);
                uint64_t v319 = *((void *)v61 + 2);
                swift_bridgeObjectRetain(v319);
                v320 = v434;
                URL.appendingPathComponent(_:)(v318);
                swift_bridgeObjectRelease(v319);
                v321 = *(uint64_t (**)(char *, uint64_t))(v473 + 8);
                uint64_t v322 = v321(v316, v317);
                __chkstk_darwin(v322);
                uint64_t v323 = v469;
                *(&v424 - 4) = v312;
                *(&v424 - 3) = v323;
                *(&v424 - 2) = v314;
                *(&v424 - 1) = (uint64_t)v320;
                OS_dispatch_queue.sync<A>(execute:)(&v481, sub_10018A6A0, &v424 - 6, &type metadata for Bool);
                swift_release(v312);
                swift_bridgeObjectRelease(v314);
                v321(v320, v317);
                uint64_t v69 = (uint64_t)v480;
                goto LABEL_61;
              }

              char v303 = _stringCompareWithSmolCheck(_:_:expecting:)( v247,  v248,  0x6563697665444141LL,  0xEE0064726F636552LL,  0LL);
              uint64_t v249 = sub_1000A7CD4(v244, type metadata accessor for BTDeferredRecord);
              if ((v303 & 1) != 0) {
                goto LABEL_130;
              }
LABEL_93:
              v482 = &type metadata for AudioAccessoryFeatures;
              unint64_t v483 = v241;
              LOBYTE(v481) = 0;
              char v250 = isFeatureEnabled(_:)(&v481);
              sub_10009A498(&v481);
              uint64_t v251 = v445;
              sub_1000A7C90((uint64_t)v61, v445, type metadata accessor for BTDeferredRecord);
              if ((v250 & 1) != 0)
              {
                uint64_t v252 = sub_10013CC54();
                __chkstk_darwin(v252);
                *(&v424 - 2) = v251;
                char v253 = sub_100121CC8((uint64_t (*)(id *))sub_100187CFC, (uint64_t)(&v424 - 4), (uint64_t)v252);
                swift_bridgeObjectRelease(v252);
                sub_1000A7CD4(v251, type metadata accessor for BTDeferredRecord);
                uint64_t v254 = v444;
                sub_1000A7C90((uint64_t)v61, v444, type metadata accessor for BTDeferredRecord);
                if ((v253 & 1) == 0)
                {
                  uint64_t v255 = *(void *)(v254 + 8);
                  uint64_t v256 = *(void *)(v254 + 16);
                  if (v255 == 0xD000000000000011LL && v256 == v426)
                  {
                    uint64_t v257 = sub_1000A7CD4(v254, type metadata accessor for BTDeferredRecord);
                    goto LABEL_133;
                  }

                  char v324 = _stringCompareWithSmolCheck(_:_:expecting:)( v255,  v256,  0xD000000000000011LL,  v425 | 0x8000000000000000LL,  0LL);
                  uint64_t v257 = sub_1000A7CD4(v254, type metadata accessor for BTDeferredRecord);
                  if ((v324 & 1) != 0)
                  {
LABEL_133:
                    uint64_t v325 = static os_log_type_t.default.getter(v257);
                    uint64_t v326 = qword_10023DFC8;
                    uint64_t v327 = swift_allocObject(v467, 72LL, 7LL);
                    *(_OWORD *)(v327 + swift_unknownObjectWeakDestroy(v0 + 16) = v466;
                    uint64_t v328 = v468;
                    sub_1000A7C90((uint64_t)v61, v468, type metadata accessor for BTDeferredRecord);
                    uint64_t v329 = v474;
                    uint64_t v330 = String.init<A>(describing:)(v328, v474);
                    uint64_t v332 = v331;
                    *(void *)(v327 + 56) = &type metadata for String;
                    *(void *)(v327 + 64) = sub_10009914C();
                    *(void *)(v327 + 32) = v330;
                    *(void *)(v327 + 40) = v332;
                    os_log(_:dso:log:_:_:)( v325,  &_mh_execute_header,  v326,  "Remove deferred AAProxCardsRecord not found in cache anymore: %@",  64LL,  2LL,  v327);
                    swift_bridgeObjectRelease(v327);
                    uint64_t v287 = sub_10013A76C();
                    v333 = (uint64_t *)&v61[*(int *)(v329 + 28)];
                    uint64_t v289 = v333[1];
                    uint64_t v469 = *v333;
                    swift_bridgeObjectRetain(v289);
                    v334 = v433;
                    URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
                    uint64_t v335 = v473;
                    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v473 + 48))(v334, 1LL, v475);
                    if ((_DWORD)result == 1) {
                      goto LABEL_232;
                    }
                    v292 = v61;
                    v336 = v432;
                    (*(void (**)(char *, char *, uint64_t))(v335 + 32))(v432, v334, v475);
                    uint64_t v337 = *((void *)v61 + 1);
                    uint64_t v338 = *((void *)v61 + 2);
                    swift_bridgeObjectRetain(v338);
                    v296 = v431;
                    URL.appendingPathComponent(_:)(v337);
                    swift_bridgeObjectRelease(v338);
                    v297 = *(uint64_t (**)(char *, uint64_t))(v335 + 8);
                    uint64_t v298 = v475;
                    uint64_t v339 = v297(v336, v475);
                    __chkstk_darwin(v339);
                    v300 = &v424 - 6;
                    uint64_t v340 = v469;
                    *(&v424 - 4) = v287;
                    *(&v424 - 3) = v340;
                    *(&v424 - 2) = v289;
                    *(&v424 - 1) = (uint64_t)v296;
LABEL_135:
                    OS_dispatch_queue.sync<A>(execute:)(&v481, sub_10018A6A0, v300, &type metadata for Bool);
                    swift_release(v287);
                    swift_bridgeObjectRelease(v289);
                    v297(v296, v298);
                    uint64_t v69 = (uint64_t)v480;
                    uint64_t v61 = v292;
                    goto LABEL_61;
                  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_100:
                  id v258 = [v471 isFirstUnlocked];
                  if ((_DWORD)v258)
                  {
                    uint64_t v259 = sub_10013A76C();
                    if (qword_100234BC0 != -1) {
                      swift_once(&qword_100234BC0, sub_1000DD8E4);
                    }
                    uint64_t v260 = v475;
                    uint64_t v261 = sub_100098D58(v475, (uint64_t)qword_10023DE08);
                    uint64_t v262 = v473;
                    uint64_t v263 = (uint64_t)v465;
                    (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v261, v260);
                    uint64_t v264 = sub_100138AFC(v263, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
                    swift_release(v259);
                    (*(void (**)(uint64_t, uint64_t))(v262 + 8))(v263, v260);
                  }

                  else
                  {
                    uint64_t v265 = static os_log_type_t.error.getter(v258);
                    uint64_t v264 = (uint64_t)_swiftEmptyArrayStorage;
                    os_log(_:dso:log:_:_:)( v265,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
                  }

                  if ((unint64_t)v264 >> 62)
                  {
                    if (v264 < 0) {
                      uint64_t v341 = v264;
                    }
                    else {
                      uint64_t v341 = v264 & 0xFFFFFFFFFFFFFF8LL;
                    }
                    swift_bridgeObjectRetain(v264);
                    BOOL v66 = (char *)_CocoaArrayWrapper.endIndex.getter(v341);
                    if (v66)
                    {
LABEL_107:
                      uint64_t v266 = (uint64_t *)&v61[*(int *)(v474 + 28)];
                      uint64_t v69 = *v266;
                      uint64_t v267 = v266[1];
                      uint64_t v68 = 4LL;
                      while (1)
                      {
                        if ((v264 & 0xC000000000000001LL) != 0) {
                          uint64_t v268 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v68 - 4, v264);
                        }
                        else {
                          uint64_t v268 = (char *)*(id *)(v264 + 8 * v68);
                        }
                        unint64_t v269 = v268;
                        uint64_t v61 = (char *)(v68 - 3);
                        if (__OFADD__(v68 - 4, 1LL)) {
                          goto LABEL_186;
                        }
                        uint64_t v270 = *(void *)&v268[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
                        uint64_t v271 = *(void *)&v269[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress
                                              + 8];
                        if (v270 == v69 && v271 == v267) {
                          break;
                        }
                        char v273 = _stringCompareWithSmolCheck(_:_:expecting:)(v270, v271, v69, v267, 0LL);

                        if ((v273 & 1) != 0)
                        {
                          swift_bridgeObjectRelease_n(v264, 2LL);
                          goto LABEL_127;
                        }

                        ++v68;
                        BOOL v127 = v61 == v66;
                        uint64_t v73 = v478;
                        uint64_t v61 = v472;
                        if (v127) {
                          goto LABEL_119;
                        }
                      }

                      swift_bridgeObjectRelease_n(v264, 2LL);

LABEL_127:
                      uint64_t v73 = v478;
                      uint64_t v61 = v472;
                      uint64_t v302 = v448;
                      uint64_t v68 = (uint64_t)type metadata accessor for BTDeferredRecord;
                      sub_1000A7C90((uint64_t)v472, v448, type metadata accessor for BTDeferredRecord);
                      sub_1000A7CD4(v302, type metadata accessor for BTDeferredRecord);
                      uint64_t v69 = (uint64_t)v480;
                      goto LABEL_128;
                    }
                  }

                  else
                  {
                    BOOL v66 = *(char **)((v264 & 0xFFFFFFFFFFFFF8LL) + 0x10);
                    swift_bridgeObjectRetain(v264);
                    if (v66) {
                      goto LABEL_107;
                    }
                  }

LABEL_119:
                  swift_bridgeObjectRelease_n(v264, 2LL);
                  uint64_t v274 = v448;
                  uint64_t v68 = (uint64_t)type metadata accessor for BTDeferredRecord;
                  sub_1000A7C90((uint64_t)v61, v448, type metadata accessor for BTDeferredRecord);
                  uint64_t v275 = *(void *)(v274 + 8);
                  unint64_t v276 = *(void **)(v274 + 16);
                  uint64_t v69 = (uint64_t)v480;
                  if (v275 == 0xD000000000000013LL && v276 == v457)
                  {
                    uint64_t v277 = sub_1000A7CD4(v448, type metadata accessor for BTDeferredRecord);
                  }

                  else
                  {
                    char v278 = _stringCompareWithSmolCheck(_:_:expecting:)( v275,  v276,  0xD000000000000013LL,  (unint64_t)v452 | 0x8000000000000000LL,  0LL);
                    uint64_t v277 = sub_1000A7CD4(v448, type metadata accessor for BTDeferredRecord);
                    if ((v278 & 1) == 0)
                    {
LABEL_128:
                      BOOL v66 = v461;
                      unint64_t v199 = v470;
                      goto LABEL_62;
                    }
                  }

                  uint64_t v279 = static os_log_type_t.default.getter(v277);
                  uint64_t v280 = qword_10023DFC8;
                  uint64_t v281 = swift_allocObject(v467, 72LL, 7LL);
                  *(_OWORD *)(v281 + swift_unknownObjectWeakDestroy(v0 + 16) = v466;
                  uint64_t v282 = v468;
                  sub_1000A7C90((uint64_t)v61, v468, type metadata accessor for BTDeferredRecord);
                  uint64_t v283 = v474;
                  uint64_t v284 = String.init<A>(describing:)(v282, v474);
                  uint64_t v286 = v285;
                  *(void *)(v281 + 56) = &type metadata for String;
                  *(void *)(v281 + 64) = sub_10009914C();
                  *(void *)(v281 + 32) = v284;
                  *(void *)(v281 + 40) = v286;
                  os_log(_:dso:log:_:_:)( v279,  &_mh_execute_header,  v280,  "Remove deferred HMDeviceCloudRecord not found in cache anymore: %@",  66LL,  2LL,  v281);
                  swift_bridgeObjectRelease(v281);
                  uint64_t v287 = sub_10013A76C();
                  v288 = (uint64_t *)&v61[*(int *)(v283 + 28)];
                  uint64_t v289 = v288[1];
                  uint64_t v469 = *v288;
                  swift_bridgeObjectRetain(v289);
                  v290 = v440;
                  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
                  uint64_t v291 = v473;
                  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v473 + 48))(v290, 1LL, v475);
                  if ((_DWORD)result == 1) {
                    goto LABEL_230;
                  }
                  v292 = v61;
                  v293 = v439;
                  (*(void (**)(char *, char *, uint64_t))(v291 + 32))(v439, v290, v475);
                  uint64_t v294 = *((void *)v61 + 1);
                  uint64_t v295 = *((void *)v61 + 2);
                  swift_bridgeObjectRetain(v295);
                  v296 = v438;
                  URL.appendingPathComponent(_:)(v294);
                  swift_bridgeObjectRelease(v295);
                  v297 = *(uint64_t (**)(char *, uint64_t))(v291 + 8);
                  uint64_t v298 = v475;
                  uint64_t v299 = v297(v293, v475);
                  __chkstk_darwin(v299);
                  v300 = &v424 - 6;
                  uint64_t v301 = v469;
                  *(&v424 - 4) = v287;
                  *(&v424 - 3) = v301;
                  *(&v424 - 2) = v289;
                  *(&v424 - 1) = (uint64_t)v296;
                  goto LABEL_135;
                }
              }

              else
              {
                sub_1000A7CD4(v251, type metadata accessor for BTDeferredRecord);
                uint64_t v254 = v444;
                sub_1000A7C90((uint64_t)v61, v444, type metadata accessor for BTDeferredRecord);
              }

              sub_1000A7CD4(v254, type metadata accessor for BTDeferredRecord);
              goto LABEL_100;
            }
          }

          else
          {
            sub_1000A7CD4(v243, type metadata accessor for BTDeferredRecord);
            sub_1000A7C90((uint64_t)v61, v244, type metadata accessor for BTDeferredRecord);
          }

          sub_1000A7CD4(v244, type metadata accessor for BTDeferredRecord);
          goto LABEL_93;
        }
      }

      else
      {
        uint64_t v219 = static os_log_type_t.error.getter(v200);
        uint64_t v206 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v219,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
        uint64_t v207 = _swiftEmptyArrayStorage[2];
        if (v207) {
          goto LABEL_70;
        }
      }

      uint64_t v218 = swift_bridgeObjectRelease(v206);
LABEL_80:
      uint64_t v220 = *((void *)v61 + 1);
      uint64_t v221 = *((void *)v61 + 2);
      if (v220 != 0x746553636967614DLL || v221 != 0xED000073676E6974LL)
      {
        uint64_t v218 = _stringCompareWithSmolCheck(_:_:expecting:)( *((void *)v61 + 1),  *((void *)v61 + 2),  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
        if ((v218 & 1) == 0) {
          goto LABEL_86;
        }
      }

      uint64_t v469 = v50;
      uint64_t v222 = static os_log_type_t.default.getter(v218);
      uint64_t v223 = qword_10023DFC8;
      uint64_t v224 = swift_allocObject(v467, 72LL, 7LL);
      *(_OWORD *)(v224 + swift_unknownObjectWeakDestroy(v0 + 16) = v466;
      uint64_t v225 = v468;
      sub_1000A7C90((uint64_t)v61, v468, type metadata accessor for BTDeferredRecord);
      id v226 = v61;
      uint64_t v227 = v474;
      uint64_t v228 = String.init<A>(describing:)(v225, v474);
      uint64_t v230 = v229;
      *(void *)(v224 + 56) = &type metadata for String;
      *(void *)(v224 + 64) = sub_10009914C();
      *(void *)(v224 + 32) = v228;
      *(void *)(v224 + 40) = v230;
      uint64_t v231 = v473;
      os_log(_:dso:log:_:_:)( v222,  &_mh_execute_header,  v223,  "Remove deferred magic record not found in cache anymore: %@",  59LL,  2LL,  v224);
      swift_bridgeObjectRelease(v224);
      uint64_t v232 = sub_10013A76C();
      id v233 = &v226[*(int *)(v227 + 28)];
      uint64_t v234 = *(void *)v233;
      uint64_t v235 = *((void *)v233 + 1);
      swift_bridgeObjectRetain(v235);
      unint64_t v236 = v443;
      URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v231 + 48))(v236, 1LL, v475);
      if ((_DWORD)result == 1) {
        goto LABEL_229;
      }
      unint64_t v237 = v442;
      (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v442, v236, v475);
      swift_bridgeObjectRetain(v221);
      uint64_t v238 = v231;
      id v239 = v441;
      URL.appendingPathComponent(_:)(v220);
      swift_bridgeObjectRelease(v221);
      __int128 v155 = *(uint64_t (**)(char *, uint64_t))(v238 + 8);
      uint64_t v240 = v155(v237, v475);
      __chkstk_darwin(v240);
      *(&v424 - 4) = v232;
      *(&v424 - 3) = v234;
      *(&v424 - 2) = v235;
      *(&v424 - 1) = (uint64_t)v239;
      uint64_t v50 = v469;
      OS_dispatch_queue.sync<A>(execute:)(&v481, sub_10018A6A0, &v424 - 6, &type metadata for Bool);
      swift_release(v232);
      swift_bridgeObjectRelease(v235);
      uint64_t v197 = v239;
      uint64_t v198 = v475;
LABEL_60:
      v155(v197, v198);
      uint64_t v73 = v478;
      uint64_t v69 = (uint64_t)v480;
      uint64_t v61 = v472;
LABEL_61:
      BOOL v66 = v461;
      unint64_t v199 = v470;
      uint64_t v68 = (uint64_t)type metadata accessor for BTDeferredRecord;
LABEL_62:
      unint64_t v112 = v199 + 1;
      sub_1000A7CD4((uint64_t)v61, type metadata accessor for BTDeferredRecord);
      if (v112 == v463)
      {
        swift_bridgeObjectRelease(v66);
        goto LABEL_142;
      }
    }
  }

  swift_bridgeObjectRelease(v111);
LABEL_142:
  v342 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v343 = [v342 isFirstUnlocked];
  if (!(_DWORD)v343)
  {
    uint64_t v353 = static os_log_type_t.error.getter(v343);
    v349 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v353,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v350 = _swiftEmptyArrayStorage[2];
    if (v350) {
      goto LABEL_146;
    }
    goto LABEL_150;
  }

  uint64_t v344 = sub_10013A76C();
  if (qword_100234B30 != -1) {
    swift_once(&qword_100234B30, sub_100094AFC);
  }
  uint64_t v345 = v475;
  uint64_t v346 = sub_100098D58(v475, (uint64_t)qword_10023DCC0);
  uint64_t v347 = v473;
  uint64_t v348 = (uint64_t)v465;
  (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v346, v345);
  v349 = sub_100139314( v348,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
  swift_release(v344);
  (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v345);
  uint64_t v350 = v349[2];
  if (!v350)
  {
LABEL_150:
    swift_bridgeObjectRelease(v349);
    goto LABEL_151;
  }

LABEL_146:
  uint64_t v351 = (uint64_t)v349 + ((*(unsigned __int8 *)(v460 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v460 + 80));
  uint64_t v352 = *(void *)(v460 + 72);
  swift_bridgeObjectRetain(v349);
  do
  {
    sub_1001413C4(v351, v73);
    v351 += v352;
    --v350;
  }

  while (v350);
  swift_bridgeObjectRelease_n(v349, 2LL);
LABEL_151:
  id v354 = [v342 isFirstUnlocked];
  if ((v354 & 1) == 0)
  {
    uint64_t v364 = static os_log_type_t.error.getter(v354);
    v360 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v364,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v361 = _swiftEmptyArrayStorage[2];
    if (v361) {
      goto LABEL_155;
    }
    goto LABEL_159;
  }

  uint64_t v355 = sub_10013A76C();
  if (qword_100234BC8 != -1) {
    swift_once(&qword_100234BC8, sub_1000E72E4);
  }
  uint64_t v356 = v475;
  uint64_t v357 = sub_100098D58(v475, (uint64_t)qword_10023DF00);
  uint64_t v358 = v473;
  uint64_t v359 = (uint64_t)v465;
  (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v357, v356);
  v360 = sub_100139314( v359,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
  swift_release(v355);
  (*(void (**)(uint64_t, uint64_t))(v358 + 8))(v359, v356);
  uint64_t v361 = v360[2];
  if (!v361)
  {
LABEL_159:
    swift_bridgeObjectRelease(v360);
    goto LABEL_160;
  }

LABEL_155:
  uint64_t v362 = (uint64_t)v360 + ((*(unsigned __int8 *)(v453 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v453 + 80));
  uint64_t v363 = *(void *)(v453 + 72);
  swift_bridgeObjectRetain(v360);
  do
  {
    sub_100147290(v362, v73);
    v362 += v363;
    --v361;
  }

  while (v361);
  swift_bridgeObjectRelease_n(v360, 2LL);
LABEL_160:
  id v365 = [v342 isFirstUnlocked];
  if ((v365 & 1) == 0)
  {
    uint64_t v376 = static os_log_type_t.error.getter(v365);
    v371 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v376,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v372 = _swiftEmptyArrayStorage[2];
    if (v372) {
      goto LABEL_164;
    }
    goto LABEL_168;
  }

  uint64_t v366 = sub_10013A76C();
  if (qword_100234B70 != -1) {
    swift_once(&qword_100234B70, sub_1000CAF84);
  }
  uint64_t v367 = v475;
  uint64_t v368 = sub_100098D58(v475, (uint64_t)qword_10023DD70);
  uint64_t v369 = v473;
  uint64_t v370 = (uint64_t)v465;
  (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v368, v367);
  v371 = sub_100139314( v370,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
  swift_release(v366);
  (*(void (**)(uint64_t, uint64_t))(v369 + 8))(v370, v367);
  uint64_t v372 = v371[2];
  if (!v372)
  {
LABEL_168:
    swift_bridgeObjectRelease(v371);
    goto LABEL_169;
  }

LABEL_164:
  uint64_t v373 = *(void *)(type metadata accessor for MagicPairingSettingsRecord(0LL) - 8);
  uint64_t v374 = (uint64_t)v371 + ((*(unsigned __int8 *)(v373 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v373 + 80));
  uint64_t v375 = *(void *)(v373 + 72);
  swift_bridgeObjectRetain(v371);
  do
  {
    sub_100147798(v374, v73);
    v374 += v375;
    --v372;
  }

  while (v372);
  swift_bridgeObjectRelease_n(v371, 2LL);
LABEL_169:
  uint64_t v377 = v437;
  sub_10013C84C(v437);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48))(v377, 1LL, v429) == 1)
  {
    sub_100099358(v377, &qword_1002357D0);
  }

  else
  {
    uint64_t v378 = v377;
    v379 = v430;
    sub_1000C998C(v378, (uint64_t)v430, type metadata accessor for SoundProfileRecord);
    v380 = objc_autoreleasePoolPush();
    uint64_t v381 = *v379;
    unint64_t v382 = v379[1];
    sub_1000991CC(*v379, v382);
    sub_100118B60(v381, v382);
    Class v384 = v383;
    sub_100099394(v381, v382);
    uint64_t v385 = (uint64_t)v379;
    uint64_t v386 = (uint64_t)v427;
    sub_1000A7C90(v385, (uint64_t)v427, type metadata accessor for SoundProfileRecord);
    if (!v384) {
      Class v384 = sub_1000A33F4().super.isa;
    }
    sub_1000A7CD4(v386, type metadata accessor for SoundProfileRecord);
    Class v481 = v384;
    uint64_t v387 = (uint64_t)v430;
    sub_1000A7268((id *)&v481);
    objc_autoreleasePoolPop(v380);
    id v388 = -[objc_class recordChangeTag](v384, "recordChangeTag");
    if (v388)
    {

      sub_1000A7CD4(v387, type metadata accessor for SoundProfileRecord);
    }

    else
    {
      uint64_t v389 = static os_log_type_t.default.getter(0LL);
      uint64_t v390 = qword_10023DFC8;
      uint64_t v391 = swift_allocObject(v467, 72LL, 7LL);
      *(_OWORD *)(v391 + swift_unknownObjectWeakDestroy(v0 + 16) = v466;
      uint64_t v392 = sub_1000A52AC();
      uint64_t v394 = v393;
      *(void *)(v391 + 56) = &type metadata for String;
      *(void *)(v391 + 64) = sub_10009914C();
      *(void *)(v391 + 32) = v392;
      *(void *)(v391 + 40) = v394;
      os_log(_:dso:log:_:_:)( v389,  &_mh_execute_header,  v390,  "Retry cloud upload for deferred sound profile record: %@",  56LL,  2LL,  v391);
      swift_bridgeObjectRelease(v391);
      uint64_t v395 = sub_10013B740();
      uint64_t v396 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
      swift_weakInit(v396 + 16, v73);
      swift_retain(v396);
      sub_1001051E0(v384, 0, (uint64_t)sub_100187CF0, v396);

      swift_unknownObjectRelease(v395);
      swift_release(v396);
      sub_1000A7CD4(v387, type metadata accessor for SoundProfileRecord);
      swift_release(v396);
    }
  }

  v482 = &type metadata for AudioAccessoryFeatures;
  unint64_t v483 = sub_10009E740();
  LOBYTE(v481) = 0;
  char v397 = isFeatureEnabled(_:)(&v481);
  sub_10009A498(&v481);
  if ((v397 & 1) == 0) {
    goto LABEL_205;
  }
  uint64_t v398 = (uint64_t)sub_10013CAA0();
  uint64_t v399 = v398;
  if ((unint64_t)v398 >> 62)
  {
    if (v398 < 0) {
      uint64_t v404 = v398;
    }
    else {
      uint64_t v404 = v398 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v398);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v404);
    uint64_t v400 = result;
    if (!result) {
      goto LABEL_192;
    }
LABEL_179:
    if (v400 >= 1)
    {
      uint64_t v401 = 0LL;
      do
      {
        if ((v399 & 0xC000000000000001LL) != 0) {
          v402 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(v401, v399);
        }
        else {
          v402 = (objc_class *)*(id *)(v399 + 8 * v401 + 32);
        }
        v403 = v402;
        ++v401;
        Class v481 = v402;
        sub_100148C3C((void **)&v481, v73);
      }

      while (v400 != v401);
      goto LABEL_192;
    }

    __break(1u);
LABEL_226:
    __break(1u);
LABEL_227:
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
    return result;
  }

  uint64_t v400 = *(void *)((v398 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v398);
  if (v400) {
    goto LABEL_179;
  }
LABEL_192:
  swift_bridgeObjectRelease_n(v399, 2LL);
  uint64_t v405 = (uint64_t)sub_10013CC54();
  uint64_t v406 = v405;
  if ((unint64_t)v405 >> 62)
  {
    if (v405 < 0) {
      uint64_t v411 = v405;
    }
    else {
      uint64_t v411 = v405 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v405);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v411);
    uint64_t v407 = result;
    if (!result) {
      goto LABEL_204;
    }
LABEL_194:
    if (v407 >= 1)
    {
      uint64_t v408 = 0LL;
      do
      {
        if ((v406 & 0xC000000000000001LL) != 0) {
          v409 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(v408, v406);
        }
        else {
          v409 = (objc_class *)*(id *)(v406 + 8 * v408 + 32);
        }
        v410 = v409;
        ++v408;
        Class v481 = v409;
        sub_100149124((void **)&v481, v73);
      }

      while (v407 != v408);
      goto LABEL_204;
    }

    goto LABEL_226;
  }

  uint64_t v407 = *(void *)((v405 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v405);
  if (v407) {
    goto LABEL_194;
  }
LABEL_204:
  swift_bridgeObjectRelease_n(v406, 2LL);
LABEL_205:
  id v412 = [v342 isFirstUnlocked];
  if (!(_DWORD)v412)
  {
    uint64_t v419 = static os_log_type_t.error.getter(v412);
    uint64_t v418 = (uint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v419,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_209;
  }

  uint64_t v413 = sub_10013A76C();
  if (qword_100234BC0 != -1) {
    goto LABEL_224;
  }
  while (1)
  {
    uint64_t v414 = v475;
    uint64_t v415 = sub_100098D58(v475, (uint64_t)qword_10023DE08);
    uint64_t v416 = v473;
    uint64_t v417 = (uint64_t)v465;
    (*(void (**)(char *, uint64_t, uint64_t))(v473 + 16))(v465, v415, v414);
    uint64_t v418 = sub_100138AFC(v417, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
    swift_release(v413);
    (*(void (**)(uint64_t, uint64_t))(v416 + 8))(v417, v414);
LABEL_209:
    if ((unint64_t)v418 >> 62)
    {
      if (v418 < 0) {
        uint64_t v423 = v418;
      }
      else {
        uint64_t v423 = v418 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v418);
      uint64_t v413 = _CocoaArrayWrapper.endIndex.getter(v423);
      if (!v413) {
        goto LABEL_221;
      }
    }

    else
    {
      uint64_t v413 = *(void *)((v418 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v418);
      if (!v413) {
        goto LABEL_221;
      }
    }

    if (v413 >= 1) {
      break;
    }
    __break(1u);
LABEL_224:
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }

  uint64_t v420 = 0LL;
  do
  {
    if ((v418 & 0xC000000000000001LL) != 0) {
      v421 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(v420, v418);
    }
    else {
      v421 = (objc_class *)*(id *)(v418 + 8 * v420 + 32);
    }
    v422 = v421;
    ++v420;
    Class v481 = v421;
    sub_10014960C((void **)&v481, v73);
  }

  while (v413 != v420);
LABEL_221:
  swift_release(v73);
  return swift_bridgeObjectRelease_n(v418, 2LL);
}

uint64_t sub_100140F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v48 - v15;
  if (a1)
  {
    uint64_t v17 = swift_errorRetain(a1);
    uint64_t v18 = static os_log_type_t.error.getter(v17);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v19 = qword_10023DFC8;
    uint64_t v20 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    sub_1000A7C90(a2, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
    uint64_t v22 = String.init<A>(describing:)(v6, v4);
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_10009914C();
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    v50[0] = a1;
    swift_errorRetain(a1);
    uint64_t v26 = sub_100098CD8(&qword_1002357C0);
    uint64_t v27 = String.init<A>(describing:)(v50, v26);
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v25;
    *(void *)(v21 + 72) = v27;
    *(void *)(v21 + 80) = v28;
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "Error removing deferred deleted record: %@ - error? - %@",  56LL,  2LL,  v21);
    swift_bridgeObjectRelease(v21);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v30 = sub_10013A76C();
    uint64_t v48 = UUID.uuidString.getter(v30);
    uint64_t v49 = v31;
    URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      URL.appendingPathComponent(_:)(*(void *)(a2 + 8));
      uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
      uint64_t v33 = v32(v13, v10);
      __chkstk_darwin(v33);
      uint64_t v34 = v48;
      *(&v48 - 4) = v30;
      *(&v48 - 3) = v34;
      uint64_t v48 = a2;
      uint64_t v35 = v49;
      *(&v48 - 2) = v49;
      *(&v48 - 1) = (uint64_t)v16;
      OS_dispatch_queue.sync<A>(execute:)(v50, sub_10018A6A0, &v48 - 6, &type metadata for Bool);
      swift_release(v30);
      swift_bridgeObjectRelease(v35);
      uint64_t v36 = v32(v16, v10);
      uint64_t v37 = static os_log_type_t.default.getter(v36);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v38 = qword_10023DFC8;
      uint64_t v39 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v40 = swift_allocObject(v39, 112LL, 7LL);
      *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
      sub_1000A7C90(v48, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
      uint64_t v41 = String.init<A>(describing:)(v6, v4);
      uint64_t v43 = v42;
      *(void *)(v40 + 56) = &type metadata for String;
      unint64_t v44 = sub_10009914C();
      *(void *)(v40 + 64) = v44;
      *(void *)(v40 + 32) = v41;
      *(void *)(v40 + 40) = v43;
      v50[0] = 0LL;
      uint64_t v45 = sub_100098CD8(&qword_100235840);
      uint64_t v46 = String.init<A>(describing:)(v50, v45);
      *(void *)(v40 + 96) = &type metadata for String;
      *(void *)(v40 + 104) = v44;
      *(void *)(v40 + 72) = v46;
      *(void *)(v40 + 80) = v47;
      os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  v38,  "Running remove deferred deleted record: %@ - error? - %@",  56LL,  2LL,  v40);
      return swift_bridgeObjectRelease(v40);
    }
  }

  return result;
}

uint64_t sub_10014134C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(*a1 + *a3);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = (void *)(a2 + *(int *)(type metadata accessor for BTDeferredRecord(0LL) + 28));
  uint64_t v7 = v6[1];
  if (v4 == *v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v6, v7, 0LL) & 1;
  }
}

void sub_1001413C4(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v50 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v50 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = type metadata accessor for DeviceRecord(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v55 = (id)sub_1000A4FF0();
  id v20 = [v55 recordChangeTag];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v51 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    swift_bridgeObjectRelease(v23);
    sub_1000A7C90(a1, (uint64_t)v19, type metadata accessor for DeviceRecord);
    if (v23)
    {
      uint64_t v50 = a1;
      uint64_t v24 = v16;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v16, &v19[*(int *)(v17 + 48)], v8);
      id v25 = [v55 modificationDate];
      if (v25)
      {
        uint64_t v26 = v25;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        uint64_t v28 = (uint64_t)v53;
        v27(v53, v11, v8);
        uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v29(v28, 0LL, 1LL, v8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v28, 1LL, v8) != 1)
        {
          uint64_t v30 = v52;
          v27(v52, (char *)v28, v8);
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v28 = (uint64_t)v53;
        v29((uint64_t)v53, 1LL, 1LL, v8);
      }

      id v33 = [v55 creationDate];
      if (v33)
      {
        uint64_t v34 = v33;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        uint64_t v36 = (uint64_t)v51;
        v35(v51, v11, v8);
        v29(v36, 0LL, 1LL, v8);
        uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v36, 1LL, v8);
        if ((_DWORD)v37 != 1)
        {
          uint64_t v30 = v52;
          v35(v52, (char *)v36, v8);
LABEL_14:
          sub_100099358(v28, (uint64_t *)&unk_100234E10);
LABEL_15:
          char v38 = static Date.> infix(_:_:)(v24, v30);
          uint64_t v39 = *(void (**)(char *, uint64_t))(v9 + 8);
          v39(v30, v8);
          v39(v24, v8);
          uint64_t v31 = sub_1000A7CD4((uint64_t)v19, type metadata accessor for DeviceRecord);
          id v32 = v55;
          if ((v38 & 1) == 0) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v36 = (uint64_t)v51;
        uint64_t v37 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v51, 1LL, 1LL, v8);
      }

      uint64_t v30 = v52;
      static Date.now.getter(v37);
      sub_100099358(v36, (uint64_t *)&unk_100234E10);
      goto LABEL_14;
    }
  }

  else
  {
    sub_1000A7C90(a1, (uint64_t)v19, type metadata accessor for DeviceRecord);
  }

  uint64_t v31 = sub_1000A7CD4((uint64_t)v19, type metadata accessor for DeviceRecord);
  id v32 = v55;
LABEL_16:
  uint64_t v40 = static os_log_type_t.default.getter(v31);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v41 = qword_10023DFC8;
  uint64_t v42 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
  *(_OWORD *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v44 = sub_100094CA4();
  uint64_t v46 = v45;
  *(void *)(v43 + 56) = &type metadata for String;
  *(void *)(v43 + 64) = sub_10009914C();
  *(void *)(v43 + 32) = v44;
  *(void *)(v43 + 40) = v46;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Retry cloud upload for deferred record: %@", 42LL, 2LL, v43);
  swift_bridgeObjectRelease(v43);
  uint64_t v47 = v54;
  uint64_t v48 = sub_10013B740();
  uint64_t v49 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v49 + 16, v47);
  swift_retain(v49);
  sub_1001051E0(v32, 0, (uint64_t)sub_100188028, v49);
  swift_unknownObjectRelease(v48);
  swift_release_n(v49, 2LL);
LABEL_19:
}

uint64_t sub_1001418AC(char *a1, uint64_t a2, int a3)
{
  int v949 = a3;
  uint64_t v953 = a2;
  uint64_t v5 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v5);
  uint64_t v896 = (uint64_t)&v892 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v905 = (uint64_t)&v892 - v8;
  __chkstk_darwin(v9);
  uint64_t v897 = (uint64_t)&v892 - v10;
  __chkstk_darwin(v11);
  uint64_t v917 = (uint64_t)&v892 - v12;
  uint64_t v925 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  uint64_t v919 = *(void *)(v925 - 8);
  __chkstk_darwin(v925);
  uint64_t v895 = (uint64_t)&v892 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v900 = (uint64_t)&v892 - v15;
  __chkstk_darwin(v16);
  uint64_t v906 = (uint64_t)&v892 - v17;
  __chkstk_darwin(v18);
  id v20 = (char *)&v892 - v19;
  uint64_t v21 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  __chkstk_darwin(v21);
  uint64_t v941 = (uint64_t)&v892 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v943 = (uint64_t)&v892 - v24;
  uint64_t v25 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v25);
  v903 = (char *)&v892 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v907 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v902 = *(void *)(v907 - 8);
  __chkstk_darwin(v907);
  v904 = (char *)&v892 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  v908 = (char *)&v892 - v29;
  __chkstk_darwin(v30);
  v898 = (uint64_t *)((char *)&v892 - v31);
  __chkstk_darwin(v32);
  uint64_t v899 = (uint64_t)&v892 - v33;
  uint64_t v34 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v34);
  v909 = (char *)&v892 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  v913 = (char *)&v892 - v37;
  uint64_t v922 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v915 = *(void *)(v922 - 8);
  __chkstk_darwin(v922);
  uint64_t v912 = (uint64_t)&v892 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39);
  uint64_t v901 = (uint64_t)&v892 - v40;
  __chkstk_darwin(v41);
  uint64_t v914 = (uint64_t)&v892 - v42;
  __chkstk_darwin(v43);
  v910 = (uint64_t *)((char *)&v892 - v44);
  __chkstk_darwin(v45);
  uint64_t v911 = (uint64_t)&v892 - v46;
  uint64_t v47 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v47);
  v927 = (char *)&v892 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v934 = (int *)type metadata accessor for DeviceRecord(0LL);
  uint64_t v926 = *((void *)v934 - 1);
  __chkstk_darwin(v934);
  v929 = (uint64_t *)((char *)&v892 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v50);
  v933 = (uint64_t *)((char *)&v892 - v51);
  __chkstk_darwin(v52);
  v920 = (uint64_t *)((char *)&v892 - v53);
  __chkstk_darwin(v54);
  uint64_t v921 = (uint64_t)&v892 - v55;
  uint64_t v960 = type metadata accessor for Date(0LL);
  uint64_t v56 = *(void **)(v960 - 8);
  __chkstk_darwin(v960);
  v918 = (char *)&v892 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v58);
  v946 = (char *)&v892 - v59;
  __chkstk_darwin(v60);
  v931 = (char *)&v892 - v61;
  __chkstk_darwin(v62);
  v942 = (char *)&v892 - v63;
  __chkstk_darwin(v64);
  v924 = (char *)&v892 - v65;
  __chkstk_darwin(v66);
  v928 = (char *)&v892 - v67;
  __chkstk_darwin(v68);
  v938 = (char *)&v892 - v69;
  __chkstk_darwin(v70);
  v959 = (char *)&v892 - v71;
  uint64_t v72 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v72);
  v932 = (char *)&v892 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v74);
  v954 = (char *)&v892 - v75;
  __chkstk_darwin(v76);
  v930 = (char *)&v892 - v77;
  __chkstk_darwin(v78);
  v950 = (char *)&v892 - v79;
  __chkstk_darwin(v80);
  v951 = (char *)&v892 - v81;
  __chkstk_darwin(v82);
  v947 = (char *)&v892 - v83;
  __chkstk_darwin(v84);
  v923 = (char *)&v892 - v85;
  __chkstk_darwin(v86);
  v939 = (char *)&v892 - v87;
  __chkstk_darwin(v88);
  v937 = (char *)&v892 - v89;
  __chkstk_darwin(v90);
  v935 = (char *)&v892 - v91;
  __chkstk_darwin(v92);
  uint64_t v936 = (uint64_t)&v892 - v93;
  uint64_t v94 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v94);
  v944 = (char *)&v892 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v96);
  v945 = (char *)&v892 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v957 = (char *)type metadata accessor for UUID(0LL);
  uint64_t v956 = *((void *)v957 - 1);
  __chkstk_darwin(v957);
  v952 = (char *)&v892 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v99);
  v940 = (char *)&v892 - v100;
  uint64_t v101 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v102 = *(void *)(v101 - 8);
  __n128 v103 = __chkstk_darwin(v101);
  uint64_t v105 = (void *)((char *)&v892 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v106 = *(void **)(v3 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  *uint64_t v105 = v106;
  uint64_t v107 = *(void (**)(void, void, void, __n128))(v102 + 104);
  v107(v105, enum case for DispatchPredicate.onQueue(_:), v101, v103);
  id v108 = v106;
  LOBYTE(v106) = _dispatchPreconditionTest(_:)(v105);
  uint64_t v109 = *(uint64_t (**)(void, void))(v102 + 8);
  uint64_t v110 = v109(v105, v101);
  if ((v106 & 1) == 0)
  {
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  v916 = v20;
  v958 = v56;
  id v20 = a1;
  id v112 = [a1 encryptedValues];
  NSString v113 = String._bridgeToObjectiveC()();
  id v114 = [v112 objectForKeyedSubscript:v113];
  swift_unknownObjectRelease(v112);

  if (v114
    && (*(void *)&__int128 v973 = v114,
        uint64_t v115 = sub_100098CD8(&qword_100234E40),
        swift_dynamicCast(v976, &v973, v115, &type metadata for String, 6LL)))
  {
    uint64_t v116 = *((void *)&v976[0] + 1);
    uint64_t v966 = *(void *)&v976[0];
  }

  else
  {
    id v117 = [a1 recordID];
    id v118 = [v117 recordName];

    uint64_t v966 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
    uint64_t v116 = v119;
  }

  uint64_t v120 = sub_10013B740();
  uint64_t v121 = *(void **)(v120 + 72);
  *uint64_t v105 = v121;
  ((void (*)(void *, void, uint64_t))v107)(v105, enum case for DispatchPredicate.notOnQueue(_:), v101);
  v121;
  uint64_t v102 = _dispatchPreconditionTest(_:)(v105);
  uint64_t v110 = v109(v105, v101);
  if ((v102 & 1) == 0) {
    goto LABEL_267;
  }
  uint64_t v965 = v116;
  uint64_t v964 = v3;
  OS_dispatch_queue.sync<A>(execute:)(v976, sub_100187764, v120, &type metadata for Bool);
  uint64_t v122 = swift_unknownObjectRelease(v120);
  if (LOBYTE(v976[0]) != 1)
  {
    LODWORD(v963) = static os_log_type_t.error.getter(v122);
    uint64_t v131 = v966;
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v132 = qword_10023DFC8;
    uint64_t v133 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v134 = swift_allocObject(v133, 112LL, 7LL);
    *(_OWORD *)(v134 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    *(void *)(v134 + 56) = &type metadata for String;
    unint64_t v135 = sub_10009914C();
    *(void *)(v134 + 64) = v135;
    uint64_t v136 = v965;
    *(void *)(v134 + 32) = v131;
    *(void *)(v134 + 40) = v136;
    swift_bridgeObjectRetain(v136);
    uint64_t v137 = a1;
    id v138 = [v137 description];
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
    uint64_t v141 = v140;

    *(void *)(v134 + 96) = &type metadata for String;
    *(void *)(v134 + 104) = v135;
    *(void *)(v134 + 72) = v139;
    *(void *)(v134 + 80) = v141;
    uint64_t v142 = v966;
    os_log(_:dso:log:_:_:)( v963,  &_mh_execute_header,  v132,  "Skip processing cloud record - %@, we are no longer signed-into an iCloud Account: %@",  85LL,  2LL,  v134);
    swift_bridgeObjectRelease(v134);
    goto LABEL_221;
  }

  v963 = 0LL;
  uint64_t v123 = static os_log_type_t.default.getter(v122);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v124 = qword_10023DFC8;
  uint64_t v961 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v125 = swift_allocObject(v961, 152LL, 7LL);
  __int128 v892 = xmmword_1001A8EB0;
  *(_OWORD *)(v125 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8EB0;
  id v955 = a1;
  id v126 = [a1 modifiedByDevice];
  if (v126)
  {
    BOOL v127 = v126;
    uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
    unint64_t v130 = v129;
  }

  else
  {
    unint64_t v130 = 0xE200000000000000LL;
    uint64_t v128 = 15932LL;
  }

  *(void *)(v125 + 56) = &type metadata for String;
  unint64_t v143 = sub_10009914C();
  *(void *)(v125 + 32) = v128;
  *(void *)(v125 + 40) = v130;
  *(void *)(v125 + 96) = &type metadata for String;
  *(void *)(v125 + 104) = v143;
  uint64_t v144 = v966;
  *(void *)(v125 + 64) = v143;
  *(void *)(v125 + 72) = v144;
  uint64_t v145 = v965;
  *(void *)(v125 + 80) = v965;
  swift_bridgeObjectRetain(v145);
  id v146 = v955;
  id v147 = [v146 description];
  uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
  uint64_t v150 = v149;

  *(void *)(v125 + 136) = &type metadata for String;
  *(void *)(v125 + 144) = v143;
  unint64_t v962 = v143;
  *(void *)(v125 + 112) = v148;
  *(void *)(v125 + 120) = v150;
  os_log(_:dso:log:_:_:)( v123,  &_mh_execute_header,  v124,  "CloudSync: Process updated cloud record modified by device: [%@] is [%@] %@",  75LL,  2LL,  v125);
  uint64_t v151 = swift_bridgeObjectRelease(v125);
  uint64_t v152 = IsAppleInternalBuild(v151);
  if ((_DWORD)v152) {
    uint64_t v153 = static os_log_type_t.default.getter(v152);
  }
  else {
    uint64_t v153 = static os_log_type_t.debug.getter(v152);
  }
  uint64_t v154 = v153;
  __int128 v155 = v963;
  uint64_t v156 = qword_10023DFC8;
  uint64_t v157 = swift_allocObject(v961, 112LL, 7LL);
  __int128 v948 = xmmword_1001A6F30;
  *(_OWORD *)(v157 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  id v158 = [v146 recordID];
  id v159 = [v158 recordName];

  uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
  uint64_t v162 = v161;

  unint64_t v163 = v962;
  *(void *)(v157 + 56) = &type metadata for String;
  *(void *)(v157 + 64) = v163;
  *(void *)(v157 + 32) = v160;
  *(void *)(v157 + 40) = v162;
  id v164 = [v146 encryptedValues];
  id v165 = [v164 allKeys];
  swift_unknownObjectRelease(v164);
  uint64_t v166 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v165, &type metadata for String);

  uint64_t v167 = (char *)v146;
  uint64_t v168 = sub_100110B98(v166, v167);
  v894 = v155;
  swift_bridgeObjectRelease(v166);

  uint64_t v893 = sub_100098CD8(&qword_100234E40);
  uint64_t v169 = Array.description.getter(v168, v893);
  uint64_t v171 = v170;
  swift_bridgeObjectRelease(v168);
  *(void *)(v157 + 96) = &type metadata for String;
  *(void *)(v157 + 104) = v163;
  *(void *)(v157 + 72) = v169;
  *(void *)(v157 + 80) = v171;
  os_log(_:dso:log:_:_:)(v154, &_mh_execute_header, v156, "Process CKRecord %@ - values: %@", 32LL, 2LL, v157);
  uint64_t v172 = swift_bridgeObjectRelease(v157);
  uint64_t v977 = 0LL;
  memset(v976, 0, sizeof(v976));
  v963 = v167;
  uint64_t v173 = CKRecord.recordType.getter(v172);
  uint64_t v175 = v174;
  uint64_t v176 = v966;
  uint64_t v177 = v965;
  sub_10015BDB0(v966, v965, v173, v174, &v970);
  swift_bridgeObjectRelease(v175);
  if (v971) {
    goto LABEL_20;
  }
  sub_100099358((uint64_t)&v970, (uint64_t *)&unk_100236F78);
  uint64_t v178 = (uint64_t)v945;
  UUID.init(uuidString:)(v176, v177);
  uint64_t v179 = v956;
  uint64_t v180 = v957;
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v956 + 48))(v178, 1LL, v957) == 1)
  {
    uint64_t v181 = sub_100099358(v178, &qword_100234E20);
    uint64_t v182 = (uint64_t)v944;
  }

  else
  {
    uint64_t v183 = (uint64_t)v940;
    uint64_t v184 = (*(uint64_t (**)(char *, uint64_t, char *))(v179 + 32))(v940, v178, v180);
    uint64_t v185 = CKRecord.recordType.getter(v184);
    uint64_t v187 = v186;
    sub_10015A9D0(v183, v185, v186, &v970);
    swift_bridgeObjectRelease(v187);
    (*(void (**)(uint64_t, char *))(v956 + 8))(v183, v957);
    uint64_t v182 = (uint64_t)v944;
    if (v971)
    {
LABEL_20:
      sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
      sub_100187A80(&v970, (uint64_t)&v973);
      sub_100187A80(&v973, (uint64_t)v976);
      goto LABEL_33;
    }

    uint64_t v181 = sub_100099358((uint64_t)&v970, (uint64_t *)&unk_100236F78);
  }

  uint64_t v188 = CKRecord.recordType.getter(v181);
  uint64_t v190 = v189;
  if (v188 == 0xD000000000000012LL && v189 == 0x80000001001CAB80LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAB80LL);
  }

  else
  {
    char v191 = _stringCompareWithSmolCheck(_:_:expecting:)(v188, v189, 0xD000000000000012LL, 0x80000001001CAB80LL, 0LL);
    swift_bridgeObjectRelease(v190);
    if ((v191 & 1) == 0) {
      goto LABEL_33;
    }
  }

  sub_10013C84C(v182);
  uint64_t v192 = type metadata accessor for SoundProfileRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v192 - 8) + 48LL))(v182, 1LL, v192) == 1)
  {
    sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
    sub_100099358(v182, &qword_1002357D0);
    __int128 v973 = 0u;
    __int128 v974 = 0u;
    unint64_t v975 = 0LL;
  }

  else
  {
    *((void *)&v974 + 1) = v192;
    unint64_t v975 = sub_100098C98(&qword_100236E98, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001A718C);
    uint64_t v193 = sub_1000E7194(&v973);
    sub_1000C998C(v182, (uint64_t)v193, type metadata accessor for SoundProfileRecord);
    sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
  }

  sub_1000D8CF8((uint64_t)&v973, (uint64_t)v976, (uint64_t *)&unk_100236F78);
LABEL_33:
  sub_1000A4D5C((uint64_t)v976, (uint64_t)&v970, (uint64_t *)&unk_100236F78);
  if (!v971)
  {
    uint64_t v197 = sub_100099358((uint64_t)&v970, (uint64_t *)&unk_100236F78);
    uint64_t v198 = static os_log_type_t.default.getter(v197);
    uint64_t v199 = qword_10023DFC8;
    uint64_t v200 = swift_allocObject(v961, 112LL, 7LL);
    *(_OWORD *)(v200 + swift_unknownObjectWeakDestroy(v0 + 16) = v948;
    unint64_t v201 = v962;
    *(void *)(v200 + 56) = &type metadata for String;
    *(void *)(v200 + 64) = v201;
    *(void *)(v200 + 32) = v176;
    *(void *)(v200 + 40) = v177;
    swift_bridgeObjectRetain(v177);
    uint64_t v202 = v963;
    id v203 = [v202 description];
    uint64_t v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
    uint64_t v206 = v205;

    *(void *)(v200 + 96) = &type metadata for String;
    *(void *)(v200 + 104) = v201;
    *(void *)(v200 + 72) = v204;
    *(void *)(v200 + 80) = v206;
    os_log(_:dso:log:_:_:)(v198, &_mh_execute_header, v199, "Saving cloud record[%@]: %@", 27LL, 2LL, v200);
    uint64_t v207 = swift_bridgeObjectRelease(v200);
    uint64_t v209 = CKRecord.recordType.getter(v207);
    unint64_t v210 = v208;
    if (v209 == 0x654B72657473614DLL && v208 == 0xE900000000000079LL)
    {
      swift_bridgeObjectRelease(0xE900000000000079LL);
      uint64_t v211 = v966;
      id v20 = (_BYTE *)&unk_10023D000;
      uint64_t v212 = &selRef__inCaseLidClosed_;
      goto LABEL_49;
    }

    id v20 = (char *)&unk_10023D000;
    uint64_t v212 = &selRef__inCaseLidClosed_;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B72657473614DLL, 0xE900000000000079LL, v209, v208, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(v210);
      uint64_t v211 = v966;
LABEL_49:
      uint64_t v260 = v202;
      uint64_t v261 = v941;
      uint64_t v262 = v894;
      uint64_t v263 = sub_1000AAB04(v260, v941);
      if (!v262)
      {
        sub_1001601B0(v261, v949 & 1);
        uint64_t v264 = type metadata accessor for LegacyAccountMagicKeysRecord;
LABEL_51:
        sub_1000A7CD4(v261, v264);
LABEL_209:
        uint64_t v394 = v960;
        uint64_t v414 = v958;
LABEL_210:
        uint64_t v105 = v954;
        goto LABEL_211;
      }

LABEL_208:
      uint64_t v584 = static os_log_type_t.error.getter(v263);
      uint64_t v585 = *((void *)v20 + 505);
      uint64_t v586 = swift_allocObject(v961, 152LL, 7LL);
      *(_OWORD *)(v586 + swift_unknownObjectWeakDestroy(v0 + 16) = v892;
      unint64_t v587 = v962;
      *(void *)(v586 + 56) = &type metadata for String;
      *(void *)(v586 + 64) = v587;
      *(void *)(v586 + 32) = v211;
      uint64_t v588 = v965;
      *(void *)(v586 + 40) = v965;
      swift_bridgeObjectRetain(v588);
      v589 = v202;
      id v590 = [v589 v212[504]];
      uint64_t v591 = static String._unconditionallyBridgeFromObjectiveC(_:)(v590);
      uint64_t v593 = v592;

      *(void *)(v586 + 96) = &type metadata for String;
      *(void *)(v586 + 104) = v587;
      *(void *)(v586 + 72) = v591;
      *(void *)(v586 + 80) = v593;
      *(void *)&__int128 v973 = v262;
      swift_errorRetain(v262);
      uint64_t v594 = sub_100098CD8(&qword_1002357C0);
      uint64_t v595 = String.init<A>(describing:)(&v973, v594);
      *(void *)(v586 + 136) = &type metadata for String;
      *(void *)(v586 + 144) = v587;
      *(void *)(v586 + 112) = v595;
      *(void *)(v586 + 120) = v596;
      os_log(_:dso:log:_:_:)( v584,  &_mh_execute_header,  v585,  "Error local update cloud delete conflict record[%@] %@: %@",  58LL,  2LL,  v586);
      swift_bridgeObjectRelease(v586);
      swift_errorRelease(v262);
      goto LABEL_209;
    }

    uint64_t v211 = v966;
    if (v209 == 0x6552656369766544LL && v210 == 0xEC00000064726F63LL)
    {
      unint64_t v298 = 0xEC00000064726F63LL;
      goto LABEL_115;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, v209, v210, 0LL) & 1) != 0)
    {
      unint64_t v298 = v210;
LABEL_115:
      swift_bridgeObjectRelease(v298);
      uint64_t v415 = v202;
      uint64_t v416 = v929;
      uint64_t v262 = v894;
      sub_100096100(v415, v929);
      if (v262) {
        goto LABEL_208;
      }
      uint64_t v417 = (uint64_t *)((char *)v416 + v934[6]);
      uint64_t v418 = v417[1];
      if (*v417 == 0xD000000000000011LL && v418 == 0x80000001001CCC20LL
        || (uint64_t v263 = _stringCompareWithSmolCheck(_:_:expecting:)( *v417,  v418,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL),  (v263 & 1) != 0))
      {
        LODWORD(v960) = static os_log_type_t.error.getter(v263);
        v963 = (char *)qword_10023DFC8;
        uint64_t v419 = swift_allocObject(v961, 152LL, 7LL);
        sub_1000ADDD4(v419, 3LL);
        v421 = v420;
        unint64_t v422 = v962;
        v420[3] = (uint64_t)&type metadata for String;
        v420[4] = v422;
        uint64_t v136 = v965;
        *uint64_t v420 = v211;
        v420[1] = v136;
        swift_bridgeObjectRetain(v136);
        id v423 = [v415 recordID];
        id v424 = [v423 recordName];

        uint64_t v425 = static String._unconditionallyBridgeFromObjectiveC(_:)(v424);
        uint64_t v427 = v426;

        v421[8] = (uint64_t)&type metadata for String;
        v421[9] = v422;
        v421[5] = v425;
        v421[6] = v427;
        uint64_t v142 = v966;
        uint64_t v429 = CKRecord.recordType.getter(v428);
        v421[13] = (uint64_t)&type metadata for String;
        v421[14] = v422;
        v421[10] = v429;
        v421[11] = v430;
        BTUserTransaction.capture()();
        uint64_t v432 = v431;
        os_log(_:dso:log:_:_:)( v960,  &_mh_execute_header,  v963,  "Dropping saving device record with invalid record identifier: %@: Record ID: %@, Record Type: %@",  96LL,  2LL,  v431);
        swift_bridgeObjectRelease(v432);
        sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
        sub_1000A7CD4((uint64_t)v929, type metadata accessor for DeviceRecord);
        goto LABEL_221;
      }

      uint64_t v511 = v905;
      sub_10013C62C(v905);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v919 + 48))(v511, 1LL, v925) == 1)
      {
        sub_100099358(v511, &qword_1002357D8);
        uint64_t v394 = v960;
        uint64_t v414 = v958;
        goto LABEL_283;
      }

      uint64_t v570 = v900;
      sub_1000C998C(v511, v900, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1000EF00C();
      uint64_t v572 = v571;
      v573 = sub_100122724(v571, (char *)v929, type metadata accessor for DeviceRecord);
      swift_bridgeObjectRelease(v572);
      uint64_t v414 = v958;
      if (!v573)
      {
        sub_1000A7CD4(v570, type metadata accessor for LegacyMagicPairingSettingsRecords);
LABEL_282:
        uint64_t v394 = v960;
        goto LABEL_283;
      }

      id v574 = [v573 name];
      if (v574)
      {
        v575 = v574;
        uint64_t v576 = static String._unconditionallyBridgeFromObjectiveC(_:)(v574);
        uint64_t v578 = v577;

        v579 = (uint64_t *)((char *)v929 + v934[7]);
        uint64_t v580 = v579[1];
        if (v576 == *v579 && v578 == v580)
        {
          swift_bridgeObjectRelease(v578);
LABEL_281:
          sub_1000A7CD4(v570, type metadata accessor for LegacyMagicPairingSettingsRecords);

          goto LABEL_282;
        }

        char v714 = _stringCompareWithSmolCheck(_:_:expecting:)(v576, v578, *v579, v580, 0LL);
        swift_bridgeObjectRelease(v578);
        if ((v714 & 1) != 0) {
          goto LABEL_281;
        }
      }

      uint64_t v716 = v570 + *(int *)(v925 + 28);
      v717 = (char *)v929 + v934[12];
      uint64_t v718 = sub_100098C98( (unint64_t *)&unk_100236F90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v394 = v960;
      uint64_t v719 = dispatch thunk of static Comparable.< infix(_:_:)(v716, v717, v960, v718);
      if ((v719 & 1) == 0)
      {
        LODWORD(v956) = static os_log_type_t.default.getter(v719);
        v957 = (char *)qword_10023DFC8;
        uint64_t v720 = swift_allocObject(v961, 152LL, 7LL);
        sub_1000ADDD4(v720, 3LL);
        v722 = v721;
        unint64_t v723 = v962;
        v721[3] = &type metadata for String;
        v721[4] = v723;
        uint64_t v724 = v965;
        void *v721 = v966;
        v721[1] = v724;
        swift_bridgeObjectRetain(v724);
        v725 = v573;
        id v726 = [v725 description];
        uint64_t v727 = static String._unconditionallyBridgeFromObjectiveC(_:)(v726);
        uint64_t v729 = v728;

        v722[8] = &type metadata for String;
        v722[9] = v723;
        v722[5] = v727;
        v722[6] = v729;
        uint64_t v414 = v958;
        id v20 = (_BYTE *)&unk_10023D000;
        v715 = v929;
        uint64_t v730 = sub_100094CA4();
        v722[13] = &type metadata for String;
        v722[14] = v723;
        v722[10] = v730;
        v722[11] = v731;
        BTUserTransaction.capture()();
        uint64_t v733 = v732;
        uint64_t v394 = v960;
        os_log(_:dso:log:_:_:)( v956,  &_mh_execute_header,  v957,  "Consolidating new device name record[%@]: %@ with %@",  52LL,  2LL,  v732);
        swift_bridgeObjectRelease(v733);
        id v734 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
        swift_bridgeObjectRetain(v418);
        NSString v735 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v418);
        id v736 = [v734 initWithBluetoothAddress:v735];

        id v737 = [v725 name];
        [v736 setNickname:v737];

        sub_100097028(v736);
        sub_1000A7CD4(v900, type metadata accessor for LegacyMagicPairingSettingsRecords);
        goto LABEL_284;
      }

      sub_1000A7CD4(v570, type metadata accessor for LegacyMagicPairingSettingsRecords);

LABEL_283:
      v715 = v929;
LABEL_284:
      sub_10015EA5C((uint64_t)v715, v949 & 1);
      sub_1000A7CD4((uint64_t)v715, type metadata accessor for DeviceRecord);
      goto LABEL_210;
    }

    if (v209 == 0xD00000000000001ELL && v210 == 0x80000001001CABA0LL)
    {
      unint64_t v437 = 0x80000001001CABA0LL;
LABEL_157:
      swift_bridgeObjectRelease(v437);
      v490 = v202;
      uint64_t v261 = v912;
      uint64_t v262 = v894;
      sub_1000E8B5C(v490, v912);
      if (v262) {
        goto LABEL_208;
      }
      v491 = (uint64_t *)(v261 + *(int *)(v922 + 24));
      uint64_t v492 = *v491;
      uint64_t v493 = v491[1];
      if (*v491 != 0xD000000000000011LL || v493 != 0x80000001001CCC20LL)
      {
        uint64_t v492 = _stringCompareWithSmolCheck(_:_:expecting:)(v492, v493, 0xD000000000000011LL, 0x80000001001CCC20LL, 0LL);
        if ((v492 & 1) == 0)
        {
          sub_10015EE64(v261, v949 & 1);
          uint64_t v264 = type metadata accessor for DeviceSupportInformationRecord;
          goto LABEL_51;
        }
      }

      LODWORD(v960) = static os_log_type_t.error.getter(v492);
      v963 = (char *)qword_10023DFC8;
      uint64_t v494 = swift_allocObject(v961, 152LL, 7LL);
      sub_1000ADDD4(v494, 3LL);
      v496 = v495;
      unint64_t v497 = v962;
      v495[3] = (uint64_t)&type metadata for String;
      v495[4] = v497;
      uint64_t v136 = v965;
      uint64_t *v495 = v211;
      v495[1] = v136;
      swift_bridgeObjectRetain(v136);
      id v498 = [v490 recordID];
      id v499 = [v498 recordName];

      uint64_t v500 = static String._unconditionallyBridgeFromObjectiveC(_:)(v499);
      uint64_t v502 = v501;

      v496[8] = (uint64_t)&type metadata for String;
      v496[9] = v497;
      v496[5] = v500;
      v496[6] = v502;
      uint64_t v142 = v966;
      uint64_t v504 = CKRecord.recordType.getter(v503);
      v496[13] = (uint64_t)&type metadata for String;
      v496[14] = v497;
      v496[10] = v504;
      v496[11] = v505;
      BTUserTransaction.capture()();
      uint64_t v507 = v506;
      os_log(_:dso:log:_:_:)( v960,  &_mh_execute_header,  v963,  "Dropping saving device record with invalid record identifier: %@: Record ID: %@, Record Type: %@",  96LL,  2LL,  v506);
      swift_bridgeObjectRelease(v507);
      sub_1000A7CD4(v261, type metadata accessor for DeviceSupportInformationRecord);
      sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
LABEL_221:
      uint64_t v460 = v964;
      goto LABEL_222;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, v209, v210, 0LL) & 1) != 0)
    {
      unint64_t v437 = v210;
      goto LABEL_157;
    }

    if (v209 == 0x746553636967614DLL && v210 == 0xED000073676E6974LL)
    {
      swift_bridgeObjectRelease(0xED000073676E6974LL);
      uint64_t v394 = v960;
      uint64_t v414 = v958;
      uint64_t v105 = v954;
      goto LABEL_206;
    }

    char v581 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, v209, v210, 0LL);
    uint64_t v394 = v960;
    uint64_t v414 = v958;
    uint64_t v105 = v954;
    if ((v581 & 1) != 0)
    {
      swift_bridgeObjectRelease(v210);
LABEL_206:
      v582 = v202;
      v583 = v904;
      uint64_t v262 = v894;
      sub_1000CDB38(v582, (uint64_t)v904);
      if (v262)
      {
LABEL_207:
        uint64_t v212 = &selRef__inCaseLidClosed_;
        goto LABEL_208;
      }

      v640 = (uint64_t *)&v583[*(int *)(v907 + 24)];
      uint64_t v641 = *v640;
      uint64_t v642 = v640[1];
      if (*v640 == 0xD000000000000011LL && v642 == 0x80000001001CCC20LL
        || (uint64_t v641 = _stringCompareWithSmolCheck(_:_:expecting:)( v641,  v642,  0xD000000000000011LL,  0x80000001001CCC20LL,  0LL),  (v641 & 1) != 0))
      {
        uint64_t v643 = static os_log_type_t.error.getter(v641);
        v963 = (char *)qword_10023DFC8;
        uint64_t v644 = swift_allocObject(v961, 152LL, 7LL);
        sub_1000ADDD4(v644, 3LL);
        v646 = v645;
        unint64_t v647 = v962;
        v645[3] = (uint64_t)&type metadata for String;
        v645[4] = v647;
        uint64_t v136 = v965;
        uint64_t *v645 = v211;
        v645[1] = v136;
        swift_bridgeObjectRetain(v136);
        id v648 = [v582 recordID];
        id v649 = [v648 recordName];

        uint64_t v650 = static String._unconditionallyBridgeFromObjectiveC(_:)(v649);
        uint64_t v652 = v651;

        v646[8] = (uint64_t)&type metadata for String;
        v646[9] = v647;
        v646[5] = v650;
        v646[6] = v652;
        uint64_t v142 = v966;
        uint64_t v654 = CKRecord.recordType.getter(v653);
        v646[13] = (uint64_t)&type metadata for String;
        v646[14] = v647;
        v646[10] = v654;
        v646[11] = v655;
        BTUserTransaction.capture()();
        uint64_t v657 = v656;
        os_log(_:dso:log:_:_:)( v643,  &_mh_execute_header,  v963,  "Dropping saving device record with invalid record identifier: %@: Record ID: %@, Record Type: %@",  96LL,  2LL,  v656);
        swift_bridgeObjectRelease(v657);
        sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
        sub_1000A7CD4((uint64_t)v904, type metadata accessor for MagicPairingSettingsRecord);
        goto LABEL_221;
      }

      uint64_t v746 = v896;
      sub_10013C62C(v896);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v919 + 48))(v746, 1LL, v925) == 1)
      {
        sub_100099358(v746, &qword_1002357D8);
      }

      else
      {
        uint64_t v781 = v895;
        sub_1000C998C(v746, v895, type metadata accessor for LegacyMagicPairingSettingsRecords);
        sub_1000EF00C();
        uint64_t v783 = v782;
        v784 = sub_100122724(v782, v904, type metadata accessor for MagicPairingSettingsRecord);
        swift_bridgeObjectRelease(v783);
        if (v784)
        {
          uint64_t v785 = v781 + *(int *)(v925 + 28);
          v786 = &v904[*(int *)(v907 + 120)];
          uint64_t v787 = sub_100098C98( (unint64_t *)&unk_100236F90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v788 = dispatch thunk of static Comparable.< infix(_:_:)(v785, v786, v394, v787);
          uint64_t v789 = v781;
          if ((v788 & 1) == 0)
          {
            LODWORD(v956) = static os_log_type_t.default.getter(v788);
            v957 = (char *)qword_10023DFC8;
            uint64_t v818 = swift_allocObject(v961, 152LL, 7LL);
            sub_1000ADDD4(v818, 3LL);
            v820 = v819;
            unint64_t v821 = v962;
            v819[3] = &type metadata for String;
            v819[4] = v821;
            uint64_t v822 = v965;
            void *v819 = v966;
            v819[1] = v822;
            swift_bridgeObjectRetain(v822);
            v823 = v582;
            id v824 = [v823 description];
            uint64_t v825 = static String._unconditionallyBridgeFromObjectiveC(_:)(v824);
            uint64_t v827 = v826;

            v820[8] = &type metadata for String;
            v820[9] = v821;
            v820[5] = v825;
            v820[6] = v827;
            v828 = v784;
            id v829 = [v828 description];
            uint64_t v830 = static String._unconditionallyBridgeFromObjectiveC(_:)(v829);
            uint64_t v832 = v831;

            v820[13] = &type metadata for String;
            v820[14] = v821;
            id v20 = (_BYTE *)&unk_10023D000;
            v820[10] = v830;
            v820[11] = v832;
            BTUserTransaction.capture()();
            uint64_t v834 = v833;
            os_log(_:dso:log:_:_:)( v956,  &_mh_execute_header,  v957,  "Consolidating record[%@]: %@ with %@",  36LL,  2LL,  v833);
            swift_bridgeObjectRelease(v834);
            v817 = v904;
            sub_1000CFEA4(v828);

            sub_1000A7CD4(v789, type metadata accessor for LegacyMagicPairingSettingsRecords);
            uint64_t v394 = v960;
            uint64_t v414 = v958;
            uint64_t v105 = v954;
            goto LABEL_347;
          }

          sub_1000A7CD4(v781, type metadata accessor for LegacyMagicPairingSettingsRecords);

          uint64_t v394 = v960;
          uint64_t v414 = v958;
          uint64_t v105 = v954;
        }

        else
        {
          sub_1000A7CD4(v781, type metadata accessor for LegacyMagicPairingSettingsRecords);
        }
      }

      v817 = v904;
LABEL_347:
      sub_10015F268((uint64_t)v817, v949 & 1);
      sub_1000A7CD4((uint64_t)v817, type metadata accessor for MagicPairingSettingsRecord);
LABEL_211:
      id v597 = [v963 creationDate];
      if (v597)
      {
        v598 = v597;
        v599 = v959;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v597);

        v600 = (void (*)(void, void, void))v414[4];
        v600(v105, v599, v394);
        v601 = (void (*)(void, void, void, void))v414[7];
        v601(v105, 0LL, 1LL, v394);
        v602 = (uint64_t (*)(void, void, void))v414[6];
        int v603 = v602(v105, 1LL, v394);
        uint64_t v142 = v966;
        if (v603 != 1)
        {
          v604 = v946;
          v600(v946, v105, v394);
          if ((v949 & 1) != 0)
          {
            id v605 = [v963 modificationDate];
            if (v605)
            {
              v606 = v605;
              v607 = v959;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v605);

              uint64_t v608 = (uint64_t)v932;
              v600(v932, v607, v394);
              v601(v608, 0LL, 1LL, v394);
              if (v602(v608, 1LL, v394) != 1)
              {
                uint64_t v609 = (uint64_t)v918;
                v600(v918, v608, v394);
                uint64_t v610 = sub_100098C98( (unint64_t *)&unk_100236840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                uint64_t v611 = (uint64_t)v946;
                if ((dispatch thunk of static Equatable.== infix(_:_:)(v609, v946, v394, v610) & 1) == 0)
                {
                  sub_10018777C((uint64_t)v963, 0, v611, v609, 0LL);
                  uint64_t v628 = v611;
                  v626 = (void (*)(void, void))v414[1];
                  v626(v609, v394);
                  uint64_t v627 = v628;
                  goto LABEL_227;
                }

                uint64_t v612 = ((uint64_t (*)(uint64_t, uint64_t))v414[1])(v609, v394);
LABEL_226:
                uint64_t v624 = (uint64_t)v959;
                static Date.now.getter(v612);
                sub_10018777C((uint64_t)v963, 1, v611, v624, 0LL);
                uint64_t v625 = v611;
                v626 = (void (*)(void, void))v414[1];
                v626(v624, v394);
                uint64_t v627 = v625;
LABEL_227:
                uint64_t v613 = ((uint64_t (*)(uint64_t, uint64_t))v626)(v627, v394);
                goto LABEL_220;
              }
            }

            else
            {
              uint64_t v608 = (uint64_t)v932;
              v601(v932, 1LL, 1LL, v394);
            }

            uint64_t v612 = sub_100099358(v608, (uint64_t *)&unk_100234E10);
            uint64_t v611 = (uint64_t)v946;
            goto LABEL_226;
          }

          uint64_t v613 = ((uint64_t (*)(char *, uint64_t))v414[1])(v604, v394);
LABEL_220:
          uint64_t v614 = static os_log_type_t.default.getter(v613);
          uint64_t v615 = *((void *)v20 + 505);
          uint64_t v616 = swift_allocObject(v961, 72LL, 7LL);
          *(_OWORD *)(v616 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
          uint64_t v617 = v953;
          swift_bridgeObjectRetain(v953);
          uint64_t v618 = sub_100098CD8((uint64_t *)&unk_100236F80);
          uint64_t v619 = Array.description.getter(v617, v618);
          uint64_t v621 = v620;
          swift_bridgeObjectRelease(v617);
          unint64_t v622 = v962;
          *(void *)(v616 + 56) = &type metadata for String;
          *(void *)(v616 + 64) = v622;
          *(void *)(v616 + 32) = v619;
          *(void *)(v616 + 40) = v621;
          os_log(_:dso:log:_:_:)(v614, &_mh_execute_header, v615, "Dropping outdated records: %@", 29LL, 2LL, v616);
          swift_bridgeObjectRelease(v616);
          sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
          uint64_t v136 = v965;
          goto LABEL_221;
        }
      }

      else
      {
        ((void (*)(void *, uint64_t, uint64_t, uint64_t))v414[7])(v105, 1LL, 1LL, v394);
        uint64_t v142 = v966;
      }

      uint64_t v613 = sub_100099358((uint64_t)v105, (uint64_t *)&unk_100234E10);
      goto LABEL_220;
    }

    if (v209 == 0xD000000000000012LL && v210 == 0x80000001001CAB80LL)
    {
      unint64_t v658 = 0x80000001001CAB80LL;
LABEL_279:
      swift_bridgeObjectRelease(v658);
      sub_100147E1C((uint64_t)v202, v949 & 1);
      goto LABEL_211;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001001CAB80LL, v209, v210, 0LL) & 1) != 0)
    {
      unint64_t v658 = v210;
      goto LABEL_279;
    }

    if (v209 == 0x6563697665444141LL && v210 == 0xEE0064726F636552LL)
    {
      unint64_t v747 = 0xEE0064726F636552LL;
    }

    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141LL, 0xEE0064726F636552LL, v209, v210, 0LL) & 1) == 0)
      {
        uint64_t v809 = v209;
        if (v209 != 0xD000000000000011LL || (unint64_t v810 = 0x80000001001D2A80LL, v210 != 0x80000001001D2A80LL))
        {
          uint64_t v811 = v209;
          unint64_t v812 = v210;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001D2A80LL, v811, v210, 0LL) & 1) == 0)
          {
            if (v809 == 0xD000000000000013LL && v210 == 0x80000001001CB4E0LL)
            {
              swift_bridgeObjectRelease(0x80000001001CB4E0LL);
            }

            else
            {
              char v859 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000013LL,  0x80000001001CB4E0LL,  v809,  v210,  0LL);
              uint64_t v860 = swift_bridgeObjectRelease(v812);
              if ((v859 & 1) == 0)
              {
                uint64_t v878 = static os_log_type_t.error.getter(v860);
                uint64_t v879 = qword_10023DFC8;
                uint64_t v880 = swift_allocObject(v961, 112LL, 7LL);
                sub_1000ADDD4(v880, 2LL);
                v882 = v881;
                unint64_t v883 = v962;
                v881[3] = &type metadata for String;
                v881[4] = v883;
                uint64_t v884 = v965;
                void *v881 = v966;
                v881[1] = v884;
                swift_bridgeObjectRetain(v884);
                v885 = v202;
                id v886 = [v885 description];
                uint64_t v887 = static String._unconditionallyBridgeFromObjectiveC(_:)(v886);
                uint64_t v889 = v888;

                v882[8] = &type metadata for String;
                v882[9] = v883;
                id v20 = (_BYTE *)&unk_10023D000;
                v882[5] = v887;
                v882[6] = v889;
                BTUserTransaction.capture()();
                uint64_t v891 = v890;
                os_log(_:dso:log:_:_:)( v878,  &_mh_execute_header,  v879,  "No valid record found[%@]: %@",  29LL,  2LL,  v890);
                swift_bridgeObjectRelease(v891);
                goto LABEL_209;
              }
            }

            goto LABEL_368;
          }

          unint64_t v810 = v210;
        }

        swift_bridgeObjectRelease(v810);
LABEL_342:
        *((void *)&v974 + 1) = &type metadata for AudioAccessoryFeatures;
        unint64_t v975 = sub_10009E740();
        LOBYTE(v973) = 0;
        char v813 = isFeatureEnabled(_:)(&v973);
        sub_10009A498(&v973);
        if ((v813 & 1) != 0)
        {
          id v814 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0LL));
          v815 = v202;
          uint64_t v262 = v894;
          uint64_t v263 = (uint64_t)sub_1000A0344(v815);
          if (!v262)
          {
            v816 = (void *)v263;
            sub_10015FA38((void *)v263, v949 & 1);

            goto LABEL_209;
          }

          goto LABEL_369;
        }

LABEL_368:
        id v861 = objc_allocWithZone((Class)type metadata accessor for HMDeviceCloudRecord(0LL));
        v862 = v202;
        uint64_t v262 = v894;
        uint64_t v263 = (uint64_t)sub_1000DEA18(v862);
        if (!v262)
        {
          v863 = (void *)v263;
          sub_10015FDF4((void *)v263, v949 & 1);

          goto LABEL_209;
        }

LABEL_369:
        uint64_t v211 = v966;
        goto LABEL_207;
      }

      unint64_t v747 = v210;
    }

    swift_bridgeObjectRelease(v747);
    *((void *)&v974 + 1) = &type metadata for AudioAccessoryFeatures;
    unint64_t v975 = sub_10009E740();
    LOBYTE(v973) = 0;
    char v790 = isFeatureEnabled(_:)(&v973);
    sub_10009A498(&v973);
    if ((v790 & 1) != 0)
    {
      id v791 = objc_allocWithZone((Class)type metadata accessor for AADeviceRecord(0LL));
      v792 = v202;
      uint64_t v262 = v894;
      uint64_t v263 = (uint64_t)sub_100114B2C(v792);
      if (!v262)
      {
        v793 = (void *)v263;
        sub_10015F674((void *)v263, v949 & 1);

        goto LABEL_209;
      }

      goto LABEL_369;
    }

    goto LABEL_342;
  }

  uint64_t v194 = sub_100187A80(&v970, (uint64_t)&v973);
  uint64_t v195 = IsAppleInternalBuild(v194);
  if ((_DWORD)v195) {
    int v196 = static os_log_type_t.default.getter(v195);
  }
  else {
    int v196 = static os_log_type_t.debug.getter(v195);
  }
  LODWORD(v945) = v196;
  uint64_t v213 = qword_10023DFC8;
  uint64_t v214 = swift_allocObject(v961, 112LL, 7LL);
  *(_OWORD *)(v214 + swift_unknownObjectWeakDestroy(v0 + 16) = v948;
  uint64_t v215 = *((void *)&v974 + 1);
  unint64_t v216 = v975;
  sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
  BOOL v217 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v216 + 56))(v215, v216);
  id v218 = [v217 recordID];

  id v219 = [v218 recordName];
  uint64_t v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v219);
  uint64_t v222 = v221;

  unint64_t v223 = v962;
  *(void *)(v214 + 56) = &type metadata for String;
  *(void *)(v214 + 64) = v223;
  *(void *)(v214 + 32) = v220;
  *(void *)(v214 + 40) = v222;
  uint64_t v224 = *((void *)&v974 + 1);
  unint64_t v225 = v975;
  sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
  id v226 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v225 + 56))(v224, v225);
  id v227 = [v226 encryptedValues];

  id v228 = [v227 allKeys];
  swift_unknownObjectRelease(v227);
  uint64_t v229 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v228, &type metadata for String);

  __chkstk_darwin(v230);
  *((void *)&v892 - 2) = &v973;
  uint64_t v231 = v894;
  uint64_t v232 = sub_1000F2FB0((void (*)(uint64_t *__return_ptr, void *))sub_100187A98, (uint64_t)(&v892 - 2), v229);
  v944 = v231;
  swift_bridgeObjectRelease(v229);
  uint64_t v233 = Array.description.getter(v232, v893);
  uint64_t v235 = v234;
  swift_bridgeObjectRelease(v232);
  *(void *)(v214 + 96) = &type metadata for String;
  *(void *)(v214 + 104) = v223;
  *(void *)(v214 + 72) = v233;
  *(void *)(v214 + 80) = v235;
  os_log(_:dso:log:_:_:)( v945,  &_mh_execute_header,  v213,  "Cached CKRecord %@ - values: %@",  31LL,  2LL,  v214);
  swift_bridgeObjectRelease(v214);
  uint64_t v236 = *((void *)&v974 + 1);
  unint64_t v237 = v975;
  sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
  uint64_t v238 = v952;
  uint64_t v239 = (*(uint64_t (**)(uint64_t))(*(void *)(v237 + 8) + 32LL))(v236);
  uint64_t v240 = UUID.uuidString.getter(v239);
  uint64_t v242 = v241;
  (*(void (**)(char *, char *))(v956 + 8))(v238, v957);
  id v243 = [v963 recordID];
  id v244 = [v243 recordName];

  uint64_t v245 = static String._unconditionallyBridgeFromObjectiveC(_:)(v244);
  uint64_t v247 = v246;

  if (v240 == v245 && v242 == v247)
  {
    swift_bridgeObjectRelease_n(v242, 2LL);
    uint64_t v248 = v960;
    uint64_t v249 = v958;
    uint64_t v250 = (uint64_t)v951;
    uint64_t v251 = (uint64_t)v950;
    goto LABEL_44;
  }

  char v252 = _stringCompareWithSmolCheck(_:_:expecting:)(v240, v242, v245, v247, 0LL);
  swift_bridgeObjectRelease(v242);
  swift_bridgeObjectRelease(v247);
  uint64_t v248 = v960;
  uint64_t v249 = v958;
  uint64_t v250 = (uint64_t)v951;
  uint64_t v251 = (uint64_t)v950;
  if ((v252 & 1) != 0)
  {
LABEL_44:
    id v253 = [v963 modificationDate];
    uint64_t v142 = v966;
    if (v253)
    {
      uint64_t v254 = v253;
      uint64_t v255 = v959;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v253);

      uint64_t v256 = (void (*)(void, void, void))v249[4];
      v256(v250, v255, v248);
      uint64_t v257 = (char *)v249[7];
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v257)(v250, 0LL, 1LL, v248);
      id v258 = (void *)v249[6];
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v258)(v250, 1LL, v248) != 1)
      {
        uint64_t v259 = (uint64_t)v947;
        v256(v947, v250, v248);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v257)(v259, 0LL, 1LL, v248);
        goto LABEL_59;
      }
    }

    else
    {
      uint64_t v257 = (char *)v249[7];
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v257)(v250, 1LL, 1LL, v248);
    }

    uint64_t v259 = (uint64_t)v947;
    id v265 = [v963 creationDate];
    if (v265)
    {
      uint64_t v266 = v265;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v265);

      uint64_t v267 = 0LL;
    }

    else
    {
      uint64_t v267 = 1LL;
    }

    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v257)(v251, v267, 1LL, v248);
    sub_1000D8CF8(v251, v259, (uint64_t *)&unk_100234E10);
    sub_100099358(v250, (uint64_t *)&unk_100234E10);
    id v258 = (void *)v249[6];
LABEL_59:
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v258)(v259, 1LL, v248) == 1)
    {
      uint64_t v272 = sub_100099358(v259, (uint64_t *)&unk_100234E10);
LABEL_66:
      v297 = &selRef__inCaseLidClosed_;
LABEL_95:
      uint64_t v375 = static os_log_type_t.default.getter(v272);
      uint64_t v376 = qword_10023DFC8;
      uint64_t v377 = swift_allocObject(v961, 112LL, 7LL);
      *(_OWORD *)(v377 + swift_unknownObjectWeakDestroy(v0 + 16) = v948;
      unint64_t v378 = v962;
      *(void *)(v377 + 56) = &type metadata for String;
      *(void *)(v377 + 64) = v378;
      *(void *)(v377 + 32) = v142;
      uint64_t v379 = v965;
      *(void *)(v377 + 40) = v965;
      swift_bridgeObjectRetain(v379);
      v380 = v963;
      id v381 = [v380 v297[504]];
      uint64_t v382 = static String._unconditionallyBridgeFromObjectiveC(_:)(v381);
      uint64_t v384 = v383;

      *(void *)(v377 + 96) = &type metadata for String;
      *(void *)(v377 + 104) = v378;
      *(void *)(v377 + 72) = v382;
      *(void *)(v377 + 80) = v384;
      os_log(_:dso:log:_:_:)(v375, &_mh_execute_header, v376, "Updating cloud record[%@]: %@", 29LL, 2LL, v377);
      uint64_t v385 = swift_bridgeObjectRelease(v377);
      v957 = v380;
      uint64_t v102 = CKRecord.recordType.getter(v385);
      uint64_t v101 = v386;
      if (v102 == 0x654B72657473614DLL && v386 == 0xE900000000000079LL)
      {
        swift_bridgeObjectRelease(0xE900000000000079LL);
        uint64_t v387 = v966;
        id v20 = (_BYTE *)&unk_10023D000;
        id v388 = v957;
        goto LABEL_100;
      }

      char v389 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654B72657473614DLL, 0xE900000000000079LL, v102, v386, 0LL);
      uint64_t v387 = v966;
      id v20 = (char *)&unk_10023D000;
      id v388 = v957;
      if ((v389 & 1) != 0)
      {
        swift_bridgeObjectRelease(v101);
LABEL_100:
        uint64_t v390 = v388;
        uint64_t v391 = v943;
        uint64_t v392 = v944;
        uint64_t v393 = (void *)sub_1000AAB04(v390, v943);
        if (!v392)
        {
          sub_1001601B0(v391, v949 & 1);
          sub_1000A7CD4(v391, type metadata accessor for LegacyAccountMagicKeysRecord);
          uint64_t v394 = v960;
LABEL_111:
          uint64_t v414 = v958;
          uint64_t v105 = v954;
LABEL_112:
          sub_10009A498(&v973);
          goto LABEL_211;
        }

        goto LABEL_108;
      }

      if (v102 == 0x6552656369766544LL && v101 == 0xEC00000064726F63LL)
      {
        swift_bridgeObjectRelease(0xEC00000064726F63LL);
        uint64_t v105 = v954;
        uint64_t v395 = v933;
        goto LABEL_107;
      }

      char v396 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, v102, v101, 0LL);
      uint64_t v105 = v954;
      uint64_t v395 = v933;
      if ((v396 & 1) != 0)
      {
        swift_bridgeObjectRelease(v101);
LABEL_107:
        char v397 = v388;
        uint64_t v392 = v944;
        sub_100096100(v397, v395);
        if (v392)
        {
LABEL_108:
          uint64_t v398 = v965;
LABEL_109:
          uint64_t v399 = static os_log_type_t.error.getter(v393);
          v957 = (char *)*((void *)v20 + 505);
          uint64_t v400 = swift_allocObject(v961, 152LL, 7LL);
          sub_1000ADDD4(v400, 3LL);
          v402 = v401;
          unint64_t v403 = v962;
          v401[3] = (uint64_t)&type metadata for String;
          v401[4] = v403;
          *uint64_t v401 = v387;
          v401[1] = v398;
          swift_bridgeObjectRetain(v398);
          uint64_t v404 = v388;
          id v405 = [v404 description];
          uint64_t v406 = static String._unconditionallyBridgeFromObjectiveC(_:)(v405);
          uint64_t v408 = v407;

          v402[8] = (uint64_t)&type metadata for String;
          v402[9] = v403;
          v402[5] = v406;
          v402[6] = v408;
          id v20 = (_BYTE *)&unk_10023D000;
          *(void *)&__int128 v970 = v392;
          swift_errorRetain(v392);
          uint64_t v409 = sub_100098CD8(&qword_1002357C0);
          uint64_t v410 = String.init<A>(describing:)(&v970, v409);
          v402[13] = (uint64_t)&type metadata for String;
          v402[14] = v403;
          v402[10] = v410;
          v402[11] = v411;
          BTUserTransaction.capture()();
          uint64_t v413 = v412;
          os_log(_:dso:log:_:_:)( v399,  &_mh_execute_header,  v957,  "Error updating stale cloud record[%@] %@: %@",  44LL,  2LL,  v412);
          swift_bridgeObjectRelease(v413);
          swift_errorRelease(v392);
LABEL_110:
          uint64_t v394 = v960;
          goto LABEL_111;
        }

        uint64_t v434 = v917;
        sub_10013C62C(v917);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v919 + 48))(v434, 1LL, v925) == 1)
        {
          sub_100099358(v434, &qword_1002357D8);
          uint64_t v394 = v960;
          uint64_t v414 = v958;
LABEL_256:
          sub_10015EA5C((uint64_t)v395, v949 & 1);
          sub_1000A7CD4((uint64_t)v395, type metadata accessor for DeviceRecord);
          goto LABEL_112;
        }

        uint64_t v461 = (uint64_t)v916;
        sub_1000C998C(v434, (uint64_t)v916, type metadata accessor for LegacyMagicPairingSettingsRecords);
        sub_1000EF00C();
        uint64_t v463 = v462;
        uint64_t v464 = sub_100122724(v462, (char *)v395, type metadata accessor for DeviceRecord);
        swift_bridgeObjectRelease(v463);
        uint64_t v394 = v960;
        unint64_t v465 = v962;
        uint64_t v414 = v958;
        if (!v464)
        {
          sub_1000A7CD4(v461, type metadata accessor for LegacyMagicPairingSettingsRecords);
LABEL_255:
          uint64_t v105 = v954;
          goto LABEL_256;
        }

        id v466 = [v464 name];
        if (v466)
        {
          uint64_t v467 = v466;
          uint64_t v468 = static String._unconditionallyBridgeFromObjectiveC(_:)(v466);
          uint64_t v470 = v469;

          v471 = (uint64_t *)((char *)v395 + v934[7]);
          uint64_t v472 = v471[1];
          if (v468 == *v471 && v470 == v472)
          {
            swift_bridgeObjectRelease(v470);
LABEL_189:
            sub_1000A7CD4((uint64_t)v916, type metadata accessor for LegacyMagicPairingSettingsRecords);

            goto LABEL_255;
          }

          char v522 = _stringCompareWithSmolCheck(_:_:expecting:)(v468, v470, *v471, v472, 0LL);
          swift_bridgeObjectRelease(v470);
          if ((v522 & 1) != 0) {
            goto LABEL_189;
          }
        }

        v523 = (char **)((char *)v395 + v934[6]);
        v524 = *v523;
        v525 = v523[1];
        id v526 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
        swift_bridgeObjectRetain(v525);
        v950 = v524;
        NSString v527 = String._bridgeToObjectiveC()();
        v951 = v525;
        swift_bridgeObjectRelease(v525);
        v957 = (char *)[v526 initWithBluetoothAddress:v527];

        LODWORD(v952) = static os_log_type_t.default.getter(v528);
        uint64_t v956 = qword_10023DFC8;
        uint64_t v529 = swift_allocObject(v961, 152LL, 7LL);
        sub_1000ADDD4(v529, 3LL);
        v531 = v530;
        v530[3] = &type metadata for String;
        v530[4] = v465;
        uint64_t v532 = v965;
        void *v530 = v966;
        v530[1] = v532;
        swift_bridgeObjectRetain(v532);
        v533 = v464;
        id v534 = [v533 description];
        uint64_t v535 = static String._unconditionallyBridgeFromObjectiveC(_:)(v534);
        unint64_t v536 = v465;
        uint64_t v538 = v537;

        v531[8] = &type metadata for String;
        v531[9] = v536;
        v531[5] = v535;
        v531[6] = v538;
        uint64_t v539 = sub_100094CA4();
        v531[13] = &type metadata for String;
        v531[14] = v536;
        v531[10] = v539;
        v531[11] = v540;
        v541 = v934;
        BTUserTransaction.capture()();
        uint64_t v543 = v542;
        uint64_t v395 = v933;
        os_log(_:dso:log:_:_:)( v952,  &_mh_execute_header,  v956,  "Consolidating device name record[%@]: %@ with %@",  48LL,  2LL,  v542);
        swift_bridgeObjectRelease(v543);
        v544 = &v916[*(int *)(v925 + 28)];
        v545 = (char *)v395 + v541[12];
        uint64_t v546 = sub_100098C98( (unint64_t *)&unk_100236F90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.< infix(_:_:)(v544, v545, v394, v546) & 1) == 0)
        {
          id v629 = [v533 name];
          [v957 setNickname:v629];

          LODWORD(v956) = static os_log_type_t.default.getter(v630);
          id v20 = (char *)&unk_10023D000;
          v952 = (char *)qword_10023DFC8;
          uint64_t v631 = swift_allocObject(v961, 152LL, 7LL);
          sub_1000ADDD4(v631, 3LL);
          v633 = v632;
          v632[3] = &type metadata for String;
          v632[4] = v536;
          void *v632 = v966;
          v632[1] = v532;
          swift_bridgeObjectRetain(v532);
          id v634 = [v533 name];
          if (v634)
          {
            v635 = v634;
            uint64_t v636 = static String._unconditionallyBridgeFromObjectiveC(_:)(v634);
            uint64_t v638 = v637;
          }

          else
          {
            uint64_t v636 = 0LL;
            uint64_t v638 = 0LL;
          }

          uint64_t v414 = v958;
          *(void *)&__int128 v970 = v636;
          *((void *)&v970 + 1) = v638;
          uint64_t v667 = sub_100098CD8((uint64_t *)&unk_100236640);
          uint64_t v668 = String.init<A>(describing:)(&v970, v667);
          unint64_t v669 = v962;
          v633[8] = &type metadata for String;
          v633[9] = v669;
          v633[5] = v668;
          v633[6] = v670;
          v671 = v933;
          v672 = (char *)v933 + v934[7];
          uint64_t v673 = *(void *)v672;
          uint64_t v674 = *((void *)v672 + 1);
          v633[13] = &type metadata for String;
          v633[14] = v669;
          v633[10] = v673;
          v633[11] = v674;
          BTUserTransaction.capture()();
          uint64_t v676 = v675;
          uint64_t v677 = v674;
          uint64_t v395 = v671;
          swift_bridgeObjectRetain(v677);
          os_log(_:dso:log:_:_:)( v956,  &_mh_execute_header,  v952,  "Replacing with latest name record[%@]: %@ with %@",  49LL,  2LL,  v676);
          swift_bridgeObjectRelease(v676);
          v551 = v957;
          goto LABEL_254;
        }

        v547 = (uint64_t *)((char *)v395 + v541[10]);
        uint64_t v548 = *v547;
        unint64_t v549 = v547[1];
        swift_bridgeObjectRetain(v549);
        uint64_t v550 = sub_100133850(v548, v549);
        id v20 = (char *)&unk_10023D000;
        uint64_t v414 = v958;
        v551 = v957;
        if ((v552 & 1) != 0) {
          goto LABEL_254;
        }
        uint64_t v553 = v550;
        id v554 = [v533 name];
        if (!v554) {
          goto LABEL_254;
        }
        v555 = v554;
        uint64_t v556 = static String._unconditionallyBridgeFromObjectiveC(_:)(v554);
        unint64_t v558 = v557;

        swift_bridgeObjectRelease(v558);
        uint64_t v559 = HIBYTE(v558) & 0xF;
        BOOL v560 = (v558 & 0x2000000000000000LL) == 0;
        uint64_t v395 = v933;
        if (v560) {
          uint64_t v559 = v556 & 0xFFFFFFFFFFFFLL;
        }
        if (!v559) {
          goto LABEL_254;
        }
        id v561 = [(id)objc_opt_self(CBAccessoryLogging) getProductNameFromProductID:v553];
        uint64_t v562 = static String._unconditionallyBridgeFromObjectiveC(_:)(v561);
        v563 = v395;
        uint64_t v565 = v564;

        v566 = (uint64_t *)((char *)v563 + v934[7]);
        uint64_t v568 = *v566;
        uint64_t v567 = v566[1];
        if (v562 == *v566 && v565 == v567)
        {
          uint64_t v569 = swift_bridgeObjectRelease(v565);
        }

        else
        {
          char v766 = _stringCompareWithSmolCheck(_:_:expecting:)(v562, v565, *v566, v566[1], 0LL);
          uint64_t v569 = swift_bridgeObjectRelease(v565);
          uint64_t v395 = v933;
          if ((v766 & 1) == 0)
          {
LABEL_254:
            sub_100097028(v551);

            sub_1000A7CD4((uint64_t)v916, type metadata accessor for LegacyMagicPairingSettingsRecords);
            uint64_t v394 = v960;
            goto LABEL_255;
          }
        }

        LODWORD(v956) = static os_log_type_t.default.getter(v569);
        v952 = (char *)qword_10023DFC8;
        uint64_t v767 = swift_allocObject(v961, 152LL, 7LL);
        sub_1000ADDD4(v767, 3LL);
        v769 = v768;
        unint64_t v770 = v962;
        v768[3] = &type metadata for String;
        v768[4] = v770;
        uint64_t v771 = v965;
        void *v768 = v966;
        v768[1] = v771;
        swift_bridgeObjectRetain(v771);
        id v772 = [v533 name];
        if (v772)
        {
          v773 = v772;
          uint64_t v774 = static String._unconditionallyBridgeFromObjectiveC(_:)(v772);
          uint64_t v776 = v775;
        }

        else
        {
          uint64_t v774 = 0LL;
          uint64_t v776 = 0LL;
        }

        *(void *)&__int128 v970 = v774;
        *((void *)&v970 + 1) = v776;
        uint64_t v794 = sub_100098CD8((uint64_t *)&unk_100236640);
        uint64_t v795 = String.init<A>(describing:)(&v970, v794);
        v769[8] = &type metadata for String;
        v769[9] = v770;
        v769[5] = v795;
        v769[6] = v796;
        v769[13] = &type metadata for String;
        v769[14] = v770;
        v769[10] = v568;
        v769[11] = v567;
        BTUserTransaction.capture()();
        uint64_t v798 = v797;
        swift_bridgeObjectRetain(v567);
        os_log(_:dso:log:_:_:)( v956,  &_mh_execute_header,  v952,  "Replace default device name record[%@]: %@ with %@",  50LL,  2LL,  v798);
        swift_bridgeObjectRelease(v798);
        id v799 = objc_allocWithZone(&OBJC_CLASS___BTCloudDevice);
        v800 = v951;
        swift_bridgeObjectRetain(v951);
        NSString v801 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v800);
        id v802 = [v799 initWithBluetoothAddress:v801];

        v803 = v533;
        id v804 = [v533 name];
        [v802 setNickname:v804];

        v533 = v803;
        id v20 = (_BYTE *)&unk_10023D000;
        uint64_t v414 = v958;
        uint64_t v395 = v933;
        goto LABEL_254;
      }

      if (v102 == 0xD00000000000001ELL && v101 == 0x80000001001CABA0LL)
      {
        unint64_t v435 = 0x80000001001CABA0LL;
        goto LABEL_147;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, v102, v101, 0LL) & 1) != 0)
      {
        unint64_t v435 = v101;
LABEL_147:
        swift_bridgeObjectRelease(v435);
        uint64_t v476 = v388;
        uint64_t v477 = v914;
        uint64_t v392 = v944;
        sub_1000E8B5C(v476, v914);
        uint64_t v398 = v965;
        if (!v392)
        {
          sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
          uint64_t v478 = sub_100098CD8((uint64_t *)&unk_100236F80);
          uint64_t v479 = (uint64_t)v909;
          uint64_t v480 = v922;
          char v481 = swift_dynamicCast(v909, &v970, v478, v922, 6LL);
          v482 = *(void (**)(void, void, void, void))(v915 + 56);
          if ((v481 & 1) != 0)
          {
            v482(v479, 0LL, 1LL, v480);
            uint64_t v483 = v901;
            sub_1000C998C(v479, v901, type metadata accessor for DeviceSupportInformationRecord);
            id v484 = sub_1000B737C();
            sub_1000EA220(v484);

            sub_1000A7CD4(v483, type metadata accessor for DeviceSupportInformationRecord);
          }

          else
          {
            v482(v479, 1LL, 1LL, v480);
            sub_100099358(v479, &qword_100235828);
          }

          uint64_t v394 = v960;
          uint64_t v414 = v958;
          uint64_t v105 = v954;
          sub_10015EE64(v477, v949 & 1);
          sub_1000A7CD4(v477, type metadata accessor for DeviceSupportInformationRecord);
          goto LABEL_112;
        }

        goto LABEL_109;
      }

      if (v102 == 0x746553636967614DLL && v101 == 0xED000073676E6974LL)
      {
        swift_bridgeObjectRelease(0xED000073676E6974LL);
        uint64_t v508 = v906;
        v509 = v908;
        goto LABEL_180;
      }

      char v513 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, v102, v101, 0LL);
      uint64_t v508 = v906;
      v509 = v908;
      if ((v513 & 1) != 0)
      {
        swift_bridgeObjectRelease(v101);
LABEL_180:
        v514 = v388;
        uint64_t v392 = v944;
        sub_1000CDB38(v514, (uint64_t)v509);
        if (!v392)
        {
          uint64_t v515 = v897;
          sub_10013C62C(v897);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v919 + 48))(v515, 1LL, v925) == 1)
          {
            sub_100099358(v515, &qword_1002357D8);
            uint64_t v394 = v960;
            uint64_t v414 = v958;
            uint64_t v105 = v954;
          }

          else
          {
            sub_1000C998C(v515, v508, type metadata accessor for LegacyMagicPairingSettingsRecords);
            sub_1000EF00C();
            uint64_t v660 = v659;
            v661 = v509;
            v662 = sub_100122724(v659, v509, type metadata accessor for MagicPairingSettingsRecord);
            swift_bridgeObjectRelease(v660);
            uint64_t v394 = v960;
            uint64_t v414 = v958;
            uint64_t v105 = v954;
            if (v662)
            {
              uint64_t v663 = v508 + *(int *)(v925 + 28);
              v664 = &v661[*(int *)(v907 + 120)];
              uint64_t v665 = sub_100098C98( (unint64_t *)&unk_100236F90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              uint64_t v666 = dispatch thunk of static Comparable.< infix(_:_:)(v663, v664, v394, v665);
              if ((v666 & 1) != 0)
              {
                sub_1000A7CD4(v508, type metadata accessor for LegacyMagicPairingSettingsRecords);

                v509 = v908;
              }

              else
              {
                LODWORD(v956) = static os_log_type_t.default.getter(v666);
                v957 = (char *)qword_10023DFC8;
                uint64_t v748 = swift_allocObject(v961, 152LL, 7LL);
                sub_1000ADDD4(v748, 3LL);
                v750 = v749;
                unint64_t v751 = v962;
                v749[3] = (uint64_t)&type metadata for String;
                v749[4] = v751;
                uint64_t v752 = v965;
                uint64_t *v749 = v387;
                v749[1] = v752;
                swift_bridgeObjectRetain(v752);
                v753 = v514;
                id v754 = [v753 description];
                uint64_t v755 = static String._unconditionallyBridgeFromObjectiveC(_:)(v754);
                uint64_t v757 = v756;

                v750[8] = (uint64_t)&type metadata for String;
                v750[9] = v751;
                v750[5] = v755;
                v750[6] = v757;
                uint64_t v414 = v958;
                v758 = v662;
                id v759 = [v758 description];
                uint64_t v760 = static String._unconditionallyBridgeFromObjectiveC(_:)(v759);
                uint64_t v762 = v761;

                v750[13] = (uint64_t)&type metadata for String;
                v750[14] = v751;
                id v20 = (_BYTE *)&unk_10023D000;
                v750[10] = v760;
                v750[11] = v762;
                uint64_t v394 = v960;
                uint64_t v105 = v954;
                BTUserTransaction.capture()();
                uint64_t v764 = v763;
                os_log(_:dso:log:_:_:)( v956,  &_mh_execute_header,  v957,  "CloudSync: Consolidating record[%@]: %@ with %@",  47LL,  2LL,  v763);
                swift_bridgeObjectRelease(v764);
                v765 = v908;
                sub_1000CFEA4(v758);

                sub_1000A7CD4(v906, type metadata accessor for LegacyMagicPairingSettingsRecords);
                v509 = v765;
              }
            }

            else
            {
              sub_1000A7CD4(v508, type metadata accessor for LegacyMagicPairingSettingsRecords);
              v509 = v661;
            }
          }

          sub_10015F268((uint64_t)v509, v949 & 1);
          sub_1000A7CD4((uint64_t)v509, type metadata accessor for MagicPairingSettingsRecord);
          goto LABEL_112;
        }

        goto LABEL_108;
      }

      uint64_t v110 = 0xD000000000000012LL;
      uint64_t v111 = "SoundProfileRecord";
      if (v102 == 0xD000000000000012LL && v101 == 0x80000001001CAB80LL)
      {
        swift_bridgeObjectRelease(0x80000001001CAB80LL);
        uint64_t v394 = v960;
        uint64_t v414 = v958;
LABEL_270:
        sub_100147E1C((uint64_t)v957, v949 & 1);
        goto LABEL_112;
      }

LABEL_268:
      char v706 = _stringCompareWithSmolCheck(_:_:expecting:)( v110,  (unint64_t)(v111 - 32) | 0x8000000000000000LL,  v102,  v101,  0LL);
      uint64_t v414 = v958;
      if ((v706 & 1) != 0)
      {
        swift_bridgeObjectRelease(v101);
        uint64_t v394 = v960;
        goto LABEL_270;
      }

      if (v102 == 0x6563697665444141LL && v101 == 0xEE0064726F636552LL)
      {
        unint64_t v738 = 0xEE0064726F636552LL;
      }

      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141LL, 0xEE0064726F636552LL, v102, v101, 0LL) & 1) == 0)
        {
          if (v102 != 0xD000000000000011LL || (unint64_t v805 = 0x80000001001D2A80LL, v101 != 0x80000001001D2A80LL))
          {
            if ((_stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000011LL,  0x80000001001D2A80LL,  v102,  v101,  0LL) & 1) == 0)
            {
              if (v102 == 0xD000000000000013LL && v101 == 0x80000001001CB4E0LL)
              {
                swift_bridgeObjectRelease(0x80000001001CB4E0LL);
                id v388 = v957;
              }

              else
              {
                char v854 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000013LL,  0x80000001001CB4E0LL,  v102,  v101,  0LL);
                uint64_t v855 = swift_bridgeObjectRelease(v101);
                id v388 = v957;
                if ((v854 & 1) == 0)
                {
                  uint64_t v864 = static os_log_type_t.error.getter(v855);
                  uint64_t v865 = qword_10023DFC8;
                  uint64_t v866 = swift_allocObject(v961, 112LL, 7LL);
                  sub_1000ADDD4(v866, 2LL);
                  v868 = v867;
                  v867[3] = &type metadata for String;
                  unint64_t v869 = v962;
                  v867[4] = v962;
                  uint64_t v870 = v965;
                  void *v867 = v966;
                  v867[1] = v870;
                  swift_bridgeObjectRetain(v870);
                  v871 = v388;
                  id v872 = [v871 description];
                  uint64_t v873 = static String._unconditionallyBridgeFromObjectiveC(_:)(v872);
                  uint64_t v875 = v874;

                  v868[8] = &type metadata for String;
                  v868[9] = v869;
                  id v20 = (_BYTE *)&unk_10023D000;
                  v868[5] = v873;
                  v868[6] = v875;
                  BTUserTransaction.capture()();
                  uint64_t v877 = v876;
                  os_log(_:dso:log:_:_:)( v864,  &_mh_execute_header,  v865,  "No valid record found[%@]: %@",  29LL,  2LL,  v876);
                  swift_bridgeObjectRelease(v877);
                  goto LABEL_110;
                }
              }

LABEL_364:
              id v856 = objc_allocWithZone((Class)type metadata accessor for HMDeviceCloudRecord(0LL));
              v857 = v388;
              uint64_t v392 = v944;
              uint64_t v393 = sub_1000DEA18(v857);
              if (!v392)
              {
                v858 = v393;
                sub_10015FDF4(v393, v949 & 1);

                goto LABEL_110;
              }

LABEL_365:
              uint64_t v398 = v965;
              uint64_t v387 = v966;
              goto LABEL_109;
            }

            unint64_t v805 = v101;
          }

          swift_bridgeObjectRelease(v805);
          id v388 = v957;
LABEL_331:
          v971 = &type metadata for AudioAccessoryFeatures;
          unint64_t v972 = sub_10009E740();
          LOBYTE(v970) = 0;
          char v806 = isFeatureEnabled(_:)(&v970);
          sub_10009A498(&v970);
          if ((v806 & 1) != 0)
          {
            id v807 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0LL));
            v808 = v388;
            uint64_t v392 = v944;
            uint64_t v393 = sub_1000A0344(v808);
            if (!v392)
            {
              v841 = v393;
              sub_10015FA38(v393, v949 & 1);

              goto LABEL_110;
            }

            uint64_t v398 = v965;
            uint64_t v387 = v966;
            id v388 = v957;
            goto LABEL_109;
          }

          goto LABEL_364;
        }

        unint64_t v738 = v101;
      }

      swift_bridgeObjectRelease(v738);
      id v388 = v957;
      v971 = &type metadata for AudioAccessoryFeatures;
      unint64_t v972 = sub_10009E740();
      LOBYTE(v970) = 0;
      char v777 = isFeatureEnabled(_:)(&v970);
      sub_10009A498(&v970);
      if ((v777 & 1) != 0)
      {
        id v778 = objc_allocWithZone((Class)type metadata accessor for AADeviceRecord(0LL));
        v779 = v388;
        uint64_t v392 = v944;
        uint64_t v393 = sub_100114B2C(v779);
        if (!v392)
        {
          v780 = v393;
          sub_10015F674(v393, v949 & 1);

          goto LABEL_110;
        }

        goto LABEL_365;
      }

      goto LABEL_331;
    }

    v957 = (char *)v258;
    char v273 = v942;
    uint64_t v956 = v249[4];
    ((void (*)(char *, uint64_t, uint64_t))v956)(v942, v259, v248);
    uint64_t v274 = *((void *)&v974 + 1);
    unint64_t v275 = v975;
    sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
    unint64_t v276 = v959;
    (*(void (**)(uint64_t, unint64_t))(v275 + 40))(v274, v275);
    LOBYTE(v274) = static Date.> infix(_:_:)(v276, v273);
    uint64_t v277 = (void *)v249[1];
    uint64_t v278 = ((uint64_t (*)(char *, uint64_t))v277)(v276, v248);
    if ((v274 & 1) == 0)
    {
      uint64_t v272 = ((uint64_t (*)(char *, uint64_t))v277)(v273, v248);
      goto LABEL_66;
    }

    v954 = v257;
    v958 = v277;
    uint64_t v279 = static os_log_type_t.error.getter(v278);
    uint64_t v280 = qword_10023DFC8;
    uint64_t v281 = v961;
    uint64_t v282 = swift_allocObject(v961, 72LL, 7LL);
    sub_1000ADDD4(v282, 1LL);
    uint64_t v284 = v283;
    sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
    uint64_t v285 = sub_100098CD8((uint64_t *)&unk_100236F80);
    uint64_t v286 = String.init<A>(describing:)(&v970, v285);
    unint64_t v287 = v962;
    v284[3] = (uint64_t)&type metadata for String;
    v284[4] = v287;
    *uint64_t v284 = v286;
    v284[1] = v288;
    BTUserTransaction.capture()();
    uint64_t v290 = v289;
    os_log(_:dso:log:_:_:)( v279,  &_mh_execute_header,  v280,  "Merge conflict while saving cloud update, local record is already up to date: %@",  80LL,  2LL,  v289);
    uint64_t v291 = swift_bridgeObjectRelease(v290);
    uint64_t v293 = CKRecord.recordType.getter(v291);
    unint64_t v294 = v292;
    if (v293 == 0x6552656369766544LL && v292 == 0xEC00000064726F63LL)
    {
      swift_bridgeObjectRelease(0xEC00000064726F63LL);
      uint64_t v295 = v964;
      uint64_t v142 = v966;
      uint64_t v296 = v960;
LABEL_75:
      sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
      uint64_t v305 = (uint64_t)v927;
      uint64_t v306 = v285;
      uint64_t v307 = v934;
      char v308 = swift_dynamicCast(v927, &v970, v306, v934, 6LL);
      uint64_t v309 = *(void (**)(void, void, void, void))(v926 + 56);
      if ((v308 & 1) != 0)
      {
        v309(v305, 0LL, 1LL, v307);
        uint64_t v310 = v305;
        uint64_t v311 = v921;
        sub_1000C998C(v310, v921, type metadata accessor for DeviceRecord);
        uint64_t v312 = v963;
        v313 = v920;
        uint64_t v314 = v944;
        sub_100096100(v312, v920);
        if (v314)
        {
          v315 = type metadata accessor for DeviceRecord;
LABEL_78:
          uint64_t v316 = v311;
LABEL_79:
          uint64_t v317 = sub_1000A7CD4(v316, v315);
LABEL_80:
          uint64_t v318 = v965;
          uint64_t v319 = static os_log_type_t.error.getter(v317);
          uint64_t v961 = qword_10023DFC8;
          uint64_t v320 = swift_allocObject(v281, 152LL, 7LL);
          sub_1000ADDD4(v320, 3LL);
          uint64_t v322 = v321;
          unint64_t v323 = v962;
          v321[3] = (uint64_t)&type metadata for String;
          v321[4] = v323;
          uint64_t *v321 = v142;
          v321[1] = v318;
          swift_bridgeObjectRetain(v318);
          char v324 = v963;
          id v325 = [v324 description];
          uint64_t v326 = static String._unconditionallyBridgeFromObjectiveC(_:)(v325);
          uint64_t v328 = v327;

          v322[8] = (uint64_t)&type metadata for String;
          v322[9] = v323;
          v322[5] = v326;
          v322[6] = v328;
          uint64_t v142 = v966;
          *(void *)&__int128 v970 = v314;
          swift_errorRetain(v314);
          uint64_t v329 = sub_100098CD8(&qword_1002357C0);
          uint64_t v330 = String.init<A>(describing:)(&v970, v329);
          v322[13] = (uint64_t)&type metadata for String;
          v322[14] = v323;
          v322[10] = v330;
          v322[11] = v331;
          BTUserTransaction.capture()();
          uint64_t v333 = v332;
          os_log(_:dso:log:_:_:)( v319,  &_mh_execute_header,  v961,  "Error updating stale cloud record[%@] %@: %@",  44LL,  2LL,  v332);
          swift_bridgeObjectRelease(v333);
          uint64_t v334 = swift_errorRelease(v314);
          uint64_t v335 = v964;
LABEL_81:
          uint64_t v296 = v960;
LABEL_259:
          uint64_t v679 = v335;
          sub_10013D59C(v334);
          uint64_t v680 = *((void *)&v974 + 1);
          unint64_t v681 = v975;
          sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
          v682 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v681 + 56))(v680, v681);
          id v683 = [v682 creationDate];

          v684 = v942;
          v685 = v931;
          uint64_t v686 = (uint64_t)v930;
          if (v683)
          {
            v687 = v959;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v683);

            v688 = (void (*)(void, void, void))v956;
            ((void (*)(uint64_t, char *, uint64_t))v956)(v686, v687, v296);
            uint64_t v689 = 0LL;
          }

          else
          {
            uint64_t v689 = 1LL;
            v688 = (void (*)(void, void, void))v956;
          }

          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v954)(v686, v689, 1LL, v296);
          sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v957)(v686, 1LL, v296) == 1)
          {
            v690 = v971;
            unint64_t v691 = v972;
            sub_10009A430(&v970, (uint64_t)v971);
            (*(void (**)(ValueMetadata *, unint64_t))(v691 + 40))(v690, v691);
            sub_100099358(v686, (uint64_t *)&unk_100234E10);
          }

          else
          {
            v688(v685, v686, v296);
          }

          uint64_t v692 = sub_10009A498(&v970);
          double v693 = Date.timeIntervalSince1970.getter(v692);
          v694 = (void (*)(void, void))v958;
          uint64_t v695 = ((uint64_t (*)(char *, uint64_t))v958)(v685, v296);
          id v696 = [objc_allocWithZone(NSNumber) initWithDouble:v693 - Date.timeIntervalSince1970.getter(v695)];
          NSString v697 = String._bridgeToObjectiveC()();
          uint64_t v698 = sub_100098CD8(&qword_1002365B8);
          uint64_t v699 = swift_allocObject(v698, 56LL, 7LL);
          sub_1000ADDC4(v699, 1LL);
          void *v700 = 0xD00000000000001ALL;
          v700[1] = 0x80000001001D4450LL;
          v700[2] = v696;
          BTUserTransaction.capture()();
          uint64_t v702 = v701;
          id v703 = v696;
          unint64_t v704 = sub_10009F23C(v702);
          sub_1000A4A64(0LL, &qword_1002365C0, &OBJC_CLASS___NSObject_ptr);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v704);
          CUMetricsLog(v697, isa);

          v694(v684, v296);
          sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
          sub_10009A498(&v973);
          uint64_t v136 = v965;
          uint64_t v460 = v679;
          goto LABEL_222;
        }

        uint64_t v473 = v311;
        id v474 = sub_1000B1A88();
        sub_100097028(v474);

        uint64_t v335 = v295;
        sub_10015EA5C((uint64_t)v313, 0);
        uint64_t v475 = type metadata accessor for DeviceRecord;
        goto LABEL_258;
      }

      v309(v305, 1LL, 1LL, v307);
      v433 = &qword_100235848;
      goto LABEL_232;
    }

    char v304 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, v293, v292, 0LL);
    uint64_t v295 = v964;
    uint64_t v296 = v960;
    if ((v304 & 1) != 0)
    {
      swift_bridgeObjectRelease(v294);
      uint64_t v142 = v966;
      goto LABEL_75;
    }

    uint64_t v142 = v966;
    if (v293 == 0xD00000000000001ELL && v294 == 0x80000001001CABA0LL)
    {
      swift_bridgeObjectRelease(0x80000001001CABA0LL);
      uint64_t v436 = v922;
LABEL_152:
      sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
      uint64_t v305 = (uint64_t)v913;
      char v486 = swift_dynamicCast(v913, &v970, v285, v436, 6LL);
      v487 = *(void (**)(void, void, void, void))(v915 + 56);
      if ((v486 & 1) != 0)
      {
        v487(v305, 0LL, 1LL, v436);
        uint64_t v488 = v911;
        sub_1000C998C(v305, v911, type metadata accessor for DeviceSupportInformationRecord);
        v489 = v963;
        v313 = v910;
        uint64_t v314 = v944;
        sub_1000E8B5C(v489, (uint64_t)v910);
        if (v314)
        {
          v315 = type metadata accessor for DeviceSupportInformationRecord;
          uint64_t v316 = v488;
          goto LABEL_79;
        }

        uint64_t v473 = v488;
        id v512 = sub_1000B737C();
        sub_1000EA220(v512);

        uint64_t v335 = v295;
        sub_10015EE64((uint64_t)v313, 0);
        uint64_t v475 = type metadata accessor for DeviceSupportInformationRecord;
        goto LABEL_258;
      }

      v487(v305, 1LL, 1LL, v436);
      v433 = &qword_100235828;
LABEL_232:
      uint64_t v334 = sub_100099358(v305, v433);
LABEL_233:
      uint64_t v335 = v295;
      goto LABEL_259;
    }

    char v485 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, v293, v294, 0LL);
    uint64_t v436 = v922;
    if ((v485 & 1) != 0)
    {
      swift_bridgeObjectRelease(v294);
      goto LABEL_152;
    }

    if (v293 == 0x746553636967614DLL && v294 == 0xED000073676E6974LL)
    {
      unint64_t v510 = 0xED000073676E6974LL;
LABEL_185:
      swift_bridgeObjectRelease(v510);
      sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
      uint64_t v305 = (uint64_t)v903;
      uint64_t v516 = v285;
      uint64_t v517 = v907;
      char v518 = swift_dynamicCast(v903, &v970, v516, v907, 6LL);
      v519 = *(void (**)(void, void, void, void))(v902 + 56);
      if ((v518 & 1) != 0)
      {
        v519(v305, 0LL, 1LL, v517);
        uint64_t v520 = v305;
        uint64_t v311 = v899;
        sub_1000C998C(v520, v899, type metadata accessor for MagicPairingSettingsRecord);
        v521 = v963;
        v313 = v898;
        uint64_t v314 = v944;
        sub_1000CDB38(v521, (uint64_t)v898);
        if (v314)
        {
          v315 = type metadata accessor for MagicPairingSettingsRecord;
          goto LABEL_78;
        }

        uint64_t v473 = v311;
        id v678 = sub_1000BC2B0();
        sub_1000CFEA4(v678);

        uint64_t v335 = v295;
        sub_10015F268((uint64_t)v313, 0);
        uint64_t v475 = type metadata accessor for MagicPairingSettingsRecord;
LABEL_258:
        sub_1000A7CD4((uint64_t)v313, v475);
        uint64_t v334 = sub_1000A7CD4(v473, v475);
        goto LABEL_259;
      }

      v519(v305, 1LL, 1LL, v517);
      v433 = (uint64_t *)&unk_100235810;
      goto LABEL_232;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, v293, v294, 0LL) & 1) != 0)
    {
      unint64_t v510 = v294;
      goto LABEL_185;
    }

    if (v293 == 0x6563697665444141LL && v294 == 0xEE0064726F636552LL)
    {
      unint64_t v639 = 0xEE0064726F636552LL;
    }

    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141LL, 0xEE0064726F636552LL, v293, v294, 0LL) & 1) == 0)
      {
        if (v293 != 0xD000000000000011LL || (unint64_t v739 = 0x80000001001D2A80LL, v294 != 0x80000001001D2A80LL))
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001D2A80LL, v293, v294, 0LL) & 1) == 0)
          {
            if (v293 == 0xD000000000000013LL && v294 == 0x80000001001CB4E0LL)
            {
              swift_bridgeObjectRelease(0x80000001001CB4E0LL);
              uint64_t v295 = v964;
              uint64_t v142 = v966;
              uint64_t v296 = v960;
              uint64_t v281 = v961;
            }

            else
            {
              char v835 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000013LL,  0x80000001001CB4E0LL,  v293,  v294,  0LL);
              uint64_t v836 = swift_bridgeObjectRelease(v294);
              uint64_t v295 = v964;
              uint64_t v142 = v966;
              uint64_t v296 = v960;
              uint64_t v281 = v961;
              if ((v835 & 1) == 0)
              {
                uint64_t v842 = static os_log_type_t.error.getter(v836);
                uint64_t v843 = qword_10023DFC8;
                uint64_t v844 = swift_allocObject(v281, 112LL, 7LL);
                sub_1000ADDD4(v844, 2LL);
                v846 = v845;
                unint64_t v847 = v962;
                v845[3] = (uint64_t)&type metadata for String;
                v845[4] = v847;
                uint64_t v848 = v965;
                uint64_t *v845 = v142;
                v845[1] = v848;
                uint64_t v849 = swift_bridgeObjectRetain(v848);
                uint64_t v850 = CKRecord.recordType.getter(v849);
                v846[8] = (uint64_t)&type metadata for String;
                v846[9] = v847;
                v846[5] = v850;
                v846[6] = v851;
                BTUserTransaction.capture()();
                uint64_t v853 = v852;
                os_log(_:dso:log:_:_:)( v842,  &_mh_execute_header,  v843,  "Skip updating this record[%@]: %@",  33LL,  2LL,  v852);
                uint64_t v334 = swift_bridgeObjectRelease(v853);
                goto LABEL_233;
              }
            }

            goto LABEL_350;
          }

          unint64_t v739 = v294;
        }

        swift_bridgeObjectRelease(v739);
LABEL_296:
        v971 = &type metadata for AudioAccessoryFeatures;
        unint64_t v972 = sub_10009E740();
        LOBYTE(v970) = 0;
        char v740 = isFeatureEnabled(_:)(&v970);
        sub_10009A498(&v970);
        if ((v740 & 1) != 0)
        {
          sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
          v741 = (objc_class *)type metadata accessor for AAProxCardsRecord(0LL);
          uint64_t v334 = swift_dynamicCast(&v967, &v970, v285, v741, 6LL);
          if ((v334 & 1) == 0) {
            goto LABEL_233;
          }
          v709 = v967;
          id v742 = objc_allocWithZone(v741);
          v743 = v963;
          uint64_t v314 = v944;
          v744 = sub_1000A0344(v743);
          if (v314) {
            goto LABEL_352;
          }
          v745 = v744;
          sub_1000A299C(v709);
          uint64_t v335 = v964;
          sub_10015FA38(v745, 0);
LABEL_354:

          goto LABEL_81;
        }

LABEL_350:
        sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
        v837 = (objc_class *)type metadata accessor for HMDeviceCloudRecord(0LL);
        uint64_t v334 = swift_dynamicCast(&v967, &v970, v285, v837, 6LL);
        if ((v334 & 1) == 0) {
          goto LABEL_233;
        }
        v709 = v967;
        id v838 = objc_allocWithZone(v837);
        v839 = v963;
        uint64_t v314 = v944;
        v840 = (char *)sub_1000DEA18(v839);
        if (v314) {
          goto LABEL_352;
        }
        v745 = v840;
        sub_1000E49A0(v709);
        uint64_t v335 = v964;
        sub_10015FDF4(v745, 0);
        goto LABEL_354;
      }

      unint64_t v639 = v294;
    }

    swift_bridgeObjectRelease(v639);
    v971 = &type metadata for AudioAccessoryFeatures;
    unint64_t v972 = sub_10009E740();
    LOBYTE(v970) = 0;
    char v707 = isFeatureEnabled(_:)(&v970);
    sub_10009A498(&v970);
    if ((v707 & 1) != 0)
    {
      sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
      v708 = (objc_class *)type metadata accessor for AADeviceRecord(0LL);
      uint64_t v334 = swift_dynamicCast(&v967, &v970, v285, v708, 6LL);
      if ((v334 & 1) == 0) {
        goto LABEL_233;
      }
      v709 = v967;
      id v710 = objc_allocWithZone(v708);
      v711 = v963;
      uint64_t v314 = v944;
      id v712 = sub_100114B2C(v711);
      if (!v314)
      {
        v713 = v712;
        sub_100117668((unsigned __int8 *)v709);
        uint64_t v335 = v295;
        sub_10015F674(v713, 0);

        goto LABEL_259;
      }

LABEL_352:
      goto LABEL_80;
    }

    goto LABEL_296;
  }

  id v268 = [v963 creationDate];
  if (v268)
  {
    unint64_t v269 = v268;
    uint64_t v270 = (uint64_t)v935;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v268);

    uint64_t v271 = (void (*)(void, void, void, void))v249[7];
    v271(v270, 0LL, 1LL, v248);
  }

  else
  {
    uint64_t v271 = (void (*)(void, void, void, void))v249[7];
    uint64_t v270 = (uint64_t)v935;
    v271(v935, 1LL, 1LL, v248);
  }

  uint64_t v299 = v938;
  uint64_t v300 = (uint64_t)v937;
  uint64_t v301 = v936;
  sub_1000D8CF8(v270, v936, (uint64_t *)&unk_100234E10);
  uint64_t v302 = (unsigned int (*)(void, void, void))v249[6];
  if (v302(v301, 1LL, v248))
  {
    sub_100099358(v301, (uint64_t *)&unk_100234E10);
    double v303 = 0.0;
  }

  else
  {
    v336 = v959;
    ((void (*)(char *, uint64_t, uint64_t))v249[2])(v959, v301, v248);
    uint64_t v337 = sub_100099358(v301, (uint64_t *)&unk_100234E10);
    double v303 = Date.timeIntervalSince1970.getter(v337);
    ((void (*)(char *, uint64_t))v249[1])(v336, v248);
  }

  uint64_t v338 = *((void *)&v974 + 1);
  unint64_t v339 = v975;
  sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
  uint64_t v340 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v339 + 56))(v338, v339);
  id v341 = [v340 creationDate];

  if (v341)
  {
    v342 = v959;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v341);

    ((void (*)(uint64_t, char *, uint64_t))v249[4])(v300, v342, v248);
    uint64_t v343 = 0LL;
  }

  else
  {
    uint64_t v343 = 1LL;
  }

  v271(v300, v343, 1LL, v248);
  sub_100187AB0((uint64_t)&v973, (uint64_t)&v970);
  if (v302(v300, 1LL, v248) == 1)
  {
    uint64_t v344 = v971;
    unint64_t v345 = v972;
    sub_10009A430(&v970, (uint64_t)v971);
    (*(void (**)(ValueMetadata *, unint64_t))(v345 + 40))(v344, v345);
    sub_100099358(v300, (uint64_t *)&unk_100234E10);
  }

  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v249[4])(v299, v300, v248);
  }

  uint64_t v346 = sub_10009A498(&v970);
  double v347 = Date.timeIntervalSince1970.getter(v346);
  uint64_t v348 = (void (*)(void, void))v249[1];
  v348(v299, v248);
  id v349 = [objc_allocWithZone(NSNumber) initWithDouble:v303 - v347];
  NSString v350 = String._bridgeToObjectiveC()();
  uint64_t v351 = sub_100098CD8(&qword_1002365B8);
  uint64_t v352 = swift_allocObject(v351, 56LL, 7LL);
  sub_1000ADDC4(v352, 1LL);
  *uint64_t v353 = 0xD000000000000016LL;
  v353[1] = 0x80000001001D4210LL;
  v353[2] = v349;
  BTUserTransaction.capture()();
  uint64_t v355 = v354;
  id v356 = v349;
  unint64_t v357 = sub_10009F23C(v355);
  sub_1000A4A64(0LL, &qword_1002365C0, &OBJC_CLASS___NSObject_ptr);
  uint64_t v358 = v249;
  uint64_t v359 = v248;
  Class v360 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v357);
  CUMetricsLog(v350, v360);

  id v361 = [v963 creationDate];
  if (!v361)
  {
    uint64_t v365 = (uint64_t)v939;
    v271(v939, 1LL, 1LL, v359);
    v297 = &selRef__inCaseLidClosed_;
    goto LABEL_94;
  }

  uint64_t v362 = v361;
  uint64_t v363 = v959;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v361);

  uint64_t v364 = (void (*)(void, void, void))v358[4];
  uint64_t v365 = (uint64_t)v939;
  v364(v939, v363, v359);
  v271(v365, 0LL, 1LL, v359);
  v297 = &selRef__inCaseLidClosed_;
  if (v302(v365, 1LL, v359) == 1)
  {
LABEL_94:

    uint64_t v272 = sub_100099358(v365, (uint64_t *)&unk_100234E10);
    uint64_t v142 = v966;
    goto LABEL_95;
  }

  v364(v928, v365, v359);
  uint64_t v366 = *((void *)&v974 + 1);
  unint64_t v367 = v975;
  sub_10009A430(&v973, *((uint64_t *)&v974 + 1));
  uint64_t v368 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v367 + 56))(v366, v367);
  id v369 = [v368 creationDate];

  v957 = (char *)v356;
  if (v369)
  {
    uint64_t v370 = v959;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v369);

    uint64_t v371 = (uint64_t)v923;
    v364(v923, v370, v359);
    uint64_t v372 = 0LL;
    uint64_t v373 = v359;
    uint64_t v374 = v924;
  }

  else
  {
    uint64_t v372 = 1LL;
    uint64_t v373 = v359;
    uint64_t v374 = v924;
    uint64_t v371 = (uint64_t)v923;
  }

  v438 = v348;
  v271(v371, v372, 1LL, v373);
  sub_100187AB0((uint64_t)&v973, (uint64_t)&v967);
  unsigned int v439 = v302(v371, 1LL, v373);
  v440 = v928;
  if (v439 == 1)
  {
    uint64_t v441 = v968;
    uint64_t v442 = v969;
    sub_10009A430(&v967, v968);
    v443 = *(void (**)(void, void))(v442 + 40);
    uint64_t v444 = v442;
    uint64_t v373 = v960;
    v443(v441, v444);
    sub_100099358(v371, (uint64_t *)&unk_100234E10);
  }

  else
  {
    v364(v374, v371, v373);
  }

  uint64_t v142 = v966;
  sub_10009A498(&v967);
  char v445 = static Date.> infix(_:_:)(v374, v440);
  uint64_t v446 = ((uint64_t (*)(char *, uint64_t))v348)(v374, v373);
  if ((v445 & 1) == 0)
  {
    v348(v440, v373);

    goto LABEL_66;
  }

  uint64_t v447 = static os_log_type_t.error.getter(v446);
  uint64_t v448 = qword_10023DFC8;
  uint64_t v449 = swift_allocObject(v961, 72LL, 7LL);
  sub_1000ADDD4(v449, 1LL);
  uint64_t v450 = v373;
  v452 = v451;
  sub_100187AB0((uint64_t)&v973, (uint64_t)&v967);
  uint64_t v453 = sub_100098CD8((uint64_t *)&unk_100236F80);
  uint64_t v454 = String.init<A>(describing:)(&v967, v453);
  unint64_t v455 = v962;
  v452[3] = (uint64_t)&type metadata for String;
  v452[4] = v455;
  uint64_t *v452 = v454;
  v452[1] = v456;
  BTUserTransaction.capture()();
  uint64_t v458 = v457;
  os_log(_:dso:log:_:_:)( v447,  &_mh_execute_header,  v448,  "Merge conflict while saving cloud update, local record is latest: %@",  68LL,  2LL,  v457);
  uint64_t v459 = swift_bridgeObjectRelease(v458);
  uint64_t v460 = v964;
  sub_10013D59C(v459);

  v438(v440, v450);
  sub_100099358((uint64_t)v976, (uint64_t *)&unk_100236F78);
  sub_10009A498(&v973);
  uint64_t v136 = v965;
LABEL_222:
  sub_10015E7BC(v460, v142, v136);
  return swift_bridgeObjectRelease(v136);
}

void sub_100147290(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v51 = (char *)&v50 - v14;
  __chkstk_darwin(v15);
  uint64_t v52 = (char *)&v50 - v16;
  uint64_t v17 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v20 = objc_autoreleasePoolPush();
  uint64_t v55 = a1;
  sub_1000E95EC(a1, &v56);
  if (!v2)
  {
    uint64_t v54 = 0LL;
    objc_autoreleasePoolPop(v20);
    Class v21 = v56;
    id v22 = -[objc_class recordChangeTag](v56, "recordChangeTag");
    if (v22)
    {
      uint64_t v23 = v22;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v25 = v24;

      swift_bridgeObjectRelease(v25);
      sub_1000A7C90(v55, (uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
      if (v25)
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v52, &v19[*(int *)(v17 + 64)], v9);
        id v26 = -[objc_class modificationDate](v21, "modificationDate");
        if (v26)
        {
          uint64_t v27 = v26;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

          uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v28(v8, v12, v9);
          uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v29(v8, 0LL, 1LL, v9);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
          {
            uint64_t v30 = v51;
            v28(v51, v8, v9);
            goto LABEL_16;
          }
        }

        else
        {
          uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v29(v8, 1LL, 1LL, v9);
        }

        id v32 = -[objc_class creationDate](v21, "creationDate");
        if (v32)
        {
          uint64_t v33 = v32;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

          uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          uint64_t v35 = (uint64_t)v50;
          v34(v50, v12, v9);
          v29((char *)v35, 0LL, 1LL, v9);
          uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v35, 1LL, v9);
          if ((_DWORD)v36 != 1)
          {
            uint64_t v30 = v51;
            v34(v51, (char *)v35, v9);
LABEL_15:
            sub_100099358((uint64_t)v8, (uint64_t *)&unk_100234E10);
LABEL_16:
            uint64_t v37 = v52;
            char v38 = static Date.> infix(_:_:)(v52, v30);
            uint64_t v39 = *(void (**)(char *, uint64_t))(v10 + 8);
            v39(v30, v9);
            v39(v37, v9);
            uint64_t v31 = sub_1000A7CD4((uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
            if ((v38 & 1) == 0)
            {
LABEL_20:

              return;
            }

void sub_100147798(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = a2;
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)&v53 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v54 = (char *)&v53 - v13;
  __chkstk_darwin(v14);
  Class v56 = (char *)&v53 - v15;
  uint64_t v16 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  Class v21 = (char *)&v53 - v20;
  Class v58 = sub_1000A4ED8();
  id v22 = -[objc_class recordChangeTag](v58, "recordChangeTag");
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v53 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    swift_bridgeObjectRelease(v25);
    sub_1000A7C90(a1, (uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
    if (v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v56, &v21[*(int *)(v16 + 120)], v8);
      id v26 = -[objc_class modificationDate](v58, "modificationDate");
      if (v26)
      {
        uint64_t v27 = v26;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

        uint64_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
        uint64_t v29 = (uint64_t)v55;
        v28((uint64_t)v55, v11, v8);
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v30(v29, 0LL, 1LL, v8);
        int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v29, 1LL, v8);
        uint64_t v32 = (uint64_t)v53;
        if (v31 != 1)
        {
          uint64_t v33 = v54;
          v28((uint64_t)v54, v55, v8);
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v30((uint64_t)v55, 1LL, 1LL, v8);
        uint64_t v32 = (uint64_t)v53;
      }

      id v36 = -[objc_class creationDate](v58, "creationDate");
      if (v36)
      {
        uint64_t v37 = v36;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

        char v38 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
        v38(v32, v11, v8);
        v30(v32, 0LL, 1LL, v8);
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v32, 1LL, v8);
        if ((_DWORD)v39 != 1)
        {
          uint64_t v33 = v54;
          v38((uint64_t)v54, (char *)v32, v8);
LABEL_14:
          sub_100099358((uint64_t)v55, (uint64_t *)&unk_100234E10);
LABEL_15:
          uint64_t v40 = v56;
          char v41 = static Date.> infix(_:_:)(v56, v33);
          uint64_t v42 = *(void (**)(char *, uint64_t))(v9 + 8);
          v42(v33, v8);
          v42(v40, v8);
          uint64_t v34 = sub_1000A7CD4((uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
          Class v35 = v58;
          if ((v41 & 1) == 0) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v32, 1LL, 1LL, v8);
      }

      uint64_t v33 = v54;
      static Date.now.getter(v39);
      sub_100099358(v32, (uint64_t *)&unk_100234E10);
      goto LABEL_14;
    }
  }

  else
  {
    sub_1000A7C90(a1, (uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
  }

  uint64_t v34 = sub_1000A7CD4((uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
  Class v35 = v58;
LABEL_16:
  uint64_t v43 = static os_log_type_t.default.getter(v34);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v44 = qword_10023DFC8;
  uint64_t v45 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
  *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  sub_1000A7C90(a1, (uint64_t)v18, type metadata accessor for MagicPairingSettingsRecord);
  uint64_t v47 = sub_1000CB0DC();
  uint64_t v49 = v48;
  sub_1000A7CD4((uint64_t)v18, type metadata accessor for MagicPairingSettingsRecord);
  *(void *)(v46 + 56) = &type metadata for String;
  *(void *)(v46 + 64) = sub_10009914C();
  *(void *)(v46 + 32) = v47;
  *(void *)(v46 + 40) = v49;
  os_log(_:dso:log:_:_:)( v43,  &_mh_execute_header,  v44,  "Retry cloud upload for deferred magic settings: %@",  50LL,  2LL,  v46);
  swift_bridgeObjectRelease(v46);
  uint64_t v50 = v57;
  uint64_t v51 = sub_10013B740();
  uint64_t v52 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v52 + 16, v50);
  swift_retain(v52);
  sub_1001051E0(v35, 0, (uint64_t)sub_100187F60, v52);
  swift_unknownObjectRelease(v51);
  swift_release_n(v52, 2LL);
LABEL_19:
}

void sub_100147CB0(void *a1, char a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v18, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = Strong;
    if ((a2 & 1) != 0)
    {
      uint64_t v8 = swift_errorRetain(a1);
      uint64_t v9 = static os_log_type_t.error.getter(v8);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v10 = qword_10023DFC8;
      uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
      *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v17 = a1;
      swift_errorRetain(a1);
      uint64_t v13 = sub_100098CD8(&qword_1002357C0);
      uint64_t v14 = String.init<A>(describing:)(&v17, v13);
      uint64_t v16 = v15;
      *(void *)(v12 + 56) = &type metadata for String;
      *(void *)(v12 + 64) = sub_10009914C();
      *(void *)(v12 + 32) = v14;
      *(void *)(v12 + 40) = v16;
      os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Unable to save record on cloud with error: %@",  45LL,  2LL,  v12,  v17);
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      sub_100147E1C((uint64_t)a1, 0);
    }

    swift_release(v7);
    sub_100112C7C(a1, a2 & 1);
  }

uint64_t sub_100147E1C(uint64_t a1, int a2)
{
  LODWORD(v124) = a2;
  uint64_t v3 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
  uint64_t v130 = v3;
  uint64_t v131 = v4;
  __chkstk_darwin(v3);
  uint64_t v123 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v132 = (uint64_t)&v110 - v7;
  __chkstk_darwin(v8);
  uint64_t v126 = (uint64_t)&v110 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v110 - v11;
  unint64_t v121 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v116 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SoundProfileRecord(0LL);
  __chkstk_darwin(v15);
  uint64_t v125 = (uint64_t *)((char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v17);
  uint64_t v122 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  Class v21 = (char *)&v110 - v20;
  uint64_t v134 = type metadata accessor for URL(0LL);
  uint64_t v22 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  unint64_t v129 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v128 = (void (*)(char *, char *, uint64_t))((char *)&v110 - v25);
  __chkstk_darwin(v26);
  uint64_t v28 = (uint64_t (*)(uint64_t))((char *)&v110 - v27);
  __chkstk_darwin(v29);
  unint64_t v31 = (unint64_t)&v110 - v30;
  __chkstk_darwin(v32);
  BOOL v127 = (char *)&v110 - v33;
  __chkstk_darwin(v34);
  id v36 = (char *)&v110 - v35;
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v110 - v38;
  uint64_t v41 = CKRecord.recordType.getter(v40);
  uint64_t v43 = v42;
  if (v41 == 0xD000000000000012LL && v42 == 0x80000001001CAB80LL)
  {
    swift_bridgeObjectRelease(0x80000001001CAB80LL);
  }

  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 0xD000000000000012LL, 0x80000001001CAB80LL, 0LL);
    uint64_t result = swift_bridgeObjectRelease(v43);
    if ((v44 & 1) == 0) {
      return result;
    }
  }

  id v46 = [(id)a1 valueStore];
  uint64_t v47 = sub_1000A4A64(0LL, &qword_100235320, &OBJC_CLASS___CKRecordValueStore_ptr);
  CKRecordKeyValueSetting.subscript.getter(aBlock, 0xD000000000000011LL, 0x80000001001CB580LL, v47);

  if (!v136)
  {
    uint64_t v64 = (uint64_t *)&unk_100236F30;
    uint64_t v65 = (char *)aBlock;
    return sub_100099358((uint64_t)v65, v64);
  }

  uint64_t v48 = sub_100098CD8(&qword_100235330);
  uint64_t v49 = sub_1000A4A64(0LL, (unint64_t *)&unk_100236F40, &OBJC_CLASS___CKAsset_ptr);
  uint64_t result = swift_dynamicCast(&v139, aBlock, v48, v49, 6LL);
  if ((result & 1) == 0) {
    return result;
  }
  id v115 = v139;
  id v50 = [v139 fileURL];
  if (!v50)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v21, 1LL, 1LL, v134);
    goto LABEL_13;
  }

  uint64_t v51 = v50;
  uint64_t v111 = v39;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v53 = v134;
  v52(v21, v36, v134);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v21, 0LL, 1LL, v53);
  NSString v113 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v113(v21, 1LL, v53) == 1)
  {
LABEL_13:

    uint64_t v64 = (uint64_t *)&unk_100235270;
    uint64_t v65 = v21;
    return sub_100099358((uint64_t)v65, v64);
  }

  uint64_t v110 = v52;
  v52(v111, v21, v53);
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v54(v36, v133 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL, v53);
  if (qword_100234B50 != -1) {
    goto LABEL_47;
  }
  while (1)
  {
    uint64_t v55 = sub_100098D58(v53, (uint64_t)qword_10023DD30);
    v56.n128_f64[0] = ((double (*)(unint64_t, uint64_t, uint64_t))v54)(v31, v55, v53);
    id v114 = (void (*)(uint64_t (*)(uint64_t), char *, uint64_t))v54;
    uint64_t v57 = URL.path.getter(v56);
    uint64_t v59 = v58;
    uint64_t v60 = *(void (**)(unint64_t, uint64_t))(v22 + 8);
    v60(v31, v53);
    uint64_t v61 = v127;
    URL.appendingPathComponent(_:isDirectory:)(v57, v59, 1LL);
    swift_bridgeObjectRelease(v59);
    id v112 = v60;
    v60((unint64_t)v36, v53);
    v114(v28, v61, v53);
    uint64_t v62 = (id)a1;
    uint64_t v63 = v125;
    sub_1000A6DF0(v62, (uint64_t)v28, v125);
    uint64_t v66 = sub_10013A76C();
    __chkstk_darwin(v66);
    *(&v110 - 2) = v67;
    *(&v110 - 1) = (void (*)(char *, char *, uint64_t))v63;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10018A7C0, &v110 - 4, &type metadata for () + 1);
    uint64_t v68 = swift_release(v66);
    uint64_t v69 = static os_log_type_t.default.getter(v68);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    id v114 = 0LL;
    uint64_t v70 = qword_10023DFC8;
    uint64_t v71 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v72 = swift_allocObject(v71, 72LL, 7LL);
    *(_OWORD *)(v72 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v73 = sub_1000A52AC();
    uint64_t v75 = v74;
    *(void *)(v72 + 56) = &type metadata for String;
    *(void *)(v72 + 64) = sub_10009914C();
    *(void *)(v72 + 32) = v73;
    *(void *)(v72 + 40) = v75;
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Saving sound profile record: %@", 31LL, 2LL, v72);
    swift_bridgeObjectRelease(v72);
    uint64_t v76 = (char *)_swiftEmptyArrayStorage;
    uint64_t v22 = v126;
    if ((v124 & 1) != 0)
    {
      sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v77 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v137 = sub_1000C2A00;
      uint64_t v138 = 0LL;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000F2C54;
      uint64_t v136 = &unk_10020FC88;
      uint64_t v78 = _Block_copy(aBlock);
      uint64_t v79 = v116;
      static DispatchQoS.unspecified.getter(v78);
      aBlock[0] = _swiftEmptyArrayStorage;
      uint64_t v80 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v81 = sub_100098CD8((uint64_t *)&unk_100235790);
      uint64_t v82 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
      id v36 = v119;
      unint64_t v83 = v121;
      uint64_t v84 = v80;
      uint64_t v76 = (char *)_swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v81, v82, v121, v84);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v79, v36, v78);
      _Block_release(v78);

      (*(void (**)(char *, unint64_t))(v120 + 8))(v36, v83);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v79, v118);
    }

    uint64_t v85 = sub_10013BA34();
    a1 = v85;
    aBlock[0] = _swiftEmptyArrayStorage;
    if (!*(void *)(v85 + 16)) {
      break;
    }
    uint64_t v53 = *(void *)(v85 + 16);
    unint64_t v31 = 0LL;
    uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    uint64_t v28 = type metadata accessor for BTDeferredRecord;
    unint64_t v121 = (unint64_t)"tsNew";
    unint64_t v124 = 0x80000001001CAB80LL;
    while (v31 < *(void *)(a1 + 16))
    {
      id v36 = (char *)((v131[80] + 32LL) & ~(unint64_t)v131[80]);
      uint64_t v86 = (void (*)(void, void, void))*((void *)v131 + 9);
      sub_1000A7C90((uint64_t)&v36[a1 + (void)v86 * v31], (uint64_t)v12, type metadata accessor for BTDeferredRecord);
      uint64_t v87 = *((void *)v12 + 1);
      uint64_t v88 = *((void *)v12 + 2);
      if (v87 == 0xD000000000000012LL && v88 == v124)
      {
        sub_1000A7C90((uint64_t)v12, v22, type metadata accessor for BTDeferredRecord);
      }

      else
      {
        char v89 = _stringCompareWithSmolCheck(_:_:expecting:)( v87,  v88,  0xD000000000000012LL,  v121 | 0x8000000000000000LL,  0LL);
        sub_1000A7C90((uint64_t)v12, v22, type metadata accessor for BTDeferredRecord);
        if ((v89 & 1) == 0)
        {
          sub_1000A7CD4(v22, type metadata accessor for BTDeferredRecord);
          goto LABEL_23;
        }
      }

      if (*(_BYTE *)v22 == 1)
      {
        swift_bridgeObjectRelease(0xE600000000000000LL);
        sub_1000A7CD4(v22, type metadata accessor for BTDeferredRecord);
LABEL_33:
        sub_1000C998C((uint64_t)v12, v132, type metadata accessor for BTDeferredRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0) {
          sub_1001611F4(0, *((void *)v54 + 2) + 1LL, 1);
        }
        uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))aBlock[0];
        unint64_t v92 = *(void *)(aBlock[0] + 16LL);
        unint64_t v91 = *(void *)(aBlock[0] + 24LL);
        if (v92 >= v91 >> 1)
        {
          sub_1001611F4(v91 > 1, v92 + 1, 1);
          uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))aBlock[0];
        }

        *((void *)v54 + 2) = v92 + 1;
        sub_1000C998C(v132, (uint64_t)&v36[(void)v54 + v92 * (void)v86], type metadata accessor for BTDeferredRecord);
        uint64_t v22 = v126;
        goto LABEL_24;
      }

      char v90 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x657461647075LL,  0xE600000000000000LL,  0x6574656C6564LL,  0xE600000000000000LL,  0LL);
      swift_bridgeObjectRelease(0xE600000000000000LL);
      sub_1000A7CD4(v22, type metadata accessor for BTDeferredRecord);
      if ((v90 & 1) != 0) {
        goto LABEL_33;
      }
LABEL_23:
      sub_1000A7CD4((uint64_t)v12, type metadata accessor for BTDeferredRecord);
LABEL_24:
      if (v53 == ++v31)
      {
        uint64_t v76 = (char *)aBlock[0];
        goto LABEL_39;
      }
    }

    __break(1u);
LABEL_47:
    swift_once(&qword_100234B50, sub_1000A513C);
  }

void sub_100148C3C(void **a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v51 - v6;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v51 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = (char *)*a1;
  uint64_t v17 = objc_autoreleasePoolPush();
  uint64_t v19 = *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  unint64_t v18 = *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000991CC(v19, v18);
  sub_100118B60(v19, v18);
  Class isa = v20;
  sub_100099394(v19, v18);
  if (!isa)
  {
    uint64_t v22 = v16;
    Class isa = sub_1000A3964((uint64_t)v22).super.isa;
  }

  v56[0] = isa;
  sub_100116DE8(v56);
  objc_autoreleasePoolPop(v17);
  id v23 = -[objc_class recordChangeTag](isa, "recordChangeTag");
  if (v23)
  {
    uint64_t v24 = v15;

    uint64_t v25 = &v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
    swift_beginAccess(&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v56, 0LL, 0LL);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v15, v25, v7);
    id v26 = -[objc_class modificationDate](isa, "modificationDate");
    if (v26)
    {
      uint64_t v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v29 = (uint64_t)v54;
      v28(v54, v10, v7);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v30(v29, 0LL, 1LL, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v29, 1LL, v7) != 1)
      {
        unint64_t v31 = v53;
        v28(v53, (char *)v29, v7);
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      uint64_t v29 = (uint64_t)v54;
      v30((uint64_t)v54, 1LL, 1LL, v7);
    }

    id v32 = -[objc_class creationDate](isa, "creationDate");
    if (v32)
    {
      uint64_t v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

      uint64_t v34 = *(void (**)(void))(v8 + 32);
      uint64_t v35 = (uint64_t)v52;
      v34();
      v30(v35, 0LL, 1LL, v7);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1LL, v7);
      if ((_DWORD)v36 != 1)
      {
        unint64_t v31 = v53;
        ((void (*)(char *, uint64_t, uint64_t))v34)(v53, v35, v7);
LABEL_13:
        sub_100099358(v29, (uint64_t *)&unk_100234E10);
LABEL_14:
        char v37 = static Date.> infix(_:_:)(v24, v31);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v31, v7);
        id v23 = (id)((uint64_t (*)(char *, uint64_t))v38)(v24, v7);
        if ((v37 & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v35 = (uint64_t)v52;
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v52, 1LL, 1LL, v7);
    }

    unint64_t v31 = v53;
    static Date.now.getter(v36);
    sub_100099358(v35, (uint64_t *)&unk_100234E10);
    goto LABEL_13;
  }

void sub_100149124(void **a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v51 - v6;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v51 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = (char *)*a1;
  uint64_t v17 = objc_autoreleasePoolPush();
  uint64_t v19 = *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  unint64_t v18 = *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000991CC(v19, v18);
  sub_100118B60(v19, v18);
  Class isa = v20;
  sub_100099394(v19, v18);
  if (!isa)
  {
    uint64_t v22 = v16;
    Class isa = sub_1000A3798((uint64_t)v22).super.isa;
  }

  v56[0] = isa;
  sub_1000A233C((unint64_t)v56);
  objc_autoreleasePoolPop(v17);
  id v23 = -[objc_class recordChangeTag](isa, "recordChangeTag");
  if (v23)
  {
    uint64_t v24 = v15;

    uint64_t v25 = &v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate];
    swift_beginAccess(&v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], v56, 0LL, 0LL);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v15, v25, v7);
    id v26 = -[objc_class modificationDate](isa, "modificationDate");
    if (v26)
    {
      uint64_t v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v29 = (uint64_t)v54;
      v28(v54, v10, v7);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v30(v29, 0LL, 1LL, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v29, 1LL, v7) != 1)
      {
        unint64_t v31 = v53;
        v28(v53, (char *)v29, v7);
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      uint64_t v29 = (uint64_t)v54;
      v30((uint64_t)v54, 1LL, 1LL, v7);
    }

    id v32 = -[objc_class creationDate](isa, "creationDate");
    if (v32)
    {
      uint64_t v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

      uint64_t v34 = *(void (**)(void))(v8 + 32);
      uint64_t v35 = (uint64_t)v52;
      v34();
      v30(v35, 0LL, 1LL, v7);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1LL, v7);
      if ((_DWORD)v36 != 1)
      {
        unint64_t v31 = v53;
        ((void (*)(char *, uint64_t, uint64_t))v34)(v53, v35, v7);
LABEL_13:
        sub_100099358(v29, (uint64_t *)&unk_100234E10);
LABEL_14:
        char v37 = static Date.> infix(_:_:)(v24, v31);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v31, v7);
        id v23 = (id)((uint64_t (*)(char *, uint64_t))v38)(v24, v7);
        if ((v37 & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v35 = (uint64_t)v52;
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v52, 1LL, 1LL, v7);
    }

    unint64_t v31 = v53;
    static Date.now.getter(v36);
    sub_100099358(v35, (uint64_t *)&unk_100234E10);
    goto LABEL_13;
  }

void sub_10014960C(void **a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v51 - v6;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v51 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = (char *)*a1;
  uint64_t v17 = objc_autoreleasePoolPush();
  uint64_t v19 = *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  unint64_t v18 = *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata + 8];
  sub_1000991CC(v19, v18);
  sub_100118B60(v19, v18);
  Class isa = v20;
  sub_100099394(v19, v18);
  if (!isa)
  {
    uint64_t v22 = v16;
    Class isa = sub_1000A3774((uint64_t)v22).super.isa;
  }

  v56[0] = isa;
  sub_1000E329C(v56);
  objc_autoreleasePoolPop(v17);
  id v23 = -[objc_class recordChangeTag](isa, "recordChangeTag");
  if (v23)
  {
    uint64_t v24 = v15;

    uint64_t v25 = &v16[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate];
    swift_beginAccess(&v16[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], v56, 0LL, 0LL);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v15, v25, v7);
    id v26 = -[objc_class modificationDate](isa, "modificationDate");
    if (v26)
    {
      uint64_t v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v29 = (uint64_t)v54;
      v28(v54, v10, v7);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v30(v29, 0LL, 1LL, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v29, 1LL, v7) != 1)
      {
        unint64_t v31 = v53;
        v28(v53, (char *)v29, v7);
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      uint64_t v29 = (uint64_t)v54;
      v30((uint64_t)v54, 1LL, 1LL, v7);
    }

    id v32 = -[objc_class creationDate](isa, "creationDate");
    if (v32)
    {
      uint64_t v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

      uint64_t v34 = *(void (**)(void))(v8 + 32);
      uint64_t v35 = (uint64_t)v52;
      v34();
      v30(v35, 0LL, 1LL, v7);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1LL, v7);
      if ((_DWORD)v36 != 1)
      {
        unint64_t v31 = v53;
        ((void (*)(char *, uint64_t, uint64_t))v34)(v53, v35, v7);
LABEL_13:
        sub_100099358(v29, (uint64_t *)&unk_100234E10);
LABEL_14:
        char v37 = static Date.> infix(_:_:)(v24, v31);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v31, v7);
        id v23 = (id)((uint64_t (*)(char *, uint64_t))v38)(v24, v7);
        if ((v37 & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v35 = (uint64_t)v52;
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v52, 1LL, 1LL, v7);
    }

    unint64_t v31 = v53;
    static Date.now.getter(v36);
    sub_100099358(v35, (uint64_t *)&unk_100234E10);
    goto LABEL_13;
  }

uint64_t sub_100149AF4(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a6;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v36, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v19 = result;
    uint64_t v30 = v12;
    uint64_t v20 = *(void **)(result + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    uint64_t v21 = swift_allocObject(a4, 40LL, 7LL);
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    char v22 = a2 & 1;
    *(_BYTE *)(v21 + 24) = v22;
    *(void *)(v21 + 32) = v19;
    aBlock[4] = a5;
    uint64_t v35 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = v31;
    id v23 = _Block_copy(aBlock);
    id v24 = v20;
    sub_10010BF1C(a1, v22);
    uint64_t v25 = swift_retain(v19);
    static DispatchQoS.unspecified.getter(v25);
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v26 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v28 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v11, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v23);
    _Block_release(v23);
    swift_release(v19);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v32);
    return swift_release(v35);
  }

  return result;
}

void sub_100149D40(void *a1, char a2, uint64_t a3, const char *a4, uint64_t a5)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = swift_errorRetain(a1);
    uint64_t v9 = static os_log_type_t.error.getter(v8);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v10 = qword_10023DFC8;
    uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v17 = a1;
    swift_errorRetain(a1);
    uint64_t v13 = sub_100098CD8(&qword_1002357C0);
    uint64_t v14 = String.init<A>(describing:)(&v17, v13);
    uint64_t v16 = v15;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10009914C();
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, a4, a5, 2LL, v12);
    swift_bridgeObjectRelease(v12);
    sub_100112C7C(a1, 1);
  }

  else
  {
    sub_1001418AC((char *)a1, (uint64_t)_swiftEmptyArrayStorage, 0);
    sub_100112C7C(a1, 0);
  }

uint64_t sub_100149EAC(void *a1)
{
  uint64_t v2 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v23 - v10;
  sub_10013A844((uint64_t)v23 - v10);
  LODWORD(v2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1LL, v2);
  uint64_t v12 = sub_100099358((uint64_t)v11, (uint64_t *)&unk_1002357E0);
  if ((_DWORD)v2 == 1)
  {
    sub_1000AAB04(a1, (uint64_t)v5);
    uint64_t v13 = sub_10013A76C();
    __chkstk_darwin(v13);
    v23[-2] = v14;
    v23[-1] = v5;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10018A810, &v23[-4], &type metadata for () + 1);
    sub_1000A7CD4((uint64_t)v5, type metadata accessor for LegacyAccountMagicKeysRecord);
    return swift_release(v13);
  }

  else
  {
    uint64_t v16 = static os_log_type_t.default.getter(v12);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v17 = qword_10023DFC8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    sub_10013A844((uint64_t)v8);
    uint64_t v20 = String.init<A>(describing:)(v8, v6);
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Account keys already set: %@", 28LL, 2LL, v19);
    return swift_bridgeObjectRelease(v19);
  }

uint64_t sub_10014A1E4()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_1002357E0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10013A844((uint64_t)v6);
  uint64_t v12 = sub_1000C998C((uint64_t)v6, (uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_10023DFC8,  "Deleting account magic keys",  27LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v14 = sub_10013A76C();
  uint64_t v15 = UUID.uuidString.getter(v14);
  uint64_t v17 = v16;
  if (qword_100234B58 != -1) {
    swift_once(&qword_100234B58, sub_1000AA360);
  }
  uint64_t v18 = sub_100098D58(v0, (uint64_t)qword_10023DD48);
  uint64_t v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v1 + 16))(v3, v18, v0);
  __chkstk_darwin(v19);
  *(void *)&v20[-32] = v14;
  *(void *)&v20[-24] = v15;
  *(void *)&v20[-16] = v17;
  *(void *)&v20[-8] = v3;
  OS_dispatch_queue.sync<A>(execute:)(&v21, sub_10018A6A0, &v20[-48], &type metadata for Bool);
  swift_release(v14);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  return sub_1000A7CD4((uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
}

void sub_10014A464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v160 = a5;
  uint64_t v159 = a6;
  uint64_t v139 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v139);
  uint64_t v142 = (void *)((char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v141 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v138 = (uint64_t)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v144 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v144);
  id v147 = (void *)((char *)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v146 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v143 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v158 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  __int128 v155 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v156 = (char *)&v137 - v17;
  __chkstk_darwin(v18);
  uint64_t v157 = (char *)&v137 - v19;
  uint64_t v151 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v151);
  uint64_t v154 = (void *)((char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v152 = *(void *)(v21 - 8);
  uint64_t v153 = v21;
  __chkstk_darwin(v21);
  uint64_t v148 = (uint64_t)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v25 = qword_10023DFC8;
  uint64_t v149 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v26 = swift_allocObject(v149, 112LL, 7LL);
  __int128 v137 = xmmword_1001A6F30;
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v26 + 56) = &type metadata for String;
  unint64_t v27 = sub_10009914C();
  *(void *)(v26 + 32) = a3;
  *(void *)(v26 + 40) = a4;
  *(void *)(v26 + 96) = &type metadata for String;
  *(void *)(v26 + 104) = v27;
  unint64_t v150 = v27;
  *(void *)(v26 + 64) = v27;
  *(void *)(v26 + 72) = a1;
  uint64_t v161 = a1;
  *(void *)(v26 + 80) = a2;
  swift_bridgeObjectRetain(a4);
  uint64_t v162 = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v25,  "CloudSync: Remove device record type: %@ with address: %@",  57LL,  2LL,  v26);
  swift_bridgeObjectRelease(v26);
  if (a3 == 0x6552656369766544LL && a4 == 0xEC00000064726F63LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, a3, a4, 0LL) & 1) != 0)
  {
    uint64_t v28 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v29 = v158;
    uint64_t v30 = sub_100098D58(v158, (uint64_t)qword_10023DCC0);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v32 = v14;
    uint64_t v33 = v157;
    v31(v157, v30, v29);
    uint64_t v34 = objc_autoreleasePoolPush();
    uint64_t v36 = URL.path.getter(v35);
    uint64_t v38 = v37;
    uint64_t v39 = v155;
    URL.appendingPathComponent(_:)(v36);
    swift_bridgeObjectRelease(v38);
    uint64_t v40 = v156;
    URL.appendingPathComponent(_:)(v161);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v32 + 8);
    v41(v39, v29);
    objc_autoreleasePoolPop(v34);
    uint64_t v42 = objc_autoreleasePoolPush();
    __chkstk_darwin(v42);
    *((void *)&v137 - 2) = v40;
    *((void *)&v137 - 1) = v28;
    uint64_t v43 = v154;
    OS_dispatch_queue.sync<A>(execute:)(v154, sub_10018A7FC, &v137 - 2, v151);
    objc_autoreleasePoolPop(v42);
    v41(v40, v29);
    swift_release(v28);
    v41(v33, v29);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v152 + 48))(v43, 1LL, v153) != 1)
    {
      uint64_t v50 = v148;
      sub_1000C998C((uint64_t)v43, v148, type metadata accessor for DeviceRecord);
      sub_10014B4D8(v50, (uint64_t (*)(void))v160, v159);
      sub_1000A7CD4(v50, type metadata accessor for DeviceRecord);
      return;
    }

    uint64_t v44 = sub_100099358((uint64_t)v43, &qword_100235848);
    uint64_t v45 = static os_log_type_t.error.getter(v44);
    uint64_t v46 = qword_10023DFC8;
    uint64_t v47 = swift_allocObject(v149, 72LL, 7LL);
    *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    unint64_t v48 = v150;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = v48;
    *(void *)(v47 + 32) = v161;
    uint64_t v49 = v162;
    *(void *)(v47 + 40) = v162;
    swift_bridgeObjectRetain(v49);
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "Device Record not found to remove: %@", 37LL, 2LL, v47);
    goto LABEL_18;
  }

  uint64_t v51 = v14;
  if (a3 == 0xD00000000000001ELL && a4 == 0x80000001001CABA0LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, a3, a4, 0LL) & 1) != 0)
  {
    uint64_t v52 = sub_10013A76C();
    if (qword_100234BC8 != -1) {
      swift_once(&qword_100234BC8, sub_1000E72E4);
    }
    uint64_t v53 = v158;
    uint64_t v54 = sub_100098D58(v158, (uint64_t)qword_10023DF00);
    uint64_t v55 = v51;
    __n128 v56 = v157;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v157, v54, v53);
    uint64_t v57 = objc_autoreleasePoolPush();
    uint64_t v59 = URL.path.getter(v58);
    uint64_t v61 = v60;
    uint64_t v62 = v155;
    URL.appendingPathComponent(_:)(v59);
    swift_bridgeObjectRelease(v61);
    uint64_t v63 = v156;
    URL.appendingPathComponent(_:)(v161);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v55 + 8);
    v64(v62, v53);
    objc_autoreleasePoolPop(v57);
    uint64_t v65 = objc_autoreleasePoolPush();
    __chkstk_darwin(v65);
    *((void *)&v137 - 2) = v63;
    *((void *)&v137 - 1) = v52;
    uint64_t v66 = v147;
    OS_dispatch_queue.sync<A>(execute:)(v147, sub_10018A7E8, &v137 - 2, v144);
    objc_autoreleasePoolPop(v65);
    v64(v63, v53);
    swift_release(v52);
    v64(v56, v53);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v145 + 48))(v66, 1LL, v146) == 1)
    {
      uint64_t v67 = sub_100099358((uint64_t)v66, &qword_100235828);
      uint64_t v68 = static os_log_type_t.error.getter(v67);
      uint64_t v69 = qword_10023DFC8;
      uint64_t v47 = swift_allocObject(v149, 72LL, 7LL);
      *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v70 = v150;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = v70;
      *(void *)(v47 + 32) = v161;
      uint64_t v71 = v162;
      *(void *)(v47 + 40) = v162;
      swift_bridgeObjectRetain(v71);
      os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  v69,  "Support Info Record not found to remove: %@",  43LL,  2LL,  v47);
LABEL_18:
      uint64_t v72 = v47;
LABEL_19:
      swift_bridgeObjectRelease(v72);
      ((void (*)(void))v160)(0LL);
      return;
    }

    uint64_t v73 = type metadata accessor for DeviceSupportInformationRecord;
    uint64_t v74 = v143;
    sub_1000C998C((uint64_t)v66, v143, type metadata accessor for DeviceSupportInformationRecord);
    sub_100152118(v74, (void (*)(void))v160, v159);
LABEL_29:
    sub_1000A7CD4(v74, v73);
    return;
  }

  uint64_t v75 = v162;
  if (a3 == 0x746553636967614DLL && a4 == 0xED000073676E6974LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, a3, a4, 0LL) & 1) != 0)
  {
    uint64_t v76 = sub_10013A76C();
    if (qword_100234B70 != -1) {
      swift_once(&qword_100234B70, sub_1000CAF84);
    }
    uint64_t v77 = v158;
    uint64_t v78 = sub_100098D58(v158, (uint64_t)qword_10023DD70);
    uint64_t v79 = v51;
    uint64_t v80 = v157;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v157, v78, v77);
    uint64_t v81 = objc_autoreleasePoolPush();
    uint64_t v83 = URL.path.getter(v82);
    uint64_t v85 = v84;
    uint64_t v86 = v155;
    URL.appendingPathComponent(_:)(v83);
    swift_bridgeObjectRelease(v85);
    uint64_t v87 = v156;
    URL.appendingPathComponent(_:)(v161);
    uint64_t v88 = *(void (**)(char *, uint64_t))(v79 + 8);
    v88(v86, v77);
    objc_autoreleasePoolPop(v81);
    char v89 = objc_autoreleasePoolPush();
    __chkstk_darwin(v89);
    *((void *)&v137 - 2) = v87;
    *((void *)&v137 - 1) = v76;
    char v90 = v142;
    OS_dispatch_queue.sync<A>(execute:)(v142, sub_10018A7D4, &v137 - 2, v139);
    objc_autoreleasePoolPop(v89);
    v88(v87, v77);
    swift_release(v76);
    v88(v80, v77);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v140 + 48))(v90, 1LL, v141) == 1)
    {
      uint64_t v91 = sub_100099358((uint64_t)v90, (uint64_t *)&unk_100235810);
      uint64_t v92 = static os_log_type_t.error.getter(v91);
      uint64_t v93 = qword_10023DFC8;
      uint64_t v47 = swift_allocObject(v149, 72LL, 7LL);
      *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v94 = v150;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = v94;
      *(void *)(v47 + 32) = v161;
      uint64_t v95 = v162;
      *(void *)(v47 + 40) = v162;
      swift_bridgeObjectRetain(v95);
      os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "Magic Record not found to remove: %@", 36LL, 2LL, v47);
      goto LABEL_18;
    }

    uint64_t v73 = type metadata accessor for MagicPairingSettingsRecord;
    uint64_t v74 = v138;
    sub_1000C998C((uint64_t)v90, v138, type metadata accessor for MagicPairingSettingsRecord);
    sub_100157070(v74, 0, (uint64_t (*)(void))v160, v159);
    goto LABEL_29;
  }

  if ((a3 != 0x6563697665444141LL || a4 != 0xEE0064726F636552LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141LL, 0xEE0064726F636552LL, a3, a4, 0LL) & 1) == 0)
  {
    uint64_t v97 = v161;
    if ((a3 != 0xD000000000000011LL || a4 != 0x80000001001D2A80LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001D2A80LL, a3, a4, 0LL) & 1) == 0)
    {
      if (a3 != 0xD000000000000013LL || a4 != 0x80000001001CB4E0LL)
      {
        uint64_t v121 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CB4E0LL, a3, a4, 0LL);
        if ((v121 & 1) == 0)
        {
          uint64_t v133 = static os_log_type_t.error.getter(v121);
          uint64_t v134 = qword_10023DFC8;
          uint64_t v135 = swift_allocObject(v149, 112LL, 7LL);
          *(_OWORD *)(v135 + swift_unknownObjectWeakDestroy(v0 + 16) = v137;
          unint64_t v136 = v150;
          *(void *)(v135 + 56) = &type metadata for String;
          *(void *)(v135 + 64) = v136;
          *(void *)(v135 + 32) = a3;
          *(void *)(v135 + 40) = a4;
          *(void *)(v135 + 96) = &type metadata for String;
          *(void *)(v135 + 104) = v136;
          *(void *)(v135 + 72) = v97;
          *(void *)(v135 + 80) = v75;
          swift_bridgeObjectRetain(a4);
          swift_bridgeObjectRetain(v75);
          os_log(_:dso:log:_:_:)( v133,  &_mh_execute_header,  v134,  "Unknown record type: %@ for address: %@",  39LL,  2LL,  v135);
          uint64_t v72 = v135;
          goto LABEL_19;
        }
      }

      goto LABEL_51;
    }

uint64_t sub_10014B4D8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v145 = a3;
  uint64_t v146 = a2;
  uint64_t v138 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v137 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  unint64_t v136 = (uint64_t *)((char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v135 = type metadata accessor for Date(0LL);
  uint64_t v133 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v130 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for UUID(0LL);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v129 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v131);
  uint64_t v140 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v151 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v150 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v153 = (char *)&v123 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v123 - v15;
  uint64_t v152 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v152);
  uint64_t v154 = (uint64_t *)((char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v155 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v125 = (uint64_t)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v123 = (uint64_t)&v123 - v21;
  __chkstk_darwin(v22);
  uint64_t v128 = (uint64_t)&v123 - v23;
  __chkstk_darwin(v24);
  uint64_t v126 = (uint64_t)&v123 - v25;
  uint64_t v124 = v26;
  __chkstk_darwin(v27);
  uint64_t v139 = (uint64_t *)((char *)&v123 - v28);
  uint64_t v30 = static os_log_type_t.default.getter(v29);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v31 = qword_10023DFC8;
  uint64_t v142 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v32 = swift_allocObject(v142, 72LL, 7LL);
  __int128 v141 = xmmword_1001A5EA0;
  *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v33 = sub_100094CA4();
  uint64_t v35 = v34;
  *(void *)(v32 + 56) = &type metadata for String;
  unint64_t v143 = sub_10009914C();
  *(void *)(v32 + 64) = v143;
  *(void *)(v32 + 32) = v33;
  *(void *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "CloudSync: Remove device record: %@", 35LL, 2LL, v32);
  swift_bridgeObjectRelease(v32);
  uint64_t v144 = v4;
  uint64_t v36 = sub_10013A76C();
  uint64_t v37 = *(int *)(v18 + 24);
  uint64_t v156 = a1;
  uint64_t v38 = (uint64_t *)(a1 + v37);
  uint64_t v148 = *v38;
  uint64_t v149 = v18;
  uint64_t v127 = v38;
  if (qword_100234B30 != -1) {
    swift_once(&qword_100234B30, sub_100094AFC);
  }
  uint64_t v39 = v10;
  uint64_t v40 = sub_100098D58(v10, (uint64_t)qword_10023DCC0);
  uint64_t v41 = v151;
  (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v16, v40, v10);
  id v147 = objc_autoreleasePoolPush();
  uint64_t v43 = URL.path.getter(v42);
  uint64_t v45 = v44;
  uint64_t v46 = v150;
  URL.appendingPathComponent(_:)(v43);
  swift_bridgeObjectRelease(v45);
  uint64_t v47 = (uint64_t)v153;
  URL.appendingPathComponent(_:)(v148);
  unint64_t v48 = *(void (**)(char *, uint64_t))(v41 + 8);
  v48(v46, v39);
  objc_autoreleasePoolPop(v147);
  uint64_t v49 = objc_autoreleasePoolPush();
  __chkstk_darwin(v49);
  *(&v123 - 2) = v47;
  *(&v123 - 1) = v36;
  uint64_t v50 = v154;
  OS_dispatch_queue.sync<A>(execute:)(v154, sub_10018A7FC, &v123 - 4, v152);
  objc_autoreleasePoolPop(v49);
  v48((char *)v47, v39);
  swift_release(v36);
  v48(v16, v39);
  uint64_t v51 = v149;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v155 + 48))(v50, 1LL, v149) == 1)
  {
    uint64_t v52 = sub_100099358((uint64_t)v50, &qword_100235848);
    uint64_t v53 = static os_log_type_t.error.getter(v52);
    uint64_t v54 = qword_10023DFC8;
    uint64_t v55 = swift_allocObject(v142, 72LL, 7LL);
    *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = v141;
    uint64_t v56 = sub_100094CA4();
    unint64_t v57 = v143;
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 64) = v57;
    *(void *)(v55 + 32) = v56;
    *(void *)(v55 + 40) = v58;
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "Record not found to remove: %@", 30LL, 2LL, v55);
    swift_bridgeObjectRelease(v55);
    return v146(0LL);
  }

  else
  {
    uint64_t v60 = (uint64_t)v50;
    uint64_t v61 = v139;
    sub_1000C998C(v60, (uint64_t)v139, type metadata accessor for DeviceRecord);
    uint64_t v62 = objc_autoreleasePoolPush();
    uint64_t v63 = *v61;
    unint64_t v64 = v61[1];
    sub_1000991CC(*v61, v64);
    sub_100118B60(v63, v64);
    Class isa = v65;
    sub_100099394(v63, v64);
    uint64_t v67 = v126;
    sub_1000A7C90((uint64_t)v61, v126, type metadata accessor for DeviceRecord);
    if (!isa) {
      Class isa = sub_1000A35AC().super.isa;
    }
    sub_1000A7CD4(v67, type metadata accessor for DeviceRecord);
    uint64_t v68 = (uint64_t)v140;
    Class v157 = isa;
    sub_100096A48((id *)&v157);
    objc_autoreleasePoolPop(v62);
    id v69 = -[objc_class recordID](isa, "recordID");

    unint64_t v70 = objc_autoreleasePoolPush();
    uint64_t v71 = *v61;
    unint64_t v72 = v61[1];
    sub_1000991CC(*v61, v72);
    sub_100118B60(v71, v72);
    Class v74 = v73;
    sub_100099394(v71, v72);
    uint64_t v75 = v128;
    sub_1000A7C90((uint64_t)v61, v128, type metadata accessor for DeviceRecord);
    if (!v74) {
      Class v74 = sub_1000A35AC().super.isa;
    }
    sub_1000A7CD4(v75, type metadata accessor for DeviceRecord);
    Class v157 = v74;
    sub_100096A48((id *)&v157);
    objc_autoreleasePoolPop(v70);
    uint64_t v77 = CKRecord.recordType.getter(v76);
    uint64_t v79 = v78;

    uint64_t v80 = v144;
    sub_10014C090(v69, v77, v79, 0);

    swift_bridgeObjectRelease(v79);
    uint64_t v81 = v156 + *(int *)(v51 + 20);
    uint64_t v82 = v132;
    uint64_t v83 = v129;
    uint64_t v84 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v129, v81, v134);
    uint64_t v86 = *v127;
    uint64_t v85 = v127[1];
    uint64_t v87 = swift_bridgeObjectRetain(v85);
    uint64_t v88 = v130;
    uint64_t v89 = Date.init()(v87);
    double v90 = Date.timeIntervalSince1970.getter(v89);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v88, v135);
    *(_BYTE *)uint64_t v68 = 1;
    strcpy((char *)(v68 + 8), "DeviceRecord");
    *(_BYTE *)(v68 + 21) = 0;
    *(_WORD *)(v68 + 22) = -5120;
    uint64_t v91 = (int *)v131;
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v68 + *(int *)(v131 + 24), v83, v84);
    uint64_t v92 = (void *)(v68 + v91[7]);
    *uint64_t v92 = v86;
    v92[1] = v85;
    *(double *)(v68 + v91[8]) = v90;
    *(_OWORD *)(v68 + v91[9]) = xmmword_1001A9700;
    uint64_t v93 = objc_autoreleasePoolPush();
    sub_10015802C(v80, v68);
    objc_autoreleasePoolPop(v93);
    uint64_t v94 = sub_10013B740();
    uint64_t v95 = *(void **)(v94 + 72);
    char v96 = v136;
    *unint64_t v136 = v95;
    uint64_t v97 = v137;
    uint64_t v98 = v138;
    (*(void (**)(void *, void, uint64_t))(v137 + 104))( v96,  enum case for DispatchPredicate.notOnQueue(_:),  v138);
    id v99 = v95;
    LOBYTE(v86) = _dispatchPreconditionTest(_:)(v96);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v97 + 8))(v96, v98);
    if ((v86 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v157, sub_100187664, v94, &type metadata for Bool);
      uint64_t v100 = swift_unknownObjectRelease(v94);
      if (v157 == 1)
      {
        uint64_t v101 = sub_10013B740();
        uint64_t v102 = objc_autoreleasePoolPush();
        uint64_t v103 = *v61;
        unint64_t v104 = v61[1];
        sub_1000991CC(*v61, v104);
        sub_100118B60(v103, v104);
        Class v106 = v105;
        sub_100099394(v103, v104);
        uint64_t v107 = v123;
        sub_1000A7C90((uint64_t)v61, v123, type metadata accessor for DeviceRecord);
        if (!v106) {
          Class v106 = sub_1000A35AC().super.isa;
        }
        sub_1000A7CD4(v107, type metadata accessor for DeviceRecord);
        Class v157 = v106;
        sub_100096A48((id *)&v157);
        objc_autoreleasePoolPop(v102);
        id v108 = -[objc_class recordID](v106, "recordID");

        uint64_t v109 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
        swift_weakInit(v109 + 16, v144);
        uint64_t v110 = v125;
        sub_1000A7C90((uint64_t)v61, v125, type metadata accessor for DeviceRecord);
        uint64_t v111 = *(unsigned __int8 *)(v155 + 80);
        uint64_t v112 = (v111 + 16) & ~v111;
        unint64_t v113 = (v124 + v112 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v114 = swift_allocObject(&unk_100210238, v113 + 8, v111 | 7);
        sub_1000C998C(v110, v114 + v112, type metadata accessor for DeviceRecord);
        *(void *)(v114 + v113) = v109;
        uint64_t v115 = swift_allocObject(&unk_100210260, 49LL, 7LL);
        *(void *)(v115 + swift_unknownObjectWeakDestroy(v0 + 16) = v101;
        *(void *)(v115 + 24) = v108;
        *(void *)(v115 + 32) = sub_100187CD0;
        *(void *)(v115 + 40) = v114;
        *(_BYTE *)(v115 + 48) = 1;
        swift_retain(v109);
        swift_unknownObjectRetain(v101);
        id v116 = v108;
        swift_retain(v114);
        sub_100104BA4((uint64_t)sub_10018749C, v115);
        swift_release(v109);
        swift_release(v114);
        swift_unknownObjectRelease(v101);

        swift_release(v115);
      }

      else
      {
        uint64_t v117 = static os_log_type_t.error.getter(v100);
        uint64_t v118 = qword_10023DFC8;
        uint64_t v119 = swift_allocObject(v142, 72LL, 7LL);
        *(_OWORD *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = v141;
        uint64_t v120 = sub_100094CA4();
        unint64_t v121 = v143;
        *(void *)(v119 + 56) = &type metadata for String;
        *(void *)(v119 + 64) = v121;
        *(void *)(v119 + 32) = v120;
        *(void *)(v119 + 40) = v122;
        os_log(_:dso:log:_:_:)( v117,  &_mh_execute_header,  v118,  "CloudCoordinator not available. Defer deleting record - %@",  58LL,  2LL,  v119);
        swift_bridgeObjectRelease(v119);
      }

      v146(0LL);
      sub_1000A7CD4(v68, type metadata accessor for BTDeferredRecord);
      return sub_1000A7CD4((uint64_t)v61, type metadata accessor for DeviceRecord);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

void sub_10014C090(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v366 = a4;
  uint64_t v371 = a2;
  uint64_t v372 = a3;
  uint64_t v337 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v336 = *(void *)(v337 - 8);
  __chkstk_darwin(v337);
  uint64_t v335 = (char *)&v330 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v334 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v333 = *(void *)(v334 - 8);
  __chkstk_darwin(v334);
  uint64_t v332 = (char *)&v330 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v7);
  uint64_t v345 = (uint64_t)&v330 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v344 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v343 = *(void *)(v344 - 8);
  __chkstk_darwin(v344);
  uint64_t v342 = (uint64_t)&v330 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v10);
  uint64_t v353 = (uint64_t)&v330 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v352 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v351 = *(void *)(v352 - 8);
  __chkstk_darwin(v352);
  NSString v350 = (char *)&v330 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v348 = (uint64_t)&v330 - v14;
  uint64_t v15 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v15);
  uint64_t v360 = (uint64_t)&v330 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v359 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v358 = *(void *)(v359 - 8);
  __chkstk_darwin(v359);
  unint64_t v357 = (char *)&v330 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v355 = (uint64_t)&v330 - v19;
  uint64_t v365 = type metadata accessor for URL(0LL);
  uint64_t v363 = *(void *)(v365 - 8);
  __chkstk_darwin(v365);
  uint64_t v364 = (char *)&v330 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v21);
  uint64_t v367 = (uint64_t)&v330 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v368 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v330 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v362 = (uint64_t)&v330 - v27;
  uint64_t v28 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v28);
  uint64_t v340 = (char *)&v330 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  unint64_t v339 = (char *)&v330 - v31;
  __chkstk_darwin(v32);
  id v341 = (char *)&v330 - v33;
  __chkstk_darwin(v34);
  double v347 = (char *)&v330 - v35;
  __chkstk_darwin(v36);
  uint64_t v354 = (char *)&v330 - v37;
  __chkstk_darwin(v38);
  id v361 = (char *)&v330 - v39;
  __chkstk_darwin(v40);
  __n128 v42 = (char *)&v330 - v41;
  uint64_t v43 = type metadata accessor for UUID(0LL);
  uint64_t v373 = *(void *)(v43 - 8);
  uint64_t v374 = v43;
  __chkstk_darwin(v43);
  uint64_t v338 = (char *)&v330 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45);
  uint64_t v330 = (char *)&v330 - v46;
  __chkstk_darwin(v47);
  uint64_t v331 = (char *)&v330 - v48;
  __chkstk_darwin(v49);
  uint64_t v346 = (char *)&v330 - v50;
  __chkstk_darwin(v51);
  id v349 = (char *)&v330 - v52;
  __chkstk_darwin(v53);
  id v356 = (char *)&v330 - v54;
  __chkstk_darwin(v55);
  unint64_t v57 = (char *)&v330 - v56;
  uint64_t v59 = static os_log_type_t.default.getter(v58);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v60 = qword_10023DFC8;
  uint64_t v369 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v61 = swift_allocObject(v369, 112LL, 7LL);
  *(_OWORD *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v61 + 56) = sub_1000A4A64(0LL, &qword_100235E10, &OBJC_CLASS___CKRecordID_ptr);
  *(void *)(v61 + 64) = sub_1000C934C( (unint64_t *)&unk_100236ED0,  &qword_100235E10,  &OBJC_CLASS___CKRecordID_ptr);
  *(void *)(v61 + 32) = a1;
  *(void *)(v61 + 96) = &type metadata for String;
  unint64_t v370 = sub_10009914C();
  *(void *)(v61 + 104) = v370;
  uint64_t v62 = a1;
  uint64_t v63 = v371;
  uint64_t v64 = v372;
  *(void *)(v61 + 72) = v371;
  *(void *)(v61 + 80) = v64;
  id v65 = v62;
  swift_bridgeObjectRetain(v64);
  os_log(_:dso:log:_:_:)( v59,  &_mh_execute_header,  v60,  "Process Cloud delete recordID: %@ recordType: %@",  48LL,  2LL,  v61);
  swift_bridgeObjectRelease(v61);
  if (v63 == 0x6552656369766544LL && v64 == 0xEC00000064726F63LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, v63, v64, 0LL) & 1) != 0)
  {
    id v66 = [v65 recordName];
    uint64_t v67 = v65;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    uint64_t v70 = v69;

    UUID.init(uuidString:)(v68, v70);
    swift_bridgeObjectRelease(v70);
    uint64_t v72 = v373;
    uint64_t v71 = v374;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v373 + 48))(v42, 1LL, v374) == 1)
    {
      uint64_t v73 = sub_100099358((uint64_t)v42, &qword_100234E20);
      uint64_t v74 = static os_log_type_t.error.getter(v73);
      uint64_t v75 = qword_10023DFC8;
      uint64_t v76 = swift_allocObject(v369, 72LL, 7LL);
      *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      id v77 = [v67 recordName];
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      uint64_t v80 = v79;

      unint64_t v81 = v370;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v81;
      *(void *)(v76 + 32) = v78;
      *(void *)(v76 + 40) = v80;
      os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v75, "Invalid device identifier: %@", 29LL, 2LL, v76);
LABEL_63:
      swift_bridgeObjectRelease(v76);
      return;
    }

    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v57, v42, v71);
    id v82 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v82)
    {
      uint64_t v83 = sub_10013A76C();
      if (qword_100234B30 != -1) {
        swift_once(&qword_100234B30, sub_100094AFC);
      }
      uint64_t v84 = v365;
      uint64_t v85 = sub_100098D58(v365, (uint64_t)qword_10023DCC0);
      uint64_t v87 = v363;
      uint64_t v86 = (uint64_t)v364;
      (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v364, v85, v84);
      uint64_t v88 = sub_100139314( v86,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
      swift_release(v83);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v84);
      uint64_t v89 = v88[2];
      if (!v89) {
        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v110 = static os_log_type_t.error.getter(v82);
      uint64_t v88 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v110,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v89 = _swiftEmptyArrayStorage[2];
      if (!v89)
      {
LABEL_24:
        uint64_t v113 = 1LL;
        uint64_t v114 = v367;
LABEL_26:
        uint64_t v115 = v368;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v368 + 56))(v114, v113, 1LL, v23);
        swift_bridgeObjectRelease(v88);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v114, 1LL, v23) == 1)
        {
          uint64_t v116 = sub_100099358(v114, &qword_100235848);
          uint64_t v117 = static os_log_type_t.error.getter(v116);
          uint64_t v118 = qword_10023DFC8;
          uint64_t v119 = swift_allocObject(v369, 72LL, 7LL);
          *(_OWORD *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
          id v120 = [v67 recordName];
          uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
          uint64_t v123 = v122;

          unint64_t v124 = v370;
          *(void *)(v119 + 56) = &type metadata for String;
          *(void *)(v119 + 64) = v124;
          *(void *)(v119 + 32) = v121;
          *(void *)(v119 + 40) = v123;
          os_log(_:dso:log:_:_:)( v117,  &_mh_execute_header,  v118,  "Unable to find cached record to delete: %@",  42LL,  2LL,  v119);
LABEL_28:
          swift_bridgeObjectRelease(v119);
LABEL_32:
          (*(void (**)(char *, uint64_t))(v373 + 8))(v57, v374);
          return;
        }

        uint64_t v125 = type metadata accessor for DeviceRecord;
        uint64_t v126 = v362;
        sub_1000C998C(v114, v362, type metadata accessor for DeviceRecord);
        sub_10014E61C(v126, v366 & 1);
        goto LABEL_30;
      }
    }

    uint64_t v111 = (uint64_t)v88
         + ((*(unsigned __int8 *)(v368 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v368 + 80));
    uint64_t v112 = *(void *)(v368 + 72);
    swift_bridgeObjectRetain(v88);
    while (1)
    {
      sub_1000A7C90(v111, (uint64_t)v25, type metadata accessor for DeviceRecord);
      sub_1000A7CD4((uint64_t)v25, type metadata accessor for DeviceRecord);
      v111 += v112;
      if (!--v89)
      {
        swift_bridgeObjectRelease(v88);
        goto LABEL_24;
      }
    }

    swift_bridgeObjectRelease(v88);
    uint64_t v114 = v367;
    sub_1000C998C((uint64_t)v25, v367, type metadata accessor for DeviceRecord);
    uint64_t v113 = 0LL;
    goto LABEL_26;
  }

  double v90 = v65;
  if (v63 == 0xD00000000000001ELL && v64 == 0x80000001001CABA0LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, v63, v64, 0LL) & 1) != 0)
  {
    id v91 = [v65 recordName];
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    uint64_t v94 = v93;

    uint64_t v95 = (uint64_t)v361;
    UUID.init(uuidString:)(v92, v94);
    swift_bridgeObjectRelease(v94);
    uint64_t v97 = v373;
    uint64_t v96 = v374;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v373 + 48))(v95, 1LL, v374) == 1)
    {
      uint64_t v98 = sub_100099358(v95, &qword_100234E20);
      uint64_t v99 = static os_log_type_t.error.getter(v98);
      uint64_t v100 = qword_10023DFC8;
      uint64_t v76 = swift_allocObject(v369, 72LL, 7LL);
      *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      id v101 = [v90 recordName];
      uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
      uint64_t v104 = v103;

      unint64_t v105 = v370;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v105;
      *(void *)(v76 + 32) = v102;
      *(void *)(v76 + 40) = v104;
      Class v106 = "Invalid device support identifier: %@";
LABEL_18:
      uint64_t v107 = v99;
      uint64_t v108 = v100;
      uint64_t v109 = 37LL;
LABEL_62:
      os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, v108, v106, v109, 2LL, v76);
      goto LABEL_63;
    }

    unint64_t v57 = v356;
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v356, v95, v96);
    id v129 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v129)
    {
      uint64_t v130 = sub_10013A76C();
      uint64_t v131 = v358;
      uint64_t v132 = (uint64_t)v357;
      if (qword_100234BC8 != -1) {
        swift_once(&qword_100234BC8, sub_1000E72E4);
      }
      uint64_t v133 = v365;
      uint64_t v134 = sub_100098D58(v365, (uint64_t)qword_10023DF00);
      uint64_t v136 = v363;
      uint64_t v135 = (uint64_t)v364;
      (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v364, v134, v133);
      uint64_t v137 = sub_100139314( v135,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
      swift_release(v130);
      (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v133);
      uint64_t v138 = v137[2];
      if (!v138) {
        goto LABEL_48;
      }
    }

    else
    {
      uint64_t v146 = static os_log_type_t.error.getter(v129);
      uint64_t v137 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v146,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v131 = v358;
      uint64_t v132 = (uint64_t)v357;
      uint64_t v138 = _swiftEmptyArrayStorage[2];
      if (!v138)
      {
LABEL_48:
        uint64_t v149 = 1LL;
        uint64_t v150 = v360;
LABEL_50:
        uint64_t v151 = v359;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v150, v149, 1LL, v359);
        swift_bridgeObjectRelease(v137);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v150, 1LL, v151) == 1)
        {
          uint64_t v152 = sub_100099358(v150, &qword_100235828);
          uint64_t v153 = static os_log_type_t.error.getter(v152);
          uint64_t v154 = qword_10023DFC8;
          uint64_t v119 = swift_allocObject(v369, 72LL, 7LL);
          *(_OWORD *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
          id v155 = [v90 recordName];
          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
          uint64_t v158 = v157;

          unint64_t v159 = v370;
          *(void *)(v119 + 56) = &type metadata for String;
          *(void *)(v119 + 64) = v159;
          *(void *)(v119 + 32) = v156;
          *(void *)(v119 + 40) = v158;
          os_log(_:dso:log:_:_:)( v153,  &_mh_execute_header,  v154,  "Unable to find cached info record to delete: %@",  47LL,  2LL,  v119);
          goto LABEL_28;
        }

        uint64_t v125 = type metadata accessor for DeviceSupportInformationRecord;
        uint64_t v126 = v355;
        sub_1000C998C(v150, v355, type metadata accessor for DeviceSupportInformationRecord);
        sub_10014ECD4(v126, v366 & 1);
        goto LABEL_30;
      }
    }

    uint64_t v147 = (uint64_t)v137
         + ((*(unsigned __int8 *)(v131 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    uint64_t v148 = *(void *)(v131 + 72);
    swift_bridgeObjectRetain(v137);
    while (1)
    {
      sub_1000A7C90(v147, v132, type metadata accessor for DeviceSupportInformationRecord);
      if ((static UUID.== infix(_:_:)(v132) & 1) != 0) {
        break;
      }
      sub_1000A7CD4(v132, type metadata accessor for DeviceSupportInformationRecord);
      v147 += v148;
      if (!--v138)
      {
        swift_bridgeObjectRelease(v137);
        goto LABEL_48;
      }
    }

    swift_bridgeObjectRelease(v137);
    uint64_t v150 = v360;
    sub_1000C998C(v132, v360, type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v149 = 0LL;
    goto LABEL_50;
  }

  if (v63 == 0x746553636967614DLL && v64 == 0xED000073676E6974LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, v63, v64, 0LL) & 1) != 0)
  {
    id v139 = [v65 recordName];
    uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
    uint64_t v142 = v141;

    uint64_t v143 = (uint64_t)v354;
    UUID.init(uuidString:)(v140, v142);
    swift_bridgeObjectRelease(v142);
    uint64_t v145 = v373;
    uint64_t v144 = v374;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v373 + 48))(v143, 1LL, v374) != 1)
    {
      unint64_t v57 = v349;
      (*(void (**)(char *, uint64_t, uint64_t))(v145 + 32))(v349, v143, v144);
      id v160 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
      if ((_DWORD)v160)
      {
        uint64_t v161 = sub_10013A76C();
        uint64_t v162 = v351;
        uint64_t v163 = (uint64_t)v350;
        if (qword_100234B70 != -1) {
          swift_once(&qword_100234B70, sub_1000CAF84);
        }
        uint64_t v164 = v365;
        uint64_t v165 = sub_100098D58(v365, (uint64_t)qword_10023DD70);
        uint64_t v167 = v363;
        uint64_t v166 = (uint64_t)v364;
        (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v364, v165, v164);
        uint64_t v168 = sub_100139314( v166,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
        swift_release(v161);
        (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v166, v164);
      }

      else
      {
        uint64_t v183 = static os_log_type_t.error.getter(v160);
        uint64_t v168 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v183,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
        uint64_t v162 = v351;
        uint64_t v163 = (uint64_t)v350;
      }

      uint64_t v184 = v168[2];
      if (v184)
      {
        uint64_t v185 = (uint64_t)v168
             + ((*(unsigned __int8 *)(v162 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
        uint64_t v186 = *(void *)(v162 + 72);
        swift_bridgeObjectRetain(v168);
        while (1)
        {
          sub_1000A7C90(v185, v163, type metadata accessor for MagicPairingSettingsRecord);
          if ((static UUID.== infix(_:_:)(v163) & 1) != 0) {
            break;
          }
          sub_1000A7CD4(v163, type metadata accessor for MagicPairingSettingsRecord);
          v185 += v186;
          if (!--v184)
          {
            swift_bridgeObjectRelease(v168);
            goto LABEL_70;
          }
        }

        swift_bridgeObjectRelease(v168);
        uint64_t v188 = v353;
        sub_1000C998C(v163, v353, type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v187 = 0LL;
      }

      else
      {
LABEL_70:
        uint64_t v187 = 1LL;
        uint64_t v188 = v353;
      }

      uint64_t v189 = v352;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v162 + 56))(v188, v187, 1LL, v352);
      swift_bridgeObjectRelease(v168);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v188, 1LL, v189) == 1)
      {
        uint64_t v190 = sub_100099358(v188, (uint64_t *)&unk_100235810);
        uint64_t v191 = static os_log_type_t.error.getter(v190);
        uint64_t v192 = qword_10023DFC8;
        uint64_t v119 = swift_allocObject(v369, 72LL, 7LL);
        *(_OWORD *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        id v193 = [v90 recordName];
        uint64_t v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
        uint64_t v196 = v195;

        unint64_t v197 = v370;
        *(void *)(v119 + 56) = &type metadata for String;
        *(void *)(v119 + 64) = v197;
        *(void *)(v119 + 32) = v194;
        *(void *)(v119 + 40) = v196;
        os_log(_:dso:log:_:_:)( v191,  &_mh_execute_header,  v192,  "Unable to find cached magic record to delete: %@",  48LL,  2LL,  v119);
        goto LABEL_28;
      }

      uint64_t v125 = type metadata accessor for MagicPairingSettingsRecord;
      uint64_t v126 = v348;
      sub_1000C998C(v188, v348, type metadata accessor for MagicPairingSettingsRecord);
      sub_10014F39C(v126, v366 & 1);
LABEL_30:
      uint64_t v127 = v126;
      uint64_t v128 = v125;
LABEL_31:
      sub_1000A7CD4(v127, v128);
      goto LABEL_32;
    }

    goto LABEL_61;
  }

  if (v63 == 0xD000000000000012LL && v64 == 0x80000001001CAB80LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001001CAB80LL, v63, v64, 0LL) & 1) != 0)
  {
    id v169 = [v65 recordName];
    uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v169);
    uint64_t v172 = v171;

    uint64_t v143 = (uint64_t)v347;
    UUID.init(uuidString:)(v170, v172);
    swift_bridgeObjectRelease(v172);
    uint64_t v174 = v373;
    uint64_t v173 = v374;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v373 + 48))(v143, 1LL, v374) != 1)
    {
      unint64_t v57 = v346;
      (*(void (**)(char *, uint64_t, uint64_t))(v174 + 32))(v346, v143, v173);
      uint64_t v198 = v345;
      sub_10013C84C(v345);
      uint64_t v199 = v344;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v343 + 48))(v198, 1LL, v344) == 1)
      {
        uint64_t v200 = sub_100099358(v198, &qword_1002357D0);
      }

      else
      {
        uint64_t v216 = v342;
        sub_1000C998C(v198, v342, type metadata accessor for SoundProfileRecord);
        if ((static UUID.== infix(_:_:)(v216 + *(int *)(v199 + 20)) & 1) != 0)
        {
          sub_10014FA04(v216, 0);
          if ((v366 & 1) != 0)
          {
            sub_1000A4A64(0LL, (unint64_t *)&qword_1002365E0, &OBJC_CLASS___OS_dispatch_queue_ptr);
            BOOL v217 = (void *)static OS_dispatch_queue.main.getter();
            uint64_t v377 = sub_1000C2A00;
            uint64_t v378 = 0LL;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256LL;
            aBlock[2] = sub_1000F2C54;
            uint64_t v376 = (ValueMetadata *)&unk_10020F9E0;
            id v218 = _Block_copy(aBlock);
            id v219 = v332;
            static DispatchQoS.unspecified.getter(v218);
            aBlock[0] = _swiftEmptyArrayStorage;
            uint64_t v220 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v221 = sub_100098CD8((uint64_t *)&unk_100235790);
            uint64_t v222 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
            unint64_t v223 = v335;
            uint64_t v224 = v221;
            uint64_t v225 = v337;
            dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v224, v222, v337, v220);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v219, v223, v218);
            _Block_release(v218);

            (*(void (**)(char *, uint64_t))(v336 + 8))(v223, v225);
            (*(void (**)(char *, uint64_t))(v333 + 8))(v219, v334);
            uint64_t v226 = sub_10013A76C();
            OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001872F8, v226, &type metadata for () + 1);
            swift_release(v226);
          }

          uint64_t v128 = type metadata accessor for SoundProfileRecord;
          uint64_t v127 = v216;
          goto LABEL_31;
        }

        uint64_t v200 = sub_1000A7CD4(v216, type metadata accessor for SoundProfileRecord);
      }

      uint64_t v227 = static os_log_type_t.error.getter(v200);
      uint64_t v228 = qword_10023DFC8;
      uint64_t v119 = swift_allocObject(v369, 72LL, 7LL);
      *(_OWORD *)(v119 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      id v229 = [v90 recordName];
      uint64_t v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(v229);
      uint64_t v232 = v231;

      unint64_t v233 = v370;
      *(void *)(v119 + 56) = &type metadata for String;
      *(void *)(v119 + 64) = v233;
      *(void *)(v119 + 32) = v230;
      *(void *)(v119 + 40) = v232;
      os_log(_:dso:log:_:_:)( v227,  &_mh_execute_header,  v228,  "Unable to find cached sound profile record to delete: %@",  56LL,  2LL,  v119);
      goto LABEL_28;
    }

LABEL_110:
    id v274 = [v90 recordName];
    uint64_t v275 = static String._unconditionallyBridgeFromObjectiveC(_:)(v274);
    uint64_t v277 = v276;

    uint64_t v278 = (uint64_t)v340;
    UUID.init(uuidString:)(v275, v277);
    swift_bridgeObjectRelease(v277);
    uint64_t v280 = v373;
    uint64_t v279 = v374;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v373 + 48))(v278, 1LL, v374) == 1)
    {
      uint64_t v281 = sub_100099358(v278, &qword_100234E20);
      uint64_t v282 = static os_log_type_t.error.getter(v281);
      uint64_t v283 = qword_10023DFC8;
      uint64_t v76 = swift_allocObject(v369, 72LL, 7LL);
      *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      id v284 = [v90 recordName];
      uint64_t v285 = static String._unconditionallyBridgeFromObjectiveC(_:)(v284);
      uint64_t v287 = v286;

      unint64_t v288 = v370;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v288;
      *(void *)(v76 + 32) = v285;
      *(void *)(v76 + 40) = v287;
      os_log(_:dso:log:_:_:)( v282,  &_mh_execute_header,  v283,  "Invalid HMDeviceCloudRecord identifier: %@",  42LL,  2LL,  v76);
      goto LABEL_63;
    }

    uint64_t v254 = v338;
    (*(void (**)(char *, uint64_t, uint64_t))(v280 + 32))(v338, v278, v279);
    id v289 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v289)
    {
      uint64_t v290 = sub_10013A76C();
      if (qword_100234BC0 != -1) {
        swift_once(&qword_100234BC0, sub_1000DD8E4);
      }
      uint64_t v291 = v365;
      uint64_t v292 = sub_100098D58(v365, (uint64_t)qword_10023DE08);
      uint64_t v294 = v363;
      uint64_t v293 = (uint64_t)v364;
      (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v364, v292, v291);
      uint64_t v295 = (void *)sub_100138AFC(v293, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
      swift_release(v290);
      uint64_t v296 = (*(uint64_t (**)(uint64_t, uint64_t))(v294 + 8))(v293, v291);
      uint64_t v254 = v338;
    }

    else
    {
      uint64_t v297 = static os_log_type_t.error.getter(v289);
      uint64_t v295 = _swiftEmptyArrayStorage;
      uint64_t v296 = os_log(_:dso:log:_:_:)( v297,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    }

    __chkstk_darwin(v296);
    *(&v330 - 2) = v254;
    unint64_t v298 = sub_100122604((uint64_t (*)(id *))sub_1001874B8, (uint64_t)(&v330 - 4), (uint64_t)v295);
    uint64_t v299 = swift_bridgeObjectRelease(v295);
    if (v298)
    {
      sub_100150DEC(v298, v366 & 1);
LABEL_127:
      (*(void (**)(char *, uint64_t))(v373 + 8))(v254, v374);

      return;
    }

    uint64_t v300 = static os_log_type_t.error.getter(v299);
    uint64_t v301 = qword_10023DFC8;
    uint64_t v302 = swift_allocObject(v369, 72LL, 7LL);
    *(_OWORD *)(v302 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v303 = [v90 recordName];
    uint64_t v304 = static String._unconditionallyBridgeFromObjectiveC(_:)(v303);
    uint64_t v306 = v305;

    unint64_t v307 = v370;
    *(void *)(v302 + 56) = &type metadata for String;
    *(void *)(v302 + 64) = v307;
    *(void *)(v302 + 32) = v304;
    *(void *)(v302 + 40) = v306;
    os_log(_:dso:log:_:_:)( v300,  &_mh_execute_header,  v301,  "Unable to find cached HMDeviceCloudRecord to delete: %@",  55LL,  2LL,  v302);
    goto LABEL_129;
  }

  if (v63 == 0xD000000000000013LL && v64 == 0x80000001001CB4E0LL) {
    goto LABEL_110;
  }
  uint64_t v273 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CB4E0LL, v63, v64, 0LL);
  if ((v273 & 1) != 0) {
    goto LABEL_110;
  }
  uint64_t v326 = static os_log_type_t.error.getter(v273);
  uint64_t v327 = qword_10023DFC8;
  uint64_t v328 = swift_allocObject(v369, 72LL, 7LL);
  *(_OWORD *)(v328 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  unint64_t v329 = v370;
  *(void *)(v328 + 56) = &type metadata for String;
  *(void *)(v328 + 64) = v329;
  *(void *)(v328 + 32) = v63;
  *(void *)(v328 + 40) = v64;
  swift_bridgeObjectRetain(v64);
  os_log(_:dso:log:_:_:)( v326,  &_mh_execute_header,  v327,  "Ignoring record delete for unknown record type: %@",  50LL,  2LL,  v328);
  swift_bridgeObjectRelease(v328);
}

uint64_t sub_10014E400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v6 = qword_10023DFC8;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v24[0] = a1;
    swift_errorRetain(a1);
    uint64_t v9 = sub_100098CD8(&qword_1002357C0);
    uint64_t v10 = String.init<A>(describing:)(v24, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10009914C();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting Record - %@", 35LL, 2LL, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v15 = a3 + 16;
    uint64_t v16 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v17 = qword_10023DFC8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v20 = sub_100094CA4();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Deleted Device Record from cloud - %@", 37LL, 2LL, v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v24, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v15);
    if (result)
    {
      uint64_t v23 = result;
      sub_10014E61C(a2, 0);
      return swift_release(v23);
    }
  }

  return result;
}

uint64_t sub_10014E61C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v66 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v67 = (char *)&v62 - v10;
  __chkstk_darwin(v11);
  uint64_t v69 = (char *)&v62 - v12;
  uint64_t v13 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v63 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v21 = qword_10023DFC8;
  uint64_t v65 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v22 = swift_allocObject(v65, 112LL, 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v22 + 56) = &type metadata for Bool;
  *(void *)(v22 + 64) = &protocol witness table for Bool;
  int v71 = a2;
  *(_BYTE *)(v22 + 32) = a2 & 1;
  sub_1000A7C90(a1, (uint64_t)v18, type metadata accessor for DeviceRecord);
  uint64_t v23 = String.init<A>(describing:)(v18, v13);
  uint64_t v25 = v24;
  *(void *)(v22 + 96) = &type metadata for String;
  unint64_t v64 = sub_10009914C();
  *(void *)(v22 + 104) = v64;
  *(void *)(v22 + 72) = v23;
  *(void *)(v22 + 80) = v25;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v22);
  swift_bridgeObjectRelease(v22);
  uint64_t v26 = (void *)sub_1000A4FF0();
  id v27 = [v26 encryptedValues];

  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 objectForKeyedSubscript:v28];
  swift_unknownObjectRelease(v27);

  if (v29
    && (v73[0] = v29,
        uint64_t v30 = sub_100098CD8(&qword_100234E40),
        (swift_dynamicCast(v72, v73, v30, &type metadata for String, 6LL) & 1) != 0))
  {
    uint64_t v32 = v72[0];
    uint64_t v31 = v72[1];
    uint64_t v33 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for DeviceRecord);
    if (v31) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v33 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for DeviceRecord);
  }

  uint64_t v32 = UUID.uuidString.getter(v33);
  uint64_t v31 = v34;
LABEL_9:
  uint64_t v35 = v68;
  uint64_t v68 = a1;
  sub_1000A7CD4((uint64_t)v15, type metadata accessor for DeviceRecord);
  uint64_t v36 = sub_10013A76C();
  uint64_t v37 = v35;
  if (qword_100234B30 != -1) {
    swift_once(&qword_100234B30, sub_100094AFC);
  }
  uint64_t v38 = sub_100098D58(v6, (uint64_t)qword_10023DCC0);
  uint64_t v39 = v69;
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v69, v38, v6);
  __chkstk_darwin(v40);
  *(&v62 - 4) = v36;
  *(&v62 - 3) = v32;
  *(&v62 - 2) = v31;
  *(&v62 - 1) = (uint64_t)v39;
  OS_dispatch_queue.sync<A>(execute:)(v72, sub_100187590, &v62 - 6, &type metadata for Bool);
  swift_release(v36);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v39, v6);
  uint64_t v42 = sub_10013A76C();
  uint64_t v43 = v70;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v45 = v37;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v47 = v66;
    v46(v66, v43, v6);
    uint64_t v48 = v67;
    URL.appendingPathComponent(_:)(0x6552656369766544LL);
    uint64_t v49 = ((uint64_t (*)(char *, uint64_t))v41)(v47, v6);
    __chkstk_darwin(v49);
    *(&v62 - 4) = v42;
    *(&v62 - 3) = v32;
    *(&v62 - 2) = v31;
    *(&v62 - 1) = (uint64_t)v48;
    OS_dispatch_queue.sync<A>(execute:)(v72, sub_10018A6A0, &v62 - 6, &type metadata for Bool);
    swift_release(v42);
    v41(v48, v6);
    if ((v71 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v45 + 24, v50);
      if (Strong)
      {
        uint64_t v52 = Strong;
        uint64_t v53 = sub_100098CD8(&qword_100236EF8);
        uint64_t v54 = *(unsigned __int8 *)(v63 + 80);
        uint64_t v55 = (v54 + 32) & ~v54;
        uint64_t v56 = swift_allocObject(v53, v55 + *(void *)(v63 + 72), v54 | 7);
        *(_OWORD *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        sub_1000A7C90(v68, v56 + v55, type metadata accessor for DeviceRecord);
        sub_1001313CC(v56, (uint64_t)&unk_10020FA40, (uint64_t)sub_1001875D4, (uint64_t)&unk_10020FA58);
        swift_bridgeObjectRelease(v56);
        swift_unknownObjectRelease(v52);
      }
    }

    uint64_t v57 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6552656369766544LL,  0xEC00000064726F63LL,  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
    if ((v57 & 1) != 0)
    {
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      uint64_t v59 = qword_10023DFC8;
      uint64_t v60 = swift_allocObject(v65, 72LL, 7LL);
      *(_OWORD *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v61 = v64;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v61;
      *(void *)(v60 + 32) = v32;
      *(void *)(v60 + 40) = v31;
      swift_bridgeObjectRetain(v31);
      os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v60);
      swift_bridgeObjectRelease(v60);
      sub_1001605B4(v32, v31, v71 & 1);
    }

    return swift_bridgeObjectRelease(v31);
  }

  return result;
}

uint64_t sub_10014ECD4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v4);
  int v71 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v67 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v68 = (char *)&v62 - v10;
  __chkstk_darwin(v11);
  uint64_t v70 = (char *)&v62 - v12;
  uint64_t v13 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v63 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v21 = qword_10023DFC8;
  uint64_t v66 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v22 = swift_allocObject(v66, 112LL, 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v22 + 56) = &type metadata for Bool;
  *(void *)(v22 + 64) = &protocol witness table for Bool;
  int v69 = a2;
  *(_BYTE *)(v22 + 32) = a2 & 1;
  sub_1000A7C90(a1, (uint64_t)v18, type metadata accessor for DeviceSupportInformationRecord);
  uint64_t v23 = String.init<A>(describing:)(v18, v13);
  uint64_t v25 = v24;
  *(void *)(v22 + 96) = &type metadata for String;
  unint64_t v65 = sub_10009914C();
  *(void *)(v22 + 104) = v65;
  *(void *)(v22 + 72) = v23;
  *(void *)(v22 + 80) = v25;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v22);
  swift_bridgeObjectRelease(v22);
  uint64_t v26 = objc_autoreleasePoolPush();
  sub_1000E95EC(a1, v74);
  objc_autoreleasePoolPop(v26);
  Class v27 = v74[0];
  id v28 = -[objc_class encryptedValues](v74[0], "encryptedValues");

  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 objectForKeyedSubscript:v29];
  swift_unknownObjectRelease(v28);

  if (v30
    && (v75[0] = v30,
        uint64_t v31 = sub_100098CD8(&qword_100234E40),
        (swift_dynamicCast(v74, v75, v31, &type metadata for String, 6LL) & 1) != 0))
  {
    Class v32 = v74[0];
    Class v33 = v74[1];
    uint64_t v34 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for DeviceSupportInformationRecord);
    if (v33) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v34 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for DeviceSupportInformationRecord);
  }

  Class v32 = (Class)UUID.uuidString.getter(v34);
  Class v33 = v35;
LABEL_9:
  Class v72 = v32;
  uint64_t v64 = a1;
  sub_1000A7CD4((uint64_t)v15, type metadata accessor for DeviceSupportInformationRecord);
  uint64_t v36 = sub_10013A76C();
  if (qword_100234BC8 != -1) {
    swift_once(&qword_100234BC8, sub_1000E72E4);
  }
  uint64_t v37 = sub_100098D58(v6, (uint64_t)qword_10023DF00);
  uint64_t v38 = v70;
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v70, v37, v6);
  __chkstk_darwin(v39);
  uint64_t v40 = (uint64_t)v72;
  *(&v62 - 4) = v36;
  *(&v62 - 3) = v40;
  *(&v62 - 2) = (uint64_t)v33;
  *(&v62 - 1) = (uint64_t)v38;
  OS_dispatch_queue.sync<A>(execute:)(v74, sub_10018A6A0, &v62 - 6, &type metadata for Bool);
  swift_release(v36);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v38, v6);
  uint64_t v42 = sub_10013A76C();
  uint64_t v43 = v71;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v45 = v67;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v67, v43, v6);
    uint64_t v46 = v68;
    URL.appendingPathComponent(_:)(0xD00000000000001ELL);
    uint64_t v47 = ((uint64_t (*)(char *, uint64_t))v41)(v45, v6);
    __chkstk_darwin(v47);
    *(&v62 - 4) = v42;
    *(&v62 - 3) = v40;
    *(&v62 - 2) = (uint64_t)v33;
    *(&v62 - 1) = (uint64_t)v46;
    OS_dispatch_queue.sync<A>(execute:)(v74, sub_10018A6A0, &v62 - 6, &type metadata for Bool);
    swift_release(v42);
    v41(v46, v6);
    char v49 = v69;
    if ((v69 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v73 + 24, v48);
      if (Strong)
      {
        uint64_t v51 = Strong;
        uint64_t v52 = sub_100098CD8(&qword_100236F18);
        uint64_t v53 = *(unsigned __int8 *)(v63 + 80);
        uint64_t v54 = (v53 + 32) & ~v53;
        uint64_t v55 = swift_allocObject(v52, v54 + *(void *)(v63 + 72), v53 | 7);
        *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        uint64_t v56 = v55 + v54;
        uint64_t v40 = (uint64_t)v72;
        sub_1000A7C90(v64, v56, type metadata accessor for DeviceSupportInformationRecord);
        sub_1001313CC(v55, (uint64_t)&unk_10020FAE0, (uint64_t)sub_1001875EC, (uint64_t)&unk_10020FAF8);
        swift_bridgeObjectRelease(v55);
        swift_unknownObjectRelease(v51);
      }
    }

    uint64_t v57 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD00000000000001ELL,  0x80000001001CABA0LL,  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
    if ((v57 & 1) != 0)
    {
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      uint64_t v59 = qword_10023DFC8;
      uint64_t v60 = swift_allocObject(v66, 72LL, 7LL);
      *(_OWORD *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v61 = v65;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v61;
      *(void *)(v60 + 32) = v40;
      *(void *)(v60 + 40) = v33;
      swift_bridgeObjectRetain(v33);
      os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v60);
      swift_bridgeObjectRelease(v60);
      sub_1001605B4(v40, (uint64_t)v33, v49 & 1);
    }

    return swift_bridgeObjectRelease(v33);
  }

  return result;
}

uint64_t sub_10014F39C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v69 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v66 = (char *)&v61 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v61 - v11;
  uint64_t v13 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v62 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v21 = qword_10023DFC8;
  uint64_t v67 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v22 = swift_allocObject(v67, 112LL, 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v22 + 56) = &type metadata for Bool;
  *(void *)(v22 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v22 + 32) = a2 & 1;
  sub_1000A7C90(a1, (uint64_t)v18, type metadata accessor for MagicPairingSettingsRecord);
  uint64_t v23 = String.init<A>(describing:)(v18, v13);
  uint64_t v25 = v24;
  *(void *)(v22 + 96) = &type metadata for String;
  unint64_t v65 = sub_10009914C();
  *(void *)(v22 + 104) = v65;
  *(void *)(v22 + 72) = v23;
  *(void *)(v22 + 80) = v25;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v22);
  swift_bridgeObjectRelease(v22);
  Class v26 = sub_1000A4ED8();
  id v27 = -[objc_class encryptedValues](v26, "encryptedValues");

  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 objectForKeyedSubscript:v28];
  swift_unknownObjectRelease(v27);

  uint64_t v63 = a1;
  if (v29
    && (v72[0] = v29,
        uint64_t v30 = sub_100098CD8(&qword_100234E40),
        (swift_dynamicCast(v71, v72, v30, &type metadata for String, 6LL) & 1) != 0))
  {
    uint64_t v31 = v71[0];
    uint64_t v32 = v71[1];
    uint64_t v33 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for MagicPairingSettingsRecord);
    if (v32) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v33 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for MagicPairingSettingsRecord);
  }

  uint64_t v31 = UUID.uuidString.getter(v33);
  uint64_t v32 = v34;
LABEL_9:
  uint64_t v35 = v68;
  LODWORD(v68) = a2;
  sub_1000A7CD4((uint64_t)v15, type metadata accessor for MagicPairingSettingsRecord);
  uint64_t v36 = sub_10013A76C();
  if (qword_100234B70 != -1) {
    swift_once(&qword_100234B70, sub_1000CAF84);
  }
  uint64_t v37 = sub_100098D58(v6, (uint64_t)qword_10023DD70);
  uint64_t v38 = v69;
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 16))(v12, v37, v6);
  __chkstk_darwin(v39);
  *(&v61 - 4) = v36;
  *(&v61 - 3) = v31;
  *(&v61 - 2) = v32;
  *(&v61 - 1) = (uint64_t)v12;
  OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v61 - 6, &type metadata for Bool);
  swift_release(v36);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v40(v12, v6);
  uint64_t v41 = v35;
  uint64_t v42 = sub_10013A76C();
  uint64_t v43 = v70;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v43, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v46 = v64;
    v45(v64, v43, v6);
    uint64_t v47 = v66;
    URL.appendingPathComponent(_:)(0x746553636967614DLL);
    uint64_t v48 = ((uint64_t (*)(char *, uint64_t))v40)(v46, v6);
    __chkstk_darwin(v48);
    *(&v61 - 4) = v42;
    *(&v61 - 3) = v31;
    *(&v61 - 2) = v32;
    *(&v61 - 1) = (uint64_t)v47;
    OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v61 - 6, &type metadata for Bool);
    swift_release(v42);
    uint64_t Strong = ((uint64_t (*)(char *, uint64_t))v40)(v47, v6);
    char v51 = v68;
    if ((v68 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v41 + 24, v50);
      if (Strong)
      {
        uint64_t v52 = Strong;
        uint64_t v53 = sub_100098CD8(&qword_100236F10);
        uint64_t v54 = *(unsigned __int8 *)(v62 + 80);
        uint64_t v55 = (v54 + 32) & ~v54;
        uint64_t v56 = swift_allocObject(v53, v55 + *(void *)(v62 + 72), v54 | 7);
        *(_OWORD *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        sub_1000A7C90(v63, v56 + v55, type metadata accessor for MagicPairingSettingsRecord);
        sub_1001313CC(v56, (uint64_t)&unk_10020FB30, (uint64_t)sub_1001875F8, (uint64_t)&unk_10020FB48);
        swift_bridgeObjectRelease(v56);
        uint64_t Strong = swift_unknownObjectRelease(v52);
      }
    }

    uint64_t v57 = static os_log_type_t.default.getter(Strong);
    uint64_t v58 = qword_10023DFC8;
    uint64_t v59 = swift_allocObject(v67, 72LL, 7LL);
    *(_OWORD *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    unint64_t v60 = v65;
    *(void *)(v59 + 56) = &type metadata for String;
    *(void *)(v59 + 64) = v60;
    *(void *)(v59 + 32) = v31;
    *(void *)(v59 + 40) = v32;
    swift_bridgeObjectRetain(v32);
    os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  v58,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v59);
    swift_bridgeObjectRelease(v59);
    sub_1001605B4(v31, v32, v51 & 1);
    return swift_bridgeObjectRelease(v32);
  }

  return result;
}

uint64_t sub_10014FA04(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v65 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v66 = (char *)&v61 - v10;
  __chkstk_darwin(v11);
  uint64_t v68 = (char *)&v61 - v12;
  uint64_t v13 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v61 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v21 = qword_10023DFC8;
  uint64_t v64 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v22 = swift_allocObject(v64, 112LL, 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v22 + 56) = &type metadata for Bool;
  *(void *)(v22 + 64) = &protocol witness table for Bool;
  int v67 = a2;
  *(_BYTE *)(v22 + 32) = a2 & 1;
  sub_1000A7C90(a1, (uint64_t)v18, type metadata accessor for SoundProfileRecord);
  uint64_t v23 = String.init<A>(describing:)(v18, v13);
  uint64_t v25 = v24;
  *(void *)(v22 + 96) = &type metadata for String;
  unint64_t v63 = sub_10009914C();
  *(void *)(v22 + 104) = v63;
  *(void *)(v22 + 72) = v23;
  *(void *)(v22 + 80) = v25;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v22);
  swift_bridgeObjectRelease(v22);
  Class v26 = (void *)sub_1000A4FD4();
  id v27 = [v26 encryptedValues];

  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 objectForKeyedSubscript:v28];
  swift_unknownObjectRelease(v27);

  if (v29
    && (v72[0] = v29,
        uint64_t v30 = sub_100098CD8(&qword_100234E40),
        (swift_dynamicCast(v71, v72, v30, &type metadata for String, 6LL) & 1) != 0))
  {
    uint64_t v31 = v71[0];
    uint64_t v32 = v71[1];
    uint64_t v33 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for SoundProfileRecord);
    if (v32)
    {
      uint64_t v34 = v6;
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v33 = sub_1000A7C90(a1, (uint64_t)v15, type metadata accessor for SoundProfileRecord);
  }

  uint64_t v34 = v6;
  uint64_t v31 = UUID.uuidString.getter(v33);
  uint64_t v32 = v35;
LABEL_9:
  uint64_t v36 = v31;
  uint64_t v62 = a1;
  sub_1000A7CD4((uint64_t)v15, type metadata accessor for SoundProfileRecord);
  uint64_t v37 = sub_10013A76C();
  if (qword_100234B48 != -1) {
    swift_once(&qword_100234B48, sub_1000A5118);
  }
  uint64_t v38 = sub_100098D58(v34, (uint64_t)qword_10023DD18);
  uint64_t v39 = v68;
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v68, v38, v34);
  __chkstk_darwin(v40);
  *(&v61 - 4) = v37;
  *(&v61 - 3) = v31;
  *(&v61 - 2) = v32;
  *(&v61 - 1) = (uint64_t)v39;
  OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v61 - 6, &type metadata for Bool);
  swift_release(v37);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v39, v34);
  uint64_t v42 = sub_10013A76C();
  uint64_t v43 = v69;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1LL, v34);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v45 = v65;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v65, v43, v34);
    uint64_t v46 = v66;
    URL.appendingPathComponent(_:)(0xD000000000000012LL);
    uint64_t v47 = ((uint64_t (*)(char *, uint64_t))v41)(v45, v34);
    __chkstk_darwin(v47);
    *(&v61 - 4) = v42;
    *(&v61 - 3) = v36;
    *(&v61 - 2) = v32;
    *(&v61 - 1) = (uint64_t)v46;
    OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v61 - 6, &type metadata for Bool);
    swift_release(v42);
    v41(v46, v34);
    char v49 = v67;
    if ((v67 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v70 + 24, v48);
      if (Strong)
      {
        uint64_t v51 = Strong;
        uint64_t v52 = sub_100098CD8((uint64_t *)&unk_100236F20);
        uint64_t v53 = *(unsigned __int8 *)(v61 + 80);
        uint64_t v54 = (v53 + 32) & ~v53;
        uint64_t v55 = swift_allocObject(v52, v54 + *(void *)(v61 + 72), v53 | 7);
        *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
        sub_1000A7C90(v62, v55 + v54, type metadata accessor for SoundProfileRecord);
        sub_1001313CC(v55, (uint64_t)&unk_10020FB80, (uint64_t)sub_100187604, (uint64_t)&unk_10020FB98);
        swift_bridgeObjectRelease(v55);
        swift_unknownObjectRelease(v51);
      }
    }

    uint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000012LL,  0x80000001001CAB80LL,  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
    if ((v56 & 1) != 0)
    {
      uint64_t v57 = static os_log_type_t.default.getter(v56);
      uint64_t v58 = qword_10023DFC8;
      uint64_t v59 = swift_allocObject(v64, 72LL, 7LL);
      *(_OWORD *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v60 = v63;
      *(void *)(v59 + 56) = &type metadata for String;
      *(void *)(v59 + 64) = v60;
      *(void *)(v59 + 32) = v36;
      *(void *)(v59 + 40) = v32;
      swift_bridgeObjectRetain(v32);
      os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  v58,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v59);
      swift_bridgeObjectRelease(v59);
      sub_1001605B4(v36, v32, v49 & 1);
    }

    return swift_bridgeObjectRelease(v32);
  }

  return result;
}

uint64_t sub_1001500B4(void *a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v6);
  uint64_t v74 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v69 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v70 = (char *)&v66 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v66 - v13;
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v17 = qword_10023DFC8;
  uint64_t v68 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v18 = swift_allocObject(v68, 112LL, 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v18 + 56) = &type metadata for Bool;
  *(void *)(v18 + 64) = &protocol witness table for Bool;
  int v71 = a2;
  *(_BYTE *)(v18 + 32) = a2 & 1;
  v76[0] = a1;
  uint64_t v19 = type metadata accessor for AADeviceRecord(0LL);
  uint64_t v20 = a1;
  uint64_t v21 = String.init<A>(describing:)(v76, v19);
  uint64_t v23 = v22;
  *(void *)(v18 + 96) = &type metadata for String;
  unint64_t v67 = sub_10009914C();
  *(void *)(v18 + 104) = v67;
  *(void *)(v18 + 72) = v21;
  *(void *)(v18 + 80) = v23;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v18);
  swift_bridgeObjectRelease(v18);
  uint64_t v24 = objc_autoreleasePoolPush();
  uint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  unint64_t v26 = *(void *)&v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000991CC(v25, v26);
  sub_100118B60(v25, v26);
  Class isa = v27;
  sub_100099394(v25, v26);
  if (!isa)
  {
    id v29 = v20;
    Class isa = sub_1000A3964((uint64_t)v29).super.isa;
  }

  v76[0] = isa;
  sub_100116DE8(v76);
  objc_autoreleasePoolPop(v24);
  id v30 = -[objc_class encryptedValues](isa, "encryptedValues");

  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v30 objectForKeyedSubscript:v31];
  swift_unknownObjectRelease(v30);

  if (v32
    && (v77[0] = v32,
        uint64_t v33 = sub_100098CD8(&qword_100234E40),
        swift_dynamicCast(v76, v77, v33, &type metadata for String, 6LL)))
  {
    uint64_t v34 = v14;
    id v35 = v76[1];
    id v72 = v76[0];
  }

  else
  {
    uint64_t v34 = v14;
    uint64_t v36 = v20;
    id v72 = (id)UUID.uuidString.getter(v36);
    id v35 = v37;
  }

  id v66 = v20;
  uint64_t v38 = sub_10013A76C();
  if (qword_100234BF8 != -1) {
    swift_once(&qword_100234BF8, sub_100113FD8);
  }
  uint64_t v39 = v73;
  uint64_t v40 = sub_100098D58(v73, (uint64_t)qword_10023DF40);
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v34, v40, v39);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t)v72;
  *(&v66 - 4) = (id)v38;
  *(&v66 - 3) = (id)v42;
  *(&v66 - 2) = v35;
  *(&v66 - 1) = v34;
  OS_dispatch_queue.sync<A>(execute:)(v76, sub_10018A6A0, &v66 - 6, &type metadata for Bool);
  swift_release(v38);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v44 = v34;
  uint64_t v45 = v39;
  v43(v44, v39);
  uint64_t v75 = v3;
  uint64_t v46 = sub_10013A76C();
  uint64_t v47 = v74;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v47, 1LL, v45);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    char v49 = v69;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v69, v47, v45);
    uint64_t v50 = v70;
    URL.appendingPathComponent(_:)(0x6563697665444141LL);
    uint64_t v51 = ((uint64_t (*)(char *, uint64_t))v43)(v49, v45);
    __chkstk_darwin(v51);
    *(&v66 - 4) = (id)v46;
    *(&v66 - 3) = (id)v42;
    *(&v66 - 2) = v35;
    *(&v66 - 1) = v50;
    OS_dispatch_queue.sync<A>(execute:)(v76, sub_10018A6A0, &v66 - 6, &type metadata for Bool);
    swift_release(v46);
    v43(v50, v45);
    char v53 = v71;
    if ((v71 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v75 + 24, v52);
      if (Strong)
      {
        uint64_t v55 = Strong;
        uint64_t v56 = sub_100098CD8(&qword_100236588);
        uint64_t v57 = swift_allocObject(v56, 40LL, 7LL);
        *(_OWORD *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
        uint64_t v58 = v66;
        *(void *)(v57 + 32) = v66;
        v76[0] = (id)v57;
        specialized Array._endMutation()(v57);
        id v59 = v76[0];
        id v60 = v58;
        sub_1001313CC((uint64_t)v59, (uint64_t)&unk_10020FA90, (uint64_t)sub_1001875E0, (uint64_t)&unk_10020FAA8);
        swift_bridgeObjectRelease(v59);
        swift_unknownObjectRelease(v55);
      }
    }

    uint64_t v61 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6563697665444141LL,  0xEE0064726F636552LL,  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
    if ((v61 & 1) != 0)
    {
      uint64_t v62 = static os_log_type_t.default.getter(v61);
      uint64_t v63 = qword_10023DFC8;
      uint64_t v64 = swift_allocObject(v68, 72LL, 7LL);
      *(_OWORD *)(v64 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v65 = v67;
      *(void *)(v64 + 56) = &type metadata for String;
      *(void *)(v64 + 64) = v65;
      *(void *)(v64 + 32) = v42;
      *(void *)(v64 + 40) = v35;
      swift_bridgeObjectRetain(v35);
      os_log(_:dso:log:_:_:)( v62,  &_mh_execute_header,  v63,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v64);
      swift_bridgeObjectRelease(v64);
      sub_1001605B4(v42, (uint64_t)v35, v53 & 1);
    }

    return swift_bridgeObjectRelease(v35);
  }

  return result;
}

uint64_t sub_100150760(void *a1, int a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v66 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v67 = (char *)&v63 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v63 - v12;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v16 = qword_10023DFC8;
  uint64_t v65 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v65, 112LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 32) = a2 & 1;
  v71[0] = a1;
  uint64_t v18 = type metadata accessor for AAProxCardsRecord(0LL);
  uint64_t v19 = a1;
  uint64_t v20 = String.init<A>(describing:)(v71, v18);
  uint64_t v22 = v21;
  *(void *)(v17 + 96) = &type metadata for String;
  unint64_t v64 = sub_10009914C();
  *(void *)(v17 + 104) = v64;
  *(void *)(v17 + 72) = v20;
  *(void *)(v17 + 80) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v23 = objc_autoreleasePoolPush();
  uint64_t v24 = *(void *)&v19[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  unint64_t v25 = *(void *)&v19[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000991CC(v24, v25);
  sub_100118B60(v24, v25);
  Class isa = v26;
  sub_100099394(v24, v25);
  if (!isa)
  {
    NSString v28 = v19;
    Class isa = sub_1000A3798((uint64_t)v28).super.isa;
  }

  v71[0] = isa;
  sub_1000A233C((unint64_t)v71);
  objc_autoreleasePoolPop(v23);
  id v29 = -[objc_class encryptedValues](isa, "encryptedValues");

  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v29 objectForKeyedSubscript:v30];
  swift_unknownObjectRelease(v29);

  int v68 = a2;
  id v63 = v19;
  if (v31
    && (v72[0] = v31,
        uint64_t v32 = sub_100098CD8(&qword_100234E40),
        swift_dynamicCast(v71, v72, v32, &type metadata for String, 6LL)))
  {
    uint64_t v33 = v71[0];
    uint64_t v34 = v71[1];
  }

  else
  {
    id v35 = v19;
    uint64_t v33 = UUID.uuidString.getter(v35);
    uint64_t v34 = v36;
  }

  uint64_t v37 = sub_10013A76C();
  if (qword_100234B40 != -1) {
    swift_once(&qword_100234B40, sub_10009F940);
  }
  uint64_t v38 = sub_100098D58(v6, (uint64_t)qword_10023DCE0);
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v38, v6);
  __chkstk_darwin(v39);
  *(&v63 - 4) = (id)v37;
  *(&v63 - 3) = (id)v33;
  *(&v63 - 2) = (id)v34;
  *(&v63 - 1) = v13;
  OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v63 - 6, &type metadata for Bool);
  swift_release(v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
  v40(v13, v6);
  uint64_t v41 = sub_10013A76C();
  uint64_t v42 = v69;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v42, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v45 = v66;
    v44(v66, v42, v6);
    uint64_t v46 = v67;
    URL.appendingPathComponent(_:)(0xD000000000000011LL);
    uint64_t v47 = ((uint64_t (*)(char *, uint64_t))v40)(v45, v6);
    __chkstk_darwin(v47);
    *(&v63 - 4) = (id)v41;
    *(&v63 - 3) = (id)v33;
    uint64_t v69 = (char *)v33;
    *(&v63 - 2) = (id)v34;
    *(&v63 - 1) = v46;
    OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v63 - 6, &type metadata for Bool);
    swift_release(v41);
    v40(v46, v6);
    char v49 = v68;
    if ((v68 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v70 + 24, v48);
      if (Strong)
      {
        uint64_t v51 = Strong;
        uint64_t v52 = sub_100098CD8(&qword_100236588);
        uint64_t v53 = swift_allocObject(v52, 40LL, 7LL);
        *(_OWORD *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
        uint64_t v54 = v63;
        *(void *)(v53 + 32) = v63;
        v71[0] = v53;
        specialized Array._endMutation()(v53);
        uint64_t v55 = v71[0];
        id v56 = v54;
        sub_1001313CC(v55, (uint64_t)&unk_10020FBD0, (uint64_t)sub_100187610, (uint64_t)&unk_10020FBE8);
        swift_bridgeObjectRelease(v55);
        swift_unknownObjectRelease(v51);
      }
    }

    uint64_t v57 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000011LL,  0x80000001001D2A80LL,  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
    if ((v57 & 1) != 0)
    {
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      uint64_t v59 = qword_10023DFC8;
      uint64_t v60 = swift_allocObject(v65, 72LL, 7LL);
      *(_OWORD *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v61 = v64;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v61;
      uint64_t v62 = (uint64_t)v69;
      *(void *)(v60 + 32) = v69;
      *(void *)(v60 + 40) = v34;
      swift_bridgeObjectRetain(v34);
      os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v60);
      swift_bridgeObjectRelease(v60);
      sub_1001605B4(v62, v34, v49 & 1);
    }

    return swift_bridgeObjectRelease(v34);
  }

  return result;
}

uint64_t sub_100150DEC(void *a1, int a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v66 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v67 = (char *)&v63 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v63 - v12;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v16 = qword_10023DFC8;
  uint64_t v65 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v17 = swift_allocObject(v65, 112LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 32) = a2 & 1;
  v71[0] = a1;
  uint64_t v18 = type metadata accessor for HMDeviceCloudRecord(0LL);
  uint64_t v19 = a1;
  uint64_t v20 = String.init<A>(describing:)(v71, v18);
  uint64_t v22 = v21;
  *(void *)(v17 + 96) = &type metadata for String;
  unint64_t v64 = sub_10009914C();
  *(void *)(v17 + 104) = v64;
  *(void *)(v17 + 72) = v20;
  *(void *)(v17 + 80) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Remove cached device file (delegate: %d): %@", 44LL, 2LL, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v23 = objc_autoreleasePoolPush();
  uint64_t v24 = *(void *)&v19[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  unint64_t v25 = *(void *)&v19[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata + 8];
  sub_1000991CC(v24, v25);
  sub_100118B60(v24, v25);
  Class isa = v26;
  sub_100099394(v24, v25);
  if (!isa)
  {
    NSString v28 = v19;
    Class isa = sub_1000A3774((uint64_t)v28).super.isa;
  }

  v71[0] = isa;
  sub_1000E329C(v71);
  objc_autoreleasePoolPop(v23);
  id v29 = -[objc_class encryptedValues](isa, "encryptedValues");

  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v29 objectForKeyedSubscript:v30];
  swift_unknownObjectRelease(v29);

  int v68 = a2;
  id v63 = v19;
  if (v31
    && (v72[0] = v31,
        uint64_t v32 = sub_100098CD8(&qword_100234E40),
        swift_dynamicCast(v71, v72, v32, &type metadata for String, 6LL)))
  {
    uint64_t v33 = (char *)v71[0];
    id v34 = v71[1];
  }

  else
  {
    id v35 = v19;
    uint64_t v33 = (char *)UUID.uuidString.getter(v35);
    id v34 = v36;
  }

  uint64_t v37 = sub_10013A76C();
  if (qword_100234BC0 != -1) {
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }
  uint64_t v38 = sub_100098D58(v6, (uint64_t)qword_10023DE08);
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v38, v6);
  __chkstk_darwin(v39);
  *(&v63 - 4) = (id)v37;
  *(&v63 - 3) = v33;
  *(&v63 - 2) = v34;
  *(&v63 - 1) = v13;
  OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v63 - 6, &type metadata for Bool);
  swift_release(v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
  v40(v13, v6);
  uint64_t v41 = sub_10013A76C();
  uint64_t v42 = v69;
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v42, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v45 = v66;
    v44(v66, v42, v6);
    uint64_t v46 = v67;
    URL.appendingPathComponent(_:)(0xD000000000000013LL);
    uint64_t v47 = ((uint64_t (*)(char *, uint64_t))v40)(v45, v6);
    __chkstk_darwin(v47);
    *(&v63 - 4) = (id)v41;
    *(&v63 - 3) = v33;
    uint64_t v69 = v33;
    *(&v63 - 2) = v34;
    *(&v63 - 1) = v46;
    OS_dispatch_queue.sync<A>(execute:)(v71, sub_10018A6A0, &v63 - 6, &type metadata for Bool);
    swift_release(v41);
    v40(v46, v6);
    char v49 = v68;
    if ((v68 & 1) != 0)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v70 + 24, v48);
      if (Strong)
      {
        uint64_t v51 = Strong;
        uint64_t v52 = sub_100098CD8(&qword_100236588);
        uint64_t v53 = swift_allocObject(v52, 40LL, 7LL);
        *(_OWORD *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
        uint64_t v54 = v63;
        *(void *)(v53 + 32) = v63;
        v71[0] = (id)v53;
        specialized Array._endMutation()(v53);
        id v55 = v71[0];
        id v56 = v54;
        sub_1001313CC((uint64_t)v55, (uint64_t)&unk_10020FC20, (uint64_t)sub_10018761C, (uint64_t)&unk_10020FC38);
        swift_bridgeObjectRelease(v55);
        swift_unknownObjectRelease(v51);
      }
    }

    uint64_t v57 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000013LL,  0x80000001001CB4E0LL,  0x746553636967614DLL,  0xED000073676E6974LL,  0LL);
    if ((v57 & 1) != 0)
    {
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      uint64_t v59 = qword_10023DFC8;
      uint64_t v60 = swift_allocObject(v65, 72LL, 7LL);
      *(_OWORD *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      unint64_t v61 = v64;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v61;
      uint64_t v62 = (uint64_t)v69;
      *(void *)(v60 + 32) = v69;
      *(void *)(v60 + 40) = v34;
      swift_bridgeObjectRetain(v34);
      os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "Remove all locally cached device files for %@ in AudioAccessoryZone",  67LL,  2LL,  v60);
      swift_bridgeObjectRelease(v60);
      sub_1001605B4(v62, (uint64_t)v34, v49 & 1);
    }

    return swift_bridgeObjectRelease(v34);
  }

  return result;
}

uint64_t sub_100151478(uint64_t a1, char *a2)
{
  uint64_t v141 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  id v139 = (unint64_t *)((char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v138 = type metadata accessor for Date(0LL);
  uint64_t v136 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v133 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v137 = type metadata accessor for UUID(0LL);
  uint64_t v135 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v132 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v134);
  uint64_t v143 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  id v129 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v126 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v150 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v151 = (char *)&v124 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v124 - v16;
  uint64_t v152 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v152);
  uint64_t v153 = (unint64_t *)((char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v155 = *(void *)(v19 - 8);
  uint64_t v156 = v19;
  __chkstk_darwin(v19);
  uint64_t v146 = (uint64_t)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = v20;
  __chkstk_darwin(v21);
  uint64_t v142 = (uint64_t)&v124 - v22;
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v25 = qword_10023DFC8;
  uint64_t v125 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v26 = swift_allocObject(v125, 72LL, 7LL);
  __int128 v144 = xmmword_1001A5EA0;
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  Class v27 = sub_1000E7430();
  uint64_t v29 = v28;
  *(void *)(v26 + 56) = &type metadata for String;
  unint64_t v124 = sub_10009914C();
  *(void *)(v26 + 64) = v124;
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = v29;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Remove device record: %@", 24LL, 2LL, v26);
  swift_bridgeObjectRelease(v26);
  uint64_t v154 = a2;
  uint64_t v30 = sub_10013A76C();
  uint64_t v31 = *(void *)(a1 + *(int *)(v156 + 24));
  uint64_t v147 = a1;
  uint64_t v148 = v31;
  if (qword_100234BC8 != -1) {
    swift_once(&qword_100234BC8, sub_1000E72E4);
  }
  uint64_t v32 = sub_100098D58(v10, (uint64_t)qword_10023DF00);
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  id v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v149 = v17;
  v35(v17, v32, v33);
  uint64_t v36 = objc_autoreleasePoolPush();
  uint64_t v37 = v30;
  uint64_t v39 = URL.path.getter(v38);
  uint64_t v41 = v40;
  uint64_t v42 = v150;
  URL.appendingPathComponent(_:)(v39);
  swift_bridgeObjectRelease(v41);
  uint64_t v43 = v151;
  URL.appendingPathComponent(_:)(v148);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v34 + 8);
  v44(v42, v33);
  objc_autoreleasePoolPop(v36);
  uint64_t v45 = objc_autoreleasePoolPush();
  __chkstk_darwin(v45);
  *(&v124 - 2) = (unint64_t)v43;
  *(&v124 - 1) = v37;
  uint64_t v46 = v153;
  OS_dispatch_queue.sync<A>(execute:)(v153, sub_10018A7E8, &v124 - 4, v152);
  objc_autoreleasePoolPop(v45);
  v44(v43, v33);
  swift_release(v37);
  v44(v149, v33);
  uint64_t v47 = v155;
  uint64_t v48 = v156;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v155 + 48))(v46, 1LL, v156) == 1)
  {
    sub_100099358((uint64_t)v46, &qword_100235828);
    char v49 = *(void **)&v154[OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue];
    uint64_t v50 = v146;
    sub_1000A7C90(v147, v146, type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v51 = *(unsigned __int8 *)(v47 + 80);
    uint64_t v52 = (v51 + 16) & ~v51;
    unint64_t v53 = (v145 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v54 = swift_allocObject(&unk_1002117F0, v53 + 16, v51 | 7);
    sub_1000C998C(v50, v54 + v52, type metadata accessor for DeviceSupportInformationRecord);
    id v55 = (uint64_t (**)(uint64_t))(v54 + v53);
    *id v55 = sub_1000B8CF4;
    v55[1] = 0LL;
    aBlock[4] = (Class)sub_100187CAC;
    uint64_t v159 = v54;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000F2C54;
    void aBlock[3] = (Class)&unk_100211808;
    id v56 = _Block_copy(aBlock);
    id v57 = v49;
    uint64_t v58 = v126;
    static DispatchQoS.unspecified.getter(v57);
    uint64_t v157 = _swiftEmptyArrayStorage;
    uint64_t v59 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v60 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v61 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v62 = v129;
    uint64_t v63 = v60;
    uint64_t v64 = v131;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v157, v63, v61, v131, v59);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v58, v62, v56);
    _Block_release(v56);

    (*(void (**)(char *, uint64_t))(v130 + 8))(v62, v64);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v58, v128);
    return swift_release(v159);
  }

  uint64_t v66 = (uint64_t)v46;
  uint64_t v67 = v142;
  sub_1000C998C(v66, v142, type metadata accessor for DeviceSupportInformationRecord);
  int v68 = objc_autoreleasePoolPush();
  sub_1000E95EC(v67, aBlock);
  objc_autoreleasePoolPop(v68);
  Class v69 = aBlock[0];
  id v70 = -[objc_class recordID](aBlock[0], "recordID");

  int v71 = objc_autoreleasePoolPush();
  sub_1000E95EC(v67, aBlock);
  objc_autoreleasePoolPop(v71);
  Class v72 = aBlock[0];
  uint64_t v74 = CKRecord.recordType.getter(v73);
  uint64_t v76 = v75;

  id v77 = v154;
  sub_10014C090(v70, v74, v76, 0);

  uint64_t v78 = v76;
  uint64_t v79 = v77;
  swift_bridgeObjectRelease(v78);
  uint64_t v80 = v135;
  unint64_t v81 = v132;
  uint64_t v82 = v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v132, v67, v137);
  uint64_t v83 = (uint64_t *)(v67 + *(int *)(v48 + 24));
  uint64_t v85 = *v83;
  uint64_t v84 = v83[1];
  uint64_t v86 = swift_bridgeObjectRetain(v84);
  uint64_t v87 = v133;
  uint64_t v88 = Date.init()(v86);
  double v89 = Date.timeIntervalSince1970.getter(v88);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v87, v138);
  uint64_t v90 = (uint64_t)v143;
  *uint64_t v143 = 1;
  *(void *)(v90 + 8) = 0xD00000000000001ELL;
  *(void *)(v90 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x80000001001CABA0LL;
  id v91 = (int *)v134;
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v90 + *(int *)(v134 + 24), v81, v82);
  uint64_t v92 = (void *)(v90 + v91[7]);
  *uint64_t v92 = v85;
  v92[1] = v84;
  *(double *)(v90 + v91[8]) = v89;
  *(_OWORD *)(v90 + v91[9]) = xmmword_1001A9700;
  uint64_t v93 = objc_autoreleasePoolPush();
  sub_10015802C((uint64_t)v79, v90);
  objc_autoreleasePoolPop(v93);
  uint64_t v94 = sub_10013B740();
  uint64_t v95 = *(void **)(v94 + 72);
  uint64_t v96 = v139;
  *id v139 = v95;
  uint64_t v97 = v140;
  unint64_t v98 = v141;
  (*(void (**)(void *, void, uint64_t))(v140 + 104))( v96,  enum case for DispatchPredicate.notOnQueue(_:),  v141);
  id v99 = v95;
  LOBYTE(v85) = _dispatchPreconditionTest(_:)(v96);
  (*(void (**)(void *, unint64_t))(v97 + 8))(v96, v98);
  if ((v85 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100187664, v94, &type metadata for Bool);
    uint64_t v100 = swift_unknownObjectRelease(v94);
    if (LOBYTE(aBlock[0]) == 1)
    {
      uint64_t v101 = sub_10013B740();
      uint64_t v102 = objc_autoreleasePoolPush();
      sub_1000E95EC(v67, aBlock);
      objc_autoreleasePoolPop(v102);
      Class v103 = aBlock[0];
      id v104 = -[objc_class recordID](aBlock[0], "recordID");

      uint64_t v105 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
      swift_weakInit(v105 + 16, v79);
      uint64_t v106 = v146;
      sub_1000A7C90(v67, v146, type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v107 = *(unsigned __int8 *)(v155 + 80);
      uint64_t v108 = (v107 + 16) & ~v107;
      unint64_t v109 = (v145 + v108 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v110 = swift_allocObject(&unk_100211840, v109 + 8, v107 | 7);
      sub_1000C998C(v106, v110 + v108, type metadata accessor for DeviceSupportInformationRecord);
      *(void *)(v110 + v109) = v105;
      uint64_t v111 = swift_allocObject(&unk_100211868, 49LL, 7LL);
      *(void *)(v111 + swift_unknownObjectWeakDestroy(v0 + 16) = v101;
      *(void *)(v111 + 24) = v104;
      *(void *)(v111 + 32) = sub_100187CB4;
      *(void *)(v111 + 40) = v110;
      *(_BYTE *)(v111 + 48) = 1;
      swift_retain(v105);
      swift_unknownObjectRetain(v101);
      id v112 = v104;
      swift_retain(v110);
      sub_100104BA4((uint64_t)sub_10018749C, v111);
      swift_release(v105);
      swift_release(v110);
      swift_unknownObjectRelease(v101);

      uint64_t v113 = swift_release(v111);
      uint64_t v79 = &type metadata for String;
      uint64_t v96 = (void *)v125;
      unint64_t v98 = v124;
    }

    else
    {
      uint64_t v114 = static os_log_type_t.error.getter(v100);
      uint64_t v115 = qword_10023DFC8;
      uint64_t v96 = (void *)v125;
      uint64_t v116 = swift_allocObject(v125, 72LL, 7LL);
      *(_OWORD *)(v116 + swift_unknownObjectWeakDestroy(v0 + 16) = v144;
      Class v117 = sub_1000E7430();
      uint64_t v79 = &type metadata for String;
      unint64_t v98 = v124;
      *(void *)(v116 + 56) = &type metadata for String;
      *(void *)(v116 + 64) = v98;
      *(void *)(v116 + 32) = v117;
      *(void *)(v116 + 40) = v118;
      os_log(_:dso:log:_:_:)( v114,  &_mh_execute_header,  v115,  "CloudCoordinator not available. Defer deleting record - %@",  58LL,  2LL,  v116);
      uint64_t v113 = swift_bridgeObjectRelease(v116);
    }

    uint64_t v94 = static os_log_type_t.debug.getter(v113);
    if (qword_100234C20 == -1) {
      goto LABEL_12;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100234C20, sub_10018A978);
LABEL_12:
  uint64_t v119 = qword_10023DFC0;
  uint64_t v120 = swift_allocObject(v96, 72LL, 7LL);
  *(_OWORD *)(v120 + swift_unknownObjectWeakDestroy(v0 + 16) = v144;
  aBlock[0] = 0LL;
  uint64_t v121 = sub_100098CD8(&qword_100235840);
  uint64_t v122 = String.init<A>(describing:)(aBlock, v121);
  *(void *)(v120 + 56) = v79;
  *(void *)(v120 + 64) = v98;
  *(void *)(v120 + 32) = v122;
  *(void *)(v120 + 40) = v123;
  os_log(_:dso:log:_:_:)( v94,  &_mh_execute_header,  v119,  "[Fetch] Removed deleted DeviceSupportInfo from cloud? - %@",  58LL,  2LL,  v120);
  swift_bridgeObjectRelease(v120);
  sub_1000A7CD4(v90, type metadata accessor for BTDeferredRecord);
  return sub_1000A7CD4(v67, type metadata accessor for DeviceSupportInformationRecord);
}

void sub_100152118(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v145 = a2;
  uint64_t v146 = a3;
  uint64_t v136 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v134 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v137 = (uint64_t *)((char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v130 = type metadata accessor for Date(0LL);
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v125 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for UUID(0LL);
  uint64_t v127 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  unint64_t v124 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v126);
  uint64_t v141 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v149 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v150 = (char *)&v120 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v120 - v18;
  uint64_t v151 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v151);
  uint64_t v152 = (uint64_t *)((char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v154 = *(void *)(v21 - 8);
  uint64_t v155 = v21;
  __chkstk_darwin(v21);
  uint64_t v143 = (uint64_t)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = v22;
  __chkstk_darwin(v23);
  uint64_t v140 = (uint64_t)&v120 - v24;
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v27 = qword_10023DFC8;
  uint64_t v123 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v28 = swift_allocObject(v123, 72LL, 7LL);
  __int128 v122 = xmmword_1001A5EA0;
  *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  Class v29 = sub_1000E7430();
  uint64_t v31 = v30;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v121 = sub_10009914C();
  *(void *)(v28 + 64) = v121;
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Remove device record: %@", 24LL, 2LL, v28);
  swift_bridgeObjectRelease(v28);
  uint64_t v153 = v4;
  uint64_t v32 = sub_10013A76C();
  uint64_t v33 = *(int *)(v155 + 24);
  uint64_t v144 = a1;
  uint64_t v147 = *(void *)(a1 + v33);
  if (qword_100234BC8 != -1) {
    swift_once(&qword_100234BC8, sub_1000E72E4);
  }
  uint64_t v34 = sub_100098D58(v12, (uint64_t)qword_10023DF00);
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v148 = v19;
  v37(v19, v34, v35);
  __n128 v38 = objc_autoreleasePoolPush();
  uint64_t v39 = v32;
  uint64_t v41 = URL.path.getter(v40);
  uint64_t v43 = v42;
  uint64_t v44 = v149;
  URL.appendingPathComponent(_:)(v41);
  swift_bridgeObjectRelease(v43);
  uint64_t v45 = v150;
  URL.appendingPathComponent(_:)(v147);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v36 + 8);
  v46(v44, v35);
  objc_autoreleasePoolPop(v38);
  uint64_t v47 = objc_autoreleasePoolPush();
  __chkstk_darwin(v47);
  *(&v120 - 2) = (uint64_t)v45;
  *(&v120 - 1) = v39;
  uint64_t v48 = v152;
  OS_dispatch_queue.sync<A>(execute:)(v152, sub_10018A7E8, &v120 - 4, v151);
  objc_autoreleasePoolPop(v47);
  v46(v45, v35);
  swift_release(v39);
  v46(v148, v35);
  uint64_t v49 = v154;
  uint64_t v50 = v155;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v154 + 48))(v48, 1LL, v155) == 1)
  {
    sub_100099358((uint64_t)v48, &qword_100235828);
    uint64_t v51 = *(void **)(v153 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    uint64_t v52 = v143;
    sub_1000A7C90(v144, v143, type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v53 = *(unsigned __int8 *)(v49 + 80);
    uint64_t v54 = (v53 + 16) & ~v53;
    unint64_t v55 = (v142 + v54 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v56 = swift_allocObject(&unk_100210198, v55 + 16, v53 | 7);
    sub_1000C998C(v52, v56 + v54, type metadata accessor for DeviceSupportInformationRecord);
    id v57 = (void *)(v56 + v55);
    uint64_t v58 = v146;
    *id v57 = v145;
    v57[1] = v58;
    aBlock[4] = (Class)sub_100187CAC;
    uint64_t v158 = v56;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000F2C54;
    void aBlock[3] = (Class)&unk_1002101B0;
    uint64_t v59 = _Block_copy(aBlock);
    id v60 = v51;
    uint64_t v61 = swift_retain(v58);
    uint64_t v62 = v131;
    static DispatchQoS.unspecified.getter(v61);
    uint64_t v156 = _swiftEmptyArrayStorage;
    uint64_t v63 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v64 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v65 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v66 = v134;
    uint64_t v67 = v64;
    uint64_t v68 = v136;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v156, v67, v65, v136, v63);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v62, v66, v59);
    _Block_release(v59);

    (*(void (**)(char *, uint64_t))(v135 + 8))(v66, v68);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v62, v133);
    swift_release(v158);
  }

  else
  {
    uint64_t v69 = v140;
    sub_1000C998C((uint64_t)v48, v140, type metadata accessor for DeviceSupportInformationRecord);
    id v70 = objc_autoreleasePoolPush();
    sub_1000E95EC(v69, aBlock);
    objc_autoreleasePoolPop(v70);
    Class v71 = aBlock[0];
    id v72 = -[objc_class recordID](aBlock[0], "recordID");

    uint64_t v73 = objc_autoreleasePoolPush();
    sub_1000E95EC(v69, aBlock);
    objc_autoreleasePoolPop(v73);
    Class v74 = aBlock[0];
    uint64_t v76 = CKRecord.recordType.getter(v75);
    uint64_t v78 = v77;

    uint64_t v79 = v153;
    sub_10014C090(v72, v76, v78, 0);

    swift_bridgeObjectRelease(v78);
    uint64_t v80 = v127;
    unint64_t v81 = v124;
    uint64_t v82 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v124, v69, v129);
    uint64_t v83 = (uint64_t *)(v69 + *(int *)(v50 + 24));
    uint64_t v85 = *v83;
    uint64_t v84 = v83[1];
    uint64_t v86 = swift_bridgeObjectRetain(v84);
    uint64_t v87 = v125;
    uint64_t v88 = Date.init()(v86);
    double v89 = Date.timeIntervalSince1970.getter(v88);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v87, v130);
    uint64_t v90 = (uint64_t)v141;
    _BYTE *v141 = 1;
    *(void *)(v90 + 8) = 0xD00000000000001ELL;
    *(void *)(v90 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x80000001001CABA0LL;
    id v91 = (int *)v126;
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v90 + *(int *)(v126 + 24), v81, v82);
    uint64_t v92 = (void *)(v90 + v91[7]);
    *uint64_t v92 = v85;
    v92[1] = v84;
    *(double *)(v90 + v91[8]) = v89;
    *(_OWORD *)(v90 + v91[9]) = xmmword_1001A9700;
    uint64_t v93 = objc_autoreleasePoolPush();
    sub_10015802C(v79, v90);
    objc_autoreleasePoolPop(v93);
    uint64_t v94 = sub_10013B740();
    uint64_t v95 = *(void **)(v94 + 72);
    uint64_t v96 = v137;
    *uint64_t v137 = v95;
    uint64_t v97 = v138;
    uint64_t v98 = v139;
    (*(void (**)(void *, void, uint64_t))(v138 + 104))( v96,  enum case for DispatchPredicate.notOnQueue(_:),  v139);
    id v99 = v95;
    LOBYTE(v85) = _dispatchPreconditionTest(_:)(v96);
    uint64_t v100 = (void *)(*(uint64_t (**)(void *, uint64_t))(v97 + 8))(v96, v98);
    if ((v85 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100187664, v94, &type metadata for Bool);
      uint64_t v101 = swift_unknownObjectRelease(v94);
      if (LOBYTE(aBlock[0]) == 1)
      {
        uint64_t v102 = sub_10013B740();
        Class v103 = objc_autoreleasePoolPush();
        sub_1000E95EC(v69, aBlock);
        objc_autoreleasePoolPop(v103);
        Class v104 = aBlock[0];
        id v105 = -[objc_class recordID](aBlock[0], "recordID");

        uint64_t v106 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
        swift_weakInit(v106 + 16, v79);
        uint64_t v107 = v143;
        sub_1000A7C90(v69, v143, type metadata accessor for DeviceSupportInformationRecord);
        uint64_t v108 = *(unsigned __int8 *)(v154 + 80);
        uint64_t v109 = (v108 + 16) & ~v108;
        unint64_t v110 = (v142 + v109 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v111 = swift_allocObject(&unk_1002101E8, v110 + 8, v108 | 7);
        sub_1000C998C(v107, v111 + v109, type metadata accessor for DeviceSupportInformationRecord);
        *(void *)(v111 + v110) = v106;
        uint64_t v112 = swift_allocObject(&unk_100210210, 49LL, 7LL);
        *(void *)(v112 + swift_unknownObjectWeakDestroy(v0 + 16) = v102;
        *(void *)(v112 + 24) = v105;
        *(void *)(v112 + 32) = sub_100187CB4;
        *(void *)(v112 + 40) = v111;
        *(_BYTE *)(v112 + 48) = 1;
        swift_retain(v106);
        swift_unknownObjectRetain(v102);
        id v113 = v105;
        swift_retain(v111);
        sub_100104BA4((uint64_t)sub_10018749C, v112);
        swift_release(v106);
        swift_release(v111);
        swift_unknownObjectRelease(v102);

        swift_release(v112);
      }

      else
      {
        uint64_t v114 = static os_log_type_t.error.getter(v101);
        uint64_t v115 = qword_10023DFC8;
        uint64_t v116 = swift_allocObject(v123, 72LL, 7LL);
        *(_OWORD *)(v116 + swift_unknownObjectWeakDestroy(v0 + 16) = v122;
        Class v117 = sub_1000E7430();
        unint64_t v118 = v121;
        *(void *)(v116 + 56) = &type metadata for String;
        *(void *)(v116 + 64) = v118;
        *(void *)(v116 + 32) = v117;
        *(void *)(v116 + 40) = v119;
        os_log(_:dso:log:_:_:)( v114,  &_mh_execute_header,  v115,  "CloudCoordinator not available. Defer deleting record - %@",  58LL,  2LL,  v116);
        swift_bridgeObjectRelease(v116);
      }

      v145(0LL);
      sub_1000A7CD4(v90, type metadata accessor for BTDeferredRecord);
      sub_1000A7CD4(v69, type metadata accessor for DeviceSupportInformationRecord);
    }

    else
    {
      __break(1u);
      objc_autoreleasePoolPop(v100);
      __break(1u);
    }
  }

uint64_t sub_100152D24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = static os_log_type_t.error.getter(a1);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v4 = qword_10023DFC8;
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  Class v7 = sub_1000E7430();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10009914C();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Record not found to remove: %@", 30LL, 2LL, v6);
  swift_bridgeObjectRelease(v6);
  return a2(0LL);
}

uint64_t sub_100152E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v6 = qword_10023DFC8;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v24[0] = a1;
    swift_errorRetain(a1);
    uint64_t v9 = sub_100098CD8(&qword_1002357C0);
    uint64_t v10 = String.init<A>(describing:)(v24, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10009914C();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  v6,  "Handling Error deleting device info Record - %@",  47LL,  2LL,  v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v15 = a3 + 16;
    uint64_t v16 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v17 = qword_10023DFC8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    Class v20 = sub_1000E7430();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "CloudSync: Deleted Info Record from cloud - %@",  46LL,  2LL,  v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v24, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v15);
    if (result)
    {
      uint64_t v23 = result;
      sub_10014ECD4(a2, 0);
      return swift_release(v23);
    }
  }

  return result;
}

uint64_t sub_10015303C(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v131 = *(void *)(v6 - 8);
  uint64_t v132 = v6;
  __chkstk_darwin(v6);
  uint64_t v130 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v127 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v140 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v139 = (uint64_t *)((char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v137 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v134 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for UUID(0LL);
  uint64_t v136 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v133 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v135);
  uint64_t v15 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v144 = &type metadata for AudioAccessoryFeatures;
  unint64_t v145 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  char v20 = isFeatureEnabled(_:)(aBlock);
  uint64_t v21 = sub_10009A498(aBlock);
  if ((v20 & 1) != 0)
  {
    uint64_t v121 = v11;
    uint64_t v122 = v9;
    uint64_t v123 = v15;
    uint64_t v125 = a2;
    uint64_t v126 = a3;
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v23 = qword_10023DFC8;
    uint64_t v120 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v24 = swift_allocObject(v120, 72LL, 7LL);
    __int128 v119 = xmmword_1001A5EA0;
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v25 = a1;
    id v26 = [v25 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v29 = v28;

    *(void *)(v24 + 56) = &type metadata for String;
    unint64_t v118 = sub_10009914C();
    *(void *)(v24 + 64) = v118;
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v29;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Remove AADeviceRecord: %@", 25LL, 2LL, v24);
    swift_bridgeObjectRelease(v24);
    uint64_t v30 = sub_10013A76C();
    id v124 = v25;
    uint64_t v31 = *(void *)&v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    uint64_t v32 = *(void *)&v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
    if (qword_100234BF8 != -1) {
      swift_once(&qword_100234BF8, sub_100113FD8);
    }
    uint64_t v33 = sub_100098D58(v16, (uint64_t)qword_10023DF40);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, v16);
    uint64_t v34 = (char *)sub_100138608(v31, v32, (uint64_t)v19, &qword_100236E48, (uint64_t)sub_100166F6C);
    swift_release(v30);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    if (v34)
    {
      uint64_t v35 = objc_autoreleasePoolPush();
      uint64_t v36 = (uint64_t *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
      uint64_t v37 = *(void *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
      unint64_t v38 = *(void *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
      sub_1000991CC(v37, v38);
      sub_100118B60(v37, v38);
      Class isa = v39;
      sub_100099394(v37, v38);
      if (!isa)
      {
        uint64_t v41 = v34;
        Class isa = sub_1000A3964((uint64_t)v41).super.isa;
      }

      uint64_t v42 = v121;
      aBlock[0] = isa;
      sub_100116DE8(aBlock);
      objc_autoreleasePoolPop(v35);
      id v43 = -[objc_class recordID](isa, "recordID");

      uint64_t v44 = objc_autoreleasePoolPush();
      uint64_t v45 = *v36;
      unint64_t v46 = v36[1];
      sub_1000991CC(*v36, v46);
      sub_100118B60(v45, v46);
      Class v48 = v47;
      sub_100099394(v45, v46);
      if (!v48)
      {
        uint64_t v49 = v34;
        Class v48 = sub_1000A3964((uint64_t)v49).super.isa;
      }

      aBlock[0] = v48;
      sub_100116DE8(aBlock);
      objc_autoreleasePoolPop(v44);
      uint64_t v51 = CKRecord.recordType.getter(v50);
      uint64_t v53 = v52;

      uint64_t v54 = v141;
      sub_10014C090(v43, v51, v53, 0);

      swift_bridgeObjectRelease(v53);
      uint64_t v55 = v136;
      uint64_t v56 = v133;
      uint64_t v57 = v138;
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))( v133,  &v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier],  v138);
      uint64_t v59 = *(void *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      uint64_t v58 = *(void *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
      uint64_t v60 = swift_bridgeObjectRetain(v58);
      uint64_t v61 = v134;
      uint64_t v62 = Date.init()(v60);
      double v63 = Date.timeIntervalSince1970.getter(v62);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v61, v42);
      uint64_t v64 = (uint64_t)v123;
      *uint64_t v123 = 1;
      strcpy((char *)(v64 + 8), "AADeviceRecord");
      *(_BYTE *)(v64 + 23) = -18;
      uint64_t v65 = (int *)v135;
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v64 + *(int *)(v135 + 24), v56, v57);
      uint64_t v66 = (void *)(v64 + v65[7]);
      void *v66 = v59;
      v66[1] = v58;
      *(double *)(v64 + v65[8]) = v63;
      *(_OWORD *)(v64 + v65[9]) = xmmword_1001A9700;
      uint64_t v67 = objc_autoreleasePoolPush();
      sub_10015802C(v54, v64);
      objc_autoreleasePoolPop(v67);
      uint64_t v68 = sub_10013B740();
      uint64_t v69 = *(void **)(v68 + 72);
      Class v71 = v139;
      uint64_t v70 = v140;
      *uint64_t v139 = v69;
      uint64_t v72 = v122;
      (*(void (**)(void *, void, uint64_t))(v70 + 104))( v71,  enum case for DispatchPredicate.notOnQueue(_:),  v122);
      id v73 = v69;
      LOBYTE(v56) = _dispatchPreconditionTest(_:)(v71);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v70 + 8))(v71, v72);
      if ((v56 & 1) != 0)
      {
        OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100187664, v68, &type metadata for Bool);
        uint64_t v75 = swift_unknownObjectRelease(v68);
        if (LOBYTE(aBlock[0]) == 1)
        {
          uint64_t v76 = sub_10013B740();
          uint64_t v77 = objc_autoreleasePoolPush();
          uint64_t v78 = *v36;
          unint64_t v79 = v36[1];
          sub_1000991CC(*v36, v79);
          sub_100118B60(v78, v79);
          Class v81 = v80;
          sub_100099394(v78, v79);
          if (!v81)
          {
            uint64_t v82 = v34;
            Class v81 = sub_1000A3964((uint64_t)v82).super.isa;
          }

          aBlock[0] = v81;
          sub_100116DE8(aBlock);
          objc_autoreleasePoolPop(v77);
          id v83 = -[objc_class recordID](v81, "recordID");

          uint64_t v84 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
          swift_weakInit(v84 + 16, v141);
          uint64_t v85 = swift_allocObject(&unk_100210148, 32LL, 7LL);
          *(void *)(v85 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
          *(void *)(v85 + 24) = v84;
          uint64_t v86 = swift_allocObject(&unk_100210170, 49LL, 7LL);
          *(void *)(v86 + swift_unknownObjectWeakDestroy(v0 + 16) = v76;
          *(void *)(v86 + 24) = v83;
          *(void *)(v86 + 32) = sub_100187C9C;
          *(void *)(v86 + 40) = v85;
          *(_BYTE *)(v86 + 48) = 1;
          uint64_t v87 = v34;
          swift_retain(v84);
          swift_unknownObjectRetain(v76);
          id v88 = v83;
          swift_retain(v85);
          sub_100104BA4((uint64_t)sub_10018749C, v86);
          swift_unknownObjectRelease(v76);

          swift_release(v84);
          swift_release(v85);
          swift_release(v86);
        }

        else
        {
          uint64_t v108 = static os_log_type_t.error.getter(v75);
          uint64_t v109 = qword_10023DFC8;
          uint64_t v110 = swift_allocObject(v120, 72LL, 7LL);
          *(_OWORD *)(v110 + swift_unknownObjectWeakDestroy(v0 + 16) = v119;
          id v111 = v124;
          id v112 = [v111 description];
          uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
          uint64_t v115 = v114;

          unint64_t v116 = v118;
          *(void *)(v110 + 56) = &type metadata for String;
          *(void *)(v110 + 64) = v116;
          *(void *)(v110 + 32) = v113;
          *(void *)(v110 + 40) = v115;
          os_log(_:dso:log:_:_:)( v108,  &_mh_execute_header,  v109,  "CloudCoordinator not available. Defer deleting record - %@",  58LL,  2LL,  v110);
          swift_bridgeObjectRelease(v110);
        }

        ((void (*)(void))v125)(0LL);

        return sub_1000A7CD4(v64, type metadata accessor for BTDeferredRecord);
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      uint64_t v92 = *(void **)(v141 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
      uint64_t v93 = (void *)swift_allocObject(&unk_1002100F8, 40LL, 7LL);
      id v94 = v124;
      uint64_t v95 = v125;
      v93[2] = v124;
      v93[3] = v95;
      uint64_t v96 = v126;
      v93[4] = v126;
      unint64_t v145 = (unint64_t)sub_100187C7C;
      uint64_t v146 = v93;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_1000F2C54;
      uint64_t v144 = (ValueMetadata *)&unk_100210110;
      uint64_t v97 = _Block_copy(aBlock);
      id v98 = v94;
      id v99 = v92;
      uint64_t v100 = swift_retain(v96);
      uint64_t v101 = v127;
      static DispatchQoS.unspecified.getter(v100);
      uint64_t v142 = _swiftEmptyArrayStorage;
      uint64_t v102 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v103 = sub_100098CD8((uint64_t *)&unk_100235790);
      uint64_t v104 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
      id v105 = v130;
      uint64_t v106 = v103;
      uint64_t v107 = v132;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v106, v104, v132, v102);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v97);
      _Block_release(v97);

      (*(void (**)(char *, uint64_t))(v131 + 8))(v105, v107);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v101, v129);
      return swift_release(v146);
    }
  }

  else
  {
    unint64_t v89 = sub_1000DB8A4();
    uint64_t v90 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v89, 0LL, 0LL);
    *id v91 = 0x8000000000000038LL;
    a2();
    return swift_errorRelease(v90);
  }

  return result;
}

uint64_t sub_100153B3C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v6 = qword_10023DFC8;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v26[0] = a1;
    swift_errorRetain(a1);
    uint64_t v9 = sub_100098CD8(&qword_1002357C0);
    uint64_t v10 = String.init<A>(describing:)(v26, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10009914C();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting AADeviceRecord - %@", 43LL, 2LL, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v15 = a3 + 16;
    uint64_t v16 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v17 = qword_10023DFC8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v20 = a2;
    id v21 = [v20 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v22;
    *(void *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "CloudSync: Deleted AADeviceRecord from cloud - %@",  49LL,  2LL,  v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v26, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v15);
    if (result)
    {
      uint64_t v25 = result;
      sub_1001500B4(v20, 0);
      return swift_release(v25);
    }
  }

  return result;
}

uint64_t sub_100153D7C(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v132 = *(void *)(v6 - 8);
  uint64_t v133 = v6;
  __chkstk_darwin(v6);
  uint64_t v131 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v128 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v141 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v140 = (uint64_t *)((char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v138 = *(void *)(v11 - 8);
  uint64_t v139 = v11;
  __chkstk_darwin(v11);
  uint64_t v134 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v137 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v135 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v136);
  uint64_t v16 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v145 = &type metadata for AudioAccessoryFeatures;
  unint64_t v146 = sub_10009E740();
  LOBYTE(aBlock[0]) = 0;
  char v21 = isFeatureEnabled(_:)(aBlock);
  uint64_t v22 = sub_10009A498(aBlock);
  if ((v21 & 1) != 0)
  {
    uint64_t v122 = v13;
    uint64_t v123 = v9;
    id v124 = v16;
    uint64_t v126 = a2;
    uint64_t v127 = a3;
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v24 = qword_10023DFC8;
    uint64_t v121 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v25 = swift_allocObject(v121, 72LL, 7LL);
    __int128 v120 = xmmword_1001A5EA0;
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v26 = a1;
    id v27 = [v26 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    *(void *)(v25 + 56) = &type metadata for String;
    unint64_t v119 = sub_10009914C();
    *(void *)(v25 + 64) = v119;
    *(void *)(v25 + 32) = v28;
    *(void *)(v25 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Remove AAProxCardsRecord: %@", 28LL, 2LL, v25);
    swift_bridgeObjectRelease(v25);
    uint64_t v31 = sub_10013A76C();
    id v125 = v26;
    uint64_t v32 = *(void *)&v26[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    uint64_t v33 = *(void *)&v26[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
    if (qword_100234B40 != -1) {
      swift_once(&qword_100234B40, sub_10009F940);
    }
    uint64_t v34 = sub_100098D58(v17, (uint64_t)qword_10023DCE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v34, v17);
    uint64_t v35 = (char *)sub_100138608(v32, v33, (uint64_t)v20, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if (v35)
    {
      uint64_t v36 = objc_autoreleasePoolPush();
      uint64_t v37 = (uint64_t *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
      uint64_t v38 = *(void *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
      unint64_t v39 = *(void *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
      sub_1000991CC(v38, v39);
      sub_100118B60(v38, v39);
      Class isa = v40;
      sub_100099394(v38, v39);
      if (!isa)
      {
        uint64_t v42 = v35;
        Class isa = sub_1000A3798((uint64_t)v42).super.isa;
      }

      uint64_t v43 = v122;
      aBlock[0] = isa;
      sub_1000A233C((unint64_t)aBlock);
      objc_autoreleasePoolPop(v36);
      id v44 = -[objc_class recordID](isa, "recordID");

      uint64_t v45 = objc_autoreleasePoolPush();
      uint64_t v46 = *v37;
      unint64_t v47 = v37[1];
      sub_1000991CC(*v37, v47);
      sub_100118B60(v46, v47);
      Class v49 = v48;
      sub_100099394(v46, v47);
      if (!v49)
      {
        uint64_t v50 = v35;
        Class v49 = sub_1000A3798((uint64_t)v50).super.isa;
      }

      aBlock[0] = v49;
      sub_1000A233C((unint64_t)aBlock);
      objc_autoreleasePoolPop(v45);
      uint64_t v52 = CKRecord.recordType.getter(v51);
      uint64_t v54 = v53;

      uint64_t v55 = v142;
      sub_10014C090(v44, v52, v54, 0);

      swift_bridgeObjectRelease(v54);
      uint64_t v56 = v137;
      uint64_t v57 = v135;
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))( v135,  &v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier],  v43);
      uint64_t v59 = *(void *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      uint64_t v58 = *(void *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
      uint64_t v60 = swift_bridgeObjectRetain(v58);
      uint64_t v61 = v134;
      uint64_t v62 = Date.init()(v60);
      double v63 = Date.timeIntervalSince1970.getter(v62);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v61, v139);
      uint64_t v64 = (uint64_t)v124;
      *id v124 = 1;
      *(void *)(v64 + 8) = 0xD000000000000011LL;
      *(void *)(v64 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x80000001001D2A80LL;
      uint64_t v65 = (int *)v136;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v64 + *(int *)(v136 + 24), v57, v43);
      uint64_t v66 = (void *)(v64 + v65[7]);
      void *v66 = v59;
      v66[1] = v58;
      *(double *)(v64 + v65[8]) = v63;
      *(_OWORD *)(v64 + v65[9]) = xmmword_1001A9700;
      uint64_t v67 = objc_autoreleasePoolPush();
      sub_10015802C(v55, v64);
      objc_autoreleasePoolPop(v67);
      uint64_t v68 = sub_10013B740();
      uint64_t v69 = *(void **)(v68 + 72);
      Class v71 = v140;
      uint64_t v70 = v141;
      *uint64_t v140 = v69;
      uint64_t v72 = v123;
      (*(void (**)(void *, void, uint64_t))(v70 + 104))( v71,  enum case for DispatchPredicate.notOnQueue(_:),  v123);
      id v73 = v69;
      char v74 = _dispatchPreconditionTest(_:)(v71);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v70 + 8))(v71, v72);
      if ((v74 & 1) != 0)
      {
        OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100187664, v68, &type metadata for Bool);
        uint64_t v76 = swift_unknownObjectRelease(v68);
        if (LOBYTE(aBlock[0]) == 1)
        {
          uint64_t v77 = sub_10013B740();
          uint64_t v78 = objc_autoreleasePoolPush();
          uint64_t v79 = *v37;
          unint64_t v80 = v37[1];
          sub_1000991CC(*v37, v80);
          sub_100118B60(v79, v80);
          Class v82 = v81;
          sub_100099394(v79, v80);
          if (!v82)
          {
            id v83 = v35;
            Class v82 = sub_1000A3798((uint64_t)v83).super.isa;
          }

          aBlock[0] = v82;
          sub_1000A233C((unint64_t)aBlock);
          objc_autoreleasePoolPop(v78);
          id v84 = -[objc_class recordID](v82, "recordID");

          uint64_t v85 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
          swift_weakInit(v85 + 16, v142);
          uint64_t v86 = swift_allocObject(&unk_1002100A8, 32LL, 7LL);
          *(void *)(v86 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
          *(void *)(v86 + 24) = v85;
          uint64_t v87 = swift_allocObject(&unk_1002100D0, 49LL, 7LL);
          *(void *)(v87 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
          *(void *)(v87 + 24) = v84;
          *(void *)(v87 + 32) = sub_100187C6C;
          *(void *)(v87 + 40) = v86;
          *(_BYTE *)(v87 + 48) = 1;
          id v88 = v35;
          swift_retain(v85);
          swift_unknownObjectRetain(v77);
          id v89 = v84;
          swift_retain(v86);
          sub_100104BA4((uint64_t)sub_10018749C, v87);
          swift_unknownObjectRelease(v77);

          swift_release(v85);
          swift_release(v86);
          swift_release(v87);
        }

        else
        {
          uint64_t v109 = static os_log_type_t.error.getter(v76);
          uint64_t v110 = qword_10023DFC8;
          uint64_t v111 = swift_allocObject(v121, 72LL, 7LL);
          *(_OWORD *)(v111 + swift_unknownObjectWeakDestroy(v0 + 16) = v120;
          id v112 = v125;
          id v113 = [v112 description];
          uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
          uint64_t v116 = v115;

          unint64_t v117 = v119;
          *(void *)(v111 + 56) = &type metadata for String;
          *(void *)(v111 + 64) = v117;
          *(void *)(v111 + 32) = v114;
          *(void *)(v111 + 40) = v116;
          os_log(_:dso:log:_:_:)( v109,  &_mh_execute_header,  v110,  "CloudCoordinator not available. Defer deleting record - %@",  58LL,  2LL,  v111);
          swift_bridgeObjectRelease(v111);
        }

        ((void (*)(void))v126)(0LL);

        return sub_1000A7CD4(v64, type metadata accessor for BTDeferredRecord);
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      uint64_t v93 = *(void **)(v142 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
      id v94 = (void *)swift_allocObject(&unk_100210058, 40LL, 7LL);
      id v95 = v125;
      uint64_t v96 = v126;
      v94[2] = v125;
      void v94[3] = v96;
      uint64_t v97 = v127;
      v94[4] = v127;
      unint64_t v146 = (unint64_t)sub_10018A860;
      uint64_t v147 = v94;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000F2C54;
      unint64_t v145 = (ValueMetadata *)&unk_100210070;
      id v98 = _Block_copy(aBlock);
      id v99 = v95;
      id v100 = v93;
      uint64_t v101 = swift_retain(v97);
      uint64_t v102 = v128;
      static DispatchQoS.unspecified.getter(v101);
      uint64_t v143 = _swiftEmptyArrayStorage;
      uint64_t v103 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v104 = sub_100098CD8((uint64_t *)&unk_100235790);
      uint64_t v105 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v106 = v131;
      uint64_t v107 = v104;
      uint64_t v108 = v133;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v143, v107, v105, v133, v103);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v102, v106, v98);
      _Block_release(v98);

      (*(void (**)(char *, uint64_t))(v132 + 8))(v106, v108);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v102, v130);
      return swift_release(v147);
    }
  }

  else
  {
    unint64_t v90 = sub_1000DB8A4();
    uint64_t v91 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v90, 0LL, 0LL);
    *uint64_t v92 = 0x8000000000000038LL;
    a2();
    return swift_errorRelease(v91);
  }

  return result;
}

uint64_t sub_100154860(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v6 = qword_10023DFC8;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v26[0] = a1;
    swift_errorRetain(a1);
    uint64_t v9 = sub_100098CD8(&qword_1002357C0);
    uint64_t v10 = String.init<A>(describing:)(v26, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10009914C();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting AAProxCardsRecord - %@", 46LL, 2LL, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v15 = a3 + 16;
    uint64_t v16 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v17 = qword_10023DFC8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v20 = a2;
    id v21 = [v20 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v22;
    *(void *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "CloudSync: Deleted AAProxCardsRecord from cloud - %@",  52LL,  2LL,  v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v26, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v15);
    if (result)
    {
      uint64_t v25 = result;
      sub_100150760(v20, 0);
      return swift_release(v25);
    }
  }

  return result;
}

void sub_100154AA0(char *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v81 = a3;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v78[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_10013A76C();
  uint64_t v12 = *(void *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
  uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8];
  if (qword_100234BC0 != -1) {
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }
  uint64_t v14 = sub_100098D58(v7, (uint64_t)qword_10023DE08);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v14, v7);
  uint64_t v15 = (char *)sub_100138608(v12, v13, (uint64_t)v10, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
  swift_release(v11);
  uint64_t v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  if (v15)
  {
    uint64_t v17 = sub_1000E5760(a1);
    unint64_t v80 = a2;
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = objc_autoreleasePoolPush();
      uint64_t v19 = *(void *)&v15[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
      unint64_t v20 = *(void *)&v15[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata + 8];
      sub_1000991CC(v19, v20);
      sub_100118B60(v19, v20);
      Class isa = v21;
      sub_100099394(v19, v20);
      if (!isa)
      {
        uint64_t v23 = v15;
        Class isa = sub_1000A3774((uint64_t)v23).super.isa;
      }

      Class v82 = isa;
      sub_1000E329C((id *)&v82);
      objc_autoreleasePoolPop(v18);
      id v24 = -[objc_class recordChangeTag](isa, "recordChangeTag");

      if (v24)
      {

        uint64_t v26 = static os_log_type_t.default.getter(v25);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        uint64_t v27 = qword_10023DFC8;
        uint64_t v28 = sub_100098CD8((uint64_t *)&unk_100234E00);
        uint64_t v29 = swift_allocObject(v28, 112LL, 7LL);
        *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
        uint64_t v30 = v15;
        id v31 = [v30 description];
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        uint64_t v34 = v33;

        *(void *)(v29 + 56) = &type metadata for String;
        unint64_t v35 = sub_10009914C();
        *(void *)(v29 + 64) = v35;
        *(void *)(v29 + 32) = v32;
        *(void *)(v29 + 40) = v34;
        uint64_t v36 = a1;
        id v37 = [v36 description];
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v40 = v39;

        *(void *)(v29 + 96) = &type metadata for String;
        *(void *)(v29 + 104) = v35;
        *(void *)(v29 + 72) = v38;
        *(void *)(v29 + 80) = v40;
        os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "No change from cached %@ [to] %@", 32LL, 2LL, v29);
        swift_bridgeObjectRelease(v29);
        v80(0LL);

        return;
      }
    }

    unsigned int v79 = static os_log_type_t.default.getter(v17);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v41 = qword_10023DFC8;
    uint64_t v42 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v43 = swift_allocObject(v42, 112LL, 7LL);
    *(_OWORD *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
    id v44 = v15;
    id v45 = [v44 description];
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v48 = v47;

    *(void *)(v43 + 56) = &type metadata for String;
    unint64_t v49 = sub_10009914C();
    *(void *)(v43 + 64) = v49;
    *(void *)(v43 + 32) = v46;
    *(void *)(v43 + 40) = v48;
    uint64_t v50 = a1;
    id v51 = [v50 description];
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v54 = v53;

    *(void *)(v43 + 96) = &type metadata for String;
    *(void *)(v43 + 104) = v49;
    *(void *)(v43 + 72) = v52;
    *(void *)(v43 + 80) = v54;
    os_log(_:dso:log:_:_:)( v79,  &_mh_execute_header,  v41,  "Updating cached HMDeviceCloudRecord: %@ with %@",  47LL,  2LL,  v43);
    swift_bridgeObjectRelease(v43);
    uint64_t v55 = v44;
    sub_1000E49A0(v50);

    a2 = v80;
  }

  else
  {
    uint64_t v56 = static os_log_type_t.default.getter(v16);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v57 = qword_10023DFC8;
    uint64_t v58 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v59 = swift_allocObject(v58, 72LL, 7LL);
    *(_OWORD *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v60 = a1;
    id v61 = [v60 description];
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    uint64_t v64 = v63;

    *(void *)(v59 + 56) = &type metadata for String;
    *(void *)(v59 + 64) = sub_10009914C();
    *(void *)(v59 + 32) = v62;
    *(void *)(v59 + 40) = v64;
    os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v57, "Add HMDeviceCloudRecord: %@", 27LL, 2LL, v59);
    swift_bridgeObjectRelease(v59);
    uint64_t v55 = v60;
  }

  uint64_t v65 = sub_10013A76C();
  Class v82 = v55;
  __chkstk_darwin(v65);
  *(void *)&v78[-16] = v66;
  *(void *)&v78[-8] = &v82;
  uint64_t v67 = v55;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001876F0, &v78[-32], &type metadata for () + 1);

  swift_release(v65);
  a2(0LL);
  uint64_t v68 = v67;
  uint64_t v69 = objc_autoreleasePoolPush();
  uint64_t v70 = *(uint64_t *)((char *)&v68->isa + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata);
  unint64_t v71 = *(unint64_t *)((char *)&v68[1].isa + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata);
  sub_1000991CC(v70, v71);
  sub_100118B60(v70, v71);
  Class v73 = v72;
  sub_100099394(v70, v71);
  if (!v73)
  {
    char v74 = v68;
    Class v73 = sub_1000A3774((uint64_t)v74).super.isa;
  }

  Class v82 = v73;
  sub_1000E329C((id *)&v82);
  objc_autoreleasePoolPop(v69);

  uint64_t v75 = sub_10013B740();
  uint64_t v76 = swift_allocObject(&unk_10020FE00, 32LL, 7LL);
  *(void *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v76 + 24) = v73;
  swift_retain(v4);
  uint64_t v77 = v73;
  sub_1001051E0(v77, 1, (uint64_t)sub_100187710, v76);
  swift_unknownObjectRelease(v75);
  swift_release(v76);
}

uint64_t sub_100155270(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v132 = a3;
  uint64_t v131 = a2;
  uint64_t v118 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v116 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  id v113 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v127 = *(void *)(v6 - 8);
  uint64_t v128 = v6;
  __chkstk_darwin(v6);
  uint64_t v126 = (uint64_t *)((char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v123 = *(void *)(v8 - 8);
  uint64_t v124 = v8;
  __chkstk_darwin(v8);
  unint64_t v119 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for UUID(0LL);
  uint64_t v122 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  __int128 v120 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v121);
  uint64_t v129 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v18 = qword_10023DFC8;
  uint64_t v112 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v19 = swift_allocObject(v112, 72LL, 7LL);
  __int128 v111 = xmmword_1001A5EA0;
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  unint64_t v20 = a1;
  id v21 = [v20 description];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  *(void *)(v19 + 56) = &type metadata for String;
  unint64_t v110 = sub_10009914C();
  *(void *)(v19 + 64) = v110;
  *(void *)(v19 + 32) = v22;
  *(void *)(v19 + 40) = v24;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Remove HMDeviceCloudRecord: %@", 30LL, 2LL, v19);
  swift_bridgeObjectRelease(v19);
  uint64_t v25 = (uint64_t)v133;
  uint64_t v26 = sub_10013A76C();
  id v130 = v20;
  uint64_t v27 = *(void *)&v20[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
  uint64_t v28 = *(void *)&v20[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8];
  if (qword_100234BC0 != -1) {
    swift_once(&qword_100234BC0, sub_1000DD8E4);
  }
  uint64_t v29 = sub_100098D58(v12, (uint64_t)qword_10023DE08);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, v12);
  uint64_t v30 = (char *)sub_100138608(v27, v28, (uint64_t)v15, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v30)
  {
    id v31 = objc_autoreleasePoolPush();
    uint64_t v32 = (uint64_t *)&v30[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    uint64_t v33 = *(void *)&v30[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    unint64_t v34 = *(void *)&v30[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata + 8];
    sub_1000991CC(v33, v34);
    sub_100118B60(v33, v34);
    Class isa = v35;
    sub_100099394(v33, v34);
    if (!isa)
    {
      id v37 = v30;
      Class isa = sub_1000A3774((uint64_t)v37).super.isa;
    }

    uint64_t v38 = (uint64_t)v129;
    aBlock[0] = isa;
    sub_1000E329C(aBlock);
    objc_autoreleasePoolPop(v31);
    id v39 = -[objc_class recordID](isa, "recordID");

    uint64_t v40 = objc_autoreleasePoolPush();
    uint64_t v133 = v32;
    uint64_t v41 = *v32;
    unint64_t v42 = v32[1];
    sub_1000991CC(v41, v42);
    sub_100118B60(v41, v42);
    Class v44 = v43;
    sub_100099394(v41, v42);
    if (!v44)
    {
      id v45 = v30;
      Class v44 = sub_1000A3774((uint64_t)v45).super.isa;
    }

    aBlock[0] = v44;
    sub_1000E329C(aBlock);
    objc_autoreleasePoolPop(v40);
    uint64_t v47 = CKRecord.recordType.getter(v46);
    uint64_t v49 = v48;

    sub_10014C090(v39, v47, v49, 0);
    swift_bridgeObjectRelease(v49);
    uint64_t v50 = v122;
    id v51 = v120;
    uint64_t v52 = v125;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))( v120,  &v30[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier],  v125);
    uint64_t v54 = *(void *)&v30[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
    uint64_t v53 = *(void *)&v30[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8];
    uint64_t v55 = swift_bridgeObjectRetain(v53);
    uint64_t v56 = v119;
    uint64_t v57 = Date.init()(v55);
    double v58 = Date.timeIntervalSince1970.getter(v57);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v56, v124);
    *(_BYTE *)uint64_t v38 = 1;
    *(void *)(v38 + 8) = 0xD000000000000013LL;
    *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x80000001001CB4E0LL;
    uint64_t v59 = (int *)v121;
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v38 + *(int *)(v121 + 24), v51, v52);
    uint64_t v60 = (void *)(v38 + v59[7]);
    void *v60 = v54;
    v60[1] = v53;
    *(double *)(v38 + v59[8]) = v58;
    *(_OWORD *)(v38 + v59[9]) = xmmword_1001A9700;
    id v61 = objc_autoreleasePoolPush();
    sub_10015802C(v25, v38);
    objc_autoreleasePoolPop(v61);
    uint64_t v62 = v25;
    uint64_t v63 = sub_10013B740();
    uint64_t v64 = *(void **)(v63 + 72);
    uint64_t v65 = v126;
    uint64_t v66 = v127;
    void *v126 = v64;
    uint64_t v67 = v128;
    (*(void (**)(void *, void, uint64_t))(v66 + 104))( v65,  enum case for DispatchPredicate.notOnQueue(_:),  v128);
    id v68 = v64;
    LOBYTE(v54) = _dispatchPreconditionTest(_:)(v65);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v66 + 8))(v65, v67);
    if ((v54 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100187664, v63, &type metadata for Bool);
      uint64_t v70 = swift_unknownObjectRelease(v63);
      if (LOBYTE(aBlock[0]) == 1)
      {
        uint64_t v71 = sub_10013B740();
        uint64_t v72 = objc_autoreleasePoolPush();
        uint64_t v73 = *v133;
        unint64_t v74 = v133[1];
        sub_1000991CC(*v133, v74);
        sub_100118B60(v73, v74);
        Class v76 = v75;
        sub_100099394(v73, v74);
        if (!v76)
        {
          uint64_t v77 = v30;
          Class v76 = sub_1000A3774((uint64_t)v77).super.isa;
        }

        aBlock[0] = v76;
        sub_1000E329C(aBlock);
        objc_autoreleasePoolPop(v72);
        id v78 = -[objc_class recordID](v76, "recordID");

        uint64_t v79 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
        swift_weakInit(v79 + 16, v62);
        uint64_t v80 = swift_allocObject(&unk_10020FDB0, 32LL, 7LL);
        *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
        *(void *)(v80 + 24) = v79;
        uint64_t v81 = swift_allocObject(&unk_10020FDD8, 49LL, 7LL);
        *(void *)(v81 + swift_unknownObjectWeakDestroy(v0 + 16) = v71;
        *(void *)(v81 + 24) = v78;
        *(void *)(v81 + 32) = sub_1001876E4;
        *(void *)(v81 + 40) = v80;
        *(_BYTE *)(v81 + 48) = 1;
        Class v82 = v30;
        swift_retain(v79);
        swift_unknownObjectRetain(v71);
        id v83 = v78;
        swift_retain(v80);
        sub_100104BA4((uint64_t)sub_10018749C, v81);
        swift_unknownObjectRelease(v71);

        swift_release(v79);
        swift_release(v80);
        swift_release(v81);
      }

      else
      {
        uint64_t v100 = static os_log_type_t.error.getter(v70);
        uint64_t v101 = qword_10023DFC8;
        uint64_t v102 = swift_allocObject(v112, 72LL, 7LL);
        *(_OWORD *)(v102 + swift_unknownObjectWeakDestroy(v0 + 16) = v111;
        id v103 = v130;
        id v104 = [v103 description];
        uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        uint64_t v107 = v106;

        unint64_t v108 = v110;
        *(void *)(v102 + 56) = &type metadata for String;
        *(void *)(v102 + 64) = v108;
        *(void *)(v102 + 32) = v105;
        *(void *)(v102 + 40) = v107;
        os_log(_:dso:log:_:_:)( v100,  &_mh_execute_header,  v101,  "CloudCoordinator not available. Defer deleting record - %@",  58LL,  2LL,  v102);
        swift_bridgeObjectRelease(v102);
      }

      v131(0LL);

      return sub_1000A7CD4(v38, type metadata accessor for BTDeferredRecord);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    id v84 = *(void **)(v25 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    uint64_t v85 = (void *)swift_allocObject(&unk_10020FD60, 40LL, 7LL);
    id v87 = v130;
    uint64_t v86 = v131;
    v85[2] = v130;
    v85[3] = v86;
    uint64_t v88 = v132;
    v85[4] = v132;
    aBlock[4] = sub_10018A860;
    uint64_t v136 = v85;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000F2C54;
    void aBlock[3] = &unk_10020FD78;
    id v89 = _Block_copy(aBlock);
    id v90 = v87;
    id v91 = v84;
    uint64_t v92 = swift_retain(v88);
    uint64_t v93 = v113;
    static DispatchQoS.unspecified.getter(v92);
    uint64_t v134 = _swiftEmptyArrayStorage;
    uint64_t v94 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v95 = sub_100098CD8((uint64_t *)&unk_100235790);
    uint64_t v96 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v97 = v116;
    uint64_t v98 = v95;
    uint64_t v99 = v118;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v134, v98, v96, v118, v94);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v93, v97, v89);
    _Block_release(v89);

    (*(void (**)(char *, uint64_t))(v117 + 8))(v97, v99);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v93, v115);
    return swift_release(v136);
  }

  return result;
}

uint64_t sub_100155CC8(void *a1, uint64_t (*a2)(void))
{
  uint64_t v4 = static os_log_type_t.error.getter(a1);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v5 = qword_10023DFC8;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  id v8 = a1;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10009914C();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Record not found to remove: %@", 30LL, 2LL, v7);
  swift_bridgeObjectRelease(v7);
  return a2(0LL);
}

uint64_t sub_100155DF0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v6 = qword_10023DFC8;
    uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v26[0] = a1;
    swift_errorRetain(a1);
    uint64_t v9 = sub_100098CD8(&qword_1002357C0);
    uint64_t v10 = String.init<A>(describing:)(v26, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10009914C();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  v6,  "Handling Error deleting HMDeviceCloudRecord - %@",  48LL,  2LL,  v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v15 = a3 + 16;
    uint64_t v16 = static os_log_type_t.default.getter(0LL);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v17 = qword_10023DFC8;
    uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v20 = a2;
    id v21 = [v20 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10009914C();
    *(void *)(v19 + 32) = v22;
    *(void *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "CloudSync: Deleted HMDeviceCloudRecord from cloud - %@",  54LL,  2LL,  v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v26, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v15);
    if (result)
    {
      uint64_t v25 = result;
      sub_100150DEC(v20, 0);
      return swift_release(v25);
    }
  }

  return result;
}

uint64_t sub_100156030(int a1, void (*a2)(void), void *a3)
{
  id v111 = a3;
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v106 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v104 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v110 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100098CD8(&qword_1002357D8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for LegacyMagicPairingSettingsRecords(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v107 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  id v21 = (char *)&v97 - v20;
  sub_10013C62C((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_100099358((uint64_t)v15, &qword_1002357D8);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    if (Strong)
    {
      uint64_t v24 = Strong;
      id v25 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
      if ((_DWORD)v25)
      {
        uint64_t v26 = sub_10013A76C();
        if (qword_100234B70 != -1) {
          swift_once(&qword_100234B70, sub_1000CAF84);
        }
        uint64_t v27 = sub_100098D58(v10, (uint64_t)qword_10023DD70);
        uint64_t v28 = (uint64_t)v110;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v110, v27, v10);
        uint64_t v29 = sub_100139314( v28,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
        swift_release(v26);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v10);
      }

      else
      {
        uint64_t v66 = static os_log_type_t.error.getter(v25);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        uint64_t v29 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v66,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
      }

      sub_1001313CC((uint64_t)v29, (uint64_t)&unk_10020FD10, (uint64_t)sub_10018769C, (uint64_t)&unk_10020FD28);
      swift_bridgeObjectRelease(v29);
      swift_unknownObjectRelease(v24);
    }

    return ((uint64_t (*)(void))a2)(0LL);
  }

  uint64_t v102 = (void (*)(uint64_t, uint64_t))a2;
  uint64_t v103 = v10;
  int v101 = a1;
  uint64_t v108 = v3;
  uint64_t v30 = sub_1000C998C((uint64_t)v15, (uint64_t)v21, type metadata accessor for LegacyMagicPairingSettingsRecords);
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v32 = qword_10023DFC8;
  uint64_t v100 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v33 = swift_allocObject(v100, 72LL, 7LL);
  __int128 v99 = xmmword_1001A5EA0;
  *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v34 = v107;
  sub_1000A7C90((uint64_t)v21, v107, type metadata accessor for LegacyMagicPairingSettingsRecords);
  uint64_t v35 = sub_1000F05C4();
  uint64_t v37 = v36;
  sub_1000A7CD4(v34, type metadata accessor for LegacyMagicPairingSettingsRecords);
  *(void *)(v33 + 56) = &type metadata for String;
  unint64_t v98 = sub_10009914C();
  *(void *)(v33 + 64) = v98;
  *(void *)(v33 + 32) = v35;
  *(void *)(v33 + 40) = v37;
  os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v32,  "Deleted legacy magic pairing records Record from disk - %@",  58LL,  2LL,  v33);
  swift_bridgeObjectRelease(v33);
  uint64_t v38 = sub_10013A76C();
  uint64_t v105 = v21;
  uint64_t v39 = UUID.uuidString.getter(v38);
  uint64_t v41 = v40;
  if (qword_100234BD0 != -1) {
    swift_once(&qword_100234BD0, sub_1000F0478);
  }
  uint64_t v42 = v103;
  uint64_t v43 = sub_100098D58(v103, (uint64_t)qword_10023DF18);
  Class v44 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v45 = (uint64_t)v110;
  uint64_t v46 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v110, v43, v42);
  __chkstk_darwin(v46);
  *(&v97 - 4) = v38;
  *(&v97 - 3) = v39;
  *(&v97 - 2) = v41;
  *(&v97 - 1) = v45;
  OS_dispatch_queue.sync<A>(execute:)(&v112, sub_10018A6A0, &v97 - 6, &type metadata for Bool);
  swift_release(v38);
  swift_bridgeObjectRelease(v41);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v47(v45, v42);
  ((void (*)(void))v102)(0LL);
  uint64_t v48 = &selRef_deviceForIDSDevice_createNew_;
  id v111 = (id)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v49 = [v111 isFirstUnlocked];
  if ((_DWORD)v49)
  {
    uint64_t v50 = v108;
    uint64_t v51 = sub_10013A76C();
    if (qword_100234B70 != -1) {
      swift_once(&qword_100234B70, sub_1000CAF84);
    }
    uint64_t v52 = sub_100098D58(v42, (uint64_t)qword_10023DD70);
    ((void (*)(uint64_t, uint64_t, uint64_t))v44)(v45, v52, v42);
    uint64_t v53 = sub_100139314( v45,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
    swift_release(v51);
    v47(v45, v42);
    uint64_t v48 = &selRef_deviceForIDSDevice_createNew_;
  }

  else
  {
    uint64_t v54 = static os_log_type_t.error.getter(v49);
    uint64_t v53 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v50 = v108;
  }

  uint64_t v55 = v106;
  if (v53[2])
  {
    sub_1000A7C90( (uint64_t)v53 + ((*((unsigned __int8 *)v106 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v106 + 80)),  (uint64_t)v8,  type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v56 = 0LL;
  }

  else
  {
    uint64_t v56 = 1LL;
  }

  uint64_t v57 = v109;
  v55[7](v8, v56, 1LL, v109);
  swift_bridgeObjectRelease(v53);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55[6])(v8, 1LL, v57) != 1)
  {
    uint64_t v106 = v44;
    uint64_t v59 = v104;
    sub_1000C998C((uint64_t)v8, v104, type metadata accessor for MagicPairingSettingsRecord);
    sub_1000EF00C();
    uint64_t v61 = v60;
    if ((unint64_t)v60 >> 62)
    {
      if (v60 >= 0) {
        v60 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      if (_CocoaArrayWrapper.endIndex.getter(v60))
      {
LABEL_23:
        if ((v61 & 0xC000000000000001LL) != 0)
        {
          uint64_t v62 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v61);
        }

        else
        {
          if (!*(void *)((v61 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            goto LABEL_62;
          }

          uint64_t v62 = (char *)*(id *)(v61 + 32);
        }

        uint64_t v8 = v62;
        swift_bridgeObjectRelease(v61);
        id v63 = [v111 isFirstUnlocked];
        if (!(_DWORD)v63)
        {
          uint64_t v68 = static os_log_type_t.error.getter(v63);
          uint64_t v65 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
          goto LABEL_35;
        }

        uint64_t v61 = sub_10013A76C();
        if (qword_100234B70 == -1)
        {
LABEL_28:
          uint64_t v64 = sub_100098D58(v42, (uint64_t)qword_10023DD70);
          ((void (*)(uint64_t, uint64_t, uint64_t))v106)(v45, v64, v42);
          uint64_t v65 = sub_100139314( v45,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
          swift_release(v61);
          v47(v45, v42);
LABEL_35:
          uint64_t v69 = v65[2];
          swift_bridgeObjectRelease(v65);
          if (v69 != 1) {
            goto LABEL_42;
          }
          sub_1000EF00C();
          uint64_t v71 = v70;
          if ((unint64_t)v70 >> 62)
          {
            if (v70 >= 0) {
              v70 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v72 = _CocoaArrayWrapper.endIndex.getter(v70);
          }

          else
          {
            uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          swift_bridgeObjectRelease(v71);
          if (v72 != 1)
          {
LABEL_42:
            sub_1000A7CD4(v59, type metadata accessor for MagicPairingSettingsRecord);

            Class v44 = v106;
LABEL_47:
            uint64_t v48 = &selRef_deviceForIDSDevice_createNew_;
            goto LABEL_52;
          }

          uint64_t v102 = v47;
          uint64_t v73 = (uint64_t *)(v59 + *(int *)(v109 + 24));
          uint64_t v75 = *v73;
          uint64_t v74 = v73[1];
          swift_bridgeObjectRetain(v74);
          id v76 = [v8 bluetoothAddress];
          uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
          uint64_t v79 = v78;

          if (v75 == v77 && v74 == v79)
          {
            uint64_t v80 = swift_bridgeObjectRelease_n(v74, 2LL);
          }

          else
          {
            char v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v74, v77, v79, 0LL);
            swift_bridgeObjectRelease(v74);
            uint64_t v80 = swift_bridgeObjectRelease(v79);
            if ((v81 & 1) == 0)
            {
              sub_1000A7CD4(v59, type metadata accessor for MagicPairingSettingsRecord);

              uint64_t v42 = v103;
              uint64_t v50 = v108;
              goto LABEL_46;
            }
          }

          uint64_t v82 = static os_log_type_t.default.getter(v80);
          uint64_t v83 = qword_10023DFC8;
          uint64_t v84 = swift_allocObject(v100, 72LL, 7LL);
          *(_OWORD *)(v84 + swift_unknownObjectWeakDestroy(v0 + 16) = v99;
          uint64_t v85 = v107;
          sub_1000A7C90((uint64_t)v105, v107, type metadata accessor for LegacyMagicPairingSettingsRecords);
          uint64_t v86 = sub_1000F05C4();
          uint64_t v88 = v87;
          sub_1000A7CD4(v85, type metadata accessor for LegacyMagicPairingSettingsRecords);
          unint64_t v89 = v98;
          *(void *)(v84 + 56) = &type metadata for String;
          *(void *)(v84 + 64) = v89;
          *(void *)(v84 + 32) = v86;
          *(void *)(v84 + 40) = v88;
          os_log(_:dso:log:_:_:)( v82,  &_mh_execute_header,  v83,  "Deleting last magic pairing record - %@",  39LL,  2LL,  v84);
          swift_bridgeObjectRelease(v84);
          uint64_t v50 = v108;
          sub_10014F39C(v59, (v101 & 1) == 0);

          sub_1000A7CD4(v59, type metadata accessor for MagicPairingSettingsRecord);
          uint64_t v42 = v103;
LABEL_46:
          Class v44 = v106;
          uint64_t v47 = v102;
          goto LABEL_47;
        }

uint64_t sub_100156BC4(void *a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a7;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v16 - 8);
  uint64_t v30 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  uint64_t v20 = swift_allocObject(a5, 48LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v20 + 24) = a2 & 1;
  *(void *)(v20 + 32) = a3;
  *(void *)(v20 + 40) = a4;
  aBlock[4] = a6;
  uint64_t v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F2C54;
  void aBlock[3] = v28;
  id v21 = _Block_copy(aBlock);
  id v22 = v19;
  sub_10010BF1C(a1, a2 & 1);
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(a4);
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100098CD8((uint64_t *)&unk_100235790);
  uint64_t v25 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v13, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v15, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
  return swift_release(v34);
}

void sub_100156DE8( void *a1, char a2, uint64_t a3, char *a4, const char *a5, uint64_t a6, const char *a7, uint64_t a8)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v24 = swift_errorRetain(a1);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v26 = qword_10023DFC8;
    uint64_t v27 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v28 = swift_allocObject(v27, 72LL, 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t v33 = a1;
    swift_errorRetain(a1);
    uint64_t v29 = sub_100098CD8(&qword_1002357C0);
    uint64_t v30 = String.init<A>(describing:)(&v33, v29);
    uint64_t v32 = v31;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10009914C();
    *(void *)(v28 + 32) = v30;
    *(void *)(v28 + 40) = v32;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, a7, a8, 2LL, v28);
    swift_bridgeObjectRelease(v28);
    sub_1001418AC(a4, (uint64_t)_swiftEmptyArrayStorage, 0);
    sub_100112C7C(a1, 1);
  }

  else
  {
    id v11 = a1;
    uint64_t v12 = static os_log_type_t.default.getter(v11);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v13 = qword_10023DFC8;
    uint64_t v14 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    id v16 = v11;
    id v17 = [v16 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    sub_100112C7C(a1, 0);
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10009914C();
    *(void *)(v15 + 32) = v18;
    *(void *)(v15 + 40) = v20;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, a5, a6, 2LL, v15);
    swift_bridgeObjectRelease(v15);
    sub_1001418AC((char *)v16, (uint64_t)_swiftEmptyArrayStorage, 0);
    sub_100112C7C(a1, 0);
  }

uint64_t sub_100157070(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v155 = a4;
  uint64_t v156 = a3;
  int v136 = a2;
  uint64_t v146 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v144 = (uint64_t *)((char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v143 = type metadata accessor for Date(0LL);
  uint64_t v141 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v138 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = type metadata accessor for UUID(0LL);
  uint64_t v140 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v137 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v139);
  id v11 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v157 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v159 = (char *)&v131 - v16;
  __chkstk_darwin(v17);
  uint64_t v162 = (uint64_t *)((char *)&v131 - v18);
  uint64_t v158 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v158);
  id v160 = (uint64_t *)((char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v163 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v161 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v132 = (uint64_t)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v135 = (uint64_t)&v131 - v22;
  __chkstk_darwin(v23);
  uint64_t v134 = (uint64_t)&v131 - v24;
  __chkstk_darwin(v25);
  uint64_t v147 = (uint64_t)&v131 - v26;
  uint64_t v133 = v27;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v131 - v29;
  uint64_t v32 = static os_log_type_t.default.getter(v31);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v148 = v11;
  uint64_t v33 = qword_10023DFC8;
  uint64_t v150 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v34 = swift_allocObject(v150, 72LL, 7LL);
  __int128 v149 = xmmword_1001A5EA0;
  *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  sub_1000A7C90(a1, (uint64_t)v30, type metadata accessor for MagicPairingSettingsRecord);
  uint64_t v35 = sub_1000CB0DC();
  uint64_t v36 = (uint64_t)v30;
  uint64_t v38 = v37;
  uint64_t v153 = v36;
  sub_1000A7CD4(v36, type metadata accessor for MagicPairingSettingsRecord);
  *(void *)(v34 + 56) = &type metadata for String;
  unint64_t v151 = sub_10009914C();
  *(void *)(v34 + 64) = v151;
  *(void *)(v34 + 32) = v35;
  *(void *)(v34 + 40) = v38;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Remove magic device record: %@", 30LL, 2LL, v34);
  swift_bridgeObjectRelease(v34);
  uint64_t v154 = v5;
  uint64_t v39 = sub_10013A76C();
  uint64_t v40 = *(int *)(v163 + 24);
  uint64_t v152 = a1;
  uint64_t v41 = *(void *)(a1 + v40);
  if (qword_100234B70 != -1) {
    swift_once(&qword_100234B70, sub_1000CAF84);
  }
  sub_100098D58(v12, (uint64_t)qword_10023DD70);
  uint64_t v42 = v12;
  uint64_t v43 = v157;
  (*(void (**)(void))(v157 + 16))();
  Class v44 = objc_autoreleasePoolPush();
  uint64_t v46 = URL.path.getter(v45);
  uint64_t v48 = v47;
  URL.appendingPathComponent(_:)(v46);
  swift_bridgeObjectRelease(v48);
  id v49 = v159;
  URL.appendingPathComponent(_:)(v41);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v14, v42);
  objc_autoreleasePoolPop(v44);
  uint64_t v51 = objc_autoreleasePoolPush();
  __chkstk_darwin(v51);
  *(&v131 - 2) = (uint64_t)v49;
  *(&v131 - 1) = v39;
  uint64_t v52 = v160;
  OS_dispatch_queue.sync<A>(execute:)(v160, sub_10018A7D4, &v131 - 4, v158);
  objc_autoreleasePoolPop(v51);
  v50(v49, v42);
  swift_release(v39);
  v50((char *)v162, v42);
  uint64_t v53 = v163;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v161 + 48))(v52, 1LL, v163) == 1)
  {
    uint64_t v54 = sub_100099358((uint64_t)v52, (uint64_t *)&unk_100235810);
    uint64_t v55 = static os_log_type_t.error.getter(v54);
    uint64_t v56 = qword_10023DFC8;
    uint64_t v57 = swift_allocObject(v150, 72LL, 7LL);
    *(_OWORD *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = v149;
    uint64_t v58 = v153;
    sub_1000A7C90(v152, v153, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v59 = sub_1000CB0DC();
    uint64_t v61 = v60;
    sub_1000A7CD4(v58, type metadata accessor for MagicPairingSettingsRecord);
    unint64_t v62 = v151;
    *(void *)(v57 + 56) = &type metadata for String;
    *(void *)(v57 + 64) = v62;
    *(void *)(v57 + 32) = v59;
    *(void *)(v57 + 40) = v61;
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Magic Record not found to remove: %@", 36LL, 2LL, v57);
    swift_bridgeObjectRelease(v57);
    return v156(0LL);
  }

  else
  {
    uint64_t v64 = v147;
    sub_1000C998C((uint64_t)v52, v147, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v65 = objc_autoreleasePoolPush();
    uint64_t v66 = (uint64_t *)(v64 + *(int *)(v53 + 20));
    uint64_t v67 = *v66;
    unint64_t v68 = v66[1];
    sub_1000991CC(*v66, v68);
    sub_100118B60(v67, v68);
    Class isa = v69;
    sub_100099394(v67, v68);
    uint64_t v71 = v134;
    sub_1000A7C90(v64, v134, type metadata accessor for MagicPairingSettingsRecord);
    if (!isa) {
      Class isa = sub_1000A33B8(v71).super.isa;
    }
    sub_1000A7CD4(v71, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v72 = (uint64_t)v148;
    Class v164 = isa;
    sub_1000CEB74((id *)&v164);
    objc_autoreleasePoolPop(v65);
    id v73 = -[objc_class recordID](isa, "recordID");

    uint64_t v74 = objc_autoreleasePoolPush();
    uint64_t v75 = *v66;
    unint64_t v76 = v66[1];
    sub_1000991CC(*v66, v76);
    sub_100118B60(v75, v76);
    Class v78 = v77;
    sub_100099394(v75, v76);
    uint64_t v79 = v135;
    sub_1000A7C90(v64, v135, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v162 = v66;
    if (!v78) {
      Class v78 = sub_1000A33B8(v79).super.isa;
    }
    sub_1000A7CD4(v79, type metadata accessor for MagicPairingSettingsRecord);
    Class v164 = v78;
    sub_1000CEB74((id *)&v164);
    objc_autoreleasePoolPop(v74);
    uint64_t v81 = CKRecord.recordType.getter(v80);
    uint64_t v83 = v82;

    uint64_t v84 = v154;
    sub_10014C090(v73, v81, v83, v136 & 1);

    swift_bridgeObjectRelease(v83);
    uint64_t v85 = v140;
    uint64_t v86 = v137;
    uint64_t v87 = v142;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v137, v64, v142);
    uint64_t v88 = (uint64_t *)(v64 + *(int *)(v163 + 24));
    uint64_t v90 = *v88;
    uint64_t v89 = v88[1];
    uint64_t v91 = swift_bridgeObjectRetain(v89);
    id v92 = v138;
    uint64_t v93 = Date.init()(v91);
    double v94 = Date.timeIntervalSince1970.getter(v93);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v92, v143);
    *(_BYTE *)uint64_t v72 = 1;
    strcpy((char *)(v72 + 8), "MagicSettings");
    *(_WORD *)(v72 + 22) = -4864;
    uint64_t v95 = (int *)v139;
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v72 + *(int *)(v139 + 24), v86, v87);
    uint64_t v96 = (void *)(v72 + v95[7]);
    void *v96 = v90;
    v96[1] = v89;
    *(double *)(v72 + v95[8]) = v94;
    *(_OWORD *)(v72 + v95[9]) = xmmword_1001A9700;
    uint64_t v97 = objc_autoreleasePoolPush();
    sub_10015802C(v84, v72);
    objc_autoreleasePoolPop(v97);
    uint64_t v98 = sub_10013B740();
    __int128 v99 = *(void **)(v98 + 72);
    uint64_t v100 = v144;
    *uint64_t v144 = v99;
    uint64_t v101 = v145;
    uint64_t v102 = v146;
    (*(void (**)(void *, void, uint64_t))(v145 + 104))( v100,  enum case for DispatchPredicate.notOnQueue(_:),  v146);
    id v103 = v99;
    LOBYTE(v90) = _dispatchPreconditionTest(_:)(v100);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v101 + 8))(v100, v102);
    if ((v90 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v164, sub_100187664, v98, &type metadata for Bool);
      uint64_t v104 = swift_unknownObjectRelease(v98);
      if (v164 == 1)
      {
        uint64_t v105 = sub_10013B740();
        uint64_t v106 = objc_autoreleasePoolPush();
        uint64_t v107 = *v162;
        unint64_t v108 = v162[1];
        sub_1000991CC(*v162, v108);
        sub_100118B60(v107, v108);
        Class v110 = v109;
        sub_100099394(v107, v108);
        uint64_t v111 = v132;
        sub_1000A7C90(v64, v132, type metadata accessor for MagicPairingSettingsRecord);
        if (!v110) {
          Class v110 = sub_1000A33B8(v111).super.isa;
        }
        sub_1000A7CD4(v111, type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v112 = v153;
        Class v164 = v110;
        sub_1000CEB74((id *)&v164);
        objc_autoreleasePoolPop(v106);
        id v113 = -[objc_class recordID](v110, "recordID");

        uint64_t v114 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
        swift_weakInit(v114 + 16, v154);
        sub_1000A7C90(v64, v112, type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v115 = *(unsigned __int8 *)(v161 + 80);
        uint64_t v116 = (v115 + 16) & ~v115;
        unint64_t v117 = (v133 + v116 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v118 = swift_allocObject(&unk_10020FCC0, v117 + 8, v115 | 7);
        uint64_t v119 = v112;
        uint64_t v120 = v118;
        sub_1000C998C(v119, v118 + v116, type metadata accessor for MagicPairingSettingsRecord);
        *(void *)(v120 + v117) = v114;
        uint64_t v121 = swift_allocObject(&unk_10020FCE8, 49LL, 7LL);
        *(void *)(v121 + swift_unknownObjectWeakDestroy(v0 + 16) = v105;
        *(void *)(v121 + 24) = v113;
        *(void *)(v121 + 32) = sub_100187680;
        *(void *)(v121 + 40) = v120;
        *(_BYTE *)(v121 + 48) = 1;
        swift_retain(v114);
        swift_unknownObjectRetain(v105);
        id v122 = v113;
        swift_retain(v120);
        sub_100104BA4((uint64_t)sub_10018749C, v121);
        swift_release(v114);
        swift_release(v120);
        swift_unknownObjectRelease(v105);

        swift_release(v121);
      }

      else
      {
        uint64_t v123 = static os_log_type_t.error.getter(v104);
        uint64_t v124 = qword_10023DFC8;
        uint64_t v125 = swift_allocObject(v150, 72LL, 7LL);
        *(_OWORD *)(v125 + swift_unknownObjectWeakDestroy(v0 + 16) = v149;
        uint64_t v126 = v153;
        sub_1000A7C90(v152, v153, type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v127 = sub_1000CB0DC();
        uint64_t v129 = v128;
        sub_1000A7CD4(v126, type metadata accessor for MagicPairingSettingsRecord);
        unint64_t v130 = v151;
        *(void *)(v125 + 56) = &type metadata for String;
        *(void *)(v125 + 64) = v130;
        *(void *)(v125 + 32) = v127;
        *(void *)(v125 + 40) = v129;
        os_log(_:dso:log:_:_:)( v123,  &_mh_execute_header,  v124,  "CloudCoordinator not available. Defer deleting magic record - %@",  64LL,  2LL,  v125);
        swift_bridgeObjectRelease(v125);
      }

      v156(0LL);
      sub_1000A7CD4(v72, type metadata accessor for BTDeferredRecord);
      return sub_1000A7CD4(v64, type metadata accessor for MagicPairingSettingsRecord);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100157CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a1)
  {
    uint64_t v10 = swift_errorRetain(a1);
    uint64_t v11 = static os_log_type_t.error.getter(v10);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v12 = qword_10023DFC8;
    uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v39[0] = a1;
    swift_errorRetain(a1);
    uint64_t v15 = sub_100098CD8(&qword_1002357C0);
    uint64_t v16 = String.init<A>(describing:)(v39, v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10009914C();
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Handling Error deleting magic Record - %@", 41LL, 2LL, v14);
    swift_bridgeObjectRelease(v14);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v20 = a3 + 16;
    uint64_t v21 = static os_log_type_t.default.getter(v7);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v22 = qword_10023DFC8;
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    sub_1000A7C90(a2, (uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v25 = sub_1000CB0DC();
    uint64_t v27 = v26;
    sub_1000A7CD4((uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10009914C();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  v22,  "CloudSync: Deleted MagicSettings Record from cloud - %@",  55LL,  2LL,  v24);
    swift_bridgeObjectRelease(v24);
    swift_beginAccess(v20, v39, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v20);
    if (Strong)
    {
      uint64_t v29 = Strong;
      sub_10014F39C(a2, 0);
      swift_release(v29);
    }

    swift_beginAccess(v20, v38, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v20);
    if (result)
    {
      uint64_t v30 = result;
      uint64_t v31 = sub_10013B740();
      swift_release(v30);
      Class v32 = sub_1000A4ED8();
      id v33 = -[objc_class recordID](v32, "recordID");

      id v34 = [v33 zoneID];
      uint64_t v35 = (uint64_t *)(a2 + *(int *)(v6 + 24));
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      swift_bridgeObjectRetain(v37);
      sub_100108E80((uint64_t)&off_100209580, (uint64_t)v34, 0xD000000000000010LL, 0x80000001001CAB00LL, v36, v37);

      swift_bridgeObjectRelease(v37);
      swift_unknownObjectRelease(v31);
      return swift_arrayDestroy(&unk_1002095A0, 3LL, &type metadata for String);
    }
  }

  return result;
}

uint64_t sub_10015802C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_10013A76C();
  uint64_t v22 = v7;
  uint64_t v23 = a2;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001874A0, v21, &type metadata for () + 1);
  if (!v2) {
    return swift_release(v7);
  }
  uint64_t v8 = swift_release(v7);
  uint64_t v9 = static os_log_type_t.error.getter(v8);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v10 = qword_10023DFC8;
  uint64_t v11 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  sub_1000A7C90(a2, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
  uint64_t v13 = String.init<A>(describing:)(v6, v4);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10009914C();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  uint64_t v24 = v2;
  swift_errorRetain(v2);
  uint64_t v17 = sub_100098CD8(&qword_1002357C0);
  uint64_t v18 = String.init<A>(describing:)(&v24, v17);
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v16;
  *(void *)(v12 + 72) = v18;
  *(void *)(v12 + 80) = v19;
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "CloudSync: Error storing deferred record %@: %@",  47LL,  2LL,  v12);
  swift_bridgeObjectRelease(v12);
  return swift_errorRelease(v2);
}

uint64_t sub_10015820C(char *a1, void (*a2)(void), uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v160 = a3;
  uint64_t v161 = a2;
  uint64_t v158 = type metadata accessor for Date(0LL);
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v156 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v149 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v145 = (uint64_t)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v155 = (uint64_t *)((char *)&v145 - v9);
  __chkstk_darwin(v10);
  uint64_t v162 = (uint64_t *)((char *)&v145 - v11);
  uint64_t v12 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v12);
  uint64_t v154 = (uint64_t *)((char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v14);
  uint64_t v148 = (uint64_t)&v145 - v15;
  uint64_t v16 = sub_100098CD8(&qword_100234E20);
  __chkstk_darwin(v16);
  uint64_t v150 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v173 = type metadata accessor for UUID(0LL);
  uint64_t v169 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v168 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v170 = (char *)&v145 - v20;
  uint64_t v21 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v21);
  uint64_t v146 = (char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for URL(0LL);
  uint64_t v163 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v151 = (char *)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v147 = (char *)&v145 - v26;
  __chkstk_darwin(v27);
  uint64_t v152 = (char *)&v145 - v28;
  __chkstk_darwin(v29);
  uint64_t v167 = (char *)&v145 - v30;
  __chkstk_darwin(v31);
  uint64_t v172 = (char *)&v145 - v32;
  __chkstk_darwin(v33);
  id v178 = (char *)&v145 - v34;
  __chkstk_darwin(v35);
  uint64_t v177 = (char *)&v145 - v36;
  uint64_t v179 = type metadata accessor for BTDeferredRecord(0LL);
  uint64_t v184 = *(void (**)(char *, uint64_t))(v179 - 8);
  __chkstk_darwin(v179);
  uint64_t v180 = (uint64_t *)((char *)&v145 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v145 - v39;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v145 - v42;
  __chkstk_darwin(v44);
  uint64_t v46 = (char *)&v145 - v45;
  unint64_t v48 = static os_log_type_t.default.getter(v47);
  if (qword_100234C28 != -1) {
LABEL_41:
  }
    swift_once(&qword_100234C28, sub_10018A9E0);
  uint64_t v49 = qword_10023DFC8;
  uint64_t v166 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v50 = swift_allocObject(v166, 72LL, 7LL);
  __int128 v165 = xmmword_1001A5EA0;
  *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
  uint64_t v51 = sub_100098C98( (unint64_t *)&unk_100236660,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v159 = a1;
  uint64_t v182 = v23;
  uint64_t v153 = v51;
  uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v23, v51);
  uint64_t v54 = v53;
  *(void *)(v50 + 56) = &type metadata for String;
  unint64_t v164 = sub_10009914C();
  *(void *)(v50 + 64) = v164;
  *(void *)(v50 + 32) = v52;
  *(void *)(v50 + 40) = v54;
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Add sound profile record with URL: %@", 37LL, 2LL, v50);
  swift_bridgeObjectRelease(v50);
  unint64_t v181 = v4;
  uint64_t v55 = sub_10013BA34();
  uint64_t v23 = v55;
  a1 = (char *)_swiftEmptyArrayStorage;
  p_Class isa = _swiftEmptyArrayStorage;
  uint64_t v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
  if (v183)
  {
    unint64_t v4 = 0LL;
    unint64_t v174 = (unint64_t)"tsNew";
    unint64_t v175 = v55;
    unint64_t v176 = 0x80000001001CAB80LL;
    while (1)
    {
      if (v4 >= *(void *)(v23 + 16))
      {
        __break(1u);
        goto LABEL_41;
      }

      unint64_t v48 = (*((unsigned __int8 *)v184 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v184 + 80);
      uint64_t v56 = *((void *)v184 + 9);
      sub_1000A7C90(v23 + v48 + v56 * v4, (uint64_t)v46, type metadata accessor for BTDeferredRecord);
      uint64_t v57 = *((void *)v46 + 1);
      uint64_t v58 = *((void *)v46 + 2);
      if (v57 == 0xD000000000000012LL && v58 == v176)
      {
        sub_1000A7C90((uint64_t)v46, (uint64_t)v43, type metadata accessor for BTDeferredRecord);
      }

      else
      {
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)( v57,  v58,  0xD000000000000012LL,  v174 | 0x8000000000000000LL,  0LL);
        sub_1000A7C90((uint64_t)v46, (uint64_t)v43, type metadata accessor for BTDeferredRecord);
        if ((v59 & 1) == 0)
        {
          sub_1000A7CD4((uint64_t)v43, type metadata accessor for BTDeferredRecord);
          goto LABEL_5;
        }
      }

      if (*v43 == 1)
      {
        swift_bridgeObjectRelease(0xE600000000000000LL);
        sub_1000A7CD4((uint64_t)v43, type metadata accessor for BTDeferredRecord);
LABEL_15:
        uint64_t v61 = v43;
        uint64_t v62 = (uint64_t)v40;
        sub_1000C998C((uint64_t)v46, (uint64_t)v40, type metadata accessor for BTDeferredRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0) {
          sub_1001611F4(0, *((void *)a1 + 2) + 1LL, 1);
        }
        a1 = (char *)p_isa;
        unint64_t v64 = p_isa[2];
        unint64_t v63 = p_isa[3];
        if (v64 >= v63 >> 1)
        {
          sub_1001611F4(v63 > 1, v64 + 1, 1);
          a1 = (char *)p_isa;
        }

        *((void *)a1 + 2) = v64 + 1;
        uint64_t v65 = (uint64_t)&a1[v48 + v64 * v56];
        uint64_t v40 = (char *)v62;
        sub_1000C998C(v62, v65, type metadata accessor for BTDeferredRecord);
        uint64_t v43 = v61;
        uint64_t v23 = v175;
        goto LABEL_6;
      }

      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x657461647075LL,  0xE600000000000000LL,  0x6574656C6564LL,  0xE600000000000000LL,  0LL);
      swift_bridgeObjectRelease(0xE600000000000000LL);
      sub_1000A7CD4((uint64_t)v43, type metadata accessor for BTDeferredRecord);
      if ((v60 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_5:
      sub_1000A7CD4((uint64_t)v46, type metadata accessor for BTDeferredRecord);
LABEL_6:
      if (v183 == (uint64_t (*)(uint64_t, uint64_t, uint64_t))++v4)
      {
        a1 = (char *)p_isa;
        break;
      }
    }
  }

  swift_bridgeObjectRelease(v23);
  uint64_t v66 = (void (*)(char *, uint64_t))*((void *)a1 + 2);
  uint64_t v67 = v182;
  unint64_t v68 = (double (*)(void, void, void))v180;
  if (!v66)
  {
    swift_release(a1);
LABEL_27:
    uint64_t v82 = v148;
    sub_10013C84C(v148);
    uint64_t v83 = v171;
    uint64_t v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
    int v84 = v183(v82, 1LL, v171);
    uint64_t v85 = v173;
    uint64_t v86 = v169;
    uint64_t v87 = v154;
    uint64_t v88 = (uint64_t)v150;
    if (v84 == 1)
    {
      sub_100099358(v82, &qword_1002357D0);
      uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v88, 1LL, 1LL, v85);
      uint64_t v90 = (uint64_t)v147;
      uint64_t v91 = v163;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v150, v82 + *(int *)(v83 + 20), v173);
      sub_1000A7CD4(v82, type metadata accessor for SoundProfileRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v88, 0LL, 1LL, v85);
      uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v88, 1LL, v85);
      uint64_t v90 = (uint64_t)v147;
      uint64_t v91 = v163;
      if ((_DWORD)v89 != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v170, v88, v85);
        goto LABEL_32;
      }
    }

    UUID.init()(v89);
    sub_100099358(v88, &qword_100234E20);
LABEL_32:
    type metadata accessor for DeviceStore(0LL);
    sub_100121DF8(v90);
    if (qword_100234B50 != -1) {
      swift_once(&qword_100234B50, sub_1000A513C);
    }
    uint64_t v92 = v182;
    uint64_t v93 = sub_100098D58(v182, (uint64_t)qword_10023DD30);
    double v94 = v151;
    uint64_t v180 = *(uint64_t **)(v91 + 16);
    v95.n128_f64[0] = ((double (*)(char *, uint64_t, uint64_t))v180)(v151, v93, v92);
    uint64_t v96 = v91;
    uint64_t v97 = URL.path.getter(v95);
    uint64_t v99 = v98;
    uint64_t v100 = *(void (**)(char *, uint64_t))(v96 + 8);
    v100(v94, v92);
    uint64_t v101 = v152;
    URL.appendingPathComponent(_:isDirectory:)(v97, v99, 1LL);
    swift_bridgeObjectRelease(v99);
    uint64_t v102 = ((uint64_t (*)(uint64_t, uint64_t))v100)(v90, v92);
    id v103 = v170;
    uint64_t v104 = UUID.uuidString.getter(v102);
    uint64_t v106 = v105;
    uint64_t v107 = v167;
    URL.appendingPathComponent(_:)(v104);
    swift_bridgeObjectRelease(v106);
    v100(v101, v92);
    URL.appendingPathExtension(_:)(7627108LL, 0xE300000000000000LL);
    uint64_t v184 = v100;
    v100(v107, v92);
    unint64_t v108 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    v108(v168, v103, v173);
    sub_10013C84C((uint64_t)v87);
    if (v183((uint64_t)v87, 1LL, v171) == 1)
    {
      sub_100099358((uint64_t)v87, &qword_1002357D0);
      uint64_t v109 = 0LL;
      unint64_t v110 = 0xC000000000000000LL;
    }

    else
    {
      uint64_t v109 = *v87;
      unint64_t v110 = v87[1];
      sub_1000991CC(*v87, v110);
      sub_1000A7CD4((uint64_t)v87, type metadata accessor for SoundProfileRecord);
    }

    uint64_t v111 = v167;
    uint64_t v112 = v182;
    id v113 = (uint64_t (*)(uint64_t, char *, uint64_t))v180;
    ((void (*)(char *, char *, uint64_t))v180)(v167, v172, v182);
    uint64_t v114 = (uint64_t)v155;
    *uint64_t v155 = v109;
    *(void *)(v114 + 8) = v110;
    uint64_t v115 = v171;
    uint64_t v116 = v168;
    uint64_t v117 = v173;
    v108((char *)(v114 + *(int *)(v171 + 20)), v168, v173);
    uint64_t v118 = v113(v114 + *(int *)(v115 + 24), v111, v112);
    uint64_t v119 = v156;
    static Date.now.getter(v118);
    v184(v111, v112);
    uint64_t v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 8);
    ((void (*)(char *, uint64_t))v183)(v116, v117);
    (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v114 + *(int *)(v115 + 28), v119, v158);
    uint64_t v120 = v162;
    uint64_t v121 = sub_1000C998C(v114, (uint64_t)v162, type metadata accessor for SoundProfileRecord);
    uint64_t v122 = static os_log_type_t.default.getter(v121);
    uint64_t v123 = qword_10023DFC8;
    uint64_t v124 = swift_allocObject(v166, 72LL, 7LL);
    *(_OWORD *)(v124 + swift_unknownObjectWeakDestroy(v0 + 16) = v165;
    uint64_t v125 = (uint64_t)v172;
    uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter(v112, v153);
    unint64_t v127 = v164;
    *(void *)(v124 + 56) = &type metadata for String;
    *(void *)(v124 + 64) = v127;
    *(void *)(v124 + 32) = v126;
    *(void *)(v124 + 40) = v128;
    os_log(_:dso:log:_:_:)(v122, &_mh_execute_header, v123, "Attempt to store asset at: %@", 29LL, 2LL, v124);
    swift_bridgeObjectRelease(v124);
    uint64_t v129 = sub_10013A76C();
    __chkstk_darwin(v129);
    uint64_t v130 = (uint64_t)v159;
    *(&v145 - 2) = v125;
    *(&v145 - 1) = v130;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187624, &v145 - 4, &type metadata for () + 1);
    swift_release(v129);
    uint64_t v131 = sub_10013A76C();
    __chkstk_darwin(v131);
    *(&v145 - 2) = v132;
    *(&v145 - 1) = (uint64_t)v120;
    OS_dispatch_queue.sync<A>(execute:)(&v145, sub_10018763C, &v145 - 4, &type metadata for () + 1);
    swift_release(v131);
    notify_post("BTCloudServicesSoundProfileChangedNotification");
    v161(0LL);
    uint64_t v133 = objc_autoreleasePoolPush();
    uint64_t v134 = *v120;
    unint64_t v135 = v120[1];
    sub_1000991CC(*v120, v135);
    sub_100118B60(v134, v135);
    Class isa = v136;
    sub_100099394(v134, v135);
    uint64_t v138 = v145;
    sub_1000A7C90((uint64_t)v120, v145, type metadata accessor for SoundProfileRecord);
    if (!isa) {
      Class isa = sub_1000A33F4().super.isa;
    }
    sub_1000A7CD4(v138, type metadata accessor for SoundProfileRecord);
    uint64_t v139 = (void (*)(char *, uint64_t))v183;
    p_Class isa = &isa->isa;
    sub_1000A7268((id *)&p_isa);
    objc_autoreleasePoolPop(v133);
    unint64_t v140 = v181;
    uint64_t v141 = sub_10013B740();
    uint64_t v142 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
    swift_weakInit(v142 + 16, v140);
    uint64_t v143 = swift_allocObject(&unk_10020FC70, 32LL, 7LL);
    *(void *)(v143 + swift_unknownObjectWeakDestroy(v0 + 16) = v142;
    *(void *)(v143 + 24) = isa;
    swift_retain(v142);
    uint64_t v144 = isa;
    sub_1001051E0(v144, 1, (uint64_t)sub_100187658, v143);

    swift_unknownObjectRelease(v141);
    swift_release(v143);
    sub_1000A7CD4((uint64_t)v120, type metadata accessor for SoundProfileRecord);
    v184(v172, v182);
    v139(v170, v173);
    return swift_release(v142);
  }

  uint64_t v69 = *((unsigned __int8 *)v184 + 80);
  unint64_t v174 = (unint64_t)a1;
  uint64_t v70 = (uint64_t)&a1[(v69 + 32) & ~v69];
  unint64_t v176 = *((void *)v184 + 9);
  unint64_t v175 = 0x80000001001CAB80LL;
  uint64_t v71 = v163;
  uint64_t v72 = v146;
  uint64_t v73 = (uint64_t)v177;
  while (1)
  {
    uint64_t v183 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
    uint64_t v184 = v66;
    sub_1000A7C90(v70, (uint64_t)v68, type metadata accessor for BTDeferredRecord);
    uint64_t v74 = sub_10013A76C();
    uint64_t v75 = UUID.uuidString.getter(v74);
    uint64_t v77 = v76;
    URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48))(v72, 1LL, v67);
    if ((_DWORD)result == 1) {
      break;
    }
    uint64_t v79 = v178;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v178, v72, v67);
    URL.appendingPathComponent(_:)(0xD000000000000012LL);
    uint64_t v80 = *(uint64_t (**)(char *, uint64_t))(v71 + 8);
    uint64_t v81 = v80(v79, v67);
    __chkstk_darwin(v81);
    *(&v145 - 4) = v74;
    *(&v145 - 3) = v75;
    *(&v145 - 2) = v77;
    *(&v145 - 1) = v73;
    OS_dispatch_queue.sync<A>(execute:)(&p_isa, sub_10018A6A0, &v145 - 6, &type metadata for Bool);
    swift_release(v74);
    swift_bridgeObjectRelease(v77);
    uint64_t v67 = v182;
    v80((char *)v73, v182);
    unint64_t v68 = (double (*)(void, void, void))v180;
    sub_1000A7CD4((uint64_t)v180, type metadata accessor for BTDeferredRecord);
    uint64_t v70 = (uint64_t)v183 + v176;
    uint64_t v66 = (void (*)(char *, uint64_t))((char *)v184 - 1);
    if (v184 == (void (*)(char *, uint64_t))1)
    {
      swift_release(v174);
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

void sub_1001592B0(void *a1, char a2, uint64_t a3, id a4)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v28, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    uint64_t v9 = Strong;
    if ((a2 & 1) != 0)
    {
      uint64_t v10 = swift_errorRetain(a1);
      uint64_t v11 = static os_log_type_t.error.getter(v10);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v12 = qword_10023DFC8;
      uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      uint64_t v27 = a1;
      swift_errorRetain(a1);
      uint64_t v15 = sub_100098CD8(&qword_1002357C0);
      uint64_t v16 = String.init<A>(describing:)(&v27, v15);
      uint64_t v18 = v17;
      *(void *)(v14 + 56) = &type metadata for String;
      *(void *)(v14 + 64) = sub_10009914C();
      *(void *)(v14 + 32) = v16;
      *(void *)(v14 + 40) = v18;
      os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v12,  "Unable to save record on cloud with given URL error: %@",  55LL,  2LL,  v14,  v27);
    }

    else
    {
      id v19 = a1;
      uint64_t v20 = static os_log_type_t.default.getter(v19);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v21 = qword_10023DFC8;
      uint64_t v22 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v14 = swift_allocObject(v22, 72LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      a4 = v19;
      id v23 = [a4 description];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;

      sub_100112C7C(a1, 0);
      *(void *)(v14 + 56) = &type metadata for String;
      *(void *)(v14 + 64) = sub_10009914C();
      *(void *)(v14 + 32) = v24;
      *(void *)(v14 + 40) = v26;
      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v21,  "Synced sound profile record with given URL: %@",  46LL,  2LL,  v14,  v27);
    }

    swift_bridgeObjectRelease(v14);
    sub_100147E1C((uint64_t)a4, 0);
    swift_release(v9);
    sub_100112C7C(a1, a2 & 1);
  }

uint64_t sub_100159500(void (*a1)(void), void (*a2)(void))
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v53 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v49 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v49 - v16);
  sub_10013C84C((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_100099358((uint64_t)v8, &qword_1002357D0);
    unint64_t v18 = sub_1000DB8A4();
    uint64_t v19 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v18, 0LL, 0LL);
    *uint64_t v20 = 0x8000000000000020LL;
    a1();
    return swift_errorRelease(v19);
  }

  else
  {
    uint64_t v52 = a1;
    uint64_t v54 = a2;
    uint64_t v22 = sub_1000C998C((uint64_t)v8, (uint64_t)v17, type metadata accessor for SoundProfileRecord);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_10023DFC8,  "Deleting sound profile record",  29LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v24 = sub_10013A76C();
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001872F8, v24, &type metadata for () + 1);
    uint64_t v25 = swift_release(v24);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_10023DFC8,  "Deleted sound profile record asset",  34LL,  2LL,  _swiftEmptyArrayStorage);
    notify_post("BTCloudServicesSoundProfileChangedNotification");
    ((void (*)(void))v52)(0LL);
    uint64_t v27 = objc_autoreleasePoolPush();
    uint64_t v28 = *v17;
    unint64_t v29 = v17[1];
    sub_1000991CC(*v17, v29);
    sub_100118B60(v28, v29);
    Class isa = v30;
    sub_100099394(v28, v29);
    sub_1000A7C90((uint64_t)v17, (uint64_t)v14, type metadata accessor for SoundProfileRecord);
    if (!isa) {
      Class isa = sub_1000A33F4().super.isa;
    }
    sub_1000A7CD4((uint64_t)v14, type metadata accessor for SoundProfileRecord);
    Class v55 = isa;
    uint64_t v51 = v17;
    sub_1000A7268((id *)&v55);
    objc_autoreleasePoolPop(v27);
    id v32 = -[objc_class recordID](isa, "recordID");

    id v50 = [v32 zoneID];
    uint64_t v33 = sub_10013B740();
    uint64_t v34 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
    swift_weakInit(v34 + 16, v3);
    uint64_t v35 = (uint64_t)v17;
    uint64_t v36 = v53;
    sub_1000A7C90(v35, v53, type metadata accessor for SoundProfileRecord);
    uint64_t v37 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v38 = (v37 + 16) & ~v37;
    unint64_t v39 = (v11 + v38 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v49 = v3;
    unint64_t v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v42 = swift_allocObject(&unk_10020F9A0, v41 + 8, v37 | 7);
    sub_1000C998C(v36, v42 + v38, type metadata accessor for SoundProfileRecord);
    *(void *)(v42 + v39) = v34;
    uint64_t v43 = (void (**)(void))(v42 + v40);
    uint64_t v44 = v54;
    *uint64_t v43 = v52;
    v43[1] = v44;
    *(void *)(v42 + v41) = v32;
    uint64_t v45 = swift_allocObject(&unk_10020F9C8, 49LL, 7LL);
    *(void *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    *(void *)(v45 + 24) = v32;
    *(void *)(v45 + 32) = sub_10018742C;
    *(void *)(v45 + 40) = v42;
    *(_BYTE *)(v45 + 48) = 1;
    id v46 = v32;
    swift_retain(v34);
    swift_retain(v44);
    swift_unknownObjectRetain(v33);
    swift_retain(v42);
    sub_100104BA4((uint64_t)sub_10018749C, v45);
    swift_release(v34);
    swift_release(v42);
    swift_unknownObjectRelease(v33);
    swift_release(v45);
    uint64_t v47 = sub_10013B740();
    id v48 = v50;
    sub_100108E80((uint64_t)&off_100209520, (uint64_t)v50, 0LL, 0LL, 0LL, 0LL);
    swift_arrayDestroy(&unk_100209540, 1LL, &type metadata for String);

    swift_unknownObjectRelease(v47);
    return sub_1000A7CD4((uint64_t)v51, type metadata accessor for SoundProfileRecord);
  }

uint64_t sub_1001599F0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6)
{
  uint64_t v52 = a5;
  uint64_t v49 = a2;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = (int *)type metadata accessor for BTDeferredRecord(0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = a3 + 16;
  if (a1)
  {
    uint64_t v47 = v21;
    id v48 = a4;
    uint64_t v22 = swift_errorRetain(a1);
    unsigned int v46 = static os_log_type_t.error.getter(v22);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v45 = qword_10023DFC8;
    uint64_t v23 = sub_100098CD8((uint64_t *)&unk_100234E00);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    v53[0] = a1;
    swift_errorRetain(a1);
    uint64_t v25 = sub_100098CD8(&qword_1002357C0);
    uint64_t v26 = String.init<A>(describing:)(v53, v25);
    uint64_t v28 = v27;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10009914C();
    *(void *)(v24 + 32) = v26;
    *(void *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  v45,  "Unable to delete sound profile record from cloud with error: %@",  63LL,  2LL,  v24);
    swift_bridgeObjectRelease(v24);
    uint64_t v29 = type metadata accessor for SoundProfileRecord(0LL);
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v49 + *(int *)(v29 + 20), v13);
    uint64_t v31 = Date.init()(v30);
    double v32 = Date.timeIntervalSince1970.getter(v31);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v51);
    *uint64_t v20 = 1;
    *((void *)v20 + 1) = 0xD000000000000012LL;
    *((void *)v20 + 2) = 0x80000001001CAB80LL;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v20[v17[6]], v16, v13);
    uint64_t v33 = &v20[v17[7]];
    *(void *)uint64_t v33 = 0xD000000000000011LL;
    *((void *)v33 + 1) = 0x80000001001CCC20LL;
    *(double *)&v20[v17[8]] = v32;
    *(_OWORD *)&v20[v17[9]] = xmmword_1001A9700;
    uint64_t v34 = v47;
    swift_beginAccess(v47, v53, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v34);
    if (Strong)
    {
      uint64_t v36 = Strong;
      uint64_t v37 = objc_autoreleasePoolPush();
      sub_10015802C(v36, (uint64_t)v20);
      objc_autoreleasePoolPop(v37);
      swift_release(v36);
    }

    unint64_t v38 = sub_1000DB8A4();
    uint64_t v39 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v38, 0LL, 0LL);
    *unint64_t v40 = a1;
    swift_errorRetain(a1);
    v48(v39);
    swift_errorRelease(v39);
    swift_errorRelease(a1);
    return sub_1000A7CD4((uint64_t)v20, type metadata accessor for BTDeferredRecord);
  }

  else
  {
    uint64_t v42 = static os_log_type_t.default.getter(v18);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  qword_10023DFC8,  "Deleted sound profile record from cloud",  39LL,  2LL,  _swiftEmptyArrayStorage);
    swift_beginAccess(v21, v53, 0LL, 0LL);
    uint64_t v43 = swift_weakLoadStrong(v21);
    if (v43)
    {
      uint64_t v44 = v43;
      sub_10014C090(a6, 0xD000000000000012LL, 0x80000001001CAB80LL, 0);
      swift_release(v44);
    }

    return ((uint64_t (*)(void))a4)(0LL);
  }

uint64_t sub_100159E08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_10023DFC8,  "Fetching sound profile record from cloud",  40LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1000A4A64(0LL, (unint64_t *)&qword_100235280, &OBJC_CLASS___CKRecordZoneID_ptr);
  v7._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v7._object = v8;
  v9._object = (void *)0x80000001001CB350LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v9, v7).super.isa;
  uint64_t v11 = sub_10013B740();
  uint64_t v12 = swift_allocObject(&unk_10020F900, 24LL, 7LL);
  swift_weakInit(v12 + 16, v3);
  uint64_t v13 = (void *)swift_allocObject(&unk_10020F928, 40LL, 7LL);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v12;
  uint64_t v14 = swift_allocObject(&unk_10020F950, 24LL, 7LL);
  swift_weakInit(v14 + 16, v11);
  uint64_t v15 = swift_allocObject(&unk_10020F978, 88LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *(void *)(v15 + 24) = &off_1002094F0;
  *(void *)(v15 + 32) = isa;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(void *)(v15 + 72) = sub_100187264;
  *(void *)(v15 + 80) = v13;
  swift_retain(a2);
  swift_retain(v12);
  swift_retain(v14);
  uint64_t v16 = isa;
  swift_retain(v13);
  sub_100104BA4((uint64_t)sub_1001872C0, v15);

  swift_unknownObjectRelease(v11);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  return swift_release(v15);
}

void sub_10015A00C(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SoundProfileRecord(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a1 < 0 || (a1 & 0x4000000000000000LL) != 0)
  {
    unint64_t v50 = swift_bridgeObjectRetain(a1);
    uint64_t v11 = (uint64_t)sub_100161654(v50);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(a1);
  }

  v59[0] = v11;
  sub_10016228C(v59, (uint64_t (*)(void *))sub_100162D04);
  uint64_t v12 = v59[0];
  if ((v59[0] & 0x8000000000000000LL) == 0 && (v59[0] & 0x4000000000000000LL) == 0)
  {
    if (*(void *)(v59[0] + 16)) {
      goto LABEL_7;
    }
LABEL_19:
    uint64_t v53 = swift_release(v12);
    uint64_t v12 = static os_log_type_t.error.getter(v53);
    if (qword_100234C28 == -1)
    {
LABEL_20:
      os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_10023DFC8,  "No cloud sound profile record found",  35LL,  2LL,  _swiftEmptyArrayStorage,  v54[0]);
      a2(0LL);
      return;
    }

uint64_t sub_10015A550(void **a1, void **a2)
{
  uint64_t v4 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v4);
  unint64_t v50 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v48 = (char *)&v47 - v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - v9;
  __chkstk_darwin(v11);
  id v13 = (char *)&v47 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v47 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v47 - v18;
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = *a1;
  uint64_t v49 = *a2;
  id v25 = objc_msgSend(v24, "modificationDate", v21);
  if (v25)
  {
    id v26 = v25;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v27(v13, v19, v14);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v28(v13, 0LL, 1LL, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
    {
      v27(v23, v13, v14);
      uint64_t v29 = (uint64_t)v48;
      uint64_t v30 = (uint64_t)v50;
      uint64_t v31 = v49;
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v28(v13, 1LL, 1LL, v14);
  }

  id v32 = [v24 creationDate];
  if (!v32)
  {
    uint64_t v35 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v10, 1LL, 1LL, v14);
    uint64_t v29 = (uint64_t)v48;
    goto LABEL_9;
  }

  uint64_t v33 = v32;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

  id v34 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v34(v10, v19, v14);
  v28(v10, 0LL, 1LL, v14);
  uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1LL, v14);
  uint64_t v29 = (uint64_t)v48;
  if ((_DWORD)v35 == 1)
  {
LABEL_9:
    static Date.now.getter(v35);
    sub_100099358((uint64_t)v10, (uint64_t *)&unk_100234E10);
    goto LABEL_10;
  }

  v34(v23, v10, v14);
LABEL_10:
  uint64_t v31 = v49;
  sub_100099358((uint64_t)v13, (uint64_t *)&unk_100234E10);
  uint64_t v30 = (uint64_t)v50;
LABEL_11:
  id v36 = [v31 modificationDate];
  if (!v36)
  {
    v28((char *)v29, 1LL, 1LL, v14);
LABEL_15:
    id v40 = [v31 creationDate];
    if (v40)
    {
      unint64_t v41 = v40;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

      uint64_t v42 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
      v42(v30, v19, v14);
      v28((char *)v30, 0LL, 1LL, v14);
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v30, 1LL, v14);
      uint64_t v39 = v47;
      if ((_DWORD)v43 != 1)
      {
        v42((uint64_t)v47, (char *)v30, v14);
LABEL_20:
        sub_100099358(v29, (uint64_t *)&unk_100234E10);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v30, 1LL, 1LL, v14);
      uint64_t v39 = v47;
    }

    static Date.now.getter(v43);
    sub_100099358(v30, (uint64_t *)&unk_100234E10);
    goto LABEL_20;
  }

  uint64_t v37 = v36;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

  id v38 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v38(v29, v19, v14);
  v28((char *)v29, 0LL, 1LL, v14);
  uint64_t v39 = v47;
  v38((uint64_t)v47, (char *)v29, v14);
LABEL_21:
  char v44 = static Date.> infix(_:_:)(v23, v39);
  id v45 = *(void (**)(char *, uint64_t))(v15 + 8);
  v45(v39, v14);
  v45(v23, v14);
  return v44 & 1;
}

double sub_10015A9D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v164 = a3;
  uint64_t v165 = a2;
  uint64_t v162 = a4;
  uint64_t v6 = sub_100098CD8(&qword_1002357D0);
  __chkstk_darwin(v6);
  uint64_t v150 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v151 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v8 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v10 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v11);
  uint64_t v149 = (uint64_t)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v152 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v14 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v143 - v16;
  uint64_t v18 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v18);
  uint64_t v153 = (uint64_t)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v154 = v20;
  uint64_t v155 = v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v147 = (uint64_t)&v143 - v25;
  uint64_t v26 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v163 = *(void **)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v158 = *(void *)(v29 - 8);
  uint64_t v159 = v29;
  __chkstk_darwin(v29);
  uint64_t v157 = (char *)&v143 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v31);
  uint64_t v160 = (uint64_t)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v156 = (id)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v33 = [v156 isFirstUnlocked];
  uint64_t v143 = v10;
  uint64_t v145 = v8;
  uint64_t v144 = v17;
  uint64_t v146 = v14;
  if ((_DWORD)v33)
  {
    uint64_t v34 = v4;
    uint64_t v35 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v36 = v159;
    uint64_t v37 = sub_100098D58(v159, (uint64_t)qword_10023DCC0);
    uint64_t v38 = (uint64_t)v157;
    uint64_t v39 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v37, v36);
    id v40 = sub_100139314( v38,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
    swift_release(v35);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v36);
  }

  else
  {
    uint64_t v34 = v4;
    uint64_t v41 = static os_log_type_t.error.getter(v33);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    id v40 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage,  v143);
  }

  uint64_t v42 = v40[2];
  uint64_t v161 = v34;
  if (v42)
  {
    uint64_t v43 = (uint64_t)v40 + ((*((unsigned __int8 *)v163 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v163 + 80));
    BOOL v45 = v165 == 0x6552656369766544LL && v164 == 0xEC00000064726F63LL;
    uint64_t v46 = v163[9];
    swift_bridgeObjectRetain(v40);
    do
    {
      sub_1000A7C90(v43, (uint64_t)v28, type metadata accessor for DeviceRecord);
      if ((static UUID.== infix(_:_:)(&v28[*(int *)(v26 + 20)]) & 1) != 0
        && (v45
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, v165, v164, 0LL) & 1) != 0))
      {
        swift_bridgeObjectRelease(v40);
        uint64_t v47 = v160;
        sub_1000C998C((uint64_t)v28, v160, type metadata accessor for DeviceRecord);
        uint64_t v48 = 0LL;
        uint64_t v49 = v162;
        goto LABEL_24;
      }

      sub_1000A7CD4((uint64_t)v28, type metadata accessor for DeviceRecord);
      v43 += v46;
      --v42;
    }

    while (v42);
    swift_bridgeObjectRelease(v40);
    uint64_t v48 = 1LL;
    uint64_t v49 = v162;
  }

  else
  {
    uint64_t v48 = 1LL;
    uint64_t v49 = v162;
  }

  uint64_t v47 = v160;
LABEL_24:
  unint64_t v50 = v163;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v163[7])(v47, v48, 1LL, v26);
  swift_bridgeObjectRelease(v40);
  int v51 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50[6])(v47, 1LL, v26);
  uint64_t v52 = v165;
  if (v51 != 1)
  {
    v49[3] = v26;
    void v49[4] = sub_100098C98( (unint64_t *)&unk_100236E10,  type metadata accessor for DeviceRecord,  (uint64_t)&unk_1001A69D4);
    unint64_t v68 = sub_1000E7194(v49);
    uint64_t v69 = v47;
    uint64_t v70 = type metadata accessor for DeviceRecord;
LABEL_78:
    sub_1000C998C(v69, (uint64_t)v68, v70);
    return result;
  }

  sub_100099358(v47, &qword_100235848);
  id v53 = [v156 isFirstUnlocked];
  if ((_DWORD)v53)
  {
    uint64_t v54 = sub_10013A76C();
    uint64_t v55 = v164;
    if (qword_100234B70 != -1) {
      swift_once(&qword_100234B70, sub_1000CAF84);
    }
    uint64_t v56 = v159;
    uint64_t v57 = sub_100098D58(v159, (uint64_t)qword_10023DD70);
    uint64_t v59 = (uint64_t)v157;
    uint64_t v58 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v57, v56);
    char v60 = sub_100139314( v59,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
    swift_release(v54);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v56);
    uint64_t v61 = v60[2];
    if (v61) {
      goto LABEL_29;
    }
LABEL_45:
    uint64_t v67 = 1LL;
    goto LABEL_47;
  }

  uint64_t v71 = static os_log_type_t.error.getter(v53);
  uint64_t v55 = v164;
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  char v60 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v71,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage,  v143);
  uint64_t v61 = _swiftEmptyArrayStorage[2];
  if (!v61) {
    goto LABEL_45;
  }
LABEL_29:
  uint64_t v62 = (uint64_t)v60 + ((*(unsigned __int8 *)(v155 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
  BOOL v64 = v52 == 0x746553636967614DLL && v55 == 0xED000073676E6974LL;
  uint64_t v65 = *(void *)(v155 + 72);
  swift_bridgeObjectRetain(v60);
  do
  {
    sub_1000A7C90(v62, (uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
    if ((static UUID.== infix(_:_:)(v23) & 1) != 0
      && (v64
       || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, v52, v55, 0LL) & 1) != 0))
    {
      swift_bridgeObjectRelease(v60);
      uint64_t v66 = v153;
      sub_1000C998C((uint64_t)v23, v153, type metadata accessor for MagicPairingSettingsRecord);
      uint64_t v67 = 0LL;
      goto LABEL_48;
    }

    sub_1000A7CD4((uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
    v62 += v65;
    --v61;
  }

  while (v61);
  swift_bridgeObjectRelease(v60);
  uint64_t v67 = 1LL;
LABEL_47:
  uint64_t v66 = v153;
LABEL_48:
  uint64_t v73 = v154;
  uint64_t v72 = v155;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 + 56))(v66, v67, 1LL, v154);
  swift_bridgeObjectRelease(v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v66, 1LL, v73) != 1)
  {
    uint64_t v90 = type metadata accessor for MagicPairingSettingsRecord;
    uint64_t v91 = v147;
    sub_1000C998C(v66, v147, type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v92 = v162;
    v162[3] = v73;
    uint64_t v93 = (unint64_t *)&unk_100236E08;
    double v94 = &unk_1001A7E9C;
LABEL_76:
    v92[4] = sub_100098C98(v93, v90, (uint64_t)v94);
    unint64_t v68 = sub_1000E7194(v92);
    uint64_t v69 = v91;
LABEL_77:
    uint64_t v70 = v90;
    goto LABEL_78;
  }

  sub_100099358(v66, (uint64_t *)&unk_100235810);
  id v74 = [v156 isFirstUnlocked];
  if ((_DWORD)v74)
  {
    uint64_t v75 = sub_10013A76C();
    if (qword_100234BC8 != -1) {
      swift_once(&qword_100234BC8, sub_1000E72E4);
    }
    uint64_t v76 = v159;
    uint64_t v77 = sub_100098D58(v159, (uint64_t)qword_10023DF00);
    uint64_t v79 = (uint64_t)v157;
    uint64_t v78 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v77, v76);
    uint64_t v80 = sub_100139314( v79,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
    swift_release(v75);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v79, v76);
    uint64_t v81 = v80[2];
    if (v81) {
      goto LABEL_53;
    }
LABEL_69:
    uint64_t v89 = 1LL;
    goto LABEL_71;
  }

  uint64_t v95 = static os_log_type_t.error.getter(v74);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v80 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v95,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage,  v143);
  uint64_t v81 = _swiftEmptyArrayStorage[2];
  if (!v81) {
    goto LABEL_69;
  }
LABEL_53:
  uint64_t v82 = (uint64_t)v80 + ((*(unsigned __int8 *)(v152 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
  BOOL v84 = v52 == 0xD00000000000001ELL && v55 == 0x80000001001CABA0LL;
  uint64_t v85 = v80;
  uint64_t v86 = *(void *)(v152 + 72);
  uint64_t v163 = v85;
  swift_bridgeObjectRetain(v85);
  uint64_t v87 = (uint64_t)v146;
  do
  {
    sub_1000A7C90(v82, v87, type metadata accessor for DeviceSupportInformationRecord);
    if ((static UUID.== infix(_:_:)(v87) & 1) != 0
      && (v84
       || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, v165, v164, 0LL) & 1) != 0))
    {
      uint64_t v80 = v163;
      swift_bridgeObjectRelease(v163);
      uint64_t v88 = v149;
      sub_1000C998C(v87, v149, type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v89 = 0LL;
      uint64_t v55 = v164;
      uint64_t v52 = v165;
      goto LABEL_72;
    }

    sub_1000A7CD4(v87, type metadata accessor for DeviceSupportInformationRecord);
    v82 += v86;
    --v81;
  }

  while (v81);
  uint64_t v80 = v163;
  swift_bridgeObjectRelease(v163);
  uint64_t v89 = 1LL;
  uint64_t v55 = v164;
  uint64_t v52 = v165;
LABEL_71:
  uint64_t v88 = v149;
LABEL_72:
  uint64_t v96 = v152;
  uint64_t v97 = v148;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v152 + 56))(v88, v89, 1LL, v148);
  swift_bridgeObjectRelease(v80);
  int v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v88, 1LL, v97);
  uint64_t v99 = v151;
  uint64_t v100 = (uint64_t)v150;
  if (v98 != 1)
  {
    uint64_t v90 = type metadata accessor for DeviceSupportInformationRecord;
    uint64_t v91 = (uint64_t)v144;
    sub_1000C998C(v88, (uint64_t)v144, type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v92 = v162;
    v162[3] = v97;
    uint64_t v93 = (unint64_t *)&unk_100236E00;
    double v94 = &unk_1001A8AB4;
    goto LABEL_76;
  }

  sub_100099358(v88, &qword_100235828);
  sub_10013C84C(v100);
  int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v100, 1LL, v99);
  uint64_t v102 = v162;
  if (v101 == 1)
  {
    sub_100099358(v100, &qword_1002357D0);
    goto LABEL_85;
  }

  uint64_t v104 = (uint64_t)v143;
  sub_1000C998C(v100, (uint64_t)v143, type metadata accessor for SoundProfileRecord);
  if ((static UUID.== infix(_:_:)(v104 + *(int *)(v99 + 20)) & 1) != 0
    && (v52 == 0xD000000000000012LL && v55 == 0x80000001001CAB80LL
     || (_stringCompareWithSmolCheck(_:_:expecting:)(v52, v55, 0xD000000000000012LL, 0x80000001001CAB80LL, 0LL) & 1) != 0))
  {
    void v102[3] = v99;
    uint64_t v90 = type metadata accessor for SoundProfileRecord;
    v102[4] = sub_100098C98(&qword_100236E98, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001A718C);
    unint64_t v68 = sub_1000E7194(v102);
    uint64_t v69 = v104;
    goto LABEL_77;
  }

  sub_1000A7CD4(v104, type metadata accessor for SoundProfileRecord);
LABEL_85:
  uint64_t v167 = &type metadata for AudioAccessoryFeatures;
  unint64_t v105 = sub_10009E740();
  unint64_t v168 = v105;
  LOBYTE(v166[0]) = 0;
  char v106 = isFeatureEnabled(_:)(v166);
  uint64_t v107 = sub_10009A498(v166);
  if ((v106 & 1) != 0)
  {
    id v108 = [v156 isFirstUnlocked];
    if ((_DWORD)v108)
    {
      uint64_t v109 = sub_10013A76C();
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      uint64_t v110 = v159;
      uint64_t v111 = sub_100098D58(v159, (uint64_t)qword_10023DF40);
      uint64_t v112 = (uint64_t)v157;
      uint64_t v113 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v111, v110);
      uint64_t v114 = (void *)sub_100138AFC(v112, &qword_100236E48, (uint64_t)sub_100166F6C);
      swift_release(v109);
      uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v112, v110);
    }

    else
    {
      uint64_t v115 = static os_log_type_t.error.getter(v108);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v114 = _swiftEmptyArrayStorage;
      uint64_t v107 = os_log(_:dso:log:_:_:)( v115,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage,  v143);
    }
  }

  else
  {
    uint64_t v114 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(v107);
  *(&v143 - 4) = (char *)a1;
  *(&v143 - 3) = (char *)v52;
  *(&v143 - 2) = (char *)v55;
  uint64_t v116 = sub_100122604((uint64_t (*)(id *))sub_1001871B4, (uint64_t)(&v143 - 6), (uint64_t)v114);
  swift_bridgeObjectRelease(v114);
  if (v116)
  {
    void v102[3] = type metadata accessor for AADeviceRecord(0LL);
    v102[4] = sub_100098C98(&qword_100236DF8, type metadata accessor for AADeviceRecord, (uint64_t)&unk_1001A9200);
    void *v102 = v116;
    return result;
  }

  uint64_t v117 = a1;
  uint64_t v167 = &type metadata for AudioAccessoryFeatures;
  unint64_t v168 = v105;
  LOBYTE(v166[0]) = 0;
  char v118 = isFeatureEnabled(_:)(v166);
  uint64_t v119 = sub_10009A498(v166);
  if ((v118 & 1) != 0)
  {
    id v120 = [v156 isFirstUnlocked];
    if ((_DWORD)v120)
    {
      uint64_t v121 = sub_10013A76C();
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      uint64_t v122 = v159;
      uint64_t v123 = sub_100098D58(v159, (uint64_t)qword_10023DCE0);
      uint64_t v125 = (uint64_t)v157;
      uint64_t v124 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v123, v122);
      uint64_t v126 = (void *)sub_100138AFC(v125, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
      swift_release(v121);
      uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t))(v124 + 8))(v125, v122);
    }

    else
    {
      uint64_t v127 = static os_log_type_t.error.getter(v120);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v126 = _swiftEmptyArrayStorage;
      uint64_t v119 = os_log(_:dso:log:_:_:)( v127,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage,  v143);
    }
  }

  else
  {
    uint64_t v126 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(v119);
  *(&v143 - 4) = (char *)v117;
  *(&v143 - 3) = (char *)v52;
  *(&v143 - 2) = (char *)v55;
  uint64_t v128 = sub_100122604((uint64_t (*)(id *))sub_1001871D4, (uint64_t)(&v143 - 6), (uint64_t)v126);
  swift_bridgeObjectRelease(v126);
  if (v128)
  {
    uint64_t v129 = type metadata accessor for AAProxCardsRecord(0LL);
    uint64_t v130 = type metadata accessor for AAProxCardsRecord;
    void v102[3] = v129;
    uint64_t v131 = (unint64_t *)&unk_100236DF0;
    uint64_t v132 = &unk_1001A6C50;
LABEL_116:
    v102[4] = sub_100098C98(v131, v130, (uint64_t)v132);
    void *v102 = v128;
    return result;
  }

  id v133 = [v156 isFirstUnlocked];
  if ((_DWORD)v133)
  {
    uint64_t v134 = sub_10013A76C();
    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    uint64_t v135 = v159;
    uint64_t v136 = sub_100098D58(v159, (uint64_t)qword_10023DE08);
    uint64_t v138 = (uint64_t)v157;
    uint64_t v137 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v136, v135);
    uint64_t v139 = (void *)sub_100138AFC(v138, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
    swift_release(v134);
    uint64_t v140 = (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 8))(v138, v135);
  }

  else
  {
    uint64_t v141 = static os_log_type_t.error.getter(v133);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v139 = _swiftEmptyArrayStorage;
    uint64_t v140 = os_log(_:dso:log:_:_:)( v141,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage,  v143);
  }

  __chkstk_darwin(v140);
  *(&v143 - 4) = (char *)v117;
  *(&v143 - 3) = (char *)v52;
  *(&v143 - 2) = (char *)v55;
  uint64_t v128 = sub_100122604((uint64_t (*)(id *))sub_1001871F4, (uint64_t)(&v143 - 6), (uint64_t)v139);
  swift_bridgeObjectRelease(v139);
  if (v128)
  {
    uint64_t v142 = type metadata accessor for HMDeviceCloudRecord(0LL);
    uint64_t v130 = type metadata accessor for HMDeviceCloudRecord;
    void v102[3] = v142;
    uint64_t v131 = (unint64_t *)&unk_100236DE8;
    uint64_t v132 = &unk_1001A8524;
    goto LABEL_116;
  }

  v102[4] = 0LL;
  double result = 0.0;
  *(_OWORD *)uint64_t v102 = 0u;
  *((_OWORD *)v102 + 1) = 0u;
  return result;
}

uint64_t sub_10015BBA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier) & 1) == 0) {
    return 0LL;
  }
  if (a3 == 0x6563697665444141LL && a4 == 0xEE0064726F636552LL) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141LL, 0xEE0064726F636552LL, a3, a4, 0LL) & 1;
}

uint64_t sub_10015BC60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier) & 1) == 0) {
    return 0LL;
  }
  if (a3 == 0xD000000000000011LL && a4 == 0x80000001001D2A80LL) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001001D2A80LL, a3, a4, 0LL) & 1;
}

uint64_t sub_10015BD08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier) & 1) == 0) {
    return 0LL;
  }
  if (a3 == 0xD000000000000013LL && a4 == 0x80000001001CB4E0LL) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001CB4E0LL, a3, a4, 0LL) & 1;
}

double sub_10015BDB0@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v159 = a4;
  uint64_t v160 = a1;
  uint64_t v9 = sub_100098CD8(&qword_100235828);
  __chkstk_darwin(v9);
  uint64_t v143 = (uint64_t)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v144 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v12 = (char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v140 - v14;
  uint64_t v16 = sub_100098CD8((uint64_t *)&unk_100235810);
  __chkstk_darwin(v16);
  uint64_t v148 = (uint64_t)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v158 = (void *)type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v149 = *(v158 - 1);
  __chkstk_darwin(v158);
  uint64_t v157 = (uint64_t)&v140 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v142 = (uint64_t)&v140 - v20;
  uint64_t v21 = type metadata accessor for URL(0LL);
  uint64_t v152 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v151 = (char *)&v140 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100098CD8(&qword_100235848);
  __chkstk_darwin(v23);
  uint64_t v153 = (uint64_t)&v140 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v155 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  uint64_t v147 = (uint64_t)&v140 - v29;
  id v150 = (id)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v30 = [v150 isFirstUnlocked];
  uint64_t v146 = v5;
  uint64_t v145 = v21;
  uint64_t v140 = v15;
  uint64_t v141 = v12;
  if ((_DWORD)v30)
  {
    uint64_t v31 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v32 = sub_100098D58(v21, (uint64_t)qword_10023DCC0);
    uint64_t v34 = (uint64_t)v151;
    uint64_t v33 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v32, v21);
    uint64_t v35 = sub_100139314( v34,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
    swift_release(v31);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v21);
  }

  else
  {
    uint64_t v36 = static os_log_type_t.error.getter(v30);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v35 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage,  v140);
  }

  uint64_t v37 = v35[2];
  uint64_t v154 = a5;
  if (v37)
  {
    uint64_t v38 = (uint64_t)v35 + ((*(unsigned __int8 *)(v155 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
    uint64_t v39 = a3;
    BOOL v41 = a3 == 0x6552656369766544LL && v159 == 0xEC00000064726F63LL;
    uint64_t v42 = *(void *)(v155 + 72);
    swift_bridgeObjectRetain(v35);
    do
    {
      sub_1000A7C90(v38, (uint64_t)v27, type metadata accessor for DeviceRecord);
      uint64_t v43 = &v27[*(int *)(v25 + 24)];
      uint64_t v44 = *((void *)v43 + 1);
      BOOL v45 = *(void *)v43 == v160 && v44 == a2;
      if ((v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v43, v44, v160, a2, 0LL) & 1) != 0)
        && (v41
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544LL, 0xEC00000064726F63LL, v39, v159, 0LL) & 1) != 0))
      {
        swift_bridgeObjectRelease(v35);
        uint64_t v46 = (uint64_t)v27;
        uint64_t v47 = v153;
        sub_1000C998C(v46, v153, type metadata accessor for DeviceRecord);
        uint64_t v48 = 0LL;
        a5 = v154;
        a3 = v39;
        goto LABEL_28;
      }

      sub_1000A7CD4((uint64_t)v27, type metadata accessor for DeviceRecord);
      v38 += v42;
      --v37;
    }

    while (v37);
    swift_bridgeObjectRelease(v35);
    uint64_t v48 = 1LL;
    a5 = v154;
    a3 = v39;
  }

  else
  {
    uint64_t v48 = 1LL;
  }

  uint64_t v47 = v153;
LABEL_28:
  uint64_t v49 = v155;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 + 56))(v47, v48, 1LL, v25);
  swift_bridgeObjectRelease(v35);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, v25) != 1)
  {
    uint64_t v59 = type metadata accessor for DeviceRecord;
    uint64_t v60 = v147;
    sub_1000C998C(v47, v147, type metadata accessor for DeviceRecord);
    a5[3] = v25;
    uint64_t v61 = (unint64_t *)&unk_100236E10;
    uint64_t v62 = &unk_1001A69D4;
LABEL_62:
    a5[4] = sub_100098C98(v61, v59, (uint64_t)v62);
    uint64_t v85 = (char **)a5;
LABEL_63:
    uint64_t v86 = sub_1000E7194(v85);
    sub_1000C998C(v60, (uint64_t)v86, v59);
    return result;
  }

  uint64_t v50 = a2;
  sub_100099358(v47, &qword_100235848);
  id v51 = [v150 isFirstUnlocked];
  if ((_DWORD)v51)
  {
    uint64_t v52 = sub_10013A76C();
    uint64_t v53 = v159;
    if (qword_100234B70 != -1) {
      swift_once(&qword_100234B70, sub_1000CAF84);
    }
    uint64_t v54 = v145;
    uint64_t v55 = sub_100098D58(v145, (uint64_t)qword_10023DD70);
    uint64_t v57 = (uint64_t)v151;
    uint64_t v56 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v55, v54);
    uint64_t v58 = sub_100139314( v57,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
    swift_release(v52);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v54);
  }

  else
  {
    uint64_t v63 = static os_log_type_t.error.getter(v51);
    uint64_t v53 = v159;
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v58 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v63,  &_mh_execute_header,  qword_10023DFC8,  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage,  v140);
  }

  uint64_t v64 = v149;
  uint64_t v65 = v58[2];
  if (v65)
  {
    uint64_t v66 = (uint64_t)v58 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
    uint64_t v67 = a3;
    BOOL v69 = a3 == 0x746553636967614DLL && v53 == 0xED000073676E6974LL;
    uint64_t v70 = *(void *)(v149 + 72);
    swift_bridgeObjectRetain(v58);
    uint64_t v71 = v157;
    do
    {
      sub_1000A7C90(v66, v71, type metadata accessor for MagicPairingSettingsRecord);
      uint64_t v72 = (void *)(v71 + *((int *)v158 + 6));
      uint64_t v73 = v72[1];
      BOOL v74 = *v72 == v160 && v73 == v50;
      if ((v74 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v72, v73, v160, v50, 0LL) & 1) != 0)
        && (v69
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974LL, v67, v53, 0LL) & 1) != 0))
      {
        swift_bridgeObjectRelease(v58);
        uint64_t v75 = v148;
        sub_1000C998C(v157, v148, type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v64 = v149;
        uint64_t v76 = v158;
        (*(void (**)(uint64_t, void, uint64_t, void *))(v149 + 56))(v75, 0LL, 1LL, v158);
        a3 = v67;
        goto LABEL_56;
      }

      uint64_t v71 = v157;
      sub_1000A7CD4(v157, type metadata accessor for MagicPairingSettingsRecord);
      v66 += v70;
      --v65;
    }

    while (v65);
    swift_bridgeObjectRelease(v58);
    a3 = v67;
    uint64_t v64 = v149;
  }

  uint64_t v75 = v148;
  uint64_t v76 = v158;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v64 + 56))(v148, 1LL, 1LL, v158);
LABEL_56:
  swift_bridgeObjectRelease(v58);
  int v77 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v64 + 48))(v75, 1LL, v76);
  a5 = v154;
  if (v77 != 1)
  {
    BOOL v84 = v76;
    uint64_t v59 = type metadata accessor for MagicPairingSettingsRecord;
    uint64_t v60 = v142;
    sub_1000C998C(v75, v142, type metadata accessor for MagicPairingSettingsRecord);
    a5[3] = v84;
    uint64_t v61 = (unint64_t *)&unk_100236E08;
    uint64_t v62 = &unk_1001A7E9C;
    goto LABEL_62;
  }

  sub_100099358(v75, (uint64_t *)&unk_100235810);
  id v78 = [v150 isFirstUnlocked];
  if ((_DWORD)v78)
  {
    uint64_t v79 = sub_10013A76C();
    if (qword_100234BC8 != -1) {
      swift_once(&qword_100234BC8, sub_1000E72E4);
    }
    uint64_t v80 = v145;
    uint64_t v81 = sub_100098D58(v145, (uint64_t)qword_10023DF00);
    uint64_t v83 = (uint64_t)v151;
    uint64_t v82 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v81, v80);
    uint64_t v158 = sub_100139314( v83,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
    swift_release(v79);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v80);
  }

  else
  {
    uint64_t v88 = static os_log_type_t.error.getter(v78);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v158 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v88,  &_mh_execute_header,  qword_10023DFC8,  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  v140);
  }

  uint64_t v89 = v158[2];
  uint64_t v90 = v144;
  if (v89)
  {
    uint64_t v91 = v50;
    uint64_t v92 = (uint64_t)v158
        + ((*(unsigned __int8 *)(v144 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80));
    uint64_t v159 = a3;
    uint64_t v93 = v53;
    BOOL v95 = a3 == 0xD00000000000001ELL && v53 == 0x80000001001CABA0LL;
    uint64_t v96 = *(void *)(v144 + 72);
    swift_bridgeObjectRetain(v158);
    uint64_t v97 = (uint64_t)v141;
    do
    {
      sub_1000A7C90(v92, v97, type metadata accessor for DeviceSupportInformationRecord);
      int v98 = (void *)(v97 + *(int *)(v156 + 24));
      uint64_t v99 = v98[1];
      BOOL v100 = *v98 == v160 && v99 == v91;
      if ((v100 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v98, v99, v160, v91, 0LL) & 1) != 0)
        && (v95
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001CABA0LL, v159, v93, 0LL) & 1) != 0))
      {
        swift_bridgeObjectRelease(v158);
        uint64_t v101 = v143;
        sub_1000C998C(v97, v143, type metadata accessor for DeviceSupportInformationRecord);
        uint64_t v90 = v144;
        uint64_t v102 = v156;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v144 + 56))(v101, 0LL, 1LL, v156);
        uint64_t v50 = v91;
        a3 = v159;
        uint64_t v53 = v93;
        goto LABEL_86;
      }

      sub_1000A7CD4(v97, type metadata accessor for DeviceSupportInformationRecord);
      v92 += v96;
      --v89;
    }

    while (v89);
    swift_bridgeObjectRelease(v158);
    uint64_t v50 = v91;
    a3 = v159;
    uint64_t v90 = v144;
    uint64_t v53 = v93;
  }

  uint64_t v101 = v143;
  uint64_t v102 = v156;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v143, 1LL, 1LL, v156);
LABEL_86:
  swift_bridgeObjectRelease(v158);
  int v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v101, 1LL, v102);
  uint64_t v104 = (char **)v154;
  if (v103 != 1)
  {
    uint64_t v59 = type metadata accessor for DeviceSupportInformationRecord;
    uint64_t v60 = (uint64_t)v140;
    sub_1000C998C(v101, (uint64_t)v140, type metadata accessor for DeviceSupportInformationRecord);
    void v104[3] = (char *)v102;
    v104[4] = (char *)sub_100098C98( &qword_100236E00,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)&unk_1001A8AB4);
    uint64_t v85 = v104;
    goto LABEL_63;
  }

  sub_100099358(v101, &qword_100235828);
  uint64_t v162 = &type metadata for AudioAccessoryFeatures;
  unint64_t v105 = sub_10009E740();
  unint64_t v163 = v105;
  LOBYTE(v161[0]) = 0;
  char v106 = isFeatureEnabled(_:)(v161);
  sub_10009A498(v161);
  if ((v106 & 1) != 0)
  {
    id v107 = [v150 isFirstUnlocked];
    if ((_DWORD)v107)
    {
      uint64_t v108 = sub_10013A76C();
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      uint64_t v109 = v145;
      uint64_t v110 = sub_100098D58(v145, (uint64_t)qword_10023DF40);
      uint64_t v111 = (uint64_t)v151;
      uint64_t v112 = v152;
      (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v110, v109);
      uint64_t v113 = (void *)sub_100138AFC(v111, &qword_100236E48, (uint64_t)sub_100166F6C);
      swift_release(v108);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v109);
    }

    else
    {
      uint64_t v114 = static os_log_type_t.error.getter(v107);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v113 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v114,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage,  v140);
    }
  }

  else
  {
    uint64_t v113 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v53);
  uint64_t v115 = sub_1001669B8((uint64_t)v113, v160, v50, a3, v53);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v53);
  if (v115)
  {
    void v104[3] = (char *)type metadata accessor for AADeviceRecord(0LL);
    v104[4] = (char *)sub_100098C98( &qword_100236DF8,  type metadata accessor for AADeviceRecord,  (uint64_t)&unk_1001A9200);
    *uint64_t v104 = v115;
    return result;
  }

  uint64_t v162 = &type metadata for AudioAccessoryFeatures;
  unint64_t v163 = v105;
  LOBYTE(v161[0]) = 0;
  char v116 = isFeatureEnabled(_:)(v161);
  sub_10009A498(v161);
  if ((v116 & 1) != 0)
  {
    id v117 = [v150 isFirstUnlocked];
    if ((_DWORD)v117)
    {
      uint64_t v118 = sub_10013A76C();
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      uint64_t v119 = v145;
      uint64_t v120 = sub_100098D58(v145, (uint64_t)qword_10023DCE0);
      uint64_t v121 = (uint64_t)v151;
      uint64_t v122 = v152;
      (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v120, v119);
      uint64_t v123 = (void *)sub_100138AFC(v121, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
      swift_release(v118);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v119);
      uint64_t v124 = v160;
    }

    else
    {
      uint64_t v125 = static os_log_type_t.error.getter(v117);
      uint64_t v124 = v160;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v123 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v125,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage,  v140);
    }
  }

  else
  {
    uint64_t v123 = _swiftEmptyArrayStorage;
    uint64_t v124 = v160;
  }

  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v53);
  uint64_t v126 = sub_100166B74((uint64_t)v123, v124, v50, a3, v53);
  swift_bridgeObjectRelease(v123);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v53);
  if (v126)
  {
    uint64_t v127 = type metadata accessor for AAProxCardsRecord(0LL);
    uint64_t v128 = type metadata accessor for AAProxCardsRecord;
    void v104[3] = (char *)v127;
    uint64_t v129 = (unint64_t *)&unk_100236DF0;
    uint64_t v130 = &unk_1001A6C50;
LABEL_119:
    v104[4] = (char *)sub_100098C98(v129, v128, (uint64_t)v130);
    *uint64_t v104 = v126;
    return result;
  }

  id v131 = [v150 isFirstUnlocked];
  if ((_DWORD)v131)
  {
    uint64_t v132 = sub_10013A76C();
    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    uint64_t v133 = v145;
    uint64_t v134 = sub_100098D58(v145, (uint64_t)qword_10023DE08);
    uint64_t v135 = (uint64_t)v151;
    uint64_t v136 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v134, v133);
    uint64_t v137 = (void *)sub_100138AFC(v135, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
    swift_release(v132);
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v133);
    uint64_t v124 = v160;
  }

  else
  {
    uint64_t v138 = static os_log_type_t.error.getter(v131);
    if (qword_100234C28 != -1) {
      swift_once(&qword_100234C28, sub_10018A9E0);
    }
    uint64_t v137 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v138,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage,  v140);
  }

  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v53);
  uint64_t v126 = sub_100166D1C((uint64_t)v137, v124, v50, a3, v53);
  swift_bridgeObjectRelease(v137);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v53);
  if (v126)
  {
    uint64_t v139 = type metadata accessor for HMDeviceCloudRecord(0LL);
    uint64_t v128 = type metadata accessor for HMDeviceCloudRecord;
    void v104[3] = (char *)v139;
    uint64_t v129 = (unint64_t *)&unk_100236DE8;
    uint64_t v130 = &unk_1001A8524;
    goto LABEL_119;
  }

  v104[4] = 0LL;
  double result = 0.0;
  *(_OWORD *)uint64_t v104 = 0u;
  *((_OWORD *)v104 + 1) = 0u;
  return result;
}

uint64_t sub_10015CED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100188240(a4, a5);
}

uint64_t sub_10015CF00(void *a1, uint64_t a2)
{
  uint64_t v98 = a2;
  uint64_t v99 = 0LL;
  uint64_t v97 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v5 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(char ***)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (uint64_t *)((char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v11 = objc_msgSend(a1, "zoneName", v8);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v14 = v13;

  uint64_t v15 = &selRef_deviceForIDSDevice_createNew_;
  if (v12 == 0xD00000000000001ELL)
  {
    unint64_t v16 = 0x80000001001CABE0LL;
    if (v14 == 0x80000001001CABE0LL)
    {
LABEL_5:
      uint64_t v17 = swift_bridgeObjectRelease(v16);
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      uint64_t v19 = v3;
      uint64_t v20 = v98;
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v21 = &unk_10023D000;
      os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_10023DFC8,  "Cloud data purged, attempting to clear local accessory data",  59LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v96 = v20 + 24;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v20 + 24, v22);
      uint64_t v24 = v97;
      if (Strong)
      {
        uint64_t v25 = (void *)Strong;
        uint64_t v21 = (void *)sub_10013B740();
        uint64_t v26 = (void *)v21[9];
        *uint64_t v10 = v26;
        ((void (*)(void *, void, uint64_t))v7[13])( v10,  enum case for DispatchPredicate.notOnQueue(_:),  v6);
        id v27 = v26;
        char v28 = _dispatchPreconditionTest(_:)(v10);
        ((void (*)(void *, uint64_t))v7[1])(v10, v6);
        if ((v28 & 1) == 0)
        {
          __break(1u);
          goto LABEL_68;
        }

        uint64_t v29 = v99;
        OS_dispatch_queue.sync<A>(execute:)(v100, sub_100187764, v21, &type metadata for Bool);
        uint64_t v99 = v29;
        swift_unknownObjectRelease(v21);
        sub_1000C704C(v100[0], 1);
        swift_unknownObjectRelease(v25);
        uint64_t v21 = &unk_10023D000;
      }

      uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
      uint64_t v7 = &selRef_deviceForIDSDevice_createNew_;
      id v30 = [v25 isFirstUnlocked];
      if (!(_DWORD)v30)
      {
        uint64_t v33 = static os_log_type_t.error.getter(v30);
        uint64_t v32 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  qword_10023DFC8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
        goto LABEL_14;
      }

      id v27 = (id)sub_10013A76C();
      if (qword_100234B30 == -1)
      {
LABEL_12:
        uint64_t v31 = sub_100098D58(v24, (uint64_t)qword_10023DCC0);
        (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v5, v31, v24);
        uint64_t v32 = sub_100139314( (uint64_t)v5,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
        swift_release(v27);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v24);
LABEL_14:
        id v34 = [v25 v7[228]];
        if ((_DWORD)v34)
        {
          uint64_t v35 = sub_10013A76C();
          if (qword_100234BC8 != -1) {
            swift_once(&qword_100234BC8, sub_1000E72E4);
          }
          uint64_t v36 = sub_100098D58(v24, (uint64_t)qword_10023DF00);
          (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v5, v36, v24);
          uint64_t v37 = sub_100139314( (uint64_t)v5,  &qword_100235828,  type metadata accessor for DeviceSupportInformationRecord,  (uint64_t)sub_100166F34,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B7D8);
          swift_release(v35);
          (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v24);
        }

        else
        {
          uint64_t v38 = static os_log_type_t.error.getter(v34);
          uint64_t v37 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  v21[505],  "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state",  91LL,  2LL,  _swiftEmptyArrayStorage);
        }

        id v39 = [v25 v7[228]];
        if ((_DWORD)v39)
        {
          uint64_t v40 = sub_10013A76C();
          if (qword_100234B70 != -1) {
            swift_once(&qword_100234B70, sub_1000CAF84);
          }
          uint64_t v41 = sub_100098D58(v24, (uint64_t)qword_10023DD70);
          (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v5, v41, v24);
          uint64_t v42 = sub_100139314( (uint64_t)v5,  (uint64_t *)&unk_100235810,  type metadata accessor for MagicPairingSettingsRecord,  (uint64_t)sub_100166EFC,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5A4);
          swift_release(v40);
          (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v24);
        }

        else
        {
          uint64_t v43 = static os_log_type_t.error.getter(v39);
          uint64_t v42 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)( v43,  &_mh_execute_header,  v21[505],  "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state",  87LL,  2LL,  _swiftEmptyArrayStorage);
        }

        sub_10015DAF4();
        uint64_t v44 = sub_10013A76C();
        uint64_t v45 = v99;
        OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001881CC, v44, &type metadata for () + 1);
        if (!v45)
        {
          swift_release(v44);
          uint64_t v47 = v96;
          uint64_t v49 = swift_unknownObjectWeakLoadStrong(v96, v48);
          if (v49)
          {
            uint64_t v50 = v49;
            sub_1001313CC((uint64_t)v32, (uint64_t)&unk_10020FA40, (uint64_t)sub_1001875D4, (uint64_t)&unk_10020FA58);
            swift_bridgeObjectRelease(v32);
            swift_unknownObjectRelease(v50);
          }

          else
          {
            swift_bridgeObjectRelease(v32);
          }

          uint64_t v76 = swift_unknownObjectWeakLoadStrong(v47, v51);
          if (v76)
          {
            uint64_t v77 = v76;
            sub_1001313CC((uint64_t)v37, (uint64_t)&unk_10020FAE0, (uint64_t)sub_1001875EC, (uint64_t)&unk_10020FAF8);
            swift_bridgeObjectRelease(v37);
            swift_unknownObjectRelease(v77);
          }

          else
          {
            swift_bridgeObjectRelease(v37);
          }

          uint64_t v79 = swift_unknownObjectWeakLoadStrong(v47, v78);
          if (!v79) {
            return swift_bridgeObjectRelease(v42);
          }
          uint64_t v80 = v79;
          sub_1001313CC((uint64_t)v42, (uint64_t)&unk_10020FB30, (uint64_t)sub_1001875F8, (uint64_t)&unk_10020FB48);
          swift_bridgeObjectRelease(v42);
          return swift_unknownObjectRelease(v80);
        }

        swift_bridgeObjectRelease(v32);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v42);
        uint64_t v46 = swift_release(v44);
        uint64_t v15 = &selRef_deviceForIDSDevice_createNew_;
        goto LABEL_36;
      }

uint64_t sub_10015DAF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v35[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_10023DFC8,  "Tell delegate to remove local cache for AudioAccessoryZone data",  63LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 24, v8);
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v36 = &type metadata for AudioAccessoryFeatures;
    unint64_t v37 = sub_10009E740();
    LOBYTE(v35[0]) = 0;
    char v12 = isFeatureEnabled(_:)(v35);
    sub_10009A498(v35);
    if ((v12 & 1) != 0)
    {
      id v13 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
      if ((_DWORD)v13)
      {
        uint64_t v14 = sub_10013A76C();
        if (qword_100234BF8 != -1) {
          swift_once(&qword_100234BF8, sub_100113FD8);
        }
        uint64_t v15 = sub_100098D58(v2, (uint64_t)qword_10023DF40);
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
        unint64_t v16 = (void *)sub_100138AFC((uint64_t)v5, &qword_100236E48, (uint64_t)sub_100166F6C);
        swift_release(v14);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }

      else
      {
        uint64_t v17 = static os_log_type_t.error.getter(v13);
        unint64_t v16 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
      }
    }

    else
    {
      unint64_t v16 = _swiftEmptyArrayStorage;
    }

    sub_1001313CC((uint64_t)v16, (uint64_t)&unk_10020FA90, (uint64_t)sub_1001875E0, (uint64_t)&unk_10020FAA8);
    swift_bridgeObjectRelease(v16);
    swift_unknownObjectRelease(v11);
  }

  uint64_t v18 = swift_unknownObjectWeakLoadStrong(v1 + 24, v10);
  if (v18)
  {
    uint64_t v20 = v18;
    uint64_t v36 = &type metadata for AudioAccessoryFeatures;
    unint64_t v37 = sub_10009E740();
    LOBYTE(v35[0]) = 0;
    char v21 = isFeatureEnabled(_:)(v35);
    sub_10009A498(v35);
    if ((v21 & 1) != 0)
    {
      id v22 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
      if ((_DWORD)v22)
      {
        uint64_t v23 = sub_10013A76C();
        if (qword_100234B40 != -1) {
          swift_once(&qword_100234B40, sub_10009F940);
        }
        uint64_t v24 = sub_100098D58(v2, (uint64_t)qword_10023DCE0);
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v24, v2);
        uint64_t v25 = (void *)sub_100138AFC((uint64_t)v5, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
        swift_release(v23);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }

      else
      {
        uint64_t v26 = static os_log_type_t.error.getter(v22);
        uint64_t v25 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
      }
    }

    else
    {
      uint64_t v25 = _swiftEmptyArrayStorage;
    }

    sub_1001313CC((uint64_t)v25, (uint64_t)&unk_10020FBD0, (uint64_t)sub_100187610, (uint64_t)&unk_10020FBE8);
    swift_bridgeObjectRelease(v25);
    swift_unknownObjectRelease(v20);
  }

  uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + 24, v19);
  if (result)
  {
    uint64_t v28 = result;
    id v29 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
    if ((_DWORD)v29)
    {
      uint64_t v30 = sub_10013A76C();
      if (qword_100234BC0 != -1) {
        swift_once(&qword_100234BC0, sub_1000DD8E4);
      }
      uint64_t v31 = sub_100098D58(v2, (uint64_t)qword_10023DE08);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v31, v2);
      uint64_t v32 = (void *)sub_100138AFC((uint64_t)v5, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
      swift_release(v30);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v33 = static os_log_type_t.error.getter(v29);
      uint64_t v32 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    }

    sub_1001313CC((uint64_t)v32, (uint64_t)&unk_10020FC20, (uint64_t)sub_10018761C, (uint64_t)&unk_10020FC38);
    swift_bridgeObjectRelease(v32);
    return swift_unknownObjectRelease(v28);
  }

  return result;
}

uint64_t sub_10015DFA4(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    if (!*(void *)(result + 48))
    {
      uint64_t v6 = static os_log_type_t.default.getter(result);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v7 = qword_10023DFC8;
      uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
      *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      *(void *)(v9 + 56) = &type metadata for Bool;
      *(void *)(v9 + 64) = &protocol witness table for Bool;
      *(_BYTE *)(v9 + 32) = a2 & 1;
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Account now available - manatee: %i", v14);
      swift_bridgeObjectRelease(v9);
      char v10 = *(_BYTE *)(v5 + 16);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5 + 24, v11);
      if (Strong)
      {
        uint64_t v13 = Strong;
        sub_1000C704C(1, (v10 ^ 1) & a2);
        uint64_t Strong = swift_unknownObjectRelease(v13);
      }

      *(_BYTE *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a2 & 1;
      sub_10013D59C(Strong);
    }

    return swift_release(v5);
  }

  return result;
}

void sub_10015E0F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v8 = qword_10023DFC8;
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_10023DFC8,  "Account removed, obliterate user cached files. Reset timers.",  60LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___BTSystemConfiguration);
  id v10 = [v9 isFirstUnlocked];
  if ((_DWORD)v10)
  {
    uint64_t v11 = sub_10013A76C();
    if (qword_100234B30 != -1) {
      swift_once(&qword_100234B30, sub_100094AFC);
    }
    uint64_t v12 = sub_100098D58(v2, (uint64_t)qword_10023DCC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
    uint64_t v54 = sub_100139314( (uint64_t)v5,  &qword_100235848,  type metadata accessor for DeviceRecord,  (uint64_t)sub_100166EC4,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10018B5B8);
    swift_release(v11);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(v10);
    uint64_t v54 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v8,  "deviceRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL);
  }

  uint64_t v56 = &type metadata for AudioAccessoryFeatures;
  unint64_t v14 = sub_10009E740();
  unint64_t v57 = v14;
  LOBYTE(v55[0]) = 0;
  char v15 = isFeatureEnabled(_:)(v55);
  sub_10009A498(v55);
  if ((v15 & 1) != 0)
  {
    id v16 = [v9 isFirstUnlocked];
    if ((_DWORD)v16)
    {
      uint64_t v17 = sub_10013A76C();
      if (qword_100234BF8 != -1) {
        swift_once(&qword_100234BF8, sub_100113FD8);
      }
      uint64_t v18 = sub_100098D58(v2, (uint64_t)qword_10023DF40);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v18, v2);
      uint64_t v53 = (void *)sub_100138AFC((uint64_t)v5, &qword_100236E48, (uint64_t)sub_100166F6C);
      swift_release(v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v19 = static os_log_type_t.error.getter(v16);
      uint64_t v53 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL);
    }
  }

  else
  {
    uint64_t v53 = _swiftEmptyArrayStorage;
  }

  uint64_t v56 = &type metadata for AudioAccessoryFeatures;
  unint64_t v57 = v14;
  LOBYTE(v55[0]) = 0;
  char v20 = isFeatureEnabled(_:)(v55);
  sub_10009A498(v55);
  if ((v20 & 1) != 0)
  {
    id v21 = [v9 isFirstUnlocked];
    if ((_DWORD)v21)
    {
      uint64_t v22 = sub_10013A76C();
      if (qword_100234B40 != -1) {
        swift_once(&qword_100234B40, sub_10009F940);
      }
      uint64_t v23 = sub_100098D58(v2, (uint64_t)qword_10023DCE0);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v23, v2);
      uint64_t v24 = (void *)sub_100138AFC((uint64_t)v5, (uint64_t *)&unk_100236E60, (uint64_t)sub_100186EC4);
      swift_release(v22);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v25 = static os_log_type_t.error.getter(v21);
      uint64_t v24 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_10023DFC8,  "aaProxCardsRecords call failed because device is in beforeFirstUnlock state",  75LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  else
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
  }

  id v26 = objc_msgSend(v9, "isFirstUnlocked", v53);
  if ((_DWORD)v26)
  {
    uint64_t v27 = sub_10013A76C();
    if (qword_100234BC0 != -1) {
      swift_once(&qword_100234BC0, sub_1000DD8E4);
    }
    uint64_t v28 = sub_100098D58(v2, (uint64_t)qword_10023DE08);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v28, v2);
    id v29 = (void *)sub_100138AFC((uint64_t)v5, (uint64_t *)&unk_100236E78, (uint64_t)sub_100187144);
    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    uint64_t v30 = static os_log_type_t.error.getter(v26);
    id v29 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_10023DFC8,  "hmDeviceCloudRecords call failed because device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v31 = sub_10013A76C();
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001881CC, v31, &type metadata for () + 1);
  swift_release(v31);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 24, v32);
  if (Strong)
  {
    uint64_t v34 = Strong;
    uint64_t v35 = v54;
    sub_1001313CC((uint64_t)v54, (uint64_t)&unk_100210648, (uint64_t)sub_100188238, (uint64_t)&unk_100210660);
    swift_bridgeObjectRelease(v35);
    swift_unknownObjectRelease(v34);
  }

  else
  {
    swift_bridgeObjectRelease(v54);
  }

  uint64_t v56 = &type metadata for AudioAccessoryFeatures;
  unint64_t v57 = v14;
  LOBYTE(v55[0]) = 0;
  char v36 = isFeatureEnabled(_:)(v55);
  sub_10009A498(v55);
  if ((v36 & 1) != 0)
  {
    uint64_t v38 = swift_unknownObjectWeakLoadStrong(a1 + 24, v37);
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = v53;
      sub_1001313CC((uint64_t)v53, (uint64_t)&unk_1002105A8, (uint64_t)sub_1001881F4, (uint64_t)&unk_1002105C0);
      swift_bridgeObjectRelease(v40);
      swift_unknownObjectRelease(v39);
    }

    else
    {
      swift_bridgeObjectRelease(v53);
    }

    uint64_t v43 = swift_unknownObjectWeakLoadStrong(a1 + 24, v41);
    if (v43)
    {
      uint64_t v44 = v43;
      sub_1001313CC((uint64_t)v24, (uint64_t)&unk_100210558, (uint64_t)sub_1001881E8, (uint64_t)&unk_100210570);
      swift_bridgeObjectRelease(v24);
      swift_unknownObjectRelease(v44);
      goto LABEL_39;
    }

    uint64_t v42 = v24;
  }

  else
  {
    swift_bridgeObjectRelease(v24);
    uint64_t v42 = v53;
  }

  swift_bridgeObjectRelease(v42);
LABEL_39:
  uint64_t v46 = swift_unknownObjectWeakLoadStrong(a1 + 24, v45);
  if (v46)
  {
    uint64_t v47 = v46;
    sub_1001313CC((uint64_t)v29, (uint64_t)&unk_1002105F8, (uint64_t)sub_100188200, (uint64_t)&unk_100210610);
    swift_bridgeObjectRelease(v29);
    swift_unknownObjectRelease(v47);
  }

  else
  {
    swift_bridgeObjectRelease(v29);
  }

  uint64_t v48 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer;
  [*(id *)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer) invalidate];
  uint64_t v49 = *(void **)(a1 + v48);
  *(void *)(a1 + v48) = 0LL;

  if (!*(void *)(a1 + 48))
  {
    uint64_t v51 = swift_unknownObjectWeakLoadStrong(a1 + 24, v50);
    if (v51)
    {
      uint64_t v52 = v51;
      sub_1000C704C(0, 1);
      swift_unknownObjectRelease(v52);
    }
  }

uint64_t sub_10015E7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v5);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v12);
  unint64_t v14 = &v23[-v13];
  uint64_t v15 = sub_10013A76C();
  URL.init(string:)(0x6465727265666544LL, 0xEF7364726F636552LL);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v18 = CKRecord.recordType.getter(v17);
    uint64_t v20 = v19;
    URL.appendingPathComponent(_:)(v18);
    swift_bridgeObjectRelease(v20);
    id v21 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
    uint64_t v22 = v21(v11, v8);
    __chkstk_darwin(v22);
    *(void *)&v23[-32] = v15;
    *(void *)&v23[-24] = a2;
    *(void *)&v23[-16] = a3;
    *(void *)&v23[-8] = v14;
    OS_dispatch_queue.sync<A>(execute:)(&v24, sub_10018A6A0, &v23[-48], &type metadata for Bool);
    swift_release(v15);
    return v21(v14, v8);
  }

  return result;
}

uint64_t sub_10015E998@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10009A430(a1, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  id v6 = [v5 encryptedValues];

  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 objectForKeyedSubscript:v7];

  uint64_t result = swift_unknownObjectRelease(v6);
  *a2 = v8;
  return result;
}

uint64_t sub_10015EA5C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DeviceRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10013A76C();
  uint64_t v38 = v10;
  uint64_t v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187B48, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  uint64_t v11 = swift_release(v10);
  unsigned int v35 = static os_log_type_t.default.getter(v11);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v12 = qword_10023DFC8;
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v14 + 64) = v15;
  strcpy((char *)(v14 + 32), "DeviceRecord");
  *(_BYTE *)(v14 + 45) = 0;
  *(_WORD *)(v14 + 46) = -5120;
  sub_1000A7C90(a1, (uint64_t)v9, type metadata accessor for DeviceRecord);
  uint64_t v16 = String.init<A>(describing:)(v9, v6);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v15;
  *(void *)(v14 + 72) = v16;
  *(void *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v14);
  uint64_t result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    uint64_t v19 = static os_log_type_t.default.getter(result);
    uint64_t v20 = qword_10023DFC8;
    uint64_t v21 = swift_allocObject(v13, 72LL, 7LL);
    __int128 v36 = xmmword_1001A5EA0;
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    uint64_t v24 = *(void *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    uint64_t v25 = sub_100098CD8(&qword_100236FA8);
    uint64_t v26 = String.init<A>(describing:)(v40, v25);
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = v15;
    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19LL, 2LL, v21);
    swift_bridgeObjectRelease(v21);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      uint64_t v29 = result;
      uint64_t v30 = sub_100098CD8(&qword_100236EF8);
      uint64_t v31 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v32 = (v31 + 32) & ~v31;
      uint64_t v33 = swift_allocObject(v30, v32 + *(void *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
      sub_1000A7C90(a1, v33 + v32, type metadata accessor for DeviceRecord);
      sub_1001313CC(v33, (uint64_t)&unk_10020FEC8, (uint64_t)sub_100187B64, (uint64_t)&unk_10020FEE0);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }

  return result;
}

uint64_t sub_10015EE64(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DeviceSupportInformationRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10013A76C();
  uint64_t v38 = v10;
  uint64_t v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187B6C, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  uint64_t v11 = swift_release(v10);
  unsigned int v35 = static os_log_type_t.default.getter(v11);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v12 = qword_10023DFC8;
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v14 + 64) = v15;
  *(void *)(v14 + 32) = 0xD00000000000001ELL;
  *(void *)(v14 + 40) = 0x80000001001CABA0LL;
  sub_1000A7C90(a1, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
  uint64_t v16 = String.init<A>(describing:)(v9, v6);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v15;
  *(void *)(v14 + 72) = v16;
  *(void *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v14);
  uint64_t result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    uint64_t v19 = static os_log_type_t.default.getter(result);
    uint64_t v20 = qword_10023DFC8;
    uint64_t v21 = swift_allocObject(v13, 72LL, 7LL);
    __int128 v36 = xmmword_1001A5EA0;
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    uint64_t v24 = *(void *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    uint64_t v25 = sub_100098CD8(&qword_100236FA8);
    uint64_t v26 = String.init<A>(describing:)(v40, v25);
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = v15;
    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19LL, 2LL, v21);
    swift_bridgeObjectRelease(v21);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      uint64_t v29 = result;
      uint64_t v30 = sub_100098CD8(&qword_100236F18);
      uint64_t v31 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v32 = (v31 + 32) & ~v31;
      uint64_t v33 = swift_allocObject(v30, v32 + *(void *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
      sub_1000A7C90(a1, v33 + v32, type metadata accessor for DeviceSupportInformationRecord);
      sub_1001313CC(v33, (uint64_t)&unk_10020FF18, (uint64_t)sub_100187BB8, (uint64_t)&unk_10020FF30);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }

  return result;
}

uint64_t sub_10015F268(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MagicPairingSettingsRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10013A76C();
  uint64_t v38 = v10;
  uint64_t v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187BC0, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  uint64_t v11 = swift_release(v10);
  unsigned int v35 = static os_log_type_t.default.getter(v11);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v12 = qword_10023DFC8;
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v14 + 64) = v15;
  strcpy((char *)(v14 + 32), "MagicSettings");
  *(_WORD *)(v14 + 46) = -4864;
  sub_1000A7C90(a1, (uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
  uint64_t v16 = String.init<A>(describing:)(v9, v6);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v15;
  *(void *)(v14 + 72) = v16;
  *(void *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v14);
  uint64_t result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    uint64_t v19 = static os_log_type_t.default.getter(result);
    uint64_t v20 = qword_10023DFC8;
    uint64_t v21 = swift_allocObject(v13, 72LL, 7LL);
    __int128 v36 = xmmword_1001A5EA0;
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    uint64_t v24 = *(void *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    uint64_t v25 = sub_100098CD8(&qword_100236FA8);
    uint64_t v26 = String.init<A>(describing:)(v40, v25);
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = v15;
    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19LL, 2LL, v21);
    swift_bridgeObjectRelease(v21);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      uint64_t v29 = result;
      uint64_t v30 = sub_100098CD8(&qword_100236F10);
      uint64_t v31 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v32 = (v31 + 32) & ~v31;
      uint64_t v33 = swift_allocObject(v30, v32 + *(void *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
      sub_1000A7C90(a1, v33 + v32, type metadata accessor for MagicPairingSettingsRecord);
      sub_1001313CC(v33, (uint64_t)&unk_10020FD10, (uint64_t)sub_10018769C, (uint64_t)&unk_10020FD28);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }

  return result;
}

uint64_t sub_10015F674(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10013A76C();
  v36[0] = a1;
  uint64_t v34 = v6;
  unsigned int v35 = v36;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187C08, v33, &type metadata for () + 1);
  uint64_t v7 = swift_release(v6);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v9 = qword_10023DFC8;
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v12 = sub_10009914C();
  *(void *)(v11 + 64) = v12;
  strcpy((char *)(v11 + 32), "AADeviceRecord");
  *(_BYTE *)(v11 + 47) = -18;
  v36[0] = a1;
  uint64_t v13 = type metadata accessor for AADeviceRecord(0LL);
  id v32 = a1;
  uint64_t v14 = String.init<A>(describing:)(v36, v13);
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v12;
  *(void *)(v11 + 72) = v14;
  *(void *)(v11 + 80) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v11);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if ((a2 & 1) != 0)
  {
    uint64_t v17 = static os_log_type_t.default.getter(result);
    uint64_t v18 = qword_10023DFC8;
    uint64_t v19 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v20);
    uint64_t v22 = *(void *)(v3 + 32);
    v36[0] = Strong;
    v36[1] = v22;
    uint64_t v23 = sub_100098CD8(&qword_100236FA8);
    uint64_t v24 = String.init<A>(describing:)(v36, v23);
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = v12;
    *(void *)(v19 + 32) = v24;
    *(void *)(v19 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Update delegate: %@", 19LL, 2LL, v19);
    swift_bridgeObjectRelease(v19);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v26);
    if (result)
    {
      uint64_t v27 = result;
      uint64_t v28 = sub_100098CD8(&qword_100236588);
      uint64_t v29 = swift_allocObject(v28, 40LL, 7LL);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
      *(void *)(v29 + 32) = v32;
      v36[0] = v29;
      specialized Array._endMutation()(v29);
      uint64_t v30 = v36[0];
      id v31 = v32;
      sub_1001313CC(v30, (uint64_t)&unk_10020FF68, (uint64_t)sub_100187C28, (uint64_t)&unk_10020FF80);
      swift_bridgeObjectRelease(v30);
      return swift_unknownObjectRelease(v27);
    }
  }

  return result;
}

uint64_t sub_10015FA38(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10013A76C();
  v36[0] = a1;
  uint64_t v34 = v6;
  unsigned int v35 = v36;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187C30, v33, &type metadata for () + 1);
  uint64_t v7 = swift_release(v6);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v9 = qword_10023DFC8;
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v12 = sub_10009914C();
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 32) = 0xD000000000000011LL;
  *(void *)(v11 + 40) = 0x80000001001D2A80LL;
  v36[0] = a1;
  uint64_t v13 = type metadata accessor for AAProxCardsRecord(0LL);
  id v32 = a1;
  uint64_t v14 = String.init<A>(describing:)(v36, v13);
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v12;
  *(void *)(v11 + 72) = v14;
  *(void *)(v11 + 80) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v11);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if ((a2 & 1) != 0)
  {
    uint64_t v17 = static os_log_type_t.default.getter(result);
    uint64_t v18 = qword_10023DFC8;
    uint64_t v19 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v20);
    uint64_t v22 = *(void *)(v3 + 32);
    v36[0] = Strong;
    v36[1] = v22;
    uint64_t v23 = sub_100098CD8(&qword_100236FA8);
    uint64_t v24 = String.init<A>(describing:)(v36, v23);
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = v12;
    *(void *)(v19 + 32) = v24;
    *(void *)(v19 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Update delegate: %@", 19LL, 2LL, v19);
    swift_bridgeObjectRelease(v19);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v26);
    if (result)
    {
      uint64_t v27 = result;
      uint64_t v28 = sub_100098CD8(&qword_100236588);
      uint64_t v29 = swift_allocObject(v28, 40LL, 7LL);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
      *(void *)(v29 + 32) = v32;
      v36[0] = v29;
      specialized Array._endMutation()(v29);
      uint64_t v30 = v36[0];
      id v31 = v32;
      sub_1001313CC(v30, (uint64_t)&unk_10020FFB8, (uint64_t)sub_100187C50, (uint64_t)&unk_10020FFD0);
      swift_bridgeObjectRelease(v30);
      return swift_unknownObjectRelease(v27);
    }
  }

  return result;
}

uint64_t sub_10015FDF4(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10013A76C();
  v36[0] = a1;
  uint64_t v34 = v6;
  unsigned int v35 = v36;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10018A588, v33, &type metadata for () + 1);
  uint64_t v7 = swift_release(v6);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v9 = qword_10023DFC8;
  uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v12 = sub_10009914C();
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 32) = 0xD000000000000013LL;
  *(void *)(v11 + 40) = 0x80000001001CB4E0LL;
  v36[0] = a1;
  uint64_t v13 = type metadata accessor for HMDeviceCloudRecord(0LL);
  id v32 = a1;
  uint64_t v14 = String.init<A>(describing:)(v36, v13);
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v12;
  *(void *)(v11 + 72) = v14;
  *(void *)(v11 + 80) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v11);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if ((a2 & 1) != 0)
  {
    uint64_t v17 = static os_log_type_t.default.getter(result);
    uint64_t v18 = qword_10023DFC8;
    uint64_t v19 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v20);
    uint64_t v22 = *(void *)(v3 + 32);
    v36[0] = Strong;
    v36[1] = v22;
    uint64_t v23 = sub_100098CD8(&qword_100236FA8);
    uint64_t v24 = String.init<A>(describing:)(v36, v23);
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = v12;
    *(void *)(v19 + 32) = v24;
    *(void *)(v19 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Update delegate: %@", 19LL, 2LL, v19);
    swift_bridgeObjectRelease(v19);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v26);
    if (result)
    {
      uint64_t v27 = result;
      uint64_t v28 = sub_100098CD8(&qword_100236588);
      uint64_t v29 = swift_allocObject(v28, 40LL, 7LL);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
      *(void *)(v29 + 32) = v32;
      v36[0] = v29;
      specialized Array._endMutation()(v29);
      uint64_t v30 = v36[0];
      id v31 = v32;
      sub_1001313CC(v30, (uint64_t)&unk_100210008, (uint64_t)sub_100187C5C, (uint64_t)&unk_100210020);
      swift_bridgeObjectRelease(v30);
      return swift_unknownObjectRelease(v27);
    }
  }

  return result;
}

uint64_t sub_1001601B0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LegacyAccountMagicKeysRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10013A76C();
  uint64_t v38 = v10;
  uint64_t v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100187AF4, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  uint64_t v11 = swift_release(v10);
  unsigned int v35 = static os_log_type_t.default.getter(v11);
  if (qword_100234C28 != -1) {
    swift_once(&qword_100234C28, sub_10018A9E0);
  }
  uint64_t v12 = qword_10023DFC8;
  uint64_t v13 = sub_100098CD8((uint64_t *)&unk_100234E00);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A6F30;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_10009914C();
  *(void *)(v14 + 64) = v15;
  *(void *)(v14 + 32) = 0x654B72657473614DLL;
  *(void *)(v14 + 40) = 0xE900000000000079LL;
  sub_1000A7C90(a1, (uint64_t)v9, type metadata accessor for LegacyAccountMagicKeysRecord);
  uint64_t v16 = String.init<A>(describing:)(v9, v6);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v15;
  *(void *)(v14 + 72) = v16;
  *(void *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35LL, 2LL, v14);
  uint64_t result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    uint64_t v19 = static os_log_type_t.default.getter(result);
    uint64_t v20 = qword_10023DFC8;
    uint64_t v21 = swift_allocObject(v13, 72LL, 7LL);
    __int128 v36 = xmmword_1001A5EA0;
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    uint64_t v24 = *(void *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    uint64_t v25 = sub_100098CD8(&qword_100236FA8);
    uint64_t v26 = String.init<A>(describing:)(v40, v25);
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = v15;
    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19LL, 2LL, v21);
    swift_bridgeObjectRelease(v21);
    uint64_t result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      uint64_t v29 = result;
      uint64_t v30 = sub_100098CD8((uint64_t *)&unk_100236FB0);
      uint64_t v31 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v32 = (v31 + 32) & ~v31;
      uint64_t v33 = swift_allocObject(v30, v32 + *(void *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
      sub_1000A7C90(a1, v33 + v32, type metadata accessor for LegacyAccountMagicKeysRecord);
      sub_1001313CC(v33, (uint64_t)&unk_10020FE78, (uint64_t)sub_100187B40, (uint64_t)&unk_10020FE90);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }

  return result;
}

uint64_t sub_1001605B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100098CD8((uint64_t *)&unk_100235270);
  __chkstk_darwin(v6);
  uint64_t v90 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v93 = (char *)&v85 - v9;
  __chkstk_darwin(v10);
  uint64_t v95 = (char *)&v85 - v11;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v86 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  char v87 = (char *)&v85 - v16;
  __chkstk_darwin(v17);
  uint64_t v88 = (char *)&v85 - v18;
  __chkstk_darwin(v19);
  uint64_t v89 = (char *)&v85 - v20;
  __chkstk_darwin(v21);
  uint64_t v91 = (char *)&v85 - v22;
  __chkstk_darwin(v23);
  id v92 = (char *)&v85 - v24;
  __chkstk_darwin(v25);
  uint64_t v96 = (char *)&v85 - v26;
  uint64_t v27 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
  if ((a3 & 1) != 0)
  {
    uint64_t v101 = &type metadata for AudioAccessoryFeatures;
    unint64_t v28 = sub_10009E740();
    unint64_t v102 = v28;
    LOBYTE(v100[0]) = 0;
    char v29 = isFeatureEnabled(_:)(v100);
    sub_10009A498(v100);
    if ((v29 & 1) == 0)
    {
LABEL_18:
      uint64_t v27 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
      goto LABEL_19;
    }

    uint64_t v101 = &type metadata for AudioAccessoryFeatures;
    unint64_t v102 = v28;
    LOBYTE(v100[0]) = 0;
    char v30 = isFeatureEnabled(_:)(v100);
    sub_10009A498(v100);
    if ((v30 & 1) != 0)
    {
      id v31 = [(id)objc_opt_self(BTSystemConfiguration) isFirstUnlocked];
      uint64_t v27 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
      if ((_DWORD)v31)
      {
        uint64_t v32 = sub_10013A76C();
        if (qword_100234BF8 != -1) {
          swift_once(&qword_100234BF8, sub_100113FD8);
        }
        uint64_t v33 = sub_100098D58(v12, (uint64_t)qword_10023DF40);
        uint64_t v34 = (uint64_t)v96;
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v96, v33, v12);
        unsigned int v35 = (void *)sub_100138AFC(v34, &qword_100236E48, (uint64_t)sub_100166F6C);
        swift_release(v32);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v34, v12);
      }

      else
      {
        uint64_t v36 = static os_log_type_t.error.getter(v31);
        if (qword_100234C28 != -1) {
          swift_once(&qword_100234C28, sub_10018A9E0);
        }
        unsigned int v35 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_10023DFC8,  "aaDeviceRecords call failed because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
      }
    }

    else
    {
      unsigned int v35 = _swiftEmptyArrayStorage;
      uint64_t v27 = &OBJC_PROTOCOL___AAServicesXPCClientInterface;
    }

    swift_bridgeObjectRetain(a2);
    uint64_t v37 = sub_10009DFB0((uint64_t)v35, a1, a2);
    swift_bridgeObjectRelease(v35);
    uint64_t v38 = swift_bridgeObjectRelease(a2);
    if (v37)
    {
      LODWORD(v99) = static os_log_type_t.default.getter(v38);
      if (qword_100234C28 != -1) {
        swift_once(&qword_100234C28, sub_10018A9E0);
      }
      uint64_t v98 = (uint64_t (*)(char *, uint64_t, uint64_t))qword_10023DFC8;
      uint64_t v39 = sub_100098CD8((uint64_t *)&unk_100234E00);
      uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
      *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A5EA0;
      id v41 = v37;
      id v42 = [v41 description];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v45 = v44;

      *(void *)(v40 + 56) = &type metadata for String;
      *(void *)(v40 + 64) = sub_10009914C();
      *(void *)(v40 + 32) = v43;
      *(void *)(v40 + 40) = v45;
      os_log(_:dso:log:_:_:)( v99,  &_mh_execute_header,  v98,  "Inform delegate to remove AADeviceRecord: %@",  44LL,  2LL,  v40);
      swift_bridgeObjectRelease(v40);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v97 + 24, v46);
      if (Strong)
      {
        uint64_t v48 = Strong;
        uint64_t v49 = sub_100098CD8(&qword_100236588);
        uint64_t v50 = swift_allocObject(v49, 40LL, 7LL);
        *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001A8ED0;
        *(void *)(v50 + 32) = v41;
        v100[0] = v50;
        specialized Array._endMutation()(v50);
        uint64_t v51 = v100[0];
        id v52 = v41;
        sub_1001313CC(v51, (uint64_t)&unk_10020FA90, (uint64_t)sub_1001875E0, (uint64_t)&unk_10020FAA8);
        swift_bridgeObjectRelease(v51);
        swift_unknownObjectRelease(v48);
      }

      goto LABEL_18;
    }
  }

void *sub_10016104C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100098CD8(&qword_100236FA0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001610B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

uint64_t sub_100161128(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100161388( a1,  a2,  a3,  (void *)*v3,  &qword_100236F10,  type metadata accessor for MagicPairingSettingsRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100161154(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100161388( a1,  a2,  a3,  (void *)*v3,  &qword_100236F18,  type metadata accessor for DeviceSupportInformationRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100161180(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100161388(a1, a2, a3, (void *)*v3, &qword_100236EF8, type metadata accessor for DeviceRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001611AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100161220(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001611C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100161388( a1,  a2,  a3,  (void *)*v3,  &qword_100236F70,  type metadata accessor for LegacyMagicPairingSettingsRecords);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001611F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100161388( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_100236F50,  type metadata accessor for BTDeferredRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100161220(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100098CD8(&qword_100236658);
    unint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100161388( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100098CD8(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  void v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

void *sub_10016156C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100098CD8(&qword_100236588);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v1;
  void v4[3] = (2 * (v6 >> 3)) | 1;
  int64_t v7 = sub_10016652C(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1001898E4(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_100161654(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100098CD8(&qword_100236588);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v7 = sub_1001662C8((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

unsigned __int8 *sub_100161748(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_100161858(a1, a2, a3);
}

uint64_t sub_10016175C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100161768(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161858);
}

uint64_t sub_100161768( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = String.init<A>(_:)( &v16,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) == 0)
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v11 = HIBYTE(v9) & 0xF;
    uint64_t v16 = v8;
    uint64_t v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = &v16;
    goto LABEL_7;
  }

  uint64_t v8 = sub_100161D50(v6, v7);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v9);
  unint64_t v9 = v13;
  if ((v13 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v8 & 0x1000000000000000LL) != 0)
  {
    uint64_t v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8, v9);
  }

unsigned __int8 *sub_100161858(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  uint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_100161AD4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100161D50(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_100161DCC(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100161DCC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_100161F10(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_10016104C(v12, 0LL);
      unint64_t v5 = sub_100161FFC((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_100161F10( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_1001610B0(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1001610B0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_100161FFC( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1001610B0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_1001610B0(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

void sub_10016220C(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for SoundProfileRecord(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1001664E4(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100162308(v5);
  *a1 = v3;
}

uint64_t sub_10016228C(uint64_t *a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_100166518(v4);
    *a1 = v4;
  }

  uint64_t v6 = *(void *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  uint64_t v7 = a2(v9);
  return specialized ContiguousArray._endMutation()(v7);
}

void sub_100162308(void *a1)
{
  uint64_t v134 = type metadata accessor for SoundProfileRecord(0LL);
  uint64_t v127 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v124 = (uint64_t)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v135 = (uint64_t)&v120 - v5;
  __chkstk_darwin(v6);
  uint64_t v132 = (uint64_t)&v120 - v7;
  __chkstk_darwin(v8);
  uint64_t v131 = (uint64_t)&v120 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int v11 = _minimumMergeRunLength(_:)(v10);
  if (v11 >= v10)
  {
    if (v10 < 0) {
      goto LABEL_139;
    }
    if (v10) {
      sub_10016483C(0LL, v10, 1LL, a1);
    }
    return;
  }

  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 + 1;
  }
  if (v10 < -1) {
    goto LABEL_147;
  }
  uint64_t v133 = a1;
  Swift::Int v122 = v11;
  uint64_t v128 = v1;
  if (v10 < 2)
  {
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    uint64_t v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      unint64_t v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      unint64_t v105 = v16;
      if (v18 >= 2)
      {
        uint64_t v112 = *v133;
        do
        {
          unint64_t v113 = v18 - 2;
          if (v18 < 2) {
            goto LABEL_134;
          }
          if (!v112) {
            goto LABEL_146;
          }
          uint64_t v114 = *(void *)&v105[16 * v113 + 32];
          uint64_t v115 = *(void *)&v105[16 * v18 + 24];
          uint64_t v116 = v128;
          sub_100164EF8( v112 + *(void *)(v127 + 72) * v114,  v112 + *(void *)(v127 + 72) * *(void *)&v105[16 * v18 + 16],  v112 + *(void *)(v127 + 72) * v115,  v126);
          uint64_t v128 = v116;
          if (v116) {
            break;
          }
          if (v115 < v114) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0) {
            unint64_t v105 = sub_1001661C0((uint64_t)v105);
          }
          if (v113 >= *((void *)v105 + 2)) {
            goto LABEL_136;
          }
          id v117 = &v105[16 * v113 + 32];
          *(void *)id v117 = v114;
          *((void *)v117 + 1) = v115;
          unint64_t v118 = *((void *)v105 + 2);
          if (v18 > v118) {
            goto LABEL_137;
          }
          memmove(&v105[16 * v18 + 16], &v105[16 * v18 + 32], 16 * (v118 - v18));
          *((void *)v105 + 2) = v118 - 1;
          unint64_t v18 = v118 - 1;
        }

        while (v118 > 2);
      }

LABEL_116:
      swift_bridgeObjectRelease(v105);
      uint64_t v119 = v121;
      v121[2] = 0LL;
      swift_bridgeObjectRelease(v119);
      return;
    }
  }

  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v127 + 80);
    uint64_t v121 = (void *)v14;
    unint64_t v126 = v14 + ((v15 + 32) & ~v15);
  }

  Swift::Int v17 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v19 = v17;
    Swift::Int v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }

    uint64_t v21 = *v133;
    uint64_t v22 = *(void *)(v127 + 72);
    uint64_t v23 = v131;
    sub_1000A7C90(*v133 + v22 * v20, v131, type metadata accessor for SoundProfileRecord);
    uint64_t v24 = v21 + v22 * v17;
    uint64_t v25 = v132;
    sub_1000A7C90(v24, v132, type metadata accessor for SoundProfileRecord);
    LODWORD(v130) = static Date.> infix(_:_:)(v23 + *(int *)(v134 + 28), v25 + *(int *)(v134 + 28));
    sub_1000A7CD4(v25, type metadata accessor for SoundProfileRecord);
    sub_1000A7CD4(v23, type metadata accessor for SoundProfileRecord);
    Swift::Int v17 = v19 + 2;
    uint64_t v129 = v21;
    uint64_t v136 = v22;
    if (v19 + 2 >= v10) {
      goto LABEL_21;
    }
    Swift::Int v125 = v19;
    uint64_t v26 = v16;
    uint64_t v27 = v22 * v20;
    uint64_t v28 = v21;
    Swift::Int v29 = v19 + 2;
    uint64_t v30 = v22 * v29;
    do
    {
      Swift::Int v31 = v10;
      uint64_t v32 = v131;
      sub_1000A7C90(v28 + v30, v131, type metadata accessor for SoundProfileRecord);
      uint64_t v33 = v132;
      sub_1000A7C90(v28 + v27, v132, type metadata accessor for SoundProfileRecord);
      int v34 = static Date.> infix(_:_:)(v32 + *(int *)(v134 + 28), v33 + *(int *)(v134 + 28));
      sub_1000A7CD4(v33, type metadata accessor for SoundProfileRecord);
      sub_1000A7CD4(v32, type metadata accessor for SoundProfileRecord);
      if (((v130 ^ v34) & 1) != 0)
      {
        uint64_t v16 = v26;
        Swift::Int v17 = v29;
        Swift::Int v19 = v125;
        Swift::Int v10 = v31;
        if ((v130 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v28 += v136;
      ++v29;
      Swift::Int v10 = v31;
    }

    while (v31 != v29);
    uint64_t v16 = v26;
    Swift::Int v17 = v31;
    Swift::Int v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v51 = v136;
    if (v17 < v19) {
      goto LABEL_140;
    }
    if (v19 < v17) {
      break;
    }
LABEL_24:
    unsigned int v35 = v133;
    if (v17 < v10) {
      goto LABEL_25;
    }
LABEL_57:
    if (v17 < v19) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_100165F14(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    unint64_t v61 = *((void *)v16 + 2);
    unint64_t v60 = *((void *)v16 + 3);
    unint64_t v18 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v16 = sub_100165F14((char *)(v60 > 1), v61 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v62 = v16 + 32;
    uint64_t v63 = &v16[16 * v61 + 32];
    *(void *)uint64_t v63 = v19;
    *((void *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        unint64_t v64 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v69 = &v62[16 * v18];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_123;
          }
          unint64_t v76 = v18 - 2;
          uint64_t v77 = &v62[16 * v18 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_125;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_128;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_132;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_94;
          }
        }

        else
        {
          if (v18 != 3)
          {
            uint64_t v93 = *((void *)v16 + 4);
            uint64_t v94 = *((void *)v16 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_88;
          }

          uint64_t v66 = *((void *)v16 + 4);
          uint64_t v65 = *((void *)v16 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v76 = v18 - 2;
        uint64_t v82 = &v62[16 * v18 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_127;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_130;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_131;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_94:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_96;
        }

        uint64_t v129 = v192;
        Swift::Int v130 = *(void **)&v194[(void)v192];
        uint64_t v131 = (void *)swift_allocObject(&unk_100210698, 40LL, 7LL);
        _OWORD v131[2] = v129;
        v131[3] = v146;
        uint64_t v132 = v126;
        uint64_t v133 = v189;
        v131[4] = v189;
        uint64_t v204 = (unint64_t)sub_1001898B8;
        uint64_t v205 = v131;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)sub_1000F2C54;
        id v203 = (ValueMetadata *)&unk_1002106B0;
        uint64_t v134 = _Block_copy(aBlock);
        uint64_t v135 = v130;
        swift_retain(v129);
        uint64_t v136 = v146;
        uint64_t v137 = swift_bridgeObjectRetain(v133);
        uint64_t v138 = v182;
        static DispatchQoS.unspecified.getter(v137);
        *(void *)&uint64_t v200 = _swiftEmptyArrayStorage;
        uint64_t v139 = sub_100098C98( (unint64_t *)&qword_100236EE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v140 = sub_100098CD8((uint64_t *)&unk_100235790);
        uint64_t v141 = sub_1000A4318( (unint64_t *)&qword_100236EF0,  (uint64_t *)&unk_100235790,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v142 = v185;
        uint64_t v143 = v187;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v200, v140, v141, v187, v139);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v138, v142, v134);
        _Block_release(v134);

        (*(void (**)(char *, uint64_t))(v186 + 8))(v142, v143);
        uint64_t v144 = v138;
        unint64_t v126 = v132;
        uint64_t v96 = v195;
        (*(void (**)(char *, uint64_t))(v183 + 8))(v144, v184);
        swift_release(v205);
LABEL_117:
        if (v126 == ++v127) {
          goto LABEL_146;
        }
      }

      uint64_t v153 = (unint64_t)v197 | 0x8000000000000000LL;
      goto LABEL_126;
    }

    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    uint64_t result = swift_release(v96);
    __break(1u);
    return result;
  }

  unint64_t v126 = *(void *)(aBlock[0] + 16);
  if (v126) {
    goto LABEL_112;
  }
LABEL_146:
  swift_bridgeObjectRelease(v189);
  return swift_release(v96);
}

void sub_100162D04(uint64_t *a1)
{
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v167 = (char *)&v154 - v6;
  __chkstk_darwin(v7);
  unint64_t v174 = (char *)&v154 - v8;
  __chkstk_darwin(v9);
  uint64_t v170 = (uint64_t)&v154 - v10;
  uint64_t v11 = type metadata accessor for Date(0LL);
  unint64_t v176 = *(void **)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v173 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  unint64_t v175 = (char *)&v154 - v14;
  __chkstk_darwin(v15);
  uint64_t v172 = (char *)&v154 - v16;
  Swift::Int v17 = a1[1];
  Swift::Int v18 = _minimumMergeRunLength(_:)(v17);
  if (v18 >= v17)
  {
    if (v17 < 0) {
      goto LABEL_159;
    }
    if (v17) {
      sub_100164A78(0LL, v17, 1LL, a1);
    }
    return;
  }

  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_168;
  }
  Swift::Int v159 = v18;
  uint64_t v166 = v4;
  uint64_t v156 = a1;
  if (v17 < 2)
  {
    uint64_t v25 = (char *)_swiftEmptyArrayStorage;
    uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v164 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v24 = v170;
    if (v17 != 1)
    {
      unint64_t v94 = _swiftEmptyArrayStorage[2];
      goto LABEL_123;
    }
  }

  else
  {
    Swift::Int v20 = a1;
    uint64_t v21 = v19 >> 1;
    uint64_t v22 = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(v21, v22);
    *(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v21;
    a1 = v20;
    uint64_t v164 = (void **)((v23 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v179 = v23;
    uint64_t v24 = v170;
  }

  Swift::Int v26 = 0LL;
  uint64_t v27 = *a1;
  uint64_t v158 = *a1 + 16;
  uint64_t v157 = v27 - 8;
  uint64_t v25 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v160 = v17;
  uint64_t v169 = v27;
  do
  {
    Swift::Int v28 = v26;
    Swift::Int v29 = v26 + 1;
    Swift::Int v162 = v26;
    if (v26 + 1 < v17)
    {
      uint64_t v30 = v25;
      Swift::Int v31 = *(void **)(v27 + 8 * v29);
      uint64_t v177 = *(void **)(v27 + 8 * v26);
      uint64_t v32 = v177;
      v178[0] = v31;
      id v33 = v31;
      id v34 = v32;
      uint64_t v35 = v165;
      LODWORD(v171) = sub_10015A550(v178, &v177);
      uint64_t v165 = v35;
      if (v35)
      {
        swift_bridgeObjectRelease(v30);

        goto LABEL_136;
      }

      Swift::Int v29 = v28 + 2;
      if (v28 + 2 < v17)
      {
        Swift::Int v36 = (void **)(v158 + 8 * v28);
        while (1)
        {
          Swift::Int v37 = v29;
          Swift::Int v38 = *v36;
          uint64_t v177 = *(v36 - 1);
          Swift::Int v39 = v177;
          v178[0] = v38;
          id v40 = v38;
          id v41 = v39;
          uint64_t v42 = v165;
          int v43 = sub_10015A550(v178, &v177);
          uint64_t v165 = v42;
          if (v42)
          {
            swift_bridgeObjectRelease(v30);

            goto LABEL_136;
          }

          int v44 = v43;

          Swift::Int v29 = v37 + 1;
          ++v36;
          Swift::Int v17 = v160;
          if (v160 == v37 + 1)
          {
            Swift::Int v29 = v160;
            goto LABEL_22;
          }
        }

        Swift::Int v17 = v160;
        Swift::Int v29 = v37;
LABEL_22:
        Swift::Int v28 = v162;
      }

      uint64_t v25 = v30;
      uint64_t v27 = v169;
      if ((v171 & 1) != 0)
      {
        if (v29 < v28) {
          goto LABEL_163;
        }
        if (v28 < v29)
        {
          uint64_t v45 = (uint64_t *)(v157 + 8 * v29);
          Swift::Int v46 = v29;
          Swift::Int v47 = v28;
          uint64_t v48 = (uint64_t *)(v169 + 8 * v28);
          do
          {
            if (v47 != --v46)
            {
              if (!v27) {
                goto LABEL_166;
              }
              uint64_t v49 = *v48;
              uint64_t *v48 = *v45;
              *uint64_t v45 = v49;
            }

            ++v47;
            --v45;
            ++v48;
          }

          while (v47 < v46);
        }
      }
    }

    if (v29 >= v17) {
      goto LABEL_69;
    }
    if (__OFSUB__(v29, v28)) {
      goto LABEL_160;
    }
    if (v29 - v28 >= v159) {
      goto LABEL_69;
    }
    if (__OFADD__(v28, v159)) {
      goto LABEL_161;
    }
    if (v28 + v159 >= v17) {
      Swift::Int v50 = v17;
    }
    else {
      Swift::Int v50 = v28 + v159;
    }
    if (v50 < v28)
    {
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
      __break(1u);
      return;
    }

    if (v29 == v50) {
      goto LABEL_69;
    }
    uint64_t v155 = v25;
    uint64_t v51 = v24;
    uint64_t v52 = v157 + 8 * v29;
    Swift::Int v161 = v50;
    while (2)
    {
      uint64_t v54 = *(void **)(v27 + 8 * v29);
      Swift::Int v55 = v28;
      uint64_t v163 = v52;
      Swift::Int v168 = v29;
      while (1)
      {
        uint64_t v56 = *(void **)v52;
        id v57 = v54;
        id v58 = v56;
        id v59 = [v57 modificationDate];
        id v171 = v57;
        if (v59)
        {
          unint64_t v60 = v59;
          unint64_t v61 = v175;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v59);

          uint64_t v62 = v176;
          uint64_t v63 = (void (*)(uint64_t, char *, uint64_t))v176[4];
          v63(v51, v61, v11);
          unint64_t v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62[7];
          v64(v51, 0LL, 1LL, v11);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62[6])(v51, 1LL, v11) != 1)
          {
            v63((uint64_t)v172, (char *)v51, v11);
            goto LABEL_54;
          }
        }

        else
        {
          unint64_t v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v176[7];
          v64(v51, 1LL, 1LL, v11);
        }

        id v65 = [v57 creationDate];
        if (!v65)
        {
          uint64_t v70 = (uint64_t)v166;
          uint64_t v71 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v64)(v166, 1LL, 1LL, v11);
LABEL_52:
          static Date.now.getter(v71);
          sub_100099358(v70, (uint64_t *)&unk_100234E10);
          goto LABEL_53;
        }

        uint64_t v66 = v65;
        uint64_t v67 = v175;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

        char v68 = v176;
        uint64_t v69 = (void (*)(char *, char *, uint64_t))v176[4];
        uint64_t v70 = (uint64_t)v166;
        v69(v166, v67, v11);
        v64(v70, 0LL, 1LL, v11);
        uint64_t v71 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v68[6])(v70, 1LL, v11);
        if ((_DWORD)v71 == 1) {
          goto LABEL_52;
        }
        v69(v172, (char *)v70, v11);
LABEL_53:
        sub_100099358(v170, (uint64_t *)&unk_100234E10);
LABEL_54:
        id v72 = [v58 modificationDate];
        if (v72)
        {
          uint64_t v73 = v72;
          uint64_t v74 = v175;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

          BOOL v75 = v176;
          unint64_t v76 = (void (*)(uint64_t, char *, uint64_t))v176[4];
          uint64_t v77 = (uint64_t)v174;
          v76((uint64_t)v174, v74, v11);
          v64(v77, 0LL, 1LL, v11);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v75[6])(v77, 1LL, v11) != 1)
          {
            v76((uint64_t)v173, v174, v11);
            uint64_t v51 = v170;
            goto LABEL_64;
          }
        }

        else
        {
          v64((uint64_t)v174, 1LL, 1LL, v11);
        }

        id v78 = [v58 creationDate];
        if (!v78)
        {
          uint64_t v83 = (uint64_t)v167;
          uint64_t v84 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v64)(v167, 1LL, 1LL, v11);
          uint64_t v85 = v170;
LABEL_62:
          static Date.now.getter(v84);
          sub_100099358(v83, (uint64_t *)&unk_100234E10);
          goto LABEL_63;
        }

        uint64_t v79 = v78;
        uint64_t v80 = v175;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        uint64_t v81 = v176;
        uint64_t v82 = (void (*)(char *, char *, uint64_t))v176[4];
        uint64_t v83 = (uint64_t)v167;
        v82(v167, v80, v11);
        v64(v83, 0LL, 1LL, v11);
        uint64_t v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v81[6])(v83, 1LL, v11);
        uint64_t v85 = v170;
        if ((_DWORD)v84 == 1) {
          goto LABEL_62;
        }
        v82(v173, (char *)v83, v11);
LABEL_63:
        sub_100099358((uint64_t)v174, (uint64_t *)&unk_100234E10);
        uint64_t v51 = v85;
LABEL_64:
        uint64_t v86 = v172;
        char v87 = v173;
        char v88 = static Date.> infix(_:_:)(v172, v173);
        uint64_t v89 = (void (*)(char *, uint64_t))v176[1];
        v89(v87, v11);
        v89(v86, v11);

        if ((v88 & 1) == 0) {
          break;
        }
        uint64_t v27 = v169;
        if (!v169) {
          goto LABEL_164;
        }
        uint64_t v90 = *(void **)v52;
        uint64_t v54 = *(void **)(v52 + 8);
        *(void *)uint64_t v52 = v54;
        *(void *)(v52 + 8) = v90;
        v52 -= 8LL;
        ++v55;
        Swift::Int v53 = v168;
        if (v168 == v55) {
          goto LABEL_42;
        }
      }

      Swift::Int v53 = v168;
      uint64_t v27 = v169;
LABEL_42:
      Swift::Int v29 = v53 + 1;
      Swift::Int v28 = v162;
      uint64_t v52 = v163 + 8;
      if (v29 != v161) {
        continue;
      }
      break;
    }

    uint64_t v24 = v51;
    Swift::Int v29 = v161;
    uint64_t v25 = v155;
LABEL_69:
    if (v29 < v28) {
      goto LABEL_158;
    }
    uint64_t v91 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0) {
      uint64_t v25 = v91;
    }
    else {
      uint64_t v25 = sub_100165F14(0LL, *((void *)v91 + 2) + 1LL, 1, v91);
    }
    unint64_t v93 = *((void *)v25 + 2);
    unint64_t v92 = *((void *)v25 + 3);
    unint64_t v94 = v93 + 1;
    uint64_t v27 = v169;
    if (v93 >= v92 >> 1)
    {
      uint64_t v144 = sub_100165F14((char *)(v92 > 1), v93 + 1, 1, v25);
      uint64_t v27 = v169;
      uint64_t v25 = v144;
    }

    *((void *)v25 + 2) = v94;
    uint64_t v95 = v25 + 32;
    uint64_t v96 = &v25[16 * v93 + 32];
    *(void *)uint64_t v96 = v28;
    *((void *)v96 + 1) = v29;
    Swift::Int v168 = v29;
    if (v93)
    {
      while (2)
      {
        unint64_t v97 = v94 - 1;
        if (v94 >= 4)
        {
          uint64_t v102 = &v95[16 * v94];
          uint64_t v103 = *((void *)v102 - 8);
          uint64_t v104 = *((void *)v102 - 7);
          BOOL v108 = __OFSUB__(v104, v103);
          uint64_t v105 = v104 - v103;
          if (v108) {
            goto LABEL_143;
          }
          uint64_t v107 = *((void *)v102 - 6);
          uint64_t v106 = *((void *)v102 - 5);
          BOOL v108 = __OFSUB__(v106, v107);
          uint64_t v100 = v106 - v107;
          char v101 = v108;
          if (v108) {
            goto LABEL_144;
          }
          unint64_t v109 = v94 - 2;
          uint64_t v110 = &v95[16 * v94 - 32];
          uint64_t v112 = *(void *)v110;
          uint64_t v111 = *((void *)v110 + 1);
          BOOL v108 = __OFSUB__(v111, v112);
          uint64_t v113 = v111 - v112;
          if (v108) {
            goto LABEL_146;
          }
          BOOL v108 = __OFADD__(v100, v113);
          uint64_t v114 = v100 + v113;
          if (v108) {
            goto LABEL_149;
          }
          if (v114 >= v105)
          {
            uint64_t v132 = &v95[16 * v97];
            uint64_t v134 = *(void *)v132;
            uint64_t v133 = *((void *)v132 + 1);
            BOOL v108 = __OFSUB__(v133, v134);
            uint64_t v135 = v133 - v134;
            if (v108) {
              goto LABEL_153;
            }
            BOOL v125 = v100 < v135;
          }

          else
          {
LABEL_88:
            if ((v101 & 1) != 0) {
              goto LABEL_145;
            }
            unint64_t v109 = v94 - 2;
            uint64_t v115 = &v95[16 * v94 - 32];
            uint64_t v117 = *(void *)v115;
            uint64_t v116 = *((void *)v115 + 1);
            BOOL v118 = __OFSUB__(v116, v117);
            uint64_t v119 = v116 - v117;
            char v120 = v118;
            if (v118) {
              goto LABEL_148;
            }
            uint64_t v121 = &v95[16 * v97];
            uint64_t v123 = *(void *)v121;
            uint64_t v122 = *((void *)v121 + 1);
            BOOL v108 = __OFSUB__(v122, v123);
            uint64_t v124 = v122 - v123;
            if (v108) {
              goto LABEL_151;
            }
            if (__OFADD__(v119, v124)) {
              goto LABEL_152;
            }
            if (v119 + v124 < v100) {
              goto LABEL_100;
            }
            BOOL v125 = v100 < v124;
          }

          if (v125) {
            unint64_t v97 = v109;
          }
        }

        else
        {
          if (v94 == 3)
          {
            uint64_t v99 = *((void *)v25 + 4);
            uint64_t v98 = *((void *)v25 + 5);
            BOOL v108 = __OFSUB__(v98, v99);
            uint64_t v100 = v98 - v99;
            char v101 = v108;
            goto LABEL_88;
          }

          uint64_t v126 = *((void *)v25 + 4);
          uint64_t v127 = *((void *)v25 + 5);
          BOOL v108 = __OFSUB__(v127, v126);
          uint64_t v119 = v127 - v126;
          char v120 = v108;
LABEL_100:
          if ((v120 & 1) != 0) {
            goto LABEL_147;
          }
          uint64_t v128 = &v95[16 * v97];
          uint64_t v130 = *(void *)v128;
          uint64_t v129 = *((void *)v128 + 1);
          BOOL v108 = __OFSUB__(v129, v130);
          uint64_t v131 = v129 - v130;
          if (v108) {
            goto LABEL_150;
          }
          if (v131 < v119) {
            goto LABEL_117;
          }
        }

        unint64_t v136 = v97 - 1;
        if (v97 - 1 >= v94)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }

        if (!v27) {
          goto LABEL_165;
        }
        uint64_t v137 = v25;
        uint64_t v138 = &v95[16 * v136];
        uint64_t v139 = *(void *)v138;
        uint64_t v140 = &v95[16 * v97];
        uint64_t v141 = *((void *)v140 + 1);
        uint64_t v142 = v165;
        sub_1001653A8( (void **)(v27 + 8LL * *(void *)v138),  (void **)(v27 + 8LL * *(void *)v140),  v27 + 8 * v141,  v164);
        uint64_t v165 = v142;
        if (v142)
        {
          uint64_t v145 = swift_bridgeObjectRelease(v137);
          goto LABEL_136;
        }

        if (v141 < v139) {
          goto LABEL_140;
        }
        if (v97 > *((void *)v137 + 2)) {
          goto LABEL_141;
        }
        *(void *)uint64_t v138 = v139;
        *(void *)&v95[16 * v136 + 8] = v141;
        unint64_t v143 = *((void *)v137 + 2);
        if (v97 >= v143) {
          goto LABEL_142;
        }
        unint64_t v94 = v143 - 1;
        memmove(&v95[16 * v97], v140 + 16, 16 * (v143 - 1 - v97));
        uint64_t v25 = v137;
        *((void *)v137 + 2) = v143 - 1;
        uint64_t v27 = v169;
        uint64_t v24 = v170;
        if (v143 <= 2) {
          goto LABEL_117;
        }
        continue;
      }
    }

    unint64_t v94 = 1LL;
LABEL_117:
    Swift::Int v17 = v160;
    Swift::Int v26 = v168;
  }

  while (v168 < v160);
LABEL_123:
  uint64_t v146 = v165;
  if (v94 >= 2)
  {
    uint64_t v147 = *v156;
    do
    {
      unint64_t v148 = v94 - 2;
      if (v94 < 2) {
        goto LABEL_154;
      }
      if (!v147) {
        goto LABEL_167;
      }
      uint64_t v149 = v25;
      uint64_t v150 = *(void *)&v25[16 * v148 + 32];
      uint64_t v151 = *(void *)&v25[16 * v94 + 24];
      sub_1001653A8( (void **)(v147 + 8 * v150),  (void **)(v147 + 8LL * *(void *)&v25[16 * v94 + 16]),  v147 + 8 * v151,  v164);
      if (v146)
      {
        uint64_t v145 = swift_bridgeObjectRelease(v149);
        goto LABEL_136;
      }

      if (v151 < v150) {
        goto LABEL_155;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0) {
        uint64_t v149 = sub_1001661C0((uint64_t)v149);
      }
      if (v148 >= *((void *)v149 + 2)) {
        goto LABEL_156;
      }
      uint64_t v152 = &v149[16 * v148 + 32];
      *(void *)uint64_t v152 = v150;
      *((void *)v152 + 1) = v151;
      unint64_t v153 = *((void *)v149 + 2);
      if (v94 > v153) {
        goto LABEL_157;
      }
      memmove(&v149[16 * v94 + 16], &v149[16 * v94 + 32], 16 * (v153 - v94));
      uint64_t v25 = v149;
      *((void *)v149 + 2) = v153 - 1;
      unint64_t v94 = v153 - 1;
    }

    while (v153 > 2);
  }

  uint64_t v145 = swift_bridgeObjectRelease(v25);
LABEL_136:
  *(void *)((v179 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
  specialized Array._endMutation()(v145);
  swift_bridgeObjectRelease(v179);
}

void sub_100163930(uint64_t *a1)
{
  uint64_t v2 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v2);
  unint64_t v215 = (char *)&v193 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v193 - v5;
  __chkstk_darwin(v7);
  char v202 = (char *)&v193 - v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v193 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v193 - v13;
  __chkstk_darwin(v15);
  uint64_t v199 = (char *)&v193 - v16;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v221 = *(void **)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v193 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v220 = (char *)&v193 - v21;
  __chkstk_darwin(v22);
  id v203 = (char *)&v193 - v23;
  __chkstk_darwin(v24);
  uint64_t v208 = (char *)&v193 - v25;
  __chkstk_darwin(v26);
  Swift::Int v28 = (char *)&v193 - v27;
  __chkstk_darwin(v29);
  id v218 = (char *)&v193 - v30;
  __chkstk_darwin(v31);
  uint64_t v200 = (char *)&v193 - v32;
  Swift::Int v33 = a1[1];
  Swift::Int v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0) {
      goto LABEL_170;
    }
    if (v33) {
      sub_100164B64(0LL, v33, 1LL, a1);
    }
    return;
  }

  if (v33 >= 0) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = v33 + 1;
  }
  if (v33 < -1) {
    goto LABEL_178;
  }
  unint64_t v197 = v28;
  Swift::Int v205 = v33;
  Swift::Int v196 = v34;
  id v193 = a1;
  if (v33 < 2)
  {
    id v40 = (char *)_swiftEmptyArrayStorage;
    uint64_t v222 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v209 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v33 != 1)
    {
      unint64_t v44 = _swiftEmptyArrayStorage[2];
LABEL_134:
      uint64_t v179 = v210;
      if (v44 >= 2)
      {
        uint64_t v180 = *v193;
        do
        {
          unint64_t v181 = v44 - 2;
          if (v44 < 2) {
            goto LABEL_165;
          }
          if (!v180) {
            goto LABEL_177;
          }
          unint64_t v182 = v44 - 1;
          id v211 = v40;
          uint64_t v183 = *(void *)&v40[16 * v181 + 32];
          uint64_t v184 = *(void *)&v40[16 * v44 + 24];
          sub_1001656DC( (void **)(v180 + 8 * v183),  (void **)(v180 + 8LL * *(void *)&v40[16 * v44 + 16]),  (void **)(v180 + 8 * v184),  v209);
          if (v179) {
            goto LABEL_131;
          }
          if (v184 < v183) {
            goto LABEL_166;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v211) & 1) != 0) {
            uint64_t v185 = v211;
          }
          else {
            uint64_t v185 = sub_1001661C0((uint64_t)v211);
          }
          if (v181 >= *((void *)v185 + 2)) {
            goto LABEL_167;
          }
          uint64_t v186 = v185 + 32;
          uint64_t v187 = &v185[16 * v181 + 32];
          *(void *)uint64_t v187 = v183;
          *((void *)v187 + 1) = v184;
          unint64_t v188 = *((void *)v185 + 2);
          if (v44 > v188) {
            goto LABEL_168;
          }
          uint64_t v189 = &v186[16 * v44];
          size_t v190 = 16 * (v188 - v44);
          uint64_t v191 = v185;
          memmove(&v186[16 * v182], v189, v190);
          id v40 = v191;
          *((void *)v191 + 2) = v188 - 1;
          unint64_t v44 = v188 - 1;
        }

        while (v188 > 2);
      }

      uint64_t v178 = (uint64_t)v40;
LABEL_148:
      uint64_t v192 = swift_bridgeObjectRelease(v178);
      *(void *)((v222 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
      specialized Array._endMutation()(v192);
      swift_bridgeObjectRelease(v222);
      return;
    }
  }

  else
  {
    Swift::Int v36 = a1;
    uint64_t v37 = v35 >> 1;
    uint64_t v38 = sub_1000A4A64(0LL, (unint64_t *)&qword_100234E30, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v39 = static Array._allocateBufferUninitialized(minimumCapacity:)(v37, v38);
    *(void *)((v39 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v37;
    a1 = v36;
    uint64_t v209 = (void **)((v39 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v222 = v39;
  }

  Swift::Int v41 = 0LL;
  uint64_t v42 = *a1;
  uint64_t v195 = *a1 + 16;
  uint64_t v194 = v42 - 8;
  id v40 = (char *)_swiftEmptyArrayStorage;
  uint64_t v214 = v6;
  uint64_t v198 = v11;
  uint64_t v207 = v14;
  uint64_t v212 = v19;
  uint64_t v213 = v17;
  Swift::Int v43 = v205;
  uint64_t v217 = v42;
  while (2)
  {
    Swift::Int v45 = v41;
    Swift::Int v46 = v41 + 1;
    Swift::Int v204 = v41;
    if (v41 + 1 >= v43) {
      goto LABEL_53;
    }
    id v211 = v40;
    Swift::Int v47 = *(void **)(v42 + 8 * v46);
    uint64_t v48 = *(void **)(v42 + 8 * v41);
    id v49 = v47;
    id v50 = v48;
    id v51 = [v49 creationDate];
    if (v51)
    {
      uint64_t v52 = v51;
      Swift::Int v53 = v218;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      uint64_t v54 = v221;
      Swift::Int v55 = (void (*)(char *, char *, uint64_t))v221[4];
      uint64_t v56 = (uint64_t)v199;
      v55(v199, v53, v17);
      id v219 = (void (*)(uint64_t, void, uint64_t, uint64_t))v54[7];
      v219(v56, 0LL, 1LL, v17);
      uint64_t v57 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v54[6])(v56, 1LL, v17);
      if ((_DWORD)v57 != 1)
      {
        v55(v200, (char *)v56, v17);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v56 = (uint64_t)v199;
      id v219 = (void (*)(uint64_t, void, uint64_t, uint64_t))v221[7];
      uint64_t v57 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v199, 1LL, 1LL, v17);
    }

    static Date.now.getter(v57);
    sub_100099358(v56, (uint64_t *)&unk_100234E10);
LABEL_21:
    id v58 = objc_msgSend(v50, "creationDate", v193);
    if (!v58)
    {
      uint64_t v63 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v14, 1LL, 1LL, v17);
      goto LABEL_25;
    }

    id v59 = v58;
    unint64_t v60 = v218;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    unint64_t v61 = v221;
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v221[4];
    v62(v14, v60, v17);
    v219((uint64_t)v14, 0LL, 1LL, v17);
    uint64_t v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61[6])(v14, 1LL, v17);
    if ((_DWORD)v63 == 1)
    {
LABEL_25:
      unint64_t v64 = v197;
      static Date.now.getter(v63);
      sub_100099358((uint64_t)v14, (uint64_t *)&unk_100234E10);
      goto LABEL_26;
    }

    unint64_t v64 = v197;
    v62(v197, v14, v17);
LABEL_26:
    id v65 = v200;
    LODWORD(v2swift_unknownObjectWeakDestroy(v0 + 16) = static Date.> infix(_:_:)(v200, v64);
    uint64_t v66 = (void (*)(char *, uint64_t))v221[1];
    v66(v64, v17);
    uint64_t v206 = v66;
    v66(v65, v17);

    Swift::Int v45 = v204;
    Swift::Int v43 = v205;
    Swift::Int v46 = v204 + 2;
    if (v204 + 2 >= v205) {
      goto LABEL_43;
    }
    uint64_t v67 = (id *)(v195 + 8 * v204);
    while (1)
    {
      Swift::Int v68 = v46;
      uint64_t v69 = *(v67 - 1);
      id v70 = *v67;
      id v71 = v69;
      id v72 = [v70 creationDate];
      if (v72)
      {
        uint64_t v73 = v72;
        uint64_t v74 = v218;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

        BOOL v75 = v221;
        unint64_t v76 = (void (*)(char *, char *, uint64_t))v221[4];
        v76(v11, v74, v17);
        v219((uint64_t)v11, 0LL, 1LL, v17);
        uint64_t v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75[6])(v11, 1LL, v17);
        if ((_DWORD)v77 != 1)
        {
          v76(v208, v11, v17);
          goto LABEL_33;
        }
      }

      else
      {
        uint64_t v77 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v11, 1LL, 1LL, v17);
      }

      static Date.now.getter(v77);
      sub_100099358((uint64_t)v11, (uint64_t *)&unk_100234E10);
LABEL_33:
      id v78 = [v71 creationDate];
      if (v78)
      {
        uint64_t v79 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        uint64_t v80 = v221;
        uint64_t v81 = (void (*)(void))v221[4];
        uint64_t v82 = (uint64_t)v202;
        v81();
        v219(v82, 0LL, 1LL, v17);
        uint64_t v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80[6])(v82, 1LL, v17);
        if ((_DWORD)v83 != 1)
        {
          uint64_t v84 = v203;
          ((void (*)(char *, uint64_t, uint64_t))v81)(v203, v82, v17);
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t v82 = (uint64_t)v202;
        uint64_t v83 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v202, 1LL, 1LL, v17);
      }

      uint64_t v84 = v203;
      static Date.now.getter(v83);
      sub_100099358(v82, (uint64_t *)&unk_100234E10);
LABEL_38:
      uint64_t v85 = v208;
      int v86 = static Date.> infix(_:_:)(v208, v84);
      char v87 = v84;
      int v88 = v86;
      uint64_t v89 = v206;
      v206(v87, v17);
      v89(v85, v17);

      Swift::Int v46 = v68 + 1;
      ++v67;
      if (v205 == v68 + 1)
      {
        Swift::Int v43 = v205;
        Swift::Int v46 = v205;
        uint64_t v14 = v207;
        goto LABEL_42;
      }
    }

    uint64_t v14 = v207;
    Swift::Int v43 = v205;
    Swift::Int v46 = v68;
LABEL_42:
    Swift::Int v45 = v204;
LABEL_43:
    id v40 = v211;
    uint64_t v42 = v217;
    if ((v216 & 1) != 0)
    {
      uint64_t v19 = v212;
      if (v46 < v45) {
        goto LABEL_171;
      }
      if (v45 < v46)
      {
        uint64_t v90 = (uint64_t *)(v194 + 8 * v46);
        Swift::Int v91 = v46;
        Swift::Int v92 = v45;
        unint64_t v93 = (uint64_t *)(v217 + 8 * v45);
        do
        {
          if (v92 != --v91)
          {
            if (!v42) {
              goto LABEL_176;
            }
            uint64_t v94 = *v93;
            *unint64_t v93 = *v90;
            uint64_t *v90 = v94;
          }

          ++v92;
          --v90;
          ++v93;
        }

        while (v92 < v91);
      }
    }

    else
    {
      uint64_t v19 = v212;
    }

void sub_10016483C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a1;
  uint64_t v29 = type metadata accessor for SoundProfileRecord(0LL);
  __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v26 = (uint64_t)&v23 - v9;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v28 = a3;
  uint64_t v24 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v11 + 72);
    uint64_t v32 = v14 * (v28 - 1);
    uint64_t v27 = v14;
    uint64_t v31 = v14 * v28;
LABEL_5:
    uint64_t v15 = 0LL;
    uint64_t v16 = v25;
    while (1)
    {
      uint64_t v17 = *a4;
      sub_1000A7C90(v31 + v15 + *a4, (uint64_t)v13, type metadata accessor for SoundProfileRecord);
      uint64_t v18 = v26;
      sub_1000A7C90(v32 + v15 + v17, v26, type metadata accessor for SoundProfileRecord);
      LOBYTE(v17) = static Date.> infix(_:_:)(&v13[*(int *)(v29 + 28)], v18 + *(int *)(v29 + 28));
      sub_1000A7CD4(v18, type metadata accessor for SoundProfileRecord);
      sub_1000A7CD4((uint64_t)v13, type metadata accessor for SoundProfileRecord);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v24) {
          return;
        }
        goto LABEL_5;
      }

      uint64_t v19 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v20 = a4;
      uint64_t v21 = v19 + v31 + v15;
      uint64_t v22 = v19 + v32 + v15;
      sub_1000C998C(v21, v30, type metadata accessor for SoundProfileRecord);
      swift_arrayInitWithTakeFrontToBack(v21, v22, 1LL, v29);
      sub_1000C998C(v30, v22, type metadata accessor for SoundProfileRecord);
      v15 -= v27;
      ++v16;
      a4 = v20;
      if (v28 == v16) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

void sub_100164A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = a1;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_4:
    uint64_t v9 = *(void **)(v7 + 8 * v5);
    uint64_t v10 = v8;
    while (1)
    {
      uint64_t v19 = v9;
      uint64_t v18 = *(void **)v10;
      uint64_t v11 = v18;
      id v12 = v9;
      id v13 = v11;
      char v14 = sub_10015A550(&v19, &v18);

      if (v4) {
        break;
      }
      if ((v14 & 1) != 0)
      {
        if (!v7)
        {
          __break(1u);
          return;
        }

        uint64_t v15 = *(void **)v10;
        uint64_t v9 = *(void **)(v10 + 8);
        *(void *)uint64_t v10 = v9;
        *(void *)(v10 + 8) = v15;
        v10 -= 8LL;
        if (v5 != ++v6) {
          continue;
        }
      }

      ++v5;
      v8 += 8LL;
      uint64_t v6 = a1;
      if (v5 != a2) {
        goto LABEL_4;
      }
      return;
    }
  }

void sub_100164B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v48 = a1;
  uint64_t v7 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  id v58 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  char v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  Swift::Int v55 = (char *)&v46 - v16;
  __chkstk_darwin(v17);
  uint64_t v57 = (char *)&v46 - v18;
  uint64_t v47 = a2;
  if (a3 != a2)
  {
    uint64_t v53 = *a4;
    uint64_t v19 = v53 + 8 * a3 - 8;
    id v50 = v11;
    id v51 = v14;
LABEL_5:
    uint64_t v20 = *(void **)(v53 + 8 * a3);
    uint64_t v21 = v48;
    uint64_t v49 = v19;
    uint64_t v54 = a3;
    while (1)
    {
      uint64_t v22 = *(void **)v19;
      id v23 = v20;
      id v24 = v22;
      id v56 = v23;
      id v25 = [v23 creationDate];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        uint64_t v28 = v58;
        uint64_t v29 = (void (*)(char *, char *, uint64_t))v58[4];
        v29(v11, v27, v12);
        uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
        v30(v11, 0LL, 1LL, v12);
        uint64_t v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28[6])(v11, 1LL, v12);
        if ((_DWORD)v31 != 1)
        {
          v29(v57, v11, v12);
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58[7];
        uint64_t v31 = v30(v11, 1LL, 1LL, v12);
      }

      static Date.now.getter(v31);
      sub_100099358((uint64_t)v11, (uint64_t *)&unk_100234E10);
LABEL_11:
      uint64_t v32 = v24;
      id v33 = [v24 creationDate];
      if (v33)
      {
        Swift::Int v34 = v33;
        uint64_t v35 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        Swift::Int v36 = v58;
        uint64_t v37 = (void (*)(char *, char *, uint64_t))v58[4];
        uint64_t v38 = (uint64_t)v52;
        v37(v52, v35, v12);
        v30((char *)v38, 0LL, 1LL, v12);
        uint64_t v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6])(v38, 1LL, v12);
        if ((_DWORD)v39 != 1)
        {
          id v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v38 = (uint64_t)v52;
        uint64_t v39 = v30(v52, 1LL, 1LL, v12);
      }

      id v40 = v51;
      static Date.now.getter(v39);
      sub_100099358(v38, (uint64_t *)&unk_100234E10);
LABEL_16:
      Swift::Int v41 = v57;
      char v42 = static Date.> infix(_:_:)(v57, v40);
      Swift::Int v43 = (void (*)(char *, uint64_t))v58[1];
      v43(v40, v12);
      v43(v41, v12);

      uint64_t v44 = v54;
      uint64_t v11 = v50;
      if ((v42 & 1) == 0) {
        goto LABEL_4;
      }
      if (!v53)
      {
        __break(1u);
        return;
      }

      Swift::Int v45 = *(void **)v19;
      uint64_t v20 = *(void **)(v19 + 8);
      *(void *)uint64_t v19 = v20;
      *(void *)(v19 + 8) = v45;
      v19 -= 8LL;
      if (v44 == ++v21)
      {
LABEL_4:
        a3 = v44 + 1;
        uint64_t v19 = v49 + 8;
        if (a3 == v47) {
          return;
        }
        goto LABEL_5;
      }
    }
  }

uint64_t sub_100164EF8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = type metadata accessor for SoundProfileRecord(0LL);
  __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v25 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v27 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v28 = a3 + v27;
          sub_1000A7C90(v25 + v27, (uint64_t)v11, type metadata accessor for SoundProfileRecord);
          unint64_t v29 = a2 + v27;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v44;
          sub_1000A7C90(a2 + v27, v44, type metadata accessor for SoundProfileRecord);
          char v33 = static Date.> infix(_:_:)(v31 + *(int *)(v45 + 28), v32 + *(int *)(v45 + 28));
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_1000A7CD4(v34, type metadata accessor for SoundProfileRecord);
          sub_1000A7CD4(v31, type metadata accessor for SoundProfileRecord);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1LL, v45);
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
              }
            }

            v48 += v27;
          }

          else
          {
            unint64_t v38 = v46;
            unint64_t v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1LL, v45);
              unint64_t v29 = a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == v38;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, v39);
              }
              unint64_t v29 = a2;
            }
          }

          unint64_t v25 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }

        while (v29 > v36);
      }

      goto LABEL_60;
    }
  }

  else if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v43 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = v44;
      do
      {
        sub_1000A7C90(a2, (uint64_t)v11, type metadata accessor for SoundProfileRecord);
        sub_1000A7C90(a4, v20, type metadata accessor for SoundProfileRecord);
        char v21 = static Date.> infix(_:_:)(&v11[*(int *)(v45 + 28)], v20 + *(int *)(v45 + 28));
        sub_1000A7CD4(v20, type metadata accessor for SoundProfileRecord);
        sub_1000A7CD4((uint64_t)v11, type metadata accessor for SoundProfileRecord);
        unint64_t v22 = v48;
        if ((v21 & 1) != 0)
        {
          unint64_t v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1LL, v45);
          }

          else if (v48 == a2)
          {
            unint64_t v22 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }

        else
        {
          unint64_t v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1LL, v45);
          }

          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }

          unint64_t v47 = v24;
          unint64_t v23 = a2;
        }

        unint64_t v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43) {
          break;
        }
        a2 = v23;
      }

      while (v23 < a3);
    }

LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001653A8(void **__src, void **a2, unint64_t a3, void **__dst)
{
  BOOL v35 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  uint64_t v12 = v11 >> 3;
  uint64_t v41 = __src;
  id v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v35;
      }

      char v21 = &__dst[v12];
      unint64_t v39 = v21;
      uint64_t v41 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        unint64_t v22 = (void **)(a3 - 8);
        unint64_t v23 = v5;
        uint64_t v34 = v6;
        while (1)
        {
          unint64_t v24 = v21;
          unint64_t v25 = *--v21;
          unint64_t v38 = v25;
          uint64_t v26 = *--v23;
          unint64_t v37 = v26;
          uint64_t v27 = v38;
          id v28 = v26;
          char v29 = sub_10015A550(&v38, &v37);
          if (v36) {
            break;
          }
          char v30 = v29;
          uint64_t v36 = 0LL;
          uint64_t v31 = v22 + 1;

          if ((v30 & 1) != 0)
          {
            uint64_t v32 = v35;
            if (v31 != v5 || v22 >= v5) {
              *unint64_t v22 = *v23;
            }
            uint64_t v41 = v23;
            char v21 = v24;
          }

          else
          {
            unint64_t v39 = v21;
            uint64_t v32 = v35;
            if (v31 < v24 || v22 >= v24 || v31 != v24) {
              *unint64_t v22 = *v21;
            }
            unint64_t v23 = v5;
          }

          if (v23 > v34)
          {
            --v22;
            uint64_t v5 = v23;
            if (v21 > v32) {
              continue;
            }
          }

          goto LABEL_48;
        }
      }

      goto LABEL_48;
    }
  }

  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v35;
    }

    uint64_t v13 = &__dst[v9];
    unint64_t v39 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      while (1)
      {
        unint64_t v38 = *v5;
        int64_t v14 = __dst;
        unint64_t v37 = *__dst;
        uint64_t v15 = v37;
        uint64_t v16 = v38;
        id v17 = v15;
        char v18 = sub_10015A550(&v38, &v37);
        if (v36) {
          break;
        }
        char v19 = v18;

        if ((v19 & 1) != 0)
        {
          uint64_t v20 = v5 + 1;
          if (v6 < v5 || v6 >= v20 || v6 != v5) {
            *uint64_t v6 = *v5;
          }
          __dst = v14;
        }

        else
        {
          if (v6 != v14) {
            *uint64_t v6 = *v14;
          }
          __dst = v14 + 1;
          id v40 = v14 + 1;
          uint64_t v20 = v5;
        }

        uint64_t v36 = 0LL;
        uint64_t v41 = ++v6;
        if (__dst < v13)
        {
          uint64_t v5 = v20;
        }

        goto LABEL_48;
      }
    }

uint64_t sub_1001656DC(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8 = sub_100098CD8((uint64_t *)&unk_100234E10);
  __chkstk_darwin(v8);
  Swift::Int v95 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (void **)((char *)&v93 - v11);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v93 - v14;
  __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v93 - v17;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v104 = *(void **)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v94 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v99 = (void **)((char *)&v93 - v21);
  __chkstk_darwin(v22);
  unint64_t v97 = (char *)&v93 - v23;
  __chkstk_darwin(v24);
  id v100 = (char *)&v93 - v25;
  __chkstk_darwin(v26);
  uint64_t v27 = a4;
  id v101 = a3;
  uint64_t v102 = (char *)&v93 - v28;
  uint64_t v29 = (char *)a2 - (char *)a1;
  uint64_t v30 = (char *)a2 - (char *)a1 + 7;
  uint64_t v31 = v30 >> 3;
  uint64_t v32 = (char *)a3 - (char *)a2;
  uint64_t v33 = v32 / 8;
  uint64_t v105 = a1;
  uint64_t v108 = a1;
  uint64_t v107 = v27;
  uint64_t v103 = v27;
  if (v30 >> 3 >= v32 / 8)
  {
    if (v32 < -7) {
      goto LABEL_66;
    }
    uint64_t v61 = (uint64_t)v95;
    if (v27 != a2 || &a2[v33] <= v27)
    {
      memmove(v27, a2, 8 * v33);
      uint64_t v27 = v103;
    }

    uint64_t v62 = &v27[v33];
    uint64_t v106 = v62;
    uint64_t v108 = a2;
    if (v32 < 8 || v105 >= a2)
    {
LABEL_65:
      sub_100166118((void **)&v108, (const void **)&v107, &v106);
      return 1LL;
    }

    uint64_t v63 = v101 - 1;
    unint64_t v64 = &selRef_isAnySmartRoutingDeviceConnected_;
    id v65 = a2;
    id v101 = v12;
    while (1)
    {
      uint64_t v98 = (char *)v62;
      uint64_t v66 = *(v62 - 1);
      uint64_t v96 = v62 - 1;
      uint64_t v67 = *--v65;
      Swift::Int v68 = v66;
      uint64_t v102 = v67;
      uint64_t v69 = v64[355];
      unint64_t v97 = v68;
      id v70 = [v68 v69];
      if (v70)
      {
        id v71 = v70;
        id v72 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

        uint64_t v73 = v104;
        uint64_t v74 = (void (*)(void **, char *, uint64_t))v104[4];
        v74(v101, v72, v18);
        BOOL v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v73[7];
        v75(v101, 0LL, 1LL, v18);
        unint64_t v76 = (uint64_t (*)(void **, uint64_t, uint64_t))v73[6];
        uint64_t v12 = v101;
        uint64_t v77 = v76(v101, 1LL, v18);
        if ((_DWORD)v77 != 1)
        {
          v74(v99, (char *)v12, v18);
          goto LABEL_44;
        }
      }

      else
      {
        BOOL v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v104[7];
        uint64_t v77 = v75(v12, 1LL, 1LL, v18);
      }

      static Date.now.getter(v77);
      sub_100099358((uint64_t)v12, (uint64_t *)&unk_100234E10);
LABEL_44:
      id v78 = [v102 v64[355]];
      if (v78)
      {
        uint64_t v79 = v78;
        uint64_t v80 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        uint64_t v81 = v104;
        uint64_t v82 = (void (*)(char *, char *, uint64_t))v104[4];
        uint64_t v61 = (uint64_t)v95;
        v82(v95, v80, v18);
        v75((void **)v61, 0LL, 1LL, v18);
        uint64_t v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v81[6])(v61, 1LL, v18);
        if ((_DWORD)v83 != 1)
        {
          uint64_t v84 = v94;
          uint64_t v85 = v61;
          v82(v94, (char *)v61, v18);
          goto LABEL_49;
        }
      }

      else
      {
        uint64_t v83 = v75((void **)v61, 1LL, 1LL, v18);
      }

      uint64_t v84 = v94;
      static Date.now.getter(v83);
      uint64_t v85 = v61;
      sub_100099358(v61, (uint64_t *)&unk_100234E10);
LABEL_49:
      int v86 = v63 + 1;
      char v87 = v99;
      char v88 = static Date.> infix(_:_:)(v99, v84);
      uint64_t v89 = v84;
      uint64_t v90 = (void (*)(char *, uint64_t))v104[1];
      v90(v89, v18);
      v90((char *)v87, v18);

      if ((v88 & 1) != 0)
      {
        Swift::Int v91 = v103;
        uint64_t v12 = v101;
        uint64_t v62 = (void **)v98;
        if (v86 != a2 || v63 >= a2) {
          *uint64_t v63 = *v65;
        }
        uint64_t v108 = v65;
      }

      else
      {
        uint64_t v62 = v96;
        uint64_t v106 = v96;
        Swift::Int v91 = v103;
        uint64_t v12 = v101;
        if (v86 >= (void **)v98 && v63 < (void **)v98)
        {
          uint64_t v61 = v85;
          id v65 = a2;
          goto LABEL_61;
        }

        *uint64_t v63 = *v96;
        id v65 = a2;
      }

      uint64_t v61 = v85;
LABEL_61:
      unint64_t v64 = &selRef_isAnySmartRoutingDeviceConnected_;
      if (v62 > v91)
      {
        --v63;
        a2 = v65;
        if (v65 > v105) {
          continue;
        }
      }

      goto LABEL_65;
    }
  }

  if (v29 >= -7)
  {
    uint64_t v34 = (uint64_t)v98;
    if (v27 != v105 || &v105[v31] <= v27)
    {
      memmove(v27, v105, 8 * v31);
      uint64_t v27 = v103;
    }

    uint64_t v99 = &v27[v31];
    uint64_t v106 = v99;
    if (v29 >= 8 && a2 < v101)
    {
      while (1)
      {
        BOOL v35 = *a2;
        uint64_t v103 = v27;
        uint64_t v36 = *v27;
        id v37 = v35;
        id v38 = v36;
        unint64_t v39 = v37;
        id v40 = [v37 creationDate];
        if (v40)
        {
          uint64_t v41 = v40;
          unint64_t v42 = v100;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

          unint64_t v43 = v104;
          uint64_t v44 = (void (*)(uint64_t, char *, uint64_t))v104[4];
          v44(v34, v42, v18);
          uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43[7];
          v45(v34, 0LL, 1LL, v18);
          uint64_t v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43[6])(v34, 1LL, v18);
          if ((_DWORD)v46 != 1)
          {
            v44((uint64_t)v102, (char *)v34, v18);
            goto LABEL_15;
          }
        }

        else
        {
          uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v104[7];
          uint64_t v46 = v45(v34, 1LL, 1LL, v18);
        }

        static Date.now.getter(v46);
        sub_100099358(v34, (uint64_t *)&unk_100234E10);
LABEL_15:
        id v47 = [v38 creationDate];
        if (!v47)
        {
          uint64_t v54 = v45((uint64_t)v15, 1LL, 1LL, v18);
LABEL_19:
          Swift::Int v55 = v97;
          static Date.now.getter(v54);
          sub_100099358((uint64_t)v15, (uint64_t *)&unk_100234E10);
          goto LABEL_20;
        }

        unint64_t v48 = v47;
        uint64_t v49 = v15;
        id v50 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

        id v51 = v104;
        uint64_t v52 = (void (*)(char *, char *, uint64_t))v104[4];
        uint64_t v53 = v50;
        uint64_t v15 = v49;
        v52(v49, v53, v18);
        v45((uint64_t)v49, 0LL, 1LL, v18);
        uint64_t v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v51[6])(v49, 1LL, v18);
        if ((_DWORD)v54 == 1) {
          goto LABEL_19;
        }
        Swift::Int v55 = v97;
        v52(v97, v15, v18);
LABEL_20:
        id v56 = v102;
        char v57 = static Date.> infix(_:_:)(v102, v55);
        id v58 = (void (*)(char *, uint64_t))v104[1];
        v58(v55, v18);
        v58(v56, v18);

        uint64_t v34 = (uint64_t)v98;
        if ((v57 & 1) != 0)
        {
          unint64_t v59 = (unint64_t)(a2 + 1);
          uint64_t v27 = v103;
        }

        else
        {
          unint64_t v60 = v103;
          if (v105 != v103) {
            *uint64_t v105 = *v103;
          }
          uint64_t v27 = v60 + 1;
          uint64_t v107 = v27;
          unint64_t v59 = (unint64_t)a2;
        }

        uint64_t v108 = ++v105;
        if (v27 < v99)
        {
          a2 = (void **)v59;
        }

        goto LABEL_65;
      }
    }

    goto LABEL_65;
  }

char *sub_100165F14(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100098CD8((uint64_t *)&unk_100236EB0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}