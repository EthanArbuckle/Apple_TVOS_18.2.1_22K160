Swift::Int sub_10007A76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int result;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93[24];
  uint64_t v94;
  void *v95;
  v5 = v3;
  v78 = a3;
  State = type metadata accessor for LoadState(0LL);
  v77 = *(void *)(State - 8);
  v9 = __chkstk_darwin(State);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  v79 = (uint64_t)&v67 - v12;
  v13 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  v14 = __chkstk_darwin(v13);
  v76 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16 = __chkstk_darwin(v14);
  v70 = (uint64_t)&v67 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v67 - v18;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_bridgeObjectRetain(v78);
    swift_retain();
    sub_10007B8D0();
    if (v3)
    {
      swift_bridgeObjectRelease(v78);
      swift_release(a2);
      return (Swift::Int)v4;
    }

    v4 = v66;
    v65 = a2;
LABEL_39:
    swift_release(v65);
    swift_bridgeObjectRelease(v78);
    return (Swift::Int)v4;
  }

  v4 = _swiftEmptySetSingleton;
  v95 = _swiftEmptySetSingleton;
  if (a1 < 0) {
    v20 = a1;
  }
  else {
    v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v78);
  swift_retain();
  v82 = __CocoaSet.makeIterator()(v20);
  v21 = __CocoaSet.Iterator.next()(v82);
  if (!v21)
  {
LABEL_38:
    swift_bridgeObjectRelease(v78);
    swift_release_n(a2, 2LL);
    v65 = v82;
    goto LABEL_39;
  }

  v22 = v21;
  v68 = a2;
  v69 = v5;
  v81 = type metadata accessor for InferenceProviderAsset(0LL);
  HIDWORD(v75) = enum case for LoadState.loaded(_:);
  v80 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  v23 = v70;
  v72 = v19;
  v74 = v13;
  v73 = v11;
  while (1)
  {
    v83 = v22;
    swift_dynamicCast(&v94, &v83, v80, v81, 7LL);
    v24 = v94;
    v25 = v94 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v94 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v93,  0LL,  0LL);
    sub_10002F8E0(v25, (uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v26 = *(void *)(*(void *)&v19[*(int *)(v13 + 48)] + 16LL);
    sub_10002F90C((uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if (!v26) {
      break;
    }
LABEL_22:
    swift_release(v94);
LABEL_23:
    v22 = __CocoaSet.Iterator.next()(result);
    if (!v22)
    {
      v4 = v95;
      a2 = v68;
      goto LABEL_38;
    }
  }

  v27 = v79;
  sub_10002F8E0(v25, v23, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v28 = v77;
  (*(void (**)(uint64_t, void, uint64_t))(v77 + 104))(v27, HIDWORD(v75), State);
  sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
  v30 = v29;
  dispatch thunk of RawRepresentable.rawValue.getter(State, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(State, v30);
  v31 = v84;
  v32 = v92;
  if (v83 == v91 && v84 == v92)
  {
    swift_bridgeObjectRelease_n(v84, 2LL);
    v34 = v76;
    sub_10002F8E0(v23, v76, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v35 = (uint64_t)v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v73, v27, State);
    v13 = v74;
    goto LABEL_20;
  }

  HIDWORD(v71) = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, v91, v92, 0LL);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v32);
  v34 = v76;
  sub_10002F8E0(v23, v76, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v35 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v73, v27, State);
  v13 = v74;
  if ((v71 & 0x100000000LL) != 0)
  {
LABEL_20:
    v43 = v34;
    v44 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v44(v35, State);
    sub_10002F90C(v43, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v44(v79, State);
    sub_10002F90C(v23, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v19 = v72;
    goto LABEL_21;
  }

  v36 = v34;
  dispatch thunk of RawRepresentable.rawValue.getter(State, v30);
  dispatch thunk of RawRepresentable.rawValue.getter(State, v30);
  v37 = v84;
  v38 = v92;
  v39 = v83 == v91 && v84 == v92;
  v40 = v35;
  if (v39)
  {
    swift_bridgeObjectRelease_n(v84, 2LL);
    v28 = v77;
    v34 = v36;
    v23 = v70;
    goto LABEL_20;
  }

  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, v91, v92, 0LL);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v38);
  v42 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v42(v40, State);
  sub_10002F90C(v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v42(v79, State);
  v23 = v70;
  sub_10002F90C(v70, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v19 = v72;
  if ((v41 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  if ((sub_10003131C(v24, v78) & 1) != 0) {
    goto LABEL_22;
  }
  v53 = v94;
  v54 = v95;
  v55 = v95[2];
  if (v95[3] <= v55)
  {
    sub_100019E08( v55 + 1,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v67,  v68,  v69,  v70,  v71,  (uint64_t)v72,  (uint64_t)v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90);
    v54 = v95;
  }

  Hasher.init(_seed:)(&v83, v54[5]);
  sub_100091270((uint64_t)&v83);
  result = Hasher._finalize()();
  v56 = v54 + 7;
  v57 = -1LL << *((_BYTE *)v54 + 32);
  v58 = result & ~v57;
  v59 = v58 >> 6;
  if (((-1LL << v58) & ~v54[(v58 >> 6) + 7]) != 0)
  {
    v60 = __clz(__rbit64((-1LL << v58) & ~v54[(v58 >> 6) + 7])) | v58 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_36:
    *(void *)((char *)v56 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v60;
    *(void *)(v54[6] + 8 * v60) = v53;
    ++v54[2];
    goto LABEL_23;
  }

  v61 = 0;
  v62 = (unint64_t)(63 - v57) >> 6;
  while (++v59 != v62 || (v61 & 1) == 0)
  {
    v63 = v59 == v62;
    if (v59 == v62) {
      v59 = 0LL;
    }
    v61 |= v63;
    v64 = v56[v59];
    if (v64 != -1)
    {
      v60 = __clz(__rbit64(~v64)) + (v59 << 6);
      goto LABEL_36;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_10007ADEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_bridgeObjectRetain(a3);
    swift_retain();
    sub_10007B8D0();
    if (v5)
    {
      swift_bridgeObjectRelease(a3);
      swift_release(a2);
      return (Swift::Int)v4;
    }

    v4 = v37;
    uint64_t v36 = a2;
LABEL_23:
    swift_release(v36);
    swift_bridgeObjectRelease(a3);
    return (Swift::Int)v4;
  }

  v4 = _swiftEmptySetSingleton;
  v44 = _swiftEmptySetSingleton;
  if (a1 >= 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a3);
  swift_retain();
  uint64_t v9 = __CocoaSet.makeIterator()(v8);
  uint64_t v10 = __CocoaSet.Iterator.next()(v9);
  if (!v10)
  {
LABEL_22:
    swift_bridgeObjectRelease(a3);
    swift_release_n(a2, 2LL);
    uint64_t v36 = v9;
    goto LABEL_23;
  }

  uint64_t v11 = v10;
  uint64_t v39 = a2;
  uint64_t v40 = v5;
  uint64_t v12 = type metadata accessor for InferenceProviderAsset(0LL);
  while (1)
  {
    v41[0] = v11;
    swift_dynamicCast(v43, v41, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
    uint64_t v13 = v43[0] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v43[0] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v42,  0LL,  0LL);
    uint64_t v14 = *(void *)(v13 + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL) + 40));
    swift_bridgeObjectRetain(v14);
    char v15 = sub_10007F3D4(a3, v14);
    swift_bridgeObjectRelease(v14);
    uint64_t v23 = v43[0];
    if ((v15 & 1) != 0) {
      break;
    }
    swift_release(v43[0]);
LABEL_20:
    uint64_t v11 = __CocoaSet.Iterator.next()(result);
    if (!v11)
    {
      v4 = v44;
      a2 = v39;
      goto LABEL_22;
    }
  }

  v24 = v44;
  unint64_t v25 = v44[2];
  if (v44[3] <= v25)
  {
    sub_100019E08( v25 + 1,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v38,  v39,  v40,  v41[0],  v41[1],  v41[2],  v41[3],  v41[4],  v41[5],  v41[6],  v41[7],  v41[8],  v42[0],  v42[1],  v42[2],  v43[0],  v43[1],  (uint64_t)v44,  v45,  v46,  v47,  v48,  v49,  v50);
    v24 = v44;
  }

  Hasher.init(_seed:)(v41, v24[5]);
  sub_100091270((uint64_t)v41);
  Swift::Int result = Hasher._finalize()();
  v27 = v24 + 7;
  uint64_t v28 = -1LL << *((_BYTE *)v24 + 32);
  unint64_t v29 = result & ~v28;
  unint64_t v30 = v29 >> 6;
  if (((-1LL << v29) & ~v24[(v29 >> 6) + 7]) != 0)
  {
    unint64_t v31 = __clz(__rbit64((-1LL << v29) & ~v24[(v29 >> 6) + 7])) | v29 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_19:
    *(void *)((char *)v27 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    *(void *)(v24[6] + 8 * v31) = v23;
    ++v24[2];
    goto LABEL_20;
  }

  char v32 = 0;
  unint64_t v33 = (unint64_t)(63 - v28) >> 6;
  while (++v30 != v33 || (v32 & 1) == 0)
  {
    BOOL v34 = v30 == v33;
    if (v30 == v33) {
      unint64_t v30 = 0LL;
    }
    v32 |= v34;
    uint64_t v35 = v27[v30];
    if (v35 != -1)
    {
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
      goto LABEL_19;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_10007B0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v47 - v11;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_retain();
    uint64_t v13 = (void *)sub_10007BA04(a1, a2);
    swift_release(a2);
    return (Swift::Int)v13;
  }

  uint64_t v13 = _swiftEmptySetSingleton;
  v65 = _swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain();
  uint64_t v51 = __CocoaSet.makeIterator()(v14);
  uint64_t v15 = __CocoaSet.Iterator.next()(v51);
  if (!v15)
  {
LABEL_28:
    swift_release_n(a2, 2LL);
    swift_release(v51);
    return (Swift::Int)v13;
  }

  uint64_t v16 = v15;
  uint64_t v48 = a2;
  uint64_t v49 = v3;
  uint64_t v50 = type metadata accessor for InferenceProviderAsset(0LL);
  uint64_t v17 = enum case for LoadState.dynamicMode(_:);
  while (1)
  {
    uint64_t v52 = v16;
    swift_dynamicCast(v64, &v52, (char *)&type metadata for Swift.AnyObject + 8, v50, 7LL);
    uint64_t v18 = v64[0] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v64[0] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v63,  0LL,  0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v18, State);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v10, v17, State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v20 = v19;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v19);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v20);
    uint64_t v21 = v53;
    uint64_t v22 = v62;
    if (v52 == v61 && v53 == v62) {
      break;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v61, v62, 0LL);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v22);
    unint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v10, State);
    v25(v12, State);
    if ((v24 & 1) != 0) {
      goto LABEL_14;
    }
    swift_release(v64[0]);
LABEL_26:
    uint64_t v16 = __CocoaSet.Iterator.next()(result);
    if (!v16)
    {
      uint64_t v13 = v65;
      a2 = v48;
      goto LABEL_28;
    }
  }

  swift_bridgeObjectRelease_n(v53, 2LL);
  BOOL v34 = *(void (**)(char *, uint64_t))(v7 + 8);
  v34(v10, State);
  v34(v12, State);
LABEL_14:
  uint64_t v35 = v64[0];
  uint64_t v36 = v65;
  unint64_t v37 = v65[2];
  if (v65[3] <= v37)
  {
    sub_100019E08( v37 + 1,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63[0],  v63[1],  v63[2],  v64[0],  v64[1],  (uint64_t)v65,  v66,  v67);
    uint64_t v36 = v65;
  }

  Hasher.init(_seed:)(&v52, v36[5]);
  sub_100091270((uint64_t)&v52);
  Swift::Int result = Hasher._finalize()();
  uint64_t v38 = v36 + 7;
  uint64_t v39 = -1LL << *((_BYTE *)v36 + 32);
  unint64_t v40 = result & ~v39;
  unint64_t v41 = v40 >> 6;
  if (((-1LL << v40) & ~v36[(v40 >> 6) + 7]) != 0)
  {
    unint64_t v42 = __clz(__rbit64((-1LL << v40) & ~v36[(v40 >> 6) + 7])) | v40 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_25:
    *(void *)((char *)v38 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
    *(void *)(v36[6] + 8 * v42) = v35;
    ++v36[2];
    goto LABEL_26;
  }

  char v43 = 0;
  unint64_t v44 = (unint64_t)(63 - v39) >> 6;
  while (++v41 != v44 || (v43 & 1) == 0)
  {
    BOOL v45 = v41 == v44;
    if (v41 == v44) {
      unint64_t v41 = 0LL;
    }
    v43 |= v45;
    uint64_t v46 = v38[v41];
    if (v46 != -1)
    {
      unint64_t v42 = __clz(__rbit64(~v46)) + (v41 << 6);
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10007B478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v10 = *(_BYTE *)(a1 + 32);
  unsigned int v11 = v10 & 0x3F;
  unint64_t v12 = (unint64_t)((1LL << v10) + 63) >> 6;
  uint64_t v13 = 8 * v12;
  uint64_t isStackAllocationSafe = swift_retain_n(a2, 2LL);
  if (v11 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v13, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v15 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017524(0LL, v12, v15);
    swift_retain(a2);
    uint64_t v16 = sub_10007BB68(v15, v12, a1, a2, a3, a4);
    uint64_t v17 = swift_release(a1);
    if (v5) {
      swift_willThrow(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    swift_release(a2);
  }

  else
  {
    unint64_t v25 = (void *)swift_slowAlloc(v13, -1LL);
    sub_100017524(0LL, v12, v25);
    swift_retain(a2);
    uint64_t v16 = sub_10007BB68(v25, v12, a1, a2, a3, a4);
    swift_release(a1);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_release(a2);
  }

  swift_release_n(a2, 2LL);
  return v16;
}

void sub_10007B660()
{
  char v4 = *(_BYTE *)(v3 + 32);
  unsigned int v5 = v4 & 0x3F;
  uint64_t v6 = 8 * ((unint64_t)((1LL << v4) + 63) >> 6);
  sub_10000BD20(v7);
  uint64_t v8 = sub_10000BD20(v1);
  if (v5 <= 0xD || (uint64_t v8 = sub_100085358(), (v8 & 1) != 0))
  {
    uint64_t v9 = __chkstk_darwin(v8);
    sub_1000837FC(v9, v10, v11, v12, v13, v14, v15, v16, v26);
    sub_1000224B4();
    sub_10000C030();
    sub_100084860();
    uint64_t v17 = sub_100083A2C();
    if (v2) {
      sub_100085ADC(v17, v18, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32);
    }
    sub_100021E70();
    sub_100021DDC();
  }

  else
  {
    uint64_t v25 = sub_10000BCF4(v6);
    sub_1000839FC();
    sub_1000224B4();
    sub_10000C030();
    sub_100084860();
    sub_100083A2C();
    sub_10000BCC4(v25);
    sub_100021E70();
    sub_100021DDC();
  }

  sub_10000BCDC(v1);
  sub_10000BCDC(v0);
  sub_1000859E8();
  sub_100084568();
}

void sub_10007B798()
{
  char v4 = *(_BYTE *)(v3 + 32);
  unsigned int v5 = v4 & 0x3F;
  uint64_t v6 = 8 * ((unint64_t)((1LL << v4) + 63) >> 6);
  sub_10000BD20(v7);
  uint64_t v8 = sub_10000BD20(v1);
  if (v5 <= 0xD || (uint64_t v8 = sub_100085358(), (v8 & 1) != 0))
  {
    uint64_t v9 = __chkstk_darwin(v8);
    sub_1000837FC(v9, v10, v11, v12, v13, v14, v15, v16, v26);
    sub_1000224B4();
    sub_10000C030();
    sub_100083718();
    uint64_t v17 = sub_100083A2C();
    if (v2) {
      sub_100085ADC(v17, v18, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32);
    }
    sub_100021E70();
    sub_100021DDC();
  }

  else
  {
    uint64_t v25 = sub_10000BCF4(v6);
    sub_1000839FC();
    sub_1000224B4();
    sub_10000C030();
    sub_100083718();
    sub_100083A2C();
    sub_10000BCC4(v25);
    sub_100021E70();
    sub_100021DDC();
  }

  sub_10000BCDC(v1);
  sub_10000BCDC(v0);
  sub_1000859E8();
  sub_100084568();
}

void sub_10007B8D0()
{
  char v4 = *(_BYTE *)(v3 + 32);
  unsigned int v5 = v4 & 0x3F;
  uint64_t v6 = 8 * ((unint64_t)((1LL << v4) + 63) >> 6);
  sub_10000BD20(v7);
  uint64_t v8 = swift_bridgeObjectRetain_n(v1, 2LL);
  if (v5 <= 0xD || (uint64_t v8 = sub_100085358(), (v8 & 1) != 0))
  {
    uint64_t v9 = __chkstk_darwin(v8);
    sub_1000837FC(v9, v10, v11, v12, v13, v14, v15, v16, v26);
    sub_1000224B4();
    sub_100022944();
    sub_100083718();
    uint64_t v17 = sub_100083A2C();
    if (v2) {
      sub_100085ADC(v17, v18, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32);
    }
    sub_10000BD28();
    sub_100021DDC();
  }

  else
  {
    uint64_t v25 = sub_10000BCF4(v6);
    sub_1000839FC();
    sub_1000224B4();
    sub_100022944();
    sub_100083718();
    sub_100083A2C();
    sub_10000BCC4(v25);
    sub_10000BD28();
    sub_100021DDC();
  }

  sub_10008407C();
  sub_10000BCDC(v0);
  sub_1000859E8();
  sub_100084568();
}

uint64_t sub_10007BA04(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a1 + 32);
  uint64_t v4 = v3 & 0x3F;
  uint64_t v5 = 8 * ((unint64_t)((1LL << v3) + 63) >> 6);
  uint64_t isStackAllocationSafe = sub_10000BD20(a2);
  if (v4 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v5, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_1000858CC();
    sub_1000224B4();
    uint64_t v7 = sub_100084F38();
    uint64_t v8 = sub_100021E70();
    if (v4) {
      swift_willThrow(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    sub_10000BCDC(a2);
  }

  else
  {
    uint64_t v16 = sub_10000BCF4(v5);
    sub_1000858CC();
    sub_1000224B4();
    uint64_t v7 = sub_100084F38();
    sub_100021E70();
    sub_10000BCC4(v16);
    sub_10000BCDC(a2);
  }

  sub_100021DDC();
  return v7;
}

#error "10007BD30: call analysis failed (funcsize=129)"
uint64_t sub_10007BD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[4];
  uint64_t v78;
  uint64_t v59 = a5;
  uint64_t v60 = a4;
  v56[0] = a2;
  uint64_t v57 = a1;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v56 - v11;
  v63 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v13 = __chkstk_darwin(v63);
  uint64_t v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int result = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v56 - v17;
  uint64_t v58 = 0LL;
  uint64_t v19 = 0LL;
  v70 = a3;
  uint64_t v20 = a3;
  uint64_t v21 = (uint64_t)v12;
  uint64_t v22 = *(void *)(v20 + 56);
  uint64_t v61 = v20 + 56;
  uint64_t v23 = 1LL << *(_BYTE *)(v20 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  uint64_t v25 = v24 & v22;
  uint64_t v62 = (unint64_t)(v23 + 63) >> 6;
  HIDWORD(v69) = enum case for LoadState.loaded(_:);
  uint64_t v67 = v12;
  v68 = v7;
  uint64_t v66 = v18;
  while (v25)
  {
    v72 = (v25 - 1) & v25;
    v78 = v19;
    uint64_t v26 = __clz(__rbit64(v25)) | (v19 << 6);
LABEL_17:
    uint64_t v31 = *(void *)(v70 + 48);
    v65 = v26;
    uint64_t v32 = *(void *)(v31 + 8 * v26);
    unint64_t v33 = v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v77,  0LL,  0LL);
    sub_10002F8E0(v33, (uint64_t)v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v21, HIDWORD(v69), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v35 = v34;
    v71 = v32;
    swift_retain(v32);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    uint64_t v36 = v76;
    unint64_t v37 = v74;
    if (v75 == v73 && v76 == v74)
    {
      swift_bridgeObjectRelease_n(v76, 2LL);
      sub_10002F8E0((uint64_t)v18, (uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v21, State);
    }

    else
    {
      HIDWORD(v64) = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v73, v74, 0LL);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      sub_10002F8E0((uint64_t)v18, (uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v21, State);
      if ((v64 & 0x100000000LL) == 0)
      {
        uint64_t v7 = v68;
        uint64_t v39 = *(void (**)(char *, uint64_t))(v68 + 8);
        v39(v10, State);
        sub_10002F90C((uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        uint64_t v21 = (uint64_t)v67;
        v39(v67, State);
        uint64_t v18 = v66;
        sub_10002F90C((uint64_t)v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        goto LABEL_29;
      }
    }

    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    unint64_t v40 = v76;
    unint64_t v41 = v74;
    if (v75 == v73 && v76 == v74)
    {
      swift_bridgeObjectRelease_n(v76, 2LL);
      uint64_t v7 = v68;
      uint64_t v47 = *(void (**)(char *, uint64_t))(v68 + 8);
      v47(v10, State);
      sub_10002F90C((uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v21 = (uint64_t)v67;
      v47(v67, State);
      uint64_t v18 = v66;
      sub_10002F90C((uint64_t)v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_34:
      Swift::Int result = swift_release(v71);
      uint64_t v19 = v78;
      uint64_t v25 = v72;
    }

    else
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v73, v74, 0LL);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v41);
      uint64_t v7 = v68;
      unint64_t v44 = *(void (**)(char *, uint64_t))(v68 + 8);
      v44(v10, State);
      sub_10002F90C((uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v21 = (uint64_t)v67;
      v44(v67, State);
      uint64_t v18 = v66;
      sub_10002F90C((uint64_t)v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      if ((v43 & 1) != 0) {
        goto LABEL_34;
      }
LABEL_29:
      BOOL v45 = v71;
      uint64_t v46 = sub_10008633C(v71);
      Swift::Int result = swift_release(v45);
      uint64_t v19 = v78;
      uint64_t v25 = v72;
      if ((v46 & 1) != 0)
      {
        *(void *)(v57 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v65;
        uint64_t v27 = __OFADD__(v58++, 1LL);
        if (v27) {
          goto LABEL_42;
        }
      }
    }
  }

  uint64_t v27 = __OFADD__(v19, 1LL);
  uint64_t v28 = v19 + 1;
  if (v27)
  {
    __break(1u);
    goto LABEL_41;
  }

  if (v28 >= v62) {
    goto LABEL_39;
  }
  uint64_t v29 = *(void *)(v61 + 8 * v28);
  if (v29)
  {
LABEL_16:
    v72 = (v29 - 1) & v29;
    v78 = v28;
    uint64_t v26 = __clz(__rbit64(v29)) + (v28 << 6);
    goto LABEL_17;
  }

  uint64_t v30 = v28 + 1;
  if (v28 + 1 >= v62) {
    goto LABEL_39;
  }
  uint64_t v29 = *(void *)(v61 + 8 * v30);
  if (v29) {
    goto LABEL_15;
  }
  uint64_t v30 = v28 + 2;
  if (v28 + 2 >= v62) {
    goto LABEL_39;
  }
  uint64_t v29 = *(void *)(v61 + 8 * v30);
  if (v29) {
    goto LABEL_15;
  }
  uint64_t v30 = v28 + 3;
  if (v28 + 3 >= v62)
  {
LABEL_39:
    uint64_t v48 = v56[0];
    uint64_t v49 = v70;
    swift_retain(v70);
    sub_100020238( v57,  v48,  v58,  v49,  v50,  v51,  v52,  v53,  v56[0],  v56[1],  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  (uint64_t)v66,  (uint64_t)v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77[0],  v77[1]);
    uint64_t v55 = v54;
    swift_release(v59);
    swift_release(v60);
    return v55;
  }

  uint64_t v29 = *(void *)(v61 + 8 * v30);
  if (v29)
  {
LABEL_15:
    uint64_t v28 = v30;
    goto LABEL_16;
  }

  while (1)
  {
    uint64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v28 >= v62) {
      goto LABEL_39;
    }
    uint64_t v29 = *(void *)(v61 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_16;
    }
  }

void sub_10007C340()
{
  uint64_t v4 = v3;
  uint64_t v57 = v0;
  uint64_t v64 = v6;
  uint64_t v65 = v5;
  uint64_t v8 = v7;
  uint64_t v56 = v9;
  uint64_t v58 = v10;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v12 = *(void *)(State - 8);
  __chkstk_darwin(State);
  sub_10004E158();
  uint64_t v69 = v13;
  sub_100022634();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v60 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v17);
  sub_100085224();
  __chkstk_darwin(v18);
  sub_100085644();
  uint64_t v59 = 0LL;
  uint64_t v68 = v8;
  uint64_t v19 = v8;
  uint64_t v20 = (uint64_t)v16;
  uint64_t v61 = v19 + 56;
  sub_1000226C4();
  unint64_t v24 = v23 & v22;
  uint64_t v62 = (unint64_t)(v25 + 63) >> 6;
  HIDWORD(v66) = *v4;
  uint64_t v26 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
  while (1)
  {
    if (v24)
    {
      unint64_t v70 = (v24 - 1) & v24;
      uint64_t v71 = v21;
      unint64_t v27 = __clz(__rbit64(v24)) | (v21 << 6);
      goto LABEL_15;
    }

    BOOL v28 = __OFADD__(v21, 1LL);
    uint64_t v29 = v21 + 1;
    if (v28)
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v29 >= v62) {
      goto LABEL_37;
    }
    unint64_t v30 = *(void *)(v61 + 8 * v29);
    if (!v30) {
      break;
    }
LABEL_14:
    unint64_t v70 = (v30 - 1) & v30;
    uint64_t v71 = v29;
    unint64_t v27 = __clz(__rbit64(v30)) + (v29 << 6);
LABEL_15:
    uint64_t v32 = *(void *)(v68 + 48);
    unint64_t v67 = v27;
    uint64_t v33 = *(void *)(v32 + 8 * v27);
    uint64_t v34 = v33 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002FFE4(v33 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v76);
    sub_1000849DC(v34, v1);
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v20, HIDWORD(v66), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v36 = v35;
    uint64_t v77 = v33;
    sub_10000C278();
    sub_1000860D8();
    sub_1000860D8();
    if (v74 == v72 && v75 == v73)
    {
      sub_10008407C();
      sub_1000849DC(v1, v2);
      uint64_t v40 = v69;
      sub_1000857F8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
      goto LABEL_27;
    }

    uint64_t v63 = v36;
    int v39 = sub_1000856C4(v74, v37, v72);
    uint64_t v40 = v69;
    LODWORD(v66) = v39;
    sub_10000BD28();
    sub_100022D34();
    sub_1000849DC(v1, v2);
    sub_1000857F8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
    if ((v66 & 1) != 0)
    {
LABEL_27:
      sub_10003F204(v40);
      sub_10002F90C(v2, v26);
      sub_10003F204(v20);
      sub_10002F90C(v1, v26);
      unint64_t v24 = v70;
LABEL_28:
      char v48 = sub_10008633C(v64);
      sub_100021E70();
      uint64_t v21 = v71;
      if ((v48 & 1) != 0)
      {
        *(void *)(v58 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v67;
        BOOL v28 = __OFADD__(v59++, 1LL);
        if (v28) {
          goto LABEL_40;
        }
      }
    }

    else
    {
      unint64_t v41 = v26;
      uint64_t v42 = v63;
      dispatch thunk of RawRepresentable.rawValue.getter(State, v63);
      dispatch thunk of RawRepresentable.rawValue.getter(State, v42);
      uint64_t v43 = v73;
      if (v74 == v72 && v75 == v73)
      {
        sub_10008407C();
        uint64_t v40 = v69;
        uint64_t v26 = v41;
        goto LABEL_27;
      }

      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, v72, v73, 0LL);
      sub_10000BD28();
      swift_bridgeObjectRelease(v43);
      sub_10003F204(v69);
      uint64_t v26 = v41;
      sub_10002F90C(v2, v41);
      sub_10003F204(v20);
      uint64_t v46 = sub_1000845E4();
      sub_10002F90C(v46, v47);
      unint64_t v24 = v70;
      if ((v45 & 1) != 0) {
        goto LABEL_28;
      }
      swift_release(v77);
      uint64_t v21 = v71;
    }
  }

  uint64_t v31 = v29 + 1;
  if (v29 + 1 >= v62) {
    goto LABEL_37;
  }
  unint64_t v30 = *(void *)(v61 + 8 * v31);
  if (v30) {
    goto LABEL_13;
  }
  uint64_t v31 = v29 + 2;
  if (v29 + 2 >= v62) {
    goto LABEL_37;
  }
  unint64_t v30 = *(void *)(v61 + 8 * v31);
  if (v30) {
    goto LABEL_13;
  }
  uint64_t v31 = v29 + 3;
  if (v29 + 3 >= v62)
  {
LABEL_37:
    uint64_t v49 = v56;
    uint64_t v50 = v59;
    uint64_t v51 = v68;
    sub_100021D80();
    sub_100020238( v58,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76[0],  v76[1],  v76[2],  v76[3]);
    swift_release(v64);
    swift_release(v65);
    sub_100084DC8();
    return;
  }

  unint64_t v30 = *(void *)(v61 + 8 * v31);
  if (v30)
  {
LABEL_13:
    uint64_t v29 = v31;
    goto LABEL_14;
  }

  while (1)
  {
    uint64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v29 >= v62) {
      goto LABEL_37;
    }
    unint64_t v30 = *(void *)(v61 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_14;
    }
  }

uint64_t sub_10007C7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v64 = a5;
  uint64_t v65 = a4;
  v58[0] = a2;
  uint64_t v59 = a1;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State);
  uint64_t v70 = (uint64_t)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v58 - v10;
  uint64_t v61 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v12 = __chkstk_darwin(v61);
  uint64_t v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v58 - v16;
  uint64_t v60 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v68 = a3;
  uint64_t v19 = a3;
  uint64_t v20 = v11;
  uint64_t v21 = *(void *)(v19 + 56);
  uint64_t v62 = v19 + 56;
  uint64_t v22 = 1LL << *(_BYTE *)(v19 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v63 = (unint64_t)(v22 + 63) >> 6;
  HIDWORD(v66) = enum case for LoadState.unloaded(_:);
  while (1)
  {
    if (v24)
    {
      uint64_t v78 = (v24 - 1) & v24;
      uint64_t v71 = v18;
      unint64_t v25 = __clz(__rbit64(v24)) | (v18 << 6);
      goto LABEL_17;
    }

    BOOL v26 = __OFADD__(v18, 1LL);
    uint64_t v27 = v18 + 1;
    if (v26)
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v27 >= v63) {
      goto LABEL_39;
    }
    unint64_t v28 = *(void *)(v62 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_16:
    uint64_t v78 = (v28 - 1) & v28;
    uint64_t v71 = v27;
    unint64_t v25 = __clz(__rbit64(v28)) + (v27 << 6);
LABEL_17:
    uint64_t v30 = *(void *)(v68 + 48);
    unint64_t v67 = v25;
    uint64_t v31 = *(void *)(v30 + 8 * v25);
    uint64_t v32 = v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v77,  0LL,  0LL);
    sub_10002F8E0(v32, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v20, HIDWORD(v66), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v34 = v33;
    uint64_t v72 = v31;
    swift_retain(v31);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v34);
    uint64_t v69 = v34;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v34);
    uint64_t v35 = v76;
    uint64_t v36 = v74;
    if (v75 == v73 && v76 == v74)
    {
      swift_bridgeObjectRelease_n(v76, 2LL);
      sub_10002F8E0((uint64_t)v17, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v39 = v70;
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v70, v20, State);
      goto LABEL_29;
    }

    int v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v73, v74, 0LL);
    uint64_t v39 = v70;
    LODWORD(v66) = v38;
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v36);
    sub_10002F8E0((uint64_t)v17, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v39, v20, State);
    if ((v66 & 1) != 0)
    {
LABEL_29:
      uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v47(v39, State);
      sub_10002F90C((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v47((uint64_t)v20, State);
      sub_10002F90C((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v18 = v71;
      uint64_t v46 = v72;
LABEL_30:
      char v48 = sub_10008633C(v46);
      uint64_t result = swift_release(v46);
      unint64_t v24 = v78;
      if ((v48 & 1) != 0)
      {
        *(void *)(v59 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v67;
        BOOL v26 = __OFADD__(v60++, 1LL);
        if (v26) {
          goto LABEL_42;
        }
      }
    }

    else
    {
      uint64_t v40 = v69;
      dispatch thunk of RawRepresentable.rawValue.getter(State, v69);
      dispatch thunk of RawRepresentable.rawValue.getter(State, v40);
      uint64_t v41 = v76;
      uint64_t v42 = v74;
      if (v75 == v73 && v76 == v74)
      {
        swift_bridgeObjectRelease_n(v76, 2LL);
        uint64_t v39 = v70;
        goto LABEL_29;
      }

      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v73, v74, 0LL);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v42);
      char v45 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v45(v70, State);
      sub_10002F90C((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v45((uint64_t)v20, State);
      sub_10002F90C((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v18 = v71;
      uint64_t v46 = v72;
      if ((v44 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t result = swift_release(v72);
      unint64_t v24 = v78;
    }
  }

  uint64_t v29 = v27 + 1;
  if (v27 + 1 >= v63) {
    goto LABEL_39;
  }
  unint64_t v28 = *(void *)(v62 + 8 * v29);
  if (v28) {
    goto LABEL_15;
  }
  uint64_t v29 = v27 + 2;
  if (v27 + 2 >= v63) {
    goto LABEL_39;
  }
  unint64_t v28 = *(void *)(v62 + 8 * v29);
  if (v28) {
    goto LABEL_15;
  }
  uint64_t v29 = v27 + 3;
  if (v27 + 3 >= v63)
  {
LABEL_39:
    uint64_t v49 = v58[0];
    uint64_t v50 = v60;
    uint64_t v51 = v68;
    swift_retain(v68);
    sub_100020238( v59,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v58[0],  v58[1],  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77[0],  v77[1],  v77[2],  v77[3]);
    uint64_t v57 = v56;
    swift_release(v64);
    swift_release(v65);
    return v57;
  }

  unint64_t v28 = *(void *)(v62 + 8 * v29);
  if (v28)
  {
LABEL_15:
    uint64_t v27 = v29;
    goto LABEL_16;
  }

  while (1)
  {
    uint64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v27 >= v63) {
      goto LABEL_39;
    }
    unint64_t v28 = *(void *)(v62 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_16;
    }
  }

void sub_10007CD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = a4;
  uint64_t v44 = a2;
  uint64_t v47 = a1;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v5 = *(void *)(State - 8);
  uint64_t v6 = __chkstk_darwin(State);
  uint64_t v55 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v54 = (uint64_t)&v43 - v8;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v52 = a3;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v12 = a3 + 56;
  uint64_t v11 = v13;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 - 24);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v49 = v12;
  uint64_t v50 = (unint64_t)(v14 + 63) >> 6;
  HIDWORD(v51) = enum case for LoadState.dynamicMode(_:);
LABEL_4:
  uint64_t v48 = v9;
  while (1)
  {
    if (v16)
    {
      unint64_t v56 = (v16 - 1) & v16;
      uint64_t v62 = v10;
      unint64_t v17 = __clz(__rbit64(v16)) | (v10 << 6);
      uint64_t v18 = v54;
      uint64_t v19 = v55;
      uint64_t v20 = State;
      goto LABEL_21;
    }

    uint64_t v21 = v10 + 1;
    uint64_t v18 = v54;
    uint64_t v19 = v55;
    uint64_t v20 = State;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v21 >= v50) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v49 + 8 * v21);
    uint64_t v23 = v10 + 1;
    if (!v22)
    {
      uint64_t v23 = v10 + 2;
      if (v10 + 2 >= v50) {
        goto LABEL_31;
      }
      unint64_t v22 = *(void *)(v49 + 8 * v23);
      if (!v22)
      {
        uint64_t v23 = v10 + 3;
        if (v10 + 3 >= v50) {
          goto LABEL_31;
        }
        unint64_t v22 = *(void *)(v49 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }

#error "10007D290: call analysis failed (funcsize=138)"
void sub_10007D2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t State;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83[32];
  uint64_t v84;
  unint64_t v67 = a5;
  uint64_t v61 = a4;
  uint64_t v60 = a2;
  uint64_t v63 = a1;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v7 = __chkstk_darwin(State);
  uint64_t v72 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v78 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v11 = __chkstk_darwin(v78);
  uint64_t v71 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v59 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v59 - v16;
  uint64_t v64 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = *(void *)(a3 + 56);
  uint64_t v73 = a3 + 56;
  uint64_t v20 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v74 = (unint64_t)(v20 + 63) >> 6;
  HIDWORD(v70) = enum case for LoadState.loaded(_:);
  uint64_t v68 = v17;
  uint64_t v69 = a3;
  uint64_t v65 = v10;
  while (1)
  {
    if (v22)
    {
      v84 = (v22 - 1) & v22;
      uint64_t v23 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_17;
    }

    uint64_t v24 = __OFADD__(v18++, 1LL);
    if (v24)
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v18 >= v74) {
      goto LABEL_41;
    }
    unint64_t v25 = *(void *)(v73 + 8 * v18);
    if (!v25) {
      break;
    }
LABEL_16:
    v84 = (v25 - 1) & v25;
    uint64_t v23 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_17:
    uint64_t v27 = *(void *)(a3 + 48);
    uint64_t v77 = v23;
    uint64_t v28 = *(void *)(v27 + 8 * v23);
    uint64_t v29 = v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v83,  0LL,  0LL);
    sub_10002F8E0(v29, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v30 = *(void *)(*(void *)&v17[*(int *)(v78 + 48)] + 16LL);
    swift_retain();
    sub_10002F90C((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if (v30) {
      goto LABEL_18;
    }
    uint64_t v75 = v18;
    sub_10002F8E0(v29, (uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v31 = State;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v10, HIDWORD(v70), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    char v33 = v32;
    dispatch thunk of RawRepresentable.rawValue.getter(v31, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(v31, v33);
    uint64_t v34 = v82;
    uint64_t v35 = (uint64_t)v15;
    uint64_t v36 = v80;
    if (v81 == v79 && v82 == v80)
    {
      swift_bridgeObjectRelease_n(v82, 2LL);
      uint64_t v38 = v71;
      sub_10002F8E0(v35, v71, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v39 = v72;
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v72, v10, v31);
LABEL_31:
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      uint64_t v49 = v39;
      uint64_t v50 = State;
      v48(v49, State);
      sub_10002F90C(v38, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v48((uint64_t)v10, v50);
      sub_10002F90C(v35, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v15 = (char *)v35;
      unint64_t v17 = v68;
      a3 = v69;
      uint64_t v18 = v75;
      goto LABEL_32;
    }

    HIDWORD(v66) = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v79, v80, 0LL);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v36);
    uint64_t v38 = v71;
    sub_10002F8E0(v35, v71, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v39 = v72;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v72, v10, v31);
    if ((v66 & 0x100000000LL) != 0) {
      goto LABEL_31;
    }
    uint64_t v40 = v6;
    uint64_t v41 = v39;
    uint64_t v42 = State;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(v42, v33);
    uint64_t v43 = v82;
    uint64_t v44 = v80;
    if (v81 == v79 && v82 == v80)
    {
      swift_bridgeObjectRelease_n(v82, 2LL);
      uint64_t v6 = v40;
      uint64_t v39 = v41;
      uint64_t v10 = v65;
      goto LABEL_31;
    }

    HIDWORD(v66) = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v79, v80, 0LL);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v44);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v41, v42);
    sub_10002F90C(v38, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v47 = (uint64_t)v65;
    v46((uint64_t)v65, v42);
    uint64_t v15 = (char *)v35;
    sub_10002F90C(v35, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    unint64_t v17 = v68;
    a3 = v69;
    uint64_t v6 = v40;
    uint64_t v10 = (char *)v47;
    uint64_t v18 = v75;
    if ((v66 & 0x100000000LL) != 0)
    {
LABEL_32:
      uint64_t v51 = sub_10003131C(v28, v67);
      swift_release(v28);
      unint64_t v22 = v84;
      if ((v51 & 1) == 0)
      {
        *(void *)(v63 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v77;
        uint64_t v24 = __OFADD__(v64++, 1LL);
        if (v24) {
          goto LABEL_44;
        }
      }
    }

    else
    {
LABEL_18:
      swift_release(v28);
      unint64_t v22 = v84;
    }
  }

  uint64_t v26 = v18 + 1;
  if (v18 + 1 >= v74) {
    goto LABEL_41;
  }
  unint64_t v25 = *(void *)(v73 + 8 * v26);
  if (v25) {
    goto LABEL_15;
  }
  uint64_t v26 = v18 + 2;
  if (v18 + 2 >= v74) {
    goto LABEL_41;
  }
  unint64_t v25 = *(void *)(v73 + 8 * v26);
  if (v25) {
    goto LABEL_15;
  }
  uint64_t v26 = v18 + 3;
  if (v18 + 3 >= v74)
  {
LABEL_41:
    uint64_t v52 = v61;
    uint64_t v53 = v60;
    uint64_t v54 = v64;
    swift_retain();
    sub_100020238( v63,  v53,  v54,  a3,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  (uint64_t)v65,  v66,  v67,  (uint64_t)v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  State,  v77,  v78,  v79,  v80,  v81,  v82);
    swift_bridgeObjectRelease(v67);
    swift_release(v52);
    return;
  }

  unint64_t v25 = *(void *)(v73 + 8 * v26);
  if (v25)
  {
LABEL_15:
    uint64_t v18 = v26;
    goto LABEL_16;
  }

  while (1)
  {
    uint64_t v18 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v18 >= v74) {
      goto LABEL_41;
    }
    unint64_t v25 = *(void *)(v73 + 8 * v18);
    ++v26;
    if (v25) {
      goto LABEL_16;
    }
  }

void sub_10007D8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v54 = a2;
  uint64_t v57 = a1;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v7 = __chkstk_darwin(State);
  uint64_t v63 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t v66 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v11 = __chkstk_darwin(v66);
  uint64_t v62 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v54 - v13;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v65 = a3;
  uint64_t v17 = a3;
  uint64_t v18 = (uint64_t)v14;
  uint64_t v19 = *(void *)(v17 + 56);
  uint64_t v59 = v17 + 56;
  uint64_t v20 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v60 = (unint64_t)(v20 + 63) >> 6;
  HIDWORD(v61) = enum case for LoadState.loaded(_:);
LABEL_4:
  uint64_t v58 = v15;
  while (1)
  {
    if (v22)
    {
      unint64_t v68 = (v22 - 1) & v22;
      uint64_t v69 = v16;
      unint64_t v23 = __clz(__rbit64(v22)) | (v16 << 6);
      goto LABEL_18;
    }

    BOOL v24 = __OFADD__(v16, 1LL);
    uint64_t v25 = v16 + 1;
    if (v24)
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v25 >= v60) {
      goto LABEL_41;
    }
    unint64_t v26 = *(void *)(v59 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_17:
    unint64_t v68 = (v26 - 1) & v26;
    uint64_t v69 = v25;
    unint64_t v23 = __clz(__rbit64(v26)) + (v25 << 6);
LABEL_18:
    uint64_t v28 = *(void *)(v65 + 48);
    unint64_t v64 = v23;
    uint64_t v29 = *(void *)(v28 + 8 * v23);
    uint64_t v30 = v29 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v29 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v74,  0LL,  0LL);
    uint64_t v67 = v30;
    sub_10002F8E0(v30, v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v10, HIDWORD(v61), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v32 = v31;
    uint64_t v75 = v29;
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    uint64_t v33 = v73;
    uint64_t v34 = v71;
    if (v72 == v70 && v73 == v71)
    {
      swift_bridgeObjectRelease_n(v73, 2LL);
      uint64_t v36 = v62;
      sub_10002F8E0(v18, v62, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v37 = v63;
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v63, v10, State);
LABEL_30:
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v44(v37, State);
      sub_10002F90C(v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v44((uint64_t)v10, State);
      sub_10002F90C(v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      unint64_t v22 = v68;
      uint64_t v16 = v69;
      uint64_t v43 = v75;
      goto LABEL_31;
    }

    LODWORD(v61) = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v70, v71, 0LL);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v34);
    uint64_t v36 = v62;
    sub_10002F8E0(v18, v62, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v37 = v63;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v63, v10, State);
    if ((v61 & 1) != 0) {
      goto LABEL_30;
    }
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    uint64_t v38 = v73;
    uint64_t v39 = v71;
    if (v72 == v70 && v73 == v71)
    {
      swift_bridgeObjectRelease_n(v73, 2LL);
      goto LABEL_30;
    }

    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v70, v71, 0LL);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v42(v37, State);
    sub_10002F90C(v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v42((uint64_t)v10, State);
    sub_10002F90C(v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    unint64_t v22 = v68;
    uint64_t v16 = v69;
    uint64_t v43 = v75;
    if ((v41 & 1) != 0)
    {
LABEL_31:
      char v45 = *(_BYTE *)(v67 + *(int *)(v66 + 24));
      swift_release(v43);
      if ((v45 & 1) == 0)
      {
        uint64_t v46 = v58;
        *(void *)(v57 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v64;
        BOOL v24 = __OFADD__(v46, 1LL);
        uint64_t v15 = v46 + 1;
        if (!v24) {
          goto LABEL_4;
        }
        __break(1u);
LABEL_41:
        uint64_t v47 = v55;
        uint64_t v48 = v54;
        uint64_t v49 = v65;
        swift_retain();
        sub_100020238( v57,  v48,  v58,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74[0],  v74[1],  v74[2],  v74[3]);
        swift_release(v47);
        return;
      }
    }

    else
    {
      swift_release(v75);
    }
  }

  uint64_t v27 = v25 + 1;
  if (v25 + 1 >= v60) {
    goto LABEL_41;
  }
  unint64_t v26 = *(void *)(v59 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  uint64_t v27 = v25 + 2;
  if (v25 + 2 >= v60) {
    goto LABEL_41;
  }
  unint64_t v26 = *(void *)(v59 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  uint64_t v27 = v25 + 3;
  if (v25 + 3 >= v60) {
    goto LABEL_41;
  }
  unint64_t v26 = *(void *)(v59 + 8 * v27);
  if (v26)
  {
LABEL_16:
    uint64_t v25 = v27;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v25 >= v60) {
      goto LABEL_41;
    }
    unint64_t v26 = *(void *)(v59 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_17;
    }
  }

uint64_t sub_10007DE2C(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_1000CFC7C(v6);
    *a1 = v6;
  }

  uint64_t v8 = *(char **)(v6 + 16);
  v11[0] = (char *)(v6 + 32);
  v11[1] = v8;
  Swift::Int v9 = sub_10007DEBC(v11, a2, a3);
  return specialized ContiguousArray._endMutation()(v9);
}

Swift::Int sub_10007DEBC(char **a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v183 = a3;
  v184 = a2;
  uint64_t v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v182 = (uint64_t)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v181 = (uint64_t)&v161 - v9;
  Swift::Int v10 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  v166 = (char *)v10;
  if (result >= v10)
  {
    if (v10 < 0) {
      goto LABEL_200;
    }
    if ((unint64_t)v10 >= 2)
    {
      uint64_t v164 = v3;
      v143 = *a1;
      uint64_t v144 = -1LL;
      uint64_t v145 = 1LL;
      v185 = *a1;
      uint64_t v146 = v181;
      do
      {
        v179 = (char *)v145;
        uint64_t v147 = *(void *)&v185[8 * v145];
        v180 = (char *)v144;
        unint64_t v178 = (unint64_t)v143;
        do
        {
          uint64_t v148 = *(void *)v143;
          uint64_t v149 = v147 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess( v147 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v195,  0LL,  0LL);
          sub_10002F8E0(v149, v146, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          uint64_t v150 = v148 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess( v148 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v194,  0LL,  0LL);
          uint64_t v151 = v182;
          sub_10002F8E0(v150, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_retain(v147);
          swift_retain(v148);
          LOBYTE(v150) = v184(v146, v151);
          sub_10002F90C(v151, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10002F90C(v146, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_release(v147);
          Swift::Int result = swift_release(v148);
          if ((v150 & 1) == 0) {
            break;
          }
          if (!v185) {
            goto LABEL_202;
          }
          uint64_t v152 = *(void *)v143;
          uint64_t v147 = *((void *)v143 + 1);
          *(void *)v143 = v147;
          *((void *)v143 + 1) = v152;
          v143 -= 8;
          BOOL v111 = __CFADD__(v144++, 1LL);
        }

        while (!v111);
        uint64_t v145 = (uint64_t)(v179 + 1);
        v143 = (char *)(v178 + 8);
        uint64_t v144 = (uint64_t)(v180 - 1);
      }

      while (v179 + 1 != v166);
    }

    return result;
  }

  Swift::Int v12 = result;
  uint64_t v164 = v3;
  sub_100003AA8(v10 / 2);
  v177 = v13;
  uint64_t v196 = v14;
  v162 = a1;
  if (v10 > 0)
  {
    Swift::Int v163 = v12;
    Swift::Int v15 = 0LL;
    uint64_t v16 = *a1;
    uint64_t v165 = (uint64_t)(*a1 - 8);
    uint64_t v17 = (char *)_swiftEmptyArrayStorage;
    v176 = v16;
    while (1)
    {
      uint64_t v4 = v15;
      Swift::Int v18 = v15 + 1;
      v180 = (char *)v15;
      if (v15 + 1 < v10)
      {
        uint64_t v19 = *(void *)&v16[8 * v18];
        uint64_t v20 = *(void *)&v16[8 * v15];
        uint64_t v21 = v17;
        uint64_t v22 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess( v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v189,  0LL,  0LL);
        uint64_t v23 = v181;
        sub_10002F8E0(v22, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        uint64_t v24 = v20 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess( v20 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v188,  0LL,  0LL);
        uint64_t v25 = v182;
        sub_10002F8E0(v24, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_retain(v19);
        swift_retain(v20);
        LODWORD(v185) = v184(v23, v25);
        uint64_t v26 = v25;
        uint64_t v17 = v21;
        uint64_t v4 = (uint64_t)v180;
        sub_10002F90C(v26, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_10002F90C(v23, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_release(v19);
        swift_release(v20);
        Swift::Int v18 = v4 + 2;
        if (v4 + 2 < v10)
        {
          v168 = v17;
          uint64_t v27 = v4;
          while (1)
          {
            Swift::Int v28 = v10;
            uint64_t v29 = &v16[8 * v27];
            uint64_t v30 = *((void *)v29 + 1);
            uint64_t v31 = *((void *)v29 + 2);
            uint64_t v32 = v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
            swift_beginAccess( v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v187,  0LL,  0LL);
            uint64_t v33 = v181;
            sub_10002F8E0(v32, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            uint64_t v34 = v30 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
            swift_beginAccess( v30 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v186,  0LL,  0LL);
            uint64_t v35 = v182;
            sub_10002F8E0(v34, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_retain(v31);
            swift_retain(v30);
            LODWORD(v34) = v184(v33, v35);
            sub_10002F90C(v35, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            sub_10002F90C(v33, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_release(v31);
            swift_release(v30);
            Swift::Int v36 = v27 + 3;
            ++v27;
            Swift::Int v10 = v28;
            uint64_t v16 = v176;
            if (v36 >= v28)
            {
              Swift::Int v18 = v28;
              uint64_t v17 = v168;
              goto LABEL_11;
            }
          }

          Swift::Int v18 = v27 + 2;
          uint64_t v17 = v168;
          uint64_t v16 = v176;
          Swift::Int v10 = v28;
LABEL_11:
          uint64_t v4 = (uint64_t)v180;
        }

        if ((v185 & 1) != 0)
        {
          if (v18 < v4) {
            goto LABEL_197;
          }
          if (v4 < v18)
          {
            uint64_t v37 = (uint64_t *)(v165 + 8 * v18);
            Swift::Int v38 = v18;
            uint64_t v39 = v4;
            uint64_t v40 = (uint64_t *)&v16[8 * v4];
            do
            {
              if (v39 != --v38)
              {
                if (!v16) {
                  goto LABEL_205;
                }
                uint64_t v41 = *v40;
                *uint64_t v40 = *v37;
                uint64_t *v37 = v41;
              }

              ++v39;
              --v37;
              ++v40;
            }

            while (v39 < v38);
          }
        }
      }

      if (v18 < v10)
      {
        if (__OFSUB__(v18, v4)) {
          goto LABEL_196;
        }
        if (v18 - v4 < v163)
        {
          if (__OFADD__(v4, v163)) {
            goto LABEL_198;
          }
          if (v4 + v163 >= v10) {
            uint64_t v42 = (char *)v10;
          }
          else {
            uint64_t v42 = (char *)(v4 + v163);
          }
          if ((char *)v18 != v42)
          {
            v168 = v17;
            uint64_t v43 = (char *)(v165 + 8 * v18);
            v179 = v42;
            do
            {
              uint64_t v44 = *(void *)&v16[8 * v18];
              v185 = v43;
              Swift::Int v175 = v18;
              do
              {
                uint64_t v45 = *(void *)v43;
                uint64_t v46 = v44 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
                swift_beginAccess( v44 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v191,  0LL,  0LL);
                uint64_t v47 = v181;
                sub_10002F8E0(v46, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                uint64_t v48 = v45 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
                swift_beginAccess( v45 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v190,  0LL,  0LL);
                uint64_t v49 = v182;
                sub_10002F8E0(v48, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                swift_retain(v44);
                swift_retain(v45);
                LOBYTE(v48) = v184(v47, v49);
                uint64_t v50 = v49;
                uint64_t v16 = v176;
                sub_10002F90C(v50, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                sub_10002F90C(v47, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                swift_release(v44);
                uint64_t v51 = v45;
                uint64_t v52 = (char *)v175;
                swift_release(v51);
                if ((v48 & 1) == 0) {
                  break;
                }
                if (!v16) {
                  goto LABEL_201;
                }
                uint64_t v53 = *(void *)v43;
                uint64_t v44 = *((void *)v43 + 1);
                *(void *)uint64_t v43 = v44;
                *((void *)v43 + 1) = v53;
                v43 -= 8;
                ++v4;
              }

              while (v52 != (char *)v4);
              Swift::Int v18 = (Swift::Int)(v52 + 1);
              uint64_t v43 = v185 + 8;
              uint64_t v4 = (uint64_t)v180;
            }

            while ((char *)v18 != v179);
            Swift::Int v18 = (Swift::Int)v179;
            Swift::Int v10 = (Swift::Int)v166;
            uint64_t v17 = v168;
          }
        }
      }

      if (v18 < v4) {
        goto LABEL_191;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
      Swift::Int v175 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v17 = sub_10007F2D4(0LL, *((void *)v17 + 2) + 1LL, 1, v17);
      }
      unint64_t v56 = *((void *)v17 + 2);
      unint64_t v55 = *((void *)v17 + 3);
      unint64_t v57 = v56 + 1;
      if (v56 >= v55 >> 1) {
        uint64_t v17 = sub_10007F2D4((char *)(v55 > 1), v56 + 1, 1, v17);
      }
      *((void *)v17 + 2) = v57;
      uint64_t v58 = v17 + 32;
      uint64_t v59 = &v17[16 * v56 + 32];
      Swift::Int v60 = v175;
      *(void *)uint64_t v59 = v4;
      *((void *)v59 + 1) = v60;
      if (v56) {
        break;
      }
      unint64_t v57 = 1LL;
LABEL_147:
      Swift::Int v15 = v175;
      if (v175 >= v10) {
        goto LABEL_160;
      }
    }

    v168 = v17;
    v167 = v17 + 32;
    while (1)
    {
      unint64_t v61 = v57 - 1;
      if (v57 >= 4)
      {
        uint64_t v66 = &v58[16 * v57];
        uint64_t v67 = *((void *)v66 - 8);
        uint64_t v68 = *((void *)v66 - 7);
        BOOL v72 = __OFSUB__(v68, v67);
        uint64_t v69 = v68 - v67;
        if (v72) {
          goto LABEL_180;
        }
        uint64_t v71 = *((void *)v66 - 6);
        uint64_t v70 = *((void *)v66 - 5);
        BOOL v72 = __OFSUB__(v70, v71);
        uint64_t v64 = v70 - v71;
        char v65 = v72;
        if (v72) {
          goto LABEL_181;
        }
        unint64_t v73 = v57 - 2;
        uint64_t v74 = &v58[16 * v57 - 32];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v72 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v72) {
          goto LABEL_183;
        }
        BOOL v72 = __OFADD__(v64, v77);
        uint64_t v78 = v64 + v77;
        if (v72) {
          goto LABEL_186;
        }
        if (v78 >= v69)
        {
          v96 = &v58[16 * v61];
          uint64_t v98 = *(void *)v96;
          uint64_t v97 = *((void *)v96 + 1);
          BOOL v72 = __OFSUB__(v97, v98);
          uint64_t v99 = v97 - v98;
          if (v72) {
            goto LABEL_190;
          }
          BOOL v89 = v64 < v99;
          goto LABEL_74;
        }
      }

      else
      {
        if (v57 != 3)
        {
          uint64_t v90 = *((void *)v17 + 4);
          uint64_t v91 = *((void *)v17 + 5);
          BOOL v72 = __OFSUB__(v91, v90);
          uint64_t v83 = v91 - v90;
          char v84 = v72;
          goto LABEL_68;
        }

        uint64_t v63 = *((void *)v17 + 4);
        uint64_t v62 = *((void *)v17 + 5);
        BOOL v72 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        char v65 = v72;
      }

      if ((v65 & 1) != 0) {
        goto LABEL_182;
      }
      unint64_t v73 = v57 - 2;
      v79 = &v58[16 * v57 - 32];
      uint64_t v81 = *(void *)v79;
      uint64_t v80 = *((void *)v79 + 1);
      BOOL v82 = __OFSUB__(v80, v81);
      uint64_t v83 = v80 - v81;
      char v84 = v82;
      if (v82) {
        goto LABEL_185;
      }
      v85 = &v58[16 * v61];
      uint64_t v87 = *(void *)v85;
      uint64_t v86 = *((void *)v85 + 1);
      BOOL v72 = __OFSUB__(v86, v87);
      uint64_t v88 = v86 - v87;
      if (v72) {
        goto LABEL_188;
      }
      if (__OFADD__(v83, v88)) {
        goto LABEL_189;
      }
      if (v83 + v88 >= v64)
      {
        BOOL v89 = v64 < v88;
LABEL_74:
        if (v89) {
          unint64_t v61 = v73;
        }
        goto LABEL_76;
      }

LABEL_68:
      if ((v84 & 1) != 0) {
        goto LABEL_184;
      }
      v92 = &v58[16 * v61];
      uint64_t v94 = *(void *)v92;
      uint64_t v93 = *((void *)v92 + 1);
      BOOL v72 = __OFSUB__(v93, v94);
      uint64_t v95 = v93 - v94;
      if (v72) {
        goto LABEL_187;
      }
      if (v95 < v83) {
        goto LABEL_147;
      }
LABEL_76:
      if (v61 - 1 >= v57)
      {
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
        __break(1u);
        return result;
      }

      if (!v16) {
        goto LABEL_203;
      }
      uint64_t v4 = v10;
      v170 = &v58[16 * v61 - 16];
      uint64_t v100 = *(void *)v170;
      int64_t v172 = v61;
      v101 = &v58[16 * v61];
      uint64_t v103 = *(void *)v101;
      uint64_t v102 = *((void *)v101 + 1);
      uint64_t v173 = v100;
      v104 = &v16[8 * v100];
      v105 = &v16[8 * v103];
      uint64_t v106 = v105 - v104;
      uint64_t v107 = (v105 - v104) / 8;
      unint64_t v178 = (unint64_t)&v16[8 * v102];
      uint64_t v108 = v178 - (void)v105;
      uint64_t v109 = (uint64_t)(v178 - (void)v105) / 8;
      v110 = v177;
      uint64_t v174 = v102;
      v185 = v104;
      v169 = v101;
      unint64_t v171 = v61 - 1;
      if (v107 >= v109)
      {
        if (v108 <= -8) {
          goto LABEL_207;
        }
        if ((unint64_t)v177 >= v178 || v177 != v105)
        {
          memmove(v177, v105, 8 * v109);
          v105 = &v16[8 * v103];
          uint64_t v102 = v174;
        }

        v112 = &v110[8 * v109];
        if (v173 >= v103 || v108 < 8)
        {
          uint64_t v126 = v173;
          uint64_t v17 = v168;
          Swift::Int v10 = v4;
          goto LABEL_134;
        }

        uint64_t v4 = v165 + 8 * v102;
        while (2)
        {
          v180 = v112;
          v179 = v105;
          v128 = v112 - 8;
          uint64_t v127 = *((void *)v112 - 1);
          unint64_t v178 = v4 + 8;
          v130 = v105 - 8;
          uint64_t v129 = *((void *)v105 - 1);
          uint64_t v131 = v127 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess( v127 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v195,  0LL,  0LL);
          uint64_t v132 = v181;
          sub_10002F8E0(v131, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          uint64_t v133 = v129 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess( v129 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v194,  0LL,  0LL);
          uint64_t v134 = v182;
          sub_10002F8E0(v133, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_retain(v127);
          swift_retain(v129);
          LOBYTE(v133) = v184(v132, v134);
          sub_10002F90C(v134, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10002F90C(v132, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_release(v127);
          swift_release(v129);
          if ((v133 & 1) != 0)
          {
            BOOL v135 = (char *)v178 != v179 || v4 >= (unint64_t)v179;
            v105 = v130;
            v110 = v177;
            v136 = v185;
            v112 = v180;
            if (!v135) {
              goto LABEL_127;
            }
          }

          else
          {
            BOOL v137 = (char *)v178 != v180 || v4 >= (unint64_t)v180;
            v130 = v128;
            v112 = v128;
            v110 = v177;
            v105 = v179;
            v136 = v185;
            if (!v137)
            {
LABEL_127:
              v4 -= 8LL;
              if (v136 >= v105 || v110 >= v112)
              {
                Swift::Int v10 = (Swift::Int)v166;
                uint64_t v17 = v168;
                goto LABEL_133;
              }

              continue;
            }
          }

          break;
        }

        *(void *)uint64_t v4 = *(void *)v130;
        goto LABEL_127;
      }

      if (v106 <= -8) {
        goto LABEL_207;
      }
      BOOL v111 = v177 != v104 || v177 >= v105;
      if (v111)
      {
        memmove(v177, v185, 8 * v107);
        v104 = v185;
        v105 = &v16[8 * v103];
        uint64_t v102 = v174;
      }

      v112 = &v110[8 * v107];
      BOOL v113 = v103 >= v102 || v106 < 8;
      v180 = &v110[8 * v107];
      if (!v113)
      {
        while (1)
        {
          v179 = v110;
          v185 = v104;
          uint64_t v114 = *(void *)v105;
          uint64_t v115 = *(void *)v110;
          uint64_t v116 = *(void *)v105 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          v117 = v105;
          swift_beginAccess(v116, v193, 0LL, 0LL);
          uint64_t v118 = v181;
          sub_10002F8E0(v116, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          uint64_t v119 = v115 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess( v115 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v192,  0LL,  0LL);
          uint64_t v120 = v182;
          sub_10002F8E0(v119, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_retain(v114);
          swift_retain(v115);
          uint64_t v4 = v184(v118, v120);
          sub_10002F90C(v120, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10002F90C(v118, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_release(v114);
          swift_release(v115);
          if ((v4 & 1) != 0) {
            break;
          }
          v121 = v179;
          v110 = v179 + 8;
          v122 = v185;
          v105 = v117;
          v112 = v180;
          if (v185 != v179) {
            goto LABEL_96;
          }
LABEL_97:
          v104 = v122 + 8;
        }

        v121 = v117;
        v105 = v117 + 8;
        v122 = v185;
        v112 = v180;
        v110 = v179;
        if (v185 == v117) {
          goto LABEL_97;
        }
LABEL_96:
        *(void *)v122 = *(void *)v121;
        goto LABEL_97;
      }

      v110 = v177;
LABEL_102:
      v105 = v104;
      Swift::Int v10 = (Swift::Int)v166;
      uint64_t v17 = v168;
LABEL_133:
      uint64_t v126 = v173;
      uint64_t v102 = v174;
LABEL_134:
      if (v112 - v110 <= -8) {
        goto LABEL_207;
      }
      uint64_t v139 = (v112 - v110) / 8;
      BOOL v140 = v105 != v110 || v105 >= &v110[8 * v139];
      uint64_t v16 = v176;
      if (v140)
      {
        memmove(v105, v110, 8 * v139);
        uint64_t v102 = v174;
      }

      if (v102 < v126) {
        goto LABEL_177;
      }
      int64_t v141 = v172;
      if (v172 > *((void *)v17 + 2)) {
        goto LABEL_178;
      }
      *(void *)v170 = v126;
      uint64_t v58 = v167;
      *(void *)&v167[16 * v171 + 8] = v102;
      unint64_t v142 = *((void *)v17 + 2);
      unint64_t v57 = v142 - 1;
      memmove(v169, v169 + 16, 16 * (v142 - 1 - v141));
      *((void *)v17 + 2) = v142 - 1;
      if (v142 <= 2) {
        goto LABEL_147;
      }
    }
  }

  uint64_t v17 = (char *)_swiftEmptyArrayStorage;
  unint64_t v57 = _swiftEmptyArrayStorage[2];
LABEL_160:
  if (v57 >= 2)
  {
    v153 = *v162;
    do
    {
      unint64_t v154 = v57 - 2;
      if (v57 < 2) {
        goto LABEL_192;
      }
      if (!v153) {
        goto LABEL_206;
      }
      uint64_t v4 = (uint64_t)v17;
      uint64_t v155 = *(void *)&v17[16 * v154 + 32];
      uint64_t v156 = *(void *)&v17[16 * v57 + 24];
      uint64_t v157 = v164;
      sub_10007EEF8( &v153[8 * v155],  &v153[8 * *(void *)&v17[16 * v57 + 16]],  (unint64_t)&v153[8 * v156],  v177,  v184,  v183);
      uint64_t v164 = v157;
      if (v157) {
        goto LABEL_173;
      }
      if (v156 < v155) {
        goto LABEL_193;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
        uint64_t v4 = (uint64_t)sub_10007F3C0((uint64_t)v17);
      }
      if (v154 >= *(void *)(v4 + 16)) {
        goto LABEL_194;
      }
      v158 = (char *)(v4 + 32 + 16 * v154);
      *(void *)v158 = v155;
      *((void *)v158 + 1) = v156;
      unint64_t v159 = *(void *)(v4 + 16);
      if (v57 > v159) {
        goto LABEL_195;
      }
      memmove((void *)(v4 + 32 + 16 * (v57 - 1)), (const void *)(v4 + 32 + 16 * v57), 16 * (v159 - v57));
      *(void *)(v4 + 16) = v159 - 1;
      unint64_t v57 = v159 - 1;
      uint64_t v17 = (char *)v4;
    }

    while (v159 > 2);
  }

  uint64_t v160 = swift_bridgeObjectRelease(v17);
  if (v10 < -1)
  {
    __break(1u);
LABEL_173:
    uint64_t v160 = swift_bridgeObjectRelease(v4);
    if (v10 < -1) {
      goto LABEL_204;
    }
  }

  *(void *)((v196 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
  specialized Array._endMutation()(v160);
  return swift_bridgeObjectRelease(v196);
}

uint64_t sub_10007EEF8( char *a1, char *a2, unint64_t a3, char *a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v52 = a6;
  unint64_t v55 = a5;
  uint64_t v10 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v54 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v53 = (uint64_t)&v48 - v13;
  uint64_t v14 = a2 - a1;
  uint64_t v15 = (a2 - a1) / 8;
  uint64_t v16 = a2;
  uint64_t v17 = a3 - (void)a2;
  if (v15 >= v17 / 8)
  {
    sub_100015888(v16, v17 / 8, a4);
    uint64_t v59 = a4;
    unint64_t v18 = (unint64_t)&a4[8 * (v17 / 8)];
    if (v17 < 8 || a1 >= v16)
    {
      uint64_t v20 = v59;
      goto LABEL_42;
    }

    uint64_t v32 = (char *)(a3 - 8);
    uint64_t v49 = a1;
    while (1)
    {
      unint64_t v56 = v18;
      uint64_t v33 = (char *)(v18 - 8);
      uint64_t v34 = *(void *)(v18 - 8);
      uint64_t v35 = v16;
      uint64_t v36 = *((void *)v16 - 1);
      uint64_t v50 = v16 - 8;
      uint64_t v51 = v32 + 8;
      uint64_t v37 = v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess( v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v58,  0LL,  0LL);
      uint64_t v38 = v53;
      sub_10002F8E0(v37, v53, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v39 = v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess( v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v57,  0LL,  0LL);
      uint64_t v40 = v54;
      sub_10002F8E0(v39, v54, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_retain(v34);
      swift_retain(v36);
      LOBYTE(v39) = v55(v38, v40);
      sub_10002F90C(v40, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_10002F90C(v38, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_release(v34);
      swift_release(v36);
      if ((v39 & 1) != 0)
      {
        BOOL v41 = v51 != v35 || v32 >= v35;
        unint64_t v43 = (unint64_t)v49;
        uint64_t v42 = v50;
        uint64_t v16 = v50;
        uint64_t v44 = v59;
        unint64_t v18 = v56;
        if (!v41) {
          goto LABEL_37;
        }
      }

      else
      {
        BOOL v45 = v51 != (char *)v56 || (unint64_t)v32 >= v56;
        uint64_t v42 = v33;
        unint64_t v18 = (unint64_t)v33;
        uint64_t v44 = v59;
        uint64_t v16 = v35;
        unint64_t v43 = (unint64_t)v49;
        if (!v45) {
          goto LABEL_37;
        }
      }

      *(void *)uint64_t v32 = *(void *)v42;
LABEL_37:
      v32 -= 8;
      if (v18 <= (unint64_t)v44 || (unint64_t)v16 <= v43)
      {
        uint64_t v20 = v59;
        goto LABEL_42;
      }
    }
  }

  sub_100015888(a1, v15, a4);
  unint64_t v18 = (unint64_t)&a4[8 * v15];
  BOOL v19 = v14 < 8 || (unint64_t)v16 >= a3;
  uint64_t v20 = a4;
  if (!v19)
  {
    unint64_t v56 = (unint64_t)&a4[8 * v15];
    uint64_t v51 = (char *)a3;
    uint64_t v21 = v53;
    while (1)
    {
      uint64_t v59 = v20;
      uint64_t v22 = *(void *)v16;
      uint64_t v23 = *(void *)v20;
      uint64_t v24 = *(void *)v16 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess(v24, v58, 0LL, 0LL);
      sub_10002F8E0(v24, v21, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v25 = v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess( v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v57,  0LL,  0LL);
      uint64_t v26 = v54;
      sub_10002F8E0(v25, v54, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_retain(v22);
      swift_retain(v23);
      LOBYTE(v25) = v55(v21, v26);
      sub_10002F90C(v26, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_10002F90C(v21, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_release(v22);
      swift_release(v23);
      if ((v25 & 1) != 0) {
        break;
      }
      uint64_t v27 = v59;
      uint64_t v20 = v59 + 8;
      unint64_t v18 = v56;
      unint64_t v29 = (unint64_t)v51;
      if (a1 != v59) {
        goto LABEL_12;
      }
LABEL_13:
      a1 += 8;
    }

    uint64_t v27 = v16;
    BOOL v28 = a1 == v16;
    v16 += 8;
    unint64_t v18 = v56;
    unint64_t v29 = (unint64_t)v51;
    uint64_t v20 = v59;
    if (v28) {
      goto LABEL_13;
    }
LABEL_12:
    *(void *)a1 = *(void *)v27;
    goto LABEL_13;
  }

char *sub_10007F2D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003B20(&qword_10010DB30);
    uint64_t v11 = (char *)sub_100007460(v10, 16 * v9 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  sub_10000C1E0();
  return v11;
}

char *sub_10007F3C0(uint64_t a1)
{
  return sub_10007F2D4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10007F3D4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1LL;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1LL;
  }
  uint64_t v25 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = 0LL;
  while (!*(void *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      uint64_t v22 = 1LL;
      uint64_t v7 = a1;
      goto LABEL_24;
    }
  }

  unint64_t v6 = (uint64_t *)(v25 + 16 * v5);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, v8, v7);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease(v7);
    goto LABEL_20;
  }

  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = (void *)(v12 + 16 * v11);
  uint64_t v14 = v13[1];
  BOOL v15 = *v13 == v8 && v14 == v7;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v8, v7, 0LL) & 1) == 0)
  {
    uint64_t v16 = ~v10;
    for (unint64_t i = v11 + 1; ; unint64_t i = v18 + 1)
    {
      uint64_t v18 = i & v16;
      BOOL v19 = (void *)(v12 + 16 * v18);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == v8 && v20 == v7;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v8, v7, 0LL) & 1) != 0) {
        goto LABEL_23;
      }
    }

    goto LABEL_19;
  }

uint64_t sub_10007F55C(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - v17;
  unint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = static _HashTable.scale(forCapacity:)(v19);
  if ((a4 & 1) != 0) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = a3;
  }
  if (v21 <= v20) {
    uint64_t v21 = v20;
  }
  if (v21 <= a5) {
    uint64_t v22 = a5;
  }
  else {
    uint64_t v22 = v21;
  }
  if (v22 > 4)
  {
    uint64_t v23 = _HashTable.init(scale:reservedScale:)();
    sub_10008129C(&v53, a2, (void *)(v23 + 16), v23 + 32);
    *a1 = v53;
  }

  else
  {
    if (v19 >= 2)
    {
      uint64_t result = sub_1000B2864();
      uint64_t v25 = result;
      unint64_t v26 = 0LL;
      unint64_t v27 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      unint64_t v46 = v19;
      unint64_t v47 = a2 + v27;
      uint64_t v28 = *(void *)(v11 + 72);
      unint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
      unint64_t v50 = v27;
      uint64_t v51 = v29;
      uint64_t v52 = v28;
      unint64_t v43 = a1;
      uint64_t v44 = v28 + v27;
      uint64_t v30 = v48;
      uint64_t v42 = v11;
      while (1)
      {
        if (v26 == v19) {
          goto LABEL_36;
        }
        v29(v18, v47 + v52 * v26, v10);
        uint64_t v31 = *(void *)(v25 + 16);
        if (v31)
        {
          v29(v16, v25 + v50, v10);
          sub_100048A38( &qword_10010DC10,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
          uint64_t v33 = v32;
          uint64_t v49 = v25;
          swift_bridgeObjectRetain(v25);
          char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v10, v33);
          uint64_t v35 = *(void (**)(char *, uint64_t))(v11 + 8);
          v35(v16, v10);
          if ((v34 & 1) != 0)
          {
            uint64_t v41 = v49;
            swift_bridgeObjectRelease(v49);
LABEL_32:
            v35(v18, v10);
            swift_bridgeObjectRelease(v41);
            uint64_t v23 = 0LL;
            *a1 = v26;
            return v23;
          }

          if (v31 != 1)
          {
            unint64_t v45 = v26;
            uint64_t v36 = v49 + v44;
            uint64_t v37 = 1LL;
            while (1)
            {
              uint64_t result = v51(v16, v36, v10);
              uint64_t v38 = v37 + 1;
              if (__OFADD__(v37, 1LL)) {
                break;
              }
              char v39 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v10, v33);
              v35(v16, v10);
              if ((v39 & 1) != 0)
              {
                uint64_t v41 = v49;
                swift_bridgeObjectRelease(v49);
                a1 = v43;
                unint64_t v26 = v45;
                goto LABEL_32;
              }

              ++v37;
              v36 += v52;
              if (v38 == v31)
              {
                uint64_t v25 = v49;
                swift_bridgeObjectRelease(v49);
                uint64_t v11 = v42;
                a1 = v43;
                uint64_t v30 = v48;
                unint64_t v26 = v45;
                goto LABEL_24;
              }
            }

            __break(1u);
LABEL_36:
            __break(1u);
            return result;
          }

          uint64_t v25 = v49;
          swift_bridgeObjectRelease(v49);
          uint64_t v30 = v48;
LABEL_24:
          unint64_t v29 = v51;
        }

        v29(v30, (uint64_t)v18, v10);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0) {
          uint64_t v25 = sub_1000B2864();
        }
        unint64_t v40 = *(void *)(v25 + 16);
        if (v40 >= *(void *)(v25 + 24) >> 1) {
          uint64_t v25 = sub_1000B2864();
        }
        ++v26;
        *(void *)(v25 + 16) = v40 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v25 + v50 + v40 * v52, v30, v10);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v10);
        unint64_t v19 = v46;
        unint64_t v29 = v51;
        if (v26 == v46)
        {
          swift_bridgeObjectRelease(v25);
          break;
        }
      }
    }

    uint64_t v23 = 0LL;
    *a1 = v19;
  }

  return v23;
}

void sub_10007F92C(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = static _HashTable.scale(forCapacity:)(v10);
  if ((a4 & 1) != 0) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = a3;
  }
  if (v12 <= v11) {
    uint64_t v12 = v11;
  }
  if (v12 <= a5) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 4)
  {
    uint64_t v14 = _HashTable.init(scale:reservedScale:)();
    sub_1000814A8(&v44, a2, (void *)(v14 + 16), v14 + 32);
    *a1 = v44;
    return;
  }

  if (v10 < 2)
  {
LABEL_11:
    *a1 = v10;
    return;
  }

  sub_1000B2880(0, v10, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = v15;
  unint64_t v17 = 0LL;
  unint64_t v40 = a1;
  uint64_t v41 = a2 + 32;
  unint64_t v39 = v10;
  while (v17 != v10)
  {
    unint64_t v42 = v17;
    uint64_t v43 = v16;
    uint64_t v18 = v41 + 40 * v17;
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    int v23 = *(unsigned __int8 *)(v18 + 32);
    uint64_t v24 = *(void *)(v16 + 16);
    if (v24)
    {
      uint64_t v25 = (unsigned __int8 *)(v16 + 64);
      while (1)
      {
        uint64_t v26 = *((void *)v25 - 4);
        uint64_t v27 = *((void *)v25 - 3);
        uint64_t v29 = *((void *)v25 - 2);
        uint64_t v28 = *((void *)v25 - 1);
        int v30 = *v25;
        BOOL v31 = v26 == v20 && v27 == v19;
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v20, v19, 0LL) & 1) == 0) {
          goto LABEL_34;
        }
        if (!v28) {
          break;
        }
        if (!v21) {
          goto LABEL_34;
        }
        if (v29 != v22 || v28 != v21)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, v22, v21, 0LL) & 1) == 0) {
            goto LABEL_34;
          }
LABEL_31:
          if (((v23 ^ v30) & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_34;
        }

        if (v23 == v30)
        {
LABEL_41:
          swift_bridgeObjectRelease(v43);
          *unint64_t v40 = v42;
          return;
        }

void sub_10007FBA4(void *a1, unint64_t a2, unint64_t a3, char a4, unint64_t *a5)
{
  LOBYTE(v6) = a4;
  int64_t v8 = a2;
  uint64_t v9 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_66:
    if (v8 < 0) {
      uint64_t v32 = v8;
    }
    else {
      uint64_t v32 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v11 = static _HashTable.scale(forCapacity:)(v10);
  if ((v6 & 1) != 0) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = a3;
  }
  if (v12 <= v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 4)
  {
    uint64_t v15 = _HashTable.init(scale:reservedScale:)();
    sub_1000816F0((uint64_t *)&v39, v8, (void *)(v15 + 16), v15 + 32);
    *a1 = v39;
    return;
  }

  if (v10 >= 2)
  {
    unint64_t v39 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v16 = sub_10008198C(v10, 0);
    a5 = &v39;
    specialized Array._endMutation()(v16);
    if (v9)
    {
      if (v8 < 0) {
        a5 = (unint64_t *)v8;
      }
      else {
        a5 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFF8LL);
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(a5);
      swift_bridgeObjectRelease(v8);
      if (v9 < 0)
      {
LABEL_71:
        __break(1u);
        return;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (!v9)
    {
LABEL_62:
      swift_bridgeObjectRelease(v39);
      *a1 = v9;
      return;
    }

    a3 = 0LL;
    int64_t v36 = v8;
    unint64_t v37 = v8 & 0xC000000000000001LL;
    int64_t v33 = v8 + 32;
    uint64_t v34 = v8 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v35 = v9;
    while (1)
    {
      if (a3 == v9) {
        goto LABEL_65;
      }
      if (v37)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v8);
      }

      else
      {
        if (a3 >= *(void *)(v34 + 16))
        {
          __break(1u);
          goto LABEL_71;
        }

        uint64_t v6 = *(void *)(v33 + 8 * a3);
        swift_retain();
      }

      unint64_t v18 = v39;
      if (v39 >> 62)
      {
        if ((v39 & 0x8000000000000000LL) != 0LL) {
          uint64_t v31 = v39;
        }
        else {
          uint64_t v31 = v39 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain_n(v39, 2LL);
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v31);
        swift_bridgeObjectRelease(v18);
        if (!v19) {
          goto LABEL_52;
        }
      }

      else
      {
        uint64_t v19 = *(void *)((v39 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v39);
        if (!v19) {
          goto LABEL_52;
        }
      }

      uint64_t v9 = v18 & 0xC000000000000001LL;
      if ((v18 & 0xC000000000000001LL) != 0)
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v18);
      }

      else
      {
        uint64_t v20 = *(void *)(v18 + 32);
        swift_retain();
      }

      a5 = (unint64_t *)type metadata accessor for InferenceProviderAsset(0LL);
      char v21 = sub_100091114();
      swift_release(v20);
      if ((v21 & 1) != 0)
      {
LABEL_63:
        swift_release(v6);
        swift_bridgeObjectRelease_n(v18, 2LL);
        *a1 = a3;
        return;
      }

      if (v19 != 1)
      {
        if (v9)
        {
          uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v18);
        }

        else
        {
          uint64_t v22 = *(void *)(v18 + 40);
          swift_retain();
        }

        char v23 = sub_100091114();
        swift_release(v22);
        if ((v23 & 1) != 0) {
          goto LABEL_63;
        }
        if (v19 != 2)
        {
          uint64_t v24 = 6LL;
          while (1)
          {
            if (v9)
            {
              uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v18);
            }

            else
            {
              uint64_t v25 = *(void *)(v18 + 8 * v24);
              swift_retain();
            }

            int64_t v8 = v24 - 3;
            if (__OFADD__(v24 - 4, 1LL)) {
              break;
            }
            char v26 = sub_100091114();
            swift_release(v25);
            if ((v26 & 1) != 0) {
              goto LABEL_63;
            }
            ++v24;
            if (v8 == v19) {
              goto LABEL_52;
            }
          }

          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
      }

LABEL_52:
      swift_bridgeObjectRelease(v18);
      uint64_t v27 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      unint64_t v29 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v28 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v29 >= v28 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1LL);
      }
      ++a3;
      uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v6);
      a5 = &v39;
      specialized Array._endMutation()(v30);
      swift_release(v6);
      uint64_t v9 = v35;
      int64_t v8 = v36;
      if (a3 == v35) {
        goto LABEL_62;
      }
    }
  }

  if (v9)
  {
    if (v8 < 0) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  *a1 = v14;
}

void *sub_10007FFB4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v11 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v12 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v13 = (void *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    sub_100086024();
    uint64_t v13 = _swiftEmptyArrayStorage;
  }

  uint64_t v14 = v13[2];
  uint64_t v15 = swift_release(v13);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v15 = a1;
  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    uint64_t v9 = sub_1000858F8();
    uint64_t v10 = (void *)a5(v9);
    goto LABEL_9;
  }

  uint64_t v10 = (void *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    sub_100086024();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

LABEL_9:
  sub_100086024();
  return v10;
}

void sub_100080094(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return;
  }
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  int64_t v8 = v4 + 1;
  swift_unknownObjectRetain(a1);
  while (v7 < v5)
  {
    uint64_t v9 = *(void *)(a2 + 8 * v7);
    uint64_t v10 = *v6;
    uint64_t v11 = (void *)v6[1];
    uint64_t v12 = v11[2];
    if (*v6)
    {
      swift_retain();
      swift_retain();
      sub_1000CC9A0(v9, (uint64_t)(v11 + 4), v12, (void *)(v10 + 16), v10 + 32, v13, v14, v15);
      char v17 = v16;
      uint64_t v12 = v18;
      swift_release(v10);
      if ((v17 & 1) == 0) {
        goto LABEL_35;
      }
    }

    else if (v12)
    {
      type metadata accessor for InferenceProviderAsset(0LL);
      uint64_t v19 = v11[4];
      swift_retain();
      swift_retain();
      char v20 = sub_100091114();
      swift_release(v19);
      if ((v20 & 1) != 0) {
        goto LABEL_35;
      }
      if (v12 != 1)
      {
        uint64_t v21 = v11[5];
        swift_retain();
        char v22 = sub_100091114();
        swift_release(v21);
        if ((v22 & 1) != 0) {
          goto LABEL_35;
        }
        if (v12 != 2)
        {
          uint64_t v23 = v11[6];
          swift_retain();
          char v24 = sub_100091114();
          swift_release(v23);
          if ((v24 & 1) != 0) {
            goto LABEL_35;
          }
          if (v12 != 3)
          {
            uint64_t v40 = v11[7];
            swift_retain();
            char v41 = sub_100091114();
            swift_release(v40);
            if ((v41 & 1) != 0) {
              goto LABEL_35;
            }
            uint64_t v42 = v12 - 4;
            uint64_t v43 = v11 + 8;
            while (v42)
            {
              uint64_t v44 = *v43++;
              swift_retain();
              char v45 = sub_100091114();
              swift_release(v44);
              --v42;
              if ((v45 & 1) != 0) {
                goto LABEL_35;
              }
            }
          }
        }
      }

      uint64_t v12 = 0LL;
    }

    else
    {
      swift_retain();
    }

    uint64_t v25 = swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
    uint64_t v26 = *(void *)(v6[1] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
    uint64_t v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v9);
    specialized ContiguousArray._endMutation()(v27);
    uint64_t v29 = *v6;
    uint64_t v28 = v6[1];
    unint64_t v30 = *(void *)(v28 + 16);
    if (*v6)
    {
      swift_beginAccess(v29 + 16, v48, 0LL, 0LL);
      if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v29 + 16) & 0x3FLL) >= (uint64_t)v30)
      {
        int isUniquelyReferenced_native = swift_isUniquelyReferenced_native(*v6);
        uint64_t v38 = *v6;
        if (!isUniquelyReferenced_native)
        {
          if (!v38) {
            goto LABEL_45;
          }
          uint64_t v38 = _HashTable.copy()(*v6);
          swift_release(*v6);
          *uint64_t v6 = v38;
        }

        if (!v38) {
          goto LABEL_44;
        }
        uint64_t v39 = *(void *)(*v8 + 16LL) + ~(*(uint64_t *)(v38 + 24) >> 6);
        _HashTable.UnsafeHandle.subscript.setter( (-1LL << *(void *)(v38 + 16)) ^ ~(((v39 >> 63) & ~(-1LL << *(void *)(v38 + 16))) + v39),  v12,  v38 + 16,  v38 + 32);
      }

      else
      {
        uint64_t v31 = *(void *)(v29 + 24) & 0x3FLL;
        if (v30 > 0xF || v31 != 0) {
          goto LABEL_26;
        }
        swift_release(v29);
        *uint64_t v6 = 0LL;
      }
    }

    else if (v30 > 0xF)
    {
      uint64_t v31 = 0LL;
LABEL_26:
      uint64_t v33 = static _HashTable.scale(forCapacity:)(v30);
      if (v31 <= v33) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = v31;
      }
      sub_1000CCC48(v28, v34, 0, v31);
      uint64_t v36 = v35;
      swift_release(*v6);
      *uint64_t v6 = v36;
    }

uint64_t sub_1000803C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v7 = 0LL;
    static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)((unint64_t)(v5 + 63) >> 6, sub_10008210C);
    __break(1u);
    uint64_t result = sub_100082128(0LL, v7);
    __break(1u);
  }

  else
  {
    swift_release(a3);
    swift_release(a2);
    return 0LL;
  }

  return result;
}

uint64_t sub_100080504(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  Swift::UInt v59 = a3[2];
  _UnsafeBitSet.insertAll(upTo:)(v59);
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a4);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    a4 = v60[1];
    uint64_t v54 = v60[2];
    uint64_t v12 = v60[3];
    int64_t v13 = v60[4];
    unint64_t v14 = v60[5];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a4 + 32);
    uint64_t v54 = a4 + 56;
    uint64_t v12 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v14 = v17 & *(void *)(a4 + 56);
    uint64_t v11 = swift_bridgeObjectRetain(a4);
    int64_t v13 = 0LL;
  }

  int64_t v53 = (unint64_t)(v12 + 64) >> 6;
  unint64_t v56 = (void *)(a2 + 16);
  unint64_t v57 = a3 + 4;
  uint64_t v58 = a2;
  uint64_t v55 = a2 + 32;
  uint64_t v50 = v59;
  while (1)
  {
    int64_t v18 = v13;
    if (a4 < 0)
    {
      uint64_t v22 = __CocoaSet.Iterator.next()(v11);
      if (!v22)
      {
        uint64_t v21 = v58;
LABEL_59:
        sub_1000212AC(a4);
        uint64_t v45 = *a1;
        uint64_t v46 = a1[1];
        uint64_t v47 = sub_100080ADC();
        swift_retain();
        swift_retain();
        *(void *)&__int128 v62 = v45;
        *((void *)&v62 + 1) = v46;
        return sub_100080AE4(v62, v50, 0, v47, v21, (uint64_t)a3);
      }

      uint64_t v23 = v22;
      v60[0] = v22;
      uint64_t v24 = type metadata accessor for InferenceProviderAsset(0LL);
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v61, v60, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
      uint64_t v4 = v61;
      swift_unknownObjectRelease(v23);
      uint64_t v21 = v58;
      if (!v4) {
        goto LABEL_59;
      }
    }

    else
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v13 << 6);
        uint64_t v21 = v58;
      }

      else
      {
        int64_t v25 = v13 + 1;
        uint64_t v21 = v58;
        if (__OFADD__(v13, 1LL))
        {
          __break(1u);
          goto LABEL_63;
        }

        if (v25 >= v53) {
          goto LABEL_59;
        }
        unint64_t v26 = *(void *)(v54 + 8 * v25);
        ++v13;
        if (!v26)
        {
          int64_t v13 = v18 + 2;
          if (v18 + 2 >= v53) {
            goto LABEL_59;
          }
          unint64_t v26 = *(void *)(v54 + 8 * v13);
          if (!v26)
          {
            int64_t v13 = v18 + 3;
            if (v18 + 3 >= v53) {
              goto LABEL_59;
            }
            unint64_t v26 = *(void *)(v54 + 8 * v13);
            if (!v26)
            {
              int64_t v13 = v18 + 4;
              if (v18 + 4 >= v53) {
                goto LABEL_59;
              }
              unint64_t v26 = *(void *)(v54 + 8 * v13);
              if (!v26)
              {
                int64_t v13 = v18 + 5;
                if (v18 + 5 >= v53) {
                  goto LABEL_59;
                }
                unint64_t v26 = *(void *)(v54 + 8 * v13);
                if (!v26)
                {
                  int64_t v27 = v18 + 6;
                  while (v27 < v53)
                  {
                    unint64_t v26 = *(void *)(v54 + 8 * v27++);
                    if (v26)
                    {
                      int64_t v13 = v27 - 1;
                      goto LABEL_32;
                    }
                  }

                  goto LABEL_59;
                }
              }
            }
          }
        }

void *sub_100080A88(uint64_t a1, uint64_t *a2, void *(*a3)(void *__return_ptr))
{
  uint64_t result = a3(v8);
  if (!v3)
  {
    uint64_t v6 = v8[0];
    uint64_t v7 = v8[1];
    uint64_t result = (void *)sub_100082128(*a2, a2[1]);
    *a2 = v6;
    a2[1] = v7;
  }

  return result;
}

uint64_t sub_100080ADC()
{
  return 0LL;
}

uint64_t sub_100080AE4(__int128 a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v10 = *((void *)&a1 + 1);
  uint64_t v11 = (uint64_t *)a1;
  if ((a3 & 1) != 0)
  {
    if ((void)a1 && *((void *)&a1 + 1))
    {
      a2 = 0LL;
      uint64_t v12 = 8LL * *((void *)&a1 + 1);
      int64_t v13 = (int8x8_t *)a1;
      while (1)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8(*v13);
        v14.i16[0] = vaddlv_u8(v14);
        BOOL v15 = __OFADD__(a2, v14.u32[0]);
        a2 += v14.u32[0];
        if (v15) {
          break;
        }
        ++v13;
        v12 -= 8LL;
        if (!v12) {
          goto LABEL_7;
        }
      }

      __break(1u);
      goto LABEL_29;
    }

    goto LABEL_11;
  }

LABEL_7:
  if (!a2)
  {
LABEL_11:
    uint64_t v16 = sub_100080CC8(a4, 0);
    swift_release(a6);
    swift_release(v7);
    uint64_t v7 = v16;
    goto LABEL_27;
  }

  if (a2 == *(void *)(a6 + 16))
  {
    if (a5)
    {
      swift_beginAccess(a5 + 16, v23, 0LL, 0LL);
      *(void *)&a1 = static _HashTable.maximumCapacity(forScale:)(*(void *)(v7 + 16) & 0x3FLL);
    }

    else
    {
      *(void *)&a1 = 15LL;
    }

    if (__OFSUB__((void)a1, a2)) {
      goto LABEL_32;
    }
    if ((uint64_t)a1 - a2 < a4)
    {
      uint64_t v24 = v7;
      uint64_t v25 = a6;
      *(void *)&a1 = a2 + a4;
      if (__OFADD__(a2, a4))
      {
LABEL_33:
        __break(1u);
        return a1;
      }

      sub_100080FC8(a1, 0);
      uint64_t v7 = v24;
    }
  }

  else
  {
    *(void *)&a1 = a2 + a4;
    if (__OFADD__(a2, a4))
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    uint64_t v17 = sub_100080CC8(a1, 0);
    uint64_t v24 = v17;
    uint64_t v25 = v18;
    if (v10 <= 0) {
      uint64_t v19 = 0LL;
    }
    else {
      uint64_t v19 = *v11;
    }
    v23[0] = v11;
    v23[1] = v10;
    v23[2] = 0LL;
    v23[3] = v19;
    *(Swift::UInt_optional *)&a1 = _UnsafeBitSet.Iterator.next()();
    if ((BYTE8(a1) & 1) == 0)
    {
      while ((a1 & 0x8000000000000000LL) == 0)
      {
        uint64_t v20 = *(void *)(a6 + 32 + 8 * a1);
        uint64_t v21 = swift_retain();
        sub_100080EA4(v21);
        swift_release(v20);
        *(Swift::UInt_optional *)&a1 = _UnsafeBitSet.Iterator.next()();
        if ((BYTE8(a1) & 1) != 0)
        {
          uint64_t v17 = v24;
          goto LABEL_26;
        }
      }

      sub_1000B4398();
      if (v18) {
        goto LABEL_21;
      }
      if (v3 < 0 || v3 >= v17) {
        break;
      }
      sub_1000B4384();
      if ((v19 & 1) == 0) {
        goto LABEL_33;
      }
      uint64_t v20 = sub_1000B40D0();
      sub_1000B3FC8(v20);
      sub_1000B4060();
      uint64_t v4 = &qword_10010ED00;
      sub_1000B41D0();
      sub_100083500();
      sub_10002F99C(v2, &qword_10010ECF0);
      sub_1000B4124();
      sub_1000B43C8();
      if (!v18)
      {
        sub_1000B4254();
        uint64_t v39 = swift_task_alloc(async function pointer to Task.value.getter[1]);
        sub_1000B429C(v39);
        sub_100003B20(&qword_10010B468);
        qword_10010ED00 = (uint64_t)v0;
        unk_10010ED08 = sub_1000ABC84;
        sub_1000B458C();
        return sub_1000B3FF0();
      }

uint64_t sub_100080CC8(uint64_t a1, char a2)
{
  return 0LL;
}

void sub_100080D20(uint64_t a1)
{
  uint64_t v2 = v1;
  __int128 v18 = *(_OWORD *)a1;
  sub_10004DFFC(a1 + 16, (uint64_t)v17, &qword_10010DC20);
  uint64_t v6 = v1[1];
  uint64_t v4 = v1 + 1;
  uint64_t v5 = v6;
  sub_100082A94((uint64_t)&v18);
  sub_100082A94((uint64_t)v17);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  uint64_t *v4 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100016C44(0LL, *(void *)(v5 + 16) + 1LL, 1);
    uint64_t v5 = *v4;
  }

  unint64_t v9 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v5 + 24);
  if (v9 >= v8 >> 1)
  {
    sub_100016C44((char *)(v8 > 1), v9 + 1, 1);
    uint64_t v5 = *v4;
  }

  *(void *)(v5 + 16) = v9 + 1;
  uint64_t v10 = v5 + 40 * v9;
  __int128 v11 = *(_OWORD *)a1;
  __int128 v12 = *(_OWORD *)(a1 + 16);
  *(_BYTE *)(v10 + 64) = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v12;
  v2[1] = v5;
  unint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *v2;
  if (*v2)
  {
    sub_10002FFE4(v14 + 16, (uint64_t)v16);
    if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v14 + 16) & 0x3FLL) < (uint64_t)v13)
    {
      if (v13 <= 0xF && (*(void *)(v14 + 24) & 0x3FLL) == 0)
      {
        sub_10000C1F0();
        *uint64_t v2 = 0LL;
        return;
      }

      goto LABEL_11;
    }

    sub_1000CCA84();
    uint64_t v15 = *v2;
    if (*v2)
    {
      sub_10000C030();
      sub_100081104((void *)(v15 + 16), v15 + 32, a1, (uint64_t)v2);
      sub_100021E70();
    }

    else
    {
      __break(1u);
    }
  }

  else if (v13 > 0xF)
  {
LABEL_11:
    static _HashTable.scale(forCapacity:)(v13);
    sub_1000CCAC4();
  }

void sub_100080EA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  uint64_t v5 = *(void *)(v1[1] + 16);
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
  uint64_t v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, a1);
  specialized ContiguousArray._endMutation()(v6);
  uint64_t v7 = *v1;
  unint64_t v8 = *(void *)(v1[1] + 16);
  if (*v2)
  {
    swift_beginAccess(v7 + 16, v11, 0LL, 0LL);
    if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v7 + 16) & 0x3FLL) < (uint64_t)v8)
    {
      if (v8 <= 0xF && (*(void *)(v7 + 24) & 0x3FLL) == 0)
      {
        swift_release(v7);
        *uint64_t v2 = 0LL;
        return;
      }

      goto LABEL_10;
    }

    sub_1000CCA84();
    uint64_t v10 = *v2;
    if (*v2)
    {
      swift_retain();
      sub_1000811D0((void *)(v10 + 16), v10 + 32, a1, (uint64_t)v2);
      swift_release(v10);
    }

    else
    {
      __break(1u);
    }
  }

  else if (v8 > 0xF)
  {
LABEL_10:
    static _HashTable.scale(forCapacity:)(v8);
    sub_1000CCAFC();
  }

void sub_100080FC8(uint64_t a1, char a2)
{
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v3 = v2;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  if (*v2)
  {
    swift_beginAccess(v7 + 16, v14, 0LL, 0LL);
    uint64_t v8 = *(void *)(v7 + 16) & 0x3FLL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = static _HashTable.scale(forCapacity:)(a1);
  uint64_t v10 = v9;
  if ((a2 & 1) != 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if (v7 && (a2 & 1) == 0)
  {
    swift_beginAccess(v7 + 16, v15, 0LL, 0LL);
    uint64_t v11 = *(void *)(v7 + 24) & 0x3FLL;
  }

  if (v8 < v10) {
    goto LABEL_17;
  }
  if (v11 > v10) {
    uint64_t v10 = v11;
  }
  uint64_t v12 = static _HashTable.scale(forCapacity:)(*(void *)(v6 + 16));
  if (v12 <= v10) {
    uint64_t v12 = v10;
  }
  if (v12 < v8)
  {
LABEL_17:
    sub_1000CCAFC();
    return;
  }

  sub_1000CCA84();
  uint64_t v13 = *v3;
  if (!v13)
  {
    if (!v11) {
      return;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }

  swift_beginAccess(v13 + 16, v16, 1LL, 0LL);
  if ((*(void *)(v13 + 24) & 0x3FLL) != v11) {
    *(void *)(v13 + 24) = *(void *)(v13 + 24) & 0xFFFFFFFFFFFFFFC0LL | v11 & 0x3F;
  }
}

Swift::Int sub_100081104(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int result = Hasher._finalize()();
  uint64_t v8 = 1LL << *a1;
  BOOL v9 = __OFSUB__(v8, 1LL);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    Swift::Int v11 = v10 & result;
    uint64_t v12 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & result, a1, a2);
    v15[0] = a1;
    v15[1] = a2;
    v15[2] = v11;
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    char v19 = 0;
    while (v16)
      _HashTable.BucketIterator.advance()();
    return _HashTable.BucketIterator.currentValue.setter(*(void *)(*(void *)(a4 + 8) + 16LL) - 1LL, 0LL);
  }

  return result;
}

Swift::Int sub_1000811D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int result = Hasher._finalize()();
  uint64_t v8 = 1LL << *a1;
  BOOL v9 = __OFSUB__(v8, 1LL);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    Swift::Int v11 = v10 & result;
    uint64_t v12 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & result, a1, a2);
    v15[0] = a1;
    v15[1] = a2;
    v15[2] = v11;
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    char v19 = 0;
    while (v16)
      _HashTable.BucketIterator.advance()();
    return _HashTable.BucketIterator.currentValue.setter(*(void *)(*(void *)(a4 + 8) + 16LL) - 1LL, 0LL);
  }

  return result;
}

unint64_t sub_10008129C(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v35 = a4;
  Swift::UInt v31 = a1;
  unint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_10:
    *Swift::UInt v31 = v4;
    return 1LL;
  }

  uint64_t v7 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = *(void *)(v8 + 72);
  sub_100048A38( &qword_10010DC18,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
  uint64_t v34 = v11;
  unint64_t v12 = 0LL;
  Swift::UInt v32 = a3;
  uint64_t v33 = v10;
  while (2)
  {
    unint64_t v36 = v12;
    uint64_t v13 = v9 + v10 * v12;
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(*a3, v7, v34);
    uint64_t v15 = 1LL << *a3;
    BOOL v16 = __OFSUB__(v15, 1LL);
    uint64_t v17 = v15 - 1;
    if (!v16)
    {
      unint64_t v18 = v17 & result;
      uint64_t v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & result, a3, v35);
      *(void *)&__int128 v37 = a3;
      *((void *)&v37 + 1) = v35;
      uint64_t v10 = v33;
      unint64_t v38 = v18;
      uint64_t v39 = v19;
      uint64_t v40 = v20;
      uint64_t v41 = v21;
      LOBYTE(v42) = 0;
      for (__int128 i = v37; ; __int128 i = v37)
      {
        unint64_t result = _HashTable.BucketIterator.currentValue.getter( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  *((void *)&v37 + 1),  v38,  v39,  v40,  v41,  v42,  i,  *((void *)&i + 1));
        if ((v27 & 1) != 0) {
          break;
        }
        if (result >= v4)
        {
          __break(1u);
          goto LABEL_14;
        }

        uint64_t v28 = v9 + result * v10;
        sub_100048A38( &qword_10010DC10,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v28, v13, v7, v29) & 1) != 0)
        {
          unint64_t result = 0LL;
          *Swift::UInt v31 = v36;
          return result;
        }

        _HashTable.BucketIterator.advance()();
      }

      _HashTable.BucketIterator.currentValue.setter(v36, 0LL);
      unint64_t v12 = v36 + 1;
      a3 = v32;
      if (v36 + 1 != v4) {
        continue;
      }
      goto LABEL_10;
    }

    break;
  }

unint64_t sub_1000814A8(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v56 = a4;
  int64_t v53 = a1;
  unint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_25:
    *int64_t v53 = v4;
    return 1LL;
  }

  uint64_t v5 = a3;
  unint64_t v6 = 0LL;
  uint64_t v7 = a2 + 32;
  uint64_t v54 = a3;
  unint64_t v55 = *(void *)(a2 + 16);
  while (1)
  {
    uint64_t v8 = (uint64_t *)(v7 + 40 * v6);
    uint64_t v9 = v8[1];
    uint64_t v10 = v8[2];
    uint64_t v11 = v8[3];
    char v12 = *((_BYTE *)v8 + 32);
    uint64_t v76 = *v8;
    uint64_t v77 = v9;
    uint64_t v78 = v10;
    uint64_t v79 = v11;
    char v80 = v12;
    Hasher.init(_seed:)(&v59, *v5);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v9);
    AssetInferenceProvider.hash(into:)((uint64_t)&v59);
    unint64_t result = Hasher._finalize()();
    uint64_t v14 = 1LL << *v5;
    BOOL v15 = __OFSUB__(v14, 1LL);
    uint64_t v16 = v14 - 1;
    if (v15) {
      goto LABEL_29;
    }
    unint64_t v57 = v6;
    unint64_t v17 = v16 & result;
    uint64_t v18 = _HashTable.UnsafeHandle._startIterator(bucket:)(v16 & result, v5, v56);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v11);
    uint64_t v23 = swift_bridgeObjectRelease(v9);
    *(void *)&__int128 v68 = v5;
    *((void *)&v68 + 1) = v56;
    unint64_t v4 = v55;
    *(void *)&__int128 v69 = v17;
    *((void *)&v69 + 1) = v18;
    *(void *)&__int128 v70 = v20;
    *((void *)&v70 + 1) = v22;
    char v71 = 0;
    char v75 = 0;
    __int128 v72 = v68;
    __int128 v73 = v69;
    __int128 v74 = v70;
    unint64_t result = _HashTable.BucketIterator.currentValue.getter( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v52,  v53,  v54,  v55,  v56,  v57,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v5);
    if ((v31 & 1) == 0) {
      break;
    }
LABEL_24:
    _HashTable.BucketIterator.currentValue.setter(v58, 0LL);
    unint64_t v6 = v58 + 1;
    uint64_t v5 = v54;
    if (v58 + 1 == v4) {
      goto LABEL_25;
    }
  }

  while (result < v4)
  {
    uint64_t v32 = v7 + 40 * result;
    uint64_t v33 = *(void *)(v32 + 8);
    uint64_t v35 = *(void *)(v32 + 16);
    uint64_t v34 = *(void *)(v32 + 24);
    int v36 = *(unsigned __int8 *)(v32 + 32);
    uint64_t v37 = v8[1];
    uint64_t v39 = v8[2];
    uint64_t v38 = v8[3];
    int v40 = *((unsigned __int8 *)v8 + 32);
    BOOL v41 = *(void *)v32 == *v8 && v33 == v37;
    if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v32, v33, *v8, v37, 0LL) & 1) == 0) {
      goto LABEL_23;
    }
    if (!v34)
    {
      if (v38) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }

    if (!v38) {
      goto LABEL_23;
    }
    if (v35 != v39 || v34 != v38)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v35, v34, v39, v38, 0LL) & 1) == 0) {
        goto LABEL_23;
      }
LABEL_20:
      if (((v36 ^ v40) & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }

    if (v36 == v40)
    {
LABEL_26:
      unint64_t result = 0LL;
      *int64_t v53 = v58;
      return result;
    }

uint64_t sub_1000816F0(uint64_t *a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v44 = a4;
  uint64_t v5 = a2;
  BOOL v41 = a1;
  if (a2 >> 62) {
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  do
  {
    if (!v6) {
      goto LABEL_20;
    }
    uint64_t v7 = 0LL;
    unint64_t v8 = v5 & 0xC000000000000001LL;
    uint64_t v45 = v5 + 32;
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v42 = v6;
    uint64_t v43 = a3;
    while (2)
    {
      if (v7 == v6)
      {
LABEL_24:
        __break(1u);
      }

      else
      {
        sub_1000CAB3C(v7, v8 == 0);
        if (v8)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        }

        else
        {
          uint64_t v10 = *(void *)(v45 + 8 * v7);
          swift_retain();
        }

        Hasher.init(_seed:)(v46, *a3);
        sub_100091270((uint64_t)v46);
        Swift::Int v11 = Hasher._finalize()();
        uint64_t v12 = 1LL << *a3;
        BOOL v13 = __OFSUB__(v12, 1LL);
        uint64_t v14 = v12 - 1;
        if (!v13)
        {
          Swift::Int v15 = v14 & v11;
          uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & v11, a3, v44);
          uint64_t v17 = v10;
          uint64_t v18 = v5;
          uint64_t v19 = v9;
          uint64_t v21 = v20;
          unint64_t v22 = v8;
          uint64_t v24 = v23;
          swift_release(v17);
          *(void *)&__int128 v47 = a3;
          *((void *)&v47 + 1) = v44;
          *(void *)&__int128 v48 = v15;
          *((void *)&v48 + 1) = v16;
          *(void *)&__int128 v49 = v21;
          *((void *)&v49 + 1) = v24;
          uint64_t v9 = v19;
          uint64_t v5 = v18;
          unint64_t v8 = v22;
          char v50 = 0;
          char v54 = 0;
          __int128 v51 = v47;
          __int128 v52 = v48;
          __int128 v53 = v49;
          while (1)
          {
            unint64_t v33 = _HashTable.BucketIterator.currentValue.getter( v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v40,  v41,  v42,  v43,  v44,  v45,  v46[0],  v46[1],  v46[2],  v46[3],  v46[4],  v46[5],  v46[6],  v46[7],  v46[8],  v47);
            if ((v34 & 1) != 0) {
              break;
            }
            if (v8)
            {
              uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v18);
              uint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v18);
            }

            else
            {
              if ((v33 & 0x8000000000000000LL) != 0)
              {
                __break(1u);
LABEL_23:
                __break(1u);
                goto LABEL_24;
              }

              if (v33 >= *(void *)(v9 + 16)) {
                goto LABEL_23;
              }
              uint64_t v35 = *(void *)(v45 + 8 * v33);
              uint64_t v36 = *(void *)(v45 + 8 * v7);
              swift_retain();
              swift_retain();
            }

            type metadata accessor for InferenceProviderAsset(0LL);
            char v37 = sub_100091114();
            swift_release(v35);
            swift_release(v36);
            if ((v37 & 1) != 0)
            {
              uint64_t result = 0LL;
              *BOOL v41 = v7;
              return result;
            }

            _HashTable.BucketIterator.advance()();
            __int128 v51 = v47;
            __int128 v52 = v48;
            __int128 v53 = v49;
            char v54 = v50;
          }

          _HashTable.BucketIterator.currentValue.setter(v7++, 0LL);
          uint64_t v6 = v42;
          a3 = v43;
          if (v7 != v42) {
            continue;
          }
LABEL_20:
          *BOOL v41 = v6;
          return 1LL;
        }
      }

      break;
    }

    __break(1u);
LABEL_26:
    if (v5 < 0) {
      uint64_t v39 = v5;
    }
    else {
      uint64_t v39 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v39);
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  while ((v6 & 0x8000000000000000LL) == 0);
  __break(1u);
  return result;
}

uint64_t sub_10008198C(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *uint64_t v2 = result;
  return result;
}

uint64_t sub_100081A4C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DA04);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t *)sub_1000847D4(v1, (uint64_t)sub_10000BCBC);
  return sub_10006C950(v2, v3, v4);
}

uint64_t sub_100081A9C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  Swift::Int v11 = (void *)swift_task_alloc(dword_10010DA54);
  *(void *)(v5 + 16) = v11;
  *Swift::Int v11 = v5;
  v11[1] = sub_10000B5F8;
  return sub_10005210C(a1, a2, v10, a4, a5);
}

uint64_t sub_100081B1C()
{
  uint64_t v0 = sub_100085434();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10008317C(v1);
  return sub_1000832E0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100081B60()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DA24);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t *)sub_1000847D4(v1, (uint64_t)sub_10000BCBC);
  return sub_10006CC54(v2, v3, v4);
}

uint64_t sub_100081BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100081BF4()
{
  unint64_t result = qword_10010DA38;
  if (!qword_10010DA38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D9D64, &type metadata for InferenceProviderAssetManagerInternalError);
    atomic_store(result, (unint64_t *)&qword_10010DA38);
  }

  return result;
}

uint64_t sub_100081C30(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  BOOL v13 = (void *)swift_task_alloc(dword_10010DA74);
  *(void *)(v6 + 16) = v13;
  *BOOL v13 = v6;
  v13[1] = sub_10000BCBC;
  return sub_10005260C(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_100081CB8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100081CE8()
{
  uint64_t v1 = swift_task_alloc(dword_10010DA64);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  uint64_t v3 = sub_100084F88();
  return v4(v3);
}

uint64_t sub_100081D58()
{
  uint64_t v1 = *(void *)(sub_1000837B4() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  uint64_t v5 = *(void *)(v1 + 64) + v3 + 1;
  sub_100085798();
  sub_100086050();
  sub_100030250(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_1000223CC(v0, v5, v4);
}

uint64_t sub_100081DBC()
{
  uint64_t v2 = sub_1000837B4();
  char v3 = *(_BYTE *)(v0
  uint64_t v4 = (void *)swift_task_alloc(dword_10010DA8C);
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_10000BCBC;
  uint64_t v5 = (uint64_t *)sub_100085AC4();
  return sub_100069610(v5, v6, v7, v8, v3);
}

uint64_t sub_100081E40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100081E64()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DAA4);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t *)sub_1000847D4(v1, (uint64_t)sub_10000BCBC);
  return sub_100069AD4(v2, v3, v4);
}

uint64_t sub_100081EB4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100081EDC()
{
  uint64_t v0 = swift_task_alloc(dword_10010DAC4);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_100072C54(v2, v3, v4, v5);
}

uint64_t sub_100081F28(uint64_t a1, uint64_t a2)
{
  v13[0] = 91LL;
  v13[1] = 0xE100000000000000LL;
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_retain();
    swift_retain();
    uint64_t v5 = 0LL;
    char v6 = 1;
    do
    {
      uint64_t v7 = *(void *)(a2 + 8 * v5 + 32);
      swift_retain();
      if ((v6 & 1) == 0)
      {
        v8._countAndFlagsBits = 8236LL;
        v8._object = (void *)0xE200000000000000LL;
        String.append(_:)(v8);
      }

      ++v5;
      uint64_t v9 = sub_100003B20(&qword_10010B210);
      uint64_t v10 = swift_allocObject(v9, 64LL, 7LL);
      *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1000D8890;
      *(void *)(v10 + 56) = type metadata accessor for InferenceProviderAsset(0LL);
      *(void *)(v10 + 32) = v7;
      swift_retain();
      print<A>(_:separator:terminator:to:)( v10,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  v13,  &type metadata for String,  &protocol witness table for String);
      swift_release(v7);
      swift_bridgeObjectRelease(v10);
      char v6 = 0;
    }

    while (v2 != v5);
    swift_release(a2);
    swift_release(a1);
  }

  v11._countAndFlagsBits = 93LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return v13[0];
}

uint64_t sub_100082080()
{
  uint64_t v0 = swift_task_alloc(dword_10010DAF4);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_100083D3C(v1);
  return sub_10005F500();
}

uint64_t sub_1000820C4@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_100080504(a1, a2, a3, *a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }

  return result;
}

uint64_t sub_1000820F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000820C4(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

void *sub_10008210C(uint64_t a1)
{
  return sub_100080A88(a1, *(uint64_t **)(v1 + 16), *(void *(**)(void *__return_ptr))(v1 + 24));
}

uint64_t sub_100082128(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    swift_release(a2);
    return swift_release(v2);
  }

  return result;
}

uint64_t sub_100082158(void *a1)
{
  return sub_100072A34(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100082178()
{
  uint64_t v0 = swift_task_alloc(dword_10010DB04);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_100075910(v2, v3, v4, v5);
}

uint64_t sub_1000821C4()
{
  uint64_t v0 = swift_task_alloc(dword_10010DB24);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_100083D3C(v1);
  return sub_10005F500();
}

uint64_t sub_100082208(void *a1)
{
  return sub_100075720(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100082228()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100082250()
{
  uint64_t v0 = swift_task_alloc(dword_10010DB3C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_10006D9D4(v2, v3, v4, v5);
}

uint64_t sub_10008229C(uint64_t a1)
{
  return sub_100071F8C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000822A4()
{
  uint64_t v0 = swift_task_alloc(dword_10010DB54);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_100083D3C(v1);
  return sub_10005F500();
}

uint64_t sub_1000822E8(void *a1)
{
  return sub_10006D684(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100082304()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DB64);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  sub_100030C8C();
  return sub_100063214();
}

uint64_t sub_100082350()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100082388()
{
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = (uint64_t)(v0 + 4);
  uint64_t v7 = v0[9];
  uint64_t v8 = swift_task_alloc(dword_10010DB7C);
  uint64_t v9 = (void *)sub_100007524(v8);
  *uint64_t v9 = v1;
  v9[1] = sub_10000BCBC;
  return sub_1000609A0(v3, v4, v5, v6, v7);
}

uint64_t sub_1000823FC()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v0[2];
  uint64_t v7 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  uint64_t v11 = swift_task_alloc(dword_10010DB8C);
  uint64_t v12 = (void *)sub_100007524(v11);
  *uint64_t v12 = v1;
  v12[1] = sub_10000BCBC;
  return sub_100060BF0(v5, v3, v6, v7, v8, v9, v10);
}

uint64_t sub_100082480()
{
  uint64_t v1 = *(void *)(sub_1000229CC() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10000C214();
  swift_release(*(void *)(v0 + 32));
  uint64_t v6 = (void *)(v0 + v3);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[2]);
  swift_bridgeObjectRelease(v6[3]);
  uint64_t v7 = sub_10004FB90();
  sub_1000220F4(v7);
  sub_100006F7C((void *)(v0 + v5));
  return sub_1000223CC(v0, v5 + 40, v4);
}

uint64_t sub_100082518()
{
  uint64_t v1 = swift_task_alloc(dword_10010DBA4);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  uint64_t v3 = sub_100084F88();
  return sub_100061344(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000825A0(uint64_t *a1)
{
  return sub_10006067C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000825BC()
{
  uint64_t v0 = swift_task_alloc(dword_10010DBB4);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_100083D3C(v1);
  return sub_10005FBA0(v2, v3);
}

uint64_t sub_100082600()
{
  uint64_t v0 = swift_task_alloc(dword_10010DBC4);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_100083D3C(v1);
  return sub_10005F500();
}

uint64_t sub_100082644(uint64_t a1)
{
  return sub_10005ECE8(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100082660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000826A4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DBE4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  uint64_t v2 = (uint64_t *)sub_100030C8C();
  return sub_10005EA08(v2, v3);
}

void sub_1000826F0()
{
}

#error "100082724: call analysis failed (funcsize=10)"
void sub_100082730()
{
  sub_10005DA98();
}

void sub_100082738(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_10000603C(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for UUIDIdentifier<A>, v3), a1);
  }

  sub_1000075C0();
}

void sub_100082774(uint64_t *a1)
{
}

void sub_10008278C()
{
}

#error "1000827D0: call analysis failed (funcsize=10)"
uint64_t sub_1000827DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v1 = *(void *)(sub_1000837B4() - 8);
  uint64_t v21 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v21 + 32) & ~v21;
  uint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_100003B20(&qword_10010BAA0) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v3 + v5) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(void *)(sub_100003B20(&qword_10010DA80) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v7 + v9) & ~v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = *(void *)(sub_100003B20(&qword_10010DA40) - 8);
  BOOL v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 + v11 + v13;
  uint64_t v20 = *(void *)(v12 + 64);
  sub_100085798();
  sub_100086050();
  sub_100030250(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  Swift::Int v15 = sub_100003B20(&qword_10010B408);
  uint64_t v16 = v14 & ~v13;
  uint64_t v17 = sub_100003B20(&qword_10010B9A0);
  uint64_t v18 = sub_100030CC0();
  return swift_deallocObject(v0, v20 + v16 + 2, v21 | v5 | v9 | v13 | 7);
}

uint64_t sub_100082948()
{
  uint64_t v4 = v3 & ~v2;
  sub_100003B20(&qword_10010DA80);
  sub_100085654();
  uint64_t v7 = (v4 + v5) & ~v6;
  sub_100003B20(&qword_10010DA40);
  sub_100085654();
  uint64_t v10 = (v7 + v8) & ~v9;
  uint64_t v12 = v0 + v4;
  uint64_t v13 = v0 + v7;
  uint64_t v14 = v0 + v10;
  char v15 = *(_BYTE *)(v0 + *(void *)(v11 + 64) + v10);
  uint64_t v16 = (void *)swift_task_alloc(dword_10010DBFC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v16;
  *uint64_t v16 = v1;
  v16[1] = sub_10000BCBC;
  uint64_t v17 = (void *)sub_100085AC4();
  return sub_10005824C(v17, v18, v19, v20, v12, v13, v14, v15);
}

uint64_t sub_100082A54()
{
  uint64_t v0 = sub_100085434();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10008317C(v1);
  return sub_1000832E0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100082A94(uint64_t a1)
{
  return a1;
}

uint64_t sub_100082ABC(uint64_t a1)
{
  return a1;
}

void *initializeBufferWithCopyOfBuffer for InferenceProviderAssetManagerInternalError( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for InferenceProviderAssetManagerInternalError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for InferenceProviderAssetManagerInternalError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for InferenceProviderAssetManagerInternalError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for InferenceProviderAssetManagerInternalError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceProviderAssetManagerInternalError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for InferenceProviderAssetManagerInternalError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t sub_100082C38(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100082C50(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderAssetManagerInternalError()
{
  return &type metadata for InferenceProviderAssetManagerInternalError;
}

uint64_t sub_100082C9C()
{
  return sub_1000826F8();
}

uint64_t sub_100082CB0()
{
  return sub_1000827A4();
}

void sub_100082CC4()
{
}

void sub_100082CF0(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_100082D20(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100082D38()
{
}

uint64_t sub_100082D50()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100082D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

uint64_t sub_100082D7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = v8[35];
  uint64_t v12 = v8[32];
  uint64_t v13 = v8[33];
  uint64_t v17 = v8[34];
  uint64_t v18 = v8[30];
  uint64_t v19 = v8[24];
  uint64_t v15 = v8[26];
  uint64_t v16 = v8[23];
  *(_DWORD *)(v10 - 96) = *(unsigned __int8 *)(v9 + 1);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))( v11,  v8[18],  v12,  a4,  a5,  a6,  a7,  a8,  v13,  v15,  v16,  v17,  v18,  v19);
}

uint64_t sub_100082DE8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100082E9C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10006467C(a1, a2, a3);
}

uint64_t sub_100082EB8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100082ED4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100082EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  return sub_1000561DC(a1, a2, a3, a4, a5, a6, a7);
}

void sub_100082F0C(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
  *(void *)(*(void *)(v2 + 48) + 8 * v1) = v3;
  ++*(void *)(v2 + 16);
}

uint64_t sub_100082F40()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 336));
}

uint64_t sub_100082F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CAB3C(v3, (a3 & 0xC000000000000001LL) == 0);
}

  ;
}

uint64_t sub_100082FBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 240);
}

uint64_t sub_100082FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  return sub_1000561DC(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100083008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100083024()
{
  return Task.value.getter();
}

void sub_100083040()
{
}

uint64_t sub_100083050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10008306C()
{
  return Task.value.getter();
}

uint64_t sub_100083088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000830A4()
{
  return Task.value.getter();
}

uint64_t sub_1000830C0()
{
  uint64_t v2 = *(void *)(v0 + 392);
  *(void *)(v1 - 96) = *(void *)(v0 + 272);
  return swift_task_dealloc(v2);
}

uint64_t sub_1000830E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

BOOL sub_1000830F4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100083100(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

  ;
}

uint64_t sub_10008311C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 *a19)
{
  uint64_t v21 = v19[49];
  uint64_t v22 = v19[46];
  uint64_t v23 = v19[45];
  uint64_t v24 = v19[31];
  *(_DWORD *)(v20 - 96) = *a19;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v24, v23);
}

uint64_t sub_10008314C()
{
  if (v0) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_1000CAB3C(v1, v2);
}

uint64_t sub_100083158@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_100083164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10008317C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000831A4()
{
  return swift_task_dealloc(*(void *)(v0 + 472));
}

uint64_t sub_1000831E4(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_1000831F0()
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 368) + 104LL))( *(void *)(v0 + 384),  *(unsigned int *)(v0 + 572),  *(void *)(v0 + 360));
}

uint64_t sub_10008320C(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10008322C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10008324C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

void sub_10008326C()
{
}

uint64_t sub_10008327C()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

void sub_100083288()
{
}

void sub_100083298(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000832A0()
{
  return *(void *)(v0 + 152);
}

uint64_t sub_1000832C0()
{
  uint64_t v2 = *(void *)(v0 + 392);
  *(void *)(v1 - 96) = *(void *)(v0 + 272);
  return swift_task_dealloc(v2);
}

uint64_t sub_1000832E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

void sub_1000832F4(uint64_t a1, uint64_t a2)
{
}

void sub_100083300()
{
}

uint64_t sub_100083310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

uint64_t sub_10008332C(uint64_t a1)
{
  return swift_release_n(a1, 3LL);
}

uint64_t sub_100083334(uint64_t a1)
{
  return sub_1000060B4(a1, 1LL, v1);
}

uint64_t sub_100083350()
{
  return swift_retain();
}

void sub_100083394(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10008339C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000833A4()
{
  return swift_task_dealloc(*(void *)(v0 + 304));
}

uint64_t sub_1000833BC()
{
  return type metadata accessor for InferenceProviderAssetDescriptor(0LL);
}

  ;
}

uint64_t sub_100083400( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *uint64_t v11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, a10, v10);
}

uint64_t sub_10008341C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(a1, a2, v2);
}

BOOL sub_10008342C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10008343C()
{
  return ((uint64_t (*)(void))withThrowingTaskGroup<A, B>(of:returning:isolation:body:))();
}

uint64_t sub_10008344C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10008345C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  *a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, a10, v10);
}

uint64_t sub_100083478(uint64_t a1)
{
  return sub_100005FB0(a1, 0LL, 1LL, v1);
}

uint64_t sub_100083488( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *uint64_t v14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, a13, v13);
}

uint64_t sub_1000834A4(uint64_t a1)
{
  *(void *)(v2 + 18sub_100006F7C(v0 + 4) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2 + 192, v1);
}

void sub_1000834C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_1000834C8(uint64_t a1)
{
}

uint64_t sub_1000834D4()
{
  return v0(v1, v2);
}

uint64_t sub_1000834E0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v3, v2);
}

uint64_t sub_1000834F0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t sub_100083500()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_100083524( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, a25, v26);
}

uint64_t sub_100083538()
{
  return (*(uint64_t (**)(void, void, void))(v0[40] + 16LL))(v0[44], v0[30] + v0[51], v0[39]);
}

uint64_t sub_100083564(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10006467C(a1, a2, a3);
}

uint64_t sub_100083584(uint64_t a1)
{
  *uint64_t v3 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1, v2);
}

uint64_t sub_10008359C()
{
  return swift_task_dealloc(*(void *)(v0 + 304));
}

uint64_t sub_1000835B4@<X0>( uint64_t a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a2, a12, *(void *)(v12 - 96));
}

uint64_t sub_1000835CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000835E0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000835EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10 + 208, v11);
}

uint64_t sub_100083604()
{
  return ((uint64_t (*)(void))static Task<>.sleep<A>(until:tolerance:clock:))();
}

uint64_t sub_100083624()
{
  return sub_100081BB0(v0, v1);
}

uint64_t sub_100083630( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  *(void *)(v22 + 22sub_100006F7C(v0 + 4) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a18, *(void *)(v23 - 96), a22);
}

void sub_100083648()
{
}

  ;
}

uint64_t sub_100083670(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100083678(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100083680(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100083688()
{
  return __CocoaSet.count.getter(v0);
}

uint64_t sub_100083690()
{
  return v0;
}

  ;
}

BOOL sub_1000836BC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1000836CC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000836D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(void, void, void))
{
  return a20(v20[42], v20[30] + v20[51], v20[39]);
}

uint64_t sub_1000836FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a17, a12, v18);
}

uint64_t sub_100083718()
{
  return v3(v5, v4, v2, v0, v1);
}

uint64_t sub_100083734()
{
  return swift_endAccess(v0);
}

void sub_10008373C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100083744( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  *(void *)(v23 + 360) = a1;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a16;
  *(void *)(a1 + 2sub_100006F7C(v0 + 4) = a22;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a9 + 32))(a1 + v22, a21, a20);
}

uint64_t sub_10008376C()
{
  return v2(v1, v0);
}

uint64_t sub_100083778()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_1000837AC()
{
  return swift_retain(v0);
}

uint64_t sub_1000837B4()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
}

uint64_t sub_1000837BC()
{
  return type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
}

void sub_1000837C4(uint64_t a1)
{
}

uint64_t sub_1000837CC(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a2);
}

uint64_t sub_1000837D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_arrayDestroy(a12, 2LL);
}

uint64_t sub_1000837E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_dynamicCast(a15, v15, a3, a4, 0LL);
}

uint64_t sub_1000837FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100017524(0LL, v9, (uint64_t *)((char *)&a9 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)));
}

  ;
}

uint64_t sub_10008382C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a21 + 16))(v22, v21 + *(int *)(a20 + 32), v23);
}

void sub_100083850(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100083858(uint64_t a1)
{
  return sub_100076054(a1);
}

uint64_t sub_100083870()
{
  return sub_100078DC4();
}

uint64_t sub_100083888(uint64_t a1)
{
  return sub_10006E0E8(a1);
}

uint64_t sub_1000838A0(uint64_t a1)
{
  return sub_100073368(a1);
}

uint64_t sub_1000838B8()
{
  return swift_errorRelease(*(void *)(v0 + 168));
}

  ;
}

uint64_t sub_1000838E0()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_1000838E8()
{
  return swift_weakLoadStrong(*(void *)(v0 + 88) + 16LL);
}

uint64_t sub_1000838F4()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain(v1);
}

uint64_t sub_100083908()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100083918(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 152);
}

  ;
}

uint64_t sub_100083970( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_release(a15);
}

uint64_t sub_100083978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

  ;
}

uint64_t sub_10008398C(uint64_t a1, uint64_t a2)
{
  return sub_10004C1C0(a1, a2);
}

  ;
}

uint64_t sub_1000839A4(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v1, v2, v3, a1);
}

uint64_t sub_1000839BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, __int128 a23)
{
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a23;
  *(void *)(a1 + 32) = v23;
  *(void *)(v24 - 88) = a1;
  return specialized Array._endMutation()();
}

uint64_t sub_1000839D4()
{
  return static Task<>.isCancelled.getter();
}

uint64_t sub_1000839E4()
{
  return swift_errorRetain(v0);
}

  ;
}

uint64_t sub_1000839FC()
{
  return sub_100017524(0LL, v0, v1);
}

uint64_t sub_100083A0C(uint64_t a1)
{
  return sub_100005FB0(a1, 0LL, 1LL, v1);
}

uint64_t sub_100083A1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t (*a26)(uint64_t, uint64_t))
{
  return a26(v26, v27);
}

uint64_t sub_100083A2C()
{
  return swift_release(v0);
}

void sub_100083A3C(uint64_t a1)
{
}

uint64_t sub_100083A44()
{
  return swift_task_dealloc(*(void *)(v0 + 392));
}

uint64_t sub_100083A64()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_100083A6C(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 - 88) = result;
  return result;
}

uint64_t sub_100083A80()
{
  return swift_task_dealloc(*(void *)(v0 - 96));
}

uint64_t sub_100083A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

void sub_100083A90()
{
}

uint64_t sub_100083A98()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_100083AA4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100083AB0(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100083ABC(uint64_t a1, uint64_t a2)
{
  return sub_100005FB0(a1, a2, 1LL, v2);
}

uint64_t sub_100083AC8()
{
  return v0;
}

uint64_t sub_100083ADC()
{
  return swift_endAccess(v0);
}

void sub_100083AE4()
{
}

uint64_t sub_100083AF0()
{
  return *(void *)(v0 + 520);
}

void sub_100083B14()
{
}

void sub_100083B24(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
}

BOOL sub_100083B48(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100083B50@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100083B58()
{
  return swift_willThrow();
}

void sub_100083B60(uint64_t a1@<X8>)
{
  v1[30] = a1;
  v1[31] = *(void *)(v1[22] + v1[29] + *(int *)(v1[26] + 28LL));
}

void sub_100083B84(uint64_t a1)
{
}

uint64_t sub_100083B8C(uint64_t a1)
{
  return sub_100081BB0(a1, v1);
}

uint64_t sub_100083B94()
{
  return type metadata accessor for LoadState(0LL);
}

void sub_100083B9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100083BA4()
{
  uint64_t v2 = v0[33];
  *(void *)(v1 - 10sub_100006F7C(v0 + 4) = v0[34];
  *(void *)(v1 - 96) = v2;
  return swift_bridgeObjectRelease(v0[29]);
}

uint64_t sub_100083BDC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v3, v1, v0);
}

uint64_t sub_100083BF0( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *a2 = v14;
  a2[1] = 0LL;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_100083C00()
{
}

uint64_t sub_100083C14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

void sub_100083C1C()
{
}

uint64_t sub_100083C30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100083C38()
{
  return sub_10005A720(*(void *)(v0 + 304));
}

uint64_t sub_100083C54()
{
  return ((uint64_t (*)(void))ThrowingTaskGroup.next(isolation:))();
}

void sub_100083C64(uint64_t a1)
{
}

void sub_100083C6C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100083C74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  *a15 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a15, v21, a21);
}

void sub_100083C90()
{
}

uint64_t sub_100083CB8( float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *uint64_t v19 = a1;
  return swift_retain(a19);
}

  ;
}

uint64_t sub_100083CF0()
{
  return swift_release(v0);
}

uint64_t sub_100083D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007B478(a1, a2, a3, 0LL);
}

uint64_t sub_100083D0C()
{
  return v0(*(void *)(v1 + 544), *(void *)(v1 + 504));
}

uint64_t sub_100083D20()
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 8))(v0, *(void *)(v1 + 560));
}

uint64_t sub_100083D3C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100083D50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t sub_100083D58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t sub_100083D60(uint64_t a1)
{
  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

uint64_t sub_100083D68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_release(a18);
}

  ;
}

uint64_t sub_100083D84()
{
  return swift_errorRelease(*v0);
}

uint64_t sub_100083D8C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100083D94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + 360) = a1;
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

  ;
}

void sub_100083DC8(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100083DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_task_dealloc(a22);
}

uint64_t sub_100083DD8()
{
  return Date.timeIntervalSince(_:)(*(void *)(v0 + 520));
}

BOOL sub_100083DF0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100083DF8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100083E00()
{
  return (*(uint64_t (**)(void, void))(v1 + 8))(*(void *)(v0 + 432), *(void *)(v0 + 416));
}

uint64_t sub_100083E18()
{
  uint64_t v5 = *(void *)(v2 + 128);
  uint64_t v6 = *(void *)(v2 + 112);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v4;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))( v3 + ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72) * v0,
           v5,
           v6);
}

void sub_100083E44(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
  *(void *)(*(void *)(v3 + 48) + 8 * sub_10002F99C(v0, v1) = v2;
  ++*(void *)(v3 + 16);
}

void sub_100083E78(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
  *(void *)(*(void *)(v2 + 48) + 8 * sub_10002F99C(v0, v1) = v3;
  ++*(void *)(v2 + 16);
}

void sub_100083EAC(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
  *(void *)(*(void *)(v2 + 48) + 8 * sub_10002F99C(v0, v1) = v3;
  ++*(void *)(v2 + 16);
}

void sub_100083EE0( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t sub_100083EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007B478(a1, v3, a3, 0LL);
}

uint64_t sub_100083EF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return swift_release(a24);
}

uint64_t sub_100083F00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a2, v2, *(void *)(v3 - 96));
}

uint64_t sub_100083F18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_task_dealloc(a18);
}

uint64_t sub_100083F20()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 2++*(void *)(v0 + 16) = v4;
  return v4(v2, v0);
}

uint64_t sub_100083F38(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100083F58(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100083F78(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100083F98()
{
  return Task<>.value.getter();
}

uint64_t sub_100083FA4(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return sub_10007DE2C(a1, a2, 0LL);
}

uint64_t sub_100083FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

uint64_t sub_100083FB8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100083FC4()
{
  return (*(uint64_t (**)(void, void))(v0[13] + 8LL))(v0[14], v0[12]);
}

uint64_t sub_100083FDC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100083FFC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10008401C()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

void sub_100084028(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100084030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100084050(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

void sub_10008405C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100084068()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_100084070()
{
  return v2(v0, v1);
}

uint64_t sub_10008407C()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

void sub_100084088()
{
}

uint64_t sub_100084094()
{
  return v0;
}

uint64_t sub_1000840A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000840B0(uint64_t a1, uint64_t a2)
{
  return sub_100060828(a1, a2);
}

uint64_t sub_1000840CC(uint64_t a1, uint64_t a2)
{
  return sub_10006CF24(a1, a2);
}

uint64_t sub_1000840E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  return sub_1000561DC(a1, a2, a3, a4, a5, a6, a7);
}

  ;
}

  ;
}

uint64_t sub_100084134()
{
  return *(void *)(v0 + 264);
}

uint64_t sub_100084150()
{
  return Logger.logObject.getter();
}

uint64_t sub_100084158(char a1)
{
  return sub_1000633EC(a1);
}

uint64_t sub_100084174(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_10008419C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 88);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 96) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000841C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

  ;
}

uint64_t sub_1000841E8()
{
  return sub_1000863C0(v0[22], v0[18], v0[19], v0[20], v0[21]);
}

uint64_t sub_1000841F8@<X0>(uint64_t (*a1)(void, void, void)@<X8>)
{
  return a1(*(void *)(v1 + 176), *(unsigned int *)(v1 + 308), *(void *)(v1 + 160));
}

uint64_t sub_100084208@<X0>(uint64_t (*a1)(void, void, void)@<X8>)
{
  return a1(*(void *)(v1 + 184), *(unsigned int *)(v1 + 308), *(void *)(v1 + 160));
}

uint64_t sub_100084218()
{
  return sub_10005A720(v0);
}

uint64_t sub_100084228(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100084244(uint64_t a1)
{
  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

void sub_10008424C(uint64_t a1)
{
}

void sub_100084254()
{
}

  ;
}

uint64_t sub_100084270()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100084278()
{
  v1[28] = v2;
  v1[29] = 1LL;
  return (*(uint64_t (**)(void, uint64_t, void))(v1[19] + 104LL))(v1[20], v0, v1[18]);
}

uint64_t sub_1000842A0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10006467C(a1, a2, a3);
}

uint64_t sub_1000842BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

BOOL sub_1000842D8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_100084308(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_100084314()
{
  return swift_retain(v0);
}

_WORD *sub_10008431C(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t sub_10008432C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

void sub_100084334(float a1)
{
  *uint64_t v1 = a1;
}

void sub_100084348()
{
}

uint64_t sub_10008436C()
{
  return type metadata accessor for _OSActivity(0LL);
}

uint64_t sub_100084380()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v0);
}

uint64_t sub_100084394()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 22sub_100006F7C(v0 + 4) = v4;
  return v4(v1, v2);
}

uint64_t sub_1000843A8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000843B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a18 + 16))(v18, v20 + *(int *)(a17 + 32), v19);
}

void sub_1000843D4(uint64_t a1)
{
}

uint64_t sub_1000843E0()
{
  return swift_slowAlloc(22LL, -1LL);
}

uint64_t sub_100084404@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_100084410(__n128 a1)
{
  v1[4] = a1;
  v1[5].n128_u8[0] = 0;
  return ContinuousClock.init()();
}

uint64_t sub_100084424()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

uint64_t sub_100084438(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = sub_10000B830(v5, v4, v3);
  *(void *)(v6 - 10sub_100006F7C(v0 + 4) = a1;
  *(void *)(v6 - 96) = a2;
  *(_BYTE *)(v6 - 88) = a3 & 1;
  return result;
}

uint64_t sub_100084474( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

  ;
}

uint64_t sub_100084490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_100084498(uint64_t a1)
{
  return sub_1000060B4(v1, 1LL, a1);
}

  ;
}

void sub_1000844D8()
{
  *(void *)(v1 - 96) = v0 + 16;
}

uint64_t sub_100084504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

uint64_t sub_10008450C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100084518(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_100084520(uint64_t a1)
{
}

uint64_t sub_100084528( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t))
{
  return a19(v21, v19, v20);
}

uint64_t sub_10008453C()
{
  return swift_task_dealloc(*(void *)(v0 + 272));
}

uint64_t sub_100084550(uint64_t a1, uint64_t a2)
{
  return sub_10006CF24(a1, a2);
}

  ;
}

uint64_t sub_10008457C()
{
  return __CocoaSet.makeIterator()(v0);
}

void sub_100084584(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100084590()
{
}

uint64_t sub_10008459C(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000845A8()
{
  return sub_100086BDC(v0[25], v0[23], v0[24]);
}

void sub_1000845B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000845BC(uint64_t a1)
{
  return Set.Iterator.init(_cocoa:)(v1, v2, a1);
}

void sub_1000845D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_1000845DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000845E4()
{
  return v0;
}

uint64_t sub_1000845F0()
{
  uint64_t v1 = v0[11];
  sub_10000729C(v0 + 7, v0[10]);
  return swift_task_alloc(*(unsigned int *)(*(void *)(v1 + 16) + 4LL));
}

uint64_t sub_100084624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007B478(a1, a2, a3, 0LL);
}

uint64_t sub_10008462C()
{
  return swift_weakLoadStrong(v0);
}

uint64_t sub_100084634( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  return swift_errorRelease(*a13);
}

void sub_100084640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100084648(uint64_t result)
{
  *(void *)(v1 + 208) = result;
  return result;
}

  ;
}

uint64_t sub_10008466C()
{
  return *(void *)(v0 + 112);
}

void sub_10008467C(uint64_t a1@<X8>)
{
  v1[52] = a1;
  v1[53] = *(void *)(v1[30] + v1[51] + *(int *)(v1[33] + 28LL));
}

uint64_t sub_1000846A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return swift_task_dealloc(a23);
}

  ;
}

uint64_t sub_1000846C4(uint64_t a1)
{
  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

  ;
}

uint64_t sub_1000846E4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000846EC(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

  ;
}

uint64_t sub_100084734()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 336);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 34sub_100006F7C(v0 + 4) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100084754()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 192);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 200) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100084774()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 360);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 368) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100084794()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

void sub_1000847B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

uint64_t sub_1000847D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000847EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_100084814@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10008483C()
{
  return sub_1000060B4(*(void *)(v0 + 152), 1LL, *(void *)(v0 + 160));
}

void sub_100084860()
{
}

uint64_t sub_100084880()
{
  return swift_task_dealloc(*(void *)(v0 + 224));
}

  ;
}

uint64_t sub_100084894(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 176, v1 + 184, v2 + 4);
}

uint64_t sub_1000848B4()
{
  return v0;
}

uint64_t sub_1000848C0(uint64_t result)
{
  *(void *)(v1 + 312) = result;
  return result;
}

uint64_t sub_1000848D0(uint64_t result)
{
  *(void *)(v1 + 488) = result;
  return result;
}

uint64_t sub_1000848E0(uint64_t result)
{
  *(void *)(v1 + 272) = result;
  return result;
}

uint64_t sub_1000848F0(uint64_t result)
{
  *(void *)(v1 + 448) = result;
  return result;
}

uint64_t sub_100084900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, v2);
}

uint64_t sub_10008490C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_100084918( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_100084920()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_100084928()
{
  return static Date.+ infix(_:_:)(v0, v1);
}

uint64_t sub_100084938(char a1)
{
  if ((a1 & 1) != 0) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v6, v2);
}

uint64_t sub_100084954()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v2 + 16))(*(void *)(v3 - 280), v0, v1);
}

uint64_t sub_100084970( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

void sub_100084978( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
}

uint64_t sub_100084988()
{
  return v1(v2, *(void *)(v0 + 504));
}

uint64_t sub_100084998()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void sub_1000849A8(uint64_t a1@<X8>)
{
  v1[52] = a1;
  v1[53] = *(void *)(v1[30] + v1[51] + *(int *)(v1[33] + 28LL));
}

void sub_1000849CC()
{
}

void sub_1000849DC(uint64_t a1, uint64_t a2)
{
}

void *sub_1000849E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  return Hasher.init(_seed:)(&a28, *(void *)(v28 + 40));
}

BOOL sub_1000849F4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100084A00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return a26;
}

  ;
}

uint64_t sub_100084A18(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v3, v2);
}

uint64_t sub_100084A34@<X0>(uint64_t (*a1)(void, void, void)@<X8>)
{
  return a1(*(void *)(v1 + 488), *(unsigned int *)(v1 + 672), *(void *)(v1 + 472));
}

uint64_t sub_100084A44@<X0>(uint64_t (*a1)(void, void, void)@<X8>)
{
  return a1(*(void *)(v1 + 496), *(unsigned int *)(v1 + 672), *(void *)(v1 + 472));
}

uint64_t sub_100084A54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  return sub_100017AAC(&a28, a2);
}

uint64_t sub_100084A60()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

uint64_t sub_100084A6C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100084A74(uint64_t a1)
{
  return sub_100086938(a1, v1);
}

void sub_100084A80(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v1;
}

void sub_100084AA4( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t sub_100084AB0(uint64_t a1)
{
  return swift_retain(a1);
}

  ;
}

uint64_t sub_100084ACC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_release(a19);
}

uint64_t sub_100084AD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_release(a17);
}

uint64_t sub_100084ADC(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_100084AE8(uint64_t a1)
{
  return v2(v4, v5, v1);
}

uint64_t sub_100084B14(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10006467C(a1, a2, a3);
}

uint64_t sub_100084B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

void sub_100084B34(uint64_t a1@<X8>)
{
  v1[30] = a1;
  v1[31] = *(void *)(v1[22] + v1[29] + *(int *)(v1[26] + 28LL));
}

uint64_t sub_100084B58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_100084B7C(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_100084B84(uint64_t a1)
{
}

BOOL sub_100084B90(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100084BA0()
{
}

void sub_100084BB0()
{
  *(void *)(v1 - 112) = v0;
  sub_100016C8C();
}

uint64_t sub_100084BCC()
{
  return sub_1000BC4C4();
}

void sub_100084BD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100084BE4()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_100084BF0()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_100084BFC()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_100084C08()
{
  return swift_task_dealloc(*(void *)(v0 + 224));
}

BOOL sub_100084C10(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100084C18(uint64_t a1, uint64_t a2)
{
  return sub_1000803C8(*v2, a1, a2);
}

void sub_100084C34(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100084C3C()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100084C44(uint64_t a1, uint64_t a2)
{
  return v3(v2, a2, v4);
}

  ;
}

uint64_t sub_100084C6C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100084C78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t (*a26)(uint64_t, uint64_t))
{
  return a26(v26, v27);
}

uint64_t sub_100084C88@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100084C94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

uint64_t sub_100084C9C()
{
  return sub_1000BC4C4();
}

uint64_t sub_100084CA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t (*a26)(void, void))
{
  return a26(*(void *)(v26 + 544), *(void *)(v26 + 504));
}

_WORD *sub_100084CB8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_100084CC4()
{
  return *(void *)(v1 + 8 * v0 + 32) + *v2;
}

uint64_t sub_100084CE4()
{
  return Date.timeIntervalSince(_:)(*(void *)(v0 + 480));
}

uint64_t sub_100084CFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

uint64_t sub_100084D04(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_100084D18()
{
}

uint64_t sub_100084D30()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_100084D40()
{
  return swift_endAccess(v0 - 240);
}

uint64_t sub_100084D48(uint64_t a1)
{
  return sub_100091270(a1);
}

void sub_100084D50(uint64_t a1)
{
}

  ;
}

uint64_t sub_100084D64()
{
  return swift_endAccess(v0 - 232);
}

uint64_t sub_100084D6C()
{
  return *(void *)(v0 - 144);
}

uint64_t sub_100084D7C(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_100084D88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return swift_task_dealloc(a24);
}

uint64_t sub_100084D90@<X0>( uint64_t a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a2, a7, a14);
}

  ;
}

  ;
}

  ;
}

void sub_100084E00()
{
  *(void *)(v1 - 96) = (v0 - 1) & v0;
}

  ;
}

  ;
}

void sub_100084E60()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100084E70()
{
  return sub_10005F548();
}

uint64_t sub_100084E7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100084E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A2C8(a1, a2, a3);
}

void *sub_100084E94@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100084EA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 232);
}

uint64_t sub_100084EC4()
{
  uint64_t v1 = sub_1000212AC(v0);
  return Logger.logObject.getter(v1);
}

void sub_100084EEC()
{
}

uint64_t sub_100084F04()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_100084F0C()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100084F14()
{
  return swift_release(*(void *)(v0 + 424));
}

uint64_t sub_100084F2C()
{
  return v0;
}

uint64_t sub_100084F38()
{
  return v2(v4, v3, v1, v0);
}

  ;
}

uint64_t sub_100084F64()
{
  return type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
}

uint64_t sub_100084F6C()
{
  return type metadata accessor for AssetPolicy(0LL);
}

uint64_t sub_100084F74()
{
  return __CocoaSet.makeIterator()(v0);
}

uint64_t sub_100084F7C()
{
  return v0;
}

uint64_t sub_100084F88()
{
  return v0;
}

  ;
}

uint64_t sub_100084FC8(uint64_t result)
{
  *(void *)(v1 + 352) = result;
  return result;
}

void sub_100084FD8()
{
}

uint64_t sub_100084FF0()
{
  *(void *)(v1 + 62sub_100006F7C(v0 + 4) = v0;
  return (*(uint64_t (**)(void, void, void))(v1 + 504))( *(void *)(v1 + 440),  *(void *)(v1 + 240),  *(void *)(v1 + 424));
}

void sub_100085008()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

uint64_t sub_100085030()
{
  return v0;
}

uint64_t sub_10008503C()
{
  return swift_endAccess(v0);
}

void sub_100085044()
{
}

uint64_t sub_10008506C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return a26;
}

  ;
}

void sub_100085098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000850A0@<X0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  *(void *)(v2 - 96) = (char *)a2 + *a2;
  return swift_retain(a1);
}

  ;
}

uint64_t sub_1000850C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v1, v2);
}

uint64_t sub_1000850D4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_1000850E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_release(a22);
}

uint64_t sub_1000850F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_release(a21);
}

uint64_t sub_1000850F8()
{
  return *(void *)(v0 + 392);
}

void sub_100085114()
{
}

uint64_t sub_100085120( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t (*a26)(uint64_t, uint64_t))
{
  return a26(a25, a23);
}

uint64_t sub_10008512C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100085134( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(a26, a25);
}

uint64_t sub_100085140()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 176))( *(void *)(v0 + 152),  *(void *)(v0 + 96),  *(void *)(v0 + 136));
}

uint64_t sub_100085154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  return swift_release(*a14);
}

BOOL sub_100085160(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_10008516C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100085178()
{
  return Array.description.getter(v0);
}

void sub_10008518C()
{
}

uint64_t sub_1000851A0(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.>= infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_1000851AC(uint64_t a1, uint64_t a2)
{
  return Set.description.getter(a1, a2, v2);
}

uint64_t sub_1000851B4(void (*a1)(uint64_t *), uint64_t a2)
{
  return sub_100054A54(a1, a2, v2);
}

void sub_1000851C0()
{
}

uint64_t sub_1000851CC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 600));
}

uint64_t sub_1000851D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

void sub_1000851E0( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t sub_1000851EC()
{
  return swift_task_alloc(48LL);
}

uint64_t sub_1000851F4()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000851FC(uint64_t a1)
{
  return sub_1000803C8(a1, v1, v2);
}

uint64_t sub_100085208(uint64_t a1)
{
  return sub_1000803C8(a1, v2, v1);
}

uint64_t sub_100085214()
{
  return static os_log_type_t.default.getter();
}

void sub_10008521C(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

__n128 sub_10008524C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  *(void *)(v20 - 88) = a1;
  __n128 result = a19;
  *uint64_t v19 = a19.n128_u32[0];
  return result;
}

uint64_t sub_100085268(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100085274()
{
  return sub_10005A7E4(*(void *)(v0 + 136));
}

uint64_t sub_100085280(uint64_t a1, uint64_t (*a2)(char *))
{
  return sub_100051ABC(a1, a2, 0LL);
}

uint64_t sub_10008528C()
{
  return sub_10000B830(*(void *)(v0 - 104), *(void *)(v0 - 96), *(_BYTE *)(v0 - 88));
}

void sub_100085298(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = (a1 - 1) & a1;
}

uint64_t sub_1000852B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000852D0()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t sub_1000852DC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 336));
}

uint64_t sub_1000852E8()
{
  return AssetCost.onDeviceMemory.getter();
}

uint64_t sub_1000852F0()
{
  return sub_100091424();
}

uint64_t sub_1000852F8()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)(v3, v2, v0, v1);
}

uint64_t sub_10008530C()
{
  return sub_100020D3C(v3, v2, v0, v1);
}

void sub_100085320(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10008532C()
{
  return __CocoaSet.Iterator.next()();
}

  ;
}

uint64_t sub_10008534C()
{
  return sub_100081F28(v1, v0);
}

uint64_t sub_100085358()
{
  return swift_stdlib_isStackAllocationSafe(v0, 8LL);
}

  ;
}

uint64_t sub_100085370()
{
  return sub_100005FB0(v0, 0LL, 1LL, v1);
}

uint64_t sub_100085384( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return static Date.> infix(_:_:)(v26, a26);
}

void sub_100085390(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_10008539C(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
}

uint64_t sub_1000853A4()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_1000853AC()
{
  return swift_endAccess(v0);
}

uint64_t sub_1000853B4()
{
  return Date.timeIntervalSince(_:)(v0);
}

uint64_t sub_1000853C0()
{
  return sub_100005FB0(v0, 0LL, 1LL, v1);
}

uint64_t sub_1000853D4(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_1000853E0()
{
  return sub_100006F7C((void *)(v0 + 56));
}

void sub_1000853EC()
{
}

uint64_t sub_100085400(uint64_t a1, uint64_t a2)
{
  return __CocoaSet.formIndex(after:isUnique:)(a2, v3, v2);
}

uint64_t sub_100085414(uint64_t result)
{
  *(void *)(v1 + 432) = result;
  return result;
}

uint64_t sub_100085420( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return Set.Index._asCocoa.modify(a20, a1);
}

uint64_t sub_100085434()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10008543C(uint64_t result)
{
  *(void *)(v1 + 552) = result;
  return result;
}

_WORD *sub_100085448(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t sub_100085454()
{
  return Logger.logObject.getter();
}

uint64_t sub_10008545C()
{
  return swift_endAccess(v0);
}

uint64_t sub_100085464()
{
  return v0;
}

uint64_t sub_100085470()
{
  return v2(v1, v0);
}

uint64_t sub_10008547C(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

uint64_t sub_1000854A0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000854A8()
{
  return v0;
}

uint64_t sub_1000854B4()
{
  return v0;
}

  ;
}

uint64_t sub_1000854CC(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000854D4()
{
  return sub_100091424();
}

uint64_t sub_1000854DC(uint64_t a1)
{
  return swift_release(a1);
}

void sub_1000854E4()
{
}

uint64_t sub_1000854EC()
{
  return (*(uint64_t (**)(void, void))(v0 + 184))(*(void *)(v0 + 152), *(void *)(v0 + 136));
}

uint64_t sub_1000854FC()
{
  return sub_100052B5C();
}

uint64_t sub_100085504(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_100085514( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_release(a20);
}

uint64_t sub_10008551C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100085558( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return swift_release(a23);
}

Swift::Int sub_100085560()
{
  return Hasher._finalize()();
}

uint64_t sub_100085568()
{
  return v2(v0, *(void *)(v1 + 464));
}

uint64_t sub_100085578()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_100085598()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_1000855B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000855C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return swift_task_dealloc(a26);
}

uint64_t sub_1000855CC()
{
  return v0;
}

uint64_t sub_1000855E4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

void sub_1000855F4(uint64_t a1)
{
}

  ;
}

void sub_10008560C()
{
  *(void *)(v1 - 96) = v0;
}

uint64_t sub_100085624()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100085634()
{
  *(void *)(v1 - 240) = v0;
  return v1 - 136;
}

  ;
}

  ;
}

uint64_t sub_100085664()
{
  return AssetCost.onDeviceMemory.getter();
}

void *sub_10008566C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[2] = v2;
  result[3] = a2;
  result[4] = v3;
  return result;
}

uint64_t sub_100085678()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100085688( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a14, a15);
}

  ;
}

Swift::Int sub_1000856A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return sub_100078EC8(a1, v3, a3, v4);
}

  ;
}

uint64_t sub_1000856C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

uint64_t sub_1000856D4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000856DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_1000856FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a20 + 8))(a22, a21);
}

  ;
}

  ;
}

void sub_100085730()
{
}

  ;
}

uint64_t sub_10008574C()
{
  return swift_errorRelease(*(void *)(v0 + 120));
}

  ;
}

uint64_t sub_100085764()
{
  return v2(v0, v1);
}

uint64_t sub_100085774()
{
  return static os_log_type_t.fault.getter();
}

  ;
}

uint64_t sub_100085798()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t sub_1000857A0@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v1 = v3;
  v1[1] = a1;
  return v2;
}

void sub_1000857B8(uint64_t a1@<X8>)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1 + 8;
}

uint64_t sub_1000857C4()
{
  return *(void *)v0;
}

uint64_t sub_1000857D4(uint64_t a1)
{
  return swift_initStackObject(a1, *(void *)(v1 - 96));
}

uint64_t sub_1000857DC()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000857E8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000857F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return swift_task_dealloc(a25);
}

uint64_t sub_1000857F8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t sub_100085808()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_100085818()
{
  *(void *)(v1 + 392) = v0;
  return swift_release(*(void *)(v1 + 344));
}

  ;
}

uint64_t sub_100085840()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100085850()
{
  return v0;
}

uint64_t sub_100085860()
{
  return v0;
}

uint64_t sub_10008586C()
{
  return v2(v0, v1);
}

  ;
}

void sub_100085888(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100085898()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v1, v0);
}

uint64_t sub_1000858A8(uint64_t a1)
{
  return swift_release(a1);
}

  ;
}

void *sub_1000858BC(void *result)
{
  result[2] = 0LL;
  result[3] = 0LL;
  result[4] = v1;
  return result;
}

uint64_t sub_1000858CC()
{
  return sub_100017524(0LL, v0, v1);
}

uint64_t sub_1000858DC()
{
  return v3(v1, v0, v2);
}

uint64_t sub_1000858EC()
{
  return v0;
}

uint64_t sub_1000858F8()
{
  return v0;
}

uint64_t sub_100085904()
{
  return v3(v0, v2, v1);
}

uint64_t sub_100085914()
{
  return Date.timeIntervalSince(_:)(v0);
}

void sub_10008591C()
{
}

uint64_t sub_10008592C()
{
  if (v0 < 0) {
    return _CocoaArrayWrapper.endIndex.getter(v0);
  }
  else {
    return _CocoaArrayWrapper.endIndex.getter(v0 & 0xFFFFFFFFFFFFFF8LL);
  }
}

  ;
}

void sub_10008594C()
{
}

uint64_t sub_10008595C(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

uint64_t sub_10008597C(uint64_t a1)
{
  return v1(a1, 0LL);
}

uint64_t sub_100085984(uint64_t result)
{
  *(void *)(v1 + 256) = result;
  return result;
}

uint64_t sub_100085990(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

  ;
}

uint64_t sub_1000859B8()
{
  *(_WORD *)(v0 + 12) = 2080;
  return sub_1000BCAC0(v1);
}

uint64_t sub_1000859C8()
{
  return (*(uint64_t (**)(void, void))(v0 + 512))(*(void *)(v0 + 440), *(void *)(v0 + 424));
}

unint64_t sub_1000859D8()
{
  return sub_1000165C8();
}

uint64_t sub_1000859E8()
{
  return v0;
}

uint64_t sub_1000859F8()
{
  return v0;
}

uint64_t sub_100085A04()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t sub_100085A18(uint64_t result)
{
  *(void *)(v1 + 360) = result;
  return result;
}

uint64_t sub_100085A24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  return a10(v10, v11);
}

uint64_t sub_100085A34()
{
  return v0;
}

uint64_t sub_100085A40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  return a9(v9, v10);
}

uint64_t sub_100085A50()
{
  return __CocoaSet.count.getter(v0);
}

uint64_t sub_100085A58()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_100085A74()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100085A7C()
{
  return v0;
}

uint64_t sub_100085A88()
{
  return v0;
}

  ;
}

uint64_t sub_100085AA4()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100085AAC()
{
  return static os_log_type_t.default.getter();
}

  ;
}

uint64_t sub_100085AC4()
{
  return v0;
}

uint64_t sub_100085ADC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_100085AE4()
{
}

uint64_t sub_100085AF0()
{
  return *(void *)(v0 + 384);
}

  ;
}

void *sub_100085B10@<X0>(uint64_t a1@<X8>)
{
  return sub_10000729C((void *)(a1 + v1), *(void *)(a1 + v1 + 24));
}

void sub_100085B1C(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100085B30()
{
  return __CocoaSet.Iterator.next()();
}

  ;
}

void sub_100085B44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100085B4C@<X0>(uint64_t a1@<X8>)
{
  return swift_release(a1);
}

char *sub_100085B54@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

uint64_t sub_100085B68(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100085B74()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t sub_100085B7C(uint64_t a1)
{
  return sub_100091270(a1);
}

  ;
}

uint64_t sub_100085B90()
{
  return swift_release(*(void *)(v0 - 232));
}

  ;
}

uint64_t sub_100085BAC(uint64_t a1)
{
  return swift_release(a1);
}

  ;
}

void sub_100085BC8()
{
}

uint64_t sub_100085BD4()
{
  return v1(*(void *)(v0 + 512), *(void *)(v0 + 464));
}

uint64_t sub_100085BE0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100085BEC(double a1)
{
  return static Date.+ infix(_:_:)(v1, a1);
}

uint64_t sub_100085BF8(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  return swift_unknownObjectRetain(v1);
}

uint64_t sub_100085C04()
{
  return swift_release(*(void *)(v0 - 240));
}

BOOL sub_100085C0C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

Swift::Int sub_100085C24()
{
  return Hasher._finalize()();
}

void *sub_100085C2C(uint64_t a1)
{
  return Hasher.init(_seed:)((void *)(v1 - 240), a1);
}

uint64_t sub_100085C34()
{
  return swift_release(*(void *)(v0 - 136));
}

uint64_t sub_100085C3C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100085C48()
{
  return sub_100091270(v0 - 240);
}

uint64_t sub_100085C54()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 112));
}

  ;
}

  ;
}

void *sub_100085C80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return Hasher.init(_seed:)(&a26, *(void *)(v26 + 40));
}

uint64_t sub_100085C8C(uint64_t result)
{
  *(void *)(v1 + 392) = result;
  return result;
}

uint64_t sub_100085C98@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100085CA0(uint64_t a1)
{
  return sub_100091270(a1);
}

uint64_t sub_100085CA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t))
{
  return a16(a1, a2, v16);
}

void sub_100085CB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

  ;
}

BOOL sub_100085CD4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

  ;
}

uint64_t sub_100085CF4()
{
  return swift_release(*(void *)(v0 + 352));
}

  ;
}

uint64_t sub_100085D08(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void *sub_100085D10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  *a14 = a1;
  return a14;
}

Swift::Int sub_100085D24()
{
  return Hasher._finalize()();
}

void *sub_100085D2C(uint64_t a1)
{
  return Hasher.init(_seed:)((void *)(v1 - 232), a1);
}

void sub_100085D34( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t sub_100085D40()
{
  return swift_release(*(void *)(v0 - 128));
}

uint64_t sub_100085D48()
{
  return sub_100091270(v0 - 232);
}

Swift::Int sub_100085D54(uint64_t a1)
{
  return sub_100079794(a1, v1, v2);
}

uint64_t sub_100085D60(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_100085D68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100085D70(uint64_t a1)
{
  return sub_1000803C8(a1, v1, v2);
}

uint64_t sub_100085D7C()
{
  return swift_task_dealloc(*(void *)(v0 + 208));
}

  ;
}

uint64_t sub_100085D90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return swift_retain(a24);
}

  ;
}

uint64_t sub_100085DA4()
{
  return swift_task_dealloc(*(void *)(v0 + 104));
}

uint64_t sub_100085DB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t sub_100085DBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

void *sub_100085DC8()
{
  return sub_10006325C(*(void *)(v0 + 176));
}

uint64_t sub_100085DD4()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

  ;
}

  ;
}

uint64_t sub_100085E08()
{
  return static Date.now.getter();
}

uint64_t sub_100085E10()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100085E1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0LL;
}

uint64_t sub_100085E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 >= 0) {
    a1 = a2;
  }
  return __CocoaSet.startIndex.getter(a1);
}

uint64_t sub_100085E3C(double a1)
{
  return static Date.+ infix(_:_:)(v1, a1);
}

uint64_t sub_100085E48()
{
  return static Duration.seconds(_:)(v0);
}

void sub_100085E50(float a1)
{
  *uint64_t v1 = a1;
}

  ;
}

uint64_t sub_100085E68()
{
  return Logger.logObject.getter();
}

uint64_t sub_100085E70(double a1)
{
  *(double *)(v1 - 112) = a1;
  return v1 - 112;
}

void sub_100085E84(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t *))
{
}

uint64_t sub_100085E8C()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100085E94()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100085E9C()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100085EA4()
{
  return __CocoaSet.Index.handleBitPattern.getter(v1, v0);
}

uint64_t sub_100085EB0()
{
  return sub_1000BC4C4();
}

uint64_t sub_100085EBC(uint64_t a1)
{
  return sub_100081F28(a1, v1);
}

uint64_t sub_100085EC4(uint64_t a1)
{
  return sub_100081F28(a1, v1);
}

uint64_t sub_100085ECC()
{
  return static os_log_type_t.default.getter();
}

  ;
}

uint64_t sub_100085EE0()
{
  return swift_task_dealloc(*(void *)(v0 + 72));
}

  ;
}

  ;
}

uint64_t sub_100085F0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100085F18()
{
  return sub_100006F7C(v0);
}

uint64_t sub_100085F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100003854(v3, a2, a3);
}

uint64_t sub_100085F28()
{
  return v2(v0, v1);
}

void sub_100085F34()
{
}

uint64_t sub_100085F3C(uint64_t result)
{
  *(void *)(v1 + 18sub_100006F7C(v0 + 4) = result;
  return result;
}

  ;
}

Swift::Int sub_100085F64(uint64_t a1)
{
  return sub_100079158(a1, v2, v1);
}

uint64_t sub_100085F70(void (*a1)(uint64_t *))
{
  return sub_100054D4C(a1, v2, v1);
}

uint64_t sub_100085F7C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

void *sub_100085F88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = a1;
  return a12;
}

uint64_t sub_100085F9C()
{
  return sub_100006F7C(v0);
}

uint64_t sub_100085FA4()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_100085FB0()
{
  return v0;
}

uint64_t sub_100085FBC()
{
  return v0;
}

uint64_t sub_100085FD0()
{
  return v0;
}

uint64_t sub_100085FDC()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100085FE4()
{
  return __CocoaSet.makeIterator()(v0);
}

uint64_t sub_100085FEC()
{
  return v1(v0, v2);
}

uint64_t sub_100085FF8()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_100086004(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a2);
}

void *sub_10008600C()
{
  return sub_10006325C(v0);
}

void *sub_100086014()
{
  return sub_1000CAF08(v0);
}

uint64_t sub_10008601C()
{
  return swift_weakLoadStrong(v0);
}

uint64_t sub_100086024()
{
  return swift_unknownObjectRelease(v0);
}

  ;
}

uint64_t sub_100086038()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

  ;
}

uint64_t sub_100086050()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_100086058(uint64_t result)
{
  *(void *)(v1 + 400) = result;
  return result;
}

  ;
}

void sub_100086078(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100086084()
{
  return sub_100081BB0(v0, v1);
}

uint64_t sub_100086090()
{
  return static Date.+ infix(_:_:)(v0, v1);
}

uint64_t sub_10008609C()
{
  return v2(v1, v0);
}

uint64_t sub_1000860A8(uint64_t a1)
{
  return Set.description.getter(a1, v2, v1);
}

  ;
}

uint64_t sub_1000860C0()
{
  return v0(v2, v1);
}

uint64_t sub_1000860CC()
{
  return sub_1000CB504(v0);
}

uint64_t sub_1000860D8()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000860E4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 544));
}

uint64_t sub_1000860F0()
{
  return InferenceProviderDescriptor.description.getter();
}

uint64_t sub_1000860FC()
{
  return sub_100052B5C();
}

uint64_t sub_100086104()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 96);
}

uint64_t sub_100086118()
{
  return swift_task_dealloc(*(void *)(v0 + 232));
}

uint64_t sub_100086124()
{
  return swift_task_dealloc(*(void *)(v0 + 232));
}

void sub_100086130(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_100083B94();
  sub_10009240C();
  __chkstk_darwin(v7);
  sub_10000C120();
  uint64_t v10 = v9 - v8;
  sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v11);
  sub_10008570C();
  char v12 = sub_1000BC4C4();
  sub_10009157C(v4, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, a1, v6);
  if ((v12 & 1) == 0) {
    sub_1000BC4C4();
  }
  sub_100030250(v10, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10002F90C(v2, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100022108();
}

void sub_10008620C()
{
  uint64_t v2 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v3);
  sub_10000C110();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = sub_100083B94();
  sub_10009240C();
  __chkstk_darwin(v8);
  sub_10000C120();
  uint64_t v11 = v10 - v9;
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v10 - v9, enum case for LoadState.loaded(_:), v7);
  char v12 = sub_1000BC4C4();
  sub_100022CF4(v11, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10009157C(v0, (uint64_t)v6);
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)&v6[*(int *)(v2 + 44)] + 16LL);
    sub_10002F90C((uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v14 = sub_1000923CC(v0);
    if (!v13) {
      sub_1000924C0();
    }
  }

  else
  {
    sub_10002F90C((uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v14 = sub_1000923CC(v0);
  }

  sub_1000924AC(v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100022108();
}

uint64_t sub_10008633C(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10000BE64(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v9, 0LL);
  uint64_t v2 = *(void *)(v1 + *(int *)(sub_1000837BC() + 40));
  uint64_t v3 = swift_bridgeObjectRetain(v2);
  uint64_t v4 = InferenceProviderAssetDescriptor.identifier.getter(v3);
  sub_1000310FC(v4, v5, v2);
  char v7 = v6;
  sub_10000BD28();
  sub_10000C1E0();
  return v7 & 1;
}

uint64_t sub_1000863C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002257C(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v15);
  uint64_t v13 = sub_10008A660(v12, v5, a1, a2, a3, a4, a5, (os_log_s *)&v16);
  uint64_t result = sub_100092484(v13);
  if (!v6) {
    return v16;
  }
  return result;
}

void sub_100086468()
{
  uint64_t v3 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  int v4 = v0 + *(_DWORD *)(v3 + 44);
  sub_1000CB9F0();
  uint64_t v5 = sub_100003B20(&qword_10010B9A0);
  sub_1000920AC(v5);
  if (v4 != 1)
  {
    sub_100092448();
    sub_1000921B4(*(int *)(v3 + 36));
  }

  sub_100007448();
}

void sub_100086524()
{
  uint64_t v3 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  int v4 = v0 + *(_DWORD *)(v3 + 48);
  sub_1000CBA14();
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  sub_1000920AC(v5);
  if (v4 != 1)
  {
    sub_100092448();
    sub_1000921B4(*(int *)(v3 + 32));
  }

  sub_100007448();
}

uint64_t sub_1000865E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v78 = v11;
  uint64_t v79 = v12;
  __int128 v73 = (void *)v14;
  __int128 v74 = (void *)v13;
  uint64_t v70 = v16;
  uint64_t v71 = v15;
  uint64_t v72 = v17;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v69 = a10;
  uint64_t v67 = v10;
  uint64_t v68 = a9;
  sub_1000853A4();
  sub_100030A28();
  __chkstk_darwin(v24);
  sub_10004E158();
  uint64_t v66 = v25;
  __chkstk_darwin(v26);
  uint64_t v65 = (char *)&v56 - v27;
  uint64_t v62 = sub_100083B94();
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  sub_100022518();
  uint64_t v64 = v28;
  uint64_t v29 = sub_10004FB90();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_100022518();
  uint64_t v63 = v31;
  uint64_t v32 = sub_1000833BC();
  uint64_t v75 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_10004E158();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  char v37 = (char *)&v56 - v36;
  uint64_t v38 = *(void *)v23;
  uint64_t v39 = *((void *)v23 + 1);
  if (!v21 && v19 == 0xE000000000000000LL
    || (sub_10000C0D4(), (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v42, 0xE000000000000000LL, 0LL) & 1) != 0))
  {
    swift_bridgeObjectRetain(v39);
    sub_10000C1E0();
    uint64_t v21 = 0LL;
    uint64_t v19 = 0LL;
  }

  else
  {
    swift_bridgeObjectRetain(v39);
  }

  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))InferenceProviderAssetDescriptor.init(identifier:version:))( v38,  v39,  v21,  v19);
  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v75 + 16);
  uint64_t v60 = v34;
  v43(v34, v37, v32);
  uint64_t v44 = (int *)type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v45 = v63;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v63, &v23[v44[7]], v29);
  uint64_t v46 = v44[9];
  unsigned int v58 = v23[v44[8]];
  unsigned int v57 = v23[v46];
  uint64_t v47 = v23[v44[10]];
  __int128 v48 = v74;
  sub_100007104((uint64_t)v74, (uint64_t)v77);
  uint64_t v59 = v32;
  __int128 v49 = v73;
  sub_100007104((uint64_t)v73, (uint64_t)v76);
  uint64_t v50 = v64;
  (*(void (**)(uint64_t, void, uint64_t))(v61 + 104))(v64, enum case for LoadState.unloaded(_:), v62);
  uint64_t v51 = (uint64_t)v65;
  uint64_t v52 = sub_100092448();
  uint64_t v53 = v66;
  ((void (*)(uint64_t))static Date.now.getter)(v52);
  uint64_t v54 = swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  sub_100086F8C( v60,  v71,  v72,  v45,  v58,  v57,  v47,  v77,  v50,  v51,  v53,  (uint64_t)_swiftEmptySetSingleton,  (uint64_t)_swiftEmptySetSingleton,  (uint64_t)_swiftEmptySetSingleton,  v70,  v76,  v68,  v69,  0);
  sub_100006F7C(v49);
  sub_100006F7C(v48);
  sub_10002F90C((uint64_t)v23, type metadata accessor for ModelCatalogAsset);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v59);
  return v54;
}

uint64_t sub_100086938(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = v2;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
  {
    uint64_t v7 = v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002257C(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v36);
    uint64_t v8 = sub_10008EBA0(v7, v4, a2, a1, &v37);
    uint64_t result = sub_100092484(v8);
    if (!v3) {
      return v37;
    }
  }

  else
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v10, (uint64_t)qword_10010DC28);
    uint64_t v11 = sub_10000BD20(v2);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      v36[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
      uint64_t v20 = v19;
      sub_100015EF8(v18, v19, v36);
      uint64_t v37 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v14 + 4);
      sub_1000924A0();
      swift_bridgeObjectRelease(v20);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Tried to move asset %s to dynamic mode that does not support it",  v14,  0xCu);
      swift_arrayDestroy(v15, 1LL);
      sub_10000BCC4(v15);
      sub_10000BCC4((uint64_t)v14);
    }

    else
    {

      sub_1000924A0();
    }

    uint64_t v22 = type metadata accessor for ModelManagerError(0LL);
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    uint64_t v24 = swift_allocError(v22, v23, 0LL, 0LL);
    uint64_t v26 = v25;
    *uint64_t v25 = InferenceProviderAssetDescriptor.identifier.getter(v24);
    v26[1] = v27;
    uint64_t v28 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104LL))( v26,  enum case for ModelManagerError.assetDoesNotSupportDynamicMode(_:),  v22);
    return swift_willThrow(v28, v29, v30, v31, v32, v33, v34, v35);
  }

  return result;
}

uint64_t sub_100086BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002257C(v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v11);
  uint64_t v9 = sub_10008C250(v8, v3, a2, a3, a1, (os_log_s *)&v12);
  uint64_t result = sub_100092484(v9);
  if (!v4) {
    return v12;
  }
  return result;
}

void sub_100086C6C()
{
  uint64_t v1 = sub_100083B94();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000C120();
  uint64_t v5 = v4 - v3;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v4 - v3, enum case for LoadState.loaded(_:), v1);
  char v6 = sub_1000BC4C4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v7 = sub_100049B78();
  uint64_t v9 = sub_10009157C(v7, v8);
  if ((v6 & 1) != 0) {
    sub_1000924C0();
  }
  sub_1000924AC(v9, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100022108();
}

void sub_100086D4C()
{
  uint64_t v36 = v1;
  uint64_t v2 = sub_10004FB90();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  sub_100022518();
  uint64_t v33 = v3;
  uint64_t v4 = sub_1000853A4();
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000C110();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10000BE64(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v37, 1LL);
  uint64_t v12 = sub_1000837BC();
  uint64_t v13 = sub_100092320((uint64_t)v10, v11 + *(int *)(v12 + 32));
  uint64_t v31 = InferenceProviderAssetDescriptor.identifier.getter(v13);
  uint64_t v15 = v14;
  uint64_t v16 = v33;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))( v33,  v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost,  v35);
  uint64_t v25 = InferenceProviderAssetDescriptor.version.getter( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37[0],  v37[1],  v37[2]);
  if (v26) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = 0x6E776F6E6B6E753CLL;
  }
  if (v26) {
    unint64_t v28 = v26;
  }
  else {
    unint64_t v28 = 0xE90000000000003ELL;
  }
  BOOL v29 = *(void *)(*(void *)(v11 + *(int *)(v12 + 44)) + 16LL) != 0LL;
  sub_100092320(v7, (uint64_t)v10);
  AssetInfo.init(identifier:cost:version:hasForegroundSession:timeLastRequestEnded:)(v31, v15, v16, v27, v28, v29, v7);
  sub_100022BF8((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_100007448();
}

uint64_t sub_100086EE0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010DC28);
  sub_100003BA0(v0, (uint64_t)qword_10010DC28);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100086F40()
{
  uint64_t Strong = swift_weakLoadStrong(v3);
  sub_1000915D0((uint64_t)v3);
  return Strong;
}

uint64_t sub_100086F8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  char v21 = a7;
  char v22 = a6;
  char v23 = a5;
  UUID.init()(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v28 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v44 = sub_1000833BC();
  uint64_t v46 = *(void *)(v44 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v28, a1, v44);
  BOOL v29 = (void *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path);
  *BOOL v29 = a2;
  v29[1] = a3;
  uint64_t v30 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost;
  uint64_t v41 = sub_10004FB90();
  uint64_t v43 = *(void *)(v41 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v30, a4, v41);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) = v23;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) = v22;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode) = v21;
  sub_100007104((uint64_t)a8, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  uint64_t v31 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v32 = *(void *)(sub_100083B94() - 8);
  sub_100092320(v31, a9);
  uint64_t v33 = (int *)sub_1000837BC();
  sub_100092320(v31 + v33[5], a9);
  uint64_t v34 = v31 + v33[8];
  uint64_t v35 = sub_1000853A4();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v37(v34, a10, v35);
  v37(v31 + v33[9], a11, v35);
  *(_BYTE *)(v31 + v33[6]) = a19;
  *(void *)(v31 + v33[7]) = 0LL;
  *(void *)(v31 + v33[10]) = a12;
  *(void *)(v31 + v33[11]) = a13;
  *(void *)(v31 + v33[12]) = a14;
  *(_BYTE *)(v31 + v33[13]) = 0;
  sub_100007104((uint64_t)a16, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
  *(void *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_neuralEngine) = a17;
  swift_weakInit(v47, a18);
  swift_release(a15);
  swift_release(a18);
  sub_100006F7C(a16);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v38(a11, v35);
  v38(a10, v35);
  sub_100022BF8(a9, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_100006F7C(a8);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(a4, v41);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a1, v44);
  sub_1000918E0((uint64_t)v47, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper);
  return v19;
}

uint64_t sub_100087284(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  v2[19] = sub_100021CC4(v4);
  uint64_t v5 = sub_1000837BC();
  v2[20] = v5;
  v2[21] = sub_10003CE24(*(void *)(v5 - 8));
  v2[22] = sub_100022D14();
  uint64_t v6 = sub_100003B20(&qword_10010DA40);
  v2[23] = sub_100021CC4(*(void *)(v6 - 8));
  uint64_t v7 = sub_100003B20(&qword_10010DA80);
  v2[24] = sub_100021CC4(*(void *)(v7 - 8));
  uint64_t v8 = sub_100003B20(&qword_10010BAA0);
  v2[25] = sub_100021CC4(*(void *)(v8 - 8));
  uint64_t v9 = sub_1000306E4();
  v2[26] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[27] = v10;
  v2[28] = sub_100021CC4(v10);
  uint64_t v11 = sub_1000837B4();
  v2[29] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[30] = v12;
  v2[31] = sub_100021CC4(v12);
  uint64_t v13 = sub_100003B20(&qword_10010B408);
  v2[32] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[33] = v14;
  v2[34] = sub_100021CC4(v14);
  uint64_t v15 = sub_100083B94();
  v2[35] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[36] = v16;
  v2[37] = sub_10003CE24(v16);
  v2[38] = sub_100022D14();
  sub_10000C0D4();
  return sub_100021BCC(v17, v18, v19);
}

uint64_t sub_1000873A8()
{
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  *(void *)(v0 + 312) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v7 = v5 + v6;
  sub_10000BE64(v5 + v6, v0 + 16, 0LL);
  uint64_t v8 = *(void *)(v7 + *(int *)(v4 + 28));
  if (v8)
  {
    *(void *)(v0 + 320) = v8;
    uint64_t v9 = async function pointer to Task.value.getter[1];
    sub_10000C030();
    uint64_t v10 = (void *)swift_task_alloc(v9);
    *(void *)(v0 + 328) = v10;
    sub_100003B20(&qword_10010B468);
    *uint64_t v10 = v0;
    v10[1] = sub_1000879CC;
    return sub_100091E98();
  }

  else
  {
    sub_100091E54();
    sub_1000921F8();
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000920EC(v12);
    sub_1000921C8();
    sub_100091C1C();
    sub_1000922CC();
    sub_1000923E4(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
    uint64_t v13 = sub_1000922D4();
    sub_100092514(v13, v14, v15, v16, v17, v18, v19, v20, v125, v136, v147, v158, v169, v180, v191, v202, v213, v223);
    uint64_t v21 = sub_100092044();
    sub_1000922A4( v21,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.connectionTermination(_:),  v22,  v23,  v24,  v25,  v26,  v27,  v126,  v137,  v148,  v159,  v170,  v181,  v192,  v203,  v214,  v224);
    sub_100091ED4(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
    uint64_t v28 = sub_1000923D4();
    uint64_t v36 = sub_100091FA8( v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v127,  v138,  v149,  v160,  v171,  v182,  v193,  v204,  v215,  v225,  v232,  v239);
    sub_10009215C( v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v128,  v139,  v150,  v161,  v172,  v183,  v194,  v205,  v216,  v226,  v233,  v240,  v246);
    uint64_t v44 = sub_100003B20(&qword_10010B9A0);
    uint64_t v47 = sub_100091EB4(v44, v45, v46, v44);
    sub_100091CFC( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v129,  v140,  v151,  v162,  v173,  v184,  v195,  v206,  v217,  v227,  v234,  v241,  v247,  v251,  v255,  v259,  v263,  v267,  v271,  v275,  v280,  v284,  v287,  v289);
    sub_1000303D0();
    sub_100007570();
    uint64_t v55 = sub_100022024();
    sub_10008373C(v55, &qword_10010DA40);
    sub_100084C34(v56, &qword_10010DA80);
    sub_100092338(v57, &qword_10010BAA0);
    sub_10009227C( v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v130,  v141,  v152,  v163,  v174,  v185,  v196,  v207,  v218,  v228,  v235,  v242,  v248,  v252,  v256,  v260,  v264,  v268,  v272,  v276,  v281);
    sub_100092390();
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v66 = *(void *)(v0 + 128);
    uint64_t v67 = sub_10000BF6C();
    sub_100003BA0(v67, (uint64_t)qword_10010DC28);
    sub_10000C0CC(v66);
    uint64_t v68 = (os_log_s *)sub_10000C158();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (sub_100092380(v69))
    {
      uint64_t v2 = v0 + 96;
      uint64_t v70 = *(void *)(v0 + 128);
      uint64_t v71 = (uint8_t *)sub_10000BCF4(22LL);
      uint64_t v293 = sub_10000BCF4(64LL);
      *(_DWORD *)uint64_t v71 = 136315394;
      uint64_t v3 = sub_1000833BC();
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v73 = sub_100091F94(v72, v72);
      sub_1000832F4(v73, v74);
      sub_100092124( v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v131,  v142,  v153,  v164,  v175,  v186,  v197,  v208,  v219,  v229,  v236,  v243,  v249,  v253,  v257,  v261,  v265,  v269,  v273,  v277,  v282,  v285,  v70,  v0 + 88);
      sub_10000BD28();
      uint64_t v83 = sub_10000BCDC(v70);
      sub_100091DC4(v83, v84, v85, v86, v87, v88, v89, v90, v132, v143, v154, v165, v176, v187, v198, v209);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v92 = sub_100092104(v91, v91);
      sub_10009213C( v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v133,  v144,  v155,  v166,  v177,  v188,  v199,  v210,  v220,  v230,  v237,  v244);
      sub_100091E1C();
      sub_10009210C( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v134,  v145,  v156,  v167,  v178,  v189,  v200,  v211,  v221);
      sub_100022024();
      sub_10000BCDC(v288);
      sub_10000BFDC( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v1,  "Marking asset %s unloaded from %s by termination",  v71);
      uint64_t v66 = v293;
      sub_10000BD8C();
      sub_10000BCC4(v293);
      sub_10000BCC4((uint64_t)v71);
    }

    else
    {
      sub_10000C0C4(*(void *)(v0 + 128));
    }

    sub_100091C94();
    sub_100091FE0();
    uint64_t v108 = *(void *)(v3 + 40);
    sub_100091FEC(v66);
    sub_100092038();
    sub_10002257C(v1, v291);
    sub_100092008();
    swift_endAccess();
    sub_100092014();
    sub_1000921DC();
    sub_100091FE0();
    sub_100091FEC(v66 + *(int *)(v265 + 20));
    sub_100092038();
    sub_10002257C(v1, v292);
    sub_100092008();
    swift_endAccess();
    sub_100092014();
    sub_100092228();
    sub_100092440();
    uint64_t v109 = sub_100092478();
    uint64_t v116 = sub_1000920D4( v109,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v110,  v111,  v112,  v113,  v114,  v115,  v131,  v142,  v153,  v164,  v175,  v186,  v197,  v208,  v219,  v229,  v236,  v243,  v249,  v253,  v257,  v261,  v265,  v269,  v273,  v277,  v282,  v285);
    sub_100091D64( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v135,  v146,  v157,  v168,  v179,  v190,  v201,  v212,  v222,  v231,  v238,  v245,  v250,  v254,  v258,  v262,  v266,  v270,  v274,  v278,  v283,  v286,  v288,  v290);
    sub_100022024();
    sub_10000BF84();
    uint64_t v124 = sub_10000C1E0();
    sub_100084C34(v124, &qword_10010DA40);
    sub_1000304C4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v108 + 8));
    sub_1000922F0();
    v294(v293, v279);
    sub_100091E2C();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_100083A80();
    return sub_100091E7C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000879CC()
{
  if (v0) {
    swift_errorRelease(v0);
  }
  sub_10000C0D4();
  return sub_100021BCC(v3, v4, v5);
}

uint64_t sub_100087A24()
{
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 128);
  swift_release(*(void *)(v0 + 320));
  uint64_t v7 = *(void *)(v6 + v4 + *(int *)(v5 + 28));
  if (v7)
  {
    *(void *)(v0 + 320) = v7;
    uint64_t v8 = async function pointer to Task.value.getter[1];
    sub_10000C030();
    uint64_t v9 = (void *)swift_task_alloc(v8);
    *(void *)(v0 + 328) = v9;
    sub_100003B20(&qword_10010B468);
    *uint64_t v9 = v0;
    v9[1] = sub_1000879CC;
    return sub_100091E98();
  }

  else
  {
    sub_100091E54();
    sub_1000921F8();
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000920EC(v11);
    sub_1000921C8();
    sub_100091C1C();
    sub_1000922CC();
    sub_1000923E4(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
    uint64_t v12 = sub_1000922D4();
    sub_100092514(v12, v13, v14, v15, v16, v17, v18, v19, v124, v135, v146, v157, v168, v179, v190, v201, v212, v222);
    uint64_t v20 = sub_100092044();
    sub_1000922A4( v20,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.connectionTermination(_:),  v21,  v22,  v23,  v24,  v25,  v26,  v125,  v136,  v147,  v158,  v169,  v180,  v191,  v202,  v213,  v223);
    sub_100091ED4(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
    uint64_t v27 = sub_1000923D4();
    uint64_t v35 = sub_100091FA8( v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v126,  v137,  v148,  v159,  v170,  v181,  v192,  v203,  v214,  v224,  v231,  v238);
    sub_10009215C( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v127,  v138,  v149,  v160,  v171,  v182,  v193,  v204,  v215,  v225,  v232,  v239,  v245);
    uint64_t v43 = sub_100003B20(&qword_10010B9A0);
    uint64_t v46 = sub_100091EB4(v43, v44, v45, v43);
    sub_100091CFC( v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v128,  v139,  v150,  v161,  v172,  v183,  v194,  v205,  v216,  v226,  v233,  v240,  v246,  v250,  v254,  v258,  v262,  v266,  v270,  v274,  v279,  v283,  v286,  v288);
    sub_1000303D0();
    sub_100007570();
    uint64_t v54 = sub_100022024();
    sub_10008373C(v54, &qword_10010DA40);
    sub_100084C34(v55, &qword_10010DA80);
    sub_100092338(v56, &qword_10010BAA0);
    sub_10009227C( v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v129,  v140,  v151,  v162,  v173,  v184,  v195,  v206,  v217,  v227,  v234,  v241,  v247,  v251,  v255,  v259,  v263,  v267,  v271,  v275,  v280);
    sub_100092390();
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v65 = *(void *)(v0 + 128);
    uint64_t v66 = sub_10000BF6C();
    sub_100003BA0(v66, (uint64_t)qword_10010DC28);
    sub_10000C0CC(v65);
    uint64_t v67 = (os_log_s *)sub_10000C158();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (sub_100092380(v68))
    {
      uint64_t v2 = v0 + 96;
      uint64_t v69 = *(void *)(v0 + 128);
      uint64_t v70 = (uint8_t *)sub_10000BCF4(22LL);
      uint64_t v292 = sub_10000BCF4(64LL);
      *(_DWORD *)uint64_t v70 = 136315394;
      uint64_t v3 = sub_1000833BC();
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v72 = sub_100091F94(v71, v71);
      sub_1000832F4(v72, v73);
      sub_100092124( v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v130,  v141,  v152,  v163,  v174,  v185,  v196,  v207,  v218,  v228,  v235,  v242,  v248,  v252,  v256,  v260,  v264,  v268,  v272,  v276,  v281,  v284,  v69,  v0 + 88);
      sub_10000BD28();
      uint64_t v82 = sub_10000BCDC(v69);
      sub_100091DC4(v82, v83, v84, v85, v86, v87, v88, v89, v131, v142, v153, v164, v175, v186, v197, v208);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v91 = sub_100092104(v90, v90);
      sub_10009213C( v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v132,  v143,  v154,  v165,  v176,  v187,  v198,  v209,  v219,  v229,  v236,  v243);
      sub_100091E1C();
      sub_10009210C(v99, v100, v101, v102, v103, v104, v105, v106, v133, v144, v155, v166, v177, v188, v199, v210, v220);
      sub_100022024();
      sub_10000BCDC(v287);
      sub_10000BFDC( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v1,  "Marking asset %s unloaded from %s by termination",  v70);
      uint64_t v65 = v292;
      sub_10000BD8C();
      sub_10000BCC4(v292);
      sub_10000BCC4((uint64_t)v70);
    }

    else
    {
      sub_10000C0C4(*(void *)(v0 + 128));
    }

    sub_100091C94();
    sub_100091FE0();
    uint64_t v107 = *(void *)(v3 + 40);
    sub_100091FEC(v65);
    sub_100092038();
    sub_10002257C(v1, v290);
    sub_100092008();
    swift_endAccess();
    sub_100092014();
    sub_1000921DC();
    sub_100091FE0();
    sub_100091FEC(v65 + *(int *)(v264 + 20));
    sub_100092038();
    sub_10002257C(v1, v291);
    sub_100092008();
    swift_endAccess();
    sub_100092014();
    sub_100092228();
    sub_100092440();
    uint64_t v108 = sub_100092478();
    uint64_t v115 = sub_1000920D4( v108,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v109,  v110,  v111,  v112,  v113,  v114,  v130,  v141,  v152,  v163,  v174,  v185,  v196,  v207,  v218,  v228,  v235,  v242,  v248,  v252,  v256,  v260,  v264,  v268,  v272,  v276,  v281,  v284);
    sub_100091D64( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v134,  v145,  v156,  v167,  v178,  v189,  v200,  v211,  v221,  v230,  v237,  v244,  v249,  v253,  v257,  v261,  v265,  v269,  v273,  v277,  v282,  v285,  v287,  v289);
    sub_100022024();
    sub_10000BF84();
    uint64_t v123 = sub_10000C1E0();
    sub_100084C34(v123, &qword_10010DA40);
    sub_1000304C4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
    sub_1000922F0();
    v293(v292, v278);
    sub_100091E2C();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_100083A80();
    return sub_100091E7C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_100088034()
{
  *(void *)(v1 + 2sub_100006F7C(v0 + 4) = v0;
  return sub_10000C088((uint64_t)sub_100088048, 0LL);
}

uint64_t sub_100088048()
{
  if (qword_10010B0C8 != -1) {
    swift_once(&qword_10010B0C8, sub_100086EE0);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_10000BF6C();
  uint64_t v3 = (os_log_s *)sub_100003BA0(v2, (uint64_t)qword_10010DC28);
  sub_10000BD20(v1);
  sub_10000C158();
  os_log_type_t v4 = sub_10000C108();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[3];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v8 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v18 = v8;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v10 = sub_100092104(v9, v9);
    sub_100015EF8(v10, v11, &v18);
    v0[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    sub_10000BD28();
    sub_10000BCDC(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Asset %s received handleConnectionTermination", v7, 0xCu);
    sub_100021F38(v8);
    sub_10000BCC4(v8);
    sub_10000BCC4((uint64_t)v7);
  }

  else
  {
    sub_10000BCDC(v0[3]);
  }

  uint64_t v13 = sub_100086F40();
  v0[4] = v13;
  if (!v13)
  {
    sub_100030544();
    __asm { BR              X0 }
  }

  uint64_t v14 = (void *)swift_task_alloc(dword_10010DE4C);
  v0[5] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100088240;
  sub_100030544();
  return sub_100087284(v15);
}

uint64_t sub_100088240()
{
  return sub_10000BD98();
}

uint64_t sub_100088278()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000882A0()
{
  uint64_t v1 = sub_1000833BC();
  sub_1000220F4(v1);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8));
  uint64_t v2 = sub_10004FB90();
  sub_1000220F4(v2);
  sub_100006F7C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection));
  sub_10002F90C( v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100006F7C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_neuralEngine));
  sub_1000915D0(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  sub_1000220F4(v3);
  sub_1000075C0();
}

uint64_t sub_100088364()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for InferenceProviderAsset(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010DC68, (uint64_t)&nominal type descriptor for InferenceProviderAsset);
}

uint64_t sub_10008839C(uint64_t a1)
{
  uint64_t result = type metadata accessor for InferenceProviderAssetDescriptor(319LL);
  if (v3 <= 0x3F)
  {
    v7[0] = *(void *)(result - 8) + 64LL;
    v7[1] = &unk_1000D9DC8;
    uint64_t result = type metadata accessor for AssetCost(319LL);
    if (v4 <= 0x3F)
    {
      v7[2] = *(void *)(result - 8) + 64LL;
      v7[3] = &unk_1000D9DE0;
      v7[4] = &unk_1000D9DE0;
      v7[5] = &unk_1000D9DE0;
      v7[6] = &unk_1000D9DF8;
      uint64_t result = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(319LL);
      if (v5 <= 0x3F)
      {
        v7[7] = *(void *)(result - 8) + 64LL;
        v7[8] = &unk_1000D9DF8;
        v7[9] = (char *)&value witness table for Builtin.NativeObject + 64;
        v7[10] = &unk_1000D9E10;
        uint64_t result = type metadata accessor for UUID(319LL);
        if (v6 <= 0x3F)
        {
          v7[11] = *(void *)(result - 8) + 64LL;
          return swift_updateClassMetadata2(a1, 256LL, 12LL, v7, a1 + 80);
        }
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for InferenceProviderAsset.ManagerOwnedState(uint64_t a1)
{
  return sub_100047EF0( a1,  qword_10010DDA0,  (uint64_t)&nominal type descriptor for InferenceProviderAsset.ManagerOwnedState);
}

uint64_t getEnumTagSinglePayload for InferenceProviderAsset.WeakManagerWrapper(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for InferenceProviderAsset.WeakManagerWrapper( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderAsset.WeakManagerWrapper()
{
  return &type metadata for InferenceProviderAsset.WeakManagerWrapper;
}

void *sub_100088510(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (void *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t State = type metadata accessor for LoadState(0LL);
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(State - 8) + 16LL);
    v8(a1, a2, State);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), State);
    uint64_t v9 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    uint64_t v10 = *(void *)((char *)a2 + v9);
    *(void *)((char *)a1 + v9) = v10;
    uint64_t v11 = a3[8];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_retain(v10);
    v15(v12, v13, v14);
    v15((char *)a1 + a3[9], (char *)a2 + a3[9], v14);
    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    uint64_t v18 = *(void *)((char *)a2 + v16);
    *(void *)((char *)a1 + v++*(void *)(v0 + 16) = v18;
    uint64_t v19 = *(void *)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v19;
    uint64_t v20 = a3[12];
    uint64_t v21 = a3[13];
    uint64_t v22 = *(void *)((char *)a2 + v20);
    *(void *)((char *)a1 + v20) = v22;
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
  }

  return a1;
}

uint64_t sub_100088650(uint64_t a1, int *a2)
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(State - 8) + 8LL);
  v5(a1, State);
  v5(a1 + a2[5], State);
  swift_release(*(void *)(a1 + a2[7]));
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(a1 + a2[9], v7);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[12]));
}

uint64_t sub_100088714(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 16LL);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v9 = *(void *)(a2 + v8);
  *(void *)(a1 + v8) = v9;
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_retain(v9);
  v14(v11, v12, v13);
  v14(a1 + a3[9], a2 + a3[9], v13);
  uint64_t v15 = a3[10];
  uint64_t v16 = a3[11];
  uint64_t v17 = *(void *)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  uint64_t v18 = *(void *)(a2 + v16);
  *(void *)(a1 + v++*(void *)(v0 + 16) = v18;
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = *(void *)(a2 + v19);
  *(void *)(a1 + v19) = v21;
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_100088828(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 24LL);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v8 = a3[7];
  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  swift_retain(v10);
  swift_release(v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL);
  v15(v12, v13, v14);
  v15(a1 + a3[9], a2 + a3[9], v14);
  uint64_t v16 = a3[10];
  uint64_t v17 = *(void *)(a2 + v16);
  uint64_t v18 = *(void *)(a1 + v16);
  *(void *)(a1 + v++*(void *)(v0 + 16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = *(void *)(a2 + v19);
  uint64_t v21 = *(void *)(a1 + v19);
  *(void *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[12];
  uint64_t v23 = *(void *)(a2 + v22);
  uint64_t v24 = *(void *)(a1 + v22);
  *(void *)(a1 + v22) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_10008896C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 32LL);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL);
  v13(v10, v11, v12);
  v13(a1 + a3[9], a2 + a3[9], v12);
  uint64_t v14 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v1sub_100006F7C(v0 + 4) = *(void *)(a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t sub_100088A64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 40LL);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v9 = *(void *)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release(v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL);
  v14(v11, v12, v13);
  v14(a1 + a3[9], a2 + a3[9], v13);
  uint64_t v15 = a3[10];
  uint64_t v16 = *(void *)(a1 + v15);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[11];
  uint64_t v18 = *(void *)(a1 + v17);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[12];
  uint64_t v20 = *(void *)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100088B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100088B90);
}

uint64_t sub_100088B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100083B94();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return sub_1000060B4(v8, a2, v7);
  }

  uint64_t v9 = sub_1000853A4();
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v9;
    uint64_t v8 = a1 + *(int *)(a3 + 32);
    return sub_1000060B4(v8, a2, v7);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 40));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_100088C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100088C34);
}

uint64_t sub_100088C34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100083B94();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
    return sub_100005FB0(v10, a2, a2, v9);
  }

  uint64_t result = sub_1000853A4();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = a1 + *(int *)(a4 + 32);
    return sub_100005FB0(v10, a2, a2, v9);
  }

  *(void *)(a1 + *(int *)(a4 + sub_10000BCE4(*(void *)(v0 + 40)) = (a2 - 1);
  return result;
}

uint64_t sub_100088CC8(uint64_t a1)
{
  uint64_t result = type metadata accessor for LoadState(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = v5[0];
    v5[2] = &unk_1000D9DE0;
    v5[3] = "\b";
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v6 = *(void *)(result - 8) + 64LL;
      uint64_t v7 = v6;
      uint64_t v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      unint64_t v11 = &unk_1000D9DE0;
      swift_initStructMetadata(a1, 256LL, 10LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void sub_100088D74()
{
}

uint64_t sub_100088DA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_connectionTerminationIdentifier;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100088DE4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DE44);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B5F8;
  return sub_100088034();
}

uint64_t sub_100088E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[25] = a6;
  v7[26] = v6;
  v7[23] = a4;
  v7[24] = a5;
  v7[21] = a2;
  v7[22] = a3;
  v7[20] = a1;
  uint64_t v8 = sub_10004FB90();
  v7[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[28] = v9;
  v7[29] = sub_100021CC4(v9);
  uint64_t v10 = type metadata accessor for ModelManagerError(0LL);
  v7[30] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[31] = v11;
  v7[32] = sub_10003CE24(v11);
  v7[33] = sub_100022D14();
  uint64_t v12 = type metadata accessor for InferenceError(0LL);
  v7[34] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[35] = v13;
  v7[36] = sub_10003CE24(v13);
  v7[37] = sub_100022D14();
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0LL);
  v7[38] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v7[39] = v15;
  v7[40] = sub_100021CC4(v15);
  uint64_t v16 = sub_100083B94();
  v7[41] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v7[42] = v17;
  v7[43] = sub_10003CE24(v17);
  v7[44] = sub_100022D14();
  uint64_t v18 = sub_100003B20(&qword_10010BAA0);
  v7[45] = sub_100021CC4(*(void *)(v18 - 8));
  uint64_t v19 = sub_100003B20(&qword_10010B408);
  v7[46] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v7[47] = v20;
  v7[48] = sub_100021CC4(v20);
  uint64_t v21 = sub_1000306E4();
  v7[49] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v7[50] = v22;
  v7[51] = sub_100021CC4(v22);
  sub_10000C0D4();
  return sub_100021BCC(v23, v24, v25);
}

uint64_t sub_100088F54()
{
  uint64_t v35 = v1;
  uint64_t v36 = v2;
  uint64_t v34 = v0;
  if (qword_10010B0C8 != -1) {
    swift_once(&qword_10010B0C8, sub_100086EE0);
  }
  uint64_t v3 = v0[26];
  uint64_t v4 = sub_10000BF6C();
  int v5 = (os_log_s *)sub_100003BA0(v4, (uint64_t)qword_10010DC28);
  v0[52] = v5;
  sub_10000C0CC(v3);
  sub_10000C158();
  os_log_type_t v6 = sub_10000C108();
  uint64_t v7 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = v0[51];
    uint64_t v29 = v0[49];
    uint64_t v30 = v0[50];
    uint64_t v9 = v0[26];
    uint64_t v10 = (uint8_t *)sub_10000BCF4(22LL);
    uint64_t v31 = sub_10000BCF4(64LL);
    v33[0] = v31;
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v12 = sub_100091F94(v11, v11);
    sub_100015EF8(v12, v13, v33);
    v0[18] = v14;
    sub_1000920A4((uint64_t)(v0 + 18), (uint64_t)(v0 + 19));
    sub_10000BD28();
    sub_10000BCDC(v9);
    sub_100092094();
    uint64_t v15 = *(void *)(v9 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
    sub_10000729C( (void *)(v9 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  *(void *)(v9 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
    sub_100092174();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10009248C();
    dispatch thunk of CustomStringConvertible.description.getter(v29, v16);
    sub_100092270();
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v8, v29);
    sub_100092020(v17, v18, v33);
    v0[19] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20);
    uint64_t v20 = v15;
    uint64_t v7 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode;
    swift_bridgeObjectRelease(v20);
    sub_10000BCDC(v9);
    sub_10000BFDC((void *)&_mh_execute_header, v5, v6, "Loading asset %s into %s", v10);
    sub_10000BD8C();
    sub_10000BCC4(v31);
    sub_10000BCC4((uint64_t)v10);
  }

  else
  {
    sub_10000C0C4(v0[26]);
  }

  uint64_t v21 = v0[26];
  uint64_t v22 = v7[1];
  v0[53] = v22;
  uint64_t v23 = *(void *)(v21 + v22 + 32);
  sub_10009229C((void *)(v21 + v22));
  uint64_t v24 = sub_100092368(*(void *)(v23 + 64));
  uint64_t v32 = v25;
  uint64_t v26 = (void *)swift_task_alloc(v24);
  v0[54] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1000891E4;
  uint64_t v27 = sub_1000306EC(v0[26]);
  return v32(v27);
}

uint64_t sub_1000891E4()
{
  return sub_10000BD98();
}

uint64_t sub_10008921C()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[46];
  sub_1000918F0(v0[22], v1, &qword_10010BAA0);
  int v3 = sub_1000060B4(v1, 1LL, v2);
  uint64_t v4 = v0[48];
  if (v3 == 1)
  {
    sub_100030CC8();
    uint64_t v5 = sub_1000922CC();
    sub_100083DC8(v5, &qword_10010BAA0);
  }

  else
  {
    (*(void (**)(void, void, void))(v0[47] + 32LL))(v0[48], v0[45], v0[46]);
  }

  uint64_t v67 = v0[50];
  uint64_t v69 = v0[49];
  uint64_t v74 = v0[48];
  uint64_t v6 = v0[44];
  uint64_t v7 = v0[42];
  uint64_t v63 = v0[41];
  uint64_t v65 = v7;
  uint64_t v8 = v0[26];
  uint64_t v71 = v0[25];
  uint64_t v73 = v0[24];
  __int128 v70 = *((_OWORD *)v0 + 11);
  uint64_t v72 = v0[21];
  uint64_t v9 = (void *)(v8 + v0[53]);
  uint64_t v10 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  v0[55] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  uint64_t v11 = *(void *)(v8 + v10 + 24);
  uint64_t v12 = *(void *)(v8 + v10 + 32);
  os_log_type_t v68 = sub_10009229C((void *)(v8 + v10));
  v0[56] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v13 = sub_1000922D4();
  uint64_t v59 = v14;
  uint64_t v61 = v13;
  uint64_t v77 = v4;
  uint64_t v21 = InferenceProviderAssetDescriptor.version.getter(v13, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v55 = v22;
  uint64_t v57 = v21;
  unsigned int v75 = enum case for LoadState.loaded(_:);
  (*(void (**)(uint64_t))(v7 + 104))(v6);
  uint64_t v23 = v9[3];
  sub_100092304(v9, v23);
  sub_100092154(v23);
  uint64_t v24 = sub_1000923D4();
  uint64_t v26 = v25;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8);
  v0[57] = v27;
  sub_100092520(v27, v48, v49, v50, v51, v52, v53, v54, v55, v57, v59, v61, v63, v65, v67, (uint64_t)v68, v69);
  v0[58] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v12 + 40))( v74,  v62,  v60,  v58,  v56,  v73,  v6,  v72,  v24,  v26,  v70,  *((void *)&v70 + 1),  v71,  v11,  v12);
  sub_10000C000();
  sub_100022B4C();
  sub_100022D34();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
  v0[59] = v28;
  v28(v6, v64);
  uint64_t v29 = sub_10000BD20(v8);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.info.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v33 = v0[26];
  if (v32)
  {
    uint64_t v34 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v78 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v35 = sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
    sub_1000832F4(v37, v38);
    v0[17] = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18);
    sub_10000BD28();
    sub_10000BCDC(v33);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "loadIn executing on %s", v34, 0xCu);
    sub_100021F38(v78);
    sub_10000BCC4(v78);
    sub_10000BCC4((uint64_t)v34);
  }

  else
  {
    sub_10000BCDC(v0[26]);
  }

  uint64_t v40 = v0[43];
  uint64_t v41 = (void *)(v0[26] + v0[53]);
  uint64_t v42 = v41[3];
  uint64_t v43 = v41[4];
  sub_10000729C(v41, v42);
  sub_100092508(v40, v75);
  uint64_t v44 = sub_100092368(*(void *)(v43 + 24));
  uint64_t v76 = v45;
  uint64_t v46 = (void *)swift_task_alloc(v44);
  v0[60] = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_1000895A4;
  return v76(v77, v0[43], v0[24], v0[48], v42, v43);
}

uint64_t sub_1000895A4()
{
  *(void *)(v0 + 488) = v1;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v0 + 472))(*(void *)(v0 + 344), *(void *)(v0 + 328));
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_100089608(uint64_t a1)
{
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (sub_10002275C(v4))
  {
    uint64_t v5 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v1, "loadIn finished", v5, 2u);
    sub_10000BCC4((uint64_t)v5);
  }

  uint64_t v6 = (os_log_s *)v2[26];

  sub_1000B9268( *(void *)((char *)v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path),  *(void *)((char *)v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8),  *((_BYTE *)v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode));
  uint64_t v7 = v2[52];
  uint64_t v8 = sub_10000C0CC(v2[26]);
  Logger.logObject.getter(v8);
  os_log_type_t v9 = sub_10000C108();
  if (sub_10003D070(v9))
  {
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t))v2[57];
    uint64_t v10 = v2[51];
    uint64_t v49 = v2[49];
    uint64_t v11 = v2[26];
    uint64_t v12 = (void *)(v11 + v2[53]);
    uint64_t v13 = (uint8_t *)sub_10000BCF4(22LL);
    uint64_t v52 = sub_10000BCF4(64LL);
    uint64_t v53 = v52;
    *(_DWORD *)uint64_t v13 = 136315394;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v15 = sub_100030B70(v14, v14);
    sub_1000832F4(v15, v16);
    v2[13] = v17;
    sub_1000920A4((uint64_t)(v2 + 13), (uint64_t)(v2 + 14));
    sub_10000BD28();
    sub_10000BCDC(v11);
    sub_100092094();
    sub_10000729C(v12, v12[3]);
    sub_100092174();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10009248C();
    sub_100091F94(v18, v19);
    sub_100092270();
    uint64_t v20 = v50(v10, v49);
    sub_100092020(v20, v21, &v53);
    v2[14] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 14, v2 + 15);
    sub_1000228C4();
    sub_10000BCDC(v11);
    sub_10000BFDC((void *)&_mh_execute_header, v6, (os_log_type_t)v7, "Finished loading asset %s into %s", v13);
    sub_10000BD8C();
    sub_10000BCC4(v52);
    sub_10000BCC4((uint64_t)v13);
  }

  else
  {
    sub_10000C0C4(v2[26]);
  }

  uint64_t v44 = v2[51];
  uint64_t v43 = v2[47];
  uint64_t v45 = v2[45];
  uint64_t v46 = v2[44];
  uint64_t v47 = v2[43];
  uint64_t v23 = v2[39];
  uint64_t v24 = v2[40];
  uint64_t v41 = v2[38];
  uint64_t v48 = v2[37];
  uint64_t v51 = v2[32];
  uint64_t v42 = sub_1000921A0();
  uint64_t v40 = InferenceProviderAssetDescriptor.identifier.getter(v42);
  uint64_t v32 = InferenceProviderAssetDescriptor.version.getter(v40, v25, v26, v27, v28, v29, v30, v31);
  AssetCost.onDeviceMemory.getter(v32);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))( v24,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v41);
  sub_10009220C();
  v37(v33, v34, v35, v36);
  sub_1000228C4();
  sub_10000C280();
  sub_10000C1E0();
  sub_100091FF8(v23);
  sub_100092290(v43);
  swift_task_dealloc(v44);
  sub_10000C1B8();
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  sub_100030494();
  swift_task_dealloc(v48);
  sub_100092424();
  sub_100092498();
  swift_task_dealloc(v51);
  sub_100083A80();
  uint64_t v38 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10002FE74(v38);
}

uint64_t sub_1000899A8()
{
  uint64_t v1 = v0[61];
  v0[9] = v1;
  uint64_t v2 = v0 + 9;
  uint64_t v3 = v0 + 37;
  uint64_t v4 = v0[37];
  swift_errorRetain(v1);
  uint64_t v5 = sub_100003B20(&qword_10010B468);
  if ((sub_100092258(v4, (uint64_t)(v0 + 9), v5) & 1) == 0)
  {
LABEL_5:
    uint64_t v6 = v0 + 5;
    LOBYTE(v3) = (_BYTE)v0 - 16;
    uint64_t v7 = v0[61];
    uint64_t v175 = v5;
    uint64_t v8 = v0[33];
    swift_errorRelease(v0[9]);
    v0[5] = v7;
    swift_errorRetain(v7);
    if (sub_100092258(v8, (uint64_t)(v0 + 5), v175))
    {
      uint64_t v3 = v0 + 33;
      os_log_type_t v9 = v0 + 31;
      if (sub_100092378(v0[31]) == enum case for ModelManagerError.inferenceError(_:))
      {
        uint64_t v10 = v0[34];
        uint64_t v11 = v0[35];
        uint64_t v12 = v0[33];
        (*(void (**)(uint64_t, void))(v0[31] + 96LL))(v12, v0[30]);
        os_log_type_t v9 = v0 + 35;
      }

      sub_100030234(*v9);
    }

    os_log_type_t v68 = (os_log_s *)v0[52];
    uint64_t v69 = v0[26];
    swift_errorRelease(v0[5]);
    swift_retain_n(v69, 3LL);
    sub_100023C90();
    swift_retain();
    uint64_t v70 = sub_100023C90();
    Logger.logObject.getter(v70);
    os_log_type_t v71 = sub_100022604();
    BOOL v72 = sub_10002275C(v71);
    uint64_t v73 = v0[61];
    if (v72)
    {
      uint64_t v151 = (uint64_t (*)(uint64_t, uint64_t))v0[57];
      sub_10009218C();
      uint64_t v149 = v74;
      uint64_t v75 = v0[26];
      uint64_t v77 = (void *)(v75 + v76);
      uint64_t v78 = sub_10000BCF4(32LL);
      uint64_t v157 = (void *)sub_10000BCF4(8LL);
      uint64_t v165 = sub_10000BCF4(64LL);
      v177[0] = v165;
      *(_DWORD *)uint64_t v78 = 136315650;
      sub_1000833BC();
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v80 = sub_1000921F0(v79, v79);
      sub_100092264(v80, v81);
      v0[10] = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
      sub_10000BD28();
      sub_10000BCDC(v75);
      *(_WORD *)(v78 + 12) = 2080;
      uint64_t v83 = v77[3];
      sub_100092304(v77, v83);
      sub_100092154(v83);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      sub_1000921F0(v84, v84);
      sub_100092270();
      uint64_t v85 = v151(v69, v149);
      sub_100092020(v85, v86, v177);
      v0[11] = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
      sub_1000228C4();
      sub_10000BCDC(v75);
      *(_WORD *)(v78 + 22) = 2112;
      swift_errorRetain(v73);
      uint64_t v88 = _swift_stdlib_bridgeErrorToNSError(v73);
      v0[12] = v88;
      sub_1000301B8((uint64_t)(v0 + 12), (uint64_t)(v0 + 13));
      *uint64_t v157 = v88;
      sub_100085E94();
      sub_100085E94();
      _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v3,  "Failed to load asset %s into %s: %@",  (uint8_t *)v78,  0x20u);
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v157);
      sub_10000BCC4((uint64_t)v157);
      sub_1000307B4(v165);
      sub_10000BCC4(v165);
      sub_10000BCC4(v78);
    }

    else
    {
      sub_10000C0C4(v0[26]);
      sub_100085E94();
      sub_100085E94();
    }

    uint64_t v89 = v0[61];
    os_log_t logb = (os_log_t)v0[48];
    uint64_t v166 = v0[58];
    uint64_t v91 = v0[39];
    uint64_t v90 = v0[40];
    uint64_t v152 = v0[38];
    *(void *)typec = v0[36];
    uint64_t v172 = v0[34];
    uint64_t v92 = v0[29];
    uint64_t v144 = v0[28];
    uint64_t v146 = v0[27];
    uint64_t v158 = v0[25];
    uint64_t v93 = (void *)(v0[26] + v0[55]);
    uint64_t v94 = v93[3];
    uint64_t v95 = v93[4];
    uint64_t v154 = sub_10009229C(v93);
    uint64_t v150 = InferenceProviderAssetDescriptor.identifier.getter(v154);
    uint64_t v97 = v96;
    uint64_t v147 = InferenceProviderAssetDescriptor.version.getter(v150, v96, v98, v99, v100, v101, v102, v103);
    uint64_t v105 = v104;
    uint64_t v106 = static AssetCost.zero.getter();
    uint64_t v107 = AssetCost.onDeviceMemory.getter(v106);
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v92, v146);
    (*(void (**)(uint64_t, void, uint64_t))(v91 + 104))( v90,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:),  v152);
    uint64_t v108 = *(void (**)(os_log_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 48);
    sub_100023C90();
    v108(logb, v150, v97, v147, v105, v107, v90, v166, v89, v158, v94, v95);
    swift_errorRelease(v89);
    sub_1000303D0();
    sub_100007570();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v152);
    v0[6] = v89;
    sub_100023C90();
    if ((swift_dynamicCast(*(void *)typec, v0 + 6, v175, v172, 6LL) & 1) != 0)
    {
      uint64_t v109 = 35LL;
    }

    else
    {
      uint64_t v110 = v0[61];
      uint64_t v111 = v0[32];
      uint64_t v112 = v0[30];
      v0[7] = v110;
      swift_errorRetain(v110);
      if (!swift_dynamicCast(v111, v0 + 7, v175, v112, 6LL))
      {
        uint64_t v122 = v0[61];
        uint64_t v123 = v0[58];
        uint64_t v125 = v0[34];
        uint64_t v124 = v0[35];
        sub_100048A38( (unint64_t *)&qword_10010C7B0,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceError,  (uint64_t)&protocol conformance descriptor for InferenceError);
        swift_allocError(v125, v126, 0LL, 0LL);
        uint64_t v128 = v127;
        swift_getErrorValue(v122, v0 + 8, v0 + 2);
        uint64_t v129 = Error.localizedDescription.getter(v0[3], v0[4]);
        uint64_t v131 = v130;
        uint64_t v132 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
        InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)( v129,  v131,  0LL,  0xE000000000000000LL,  0LL,  v132,  0LL);
        uint64_t v133 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v124 + 104))( v128,  enum case for InferenceError.loadFailed(_:),  v125);
        swift_willThrow(v133, v134, v135, v136, v137, v138, v139, v140);
        swift_release(v123);
        swift_errorRelease(v122);
        goto LABEL_26;
      }

      uint64_t v109 = 31LL;
    }

    uint64_t v113 = sub_100030234(v0[v109]);
    uint64_t v114 = v0[58];
    swift_willThrow(v113, v115, v116, v117, v118, v119, v120, v121);
    swift_release(v114);
LABEL_26:
    sub_100092290(v0[47]);
    sub_10000C140();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_10000BFE4();
    sub_100092424();
    sub_100092498();
    uint64_t v67 = (uint64_t (*)(void))v0[1];
    return sub_10002FE74(v67);
  }

  if (sub_100092378(v0[35]) != enum case for InferenceError.alreadyLoaded(_:))
  {
    sub_100030234(v0[35]);
    goto LABEL_5;
  }

  uint64_t v6 = v0 + 9;
LABEL_8:
  uint64_t v13 = *v3;
  uint64_t v15 = v0[34];
  uint64_t v14 = v0[35];
  swift_errorRelease(v0[61]);
  sub_100022CF4(v13, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  swift_errorRelease(*v6);
  uint64_t v16 = sub_10000C0CC(v0[26]);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (sub_100049854(v17))
  {
    uint64_t v162 = (uint64_t (*)(uint64_t, os_log_t))v0[57];
    sub_10009218C();
    uint64_t v155 = v20;
    os_log_t log = v19;
    uint64_t v21 = v0[26];
    uint64_t v23 = (void *)(v21 + v22);
    uint64_t v24 = sub_10000BCF4(22LL);
    uint64_t type = sub_10000BCF4(64LL);
    v177[0] = type;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
    sub_100092264(v27, v28);
    v0[15] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v155);
    sub_10000BD28();
    sub_10000BCDC(v21);
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v30 = v23[3];
    sub_10000729C(v23, v30);
    uint64_t v31 = v30;
    uint64_t v2 = v0 + 9;
    sub_1000923DC(v31);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    dispatch thunk of CustomStringConvertible.description.getter(log, v32);
    sub_1000924B4();
    uint64_t v33 = v162(v15, log);
    sub_10009202C(v33, v34, v177);
    v0[16] = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v0 + 17);
    sub_100022B4C();
    sub_10000BCDC(v21);
    sub_10000BFDC((void *)&_mh_execute_header, v17, v18, "Asset %s already loaded into %s", (uint8_t *)v24);
    sub_10000BD8C();
    sub_10000BCC4(type);
    sub_10000BCC4(v24);
  }

  else
  {
    sub_10000C0C4(v0[26]);
  }

  uint64_t v36 = sub_10000C0CC(v0[26]);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (sub_100049854(v37))
  {
    uint64_t v39 = (uint64_t)(v2 + 5);
    sub_10009218C();
    uint64_t v163 = v40;
    typea = v41;
    uint64_t v42 = v0[26];
    os_log_type_t v173 = v38;
    uint64_t v44 = (void *)(v42 + v43);
    uint64_t v45 = sub_10000BCF4(22LL);
    uint64_t v174 = sub_10000BCF4(64LL);
    v177[0] = v174;
    *(_DWORD *)uint64_t v45 = 136315394;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v47 = sub_1000921F0(v46, v46);
    sub_100092264(v47, v48);
    v0[13] = v49;
    sub_1000920A4((uint64_t)(v0 + 13), v39);
    sub_10000BD28();
    sub_10000BCDC(v42);
    *(_WORD *)(v45 + 12) = 2080;
    uint64_t v50 = v44[3];
    sub_100092304(v44, v50);
    sub_100092154(v50);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v52 = sub_100092104(v51, v51);
    uint64_t v54 = v53;
    typea(v15, v163);
    sub_100015EF8(v52, v54, v177);
    v0[14] = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v0 + 15);
    sub_10000C000();
    sub_10000BCDC(v42);
    sub_10000BFDC((void *)&_mh_execute_header, v37, v173, "Finished loading asset %s into %s", (uint8_t *)v45);
    sub_10000BD8C();
    sub_10000BCC4(v174);
    sub_10000BCC4(v45);
  }

  else
  {
    sub_10000C0C4(v0[26]);
  }

  uint64_t v153 = v0[51];
  uint64_t v148 = v0[47];
  uint64_t v156 = v0[45];
  os_log_t loga = (os_log_t)v0[44];
  uint64_t v56 = v0[39];
  uint64_t v57 = v0[40];
  uint64_t v143 = v0[38];
  uint64_t v164 = v0[43];
  *(void *)typeb = v0[37];
  uint64_t v171 = v0[36];
  uint64_t v176 = v0[29];
  uint64_t v145 = sub_1000921A0();
  uint64_t v142 = InferenceProviderAssetDescriptor.identifier.getter(v145);
  uint64_t v65 = InferenceProviderAssetDescriptor.version.getter(v142, v58, v59, v60, v61, v62, v63, v64);
  AssetCost.onDeviceMemory.getter(v65);
  (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))( v57,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v143);
  sub_10009220C();
  sub_10009241C(v66);
  sub_1000228C4();
  sub_10000C280();
  sub_10000C1E0();
  sub_100091FF8(v56);
  sub_100092290(v148);
  swift_task_dealloc(v153);
  sub_10000C1B8();
  swift_task_dealloc(v156);
  swift_task_dealloc(loga);
  swift_task_dealloc(v164);
  sub_100030494();
  swift_task_dealloc(*(void *)typeb);
  swift_task_dealloc(v171);
  sub_100092424();
  sub_100092498();
  swift_task_dealloc(v176);
  uint64_t v67 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10002FE74(v67);
}

uint64_t sub_10008A5A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = v2;
  return sub_10000C088((uint64_t)sub_10008A5B8, a1);
}

uint64_t sub_10008A5B8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002257C(v2, v0 + 16);
  uint64_t v3 = sub_100083B94();
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)(v3 - 8) + 24LL);
  uint64_t v5 = sub_100049B78();
  v4(v5);
  uint64_t v6 = sub_1000837BC();
  ((void (*)(uint64_t, uint64_t, uint64_t))v4)(v2 + *(int *)(v6 + 20), v1, v3);
  uint64_t v7 = *(int *)(v6 + 28);
  uint64_t v8 = *(void *)(v2 + v7);
  *(void *)(v2 + v7) = 0LL;
  sub_10008545C();
  __n128 v9 = swift_release(v8);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v9);
}

uint64_t sub_10008A660@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, os_log_s *a8@<X8>)
{
  uint64_t v248 = a7;
  uint64_t v246 = a6;
  uint64_t v245 = a5;
  uint64_t v244 = a4;
  uint64_t v251 = a3;
  uint64_t v268 = a2;
  os_log_t v260 = a8;
  uint64_t v9 = sub_100003B20(&qword_10010DA40);
  uint64_t v249 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v250 = v10;
  uint64_t v259 = (uint64_t)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003B20(&qword_10010DA80);
  uint64_t v247 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v242 = v12;
  uint64_t v258 = (uint64_t)&v231 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003B20(&qword_10010BAA0);
  uint64_t v243 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v243 + 64);
  __chkstk_darwin(v13);
  uint64_t v256 = (uint64_t)&v231 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  uint64_t v254 = *(void *)(v15 - 8);
  uint64_t v255 = v15;
  uint64_t v16 = *(void *)(v254 + 64);
  __chkstk_darwin(v15);
  uint64_t v253 = (char *)&v231 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v17);
  uint64_t v257 = (uint64_t)&v231 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v263 = *(void *)(v19 - 8);
  uint64_t v264 = v19;
  __chkstk_darwin(v19);
  uint64_t v262 = (char *)&v231 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v266 = *(void (**)(char *, uint64_t))(State - 8);
  uint64_t v267 = State;
  uint64_t v22 = *((void *)v266 + 8);
  uint64_t v23 = __chkstk_darwin(State);
  uint64_t v24 = (char *)&v231 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v231 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v252 = (char *)&v231 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v231 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v265 = (char *)&v231 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v231 - v35;
  uint64_t v37 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  if ((*(_BYTE *)(a1 + *(int *)(v37 + 52)) & 1) != 0)
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v38, (uint64_t)qword_10010DC28);
    uint64_t v39 = v268;
    uint64_t v40 = swift_retain_n(v268, 2LL);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v271 = v44;
      uint64_t v45 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
      uint64_t v49 = v48;
      sub_100015EF8(v47, v48, &v271);
      uint64_t v269 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v43 + 4);
      swift_release_n(v39, 2LL);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Tried to load invalidated asset: %s", (uint8_t *)v43, 0xCu);
      swift_arrayDestroy(v44, 1LL);
      uint64_t v51 = v44;
LABEL_11:
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

LABEL_20:
      uint64_t v108 = type metadata accessor for ModelManagerError(0LL);
      sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v108, v109, 0LL, 0LL);
      uint64_t v111 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v108 - 8) + 104LL))( v110,  enum case for ModelManagerError.internalError(_:),  v108);
      return swift_willThrow(v111, v112, v113, v114, v115, v116, v117, v118);
    }

    uint64_t v75 = v39;
    uint64_t v76 = 2LL;
    goto LABEL_19;
  }

  uint64_t v52 = v37;
  uint64_t v53 = *(int *)(v37 + 28);
  if (*(void *)(a1 + v53))
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v54 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v54, (uint64_t)qword_10010DC28);
    uint64_t v55 = v268;
    uint64_t v56 = swift_retain_n(v268, 4LL);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v41, v57))
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v267 = swift_slowAlloc(64LL, -1LL);
      uint64_t v271 = v267;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v58 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v58, v59);
      uint64_t v62 = v61;
      sub_100015EF8(v60, v61, &v271);
      uint64_t v269 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v43 + 4);
      swift_release_n(v55, 2LL);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v64 = (void *)(v55 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v65 = *(void *)(v55 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v66 = *(void *)(v55 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C(v64, v65);
      uint64_t v67 = v262;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v66);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v68 = v264;
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v264, v69);
      uint64_t v72 = v71;
      (*(void (**)(char *, uint64_t))(v263 + 8))(v67, v68);
      sub_100015EF8(v70, v72, &v271);
      uint64_t v269 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v43 + 14);
      swift_release_n(v268, 2LL);
      swift_bridgeObjectRelease(v72);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v57,  "loadIfNeccesary called with pending transition task for %s with %s",  (uint8_t *)v43,  0x16u);
      uint64_t v74 = v267;
      swift_arrayDestroy(v267, 2LL);
      uint64_t v51 = v74;
      goto LABEL_11;
    }

    uint64_t v75 = v55;
    uint64_t v76 = 4LL;
LABEL_19:
    swift_release_n(v75, v76);
    goto LABEL_20;
  }

  uint64_t v236 = v14;
  uint64_t v237 = v53;
  uint64_t v77 = (void (*)(char *, uint64_t, uint64_t))*((void *)v266 + 2);
  uint64_t v241 = v36;
  v77(v36, a1, v267);
  uint64_t v78 = *(int *)(v52 + 20);
  uint64_t v238 = a1;
  uint64_t v240 = (char *)(a1 + v78);
  uint64_t v79 = v241;
  uint64_t v239 = v77;
  ((void (*)(char *))v77)(v265);
  if ((sub_1000BC4C4() & 1) != 0)
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v80 = type metadata accessor for Logger(0LL);
    uint64_t v81 = sub_100003BA0(v80, (uint64_t)qword_10010DC28);
    uint64_t v82 = v268;
    uint64_t v83 = swift_retain_n(v268, 4LL);
    uint64_t v235 = v81;
    uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v85 = static os_log_type_t.default.getter();
    uint64_t v86 = v32;
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v87 = swift_slowAlloc(22LL, -1LL);
      uint64_t v234 = swift_slowAlloc(64LL, -1LL);
      uint64_t v271 = v234;
      *(_DWORD *)uint64_t v87 = 136315394;
      uint64_t v232 = v87 + 4;
      os_log_t v231 = v84;
      uint64_t v88 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v88, v89);
      uint64_t v92 = v91;
      sub_100015EF8(v90, v91, &v271);
      uint64_t v269 = v93;
      uint64_t v233 = v270;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v232);
      swift_release_n(v82, 2LL);
      swift_bridgeObjectRelease(v92);
      *(_WORD *)(v87 + 12) = 2080;
      uint64_t v232 = v87 + 14;
      uint64_t v94 = (void *)(v82 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v95 = *(void *)(v82 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v96 = *(void *)(v82 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C(v94, v95);
      uint64_t v97 = v86;
      uint64_t v98 = v262;
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v96);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      LOBYTE(v96) = v85;
      uint64_t v99 = v264;
      uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter(v264, v100);
      uint64_t v103 = v102;
      uint64_t v104 = v98;
      uint64_t v86 = v97;
      (*(void (**)(char *, uint64_t))(v263 + 8))(v104, v99);
      sub_100015EF8(v101, v103, &v271);
      uint64_t v269 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v233, v232);
      swift_release_n(v268, 2LL);
      swift_bridgeObjectRelease(v103);
      os_log_t v106 = v231;
      _os_log_impl( (void *)&_mh_execute_header,  v231,  (os_log_type_t)v96,  "loadIfNecessary entering for asset %s with %s",  (uint8_t *)v87,  0x16u);
      uint64_t v107 = v234;
      swift_arrayDestroy(v234, 2LL);
      swift_slowDealloc(v107, -1LL, -1LL);
      swift_slowDealloc(v87, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v82, 4LL);
    }

    uint64_t v160 = enum case for LoadState.loaded(_:);
    uint64_t v161 = v266;
    uint64_t v162 = v267;
    uint64_t v163 = (void (*)(char *, void, uint64_t))*((void *)v266 + 13);
    v163(v86, enum case for LoadState.loaded(_:), v267);
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v164 = v241;
    char v166 = dispatch thunk of static Equatable.== infix(_:_:)(v241, v86, v162, v165);
    uint64_t v167 = (void (*)(char *, uint64_t))*((void *)v161 + 1);
    v167(v86, v162);
    if ((v166 & 1) != 0)
    {
      uint64_t v168 = v268;
      uint64_t v169 = swift_retain_n(v268, 4LL);
      uint64_t v170 = (os_log_s *)Logger.logObject.getter(v169);
      os_log_type_t v171 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v170, v171))
      {
        uint64_t v172 = swift_slowAlloc(22LL, -1LL);
        uint64_t v266 = v167;
        uint64_t v173 = v172;
        uint64_t v259 = swift_slowAlloc(64LL, -1LL);
        uint64_t v271 = v259;
        *(_DWORD *)uint64_t v173 = 136315394;
        uint64_t v174 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
        sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v176 = dispatch thunk of CustomStringConvertible.description.getter(v174, v175);
        uint64_t v178 = v177;
        sub_100015EF8(v176, v177, &v271);
        uint64_t v269 = v179;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v173 + 4);
        swift_release_n(v168, 2LL);
        swift_bridgeObjectRelease(v178);
        *(_WORD *)(v173 + 12) = 2080;
        uint64_t v180 = (void *)(v168 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v181 = *(void *)(v168
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        uint64_t v182 = *(void *)(v168
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10000729C(v180, v181);
        uint64_t v183 = v262;
        (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v181, v182);
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        uint64_t v184 = v264;
        uint64_t v186 = dispatch thunk of CustomStringConvertible.description.getter(v264, v185);
        uint64_t v188 = v187;
        (*(void (**)(char *, uint64_t))(v263 + 8))(v183, v184);
        sub_100015EF8(v186, v188, &v271);
        uint64_t v269 = v189;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v173 + 14);
        swift_release_n(v268, 2LL);
        swift_bridgeObjectRelease(v188);
        _os_log_impl( (void *)&_mh_execute_header,  v170,  v171,  "Not loading asset %s into %s: already loaded",  (uint8_t *)v173,  0x16u);
        uint64_t v190 = v259;
        swift_arrayDestroy(v259, 2LL);
        swift_slowDealloc(v190, -1LL, -1LL);
        swift_slowDealloc(v173, -1LL, -1LL);

        uint64_t v191 = (uint64_t (*)(char *, uint64_t))v266;
        uint64_t v192 = v267;
        v266(v265, v267);
        uint64_t result = v191(v241, v192);
      }

      else
      {
        swift_release_n(v168, 4LL);

        uint64_t v230 = v267;
        v167(v265, v267);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v167)(v241, v230);
      }

      *(void *)os_log_t v260 = 0LL;
    }

    else
    {
      uint64_t v206 = v164;
      uint64_t v207 = (void (*)(char *, char *, uint64_t))v239;
      v239(v86, (uint64_t)v206, v162);
      uint64_t v208 = v240;
      v167(v240, v162);
      v163(v208, v160, v162);
      uint64_t v209 = type metadata accessor for TaskPriority(0LL);
      sub_100005FB0(v257, 1LL, 1LL, v209);
      uint64_t v210 = v254;
      (*(void (**)(char *, uint64_t, uint64_t))(v254 + 16))(v253, v244, v255);
      sub_1000918F0(v245, v256, &qword_10010BAA0);
      sub_1000918F0(v246, v258, &qword_10010DA80);
      v207(v252, v86, v162);
      sub_1000918F0(v248, v259, &qword_10010DA40);
      sub_100048A38(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000D9CE8);
      uint64_t v212 = v211;
      uint64_t v213 = *(unsigned __int8 *)(v210 + 80);
      uint64_t v214 = (v213 + 48) & ~v213;
      uint64_t v215 = *(unsigned __int8 *)(v243 + 80);
      uint64_t v216 = (v16 + v215 + v214) & ~v215;
      uint64_t v217 = *(unsigned __int8 *)(v247 + 80);
      uint64_t v218 = (v236 + v217 + v216) & ~v217;
      uint64_t v219 = *((unsigned __int8 *)v266 + 80);
      uint64_t v220 = (v242 + v219 + v218) & ~v219;
      uint64_t v221 = *(unsigned __int8 *)(v249 + 80);
      uint64_t v263 = (v22 + v221 + v220) & ~v221;
      uint64_t v222 = (void (*)(uint64_t, uint64_t))v167;
      uint64_t v223 = (char *)swift_allocObject(&unk_1001043E8, v263 + v250, v213 | v215 | v217 | v219 | v221 | 7);
      uint64_t v264 = (uint64_t)v86;
      uint64_t v224 = v251;
      *((void *)v223 + 2) = v251;
      *((void *)v223 + 3) = v212;
      uint64_t v225 = v268;
      *((void *)v223 + sub_100006F7C(v0 + 4) = v268;
      *((void *)v223 + 5) = v224;
      (*(void (**)(char *, char *, uint64_t))(v254 + 32))(&v223[v214], v253, v255);
      sub_100091AC8(v256, (uint64_t)&v223[v216], &qword_10010BAA0);
      sub_100091AC8(v258, (uint64_t)&v223[v218], &qword_10010DA80);
      (*((void (**)(char *, char *, uint64_t))v266 + 4))(&v223[v220], v252, v162);
      sub_100091AC8(v259, (uint64_t)&v223[v263], &qword_10010DA40);
      swift_retain_n(v224, 2LL);
      swift_retain(v225);
      sub_10000C81C(v257, (uint64_t)&unk_10010DE80, (uint64_t)v223);
      uint64_t v227 = v226;
      v222(v264, v162);
      v222((uint64_t)v265, v162);
      v222((uint64_t)v241, v162);
      uint64_t v228 = v238;
      uint64_t v229 = v237;
      swift_release(*(void *)(v238 + v237));
      *(void *)(v228 + v229) = v227;
      *(void *)os_log_t v260 = v227;
      return swift_retain(v227);
    }
  }

  else
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v120 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v120, (uint64_t)qword_10010DC28);
    uint64_t v121 = v79;
    uint64_t v122 = v267;
    uint64_t v123 = (void (*)(char *, char *, uint64_t))v239;
    v239(v27, (uint64_t)v121, v267);
    v123(v24, v265, v122);
    uint64_t v124 = v268;
    uint64_t v125 = swift_retain_n(v268, 4LL);
    uint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
    os_log_type_t v127 = static os_log_type_t.fault.getter();
    int v128 = v127;
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v129 = swift_slowAlloc(42LL, -1LL);
      os_log_t v260 = v126;
      uint64_t v130 = v129;
      uint64_t v261 = swift_slowAlloc(128LL, -1LL);
      uint64_t v271 = v261;
      *(_DWORD *)uint64_t v130 = 136315906;
      sub_100048A38( &qword_10010CF68,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
      uint64_t v132 = v131;
      LODWORD(v259) = v128;
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter(v122, v131);
      uint64_t v135 = v134;
      sub_100015EF8(v133, v134, &v271);
      uint64_t v269 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v130 + 4);
      swift_bridgeObjectRelease(v135);
      uint64_t v137 = (void (*)(char *, uint64_t))*((void *)v266 + 1);
      v137(v27, v267);
      *(_WORD *)(v130 + 12) = 2080;
      uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter(v267, v132);
      uint64_t v140 = v139;
      sub_100015EF8(v138, v139, &v271);
      uint64_t v269 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v130 + 14);
      swift_bridgeObjectRelease(v140);
      v137(v24, v267);
      *(_WORD *)(v130 + 22) = 2080;
      uint64_t v142 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v144 = dispatch thunk of CustomStringConvertible.description.getter(v142, v143);
      uint64_t v146 = v145;
      sub_100015EF8(v144, v145, &v271);
      uint64_t v269 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v130 + 24);
      swift_release_n(v124, 2LL);
      swift_bridgeObjectRelease(v146);
      *(_WORD *)(v130 + 32) = 2080;
      uint64_t v148 = *(void *)(v124 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v149 = *(void *)(v124 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C( (void *)(v124 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v148);
      uint64_t v150 = v262;
      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v148, v149);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v151 = v264;
      uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter(v264, v152);
      uint64_t v155 = v154;
      (*(void (**)(char *, uint64_t))(v263 + 8))(v150, v151);
      sub_100015EF8(v153, v155, &v271);
      uint64_t v269 = v156;
      uint64_t v122 = v267;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v130 + 34);
      swift_release_n(v124, 2LL);
      swift_bridgeObjectRelease(v155);
      os_log_t v157 = v260;
      _os_log_impl( (void *)&_mh_execute_header,  v260,  (os_log_type_t)v259,  "loadIfNecessary called with unmatching states (%s != %s) for %s with %s",  (uint8_t *)v130,  0x2Au);
      uint64_t v158 = v261;
      swift_arrayDestroy(v261, 4LL);
      swift_slowDealloc(v158, -1LL, -1LL);
      uint64_t v159 = v266;
      swift_slowDealloc(v130, -1LL, -1LL);
    }

    else
    {
      uint64_t v159 = v266;
      uint64_t v137 = (void (*)(char *, uint64_t))*((void *)v266 + 1);
      v137(v27, v122);
      v137(v24, v122);

      swift_release_n(v124, 4LL);
    }

    uint64_t v193 = (void (*)(uint64_t, char *, uint64_t))*((void *)v159 + 3);
    uint64_t v194 = v241;
    v193((uint64_t)v240, v241, v122);
    uint64_t v195 = type metadata accessor for ModelManagerError(0LL);
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v195, v196, 0LL, 0LL);
    uint64_t v198 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v195 - 8) + 104LL))( v197,  enum case for ModelManagerError.internalError(_:),  v195);
    swift_willThrow(v198, v199, v200, v201, v202, v203, v204, v205);
    v137(v265, v122);
    return ((uint64_t (*)(char *, uint64_t))v137)(v194, v122);
  }

  return result;
}

uint64_t sub_10008BA7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = v20;
  v8[20] = v21;
  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  v8[16] = a6;
  v8[14] = a4;
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v8[21] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[22] = v11;
  v8[23] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  v8[24] = State;
  uint64_t v13 = *(void *)(State - 8);
  v8[25] = v13;
  v8[26] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  v8[27] = v14;
  unint64_t v15 = (*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[28] = swift_task_alloc(v15);
  v8[29] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for Date(0LL);
  v8[30] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[31] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[32] = swift_task_alloc(v18);
  v8[33] = swift_task_alloc(v18);
  return swift_task_switch(sub_10008BB88, a5, 0LL);
}

uint64_t sub_10008BB88()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v7 = v0[27];
  uint64_t v8 = v0[14];
  uint64_t v9 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v0[34] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v10 = v8 + v9;
  sub_10000BE64(v8 + v9, (uint64_t)(v0 + 2), 0LL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v10 + *(int *)(v7 + 32), v3);
  static Date.now.getter(v11);
  sub_1000923CC(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v5 + *(int *)(v7 + 32), v2, v3);
  sub_10009157C(v5, v6);
  sub_10002257C(v10, (uint64_t)(v0 + 5));
  sub_100092458();
  uint64_t v12 = sub_10008545C();
  sub_1000924AC(v12, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v13 = (void *)swift_task_alloc(dword_10010DE8C);
  v0[35] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10008BC94;
  sub_1000306EC(v0[15]);
  sub_10002FF0C();
  return sub_100088E28(v14, v15, v16, v17, v18, v19);
}

uint64_t sub_10008BC94()
{
  *(void *)(v0 + 288) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_10008BED4;
  }
  else {
    uint64_t v4 = sub_10008BCE8;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 120), 0LL);
}

uint64_t sub_10008BCE8()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_10010DE64);
  v0[37] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_10008BD50;
  uint64_t v2 = sub_1000306EC(v0[15]);
  return sub_10008A5A0(v2, v3);
}

uint64_t sub_10008BD50()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[15];
  sub_10000BCE4(v0[37]);
  sub_100030250(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return sub_100021BCC((uint64_t)sub_10008BDAC, v3, 0LL);
}

uint64_t sub_10008BDAC()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return v1();
}

uint64_t sub_10008BE1C()
{
  return sub_10000BD98();
}

void sub_10008BE54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 264);
  uint64_t v10 = *(void *)(v8 + 248);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100022CF4(v9, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  sub_10000C140();
  sub_10000BFE4();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_10002FF0C();
  __asm { BR              X0 }

uint64_t sub_10008BED4()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v5 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[14] + v0[34];
  sub_10009157C(v7, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v4 + *(int *)(v6 + 32), v1, v2);
  sub_10009157C(v4, v5);
  sub_10002257C(v7, (uint64_t)(v0 + 8));
  sub_100092458();
  sub_10008545C();
  sub_10002F90C(v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10010B0C8 != -1) {
    swift_once(&qword_10010B0C8, sub_100086EE0);
  }
  uint64_t v8 = v0[36];
  uint64_t v9 = v0[14];
  uint64_t v10 = sub_10000BF6C();
  uint64_t v11 = (os_log_s *)sub_100003BA0(v10, (uint64_t)qword_10010DC28);
  sub_10000BD20(v9);
  swift_errorRetain(v8);
  sub_100021D80();
  swift_errorRetain(v8);
  uint64_t v12 = sub_100021D80();
  uint64_t v13 = v11;
  Logger.logObject.getter(v12);
  os_log_type_t v14 = sub_100022604();
  if (os_log_type_enabled(v11, v14))
  {
    uint64_t v32 = v0[22];
    uint64_t v15 = v0[14];
    uint64_t v16 = (_DWORD *)sub_10000BCF4(32LL);
    uint64_t v33 = (void *)sub_10000BCF4(8LL);
    uint64_t v34 = sub_10000BCF4(64LL);
    uint64_t v35 = v34;
    *uint64_t v16 = 136315650;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v18 = sub_100030B70(v17, v17);
    sub_100015EF8(v18, v19, &v35);
    v0[11] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
    sub_10000BCDC(v15);
    sub_10000BD28();
    sub_100092094();
    os_log_type_t v31 = v14;
    uint64_t v21 = *(void *)(v15 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
    sub_10000729C( (void *)(v15 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v21);
    sub_1000923DC(v21);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_100092104(v22, v22);
    sub_1000924B4();
    uint64_t v23 = sub_100091FF8(v32);
    sub_10009202C(v23, v24, &v35);
    v0[12] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
    sub_10000BCDC(v15);
    sub_100022B4C();
    sub_100091F08();
    uint64_t v26 = sub_100092450();
    v0[13] = v26;
    sub_1000301B8((uint64_t)(v0 + 13), (uint64_t)(v0 + 14));
    *uint64_t v33 = v26;
    sub_100091DBC();
    sub_100091DBC();
    sub_10009224C((void *)&_mh_execute_header, v13, v31, "Failed to load asset %s into %s: %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v33);
    sub_10000BCC4((uint64_t)v33);
    sub_1000307B4(v34);
    sub_10000BCC4(v34);
    sub_10000BCC4((uint64_t)v16);
  }

  else
  {
    sub_10000C0C4(v0[14]);
    sub_100091DBC();
    sub_100091DBC();
  }

  uint64_t v27 = (void *)swift_task_alloc(dword_10010DE64);
  v0[38] = v27;
  void *v27 = v0;
  v27[1] = sub_10008BE1C;
  uint64_t v28 = sub_1000306EC(v0[15]);
  return sub_10008A5A0(v28, v29);
}

uint64_t sub_10008C250@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, os_log_s *a6@<X8>)
{
  os_log_t v278 = a6;
  uint64_t v271 = a5;
  uint64_t v268 = a3;
  uint64_t v269 = a4;
  uint64_t v286 = a2;
  uint64_t v7 = sub_100003B20(&qword_10010DA40);
  uint64_t v270 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v270 + 64);
  __chkstk_darwin(v7);
  uint64_t v277 = (uint64_t)&v255 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v276 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  uint64_t v274 = *(void *)(v276 - 8);
  uint64_t v9 = *(void *)(v274 + 64);
  __chkstk_darwin(v276);
  uint64_t v273 = (char *)&v255 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v10);
  uint64_t v275 = (uint64_t)&v255 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v282 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v281 = (char *)&v255 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v283 = *(void *)(State - 8);
  uint64_t v14 = *(void *)(v283 + 64);
  uint64_t v15 = __chkstk_darwin(State);
  uint64_t v16 = (char *)&v255 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v255 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v272 = (char *)&v255 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v280 = (char *)&v255 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v284 = (char *)&v255 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v255 - v26;
  uint64_t v28 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  if ((*(_BYTE *)(a1 + *(int *)(v28 + 52)) & 1) != 0)
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v29, (uint64_t)qword_10010DC28);
    uint64_t v30 = v286;
    uint64_t v31 = swift_retain_n(v286, 2LL);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v34 = 136315138;
      uint64_t v289 = (char *)v35;
      uint64_t v36 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      uint64_t v40 = v39;
      sub_100015EF8(v38, v39, (uint64_t *)&v289);
      uint64_t v287 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v34 + 4);
      swift_release_n(v30, 2LL);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Tried to unload invalidated asset: %s", (uint8_t *)v34, 0xCu);
      swift_arrayDestroy(v35, 1LL);
      uint64_t v42 = v35;
LABEL_11:
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);

LABEL_21:
      uint64_t v97 = type metadata accessor for ModelManagerError(0LL);
      sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v97, v98, 0LL, 0LL);
      uint64_t v100 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v97 - 8) + 104LL))( v99,  enum case for ModelManagerError.internalError(_:),  v97);
      return swift_willThrow(v100, v101, v102, v103, v104, v105, v106, v107);
    }

    uint64_t v67 = v30;
    uint64_t v68 = 2LL;
    goto LABEL_20;
  }

  uint64_t v43 = v28;
  uint64_t v44 = *(int *)(v28 + 28);
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v267 = v12;
  if (v45)
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v46, (uint64_t)qword_10010DC28);
    uint64_t v47 = v286;
    uint64_t v48 = swift_retain_n(v286, 4LL);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v49))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t State = swift_slowAlloc(64LL, -1LL);
      uint64_t v289 = (char *)State;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v50 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
      uint64_t v54 = v53;
      sub_100015EF8(v52, v53, (uint64_t *)&v289);
      uint64_t v287 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v34 + 4);
      swift_release_n(v47, 2LL);
      swift_bridgeObjectRelease(v54);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v56 = (void *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v57 = *(void *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v58 = *(void *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C(v56, v57);
      uint64_t v59 = v281;
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v58);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v60 = v267;
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v267, v61);
      uint64_t v64 = v63;
      (*(void (**)(char *, uint64_t))(v282 + 8))(v59, v60);
      sub_100015EF8(v62, v64, (uint64_t *)&v289);
      uint64_t v287 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v34 + 14);
      swift_release_n(v286, 2LL);
      swift_bridgeObjectRelease(v64);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v49,  "unloadIfNecessary called with pending transition task for %s with %s",  (uint8_t *)v34,  0x16u);
      uint64_t v66 = State;
      swift_arrayDestroy(State, 2LL);
      uint64_t v42 = v66;
      goto LABEL_11;
    }

    uint64_t v67 = v47;
    uint64_t v68 = 4LL;
LABEL_20:
    swift_release_n(v67, v68);
    goto LABEL_21;
  }

  uint64_t v262 = v8;
  uint64_t v263 = v44;
  uint64_t v69 = a1;
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v283 + 16);
  uint64_t v266 = v27;
  v70(v27, v69, State);
  uint64_t v265 = (char *)(v69 + *(int *)(v43 + 20));
  uint64_t v71 = v266;
  uint64_t v264 = v70;
  ((void (*)(char *))v70)(v284);
  if ((sub_1000BC4C4() & 1) != 0)
  {
    uint64_t v72 = *(void *)(*(void *)(v69 + *(int *)(v43 + 48)) + 16LL);
    if (v72)
    {
      if (qword_10010B0C8 != -1) {
        swift_once(&qword_10010B0C8, sub_100086EE0);
      }
      uint64_t v73 = type metadata accessor for Logger(0LL);
      sub_100003BA0(v73, (uint64_t)qword_10010DC28);
      uint64_t v74 = v286;
      uint64_t v75 = swift_retain_n(v286, 4LL);
      uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
      os_log_type_t v77 = static os_log_type_t.default.getter();
      int v78 = v77;
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v79 = swift_slowAlloc(32LL, -1LL);
        uint64_t v280 = (char *)swift_slowAlloc(64LL, -1LL);
        uint64_t v289 = v280;
        *(_DWORD *)uint64_t v79 = 136315650;
        LODWORD(v279) = v78;
        uint64_t v80 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
        sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v80, v81);
        uint64_t v84 = v83;
        sub_100015EF8(v82, v83, (uint64_t *)&v289);
        uint64_t v287 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v79 + 4);
        swift_release_n(v74, 2LL);
        swift_bridgeObjectRelease(v84);
        *(_WORD *)(v79 + 12) = 2080;
        uint64_t v86 = (void *)(v74 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v87 = *(void *)(v74 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        uint64_t v88 = *(void *)(v74 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10000729C(v86, v87);
        uint64_t v89 = v281;
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v88);
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        uint64_t v90 = v267;
        uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter(v267, v91);
        uint64_t v94 = v93;
        (*(void (**)(char *, uint64_t))(v282 + 8))(v89, v90);
        sub_100015EF8(v92, v94, (uint64_t *)&v289);
        uint64_t v287 = v95;
        uint64_t v71 = v266;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v79 + 14);
        swift_release_n(v286, 2LL);
        swift_bridgeObjectRelease(v94);
        *(_WORD *)(v79 + 22) = 2048;
        uint64_t v287 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v79 + 24);
        _os_log_impl( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v279,  "Not unloading asset %s from %s: in use by %ld requests",  (uint8_t *)v79,  0x20u);
        uint64_t v96 = v280;
        swift_arrayDestroy(v280, 2LL);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v74, 4LL);
      }

      uint64_t v187 = State;
      unint64_t v188 = sub_100081BF4();
      uint64_t v189 = swift_allocError(&type metadata for InferenceProviderAssetManagerInternalError, v188, 0LL, 0LL);
      *uint64_t v190 = 0LL;
      v190[1] = 0LL;
      swift_willThrow(v189, v190, v191, v192, v193, v194, v195, v196);
      uint64_t v197 = *(void (**)(char *, uint64_t))(v283 + 8);
      v197(v284, v187);
      return ((uint64_t (*)(char *, uint64_t))v197)(v71, v187);
    }

    else
    {
      uint64_t v259 = v69;
      uint64_t v161 = v267;
      if (qword_10010B0C8 != -1) {
        swift_once(&qword_10010B0C8, sub_100086EE0);
      }
      uint64_t v162 = type metadata accessor for Logger(0LL);
      uint64_t v163 = sub_100003BA0(v162, (uint64_t)qword_10010DC28);
      uint64_t v164 = v286;
      uint64_t v165 = swift_retain_n(v286, 4LL);
      uint64_t v260 = v163;
      char v166 = (os_log_s *)Logger.logObject.getter(v165);
      os_log_type_t v167 = static os_log_type_t.default.getter();
      int v168 = v167;
      if (os_log_type_enabled(v166, v167))
      {
        uint64_t v169 = swift_slowAlloc(22LL, -1LL);
        LODWORD(v261) = v168;
        uint64_t v170 = v169;
        uint64_t v258 = swift_slowAlloc(64LL, -1LL);
        uint64_t v289 = (char *)v258;
        *(_DWORD *)uint64_t v170 = 136315394;
        os_log_t v257 = v166;
        uint64_t v171 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
        sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v173 = dispatch thunk of CustomStringConvertible.description.getter(v171, v172);
        uint64_t v175 = v174;
        sub_100015EF8(v173, v174, (uint64_t *)&v289);
        uint64_t v287 = v176;
        uint64_t v256 = v288;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v170 + 4);
        swift_release_n(v164, 2LL);
        swift_bridgeObjectRelease(v175);
        *(_WORD *)(v170 + 12) = 2080;
        uint64_t v255 = v170 + 14;
        uint64_t v177 = *(void *)(v164
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        uint64_t v178 = *(void *)(v164
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10000729C( (void *)(v164 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v177);
        uint64_t v179 = v281;
        (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v177, v178);
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        uint64_t v181 = dispatch thunk of CustomStringConvertible.description.getter(v161, v180);
        uint64_t v183 = v182;
        (*(void (**)(char *, uint64_t))(v282 + 8))(v179, v161);
        sub_100015EF8(v181, v183, (uint64_t *)&v289);
        uint64_t v287 = v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v256, v255);
        swift_release_n(v164, 2LL);
        swift_bridgeObjectRelease(v183);
        os_log_t v185 = v257;
        _os_log_impl( (void *)&_mh_execute_header,  v257,  (os_log_type_t)v261,  "unloadIfNecessary entering for asset %s with %s",  (uint8_t *)v170,  0x16u);
        uint64_t v186 = v258;
        swift_arrayDestroy(v258, 2LL);
        swift_slowDealloc(v186, -1LL, -1LL);
        swift_slowDealloc(v170, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v164, 4LL);
      }

      uint64_t v198 = enum case for LoadState.unloaded(_:);
      uint64_t v199 = v283;
      uint64_t v200 = *(void (**)(char *, uint64_t, uint64_t))(v283 + 104);
      uint64_t v201 = v280;
      uint64_t v202 = State;
      v200(v280, enum case for LoadState.unloaded(_:), State);
      sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
      uint64_t v203 = v266;
      char v205 = dispatch thunk of static Equatable.== infix(_:_:)(v266, v201, v202, v204);
      uint64_t v206 = *(void (**)(char *, uint64_t))(v199 + 8);
      v206(v201, v202);
      uint64_t v261 = v206;
      if ((v205 & 1) != 0)
      {
        uint64_t v207 = v286;
        uint64_t v208 = swift_retain_n(v286, 4LL);
        uint64_t v209 = (os_log_s *)Logger.logObject.getter(v208);
        os_log_type_t v210 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v209, v210))
        {
          uint64_t v211 = swift_slowAlloc(22LL, -1LL);
          uint64_t v283 = swift_slowAlloc(64LL, -1LL);
          uint64_t v289 = (char *)v283;
          *(_DWORD *)uint64_t v211 = 136315394;
          uint64_t v212 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
          sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
          uint64_t v214 = dispatch thunk of CustomStringConvertible.description.getter(v212, v213);
          uint64_t v216 = v215;
          sub_100015EF8(v214, v215, (uint64_t *)&v289);
          uint64_t v287 = v217;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v211 + 4);
          swift_release_n(v207, 2LL);
          swift_bridgeObjectRelease(v216);
          *(_WORD *)(v211 + 12) = 2080;
          uint64_t v218 = (void *)(v207 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
          uint64_t v219 = *(void *)(v207
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 24);
          uint64_t v220 = *(void *)(v207
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 32);
          sub_10000729C(v218, v219);
          uint64_t v221 = v281;
          (*(void (**)(uint64_t, uint64_t))(v220 + 8))(v219, v220);
          sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
          uint64_t v222 = v267;
          uint64_t v224 = dispatch thunk of CustomStringConvertible.description.getter(v267, v223);
          uint64_t v226 = v225;
          (*(void (**)(char *, uint64_t))(v282 + 8))(v221, v222);
          sub_100015EF8(v224, v226, (uint64_t *)&v289);
          uint64_t v287 = v227;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v211 + 14);
          swift_release_n(v286, 2LL);
          swift_bridgeObjectRelease(v226);
          _os_log_impl( (void *)&_mh_execute_header,  v209,  v210,  "Not unloading asset %s from %s: already unloaded",  (uint8_t *)v211,  0x16u);
          uint64_t v228 = v283;
          swift_arrayDestroy(v283, 2LL);
          swift_slowDealloc(v228, -1LL, -1LL);
          swift_slowDealloc(v211, -1LL, -1LL);
        }

        else
        {
          swift_release_n(v207, 4LL);
        }

        uint64_t v253 = State;
        uint64_t v254 = (uint64_t (*)(char *, uint64_t))v261;
        v261(v284, State);
        uint64_t result = v254(v266, v253);
        *(void *)os_log_t v278 = 0LL;
      }

      else
      {
        uint64_t v229 = v203;
        uint64_t v230 = (void (*)(char *, char *, uint64_t))v264;
        v264(v201, (uint64_t)v229, v202);
        os_log_t v231 = v265;
        v206(v265, v202);
        v200(v231, v198, v202);
        uint64_t v232 = type metadata accessor for TaskPriority(0LL);
        sub_100005FB0(v275, 1LL, 1LL, v232);
        v230(v272, v201, v202);
        uint64_t v233 = v274;
        (*(void (**)(char *, uint64_t, uint64_t))(v274 + 16))(v273, v268, v276);
        sub_1000918F0(v269, v277, &qword_10010DA40);
        sub_100048A38( &qword_10010B8E0,  type metadata accessor for InferenceProviderAssetManager,  (uint64_t)&unk_1000D9CE8);
        uint64_t v235 = v234;
        uint64_t v236 = v283;
        uint64_t v237 = *(unsigned __int8 *)(v283 + 80);
        uint64_t v238 = (v237 + 40) & ~v237;
        uint64_t v239 = *(unsigned __int8 *)(v233 + 80);
        uint64_t v240 = (v14 + v239 + v238) & ~v239;
        uint64_t v241 = *(unsigned __int8 *)(v270 + 80);
        uint64_t v242 = (v9 + v241 + v240) & ~v241;
        unint64_t v243 = (v262 + v242 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v244 = (char *)swift_allocObject(&unk_100104398, v243 + 8, v237 | v239 | v241 | 7);
        uint64_t v246 = v271;
        uint64_t v245 = v272;
        *((void *)v244 + 2) = v271;
        *((void *)v244 + 3) = v235;
        uint64_t v247 = v286;
        *((void *)v244 + sub_100006F7C(v0 + 4) = v286;
        (*(void (**)(char *, char *, uint64_t))(v236 + 32))(&v244[v238], v245, v202);
        (*(void (**)(char *, char *, uint64_t))(v274 + 32))(&v244[v240], v273, v276);
        sub_100091AC8(v277, (uint64_t)&v244[v242], &qword_10010DA40);
        *(void *)&v244[v243] = v246;
        swift_retain_n(v246, 2LL);
        swift_retain(v247);
        sub_10000C81C(v275, (uint64_t)&unk_10010DE58, (uint64_t)v244);
        uint64_t v249 = v248;
        uint64_t v250 = v261;
        v261(v280, v202);
        v250(v284, v202);
        v250(v266, v202);
        uint64_t v251 = v263;
        uint64_t v252 = v259;
        swift_release(*(void *)(v259 + v263));
        *(void *)(v252 + v251) = v249;
        *(void *)os_log_t v278 = v249;
        return swift_retain(v249);
      }
    }
  }

  else
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v109 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v109, (uint64_t)qword_10010DC28);
    uint64_t v110 = State;
    uint64_t v111 = (void (*)(char *, char *, uint64_t))v264;
    v264(v19, (uint64_t)v71, State);
    v111(v16, v284, v110);
    uint64_t v112 = v286;
    uint64_t v113 = swift_retain_n(v286, 4LL);
    uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
    os_log_type_t v115 = static os_log_type_t.fault.getter();
    int v116 = v115;
    BOOL v117 = os_log_type_enabled(v114, v115);
    uint64_t v118 = v283;
    if (v117)
    {
      uint64_t v119 = swift_slowAlloc(42LL, -1LL);
      LODWORD(v279) = v116;
      uint64_t v120 = v119;
      uint64_t v280 = (char *)swift_slowAlloc(128LL, -1LL);
      uint64_t v289 = v280;
      *(_DWORD *)uint64_t v120 = 136315906;
      sub_100048A38( &qword_10010CF68,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
      uint64_t v122 = v121;
      os_log_t v278 = v114;
      uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter(v110, v121);
      uint64_t v125 = v124;
      sub_100015EF8(v123, v124, (uint64_t *)&v289);
      uint64_t v287 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v120 + 4);
      swift_bridgeObjectRelease(v125);
      os_log_type_t v127 = *(void (**)(char *, uint64_t))(v118 + 8);
      v127(v19, State);
      *(_WORD *)(v120 + 12) = 2080;
      uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter(State, v122);
      uint64_t v130 = v129;
      sub_100015EF8(v128, v129, (uint64_t *)&v289);
      uint64_t v287 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v120 + 14);
      swift_bridgeObjectRelease(v130);
      v127(v16, State);
      *(_WORD *)(v120 + 22) = 2080;
      uint64_t v132 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v134 = dispatch thunk of CustomStringConvertible.description.getter(v132, v133);
      uint64_t v136 = v135;
      sub_100015EF8(v134, v135, (uint64_t *)&v289);
      uint64_t v287 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v120 + 24);
      swift_release_n(v112, 2LL);
      swift_bridgeObjectRelease(v136);
      *(_WORD *)(v120 + 32) = 2080;
      uint64_t v138 = *(void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v139 = *(void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C( (void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v138);
      uint64_t v140 = v281;
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v139);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v141 = v267;
      uint64_t v143 = dispatch thunk of CustomStringConvertible.description.getter(v267, v142);
      uint64_t v145 = v144;
      uint64_t v146 = v140;
      uint64_t v118 = v283;
      (*(void (**)(char *, uint64_t))(v282 + 8))(v146, v141);
      sub_100015EF8(v143, v145, (uint64_t *)&v289);
      uint64_t v287 = v147;
      uint64_t v110 = State;
      uint64_t v71 = v266;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v288, v120 + 34);
      swift_release_n(v112, 2LL);
      swift_bridgeObjectRelease(v145);
      os_log_t v148 = v278;
      _os_log_impl( (void *)&_mh_execute_header,  v278,  (os_log_type_t)v279,  "unloadIfNecessary called with unmatching states (%s != %s) for %s with %s",  (uint8_t *)v120,  0x2Au);
      uint64_t v149 = v280;
      swift_arrayDestroy(v280, 4LL);
      swift_slowDealloc(v149, -1LL, -1LL);
      swift_slowDealloc(v120, -1LL, -1LL);
    }

    else
    {
      os_log_type_t v127 = *(void (**)(char *, uint64_t))(v283 + 8);
      v127(v19, v110);
      v127(v16, v110);

      swift_release_n(v112, 4LL);
    }

    (*(void (**)(char *, char *, uint64_t))(v118 + 24))(v265, v71, v110);
    uint64_t v150 = type metadata accessor for ModelManagerError(0LL);
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v150, v151, 0LL, 0LL);
    uint64_t v153 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v150 - 8) + 104LL))( v152,  enum case for ModelManagerError.internalError(_:),  v150);
    swift_willThrow(v153, v154, v155, v156, v157, v158, v159, v160);
    v127(v284, v110);
    return ((uint64_t (*)(char *, uint64_t))v127)(v71, v110);
  }

  return result;
}

uint64_t sub_10008D7F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  uint64_t v10 = type metadata accessor for InferenceError(0LL);
  v8[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[19] = v11;
  v8[20] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AssetCost(0LL);
  v8[21] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[22] = v13;
  v8[23] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ModelManagerError(0LL);
  v8[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[25] = v15;
  v8[26] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0LL);
  v8[27] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[28] = v17;
  v8[29] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003B20(&qword_10010DA80);
  v8[30] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100003B20(&qword_10010BAA0);
  v8[31] = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v8[32] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v8[33] = v21;
  v8[34] = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  v8[35] = State;
  uint64_t v23 = *(void *)(State - 8);
  v8[36] = v23;
  unint64_t v24 = (*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[37] = swift_task_alloc(v24);
  v8[38] = swift_task_alloc(v24);
  uint64_t v25 = sub_100003B20(&qword_10010B408);
  v8[39] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v8[40] = v26;
  v8[41] = swift_task_alloc((*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008D9B0, a8, 0LL);
}

uint64_t sub_10008D9B0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v71 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v67 = *(void *)(v0 + 264);
  uint64_t v68 = *(void *)(v0 + 256);
  uint64_t v69 = *(void *)(v0 + 248);
  uint64_t v70 = *(void *)(v0 + 280);
  uint64_t v73 = *(void *)(v0 + 240);
  uint64_t v79 = *(void *)(v0 + 120);
  uint64_t v75 = *(void *)(v0 + 128);
  uint64_t v77 = *(void *)(v0 + 112);
  sub_100030CC8();
  sub_1000922CC();
  uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  *(void *)(v0 + 336) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  uint64_t v7 = *(void *)(v1 + v6 + 24);
  uint64_t v8 = *(void *)(v1 + v6 + 32);
  sub_100030C18((void *)(v1 + v6));
  *(void *)(v0 + 34sub_100006F7C(v0 + 4) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v9 = sub_1000922D4();
  uint64_t v65 = v10;
  uint64_t v66 = v9;
  uint64_t v83 = v2;
  uint64_t v17 = InferenceProviderAssetDescriptor.version.getter(v9, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v63 = v18;
  uint64_t v64 = v17;
  LODWORD(v18) = enum case for LoadState.unloaded(_:);
  *(_DWORD *)(v0 + 432) = enum case for LoadState.unloaded(_:);
  uint64_t v19 = *(void (**)(uint64_t))(v4 + 104);
  *(void *)(v0 + 352) = v19;
  unsigned int v82 = v18;
  v19(v3);
  uint64_t v20 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  *(void *)(v0 + 360) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  uint64_t v21 = (void *)(v1 + v20);
  uint64_t v22 = *(void *)(v1 + v20 + 24);
  uint64_t v23 = v21[4];
  uint64_t v81 = v21;
  sub_100030C08(v21);
  uint64_t v24 = sub_1000923A0();
  uint64_t v26 = v25(v24, v23);
  InferenceProviderDescriptor.id.getter(v26);
  sub_100092270();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  *(void *)(v0 + 368) = v27;
  v27(v5, v68);
  sub_100005FB0(v69, 1LL, 1LL, v71);
  uint64_t v28 = sub_100003B20(&qword_10010B9A0);
  sub_10002FF3C(v73, v29, v30, v28);
  *(void *)(v0 + 376) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))( v2,  v66,  v65,  v64,  v63,  v77,  v3,  v79,  v5,  v22,  v69,  v73,  v75,  v7,  v8);
  sub_1000228C4();
  sub_100007570();
  uint64_t v31 = sub_100022024();
  sub_100092338(v31, &qword_10010DA80);
  sub_100083DC8(v32, &qword_10010BAA0);
  os_log_type_t v33 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v0 + 38sub_100006F7C(v0 + 4) = v33;
  v33(v3, v70);
  uint64_t v34 = qword_10010B0C8;
  sub_10000C030();
  if (v34 != -1) {
    swift_once(&qword_10010B0C8, sub_100086EE0);
  }
  uint64_t v35 = *(void *)(v0 + 104);
  uint64_t v36 = sub_10000BF6C();
  uint64_t v37 = (os_log_s *)sub_100003BA0(v36, (uint64_t)qword_10010DC28);
  *(void *)(v0 + 392) = v37;
  sub_10000C0CC(v35);
  sub_10000C158();
  os_log_type_t v38 = sub_10000C108();
  if (sub_10003D070(v38))
  {
    uint64_t v74 = *(void *)(v0 + 272);
    uint64_t v78 = *(void *)(v0 + 256);
    uint64_t v39 = *(void *)(v0 + 104);
    uint64_t v72 = v39;
    uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t))v27;
    uint64_t v40 = sub_10000BCF4(22LL);
    uint64_t v80 = sub_10000BCF4(64LL);
    uint64_t v85 = v80;
    *(_DWORD *)uint64_t v40 = 136315394;
    uint64_t v41 = sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
    sub_1000832F4(v43, v44);
    *(void *)(v0 + 88) = v45;
    sub_100092470(v0 + 88, v0 + 96);
    sub_10000BD28();
    sub_10000BCDC(v39);
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v46 = v81;
    uint64_t v47 = v81[4];
    sub_100030C08(v81);
    uint64_t v48 = sub_1000923A0();
    uint64_t v49 = v47;
    uint64_t v50 = v83;
    v51(v48, v49);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_100091F94(v52, v52);
    sub_100092270();
    uint64_t v53 = v76(v74, v78);
    sub_100092020(v53, v54, &v85);
    *(void *)(v0 + 96) = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
    sub_1000228C4();
    sub_10000BCDC(v72);
    sub_10000BFDC((void *)&_mh_execute_header, v37, (os_log_type_t)v35, "Unloading asset %s from %s", (uint8_t *)v40);
    sub_10000BD8C();
    sub_10000BCC4(v80);
    sub_10000BCC4(v40);
  }

  else
  {
    sub_10000C0C4(*(void *)(v0 + 104));

    uint64_t v50 = v83;
    uint64_t v46 = v81;
  }

  uint64_t v56 = *(void *)(v0 + 296);
  uint64_t v57 = v46[3];
  uint64_t v58 = v46[4];
  sub_10000729C(v46, v57);
  sub_100092508(v56, v82);
  uint64_t v59 = sub_100092368(*(void *)(v58 + 24));
  uint64_t v84 = v60;
  uint64_t v61 = (void *)swift_task_alloc(v59);
  *(void *)(v0 + 400) = v61;
  *uint64_t v61 = v0;
  v61[1] = sub_10008DE50;
  return v84(v50, *(void *)(v0 + 296), *(void *)(v0 + 112), *(void *)(v0 + 328), v57, v58);
}

uint64_t sub_10008DE50()
{
  *(void *)(v0 + 408) = v1;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v0 + 384))(*(void *)(v0 + 296), *(void *)(v0 + 280));
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10008DEB4()
{
  uint64_t v2 = *(void *)(v1 + 392);
  uint64_t v3 = sub_10000C0CC(*(void *)(v1 + 104));
  Logger.logObject.getter(v3);
  os_log_type_t v4 = sub_10000C108();
  if (sub_10003D070(v4))
  {
    uint64_t v5 = *(void *)(v1 + 360);
    uint64_t v39 = *(void *)(v1 + 272);
    uint64_t v40 = *(void *)(v1 + 256);
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 368);
    uint64_t v6 = *(void *)(v1 + 104);
    LODWORD(v46) = v2;
    uint64_t v7 = (uint8_t *)sub_10000BCF4(22LL);
    uint64_t v44 = sub_10000BCF4(64LL);
    uint64_t v47 = v44;
    *(_DWORD *)uint64_t v7 = 136315394;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v9 = sub_100092104(v8, v8);
    sub_100091F9C(v9, v10);
    *(void *)(v1 + 72) = v11;
    uint64_t v12 = (void *)(v6 + v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80);
    sub_10000BD28();
    sub_10000BCDC(v6);
    sub_100092094();
    uint64_t v13 = *(void *)(v6 + v5 + 24);
    uint64_t v14 = v12[4];
    sub_100030C18(v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_100091F94(v15, v15);
    sub_1000924B4();
    uint64_t v16 = v42(v39, v40);
    sub_10009202C(v16, v17, &v47);
    *(void *)(v1 + 80) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    sub_100022B4C();
    sub_10000BCDC(v6);
    sub_10000BFDC((void *)&_mh_execute_header, v0, (os_log_type_t)v2, "Finished unloading asset %s from %s", v7);
    sub_10000BD8C();
    sub_10000BCC4(v44);
    sub_10000BCC4((uint64_t)v7);
  }

  else
  {
    sub_10000C0C4(*(void *)(v1 + 104));
  }

  unsigned int v45 = *(_DWORD *)(v1 + 432);
  sub_100092350();
  uint64_t v41 = v19;
  uint64_t v43 = *(void *)(v1 + 280);
  uint64_t v20 = *(void *)(v1 + 224);
  uint64_t v21 = *(void *)(v1 + 232);
  uint64_t v37 = *(void *)(v1 + 216);
  os_log_type_t v38 = sub_10000729C((void *)(*(void *)(v1 + 104) + v22), *(void *)(*(void *)(v1 + 104) + v22 + 24));
  uint64_t v36 = InferenceProviderAssetDescriptor.identifier.getter(v38);
  InferenceProviderAssetDescriptor.version.getter(v36, v23, v24, v25, v26, v27, v28, v29);
  AssetCost.onDeviceMemory.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v21,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v37);
  sub_1000923AC();
  sub_10009241C(v30);
  sub_100022D34();
  sub_10000BF84();
  sub_10000C1E0();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v37);
  v46(v41, v45, v43);
  uint64_t v31 = (void *)swift_task_alloc(dword_10010DE64);
  sub_1000924D4(v31, (uint64_t)sub_10008E1C0);
  uint64_t v33 = sub_1000306EC(v32);
  return sub_10008A5A0(v33, v34);
}

uint64_t sub_10008E1C0()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[17];
  sub_10000BCE4(v0[52]);
  sub_1000923C4(v1);
  return sub_100021BCC((uint64_t)sub_10008E21C, v2, 0LL);
}

void sub_10008E21C()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v20 = v0[26];
  uint64_t v22 = v0[23];
  uint64_t v24 = v0[20];
  swift_release(v0[47]);
  sub_100030250(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10000C140();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  uint64_t v3 = swift_task_dealloc(v20);
  uint64_t v11 = sub_1000499B4(v3, v4, v5, v6, v7, v8, v9, v10, v20, v22);
  sub_100030B50(v11, v12, v13, v14, v15, v16, v17, v18, v21, v23, v24);
  sub_1000227B8();
  sub_100030544();
  __asm { BR              X0 }

uint64_t sub_10008E2C4()
{
  return sub_10000BD98();
}

#error "10008E378: call analysis failed (funcsize=41)"
uint64_t sub_10008E3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_s *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_s *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, void, uint64_t);
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v1 = *(void *)(v0 + 408);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v3 = (uint64_t *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 160);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100003B20(&qword_10010B468);
  if ((sub_100092258(v2, v0 + 16, v4) & 1) != 0)
  {
    if (sub_100092378(*(void *)(v0 + 152)) == enum case for InferenceError.notLoaded(_:))
    {
      uint64_t v5 = (void *)(v0 + 16);
LABEL_8:
      uint64_t v15 = *v3;
      uint64_t v16 = *(void *)(v0 + 152);
      swift_errorRelease(*(void *)(v0 + 408));
      sub_100022BF8(v15, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
      swift_errorRelease(*v5);
      uint64_t v17 = sub_10000C0CC(*(void *)(v0 + 104));
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      uint64_t v19 = static os_log_type_t.default.getter();
      if (sub_100049854(v18))
      {
        uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
        uint64_t v20 = *(void *)(v0 + 272);
        uint64_t v100 = *(void *)(v0 + 256);
        uint64_t v21 = *(void *)(v0 + 104);
        uint64_t v22 = (void *)(v21 + *(void *)(v0 + 360));
        LODWORD(v110) = v19;
        uint64_t v23 = (uint8_t *)sub_10000BCF4(22LL);
        uint64_t v106 = sub_10000BCF4(64LL);
        uint64_t v113 = v106;
        *(_DWORD *)uint64_t v23 = 136315394;
        sub_1000833BC();
        sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v25 = sub_1000921F0(v24, v24);
        sub_100091F9C(v25, v26);
        *(void *)(v0 + 56) = v27;
        sub_1000920A4(v0 + 56, v0 + 64);
        sub_10000BCDC(v21);
        sub_10000BD28();
        sub_10009242C();
        uint64_t v28 = v22[3];
        sub_10000729C(v22, v28);
        sub_100092154(v28);
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        sub_10009248C();
        sub_1000921F0(v29, v30);
        v103(v20, v100);
        sub_10003CF70();
        *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
        sub_10000BCDC(v21);
        sub_10000C1E0();
        sub_10000BFDC((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Asset %s already unloaded from %s", v23);
        sub_10000BD8C();
        sub_10000BCC4(v106);
        sub_10000BCC4((uint64_t)v23);
      }

      else
      {
        uint64_t v32 = *(void *)(v0 + 104);

        sub_10000C0C4(v32);
      }

      uint64_t v97 = *(void *)(v0 + 376);
      uint64_t v107 = *(_DWORD *)(v0 + 432);
      sub_100092350();
      uint64_t v101 = v33;
      uint64_t v104 = *(void *)(v0 + 280);
      uint64_t v34 = *(void *)(v0 + 224);
      uint64_t v35 = *(void *)(v0 + 232);
      uint64_t v89 = *(void *)(v0 + 216);
      uint64_t v91 = sub_10000729C((void *)(*(void *)(v0 + 104) + v36), *(void *)(*(void *)(v0 + 104) + v36 + 24));
      uint64_t v87 = InferenceProviderAssetDescriptor.identifier.getter(v91);
      uint64_t v44 = InferenceProviderAssetDescriptor.version.getter(v87, v37, v38, v39, v40, v41, v42, v43);
      AssetCost.onDeviceMemory.getter(v44);
      (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))( v35,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v89);
      sub_1000923AC();
      v49(v45, v46, v47, v48);
      swift_release(v97);
      sub_100022D34();
      sub_10000C1E0();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v89);
      v110(v101, v107, v104);
      uint64_t v50 = (void *)swift_task_alloc(dword_10010DE64);
      sub_1000924D4(v50, (uint64_t)sub_10008E1C0);
      goto LABEL_18;
    }

    sub_100030234(*(void *)(v0 + 152));
  }

  uint64_t v5 = (void *)(v0 + 24);
  uint64_t v3 = (uint64_t *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v8 = *(void *)(v0 + 192);
  swift_errorRelease(*(void *)(v0 + 16));
  *(void *)(v0 + 2sub_100006F7C(v0 + 4) = v7;
  swift_errorRetain(v7);
  if (swift_dynamicCast(v6, v0 + 24, v4, v8, 0LL))
  {
    uint64_t v9 = sub_100092378(*(void *)(v0 + 200));
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 208);
    uint64_t v12 = *(void *)(v0 + 192);
    if (v9 == enum case for ModelManagerError.inferenceError(_:))
    {
      uint64_t v13 = *(void *)(v0 + 144);
      uint64_t v14 = *(void *)(v0 + 152);
      (*(void (**)(void, uint64_t))(v10 + 96))(*(void *)(v0 + 208), v12);
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8LL))( *(void *)(v0 + 208),  *(void *)(v0 + 144));
    }

    else
    {
      (*(void (**)(void, uint64_t))(v10 + 8))(*(void *)(v0 + 208), v12);
    }
  }

  uint64_t v52 = *(void *)(v0 + 408);
  uint64_t v53 = *(os_log_s **)(v0 + 392);
  uint64_t v54 = *(void *)(v0 + 104);
  swift_errorRelease(*(void *)(v0 + 24));
  swift_retain_n(v54, 3LL);
  sub_100030414();
  sub_100021D80();
  uint64_t v55 = sub_100030414();
  Logger.logObject.getter(v55);
  uint64_t v56 = sub_100022604();
  if (sub_10002275C(v56))
  {
    uint64_t v94 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v111 = v52;
    uint64_t v57 = *(void *)(v0 + 272);
    uint64_t v92 = *(void *)(v0 + 256);
    uint64_t v58 = *(void *)(v0 + 104);
    uint64_t v59 = (void *)(v58 + *(void *)(v0 + 360));
    uint64_t v60 = sub_10000BCF4(32LL);
    uint64_t v98 = (void *)sub_10000BCF4(8LL);
    uint64_t v108 = sub_10000BCF4(64LL);
    uint64_t v113 = v108;
    *(_DWORD *)uint64_t v60 = 136315650;
    sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v62 = sub_100030B70(v61, v61);
    sub_100091F9C(v62, v63);
    *(void *)(v0 + 32) = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    sub_10000BCDC(v58);
    sub_10000BD28();
    *(_WORD *)(v60 + 12) = 2080;
    uint64_t v65 = v59[3];
    sub_10000729C(v59, v65);
    sub_1000923DC(v65);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_100091F94(v66, v66);
    sub_1000924B4();
    uint64_t v67 = v94(v57, v92);
    sub_10009202C(v67, v68, &v113);
    *(void *)(v0 + 40) = v69;
    uint64_t v3 = (uint64_t *)(v0 + 48);
    sub_100092470(v0 + 40, v0 + 48);
    sub_10000BCDC(v58);
    sub_100022B4C();
    sub_100091F08();
    uint64_t v70 = sub_100092450();
    *(void *)(v0 + 48) = v70;
    sub_1000301B8(v0 + 48, v0 + 56);
    *uint64_t v98 = v70;
    sub_100091DBC();
    sub_100091DBC();
    sub_10009224C((void *)&_mh_execute_header, v53, v111, "Failed to unload asset %s from %s: %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v98);
    sub_10000BCC4((uint64_t)v98);
    sub_1000307B4(v108);
    sub_10000BCC4(v108);
    sub_10000BCC4(v60);
  }

  else
  {
    sub_10000C0C4(*(void *)(v0 + 104));
    sub_100091DBC();
    sub_100091DBC();
  }

  uint64_t v71 = *(void *)(v0 + 408);
  uint64_t v112 = *(void *)(v0 + 376);
  uint64_t v73 = *(void *)(v0 + 224);
  uint64_t v72 = *(void *)(v0 + 232);
  uint64_t v96 = v73;
  uint64_t v99 = *(void *)(v0 + 216);
  uint64_t v74 = *(void *)(v0 + 184);
  uint64_t v88 = *(void *)(v0 + 176);
  uint64_t v90 = *(void *)(v0 + 168);
  uint64_t v105 = *(void *)(v0 + 128);
  uint64_t v109 = *(void *)(v0 + 328);
  uint64_t v75 = (void *)(*(void *)(v0 + 104) + *(void *)(v0 + 336));
  uint64_t v76 = v75[3];
  uint64_t v77 = v75[4];
  uint64_t v102 = sub_100030C18(v75);
  uint64_t v95 = InferenceProviderAssetDescriptor.identifier.getter(v102);
  uint64_t v93 = sub_100092440();
  uint64_t v79 = v78;
  uint64_t v80 = static AssetCost.zero.getter();
  uint64_t v81 = AssetCost.onDeviceMemory.getter(v80);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v74, v90);
  (*(void (**)(uint64_t, void, uint64_t))(v73 + 104))( v72,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:),  v99);
  unsigned int v82 = *(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 48);
  swift_errorRetain(v71);
  v82(v109, v95, v3, v93, v79, v81, v72, v112, v71, v105, v76, v77);
  swift_errorRelease(v71);
  sub_10000BF84();
  sub_100022024();
  sub_1000303D0();
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v72, v99);
  uint64_t v83 = (void *)swift_task_alloc(dword_10010DE64);
  *(void *)(v0 + 42sub_100006F7C(v0 + 4) = v83;
  *uint64_t v83 = v0;
  v83[1] = sub_10008E2C4;
  uint64_t v51 = *(void *)(v0 + 136);
LABEL_18:
  uint64_t v84 = sub_1000306EC(v51);
  return sub_10008A5A0(v84, v85);
}

uint64_t sub_10008EBA0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v310 = a5;
  v303 = a3;
  uint64_t v304 = a4;
  uint64_t v317 = a2;
  uint64_t v6 = (os_log_s *)type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  uint64_t v308 = *((void *)v6 - 1);
  os_log_t v309 = v6;
  uint64_t v7 = *(void *)(v308 + 64);
  __chkstk_darwin(v6);
  v307 = (char *)&v290 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v8);
  uint64_t v306 = (uint64_t)&v290 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v312 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v313 = (char *)&v290 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v314 = *(void *)(State - 8);
  uint64_t v12 = *(void *)(v314 + 64);
  uint64_t v13 = __chkstk_darwin(State);
  uint64_t v14 = (char *)&v290 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v290 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  v305 = (char *)&v290 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v290 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  v315 = (char *)&v290 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v290 - v25;
  uint64_t v27 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  if ((*(_BYTE *)(a1 + *(int *)(v27 + 52)) & 1) != 0)
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v28, (uint64_t)qword_10010DC28);
    uint64_t v29 = v317;
    uint64_t v30 = swift_retain_n(v317, 2LL);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v320 = v34;
      uint64_t v35 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
      uint64_t v39 = v38;
      sub_100015EF8(v37, v38, &v320);
      uint64_t v318 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v33 + 4);
      swift_release_n(v29, 2LL);
      swift_bridgeObjectRelease(v39);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Tried to move invalidated asset to dynamic mode: %s",  (uint8_t *)v33,  0xCu);
      swift_arrayDestroy(v34, 1LL);
      uint64_t v41 = v34;
LABEL_11:
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

LABEL_21:
      uint64_t v97 = type metadata accessor for ModelManagerError(0LL);
      sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v97, v98, 0LL, 0LL);
      uint64_t v100 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v97 - 8) + 104LL))( v99,  enum case for ModelManagerError.internalError(_:),  v97);
      return swift_willThrow(v100, v101, v102, v103, v104, v105, v106, v107);
    }

    uint64_t v66 = v29;
    uint64_t v67 = 2LL;
    goto LABEL_20;
  }

  uint64_t v42 = v27;
  uint64_t v43 = *(int *)(v27 + 28);
  uint64_t v44 = *(void *)(a1 + v43);
  uint64_t v302 = v10;
  if (v44)
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v45, (uint64_t)qword_10010DC28);
    uint64_t v46 = v317;
    uint64_t v47 = swift_retain_n(v317, 4LL);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v48 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v48))
    {
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t State = swift_slowAlloc(64LL, -1LL);
      uint64_t v320 = State;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v49 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
      uint64_t v53 = v52;
      sub_100015EF8(v51, v52, &v320);
      uint64_t v318 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v33 + 4);
      swift_release_n(v46, 2LL);
      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v55 = (void *)(v46 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v56 = *(void *)(v46 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v57 = *(void *)(v46 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C(v55, v56);
      uint64_t v58 = v313;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v59 = v302;
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v302, v60);
      uint64_t v63 = v62;
      (*(void (**)(char *, uint64_t))(v312 + 8))(v58, v59);
      sub_100015EF8(v61, v63, &v320);
      uint64_t v318 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v33 + 14);
      swift_release_n(v317, 2LL);
      swift_bridgeObjectRelease(v63);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v48,  "unloadIfNecessary called with pending transition task for %s with %s",  (uint8_t *)v33,  0x16u);
      uint64_t v65 = State;
      swift_arrayDestroy(State, 2LL);
      uint64_t v41 = v65;
      goto LABEL_11;
    }

    uint64_t v66 = v46;
    uint64_t v67 = 4LL;
LABEL_20:
    swift_release_n(v66, v67);
    goto LABEL_21;
  }

  v298 = v22;
  uint64_t v297 = v43;
  uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v314 + 16);
  v301 = v26;
  v68(v26, a1, State);
  uint64_t v69 = *(int *)(v42 + 20);
  v299 = v68;
  v300 = (char *)(a1 + v69);
  uint64_t v70 = v301;
  ((void (*)(char *))v68)(v315);
  if ((sub_1000BC4C4() & 1) != 0)
  {
    uint64_t v71 = *(void *)(*(void *)(a1 + *(int *)(v42 + 48)) + 16LL);
    if (v71)
    {
      if (qword_10010B0C8 != -1) {
        swift_once(&qword_10010B0C8, sub_100086EE0);
      }
      uint64_t v72 = type metadata accessor for Logger(0LL);
      sub_100003BA0(v72, (uint64_t)qword_10010DC28);
      uint64_t v73 = v317;
      uint64_t v74 = swift_retain_n(v317, 4LL);
      uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
      os_log_type_t v76 = static os_log_type_t.default.getter();
      int v77 = v76;
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v78 = swift_slowAlloc(32LL, -1LL);
        uint64_t v311 = swift_slowAlloc(64LL, -1LL);
        uint64_t v320 = v311;
        *(_DWORD *)uint64_t v78 = 136315650;
        LODWORD(v310) = v77;
        uint64_t v79 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
        sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v79, v80);
        uint64_t v83 = v82;
        sub_100015EF8(v81, v82, &v320);
        uint64_t v318 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v78 + 4);
        swift_release_n(v73, 2LL);
        swift_bridgeObjectRelease(v83);
        *(_WORD *)(v78 + 12) = 2080;
        uint64_t v85 = (void *)(v73 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v86 = *(void *)(v73 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        uint64_t v87 = *(void *)(v73 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10000729C(v85, v86);
        uint64_t v88 = v313;
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v87);
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        uint64_t v89 = v302;
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter(v302, v90);
        uint64_t v93 = v92;
        (*(void (**)(char *, uint64_t))(v312 + 8))(v88, v89);
        sub_100015EF8(v91, v93, &v320);
        uint64_t v318 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v78 + 14);
        swift_release_n(v317, 2LL);
        uint64_t v95 = v93;
        uint64_t v70 = v301;
        swift_bridgeObjectRelease(v95);
        *(_WORD *)(v78 + 22) = 2048;
        uint64_t v318 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v78 + 24);
        _os_log_impl( (void *)&_mh_execute_header,  v75,  (os_log_type_t)v310,  "Not moving asset %s to dynamic mode in %s: in use by %ld requests",  (uint8_t *)v78,  0x20u);
        uint64_t v96 = v311;
        swift_arrayDestroy(v311, 2LL);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v73, 4LL);
      }

      uint64_t v192 = State;
      unint64_t v193 = sub_100081BF4();
      uint64_t v194 = swift_allocError(&type metadata for InferenceProviderAssetManagerInternalError, v193, 0LL, 0LL);
      *uint64_t v195 = 0LL;
      v195[1] = 0LL;
      swift_willThrow(v194, v195, v196, v197, v198, v199, v200, v201);
      uint64_t v202 = *(void (**)(char *, uint64_t))(v314 + 8);
      v202(v315, v192);
      return ((uint64_t (*)(char *, uint64_t))v202)(v70, v192);
    }

    else
    {
      if (qword_10010B0C8 != -1) {
        swift_once(&qword_10010B0C8, sub_100086EE0);
      }
      uint64_t v161 = type metadata accessor for Logger(0LL);
      uint64_t v162 = sub_100003BA0(v161, (uint64_t)qword_10010DC28);
      uint64_t v163 = v317;
      uint64_t v164 = swift_retain_n(v317, 4LL);
      uint64_t v296 = v162;
      uint64_t v165 = (os_log_s *)Logger.logObject.getter(v164);
      os_log_type_t v166 = static os_log_type_t.default.getter();
      int v167 = v166;
      BOOL v168 = os_log_type_enabled(v165, v166);
      uint64_t v169 = v298;
      if (v168)
      {
        uint64_t v170 = swift_slowAlloc(22LL, -1LL);
        uint64_t v295 = swift_slowAlloc(64LL, -1LL);
        uint64_t v320 = v295;
        *(_DWORD *)uint64_t v170 = 136315394;
        uint64_t v291 = v170 + 4;
        os_log_t v294 = v165;
        uint64_t v171 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
        int v293 = v167;
        uint64_t v172 = v171;
        sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter(v172, v173);
        uint64_t v176 = v175;
        sub_100015EF8(v174, v175, &v320);
        uint64_t v318 = v177;
        uint64_t v292 = &v319;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v291);
        uint64_t v178 = v163;
        swift_release_n(v163, 2LL);
        swift_bridgeObjectRelease(v176);
        *(_WORD *)(v170 + 12) = 2080;
        uint64_t v291 = v170 + 14;
        uint64_t v179 = (uint8_t *)v170;
        uint64_t v180 = (void *)(v178 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v181 = *(void *)(v178
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        uint64_t v182 = v180[4];
        sub_10000729C(v180, v181);
        uint64_t v183 = v313;
        (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v181, v182);
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        uint64_t v184 = v302;
        uint64_t v186 = dispatch thunk of CustomStringConvertible.description.getter(v302, v185);
        uint64_t v188 = v187;
        (*(void (**)(char *, uint64_t))(v312 + 8))(v183, v184);
        sub_100015EF8(v186, v188, &v320);
        uint64_t v318 = v189;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, v292, v291);
        swift_release_n(v317, 2LL);
        swift_bridgeObjectRelease(v188);
        os_log_t v190 = v294;
        _os_log_impl( (void *)&_mh_execute_header,  v294,  (os_log_type_t)v293,  "moveToDynamicModeIfNecessary entering for asset %s with %s",  v179,  0x16u);
        uint64_t v191 = v295;
        swift_arrayDestroy(v295, 2LL);
        swift_slowDealloc(v191, -1LL, -1LL);
        swift_slowDealloc(v179, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v163, 4LL);
      }

      uint64_t v203 = v314;
      uint64_t v204 = *(void (**)(char *))(v314 + 104);
      LODWORD(v295) = enum case for LoadState.dynamicMode(_:);
      uint64_t v205 = State;
      v204(v169);
      sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
      uint64_t v207 = v206;
      char v208 = dispatch thunk of static Equatable.== infix(_:_:)(v301, v169, v205, v206);
      uint64_t v209 = *(void (**)(char *, uint64_t))(v203 + 8);
      v209(v169, v205);
      if ((v208 & 1) != 0)
      {
        v303 = v209;
        uint64_t v210 = v317;
        uint64_t v211 = swift_retain_n(v317, 4LL);
        uint64_t v212 = (os_log_s *)Logger.logObject.getter(v211);
        os_log_type_t v213 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v212, v213))
        {
          uint64_t v214 = swift_slowAlloc(22LL, -1LL);
          uint64_t v314 = swift_slowAlloc(64LL, -1LL);
          uint64_t v320 = v314;
          *(_DWORD *)uint64_t v214 = 136315394;
          uint64_t v215 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
          sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
          uint64_t v217 = dispatch thunk of CustomStringConvertible.description.getter(v215, v216);
          uint64_t v219 = v218;
          sub_100015EF8(v217, v218, &v320);
          uint64_t v318 = v220;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v214 + 4);
          swift_release_n(v210, 2LL);
          swift_bridgeObjectRelease(v219);
          *(_WORD *)(v214 + 12) = 2080;
          os_log_t v309 = (os_log_t)(v214 + 14);
          uint64_t v221 = (void *)(v210 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
          uint64_t v223 = *(void *)(v210
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 24);
          uint64_t v222 = *(void *)(v210
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 32);
          sub_10000729C(v221, v223);
          uint64_t v224 = v313;
          (*(void (**)(uint64_t, uint64_t))(v222 + 8))(v223, v222);
          sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
          uint64_t v225 = v302;
          uint64_t v227 = dispatch thunk of CustomStringConvertible.description.getter(v302, v226);
          uint64_t v229 = v228;
          (*(void (**)(char *, uint64_t))(v312 + 8))(v224, v225);
          sub_100015EF8(v227, v229, &v320);
          uint64_t v318 = v230;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v309);
          swift_release_n(v317, 2LL);
          swift_bridgeObjectRelease(v229);
          _os_log_impl( (void *)&_mh_execute_header,  v212,  v213,  "Not moving asset %s to dynamic mode in %s: already in dynamic mode",  (uint8_t *)v214,  0x16u);
          uint64_t v231 = v314;
          swift_arrayDestroy(v314, 2LL);
          swift_slowDealloc(v231, -1LL, -1LL);
          swift_slowDealloc(v214, -1LL, -1LL);
        }

        else
        {
          swift_release_n(v210, 4LL);
        }

        uint64_t v256 = State;
        os_log_t v257 = (uint64_t (*)(char *, uint64_t))v303;
        v303(v315, State);
        uint64_t result = v257(v301, v256);
        void *v310 = 0LL;
      }

      else
      {
        ((void (*)(char *, void, uint64_t))v204)(v169, enum case for LoadState.unloaded(_:), v205);
        char v232 = dispatch thunk of static Equatable.== infix(_:_:)(v301, v169, v205, v207);
        v209(v169, v205);
        if ((v232 & 1) != 0)
        {
          uint64_t v233 = v317;
          uint64_t v234 = swift_retain_n(v317, 4LL);
          uint64_t v235 = (os_log_s *)Logger.logObject.getter(v234);
          os_log_type_t v236 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v235, v236))
          {
            uint64_t v237 = swift_slowAlloc(22LL, -1LL);
            uint64_t v314 = swift_slowAlloc(64LL, -1LL);
            uint64_t v320 = v314;
            *(_DWORD *)uint64_t v237 = 136315394;
            uint64_t v238 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
            v303 = v209;
            uint64_t v239 = v238;
            sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
            uint64_t v241 = dispatch thunk of CustomStringConvertible.description.getter(v239, v240);
            uint64_t v243 = v242;
            sub_100015EF8(v241, v242, &v320);
            uint64_t v318 = v244;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v237 + 4);
            swift_release_n(v233, 2LL);
            swift_bridgeObjectRelease(v243);
            *(_WORD *)(v237 + 12) = 2080;
            uint64_t v245 = (void *)(v233 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
            uint64_t v246 = *(void *)(v233
                             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                             + 24);
            uint64_t v247 = *(void *)(v233
                             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                             + 32);
            sub_10000729C(v245, v246);
            uint64_t v248 = v313;
            (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v246, v247);
            sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
            uint64_t v249 = v302;
            uint64_t v251 = dispatch thunk of CustomStringConvertible.description.getter(v302, v250);
            uint64_t v253 = v252;
            (*(void (**)(char *, uint64_t))(v312 + 8))(v248, v249);
            sub_100015EF8(v251, v253, &v320);
            uint64_t v318 = v254;
            uint64_t v209 = v303;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v237 + 14);
            swift_release_n(v317, 2LL);
            swift_bridgeObjectRelease(v253);
            _os_log_impl( (void *)&_mh_execute_header,  v235,  v236,  "Attempting to move an unloaded asset %s to dynamic mode in %s",  (uint8_t *)v237,  0x16u);
            uint64_t v255 = v314;
            swift_arrayDestroy(v314, 2LL);
            swift_slowDealloc(v255, -1LL, -1LL);
            swift_slowDealloc(v237, -1LL, -1LL);
          }

          else
          {

            swift_release_n(v233, 4LL);
          }

          uint64_t v277 = State;
          os_log_t v278 = v301;
          uint64_t v279 = type metadata accessor for ModelManagerError(0LL);
          sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
          swift_allocError(v279, v280, 0LL, 0LL);
          uint64_t v282 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v279 - 8) + 104LL))( v281,  enum case for ModelManagerError.internalError(_:),  v279);
          swift_willThrow(v282, v283, v284, v285, v286, v287, v288, v289);
          v209(v315, v277);
          return ((uint64_t (*)(char *, uint64_t))v209)(v278, v277);
        }

        else
        {
          uint64_t v258 = (void (*)(char *, char *, uint64_t))v299;
          v299(v169, (uint64_t)v301, v205);
          uint64_t v259 = v300;
          v209(v300, v205);
          ((void (*)(char *, void, uint64_t))v204)(v259, v295, v205);
          uint64_t v260 = type metadata accessor for TaskPriority(0LL);
          sub_100005FB0(v306, 1LL, 1LL, v260);
          v258(v305, v169, v205);
          uint64_t v261 = v308;
          (*(void (**)(char *, void (*)(char *, uint64_t), os_log_t))(v308 + 16))(v307, v303, v309);
          sub_100048A38( &qword_10010B8E0,  type metadata accessor for InferenceProviderAssetManager,  (uint64_t)&unk_1000D9CE8);
          uint64_t v263 = v262;
          v303 = v209;
          uint64_t v264 = v314;
          uint64_t v265 = *(unsigned __int8 *)(v314 + 80);
          uint64_t v266 = (v265 + 40) & ~v265;
          uint64_t v267 = *(unsigned __int8 *)(v261 + 80);
          uint64_t v268 = (v12 + v267 + v266) & ~v267;
          v313 = (char *)((v7 + v268 + 7) & 0xFFFFFFFFFFFFFFF8LL);
          uint64_t v269 = swift_allocObject(&unk_1001043C0, v313 + 8, v265 | v267 | 7);
          uint64_t v271 = v304;
          uint64_t v270 = v305;
          *(void *)(v269 + ++*(void *)(v0 + 16) = v304;
          *(void *)(v269 + 2sub_100006F7C(v0 + 4) = v263;
          uint64_t v272 = v317;
          *(void *)(v269 + 32) = v317;
          (*(void (**)(uint64_t, char *, uint64_t))(v264 + 32))(v269 + v266, v270, v205);
          (*(void (**)(uint64_t, char *, os_log_t))(v308 + 32))(v269 + v268, v307, v309);
          *(void *)&v313[v269] = v271;
          swift_retain_n(v271, 2LL);
          swift_retain(v272);
          sub_10000C81C(v306, (uint64_t)&unk_10010DE70, v269);
          uint64_t v274 = v273;
          uint64_t v275 = v303;
          v303(v169, v205);
          v275(v315, v205);
          v275(v301, v205);
          uint64_t v276 = v297;
          swift_release(*(void *)(a1 + v297));
          *(void *)(a1 + v276) = v274;
          void *v310 = v274;
          return swift_retain(v274);
        }
      }
    }
  }

  else
  {
    if (qword_10010B0C8 != -1) {
      swift_once(&qword_10010B0C8, sub_100086EE0);
    }
    uint64_t v109 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v109, (uint64_t)qword_10010DC28);
    uint64_t v110 = State;
    uint64_t v111 = (void (*)(char *, char *, uint64_t))v299;
    v299(v17, (uint64_t)v70, State);
    v111(v14, v315, v110);
    uint64_t v112 = v317;
    uint64_t v113 = swift_retain_n(v317, 4LL);
    uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
    os_log_type_t v115 = static os_log_type_t.fault.getter();
    int v116 = v115;
    BOOL v117 = os_log_type_enabled(v114, v115);
    uint64_t v118 = v314;
    if (v117)
    {
      uint64_t v119 = swift_slowAlloc(42LL, -1LL);
      uint64_t v311 = swift_slowAlloc(128LL, -1LL);
      uint64_t v320 = v311;
      *(_DWORD *)uint64_t v119 = 136315906;
      sub_100048A38( &qword_10010CF68,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
      LODWORD(v310) = v116;
      uint64_t v121 = v120;
      os_log_t v309 = v114;
      uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter(State, v120);
      uint64_t v124 = v123;
      sub_100015EF8(v122, v123, &v320);
      uint64_t v318 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v119 + 4);
      swift_bridgeObjectRelease(v124);
      uint64_t v126 = *(void (**)(char *, uint64_t))(v118 + 8);
      v126(v17, State);
      *(_WORD *)(v119 + 12) = 2080;
      uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter(State, v121);
      uint64_t v129 = v128;
      sub_100015EF8(v127, v128, &v320);
      uint64_t v318 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v119 + 14);
      swift_bridgeObjectRelease(v129);
      v126(v14, State);
      *(_WORD *)(v119 + 22) = 2080;
      uint64_t v131 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter(v131, v132);
      uint64_t v135 = v134;
      sub_100015EF8(v133, v134, &v320);
      uint64_t v318 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v119 + 24);
      swift_release_n(v112, 2LL);
      swift_bridgeObjectRelease(v135);
      *(_WORD *)(v119 + 32) = 2080;
      uint64_t v137 = *(void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v138 = *(void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000729C( (void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v137);
      uint64_t v139 = v313;
      (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v138);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v140 = v302;
      uint64_t v142 = dispatch thunk of CustomStringConvertible.description.getter(v302, v141);
      uint64_t v144 = v143;
      uint64_t v145 = v139;
      uint64_t v118 = v314;
      (*(void (**)(char *, uint64_t))(v312 + 8))(v145, v140);
      sub_100015EF8(v142, v144, &v320);
      uint64_t v318 = v146;
      uint64_t v70 = v301;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v119 + 34);
      swift_release_n(v112, 2LL);
      swift_bridgeObjectRelease(v144);
      os_log_t v147 = v309;
      _os_log_impl( (void *)&_mh_execute_header,  v309,  (os_log_type_t)v310,  "moveToDynamicModeIfNecessary called with unmatching states (%s != %s) for %s with %s",  (uint8_t *)v119,  0x2Au);
      uint64_t v148 = v311;
      swift_arrayDestroy(v311, 4LL);
      swift_slowDealloc(v148, -1LL, -1LL);
      uint64_t v149 = v119;
      uint64_t v110 = State;
      swift_slowDealloc(v149, -1LL, -1LL);
    }

    else
    {
      uint64_t v126 = *(void (**)(char *, uint64_t))(v314 + 8);
      v126(v17, v110);
      v126(v14, v110);

      swift_release_n(v112, 4LL);
    }

    (*(void (**)(char *, char *, uint64_t))(v118 + 24))(v300, v70, v110);
    uint64_t v150 = type metadata accessor for ModelManagerError(0LL);
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v150, v151, 0LL, 0LL);
    uint64_t v153 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v150 - 8) + 104LL))( v152,  enum case for ModelManagerError.internalError(_:),  v150);
    swift_willThrow(v153, v154, v155, v156, v157, v158, v159, v160);
    v126(v315, v110);
    return ((uint64_t (*)(char *, uint64_t))v126)(v70, v110);
  }

  return result;
}

uint64_t sub_100090384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v9 = type metadata accessor for AssetCost(0LL);
  v7[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[10] = v10;
  v7[11] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0LL);
  void v7[12] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[13] = v12;
  v7[14] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003B20(&qword_10010DA40);
  v7[15] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003B20(&qword_10010DA80);
  v7[16] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v7[17] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v7[18] = v16;
  v7[19] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  v7[20] = State;
  uint64_t v18 = *(void *)(State - 8);
  v7[21] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[22] = swift_task_alloc(v19);
  v7[23] = swift_task_alloc(v19);
  uint64_t v20 = sub_100003B20(&qword_10010B408);
  v7[24] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v7[25] = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[26] = swift_task_alloc(v22);
  v7[27] = swift_task_alloc(v22);
  unint64_t v23 = (*(void *)(*(void *)(sub_100003B20(&qword_10010BAA0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[28] = swift_task_alloc(v23);
  v7[29] = swift_task_alloc(v23);
  v7[30] = swift_task_alloc(v23);
  return swift_task_switch(sub_100090538, a7, 0LL);
}

uint64_t sub_100090538()
{
  uint64_t v71 = *(void *)(v0 + 240);
  uint64_t v75 = *(void *)(v0 + 232);
  uint64_t v64 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v73 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v74 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v66 = v3;
  uint64_t v55 = *(void *)(v0 + 144);
  uint64_t v60 = *(void *)(v0 + 136);
  uint64_t v61 = *(void *)(v0 + 128);
  uint64_t v62 = *(void *)(v0 + 160);
  uint64_t v65 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v67 = *(void *)(v0 + 48);
  uint64_t v68 = *(void *)(v0 + 56);
  sub_100005FB0(v71, 1LL, 1LL, v1);
  sub_100030CC8();
  sub_1000922CC();
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  *(void *)(v0 + 248) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  uint64_t v6 = *(void *)(v4 + v5 + 24);
  uint64_t v7 = *(void *)(v4 + v5 + 32);
  uint64_t v63 = sub_10009229C((void *)(v4 + v5));
  uint64_t v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  *(void *)(v0 + 256) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v9 = v4 + v8;
  uint64_t v72 = v4 + v8;
  uint64_t v10 = InferenceProviderAssetDescriptor.identifier.getter(v63);
  uint64_t v56 = v11;
  uint64_t v58 = v10;
  uint64_t v18 = InferenceProviderAssetDescriptor.version.getter(v10, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v51 = v19;
  uint64_t v53 = v18;
  unsigned int v70 = enum case for LoadState.dynamicMode(_:);
  *(_DWORD *)(v0 + 34sub_100006F7C(v0 + 4) = enum case for LoadState.dynamicMode(_:);
  uint64_t v69 = *(void (**)(uint64_t))(v3 + 104);
  *(void *)(v0 + 26sub_100006F7C(v0 + 4) = v69;
  v69(v2);
  uint64_t v20 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  *(void *)(v0 + 272) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  uint64_t v21 = (void *)(v4 + v20);
  uint64_t v22 = *(void *)(v4 + v20 + 24);
  sub_100030C08((void *)(v4 + v20));
  uint64_t v23 = sub_1000923A0();
  sub_1000923DC(v23);
  sub_1000923D4();
  sub_100092270();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
  *(void *)(v0 + 280) = v24;
  sub_100092520(v24, v41, v42, v43, v44, v45, v46, v47, v48, v49, v2, v51, v53, v55, v56, v58, v60);
  sub_100005FB0(v75, 1LL, 1LL, v1);
  uint64_t v25 = sub_100003B20(&qword_10010B9A0);
  uint64_t v28 = sub_100091EB4(v25, v26, v27, v25);
  *(void *)(v0 + 288) = v28;
  sub_10002FF3C(v65, v29, v30, v28);
  *(void *)(v0 + 296) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 40))( v64,  v59,  v57,  v54,  v52,  v67,  v50,  v68,  v9,  v22,  v75,  v61,  v65,  v6,  v7);
  sub_1000228C4();
  sub_100007570();
  sub_100022D34();
  sub_10002F99C(v65, &qword_10010DA40);
  sub_100083DC8(v31, &qword_10010DA80);
  sub_10002F99C(v75, &qword_10010BAA0);
  os_log_type_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8);
  *(void *)(v0 + 30sub_100006F7C(v0 + 4) = v32;
  sub_1000304C4(v50, v32);
  uint64_t v33 = sub_100049B78();
  sub_10002F99C(v33, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v71, v64, v1);
  sub_100005FB0(v71, 0LL, 1LL, v1);
  uint64_t v35 = v21[3];
  uint64_t v36 = v21[4];
  sub_10009229C(v21);
  ((void (*)(uint64_t, void, uint64_t))v69)(v74, v70, v62);
  uint64_t v37 = *(int **)(v36 + 24);
  uint64_t v38 = v37[1];
  os_log_type_t v76 = (int *)((char *)v37 + *v37);
  sub_10000C030();
  uint64_t v39 = (void *)swift_task_alloc(v38);
  *(void *)(v0 + 312) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_100090840;
  return ((uint64_t (*)(uint64_t, void, void, void, uint64_t, uint64_t))v76)( v72,  *(void *)(v0 + 176),  *(void *)(v0 + 48),  *(void *)(v0 + 216),  v35,  v36);
}

uint64_t sub_100090840()
{
  *(void *)(v0 + 320) = v1;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v0 + 304))(*(void *)(v0 + 176), *(void *)(v0 + 160));
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_1000908A4()
{
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v33 = *(void *)(v0 + 288);
  unsigned int v40 = *(_DWORD *)(v0 + 344);
  uint64_t v41 = *(void (**)(uint64_t, void, uint64_t))(v0 + 264);
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v36 = *(void *)(v0 + 240);
  uint64_t v37 = *(void *)(v0 + 192);
  uint64_t v38 = *(void *)(v0 + 184);
  uint64_t v39 = *(void *)(v0 + 160);
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v29 = *(void *)(v0 + 96);
  uint64_t v30 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)(v2 + *(void *)(v0 + 248));
  sub_1000B94C0( *(void *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path),  *(void *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  uint64_t v31 = sub_1000924E8(v3);
  uint64_t v28 = InferenceProviderAssetDescriptor.identifier.getter(v31);
  uint64_t v27 = InferenceProviderAssetDescriptor.version.getter(v28, v6, v7, v8, v9, v10, v11, v12);
  AssetCost.onDeviceMemory.getter(v27);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))( v30,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:),  v29);
  sub_10002FF3C(v32, v13, v14, v33);
  sub_10009241C(*(uint64_t (**)(void))(v5 + 48));
  sub_10000C280();
  sub_1000303D0();
  uint64_t v15 = sub_10000C1E0();
  sub_10008373C(v15, &qword_10010DA40);
  sub_100022BF8(v30, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10002F99C(v36, &qword_10010BAA0);
  sub_100092328( v36,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  0LL,  v32,  v4,  v5,  v27,  v28,  v29,  v30,  (uint64_t)v31,  v32,  v33,  v34,  v35,  v36,  v37);
  v41(v38, v40, v39);
  uint64_t v23 = (void *)swift_task_alloc(dword_10010DE64);
  *(void *)(v0 + 328) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100090A68;
  uint64_t v24 = sub_1000306EC(*(void *)(v0 + 64));
  return sub_100091E00(v24, v25);
}

uint64_t sub_100090A68()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[8];
  sub_10000BCE4(v0[41]);
  sub_1000923C4(v1);
  return sub_100021BCC((uint64_t)sub_100090AC4, v2, 0LL);
}

uint64_t sub_100090AC4()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[24];
  uint64_t v40 = v0[19];
  uint64_t v44 = v0[16];
  uint64_t v48 = v0[15];
  uint64_t v51 = v0[14];
  uint64_t v53 = v0[11];
  __n128 v5 = swift_release(v0[37]);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v4, v5);
  sub_10002F99C(v1, &qword_10010BAA0);
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030760();
  sub_10000C140();
  uint64_t v6 = swift_task_dealloc(v40);
  uint64_t v14 = sub_1000499B4(v6, v7, v8, v9, v10, v11, v12, v13, v40, v44);
  uint64_t v22 = sub_100030B50(v14, v15, v16, v17, v18, v19, v20, v21, v41, v45, v48);
  uint64_t v30 = sub_1000308B0(v22, v23, v24, v25, v26, v27, v28, v29, v42, v46, v49, v51);
  sub_100084918(v30, v31, v32, v33, v34, v35, v36, v37, v43, v47, v50, v52, v53);
  uint64_t v38 = (uint64_t (*)(void))sub_1000227B8();
  return v38();
}

uint64_t sub_100090B9C()
{
  return sub_10000BD98();
}

#error "100090C58: call analysis failed (funcsize=42)"
uint64_t sub_100090C80()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  void *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  os_log_s *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8LL);
  v85(v0[27], v0[24]);
  if (qword_10010B0C8 != -1) {
    swift_once(&qword_10010B0C8, sub_100086EE0);
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[40];
  uint64_t v3 = sub_10000BF6C();
  uint64_t v4 = sub_100003BA0(v3, (uint64_t)qword_10010DC28);
  sub_10000BD20(v1);
  sub_100030414();
  sub_10000C030();
  sub_100030414();
  __n128 v5 = sub_10000C030();
  uint64_t v6 = (void *)v4;
  Logger.logObject.getter(v5);
  uint64_t v7 = sub_100022604();
  if (sub_10002275C(v7))
  {
    uint64_t v74 = (void (*)(uint64_t, uint64_t))v0[35];
    unsigned int v70 = v0[19];
    uint64_t v72 = v0[17];
    uint64_t v8 = v0[5];
    uint64_t v9 = (void *)(v8 + v0[34]);
    uint64_t v82 = (os_log_s *)v4;
    uint64_t v10 = (_DWORD *)sub_10000BCF4(32LL);
    uint64_t v80 = (void *)sub_10000BCF4(8LL);
    uint64_t v86 = sub_10000BCF4(64LL);
    *uint64_t v10 = 136315650;
    int v77 = v2;
    uint64_t v11 = sub_1000833BC();
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    sub_100091F9C(v13, v14);
    v0[2] = v15;
    sub_100092470((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
    sub_10000BCDC(v8);
    sub_10000BD28();
    sub_10009242C();
    uint64_t v16 = v9[4];
    sub_100030C08(v9);
    uint64_t v17 = sub_1000923A0();
    v18(v17, v16);
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10009248C();
    sub_100030B70(v19, v20);
    v74(v70, v72);
    sub_10003CF70();
    v0[3] = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);
    sub_10000BCDC(v8);
    sub_10000C1E0();
    sub_100091F08();
    uint64_t v22 = sub_100092450();
    v0[4] = v22;
    sub_1000301B8((uint64_t)(v0 + 4), (uint64_t)(v0 + 5));
    *uint64_t v80 = v22;
    sub_100091DBC();
    sub_100091DBC();
    uint64_t v6 = v82;
    sub_10009224C((void *)&_mh_execute_header, v82, v77, "Failed to move asset %s to dynamic mode in %s: %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v80);
    sub_10000BCC4((uint64_t)v80);
    sub_1000307B4(v86);
    sub_10000BCC4(v86);
    sub_10000BCC4((uint64_t)v10);
  }

  else
  {
    sub_10000C0C4(v0[5]);
    sub_100091DBC();
    sub_100091DBC();
  }

  uint64_t v23 = v0[28];
  uint64_t v24 = v0[24];
  sub_1000918F0(v0[30], v23, &qword_10010BAA0);
  if (sub_1000060B4(v23, 1LL, v24) == 1)
  {
    uint64_t v25 = v0[28];
    swift_release(v0[37]);
    sub_10002F99C(v25, &qword_10010BAA0);
  }

  else
  {
    uint64_t v26 = v0[40];
    uint64_t v83 = v0[37];
    uint64_t v78 = v0[26];
    uint64_t v81 = v0[36];
    uint64_t v84 = v0[24];
    uint64_t v75 = v0[15];
    uint64_t v27 = v0[13];
    uint64_t v28 = v0[12];
    uint64_t v69 = v0[14];
    uint64_t v71 = v28;
    uint64_t v63 = v0[10];
    uint64_t v64 = v0[9];
    uint64_t v29 = (void *)(v0[5] + v0[31]);
    (*(void (**)(void))(v0[25] + 32LL))();
    uint64_t v31 = v29[3];
    uint64_t v30 = v29[4];
    os_log_type_t v76 = sub_100030C08(v29);
    uint64_t v67 = InferenceProviderAssetDescriptor.identifier.getter(v76);
    uint64_t v33 = v32;
    uint64_t v65 = InferenceProviderAssetDescriptor.version.getter(v67, v32, v34, v35, v36, v37, v38, v39);
    uint64_t v41 = v40;
    uint64_t v42 = static AssetCost.zero.getter();
    uint64_t v43 = AssetCost.onDeviceMemory.getter(v42);
    sub_1000924F0(v63);
    uint64_t v44 = v69;
    (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))( v69,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:),  v28);
    uint64_t v45 = v75;
    sub_100092328( v75,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v67,  v69,  v71,  v27,  v75,  (uint64_t)v76,  v78,  v81);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 48);
    swift_errorRetain(v26);
    v53(v79, v68, v33, v66, v41, v43, v44, v83, v26, v45, v31, v30);
    swift_release(v83);
    swift_errorRelease(v26);
    sub_100022B4C();
    uint64_t v54 = sub_100007570();
    sub_100092338(v54, &qword_10010DA40);
    sub_1000924F0(v73);
    v85(v79, v84);
  }

  uint64_t v55 = (void *)swift_task_alloc(dword_10010DE64);
  v0[42] = v55;
  *uint64_t v55 = v0;
  v55[1] = sub_100090B9C;
  uint64_t v56 = sub_1000306EC(v0[8]);
  return sub_100091E00(v56, v57);
}

uint64_t sub_100091114()
{
  uint64_t v30 = v1;
  uint64_t v31 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000306E4();
  sub_100092340();
  __chkstk_darwin(v7);
  sub_10000C110();
  uint64_t v10 = v8 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = sub_1000922D4();
  uint64_t v16 = v15;
  uint64_t v17 = InferenceProviderAssetDescriptor.identifier.getter();
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0LL);
    sub_10000C000();
    sub_10000BD28();
    char v21 = 0;
    if ((v20 & 1) == 0) {
      return v21 & 1;
    }
  }

  sub_100030C08((void *)(v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection));
  uint64_t v22 = sub_1000923A0();
  sub_100092154(v22);
  uint64_t v23 = (void *)(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  uint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  uint64_t v25 = v23[4];
  sub_1000924E8(v23);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  char v21 = ((uint64_t (*)(char *, uint64_t))static InferenceProviderDescriptor.== infix(_:_:))(v13, v10);
  uint64_t v26 = *(void (**)(uint64_t))(v0 + 8);
  uint64_t v27 = sub_100049B78();
  v26(v27);
  sub_1000923C4((uint64_t)v13);
  return v21 & 1;
}

uint64_t sub_100091270(uint64_t a1)
{
  uint64_t v5 = sub_1000306E4();
  sub_10009240C();
  __chkstk_darwin(v6);
  sub_1000846F4();
  uint64_t v7 = InferenceProviderAssetDescriptor.identifier.getter();
  String.hash(into:)(a1, v7, v8);
  sub_10000BD28();
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  sub_1000924E8((void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection));
  sub_100092154(v9);
  sub_100048A38( &qword_10010DC18,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v10);
  return sub_100030250(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

void sub_10009135C()
{
}

void sub_100091390()
{
}

uint64_t sub_1000913B0(uint64_t a1)
{
  return sub_100091270(a1);
}

void sub_1000913D0(uint64_t a1)
{
}

uint64_t sub_100091404()
{
  return sub_100091114() & 1;
}

uint64_t sub_100091424()
{
  uint64_t v2 = sub_1000306E4();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10008570C();
  uint64_t v14 = InferenceProviderAssetDescriptor.description.getter();
  uint64_t v15 = v4;
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = 8250LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  sub_100022D34();
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10000729C( (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v9 = InferenceProviderDescriptor.description.getter(v8);
  uint64_t v11 = v10;
  sub_100030250(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  swift_bridgeObjectRetain(v15);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  sub_1000228C4();
  sub_100022D34();
  return v14;
}

uint64_t sub_100091530()
{
  return sub_100091424();
}

void sub_100091550()
{
}

uint64_t sub_10009157C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000915C0(uint64_t a1, uint64_t a2)
{
  return swift_weakCopyInit(a2, a1);
}

uint64_t sub_1000915D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000915F4()
{
  uint64_t v1 = sub_100083B94();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v18 + 40) & ~v18;
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = sub_1000837B4();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(void *)(sub_100003B20(&qword_10010DA40) - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v8 + v9 + v11) & ~v11;
  uint64_t v17 = *(void *)(v10 + 64);
  sub_10000C214();
  sub_10000C238();
  sub_100030250(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100022BF8(v0 + v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  uint64_t v13 = sub_100092464();
  unint64_t v14 = (v17 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = v14 + 8;
  swift_release(*(void *)(v0 + v14));
  return swift_deallocObject(v0, v15, v18 | v7 | v11 | 7);
}

uint64_t sub_10009170C()
{
  uint64_t v3 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_10010DE54);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v6;
  uint64_t v7 = sub_100091F4C(v6);
  return sub_10008D7F8(v7, v8, v9, v10, v11, v12, v3, v5);
}

uint64_t sub_1000917AC()
{
  uint64_t v1 = *(void *)(sub_100083B94() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(sub_1000837B4() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = v2 | v6 | 7;
  unint64_t v9 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10000C214();
  sub_10000C238();
  sub_100030250(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_100022BF8(v0 + v7, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release(*(void *)(v0 + v9));
  return swift_deallocObject(v0, v9 + 8, v8);
}

uint64_t sub_100091864()
{
  uint64_t v3 = *(void *)(v0 + v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_10010DE6C);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v4;
  uint64_t v5 = sub_100091F4C(v4);
  return sub_100090384(v5, v6, v7, v8, v9, v10, v3);
}

uint64_t sub_1000918E0(uint64_t a1, uint64_t a2)
{
  return swift_weakTakeInit(a2, a1);
}

void sub_1000918F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10004E10C(a1, a2, a3);
  sub_100049B90(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1000075C0();
}

uint64_t sub_10009191C()
{
  uint64_t v1 = *(void *)(sub_1000837B4() - 8);
  uint64_t v25 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v25 + 48) & ~v25;
  uint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_100003B20(&qword_10010BAA0) - 8);
  uint64_t v24 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = (v3 + v24) & ~v24;
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(sub_100003B20(&qword_10010DA80) - 8);
  uint64_t v23 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = (v5 + v6 + v23) & ~v23;
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v21 = sub_100083B94();
  uint64_t v10 = *(void *)(v21 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v11 = (v8 + v9 + v20) & ~v20;
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(sub_100003B20(&qword_10010DA40) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v11 + v12 + v14;
  uint64_t v22 = *(void *)(v13 + 64);
  sub_10000C214();
  sub_10000C238();
  swift_release(*(void *)(v0 + 40));
  sub_100022BF8(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v16 = sub_100003B20(&qword_10010B408);
  uint64_t v17 = sub_100003B20(&qword_10010B9A0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v11, v21);
  uint64_t v18 = sub_100092464();
  return swift_deallocObject(v0, (v15 & ~v14) + v22, v25 | v24 | v23 | v20 | v14 | 7);
}

void sub_100091AC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10004E10C(a1, a2, a3);
  sub_100049B90(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1000075C0();
}

uint64_t sub_100091AF4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DE7C);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000492F4;
  sub_10002FF0C();
  return sub_10008BA7C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100091C1C()
{
  *(void *)(v2 - 152) = v0 + 5;
  *(void *)(v2 - 136) = v0 + 8;
  *(void *)(v2 - 168) = v0[38];
  *(void *)(v2 - 176) = v0[35];
  *(void *)(v2 - 160) = v0[32];
  *(void *)(v2 - 10sub_100006F7C(v0 + 4) = v0[29];
  *(void *)(v2 - 96) = v1;
  return type metadata accessor for RequestMetadata(0LL);
}

uint64_t sub_100091C94()
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 - 120);
  *(void *)(v1 - 10sub_100006F7C(v0 + 4) = v0[38];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[35];
  *(void *)(v1 - 176) = v0[33];
  *(void *)(v1 - 120) = v0[32];
  return v2(v3, *(unsigned int *)(v1 - 128), v4);
}

uint64_t sub_100091CFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  *(void *)(v38 - 160) = a1;
  sub_100005FB0(a31, 1LL, 1LL, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a27 + 40))( a32,  a26,  a25,  a24,  a23,  *(void *)(v38 - 168),  a22,  v34,  v33,  v37,  v32,  v35,  a31,  v36,  a27);
}

uint64_t sub_100091D64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v37 + 48))( a32,  *(void *)(v38 - 136),  v36,  *(void *)(v38 - 112),  v32,  v33,  v35,  *(void *)(v38 - 168),  0LL,  a31,  v34,  v37);
}

uint64_t sub_100091DBC()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100091DC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  *(_WORD *)(v16 + 12) = 2080;
  uint64_t v17 = a16[3];
  uint64_t v18 = a16[4];
  sub_10000729C(a16, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
}

uint64_t sub_100091E00(uint64_t a1, uint64_t a2)
{
  return sub_10008A5A0(a1, a2);
}

void sub_100091E1C()
{
}

uint64_t sub_100091E2C()
{
  uint64_t v2 = *(void *)(v0 + 304);
  *(void *)(v1 - 96) = *(void *)(v0 + 152);
  return swift_task_dealloc(v2);
}

uint64_t sub_100091E54()
{
  return (*(uint64_t (**)(void, void, void))(v0[36] + 16LL))(v0[38], v0[16] + v0[39], v0[35]);
}

uint64_t sub_100091E7C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100091E98()
{
  return Task.value.getter();
}

uint64_t sub_100091EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for AuditToken(0LL);
}

uint64_t sub_100091ED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  uint64_t v4 = *(void *)(v1 + a1 + 24);
  uint64_t v3 = *(void *)(v1 + a1 + 32);
  sub_10000729C(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3);
}

uint64_t sub_100091F08()
{
  *(_WORD *)(v0 + 22) = 2112;
  return swift_errorRetain(v1);
}

uint64_t sub_100091F1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + a1 + 24);
  uint64_t v2 = *(void *)(v1 + a1 + 32);
  sub_10000729C((void *)(v1 + a1), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
}

uint64_t sub_100091F4C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_100091F94(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

void sub_100091F9C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100091FA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a19 + 8))(v20, a20);
}

uint64_t sub_100091FC4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 136) + 8LL))(v0, v1);
}

uint64_t sub_100091FE0()
{
  return sub_10009157C(v1, v0);
}

uint64_t sub_100091FEC(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_100091FF8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_100092008()
{
  return sub_100081BB0(v0, v1);
}

void sub_100092014()
{
}

void sub_100092020(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10009202C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100092038()
{
  return sub_10009157C(v0, v1);
}

uint64_t sub_100092044()
{
  *(_DWORD *)(v4 - 128) = v3;
  *(void *)(v4 - 120) = v2;
  return v2(v0, v3, v1);
}

uint64_t sub_100092060()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
}

uint64_t sub_10009207C(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)(v3 - 152), v1 + 120, v2);
}

void sub_100092094()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_1000920A4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_1000920AC(uint64_t a1)
{
}

uint64_t sub_1000920D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a27 + 104))(a29, a2, a30);
}

uint64_t sub_1000920EC(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v3, a1);
}

uint64_t sub_100092104(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10009210C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v18 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, a17, v17);
}

uint64_t sub_100092124( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  *(void *)(v32 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a32, v33, v34);
}

uint64_t sub_10009213C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(uint64_t, uint64_t))
{
  return a20(v21, v20);
}

uint64_t sub_100092154(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10009215C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return sub_100005FB0(a21, 1LL, 1LL, *(void *)(v21 - 160));
}

uint64_t sub_100092174()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v0);
}

  ;
}

void *sub_1000921A0()
{
  return sub_10000729C((void *)(v1 + v0), *(void *)(v1 + v0 + 24));
}

uint64_t sub_1000921B4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v1 + a1, v3, v2);
}

uint64_t sub_1000921C8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000921DC()
{
  return v1(v2, v0, v3);
}

uint64_t sub_1000921F0(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_1000921F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v0, v3, v1);
}

  ;
}

uint64_t sub_100092228()
{
  uint64_t v1 = sub_10000729C(*(void **)(v0 - 144), *(void *)(*(void *)(v0 - 144) + 24LL));
  *(void *)(v0 - 128) = v1;
  return InferenceProviderAssetDescriptor.identifier.getter(v1);
}

void sub_10009224C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_100092258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_dynamicCast(a1, a2, a3, v3, 0LL);
}

void sub_100092264(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_10009227C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  return (*(uint64_t (**)(uint64_t, void))(a29 + 8))(v29, *(void *)(v30 - 104));
}

uint64_t sub_100092290@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void *sub_10009229C(void *a1)
{
  return sub_10000729C(a1, v1);
}

uint64_t sub_1000922A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v18 + 104))(a18, a2, *(void *)(v19 - 104));
}

uint64_t sub_1000922B8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_1000922CC()
{
  return UUIDIdentifier.init()();
}

uint64_t sub_1000922D4()
{
  return InferenceProviderAssetDescriptor.identifier.getter();
}

uint64_t sub_1000922DC(uint64_t a1)
{
  return sub_1000060B4(v1, 1LL, a1);
}

uint64_t sub_1000922F0()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 176) + 8LL))(v0, *(void *)(v1 - 120));
}

void *sub_100092304(void *a1, uint64_t a2)
{
  return sub_10000729C(a1, a2);
}

uint64_t sub_100092320(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_100092328( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return sub_100005FB0(a1, 1LL, 1LL, a23);
}

void sub_100092338(uint64_t a1, uint64_t *a2)
{
}

  ;
}

void sub_100092350()
{
  *(void *)(v1 - 88) = *(void *)(v0 + 352);
}

uint64_t sub_100092368@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_100092378@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 88))();
}

BOOL sub_100092380(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100092390()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 96))(v0, *(void *)(v1 - 176));
}

uint64_t sub_1000923A0()
{
  return v0;
}

  ;
}

uint64_t sub_1000923C4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000923CC(uint64_t a1)
{
  return sub_10009157C(a1, v1);
}

uint64_t sub_1000923D4()
{
  return InferenceProviderDescriptor.id.getter();
}

uint64_t sub_1000923DC(uint64_t a1)
{
  return v1(a1, v2);
}

void *sub_1000923E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + a1 + 24);
  *(void *)(v2 - 14sub_100006F7C(v0 + 4) = v1 + a1;
  return sub_10000729C((void *)(v1 + a1), v3);
}

  ;
}

uint64_t sub_10009241C@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_100092424()
{
  return swift_task_dealloc(*(void *)(v0 - 120));
}

void sub_10009242C()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_100092440()
{
  return InferenceProviderAssetDescriptor.version.getter();
}

uint64_t sub_100092448()
{
  return static Date.now.getter();
}

uint64_t sub_100092450()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_100092458()
{
  return sub_100081BB0(v0, v1);
}

uint64_t sub_100092464()
{
  return type metadata accessor for AuditToken(0LL);
}

uint64_t sub_100092470(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100092478()
{
  return AssetCost.onDeviceMemory.getter();
}

uint64_t sub_100092484(uint64_t a1, ...)
{
  return swift_endAccess(va);
}

  ;
}

uint64_t sub_100092498()
{
  return swift_task_dealloc(*(void *)(v0 - 112));
}

uint64_t sub_1000924A0()
{
  return swift_release_n(v0, 2LL);
}

void sub_1000924AC(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

  ;
}

void *sub_1000924D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 4++*(void *)(v0 + 16) = result;
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void *sub_1000924E8(void *a1)
{
  return sub_10000729C(a1, v1);
}

uint64_t sub_1000924F0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000924FC()
{
  return v1(v0, v2);
}

uint64_t sub_100092508(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(a1, a2, v2);
}

uint64_t sub_100092514( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(void *)(v19 - 112) = v18;
  return InferenceProviderAssetDescriptor.version.getter( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18);
}

uint64_t sub_100092520@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a1(v17, a17);
}

  ;
}

ValueMetadata *type metadata accessor for OSVariantProvider()
{
  return &type metadata for OSVariantProvider;
}

uint64_t sub_100092550()
{
  uint64_t v3 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString;
  *(void *)uint64_t v3 = "Execute Request";
  *(void *)(v3 + 8) = 15LL;
  *(_BYTE *)(v3 + ++*(void *)(v0 + 16) = 2;
  sub_100096124(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString);
  sub_100096124(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  sub_100096124(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  sub_100096124(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  uint64_t v4 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString;
  *(void *)uint64_t v4 = "Prewarm Request";
  *(void *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + ++*(void *)(v0 + 16) = v6;
  uint64_t v7 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_logger;
  uint64_t v8 = subsystemName.getter();
  Logger.init(subsystem:category:)(v8);
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000846F4();
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v11);
  sub_10003D2C8();
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v2, v7);
  OSSignposter.init(logger:)(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))( v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster,  v1,  v9);
  return v0;
}

void sub_1000926EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, unsigned __int8 a26, unsigned __int8 a27)
{
  a19 = v33;
  a20 = v34;
  uint64_t v36 = v35;
  uint64_t v134 = v37;
  uint64_t v135 = v38;
  uint64_t v148 = v40;
  uint64_t v149 = v39;
  uint64_t v133 = v41;
  uint64_t v141 = v42;
  uint64_t v142 = v43;
  uint64_t v44 = a23;
  uint64_t v150 = a21;
  sub_100003B20(&qword_10010B9A0);
  sub_100096084();
  __chkstk_darwin(v45);
  sub_100022990();
  uint64_t v46 = sub_100003B20(&qword_10010B408);
  sub_1000224A4();
  __chkstk_darwin(v47);
  sub_100021FA4();
  uint64_t v139 = v28 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  uint64_t v144 = *(const char **)(v28 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString);
  int v136 = *(unsigned __int8 *)(v28 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString + 16);
  uint64_t v48 = sub_100095BC8();
  uint64_t v145 = *(void *)(v48 - 8);
  uint64_t v146 = v48;
  uint64_t v49 = __chkstk_darwin(v48);
  uint64_t v143 = v50;
  uint64_t v51 = (char *)v129 - (((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = OSSignposter.logHandle.getter(v49);
  os_log_t v147 = v51;
  uint64_t v53 = v44;
  OSSignpostID.init(log:)(v52);
  uint64_t v54 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 16);
  uint64_t v55 = v141;
  uint64_t v140 = v32;
  uint64_t v141 = (char *)v46;
  v54(v30, v55, v46);
  uint64_t v138 = v27;
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  os_log_t v57 = (os_log_t)v31;
  uint64_t v58 = v148;
  uint64_t v59 = v142;
  uint64_t v142 = v29;
  sub_1000228F0(v31, v59, v56);
  sub_100095A18();
  sub_10000C2A8(v149);
  sub_10000C2A8(v58);
  uint64_t v137 = v36;
  sub_10000C2A8(v36);
  sub_10000C2A8(v150);
  sub_10000C2A8(v44);
  uint64_t v60 = sub_100096130();
  sub_100095CE4(v60, v61, v62, v63);
  uint64_t v64 = sub_100096130();
  uint64_t v68 = sub_100095CE4(v64, v65, v66, v67);
  uint64_t v69 = (void *)OSSignposter.logHandle.getter(v68);
  int v70 = static os_signpost_type_t.begin.getter();
  uint64_t v71 = sub_1000960D8();
  if ((v71 & 1) == 0)
  {

    (*(void (**)(uint64_t, char *))(v140 + 8))(v30, v141);
    sub_100095FF4(v31, *(uint64_t (**)(uint64_t, void))(v138 + 8));
    sub_10000C1B0(v53);
    sub_10000C1B0(v150);
    sub_10000C1B0(v137);
    sub_10000C1B0(v58);
    uint64_t v74 = sub_10000C1B0(v149);
    uint64_t v75 = v145;
    uint64_t v76 = (uint64_t)v147;
LABEL_17:
    __chkstk_darwin(v74);
    sub_100095B48();
    sub_100083B50((uint64_t)v57, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16));
    uint64_t v126 = sub_100095F04();
    sub_10000749C(v126);
    sub_100095B08();
    sub_1000304C4(v76, *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8));
    uint64_t v127 = sub_100095F0C();
    uint64_t v128 = sub_100095CD0(v127);
    sub_100095F30(v128);
    sub_100007448();
    return;
  }

  uint64_t v132 = v30;
  uint64_t v73 = v140;
  uint64_t v72 = v141;
  uint64_t v139 = v53;
  os_log_t v131 = (os_log_t)v69;
  int v130 = v70;
  if ((v136 & 1) != 0)
  {
    if ((unint64_t)v144 >> 32)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v77)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }

      sub_100095C34();
      if (!(!v77 & v78))
      {
        uint64_t v36 = (uint64_t)v57;
        uint64_t v144 = (const char *)&v153;
LABEL_10:
        uint64_t v79 = v73;
        uint64_t v143 = v129;
        LODWORD(v140) = a27;
        int v136 = a26;
        v129[2] = a25;
        v129[1] = a24;
        v129[0] = a22;
        uint64_t v80 = __chkstk_darwin(v71);
        uint64_t v141 = sub_100095DE0(v80, v81, v82, v83, v84, v85, v86, v87, v129[0]);
        (*(void (**)(void))(v145 + 16))();
        uint64_t v88 = sub_10000BCF4(112LL);
        uint64_t v142 = sub_10000BCF4(288LL);
        uint64_t v152 = v142;
        *(_DWORD *)uint64_t v88 = 136448770;
        uint64_t v89 = v132;
        uint64_t v90 = UUIDIdentifier.uuidString.getter(v72);
        sub_100095AE0(v90, v91);
        sub_10009605C(v92);
        uint64_t v94 = v93 + 8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v93 + 8);
        sub_10000BD28();
        sub_100022BF8(v89, *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8));
        *(_WORD *)(v88 + 12) = 2082;
        uint64_t v95 = sub_1000960B8();
        sub_100095AE0(v95, v96);
        uint64_t v151 = v97;
        sub_100095BC0((uint64_t)&v151, v94);
        sub_10000BD28();
        sub_100030250(v36, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
        *(_WORD *)(v88 + 22) = 2082;
        uint64_t v98 = v149;
        sub_100022944();
        sub_100095D28(v133, v99, &v152);
        sub_100095AEC(v100);
        sub_100095B00(v98);
        *(_WORD *)(v88 + 32) = 2082;
        uint64_t v101 = v148;
        sub_100022944();
        sub_100095D28(v134, v102, &v152);
        sub_100095AEC(v103);
        sub_100095B00(v101);
        *(_WORD *)(v88 + 42) = 2082;
        uint64_t v104 = v137;
        sub_100022944();
        sub_100095D28(v135, v105, &v152);
        sub_100095AEC(v106);
        sub_100095B00(v104);
        *(_WORD *)(v88 + 52) = 2082;
        uint64_t v107 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
        sub_100048A38( &qword_10010B978,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        uint64_t v109 = v108;
        uint64_t v110 = v150;
        uint64_t v111 = swift_bridgeObjectRetain(v150);
        uint64_t v112 = Set.description.getter(v111, v107, v109);
        swift_bridgeObjectRelease(v110);
        sub_100095D40(v112, v113, &v152);
        sub_100095AEC(v114);
        sub_10000C1B0(v110);
        sub_100022B4C();
        *(_WORD *)(v88 + 62) = 2082;
        uint64_t v115 = v139;
        sub_100022944();
        sub_100095D28(v129[0], v116, &v152);
        sub_100095AEC(v117);
        sub_100095B00(v115);
        *(_WORD *)(v88 + 72) = 2050;
        sub_100095ED4(v88 + 74, (uint64_t)&a14);
        *(_WORD *)(v88 + 82) = 2050;
        sub_100095ED4(v88 + 84, (uint64_t)&a15);
        *(_WORD *)(v88 + 92) = 2082;
        if ((v136 & 1) != 0) {
          uint64_t v118 = 1702195828LL;
        }
        else {
          uint64_t v118 = 0x65736C6166LL;
        }
        sub_100095E64(v118);
        uint64_t v151 = v119;
        sub_1000301B8((uint64_t)&v151, v94);
        sub_10000C1E0();
        *(_WORD *)(v88 + 102) = 2082;
        if ((v140 & 1) != 0) {
          uint64_t v120 = 1702195828LL;
        }
        else {
          uint64_t v120 = 0x65736C6166LL;
        }
        uint64_t v75 = v145;
        uint64_t v121 = v88 + 104;
        sub_100095E64(v120);
        uint64_t v151 = v122;
        sub_1000301B8((uint64_t)&v151, v94);
        sub_10000C1E0();
        os_signpost_id_t v123 = sub_100096098();
        os_log_t v57 = v131;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v131,  (os_signpost_type_t)v130,  v123,  v144,  "requestIdentifier: %{public, signpost.description=attribute,public}s,\n sessionIdentifier: %{public, signpost.description=attribute,public}s,\n requestLoggingIdentifier: %{public, signpost.description=attribute,public}s,\n useCaseIdentifier: %{public, signpost.description=attribute,public}s,\n modelBundleID: %{public, signpost.description=attribute,public}s,\n assetDescriptors: %{public, signpost.description=attribute,public}s,\n inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\n createdByPID: %{public, signpost.description=attribute,public}ld,\n onBehalfOfPID: %{public, signpost.description=attribute,public}ld,\n oneShot: %{public, signpost.description=attribute,public}s,\n isFallbackRequest: %{public, signpost.description=attribute,public}s",  (uint8_t *)v88,  0x70u);
        uint64_t v124 = v142;
        swift_arrayDestroy(v142, 9LL);
        sub_10000BCC4(v124);
        uint64_t v125 = v88;
        uint64_t v76 = (uint64_t)v147;
        sub_10000BCC4(v125);

        uint64_t v74 = sub_1000304C4(v121, *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8));
        goto LABEL_17;
      }
    }

    __break(1u);
    goto LABEL_20;
  }

  uint64_t v36 = (uint64_t)v57;
  if (v144) {
    goto LABEL_10;
  }
LABEL_21:
  sub_10000C1B0(v149);
  sub_10000C1B0(v148);
  sub_10000C1B0(v137);
  sub_10000C1B0(v150);
  sub_10000C1B0(v139);
  sub_100022BF8(v36, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
  sub_100095E5C(v132, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
  __break(1u);
}

uint64_t sub_100092D88()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

void sub_100092DF4()
{
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  sub_100095D30();
  __chkstk_darwin(v10);
  sub_100095CF0();
  sub_100095BD0(OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString);
  sub_100021EB0();
  sub_1000839E4();
  sub_100021EB0();
  uint64_t v11 = sub_1000839E4();
  uint64_t v12 = (void *)OSSignposter.logHandle.getter(v11);
  sub_100095BC8();
  sub_100096104();
  __chkstk_darwin(v13);
  uint64_t v14 = sub_100095C98();
  static os_signpost_type_t.end.getter(v14);
  if ((sub_1000960D8() & 1) == 0)
  {
    sub_100095DC4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_10000C1B0((uint64_t)v0);
    sub_10008339C();
    sub_10008339C();

    sub_100030650(v3, v0[1]);
LABEL_19:
    sub_100007448();
    return;
  }

  sub_100095EE8();
  if ((v15 & 1) != 0)
  {
    sub_100095FC8();
    if (v17)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v18)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }

      sub_100095C34();
      if (!(!v18 & v19))
      {
        uint64_t v16 = v3;
LABEL_10:
        sub_100095F14();
        sub_100085588();
        __chkstk_darwin(v20);
        uint64_t v21 = sub_100095D08();
        checkForErrorAndConsumeState(state:)(v21);
        swift_release(v12);
        sub_100095FB8();
        if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_100095FAC(), v18))
        {
          sub_100095E3C(v22, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"[Error] Interval already ended");
        }

        else
        {
          uint64_t v31 = sub_100095E5C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
          sub_100095E3C( v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  (uint64_t)"requestIdentifier: %{public, signpost.description=attribute,public}s,\n inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s, \n hasError: %{public, signpost.description=attribute,public}s");
        }

        uint64_t v39 = __chkstk_darwin(v30);
        sub_100095BFC(v39, v40, v41, v42, v43, v44, v45, v46, v62);
        uint64_t v47 = sub_10000BCF4(32LL);
        uint64_t v48 = sub_10000BCF4(96LL);
        uint64_t v49 = sub_100095B90(v48);
        sub_100095CDC(v49, v50);
        uint64_t v66 = v51;
        sub_100095BC0((uint64_t)&v66, (uint64_t)v67);
        sub_1000303D0();
        sub_100095E84();
        sub_100095F3C();
        sub_100095F4C();
        uint64_t v66 = v52;
        sub_100095BC0((uint64_t)&v66, (uint64_t)v67);
        sub_100095B00(v4);
        sub_100096068();
        uint64_t v55 = v54 | 0x65750000u;
        if (v18) {
          uint64_t v56 = 0x65736C6166LL;
        }
        else {
          uint64_t v56 = v55;
        }
        sub_100095D40(v56, v53, v67);
        sub_100095DF4(v57);
        sub_100022B4C();
        sub_1000301C0();
        uint64_t v58 = sub_1000301C0();
        OSSignpostID.rawValue.getter(v58);
        sub_100095F84();
        sub_100095D50((void *)&_mh_execute_header, v59, v60, v61);
        sub_100095D6C();
        sub_10000BCC4(v16);
        sub_10000BCC4(v47);

        sub_100095D48(v64);
        sub_100095D48(v63);
        goto LABEL_19;
      }
    }

    __break(1u);
    goto LABEL_22;
  }

  if (v65)
  {
    uint64_t v16 = v3;
    goto LABEL_10;
  }

void sub_1000930C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned __int8 a21)
{
  uint64_t v104 = v25;
  uint64_t v105 = v26;
  uint64_t v95 = v27;
  uint64_t v96 = v28;
  uint64_t v106 = v29;
  uint64_t v94 = v30;
  uint64_t v100 = v31;
  uint64_t v33 = v32;
  uint64_t v34 = sub_100003B20(&qword_10010B9A0);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_100095CF0();
  uint64_t v36 = sub_100003B20(&qword_10010B408);
  sub_100095D30();
  __chkstk_darwin(v37);
  sub_10000C120();
  uint64_t v40 = v39 - v38;
  uint64_t v101 = *(const char **)(v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString);
  LODWORD(v97) = *(unsigned __int8 *)(v21
                                    + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString
                                    + 16);
  uint64_t v99 = sub_100095BC8();
  uint64_t v102 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v98 = v41;
  sub_10009613C();
  uint64_t v43 = OSSignposter.logHandle.getter(v42);
  uint64_t v103 = v23;
  OSSignpostID.init(log:)(v43);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v40, v33, v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v24, v100, v34);
  sub_10000C2A8(v106);
  sub_10000C2A8(v104);
  uint64_t v44 = sub_10000C2A8(v105);
  uint64_t v45 = (void *)OSSignposter.logHandle.getter(v44);
  LODWORD(v100) = static os_signpost_type_t.begin.getter();
  uint64_t v46 = OS_os_log.signpostsEnabled.getter();
  if ((v46 & 1) == 0)
  {

    sub_100095D98();
    sub_100095DC4(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    sub_10000C1B0(v105);
    sub_10000C1B0(v104);
    uint64_t v47 = sub_10000C1B0(v106);
    uint64_t v48 = v98;
    uint64_t v50 = v102;
    uint64_t v49 = v103;
LABEL_14:
    __chkstk_darwin(v47);
    sub_1000228F0( (uint64_t)&v86[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v49,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16));
    uint64_t v83 = sub_100095F04();
    sub_10000749C(v83);
    sub_100095B08();
    sub_100022CF4(v49, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
    uint64_t v84 = sub_100095F0C();
    uint64_t v85 = sub_100095CD0(v84);
    sub_100095F30(v85);
    sub_100007448();
    return;
  }

  uint64_t v90 = (os_log_s *)v45;
  uint64_t v91 = v24;
  uint64_t v92 = v35;
  uint64_t v93 = v34;
  if ((v97 & 1) != 0)
  {
    if ((unint64_t)v101 >> 32)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v51)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }

      sub_100095C34();
      if (!(!v51 & v52))
      {
        uint64_t v101 = (const char *)&v109;
LABEL_10:
        uint64_t v97 = v86;
        int v87 = a21;
        uint64_t v48 = v98;
        __chkstk_darwin(v46);
        uint64_t v53 = sub_100096034((uint64_t)v86);
        sub_1000228F0(v53, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 16));
        uint64_t v55 = sub_10000BCF4(62LL);
        uint64_t v89 = sub_10000BCF4(192LL);
        uint64_t v108 = v89;
        *(_DWORD *)uint64_t v55 = 136447490;
        uint64_t v56 = sub_1000960B8();
        sub_100095AE0(v56, v57);
        sub_10009605C(v58);
        uint64_t v60 = v59 + 8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v59 + 8);
        sub_10000BD28();
        sub_100095D98();
        *(_WORD *)(v55 + 12) = 2082;
        uint64_t v61 = v91;
        uint64_t v62 = UUIDIdentifier.uuidString.getter(v93);
        sub_100095AE0(v62, v63);
        uint64_t v107 = v64;
        sub_10000C04C((uint64_t)&v107, v60);
        sub_10000BD28();
        uint64_t v65 = v61;
        uint64_t v50 = v102;
        sub_1000303C8(v65, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
        *(_WORD *)(v55 + 22) = 2082;
        uint64_t v66 = v106;
        sub_100022944();
        sub_100095D28(v94, v67, &v108);
        uint64_t v107 = v68;
        sub_10000C04C((uint64_t)&v107, v60);
        sub_100095B00(v66);
        *(_WORD *)(v55 + 32) = 2082;
        uint64_t v69 = v104;
        sub_100022944();
        sub_100095D28(v95, v70, &v108);
        uint64_t v107 = v71;
        sub_10000C04C((uint64_t)&v107, v60);
        sub_100095B00(v69);
        *(_WORD *)(v55 + 42) = 2082;
        uint64_t v72 = v105;
        sub_100022944();
        sub_100095D28(v96, v73, &v108);
        uint64_t v107 = v74;
        sub_10000C04C((uint64_t)&v107, v60);
        sub_100095B00(v72);
        *(_WORD *)(v55 + 52) = 2082;
        if ((v87 & 1) != 0) {
          uint64_t v75 = 1702195828LL;
        }
        else {
          uint64_t v75 = 0x65736C6166LL;
        }
        sub_100095E64(v75);
        uint64_t v107 = v76;
        uint64_t v77 = v60;
        uint64_t v49 = v103;
        sub_1000301B8((uint64_t)&v107, v77);
        uint64_t v78 = sub_10000C1E0();
        uint64_t v79 = v88;
        os_signpost_id_t v80 = OSSignpostID.rawValue.getter(v78);
        uint64_t v81 = v90;
        sub_10009607C( (void *)&_mh_execute_header,  v90,  (os_signpost_type_t)v100,  v80,  v101,  "requestIdentifier: %{public, signpost.description=attribute,public}s,\n sessionIdentifier: %{public, signpost.description=attribute,public}s,\n requestLoggingIdentifier: %{public, signpost.description=attribute,public}s,\n useCaseIdentifier: %{public, signpost.description=attribute,public}s,\n inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\n oneShot: %{public, signpost.description=attribute,public}s",  (uint8_t *)v55);
        uint64_t v82 = v89;
        swift_arrayDestroy(v89, 6LL);
        sub_10000BCC4(v82);
        sub_10000BCC4(v55);

        uint64_t v47 = sub_100022CF4(v79, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
        goto LABEL_14;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

  if (v101) {
    goto LABEL_10;
  }
LABEL_18:
  sub_10000C1B0(v106);
  sub_10000C1B0(v104);
  sub_10000C1B0(v105);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
  sub_100095D98();
  __break(1u);
}

void sub_1000935B0()
{
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  sub_100095D30();
  __chkstk_darwin(v10);
  sub_100095CF0();
  sub_100095BD0(OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString);
  sub_100021EB0();
  sub_1000839E4();
  sub_100021EB0();
  uint64_t v11 = sub_1000839E4();
  uint64_t v12 = (void *)OSSignposter.logHandle.getter(v11);
  sub_100095BC8();
  sub_100096104();
  __chkstk_darwin(v13);
  uint64_t v14 = sub_100095C98();
  static os_signpost_type_t.end.getter(v14);
  if ((sub_1000960D8() & 1) == 0)
  {
    sub_100095DC4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_10000C1B0((uint64_t)v0);
    sub_10008339C();
    sub_10008339C();

    sub_100030650(v3, v0[1]);
LABEL_19:
    sub_100007448();
    return;
  }

  sub_100095EE8();
  if ((v15 & 1) != 0)
  {
    sub_100095FC8();
    if (v17)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v18)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }

      sub_100095C34();
      if (!(!v18 & v19))
      {
        uint64_t v16 = v3;
LABEL_10:
        sub_100095F14();
        sub_100085588();
        __chkstk_darwin(v20);
        uint64_t v21 = sub_100095D08();
        checkForErrorAndConsumeState(state:)(v21);
        swift_release(v12);
        sub_100095FB8();
        if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_100095FAC(), v18))
        {
          sub_100095E3C(v22, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"[Error] Interval already ended");
        }

        else
        {
          uint64_t v31 = sub_100095E5C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
          sub_100095E3C( v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  (uint64_t)"requestIdentifier: %{public, signpost.description=attribute,public}s,\n inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\n hasError: %{public, signpost.description=attribute,public}s");
        }

        uint64_t v39 = __chkstk_darwin(v30);
        sub_100095BFC(v39, v40, v41, v42, v43, v44, v45, v46, v62);
        uint64_t v47 = sub_10000BCF4(32LL);
        uint64_t v48 = sub_10000BCF4(96LL);
        uint64_t v49 = sub_100095B90(v48);
        sub_100095CDC(v49, v50);
        uint64_t v66 = v51;
        sub_100095BC0((uint64_t)&v66, (uint64_t)v67);
        sub_1000303D0();
        sub_100095E84();
        sub_100095F3C();
        sub_100095F4C();
        uint64_t v66 = v52;
        sub_100095BC0((uint64_t)&v66, (uint64_t)v67);
        sub_100095B00(v4);
        sub_100096068();
        uint64_t v55 = v54 | 0x65750000u;
        if (v18) {
          uint64_t v56 = 0x65736C6166LL;
        }
        else {
          uint64_t v56 = v55;
        }
        sub_100095D40(v56, v53, v67);
        sub_100095DF4(v57);
        sub_100022B4C();
        sub_1000301C0();
        uint64_t v58 = sub_1000301C0();
        OSSignpostID.rawValue.getter(v58);
        sub_100095F84();
        sub_100095D50((void *)&_mh_execute_header, v59, v60, v61);
        sub_100095D6C();
        sub_10000BCC4(v16);
        sub_10000BCC4(v47);

        sub_100095D48(v64);
        sub_100095D48(v63);
        goto LABEL_19;
      }
    }

    __break(1u);
    goto LABEL_22;
  }

  if (v65)
  {
    uint64_t v16 = v3;
    goto LABEL_10;
  }

void sub_100093884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v155 = v24;
  os_log_t v150 = v27;
  uint64_t v151 = v28;
  uint64_t v149 = v29;
  uint64_t v31 = v30;
  uint64_t v144 = v32;
  uint64_t v161 = (uint64_t *)v33;
  uint64_t v143 = v34;
  uint64_t v148 = v35;
  uint64_t v163 = a24;
  uint64_t v167 = a22;
  uint64_t v36 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  uint64_t v158 = *(void *)(v36 - 8);
  uint64_t v159 = v36;
  sub_10000C240();
  __chkstk_darwin(v37);
  sub_100022518();
  uint64_t v166 = v38;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v164 = *(void *)(State - 8);
  sub_10000C240();
  uint64_t v41 = __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v140 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v41);
  uint64_t v162 = (uint64_t)&v140 - v44;
  uint64_t v45 = sub_100003B20(&qword_10010B408);
  sub_1000224A4();
  __chkstk_darwin(v46);
  sub_100022518();
  uint64_t v160 = v47;
  sub_100003B20(&qword_10010DA80);
  sub_10000C240();
  __chkstk_darwin(v48);
  sub_10003D2C8();
  sub_100003B20(&qword_10010BAA0);
  sub_10000C240();
  __chkstk_darwin(v49);
  sub_10000C120();
  uint64_t v52 = v51 - v50;
  uint64_t v53 = v45;
  sub_100095AA0(a23, v51 - v50, &qword_10010BAA0);
  if (sub_1000060B4(v52, 1LL, v45) == 1)
  {
    uint64_t v54 = v26;
    sub_10002F99C(v52, &qword_10010BAA0);
    uint64_t v142 = 0LL;
    unint64_t v55 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v142 = UUIDIdentifier.uuidString.getter(v45);
    unint64_t v55 = v56;
    uint64_t v54 = v26;
    sub_1000303C8(v52, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  }

  uint64_t v156 = v31;
  uint64_t v165 = v43;
  sub_100095AA0(v163, v25, &qword_10010DA80);
  uint64_t v57 = sub_100003B20(&qword_10010B9A0);
  int v58 = sub_1000060B4(v25, 1LL, v57);
  uint64_t v59 = v159;
  uint64_t v60 = v160;
  unint64_t v157 = v55;
  if (v58 == 1)
  {
    sub_10002F99C(v25, &qword_10010DA80);
    uint64_t v141 = 0LL;
    uint64_t v163 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v141 = UUIDIdentifier.uuidString.getter(v57);
    uint64_t v163 = v61;
    sub_100030250(v25, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8LL));
  }

  uint64_t v62 = v164;
  uint64_t v63 = v162;
  uint64_t v64 = (void *)(v155 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster);
  uint64_t v152 = *(const char **)(v155 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  int v145 = *(unsigned __int8 *)(v155 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString + 16);
  uint64_t v65 = sub_100095BC8();
  os_log_t v147 = &v140;
  uint64_t v146 = v65;
  uint64_t v153 = *(void *)(v65 - 8);
  uint64_t v66 = __chkstk_darwin(v65);
  uint64_t v155 = v67;
  uint64_t v68 = (char *)&v140 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = OSSignposter.logHandle.getter(v66);
  uint64_t v154 = v68;
  OSSignpostID.init(log:)(v69);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v60, v148, v53);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  v70(v63, v149, State);
  v70((uint64_t)v165, (uint64_t)v150, State);
  uint64_t v71 = v60;
  uint64_t v72 = v158;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 16))(v166, v151, v59);
  uint64_t v73 = v156;
  sub_10000C2A8(v156);
  sub_10000C2A8(v167);
  uint64_t v74 = v53;
  uint64_t v75 = (uint64_t)v161;
  sub_10000C2A8((uint64_t)v161);
  uint64_t v76 = v157;
  swift_bridgeObjectRetain(v157);
  uint64_t v77 = swift_bridgeObjectRetain(v163);
  OSSignposter.logHandle.getter(v77);
  LODWORD(v151) = sub_1000960F4();
  uint64_t v78 = OS_os_log.signpostsEnabled.getter();
  if ((v78 & 1) == 0)
  {

    sub_100022CF4(v71, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
    sub_10000C1B0(v73);
    sub_10000C1B0(v75);
    sub_100030C10(v162);
    sub_100030C10((uint64_t)v165);
    sub_100022BF8(v166, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
    sub_10000C1B0(v163);
    sub_10000C1B0(v76);
    uint64_t v81 = sub_10000C1B0(v167);
    uint64_t v82 = v146;
    uint64_t v83 = v153;
    uint64_t v84 = (uint64_t)v154;
LABEL_23:
    __chkstk_darwin(v81);
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))( (char *)&v140 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v84,  v82);
    uint64_t v137 = sub_100095F04();
    sub_10000749C(v137);
    sub_100095B08();
    sub_100030650(v84, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
    uint64_t v138 = sub_100095F0C();
    uint64_t v139 = sub_100095CD0(v138);
    sub_100095F30(v139);
    sub_100007448();
    return;
  }

  os_log_t v150 = (os_log_t)v64;
  if ((v145 & 1) != 0)
  {
    uint64_t v80 = v160;
    uint64_t v79 = (uint64_t)v161;
    if ((unint64_t)v152 >> 32)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v85)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      sub_100095C34();
      if (!(!v85 & v86))
      {
        uint64_t v73 = v54;
        uint64_t v152 = (const char *)&v170;
LABEL_16:
        uint64_t v161 = &v140;
        uint64_t v148 = a21;
        __chkstk_darwin(v78);
        uint64_t v87 = sub_100096034((uint64_t)&v140);
        uint64_t v82 = v146;
        (*(void (**)(uint64_t))(v153 + 16))(v87);
        uint64_t v88 = sub_10000BCF4(92LL);
        uint64_t v160 = sub_10000BCF4(288LL);
        uint64_t v169 = v160;
        *(_DWORD *)uint64_t v88 = 136448258;
        unint64_t v89 = sub_10000B4E4();
        uint64_t v90 = v74;
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter(v74, v89);
        sub_100095AE0(v91, v92);
        sub_10009605C(v93);
        uint64_t v95 = v94 + 8;
        sub_10009604C();
        sub_10000BD28();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v80, v90);
        *(_WORD *)(v88 + 12) = 2082;
        sub_1000225A4();
        sub_100095D40(v143, v96, &v169);
        sub_100095CBC(v97);
        sub_100095B00(v79);
        *(_WORD *)(v88 + 22) = 2082;
        uint64_t v98 = v156;
        if (v156) {
          uint64_t v99 = v144;
        }
        else {
          uint64_t v99 = 3157552LL;
        }
        if (v156) {
          uint64_t v100 = v156;
        }
        else {
          uint64_t v100 = 0xE300000000000000LL;
        }
        sub_1000225A4();
        sub_100015EF8(v99, v100, &v169);
        uint64_t v168 = v101;
        sub_10009604C();
        sub_10000C1B0(v98);
        swift_bridgeObjectRelease(v100);
        *(_WORD *)(v88 + 32) = 2082;
        sub_100048A38( &qword_10010CF68,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
        uint64_t v103 = v102;
        uint64_t v104 = v162;
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(State, v102);
        sub_100095AE0(v105, v106);
        uint64_t v168 = v107;
        sub_100095BC0((uint64_t)&v168, v95);
        sub_10000BD28();
        uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
        v108(v104, State);
        *(_WORD *)(v88 + 42) = 2082;
        uint64_t v109 = State;
        uint64_t v110 = (uint64_t)v165;
        uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter(v109, v103);
        sub_100095AE0(v111, v112);
        uint64_t v168 = v113;
        sub_100095BC0((uint64_t)&v168, v95);
        sub_10000BD28();
        v108(v110, v109);
        *(_WORD *)(v88 + 52) = 2082;
        sub_100048A38( &qword_10010DF98,  (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason,  (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason);
        uint64_t v114 = v166;
        uint64_t v115 = v159;
        uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter(v159, v116);
        sub_100095AE0(v117, v118);
        uint64_t v168 = v119;
        sub_100095BC0((uint64_t)&v168, v95);
        sub_10000BD28();
        uint64_t v120 = v115;
        uint64_t v83 = v153;
        (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v114, v120);
        *(_WORD *)(v88 + 62) = 2082;
        uint64_t v121 = v167;
        sub_1000225A4();
        sub_100095D40(v148, v122, &v169);
        sub_100095CBC(v123);
        sub_100095B00(v121);
        *(_WORD *)(v88 + 72) = 2082;
        uint64_t v124 = v157;
        sub_1000225A4();
        sub_100095D40(v142, v125, &v169);
        sub_100095CBC(v126);
        sub_100095B00(v124);
        *(_WORD *)(v88 + 82) = 2082;
        uint64_t v127 = v163;
        sub_1000225A4();
        sub_100095D40(v141, v128, &v169);
        uint64_t v168 = v129;
        uint64_t v130 = v95;
        uint64_t v84 = (uint64_t)v154;
        sub_1000301B8((uint64_t)&v168, v130);
        uint64_t v131 = sub_100095B00(v127);
        uint64_t v132 = v149;
        os_signpost_id_t v133 = OSSignpostID.rawValue.getter(v131);
        os_log_t v134 = v150;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v150,  (os_signpost_type_t)v151,  v133,  v152,  "assetTransitionIdentifier: %{public, signpost.description=attribute,public}s,\n assetIdentifier: %{public, signpost.description=attribute,public}s,\n assetVersion: %{public, signpost.description=attribute,public}s,\n fromState: %{public, signpost.description=attribute,public}s,\n toState: %{public, signpost.description=attribute,public}s,\n reason: %{public, signpost.description=attribute,public}s,\n inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\n RequestUUID: %{public, signpost.description=attribute,public}s,\n sessionIdentifier: %{public, signpost.description=attribute,public}s",  (uint8_t *)v88,  0x5Cu);
        uint64_t v135 = v160;
        swift_arrayDestroy(v160, 9LL);
        sub_10000BCC4(v135);
        sub_10000BCC4(v88);

        uint64_t v81 = sub_100030650(v132, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
        goto LABEL_23;
      }
    }

    __break(1u);
    goto LABEL_26;
  }

  uint64_t v80 = v160;
  uint64_t v79 = (uint64_t)v161;
  uint64_t v73 = v54;
  if (v152) {
    goto LABEL_16;
  }
LABEL_27:
  sub_10000C1B0(v167);
  sub_10000C1B0(v157);
  sub_10000C1B0(v163);
  (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v166, v159);
  sub_100030C10((uint64_t)v165);
  sub_100030C10(v162);
  sub_10000C1B0(v79);
  sub_10000C1B0(v156);
  sub_100022CF4(v80, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
  __break(1u);
}

void sub_100094170( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v26 = v25;
  uint64_t v109 = v27;
  uint64_t v102 = v28;
  uint64_t v103 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v101 = v34;
  uint64_t v36 = v35;
  uint64_t v113 = a21;
  uint64_t v37 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0LL);
  sub_1000224A4();
  __chkstk_darwin(v38);
  sub_100021FA4();
  uint64_t v39 = sub_100003B20(&qword_10010B408);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_1000846F4();
  uint64_t v108 = v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  uint64_t v111 = *(const char **)(v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  LODWORD(v10sub_100006F7C(v0 + 4) = *(unsigned __int8 *)(v21
                                     + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString
                                     + 16);
  uint64_t v41 = *(void *)(v26 + 16);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v40 + 16);
  uint64_t v105 = v43;
  v42(v22, v36);
  sub_100095A64();
  uint64_t v110 = (uint64_t *)v33;
  sub_10000C2A8(v33);
  uint64_t v106 = v31;
  sub_10000C2A8(v31);
  uint64_t v44 = sub_100092D88();
  sub_100095CE4(v44, v45, v46, v47);
  uint64_t v107 = v24;
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  uint64_t v112 = v23;
  sub_1000228F0(v23, v109, v48);
  swift_errorRetain(a21);
  uint64_t v49 = swift_errorRetain(a21);
  uint64_t v50 = (void *)OSSignposter.logHandle.getter(v49);
  uint64_t v51 = sub_100095BC8();
  uint64_t v52 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v100 = v53;
  sub_10009613C();
  uint64_t v108 = v41;
  uint64_t v54 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v109) = static os_signpost_type_t.end.getter(v54);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_100095FF4(v22, *(uint64_t (**)(uint64_t, void))(v40 + 8));
    sub_10000C1B0(v106);
    sub_10000C1B0((uint64_t)v110);
    sub_1000303C8(v112, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
    sub_1000301C0();
    sub_1000301C0();

    sub_1000304C4(v37, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
LABEL_25:
    sub_100007448();
    return;
  }

  uint64_t v97 = v22;
  uint64_t v98 = v40;
  uint64_t v55 = (uint64_t)v110;
  uint64_t v99 = v52;
  uint64_t v96 = (os_log_s *)v50;
  if ((v104 & 1) != 0)
  {
    if ((unint64_t)v111 >> 32)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v59)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }

      sub_100095C34();
      if (!(!v59 & v60))
      {
        uint64_t v56 = v51;
        uint64_t v58 = v37;
        uint64_t v57 = v37;
        uint64_t v111 = (const char *)&v116;
LABEL_10:
        uint64_t v61 = sub_100095F14();
        uint64_t v62 = *(void *)(v61 - 8);
        __chkstk_darwin(v61);
        sub_10003D2C8();
        swift_retain();
        sub_1000960FC();
        swift_release(v108);
        sub_100095EB4(*(uint64_t (**)(uint64_t, uint64_t))(v62 + 88));
        if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_100095FAC(), v59))
        {
          char v64 = 0;
          char v65 = 0;
          uint64_t v95 = "[Error] Interval already ended";
        }

        else
        {
          uint64_t v63 = sub_100095E5C(v37, *(uint64_t (**)(uint64_t, uint64_t))(v62 + 8));
          uint64_t v95 = "assetTransitionIdentifier: %{public, signpost.description=attribute,public}s,\n"
                "assetIdentifier: %{public, signpost.description=attribute,public}s,\n"
                "assetVersion: %{public, signpost.description=attribute,public}s,\n"
                "memoryCostKB: %{public, signpost.description=attribute,public}llu,\n"
                "result: %{public, signpost.description=attribute,public}s,\n"
                "hasError: %{public, signpost.description=attribute,public}s";
          char v65 = 2;
          char v64 = 6;
        }

        uint64_t v110 = &v94;
        __chkstk_darwin(v63);
        uint64_t v104 = (char *)&v94 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(void))(v99 + 16))();
        uint64_t v67 = sub_10000BCF4(62LL);
        uint64_t v108 = v56;
        uint64_t v68 = v67;
        uint64_t v100 = sub_10000BCF4(160LL);
        uint64_t v115 = v100;
        *(_BYTE *)uint64_t v68 = v65;
        *(_BYTE *)(v68 + 1) = v64;
        *(_WORD *)(v68 + 2) = 2082;
        unint64_t v69 = sub_10000B4E4();
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v105, v69);
        sub_100095AE0(v70, v71);
        sub_10009605C(v72);
        uint64_t v74 = v73 + 8;
        sub_100095DD0();
        sub_10000BD28();
        sub_100095DC4(*(uint64_t (**)(uint64_t, uint64_t))(v98 + 8));
        *(_WORD *)(v68 + 12) = 2082;
        swift_bridgeObjectRetain(v55);
        sub_100015EF8(v101, v55, &v115);
        uint64_t v114 = v75;
        sub_1000301B8((uint64_t)&v114, v74);
        sub_100095B00(v55);
        *(_WORD *)(v68 + 22) = 2082;
        uint64_t v76 = v106;
        if (v106) {
          unint64_t v77 = v106;
        }
        else {
          unint64_t v77 = 0xE300000000000000LL;
        }
        uint64_t v78 = v58;
        uint64_t v79 = swift_bridgeObjectRetain(v106);
        sub_1000960AC(v79, v80, &v115);
        uint64_t v114 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v74);
        sub_10000C1B0(v76);
        swift_bridgeObjectRelease(v77);
        *(_WORD *)(v68 + 32) = 2050;
        uint64_t v114 = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v74);
        *(_WORD *)(v68 + 42) = 2082;
        sub_100048A38( &qword_10010DF90,  (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result,  (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result);
        uint64_t v82 = v112;
        uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter(v57, v83);
        sub_100095AE0(v84, v85);
        uint64_t v114 = v86;
        sub_100095DD0();
        sub_10000BD28();
        sub_100030250(v82, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
        *(_WORD *)(v68 + 52) = 2082;
        if (v113) {
          uint64_t v88 = 1702195828LL;
        }
        else {
          uint64_t v88 = 0x65736C6166LL;
        }
        if (v113) {
          uint64_t v89 = 0xE400000000000000LL;
        }
        else {
          uint64_t v89 = 0xE500000000000000LL;
        }
        sub_100095D28(v88, v87, &v115);
        uint64_t v114 = v90;
        sub_100095DD0();
        sub_10000BD28();
        sub_1000301C0();
        sub_1000301C0();
        os_signpost_id_t v91 = sub_100096098();
        uint64_t v92 = v96;
        sub_10009607C((void *)&_mh_execute_header, v96, (os_signpost_type_t)v109, v91, v111, v95, (uint8_t *)v68);
        uint64_t v93 = v100;
        swift_arrayDestroy(v100, 5LL);
        sub_10000BCC4(v93);
        sub_10000BCC4(v68);

        sub_100095D48(v78);
        sub_100095D48(v89);
        goto LABEL_25;
      }
    }

    __break(1u);
    goto LABEL_28;
  }

  if (v111)
  {
    uint64_t v56 = v51;
    uint64_t v57 = v37;
    uint64_t v58 = v37;
    goto LABEL_10;
  }

void sub_10009475C()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  int v78 = v6;
  uint64_t v76 = v7;
  uint64_t v77 = v8;
  uint64_t v10 = v9;
  uint64_t v75 = v11;
  uint64_t v13 = v12;
  uint64_t v14 = sub_100003B20(&qword_10010B9A0);
  sub_100085588();
  __chkstk_darwin(v15);
  sub_100022990();
  uint64_t v16 = (os_log_s *)((char *)v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster);
  uint64_t v82 = *(char **)((char *)v3 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  LODWORD(v79) = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString
                                         + 16);
  uint64_t v83 = sub_100095BC8();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  sub_100095B48();
  uint64_t v18 = OSSignposter.logHandle.getter(v17);
  uint64_t v80 = v3;
  OSSignpostID.init(log:)(v18);
  sub_100095A18();
  sub_10000C2A8(v13);
  sub_10000C2A8(v10);
  uint64_t v19 = sub_100092D88();
  sub_100095CE4(v19, v20, v21, v22);
  uint64_t v23 = (os_log_s *)v2;
  uint64_t v24 = sub_100092D88();
  sub_100095CE4(v24, v25, v26, v27);
  uint64_t v28 = sub_100083B50(v2, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  OSSignposter.logHandle.getter(v28);
  int v29 = sub_1000960F4();
  uint64_t v30 = OS_os_log.signpostsEnabled.getter();
  if ((v30 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v73 = v1;
  uint64_t v74 = v14;
  uint64_t v71 = v16;
  uint64_t v72 = v2;
  int v70 = v29;
  if ((v79 & 1) == 0)
  {
    uint64_t v31 = v10;
    if (!v82)
    {
      sub_100095FF4(v72, *(uint64_t (**)(uint64_t, void))(v73 + 8));
      sub_10000C1B0(v13);
      sub_10000C1B0(v10);
      __break(1u);
LABEL_5:
      sub_10000C1B0(v10);
      sub_10000C1B0(v13);

      uint64_t v32 = sub_1000304C4((uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      uint64_t v33 = (uint64_t)v80;
      uint64_t v34 = v81;
LABEL_17:
      __chkstk_darwin(v32);
      sub_100095B48();
      sub_100083B50((uint64_t)v23, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16));
      uint64_t v66 = sub_100095F04();
      sub_10000749C(v66);
      sub_100095B08();
      sub_1000304C4(v33, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
      uint64_t v67 = sub_100095F0C();
      uint64_t v68 = sub_100095CD0(v67);
      sub_100095F30(v68);
      sub_100007448();
      return;
    }

void sub_100094BC8()
{
  uint64_t v8 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  sub_100095C4C(v9, OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  uint64_t v10 = sub_100095E0C();
  uint64_t v11 = (void *)OSSignposter.logHandle.getter(v10);
  sub_100095BC8();
  sub_1000960C4();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_100095C74();
  int v14 = static os_signpost_type_t.end.getter(v13);
  if ((sub_1000960A0(v14) & 1) == 0)
  {
    sub_100095FD4();
    sub_100095C24();

    sub_100096024();
LABEL_16:
    sub_100007448();
    return;
  }

  sub_100095E98();
  if ((v15 & 1) != 0)
  {
    sub_100095FC8();
    if (v16)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v17)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

      sub_100095C34();
      if (!(!v17 & v18))
      {
        sub_100095F94();
LABEL_10:
        sub_100095F14();
        sub_100085588();
        __chkstk_darwin(v19);
        sub_100095DA8();
        sub_1000960FC();
        swift_release();
        sub_100095EB4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88));
        sub_100095F6C(v20, v21, v22, v23, v24, v25, v26, v27, v49);
        uint64_t v29 = __chkstk_darwin(v28);
        sub_100095B18(v29, v30, v31, v32, v33, v34, v35, v36, v50);
        uint64_t v37 = sub_10000BCF4(22LL);
        uint64_t v38 = sub_10000BCF4(64LL);
        uint64_t v39 = sub_100095B60(v38);
        sub_100092264(v39, v40);
        uint64_t v56 = v41;
        sub_100095BC0((uint64_t)&v56, (uint64_t)v57);
        sub_10000BD28();
        sub_1000303C8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
        *(_WORD *)(v37 + 12) = v53;
        sub_100048A38( &qword_10010DF78,  (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult,  (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult);
        uint64_t v43 = sub_100095E24(v42);
        sub_100092264(v43, v44);
        uint64_t v56 = v45;
        sub_100095BC0((uint64_t)&v56, (uint64_t)v57);
        sub_10000BD28();
        uint64_t v46 = sub_100095E70();
        os_signpost_id_t v47 = OSSignpostID.rawValue.getter(v46);
        sub_100095D7C((void *)&_mh_execute_header, v48, v54, v47);
        sub_100095F5C();
        sub_10000BCC4(v3);
        sub_10000BCC4(v37);

        sub_100095F1C();
        sub_100096118();
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_19;
  }

  if (v55)
  {
    uint64_t v2 = v8;
    goto LABEL_10;
  }

void sub_100094E58()
{
  uint64_t v4 = v3;
  sub_100003B20(&qword_10010B9A0);
  sub_100096084();
  __chkstk_darwin(v5);
  sub_10000C120();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = (os_log_s *)(v1 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster);
  __int16 v53 = *(const char **)(v1 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  LODWORD(v52) = *(unsigned __int8 *)(v1
                                    + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString
                                    + 16);
  uint64_t v10 = sub_100095BC8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = OSSignposter.logHandle.getter(v13);
  OSSignpostID.init(log:)(v14);
  uint64_t v15 = sub_1000228F0(v8, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
  OSSignposter.logHandle.getter(v15);
  int v16 = sub_1000960F4();
  uint64_t v17 = OS_os_log.signpostsEnabled.getter();
  if ((v17 & 1) == 0) {
    goto LABEL_5;
  }
  os_log_t v50 = v9;
  uint64_t v51 = v0;
  int v49 = v16;
  if ((v52 & 1) == 0)
  {
    if (!v53)
    {
      sub_100022CF4(v8, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
      __break(1u);
LABEL_5:

      uint64_t v18 = sub_100022CF4(v8, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
LABEL_11:
      __chkstk_darwin(v18);
      sub_100095B48();
      v41(v0, (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v10);
      uint64_t v42 = sub_100095F04();
      sub_10000749C(v42);
      sub_100095B08();
      (*(void (**)(char *, uint64_t))(v11 + 8))((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v10);
      uint64_t v43 = sub_100095F0C();
      uint64_t v44 = sub_100095CD0(v43);
      sub_100095F30(v44);
      sub_100007448();
      return;
    }

void sub_100095130()
{
  uint64_t v8 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  sub_100095C4C(v9, OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  uint64_t v10 = sub_100095E0C();
  uint64_t v11 = (void *)OSSignposter.logHandle.getter(v10);
  sub_100095BC8();
  sub_1000960C4();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_100095C74();
  int v14 = static os_signpost_type_t.end.getter(v13);
  if ((sub_1000960A0(v14) & 1) == 0)
  {
    sub_100095FD4();
    sub_100095C24();

    sub_100096024();
LABEL_16:
    sub_100007448();
    return;
  }

  sub_100095E98();
  if ((v15 & 1) != 0)
  {
    sub_100095FC8();
    if (v16)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v17)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

      sub_100095C34();
      if (!(!v17 & v18))
      {
        sub_100095F94();
LABEL_10:
        sub_100095F14();
        sub_100085588();
        __chkstk_darwin(v19);
        sub_100095DA8();
        sub_1000960FC();
        swift_release();
        sub_100095EB4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88));
        sub_100095F6C(v20, v21, v22, v23, v24, v25, v26, v27, v49);
        uint64_t v29 = __chkstk_darwin(v28);
        sub_100095B18(v29, v30, v31, v32, v33, v34, v35, v36, v50);
        uint64_t v37 = sub_10000BCF4(22LL);
        uint64_t v38 = sub_10000BCF4(64LL);
        uint64_t v39 = sub_100095B60(v38);
        sub_100092264(v39, v40);
        uint64_t v56 = v41;
        sub_100095BC0((uint64_t)&v56, (uint64_t)v57);
        sub_10000BD28();
        sub_1000303C8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
        *(_WORD *)(v37 + 12) = v53;
        sub_100048A38( &qword_10010DF78,  (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult,  (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult);
        uint64_t v43 = sub_100095E24(v42);
        sub_100092264(v43, v44);
        uint64_t v56 = v45;
        sub_100095BC0((uint64_t)&v56, (uint64_t)v57);
        sub_10000BD28();
        uint64_t v46 = sub_100095E70();
        os_signpost_id_t v47 = OSSignpostID.rawValue.getter(v46);
        sub_100095D7C((void *)&_mh_execute_header, v48, v54, v47);
        sub_100095F5C();
        sub_10000BCC4(v3);
        sub_10000BCC4(v37);

        sub_100095F1C();
        sub_100096118();
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_19;
  }

  if (v55)
  {
    uint64_t v2 = v8;
    goto LABEL_10;
  }

void sub_1000953C0()
{
  uint64_t v48 = v2;
  uint64_t v43 = v3;
  uint64_t v44 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100003B20(&qword_10010B9A0);
  sub_1000224A4();
  __chkstk_darwin(v10);
  sub_10000C120();
  uint64_t v13 = v12 - v11;
  uint64_t v46 = *(const char **)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString);
  LODWORD(v45) = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString + 16);
  sub_100083B50(v12 - v11, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  uint64_t v47 = sub_100095BC8();
  uint64_t v14 = *(void *)(v47 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v47);
  uint64_t v16 = v6;
  uint64_t v17 = v6;
  uint64_t v18 = v48;
  sub_10000C2A8(v17);
  uint64_t v19 = sub_10000C2A8(v48);
  uint64_t v20 = static OSSignpostID.exclusive.getter(v19);
  uint64_t v21 = (void *)OSSignposter.logHandle.getter(v20);
  int v42 = static os_signpost_type_t.event.getter();
  uint64_t v22 = OS_os_log.signpostsEnabled.getter();
  if ((v22 & 1) == 0)
  {
    sub_1000304C4(v13, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));

    sub_10000C1B0(v18);
    sub_10000C1B0(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), v47);
LABEL_11:
    sub_100007448();
    return;
  }

  uint64_t v23 = v13;
  uint64_t v41 = v16;
  if ((v45 & 1) != 0)
  {
    if ((unint64_t)v46 >> 32)
    {
      __break(1u);
    }

    else
    {
      sub_100095C40();
      if (v25)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }

      sub_100095C34();
      if (!(!v25 & v26))
      {
        uint64_t v13 = v1;
        uint64_t v24 = v23;
        uint64_t v46 = (const char *)&v51;
        goto LABEL_10;
      }
    }

    __break(1u);
    goto LABEL_14;
  }

  uint64_t v13 = v1;
  if (v46)
  {
    uint64_t v24 = v23;
LABEL_10:
    uint64_t v40 = v14;
    uint64_t v45 = &v38;
    __chkstk_darwin(v22);
    uint64_t v38 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v39 = v38;
    (*(void (**)(char *))(v14 + 16))(v38);
    uint64_t v27 = sub_10000BCF4(32LL);
    uint64_t v28 = sub_10000BCF4(96LL);
    uint64_t v50 = v28;
    *(_DWORD *)uint64_t v27 = 136446722;
    uint64_t v29 = UUIDIdentifier.uuidString.getter(v9);
    sub_100095CDC(v29, v30);
    uint64_t v49 = v31;
    sub_10000C04C((uint64_t)&v49, (uint64_t)&v50);
    sub_1000303D0();
    sub_1000304C4(v24, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v32 = v41;
    swift_bridgeObjectRetain(v41);
    sub_100015EF8(v43, v32, &v50);
    uint64_t v49 = v33;
    sub_10000C04C((uint64_t)&v49, (uint64_t)&v50);
    sub_100095B00(v32);
    *(_WORD *)(v27 + 22) = 2082;
    uint64_t v34 = v48;
    sub_1000225A4();
    sub_100095D40(v44, v35, &v50);
    uint64_t v49 = v36;
    sub_10000C04C((uint64_t)&v49, (uint64_t)&v50);
    sub_100095B00(v34);
    os_signpost_id_t v37 = sub_100096098();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  (os_signpost_type_t)v42,  v37,  v46,  "sessionIdentifier: %{public, signpost.description=attribute,public}s\n inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s\n assetBundleIdentifier: %{public, signpost.description=attribute,public}s",  (uint8_t *)v27,  0x20u);
    sub_100095D6C();
    sub_10000BCC4(v28);
    sub_10000BCC4(v27);

    sub_100095D48((uint64_t)v39);
    sub_100095D48((uint64_t)&v50);
    goto LABEL_11;
  }

uint64_t sub_10009571C()
{
  uint64_t v1 = type metadata accessor for OSSignposter(0LL);
  sub_1000220F4(v1);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000220F4(v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100095774()
{
  return type metadata accessor for TelemetrySignposter(0LL);
}

uint64_t type metadata accessor for TelemetrySignposter(uint64_t a1)
{
  uint64_t result = qword_10010DEB8;
  if (!qword_10010DEB8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TelemetrySignposter);
  }
  return result;
}

uint64_t sub_1000957B4(uint64_t a1)
{
  uint64_t result = type metadata accessor for OSSignposter(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1000D9FA8;
    v5[2] = &unk_1000D9FA8;
    v5[3] = &unk_1000D9FA8;
    void v5[4] = &unk_1000D9FA8;
    v5[5] = &unk_1000D9FA8;
    v5[6] = &unk_1000D9FA8;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v5[7] = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

#error "100095888: call analysis failed (funcsize=19)"
void sub_10009589C()
{
  sub_100092DF4();
}

#error "1000958DC: call analysis failed (funcsize=13)"
void sub_1000958F0()
{
  sub_1000935B0();
}

#error "100095934: call analysis failed (funcsize=14)"
#error "100095964: call analysis failed (funcsize=12)"
void sub_100095978()
{
  sub_10009475C();
}

void sub_100095998()
{
}

void sub_1000959B8()
{
}

void sub_1000959D8()
{
}

void sub_1000959F8()
{
}

unint64_t sub_100095A18()
{
  unint64_t result = qword_10010DF80;
  if (!qword_10010DF80)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10010DF80);
  }

  return result;
}

uint64_t sub_100095A54(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

unint64_t sub_100095A64()
{
  unint64_t result = qword_10010DF88;
  if (!qword_10010DF88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10010DF88);
  }

  return result;
}

void sub_100095AA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003B20(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_1000075C0();
}

void sub_100095AE0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100095AEC(uint64_t a1)
{
  *(void *)(v3 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, v1);
}

uint64_t sub_100095B00(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_100095B08()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1LL);
}

uint64_t sub_100095B18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  *(void *)(v13 - 14sub_100006F7C(v0 + 4) = v12;
  return v14((char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v12, v10);
}

  ;
}

uint64_t sub_100095B60(uint64_t a1)
{
  *(void *)(v4 - 96) = a1;
  *(_BYTE *)uint64_t v2 = v1;
  *(_BYTE *)(v2 + 1) = v1;
  *(_WORD *)(v2 + 2) = 2082;
  return UUIDIdentifier.uuidString.getter(v3);
}

uint64_t sub_100095B90(uint64_t a1)
{
  *(void *)(v6 - 152) = v2;
  *(void *)(v6 - 96) = a1;
  *(_BYTE *)uint64_t v3 = v1;
  *(_BYTE *)(v3 + 1) = v4;
  *(_WORD *)(v3 + 2) = 2082;
  return UUIDIdentifier.uuidString.getter(v5);
}

uint64_t sub_100095BC0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100095BC8()
{
  return type metadata accessor for OSSignpostID(0LL);
}

uint64_t sub_100095BD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = v1 + a1;
  *(void *)(v6 - 112) = *(void *)v7;
  *(_DWORD *)(v6 - 128) = *(unsigned __int8 *)(v7 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v3, v4);
}

uint64_t sub_100095BFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v11 - 160) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return (*(uint64_t (**)(void))(v10 + 16))();
}

uint64_t sub_100095C24()
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 8))(*(void *)(v2 - 136), v0);
}

  ;
}

  ;
}

uint64_t sub_100095C4C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v7 = (uint64_t *)(v2 + a2);
  uint64_t v8 = *v7;
  *(void *)(v6 - 120) = a1;
  *(void *)(v6 - 112) = v8;
  *(_DWORD *)(v6 - 14sub_100006F7C(v0 + 4) = *((unsigned __int8 *)v7 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v5, v4);
}

uint64_t sub_100095C74()
{
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 152) = v0;
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t sub_100095C98()
{
  *(void *)(v2 - 160) = v0;
  *(void *)(v2 - 152) = v1;
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t sub_100095CBC(uint64_t a1)
{
  *(void *)(v3 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, v1);
}

uint64_t sub_100095CD0(uint64_t a1)
{
  return swift_allocObject(a1, 24LL, 7LL);
}

void sub_100095CDC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100095CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100095A54(a3, a4);
}

  ;
}

uint64_t sub_100095D08()
{
  return swift_retain(*(void *)(v0 - 152));
}

void sub_100095D28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

  ;
}

void sub_100095D40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100095D48(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_100095D50(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4)
{
}

uint64_t sub_100095D6C()
{
  return swift_arrayDestroy(v0, 3LL);
}

void sub_100095D7C(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4)
{
}

uint64_t sub_100095D98()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100095DA8()
{
  return swift_retain(v0);
}

uint64_t sub_100095DC4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100095DD0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v0, v1);
}

char *sub_100095DE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100095DF4(uint64_t a1)
{
  *(void *)(v3 - 10sub_100006F7C(v0 + 4) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v2, v1);
}

uint64_t sub_100095E0C()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);
  *(void *)(v3 - 136) = v2;
  return v4(v2, *(void *)(v3 - 128), v0);
}

uint64_t sub_100095E24(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(*(void *)(v1 - 192), a1);
}

void sub_100095E3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 128) = &a9;
}

uint64_t sub_100095E5C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_100095E64(uint64_t a1)
{
}

uint64_t sub_100095E70()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 200) + 8LL))(v1, v0);
}

uint64_t sub_100095E84()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 176) + 8LL))(v0, v1);
}

void sub_100095E98()
{
  *(void *)(v6 - 18sub_100006F7C(v0 + 4) = v4;
  *(void *)(v6 - 176) = v1;
  *(void *)(v6 - 168) = v5;
  *(void *)(v6 - 208) = v3;
  *(void *)(v6 - 200) = v2;
  *(void *)(v6 - 192) = v0;
}

uint64_t sub_100095EB4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100095EC0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 128) = a2;
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0LL);
}

uint64_t sub_100095ED4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 112) = *(void *)(a2 - 256);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, a1);
}

void sub_100095EE8()
{
  *(void *)(v6 - 18sub_100006F7C(v0 + 4) = v5;
  *(void *)(v6 - 176) = v1;
  *(void *)(v6 - 200) = v2;
  *(void *)(v6 - 192) = v4;
  *(void *)(v6 - 208) = v0;
  *(void *)(v6 - 168) = v3;
}

uint64_t sub_100095F04()
{
  return type metadata accessor for OSSignpostIntervalState(0LL);
}

uint64_t sub_100095F0C()
{
  return type metadata accessor for TelemetryIntervalState();
}

uint64_t sub_100095F14()
{
  return type metadata accessor for OSSignpostError(0LL);
}

uint64_t sub_100095F1C()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v1 - 168) + 8LL))(*(void *)(v1 - 144), v0);
}

uint64_t sub_100095F30(uint64_t result)
{
  *(void *)(result + ++*(void *)(v0 + 16) = v1;
  return result;
}

uint64_t sub_100095F3C()
{
  *(_WORD *)(v2 + 12) = v0;
  return swift_bridgeObjectRetain(v1);
}

void sub_100095F4C()
{
}

uint64_t sub_100095F5C()
{
  return swift_arrayDestroy(v0, 2LL);
}

void sub_100095F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 120) = &a9;
}

  ;
}

void sub_100095F94()
{
  *(void *)(v0 - 112) = v0 - 88;
}

  ;
}

uint64_t sub_100095FB8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v2, v0);
}

  ;
}

uint64_t sub_100095FD4()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 120));
}

uint64_t sub_100095FE4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 10sub_100006F7C(v0 + 4) = a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v2, a1);
}

uint64_t sub_100095FF4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 184));
}

uint64_t sub_100095FFC()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 176) + 8LL))( *(void *)(v0 - 184),  *(void *)(v0 - 192));
}

void sub_10009600C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 - 136) = a4;
}

uint64_t sub_100096024()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_100096034@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = a1 - (v1 & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 - 26sub_100006F7C(v0 + 4) = result;
  return result;
}

uint64_t sub_10009604C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v0, v1);
}

uint64_t sub_10009605C(uint64_t result)
{
  *(void *)(v1 - 112) = result;
  return result;
}

void sub_100096068()
{
  *(_WORD *)(v1 + 22) = v0;
}

void sub_10009607C( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

  ;
}

uint64_t sub_100096098()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_1000960A0(int a1)
{
  *(_DWORD *)(v1 - 128) = a1;
  return OS_os_log.signpostsEnabled.getter();
}

void sub_1000960AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000960B8()
{
  return UUIDIdentifier.uuidString.getter(v0);
}

  ;
}

uint64_t sub_1000960D8()
{
  return OS_os_log.signpostsEnabled.getter();
}

  ;
}

uint64_t sub_1000960F4()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t sub_1000960FC()
{
  return checkForErrorAndConsumeState(state:)();
}

  ;
}

uint64_t sub_100096118()
{
  return v0(v2, v1);
}

void sub_100096124(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = v1;
}

uint64_t sub_100096130()
{
  return sub_100092D88();
}

  ;
}

uint64_t sub_100096150(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_10003CEA0((uint64_t)sub_100096164);
}

uint64_t sub_100096164()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1000974B4(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 48));
    sub_100085FB0();
    unint64_t v3 = sub_1000165C8();
    if ((v4 & 1) != 0) {
      uint64_t v5 = *(unsigned __int8 *)(*(void *)(v2 + 56) + v3);
    }
    else {
      uint64_t v5 = 0LL;
    }
    swift_bridgeObjectRelease(*(void *)(v0 + 48));
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  sub_100030A20();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_1000961F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return sub_10003CEA0((uint64_t)sub_100096208);
}

uint64_t sub_100096208()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(v9);
  v2._countAndFlagsBits = 46LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_100085FB0();
  String.append(_:)(v3);
  sub_1000974B4(v1 + 32);
  uint64_t v4 = sub_10000FCA4(v8, v9, *(void *)(v1 + 32));
  uint64_t v6 = v5 & 1;
  sub_100030A20();
  swift_bridgeObjectRelease(v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
}

uint64_t sub_1000962AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return sub_10003CEA0((uint64_t)sub_1000962C4);
}

uint64_t sub_1000962C4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  Swift::String v2 = (uint64_t *)(*(void *)(v0 + 72) + 40LL);
  sub_1000974B4((uint64_t)v2);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = sub_100085FB0();
  uint64_t v6 = sub_10000FB2C(v4, v5, v3);
  uint64_t v8 = v7;
  sub_100030A20();
  swift_bridgeObjectRelease(v1);
  sub_100095A54(v6, v8);
  if (v6) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000035LL,  0x80000001000DC610LL,  "modelmanagerd/TrialFrameworkMock.swift",  38LL,  2LL,  31LL,  0);
  }
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v14 = swift_allocObject(&unk_100104538, 32LL, 7LL);
  *(void *)(v14 + ++*(void *)(v0 + 16) = v11;
  *(void *)(v14 + 2sub_100006F7C(v0 + 4) = v10;
  swift_beginAccess(v2, v0 + 16, 33LL, 0LL);
  swift_bridgeObjectRetain(v12);
  swift_retain();
  sub_1000967D4((uint64_t)&unk_10010E080, v14, v13, v12);
  sub_100030A20();
  swift_bridgeObjectRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096428(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100007370;
  return v5();
}

void *sub_10009647C()
{
  return v0;
}

uint64_t sub_1000964B0()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for TrialFrameworkMock()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd18TrialFrameworkMock);
}

uint64_t sub_1000964F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010E09C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100096550;
  return sub_100096150(a1, a2);
}

uint64_t sub_100096550(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_100096584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_10010E094);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000965FC;
  return sub_1000961F0(a1, a2, a3, a4);
}

uint64_t sub_1000965FC(uint64_t a1, char a2)
{
  uint64_t v6 = *v2;
  uint64_t v4 = a2 & 1;
  swift_task_dealloc(*(void *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

uint64_t sub_100096654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_10010E074);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100006EC4;
  return sub_1000962AC(a1, a2, a3, a4);
}

uint64_t sub_1000966CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000966F0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10010E07C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100007370;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10010E078 + dword_10010E078))(a1, v4);
}

uint64_t sub_100096760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096778(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100096900);
}

uint64_t sub_10009676C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096778(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100096B08);
}

uint64_t sub_100096778(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  uint64_t *v4 = v11;
  return sub_1000974A0(v9);
}

uint64_t sub_1000967D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v12 = *v4;
  void *v4 = 0x8000000000000000LL;
  sub_100096C30(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = *v4;
  void *v4 = v12;
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100096858(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100096D5C(a1, a2, a3, v7);
  uint64_t v16 = sub_100097528(v8, v9, v10, v11, v12, v13, v14, v15, v18, v19);
  return sub_1000974A0(v16);
}

uint64_t sub_1000968A8()
{
  uint64_t v0 = sub_1000974D4();
  uint64_t v3 = sub_100096E7C(v0, v1, v2);
  uint64_t v11 = sub_100097528(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_1000974C4(v11);
}

uint64_t sub_1000968D4()
{
  uint64_t v0 = sub_1000974D4();
  sub_100096FF4(v0, v1, v2);
  uint64_t v11 = sub_100097528(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_1000974C4(v11);
}

uint64_t sub_100096900(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v10 = *v4;
  sub_1000165C8();
  sub_100097538();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v11;
  char v15 = v12;
  sub_100003B20(&qword_10010D2E8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1000165C8();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = (void *)*v5;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = v18[7];
    uint64_t v20 = v19
        + *(void *)(*(void *)(type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL) - 8)
                    + 72LL)
        * v14;
    return sub_10004E030(a1, v20);
  }

  else
  {
    sub_100097138(v14, a2, a3, a1, v18);
    return swift_bridgeObjectRetain(a3);
  }

void sub_100096A14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v8 = *v3;
  sub_100016620(a2, a2);
  sub_100097538();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_100003B20(&qword_10010B4B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_100016620(a2, v14);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_9:
    uint64_t v21 = type metadata accessor for DaemonRequest(0LL);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return;
  }

  unint64_t v12 = v15;
LABEL_5:
  if ((v13 & 1) != 0)
  {
    uint64_t v17 = *(void *)(*v4 + 56);
    swift_release(*(void *)(v17 + 8 * v12));
    *(void *)(v17 + 8 * v12) = a1;
  }

  else
  {
    unint64_t v18 = sub_100085FB0();
    sub_1000971C0(v18, v19, a1, v20);
    swift_retain();
  }

uint64_t sub_100096B08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_1000165C8();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_100003B20(&qword_10010B848);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000165C8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = type metadata accessor for Policy(0LL);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v16,  a1,  v22);
  }

  else
  {
    sub_100097204(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

void sub_100096C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  char v12 = (void *)*v5;
  unint64_t v13 = sub_1000165C8();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_100003B20(&qword_10010E088);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1000165C8();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 16 * v18);
    swift_release();
    *uint64_t v23 = a1;
    v23[1] = a2;
  }

  else
  {
    sub_100097294(v18, a3, a4, a1, a2, v22);
    swift_bridgeObjectRetain(a4);
  }

uint64_t sub_100096D5C(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_1000165C8();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_100003B20(&qword_10010E0A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000165C8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    char v21 = (void *)(v20[7] + 40 * v16);
    sub_100006F7C(v21);
    return sub_1000070EC(a1, (uint64_t)v21);
  }

  else
  {
    sub_1000972E0(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

uint64_t sub_100096E7C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_100003B20(&qword_10010B408);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = (void *)*v3;
  unint64_t v13 = sub_100016670();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_100003B20(&qword_10010E0B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100016670();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    uint64_t v24 = type metadata accessor for RequestPriority(0LL);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40LL))( v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v18,  a1,  v24);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_10009734C(v18, (uint64_t)v11, a1, v22);
  }

void sub_100096FF4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = (void *)*v3;
  unint64_t v13 = sub_100016714(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_100003B20(&qword_10010E0A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100016714(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    swift_release(*(void *)(v23 + 8 * v18));
    *(void *)(v23 + 8 * v18) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_100097408(v18, (uint64_t)v11, a1, v22);
  }

uint64_t sub_100097138(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
  uint64_t result = sub_10004DE14(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_1000971C0(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_100097204(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Policy(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_100097294( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_1000972E0(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000070EC(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10009734C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for RequestPriority(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100097408(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1000974A0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000974B4(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 32LL, 0LL);
}

uint64_t sub_1000974C4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000974D4()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_1000974F8()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_10009750C()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_100097528( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

  ;
}

uint64_t sub_10009754C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010E0B8);
  sub_100003BA0(v0, (uint64_t)qword_10010E0B8);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000975B4(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = sub_100098374();
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  uint64_t v4 = *(void *)(v3 + 64);
  v1[7] = v4;
  v1[8] = sub_100021CF0(v4);
  uint64_t v5 = sub_100003B20(&qword_10010B208);
  void v1[9] = sub_100021CF0(*(void *)(*(void *)(v5 - 8) + 64LL));
  return sub_10000BD98();
}

uint64_t sub_100097620()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0(v1, 1LL, 1LL, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100104580, v9 + v3, v8 | 7);
  *(void *)(v10 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v10 + 2sub_100006F7C(v0 + 4) = 0LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  sub_10000C934(v1, (uint64_t)&unk_10010E178, v10);
  uint64_t v12 = v11;
  v0[10] = v11;
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[11] = v13;
  uint64_t v14 = sub_100003B20(&qword_10010B468);
  *uint64_t v13 = v0;
  v13[1] = sub_100097744;
  return Task.value.getter( v0 + 2,  v12,  &type metadata for Data,  v14,  &protocol self-conformance witness table for Error);
}

uint64_t sub_100097744()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  return sub_10000BD98();
}

uint64_t sub_1000977A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  sub_10000C140();
  sub_10000BFE4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000977EC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100097824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  uint64_t v5 = type metadata accessor for POSIXError(0LL);
  v4[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[6] = v6;
  v4[7] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL.DirectoryHint(0LL);
  v4[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[9] = v8;
  v4[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for FilePath(0LL);
  v4[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[12] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[13] = swift_task_alloc(v11);
  v4[14] = swift_task_alloc(v11);
  uint64_t v12 = sub_100003B20(&qword_10010C9C8);
  v4[15] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  v4[16] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[17] = v14;
  v4[18] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100097930, 0LL, 0LL);
}

uint64_t sub_100097930()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 96) + 16LL);
  v7(v3, *(void *)(v0 + 32), *(void *)(v0 + 88));
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for URL.DirectoryHint.notDirectory(_:),  v6);
  sub_100097CB8(v3, v4, v1);
  if (sub_1000060B4(v1, 1LL, v2) == 1)
  {
    uint64_t v8 = v0 + 152;
    sub_100098000(*(void *)(v0 + 120));
    if (qword_10010B0D0 != -1) {
      swift_once(&qword_10010B0D0, sub_10009754C);
    }
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v12, (uint64_t)qword_10010E0B8);
    uint64_t v13 = v7(v9, v11, v10);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 88);
    if (v16)
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v56 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = v56;
      *(_DWORD *)unint64_t v18 = 136315138;
      uint64_t v20 = sub_10000BAC0( &qword_10010BA50,  (uint64_t (*)(uint64_t))&type metadata accessor for FilePath,  (uint64_t)&protocol conformance descriptor for FilePath);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      uint64_t v23 = v22;
      sub_100015EF8(v21, v22, &v56);
      *(void *)(v0 + ++*(void *)(v0 + 16) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v23);
      sub_100098358();
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Failed to open %s: path contains illegal UTF-8 sequences",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL);
      uint64_t v25 = v19;
      uint64_t v8 = v0 + 152;
      sub_10000BCC4(v25);
      sub_10000BCC4((uint64_t)v18);
    }

    else
    {
      sub_100098358();
    }

    uint64_t v31 = *(void *)(v0 + 48);
    uint64_t v30 = *(void *)(v0 + 56);
    uint64_t v32 = *(void *)(v0 + 40);
    *(_DWORD *)(v0 + 152) = 22;
    unint64_t v33 = sub_100098040((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v34 = sub_10000BAC0( &qword_10010E180,  (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError,  (uint64_t)&protocol conformance descriptor for POSIXError);
    uint64_t v35 = _BridgedStoredNSError.init(_:userInfo:)(v8, v33, v32, v34);
    POSIXError._nsError.getter(v35);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
    uint64_t v44 = *(void *)(v0 + 112);
    uint64_t v45 = *(void *)(v0 + 104);
    uint64_t v46 = *(void *)(v0 + 80);
    uint64_t v47 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 144));
    sub_10000BFE4();
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v26 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 136) + 32LL))( v26,  *(void *)(v0 + 120),  *(void *)(v0 + 128));
    uint64_t v27 = Data.init(contentsOf:options:)(v26, 0LL);
    uint64_t v29 = v28;
    uint64_t v49 = v27;
    uint64_t v50 = *(void *)(v0 + 112);
    uint64_t v51 = *(void *)(v0 + 104);
    uint64_t v52 = *(void *)(v0 + 80);
    uint64_t v53 = *(void *)(v0 + 56);
    os_signpost_type_t v54 = *(uint64_t **)(v0 + 24);
    sub_10009837C(*(void *)(v0 + 136));
    *os_signpost_type_t v54 = v49;
    v54[1] = v29;
    sub_10000BFE4();
    sub_10000C140();
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v55();
}

uint64_t sub_100097CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v5 = sub_100003B20(&qword_10010C9C8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for FilePath(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  uint64_t v16 = String.init(validating:)(v15);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v28 = v16;
    v19(v11, a2, v8);
    uint64_t v20 = type metadata accessor for URL(0LL);
    uint64_t v21 = v30;
    uint64_t v29 = a1;
    uint64_t v22 = v20;
    sub_100005FB0((uint64_t)v7, 1LL, 1LL, v20);
    URL.init(filePath:directoryHint:relativeTo:)(v28, v18, v11, v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v29, v12);
    uint64_t v23 = v21;
    uint64_t v24 = 0LL;
    uint64_t v25 = v22;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    uint64_t v25 = type metadata accessor for URL(0LL);
    uint64_t v23 = v30;
    uint64_t v24 = 1LL;
  }

  return sub_100005FB0(v23, v24, 1LL, v25);
}

uint64_t sub_100097E98()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for FilesystemProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd18FilesystemProvider);
}

uint64_t sub_100097EC8()
{
  uint64_t v1 = sub_100098374();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100097F38(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100098374() - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((v4 + 32) & ~v4);
  uint64_t v8 = (void *)swift_task_alloc(dword_10010E174);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100097FB8;
  return sub_100097824(a1, v5, v6, v7);
}

uint64_t sub_100097FB8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100098000(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010C9C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100098040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100003B20(&qword_10010E188);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100098310(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100098168(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10004DE78(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100098168(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_1000981CC(a1, a2, v5);
}

unint64_t sub_1000981CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_100098310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010E190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100098358()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100098368()
{
  return swift_release(*(void *)(v0 + 80));
}

uint64_t sub_100098374()
{
  return type metadata accessor for FilePath(0LL);
}

uint64_t sub_10009837C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100098388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1000983A4, 0LL, 0LL);
}

uint64_t sub_1000983A4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 48) = v2;
  __int128 v3 = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v1;
  *(_OWORD *)(v2 + 2sub_100006F7C(v0 + 4) = v3;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = sub_10009844C;
  return withCheckedContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0xD00000000000001FLL,  0x80000001000DC710LL,  sub_10009B1D4,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_10009844C()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

double sub_10009847C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a2;
  uint64_t v7 = sub_100003B20(&qword_10010B9D0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v7);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_100104660, v11 + v9, v10 | 7);
  *(void *)(v12 + ++*(void *)(v0 + 16) = a3;
  *(void *)(v12 + 2sub_100006F7C(v0 + 4) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v12 + v11,  (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  aBlock[4] = sub_10009B258;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A94E8;
  aBlock[3] = &unk_100104678;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_100021AD0((unint64_t *)&qword_10010F140, v23);
  uint64_t v25 = v24;
  uint64_t v26 = sub_100003B20(&qword_10010C090);
  sub_1000071C0(&qword_10010F150, &qword_10010C090);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v26, v27, v19, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v22, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(void *)&double result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000986DC(void (*a1)(void))
{
  uint64_t v1 = sub_100003B20(&qword_10010B9D0);
  return CheckedContinuation.resume(returning:)(v1, v1);
}

uint64_t sub_100098718(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010E348);
  __chkstk_darwin(v2);
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v2);
  sub_1000071C0(&qword_10010E3C0, &qword_10010E348);
  dispatch thunk of Sequence.makeIterator()(&v29, v2, v5);
  *(void *)&__int128 v6 = 67109120LL;
  __int128 v28 = v6;
  while (1)
  {
    uint64_t result = v29;
    int64_t v8 = v32;
    if (v33)
    {
      unint64_t v9 = (v33 - 1) & v33;
      unint64_t v10 = __clz(__rbit64(v33)) | (v32 << 6);
      goto LABEL_20;
    }

    int64_t v11 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    int64_t v12 = (unint64_t)(v31 + 64) >> 6;
    if (v11 >= v12) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v30 + 8 * v11);
    int64_t v14 = v32 + 1;
    if (!v13)
    {
      int64_t v14 = v32 + 2;
      if (v32 + 2 >= v12) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v30 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v32 + 3;
        if (v32 + 3 >= v12) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v30 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v32 + 4;
          if (v32 + 4 >= v12) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v30 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v32 + 5;
            if (v32 + 5 >= v12) {
              goto LABEL_29;
            }
            unint64_t v13 = *(void *)(v30 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v32 + 6;
              while (v15 < v12)
              {
                unint64_t v13 = *(void *)(v30 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_19;
                }
              }

id sub_100098A1C(uint64_t a1)
{
  uint64_t v2 = v1;
  v17[0] = 0LL;
  id v4 = [(id)swift_getObjCClassFromMetadata(v2) handleForIdentifier:a1 error:v17];
  id v5 = v17[0];
  if (v4)
  {
    id v6 = v17[0];
  }

  else
  {
    id v7 = v17[0];
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8, v9, v10, v11, v12, v13, v14, v15, v17[0], v17[1], v17[2], v17[3], v17[4], v17[5]);
  }

  swift_unknownObjectRelease(a1);
  return v4;
}

uint64_t sub_100098AF0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010E198);
  sub_100003BA0(v0, (uint64_t)qword_10010E198);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_100098B5C()
{
  id v0 = [objc_allocWithZone(RBSProcessStateDescriptor) init];
  [v0 setValues:1];
  sub_10009B0F4((uint64_t)&off_100102830, v0);
  qword_100110078 = (uint64_t)v0;
}

uint64_t sub_100098BB8()
{
  uint64_t v1 = v0;
  swift_defaultActor_initialize(v0);
  uint64_t v2 = CountedSet.init(arrayLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for Int32,  &protocol witness table for Int32);
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_queue;
  sub_100049BAC(v2, &qword_10010E408, &OBJC_CLASS___OS_dispatch_queue_concurrent_ptr);
  type metadata accessor for DispatchQoS(0LL);
  sub_100030A28();
  __chkstk_darwin(v4);
  sub_10000C120();
  uint64_t v7 = v6 - v5;
  static DispatchQoS.unspecified.getter(v8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue_concurrent.Attributes(0LL);
  sub_100030A28();
  __chkstk_darwin(v10);
  sub_10000C120();
  uint64_t v13 = v12 - v11;
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100021AD0(&qword_10010E410, v14);
  uint64_t v16 = v15;
  uint64_t v17 = sub_100003B20(&qword_10010E418);
  sub_1000071C0(&qword_10010E420, &qword_10010E418);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v9, v16);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v19);
  sub_10000C120();
  uint64_t v22 = v21 - v20;
  (*(void (**)(uint64_t, void))(v23 + 104))( v21 - v20,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)(v1 + v3) = OS_dispatch_queue_concurrent.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000014LL,  0x80000001000DA050LL,  v7,  v13,  v22,  0LL);
  uint64_t v24 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  uint64_t v25 = type metadata accessor for WorkQueueState();
  uint64_t v26 = sub_100007460(v25, 32LL);
  *(void *)(v26 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v26 + 2sub_100006F7C(v0 + 4) = 0LL;
  *(void *)(v1 + v2sub_100006F7C(v0 + 4) = v26;
  uint64_t v27 = v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream;
  uint64_t v28 = sub_100003B20(&qword_10010C030);
  sub_100005FB0(v27, 1LL, 1LL, v28);
  id v29 = objc_allocWithZone(&OBJC_CLASS___RBSProcessMonitor);
  id v30 = objc_msgSend(v29, "init", aBlock[0]);
  *(void *)(v1 + 112) = v30;
  aBlock[4] = sub_100098EFC;
  uint64_t v34 = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100098F00;
  aBlock[3] = &unk_100104830;
  uint64_t v31 = _Block_copy(aBlock);
  swift_release(v34);
  [v30 updateConfiguration:v31];
  _Block_release(v31);
  uint64_t result = swift_isEscapingClosureAtFileLocation(0LL, "", 102LL, 30LL, 50LL, 1LL);
  if ((result & 1) == 0) {
    return v1;
  }
  __break(1u);
  return result;
}

id sub_100098E90(id a1)
{
  if (qword_10010B0E0 != -1) {
    swift_once(&qword_10010B0E0, sub_100098B5C);
  }
  [a1 setStateDescriptor:qword_100110078];
  return [a1 setServiceClass:33];
}

uint64_t sub_100098F00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100098F3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003B20(&qword_10010E3E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000C120();
  uint64_t v7 = v6 - v5;
  sub_100003B20(&qword_10010E3F0);
  sub_100030A28();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v17[-v12];
  uint64_t v14 = v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream;
  sub_10000BE64( v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream,  (uint64_t)v18,  0LL);
  sub_10009B3B4(v14, (uint64_t)v13);
  uint64_t v15 = sub_100003B20(&qword_10010C030);
  sub_10009B3FC((uint64_t)v13);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v7,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v3);
  AsyncStream.init(_:bufferingPolicy:_:)(&unk_100104F50, v7, sub_10009B43C, v1, &unk_100104F50);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v11, a1, v15);
  sub_100005FB0((uint64_t)v11, 0LL, 1LL, v15);
  sub_10000BE64(v14, (uint64_t)v17, 33LL);
  sub_10009B444((uint64_t)v11, v14);
  return swift_endAccess(v17);
}

uint64_t sub_100099104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010E3F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(void **)(a2 + 112);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100104778, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  uint64_t v11 = swift_allocObject(&unk_1001047A0, 32LL, 7LL);
  *(void *)(v11 + ++*(void *)(v0 + 16) = sub_10009B490;
  *(void *)(v11 + 2sub_100006F7C(v0 + 4) = v10;
  aBlock[4] = sub_10009B5A4;
  uint64_t v16 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100098F00;
  aBlock[3] = &unk_1001047B8;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = v16;
  swift_retain(v11);
  swift_release(v13);
  [v7 updateConfiguration:v12];
  _Block_release(v12);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v11, "", 102LL, 38LL, 54LL, 1LL);
  swift_release(v10);
  uint64_t result = swift_release(v11);
  return result;
}

void sub_1000992A4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010E3F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1001047F0, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10009B530;
  uint64_t v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10009956C;
  aBlock[3] = &unk_100104808;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release(v12);
  [a1 setUpdateHandler:v10];
  _Block_release(v10);
}

uint64_t sub_1000993D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_100003B20(&qword_10010E400);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LOBYTE(a3) = sub_1000994B0([a3 state]);
  unsigned int v12 = [a2 pid];
  char v13 = (char)a3;
  uint64_t v9 = sub_100003B20(&qword_10010E3F8);
  AsyncStream.Continuation.yield(_:)(&v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000994B0(void *a1)
{
  if (!a1) {
    return 3LL;
  }
  id v1 = a1;
  uint64_t v2 = sub_10009AFFC(v1);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1000310FC(0xD00000000000001FLL, 0x80000001000DB050LL, v2);
    char v5 = v4;
    swift_bridgeObjectRelease(v3);
  }

  else
  {
    char v5 = 0;
  }

  unsigned int v7 = [v1 taskState];

  if ((v5 & 1) != 0) {
    return 0LL;
  }
  if (v7 <= 4) {
    return (0x102010304uLL >> (8 * v7));
  }
  return 4LL;
}

void sub_10009956C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = *(void (**)(id, id, id))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  id v11 = a2;
  id v9 = a3;
  id v10 = a4;
  v8(v11, v9, v10);
  swift_release(v7);
}

uint64_t sub_1000995F4(int a1)
{
  *(void *)(v2 + 40) = v1;
  *(_DWORD *)(v2 + 88) = a1;
  uint64_t v3 = sub_100003B20(&qword_10010B208);
  *(void *)(v2 + 48) = sub_100021CC4(*(void *)(v3 - 8));
  uint64_t v4 = sub_100003B20(&qword_10010E348);
  *(void *)(v2 + 56) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v2 + 6sub_100006F7C(v0 + 4) = v5;
  *(void *)(v2 + 72) = sub_100021CC4(v5);
  return sub_10000BD98();
}

uint64_t sub_100099660()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  int v5 = *(_DWORD *)(v0 + 88);
  *(_DWORD *)(v0 + 80) = v5;
  uint64_t v6 = v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_10000BE64(v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids, v0 + 16, 33LL);
  CountedSet.add(_:)(v0 + 80, v3);
  swift_endAccess(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  *(_DWORD *)(v0 + 8sub_100006F7C(v0 + 4) = v5;
  uint64_t v7 = CountedSet.count(of:)(v0 + 84, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v7 == 1)
  {
    uint64_t v8 = type metadata accessor for TaskPriority(0LL);
    sub_10009B630(v8);
    uint64_t v9 = sub_100007460((uint64_t)&unk_100104750, 48LL);
    uint64_t v10 = sub_10009B60C(v9);
    uint64_t v11 = sub_10009B664(v10, (uint64_t)&unk_10010E3E0);
    swift_release(v11);
  }

  swift_task_dealloc(*(void *)(v0 + 72));
  sub_10000C140();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099780(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(v5 + ++*(void *)(v0 + 16) = a5;
  *(_DWORD *)(v5 + 36) = a4;
  return swift_task_switch(sub_10009979C, a5, 0LL);
}

uint64_t sub_10009979C()
{
  if (qword_10010B0D8 != -1) {
    swift_once(&qword_10010B0D8, sub_100098AF0);
  }
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE68(v2, (uint64_t)qword_10010E198);
  os_log_type_t v3 = sub_100022604();
  if (sub_10002275C(v3))
  {
    uint64_t v4 = (float *)sub_10009B5A8();
    sub_10009B5E0(v4, 1.5047e-36);
    sub_10009B5CC((void *)&_mh_execute_header, v5, v6, "Started monitoring: %d");
    sub_10000BCC4((uint64_t)v4);
  }

  uint64_t v7 = (void *)swift_task_alloc(dword_10010E204);
  *(void *)(v1 + 2sub_100006F7C(v0 + 4) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10003DCF8;
  return sub_10009B5B4();
}

uint64_t sub_100099870(int a1)
{
  *(void *)(v2 + 6sub_100006F7C(v0 + 4) = v1;
  *(_DWORD *)(v2 + 120) = a1;
  uint64_t v3 = sub_100003B20(&qword_10010B208);
  *(void *)(v2 + 72) = sub_100021CC4(*(void *)(v3 - 8));
  uint64_t v4 = sub_100003B20(&qword_10010E348);
  *(void *)(v2 + 80) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = sub_100021CC4(v5);
  return sub_10000BD98();
}

uint64_t sub_1000998DC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  int v4 = *(_DWORD *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_10000BE64(v5, v0 + 16, 0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v1, v5, v3);
  *(_DWORD *)(v0 + 10sub_100006F7C(v0 + 4) = v4;
  uint64_t v7 = CountedSet.count(of:)(v0 + 104, v3);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v1, v3);
  if (v7)
  {
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 80);
    int v11 = *(_DWORD *)(v0 + 120);
    *(_DWORD *)(v0 + 112) = v11;
    sub_10000BE64(v5, v0 + 40, 33LL);
    CountedSet.remove(_:)(v0 + 112, v10);
    swift_endAccess(v0 + 40);
    v6(v9, v5, v10);
    *(_DWORD *)(v0 + 1++*(void *)(v0 + 16) = v11;
    uint64_t v12 = CountedSet.count(of:)(v0 + 116, v10);
    v8(v9, v10);
    if (!v12)
    {
      uint64_t v13 = type metadata accessor for TaskPriority(0LL);
      sub_10009B630(v13);
      uint64_t v14 = sub_100007460((uint64_t)&unk_100104728, 48LL);
      uint64_t v15 = sub_10009B60C(v14);
      uint64_t v16 = sub_10009B664(v15, (uint64_t)&unk_10010E3D0);
      swift_release(v16);
    }
  }

  else
  {
    if (qword_10010B0D8 != -1) {
      swift_once(&qword_10010B0D8, sub_100098AF0);
    }
    uint64_t v17 = sub_10000BF6C();
    uint64_t v18 = (os_log_s *)sub_10003CE68(v17, (uint64_t)qword_10010E198);
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (sub_1000228A4(v19))
    {
      int v20 = *(_DWORD *)(v0 + 120);
      uint64_t v21 = (uint8_t *)sub_10009B5A8();
      *(_DWORD *)uint64_t v21 = 67109120;
      *(_DWORD *)(v0 + 108) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 108, v0 + 112, v21 + 4);
      sub_10009B628( (void *)&_mh_execute_header,  v18,  (os_log_type_t)v5,  "Cannot stop monitoring pid that is not being monitored: %d",  v21);
      sub_10000BCC4((uint64_t)v21);
    }
  }

  swift_task_dealloc(*(void *)(v0 + 96));
  sub_10000C140();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099AFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(v5 + ++*(void *)(v0 + 16) = a5;
  *(_DWORD *)(v5 + 36) = a4;
  return swift_task_switch(sub_100099B18, a5, 0LL);
}

uint64_t sub_100099B18()
{
  if (qword_10010B0D8 != -1) {
    swift_once(&qword_10010B0D8, sub_100098AF0);
  }
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE68(v2, (uint64_t)qword_10010E198);
  os_log_type_t v3 = sub_100022604();
  if (sub_10002275C(v3))
  {
    int v4 = (float *)sub_10009B5A8();
    sub_10009B5E0(v4, 1.5047e-36);
    sub_10009B5CC((void *)&_mh_execute_header, v5, v6, "No longer monitoring: %d");
    sub_10000BCC4((uint64_t)v4);
  }

  uint64_t v7 = (void *)swift_task_alloc(dword_10010E204);
  *(void *)(v1 + 2sub_100006F7C(v0 + 4) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10009B57C;
  return sub_10009B5B4();
}

uint64_t sub_100099BEC()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_100099C00, v0);
}

uint64_t sub_100099C00()
{
  uint64_t v1 = unk_10010B894;
  int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010B890 + dword_10010B890);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 2sub_100006F7C(v0 + 4) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100099C74;
  return v4((uint64_t)v4, (uint64_t)&unk_10010E340, *(void *)(v0 + 16));
}

uint64_t sub_100099C74()
{
  return sub_10000BD98();
}

uint64_t sub_100099CB4(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v4 = sub_100003B20(&qword_10010E348);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100099D1C, a2, 0LL);
}

uint64_t sub_100099D1C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_10000BE64(v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids, (uint64_t)(v0 + 2), 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  unint64_t v6 = sub_100098718(v1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100049BAC(v7, &qword_10010E350, &OBJC_CLASS___RBSProcessPredicate_ptr);
  uint64_t v8 = sub_100011B48(v6);
  id v9 = sub_100099EC4(v8);
  void v0[9] = v9;
  uint64_t v10 = *(void **)(v4 + 112);
  uint64_t v11 = sub_100007460((uint64_t)&unk_100104638, 32LL);
  v0[10] = v11;
  *(void *)(v11 + ++*(void *)(v0 + 16) = v10;
  *(void *)(v11 + 2sub_100006F7C(v0 + 4) = v9;
  uint64_t v12 = unk_10010E35C;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010E358 + dword_10010E358);
  id v13 = v10;
  id v14 = v9;
  uint64_t v15 = (void *)swift_task_alloc(v12);
  v0[11] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100099E54;
  return v17((uint64_t)v17, (uint64_t)sub_10009B1CC, v11);
}

uint64_t sub_100099E54()
{
  return sub_10000BCD0();
}

uint64_t sub_100099E98()
{
  sub_10000C140();
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

id sub_100099EC4(uint64_t a1)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v4 = [(id)swift_getObjCClassFromMetadata(v1) predicateMatchingIdentifiers:isa];

  return v4;
}

void sub_100099F50(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject(&unk_1001046B0, 24LL, 7LL);
  *(void *)(v4 + ++*(void *)(v0 + 16) = a2;
  uint64_t v5 = swift_allocObject(&unk_1001046D8, 32LL, 7LL);
  *(void *)(v5 + ++*(void *)(v0 + 16) = sub_10009B2A4;
  *(void *)(v5 + 2sub_100006F7C(v0 + 4) = v4;
  v8[4] = sub_10009B2B0;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  void v8[2] = sub_100098F00;
  v8[3] = &unk_1001046F0;
  unint64_t v6 = _Block_copy(v8);
  id v7 = a2;
  swift_retain();
  objc_msgSend(a1, "updateConfiguration:", v6, swift_release().n128_f64[0]);
  _Block_release(v6);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v5, "", 102LL, 86LL, 57LL, 1LL);
  swift_release();
  swift_release();
}

void sub_10009A07C(void *a1, void *a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010CFB8);
  uint64_t v5 = swift_allocObject(v4, 40LL, 7LL);
  *(_OWORD *)(v5 + ++*(void *)(v0 + 16) = xmmword_1000D9570;
  *(void *)(v5 + 32) = a2;
  uint64_t v15 = v5;
  specialized Array._endMutation()(v5);
  sub_100049164(0LL, &qword_10010E350, &OBJC_CLASS___RBSProcessPredicate_ptr);
  id v6 = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  [a1 setPredicates:isa];

  if (qword_10010B0D8 != -1) {
    swift_once(&qword_10010B0D8, sub_100098AF0);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v8, (uint64_t)qword_10010E198);
  id v14 = v6;
  id v9 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t v15 = (uint64_t)v14;
    id v13 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    *uint64_t v12 = v14;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "New Predicate: %@", v11, 0xCu);
    sub_100003B20(&qword_10010BA58);
    swift_arrayDestroy(v12, 1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_10009A2BC(int a1)
{
  *(void *)(v2 + 2sub_100006F7C(v0 + 4) = v1;
  *(_DWORD *)(v2 + 8sub_100006F7C(v0 + 4) = a1;
  return sub_10000C088((uint64_t)sub_10009A2D4, 0LL);
}

uint64_t sub_10009A2D4()
{
  uint64_t v2 = (os_log_s *)*(unsigned int *)(v1 + 84);
  id v3 = [(id)objc_opt_self(RBSProcessIdentifier) identifierWithPid:v2];
  *(void *)(v1 + 32) = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_100007460((uint64_t)&unk_100104610, 24LL);
    *(void *)(v1 + 40) = v5;
    *(void *)(v5 + ++*(void *)(v0 + 16) = v4;
    uint64_t v6 = unk_10010ED2C;
    id v14 = (uint64_t (*)(void (*)(uint64_t *@<X8>), uint64_t))((char *)&dword_10010ED28
                                                                               + dword_10010ED28);
    id v7 = v4;
    uint64_t v8 = (void *)swift_task_alloc(v6);
    *(void *)(v1 + 48) = v8;
    *uint64_t v8 = v1;
    v8[1] = sub_10009A484;
    return v14(sub_10009B0DC, v5);
  }

  else
  {
    if (qword_10010B0D8 != -1) {
      swift_once(&qword_10010B0D8, sub_100098AF0);
    }
    uint64_t v10 = sub_10000BF6C();
    sub_10003CE68(v10, (uint64_t)qword_10010E198);
    os_log_type_t v11 = sub_100022604();
    if (sub_10002275C(v11))
    {
      int v12 = *(_DWORD *)(v1 + 84);
      id v13 = (uint8_t *)sub_10009B5A8();
      *(_DWORD *)id v13 = 67109120;
      *(_DWORD *)(v1 + 72) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 76, v13 + 4);
      sub_10009B628( (void *)&_mh_execute_header,  v2,  v0,  "Failed to get RBSProcessIdentifier for %d. Interpreting as process terminated",  v13);
      sub_10000BCC4((uint64_t)v13);
    }

    return (*(uint64_t (**)(uint64_t))(v1 + 8))(3LL);
  }

uint64_t sub_10009A484(uint64_t a1)
{
  id v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 48LL);
  v3[7] = a1;
  _BYTE v3[8] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_release(v3[5]);
  }
  return sub_10000BCD0();
}

uint64_t sub_10009A4F0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v16 = *(void *)(v0 + 56);
    }
    else {
      uint64_t v16 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 56));
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v2)
  {
    unint64_t v3 = v1 & 0xC000000000000001LL;
    sub_1000CAB3C(0LL, (v1 & 0xC000000000000001LL) == 0);
    uint64_t v4 = *(void *)(v0 + 56);
    if (v3)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 56));
      uint64_t v4 = *(void *)(v0 + 56);
    }

    else
    {
      id v5 = *(id *)(v4 + 32);
    }

    uint64_t v6 = *(void **)(v0 + 32);
    swift_bridgeObjectRelease(v4);
    uint64_t v7 = sub_1000994B0(v5);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    if (qword_10010B0D8 != -1) {
      swift_once(&qword_10010B0D8, sub_100098AF0);
    }
    uint64_t v8 = sub_10000BF6C();
    sub_10003CE68(v8, (uint64_t)qword_10010E198);
    os_log_type_t v9 = sub_100022604();
    BOOL v10 = sub_10002275C(v9);
    uint64_t v6 = *(void **)(v0 + 32);
    if (v10)
    {
      int v11 = *(_DWORD *)(v0 + 84);
      int v12 = (_DWORD *)sub_10009B5A8();
      *int v12 = 67109120;
      *(_DWORD *)(v0 + 80) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 84, v12 + 1);
      sub_10009B5CC( (void *)&_mh_execute_header,  v13,  v14,  "Failed to get RBSProcessHandle for %d. Interpreting as process terminated");
      sub_10000BCC4((uint64_t)v12);

      uint64_t v7 = 3LL;
    }

    else
    {

      uint64_t v7 = 3LL;
      uint64_t v6 = (void *)v1;
    }
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_10009A698()
{
  if (qword_10010B0D8 != -1) {
    swift_once(&qword_10010B0D8, sub_100098AF0);
  }
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = sub_10000BF6C();
  unint64_t v3 = (os_log_s *)sub_100003BA0(v2, (uint64_t)qword_10010E198);
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  id v5 = v3;
  Logger.logObject.getter(v4);
  os_log_type_t v6 = sub_100022604();
  BOOL v7 = os_log_type_enabled(v3, v6);
  uint64_t v8 = *(void *)(v0 + 64);
  os_log_type_t v9 = *(os_log_s **)(v0 + 32);
  if (v7)
  {
    int v10 = *(_DWORD *)(v0 + 84);
    uint64_t v11 = sub_10009B670();
    int v12 = (void *)sub_10009B5A8();
    *(_DWORD *)uint64_t v11 = 67109378;
    *(_DWORD *)(v0 + 76) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 76, v0 + 80, v11 + 4);
    *(_WORD *)(v11 + 8) = 2112;
    swift_errorRetain(v8);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + ++*(void *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 10);
    *int v12 = v13;
    sub_1000301C0();
    sub_1000301C0();
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Failed to get RBSProcessHandle for %d: %@. Interpreting as process terminated",  (uint8_t *)v11,  0x12u);
    sub_100003B20(&qword_10010BA58);
    swift_arrayDestroy(v12, 1LL);
    sub_10000BCC4((uint64_t)v12);
    sub_10000BCC4(v11);
  }

  else
  {

    sub_1000301C0();
    sub_1000301C0();
    os_log_type_t v9 = v5;
  }

  sub_1000301C0();

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(3LL);
}

void sub_10009A858(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessState);
  id v5 = [(id)objc_opt_self(RBSProcessPredicate) predicateMatchingIdentifier:a1];
  if (qword_10010B0E0 != -1) {
    swift_once(&qword_10010B0E0, sub_100098B5C);
  }
  id v20 = 0LL;
  id v6 = [v4 statesForPredicate:v5 withDescriptor:qword_100110078 error:&v20];

  id v7 = v20;
  if (v6)
  {
    uint64_t v8 = sub_100049164(0LL, &qword_10010E330, &OBJC_CLASS___RBSProcessState_ptr);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v8);
    id v10 = v7;

    *a2 = v9;
  }

  else
  {
    id v11 = v20;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
  }

void sub_10009A9B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = a1;
  id v6 = [(id)objc_opt_self(RBSProcessIdentifier) identifierWithPid:a1];
  if (v6)
  {
    id v7 = v6;
    sub_100049BAC((uint64_t)v6, &qword_10010CFB0, &OBJC_CLASS___RBSProcessHandle_ptr);
    id v8 = v7;
    id v9 = sub_100098A1C((uint64_t)v8);
    sub_10009AC8C(v9, (uint64_t)&v18);
    uint64_t v13 = v18;
    __int128 v16 = v20;
    __int128 v17 = *(_OWORD *)&v19[4];

    __int128 v15 = v16;
    __int128 v14 = v17;
  }

  else
  {
    if (qword_10010B0D8 != -1) {
      swift_once(&qword_10010B0D8, sub_100098AF0);
    }
    uint64_t v10 = sub_10000BF6C();
    sub_10003CE68(v10, (uint64_t)qword_10010E198);
    os_log_type_t v11 = sub_100022604();
    if (sub_1000228A4(v11))
    {
      uint64_t v12 = (uint8_t *)sub_10009B5A8();
      *(_DWORD *)uint64_t v12 = 67109120;
      int v18 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v12 + 4);
      sub_10009B628((void *)&_mh_execute_header, v2, v3, "Failed to get RBSProcessIdentifier for %d.", v12);
      sub_10000BCC4((uint64_t)v12);
    }

    uint64_t v13 = 0LL;
    __int128 v14 = xmmword_1000DA050;
    __int128 v15 = 0uLL;
  }

  *(void *)a2 = v13;
  *(_OWORD *)(a2 + 8) = v14;
  *(_OWORD *)(a2 + 2sub_100006F7C(v0 + 4) = v15;
}

void sub_10009AC8C(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = [a1 isDaemon];
  uint64_t v5 = sub_10009B058(a1);
  uint64_t v7 = v6;
  id v8 = [a1 bundle];
  id v9 = v8;
  if (!v8)
  {

LABEL_6:
    uint64_t v12 = 0LL;
    goto LABEL_7;
  }

  id v10 = [v8 identifier];

  if (!v10)
  {

    id v9 = 0LL;
    goto LABEL_6;
  }

  id v9 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v12 = v11;

LABEL_7:
  *(_BYTE *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + ++*(void *)(v0 + 16) = v7;
  *(void *)(a2 + 2sub_100006F7C(v0 + 4) = v9;
  *(void *)(a2 + 32) = v12;
}

void sub_10009AD64()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  uint64_t v2 = sub_100003B20(&qword_10010E348);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_release();
  sub_10009B3FC(v0 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream);
  swift_defaultActor_destroy(v0);
  sub_1000075C0();
}

uint64_t sub_10009ADE8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10009AE00()
{
  return type metadata accessor for RunningBoardProvider(0LL);
}

uint64_t type metadata accessor for RunningBoardProvider(uint64_t a1)
{
  uint64_t result = qword_10010E1E0;
  if (!qword_10010E1E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunningBoardProvider);
  }
  return result;
}

void sub_10009AE40(uint64_t a1)
{
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10009AEF0();
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10009AF40(319LL);
    if (v5 <= 0x3F)
    {
      v6[5] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 6LL, v6, a1 + 80);
    }
  }

void sub_10009AEF0()
{
  if (!qword_10010E210)
  {
    unint64_t v0 = type metadata accessor for CountedSet(0LL, &type metadata for Int32, &protocol witness table for Int32);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10010E210);
    }
  }

void sub_10009AF40(uint64_t a1)
{
  if (!qword_10010E218)
  {
    uint64_t v2 = sub_10000603C(&qword_10010C030);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10010E218);
    }
  }

unint64_t sub_10009AF98(uint64_t a1)
{
  unint64_t result = sub_10009AFBC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009AFBC()
{
  unint64_t result = qword_10010B898;
  if (!qword_10010B898)
  {
    uint64_t v1 = type metadata accessor for RunningBoardProvider(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000DA0CC, v1);
    atomic_store(result, &qword_10010B898);
  }

  return result;
}

uint64_t sub_10009AFFC(void *a1)
{
  id v1 = [a1 endowmentNamespaces];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  &protocol witness table for String);

  return v3;
}

uint64_t sub_10009B058(void *a1)
{
  id v1 = [a1 daemonJobLabel];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10009B0B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10009B0DC(uint64_t *a1@<X8>)
{
}

void sub_10009B0F4(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setEndowmentNamespaces:isa];
}

uint64_t sub_10009B14C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_10010E33C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100023C40;
  return sub_100099CB4(a1, v1);
}

uint64_t sub_10009B1A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10009B1CC()
{
}

double sub_10009B1D4(uint64_t a1)
{
  return sub_10009847C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10009B1E0()
{
  uint64_t v1 = sub_100003B20(&qword_10010B9D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  __n128 v7 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009B258()
{
  return sub_1000986DC(*(void (**)(void))(v0 + 16));
}

uint64_t sub_10009B28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009B29C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10009B2A4(void *a1)
{
}

uint64_t sub_10009B2B0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10009B2D4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010E3CC);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_100099AFC(v2, v3, v4, v5, v6);
}

uint64_t sub_10009B330()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10009B35C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010E3DC);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_100099780(v2, v3, v4, v5, v6);
}

uint64_t sub_10009B3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010E3F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B3FC(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010E3F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009B43C(uint64_t a1)
{
  return sub_100099104(a1, v1);
}

uint64_t sub_10009B444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010E3F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_10009B490(void *a1)
{
}

uint64_t sub_10009B4CC()
{
  uint64_t v1 = sub_100003B20(&qword_10010E3F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009B530(uint64_t a1, void *a2, void *a3)
{
  return sub_1000993D4(a1, a2, a3);
}

uint64_t sub_10009B5A8()
{
  return swift_slowAlloc(8LL, -1LL);
}

uint64_t sub_10009B5B4()
{
  return sub_100099BEC();
}

void sub_10009B5CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10009B5E0(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v3 - sub_100006F7C(v0 + 4) = v4;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3, a1 + 1);
}

uint64_t sub_10009B5FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10009B60C(uint64_t a1)
{
  *(void *)(a1 + ++*(void *)(v0 + 16) = v1;
  *(void *)(a1 + 2sub_100006F7C(v0 + 4) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v1;
  return swift_retain_n(v1, 2LL);
}

void sub_10009B628(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

unint64_t sub_10009B630(uint64_t a1)
{
  return sub_10009AFBC();
}

  ;
}

uint64_t sub_10009B664(uint64_t a1, uint64_t a2)
{
  return sub_100003854(v2, a2, v3);
}

uint64_t sub_10009B670()
{
  return swift_slowAlloc(18LL, -1LL);
}

  ;
}

ValueMetadata *type metadata accessor for AssetTransitionDelayTrial()
{
  return &type metadata for AssetTransitionDelayTrial;
}

uint64_t sub_10009B6A0()
{
  uint64_t v0 = sub_100003B20(&qword_10010B228);
  sub_100003B60(v0, qword_100110098);
  sub_100003BA0(v0, (uint64_t)qword_100110098);
  uint64_t v1 = type metadata accessor for Assertion(0LL);
  return UUIDIdentifier.init()(v1, &protocol witness table for Assertion);
}

uint64_t sub_10009B700()
{
  if (qword_10010B0E8 != -1) {
    swift_once(&qword_10010B0E8, sub_10009B6A0);
  }
  uint64_t v0 = sub_100003B20(&qword_10010B228);
  return sub_100003BA0(v0, (uint64_t)qword_100110098);
}

uint64_t sub_10009B74C(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for RequestPriority(0LL);
  v2[5] = sub_100021CF0(*(void *)(*(void *)(v3 - 8) + 64LL));
  uint64_t v4 = type metadata accessor for AssetPolicy(0LL);
  v2[6] = sub_100021CF0(*(void *)(*(void *)(v4 - 8) + 64LL));
  return sub_10000BD98();
}

uint64_t sub_10009B7AC()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000729C(v1, v2);
  uint64_t v4 = *(int **)(v3 + 24);
  __n128 v7 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10009B85C;
  return v7(0xD00000000000001CLL, 0x80000001000DC7B0LL, 0xD00000000000001BLL, 0x80000001000DC7D0LL, v2, v3);
}

uint64_t sub_10009B85C(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 56);
  *(void *)(v3 + 6sub_100006F7C(v0 + 4) = a1;
  *(_BYTE *)(v3 + 72) = a2;
  swift_task_dealloc(v4);
  return sub_10000BD98();
}

uint64_t sub_10009B8B4(uint64_t a1)
{
  if ((*(_BYTE *)(v1 + 72) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v1 + 24);
    uint64_t v10 = sub_100022258();
    uint64_t v11 = v13;
LABEL_8:
    uint64_t v12 = 1LL;
    goto LABEL_9;
  }

  uint64_t v2 = *(void *)(v1 + 64);
  if (v2 < 0)
  {
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = sub_100021CF0(*(void *)(v15 + 64));
    uint64_t v17 = generalLogger.getter(v16);
    int v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = *(void *)(v1 + 64);
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v21 = 134217984;
      *(void *)(v1 + ++*(void *)(v0 + 16) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Illegal trial asset transition delay: %lld", v21, 0xCu);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    uint64_t v22 = *(void *)(v1 + 24);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    swift_task_dealloc(v16);
    uint64_t v10 = sub_100022258();
    uint64_t v11 = v22;
    goto LABEL_8;
  }

  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(a1);
  uint64_t v7 = default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v6);
  uint64_t v8 = default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v9 = default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v8);
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v3, v7, v4, v9, v2);
  uint64_t v10 = sub_100022258();
  uint64_t v11 = v5;
  uint64_t v12 = 0LL;
LABEL_9:
  sub_100005FB0(v11, v12, 1LL, v10);
  uint64_t v23 = *(void *)(v1 + 40);
  swift_task_dealloc(*(void *)(v1 + 48));
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_10009BA74()
{
  return 0xD000000000000019LL;
}

unint64_t sub_10009BA90()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10009BAAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10009B700();
  uint64_t v3 = sub_100003B20(&qword_10010B228);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v2, v3);
}

uint64_t sub_10009BAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010E434);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100097FB8;
  return sub_10009B74C(a1, a2);
}

uint64_t sub_10009BB48()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010E438);
  uint64_t v1 = sub_100003BA0(v0, (uint64_t)qword_10010E438);
  uint64_t v2 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_10009BBE0(int a1)
{
  uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)(1024LL, &type metadata for Int8);
  *(void *)(v2 + ++*(void *)(v0 + 16) = 1024LL;
  bzero((void *)(v2 + 32), 0x400uLL);
  swift_bridgeObjectRelease(v2);
  return 0LL;
}

uint64_t sub_10009BC64(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v2 = result;
  int v3 = *(unsigned __int8 *)(result + 32);
  result += 32LL;
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
    }

    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = 0LL;
LABEL_8:
  uint64_t v7 = static String._fromUTF8Repairing(_:)(result, v4);
  swift_bridgeObjectRelease(v2);
  return v7;
}

uint64_t sub_10009BCE4(int a1)
{
  *(void *)(v2 + 296) = v1;
  *(_DWORD *)(v2 + 336) = a1;
  return sub_10000C088((uint64_t)sub_10009BCFC, v1);
}

id sub_10009BCFC()
{
  uint64_t v2 = v0 + 16;
  uint64_t v3 = v0 + 56;
  uint64_t v4 = *(unsigned int *)(v0 + 336);
  sub_10000729C((void *)(*(void *)(v0 + 296) + 112LL), *(void *)(*(void *)(v0 + 296) + 136LL));
  sub_10009A9B8(v4, v0 + 56);
  sub_10009CE38(v0 + 56, v0 + 96, &qword_10010E548);
  if (*(void *)(v0 + 112) == 1LL)
  {
    if (qword_10010B0F0 != -1) {
      swift_once(&qword_10010B0F0, sub_10009BB48);
    }
    uint64_t v5 = sub_10000BF6C();
    uint64_t v6 = sub_10003CE68(v5, (uint64_t)qword_10010E438);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (!sub_1000228A4(v7)) {
      goto LABEL_8;
    }
    uint64_t v8 = (float *)sub_10000BCF4(8LL);
    sub_10009CEB8(v8, 1.5047e-36);
    uint64_t v11 = "Failed to check assertion allowed: failed to get process handle for %d";
    goto LABEL_6;
  }

  __int128 v14 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 152) = v14;
  *(void *)(v0 + 168) = *(void *)(v0 + 128);
  if ((*(_BYTE *)(v0 + 136) & 1) != 0)
  {
    uint64_t v6 = v0 + 248;
    sub_10009CE38(v0 + 144, v0 + 200, &qword_10010DC20);
    sub_10009CE38(v0 + 200, v0 + 248, &qword_10010DC20);
    uint64_t v15 = *(void *)(v0 + 256);
    if (v15)
    {
      uint64_t v16 = v0 + 216;
      uint64_t v17 = 160LL;
      goto LABEL_15;
    }

    __break(1u);
    goto LABEL_53;
  }

  uint64_t v15 = *(void *)(v0 + 168);
  if (v15)
  {
    uint64_t v16 = v0 + 232;
    uint64_t v6 = v0 + 160;
    uint64_t v17 = 144LL;
LABEL_15:
    uint64_t v18 = *(void *)v6;
    sub_10009CE38(v0 + v17, v16, &qword_10010DC20);
    *(void *)(v0 + 30sub_100006F7C(v0 + 4) = v18;
    *(void *)(v0 + 312) = v15;
    uint64_t v19 = *(void *)(v0 + 296);
    sub_100082ABC(v16);
    uint64_t v20 = *(void *)(v19 + 152);
    *(void *)(v0 + 320) = v20;
    return (id)swift_task_switch(sub_10009C358, v20, 0LL);
  }

  sub_10009CE38(v0 + 144, v0 + 264, &qword_10010DC20);
  uint64_t v21 = sub_100082ABC(v0 + 264);
  id result = (id)MobileGestalt_get_current_device(v21);
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    id v22 = (id)MobileGestalt_copy_releaseType_obj();

    if (!v22)
    {
LABEL_23:
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v24 = sub_10000BF6C();
      sub_10003CE68(v24, (uint64_t)qword_10010E438);
      os_log_type_t v25 = sub_100022604();
      if (!sub_1000228A4(v25)) {
        goto LABEL_8;
      }
      uint64_t v8 = (float *)sub_10000BCF4(8LL);
      sub_10009CEB8(v8, 1.5047e-36);
      uint64_t v11 = "Not an internal build, assertion from process %d denied";
      goto LABEL_6;
    }

    sub_10009D078();
    sub_10009D138();
    if (v3 == v4 && v6 == 0xE800000000000000LL)
    {
      swift_bridgeObjectRelease(0xE800000000000000LL);
    }

    else
    {
      sub_10009CFA8();
      sub_10009D090();
    }

    sub_10009BBE0(*(_DWORD *)(v0 + 336));
    if (!v26)
    {
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v38 = sub_10000BF6C();
      sub_10003CE68(v38, (uint64_t)qword_10010E438);
      os_log_type_t v39 = sub_10003D3E0();
      if (!sub_1000228A4(v39)) {
        goto LABEL_8;
      }
      uint64_t v8 = (float *)sub_10000BCF4(8LL);
      sub_10009CEB8(v8, 1.5047e-36);
      uint64_t v11 = "cannot get executable Path assertion from process %d denied";
LABEL_6:
      sub_10009D09C((void *)&_mh_execute_header, v9, v10, v11);
      uint64_t v12 = (uint64_t)v8;
      goto LABEL_7;
    }

    if (sub_10009CF08()) {
      goto LABEL_34;
    }
    if (sub_10009CF3C()) {
      goto LABEL_34;
    }
    sub_10009D15C();
    sub_10009CFE0();
    sub_10009D144();
    if ((v4 & 1) != 0 {
      || (sub_10009D0EC(),
    }
          unint64_t v27 = sub_10009D118((uint64_t)"Tests-Runner.app"),
          uint64_t v28 = sub_10009D048(v27, (uint64_t)&type metadata for String),
          (v28 & 1) != 0)
      || (*(void *)(v0 + 280) = v3,
          *(void *)(v0 + 288) = v22,
          *(void *)(v0 + ++*(void *)(v0 + 16) = v1 + 3,
          *(void *)(v0 + 2sub_100006F7C(v0 + 4) = 0x80000001000DC850LL,
          (sub_10009D060(v28, (uint64_t)&type metadata for String) & 1) != 0))
    {
LABEL_34:
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v29 = sub_10000BF6C();
      uint64_t v30 = sub_10009CEE4(v29, (uint64_t)qword_10010E438);
      Logger.logObject.getter(v30);
      os_log_type_t v31 = sub_10003D3E0();
      if (sub_10009D108(v31))
      {
        uint64_t v32 = (_DWORD *)sub_10000BCF4(12LL);
        uint64_t v70 = sub_10000BCF4(32LL);
        *uint64_t v32 = 136315138;
        uint64_t v33 = sub_1000225A4();
        sub_10009CED4(v33, v34);
        sub_10009CF68(v35);
        sub_10009CF80();
        sub_10009D0D8((void *)&_mh_execute_header, v36, v37, "allowed executablePath %s");
        sub_10009CFCC();
        sub_10000BCC4(v70);
        sub_10000BCC4((uint64_t)v32);

        return (id)sub_10009CF8C(v2, *(uint64_t (**)(void))(v0 + 8));
      }

LABEL_53:
    swift_once(&qword_10010B0F0, sub_10009BB48);
    goto LABEL_44;
  }

  __break(1u);
  return result;
}

      swift_once(&qword_10010B108, sub_1000A4494);
      goto LABEL_4;
    }

    uint64_t v58 = *(void *)(v137 + 16);
    uint64_t v141 = v27;
    if (v58 < 2)
    {
      uint64_t v98 = v143;
      if (qword_10010B108 != -1) {
        swift_once(&qword_10010B108, sub_1000A4494);
      }
      uint64_t v99 = sub_10000BF6C();
      sub_100003BA0(v99, (uint64_t)qword_10010E710);
      sub_1000A8698();
      uint64_t v100 = sub_1000A86B0();
      uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
      uint64_t v102 = static os_log_type_t.default.getter();
      if (sub_10008516C((os_log_type_t)v102))
      {
        LODWORD(v138) = v102;
        uint64_t v103 = sub_10000BCF4(22LL);
        uint64_t v135 = sub_10000BCF4(64LL);
        a10 = v135;
        *(_DWORD *)uint64_t v103 = 136315394;
        swift_retain();
        uint64_t v104 = sub_1000A75D8();
        uint64_t v105 = v46;
        uint64_t v107 = v106;
        sub_1000228B4();
        sub_100015EF8(v104, v107, &a10);
        sub_1000A8794(v108);
        os_log_t v134 = v109 + 8;
        sub_10000C04C((uint64_t)&v144, v109 + 8);
        sub_10000BCDC(v105);
        swift_bridgeObjectRelease(v107);
        *(_WORD *)(v103 + 12) = 2080;
        uint64_t v46 = *(void *)(v27 + 16);
        if (v46)
        {
          uint64_t v132 = v103;
          os_signpost_id_t v133 = v101;
          uint64_t v110 = sub_1000A873C();
          sub_1000A8724(v110, v46);
          uint64_t v111 = sub_100020E24(v27);
          uint64_t v113 = v112;
          uint64_t v139 = v27 + 56;
          uint64_t v140 = v22;
          while ((v111 & 0x8000000000000000LL) == 0)
          {
            sub_100022404();
            if (v111 >= v114) {
              break;
            }
            if (*(_DWORD *)(v27 + 36) != (_DWORD)v113) {
              goto LABEL_52;
            }
            uint64_t v115 = (uint64_t)v142;
            sub_10003C8BC( *(void *)(v27 + 48) + *(void *)(v22 + 72) * v111,  (uint64_t)v142,  type metadata accessor for ModelCatalogAsset);
            sub_10000B7B0(v115, v98);
            sub_1000225FC();
            sub_10002F90C(v98, type metadata accessor for ModelCatalogAsset);
            if ((sub_100030B08() & 1) == 0)
            {
              sub_100030638();
              uint64_t v115 = v144;
            }

            unint64_t v27 = *(void *)(v115 + 16);
            uint64_t v116 = *(void *)(v115 + 24);
            if (v27 >= v116 >> 1) {
              sub_10000BDA4(v116 > 1, v27 + 1);
            }
            sub_1000A88B4();
            uint64_t v118 = sub_1000A8888(v111, v113, v117);
            uint64_t v111 = v118;
            uint64_t v113 = v119;
            --v46;
            id v22 = v140;
            uint64_t v98 = v143;
            if (!v46)
            {
              sub_10000B830(v118, v119, v120 & 1);
              uint64_t v103 = v132;
              uint64_t v101 = v133;
              goto LABEL_43;
            }
          }

          goto LABEL_50;
        }

        v61 += 40;
        if (!--v53) {
          goto LABEL_54;
        }
      }

      if (v51) {
        goto LABEL_53;
      }
      goto LABEL_50;
    }

    sub_1000A87FC();
    sub_1000854A0();
    swift_retain(v18);
    sub_1000CC6A4((uint64_t)&v187, v52 + 32, v53, (void *)(v18 + 16), v18 + 32, v54, v55, v56);
    uint64_t v58 = v57;
    uint64_t v19 = v59;
    sub_1000228B4();
    if ((v58 & 1) == 0) {
      goto LABEL_82;
    }
LABEL_55:
    sub_1000A87FC();
    sub_1000854A0();
    uint64_t v69 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
    {
      sub_100016C44(0LL, *(void *)(v52 + 16) + 1LL, 1);
      uint64_t v52 = v191[0];
    }

    uint64_t v71 = *(void *)(v52 + 16);
    uint64_t v70 = *(void *)(v52 + 24);
    uint64_t v72 = v71 + 1;
    if (v71 >= v70 >> 1)
    {
      sub_100016C44((char *)(v70 > 1), v71 + 1, 1);
      uint64_t v52 = v191[0];
    }

    *(void *)(v52 + ++*(void *)(v0 + 16) = v72;
    uint64_t v73 = v52 + 40 * v71;
    uint64_t v74 = v187;
    uint64_t v75 = v188;
    *(_BYTE *)(v73 + 6sub_100006F7C(v0 + 4) = v189;
    *(_OWORD *)(v73 + 32) = v74;
    *(_OWORD *)(v73 + 48) = v75;
    if (!v18)
    {
      uint64_t v76 = 0LL;
      uint64_t v77 = v71 > 0xE;
      uint64_t v47 = v69;
      if (!v77) {
        goto LABEL_82;
      }
      goto LABEL_78;
    }

    sub_10002FFE4(v18 + 16, (uint64_t)&v186);
    if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v18 + 16) & 0x3FLL) <= (uint64_t)v71)
    {
      uint64_t v76 = *(void *)(v18 + 24) & 0x3FLL;
      if (v71 > 0xE)
      {
        uint64_t v47 = v69;
      }

      else
      {
        uint64_t v47 = v69;
        if (!v76)
        {
          sub_1000228B4();
          uint64_t v18 = 0LL;
          goto LABEL_82;
        }
      }

uint64_t sub_10009C358()
{
  uint64_t v1 = *(void *)(v0 + 320);
  swift_beginAccess(v1 + 304, v0 + 176, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 304);
  *(void *)(v0 + 328) = v2;
  swift_bridgeObjectRetain(v2);
  return sub_10000BCD0();
}

id sub_10009C3AC()
{
  uint64_t v5 = v1 + 16;
  sub_10000E704(*(void *)(v1 + 304), *(void *)(v1 + 312), *(void **)(v1 + 328));
  sub_10009D090();
  if ((v0 & 1) != 0)
  {
    if (qword_10010B0F0 != -1) {
      swift_once(&qword_10010B0F0, sub_10009BB48);
    }
    uint64_t v6 = *(void *)(v1 + 312);
    uint64_t v7 = sub_10000BF6C();
    uint64_t v8 = (os_log_s *)sub_100003BA0(v7, (uint64_t)qword_10010E438);
    uint64_t v9 = swift_bridgeObjectRetain(v6);
    uint64_t v10 = v8;
    Logger.logObject.getter(v9);
    os_log_type_t v11 = sub_100022604();
    BOOL v12 = os_log_type_enabled(v8, v11);
    uint64_t v13 = *(void *)(v1 + 312);
    if (v12)
    {
      uint64_t v14 = *(void *)(v1 + 304);
      uint64_t v15 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v16 = sub_10000BCF4(32LL);
      uint64_t v77 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain(v13);
      sub_100015EF8(v14, v13, &v77);
      sub_10009CF68(v17);
      swift_bridgeObjectRelease_n(v13, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s allowed to hold assertion", v15, 0xCu);
      sub_10009CFCC();
      sub_10000BCC4(v16);
      sub_10000BCC4((uint64_t)v15);

      return (id)sub_10009CF8C(v5, *(uint64_t (**)(void))(v1 + 8));
    }

    swift_bridgeObjectRelease_n(v13, 2LL);
LABEL_43:
    uint64_t v5 = 1LL;
    return (id)sub_10009CF8C(v5, *(uint64_t (**)(void))(v1 + 8));
  }

  uint64_t v18 = swift_bridgeObjectRelease(*(void *)(v1 + 312));
  id result = (id)MobileGestalt_get_current_device(v18);
  if (result)
  {
    uint64_t v20 = (uint64_t)result;
    id v21 = (id)MobileGestalt_copy_releaseType_obj();

    if (!v21)
    {
LABEL_13:
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v23 = sub_10000BF6C();
      sub_10003CE68(v23, (uint64_t)qword_10010E438);
      os_log_type_t v24 = sub_100022604();
      if (!sub_1000228A4(v24)) {
        goto LABEL_36;
      }
      os_log_type_t v25 = (float *)sub_10000BCF4(8LL);
      sub_10009CEB8(v25, 1.5047e-36);
      uint64_t v28 = "Not an internal build, assertion from process %d denied";
      goto LABEL_34;
    }

    sub_10009D078();
    sub_10009D138();
    if (v2 == v3 && v20 == 0xE800000000000000LL)
    {
      swift_bridgeObjectRelease(0xE800000000000000LL);
    }

    else
    {
      sub_10009CFA8();
      sub_10009D090();
    }

    sub_10009BBE0(*(_DWORD *)(v1 + 336));
    if (!v29)
    {
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v43 = sub_10000BF6C();
      sub_10003CE68(v43, (uint64_t)qword_10010E438);
      os_log_type_t v44 = sub_10003D3E0();
      if (!sub_1000228A4(v44)) {
        goto LABEL_36;
      }
      os_log_type_t v25 = (float *)sub_10000BCF4(8LL);
      sub_10009CEB8(v25, 1.5047e-36);
      uint64_t v28 = "cannot get executable Path assertion from process %d denied";
LABEL_34:
      sub_10009D09C((void *)&_mh_execute_header, v26, v27, v28);
      uint64_t v45 = (uint64_t)v25;
      goto LABEL_35;
    }

    if (sub_10009CF08()) {
      goto LABEL_25;
    }
    if (sub_10009CF3C()) {
      goto LABEL_25;
    }
    sub_10009D15C();
    sub_10009CFE0();
    sub_10009D144();
    if ((v3 & 1) != 0 {
      || (sub_10009D0EC(),
    }
          unint64_t v30 = sub_10009D118((uint64_t)"Tests-Runner.app"),
          uint64_t v31 = sub_10009D048(v30, (uint64_t)&type metadata for String),
          (v31 & 1) != 0)
      || (*(void *)(v1 + 280) = v2,
          *(void *)(v1 + 288) = v21,
          *(void *)(v1 + ++*(void *)(v0 + 16) = v4 + 3,
          *(void *)(v1 + 2sub_100006F7C(v0 + 4) = 0x80000001000DC850LL,
          (sub_10009D060(v31, (uint64_t)&type metadata for String) & 1) != 0))
    {
LABEL_25:
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v32 = sub_10000BF6C();
      uint64_t v33 = sub_10009CEE4(v32, (uint64_t)qword_10010E438);
      Logger.logObject.getter(v33);
      os_log_type_t v34 = sub_10003D3E0();
      if (sub_10009D108(v34))
      {
        uint64_t v35 = (_DWORD *)sub_10000BCF4(12LL);
        uint64_t v36 = sub_10000BCF4(32LL);
        uint64_t v77 = v36;
        *uint64_t v35 = 136315138;
        uint64_t v37 = sub_1000225A4();
        sub_10009CED4(v37, v38);
        sub_10009CF68(v39);
        sub_10009CF80();
        sub_10009D0D8((void *)&_mh_execute_header, v40, v41, "allowed executablePath %s");
        sub_10009CFCC();
        sub_10000BCC4(v36);
        uint64_t v42 = (uint64_t)v35;
LABEL_29:
        sub_10000BCC4(v42);

        return (id)sub_10009CF8C(v5, *(uint64_t (**)(void))(v1 + 8));
      }
    }

    else
    {
      *(void *)(v1 + 40) = &type metadata for ModelManager;
      unint64_t v46 = sub_10006D648();
      sub_10009D128(v46);
      sub_10009D150();
      if ((v20 & 1) == 0)
      {
        if (qword_10010B0F0 != -1) {
          swift_once(&qword_10010B0F0, sub_10009BB48);
        }
        uint64_t v64 = sub_10000BF6C();
        uint64_t v65 = sub_10009CEE4(v64, (uint64_t)qword_10010E438);
        uint64_t v20 = Logger.logObject.getter(v65);
        os_log_type_t v66 = static os_log_type_t.fault.getter();
        if (!sub_100084B90(v66))
        {
          sub_10009D00C();
          goto LABEL_36;
        }

        int v67 = *(_DWORD *)(v1 + 336);
        uint64_t v68 = sub_10000BCF4(18LL);
        uint64_t v69 = sub_10000BCF4(32LL);
        uint64_t v77 = v69;
        *(_DWORD *)uint64_t v68 = 67109378;
        *(_DWORD *)(v1 + ++*(void *)(v0 + 16) = v67;
        sub_10009CEFC(v69, v70, v68 + 4);
        *(_WORD *)(v68 + 8) = 2080;
        uint64_t v71 = sub_1000225A4();
        sub_10009CED4(v71, v72);
        sub_10009D018(v73);
        sub_10009CF80();
        sub_10009D0B0( (void *)&_mh_execute_header,  v74,  v75,  "disallowed pid %d with executable path to hold assertions %s");
        sub_10009D000();
        sub_10000BCC4(v69);
        uint64_t v45 = v68;
LABEL_35:
        sub_10000BCC4(v45);
LABEL_36:

        uint64_t v5 = 0LL;
        return (id)sub_10009CF8C(v5, *(uint64_t (**)(void))(v1 + 8));
      }

      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v47 = sub_10000BF6C();
      uint64_t v48 = sub_10009CEE4(v47, (uint64_t)qword_10010E438);
      Logger.logObject.getter(v48);
      os_log_type_t v49 = sub_100022604();
      if (sub_100084B90(v49))
      {
        uint64_t v50 = (_DWORD *)sub_10000BCF4(12LL);
        uint64_t v51 = sub_10000BCF4(32LL);
        *uint64_t v50 = 136315138;
        uint64_t v77 = v51;
        uint64_t v52 = sub_1000225A4();
        sub_10009CED4(v52, v53);
        sub_10009D030(v54, v55, v56, v57, v58, v59, v60, v61, v76, (uint64_t)(v50 + 1));
        sub_10009CF80();
        sub_10009D0C4( (void *)&_mh_execute_header,  v62,  v63,  "Allowlist Blocked: Allowing typically blocked executablePath %s");
        uint64_t v5 = 1LL;
        sub_10009D000();
        sub_10000BCC4(v51);
        uint64_t v42 = (uint64_t)v50;
        goto LABEL_29;
      }
    }

    sub_10009D00C();

    goto LABEL_43;
  }

  __break(1u);
  return result;
}

uint64_t sub_10009C98C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Assertion.DaemonRep(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return sub_10000BD98();
}

uint64_t sub_10009C9E8(uint64_t a1)
{
  int v2 = AuditToken.processIdentifier.getter(a1);
  *(_DWORD *)(v1 + 92) = v2;
  uint64_t v3 = (void *)swift_task_alloc(dword_10010E47C);
  *(void *)(v1 + 6sub_100006F7C(v0 + 4) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10009CA44;
  return sub_10009BCE4(v2);
}

uint64_t sub_10009CA44(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(_BYTE *)(*(void *)v1 + 96LL) = a1;
  swift_task_dealloc(v2);
  return sub_10000BD98();
}

uint64_t sub_10009CA9C()
{
  if (*(_BYTE *)(v1 + 96) == 1)
  {
    Assertion.DaemonRep.receivedFromPID(_:)(*(unsigned int *)(v1 + 92));
    uint64_t v2 = (void *)swift_task_alloc(dword_10010B77C);
    *(void *)(v1 + 72) = v2;
    *uint64_t v2 = v1;
    v2[1] = sub_10009CC60;
    return sub_10000CF84(*(void *)(v1 + 56));
  }

  else
  {
    if (qword_10010B0F0 != -1) {
      swift_once(&qword_10010B0F0, sub_10009BB48);
    }
    uint64_t v4 = sub_10000BF6C();
    sub_10003CE68(v4, (uint64_t)qword_10010E438);
    os_log_type_t v5 = sub_100022604();
    if (os_log_type_enabled(v0, v5))
    {
      int v6 = *(_DWORD *)(v1 + 92);
      uint64_t v7 = (uint8_t *)sub_10000BCF4(8LL);
      *(_DWORD *)uint64_t v7 = 67109120;
      *(_DWORD *)(v1 + 88) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 92, v7 + 4);
      _os_log_impl((void *)&_mh_execute_header, v0, v5, "Process %d denied to hold assertion", v7, 8u);
      sub_10000BCC4((uint64_t)v7);
    }

    uint64_t v8 = type metadata accessor for ModelManagerError(0LL);
    unint64_t v9 = sub_10009CDF8();
    swift_allocError(v8, v9, 0LL, 0LL);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  enum case for ModelManagerError.deniedAssertionBySystem(_:),  v8);
    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_task_dealloc(*(void *)(v1 + 56));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_10009CC60()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8Hasher.init(_seed:)(v0, 0LL) = v0;
  swift_task_dealloc(v2);
  return sub_10000BCD0();
}

uint64_t sub_10009CCBC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v1, *(void *)(v0 + 40));
  swift_task_dealloc(v1);
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009CCFC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009CD38()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_10009CD4C, v0);
}

uint64_t sub_10009CD4C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 152LL);
  *(void *)(v0 + 2sub_100006F7C(v0 + 4) = v1;
  return sub_10000C088((uint64_t)sub_10009CD64, v1);
}

uint64_t sub_10009CD64()
{
  uint64_t v1 = sub_100010CC4();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10009CD94()
{
  return v0;
}

uint64_t sub_10009CDC0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AssertionRequestDispatcher()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd26AssertionRequestDispatcher);
}

unint64_t sub_10009CDF8()
{
  unint64_t result = qword_10010B410;
  if (!qword_10010B410)
  {
    uint64_t v1 = type metadata accessor for ModelManagerError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ModelManagerError, v1);
    atomic_store(result, (unint64_t *)&qword_10010B410);
  }

  return result;
}

uint64_t sub_10009CE38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003B20(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_10009CE7C()
{
  unint64_t result = qword_10010E550;
  if (!qword_10010E550)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10010E550);
  }

  return result;
}

uint64_t sub_10009CEB8(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v3 + ++*(void *)(v0 + 16) = v4;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3 + 20, a1 + 1);
}

void sub_10009CED4(uint64_t a1, uint64_t a2, ...)
{
}

uint64_t sub_10009CEE4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10009CEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v4 + 20, a3);
}

BOOL sub_10009CF08()
{
  v0._countAndFlagsBits = 0x6E49656C7070412FLL;
  v0._object = (void *)0xEF2F6C616E726574LL;
  return String.hasPrefix(_:)(v0);
}

BOOL sub_10009CF3C()
{
  v0._countAndFlagsBits = 0x636F6C2F7273752FLL;
  v0._object = (void *)0xEF2F6E69622F6C61LL;
  return String.hasPrefix(_:)(v0);
}

uint64_t sub_10009CF68(uint64_t a1)
{
  *(void *)(v2 + ++*(void *)(v0 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v2 + 24, v3);
}

uint64_t sub_10009CF80()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_10009CF8C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10009CFA8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, 0x6C616E7265746E49LL, 0xE800000000000000LL, 0LL);
}

uint64_t sub_10009CFCC()
{
  return swift_arrayDestroy(v0, 1LL);
}

BOOL sub_10009CFE0()
{
  v0._countAndFlagsBits = 0x747365746378LL;
  v0._object = (void *)0xE600000000000000LL;
  return String.hasSuffix(_:)(v0);
}

uint64_t sub_10009D000()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_10009D00C()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10009D018(uint64_t a1)
{
  *(void *)(v2 + ++*(void *)(v0 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v3, v4);
}

uint64_t sub_10009D030( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *uint64_t v10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, v11, a10);
}

uint64_t sub_10009D048(uint64_t a1, uint64_t a2)
{
  return StringProtocol.contains<A>(_:)(v2, a2, a2, v3, v3);
}

uint64_t sub_10009D060(uint64_t a1, uint64_t a2)
{
  return StringProtocol.contains<A>(_:)(v2, a2, a2, v3, v3);
}

uint64_t sub_10009D078()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10009D090()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10009D09C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10009D0B0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10009D0C4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10009D0D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10009D0EC()
{
  *(void *)(v1 + 2sub_100006F7C(v0 + 4) = v0;
  *(void *)(v1 + ++*(void *)(v0 + 16) = v2;
}

BOOL sub_10009D108(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

unint64_t sub_10009D118@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 256) = v2;
  *(void *)(v1 + 26sub_100006F7C(v0 + 4) = (a1 - 32) | 0x8000000000000000LL;
  return sub_10009CE7C();
}

uint64_t sub_10009D128(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(_BYTE *)(v2 + ++*(void *)(v0 + 16) = 0;
  return isFeatureEnabled(_:)(v1);
}

void sub_10009D138()
{
}

uint64_t sub_10009D144()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10009D150()
{
  return sub_100006F7C(v0);
}

uint64_t sub_10009D15C()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_10009D168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = sub_10009F274();
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(v9);
  sub_100030A28();
  __chkstk_darwin(v10);
  uint64_t v11 = sub_10009F204();
  if (sub_1000060B4(v11, v12, v13) == 1)
  {
    sub_10009F1C0(a1);
    uint64_t v14 = sub_100049B78();
    sub_1000B33BC(v14, v15, v16);
    sub_10000C1E0();
    return sub_10009F1C0(v3);
  }

  else
  {
    sub_10004DE14(a1, v4);
    sub_100096760(v4, a2, a3);
    return sub_10000C1E0();
  }

void sub_10009D234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_10009F274();
  uint64_t v9 = type metadata accessor for Policy(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_1000060B4(a1, 1LL, v9) == 1)
  {
    sub_10009F1C0(a1);
    uint64_t v13 = sub_100049B78();
    sub_1000B3474(v13, v14, v15);
    sub_10000C1E0();
    sub_10009F1C0(v3);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    sub_10009676C((uint64_t)v12, a2, a3);
    sub_10000C1E0();
  }

  sub_100022108();
}

uint64_t sub_10009D324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000070EC((__int128 *)a1, (uint64_t)v9);
    sub_100096858(v9, a2, a3);
    return sub_10000C1E0();
  }

  else
  {
    sub_10009F190(a1, &qword_10010C008);
    uint64_t v6 = sub_100049B78();
    sub_1000B3528(v6, v7, v8);
    sub_10000C1E0();
    return sub_10009F190((uint64_t)v9, &qword_10010C008);
  }

void sub_10009D3A8(uint64_t a1)
{
  os_log_type_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for RequestPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = sub_10009F204();
  if (sub_1000060B4(v8, v9, v6) == 1)
  {
    sub_10009F190(a1, &qword_10010CF90);
    sub_1000B361C((uint64_t)v5);
    uint64_t v10 = sub_100003B20(&qword_10010B408);
    sub_1000220F4(v10);
    sub_10009F190((uint64_t)v5, &qword_10010CF90);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, a1, v6);
    sub_1000968A8();
    uint64_t v11 = sub_100003B20(&qword_10010B408);
    sub_1000220F4(v11);
  }

  sub_100022108();
}

uint64_t sub_10009D4AC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010E558);
  sub_100003BA0(v0, (uint64_t)qword_10010E558);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

double sub_10009D518()
{
  uint64_t v0 = sub_100003B20(&qword_10010E6D8);
  uint64_t v1 = sub_100007460(v0, 48LL);
  *(void *)&double result = 1LL;
  *(_OWORD *)(v1 + ++*(void *)(v0 + 16) = xmmword_1000D8890;
  *(void *)(v1 + 32) = &type metadata for AssetTransitionDelayTrial;
  *(void *)(v1 + 40) = &off_1001048A0;
  qword_1001100B0 = v1;
  return result;
}

uint64_t sub_10009D564()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_10009D578, v0);
}

uint64_t sub_10009D578()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 16) + 200LL);
  *(void *)(v0 + 2sub_100006F7C(v0 + 4) = v1;
  uint64_t v2 = v1[2];
  *(void *)(v0 + 32) = v2;
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(void *)(v0 + 40) = 0LL;
  uint64_t v3 = v1[4];
  *(void *)(v0 + 48) = v3;
  uint64_t v4 = v1[5];
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = dword_10010E5A4;
  swift_bridgeObjectRetain(v1);
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10009D61C;
  return sub_10009D918(v3, v4);
}

uint64_t sub_10009D61C()
{
  return sub_10000BD98();
}

uint64_t sub_10009D654()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10000729C(v3 + 14, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  uint64_t v8 = v7;
  void v0[9] = v7;
  uint64_t v9 = (void *)sub_100007460((uint64_t)&unk_100104948, 40LL);
  v0[10] = v9;
  __int128 v9[2] = v3;
  v9[3] = v1;
  v9[4] = v2;
  uint64_t v10 = *(int **)(v5 + 32);
  uint64_t v11 = v10[1];
  uint64_t v14 = (int *)((char *)v10 + *v10);
  swift_retain(v3);
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v0[11] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10009D74C;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *, uint64_t, uint64_t))v14)( v6,  v8,  &unk_10010E6D0,  v9,  v4,  v5);
}

uint64_t sub_10009D74C()
{
  return sub_10000BF5C();
}

uint64_t sub_10009D794()
{
  uint64_t v1 = *(void *)(v0 + 40) + 1LL;
  if (v1 == *(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 24));
    return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    *(void *)(v0 + 40) = v1;
    uint64_t v3 = *(void *)(v0 + 24) + 16 * v1;
    *(void *)(v0 + 48) = *(void *)(v3 + 32);
    *(void *)(v0 + 56) = *(void *)(v3 + 40);
    uint64_t v4 = (void *)swift_task_alloc(dword_10010E5A4);
    *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v4;
    void *v4 = v0;
    v4[1] = sub_10009D61C;
    uint64_t v5 = sub_100049B78();
    return sub_10009D918(v5, v6);
  }

uint64_t sub_10009D828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10009D844, 0LL, 0LL);
}

uint64_t sub_10009D844()
{
  v0[5] = _OSActivity.__allocating_init(_:)("Trial Update", 12LL, 2LL);
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_10010E5A4);
  v0[6] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_10009D8B4;
  uint64_t v2 = sub_1000306EC(v0[3]);
  return sub_10009D918(v2, v3);
}

uint64_t sub_10009D8B4()
{
  return sub_10000BD98();
}

uint64_t sub_10009D8EC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009D918(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10000C088((uint64_t)sub_10009D930, v2);
}

uint64_t sub_10009D930()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = sub_100007460((uint64_t)&unk_100104920, 40LL);
  *(void *)(v0 + 40) = v2;
  *(void *)(v2 + ++*(void *)(v0 + 16) = v1;
  *(_OWORD *)(v2 + 2sub_100006F7C(v0 + 4) = *(_OWORD *)(v0 + 16);
  uint64_t v3 = unk_10010B864;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010B860 + dword_10010B860);
  swift_retain(v1);
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 48) = v4;
  void *v4 = v0;
  v4[1] = sub_10009D9D4;
  return v6((uint64_t)v6, (uint64_t)&unk_10010E6B0, v2);
}

uint64_t sub_10009D9D4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10000BCE4(*(void *)(v0 + 48));
  sub_100021E70();
  return sub_100021BCC((uint64_t)sub_10000C06C, v1, 0LL);
}

uint64_t sub_10009DA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[5] = a2;
  uint64_t v6 = sub_100003B20(&qword_10010E6B8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B728) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v4[12] = swift_task_alloc(v7);
  v4[13] = swift_task_alloc(v7);
  v4[14] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Policy(0LL);
  v4[15] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[16] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[17] = swift_task_alloc(v10);
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  return swift_task_switch(sub_10009DB1C, a2, 0LL);
}

uint64_t sub_10009DB1C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = (void *)v0[5];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10000729C(v3 + 14, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v2, v1);
  uint64_t v8 = v7;
  v0[20] = v7;
  uint64_t v9 = *(int **)(v5 + 8);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  unint64_t v10 = (void *)swift_task_alloc(v9[1]);
  v0[21] = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_10009DBCC;
  return v12(v6, v8, v4, v5);
}

uint64_t sub_10009DBCC(char a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 168LL));
  sub_10000C1E0();
  if ((a1 & 1) != 0)
  {
    uint64_t v5 = v3[5];
    uint64_t v6 = *(int **)(v3[7] + 32LL);
    uint64_t v12 = (int *)((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc(v6[1]);
    v3[22] = v7;
    *uint64_t v7 = v4;
    v7[1] = sub_10009DCAC;
    return ((uint64_t (*)(void, uint64_t))v12)(v3[14], v5 + 112);
  }

  else
  {
    uint64_t v9 = (void *)swift_task_alloc(dword_10010E5B4);
    v3[28] = v9;
    *uint64_t v9 = v4;
    v9[1] = sub_10009E250;
    uint64_t v10 = sub_1000306EC(v3[6]);
    return sub_10009EB24(v10, v11);
  }

uint64_t sub_10009DCAC()
{
  return sub_10000BD98();
}

uint64_t sub_10009DCE4()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  if (sub_10009F2B0() != 1)
  {
    uint64_t v5 = v0[19];
    uint64_t v56 = v0[18];
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[13];
    uint64_t v9 = v0[6];
    uint64_t v8 = v0[7];
    uint64_t v10 = v0[5];
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v54(v5, v2, v1);
    uint64_t v55 = *(uint64_t (**)(void))(v8 + 8);
    uint64_t v11 = ((uint64_t (*)(uint64_t, uint64_t))v55)(v9, v8);
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t *)(v10 + 208);
    sub_10000BE64(v10 + 208, (uint64_t)(v0 + 2), 0LL);
    uint64_t v15 = *(void *)(v10 + 208);
    swift_bridgeObjectRetain(v15);
    sub_10000FAE0(v11, v13, v15);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v13);
    LODWORD(v11) = sub_1000060B4(v7, 1LL, v1);
    sub_10009F190(v7, &qword_10010B728);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v16(v56, v5, v1);
    uint64_t v17 = v0[18];
    if ((_DWORD)v11 == 1)
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0[16] + 8LL);
      v18(v0[18], v0[15]);
LABEL_12:
      v0[26] = v18;
      uint64_t v47 = (void *)swift_task_alloc(dword_10010E5AC);
      v0[27] = v47;
      *uint64_t v47 = v0;
      v47[1] = sub_10009E1A4;
      sub_10009F1F0();
      sub_100030544();
      return sub_10009E2B8(v48, v49, v50);
    }

    uint64_t v19 = v0[15];
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[12];
    uint64_t v22 = v0[9];
    uint64_t v57 = v0[8];
    uint64_t v23 = v55();
    uint64_t v25 = v24;
    uint64_t v26 = *v14;
    swift_bridgeObjectRetain(v26);
    sub_10000FAE0(v23, v25, v26);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v25);
    v16(v20, v17, v19);
    sub_100083478(v20);
    uint64_t v27 = v22 + *(int *)(v57 + 48);
    sub_100021138(v21, v22);
    sub_100021138(v20, v27);
    if (sub_1000060B4(v22, 1LL, v19) == 1)
    {
      uint64_t v28 = v0[18];
      uint64_t v29 = v0[15];
      uint64_t v30 = v0[16];
      uint64_t v31 = v0[12];
      sub_10009F1C0(v0[11]);
      sub_10009F1C0(v31);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v18(v28, v29);
      if (sub_100022C64(v27) == 1)
      {
        sub_10009F190(v0[9], &qword_10010B728);
        goto LABEL_12;
      }
    }

    else
    {
      sub_100021138(v0[9], v0[10]);
      int v32 = sub_10009F2B0();
      uint64_t v33 = v0[18];
      if (v32 != 1)
      {
        uint64_t v39 = v0[16];
        uint64_t v38 = v0[17];
        uint64_t v40 = v0[15];
        uint64_t v42 = v0[11];
        uint64_t v41 = v0[12];
        uint64_t v44 = v0[9];
        uint64_t v43 = v0[10];
        v54(v38, v27, v40);
        uint64_t v45 = sub_10009F0F0( &qword_10010E6C0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Policy,  (uint64_t)&protocol conformance descriptor for Policy);
        char v46 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v38, v40, v45);
        uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        sub_10009F2DC(v38);
        sub_10009F2D4(v42);
        sub_10009F2D4(v41);
        sub_10009F2DC(v33);
        sub_10009F2DC(v43);
        sub_10009F2D4(v44);
        if ((v46 & 1) != 0) {
          goto LABEL_12;
        }
LABEL_13:
        v0[24] = v18;
        uint64_t v3 = (void *)swift_task_alloc(dword_10010E5B4);
        uint64_t v4 = sub_10009E11C;
        v0[25] = v3;
        goto LABEL_14;
      }

      uint64_t v34 = v0[15];
      uint64_t v35 = v0[16];
      uint64_t v36 = v0[12];
      uint64_t v37 = v0[10];
      sub_10009F1C0(v0[11]);
      sub_10009F1C0(v36);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v18(v33, v34);
      v18(v37, v34);
    }

    sub_10009F190(v0[9], &qword_10010E6B8);
    goto LABEL_13;
  }

  sub_10009F190(v2, &qword_10010B728);
  uint64_t v3 = (void *)swift_task_alloc(dword_10010E5B4);
  uint64_t v4 = sub_10009E0B4;
  v0[23] = v3;
LABEL_14:
  *uint64_t v3 = v0;
  v3[1] = v4;
  sub_10009F1F0();
  sub_100030544();
  return sub_10009EB24(v52, v53);
}

uint64_t sub_10009E0B4()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_10000BE20(*(void *)(v3 + 184), &v3);
  sub_10009F1D8();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10009E11C()
{
  return sub_10000BD98();
}

uint64_t sub_10009E154()
{
  v0[26] = v0[24];
  uint64_t v1 = (void *)swift_task_alloc(dword_10010E5AC);
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009E1A4;
  uint64_t v2 = sub_10009F1F0();
  return sub_10009E2B8(v2, v3, v4);
}

uint64_t sub_10009E1A4()
{
  return sub_10000BD98();
}

uint64_t sub_10009E1DC()
{
  return sub_100082D20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009E250()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_10000BE20(*(void *)(v3 + 224), &v3);
  sub_10009F1D8();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10009E2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[16] = a3;
  v5[17] = v4;
  v5[14] = a1;
  v5[15] = a2;
  uint64_t v6 = sub_100003B20(&qword_10010B228);
  v5[18] = sub_100021CC4(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for Assertion.DaemonRep(0LL);
  v5[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[20] = v8;
  v5[21] = sub_100021CC4(v8);
  uint64_t v9 = sub_100003B20(&qword_10010B728);
  v5[22] = sub_10009F224(v9);
  v5[23] = swift_task_alloc(v3);
  sub_100021C90();
  return sub_100021BCC(v10, v11, v12);
}

uint64_t sub_10009E340()
{
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void (**)(void))(*(void *)(v0 + 120) + 8LL);
  *(void *)(v0 + 192) = v6;
  uint64_t v7 = v3;
  v6();
  uint64_t v8 = sub_10009F2C0();
  sub_10000BE64(v8, v0 + 16, 0LL);
  uint64_t v9 = *(void *)(v5 + 208);
  swift_bridgeObjectRetain(v9);
  sub_10000FAE0(v7, v1, v9);
  sub_10000C1E0();
  swift_bridgeObjectRelease(v1);
  uint64_t v10 = type metadata accessor for Policy(0LL);
  *(void *)(v0 + 200) = v10;
  LODWORD(v7) = sub_1000060B4(v4, 1LL, v10);
  sub_10009F190(v4, &qword_10010B728);
  if ((_DWORD)v7 == 1)
  {
    if (qword_10010B0F8 != -1) {
      swift_once(&qword_10010B0F8, sub_10009D4AC);
    }
    uint64_t v41 = v2;
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100003BA0(v11, (uint64_t)qword_10010E558);
    *(void *)(v0 + 208) = v12;
    uint64_t v13 = (void *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (sub_10009F290(v14))
    {
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v38 = *(void *)(v0 + 120);
      uint64_t v16 = sub_10000BCF4(12LL);
      uint64_t v17 = sub_10000BCF4(32LL);
      uint64_t v42 = v17;
      sub_10009F310(4.8149e-34);
      uint64_t v18 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v15, v38);
      sub_100015EF8(v18, v19, &v42);
      *(void *)(v0 + 10sub_100006F7C(v0 + 4) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      sub_10000BD28();
      sub_10009F23C((void *)&_mh_execute_header, v21, v22, "Enabling Trial %s");
      sub_100021F38(v17);
      sub_10000BCC4(v17);
      sub_10000BCC4(v16);
    }

    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v0 + 176);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v39 = v26;
    uint64_t v40 = *(void *)(v0 + 120);
    uint64_t v28 = ((uint64_t (*)(uint64_t))v23)(v27);
    uint64_t v36 = v29;
    uint64_t v37 = v28;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v30(v24, v26, v10);
    sub_100083478(v24);
    sub_10000BE64(v41, v0 + 40, 33LL);
    sub_10009D234(v24, v37, v36);
    swift_endAccess();
    sub_10000729C((void *)(v25 + 152), *(void *)(v25 + 176));
    uint64_t v31 = ((uint64_t (*)(uint64_t, uint64_t))v23)(v27, v40);
    uint64_t v33 = v32;
    *(void *)(v0 + 2++*(void *)(v0 + 16) = v32;
    v30(v24, v39, v10);
    sub_100083478(v24);
    uint64_t v34 = (void *)swift_task_alloc(dword_10010B81C);
    *(void *)(v0 + 22sub_100006F7C(v0 + 4) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_10009E640;
    return sub_10000CDDC(v31, v33, *(void *)(v0 + 176));
  }

  else
  {
    sub_10009F1C8();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10009E640()
{
  uint64_t v1 = sub_10000BD28();
  sub_10009F2E4(v1, &qword_10010B728);
  sub_1000306A4();
  return sub_10000BF5C();
}

uint64_t sub_10009E690()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = sub_10009F324();
  uint64_t v7 = v6;
  uint64_t v8 = sub_10009F324();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  Assertion.DaemonRep.init(policy:description:id:)(v5, v7, v8, v10, v1);
  sub_10000729C((void *)(v2 + 152), *(void *)(v2 + 176));
  uint64_t v11 = (void *)swift_task_alloc(dword_10010B77C);
  v0[29] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10009E768;
  uint64_t v12 = sub_1000306EC(v0[21]);
  return sub_10000CF84(v12);
}

uint64_t sub_10009E768()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 232);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10009E800;
  }
  else {
    uint64_t v4 = sub_10009E7C8;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v2 + 136), 0LL);
}

uint64_t sub_10009E7C8()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009E800()
{
  uint64_t v1 = v0[30];
  sub_10009F2A0();
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[30];
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v0[24];
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[15];
    uint64_t v9 = sub_10000BCF4(22LL);
    uint64_t v10 = (void *)sub_10000BCF4(8LL);
    uint64_t v22 = sub_10000BCF4(32LL);
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = v6(v7, v8);
    sub_100015EF8(v11, v12, &v23);
    v0[11] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
    sub_10000BD28();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v5);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[12] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
    *uint64_t v10 = v14;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to acquire %s assertion: %@", (uint8_t *)v9, 0x16u);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v10);
    sub_10000BCC4((uint64_t)v10);
    sub_100021F38(v22);
    sub_10000BCC4(v22);
    sub_10000BCC4(v9);
  }

  else
  {
    uint64_t v15 = v0[30];
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  sub_10009F250(v0[17]);
  v0[31] = v16;
  sub_10009F2EC();
  uint64_t v17 = (void *)swift_task_alloc(dword_10010B81C);
  v0[32] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10009EA10;
  sub_100030544();
  return sub_10000CDDC(v18, v19, v20);
}

uint64_t sub_10009EA10()
{
  uint64_t v1 = sub_10000BD28();
  sub_10009F2E4(v1, &qword_10010B728);
  sub_1000306A4();
  return sub_10000BF5C();
}

uint64_t sub_10009EA60()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 136) + 208LL;
  uint64_t v5 = (*(uint64_t (**)(void))(v0 + 192))();
  uint64_t v7 = v6;
  sub_100005FB0(v3, 1LL, 1LL, v2);
  sub_10000BE64(v4, v0 + 64, 33LL);
  sub_10009D234(v3, v5, v7);
  swift_endAccess();
  swift_errorRelease(v1);
  sub_10009F1C8();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009EB24(uint64_t a1, uint64_t a2)
{
  v4[10] = a2;
  v4[11] = v3;
  v4[9] = a1;
  uint64_t v5 = sub_100003B20(&qword_10010B228);
  v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[13] = v6;
  v4[14] = sub_100021CC4(v6);
  uint64_t v7 = sub_100003B20(&qword_10010B728);
  v4[15] = sub_10009F224(v7);
  v4[16] = swift_task_alloc(v2);
  sub_100021C90();
  return sub_100021BCC(v8, v9, v10);
}

uint64_t sub_10009EB98()
{
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void (**)(void))(*(void *)(v0 + 80) + 8LL);
  *(void *)(v0 + 136) = v6;
  uint64_t v7 = v3;
  v6();
  sub_10009F2C0();
  sub_1000306A4();
  sub_10000BE64(v8, v9, v10);
  uint64_t v11 = *(void *)(v5 + 208);
  swift_bridgeObjectRetain(v11);
  sub_10000FAE0(v7, v1, v11);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v1);
  uint64_t v12 = type metadata accessor for Policy(0LL);
  *(void *)(v0 + 14sub_100006F7C(v0 + 4) = v12;
  LODWORD(v7) = sub_100022C64(v4);
  sub_10009F190(v4, &qword_10010B728);
  if ((_DWORD)v7 == 1)
  {
    swift_task_dealloc(*(void *)(v0 + 128));
    sub_10000C140();
    sub_10000BFE4();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (qword_10010B0F8 != -1) {
      swift_once(&qword_10010B0F8, sub_10009D4AC);
    }
    uint64_t v36 = v2;
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_100003BA0(v14, (uint64_t)qword_10010E558);
    uint64_t v16 = (void *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (sub_10009F290(v17))
    {
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v35 = *(void *)(v0 + 80);
      uint64_t v19 = sub_10000BCF4(12LL);
      uint64_t v20 = sub_10000BCF4(32LL);
      uint64_t v37 = v20;
      sub_10009F310(4.8149e-34);
      uint64_t v21 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v18, v35);
      sub_100015EF8(v21, v22, &v37);
      *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      sub_10000BD28();
      sub_10009F23C((void *)&_mh_execute_header, v24, v25, "Disabling Trial %s");
      sub_100021F38(v20);
      sub_10000BCC4(v20);
      sub_10000BCC4(v19);
    }

    uint64_t v26 = *(void *)(v0 + 120);
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v27 = *(void *)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 72);
    uint64_t v30 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v29, v28);
    uint64_t v32 = v31;
    sub_100005FB0(v26, 1LL, 1LL, v12);
    sub_10000BE64(v36, v0 + 40, 33LL);
    sub_10009D234(v26, v30, v32);
    swift_endAccess();
    sub_10000729C((void *)(v27 + 152), *(void *)(v27 + 176));
    (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v29, v28);
    uint64_t v33 = (void *)swift_task_alloc(dword_10010B75C);
    *(void *)(v0 + 152) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_10009EE68;
    uint64_t v34 = sub_1000306EC(*(void *)(v0 + 112));
    return sub_10000D140(v34);
  }

uint64_t sub_10009EE68()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  sub_10000BCE4(v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000306A4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10009EEC0()
{
  uint64_t v1 = sub_10009F250(v0[11]);
  uint64_t v3 = v2;
  v0[20] = v2;
  sub_10009F2EC();
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_10010B81C);
  v0[21] = (uint64_t)v4;
  void *v4 = v0;
  v4[1] = (uint64_t *)sub_10009EF44;
  return sub_10000CDDC(v1, v3, v0[15]);
}

uint64_t sub_10009EF44()
{
  uint64_t v1 = *v0;
  uint64_t v5 = v1;
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v1 + 168), &v5);
  uint64_t v3 = sub_10000BD28();
  sub_10009F2E4(v3, &qword_10010B728);
  swift_task_dealloc(*(void *)(v1 + 128));
  sub_10000C140();
  sub_10000BFE4();
  return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
}

void *sub_10009EFA8()
{
  return v0;
}

uint64_t sub_10009EFEC()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TrialManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd12TrialManager);
}

uint64_t sub_10009F024(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10009F0F0( &qword_10010B868,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for TrialManager,  (uint64_t)&unk_1000DA1F0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009F060()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10009F084(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10010E6AC);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100023AD0;
  return sub_10009DA18(a1, v4, v5, v6);
}

uint64_t sub_10009F0F0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10009F130()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10010E6CC);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100023C40;
  return sub_10009D828(v2, v3, v4);
}

uint64_t sub_10009F190(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003B20(a2);
  sub_1000220F4(v3);
  return a1;
}

uint64_t sub_10009F1C0(uint64_t a1)
{
  return sub_10009F190(a1, v1);
}

uint64_t sub_10009F1C8()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

uint64_t sub_10009F1D8()
{
  return swift_task_dealloc(*(void *)(v0 + 152));
}

uint64_t sub_10009F1F0()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_10009F204()
{
  return v0;
}

uint64_t sub_10009F224(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_10009F23C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10009F250@<X0>(uint64_t a1@<X8>)
{
  return v3(v1, v2);
}

uint64_t sub_10009F274()
{
  return 0LL;
}

BOOL sub_10009F290(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10009F2A0()
{
  return (*(uint64_t (**)(void, void))(v0[20] + 8LL))(v0[21], v0[19]);
}

uint64_t sub_10009F2B0()
{
  return sub_1000060B4(v1, 1LL, v0);
}

uint64_t sub_10009F2C0()
{
  return v0 + 208;
}

uint64_t sub_10009F2D4(uint64_t a1)
{
  return sub_10009F190(a1, v1);
}

uint64_t sub_10009F2DC(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10009F2E4(uint64_t a1, uint64_t *a2)
{
  return sub_10009F190(v2, a2);
}

uint64_t sub_10009F2EC()
{
  return sub_100005FB0(v1, 1LL, 1LL, v0);
}

void sub_10009F310(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_10009F324()
{
  return v2(v0, v1);
}

uint64_t destroy for StateDumpManager(void *a1)
{
  return swift_release(a1[6]);
}

uint64_t *initializeWithCopy for StateDumpManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  uint64_t v9 = a2[6];
  a1[6] = v9;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for StateDumpManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  uint64_t v12 = a2[4];
  uint64_t v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  uint64_t v14 = a2[5];
  uint64_t v15 = a1[5];
  a1[5] = v14;
  swift_retain(v14);
  swift_release(v15);
  uint64_t v16 = a2[6];
  uint64_t v17 = a1[6];
  a1[6] = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

__n128 initializeWithTake for StateDumpManager(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for StateDumpManager(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  swift_release(a1[4]);
  uint64_t v6 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_release(v6);
  uint64_t v7 = a1[6];
  a1[6] = *(void *)(a2 + 48);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateDumpManager(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 56))
    {
      LODWORD(sub_10002F8E0(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10002F8E0(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateDumpManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StateDumpManager()
{
  return &type metadata for StateDumpManager;
}

uint64_t sub_10009F614(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v29 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v28 = (uint64_t)&v25 - v6;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v25 = v1;
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100016BD0(0, v7, 0);
  uint64_t result = sub_100020E24(a1);
  uint64_t v10 = result;
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  uint64_t v26 = a1;
  uint64_t v27 = a1 + 56;
  while ((v10 & 0x8000000000000000LL) == 0 && v10 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12) {
      goto LABEL_16;
    }
    uint64_t v15 = v28;
    sub_1000A2844(*(void *)(a1 + 48) + *(void *)(v30 + 72) * v10, v28, type metadata accessor for ModelCatalogAsset);
    uint64_t v16 = v15;
    uint64_t v17 = v29;
    sub_10000B7B0(v16, (uint64_t)v29);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    swift_bridgeObjectRetain(v19);
    sub_1000A2888((uint64_t)v17, type metadata accessor for ModelCatalogAsset);
    uint64_t v8 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
    {
      sub_100016BD0(0, v8[2] + 1LL, 1);
      uint64_t v8 = v31;
    }

    unint64_t v21 = v8[2];
    unint64_t v20 = v8[3];
    if (v21 >= v20 >> 1)
    {
      sub_100016BD0(v20 > 1, v21 + 1, 1);
      uint64_t v8 = v31;
    }

    void v8[2] = v21 + 1;
    uint64_t v22 = &v8[2 * v21];
    v22[4] = v18;
    v22[5] = v19;
    a1 = v26;
    uint64_t result = sub_100020D3C(v10, v12, v14 & 1, v26);
    uint64_t v10 = result;
    uint64_t v12 = v23;
    char v14 = v24 & 1;
    if (!--v7)
    {
      sub_10000B830(result, v23, v24 & 1);
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_10009F84C(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = type metadata accessor for StateDump.AssetState(0LL);
  uint64_t v4 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = __CocoaSet.count.getter(v8);
    if (v9) {
      goto LABEL_6;
    }
LABEL_12:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_100016D10();
  if (v7)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = (void *)__CocoaSet.startIndex.getter(v10);
    char v17 = 1;
  }

  else
  {
    uint64_t result = (void *)sub_100020E24(a1);
    char v17 = v18 & 1;
  }

  uint64_t v47 = result;
  uint64_t v48 = v12;
  LOBYTE(v49) = v17;
  if (v9 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }

  else
  {
    uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    uint64_t v41 = a1;
    uint64_t v42 = v19;
    unint64_t v39 = a1 & 0xC000000000000001LL;
    uint64_t v40 = v6;
    do
    {
      sub_1000CF1C4( (uint64_t)v47,  v48,  v49,  a1,  v13,  v14,  v15,  v16,  v38[0],  v38[1],  v39,  (uint64_t)v40,  v41,  v42,  v43,  v44[0],  v44[1],  v45,  v46,  (uint64_t)v47,  v48,  v49,  v50,  (uint64_t)v51,  v52,  v53,  v54,  v55,  v56,  v57);
      swift_retain();
      sub_1000A1628();
      unint64_t v20 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
      {
        sub_100016D10();
        unint64_t v20 = v51;
      }

      unint64_t v21 = v20[2];
      if (v21 >= v20[3] >> 1)
      {
        sub_100016D10();
        unint64_t v20 = v51;
      }

      v20[2] = v21 + 1;
      uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v20 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                         + *(void *)(v4 + 72) * v21,
                           v6,
                           v43);
      uint64_t v51 = v20;
      if (v7)
      {
        if ((v49 & 1) == 0) {
          goto LABEL_32;
        }
        uint64_t v22 = __CocoaSet.Index.handleBitPattern.getter(v47, v48);
        if (v22) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v35 = sub_100003B20(&qword_10010C6A0);
        uint64_t v36 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v44, v35);
        __CocoaSet.formIndex(after:isUnique:)(v37, isUniquelyReferenced_nonNull_native, v42);
        v36(v44, 0LL);
      }

      else
      {
        uint64_t v24 = (uint64_t)v47;
        uint64_t v25 = v48;
        char v26 = v49;
        uint64_t v27 = v4;
        uint64_t v28 = sub_100020D3C(v47, v48, v49, a1);
        uint64_t v29 = a2;
        uint64_t v31 = v30;
        char v33 = v32;
        char v34 = v26;
        unint64_t v7 = v39;
        sub_10000B830(v24, v25, v34);
        uint64_t v47 = (void *)v28;
        uint64_t v48 = v31;
        uint64_t v4 = v27;
        a2 = v29;
        uint64_t v6 = v40;
        a1 = v41;
        LOBYTE(v49) = v33 & 1;
      }

      --v9;
    }

    while (v9);
    sub_10000B830((uint64_t)v47, v48, v49);
    swift_release(a2);
    return v51;
  }

  return result;
}

void *sub_10009FB28(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = type metadata accessor for StateDump.SessionState(0LL);
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = __CocoaSet.count.getter(v8);
    if (v9) {
      goto LABEL_6;
    }
LABEL_12:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v61 = _swiftEmptyArrayStorage;
  sub_100016D3C();
  if (v7)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = (void *)__CocoaSet.startIndex.getter(v10);
    char v17 = 1;
  }

  else
  {
    uint64_t result = (void *)sub_100020E24(a1);
    char v17 = v18 & 1;
  }

  uint64_t v57 = result;
  uint64_t v58 = v12;
  LOBYTE(v59) = v17;
  if (v9 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }

  else
  {
    uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    uint64_t v50 = a1;
    uint64_t v51 = v19;
    unint64_t v48 = a1 & 0xC000000000000001LL;
    uint64_t v49 = v6;
    do
    {
      sub_1000CF1E0( (uint64_t)v57,  v58,  v59,  a1,  v13,  v14,  v15,  v16,  v46,  v47,  v48,  (uint64_t)v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  (uint64_t)v57,  v58,  v59,  v60,  (uint64_t)v61,  v62,  v63,  v64,  v65,  v66,  v67);
      uint64_t v21 = v20;
      swift_retain();
      sub_1000A1944( v21,  a2,  v22,  v23,  v24,  v25,  v26,  v27,  v46,  v47,  v48,  (uint64_t)v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  (uint64_t)v57);
      uint64_t v28 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
      {
        sub_100016D3C();
        uint64_t v28 = v61;
      }

      unint64_t v29 = v28[2];
      if (v29 >= v28[3] >> 1)
      {
        sub_100016D3C();
        uint64_t v28 = v61;
      }

      v28[2] = v29 + 1;
      uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v28 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                         + *(void *)(v4 + 72) * v29,
                           v6,
                           v52);
      uint64_t v61 = v28;
      if (v7)
      {
        if ((v59 & 1) == 0) {
          goto LABEL_32;
        }
        uint64_t v30 = __CocoaSet.Index.handleBitPattern.getter(v57, v58);
        if (v30) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v43 = sub_100003B20(&qword_10010E708);
        uint64_t v44 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(&v53, v43);
        __CocoaSet.formIndex(after:isUnique:)(v45, isUniquelyReferenced_nonNull_native, v51);
        v44(&v53, 0LL);
      }

      else
      {
        uint64_t v32 = (uint64_t)v57;
        uint64_t v33 = v58;
        char v34 = v59;
        uint64_t v35 = v4;
        uint64_t v36 = sub_100020D3C(v57, v58, v59, a1);
        uint64_t v37 = a2;
        uint64_t v39 = v38;
        char v41 = v40;
        char v42 = v34;
        unint64_t v7 = v48;
        sub_10000B830(v32, v33, v42);
        uint64_t v57 = (void *)v36;
        uint64_t v58 = v39;
        uint64_t v4 = v35;
        a2 = v37;
        uint64_t v6 = v49;
        a1 = v50;
        LOBYTE(v59) = v41 & 1;
      }

      --v9;
    }

    while (v9);
    sub_10000B830((uint64_t)v57, v58, v59);
    swift_release(a2);
    return v61;
  }

  return result;
}

void *sub_10009FE04(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010B408);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v41 = (uint64_t)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v40 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v6 = __CocoaSet.count.getter(v5);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
  }

  uint64_t result = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_100016D94();
    if (v40)
    {
      if (a1 < 0) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t result = (void *)__CocoaSet.startIndex.getter(v8);
      char v14 = 1;
    }

    else
    {
      uint64_t result = (void *)sub_100020E24(a1);
      char v14 = v15 & 1;
    }

    uint64_t v45 = result;
    uint64_t v46 = v9;
    LOBYTE(v47) = v14;
    if (v6 < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
    }

    else
    {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
      if (a1 < 0) {
        uint64_t v16 = a1;
      }
      uint64_t v38 = v16;
      uint64_t v39 = a1;
      uint64_t v37 = v3;
      do
      {
        uint64_t v17 = (uint64_t)v45;
        uint64_t v18 = v46;
        uint64_t v19 = v47;
        sub_1000CF1FC( (uint64_t)v45,  v46,  v47,  a1,  v10,  v11,  v12,  v13,  v36[0],  v36[1],  v37,  v38,  v39,  v40,  v41,  v42[0],  v42[1],  v43,  v44,  (uint64_t)v45,  v46,  v47,  v48,  (uint64_t)v49,  v50,  v51,  v52,  v53,  v54,  v55);
        uint64_t v21 = v20;
        RequestMetadata.id.getter(v20);
        swift_release(v21);
        uint64_t v22 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_100016D94();
          uint64_t v22 = v49;
        }

        unint64_t v23 = v22[2];
        if (v23 >= v22[3] >> 1)
        {
          sub_100016D94();
          uint64_t v22 = v49;
        }

        v22[2] = v23 + 1;
        uint64_t result = (void *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))( (unint64_t)v22 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                           + *(void *)(v3 + 72) * v23,
                             v41,
                             v2);
        if (v40)
        {
          a1 = v39;
          if ((v19 & 1) == 0) {
            goto LABEL_33;
          }
          uint64_t v24 = __CocoaSet.Index.handleBitPattern.getter(v17, v18);
          if (v24) {
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
          }
          else {
            uint64_t isUniquelyReferenced_nonNull_native = 1LL;
          }
          uint64_t v33 = sub_100003B20(&qword_10010E6F8);
          char v34 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v42, v33);
          __CocoaSet.formIndex(after:isUnique:)(v35, isUniquelyReferenced_nonNull_native, v38);
          v34(v42, 0LL);
        }

        else
        {
          a1 = v39;
          uint64_t v26 = sub_100020D3C(v17, v18, v19, v39);
          uint64_t v28 = v27;
          uint64_t v29 = v2;
          char v31 = v30;
          sub_10000B830(v17, v18, v19);
          uint64_t v45 = (void *)v26;
          uint64_t v46 = v28;
          char v32 = v31 & 1;
          uint64_t v2 = v29;
          uint64_t v3 = v37;
          LOBYTE(v47) = v32;
        }

        --v6;
      }

      while (v6);
      sub_10000B830((uint64_t)v45, v46, v47);
      return v49;
    }
  }

  return result;
}

void *sub_1000A00D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  sub_10000C240();
  __chkstk_darwin(v5);
  sub_10000C120();
  uint64_t v8 = v7 - v6;
  type metadata accessor for StateDump.ExecutionGroupState(0LL);
  sub_10000C240();
  __chkstk_darwin(v9);
  sub_100095CF0();
  if (*(void *)(a3 + 16))
  {
    uint64_t v28 = v8;
    char v31 = _swiftEmptyArrayStorage;
    sub_100016DC0();
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = (unsigned __int8 *)(v10
                            + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
    swift_beginAccess( v10 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  v30,  0LL,  0LL);
    uint64_t v27 = *v11;
    uint64_t v12 = *((void *)v11 + 4);
    uint64_t v13 = *((void *)v11 + 5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))( v28,  v10 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id,  v26);
    uint64_t v14 = *(void *)(v10 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
    sub_10000C0F0();
    sub_100083500();
    sub_10002289C();
    sub_100022944();
    sub_100084314();
    sub_100083778();
    sub_1000224B4();
    sub_1000837AC();
    uint64_t v15 = sub_10009F614(v14);
    swift_bridgeObjectRelease(v14);
    v29[2] = Set.init(minimumCapacity:)( *(void *)(v15 + 16),  &type metadata for String,  &protocol witness table for String);
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v17 = (uint64_t *)(v15 + 40);
      do
      {
        uint64_t v18 = *(v17 - 1);
        uint64_t v19 = *v17;
        swift_bridgeObjectRetain(*v17);
        sub_100017AF4(v29, v18, v19);
        swift_bridgeObjectRelease(v29[1]);
        v17 += 2;
        --v16;
      }

      while (v16);
      sub_100022024();
    }

    else
    {
      sub_100022024();
    }

    sub_100083500();
    sub_1000CAE8C();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v12);
    sub_10002289C();
    sub_1000CAE8C();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(v13);
    v29[0] = v21;
    sub_1000CAB64(v23);
    sub_1000A04C4(v29[0]);
    sub_100022024();
    __asm { BR              X8 }
  }

  sub_100030B98();
  return _swiftEmptyArrayStorage;
}

void sub_1000A04C4(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v16 = sub_100003B20(&qword_10010B408);
  uint64_t v4 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v7)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_100016D94();
    if (v7 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v8 = 0LL;
    uint64_t v9 = v17;
    v14[1] = v2;
    unint64_t v15 = a1 & 0xC000000000000001LL;
    uint64_t v10 = a1;
    while (v7 != v8)
    {
      if (v15)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
        uint64_t v12 = v11;
      }

      else
      {
        uint64_t v12 = *(void *)(a1 + 8 * v8 + 32);
        uint64_t v11 = swift_retain();
      }

      RequestMetadata.id.getter(v11);
      swift_release(v12);
      uint64_t v17 = v9;
      unint64_t v2 = v9[2];
      if (v2 >= v9[3] >> 1)
      {
        sub_100016D94();
        uint64_t v9 = v17;
      }

      ++v8;
      __int128 v9[2] = v2 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v9 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v2,
        v6,
        v16);
      a1 = v10;
      if (v7 == v8) {
        return;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

uint64_t sub_1000A069C(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for StateDump.InferenceProviderState(0LL);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = sub_10002287C();
  v2[14] = sub_10002287C();
  uint64_t v4 = type metadata accessor for StateDump.ExecutionGroupsState(0LL);
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = sub_10002287C();
  v2[18] = sub_10002287C();
  uint64_t v5 = type metadata accessor for Policy(0LL);
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = sub_10002287C();
  uint64_t v6 = sub_10002287C();
  uint64_t v7 = *(void *)(v1 + 16);
  v2[22] = v6;
  v2[23] = v7;
  return sub_10000BCD0();
}

uint64_t sub_1000A075C()
{
  *(void *)(v0 + 192) = sub_100010CC4();
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000A0790()
{
  uint64_t v1 = v0[20];
  unint64_t v2 = (uint64_t *)v0[10];
  sub_10002FFE4(v0[23] + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy, (uint64_t)(v0 + 2));
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v0[25] = v3;
  sub_1000A2900(v3);
  uint64_t v4 = *v2;
  v0[26] = *v2;
  return sub_1000830E0((uint64_t)sub_1000A07FC, v4, 0LL);
}

uint64_t sub_1000A07FC()
{
  uint64_t v1 = v0[10];
  sub_1000A0D40();
  v0[27] = v2;
  v0[28] = *(void *)(v1 + 24);
  return sub_10000BCD0();
}

uint64_t sub_1000A083C()
{
  uint64_t v1 = v0[10];
  sub_1000A0D90();
  v0[29] = v2;
  v0[30] = *(void *)(v1 + 32);
  return sub_10000BCD0();
}

uint64_t sub_1000A087C()
{
  uint64_t v1 = v0[10];
  sub_1000A20C8();
  v0[31] = v2;
  sub_1000A2574();
  v0[32] = v3;
  sub_1000A25CC();
  v0[8] = _swiftEmptySetSingleton;
  uint64_t v4 = *(void *)(v1 + 8);
  v0[33] = v4;
  return swift_task_switch(sub_1000A08EC, v4, 0LL);
}

uint64_t sub_1000A08EC()
{
  *(void *)(v0 + 272) = sub_1000A0DE0();
  sub_10003CE0C();
  return sub_10000BD98();
}

void sub_1000A0920()
{
  uint64_t v1 = v0[34];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v8 = v0[34];
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100022944();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  v0[35] = v2;
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = v0[34];
      v0[36] = 0LL;
      if ((v3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
      }

      else
      {
        uint64_t v4 = *(void *)(v3 + 32);
        sub_10000C030();
      }

      v0[37] = v4;
      sub_10000C030();
      uint64_t v5 = (void *)sub_10002287C();
      v0[38] = v5;
      uint64_t v6 = sub_1000A2964(v5);
      sub_1000A0EFC(v6, v7);
    }
  }

  else
  {
    sub_1000A2978();
    v0[39] = *(void *)(v1 + 40);
    sub_10000BCD0();
  }

uint64_t sub_1000A0A04()
{
  return sub_10000BD98();
}

uint64_t sub_1000A0A4C()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[36] + 1LL;
  sub_1000193CC();
  __n128 v7 = swift_release(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v3, v4, v7);
  if (v6 == v2)
  {
    sub_1000A2978();
    uint64_t v8 = v0[13];
    v0[39] = v8;
    return swift_task_switch(sub_1000A0B54, v8, 0LL);
  }

  else
  {
    uint64_t v10 = v0[36] + 1LL;
    v0[36] = v10;
    uint64_t v11 = v0[34];
    if ((v11 & 0xC000000000000001LL) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 8 * v10 + 32);
      sub_10000C030();
    }

    v0[37] = v12;
    sub_10000C030();
    uint64_t v13 = (void *)sub_10002287C();
    v0[38] = v13;
    uint64_t v14 = sub_1000A2964(v13);
    return sub_1000A0EFC(v14, v15);
  }

uint64_t sub_1000A0B54()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v0[39] + 192LL);
  v0[40] = v2;
  v0[41] = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v2);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000A0B98()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_10002FFE4(v1 + 208, v0 + 40);
  uint64_t v2 = *(void *)(v1 + 208);
  *(void *)(v0 + 336) = v2;
  swift_bridgeObjectRetain(v2);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000A0BDC()
{
  uint64_t v13 = *(void *)(v0 + 320);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v15 = *(void *)(v0 + 232);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v12 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v18 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(*sub_10000729C( (void *)(*(void *)(v0 + 208)
                               + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog),
                      *(void *)(*(void *)(v0 + 208)
                                + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog
                                + 24))
                 + 112LL);
  v1(v2, v3, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v6, v8);
  StateDump.init(assertions:currentPolicy:assets:sessions:requests:runningRequests:executionGroups:inferenceProviders:disabledUseCases:trials:budget:)( v11,  v2,  v12,  v15,  v16,  v17,  v5,  *(void *)(v0 + 64),  v13,  v14,  v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v3, v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A0D40()
{
  uint64_t v1 = sub_100021EB0();
  sub_10009F84C(v1, v0);
  sub_1000A28F4();
  sub_100011840();
  sub_1000A28C4();
}

void sub_1000A0D90()
{
  uint64_t v1 = sub_100021EB0();
  sub_10009FB28(v1, v0);
  sub_1000A28F4();
  sub_100011968();
  sub_1000A28C4();
}

void *sub_1000A0DE0()
{
  uint64_t v0 = InferenceProviderManager.allConnections.getter();
  uint64_t v1 = v0;
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v0 + 16);
  if (v3)
  {
    uint64_t v4 = v0 + 32;
    do
    {
      sub_100021868(v4, (uint64_t)v17);
      sub_100021868((uint64_t)v17, (uint64_t)v15);
      uint64_t v5 = sub_100003B20(&qword_10010BB28);
      uint64_t v6 = type metadata accessor for InferenceProviderExtensionConnection(0LL);
      if ((swift_dynamicCast(&v16, v15, v5, v6, 6LL) & 1) == 0) {
        uint64_t v16 = 0LL;
      }
      uint64_t v7 = sub_100006F7C(v17);
      uint64_t v8 = v16;
      if (v16)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        unint64_t v10 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v10 >= v9 >> 1)
        {
          BOOL v12 = sub_1000A2984(v9);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v13, 1LL);
        }

        uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
        specialized Array._endMutation()(v11);
      }

      v4 += 40LL;
      --v3;
    }

    while (v3);
    uint64_t v2 = (void *)v18;
  }

  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_1000A0EFC(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  v2[10] = sub_100003B20(&qword_10010E6F0);
  v2[11] = sub_10002287C();
  v2[12] = sub_10002287C();
  v2[13] = sub_10002287C();
  v2[14] = sub_10002287C();
  v2[15] = sub_10002287C();
  v2[16] = sub_10002287C();
  v2[17] = sub_10002287C();
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest(0LL);
  v2[18] = active;
  v2[19] = *(void *)(active - 8);
  v2[20] = sub_10002287C();
  v2[21] = sub_10002287C();
  uint64_t v4 = type metadata accessor for RequestPriority(0LL);
  v2[22] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[23] = v5;
  _BYTE v2[24] = sub_100021CC4(v5);
  uint64_t v6 = sub_1000306E4();
  v2[25] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[26] = v7;
  v2[27] = sub_100021CC4(v7);
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_1000A0FE8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 72) + 120LL);
  if (v1) {
    unsigned int v2 = [v1 pid];
  }
  else {
    unsigned int v2 = -1;
  }
  *(_DWORD *)(v0 + 248) = v2;
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000A1034()
{
  return sub_10000BD98();
}

uint64_t sub_1000A1080()
{
  uint64_t v2 = *v1;
  *(void *)(v0 + 22sub_100006F7C(v0 + 4) = *v1;
  swift_bridgeObjectRetain(v2);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000A10D4()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v31 = v0[10];
    uint64_t v46 = _swiftEmptyArrayStorage;
    sub_100016DEC();
    uint64_t result = sub_1000A273C(v1);
    if ((result & 0x8000000000000000LL) == 0 && result < 1LL << *(_BYTE *)(v1 + 32))
    {
      uint64_t v5 = v1 + 64;
      uint64_t v43 = v0[23];
      uint64_t v29 = v1;
      char v30 = v0;
      uint64_t v27 = v1 + 64;
      uint64_t v28 = v0[19];
      while ((*(void *)(v5 + 8 * ((unint64_t)result >> 6)) & (1LL << result)) != 0)
      {
        if (v4 != *(_DWORD *)(v1 + 36)) {
          goto LABEL_22;
        }
        uint64_t v34 = 1LL << result;
        unint64_t v35 = (unint64_t)result >> 6;
        uint64_t v32 = v2;
        int v33 = v4;
        uint64_t v6 = v0[17];
        uint64_t v7 = v6 + *(int *)(v31 + 48);
        uint64_t v8 = v0[22];
        uint64_t v40 = v0[21];
        uint64_t v41 = v0[18];
        uint64_t v39 = v0[20];
        uint64_t v9 = v0[16];
        uint64_t v44 = v0[15];
        uint64_t v10 = v0[13];
        uint64_t v36 = v0[14];
        uint64_t v37 = v0[12];
        uint64_t v38 = v0[11];
        uint64_t v11 = *(void *)(v1 + 48);
        uint64_t v12 = result;
        uint64_t v13 = sub_100003B20(&qword_10010B408);
        uint64_t v45 = *(void *)(v13 - 8);
        sub_1000A28EC(v6, v11 + *(void *)(v45 + 72) * v12);
        uint64_t v42 = v12;
        sub_1000A28E4(v7, *(void *)(v1 + 56) + *(void *)(v43 + 72) * v12);
        sub_1000A28EC(v9, v6);
        sub_1000A28E4(v9 + *(int *)(v31 + 48), v7);
        sub_1000A27BC(v9, v44);
        sub_1000A2804(v6);
        uint64_t v14 = *(int *)(v31 + 48);
        uint64_t v15 = v36 + v14;
        uint64_t v16 = v44 + v14;
        sub_1000A28EC(v36, v44);
        sub_1000A28E4(v15, v16);
        uint64_t v17 = v10 + *(int *)(v31 + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v10, v36, v13);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v17, v15, v8);
        uint64_t v18 = v37 + *(int *)(v31 + 48);
        sub_1000A28EC(v37, v10);
        sub_1000A28E4(v18, v17);
        uint64_t v19 = v38 + *(int *)(v31 + 48);
        sub_1000A28EC(v38, v10);
        sub_1000A28E4(v19, v17);
        StateDump.InferenceProviderState.ActiveRequest.init(request:priority:)(v37, v19);
        sub_1000A2804(v10);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v38, v13);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v18, v8);
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
        v20(v40, v39, v41);
        sub_1000A2804(v44);
        uint64_t v21 = v46;
        if ((sub_10000BFBC() & 1) == 0)
        {
          sub_100016DEC();
          uint64_t v21 = v46;
        }

        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        uint64_t v0 = v30;
        if (v23 >= v22 >> 1)
        {
          sub_1000A2984(v22);
          sub_100016DEC();
          uint64_t v21 = v46;
        }

        v21[2] = v23 + 1;
        sub_1000A28D4();
        ((void (*)(unint64_t))v20)(v24 + *(void *)(v28 + 72) * v23);
        uint64_t v46 = v21;
        uint64_t v1 = v29;
        uint64_t result = v42;
        if (v42 >= -(-1LL << *(_BYTE *)(v29 + 32))) {
          goto LABEL_23;
        }
        uint64_t v5 = v27;
        if ((*(void *)(v27 + 8 * v35) & v34) == 0) {
          goto LABEL_24;
        }
        if (v33 != *(_DWORD *)(v29 + 36)) {
          goto LABEL_25;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v2 = v32 - 1;
        if (v32 == 1)
        {
          swift_bridgeObjectRelease(v30[28]);
          goto LABEL_20;
        }

        if ((result & 0x8000000000000000LL) == 0)
        {
          int v4 = *(_DWORD *)(v29 + 36);
          if (result < 1LL << *(_BYTE *)(v29 + 32)) {
            continue;
          }
        }

        goto LABEL_26;
      }

      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }

uint64_t sub_1000A14CC()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[9];
  sub_10002FFE4( v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority,  (uint64_t)(v0 + 5));
  sub_1000A2900(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v0[30] = *(void *)(v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount);
  sub_10003CE0C();
  return sub_1000830E0(v3, v4, v5);
}

uint64_t sub_1000A1540()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 72);
  StateDump.InferenceProviderState.init(pid:descriptor:activeRequests:activePriority:loadingCount:)( *(unsigned int *)(v0 + 248),  v1,  *(void *)(v0 + 232),  v2,  *(void *)(v0 + 240));
  swift_release(v9);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A1628()
{
  uint64_t v49 = v3;
  uint64_t v50 = v2;
  uint64_t v5 = v4;
  uint64_t v48 = type metadata accessor for Date(0LL);
  uint64_t v46 = *(void *)(v48 - 8);
  sub_10000C240();
  __chkstk_darwin(v6);
  sub_10004E158();
  uint64_t v47 = v7;
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v36 - v9;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v43 = *(void *)(State - 8);
  uint64_t v44 = State;
  sub_10000C240();
  __chkstk_darwin(v11);
  sub_100022518();
  uint64_t v42 = v12;
  sub_1000306E4();
  sub_10000C240();
  __chkstk_darwin(v13);
  sub_100022518();
  uint64_t v51 = v14;
  uint64_t v39 = type metadata accessor for AssetCost(0LL);
  uint64_t v15 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_100095CF0();
  uint64_t v40 = v1;
  uint64_t v16 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_10000C120();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = (int *)type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  sub_10000C240();
  __chkstk_darwin(v22);
  sub_1000499DC();
  uint64_t v23 = v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess( v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  &v52,  1LL,  0LL);
  sub_1000A2844(v23, v0, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))( v20,  v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor,  v16);
  uint64_t v24 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8);
  uint64_t v41 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))( v1,  v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost,  v39);
  LODWORD(v39) = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable);
  unsigned int v38 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed);
  unsigned int v37 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode);
  uint64_t v25 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  uint64_t v26 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10000729C( (void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v25);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  swift_bridgeObjectRetain(v24);
  v27(v25, v26);
  uint64_t v28 = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v42, v0, v44);
  uint64_t v29 = v45;
  char v30 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v31 = v48;
  v30(v45, v0 + v21[8], v48);
  uint64_t v32 = v47;
  v30(v47, v0 + v21[9], v31);
  uint64_t v33 = *(void *)(v0 + v21[10]);
  uint64_t v34 = *(void *)(v0 + v21[11]);
  uint64_t v35 = *(void *)(v0 + v21[12]);
  sub_100022944();
  sub_10002289C();
  sub_100083500();
  StateDump.AssetState.init(descriptor:path:cost:isCacheable:dynamicModeAllowed:useEnergyEfficientMode:inferenceProvider:loadState:timeLastRequestEnded:timeLastForegroundSessionEnded:requiredByOtherAssets:foregroundSessions:requests:)( v20,  v41,  v24,  v40,  v39,  v38,  v37,  v51,  v28,  v29,  v32,  v33,  v34,  v35);
  swift_release(v5);
  swift_release(v50);
  sub_1000A2888(v0, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100007448();
}

void sub_1000A1944( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v107 = sub_100003B20(&qword_10010B408);
  uint64_t v29 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  sub_1000499DC();
  uint64_t v30 = type metadata accessor for DaemonSessionState(0LL);
  uint64_t v103 = *(void *)(v30 - 8);
  sub_10000C240();
  __chkstk_darwin(v31);
  sub_10000C120();
  uint64_t v34 = v33 - v32;
  uint64_t v102 = type metadata accessor for DaemonSession.ManagerOwnedState(0LL);
  sub_10000C240();
  __chkstk_darwin(v35);
  sub_100022518();
  uint64_t v104 = v36;
  sub_100003B20(&qword_10010B9A0);
  sub_10000C240();
  __chkstk_darwin(v37);
  sub_1000A2910();
  uint64_t v101 = v38;
  uint64_t v40 = Session.Metadata.id.getter(v39);
  uint64_t v41 = Session.Metadata.supportedAssetBundleIdentifiers.getter(v40);
  sub_10001137C(v41);
  uint64_t v100 = v42;
  uint64_t v43 = Session.Metadata.useCaseID.getter(v42);
  uint64_t v98 = v44;
  uint64_t v99 = v43;
  uint64_t v45 = Session.Metadata.onBehalfOfPID.getter(v43);
  if (v45 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v45 > 0x7FFFFFFF)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v92 = v45;
  uint64_t v93 = v30;
  uint64_t v94 = v34;
  uint64_t v95 = v28;
  uint64_t v97 = v24;
  HIDWORD(v91) = AuditToken.processIdentifier.getter(v45);
  uint64_t v96 = v26;
  uint64_t v46 = v26 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002FFE4(v26 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)&v113);
  uint64_t v90 = v46;
  sub_1000A2844(v46, v104, type metadata accessor for DaemonSession.ManagerOwnedState);
  uint64_t v47 = *(void *)(v104 + 8);
  uint64_t v48 = sub_10002289C();
  uint64_t v49 = sub_1000BCAC0(v48);
  if (!v49)
  {
    swift_bridgeObjectRelease(v47);
LABEL_28:
    sub_1000A2888(v104, type metadata accessor for DaemonSession.ManagerOwnedState);
    sub_1000119B0();
    uint64_t v89 = v88;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v94, v90 + *(int *)(v102 + 24), v93);
    StateDump.SessionState.init(identifier:supportedAssets:useCaseIdentifier:onBehalfOfPID:createdByPID:requests:state:)( v101,  v100,  v99,  v98,  v92,  HIDWORD(v91),  v89,  v94);
    sub_1000A2950((uint64_t)&a17);
    sub_1000A2950((uint64_t)&a18);
    sub_100007448();
    return;
  }

  uint64_t v50 = v49;
  uint64_t v112 = _swiftEmptyArrayStorage;
  sub_100016D94();
  unint64_t v106 = v47 & 0xC000000000000001LL;
  if ((v47 & 0xC000000000000001LL) != 0)
  {
    if (v47 < 0) {
      uint64_t v51 = v47;
    }
    else {
      uint64_t v51 = v47 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v52 = __CocoaSet.startIndex.getter(v51);
    char v54 = 1;
  }

  else
  {
    uint64_t v52 = sub_100020E24(v47);
    char v54 = v55 & 1;
  }

  uint64_t v109 = v52;
  uint64_t v110 = v53;
  char v111 = v54;
  if ((v50 & 0x8000000000000000LL) == 0)
  {
    uint64_t v56 = v47 & 0xFFFFFFFFFFFFFF8LL;
    if (v47 < 0) {
      uint64_t v56 = v47;
    }
    uint64_t v105 = v56;
    do
    {
      uint64_t v58 = v109;
      uint64_t v57 = v110;
      char v59 = v111;
      uint64_t v60 = sub_1000A2928();
      sub_1000CF1FC( v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108[0],  v108[1],  v108[2],  v108[3]);
      uint64_t v69 = v68;
      RequestMetadata.id.getter(v68);
      swift_release(v69);
      uint64_t v70 = v112;
      if ((sub_10000BFBC() & 1) == 0)
      {
        sub_100016D94();
        uint64_t v70 = v112;
      }

      unint64_t v72 = v70[2];
      unint64_t v71 = v70[3];
      if (v72 >= v71 >> 1)
      {
        sub_1000A2984(v71);
        sub_100016D94();
        uint64_t v70 = v112;
      }

      v70[2] = v72 + 1;
      sub_1000A28D4();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))( v73 + *(void *)(v29 + 72) * v72,  v20,  v107);
      if (v106)
      {
        if ((v59 & 1) == 0) {
          goto LABEL_32;
        }
        uint64_t v74 = __CocoaSet.Index.handleBitPattern.getter(v58, v57);
        if (v74) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v74);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v85 = sub_100003B20(&qword_10010E6F8);
        uint64_t v86 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v108, v85);
        __CocoaSet.formIndex(after:isUnique:)(v87, isUniquelyReferenced_nonNull_native, v105);
        v86(v108, 0LL);
      }

      else
      {
        uint64_t v76 = sub_1000A2928();
        uint64_t v80 = sub_100020D3C(v76, v77, v78, v79);
        uint64_t v82 = v81;
        char v84 = v83;
        sub_10000B830(v58, v57, v59);
        uint64_t v109 = v80;
        uint64_t v110 = v82;
        char v111 = v84 & 1;
      }

      --v50;
    }

    while (v50);
    sub_10000B830(v109, v110, v111);
    swift_bridgeObjectRelease(v47);
    goto LABEL_28;
  }

void sub_1000A1D94()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v57 = *(void *)(type metadata accessor for ModelCatalogAsset(0LL) - 8);
  sub_10000C240();
  __chkstk_darwin(v4);
  sub_10004E158();
  uint64_t v56 = (uint64_t *)v5;
  __chkstk_darwin(v6);
  uint64_t v55 = (uint64_t)&v47 - v7;
  type metadata accessor for RequestPriority(0LL);
  sub_10000C240();
  __chkstk_darwin(v8);
  sub_10000C120();
  uint64_t v11 = v10 - v9;
  sub_1000306E4();
  sub_10000C240();
  __chkstk_darwin(v12);
  sub_10000C120();
  uint64_t v15 = v14 - v13;
  sub_100003B20(&qword_10010B9A0);
  sub_10000C240();
  __chkstk_darwin(v16);
  sub_10000C120();
  uint64_t v19 = v18 - v17;
  sub_100003B20(&qword_10010B408);
  sub_10000C240();
  __chkstk_darwin(v20);
  sub_1000A2910();
  uint64_t v53 = v21;
  uint64_t v23 = RequestMetadata.id.getter(v22);
  RequestMetadata.sessionID.getter(v23);
  uint64_t v24 = v1[2];
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = _swiftEmptyArrayStorage;
  if (v25)
  {
    uint64_t v48 = v19;
    uint64_t v49 = v15;
    uint64_t v50 = v11;
    uint64_t v51 = v3;
    uint64_t v52 = v1;
    uint64_t v58 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v24);
    sub_100016BD0(0, v25, 0);
    uint64_t v27 = sub_100020E24(v24);
    uint64_t v29 = v28;
    char v31 = v30 & 1;
    uint64_t v54 = v24 + 56;
    while ((v27 & 0x8000000000000000LL) == 0 && v27 < 1LL << *(_BYTE *)(v24 + 32))
    {
      if (*(_DWORD *)(v24 + 36) != (_DWORD)v29) {
        goto LABEL_16;
      }
      uint64_t v32 = v55;
      sub_1000A2844( *(void *)(v24 + 48) + *(void *)(v57 + 72) * v27,  v55,  type metadata accessor for ModelCatalogAsset);
      uint64_t v33 = v56;
      sub_10000B7B0(v32, (uint64_t)v56);
      uint64_t v35 = *v33;
      uint64_t v34 = v33[1];
      sub_100021EB0();
      sub_1000A2888((uint64_t)v33, type metadata accessor for ModelCatalogAsset);
      uint64_t v26 = v58;
      if ((sub_10000BFBC() & 1) == 0)
      {
        sub_100016BD0(0, v26[2] + 1LL, 1);
        uint64_t v26 = v58;
      }

      unint64_t v37 = v26[2];
      unint64_t v36 = v26[3];
      if (v37 >= v36 >> 1)
      {
        char v42 = sub_1000A2984(v36);
        sub_100016BD0(v42, v37 + 1, 1);
        uint64_t v26 = v58;
      }

      v26[2] = v37 + 1;
      uint64_t v38 = &v26[2 * v37];
      v38[4] = v35;
      v38[5] = v34;
      uint64_t v39 = sub_100020D3C(v27, v29, v31 & 1, v24);
      uint64_t v27 = v39;
      uint64_t v29 = v40;
      char v31 = v41 & 1;
      if (!--v25)
      {
        sub_10000B830(v39, v40, v41 & 1);
        swift_bridgeObjectRelease(v24);
        uint64_t v1 = v52;
        uint64_t v15 = v49;
        uint64_t v11 = v50;
        uint64_t v19 = v48;
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  else
  {
LABEL_13:
    sub_10001137C((uint64_t)v26);
    uint64_t v44 = v43;
    uint64_t v45 = v1[6];
    uint64_t v46 = v1[7];
    sub_10000729C(v1 + 3, v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
    sub_1000D192C();
    StateDump.RequestState.init(identifier:session:asset:inferenceProvider:priority:)(v53, v19, v44, v15, v11);
    sub_10000C280();
    sub_100007448();
  }

void sub_1000A20C8()
{
  uint64_t v63 = v1;
  uint64_t v64 = v2;
  uint64_t v3 = v0;
  uint64_t v47 = type metadata accessor for StateDump.RequestState(0LL);
  uint64_t v46 = *(void *)(v47 - 8);
  sub_10000C240();
  __chkstk_darwin(v4);
  sub_100022518();
  uint64_t v45 = v5;
  uint64_t v6 = sub_100003B20(&qword_10010E700);
  uint64_t inited = swift_initStackObject(v6, &v59);
  *(_OWORD *)(inited + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000DA250;
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, (uint64_t)&v58);
  uint64_t v9 = *v8;
  uint64_t v51 = v8[1];
  uint64_t v10 = v8[2];
  *(void *)(inited + 32) = v9;
  uint64_t v49 = inited + 32;
  *(void *)(inited + 40) = v51;
  *(void *)(inited + 48) = v10;
  uint64_t v11 = (uint64_t *)(v3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002FFE4(v3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)&v57);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  *(void *)(inited + 56) = v12;
  *(void *)(inited + 6sub_100006F7C(v0 + 4) = v13;
  *(void *)(inited + 72) = v14;
  uint64_t v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_10002FFE4(v3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, (uint64_t)&v56);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = v15[2];
  *(void *)(inited + 80) = v16;
  *(void *)(inited + 88) = v17;
  *(void *)(inited + 96) = v18;
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_100084314();
  sub_10000C030();
  sub_1000A293C();
  sub_1000224B4();
  sub_10000C0A0();
  sub_10000C20C();
  sub_10000C278();
  sub_100083778();
  sub_1000837AC();
  sub_10000C0F0();
  uint64_t v44 = inited;
  swift_bridgeObjectRetain(inited);
  uint64_t v19 = 0LL;
  uint64_t v48 = v3;
  do
  {
    uint64_t v20 = (uint64_t *)(v49 + 24 * v19);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = v20[2];
    uint64_t v54 = _swiftEmptyArrayStorage;
    uint64_t v52 = v23;
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      sub_1000A2948(v21);
      sub_1000A2948(v52);
      sub_1000A2948(v22);
      sub_100084314();
      uint64_t v25 = 0LL;
      uint64_t v50 = v24;
      do
      {
        uint64_t v26 = v25 + 1;
        uint64_t v27 = *(void *)(v52 + 8 * v25 + 32);
        uint64_t v28 = (void *)(v27 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
        sub_10002FFE4( v27 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  (uint64_t)&v53);
        uint64_t v29 = v28[1];
        uint64_t v30 = v28[2];
        uint64_t v31 = v28[4];
        sub_10000C278();
        swift_bridgeObjectRetain(v31);
        sub_100022418();
        sub_1000224B4();
        sub_100083778();
        sub_1000837AC();
        sub_1000CAE8C();
        unint64_t v33 = v32;
        sub_100022418();
        sub_1000CAE8C();
        unint64_t v35 = v34;
        sub_10000C1E8();
        sub_1000CAB64(v35);
        swift_release(v27);
        sub_10000C1E8();
        swift_bridgeObjectRelease(v31);
        sub_10000C280();
        swift_release(v30);
        swift_release(v29);
        sub_1000CAB64(v33);
        uint64_t v25 = v26;
      }

      while (v50 != v26);
      uint64_t v3 = v48;
      swift_release(v48);
      swift_release_n(v52, 2LL);
      sub_1000A2958((uint64_t)&v60);
      sub_1000A2958((uint64_t)&v61);
      unint64_t v36 = v54;
    }

    else
    {
      sub_1000A293C();
      unint64_t v36 = _swiftEmptyArrayStorage;
    }

    ++v19;
    sub_1000A2950((uint64_t)&v62);
    sub_1000CAB64((unint64_t)v36);
  }

  while (v19 != 3);
  swift_release(v3);
  swift_bridgeObjectRelease(v44);
  uint64_t v37 = (uint64_t)v55;
  ((void (*)(uint64_t))swift_setDeallocating)(v44);
  sub_100048B60();
  if ((unint64_t)v37 >> 62)
  {
    if (v37 < 0) {
      uint64_t v43 = v37;
    }
    else {
      uint64_t v43 = v37 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100022418();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v43);
    sub_10000C1E8();
  }

  else
  {
    uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v38) {
    goto LABEL_19;
  }
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_100016D68();
  if ((v38 & 0x8000000000000000LL) == 0)
  {
    uint64_t v39 = 0LL;
    uint64_t v40 = v55;
    do
    {
      if ((v37 & 0xC000000000000001LL) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v37);
      }
      else {
        swift_retain();
      }
      sub_1000A1D94();
      uint64_t v55 = v40;
      unint64_t v41 = v40[2];
      if (v41 >= v40[3] >> 1)
      {
        sub_100016D68();
        uint64_t v40 = v55;
      }

      ++v39;
      v40[2] = v41 + 1;
      sub_1000A28D4();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32))( v42 + *(void *)(v46 + 72) * v41,  v45,  v47);
    }

    while (v38 != v39);
LABEL_19:
    sub_10000C1E8();
    sub_10001198C();
    return;
  }

  __break(1u);
}

void sub_1000A2574()
{
  uint64_t v1 = sub_100021EB0();
  sub_10009FE04(v1);
  sub_1000A28F4();
  sub_1000119B0();
  sub_1000A28C4();
}

uint64_t sub_1000A25CC()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, (uint64_t)v19);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  sub_10000C278();
  sub_10000C0A0();
  sub_10000C20C();
  sub_10000C030();
  uint64_t v5 = sub_1000A00D8(v2, v3, v4);
  sub_100030B78();
  sub_1000304F8();
  sub_10000C280();
  uint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v18);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = v6[2];
  sub_10000C0A0();
  sub_10000C20C();
  sub_10000C0F0();
  sub_10000C030();
  uint64_t v10 = sub_1000A00D8(v7, v8, v9);
  swift_release(v9);
  sub_100030B78();
  sub_1000304F8();
  uint64_t v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, (uint64_t)v17);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  sub_10000C20C();
  sub_10000C0F0();
  sub_10000C0A0();
  sub_10000C030();
  uint64_t v15 = sub_1000A00D8(v12, v13, v14);
  sub_1000304F8();
  swift_release(v13);
  sub_100030B78();
  return StateDump.ExecutionGroupsState.init(active:pendingForeground:pendingBackground:)(v5, v10, v15);
}

uint64_t sub_1000A273C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1000A27BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010E6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A2804(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010E6F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000A2844(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A2888(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

  ;
}

  ;
}

uint64_t sub_1000A28E4(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000A28EC(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000A28F4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000A2900@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v3, v1);
}

  ;
}

uint64_t sub_1000A2928()
{
  return v0;
}

uint64_t sub_1000A293C()
{
  return swift_retain(*(void *)(v0 - 320));
}

uint64_t sub_1000A2948(uint64_t a1)
{
  return swift_retain_n(a1, 3LL);
}

uint64_t sub_1000A2950@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 - 256));
}

uint64_t sub_1000A2958@<X0>(uint64_t a1@<X8>)
{
  return swift_release_n(*(void *)(a1 - 256), 3LL);
}

uint64_t sub_1000A2964(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 104);
}

uint64_t sub_1000A2978()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 272));
}

BOOL sub_1000A2984@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void *sub_1000A2990(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = type metadata accessor for InferenceProviderDescriptor.Instance(0LL);
  uint64_t v4 = *(void *)(v38 - 8);
  uint64_t v5 = __chkstk_darwin(v38);
  uint64_t v39 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v28 - v8);
  __chkstk_darwin(v7);
  uint64_t v37 = (char *)&v28 - v10;
  uint64_t v11 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = _swiftEmptyArrayStorage;
  if (v14)
  {
    uint64_t v28 = v2;
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_100016C18();
    uint64_t v15 = v43;
    unsigned int v30 = enum case for InferenceProviderDescriptor.Instance.specificInstance(_:);
    unsigned int v29 = enum case for InferenceProviderDescriptor.Instance.defaultInstance(_:);
    unint64_t v33 = v9;
    uint64_t v34 = v4;
    uint64_t v31 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
    unint64_t v32 = v13;
    uint64_t v16 = (unsigned __int8 *)(a2 + 64);
    uint64_t v17 = v34;
    uint64_t v18 = v37;
    do
    {
      uint64_t v19 = *((void *)v16 - 1);
      unint64_t v41 = v15;
      uint64_t v42 = v14;
      if (v19)
      {
        *uint64_t v9 = *((void *)v16 - 2);
        v9[1] = v19;
        uint64_t v20 = v30;
      }

      else
      {
        uint64_t v20 = v29;
      }

      uint64_t v21 = *((void *)v16 - 3);
      uint64_t v40 = *((void *)v16 - 4);
      uint64_t v22 = *v16;
      uint64_t v23 = v38;
      v31(v9, v20, v38);
      (*(void (**)(char *, void *, uint64_t))(v17 + 32))(v18, v9, v23);
      uint64_t v24 = v39;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v39, v18, v23);
      swift_bridgeObjectRetain_n(v21, 2LL);
      swift_bridgeObjectRetain_n(v19, 2LL);
      uint64_t v25 = v32;
      InferenceProviderDescriptor.init(id:instance:hostedOnServer:)(v40, v21, v24, v22);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v23);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v21);
      uint64_t v15 = v41;
      uint64_t v43 = v41;
      unint64_t v26 = v41[2];
      if (v26 >= v41[3] >> 1)
      {
        sub_100016C18();
        uint64_t v15 = v43;
      }

      v16 += 40;
      v15[2] = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))( (unint64_t)v15 + ((*(unsigned __int8 *)(v35 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
      + *(void *)(v35 + 72) * v26,
        v25,
        v36);
      uint64_t v14 = v42 - 1;
      uint64_t v9 = v33;
    }

    while (v42 != 1);
  }

  return v15;
}

#error "1000A2CB4: call analysis failed (funcsize=102)"
void sub_1000A2DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  sub_1000A85D0();
  uint64_t v5 = (os_unfair_lock_s *)(v3 + v4);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + v4));
  sub_1000A6528(v1, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1000A2E40()
{
  uint64_t v2 = ((uint64_t (*)(void))Session.Metadata.supportedAssetBundleIdentifiers.getter)();
  sub_10001137C(v2);
  uint64_t v4 = *(uint8_t **)(v3 + 16);
  uint64_t v5 = swift_bridgeObjectRelease(v3);
  if (!v4)
  {
    if (qword_10010B108 != -1) {
      swift_once(&qword_10010B108, sub_1000A4494);
    }
    uint64_t v22 = sub_10000BF6C();
    sub_1000A8874(v22, (uint64_t)qword_10010E710);
    uint64_t v23 = sub_1000A8810();
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v4 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v26 = sub_10000BCF4(32LL);
      uint64_t v45 = (void *)v26;
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_retain(v0);
      sub_1000A75D8();
      uint64_t v27 = sub_100021DDC();
      sub_1000A86C8(v27, v28, (uint64_t *)&v45);
      uint64_t v43 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v4 + 4);
      sub_10000BCDC(v0);
      sub_100007570();
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Session %s doesn't have any asset bundle identifiers",  v4,  0xCu);
      swift_arrayDestroy(v26, 1LL);
      sub_10000BCC4(v26);
      sub_10000BCC4((uint64_t)v4);
    }

    else
    {

      sub_10000BCDC(v0);
    }

    uint64_t v30 = sub_1000305BC();
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v30, v31);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v32,  enum case for ModelManagerError.unsupportedNumberOfAssetBundles(_:),  v30);
    swift_willThrow(v33, v34, v35, v36, v37, v38, v39, v40);
    return (uint64_t)v4;
  }

  uint64_t v6 = Session.Metadata.supportedAssetBundleIdentifiers.getter(v5);
  sub_10001137C(v6);
  swift_bridgeObjectRetain(v7);
  sub_1000CB24C();
  uint64_t v9 = v8;
  sub_10000BD28();
  uint64_t v45 = v9;
  sub_1000A77EC((uint64_t *)&v45);
  if (!v1)
  {
    sub_10000BD28();
    uint64_t v10 = v45;
    if (v45[2])
    {
      uint64_t v4 = (uint8_t *)v45[4];
      uint64_t v11 = v45[5];
      swift_bridgeObjectRetain(v11);
      swift_release(v10);
      if (qword_10010B108 != -1) {
        swift_once(&qword_10010B108, sub_1000A4494);
      }
      uint64_t v12 = sub_10000BF6C();
      sub_1000A8874(v12, (uint64_t)qword_10010E710);
      sub_1000A86B0();
      uint64_t v13 = sub_1000A8810();
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = sub_10000BCF4(22LL);
        uint64_t v42 = sub_10000BCF4(64LL);
        uint64_t v45 = (void *)v42;
        *(_DWORD *)uint64_t v16 = 136315394;
        swift_retain(v0);
        sub_1000A75D8();
        uint64_t v17 = sub_100021DDC();
        sub_1000A86C8(v17, v18, (uint64_t *)&v45);
        uint64_t v43 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v16 + 4);
        sub_10000BCDC(v0);
        sub_100007570();
        *(_WORD *)(v16 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        sub_1000845DC((uint64_t)v4, v20, (uint64_t *)&v45);
        uint64_t v43 = v21;
        sub_10000C04C((uint64_t)&v43, (uint64_t)&v44);
        swift_bridgeObjectRelease_n(v11, 3LL);
        sub_10000BFDC( (void *)&_mh_execute_header,  v14,  v15,  "Session %s selected asset bundle identifier %s",  (uint8_t *)v16);
        sub_1000A86D4();
        sub_10000BCC4(v42);
        sub_10000BCC4(v16);
      }

      else
      {

        sub_10000C1B0(v11);
        sub_10000BCDC(v0);
      }

      return (uint64_t)v4;
    }

    swift_release(v45);
    __break(1u);
  }

  uint64_t result = swift_release(v45);
  __break(1u);
  return result;
}

uint64_t sub_1000A324C()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000DA400);
  uint64_t v1 = sub_1000A4584(KeyPath);
  sub_10000C1F0();
  return v1;
}

uint64_t sub_1000A329C@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000DA3E0);
  sub_1000A463C(KeyPath, a1);
  return swift_release(KeyPath);
}

uint64_t sub_1000A32F0(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v5 = type metadata accessor for DaemonSession.ManagerOwnedState(0LL);
  v3[18] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[19] = swift_task_alloc(v6);
  v3[20] = swift_task_alloc(v6);
  uint64_t v7 = sub_1000A8840();
  v3[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[22] = v8;
  v3[23] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000A3388, a1, 0LL);
}

uint64_t sub_1000A3388()
{
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  *(void *)(v0 + 192) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  uint64_t v8 = v5 + v7;
  sub_10002257C(v5 + v7, v0 + 56);
  uint64_t v9 = v8 + *(int *)(v6 + 24);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v3);
  uint64_t v10 = enum case for DaemonSessionState.cancellationInProgress(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  *(void *)(v0 + 200) = v11;
  v11(v9, v10, v3);
  uint64_t v12 = *(void *)(v8 + 8);
  swift_endAccess(v0 + 56);
  if ((v12 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v12);
    uint64_t v14 = __CocoaSet.makeIterator()(v13);
    uint64_t v15 = type metadata accessor for DaemonRequest(0LL);
    sub_100021AD0(&qword_10010B478, type metadata accessor for DaemonRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)(v14, v15, v16);
    uint64_t v12 = *(void *)(v0 + 16);
    uint64_t v18 = *(void *)(v0 + 24);
    uint64_t v20 = *(void *)(v0 + 32);
    uint64_t v19 = *(void *)(v0 + 40);
    unint64_t v21 = *(void *)(v0 + 48);
  }

  else
  {
    uint64_t v22 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v18 = v12 + 56;
    uint64_t v20 = ~v22;
    uint64_t v23 = -v22;
    if (v23 < 64) {
      uint64_t v24 = ~(-1LL << v23);
    }
    else {
      uint64_t v24 = -1LL;
    }
    unint64_t v21 = v24 & *(void *)(v12 + 56);
    uint64_t result = swift_bridgeObjectRetain(v12);
    uint64_t v19 = 0LL;
  }

  *(void *)(v0 + 2sub_10002FFE4((uint64_t)v1, v0 + 16) = v18;
  *(void *)(v0 + 22sub_100006F7C(v0 + 4) = v20;
  *(void *)(v0 + 208) = v12;
  if (v12 < 0)
  {
    v12 &= ~0x8000000000000000LL;
    uint64_t v27 = __CocoaSet.Iterator.next()(result);
    if (v27)
    {
      sub_1000A8678(v27);
      sub_1000A8854();
      sub_1000A8648((uint64_t)&type metadata for Swift.AnyObject);
      sub_1000A8848();
      uint64_t v20 = v19;
      uint64_t v25 = v21;
LABEL_16:
      *(void *)(v0 + 240) = v20;
      *(void *)(v0 + 248) = v25;
      *(void *)(v0 + 232) = v12;
      if (v12)
      {
        uint64_t v28 = (void *)swift_task_alloc(dword_10010FBC4);
        *(void *)(v0 + 256) = v28;
        uint64_t v29 = sub_1000A8894(v28, (uint64_t)sub_1000A3668);
        return sub_1000A85EC(v29, v30);
      }

      goto LABEL_32;
    }

    goto LABEL_32;
  }

  if (v21)
  {
    uint64_t v25 = (v21 - 1) & v21;
    unint64_t v26 = __clz(__rbit64(v21)) | (v19 << 6);
    uint64_t v20 = v19;
LABEL_13:
    uint64_t v12 = *(void *)(*(void *)(v12 + 48) + 8 * v26);
    sub_10000C030();
    goto LABEL_16;
  }

  int64_t v31 = v19 + 1;
  if (!__OFADD__(v19, 1LL))
  {
    unint64_t v32 = v20 + 64;
    if (v31 < (uint64_t)((unint64_t)(v20 + 64) >> 6))
    {
      uint64_t v20 = v19 + 1;
      if (*(void *)(v18 + 8 * v31))
      {
LABEL_21:
        sub_1000A87A4();
        uint64_t v25 = v34 & v33;
        unint64_t v26 = v35 + (v20 << 6);
        goto LABEL_13;
      }

      int64_t v36 = v32 >> 6;
      uint64_t v20 = v19 + 2;
      if (v19 + 2 < v36)
      {
        if (*(void *)(v18 + 8 * v20)) {
          goto LABEL_21;
        }
        uint64_t v20 = v19 + 3;
        if (v19 + 3 < v36)
        {
          if (*(void *)(v18 + 8 * v20)) {
            goto LABEL_21;
          }
          uint64_t v20 = v19 + 4;
          if (v19 + 4 < v36)
          {
            if (*(void *)(v18 + 8 * v20)) {
              goto LABEL_21;
            }
            uint64_t v37 = v19 + 5;
            while (v37 < v36)
            {
              if (*(void *)(v18 + 8 * v37++))
              {
                uint64_t v20 = v37 - 1;
                goto LABEL_21;
              }
            }
          }
        }
      }
    }

uint64_t sub_1000A3668()
{
  return sub_10000BD98();
}

void sub_1000A36AC()
{
  uint64_t v6 = *(void *)(v1 + 240);
  unint64_t v7 = *(void *)(v1 + 248);
  uint64_t v8 = *(void *)(v1 + 208);
  if (v8 < 0)
  {
    uint64_t v0 = v8 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v11 = __CocoaSet.Iterator.next()(v5);
    if (v11)
    {
      sub_1000A8678(v11);
      sub_1000A8854();
      sub_1000A8648((uint64_t)&type metadata for Swift.AnyObject);
      sub_1000A8848();
      int64_t v10 = v6;
      uint64_t v2 = v7;
LABEL_7:
      *(void *)(v1 + 240) = v10;
      *(void *)(v1 + 248) = v2;
      *(void *)(v1 + 232) = v0;
      if (v0)
      {
        uint64_t v12 = (void *)swift_task_alloc(dword_10010FBC4);
        *(void *)(v1 + 256) = v12;
        uint64_t v13 = sub_1000A8894(v12, (uint64_t)sub_1000A3668);
        sub_1000A85EC(v13, v14);
        return;
      }

      goto LABEL_23;
    }

    goto LABEL_23;
  }

  if (v7)
  {
    uint64_t v2 = (v7 - 1) & v7;
    unint64_t v9 = __clz(__rbit64(v7)) | (v6 << 6);
    int64_t v10 = *(void *)(v1 + 240);
LABEL_4:
    uint64_t v0 = *(void *)(*(void *)(v8 + 48) + 8 * v9);
    sub_10000C030();
    goto LABEL_7;
  }

  int64_t v15 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    unint64_t v16 = *(void *)(v1 + 224) + 64LL;
    if (v15 < (uint64_t)(v16 >> 6))
    {
      uint64_t v17 = *(void *)(v1 + 216);
      unint64_t v18 = *(void *)(v17 + 8 * v15);
      int64_t v10 = v6 + 1;
      if (v18)
      {
LABEL_12:
        uint64_t v2 = (v18 - 1) & v18;
        unint64_t v9 = __clz(__rbit64(v18)) + (v10 << 6);
        goto LABEL_4;
      }

      int64_t v19 = v16 >> 6;
      int64_t v10 = v6 + 2;
      if (v6 + 2 < v19)
      {
        unint64_t v18 = *(void *)(v17 + 8 * v10);
        if (v18) {
          goto LABEL_12;
        }
        int64_t v10 = v6 + 3;
        if (v6 + 3 < v19)
        {
          unint64_t v18 = *(void *)(v17 + 8 * v10);
          if (v18) {
            goto LABEL_12;
          }
          int64_t v10 = v6 + 4;
          if (v6 + 4 < v19)
          {
            unint64_t v18 = *(void *)(v17 + 8 * v10);
            if (v18) {
              goto LABEL_12;
            }
            int64_t v20 = v6 + 5;
            while (v20 < v19)
            {
              unint64_t v18 = *(void *)(v17 + 8 * v20++);
              if (v18)
              {
                int64_t v10 = v20 - 1;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }

void sub_1000A3888()
{
  uint64_t v43 = v1;
  uint64_t v48 = sub_100003B20(&qword_10010B9A0);
  uint64_t v46 = *(void *)(v48 - 8);
  sub_10000C240();
  __chkstk_darwin(v3);
  sub_10000C120();
  uint64_t v44 = v5 - v4;
  uint64_t v6 = type metadata accessor for DaemonSessionState(0LL);
  sub_100085754();
  __chkstk_darwin(v7);
  sub_10000C110();
  uint64_t v10 = v8 - v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v42 - v15;
  uint64_t v45 = v0;
  uint64_t v17 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)&v47);
  uint64_t v18 = type metadata accessor for DaemonSession.ManagerOwnedState(0LL);
  int64_t v19 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v20 = v19(v16, (char *)(v17 + *(int *)(v18 + 24)), v6);
  sub_1000A87E4(v20, enum case for DaemonSessionState.cancelled(_:));
  LOBYTE(v17) = sub_1000BC4E0();
  sub_1000923C4((uint64_t)v14);
  uint64_t v21 = v19((char *)v10, v16, v6);
  if ((v17 & 1) != 0)
  {
    sub_1000923C4(v10);
  }

  else
  {
    sub_1000A87E4(v21, enum case for DaemonSessionState.cancellationInProgress(_:));
    char v22 = sub_1000BC4E0();
    sub_1000923C4((uint64_t)v14);
    sub_1000923C4(v10);
    if ((v22 & 1) == 0)
    {
      sub_1000923C4((uint64_t)v16);
      goto LABEL_10;
    }
  }

  if (qword_10010B108 != -1) {
    swift_once(&qword_10010B108, sub_1000A4494);
  }
  uint64_t v23 = sub_10000BF6C();
  uint64_t v24 = sub_1000A8874(v23, (uint64_t)qword_10010E710);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "session cancelled, returning error", v27, 2u);
    sub_10000BCC4((uint64_t)v27);
  }

  uint64_t v28 = sub_1000305BC();
  sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  uint64_t v30 = sub_1000302B0(v28, v29);
  uint64_t v32 = v31;
  uint64_t v33 = v44;
  Session.Metadata.id.getter(v30);
  UUIDIdentifier.uuid.getter(v48);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v33, v48);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v32,  enum case for ModelManagerError.sessionInCancelState(_:),  v28);
  swift_willThrow(v34, v35, v36, v37, v38, v39, v40, v41);
  sub_1000923C4((uint64_t)v16);
LABEL_10:
  sub_100084DC8();
}

uint64_t sub_1000A3B5C()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000DA3C0);
  uint64_t v1 = sub_1000A47B0(KeyPath);
  sub_10000C1F0();
  return v1;
}

void sub_1000A3BB4()
{
  uint64_t v7 = &v11[-v6 - 8];
  uint64_t v8 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10000BE64(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)v12, 0LL);
  sub_1000A874C(v8, (uint64_t)v7);
  swift_retain();
  swift_retain();
  sub_100017AD0(&v13, v3);
  uint64_t v9 = v13;
  swift_release(v2);
  swift_release(v9);
  sub_1000A874C((uint64_t)v7, v1);
  sub_10002257C(v8, (uint64_t)v11);
  sub_1000A87C4();
  swift_endAccess(v11);
  sub_1000A88A8();
  sub_100022108();
}

#error "1000A3D18: call analysis failed (funcsize=63)"
uint64_t sub_1000A3D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return swift_task_switch(sub_1000A3DB0, a2, 0LL);
}

uint64_t sub_1000A3DB0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10000BE64(v2, v0 + 16, 0LL);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = swift_task_alloc(32LL);
  *(void *)(v4 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  swift_bridgeObjectRetain(v3);
  sub_10000E2B0((uint64_t (*)(uint64_t *))sub_1000A83AC, v4, v3);
  uint64_t v6 = v5;
  *(void *)(v0 + 72) = v5;
  swift_bridgeObjectRelease(v3);
  sub_10002294C();
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_requestManager);
    uint64_t v8 = (void *)swift_task_alloc(dword_10010FBC4);
    *(void *)(v0 + 80) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000A3F30;
    return sub_1000D2DDC(v7, *(void *)(v0 + 56));
  }

  else
  {
    uint64_t v10 = type metadata accessor for ModelManagerError(0LL);
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v10, v11, 0LL, 0LL);
    uint64_t v13 = v12;
    uint64_t v14 = sub_100003B20(&qword_10010B408);
    UUIDIdentifier.uuid.getter(v14);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v13,  enum case for ModelManagerError.requestNotFound(_:),  v10);
    swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000A3F30()
{
  return sub_10000BD98();
}

uint64_t sub_1000A3F74()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A3FA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v90 = (uint64_t *)v21;
  uint64_t v27 = v26;
  uint64_t v88 = v28;
  uint64_t v91 = *(void *)(sub_1000229CC() - 8);
  sub_10000C240();
  __chkstk_darwin(v29);
  sub_1000A86E0();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v79 - v31;
  uint64_t v33 = sub_1000306E4();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  sub_10000C120();
  uint64_t v37 = v36 - v35;
  sub_100003B20(&qword_10010C000);
  sub_10000C240();
  __chkstk_darwin(v38);
  sub_100095CF0();
  uint64_t v39 = v20;
  uint64_t v40 = (uint64_t)v90;
  uint64_t v41 = sub_1000A5908();
  if (v40)
  {
LABEL_20:
    sub_100084DC8();
    return;
  }

  uint64_t v89 = v32;
  uint64_t v90 = (uint64_t *)v22;
  uint64_t v85 = v42;
  uint64_t v86 = v41;
  sub_1000A441C(v42, v23);
  if (sub_1000A8774() != 1)
  {
    uint64_t v84 = 0LL;
    uint64_t v43 = v34;
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
    uint64_t v45 = v88;
    sub_1000222C4(v88, v23, v44);
    uint64_t v46 = v37;
    if (qword_10010B108 != -1) {
      goto LABEL_24;
    }
    while (1)
    {
      uint64_t v47 = sub_10000BF6C();
      sub_1000A8874(v47, (uint64_t)qword_10010E710);
      sub_1000222C4(v46, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16));
      uint64_t v48 = swift_bridgeObjectRetain_n(v27, 2LL);
      uint64_t v49 = (void *)Logger.logObject.getter(v48);
      uint64_t v50 = v33;
      int v51 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled((os_log_t)v49, (os_log_type_t)v51))
      {
        sub_1000A8690();
        swift_release(v86);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v50);

        sub_10000C1B0(v27);
        goto LABEL_20;
      }

      uint64_t v52 = v39;
      uint64_t v39 = (os_log_s *)v49;
      int v83 = v51;
      uint64_t v53 = sub_10000BCF4(32LL);
      uint64_t v82 = sub_10000BCF4(96LL);
      a10 = v82;
      *(_DWORD *)uint64_t v53 = 136315650;
      uint64_t v54 = _typeName(_:qualified:)(v52, 0LL);
      sub_10000C054(v54, v55);
      sub_1000A8794(v56);
      uint64_t v45 = v46;
      uint64_t v58 = v57 + 8;
      sub_10000C04C((uint64_t)&v92, v57 + 8);
      sub_10000BD28();
      *(_WORD *)(v53 + 12) = 2080;
      uint64_t v33 = v53 + 14;
      sub_100021AD0( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v50, v59);
      sub_10000C054(v60, v61);
      uint64_t v63 = sub_1000A8764(v62);
      uint64_t v81 = v58;
      sub_10000C04C(v63, v58);
      sub_10000BD28();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v50);
      *(_WORD *)(v53 + 22) = 2080;
      uint64_t v46 = *(void *)(v27 + 16);
      if (!v46) {
        break;
      }
      uint64_t v79 = v53;
      uint64_t v80 = v39;
      char v64 = sub_1000A873C();
      sub_1000A8724(v64, v46);
      uint64_t v43 = sub_100020E24(v27);
      sub_1000A86A4();
      uint64_t v87 = v27;
      uint64_t v88 = v27 + 56;
      while ((v43 & 0x8000000000000000LL) == 0)
      {
        sub_100022404();
        if (v43 >= v65) {
          break;
        }
        if (*(_DWORD *)(v27 + 36) != (_DWORD)v39) {
          goto LABEL_23;
        }
        uint64_t v66 = (uint64_t)v89;
        uint64_t v67 = type metadata accessor for ModelCatalogAsset;
        sub_10003C8BC( *(void *)(v27 + 48) + *(void *)(v91 + 72) * v43,  (uint64_t)v89,  type metadata accessor for ModelCatalogAsset);
        uint64_t v68 = v66;
        uint64_t v69 = v90;
        sub_10000B7B0(v68, (uint64_t)v90);
        uint64_t v45 = *v69;
        uint64_t v70 = v69[1];
        sub_1000225FC();
        sub_10002F90C((uint64_t)v69, type metadata accessor for ModelCatalogAsset);
        if ((sub_100030B08() & 1) == 0)
        {
          sub_100030638();
          uint64_t v67 = v92;
        }

        unint64_t v72 = *((void *)v67 + 2);
        unint64_t v71 = *((void *)v67 + 3);
        uint64_t v33 = v72 + 1;
        if (v72 >= v71 >> 1)
        {
          sub_10000BDA4(v71 > 1, v72 + 1);
          uint64_t v67 = v92;
        }

        *((void *)v67 + 2) = v33;
        uint64_t v73 = (char *)v67 + 16 * v72;
        *((void *)v73 + sub_100006F7C(v0 + 4) = v45;
        *((void *)v73 + 5) = v70;
        uint64_t v27 = v87;
        uint64_t v43 = sub_100020D3C(v43, v39, v53 & 1, v87);
        sub_1000A86A4();
        if (!--v46)
        {
          sub_1000A86BC(v43);
          uint64_t v53 = v79;
          uint64_t v74 = v80;
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_once(&qword_10010B108, sub_1000A4494);
    }

    uint64_t v74 = v39;
LABEL_19:
    uint64_t v75 = sub_10000C038();
    sub_10000BD28();
    sub_1000845DC(v75, v76, &a10);
    uint64_t v92 = v77;
    sub_10000C04C((uint64_t)&v92, v81);
    sub_10000C1B0(v27);
    sub_1000228C4();
    sub_1000A88C8( (void *)&_mh_execute_header,  v74,  (os_log_type_t)v83,  "Session %s selected inference provider %s for assets %s");
    uint64_t v78 = v82;
    sub_1000A881C();
    sub_10000BCC4(v78);
    sub_10000BCC4(v53);
    sub_1000A8690();

    swift_release(v86);
    goto LABEL_20;
  }

  __break(1u);
}

uint64_t sub_1000A441C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))( a2,  a1 + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL)),  v5);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return sub_100005FB0(a2, v7, 1LL, v6);
}

uint64_t sub_1000A4494()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010E710);
  sub_100003BA0(v0, (uint64_t)qword_10010E710);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_1000A4504(uint64_t a1, char a2)
{
}

BOOL sub_1000A4528(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1000A4538(uint64_t a1)
{
  char v1 = a1;
  sub_10004FB98(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_100022308();
  sub_100049AA0();
}

void sub_1000A4568()
{
}

void sub_1000A4570(uint64_t a1)
{
}

BOOL sub_1000A4578(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000A4528(*a1, *a2);
}

uint64_t sub_1000A4584(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DaemonSession.LazyState(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_1000A486C(a1);
  if (!result)
  {
    uint64_t result = sub_1000A4A04();
    if (!v1)
    {
      uint64_t result = swift_getAtKeyPath(v5, a1);
      if (v8)
      {
        sub_10002F90C((uint64_t)v5, type metadata accessor for DaemonSession.LazyState);
        return v8;
      }

      else
      {
        __break(1u);
      }
    }
  }

  return result;
}

uint64_t sub_1000A463C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DaemonSession.LazyState(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010C000);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v16 - v12;
  sub_1000A48F8(a1);
  uint64_t v14 = type metadata accessor for InferenceProviderDescriptor(0LL);
  if (sub_1000060B4((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_1000A77AC((uint64_t)v13);
    uint64_t result = sub_1000A4A04();
    if (v2) {
      return result;
    }
    swift_getAtKeyPath(v7, a1);
    uint64_t result = sub_1000060B4((uint64_t)v11, 1LL, v14);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }

    sub_10002F90C((uint64_t)v7, type metadata accessor for DaemonSession.LazyState);
  }

  else
  {
    uint64_t v11 = v13;
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a2, v11, v14);
}

uint64_t sub_1000A47B0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DaemonSession.LazyState(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_1000A4978(a1);
  if (!v7)
  {
    uint64_t result = sub_1000A4A04();
    if (!v1)
    {
      uint64_t result = swift_getAtKeyPath(v5, a1);
      if (v8[1])
      {
        sub_10002F90C((uint64_t)v5, type metadata accessor for DaemonSession.LazyState);
        return v8[0];
      }

      else
      {
        __break(1u);
      }
    }
  }

  return result;
}

uint64_t sub_1000A486C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1000A835C(v4, a1, &v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

void sub_1000A48F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  swift_getAtKeyPath(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1000A4978(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1000A8384(v4, a1, &v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_1000A4A04()
{
  uint64_t result = sub_1000A2E40();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    sub_10000729C( (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog),  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog + 24));
    uint64_t v6 = sub_1000A9BA4(v4, v5);
    sub_1000A2C38(v4, v5, v6);
    swift_bridgeObjectRelease(v5);
    return swift_bridgeObjectRelease(v6);
  }

  return result;
}

uint64_t sub_1000A4ACC(uint64_t a1, uint64_t a2)
{
  return v3;
}

uint64_t sub_1000A4AF8(uint64_t a1, uint64_t a2)
{
  return v3;
}

void sub_1000A4B2C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100003B20(&qword_10010C000);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DaemonSession.LazyState(0LL);
  sub_1000A7764(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  uint64_t v8 = type metadata accessor for InferenceProviderDescriptor(0LL);
  int v9 = sub_1000060B4((uint64_t)v6, 1LL, v8);
  sub_1000A77AC((uint64_t)v6);
  if (v9 == 1)
  {
    if (qword_10010B108 != -1) {
      swift_once(&qword_10010B108, sub_1000A4494);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_100003BA0(v10, (uint64_t)qword_10010E710);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_12;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "Fallback inference provider not allowed: main inference provider not yet selected";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
LABEL_12:

    *a2 = 0LL;
    return;
  }

  if ((*(_BYTE *)(a1 + *(int *)(v7 + 28)) & 1) != 0)
  {
    if (qword_10010B108 != -1) {
      swift_once(&qword_10010B108, sub_1000A4494);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100003BA0(v16, (uint64_t)qword_10010E710);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_12;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "Fallback inference provider not allowed: inference provider selection has been locked";
    goto LABEL_11;
  }

  uint64_t v18 = *(void *)(a1 + 16);
  *a2 = v18;
  swift_bridgeObjectRetain(v18);
}

void sub_1000A4D3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v143 = v21;
  unint64_t v27 = v26;
  uint64_t v138 = v28;
  uint64_t v139 = v20;
  sub_1000229CC();
  sub_100085754();
  __chkstk_darwin(v29);
  sub_10000C110();
  uint64_t v32 = v30 - v31;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v131 - v34;
  uint64_t v36 = sub_1000306E4();
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_10000C120();
  uint64_t v40 = v39 - v38;
  sub_100003B20(&qword_10010C000);
  sub_10000C240();
  __chkstk_darwin(v41);
  sub_100095CF0();
  uint64_t v42 = v143;
  uint64_t v43 = sub_1000A5908();
  if (!v42)
  {
    uint64_t v135 = 0LL;
    uint64_t v136 = v43;
    uint64_t v142 = v35;
    uint64_t v143 = v32;
    uint64_t v137 = v44;
    uint64_t KeyPath = swift_getKeyPath(&unk_1000DA3E0);
    uint64_t v46 = v139;
    sub_1000A48F8(KeyPath);
    swift_release(KeyPath);
    int v47 = sub_1000A8774();
    sub_1000A77AC(v23);
    if (v47 == 1)
    {
      if (qword_10010B108 == -1)
      {
LABEL_4:
        uint64_t v48 = sub_10000BF6C();
        sub_100003BA0(v48, (uint64_t)qword_10010E710);
        uint64_t v49 = sub_1000A8698();
        uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
        os_log_type_t v51 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = v46;
          uint64_t v53 = (uint8_t *)sub_10000BCF4(12LL);
          uint64_t v54 = sub_10000BCF4(32LL);
          a10 = v54;
          *(_DWORD *)uint64_t v53 = 136315138;
          swift_retain();
          sub_1000A75D8();
          uint64_t v55 = sub_100030B98();
          sub_1000A86C8(v55, v56, &a10);
          uint64_t v144 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &a9, v53 + 4);
          sub_10000BCDC(v52);
          sub_100007570();
          _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Session %s hasn't selected an inference provider, no fallback can be selected",  v53,  0xCu);
          swift_arrayDestroy(v54, 1LL);
          sub_10000BCC4(v54);
          sub_10000BCC4((uint64_t)v53);
        }

        else
        {

          sub_10000BCDC(v46);
        }

        unint64_t v88 = sub_1000A83C8();
        uint64_t v89 = sub_1000302B0((uint64_t)&type metadata for DaemonSessionInternalError, v88);
        char v97 = 1;
        goto LABEL_45;
      }

void sub_1000A5670()
{
  uint64_t v7 = &v10[-v6];
  uint64_t v8 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10000BE64(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)v11, 0LL);
  sub_1000A874C(v8, (uint64_t)v7);
  swift_retain();
  uint64_t v9 = sub_1000CB780(v3);
  swift_release(v2);
  swift_release(v9);
  sub_1000A874C((uint64_t)v7, v1);
  sub_10002257C(v8, (uint64_t)v10);
  sub_1000A87C4();
  swift_endAccess(v10);
  sub_1000A88A8();
  sub_100022108();
}

uint64_t sub_1000A574C(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  swift_bridgeObjectRelease(a1[2]);
  a1[2] = 0LL;
  uint64_t v2 = (uint64_t)a1 + *(int *)(type metadata accessor for DaemonSession.LazyState(0LL) + 24);
  sub_1000A77AC(v2);
  uint64_t v3 = type metadata accessor for InferenceProviderDescriptor(0LL);
  return sub_100005FB0(v2, 1LL, 1LL, v3);
}

void sub_1000A57BC( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_100003B20(&qword_10010C000);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1[1])
  {
    *a1 = a2;
    a1[1] = a3;
    uint64_t v15 = a1[2];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(v15);
    a1[2] = a4;
    uint64_t v16 = (uint64_t)a1 + *(int *)(type metadata accessor for DaemonSession.LazyState(0LL) + 24);
    sub_1000A7764(v16, (uint64_t)v14);
    uint64_t v17 = type metadata accessor for InferenceProviderDescriptor(0LL);
    int v18 = sub_1000060B4((uint64_t)v14, 1LL, v17);
    sub_1000A77AC((uint64_t)v14);
    if (v18 == 1)
    {
      sub_1000A77AC(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v16, a5, v17);
      sub_100005FB0(v16, 0LL, 1LL, v17);
    }
  }

  sub_10003C8BC((uint64_t)a1, a6, type metadata accessor for DaemonSession.LazyState);
}

uint64_t sub_1000A5908()
{
  uint64_t v192 = v2;
  uint64_t v193 = v3;
  uint64_t v165 = v1;
  uint64_t v164 = v0;
  uint64_t v5 = v4;
  uint64_t v178 = *(void *)(sub_1000229CC() - 8);
  sub_10000C240();
  __chkstk_darwin(v6);
  sub_10000C110();
  sub_1000A872C();
  __chkstk_darwin(v7);
  sub_1000A872C();
  __chkstk_darwin(v8);
  sub_1000A872C();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v164 - v11;
  __chkstk_darwin(v10);
  uint64_t v170 = (uint64_t)&v164 - v13;
  v191[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(v5 + 56);
  uint64_t v176 = v5 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(v5 + 32);
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v14;
  int64_t v167 = (unint64_t)(v15 + 63) >> 6;
  sub_1000854A0();
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v171 = v5;
  uint64_t v168 = v12;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v177 = (v17 - 1) & v17;
  for (unint64_t i = __clz(__rbit64(v17)) | (v19 << 6); ; unint64_t i = v39 + (v19 << 6))
  {
    uint64_t v40 = sub_1000A88D4(i);
    uint64_t v41 = v170;
    sub_10003C8BC(v40, v170, type metadata accessor for ModelCatalogAsset);
    sub_10000B7B0(v41, (uint64_t)v12);
    uint64_t v42 = swift_bridgeObjectRetain(*((void *)v12 + 3));
    sub_10007233C(v42);
    uint64_t v45 = v43;
    uint64_t v182 = *(void *)(v44 + 16);
    if (v182) {
      break;
    }
    swift_release(v44);
LABEL_86:
    swift_release(v45);
    sub_10002F90C((uint64_t)v12, type metadata accessor for ModelCatalogAsset);
    unint64_t v17 = v177;
    if (v177) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v19, 1LL)) {
      goto LABEL_133;
    }
    if (v19 + 1 >= v167)
    {
LABEL_88:
      sub_100030B98();
      uint64_t v95 = v191[0];
      sub_100022404();
      uint64_t v97 = -1LL;
      if (v96 < 64) {
        uint64_t v97 = ~(-1LL << v96);
      }
      unint64_t v98 = v97 & *(void *)(v5 + 56);
      int64_t v99 = (unint64_t)(v96 + 63) >> 6;
      sub_1000854A0();
      swift_retain(v18);
      swift_retain(v95);
      int64_t v100 = 0LL;
      uint64_t v182 = v95;
      uint64_t v183 = v18;
      uint64_t v184 = v95;
      uint64_t v101 = v172;
      if (!v98) {
        goto LABEL_92;
      }
LABEL_91:
      unint64_t v102 = __clz(__rbit64(v98));
      v98 &= v98 - 1;
      for (uint64_t j = v102 | (v100 << 6); ; uint64_t j = v120 + (v100 << 6))
      {
        uint64_t v121 = sub_1000A88D4(j);
        uint64_t v122 = v169;
        sub_10003C8BC(v121, v169, type metadata accessor for ModelCatalogAsset);
        sub_10000B7B0(v122, v101);
        uint64_t v123 = swift_bridgeObjectRetain(*(void *)(v101 + 24));
        sub_10007233C(v123);
        uint64_t v19 = v124;
        uint64_t v183 = sub_1000A8120(v125, v124, v183, v184);
        uint64_t v184 = v126;
        swift_release(v19);
        sub_10000C1F0();
        sub_10002F90C(v101, type metadata accessor for ModelCatalogAsset);
        if (v98) {
          goto LABEL_91;
        }
LABEL_92:
        if (__OFADD__(v100, 1LL)) {
          goto LABEL_134;
        }
        if (v100 + 1 >= v99) {
          break;
        }
        sub_1000A8638();
        int64_t v100 = v104;
        if (!v105)
        {
          int64_t v100 = v104 + 1;
          if (v104 + 1 >= v99) {
            break;
          }
          sub_1000A8618();
          if (!v107)
          {
            int64_t v100 = v106 + 2;
            if (v106 + 2 >= v99) {
              break;
            }
            sub_1000A8618();
            if (!v109)
            {
              int64_t v100 = v108 + 3;
              if (v108 + 3 >= v99) {
                break;
              }
              sub_1000A8618();
              if (!v111)
              {
                int64_t v100 = v110 + 4;
                if (v110 + 4 >= v99) {
                  break;
                }
                sub_1000A8618();
                if (!v113)
                {
                  if (v112 + 5 >= v99) {
                    break;
                  }
                  sub_1000A8638();
                  if (!v115)
                  {
                    while (1)
                    {
                      int64_t v100 = v114 + 1;
                      if (__OFADD__(v114, 1LL)) {
                        goto LABEL_139;
                      }
                      if (v100 >= v99) {
                        goto LABEL_112;
                      }
                      sub_1000A8618();
                      int64_t v114 = v116 + 1;
                      if (v117) {
                        goto LABEL_109;
                      }
                    }
                  }

                  int64_t v100 = v114;
                }
              }
            }
          }
        }

LABEL_109:
        sub_1000A87A4();
        unint64_t v98 = v119 & v118;
      }

LABEL_112:
      sub_100030B98();
      if (*(void *)(v184 + 16))
      {
        sub_1000A2990(v183, v184);
        uint64_t v19 = sub_1000720E4();
        sub_10000C1F0();
        swift_release(v182);
        sub_1000228B4();
        sub_100021DDC();
        return v19;
      }

      uint64_t v127 = *(void *)(v5 + 16);
      uint64_t v128 = _swiftEmptyArrayStorage;
      if (v127)
      {
        uint64_t v179 = v18;
        v191[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000A8724(0, v127);
        uint64_t v19 = sub_100020E24(v5);
        sub_1000A86A4();
        while ((v19 & 0x8000000000000000LL) == 0)
        {
          sub_100022404();
          if (v19 >= v129) {
            break;
          }
          if (*(_DWORD *)(v171 + 36) != (_DWORD)v5) {
            goto LABEL_137;
          }
          uint64_t v130 = v172;
          sub_10003C8BC( *(void *)(v171 + 48) + *(void *)(v178 + 72) * v19,  v172,  type metadata accessor for ModelCatalogAsset);
          uint64_t v131 = v166;
          sub_10000B7B0(v130, (uint64_t)v166);
          uint64_t v132 = *v131;
          uint64_t v133 = v131[1];
          swift_bridgeObjectRetain(v133);
          sub_10002F90C((uint64_t)v131, type metadata accessor for ModelCatalogAsset);
          uint64_t v128 = (void *)v191[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v191[0]) & 1) == 0)
          {
            sub_10000BDA4(0, v128[2] + 1LL);
            uint64_t v128 = (void *)v191[0];
          }

          unint64_t v135 = v128[2];
          unint64_t v134 = v128[3];
          if (v135 >= v134 >> 1)
          {
            sub_10000BDA4(v134 > 1, v135 + 1);
            uint64_t v128 = (void *)v191[0];
          }

          v128[2] = v135 + 1;
          uint64_t v136 = &v128[2 * v135];
          v136[4] = v132;
          v136[5] = v133;
          uint64_t v19 = sub_100020D3C(v19, v5, v101 & 1, v171);
          sub_1000A86A4();
          if (!--v127)
          {
            sub_1000A86BC(v19);
            goto LABEL_126;
          }
        }

        goto LABEL_135;
      }

LABEL_126:
      sub_10001137C((uint64_t)v128);
      uint64_t v19 = v137;
      if (qword_10010B108 != -1) {
        goto LABEL_140;
      }
      goto LABEL_127;
    }

    sub_1000A8638();
    uint64_t v19 = v21;
    if (!v22)
    {
      uint64_t v19 = v21 + 1;
      sub_1000A8628();
      if (v23 == v24) {
        goto LABEL_88;
      }
      sub_1000A8608();
      if (!v26)
      {
        uint64_t v19 = v25 + 2;
        sub_1000A8628();
        if (v23 == v24) {
          goto LABEL_88;
        }
        sub_1000A8608();
        if (!v28)
        {
          uint64_t v19 = v27 + 3;
          sub_1000A8628();
          if (v23 == v24) {
            goto LABEL_88;
          }
          sub_1000A8608();
          if (!v30)
          {
            uint64_t v19 = v29 + 4;
            sub_1000A8628();
            if (v23 == v24) {
              goto LABEL_88;
            }
            sub_1000A8608();
            if (!v32)
            {
              if (v31 + 5 >= v167) {
                goto LABEL_88;
              }
              sub_1000A8638();
              if (!v34)
              {
                while (1)
                {
                  uint64_t v19 = v33 + 1;
                  if (__OFADD__(v33, 1LL)) {
                    goto LABEL_138;
                  }
                  sub_1000A8628();
                  if (v23 == v24) {
                    goto LABEL_88;
                  }
                  sub_1000A8608();
                  uint64_t v33 = v35 + 1;
                  if (v36) {
                    goto LABEL_28;
                  }
                }
              }

              uint64_t v19 = v33;
            }
          }
        }
      }
    }

          swift_release();
          sub_1000D08E4();
          sub_10000C140();
          sub_10000BFE4();
          sub_10000C1B8();
          sub_10002294C();
          sub_10002FF04();
          sub_1000D014C((uint64_t (*)(void))v1[1]);
          return;
        }
      }
    }

LABEL_78:
      uint64_t v91 = static _HashTable.scale(forCapacity:)(v72);
      if (v76 <= v91) {
        uint64_t v92 = v91;
      }
      else {
        uint64_t v92 = v76;
      }
      sub_1000CCB2C(v52, v92, 0, v76);
      uint64_t v94 = v93;
      sub_1000228B4();
      uint64_t v18 = v94;
      goto LABEL_82;
    }

    if ((((uint64_t (*)(uint64_t))swift_isUniquelyReferenced_native)(v18) & 1) != 0)
    {
      uint64_t v47 = v69;
    }

    else
    {
      uint64_t v78 = ((uint64_t (*)(uint64_t))_HashTable.copy())(v18);
      uint64_t result = sub_1000228B4();
      if (!v78)
      {
        __break(1u);
        return result;
      }

      uint64_t v47 = v69;
      uint64_t v18 = v78;
    }

    uint64_t v80 = -1LL << *(void *)(v18 + 16);
    uint64_t v81 = v80 + 1;
    uint64_t v82 = *(void *)(v52 + 16) + ~(*(uint64_t *)(v18 + 24) >> 6);
    unint64_t v83 = v80 ^ ~(((v82 >> 63) & ~v80) + v82);
    uint64_t v84 = (*(void *)(v18 + 16) & 0x3FLL) * v19;
    uint64_t v85 = v84 >> 6;
    *(void *)(v18 + 32 + 8 * (v84 >> 6)) = (v83 << v84) | ((v81 << v84) - 1) & *(void *)(v18 + 32 + 8 * (v84 >> 6));
    unint64_t v86 = 64 - (v84 & 0x3F);
    uint64_t v87 = *(void *)(v18 + 16);
LABEL_82:
    sub_100082ABC((uint64_t)&v190);
    swift_bridgeObjectRelease(v51);
LABEL_83:
    if (++v47 == v182)
    {
      sub_10000BCDC(v173);
      uint64_t v45 = v174;
      swift_release(v174);
      uint64_t v5 = v171;
      uint64_t v12 = v168;
      uint64_t v19 = v175;
      goto LABEL_86;
    }
  }

  uint64_t v88 = (v87 & 0x3F) << (v87 & 0x3F);
  BOOL v24 = __OFADD__(v88, 64LL);
  uint64_t v89 = v88 + 64;
  if (!v24)
  {
    if (v85 + 1 == (v89 - 1) / 64) {
      uint64_t v90 = 0LL;
    }
    else {
      uint64_t v90 = v85 + 1;
    }
    *(void *)(v18 + 32 + 8 * v90) = *(void *)(v18 + 32 + 8 * v90) & (-1LL << (v87
                                                                                - v86)) | (v83 >> v86);
    goto LABEL_82;
  }

  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  swift_once(&qword_10010B108, sub_1000A4494);
LABEL_127:
  uint64_t v138 = sub_10000BF6C();
  sub_1000A8874(v138, (uint64_t)qword_10010E710);
  uint64_t v139 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v140 = (os_log_s *)Logger.logObject.getter(v139);
  os_log_type_t v141 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v140, v141))
  {
    uint64_t v142 = sub_10000BCF4(22LL);
    uint64_t v181 = sub_10000BCF4(64LL);
    v191[0] = v181;
    *(_DWORD *)uint64_t v142 = 136315394;
    uint64_t v143 = ((uint64_t (*)(uint64_t, void))_typeName(_:qualified:))(v164, 0LL);
    sub_100015EF8(v143, v144, v191);
    uint64_t v185 = v145;
    sub_1000A86FC();
    sub_100007570();
    *(_WORD *)(v142 + 12) = 2080;
    uint64_t v146 = swift_bridgeObjectRetain(v19);
    uint64_t v147 = Set.description.getter(v146, &type metadata for String, &protocol witness table for String);
    uint64_t v149 = v148;
    swift_bridgeObjectRelease(v19);
    sub_100015EF8(v147, v149, v191);
    uint64_t v185 = v150;
    sub_1000A86FC();
    sub_10000C1B0(v19);
    swift_bridgeObjectRelease(v149);
    sub_10000BFDC( (void *)&_mh_execute_header,  v140,  v141,  "Session %s assets %s don't have a common inference provider",  (uint8_t *)v142);
    uint64_t v151 = v181;
    sub_1000A86D4();
    sub_10000BCC4(v151);
    sub_10000BCC4(v142);
  }

  else
  {

    sub_10000C1B0(v19);
  }

  uint64_t v152 = v183;
  uint64_t v153 = sub_1000305BC();
  sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_1000302B0(v153, v154);
  *uint64_t v155 = v19;
  uint64_t v156 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v153 - 8) + 104LL))( v155,  enum case for ModelManagerError.noCommonInferenceProviderForAssets(_:),  v153);
  swift_willThrow(v156, v157, v158, v159, v160, v161, v162, v163);
  sub_100021DDC();
  sub_1000228B4();
  swift_release(v184);
  swift_release(v152);
  return v19;
}

uint64_t sub_1000A6528(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for DaemonSession.LazyState(0LL);
  uint64_t v5 = *(int *)(result + 28);
  if ((*(_BYTE *)(a1 + v5) & 1) == 0)
  {
    *(_BYTE *)(a1 + sub_100095EC0(v4, v5) = 1;
    uint64_t v6 = a1 + *(int *)(result + 24);
    sub_1000A77AC(v6);
    uint64_t v7 = type metadata accessor for InferenceProviderDescriptor(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a2, v7);
    return sub_100005FB0(v6, 0LL, 1LL, v7);
  }

  return result;
}

uint64_t sub_1000A65BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100003B20(&qword_10010B408);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  RequestMetadata.id.getter(v5);
  uint64_t v8 = type metadata accessor for RequestMetadata(0LL);
  char v9 = static UUIDIdentifier.== infix(_:_:)(v7, a2, v8, &protocol witness table for RequestMetadata);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v9 & 1;
}

void sub_1000A6688()
{
  uint64_t v1 = type metadata accessor for Session.Metadata(0LL);
  sub_1000220F4(v1);
  uint64_t v2 = type metadata accessor for AuditToken(0LL);
  sub_1000220F4(v2);
  sub_100006F7C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog));
  swift_release();
  sub_10002F90C( v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState,  type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_release();
  sub_1000075C0();
}

uint64_t sub_1000A6718()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for DaemonSession(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010E750, (uint64_t)&nominal type descriptor for DaemonSession);
}

uint64_t sub_1000A6750(uint64_t a1)
{
  uint64_t result = type metadata accessor for Session.Metadata(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AuditToken(319LL);
    if (v4 <= 0x3F)
    {
      v6[1] = *(void *)(result - 8) + 64LL;
      v6[2] = "(";
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      uint64_t result = type metadata accessor for DaemonSession.ManagerOwnedState(319LL);
      if (v5 <= 0x3F)
      {
        v6[4] = *(void *)(result - 8) + 64LL;
        v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
        return swift_updateClassMetadata2(a1, 256LL, 6LL, v6, a1 + 80);
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for DaemonSession.ManagerOwnedState(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010E8F8, (uint64_t)&nominal type descriptor for DaemonSession.ManagerOwnedState);
}

void *sub_1000A681C(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for InferenceProviderDescriptor(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (sub_1000060B4((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_100003B20(&qword_10010C000);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      sub_100005FB0((uint64_t)v10, 0LL, 1LL, v12);
    }

    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }

  return v4;
}

uint64_t sub_1000A6930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t result = sub_1000060B4(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

void *sub_1000A69A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for InferenceProviderDescriptor(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (sub_1000060B4((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_100003B20(&qword_10010C000);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    sub_100005FB0((uint64_t)v9, 0LL, 1LL, v11);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

void *sub_1000A6A8C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for InferenceProviderDescriptor(0LL);
  int v14 = sub_1000060B4((uint64_t)v11, 1LL, v13);
  int v15 = sub_1000060B4((uint64_t)v12, 1LL, v13);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v17 = sub_100003B20(&qword_10010C000);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  sub_100005FB0((uint64_t)v11, 0LL, 1LL, v13);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1000A6BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor(0LL);
  if (sub_1000060B4((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_100003B20(&qword_10010C000);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100005FB0((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void *sub_1000A6CA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for InferenceProviderDescriptor(0LL);
  int v13 = sub_1000060B4((uint64_t)v10, 1LL, v12);
  int v14 = sub_1000060B4((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_100003B20(&qword_10010C000);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  sub_100005FB0((uint64_t)v10, 0LL, 1LL, v12);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1000A6DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A6DE0);
}

void sub_1000A6DE0(uint64_t a1, int a2)
{
  if (a2 == 2147483646)
  {
    sub_1000A8860();
    sub_10004E1F0();
  }

  else
  {
    sub_100003B20(&qword_10010C000);
    uint64_t v2 = sub_1000A87D0();
    sub_10004FB20(v2, v3, v4);
  }

uint64_t sub_1000A6E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A6E48);
}

void sub_1000A6E48(uint64_t a1, unsigned int a2, int a3)
{
  if (a3 == 2147483646)
  {
    *(void *)(a1 + 8) = a2;
    sub_10004E1F0();
  }

  else
  {
    sub_100003B20(&qword_10010C000);
    uint64_t v3 = sub_1000A870C();
    sub_100021FBC(v3, v4, v5, v6);
  }

uint64_t type metadata accessor for DaemonSession.LazyState(uint64_t a1)
{
  return sub_100047EF0(a1, (uint64_t *)&unk_10010E858, (uint64_t)&nominal type descriptor for DaemonSession.LazyState);
}

void sub_1000A6EAC(uint64_t a1)
{
  v4[0] = &unk_1000DA2B0;
  v4[1] = &unk_1000DA2C8;
  sub_1000A6F30(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    v4[3] = &unk_1000DA2E0;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

void sub_1000A6F30(uint64_t a1)
{
  if (!qword_10010E868)
  {
    uint64_t v2 = type metadata accessor for InferenceProviderDescriptor(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10010E868);
    }
  }

uint64_t *sub_1000A6F84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = a2[1];
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for DaemonSessionState(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_1000A7028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for DaemonSessionState(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1000A7070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for DaemonSessionState(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1000A70E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DaemonSessionState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000A7164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DaemonSessionState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000A71C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DaemonSessionState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000A723C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A7248);
}

void sub_1000A7248(uint64_t a1, int a2)
{
  if (a2 == 0x7FFFFFFF)
  {
    sub_1000A8860();
    sub_10004E1F0();
  }

  else
  {
    sub_1000A8840();
    uint64_t v2 = sub_1000A87D0();
    sub_10004FB20(v2, v3, v4);
  }

uint64_t sub_1000A7290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A729C);
}

void sub_1000A729C(uint64_t a1, int a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_10004E1F0();
  }

  else
  {
    sub_1000A8840();
    uint64_t v3 = sub_1000A870C();
    sub_100021FBC(v3, v4, v5, v6);
  }

uint64_t sub_1000A72E4(uint64_t a1)
{
  v4[0] = &unk_1000DA2E0;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for DaemonSessionState(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_1000A7364()
{
}

uint64_t sub_1000A7390()
{
  uint64_t v1 = sub_100003B20(&qword_10010B9A0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100007508();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = Session.Metadata.id.getter(v4);
  Session.Metadata.id.getter(v7);
  uint64_t v8 = type metadata accessor for Session(0LL);
  char v9 = static UUIDIdentifier.== infix(_:_:)(v6, v0, v8, &protocol witness table for Session);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0, v1);
  v10((uint64_t)v6, v1);
  return v9 & 1;
}

uint64_t sub_1000A7478(uint64_t a1)
{
  uint64_t v3 = sub_100003B20(&qword_10010B9A0);
  sub_100085754();
  __chkstk_darwin(v4);
  sub_10000C120();
  uint64_t v7 = v6 - v5;
  Session.Metadata.id.getter(v8);
  sub_1000A772C(&qword_10010B9C0);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v7, v3);
}

void sub_1000A7520(uint64_t a1)
{
}

void sub_1000A7548(uint64_t a1)
{
}

uint64_t sub_1000A7568(uint64_t a1)
{
  return sub_1000A7478(a1);
}

void sub_1000A7588(uint64_t a1)
{
}

uint64_t sub_1000A75B8()
{
  return sub_1000A7390() & 1;
}

uint64_t sub_1000A75D8()
{
  uint64_t v0 = sub_100003B20(&qword_10010B9A0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10000C120();
  uint64_t v4 = v3 - v2;
  Session.Metadata.id.getter(v5);
  sub_1000A772C(&qword_10010BFE0);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  v9._countAndFlagsBits = 58LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = Session.Metadata.loggingIdentifier.getter();
  uint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 41LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 40LL;
}

uint64_t sub_1000A76E0()
{
  return sub_1000A75D8();
}

void sub_1000A7700()
{
}

void sub_1000A772C(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_10000603C(&qword_10010B9A0);
    atomic_store(sub_1000075DC(v2), a1);
  }

  sub_1000075C0();
}

uint64_t sub_1000A7764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010C000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A77AC(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010C000);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1000A77EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000CD66C(v2);
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1000A7854(v5);
  *a1 = v2;
}

void sub_1000A7854(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1000A7EB8(0LL, v3, 1LL, a1);
      }
      return;
    }

LABEL_145:
    __break(1u);
    goto LABEL_146;
  }

  Swift::Int v5 = v4;
  sub_100003A3C(v3 / 2);
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  uint64_t v106 = v7;
  unint64_t v102 = a1;
  if (v3 > 0)
  {
    Swift::Int v103 = v5;
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v101 = *a1 + 8;
    uint64_t v107 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::Int v10 = v8++;
      if (v8 >= v3) {
        goto LABEL_32;
      }
      uint64_t v11 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      int v14 = (void *)(v9 + 16 * v10);
      uint64_t v15 = v14[1];
      if (v12 == *v14 && v13 == v15) {
        break;
      }
      int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 < v3) {
        goto LABEL_13;
      }
LABEL_23:
      Swift::Int v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      if (v18 < v10) {
        goto LABEL_149;
      }
      if (v10 < v18)
      {
        uint64_t v26 = 16 * v18;
        uint64_t v27 = 16 * v10;
        Swift::Int v28 = v18;
        Swift::Int v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9) {
              goto LABEL_153;
            }
            uint64_t v30 = v9 + v26;
            uint64_t v31 = *(void *)(v9 + v27);
            uint64_t v32 = *(void *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(void *)(v30 - sub_10002FFE4((uint64_t)v1, v0 + 16) = v31;
            *(void *)(v30 - 8) = v32;
          }

          ++v29;
          v26 -= 16LL;
          v27 += 16LL;
        }

        while (v29 < v28);
      }

LABEL_73:
          if ((v63 & 1) != 0) {
            goto LABEL_134;
          }
          unint64_t v71 = &v38[16 * v40];
          uint64_t v73 = *(void *)v71;
          uint64_t v72 = *((void *)v71 + 1);
          BOOL v51 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v51) {
            goto LABEL_136;
          }
          if (v74 < v62) {
            goto LABEL_90;
          }
LABEL_81:
          unint64_t v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }

          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v80 = &v38[16 * v79];
          uint64_t v81 = *(void *)v80;
          uint64_t v82 = &v38[16 * v40];
          uint64_t v83 = *((void *)v82 + 1);
          sub_1000A7F7C((char *)(v9 + 16LL * *(void *)v80), (char *)(v9 + 16LL * *(void *)v82), v9 + 16 * v83, v106);
          if (v1)
          {
            uint64_t v94 = v107;
LABEL_107:
            swift_bridgeObjectRelease(v94);
            if (v105 >= -1)
            {
              *(void *)(v104 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
              swift_bridgeObjectRelease(v104);
              return;
            }

LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }

          if (v83 < v81) {
            goto LABEL_125;
          }
          if (v40 > *((void *)v107 + 2)) {
            goto LABEL_126;
          }
          *(void *)uint64_t v80 = v81;
          *(void *)&v38[16 * v79 + 8] = v83;
          unint64_t v84 = *((void *)v107 + 2);
          if (v40 >= v84) {
            goto LABEL_127;
          }
          uint64_t v34 = v107;
          unint64_t v37 = v84 - 1;
          memmove(&v38[16 * v40], v82 + 16, 16 * (v84 - 1 - v40));
          *((void *)v107 + 2) = v84 - 1;
          if (v84 <= 2) {
            goto LABEL_90;
          }
        }
      }

      unint64_t v37 = 1LL;
LABEL_90:
      Swift::Int v3 = v105;
      if (v8 >= v105) {
        goto LABEL_111;
      }
    }

    Swift::Int v18 = v10 + 2;
    if (v10 + 2 >= v3) {
      goto LABEL_31;
    }
    int v17 = 0;
LABEL_13:
    uint64_t v19 = (uint64_t *)(v101 + 16 * v18);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      uint64_t v22 = (void *)(v9 + 16 * v8);
      uint64_t v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0) {
          goto LABEL_24;
        }
      }

      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
      {
        goto LABEL_23;
      }

      v19 += 2;
      Swift::Int v25 = v18 + 1;
      Swift::Int v8 = v18;
      Swift::Int v18 = v25;
    }

    while (v25 < v3);
    Swift::Int v18 = v25;
    goto LABEL_23;
  }

  uint64_t v107 = (char *)_swiftEmptyArrayStorage;
  unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    uint64_t v95 = *v102;
    while (1)
    {
      unint64_t v96 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v95) {
        goto LABEL_154;
      }
      uint64_t v94 = v107;
      uint64_t v97 = *(void *)&v107[16 * v96 + 32];
      uint64_t v98 = *(void *)&v107[16 * v37 + 24];
      sub_1000A7F7C( (char *)(v95 + 16 * v97),  (char *)(v95 + 16LL * *(void *)&v107[16 * v37 + 16]),  v95 + 16 * v98,  v106);
      if (v1) {
        goto LABEL_107;
      }
      if (v98 < v97) {
        goto LABEL_140;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0) {
        uint64_t v94 = sub_10007F3C0((uint64_t)v107);
      }
      if (v96 >= *((void *)v94 + 2)) {
        goto LABEL_141;
      }
      int64_t v99 = &v94[16 * v96 + 32];
      *(void *)int64_t v99 = v97;
      *((void *)v99 + 1) = v98;
      unint64_t v100 = *((void *)v94 + 2);
      if (v37 > v100) {
        goto LABEL_142;
      }
      memmove(&v94[16 * v37 + 16], &v94[16 * v37 + 32], 16 * (v100 - v37));
      uint64_t v107 = v94;
      *((void *)v94 + 2) = v100 - 1;
      unint64_t v37 = v100 - 1;
      Swift::Int v3 = v105;
      if (v100 <= 2) {
        goto LABEL_122;
      }
    }

LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

LABEL_122:
  swift_bridgeObjectRelease(v107);
  if (v3 < -1) {
    goto LABEL_150;
  }
  *(void *)(v104 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
  swift_bridgeObjectRelease(v104);
}

uint64_t sub_1000A7EB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_1000A7F7C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_100015830(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      BOOL v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        BOOL v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_100015830(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      int v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    int v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

uint64_t sub_1000A8120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v38 = *(void *)(a4 + 16);
  if (v38)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    uint64_t v33 = a2 + 32;
    uint64_t v34 = a4 + 32;
    uint64_t v31 = a1 + 32;
    uint64_t v32 = (void *)(a1 + 16);
    swift_retain(a3);
    uint64_t result = swift_retain(v4);
    unint64_t v9 = 0LL;
    uint64_t v30 = (unsigned __int8 *)(v6 + 64);
    uint64_t v35 = v7;
    uint64_t v36 = v6;
    uint64_t v37 = v4;
    while (v9 < *(void *)(v4 + 16))
    {
      uint64_t v10 = (uint64_t *)(v34 + 40 * v9);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      uint64_t v14 = v10[3];
      int v15 = *((unsigned __int8 *)v10 + 32);
      uint64_t v16 = *(void *)(v6 + 16);
      v40[0] = v11;
      v40[1] = v12;
      v40[2] = v13;
      v40[3] = v14;
      char v41 = v15;
      if (v7)
      {
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v12);
        swift_retain(v7);
        sub_1000CC6A4((uint64_t)v40, v33, v16, v32, v31, v17, v18, v19);
        char v21 = v20;
        swift_release(v7);
        if ((v21 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_30;
      }

      int v39 = v15;
      if (v16)
      {
        uint64_t v22 = v30;
        while (1)
        {
          uint64_t result = *((void *)v22 - 4);
          uint64_t v23 = *((void *)v22 - 3);
          uint64_t v25 = *((void *)v22 - 2);
          uint64_t v24 = *((void *)v22 - 1);
          int v26 = *v22;
          if (result != v11 || v23 != v12)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v23, v11, v12, 0LL);
            if ((result & 1) == 0) {
              goto LABEL_26;
            }
          }

          if (!v24) {
            break;
          }
          if (!v14) {
            goto LABEL_26;
          }
          if (v25 != v13 || v24 != v14)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, v13, v14, 0LL);
            if ((result & 1) == 0) {
              goto LABEL_26;
            }
LABEL_23:
            if (((v39 ^ v26) & 1) == 0) {
              goto LABEL_28;
            }
            goto LABEL_26;
          }

          if (v39 == v26)
          {
LABEL_28:
            swift_bridgeObjectRetain(v12);
            swift_bridgeObjectRetain(v14);
LABEL_29:
            sub_100080D20((uint64_t)v40);
LABEL_30:
            swift_bridgeObjectRelease(v14);
            uint64_t result = swift_bridgeObjectRelease(v12);
            goto LABEL_31;
          }

uint64_t sub_1000A835C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1000A4ACC(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1000A8384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1000A4AF8(a1, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
  }

  return result;
}

uint64_t sub_1000A83AC(uint64_t a1)
{
  return sub_1000A65BC(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t sub_1000A83C8()
{
  unint64_t result = qword_10010E980;
  if (!qword_10010E980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA4A4, &type metadata for DaemonSessionInternalError);
    atomic_store(result, &qword_10010E980);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DaemonSessionInternalError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for DaemonSessionInternalError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000A84D8 + 4 * byte_1000DA265[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A850C + 4 * byte_1000DA260[v4]))();
}

uint64_t sub_1000A850C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A851CLL);
  }
  return result;
}

uint64_t sub_1000A8528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A8530LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000A8534(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A853C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000A8548(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DaemonSessionInternalError()
{
  return &type metadata for DaemonSessionInternalError;
}

unint64_t sub_1000A8568()
{
  unint64_t result = qword_10010E990;
  if (!qword_10010E990)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA43C, &type metadata for DaemonSessionInternalError);
    atomic_store(result, (unint64_t *)&qword_10010E990);
  }

  return result;
}

uint64_t sub_1000A85A4()
{
  return sub_1000212AC(*(void *)(v0 + 208));
}

  ;
}

uint64_t sub_1000A85EC(uint64_t a1, uint64_t a2)
{
  return sub_1000D2DDC(a1, a2);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000A8648@<X0>(uint64_t a1@<X8>)
{
  return swift_dynamicCast(v1, v2, a1 + 8, v3, 7LL);
}

uint64_t sub_1000A8660()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40))(v3 + *(int *)(v0 + 24), v2, v4);
}

uint64_t sub_1000A8678(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return type metadata accessor for DaemonRequest(0LL);
}

uint64_t sub_1000A8690()
{
  return swift_release(*(void *)(v0 - 144));
}

uint64_t sub_1000A8698()
{
  return swift_retain_n(v0, 2LL);
}

  ;
}

uint64_t sub_1000A86B0()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000A86BC(uint64_t a1)
{
  return sub_10000B830(a1, v1, v2);
}

void sub_1000A86C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000A86D4()
{
  return swift_arrayDestroy(v0, 2LL);
}

  ;
}

uint64_t sub_1000A86FC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 200, v1, v0);
}

uint64_t sub_1000A870C()
{
  return v0 + *(int *)(v1 + 24);
}

void sub_1000A8724(char a1, uint64_t a2)
{
}

void sub_1000A872C()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1000A873C()
{
  *(void *)(v1 - 88) = v0;
  return 0LL;
}

void sub_1000A874C(uint64_t a1, uint64_t a2)
{
}

void sub_1000A8754()
{
}

uint64_t sub_1000A8764(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1000A8774()
{
  return sub_1000060B4(v1, 1LL, v0);
}

uint64_t sub_1000A8784()
{
  return type metadata accessor for DaemonSession.ManagerOwnedState(0LL);
}

uint64_t sub_1000A8794(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

  ;
}

void sub_1000A87B4()
{
}

uint64_t sub_1000A87C4()
{
  return sub_10002F80C(v0, v1);
}

uint64_t sub_1000A87D0()
{
  return v0 + *(int *)(v1 + 24);
}

uint64_t sub_1000A87E4(uint64_t a1, uint64_t a2)
{
  return v3(v4, a2, v2);
}

uint64_t sub_1000A87F0(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_1000A87FC()
{
  return sub_100082A94(v0 - 112);
}

uint64_t sub_1000A8804()
{
  return sub_10002F80C(v0, v1);
}

uint64_t sub_1000A8810()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_1000A881C()
{
  return swift_arrayDestroy(v0, 3LL);
}

uint64_t sub_1000A8828(uint64_t a1, uint64_t a2)
{
  return v4(v2, a2, v3);
}

void sub_1000A8834()
{
}

uint64_t sub_1000A8840()
{
  return type metadata accessor for DaemonSessionState(0LL);
}

uint64_t sub_1000A8848()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000A8854()
{
  return swift_unknownObjectRetain(v0);
}

  ;
}

uint64_t sub_1000A8874(uint64_t a1, uint64_t a2)
{
  return sub_100003BA0(a1, a2);
}

uint64_t sub_1000A8888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100020D3C(a1, a2, a3, *(void *)(v3 - 112));
}

uint64_t sub_1000A8894@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_1000A88A8()
{
}

void sub_1000A88B4()
{
  *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v3;
  uint64_t v5 = v0 + 16 * v2;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v4;
}

void sub_1000A88C8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000A88D4@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + 48) + *(void *)(*(void *)(v2 - 256) + 72LL) * a1;
}

uint64_t initializeBufferWithCopyOfBuffer for DaemonInferenceMonitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  swift_retain(v3);
  return a1;
}

uint64_t destroy for DaemonInferenceMonitor(void *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for DaemonInferenceMonitor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t initializeWithTake for DaemonInferenceMonitor(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for DaemonInferenceMonitor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonInferenceMonitor(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 12))
    {
      LODWORD(sub_10003C8BC(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10003C8BC(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonInferenceMonitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DaemonInferenceMonitor()
{
  return &type metadata for DaemonInferenceMonitor;
}

char *sub_1000A8A50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCEndpoint(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v7 = type metadata accessor for XPCSession.InitializationOptions(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static XPCSession.InitializationOptions.none.getter(v8);
  uint64_t v11 = XPCSession.__allocating_init(endpoint:targetQueue:options:cancellationHandler:)(v6, 0LL, v10, 0LL, 0LL);
  if (!v1)
  {
    unsigned int v6 = (char *)v11;
    AuditToken.processIdentifier.getter(v11);
  }

  uint64_t v12 = type metadata accessor for AuditToken(0LL);
  sub_1000A8C7C(v12);
  sub_1000A8C90();
  return v6;
}

BOOL sub_1000A8B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

void sub_1000A8B94(int a1, Swift::UInt a2)
{
}

void sub_1000A8BB8()
{
  int v0 = Hasher.init(_seed:)(v9, 0LL);
  sub_1000A8CA0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9[0]);
  Hasher._finalize()();
  sub_100049AA0();
}

void sub_1000A8BEC()
{
}

void sub_1000A8BF4(int a1)
{
}

void sub_1000A8BFC(uint64_t a1)
{
  int v1 = Hasher.init(_seed:)(v10, a1);
  sub_1000A8CA0(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  Hasher._finalize()();
  sub_100049AA0();
}

BOOL sub_1000A8C2C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000A8B88(*a1, (uint64_t)a2, *a2);
}

unint64_t sub_1000A8C3C()
{
  unint64_t result = qword_10010E998;
  if (!qword_10010E998)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA508, &type metadata for DaemonInferenceMonitor);
    atomic_store(result, (unint64_t *)&qword_10010E998);
  }

  return result;
}

uint64_t sub_1000A8C7C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000A8C90()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_1000A8CA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_1000A8CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_100016C60();
    uint64_t v11 = v17;
    for (unint64_t i = (void *)(a1 + 32); ; i += 5)
    {
      sub_1000AA5A8(i, a2, &v16);
      if (v3) {
        break;
      }
      uint64_t v3 = 0LL;
      uint64_t v17 = v11;
      unint64_t v13 = v11[2];
      if (v13 >= v11[3] >> 1)
      {
        sub_100016C60();
        uint64_t v11 = v17;
      }

      v11[2] = v13 + 1;
      sub_1000B3D84( (uint64_t)v9,  (uint64_t)v11 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v13,
        type metadata accessor for ModelCatalogAsset);
      if (!--v10)
      {
        swift_release(a2);
        return v11;
      }
    }

    swift_release(a2);
    swift_release(v11);
  }

  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  return v11;
}

void *sub_1000A8E28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100016BD0(0, v1, 0);
    uint64_t v3 = (void *)(a1 + 32);
    do
    {
      uint64_t v5 = v3[3];
      uint64_t v4 = v3[4];
      sub_10000729C(v3, v5);
      uint64_t v6 = dispatch thunk of CatalogResource.id.getter(v5, *(void *)(v4 + 8));
      uint64_t v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_100016BD0(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_100016BD0(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v3 += 5;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A8F40(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_10003CE0C();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000A8F60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = *(void *)(v16 + 40);
  uint64_t v18 = swift_task_alloc(48LL);
  *(void *)(v16 + 48) = v18;
  __int128 v19 = *(_OWORD *)(v16 + 24);
  *(void *)(v18 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v17;
  *(_OWORD *)(v18 + 2sub_100006F7C(v0 + 4) = v19;
  char v20 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v16 + 56) = v20;
  sub_100003B20(&qword_10010ED30);
  *char v20 = v16;
  v20[1] = sub_1000A900C;
  sub_1000B4798();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v21,  v22,  v23,  v24,  v25,  v26,  v18,  v27,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16);
}

uint64_t sub_1000A900C()
{
  if (v1)
  {
    sub_10003CE0C();
    return sub_10000BCD0();
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 48));
    return (*(uint64_t (**)(void))(v2 + 8))(*(void *)(v0 + 16));
  }

uint64_t sub_1000A905C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(sub_1000A90AC, 0LL, 0LL);
}

uint64_t sub_1000A90AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = *(void *)(v16 + 40);
  uint64_t v18 = swift_task_alloc(48LL);
  *(void *)(v16 + 48) = v18;
  __int128 v19 = *(_OWORD *)(v16 + 24);
  *(void *)(v18 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v17;
  *(_OWORD *)(v18 + 2sub_100006F7C(v0 + 4) = v19;
  char v20 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v16 + 56) = v20;
  sub_100003B20(&qword_10010EC88);
  *char v20 = v16;
  v20[1] = sub_1000A914C;
  sub_1000B4798();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v21,  v22,  v23,  v24,  v25,  v26,  v18,  v27,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16);
}

uint64_t sub_1000A914C()
{
  if (v1)
  {
    sub_10003CE0C();
    return sub_10000BCD0();
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 48));
    return sub_100021E4C(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_1000A9194()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000A91C0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v31 = v10;
  uint64_t v12 = v11;
  uint64_t v14 = sub_100022BA4(v11, v10, v8, v6, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v14);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(v5, v18 + v16, v17 | 7);
  *(void *)(v19 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v9;
  *(void *)(v19 + 2sub_100006F7C(v0 + 4) = v7;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))( v19 + v18,  (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14);
  v33[4] = v3;
  v33[5] = v19;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1107296256LL;
  v33[2] = sub_1000A94E8;
  v33[3] = v1;
  char v20 = _Block_copy(v33);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_10003D2C8();
  uint64_t v23 = sub_10000C030();
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v24 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_1000B451C();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_1000B3968((unint64_t *)&qword_10010F140, v26);
  uint64_t v28 = v27;
  uint64_t v29 = sub_100003B20(&qword_10010C090);
  sub_1000071C0(&qword_10010F150, &qword_10010C090);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v29, v30, v24, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v18, v20);
  _Block_release(v20);
  sub_1000304C4(v18, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
  swift_release();
  sub_100007448();
}

uint64_t sub_1000A93CC(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = v4;
  uint64_t v1 = sub_100003B20(&qword_10010ED38);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

uint64_t sub_1000A9454(void (*a1)(void *__return_ptr))
{
  uint64_t v1 = sub_100003B20(&qword_10010EC90);
  CheckedContinuation.resume(returning:)(v3, v1);
  return sub_100006F7C(v4);
}

double sub_1000A94E8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = sub_10000C030();
  v1(v3);
  *(void *)&double result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000A9510()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010E9A0);
  sub_100003BA0(v0, (uint64_t)qword_10010E9A0);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000A957C()
{
  uint64_t result = static Catalog.modelManagerDefaultMemoryBudget.getter();
  qword_1001100E8 = result;
  return result;
}

uint64_t sub_1000A9598()
{
  uint64_t result = static Catalog.modelManagerForegroundOvercommitBudget.getter();
  qword_1001100F0 = result;
  return result;
}

uint64_t sub_1000A95B4()
{
  uint64_t v0 = type metadata accessor for CatalogClient(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = CatalogClient.init()();
  qword_1001100F8 = result;
  return result;
}

uint64_t sub_1000A95F0()
{
  uint64_t v76 = v2;
  uint64_t v77 = v3;
  uint64_t v4 = v0;
  uint64_t v72 = sub_1000229CC();
  *(void *)&__int128 v69 = *(void *)(v72 - 8);
  sub_10000C240();
  __chkstk_darwin(v5);
  sub_10004E158();
  uint64_t v71 = v6;
  sub_100022634();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v65 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v65 - v11;
  swift_defaultActor_initialize(v0);
  if (qword_10010B118 != -1) {
    swift_once(&qword_10010B118, sub_1000A957C);
  }
  uint64_t v73 = v10;
  *(void *)(v0 + 112) = qword_1001100E8;
  if (qword_10010B120 != -1) {
    swift_once(&qword_10010B120, sub_1000A9598);
  }
  *(void *)(v0 + 120) = qword_1001100F0;
  unint64_t v13 = sub_100007144();
  type metadata accessor for DispatchQoS(0LL);
  sub_100030A28();
  __chkstk_darwin(v14);
  sub_10000C120();
  uint64_t v17 = v16 - v15;
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100030A28();
  __chkstk_darwin(v20);
  sub_1000B451C();
  uint64_t v74 = &_swiftEmptyArrayStorage;
  sub_1000B3968((unint64_t *)&qword_10010B2B0, v21);
  uint64_t v23 = v22;
  uint64_t v67 = v4;
  uint64_t v24 = sub_100003B20(&qword_10010B2B8);
  uint64_t v25 = v67;
  sub_1000071C0(&qword_10010B2C0, &qword_10010B2B8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v24, v26, v19, v23);
  uint64_t v27 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v30 + 104))( v29,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t v31 = v29;
  unint64_t v32 = v13;
  *(void *)(v25 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000014LL,  0x80000001000DA5C0LL,  v17,  v1,  v31,  0LL);
  uint64_t v33 = v25 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  uint64_t v34 = sub_1000B43C0();
  sub_10002FF3C(v33, v35, v36, v34);
  *(void *)(v25 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock) = &_swiftEmptyDictionarySingleton;
  *(void *)(v25 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask) = 0LL;
  *(void *)(v25 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers) = &_swiftEmptyArrayStorage;
  if (qword_10010B110 != -1) {
    swift_once(&qword_10010B110, sub_1000A9510);
  }
  uint64_t v37 = sub_10000BF6C();
  uint64_t v38 = (os_log_s *)sub_10003CE68(v37, (uint64_t)qword_10010E9A0);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    unint64_t v40 = (uint8_t *)sub_10000BCF4(12LL);
    *(_DWORD *)unint64_t v40 = 134217984;
    if (qword_10010B1C8 != -1) {
      swift_once(&qword_10010B1C8, sub_1000B1F2C);
    }
    uint64_t v74 = *(void **)(qword_1001102C8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v40 + 4);
    sub_100022210((void *)&_mh_execute_header, v38, v39, "%ld builtin test assets", v40);
    sub_10000BCC4((uint64_t)v40);
  }

  uint64_t v41 = (uint64_t)v73;
  if (qword_10010B1C8 != -1) {
    swift_once(&qword_10010B1C8, sub_1000B1F2C);
  }
  uint64_t v42 = *(void *)(qword_1001102C8 + 16);
  if (v42)
  {
    sub_100022C2C();
    uint64_t v45 = v43 + v44;
    uint64_t v47 = *(void *)(v46 + 72);
    uint64_t v66 = v43;
    sub_10000C2A8(v43);
    *(void *)&__int128 v48 = 136315138LL;
    __int128 v69 = v48;
    BOOL v68 = (char *)&type metadata for Any + 8;
    unint64_t v70 = v32;
    do
    {
      sub_1000B3AA8(v45, (uint64_t)v12, type metadata accessor for ModelCatalogAsset);
      sub_1000B46DC((uint64_t)v12);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = sub_10000BCF4(12LL);
        uint64_t v53 = v12;
        uint64_t v54 = v47;
        uint64_t v55 = (void *)sub_10000BCF4(32LL);
        uint64_t v74 = v55;
        *(_DWORD *)uint64_t v52 = v69;
        uint64_t v56 = v41;
        uint64_t v57 = v71;
        sub_1000B46DC(v56);
        uint64_t v58 = String.init<A>(describing:)(v57, v72);
        uint64_t v60 = v59;
        sub_100015EF8(v58, v59, (uint64_t *)&v74);
        *(void *)(v52 + sub_100006F7C(v0 + 4) = v61;
        uint64_t v62 = v60;
        uint64_t v41 = (uint64_t)v73;
        swift_bridgeObjectRelease(v62);
        sub_1000B463C();
        sub_100022210((void *)&_mh_execute_header, v50, v51, "%s", (uint8_t *)v52);
        swift_arrayDestroy(v55, 1LL);
        uint64_t v63 = (uint64_t)v55;
        uint64_t v47 = v54;
        uint64_t v12 = v53;
        sub_10000BCC4(v63);
        sub_10000BCC4(v52);
      }

      else
      {
        sub_1000B463C();
      }

      sub_10002F90C((uint64_t)v12, type metadata accessor for ModelCatalogAsset);
      v45 += v47;
      --v42;
    }

    while (v42);
    sub_10000C1B0(v66);
    return v67;
  }

  return v25;
}

uint64_t sub_1000A9B40()
{
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  sub_10000729C(v4, v5);
  uint64_t v2 = dispatch thunk of CatalogResource.id.getter(v0, *(void *)(*(void *)(v1 + 8) + 8LL));
  sub_100006F7C(v4);
  return v2;
}

uint64_t sub_1000A9BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10010B110 != -1) {
    swift_once(&qword_10010B110, sub_1000A9510);
  }
  uint64_t v6 = sub_10000BF6C();
  sub_100003BA0(v6, (uint64_t)qword_10010E9A0);
  sub_1000B4160();
  uint64_t v7 = (os_log_s *)sub_1000B4690();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v74 = v2;
    uint64_t v9 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v10 = sub_10000BCF4(32LL);
    v84[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_100021EB0();
    sub_1000B432C(a1, v11, v84);
    uint64_t v80 = v12;
    uint64_t v3 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v9 + 4);
    sub_10003D3C0();
    sub_100022210((void *)&_mh_execute_header, v7, v8, "Looking up asset bundle %s in Model Catalog", v9);
    sub_100021F38(v10);
    sub_10000BCC4(v10);
    sub_10000BCC4((uint64_t)v9);
  }

  else
  {
    sub_1000B4080();
  }

  if (qword_10010B128 != -1) {
    swift_once(&qword_10010B128, sub_1000A95B4);
  }
  unint64_t v13 = (os_log_s *)qword_1001100F8;
  uint64_t v14 = a1;
  dispatch thunk of CatalogClient.resourceBundle(for:)(&v80, a1, a2);
  uint64_t v15 = v3;
  if (v3)
  {
    uint64_t v80 = v3;
    swift_errorRetain(v3);
    uint64_t v16 = sub_100003B20(&qword_10010B468);
    uint64_t v17 = String.init<A>(describing:)(&v80, v16);
    uint64_t v19 = v18;
    sub_1000B4160();
    sub_10000C2A8(v19);
    sub_1000B4690();
    os_log_type_t v20 = sub_10003F20C();
    if (sub_10009D108(v20))
    {
      uint64_t v76 = v17;
      uint64_t v21 = sub_10000BCF4(22LL);
      uint64_t v22 = sub_10000BCF4(64LL);
      uint64_t v80 = v22;
      *(_DWORD *)uint64_t v21 = 136315394;
      sub_100021EB0();
      sub_1000B432C(a1, v23, &v80);
      *(void *)&__int128 v77 = v24;
      sub_1000B437C((uint64_t)&v77, (uint64_t)&v77 + 8);
      sub_10003D3C0();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain(v19);
      uint64_t v25 = v76;
      sub_100015EF8(v76, v19, &v80);
      *(void *)&__int128 v77 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, (char *)&v77 + 8, v21 + 14);
      sub_100095B00(v19);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  (os_log_type_t)a1,  "Failed to get resource bundle for %s: %s",  (uint8_t *)v21,  0x16u);
      sub_1000307B4(v22);
      sub_10000BCC4(v22);
      sub_10000BCC4(v21);
    }

    else
    {
      sub_1000B4080();
      sub_10000C1B0(v19);

      uint64_t v25 = v17;
    }

    uint64_t v30 = sub_1000305BC();
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v30, v31);
    *unint64_t v32 = v25;
    v32[1] = v19;
    uint64_t v33 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v32,  enum case for ModelManagerError.modelCatalogError(_:),  v30);
    swift_willThrow(v33, v34, v35, v36, v37, v38, v39, v40);
    swift_errorRelease(v15);
  }

  else
  {
    sub_100091AC8((uint64_t)&v80, (uint64_t)v84, &qword_10010ED20);
    sub_1000918F0((uint64_t)v84, (uint64_t)&v77, &qword_10010ED20);
    if (v79)
    {
      sub_1000070EC(&v77, (uint64_t)&v80);
      uint64_t v27 = v82;
      uint64_t v28 = v83;
      sub_10000729C(&v80, v82);
      uint64_t v29 = dispatch thunk of ResourceBundle.resources.getter(v27, v28);
      swift_retain();
      sub_1000A8CAC(v29, v75);
      swift_bridgeObjectRelease(v29);
      sub_1000115F8();
      uint64_t v15 = v47;
      swift_bridgeObjectRetain_n(v47, 4LL);
      uint64_t v48 = sub_1000B4160();
      uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = sub_10000BCF4(32LL);
        uint64_t v52 = sub_10000BCF4(64LL);
        *(void *)&__int128 v77 = v52;
        *(_DWORD *)uint64_t v51 = 136315650;
        sub_100021EB0();
        sub_1000B432C(v14, v53, (uint64_t *)&v77);
        uint64_t v85 = v54;
        sub_1000B437C((uint64_t)&v85, (uint64_t)&v86);
        sub_10003D3C0();
        *(_WORD *)(v51 + 12) = 2048;
        uint64_t v55 = *(void *)(v15 + 16);
        swift_bridgeObjectRelease(v15);
        uint64_t v85 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v51 + 14);
        swift_bridgeObjectRelease(v15);
        *(_WORD *)(v51 + 22) = 2080;
        if (*(void *)(v15 + 16) == 1LL) {
          uint64_t v57 = 0LL;
        }
        else {
          uint64_t v57 = 115LL;
        }
        if (*(void *)(v15 + 16) == 1LL) {
          unint64_t v58 = 0xE000000000000000LL;
        }
        else {
          unint64_t v58 = 0xE100000000000000LL;
        }
        sub_1000B432C(v57, v56, (uint64_t *)&v77);
        uint64_t v85 = v59;
        sub_1000B437C((uint64_t)&v85, (uint64_t)&v86);
        swift_bridgeObjectRelease(v58);
        sub_10000C1B0(v15);
        _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Found asset bundle %s with %ld asset%s",  (uint8_t *)v51,  0x20u);
        sub_1000307B4(v52);
        sub_10000BCC4(v52);
        sub_10000BCC4(v51);
      }

      else
      {
        swift_bridgeObjectRelease_n(v15, 4LL);

        uint64_t v60 = sub_1000B4080();
      }

      sub_1000B45E4( v60,  &qword_10010ED20,  v61,  v62,  v63,  v64,  v65,  v66,  v73,  v74,  v75,  v77,  *((uint64_t *)&v77 + 1),  v78,  v79);
      sub_100006F7C(&v80);
    }

    else
    {
      sub_10002F99C((uint64_t)&v77, &qword_10010ED20);
      sub_1000B4160();
      sub_1000B4690();
      os_log_type_t v42 = sub_10003F20C();
      if (sub_10009D108(v42))
      {
        uint64_t v43 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v44 = sub_10000BCF4(32LL);
        uint64_t v80 = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        sub_100021EB0();
        sub_1000B432C(a1, v45, &v80);
        *(void *)&__int128 v77 = v46;
        sub_10003CE18((uint64_t)&v77, (uint64_t)&v77 + 8);
        sub_10003D3C0();
        sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)&qword_10010ED20,  (os_log_type_t)a1,  "Asset bundle %s not found in Model Catalog, falling back to test assets",  v43);
        sub_100021F38(v44);
        sub_10000BCC4(v44);
        sub_10000BCC4((uint64_t)v43);
      }

      else
      {
        sub_1000B4080();
      }

      uint64_t v15 = sub_1000AA27C(a1, a2);
      sub_1000B45E4( v15,  &qword_10010ED20,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v77,  *((uint64_t *)&v77 + 1),  v78,  v79);
    }
  }

  return v15;
}

uint64_t sub_1000AA27C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = sub_1000B4444();
  uint64_t v9 = type metadata accessor for ModelCatalogAsset(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10003D2C8();
  type metadata accessor for ModelCatalogProvider(0LL);
  sub_1000854B4();
  sub_1000AF210();
  if (sub_1000060B4(v4, 1LL, v9) == 1)
  {
    sub_10002F99C(v4, &qword_10010C028);
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v11 = sub_10000BF6C();
    uint64_t v12 = (os_log_s *)sub_100003BA0(v11, (uint64_t)qword_10010E9A0);
    uint64_t v13 = sub_1000B4160();
    Logger.logObject.getter(v13);
    os_log_type_t v14 = sub_10003F20C();
    if (os_log_type_enabled(v12, v14))
    {
      uint64_t v15 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v16 = sub_10000BCF4(32LL);
      v44[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_100021EB0();
      sub_1000B432C(a1, v17, v44);
      uint64_t v45 = v18;
      sub_10003CE18((uint64_t)&v45, (uint64_t)&v46);
      sub_10003D3C0();
      sub_100022210((void *)&_mh_execute_header, v12, v14, "Asset bundle %s not found in test assets", v15);
      sub_100021F38(v16);
      sub_10000BCC4(v16);
      sub_10000BCC4((uint64_t)v15);
    }

    else
    {
      sub_1000B4080();
    }

    uint64_t v29 = sub_1000305BC();
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v31 = sub_1000302B0(v29, v30);
    uint64_t v33 = sub_100083AA4(v31, v32);
    *uint64_t v34 = a1;
    v34[1] = a2;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v33,  enum case for ModelManagerError.assetBundleNotFound(_:),  v29);
    uint64_t v35 = sub_100021EB0();
    swift_willThrow(v35, v36, v37, v38, v39, v40, v41, v42);
  }

  else
  {
    uint64_t v19 = sub_1000845E4();
    sub_1000B3D84(v19, v20, type metadata accessor for ModelCatalogAsset);
    uint64_t v21 = sub_100003B20(&qword_10010B808);
    uint64_t v22 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v23 = (v22 + 32) & ~v22;
    uint64_t v24 = swift_allocObject(v21, v23 + *(void *)(v10 + 72), v22 | 7);
    *(_OWORD *)(v24 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000D8890;
    sub_1000B3AA8(v3, v24 + v23, type metadata accessor for ModelCatalogAsset);
    sub_1000115F8();
    uint64_t v45 = v25;
    uint64_t v26 = *(void *)(v3 + 16);
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      sub_1000B4160();
      uint64_t v28 = (uint64_t *)(v26 + 40);
      while (1)
      {
        a1 = *v28;
        v44[0] = *(v28 - 1);
        v44[1] = a1;
        sub_100022418();
        sub_1000B07BC(v44);
        swift_bridgeObjectRelease(a1);
        if (v2) {
          break;
        }
        v28 += 2;
        if (!--v27)
        {
          sub_1000B4080();
          a1 = v45;
          goto LABEL_14;
        }
      }

      sub_1000B4080();
      sub_10002F90C(v3, type metadata accessor for ModelCatalogAsset);
      swift_bridgeObjectRelease(v45);
    }

    else
    {
      a1 = v25;
LABEL_14:
      sub_10002F90C(v3, type metadata accessor for ModelCatalogAsset);
    }
  }

  return a1;
}

uint64_t sub_1000AA5A8(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  sub_100007104((uint64_t)a1, (uint64_t)v77);
  uint64_t v7 = sub_100003B20(&qword_10010EC18);
  uint64_t v8 = sub_100003B20(&qword_10010EC60);
  if ((swift_dynamicCast(v75, v77, v7, v8, 6LL) & 1) == 0)
  {
    uint64_t v76 = 0LL;
    memset(v75, 0, sizeof(v75));
    sub_10002F99C((uint64_t)v75, &qword_10010EC68);
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v16, (uint64_t)qword_10010E9A0);
    sub_100007104((uint64_t)a1, (uint64_t)v80);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      v77[0] = v73;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v21 = a3;
      uint64_t v22 = v81;
      uint64_t v23 = v82;
      sub_10000729C(v80, v81);
      uint64_t v24 = v23;
      a3 = v21;
      uint64_t v25 = dispatch thunk of CatalogResource.id.getter(v22, v24);
      uint64_t v27 = v26;
      sub_100015EF8(v25, v26, v77);
      *(void *)&v75[0] = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 8, v20 + 4);
      swift_bridgeObjectRelease(v27);
      sub_100006F7C(v80);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Asset %s cannot be converted to a Model Catalog Managed Resource",  v20,  0xCu);
      swift_arrayDestroy(v73, 1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      sub_100006F7C(v80);
    }

    uint64_t v29 = type metadata accessor for ModelManagerError(0LL);
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v5 = swift_allocError(v29, v30, 0LL, 0LL);
    uint64_t v32 = v31;
    uint64_t v33 = a1[3];
    uint64_t v34 = a1[4];
    sub_10000729C(a1, v33);
    *uint64_t v32 = dispatch thunk of CatalogResource.id.getter(v33, v34);
    v32[1] = v35;
    uint64_t v36 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v32,  enum case for ModelManagerError.unrecognizedModelCatalogResource(_:),  v29);
    uint64_t result = swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
    goto LABEL_10;
  }

  sub_1000070EC(v75, (uint64_t)v80);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000729C(a1, v9);
  uint64_t v11 = dispatch thunk of CatalogResource.id.getter(v9, v10);
  uint64_t v13 = v12;
  char v14 = sub_1000AB020(v11, v12);
  if (v3)
  {
    sub_100006F7C(v80);
    uint64_t result = swift_bridgeObjectRelease(v13);
LABEL_10:
    *a3 = v5;
    return result;
  }

  char v44 = v14;
  swift_bridgeObjectRelease(v13);
  if ((v44 & 1) == 0)
  {
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v45, (uint64_t)qword_10010E9A0);
    sub_100007104((uint64_t)a1, (uint64_t)v77);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v75[0] = v74;
      *(_DWORD *)uint64_t v49 = 136315138;
      os_log_type_t v50 = a3;
      uint64_t v52 = v78;
      uint64_t v51 = v79;
      sub_10000729C(v77, v78);
      uint64_t v53 = v52;
      a3 = v50;
      uint64_t v54 = dispatch thunk of CatalogResource.id.getter(v53, v51);
      uint64_t v56 = v55;
      sub_100015EF8(v54, v55, (uint64_t *)v75);
      uint64_t v83 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v49 + 4);
      swift_bridgeObjectRelease(v56);
      sub_100006F7C(v77);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Asset %s is not available in Model Catalog", v49, 0xCu);
      swift_arrayDestroy(v74, 1LL);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      sub_100006F7C(v77);
    }

    uint64_t v58 = type metadata accessor for ModelManagerError(0LL);
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v5 = swift_allocError(v58, v59, 0LL, 0LL);
    uint64_t v61 = v60;
    uint64_t v62 = a1[3];
    uint64_t v63 = a1[4];
    sub_10000729C(a1, v62);
    *uint64_t v61 = dispatch thunk of CatalogResource.id.getter(v62, v63);
    v61[1] = v64;
    uint64_t v65 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v58 - 8) + 104LL))( v61,  enum case for ModelManagerError.assetNotAvailableInModelCatalog(_:),  v58);
    swift_willThrow(v65, v66, v67, v68, v69, v70, v71, v72);
    uint64_t result = sub_100006F7C(v80);
    goto LABEL_10;
  }

  sub_100007104((uint64_t)v80, (uint64_t)v77);
  sub_1000AAB08();
  return sub_100006F7C(v80);
}

void sub_1000AAB08()
{
  uint64_t v1 = v0;
  uint64_t v90 = v2;
  uint64_t v3 = type metadata accessor for InferenceProvider(0LL);
  uint64_t v100 = *(void *)(v3 - 8);
  uint64_t v101 = v3;
  sub_10000C240();
  __chkstk_darwin(v4);
  sub_10004E158();
  int64_t v99 = v5;
  sub_100022634();
  __chkstk_darwin(v6);
  uint64_t v98 = (char *)v81 - v7;
  uint64_t v97 = type metadata accessor for ManagedRuntimeInformation(0LL);
  uint64_t v8 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  sub_10004E158();
  uint64_t v95 = v9;
  sub_100022634();
  __chkstk_darwin(v10);
  unint64_t v96 = (char *)v81 - v11;
  uint64_t v12 = type metadata accessor for CostProfile(0LL);
  uint64_t v84 = *(void *)(v12 - 8);
  sub_10000C240();
  __chkstk_darwin(v13);
  sub_10004E158();
  uint64_t v89 = v14;
  sub_100022634();
  __chkstk_darwin(v15);
  uint64_t v86 = (char *)v81 - v16;
  sub_100022634();
  __chkstk_darwin(v17);
  uint64_t v85 = (char *)v81 - v18;
  sub_100022634();
  __chkstk_darwin(v19);
  uint64_t v83 = (char *)v81 - v20;
  uint64_t v21 = type metadata accessor for AssetCost(0LL);
  uint64_t v87 = *(void *)(v21 - 8);
  uint64_t v88 = v21;
  sub_10000C240();
  __chkstk_darwin(v22);
  sub_10000C120();
  uint64_t v91 = v24 - v23;
  uint64_t v25 = v1[3];
  uint64_t v26 = v1[4];
  sub_1000B4708();
  uint64_t v27 = dispatch thunk of ManagedResource.runtimeInformation.getter(v25, v26);
  int64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    v81[1] = v12;
    uint64_t v82 = v1;
    uint64_t v106 = _swiftEmptyArrayStorage;
    sub_100016C44(0LL, v28, 0);
    sub_100022C2C();
    v81[0] = v27;
    uint64_t v30 = v27 + v29;
    uint64_t v93 = *(void *)(v8 + 72);
    uint64_t v94 = v8;
    uint64_t v92 = *(uint64_t (**)(uint64_t))(v8 + 16);
    uint64_t v31 = v96;
    uint64_t v32 = v97;
    uint64_t v33 = v95;
    do
    {
      uint64_t v34 = sub_1000854B4();
      uint64_t v35 = v92;
      v92(v34);
      uint64_t v36 = sub_1000B4580();
      uint64_t v37 = v35(v36);
      uint64_t v38 = v98;
      uint64_t v39 = ManagedRuntimeInformation.inferenceProvider.getter(v37);
      uint64_t v40 = InferenceProvider.id.getter(v39);
      uint64_t v104 = v41;
      uint64_t v105 = v40;
      uint64_t v42 = v101;
      uint64_t v43 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
      uint64_t v44 = v43(v38, v101);
      uint64_t v45 = ManagedRuntimeInformation.instanceID.getter(v44);
      uint64_t v102 = v46;
      uint64_t v103 = v45;
      uint64_t v47 = v99;
      uint64_t v48 = ManagedRuntimeInformation.inferenceProvider.getter(v45);
      char v49 = InferenceProvider.hostedOnServer.getter(v48);
      v43(v47, v42);
      os_log_type_t v50 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v50(v33, v32);
      v50((uint64_t)v31, v32);
      uint64_t v51 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
      {
        sub_100016C44(0LL, v51[2] + 1LL, 1);
        uint64_t v51 = v106;
      }

      unint64_t v53 = v51[2];
      unint64_t v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_100016C44((char *)(v52 > 1), v53 + 1, 1);
        uint64_t v51 = v106;
      }

      v51[2] = v53 + 1;
      uint64_t v54 = &v51[5 * v53];
      uint64_t v55 = v104;
      v54[4] = v105;
      v54[5] = v55;
      uint64_t v56 = v102;
      v54[6] = v103;
      v54[7] = v56;
      *((_BYTE *)v54 + 6sub_100006F7C(v0 + 4) = v49 & 1;
      v30 += v93;
      --v28;
    }

    while (v28);
    swift_bridgeObjectRelease(v81[0]);
    uint64_t v1 = v82;
  }

  else
  {
    sub_10000C1E0();
    uint64_t v51 = _swiftEmptyArrayStorage;
  }

  uint64_t v57 = v1[3];
  sub_1000B4708();
  sub_1000B45F8();
  uint64_t v59 = dispatch thunk of CatalogResource.id.getter(v57, v58);
  uint64_t v104 = v60;
  uint64_t v105 = v59;
  uint64_t v61 = v1[3];
  uint64_t v62 = (void *)sub_1000B4580();
  sub_10000729C(v62, v63);
  sub_1000B45F8();
  uint64_t v103 = dispatch thunk of CatalogResource.dependentResourceIDs.getter(v61);
  sub_1000B446C();
  uint64_t v64 = sub_1000B4344();
  uint64_t v65 = CostProfile.onDeviceMemory.getter(v64);
  uint64_t v66 = *(void (**)(uint64_t))(v84 + 8);
  sub_1000B4498();
  if (v65 < 0)
  {
    sub_100021BD4();
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  else
  {
    AssetCost.init(onDeviceMemory:)(v65);
    sub_1000B446C();
    uint64_t v67 = sub_1000B4344();
    char v68 = CostProfile.cacheable.getter(v67);
    sub_1000B4498();
    uint64_t v69 = v1;
    uint64_t v70 = v1[3];
    uint64_t v71 = v1[4];
    sub_10000729C(v69, v70);
    uint64_t v72 = dispatch thunk of ManagedResource.cost.getter(v70, v71);
    LOBYTE(v70) = CostProfile.dynamicModeAllowed.getter(v72);
    sub_1000B4498();
    uint64_t v73 = v69[3];
    uint64_t v74 = v69[4];
    sub_10000729C(v69, v73);
    uint64_t v75 = dispatch thunk of ManagedResource.cost.getter(v73, v74);
    char v76 = CostProfile.energyEfficientMode.getter(v75);
    uint64_t v77 = sub_1000854B4();
    v66(v77);
    uint64_t v78 = (char *)v90;
    uint64_t v79 = v104;
    *uint64_t v90 = v105;
    *((void *)v78 + 1) = v79;
    *((void *)v78 + 2) = v103;
    *((void *)v78 + 3) = v51;
    uint64_t v80 = (int *)sub_1000229CC();
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(&v78[v80[7]], v91, v88);
    v78[v80[8]] = v68 & 1;
    v78[v80[9]] = v70 & 1;
    v78[v80[10]] = v76 & 1;
    sub_100006F7C(v69);
    sub_100007448();
  }

uint64_t sub_1000AB020(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  if (qword_10010B128 != -1) {
    swift_once(&qword_10010B128, sub_1000A95B4);
  }
  uint64_t v10 = sub_1000845E4();
  uint64_t v11 = dispatch thunk of CatalogClient.resourceStatus(identifier:)(v10);
  if (v2)
  {
    sub_1000B4740();
    uint64_t v12 = sub_100003B20(&qword_10010B468);
    uint64_t v13 = sub_1000B474C();
    uint64_t v15 = v14;
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v16 = sub_10000BF6C();
    uint64_t v17 = (void *)sub_100003BA0(v16, (uint64_t)qword_10010E9A0);
    sub_10000C2A8(a2);
    uint64_t v18 = sub_10002289C();
    Logger.logObject.getter(v18);
    os_log_type_t v19 = sub_10003F20C();
    if (sub_1000B45BC(v19))
    {
      uint64_t v20 = sub_10000BCF4(22LL);
      uint64_t v21 = sub_10000BCF4(64LL);
      uint64_t v48 = v12;
      uint64_t v22 = v21;
      uint64_t v51 = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v47 = v13;
      sub_100083500();
      uint64_t v23 = sub_1000845E4();
      sub_100015EF8(v23, v24, v25);
      uint64_t v49 = v26;
      sub_1000B437C((uint64_t)&v49, (uint64_t)&v50);
      sub_100095B00(a2);
      *(_WORD *)(v20 + 12) = 2080;
      sub_10002289C();
      sub_100015EF8(v47, v15, &v51);
      uint64_t v49 = v27;
      sub_1000B437C((uint64_t)&v49, (uint64_t)&v50);
      sub_100095B00(v15);
      sub_1000B4414((void *)&_mh_execute_header, v28, v29, "Failed to get resource status for %s: %s");
      sub_1000307B4(v22);
      sub_10000BCC4(v22);
      sub_10000BCC4(v20);
    }

    else
    {

      sub_10000C1B0(v15);
      sub_10000C1B0(a2);
    }

    uint64_t v30 = sub_1000305BC();
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v30, v33);
    uint64_t v35 = v34;
    sub_1000B4740();
    *uint64_t v35 = sub_1000B474C();
    v35[1] = v36;
    uint64_t v37 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v35,  enum case for ModelManagerError.modelCatalogError(_:),  v30);
    swift_willThrow(v37, v38, v39, v40, v41, v42, v43, v44);
    swift_errorRelease(v2);
  }

  else
  {
    uint64_t v30 = v11;
    StatusResponse.status.getter();

    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v9, enum case for ResourceStatus.available(_:), v3);
    sub_1000B3968(&qword_10010ED18, (uint64_t (*)(uint64_t))&type metadata accessor for ResourceStatus);
    sub_1000B4648();
    sub_1000B4648();
    LOBYTE(v30) = v51 == v49;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v9, v3);
    uint64_t v32 = sub_1000B4580();
    ((void (*)(uint64_t))v31)(v32);
  }

  return v30 & 1;
}

uint64_t sub_1000AB37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CatalogErrors.AssetErrors(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000C120();
  uint64_t v8 = v7 - v6;
  if (qword_10010B128 != -1) {
    swift_once(&qword_10010B128, sub_1000A95B4);
  }
  uint64_t v9 = sub_1000B4580();
  dispatch thunk of CatalogClient.resource(for:)(v9);
  if (v2)
  {
    sub_1000B4460();
    uint64_t v10 = sub_100003B20(&qword_10010B468);
    if (swift_dynamicCast(v8, v62, v10, v4, 0LL))
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v8, v4) == enum case for CatalogErrors.AssetErrors.failedToFindAsset(_:))
      {
        swift_errorRelease(v2);
        sub_100095DC4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 96));
        swift_bridgeObjectRelease(*(void *)(v8 + 8));
        uint64_t v11 = sub_1000B4698();
        sub_1000B44A4(v11);
        uint64_t v12 = v62[0];
        return swift_errorRelease(v12);
      }

      sub_100095DC4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    }

    swift_errorRelease(v62[0]);
    sub_1000B4460();
    uint64_t v65 = (void *)v10;
    uint64_t v17 = String.init<A>(describing:)(v62, v10);
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v18 = sub_10000BF6C();
    os_log_type_t v19 = (void *)sub_100003BA0(v18, (uint64_t)qword_10010E9A0);
    sub_10000C2A8(a2);
    uint64_t v20 = sub_100021EB0();
    Logger.logObject.getter(v20);
    os_log_type_t v21 = sub_10003F20C();
    if (sub_1000B45BC(v21))
    {
      uint64_t v22 = sub_10000BCF4(22LL);
      uint64_t v55 = v17;
      uint64_t v23 = sub_10000BCF4(64LL);
      v62[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      sub_100022418();
      uint64_t v24 = sub_1000B4580();
      sub_100015EF8(v24, v25, v26);
      *(void *)&__int128 v59 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 8, v22 + 4);
      sub_100095B00(a2);
      *(_WORD *)(v22 + 12) = 2080;
      sub_100021EB0();
      sub_1000B432C(v55, v28, v62);
      *(void *)&__int128 v59 = v29;
      sub_1000B437C((uint64_t)&v59, (uint64_t)&v59 + 8);
      sub_10003D3C0();
      sub_1000B4414((void *)&_mh_execute_header, v30, v31, "Failed to get asset location for %s: %s");
      sub_1000307B4(v23);
      sub_10000BCC4(v23);
      sub_10000BCC4(v22);
    }

    else
    {

      sub_1000B4080();
      sub_10000C1B0(a2);
    }

    uint64_t v32 = sub_1000305BC();
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v32, v33);
    uint64_t v35 = v34;
    sub_1000B4460();
    *uint64_t v35 = String.init<A>(describing:)(v62, v65);
    v35[1] = v36;
    uint64_t v37 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v35,  enum case for ModelManagerError.modelCatalogError(_:),  v32);
    swift_willThrow(v37, v38, v39, v40, v41, v42, v43, v44);
    uint64_t v12 = v2;
    return swift_errorRelease(v12);
  }

  if (v57)
  {
    uint64_t v13 = sub_100003B20(&qword_10010EC18);
    uint64_t v14 = sub_100003B20(&qword_10010EC20);
    if ((swift_dynamicCast(&v59, v56, v13, v14, 6LL) & 1) != 0)
    {
      if (*((void *)&v60 + 1))
      {
        sub_1000070EC(&v59, (uint64_t)v62);
        uint64_t v15 = v63;
        uint64_t v16 = v64;
        uint64_t v65 = sub_10000729C(v62, v63);
        *((void *)&v60 + 1) = swift_getAssociatedTypeWitness( 0LL,  v16,  v15,  &protocol requirements base descriptor for AssetBackedResource,  &associated type descriptor for AssetBackedResource.CatalogAssetType);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v16,  v15,  *((void *)&v60 + 1),  &protocol requirements base descriptor for AssetBackedResource);
        sub_10004DFC0(&v59);
        dispatch thunk of AssetBackedResource.fetchAsset()(v15, v16);
        uint64_t v46 = *((void *)&v60 + 1);
        uint64_t v47 = AssociatedConformanceWitness;
        sub_10000729C(&v59, *((uint64_t *)&v60 + 1));
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v47,  v46,  &protocol requirements base descriptor for CatalogAssetProtocol,  &associated type descriptor for CatalogAssetProtocol.C);
        uint64_t v57 = AssociatedTypeWitness;
        uint64_t v49 = swift_getAssociatedConformanceWitness( v47,  v46,  AssociatedTypeWitness,  &protocol requirements base descriptor for CatalogAssetProtocol);
        uint64_t v58 = v49;
        sub_10004DFC0(v56);
        dispatch thunk of CatalogAssetProtocol.contents.getter(v46, v47);
        dispatch thunk of AssetContents.baseURL.getter(AssociatedTypeWitness, v49);
        sub_1000B4698();
        sub_1000B4510();
        sub_100005FB0(v50, v51, v52, v53);
        sub_100006F7C(v56);
        sub_100006F7C(&v59);
        return sub_100006F7C(v62);
      }
    }

    else
    {
      uint64_t AssociatedConformanceWitness = 0LL;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
    }
  }

  else
  {
    sub_10002F99C((uint64_t)v56, &qword_10010EC58);
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    uint64_t AssociatedConformanceWitness = 0LL;
  }

  sub_10002F99C((uint64_t)&v59, &qword_10010EC28);
  uint64_t v45 = sub_1000B4698();
  return sub_1000B44A4(v45);
}

uint64_t sub_1000AB8C0()
{
  v1[5] = v0;
  uint64_t v2 = sub_100003B20(&qword_10010B208);
  v1[6] = sub_100021CA4(v2);
  uint64_t v3 = sub_100003B20(&qword_10010ECF0);
  v1[7] = v3;
  v1[8] = sub_100021CA4(v3);
  uint64_t v4 = sub_100003B20(&qword_10010ECF8);
  void v1[9] = sub_100021CA4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010ED00);
  v1[10] = sub_100021CA4(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000AB940()
{
  uint64_t v4 = v0 + 2;
  if (qword_10010B110 != -1) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t v5 = sub_10000BF6C();
    uint64_t v6 = (os_log_s *)sub_10003CE68(v5, (uint64_t)qword_10010E9A0);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cycled ModelCatalog asset lock", v8, 2u);
      sub_10000BCC4((uint64_t)v8);
    }

    uint64_t v9 = v0[5];

    uint64_t v10 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock;
    v0[11] = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock;
    uint64_t v11 = (uint64_t *)(v9 + v10);
    sub_10000BE64(v9 + v10, (uint64_t)v4, 0LL);
    uint64_t v12 = *v11;
    if (!*(void *)(*v11 + 16)) {
      break;
    }
    uint64_t v4 = (uint64_t *)&unk_10010ECF8;
    while (1)
    {
      sub_1000B43AC();
      if (!v16)
      {
        unsigned int v21 = v15 & 0x3F;
        if (v21 < 7) {
          goto LABEL_21;
        }
        if (!*(void *)(v12 + 72))
        {
          if (v21 < 8) {
            goto LABEL_21;
          }
          if (!*(void *)(v12 + 80))
          {
            sub_1000B44C8();
            while (v22 - 8 < v23)
            {
              if (*(void *)(v12 + 8 * v22++)) {
                goto LABEL_7;
              }
            }

uint64_t sub_1000ABC84()
{
  uint64_t v3 = *v1;
  sub_1000B4734(*(void *)(v3 + 120), &v3);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100021DDC();
  }

  return sub_10000BF5C();
}

void sub_1000ABCF0()
{
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  swift_release(v0[14]);
  sub_1000B4510();
  sub_100005FB0(v7, v8, v9, v3);
  sub_10002F99C(v5, &qword_10010ED00);
  sub_100030250(v6, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1000B4110();
  if (v10)
  {
    while (1)
    {
      sub_1000B43AC();
      if (!v14)
      {
        unsigned int v19 = v13 & 0x3F;
        if (v19 < 7) {
          goto LABEL_17;
        }
        if (!*(void *)(v6 + 72))
        {
          if (v19 < 8) {
            goto LABEL_17;
          }
          if (!*(void *)(v6 + 80)) {
            break;
          }
        }
      }

LABEL_3:
      sub_1000B4398();
      if (v16) {
        goto LABEL_17;
      }
      if (v2 < 0 || v2 >= v15)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }

      sub_1000B4384();
      if ((v17 & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v18 = sub_1000B40D0();
      sub_1000B3FC8(v18);
      sub_1000B4060();
      sub_1000B41D0();
      sub_100083500();
      sub_10002F99C(v1, &qword_10010ECF0);
      sub_1000B4124();
      sub_1000B43C8();
      if (!v16)
      {
        sub_1000B4254();
        uint64_t v36 = swift_task_alloc(async function pointer to Task.value.getter[1]);
        sub_1000B429C(v36);
        sub_100003B20(&qword_10010B468);
        qword_10010ED00 = (uint64_t)v0;
        unk_10010ED08 = sub_1000ABC84;
        sub_1000B458C();
        goto LABEL_24;
      }

      sub_1000B4398();
      if (v13) {
        goto LABEL_17;
      }
      if (v4 < 0 || v4 >= v12)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }

      sub_1000B4384();
      if ((v14 & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v15 = sub_1000B40D0();
      sub_1000B3FC8(v15);
      sub_1000B4060();
      sub_1000B41D0();
      sub_100083500();
      sub_10002F99C(v3, &qword_10010ECF0);
      sub_1000B4124();
      sub_1000B43C8();
      if (!v13)
      {
        sub_1000B4254();
        uint64_t v33 = swift_task_alloc(async function pointer to Task.value.getter[1]);
        sub_1000B429C(v33);
        sub_100003B20(&qword_10010B468);
        qword_10010ED00 = (uint64_t)v0;
        unk_10010ED08 = sub_1000ABC84;
        sub_1000B458C();
        goto LABEL_24;
      }

uint64_t sub_1000ABFAC()
{
  *(void *)(v0 + 152) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_1000ABFFC()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v1);
}

uint64_t sub_1000AC038()
{
  *(void *)(v0 + 176) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    swift_release(*(void *)(v0 + 160));
  }
  return sub_10000BCD0();
}

uint64_t sub_1000AC098()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v1);
}

void sub_1000AC0D4()
{
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[10];
  (*(void (**)(void, void))(v0[13] + 8LL))(v0[9], v0[12]);
  sub_100005FB0(v6, 1LL, 1LL, v5);
  sub_10002F99C(v6, &qword_10010ED00);
  sub_1000B4110();
  if (v7)
  {
    while (1)
    {
      sub_1000B43AC();
      if (!v11)
      {
        unsigned int v16 = v10 & 0x3F;
        if (v16 < 7) {
          goto LABEL_17;
        }
        if (!*(void *)(v1 + 72))
        {
          if (v16 < 8) {
            goto LABEL_17;
          }
          if (!*(void *)(v1 + 80)) {
            break;
          }
        }
      }

uint64_t sub_1000AC388()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AC3D0()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AC410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  unint64_t v5 = (*(void *)(*(void *)(sub_100003B20(&qword_10010ECC8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[8] = swift_task_alloc(v5);
  uint64_t v6 = swift_task_alloc(v5);
  v4[9] = v6;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AssetLock.lockAllResources()[1]);
  v4[10] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1000AC49C;
  return static AssetLock.lockAllResources()(v6);
}

uint64_t sub_1000AC49C()
{
  *(void *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_1000AC4EC()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  sub_1000B43C0();
  sub_1000B4510();
  sub_100005FB0(v4, v5, v6, v7);
  sub_100091AC8(v1, v2, &qword_10010ECC8);
  uint64_t v8 = v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  sub_10000BE64(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock, (uint64_t)(v0 + 2), 33LL);
  sub_1000B3E40(v2, v8);
  swift_endAccess();
  *(void *)(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask) = 0LL;
  swift_release();
  sub_10000BFE4();
  sub_10000C1B8();
  uint64_t v9 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100083FB8(v9);
}

uint64_t sub_1000AC59C()
{
  uint64_t v2 = *(void *)(v0 + 88);
  *(void *)(v0 + 40) = v2;
  swift_errorRetain(v2);
  uint64_t v3 = sub_100003B20(&qword_10010B468);
  uint64_t v4 = String.init<A>(describing:)(v0 + 40, v3);
  uint64_t v6 = v5;
  if (qword_10010B110 != -1) {
    swift_once(&qword_10010B110, sub_1000A9510);
  }
  uint64_t v7 = sub_10000BF6C();
  uint64_t v8 = (os_log_s *)sub_100003BA0(v7, (uint64_t)qword_10010E9A0);
  uint64_t v9 = sub_10000C2A8(v6);
  Logger.logObject.getter(v9);
  os_log_type_t v10 = sub_10003F20C();
  if (sub_100022260(v10))
  {
    uint64_t v11 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v12 = sub_10000BCF4(32LL);
    uint64_t v27 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_100021EB0();
    sub_100015EF8(v4, v6, &v27);
    *(void *)(v0 + 48) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    sub_100095B00(v6);
    sub_100022210((void *)&_mh_execute_header, v8, v1, "Failed to create new asset lock: %s", v11);
    sub_100021F38(v12);
    sub_10000BCC4(v12);
    sub_10000BCC4((uint64_t)v11);
  }

  else
  {
    sub_10000C1B0(v6);
  }

  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v15 = sub_1000305BC();
  sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_1000302B0(v15, v16);
  *uint64_t v17 = v4;
  v17[1] = v6;
  uint64_t v18 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  enum case for ModelManagerError.modelCatalogError(_:),  v15);
  swift_willThrow(v18, v19, v20, v21, v22, v23, v24, v25);
  swift_errorRelease(v14);
  sub_10002294C();
  sub_10002FF04();
  return sub_100021CD4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000AC78C()
{
  uint64_t v2 = v1;
  uint64_t v25 = v3;
  uint64_t v4 = type metadata accessor for AssetVersion(0LL);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  sub_10000C240();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_1000B4444();
  uint64_t v7 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(v6);
  sub_100030A28();
  __chkstk_darwin(v8);
  sub_10000C120();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = v2[3];
  uint64_t v13 = v2[4];
  sub_10000729C(v2, v12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v13,  v12,  &protocol requirements base descriptor for CatalogAssetProtocol,  &associated type descriptor for CatalogAssetProtocol.C);
  v26[3] = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for CatalogAssetProtocol);
  v26[4] = AssociatedConformanceWitness;
  sub_10004DFC0(v26);
  dispatch thunk of CatalogAssetProtocol.contents.getter(v12, v13);
  dispatch thunk of AssetContents.baseURL.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_100006F7C(v26);
  uint64_t v16 = v2[3];
  uint64_t v17 = v2[4];
  sub_10000729C(v2, v16);
  uint64_t v18 = dispatch thunk of CatalogAssetProtocol.version.getter(v16, v17);
  uint64_t v19 = AssetVersion.number.getter(v18);
  uint64_t v21 = v20;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0, v24);
  uint64_t v22 = (uint64_t *)(v11 + *(int *)(v7 + 20));
  *uint64_t v22 = v19;
  v22[1] = v21;
  sub_1000B3D84(v11, v25, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
  sub_10003D244();
  sub_100007448();
}

void sub_1000AC904()
{
  uint64_t v5 = v4;
  sub_10000BE28();
  sub_1000B46C8();
  __chkstk_darwin(v6);
  sub_10003D2C8();
  uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock);
  sub_10000BE64(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock, (uint64_t)&v23, 0LL);
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain(*v7);
  sub_10000FCE4(v5, v8);
  uint64_t v10 = v9;
  sub_10000BD28();
  swift_release();
  if (!v10)
  {
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v11 = sub_10000BF6C();
    sub_100003BA0(v11, (uint64_t)qword_10010E9A0);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v1);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (sub_1000B4758(v13))
    {
      uint64_t v15 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v20 = sub_10000BCF4(32LL);
      v22[0] = v20;
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_1000B3968(&qword_10010B420, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v1, v16);
      sub_100015EF8(v17, v18, v22);
      uint64_t v21 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22);
      sub_10000BD28();
      sub_1000B4500();
      sub_100022210( (void *)&_mh_execute_header,  v13,  v14,  "removeTaskFromAssetLockSet called with not present UUID %s",  v15);
      sub_100021F38(v20);
      sub_10000BCC4(v20);
      sub_10000BCC4((uint64_t)v15);
    }

    else
    {
      sub_1000B4500();
    }
  }

  sub_10000BE64((uint64_t)v7, (uint64_t)v22, 33LL);
  sub_1000B3740(v5);
  swift_endAccess();
  sub_100021DDC();
  sub_100007448();
}

uint64_t sub_1000ACB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B208);
  v4[12] = sub_100021CA4(v5);
  uint64_t v6 = sub_10000BE28();
  v4[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[14] = v7;
  v4[15] = *(void *)(v7 + 64);
  v4[16] = sub_10002287C();
  v4[17] = sub_10002287C();
  uint64_t v8 = sub_1000B43C0();
  v4[18] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[19] = v9;
  v4[20] = *(void *)(v9 + 64);
  v4[21] = sub_10002287C();
  v4[22] = sub_10002287C();
  sub_100003B20(&qword_10010ECC8);
  v4[23] = sub_10002287C();
  v4[24] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_1000ACBDC()
{
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  *(void *)(v0 + 200) = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  uint64_t v6 = v4 + v5;
  sub_10000BE64(v4 + v5, v0 + 16, 0LL);
  sub_1000918F0(v6, (uint64_t)v2, &qword_10010ECC8);
  uint64_t v7 = sub_1000060B4((uint64_t)v2, 1LL, v3);
  sub_10002F99C((uint64_t)v2, &qword_10010ECC8);
  if ((_DWORD)v7 == 1)
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_10010E9FC);
    *(void *)(v0 + 208) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000ACEDC;
    return sub_1000AB8C0();
  }

  else
  {
    uint64_t v10 = sub_1000B44D8();
    sub_1000918F0(v10, (uint64_t)v2, &qword_10010ECC8);
    if (sub_1000060B4((uint64_t)v2, 1LL, v7) == 1)
    {
      sub_10002F99C(*(void *)(v0 + 184), &qword_10010ECC8);
      if (qword_10010B110 != -1) {
        swift_once(&qword_10010B110, sub_1000A9510);
      }
      uint64_t v11 = sub_10000BF6C();
      sub_10003CE68(v11, (uint64_t)qword_10010E9A0);
      os_log_type_t v12 = sub_10003CEEC();
      if (sub_10002275C(v12))
      {
        uint64_t v13 = (_WORD *)sub_10000BCF4(2LL);
        *uint64_t v13 = 0;
        sub_10003F1B4((void *)&_mh_execute_header, v14, v15, "After cycleAssetLock, assetLock was nil");
        sub_10000BCC4((uint64_t)v13);
      }

      uint64_t v16 = sub_1000305BC();
      sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_1000302B0(v16, v17);
      uint64_t v19 = sub_1000843A8( v18,  enum case for ModelManagerError.internalError(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL));
      swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
      sub_1000B42E0(*(void *)(v0 + 192));
      sub_10000C140();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      return sub_1000B416C(*(uint64_t (**)(void))(v0 + 8));
    }

    else
    {
      uint64_t v27 = sub_1000B3F78();
      sub_1000B45CC(v27, v28, v29, v30, v31, v32, v33, v34, v63, v67, v71);
      uint64_t v35 = sub_100021FC8();
      sub_1000B426C(v35);
      sub_1000B4478();
      sub_1000B3968(&qword_10010ECD8, type metadata accessor for ModelCatalogProvider);
      sub_1000B408C();
      uint64_t v38 = (char *)swift_allocObject(&unk_100104D58, v36, v37);
      uint64_t v46 = sub_1000B41F8(v38, v39, v40, v41, v42, v43, v44, v45, v64, v68, v72, v75, v78, v81);
      sub_1000B42C0(v46, v47, v48, v49, v50, v51, v52, v53, v65, v69, v73, v76, v79, v82, v84, v86, v88, v90);
      sub_1000B4714();
      uint64_t v54 = sub_10000C030();
      sub_1000B476C( v54,  (uint64_t)&unk_10010ECE0,  v55,  v56,  v57,  v58,  v59,  v60,  v66,  v70,  v74,  v77,  v80,  v83,  v85,  v87,  v89);
      *(void *)(v0 + 2sub_10002FFE4((uint64_t)v1, v0 + 16) = v61;
      sub_10000BE64(v1 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock, v91, 33LL);
      sub_1000224B4();
      sub_1000B4760();
      swift_endAccess();
      uint64_t v62 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
      *(void *)(v0 + 22sub_100006F7C(v0 + 4) = v62;
      type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0LL);
      sub_100003B20(&qword_10010B468);
      *uint64_t v62 = v0;
      v62[1] = sub_1000AD1C8;
      return sub_1000B4188();
    }
  }

uint64_t sub_1000ACEDC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v4 = v2;
  sub_1000B4734(v2[26], &v4);
  if (!v0) {
    return swift_task_switch(sub_1000ACF78, v2[11], 0LL);
  }
  swift_task_dealloc(v2[24]);
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  return sub_100049570(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000ACF78()
{
  uint64_t v4 = sub_1000B44D8();
  sub_1000918F0(v4, (uint64_t)v1, &qword_10010ECC8);
  if (sub_1000060B4((uint64_t)v1, 1LL, v0) == 1)
  {
    sub_10002F99C(*(void *)(v2 + 184), &qword_10010ECC8);
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v5 = sub_10000BF6C();
    sub_10003CE68(v5, (uint64_t)qword_10010E9A0);
    os_log_type_t v6 = sub_10003CEEC();
    if (sub_10002275C(v6))
    {
      uint64_t v7 = (_WORD *)sub_10000BCF4(2LL);
      *uint64_t v7 = 0;
      sub_10003F1B4((void *)&_mh_execute_header, v8, v9, "After cycleAssetLock, assetLock was nil");
      sub_10000BCC4((uint64_t)v7);
    }

    uint64_t v10 = sub_1000305BC();
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v10, v11);
    uint64_t v13 = sub_1000843A8( v12,  enum case for ModelManagerError.internalError(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL));
    swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
    sub_1000B42E0(*(void *)(v2 + 192));
    sub_10000C140();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    return sub_1000B416C(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    uint64_t v22 = sub_1000B3F78();
    sub_1000B45CC(v22, v23, v24, v25, v26, v27, v28, v29, v58, v62, v66);
    uint64_t v30 = sub_100021FC8();
    sub_1000B426C(v30);
    sub_1000B4478();
    sub_1000B3968(&qword_10010ECD8, type metadata accessor for ModelCatalogProvider);
    sub_1000B408C();
    uint64_t v33 = (char *)swift_allocObject(&unk_100104D58, v31, v32);
    uint64_t v41 = sub_1000B41F8(v33, v34, v35, v36, v37, v38, v39, v40, v59, v63, v67, v70, v73, v76);
    sub_1000B42C0(v41, v42, v43, v44, v45, v46, v47, v48, v60, v64, v68, v71, v74, v77, v79, v81, v83, v85);
    sub_1000B4714();
    uint64_t v49 = sub_10000C030();
    sub_1000B476C( v49,  (uint64_t)&unk_10010ECE0,  v50,  v51,  v52,  v53,  v54,  v55,  v61,  v65,  v69,  v72,  v75,  v78,  v80,  v82,  v84);
    *(void *)(v2 + 2sub_10002FFE4((uint64_t)v1, v0 + 16) = v56;
    sub_10000BE64(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock, v86, 33LL);
    sub_1000224B4();
    sub_1000B4760();
    swift_endAccess();
    uint64_t v57 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v2 + 22sub_100006F7C(v0 + 4) = v57;
    type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0LL);
    sub_100003B20(&qword_10010B468);
    *uint64_t v57 = v2;
    v57[1] = sub_1000AD1C8;
    return sub_1000B4188();
  }

uint64_t sub_1000AD1C8()
{
  *(void *)(v0 + 232) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_1000AD218()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[12];
  __n128 v6 = swift_release(v0[27]);
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v3, v5, v6);
  sub_1000304C4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF48();
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  uint64_t v7 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021CD4(v7);
}

uint64_t sub_1000AD2AC()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  __n128 v6 = swift_release(*(void *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v3, v4, v6);
  sub_100030250(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000B42E0(*(void *)(v0 + 192));
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  return sub_100049570(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AD330( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a4;
  v8[9] = a5;
  v8[7] = a1;
  uint64_t v12 = (int *)((char *)a6 + *a6);
  uint64_t v10 = (void *)swift_task_alloc(a6[1]);
  v8[10] = v10;
  *uint64_t v10 = v8;
  v10[1] = sub_1000AD3AC;
  return ((uint64_t (*)(void *, uint64_t))v12)(v8 + 2, a8);
}

uint64_t sub_1000AD3AC()
{
  uint64_t v3 = *(void *)(v2 + 80);
  void *v4 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_1000AD404()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v0);
}

uint64_t sub_1000AD440()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AD46C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_100007460((uint64_t)&unk_100104D08, 32LL);
  *(void *)(v9 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a1;
  *(void *)(v9 + 2sub_100006F7C(v0 + 4) = a2;
  uint64_t v10 = v2 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers;
  sub_10000BE64(v10, (uint64_t)v20, 33LL);
  sub_1000224B4();
  sub_1000B2654();
  uint64_t v11 = *(void *)(*(void *)v10 + 16LL);
  sub_1000B26FC(v11);
  uint64_t v12 = *(void *)v10;
  *(void *)(v12 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v11 + 1;
  uint64_t v13 = v12 + 16 * v11;
  *(void *)(v13 + 32) = &unk_10010ECA0;
  *(void *)(v13 + 40) = v9;
  swift_endAccess(v20);
  uint64_t v14 = sub_100021FC8();
  sub_10002FF3C(v8, v15, v16, v14);
  uint64_t v17 = (void *)sub_100007460((uint64_t)&unk_100104D30, 48LL);
  v17[2] = 0LL;
  v17[3] = 0LL;
  v17[4] = a1;
  void v17[5] = a2;
  sub_1000224B4();
  uint64_t v18 = sub_100003854(v8, (uint64_t)&unk_10010ECB0, (uint64_t)v17);
  return swift_release(v18);
}

uint64_t sub_1000AD584(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000494F0;
  return v7(v4);
}

uint64_t sub_1000AD5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[34] = a4;
  v5[35] = a5;
  uint64_t v6 = sub_100003B20(&qword_10010EC48);
  v5[36] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[37] = v7;
  v5[38] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010EC40);
  v5[39] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[40] = v9;
  v5[41] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000AD674, 0LL, 0LL);
}

uint64_t sub_1000AD674()
{
  if (qword_10010B128 != -1) {
    swift_once(&qword_10010B128, sub_1000A95B4);
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = dispatch thunk of CatalogClient.resources()();
  uint64_t v43 = v0;
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v2 = v0 + 16;
    uint64_t v5 = v0 + 56;
    uint64_t v6 = v0 + 96;
    uint64_t v1 = (__int128 *)(v0 + 136);
    uint64_t v7 = v0 + 176;
    uint64_t v8 = v3 + 32;
    uint64_t v41 = v3;
    swift_bridgeObjectRetain(v3);
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v42 = (__int128 *)(v0 + 56);
    do
    {
      sub_1000B45D8();
      sub_1000B4634(v6);
      uint64_t v10 = sub_100003B20(&qword_10010EC18);
      uint64_t v11 = sub_100003B20(&qword_10010EC20);
      if ((sub_1000B4544(v7, v2, v10, v11) & 1) == 0)
      {
        *(void *)(v7 + 32) = 0LL;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0u;
      }

      sub_1000B4700();
      if (*(void *)(v0 + 200))
      {
        sub_1000070EC((__int128 *)v7, (uint64_t)v1);
        sub_1000070EC(v1, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        {
          sub_1000B2B10();
          uint64_t v9 = v15;
        }

        unint64_t v13 = v9[2];
        unint64_t v12 = v9[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000B4720(v12);
          sub_1000B2B10();
          uint64_t v9 = v16;
        }

        __int128 v9[2] = v13 + 1;
        uint64_t v14 = (uint64_t)&v9[5 * v13 + 4];
        uint64_t v5 = (uint64_t)v42;
        sub_1000070EC(v42, v14);
        uint64_t v0 = v43;
      }

      else
      {
        sub_10002F99C(v7, &qword_10010EC28);
      }

      v8 += 40LL;
      --v4;
    }

    while (v4);
    sub_10000C1B0(v41);
  }

  else
  {
    swift_bridgeObjectRelease(v3);
    uint64_t v9 = _swiftEmptyArrayStorage;
  }

  sub_1000B47AC((uint64_t)v9);
  if (v2)
  {
    sub_10000C1E0();
    *(void *)(v0 + 26sub_100006F7C(v0 + 4) = v2;
    swift_errorRetain(v2);
    uint64_t v17 = sub_100003B20(&qword_10010B468);
    String.init<A>(describing:)(v0 + 264, v17);
    uint64_t v19 = v18;
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v20 = sub_10000BF6C();
    uint64_t v21 = (os_log_s *)sub_100003BA0(v20, (uint64_t)qword_10010E9A0);
    uint64_t v22 = sub_100021EB0();
    Logger.logObject.getter(v22);
    os_log_type_t v23 = sub_10003CEEC();
    if (sub_10009D108(v23))
    {
      uint64_t v24 = v0 + 232;
      uint64_t v25 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v44 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v25 = 136315138;
      sub_100021EB0();
      uint64_t v26 = sub_1000854B4();
      sub_100015EF8(v26, v27, v28);
      *(void *)(v43 + 232) = v29;
      uint64_t v0 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v43 + 240);
      sub_100095B00(v19);
      sub_100022210( (void *)&_mh_execute_header,  v21,  (os_log_type_t)v1,  "Failed to monitor model catalog for updates to all assets: %s",  v25);
      sub_100021F38(v44);
      sub_10000BCC4(v44);
      sub_10000BCC4((uint64_t)v25);

      sub_100021F6C();
    }

    else
    {
      sub_100021F6C();
      sub_10000C1B0(v19);
    }

    sub_1000B4668();
    sub_10000C140();
    return sub_10002FF80(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v31 = (void *)v0;
    uint64_t v34 = v0 + 296;
    uint64_t v32 = *(void *)(v0 + 296);
    uint64_t v33 = *(void *)(v34 + 8);
    uint64_t v35 = v31[36];
    sub_10000C1E0();
    AsyncStream.makeAsyncIterator()(v35);
    sub_1000304C4(v33, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
    v31[42] = 0LL;
    uint64_t v36 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v31[43] = v36;
    *uint64_t v36 = v31;
    v36[1] = sub_1000ADA68;
    sub_10003CE0C();
    return AsyncStream.Iterator.next(isolation:)(v37, v38, v39, v40);
  }

uint64_t sub_1000ADA68()
{
  return sub_10000BD98();
}

uint64_t sub_1000ADA9C()
{
  if (*(void *)(v0 + 240))
  {
    uint64_t v1 = *(void *)(v0 + 336);
    uint64_t v2 = sub_1000A8E28(*(void *)(v0 + 240));
    *(void *)(v0 + 352) = v1;
    sub_10000BD28();
    uint64_t v3 = Set.init(minimumCapacity:)(v2[2], &type metadata for String, &protocol witness table for String);
    *(void *)(v0 + 256) = v3;
    uint64_t v4 = v2[2];
    if (v4)
    {
      uint64_t v5 = v2 + 5;
      do
      {
        sub_100022C50();
        sub_1000B431C();
        swift_bridgeObjectRelease(*(void *)(v0 + 224));
        v5 += 2;
        --v4;
      }

      while (v4);
      sub_10000C1E0();
      uint64_t v6 = *(void *)(v0 + 256);
    }

    else
    {
      uint64_t v6 = v3;
      sub_10000C1E0();
    }

    *(void *)(v0 + 360) = v6;
    unint64_t v13 = (void *)sub_100021EFC(*(void *)(v0 + 272));
    *(void *)(v0 + 368) = v13;
    *unint64_t v13 = v0;
    v13[1] = sub_1000ADC30;
    return v14(v6);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 320) + 8LL))(*(void *)(v0 + 328), *(void *)(v0 + 312));
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v7 = sub_10000BF6C();
    sub_10003CE68(v7, (uint64_t)qword_10010E9A0);
    os_log_type_t v8 = sub_10003CEEC();
    if (sub_10002275C(v8))
    {
      uint64_t v9 = (_WORD *)sub_10000BCF4(2LL);
      *uint64_t v9 = 0;
      sub_10003F1B4((void *)&_mh_execute_header, v10, v11, "ModelCatalog asset update stream ended unexpectedly");
      sub_10000BCC4((uint64_t)v9);
    }

    sub_1000B4668();
    sub_10000C140();
    return sub_1000495D4(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000ADC30()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = v2;
  sub_1000B45EC(v2[46], &v9);
  sub_10000C1E0();
  v2[42] = v2[44];
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v2[43] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000ADA68;
  sub_10003CE0C();
  return AsyncStream.Iterator.next(isolation:)(v4, v5, v6, v7);
}

uint64_t sub_1000ADCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[58] = a3;
  v4[59] = v3;
  v4[56] = a1;
  v4[57] = a2;
  uint64_t v5 = sub_1000305BC();
  v4[60] = v5;
  v4[61] = *(void *)(v5 - 8);
  v4[62] = sub_10002287C();
  v4[63] = sub_10002287C();
  uint64_t v6 = sub_100003B20(&qword_10010C028);
  v4[64] = sub_100021CA4(v6);
  uint64_t v7 = sub_1000B4698();
  v4[65] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[66] = v8;
  v4[67] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003B20(&qword_10010C9C0);
  v4[68] = sub_100021CA4(v9);
  uint64_t v10 = type metadata accessor for FilePath(0LL);
  v4[69] = v10;
  v4[70] = *(void *)(v10 - 8);
  v4[71] = sub_10002287C();
  v4[72] = sub_10002287C();
  v4[73] = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0LL);
  v4[74] = sub_10002287C();
  v4[75] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_1000ADDB8()
{
  uint64_t v1 = v0 + 392;
  if (qword_10010B128 != -1) {
    swift_once(&qword_10010B128, sub_1000A95B4);
  }
  dispatch thunk of CatalogClient.resource(for:)(*(void *)(v0 + 456));
  p_ivar_base_size = &MemoryPressureObserver.ivar_base_size;
  uint64_t v135 = v0 + 384;
  if (*(void *)(v0 + 80))
  {
    uint64_t v23 = v0 + 336;
    sub_1000070EC((__int128 *)(v0 + 56), v0 + 16);
    sub_100007104(v0 + 16, v0 + 336);
    uint64_t v24 = sub_100003B20(&qword_10010EC18);
    uint64_t v25 = sub_100003B20(&qword_10010EC60);
    uint64_t v26 = sub_1000B4544(v0 + 256, v0 + 336, v24, v25);
    if (!(_DWORD)v26)
    {
      *(void *)(v0 + 288) = 0LL;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      sub_10003096C(v26, &qword_10010EC68);
      if (qword_10010B110 != -1) {
        swift_once(&qword_10010B110, sub_1000A9510);
      }
      uint64_t v57 = *(os_log_s **)(v0 + 464);
      uint64_t v58 = sub_10000BF6C();
      sub_100003BA0(v58, (uint64_t)qword_10010E9A0);
      sub_10000C2A8((uint64_t)v57);
      sub_10000C158();
      os_log_type_t v59 = sub_10003F20C();
      BOOL v60 = sub_10009D108(v59);
      uint64_t v61 = *(void *)(v0 + 464);
      if (v60)
      {
        uint64_t v132 = v0 + 392;
        uint64_t v62 = *(void *)(v0 + 456);
        uint64_t v63 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v64 = sub_10000BCF4(32LL);
        v136[0] = v64;
        *(_DWORD *)uint64_t v63 = 136315138;
        swift_bridgeObjectRetain(v61);
        uint64_t v65 = v62;
        uint64_t v1 = v0 + 392;
        sub_100015EF8(v65, v61, v136);
        *(void *)(v0 + 38sub_100006F7C(v0 + 4) = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v135, v0 + 392);
        sub_100095B00(v61);
        sub_100022210( (void *)&_mh_execute_header,  v57,  (os_log_type_t)(v0 + 80),  "Asset %s cannot be converted to a Model Catalog Managed Resource",  v63);
        sub_100021F38(v64);
        sub_10000BCC4(v64);
        sub_10000BCC4((uint64_t)v63);
      }

      else
      {

        sub_10000C1B0(v61);
      }

      uint64_t v73 = *(void *)(v0 + 480);
      uint64_t v74 = *(void *)(v0 + 488);
      sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v76 = sub_1000302B0(v73, v75);
      uint64_t v78 = sub_1000B454C(v76, v77);
      sub_1000843A8( (uint64_t)v78,  enum case for ModelManagerError.unrecognizedModelCatalogResource(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 104));
      uint64_t v79 = sub_100021EB0();
      sub_1000B4688(v79, v80, v81, v82, v83, v84, v85, v86, v125, v126, v0 + 16, v132, v135, v136[0]);
      uint64_t v87 = v130;
LABEL_41:
      sub_100006F7C(v87);
      p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
LABEL_4:
      uint64_t v3 = *(void *)(v0 + 504);
      *(void *)(v0 + 42sub_100006F7C(v0 + 4) = v23;
      swift_errorRetain(v23);
      sub_100003B20(&qword_10010B468);
      if (sub_1000B44B8(v3, v0 + 424))
      {
        uint64_t v4 = *(void *)(v0 + 496);
        uint64_t v5 = *(void *)(v0 + 504);
        uint64_t v6 = *(void *)(v0 + 480);
        uint64_t v7 = *(void *)(v0 + 488);
        swift_errorRelease(v23);
        sub_1000228F0(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
        sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_1000302B0(v6, v8);
        sub_1000228F0(v9, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
        sub_100083B58();
        sub_1000B4534();
        uint64_t v10 = *(void *)(v0 + 424);
      }

      else
      {
        swift_errorRelease(*(void *)(v0 + 424));
        *(void *)(v0 + 408) = v23;
        swift_errorRetain(v23);
        uint64_t v134 = sub_1000B4674(v0 + 408);
        uint64_t v12 = v11;
        if (*((void *)p_ivar_base_size + 34) != -1LL) {
          swift_once(&qword_10010B110, sub_1000A9510);
        }
        unint64_t v13 = *(os_log_s **)(v0 + 464);
        uint64_t v14 = sub_10000BF6C();
        sub_100003BA0(v14, (uint64_t)qword_10010E9A0);
        sub_10000C2A8((uint64_t)v13);
        sub_10000C2A8(v12);
        sub_10000C158();
        os_log_type_t v15 = sub_10003F20C();
        BOOL v16 = sub_1000B4758(v13);
        uint64_t v17 = *(void *)(v0 + 464);
        if (v16)
        {
          uint64_t v127 = *(void *)(v0 + 456);
          uint64_t v133 = v1;
          uint64_t v18 = sub_10000BCF4(22LL);
          uint64_t v129 = sub_10000BCF4(64LL);
          v136[0] = v129;
          *(_DWORD *)uint64_t v18 = 136315394;
          sub_100083500();
          sub_100015EF8(v127, v17, v136);
          *(void *)(v0 + 400) = v19;
          sub_10000C04C(v0 + 400, v0 + 408);
          sub_100095B00(v17);
          *(_WORD *)(v18 + 12) = 2080;
          sub_1000225A4();
          uint64_t v20 = v134;
          sub_100095D40(v134, v21, v136);
          *(void *)(v0 + 392) = v22;
          sub_10000C04C(v133, v0 + 400);
          sub_100095B00(v12);
          sub_10000BFDC( (void *)&_mh_execute_header,  v13,  v15,  "Failed to get asset versioned data for %s: %s",  (uint8_t *)v18);
          sub_1000307B4(v129);
          sub_10000BCC4(v129);
          sub_10000BCC4(v18);
        }

        else
        {

          sub_10000C1B0(v12);
          sub_10000C1B0(v17);
          uint64_t v20 = v134;
        }

        uint64_t v35 = *(void *)(v0 + 480);
        sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
        uint64_t v37 = sub_1000302B0(v35, v36);
        uint64_t v39 = sub_100083AA4(v37, v38);
        *uint64_t v40 = v20;
        v40[1] = v12;
        sub_1000B46F4(v39, enum case for ModelManagerError.modelCatalogError(_:));
        sub_100083B58();
        uint64_t v10 = v23;
      }

      swift_errorRelease(v10);
      sub_1000B403C();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      sub_100030760();
      uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
      return sub_100030350(v41);
    }

    sub_1000070EC((__int128 *)(v0 + 256), v0 + 296);
    uint64_t v27 = *(void *)(v0 + 320);
    sub_10000729C((void *)(v0 + 296), v27);
    sub_1000B45F8();
    if ((dispatch thunk of CatalogResource.assetBacked.getter(v27) & 1) != 0)
    {
      sub_1000B4634(v0 + 296);
      sub_100003B20(&qword_10010EC20);
      uint64_t v28 = sub_1000B478C();
      uint64_t v30 = sub_1000B4544(v28, v0 + 176, v25, v29);
      if ((_DWORD)v30)
      {
        uint64_t v31 = *(void *)(v0 + 472);
        sub_1000070EC((__int128 *)(v0 + 136), v0 + 216);
        sub_1000B4634(v0 + 216);
        uint64_t v32 = sub_100007460((uint64_t)&unk_100104C68, 64LL);
        *(void *)(v0 + 608) = v32;
        *(void *)(v32 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v31;
        sub_1000070EC((__int128 *)(v0 + 96), v32 + 24);
        swift_retain();
        uint64_t v33 = (void *)sub_10002287C();
        *(void *)(v0 + 6sub_10002FFE4((uint64_t)v1, v0 + 16) = v33;
        *uint64_t v33 = v0;
        v33[1] = sub_1000AE83C;
        return sub_1000ACB0C(*(void *)(v0 + 600), (uint64_t)&unk_10010EC78, v32);
      }

      *(void *)(v0 + 168) = 0LL;
      *(_OWORD *)(v0 + 136) = 0u;
      *(_OWORD *)(v0 + 152) = 0u;
      sub_10003096C(v30, &qword_10010EC28);
      if (qword_10010B110 != -1) {
        swift_once(&qword_10010B110, sub_1000A9510);
      }
      uint64_t v102 = *(os_log_s **)(v0 + 464);
      uint64_t v103 = sub_10000BF6C();
      os_log_type_t v104 = sub_100003BA0(v103, (uint64_t)qword_10010E9A0);
      sub_10000C2A8((uint64_t)v102);
      sub_10000C158();
      os_log_type_t v105 = sub_10003F20C();
      BOOL v106 = sub_10002275C(v105);
      uint64_t v23 = *(void *)(v0 + 464);
      if (v106)
      {
        uint64_t v132 = *(void *)(v0 + 456);
        uint64_t v135 = v0 + 416;
        uint64_t v107 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v108 = sub_10000BCF4(32LL);
        v136[0] = v108;
        *(_DWORD *)uint64_t v107 = 136315138;
        uint64_t v126 = (uint64_t)(v107 + 4);
        sub_10002289C();
        sub_100015EF8(v132, v23, v136);
        *(void *)(v0 + 4sub_10002FFE4((uint64_t)v1, v0 + 16) = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424);
        sub_100095B00(v23);
        sub_100022210( (void *)&_mh_execute_header,  v102,  v104,  "Asset %s cannot be converted to a Model Catalog Asset Backed Resource",  v107);
        sub_100021F38(v108);
        uint64_t v110 = v108;
        uint64_t v1 = v0 + 392;
        sub_10000BCC4(v110);
        sub_10000BCC4((uint64_t)v107);
      }

      else
      {

        sub_10000C1B0(v23);
      }

      uint64_t v111 = *(void *)(v0 + 480);
      uint64_t v112 = *(void *)(v0 + 488);
      sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v114 = sub_1000302B0(v111, v113);
      uint64_t v116 = sub_1000B454C(v114, v115);
      sub_1000843A8( (uint64_t)v116,  enum case for ModelManagerError.unrecognizedModelCatalogResource(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 104));
      uint64_t v117 = sub_100021EB0();
      sub_1000B4688(v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v0 + 16, v132, v135, v136[0]);
      sub_100006F7C(v131);
      uint64_t v87 = (void *)(v0 + 296);
      goto LABEL_41;
    }

    uint64_t v68 = *(void *)(v0 + 568);
    uint64_t v69 = *(void *)(v0 + 560);
    uint64_t v70 = *(void *)(v0 + 552);
    uint64_t v71 = *(char **)(v0 + 448);
    sub_1000B46B4();
    sub_100006F7C((void *)(v0 + 16));
    *(void *)uint64_t v71 = 0LL;
    *((void *)v71 + 1) = 0xE000000000000000LL;
    uint64_t v72 = sub_1000B46C0();
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(&v71[*(int *)(v72 + 20)], v68, v70);
    sub_100006F7C((void *)(v0 + 296));
  }

  else
  {
    uint64_t v42 = *(void *)(v0 + 512);
    sub_10002F99C(v0 + 56, &qword_10010EC58);
    type metadata accessor for ModelCatalogProvider(0LL);
    sub_1000AF210();
    uint64_t v43 = sub_1000229CC();
    uint64_t v44 = sub_1000060B4(v42, 1LL, v43);
    int v45 = v44;
    sub_10003096C(v44, &qword_10010C028);
    if (v45 == 1)
    {
      if (qword_10010B110 != -1) {
        swift_once(&qword_10010B110, sub_1000A9510);
      }
      uint64_t v46 = *(os_log_s **)(v0 + 464);
      uint64_t v47 = sub_10000BF6C();
      os_log_type_t v48 = sub_100003BA0(v47, (uint64_t)qword_10010E9A0);
      sub_10000C2A8((uint64_t)v46);
      sub_10000C158();
      os_log_type_t v49 = sub_10003F20C();
      BOOL v50 = sub_10002275C(v49);
      uint64_t v23 = *(void *)(v0 + 464);
      if (v50)
      {
        uint64_t v128 = v0 + 376;
        uint64_t v51 = *(void *)(v0 + 456);
        uint64_t v52 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v132 = v0 + 392;
        uint64_t v53 = sub_10000BCF4(32LL);
        v136[0] = v53;
        *(_DWORD *)uint64_t v52 = 136315138;
        sub_10002289C();
        uint64_t v54 = v51;
        p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
        sub_100015EF8(v54, v23, v136);
        *(void *)(v0 + 376) = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v135);
        sub_100095B00(v23);
        sub_100022210((void *)&_mh_execute_header, v46, v48, "Asset %s not found in Model Catalog", v52);
        sub_100021F38(v53);
        uint64_t v56 = v53;
        uint64_t v1 = v0 + 392;
        sub_10000BCC4(v56);
        sub_10000BCC4((uint64_t)v52);
      }

      else
      {

        sub_10000C1B0(v23);
      }

      uint64_t v88 = *(void *)(v0 + 480);
      uint64_t v89 = *(void *)(v0 + 488);
      sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v91 = sub_1000302B0(v88, v90);
      uint64_t v93 = sub_1000B454C(v91, v92);
      sub_1000843A8( (uint64_t)v93,  enum case for ModelManagerError.assetNotFound(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 104));
      uint64_t v94 = sub_100021EB0();
      sub_1000B4688(v94, v95, v96, v97, v98, v99, v100, v101, v125, v126, v128, v132, v135, v136[0]);
      goto LABEL_4;
    }

    uint64_t v67 = *(void **)(v0 + 448);
    sub_1000B46C0();
    sub_1000B46B4();
    *uint64_t v67 = 0LL;
    v67[1] = 0xE000000000000000LL;
  }

  sub_1000B421C();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  uint64_t v41 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100030350(v41);
}

uint64_t sub_1000AE83C()
{
  *(void *)(v0 + 62sub_100006F7C(v0 + 4) = v1;
  swift_task_dealloc(v3);
  sub_1000B465C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_1000AE890()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  (*(void (**)(uint64_t, void, void))(v0[66] + 16LL))(v3, v0[75], v0[65]);
  FilePath.init(_:)(v3);
  if (sub_1000060B4(v2, 1LL, v1) == 1)
  {
    sub_10002F99C(v0[68], &qword_10010C9C0);
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v84 = v0 + 53;
    uint64_t v4 = v0[75];
    uint64_t v5 = v0[74];
    uint64_t v6 = v0[58];
    uint64_t v83 = sub_10000BF6C();
    sub_100003BA0(v83, (uint64_t)qword_10010E9A0);
    sub_1000B3AA8(v4, v5, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    uint64_t v7 = sub_10000C2A8(v6);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (sub_1000B4758(v8))
    {
      uint64_t v81 = v0[65];
      uint64_t v11 = v0[57];
      uint64_t v10 = v0[58];
      uint64_t v12 = sub_10000BCF4(22LL);
      uint64_t v13 = sub_10000BCF4(64LL);
      v87[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      sub_100083500();
      sub_100015EF8(v11, v10, v87);
      v0[54] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 54, v0 + 55);
      sub_100095B00(v10);
      *(_WORD *)(v12 + 12) = 2080;
      sub_1000B3968(&qword_10010C9D8, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v81, v15);
      uint64_t v18 = v17;
      sub_100015EF8(v16, v17, v87);
      v0[55] = v19;
      sub_10000C04C((uint64_t)(v0 + 55), (uint64_t)(v0 + 56));
      uint64_t v20 = swift_bridgeObjectRelease(v18);
      sub_100049B5C(v20, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
      sub_10000BFDC( (void *)&_mh_execute_header,  v8,  v9,  "Failed to convert asset %s URL %s to file path",  (uint8_t *)v12);
      sub_1000307B4(v13);
      sub_10000BCC4(v13);
      sub_10000BCC4(v12);
    }

    else
    {
      uint64_t v35 = sub_10000C1B0(v0[58]);
      sub_100049B5C(v35, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    }

    uint64_t v36 = v0[60];
    uint64_t v38 = v0[57];
    uint64_t v37 = v0[58];
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v40 = v39;
    uint64_t v41 = sub_1000302B0(v36, v39);
    *uint64_t v42 = v38;
    v42[1] = v37;
    sub_1000B46F4((uint64_t)v42, enum case for ModelManagerError.assetNotAvailableInModelCatalog(_:));
    uint64_t v43 = sub_1000225A4();
    uint64_t v51 = swift_willThrow(v43, v44, v45, v46, v47, v48, v49, v50);
    sub_100049B5C(v51, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    sub_100006F7C(v0 + 27);
    sub_100006F7C(v0 + 2);
    sub_100006F7C(v0 + 37);
    uint64_t v52 = v0[63];
    v0[53] = v41;
    swift_errorRetain(v41);
    sub_100003B20(&qword_10010B468);
    if (sub_1000B44B8(v52, (uint64_t)v84))
    {
      uint64_t v53 = v0[62];
      uint64_t v54 = v0[63];
      uint64_t v55 = v0[60];
      uint64_t v56 = v0[61];
      swift_errorRelease(v41);
      sub_1000228F0(v53, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 32));
      sub_1000302B0(v55, v40);
      sub_1000228F0(v57, v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 16));
      sub_100083B58();
      sub_1000B4534();
      uint64_t v58 = v0[53];
    }

    else
    {
      swift_errorRelease(*v84);
      v0[51] = v41;
      swift_errorRetain(v41);
      uint64_t v86 = sub_1000B4674((uint64_t)(v0 + 51));
      uint64_t v60 = v59;
      if (qword_10010B110 != -1) {
        swift_once(&qword_10010B110, sub_1000A9510);
      }
      uint64_t v61 = v0[58];
      uint64_t v62 = sub_100003BA0(v83, (uint64_t)qword_10010E9A0);
      sub_10000C2A8(v61);
      uint64_t v63 = sub_10000C2A8(v60);
      uint64_t v64 = (os_log_s *)v62;
      Logger.logObject.getter(v63);
      os_log_type_t v65 = sub_10003F20C();
      BOOL v66 = sub_100022260(v65);
      uint64_t v67 = v0[58];
      if (v66)
      {
        uint64_t v82 = v0[57];
        uint64_t v68 = sub_10000BCF4(22LL);
        uint64_t v85 = sub_10000BCF4(64LL);
        v87[0] = v85;
        *(_DWORD *)uint64_t v68 = 136315394;
        sub_1000225A4();
        sub_100095D40(v82, v69, v87);
        v0[50] = v70;
        uint64_t v71 = sub_1000845E4();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72);
        sub_100095B00(v67);
        *(_WORD *)(v68 + 12) = 2080;
        sub_100021EB0();
        sub_100015EF8(v86, v60, v87);
        v0[49] = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 49, v0 + 50);
        sub_100095B00(v60);
        sub_10000BFDC( (void *)&_mh_execute_header,  v64,  (os_log_type_t)v38,  "Failed to get asset versioned data for %s: %s",  (uint8_t *)v68);
        sub_1000307B4(v85);
        sub_10000BCC4(v85);
        sub_10000BCC4(v68);
      }

      else
      {

        sub_10000C1B0(v60);
        sub_10000C1B0(v67);
      }

      uint64_t v74 = v0[60];
      uint64_t v75 = v0[61];
      uint64_t v76 = sub_1000302B0(v74, v40);
      uint64_t v78 = sub_100083AA4(v76, v77);
      uint64_t *v79 = v86;
      v79[1] = v60;
      (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))( v78,  enum case for ModelManagerError.modelCatalogError(_:),  v74);
      sub_100083B58();
      uint64_t v58 = v41;
    }

    swift_errorRelease(v58);
    sub_1000B403C();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v21 = v0[75];
    uint64_t v22 = v0[73];
    uint64_t v23 = (char *)v0[72];
    uint64_t v24 = v0[70];
    uint64_t v25 = v0[69];
    uint64_t v26 = v0[68];
    uint64_t v27 = (char *)v0[56];
    sub_100006F7C(v0 + 27);
    sub_100006F7C(v0 + 2);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    v28(v23, v26, v25);
    uint64_t v29 = (uint64_t *)(v21 + *(int *)(v22 + 20));
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = sub_100083500();
    sub_100049B5C(v32, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    uint64_t v33 = sub_1000B46C0();
    v28(&v27[*(int *)(v33 + 20)], (uint64_t)v23, v25);
    *(void *)uint64_t v27 = v31;
    *((void *)v27 + 1) = v30;
    sub_100006F7C(v0 + 37);
    sub_1000B421C();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    uint64_t v34 = (uint64_t (*)(void))sub_1000227B8();
  }

  return v34();
}

uint64_t sub_1000AEEE4()
{
  uint64_t v2 = *(void *)(v0 + 624);
  uint64_t v3 = *(void *)(v0 + 504);
  uint64_t v4 = *(void *)(v0 + 480);
  *(void *)(v0 + 42sub_100006F7C(v0 + 4) = v2;
  swift_errorRetain(v2);
  uint64_t v5 = sub_100003B20(&qword_10010B468);
  if (swift_dynamicCast(v3, v0 + 424, v5, v4, 0LL))
  {
    uint64_t v7 = *(void *)(v0 + 496);
    uint64_t v6 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    swift_errorRelease(v2);
    sub_100083B50(v7, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v11 = sub_1000302B0(v8, v10);
    uint64_t v13 = sub_100083AA4(v11, v12);
    sub_100083B50(v13, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    sub_100083B58();
    sub_1000304C4(v7, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    uint64_t v14 = *(void *)(v0 + 424);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 424));
    *(void *)(v0 + 408) = v2;
    swift_errorRetain(v2);
    uint64_t v15 = sub_1000B4674(v0 + 408);
    uint64_t v17 = v16;
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v18 = *(void *)(v0 + 464);
    uint64_t v19 = sub_10000BF6C();
    uint64_t v20 = (os_log_s *)sub_100003BA0(v19, (uint64_t)qword_10010E9A0);
    sub_10000C2A8(v18);
    uint64_t v21 = sub_10000C2A8(v17);
    Logger.logObject.getter(v21);
    os_log_type_t v22 = sub_10003F20C();
    BOOL v23 = sub_10009D108(v22);
    uint64_t v24 = *(void *)(v0 + 464);
    if (v23)
    {
      uint64_t v38 = *(void *)(v0 + 456);
      uint64_t v40 = v15;
      uint64_t v25 = sub_10000BCF4(22LL);
      uint64_t v39 = sub_10000BCF4(64LL);
      v41[0] = v39;
      *(_DWORD *)uint64_t v25 = 136315394;
      swift_bridgeObjectRetain(v24);
      sub_100015EF8(v38, v24, v41);
      *(void *)(v0 + 400) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408);
      sub_100095B00(v24);
      *(_WORD *)(v25 + 12) = 2080;
      sub_1000225A4();
      sub_100095D40(v40, v27, v41);
      *(void *)(v0 + 392) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400);
      sub_100095B00(v17);
      sub_10000BFDC( (void *)&_mh_execute_header,  v20,  v1,  "Failed to get asset versioned data for %s: %s",  (uint8_t *)v25);
      sub_1000307B4(v39);
      sub_10000BCC4(v39);
      uint64_t v29 = v25;
      uint64_t v15 = v40;
      sub_10000BCC4(v29);
    }

    else
    {
      sub_10000C1B0(*(void *)(v0 + 464));
      sub_10000C1B0(v17);
    }

    uint64_t v30 = *(void *)(v0 + 480);
    uint64_t v31 = *(void *)(v0 + 488);
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v33 = sub_1000302B0(v30, v32);
    uint64_t v35 = sub_100083AA4(v33, v34);
    *uint64_t v36 = v15;
    v36[1] = v17;
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))( v35,  enum case for ModelManagerError.modelCatalogError(_:),  v30);
    sub_100083B58();
    uint64_t v14 = v2;
  }

  swift_errorRelease(v14);
  sub_1000B403C();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  return sub_100030350(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000AF210()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000229CC();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = sub_1000B4428();
  type metadata accessor for AssetCost(v9);
  sub_100030A28();
  __chkstk_darwin(v10);
  v56._countAndFlagsBits = 0x706D655478616A41LL;
  v56._object = (void *)0xE800000000000000LL;
  if (sub_1000B46E8(v56))
  {
    uint64_t v51 = 2019650145LL;
    unint64_t v52 = 0xE400000000000000LL;
    uint64_t v53 = 0LL;
    uint64_t v54 = 0LL;
    char v55 = 1;
LABEL_21:
    sub_100022418();
    AssetCost.init(onDeviceMemory:)(1750000LL);
    sub_1000B0C10();
    sub_1000B4510();
    sub_100005FB0(v39, v40, v41, v7);
    goto LABEL_26;
  }

  v57._countAndFlagsBits = 0xD000000000000018LL;
  v57._object = (void *)0x80000001000DCA20LL;
  if (sub_1000B46E8(v57))
  {
    sub_100022418();
    unint64_t v11 = String.count.getter(0xD000000000000018LL, 0x80000001000DCA20LL);
    unint64_t v12 = sub_1000B2584(v11, v4, v2);
    uint64_t v49 = v13;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v18 = sub_10000BF6C();
    sub_100003BA0(v18, (uint64_t)qword_10010E9A0);
    sub_10000C2A8(v2);
    uint64_t v19 = sub_10000C2A8(v17);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v46))
    {
      unint64_t v48 = v12;
      uint64_t v21 = sub_10000BCF4(22LL);
      uint64_t v45 = sub_10000BCF4(64LL);
      uint64_t v51 = v45;
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v47 = v15;
      sub_100022418();
      sub_100015EF8(v4, v2, &v51);
      uint64_t v50 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v21 + 4);
      sub_100095B00(v2);
      *(_WORD *)(v21 + 12) = 2080;
      sub_10002289C();
      uint64_t v23 = static String._fromSubstring(_:)(v48, v49, v15, v17);
      uint64_t v44 = v20;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease(v17);
      uint64_t v26 = v23;
      uint64_t v15 = v47;
      sub_100015EF8(v26, v25, &v51);
      uint64_t v50 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v21 + 14);
      sub_10000C1B0(v17);
      sub_10000BD28();
      sub_10000BFDC( (void *)&_mh_execute_header,  v44,  v46,  "Using override bundle with identifier %s and provider %s",  (uint8_t *)v21);
      sub_1000307B4(v45);
      sub_10000BCC4(v45);
      uint64_t v28 = v21;
      unint64_t v12 = v48;
      sub_10000BCC4(v28);
    }

    else
    {

      sub_10000C1B0(v17);
      sub_10000C1B0(v2);
    }

    uint64_t v36 = static String._fromSubstring(_:)(v12, v49, v15, v17);
    unint64_t v38 = v37;
    swift_bridgeObjectRelease(v17);
    uint64_t v51 = v36;
    unint64_t v52 = v38;
    uint64_t v53 = 0LL;
    uint64_t v54 = 0LL;
    char v55 = 0;
    goto LABEL_21;
  }

  if (qword_10010B1C8 != -1) {
    swift_once(&qword_10010B1C8, sub_1000B1F2C);
  }
  uint64_t v29 = qword_1001102C8;
  uint64_t v30 = *(void *)(qword_1001102C8 + 16);
  if (v30)
  {
    sub_100022C2C();
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *(void *)(v8 + 72);
    sub_100022C50();
    while (1)
    {
      sub_1000B3AA8(v32, (uint64_t)v0, type metadata accessor for ModelCatalogAsset);
      uint64_t v34 = v0[1];
      BOOL v35 = *v0 == v4 && v34 == v2;
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v0, v34, v4, v2, 0LL) & 1) != 0) {
        break;
      }
      sub_10002F90C((uint64_t)v0, type metadata accessor for ModelCatalogAsset);
      v32 += v33;
      if (!--v30) {
        goto LABEL_24;
      }
    }

    sub_1000B3D84((uint64_t)v0, v6, type metadata accessor for ModelCatalogAsset);
    uint64_t v42 = v6;
    uint64_t v43 = 0LL;
  }

  else
  {
    sub_100022C50();
LABEL_24:
    uint64_t v42 = v6;
    uint64_t v43 = 1LL;
  }

  sub_100005FB0(v42, v43, 1LL, v7);
  swift_bridgeObjectRelease(v29);
LABEL_26:
  sub_100007448();
}

uint64_t sub_1000AF63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for AssetLock(0LL);
  v4[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v4[13] = v7;
  v4[14] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000AF6A4, 0LL, 0LL);
}

uint64_t sub_1000AF6A4()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 64);
  sub_100007104(*(void *)(v0 + 80), v0 + 16);
  sub_1000228F0(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v7 = swift_allocObject(&unk_100104C90, v6 + v2, v5 | 7);
  *(void *)(v0 + 120) = v7;
  sub_1000070EC((__int128 *)(v0 + 16), v7 + 16);
  sub_1000228F0(v7 + v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  uint64_t v8 = (void *)sub_100021EFC((uint64_t)&unk_10010EC80);
  *(void *)(v0 + 128) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000AF790;
  return v10(*(void *)(v0 + 56), sub_1000B39E8, v7);
}

uint64_t sub_1000AF790()
{
  *(void *)(v0 + 136) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    sub_10003CE0C();
    return sub_10000BCD0();
  }

  else
  {
    swift_release();
    sub_10000C140();
    uint64_t v5 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021E4C(v5);
  }

uint64_t sub_1000AF7EC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_1000AF81C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_10000729C(a1, v6);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v7,  v6,  &protocol requirements base descriptor for AssetBackedResource,  &associated type descriptor for AssetBackedResource.CatalogAssetType);
  a3[3] = AssociatedTypeWitness;
  a3[4] = swift_getAssociatedConformanceWitness( v7,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for AssetBackedResource);
  sub_10004DFC0(a3);
  uint64_t result = (void *)dispatch thunk of AssetBackedResource.fetchLockedAsset(with:)(a2, v6, v7);
  if (v3) {
    return sub_10003C888(a3);
  }
  return result;
}

uint64_t sub_1000AF8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_1000B4428();
  uint64_t v7 = type metadata accessor for TaskPriority(v6);
  sub_100005FB0(v2, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_100104C40, 48LL, 7LL);
  void v8[2] = 0LL;
  uint64_t v9 = v8 + 2;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  int v10 = sub_1000060B4(v2, 1LL, v7);
  uint64_t v11 = swift_retain(a2);
  if (v10 == 1)
  {
    sub_10002F99C(v2, &qword_10010B208);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 7168LL;
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v2, v7);
    uint64_t v14 = v15 | 0x1C00LL;
    uint64_t v16 = *v9;
    if (*v9)
    {
      uint64_t v17 = v8[3];
      uint64_t ObjectType = swift_getObjectType(*v9);
      swift_unknownObjectRetain(v16);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      uint64_t v13 = v19;
      swift_unknownObjectRelease(v16);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
    }
  }

  if (v13 | v12)
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    uint64_t v20 = v23;
    v23[2] = v12;
    v23[3] = v13;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = swift_task_create(v14, v20, (char *)&type metadata for () + 8, &unk_10010EC38, v8);
  return swift_release(v21);
}

uint64_t sub_1000AFA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[8] = a4;
  v5[9] = a5;
  uint64_t v6 = sub_100003B20(&qword_10010EC40);
  v5[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[11] = v7;
  v5[12] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010EC48);
  v5[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[14] = v9;
  v5[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000AFB18, 0LL, 0LL);
}

uint64_t sub_1000AFB18()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = sub_100003B20(&qword_10010EC50);
  uint64_t v3 = sub_100007460(v2, 72LL);
  *(_OWORD *)(v3 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000D8890;
  static Catalog.Resource.DisabledUseCaseList.All()((void *)(v0 + 16));
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v6 = sub_10000729C((void *)(v0 + 16), v5);
  *(void *)(v3 + 56) = v5;
  *(void *)(v3 + 6sub_100006F7C(v0 + 4) = *(void *)(v4 + 8);
  uint64_t v7 = sub_10004DFC0((void *)(v3 + 32));
  sub_100083B50( (uint64_t)v7,  (uint64_t)v6,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
  sub_10003D244();
  sub_1000B47AC(v3);
  if (v1)
  {
    swift_bridgeObjectRelease(v3);
    sub_10000C140();
    sub_10000BFE4();
    return sub_100049570(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 104);
    swift_bridgeObjectRelease(v3);
    AsyncStream.makeAsyncIterator()(v9);
    int v10 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 128) = v10;
    *int v10 = v0;
    v10[1] = sub_1000AFC58;
    sub_10003CE0C();
    return AsyncStream.Iterator.next(isolation:)(v11, v12, v13, v14);
  }

uint64_t sub_1000AFC58()
{
  return sub_10000BD98();
}

uint64_t sub_1000AFC8C()
{
  uint64_t v1 = v0[7];
  if (v1)
  {
    uint64_t v2 = (int *)v0[8];
    swift_bridgeObjectRelease(v1);
    uint64_t v8 = (uint64_t (*)(void))((char *)v2 + *v2);
    uint64_t v3 = (void *)swift_task_alloc(v2[1]);
    v0[17] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000AFD2C;
    uint64_t v4 = v8;
  }

  else
  {
    uint64_t v6 = v0[14];
    uint64_t v5 = v0[15];
    (*(void (**)(void, void))(v0[11] + 8LL))(v0[12], v0[10]);
    sub_100030250(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_10000C140();
    sub_10000C1B8();
    uint64_t v4 = (uint64_t (*)(void))sub_1000227B8();
  }

  return sub_100083FB8(v4);
}

uint64_t sub_1000AFD2C()
{
  uint64_t v2 = *v1;
  uint64_t v9 = v2;
  sub_1000B45EC(*(void *)(v2 + 136), &v9);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v2 + 128) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000AFC58;
  sub_10003CE0C();
  return AsyncStream.Iterator.next(isolation:)(v4, v5, v6, v7);
}

uint64_t sub_1000AFDA4()
{
  *(void *)(v1 + 192) = v0;
  return swift_task_switch(sub_1000AFDBC, v0, 0LL);
}

uint64_t sub_1000AFDBC()
{
  if (qword_10010B128 != -1) {
    swift_once(&qword_10010B128, sub_1000A95B4);
  }
  uint64_t v4 = dispatch thunk of CatalogClient.resources()();
  uint64_t v5 = v0 + 136;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v32 = v4;
    uint64_t v33 = v0 + 136;
    uint64_t v7 = v0 + 96;
    uint64_t v1 = v0 + 56;
    uint64_t v2 = (uint64_t *)(v4 + 32);
    swift_bridgeObjectRetain(v4);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v3 = &qword_10010EC20;
    uint64_t v34 = v0 + 96;
    uint64_t v35 = v0;
    do
    {
      sub_1000B45D8();
      uint64_t v9 = sub_1000845E4();
      sub_100007104(v9, v10);
      uint64_t v11 = sub_100003B20(&qword_10010EC18);
      uint64_t v12 = sub_100003B20(&qword_10010EC20);
      if ((sub_1000B4544(v1, v7, v11, v12) & 1) != 0)
      {
        uint64_t v13 = *(void *)(v0 + 80);
        sub_1000B446C();
        sub_1000B45F8();
        uint64_t v15 = dispatch thunk of CatalogResource.id.getter(v13, v14);
        uint64_t v17 = v16;
        sub_100006F7C((void *)v1);
        sub_1000B4700();
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000B27A8();
          uint64_t v8 = v21;
        }

        unint64_t v19 = v8[2];
        unint64_t v18 = v8[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000B4720(v18);
          sub_1000B27A8();
          uint64_t v8 = v22;
        }

        void v8[2] = v19 + 1;
        uint64_t v20 = &v8[2 * v19];
        v20[4] = v15;
        v20[5] = v17;
        uint64_t v7 = v34;
        uint64_t v0 = v35;
        uint64_t v3 = &qword_10010EC20;
      }

      else
      {
        *(void *)(v1 + 32) = 0LL;
        *(_OWORD *)uint64_t v1 = 0u;
        *(_OWORD *)(v1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0u;
        sub_10002F99C(v1, &qword_10010EC28);
        sub_1000B4700();
      }

      v2 += 5;
      --v6;
    }

    while (v6);
    sub_10000C1B0(v32);
    uint64_t v5 = v33;
  }

  else
  {
    swift_bridgeObjectRelease(v4);
    uint64_t v8 = _swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 200) = v8;
  uint64_t v23 = (uint64_t *)(*(void *)(v0 + 192) + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers);
  sub_10000BE64((uint64_t)v23, v5, 0LL);
  uint64_t v24 = *v23;
  *(void *)(v0 + 208) = *v23;
  uint64_t v25 = *(void *)(v24 + 16);
  *(void *)(v0 + 2sub_10002FFE4((uint64_t)v1, v0 + 16) = v25;
  if (v25)
  {
    uint64_t v26 = v8[2];
    *(void *)(v0 + 22sub_100006F7C(v0 + 4) = v26;
    *(void *)(v0 + 232) = 0LL;
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t result = swift_bridgeObjectRetain(v24);
    if (v27)
    {
      *(void *)(v0 + 240) = *(void *)(result + 40);
      sub_1000224B4();
      sub_1000225A4();
      *(void *)(v0 + 176) = Set.init(minimumCapacity:)( v26,  &type metadata for String,  &protocol witness table for String);
      if (v26)
      {
        sub_1000B4604();
        do
        {
          sub_1000B42F0();
          sub_1000B431C();
          swift_bridgeObjectRelease(*(void *)(v0 + 168));
          v1 += 16LL;
        }

        while (v2 != v3);
      }

      swift_bridgeObjectRelease(*(void *)(v0 + 200));
      uint64_t v29 = sub_1000B435C();
      uint64_t v36 = v30;
      uint64_t v31 = (void *)swift_task_alloc(v29);
      *(void *)(v0 + 256) = v31;
      sub_1000B4618(v31, (uint64_t)sub_1000B00B4);
      return v36();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v8);
    return sub_10002FF80(*(uint64_t (**)(void))(v0 + 8));
  }

  return result;
}

uint64_t sub_1000B00B4()
{
  return sub_10000BF5C();
}

void sub_1000B0100()
{
  unint64_t v4 = *(void *)(v0 + 232) + 1LL;
  if (v4 == *(void *)(v0 + 216))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 200));
    sub_10000BD28();
    sub_1000495D4(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    *(void *)(v0 + 232) = v4;
    uint64_t v5 = *(void *)(v0 + 208);
    if (v4 >= *(void *)(v5 + 16))
    {
      __break(1u);
    }

    else
    {
      uint64_t v6 = *(void *)(v0 + 224);
      *(void *)(v0 + 240) = *(void *)(v5 + 16 * v4 + 40);
      sub_1000224B4();
      sub_1000225A4();
      *(void *)(v0 + 176) = Set.init(minimumCapacity:)( v6,  &type metadata for String,  &protocol witness table for String);
      if (v6)
      {
        sub_1000B4604();
        do
        {
          sub_1000B42F0();
          sub_1000B431C();
          swift_bridgeObjectRelease(*(void *)(v0 + 168));
          v1 += 16LL;
        }

        while (v2 != v3);
      }

      swift_bridgeObjectRelease(*(void *)(v0 + 200));
      uint64_t v7 = sub_1000B435C();
      uint64_t v10 = v8;
      uint64_t v9 = (void *)swift_task_alloc(v7);
      *(void *)(v0 + 256) = v9;
      sub_1000B4618(v9, (uint64_t)sub_1000B00B4);
      v10();
    }
  }

uint64_t sub_1000B0210()
{
  sub_10002F99C(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock, &qword_10010ECC8);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock));
  swift_release();
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000B027C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000B0294()
{
  return type metadata accessor for ModelCatalogProvider(0LL);
}

uint64_t type metadata accessor for ModelCatalogProvider(uint64_t a1)
{
  return sub_100047EF0(a1, (uint64_t *)&unk_10010E9E8, (uint64_t)&nominal type descriptor for ModelCatalogProvider);
}

void sub_1000B02B0(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000B035C(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(v2 - 8) + 64LL;
    void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1000DA610;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
  }

void sub_1000B035C(uint64_t a1)
{
  if (!qword_10010EA18)
  {
    uint64_t v2 = type metadata accessor for AssetLock(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10010EA18);
    }
  }

uint64_t *sub_1000B03B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t sub_1000B0444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000B048C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000B04F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1000B0570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000B05CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000B0638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B0644);
}

uint64_t sub_1000B0644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000B4698();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_1000060B4(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(sub_10009600C(v5, v6, v7, v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000B06BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B06C8);
}

uint64_t sub_1000B06C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000B4698();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = sub_1000B478C();
    return sub_100005FB0(v9, a2, a2, v10);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }

  return result;
}

uint64_t type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(uint64_t a1)
{
  return sub_100047EF0( a1,  qword_10010EBE0,  (uint64_t)&nominal type descriptor for ModelCatalogProvider.CatalogAssetProtocolData);
}

uint64_t sub_1000B074C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000DA650;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_1000B07BC(uint64_t *a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010C028);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v34 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  type metadata accessor for ModelCatalogProvider(0LL);
  sub_1000AF210();
  if (sub_1000060B4((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_10002F99C((uint64_t)v4, &qword_10010C028);
    if (qword_10010B110 != -1) {
      swift_once(&qword_10010B110, sub_1000A9510);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v16, (uint64_t)qword_10010E9A0);
    uint64_t v17 = swift_bridgeObjectRetain_n(v14, 2LL);
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain(v14);
      sub_100015EF8(v15, v14, &v37);
      uint64_t v35 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Dependent asset %s not found in test assets", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    uint64_t v23 = type metadata accessor for ModelManagerError(0LL);
    sub_1000B3968( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v23, v24, 0LL, 0LL);
    *uint64_t v25 = v15;
    v25[1] = v14;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  enum case for ModelManagerError.assetNotFound(_:),  v23);
    uint64_t v26 = swift_bridgeObjectRetain(v14);
    swift_willThrow(v26, v27, v28, v29, v30, v31, v32, v33);
  }

  else
  {
    sub_1000B3D84((uint64_t)v4, (uint64_t)v13, type metadata accessor for ModelCatalogAsset);
    sub_1000B3AA8((uint64_t)v13, (uint64_t)v8, type metadata accessor for ModelCatalogAsset);
    sub_100017EB0();
    sub_10002F90C((uint64_t)v11, type metadata accessor for ModelCatalogAsset);
    sub_10002F90C((uint64_t)v13, type metadata accessor for ModelCatalogAsset);
  }

void sub_1000B0B14()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110100);
  sub_100003BA0(v1, (uint64_t)qword_100110100);
  strcpy((char *)v2, "EchoInference");
  v2[7] = -4864;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  char v5 = 0;
  AssetCost.init(onDeviceMemory:)(1LL);
  sub_1000B0C10();
}

void sub_1000B0C10()
{
  char v1 = v0;
  char v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = sub_100003B20(&qword_10010B810);
  uint64_t v19 = sub_100007460(v18, 72LL);
  __int128 v20 = *v11;
  __int128 v21 = v11[1];
  *(_OWORD *)(v19 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000D8890;
  *(_OWORD *)(v19 + 32) = v20;
  *(_OWORD *)(v19 + 48) = v21;
  *(_BYTE *)(v19 + 6sub_100006F7C(v0 + 4) = *((_BYTE *)v11 + 32);
  *uint64_t v17 = v15;
  v17[1] = v13;
  v17[2] = v9;
  v17[3] = v19;
  uint64_t v22 = (int *)sub_1000229CC();
  uint64_t v23 = (char *)v17 + v22[7];
  uint64_t v24 = type metadata accessor for AssetCost(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32LL))(v23, v7, v24);
  *((_BYTE *)v17 + v22[8]) = v5;
  *((_BYTE *)v17 + v22[9]) = v3;
  *((_BYTE *)v17 + v22[10]) = v1;
  sub_100007448();
}

void sub_1000B0CD0()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110118);
  sub_100003BA0(v1, (uint64_t)qword_100110118);
  AssetCost.init(onDeviceMemory:)(100LL);
  sub_1000B0C10();
}

void sub_1000B0DCC()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110130);
  sub_100003BA0(v1, (uint64_t)qword_100110130);
  if (qword_10010B118 != -1) {
    swift_once(&qword_10010B118, sub_1000A957C);
  }
  AssetCost.init(onDeviceMemory:)(qword_1001100E8);
  sub_1000B0C10();
}

void sub_1000B0EF4()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110148);
  sub_100003BA0(v1, (uint64_t)qword_100110148);
  AssetCost.init(onDeviceMemory:)(100LL);
  sub_1000B0C10();
}

void sub_1000B0FF0()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110160);
  sub_100003BA0(v1, (uint64_t)qword_100110160);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B10F0()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110178);
  sub_100003BA0(v1, (uint64_t)qword_100110178);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B11FC()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110190);
  sub_100003BA0(v1, (uint64_t)qword_100110190);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B1304()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_1001101A8);
  sub_100003BA0(v1, (uint64_t)qword_1001101A8);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B13F8()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_1001101C0);
  sub_100003BA0(v1, (uint64_t)qword_1001101C0);
  AssetCost.init(onDeviceMemory:)(100LL);
  sub_1000B0C10();
}

void sub_1000B14E8()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_1001101D8);
  sub_100003BA0(v1, (uint64_t)qword_1001101D8);
  if (qword_10010B118 != -1) {
    swift_once(&qword_10010B118, sub_1000A957C);
  }
  AssetCost.init(onDeviceMemory:)(qword_1001100E8);
  sub_1000B0C10();
}

void sub_1000B1604()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_1001101F0);
  sub_100003BA0(v1, (uint64_t)qword_1001101F0);
  if (qword_10010B118 != -1) {
    swift_once(&qword_10010B118, sub_1000A957C);
  }
  AssetCost.init(onDeviceMemory:)(qword_1001100E8);
  sub_1000B0C10();
}

void sub_1000B1720()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110208);
  sub_100003BA0(v1, (uint64_t)qword_100110208);
  if (qword_10010B120 != -1) {
    swift_once(&qword_10010B120, sub_1000A9598);
  }
  AssetCost.init(onDeviceMemory:)(qword_1001100F0);
  sub_1000B0C10();
}

void sub_1000B183C()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110220);
  sub_100003BA0(v1, (uint64_t)qword_100110220);
  if (qword_10010B120 != -1) {
    swift_once(&qword_10010B120, sub_1000A9598);
  }
  if (qword_1001100F0 == -1)
  {
    __break(1u);
  }

  else
  {
    AssetCost.init(onDeviceMemory:)(qword_1001100F0 + 1);
    sub_1000B0C10();
  }

uint64_t sub_1000B1964()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v4 = (int *)type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60((uint64_t)v4, qword_100110238);
  char v5 = (char *)sub_100003BA0((uint64_t)v4, (uint64_t)qword_100110238);
  AssetCost.init(onDeviceMemory:)(1LL);
  *(void *)char v5 = 0xD000000000000023LL;
  *((void *)v5 + 1) = 0x80000001000DCB10LL;
  *((void *)v5 + 2) = &_swiftEmptyArrayStorage;
  *((void *)v5 + 3) = &off_100102698;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))(&v5[v4[7]], v3, v0);
  v5[v4[8]] = 1;
  v5[v4[9]] = 0;
  v5[v4[10]] = 0;
  return result;
}

void sub_1000B1A64()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110250);
  sub_100003BA0(v1, (uint64_t)qword_100110250);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B1B60()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110268);
  sub_100003BA0(v1, (uint64_t)qword_100110268);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B1C50()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110280);
  sub_100003BA0(v1, (uint64_t)qword_100110280);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B1D44()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_100110298);
  sub_100003BA0(v1, (uint64_t)qword_100110298);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B1E38()
{
  uint64_t v0 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  sub_100003B60(v1, qword_1001102B0);
  sub_100003BA0(v1, (uint64_t)qword_1001102B0);
  AssetCost.init(onDeviceMemory:)(1750000LL);
  sub_1000B0C10();
}

void sub_1000B1F2C()
{
  uint64_t v0 = sub_100003B20(&qword_10010B808);
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 19 * v3, v4 | 7);
  *(_OWORD *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000DA5B0;
  uint64_t v7 = v6 + v5;
  if (qword_10010B130 != -1) {
    swift_once(&qword_10010B130, sub_1000B0B14);
  }
  uint64_t v8 = sub_100003BA0(v1, (uint64_t)qword_100110100);
  sub_1000B3AA8(v8, v7, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B138 != -1) {
    swift_once(&qword_10010B138, sub_1000B0CD0);
  }
  uint64_t v9 = sub_100003BA0(v1, (uint64_t)qword_100110118);
  sub_1000B3AA8(v9, v7 + v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B140 != -1) {
    swift_once(&qword_10010B140, sub_1000B0DCC);
  }
  uint64_t v10 = sub_100003BA0(v1, (uint64_t)qword_100110130);
  sub_1000B3AA8(v10, v7 + 2 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B148 != -1) {
    swift_once(&qword_10010B148, sub_1000B0EF4);
  }
  uint64_t v11 = sub_100003BA0(v1, (uint64_t)qword_100110148);
  sub_1000B3AA8(v11, v7 + 3 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B150 != -1) {
    swift_once(&qword_10010B150, sub_1000B0FF0);
  }
  uint64_t v12 = sub_100003BA0(v1, (uint64_t)qword_100110160);
  sub_1000B3AA8(v12, v7 + 4 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B160 != -1) {
    swift_once(&qword_10010B160, sub_1000B11FC);
  }
  uint64_t v13 = sub_100003BA0(v1, (uint64_t)qword_100110190);
  sub_1000B3AA8(v13, v7 + 5 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B158 != -1) {
    swift_once(&qword_10010B158, sub_1000B10F0);
  }
  uint64_t v14 = sub_100003BA0(v1, (uint64_t)qword_100110178);
  sub_1000B3AA8(v14, v7 + 6 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B168 != -1) {
    swift_once(&qword_10010B168, sub_1000B1304);
  }
  uint64_t v15 = sub_100003BA0(v1, (uint64_t)qword_1001101A8);
  sub_1000B3AA8(v15, v7 - v3 + 8 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B170 != -1) {
    swift_once(&qword_10010B170, sub_1000B13F8);
  }
  uint64_t v16 = sub_100003BA0(v1, (uint64_t)qword_1001101C0);
  sub_1000B3AA8(v16, v7 + 8 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B178 != -1) {
    swift_once(&qword_10010B178, sub_1000B14E8);
  }
  uint64_t v17 = sub_100003BA0(v1, (uint64_t)qword_1001101D8);
  sub_1000B3AA8(v17, v7 + 9 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B180 != -1) {
    swift_once(&qword_10010B180, sub_1000B1604);
  }
  uint64_t v18 = sub_100003BA0(v1, (uint64_t)qword_1001101F0);
  sub_1000B3AA8(v18, v7 + 10 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B188 != -1) {
    swift_once(&qword_10010B188, sub_1000B1720);
  }
  uint64_t v19 = sub_100003BA0(v1, (uint64_t)qword_100110208);
  sub_1000B3AA8(v19, v7 + 11 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B190 != -1) {
    swift_once(&qword_10010B190, sub_1000B183C);
  }
  uint64_t v20 = sub_100003BA0(v1, (uint64_t)qword_100110220);
  sub_1000B3AA8(v20, v7 + 12 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B198 != -1) {
    swift_once(&qword_10010B198, sub_1000B1964);
  }
  uint64_t v21 = sub_100003BA0(v1, (uint64_t)qword_100110238);
  sub_1000B3AA8(v21, v7 + 13 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B1A0 != -1) {
    swift_once(&qword_10010B1A0, sub_1000B1A64);
  }
  uint64_t v22 = sub_100003BA0(v1, (uint64_t)qword_100110250);
  sub_1000B3AA8(v22, v7 + 14 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B1A8 != -1) {
    swift_once(&qword_10010B1A8, sub_1000B1B60);
  }
  uint64_t v23 = sub_100003BA0(v1, (uint64_t)qword_100110268);
  sub_1000B3AA8(v23, v7 - v3 + 16 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B1B0 != -1) {
    swift_once(&qword_10010B1B0, sub_1000B1C50);
  }
  uint64_t v24 = sub_100003BA0(v1, (uint64_t)qword_100110280);
  sub_1000B3AA8(v24, v7 + 16 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B1B8 != -1) {
    swift_once(&qword_10010B1B8, sub_1000B1D44);
  }
  uint64_t v25 = sub_100003BA0(v1, (uint64_t)qword_100110298);
  sub_1000B3AA8(v25, v7 + 17 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_10010B1C0 != -1) {
    swift_once(&qword_10010B1C0, sub_1000B1E38);
  }
  uint64_t v26 = sub_100003BA0(v1, (uint64_t)qword_1001102B0);
  sub_1000B3AA8(v26, v7 + 18 * v3, type metadata accessor for ModelCatalogAsset);
  qword_1001102C8 = v6;
}

unint64_t sub_1000B2584(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v4 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v5 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v5 = 11LL;
    }
    unint64_t v6 = v5 | (v4 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v6, a2, a3);
    if ((v7 & 1) != 0) {
      uint64_t result = v6;
    }
    if (4 * v4 >= result >> 14)
    {
      uint64_t v8 = String.subscript.getter();
      swift_bridgeObjectRelease(a3);
      return v8;
    }
  }

  __break(1u);
  return result;
}

void sub_1000B2654()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000B27A8();
    *uint64_t v0 = v3;
  }

uint64_t sub_1000B26B4()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!(_DWORD)result)
  {
    uint64_t result = sub_1000B2BD8(0, *(void *)(v1 + 16) + 1LL, 1, v1);
    *uint64_t v0 = result;
  }

  return result;
}

void sub_1000B26FC(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24LL) >> 1)
  {
    sub_1000B27A8();
    *(void *)uint64_t v1 = v2;
  }

uint64_t sub_1000B2750(uint64_t result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1000B2BD8(v2 > 1, result + 1, 1, *v1);
    *uint64_t v1 = result;
  }

  return result;
}

void sub_1000B278C()
{
}

void sub_1000B27A8()
{
  if ((v5 & 1) != 0)
  {
    sub_10002284C();
    if (v9 != v10)
    {
      sub_1000B4574();
      if (v9)
      {
        __break(1u);
        return;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v8 = v4;
  }

  uint64_t v11 = *(void *)(v0 + 16);
  if (v8 <= v11) {
    uint64_t v12 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v12 = v8;
  }
  if (v12)
  {
    uint64_t v13 = sub_100022BA4(v3, v4, v5, v6, v7);
    uint64_t v14 = (void *)sub_100007460(v13, 16 * v12 + 32);
    size_t v15 = j__malloc_size(v14);
    void v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 16);
  }

  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  if ((v2 & 1) != 0)
  {
    sub_1000B4654(v0 + 32);
    *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
    sub_10000C1E0();
  }

  else
  {
    v1(0LL, v11, v14 + 4, v0);
  }

  sub_1000496F8();
}

uint64_t sub_1000B2864()
{
  return sub_1000B2968();
}

void sub_1000B2880(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10002284C();
    if (v7 != v8)
    {
      sub_1000B4574();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_100003B20(&qword_10010B810);
    uint64_t v12 = (char *)sub_100007460(v11, 40 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  if ((a1 & 1) != 0)
  {
    sub_100015898((char *)(a4 + 32), v9, v14);
    *(void *)(a4 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
    sub_10000C1E0();
  }

  else
  {
    sub_1000B2FB8(0LL, v9, (unint64_t)v14, a4);
  }

  sub_1000496F8();
}

uint64_t sub_1000B294C()
{
  return sub_1000B2968();
}

uint64_t sub_1000B2968()
{
  if ((v5 & 1) != 0)
  {
    sub_10002284C();
    if (v9 != v10)
    {
      sub_1000B4574();
      if (v9)
      {
        __break(1u);
LABEL_23:
        sub_100021BD4();
        uint64_t v28 = "Division by zero";
        uint64_t v29 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v28,  v29,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v8 = v4;
  }

  uint64_t v11 = *(void *)(v0 + 16);
  if (v8 <= v11) {
    uint64_t v12 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v12 = v8;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v13 = sub_100022BA4(v3, v4, v5, v6, v7);
  uint64_t v14 = *(void *)(v1(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_23;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    sub_100021BD4();
    uint64_t v28 = "Division results in an overflow";
    uint64_t v29 = 31LL;
    goto LABEL_25;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_18:
  v1(0LL);
  sub_100022C2C();
  if ((v2 & 1) != 0)
  {
    sub_1000B4654(v0 + v21);
    *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
    sub_10000C1E0();
  }

  else
  {
    uint64_t v22 = sub_1000B46A0();
    sub_1000B30B4(v22, v23, v24, v25, v26);
  }

  return (uint64_t)v18;
}

void sub_1000B2AF4()
{
}

void sub_1000B2B10()
{
  if ((v4 & 1) != 0)
  {
    sub_10002284C();
    if (v8 != v9)
    {
      sub_1000B4574();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v7 = v3;
  }

  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_100022BA4(v2, v3, v4, v5, v6);
    uint64_t v13 = (void *)sub_100007460(v12, 40 * v11 + 32);
    size_t v14 = j__malloc_size(v13);
    void v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }

  if ((v1 & 1) != 0)
  {
    sub_1000B4654(v0 + 32);
    *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
    sub_10000C1E0();
  }

  else
  {
    uint64_t v15 = sub_1000B46A0();
    sub_1000B32D0(v15, v16, v17, v18, v19);
  }

uint64_t sub_1000B2BD8(char a1, int64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_24:
        uint64_t v21 = "Division by zero";
        uint64_t v22 = 16LL;
LABEL_26:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v21,  v22,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003B20(&qword_10010ED40);
  uint64_t v11 = *(void *)(sub_100003B20(&qword_10010B9D0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_24;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t v21 = "Division results in an overflow";
    uint64_t v22 = 31LL;
    goto LABEL_26;
  }

  v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(sub_100003B20(&qword_10010B9D0) - 8) + 80LL);
  uint64_t v19 = (v18 + 32) & ~v18;
  if ((a1 & 1) != 0)
  {
    sub_1000159C8(a4 + v19, v8);
    *(void *)(a4 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    sub_1000B31AC(0LL, v8, (unint64_t)v15 + v19, a4);
  }

  return (uint64_t)v15;
}

uint64_t sub_1000B2DB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000B2EA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100003B20(&qword_10010ECC0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000B2FB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000B30B4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_100021BD4();
    uint64_t v21 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v22 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    uint64_t v17 = sub_1000B478C();
    swift_arrayInitWithCopy(v17);
    sub_10000C1E0();
    return v14;
  }

  sub_100021BD4();
  uint64_t v21 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v22 = 49LL;
LABEL_11:
  uint64_t result = sub_100021CFC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v21,  v22,  v19,  (uint64_t)"Swift/UnsafePointer.swift",  v20,  v23,  v24,  v25);
  __break(1u);
  return result;
}

uint64_t sub_1000B31AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100003B20(&qword_10010B9D0) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000B32D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_100021BD4();
    unint64_t v13 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v14 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v5;
  if (v6 >= v7 || v6 + 40 * v5 <= a3)
  {
    sub_100022BA4(a1, a2, a3, a4, a5);
    uint64_t v9 = sub_1000B478C();
    swift_arrayInitWithCopy(v9);
    sub_10000C1E0();
    return v7;
  }

  sub_100021BD4();
  unint64_t v13 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v14 = 49LL;
LABEL_11:
  uint64_t result = sub_100021CFC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v13,  v14,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v15,  v16,  v17);
  __break(1u);
  return result;
}

uint64_t sub_1000B33BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) != 0)
  {
    sub_1000B462C();
    sub_1000B41A4();
    int v6 = sub_100003B20(&qword_10010D2E8);
    BOOL v14 = sub_1000B40EC(v6, v7, v8, v9, v10, v11, v12, v13, v31, v33);
    sub_1000B41E4(v14, v15, v16, v17, v18, v19, v20, v21, v32, v34);
    uint64_t v22 = *(void *)(a2 + 56);
    uint64_t v23 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    sub_1000B3D84( v22 + *(void *)(*(void *)(v23 - 8) + 72LL) * a1,  a3,  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    sub_1000B44F0(v24, v25, (uint64_t)&type metadata for String);
    sub_1000B4408();
    uint64_t v26 = sub_1000B4778();
  }

  else
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    uint64_t v26 = sub_10002244C();
  }

  return sub_1000B4240(v26, v27, v28, v29);
}

uint64_t sub_1000B3474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) != 0)
  {
    sub_1000B462C();
    sub_1000B41A4();
    int v6 = sub_100003B20(&qword_10010B848);
    BOOL v14 = sub_1000B40EC(v6, v7, v8, v9, v10, v11, v12, v13, v31, v33);
    sub_1000B41E4(v14, v15, v16, v17, v18, v19, v20, v21, v32, v34);
    uint64_t v22 = *(void *)(a2 + 56);
    uint64_t v23 = type metadata accessor for Policy(0LL);
    uint64_t v24 = sub_1000228F0( a3,  v22 + *(void *)(*(void *)(v23 - 8) + 72LL) * a1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL));
    sub_1000B44F0(v24, v25, (uint64_t)&type metadata for String);
    sub_1000B4408();
    uint64_t v26 = sub_1000B4778();
  }

  else
  {
    type metadata accessor for Policy(0LL);
    uint64_t v26 = sub_10002244C();
  }

  return sub_1000B4240(v26, v27, v28, v29);
}

double sub_1000B3528@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  sub_100083500();
  sub_1000B430C();
  sub_1000B41C0();
  if ((a2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v4);
    *(void *)uint64_t v29 = *v4;
    void *v4 = 0x8000000000000000LL;
    int v8 = sub_100003B20(&qword_10010E0A8);
    BOOL v16 = sub_1000B40EC(v8, v9, v10, v11, v12, v13, v14, v15, v27, v29[0]);
    sub_1000B41E4(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30);
    sub_1000070EC((__int128 *)(*(void *)(a2 + 56) + 40 * a1), a3);
    uint64_t v24 = sub_100003B20(&qword_10010BB28);
    _NativeDictionary._delete(at:)(a1, a2, &type metadata for String, v24);
    uint64_t v25 = *v4;
    void *v4 = a2;
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1000B361C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  sub_100083500();
  sub_100016670();
  sub_1000B41C0();
  if ((v4 & 1) != 0)
  {
    sub_1000B462C();
    sub_1000B41A4();
    int v5 = sub_100003B20(&qword_10010E0B0);
    sub_1000B40EC(v5, v6, v7, v8, v9, v10, v11, v12, v22, v23);
    uint64_t v13 = *(void *)(v24 + 48);
    uint64_t v14 = sub_100003B20(&qword_10010B408);
    sub_1000304C4( v13 + *(void *)(*(void *)(v14 - 8) + 72LL) * v2,  *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL));
    uint64_t v15 = *(void *)(v24 + 56);
    uint64_t v16 = type metadata accessor for RequestPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32LL))( a1,  v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v2,  v16);
    sub_1000071C0(&qword_10010B9B0, &qword_10010B408);
    _NativeDictionary._delete(at:)(v2, v24, v14, v16);
    sub_1000B4408();
    sub_1000B4510();
    uint64_t v20 = v16;
  }

  else
  {
    type metadata accessor for RequestPriority(0LL);
    uint64_t v17 = sub_10002244C();
  }

  return sub_100005FB0(v17, v18, v19, v20);
}

uint64_t sub_1000B3740(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_100016714(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v16 = *v2;
  uint64_t v8 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  Swift::Int v9 = *(void *)(v8 + 24);
  sub_100003B20(&qword_10010E0A0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
  uint64_t v10 = *(void *)(v16 + 48);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v5,  v11);
  uint64_t v12 = *(void *)(*(void *)(v16 + 56) + 8 * v5);
  uint64_t v13 = sub_100003B20(&qword_10010ECE8);
  sub_1000B3968(&qword_10010B7F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  _NativeDictionary._delete(at:)(v5, v16, v11, v13);
  uint64_t v14 = *v2;
  *uint64_t v2 = v16;
  swift_bridgeObjectRelease(v14);
  return v12;
}

uint64_t sub_1000B3884()
{
  uint64_t v0 = swift_task_alloc(dword_10010EC34);
  char v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_1000AFA88(v2, v3, v4, v5, v6);
}

uint64_t sub_1000B38E0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000B390C()
{
  uint64_t v1 = swift_task_alloc(dword_10010EC74);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  uint64_t v3 = sub_1000B455C();
  return sub_1000AF63C(v3, v4, v5, v6);
}

void sub_1000B3968(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = sub_1000B467C(0LL, a2);
    atomic_store(sub_1000075DC(v3), a1);
  }

  sub_1000075C0();
}

uint64_t sub_1000B3994()
{
  uint64_t v4 = *(void *)(sub_1000B43C0() - 8);
  sub_1000B47B8();
  sub_100006F7C((void *)(v0 + 16));
  sub_100030250(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return sub_1000223CC(v0, v1, v2);
}

void *sub_1000B39E8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AssetLock(0LL) - 8) + 80LL);
  return sub_1000AF81C((void *)(v1 + 16), v1 + ((v3 + 56) & ~v3), a1);
}

void sub_1000B3A34()
{
}

uint64_t sub_1000B3A70()
{
  return sub_1000B3ED0(&qword_10010EC90);
}

uint64_t sub_1000B3A7C()
{
  return sub_1000B3F38(&qword_10010EC90, (uint64_t (*)(void, void, uint64_t))sub_1000A9454);
}

uint64_t sub_1000B3A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B3AA0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000B3AA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100022734(a1, a2, a3);
  sub_100049B90(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1000075C0();
}

uint64_t sub_1000B3AD4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000B3AF8()
{
  uint64_t v1 = swift_task_alloc(dword_10010EC9C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000494F0;
  uint64_t v3 = sub_1000B455C();
  return v4(v3);
}

uint64_t sub_1000B3B68()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000B3B90()
{
  uint64_t v0 = swift_task_alloc(dword_10010ECAC);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_1000AD5E4(v2, v3, v4, v5, v6);
}

uint64_t sub_1000B3BEC()
{
  uint64_t v1 = *(void *)(sub_10000BE28() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = sub_1000B43C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7 + 16) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  sub_10000C214();
  swift_release();
  sub_100030250(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __n128 v11 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v8, v5, v11);
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1000B3CB0(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000BE28() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_1000B43C0() - 8) + 80LL);
  uint64_t v8 = (v6 + v7 + 16) & ~v7;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v5;
  uint64_t v13 = (char *)v1 + v6;
  uint64_t v14 = *(int **)((char *)v1 + v6);
  uint64_t v15 = *((void *)v13 + 1);
  uint64_t v16 = (uint64_t)v1 + v8;
  uint64_t v17 = swift_task_alloc(dword_10010ECD4);
  uint64_t v18 = (void *)sub_100007524(v17);
  *uint64_t v18 = v2;
  v18[1] = sub_10000B5F8;
  return sub_1000AD330(a1, v9, v10, v11, v12, v14, v15, v16);
}

void sub_1000B3D84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100022734(a1, a2, a3);
  sub_100049B90(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1000075C0();
}

uint64_t sub_1000B3DB0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000B3DD8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = swift_task_alloc(dword_10010ED0C);
  uint64_t v8 = (void *)sub_100007524(v7);
  *uint64_t v8 = v2;
  v8[1] = sub_10000BCBC;
  return sub_1000AC410(a1, v4, v5, v6);
}

uint64_t sub_1000B3E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010ECC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_1000B3E88()
{
}

uint64_t sub_1000B3EC4()
{
  return sub_1000B3ED0(&qword_10010ED38);
}

uint64_t sub_1000B3ED0(uint64_t *a1)
{
  uint64_t v5 = *(void *)(sub_100003B20(a1) - 8);
  sub_1000B47B8();
  swift_release();
  sub_100030250(v1 + v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  return sub_1000223CC(v1, v2, v3);
}

uint64_t sub_1000B3F24()
{
  return sub_1000B3F38(&qword_10010ED38, (uint64_t (*)(void, void, uint64_t))sub_1000A93CC);
}

uint64_t sub_1000B3F38(uint64_t *a1, uint64_t (*a2)(void, void, uint64_t))
{
  return a2(*(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v3);
}

uint64_t sub_1000B3F78()
{
  return (*(uint64_t (**)(void, void, void))(v0[19] + 32LL))(v0[22], v0[23], v0[18]);
}

uint64_t sub_1000B3FC8(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  uint64_t v5 = *(void *)(a1 - 8);
  *(void *)(v2 + 10sub_100006F7C(v0 + 4) = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v1 + *(void *)(v5 + 72) * v4, a1);
}

uint64_t sub_1000B3FF0()
{
  return Task.value.getter();
}

void sub_1000B400C()
{
  uint64_t v2 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0LL);
  sub_100005FB0(v1, 1LL, 1LL, v2);
  sub_10002F99C(v1, v0);
}

uint64_t sub_1000B403C()
{
  return swift_task_dealloc(*(void *)(v0 + 600));
}

uint64_t sub_1000B4060()
{
  *(void *)(v3 + sub_10002F90C(v0, v1) = *(void *)(*(void *)(v2 + 56) + 8 * v6);
  return v0(v4, v3, v5);
}

uint64_t sub_1000B4080()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

  ;
}

uint64_t sub_1000B40D0()
{
  return type metadata accessor for UUID(0LL);
}

BOOL sub_1000B40EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1000B4100()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

  ;
}

uint64_t sub_1000B4124()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000B4148(void *a1)
{
  a1[2] = v2;
  a1[3] = v1;
  a1[4] = v2;
  return swift_retain_n(v2, 2LL);
}

uint64_t sub_1000B4160()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000B416C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000B4188()
{
  return Task.value.getter();
}

void sub_1000B41A4()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_1000B41C0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000B41D0()
{
  *(void *)(v1 + *(int *)(v0 + swift_task_dealloc(*(void *)(v0 + 48)) = v2;
  return swift_retain_n(v2, 2LL);
}

uint64_t sub_1000B41E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t sub_1000B41F8( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *((void *)a1 + 2) = a14;
  *((void *)a1 + 3) = v14;
  *((void *)a1 + sub_100006F7C(v0 + 4) = a14;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32))(&a1[v15], v18, v16);
}

uint64_t sub_1000B421C()
{
  return swift_task_dealloc(*(void *)(v0 + 600));
}

uint64_t sub_1000B4240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005FB0(a1, a2, a3, a4);
}

void sub_1000B4254()
{
  v0[14] = *(void *)(v0[9] + *(int *)(v0[7] + 48LL));
}

uint64_t sub_1000B426C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v1, v2);
}

uint64_t sub_1000B429C(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  uint64_t result = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0LL);
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_1000B42C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t), uint64_t a17, uint64_t a18)
{
  uint64_t v21 = (void *)(v18 + v19);
  *uint64_t v21 = a15;
  v21[1] = a18;
  return a16(v18 + v20, a11, a10);
}

uint64_t sub_1000B42E0(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_1000B42F0()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v0 + 200) + v1 + 40));
}

unint64_t sub_1000B430C()
{
  return sub_1000165C8();
}

uint64_t sub_1000B431C()
{
  return sub_100017AF4(v0, v1, v2);
}

void sub_1000B432C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000B4334(uint64_t a1)
{
  uint64_t v3 = *(void *)(v2 + v1);
  *(void *)(v2 + sub_100005FB0(v2, 0LL, 1LL, v1) = a1;
  return swift_release(v3);
}

uint64_t sub_1000B4344()
{
  return dispatch thunk of ManagedResource.cost.getter(v0, v1);
}

uint64_t sub_1000B435C()
{
  uint64_t v2 = v0[22];
  v0[31] = v2;
  v0[23] = v2;
  return *(unsigned int *)(v1 + 4);
}

uint64_t sub_1000B437C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B43C0()
{
  return type metadata accessor for AssetLock(0LL);
}

uint64_t sub_1000B43C8()
{
  return sub_1000060B4(v1, 1LL, v0);
}

  ;
}

void sub_1000B43FC()
{
}

uint64_t sub_1000B4408()
{
  uint64_t v2 = *v1;
  *uint64_t v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

void sub_1000B4414(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000B4428()
{
  return 0LL;
}

uint64_t sub_1000B4444()
{
  return 0LL;
}

uint64_t sub_1000B4460()
{
  *(void *)(v1 - 120) = v0;
  return swift_errorRetain(v0);
}

void *sub_1000B446C()
{
  return sub_10000729C(v1, v0);
}

uint64_t sub_1000B4478()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v0, v2);
}

void sub_1000B448C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000B4498()
{
  return v2(v0, v1);
}

uint64_t sub_1000B44A4(uint64_t a1)
{
  return sub_100005FB0(v1, 1LL, 1LL, a1);
}

uint64_t sub_1000B44B8(uint64_t a1, uint64_t a2)
{
  return swift_dynamicCast(a1, a2, v2, v3, 0LL);
}

  ;
}

uint64_t sub_1000B44D8()
{
  return *(void *)(v0 + 88) + *(void *)(v0 + 200);
}

uint64_t sub_1000B44F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _NativeDictionary._delete(at:)(v4, v3, a3, v5);
}

uint64_t sub_1000B4500()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_1000B4534()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000B4544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

void *sub_1000B454C(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = v3;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000B455C()
{
  return v0;
}

  ;
}

uint64_t sub_1000B4580()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000B45AC()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

BOOL sub_1000B45BC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B45CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return UUID.init()(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1000B45D8()
{
}

void sub_1000B45E4( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000B45EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

  ;
}

  ;
}

void *sub_1000B4618@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000B462C()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_1000B4634(uint64_t a1)
{
}

void sub_1000B463C()
{
}

uint64_t sub_1000B4648()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000B4654(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000B465C()
{
  return swift_release(*(void *)(v0 + 608));
}

uint64_t sub_1000B4668()
{
  return swift_task_dealloc(*(void *)(v0 + 328));
}

uint64_t sub_1000B4674(uint64_t a1)
{
  return String.init<A>(describing:)(a1, v1);
}

uint64_t sub_1000B467C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(255LL);
}

uint64_t sub_1000B4688( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000B4690()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000B4698()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_1000B46A0()
{
  return 0LL;
}

uint64_t sub_1000B46B4()
{
  return FilePath.init(stringLiteral:)(0LL, 0xE000000000000000LL);
}

uint64_t sub_1000B46C0()
{
  return type metadata accessor for ModelCatalogAssetVersionedData(0LL);
}

  ;
}

void sub_1000B46DC(uint64_t a1)
{
}

BOOL sub_1000B46E8(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

uint64_t sub_1000B46F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(a1, a2, v2);
}

uint64_t sub_1000B4700()
{
  return sub_100006F7C(v0);
}

void *sub_1000B4708()
{
  return sub_10000729C(v1, v0);
}

uint64_t sub_1000B4714()
{
  return swift_retain_n(v0, 2LL);
}

BOOL sub_1000B4720@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000B4734@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_1000B4740()
{
  *(void *)(v1 - 72) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000B474C()
{
  return String.init<A>(describing:)(v1 - 72, v0);
}

BOOL sub_1000B4758(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000B4760()
{
  return sub_1000968D4();
}

void sub_1000B476C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t sub_1000B4778()
{
  return v0;
}

uint64_t sub_1000B478C()
{
  return v0;
}

  ;
}

uint64_t sub_1000B47AC(uint64_t a1)
{
  return static Catalog.monitorUpdates(for:on:)(a1, 0LL);
}

  ;
}

uint64_t storeEnumTagSinglePayload for ModelManager(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000B4818 + 4 * byte_1000DA6A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B484C + 4 * byte_1000DA6A0[v4]))();
}

uint64_t sub_1000B484C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B485CLL);
  }
  return result;
}

uint64_t sub_1000B4868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B4870LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000B4874(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B487C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelManager()
{
  return &type metadata for ModelManager;
}

unint64_t sub_1000B489C()
{
  unint64_t result = qword_10010ED48;
  if (!qword_10010ED48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA6FC, &type metadata for ModelManager);
    atomic_store(result, (unint64_t *)&qword_10010ED48);
  }

  return result;
}

const char *sub_1000B48D8(char a1)
{
  if ((a1 & 1) != 0) {
    return "asset_transition_delay";
  }
  else {
    return "block_allowlist_enforcement";
  }
}

Swift::Int sub_1000B4904(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B4948()
{
  return sub_1000B4904(*v0);
}

const char *sub_1000B4950()
{
  return "ModelManager";
}

const char *sub_1000B4964()
{
  return sub_1000B48D8(*v0);
}

uint64_t sub_1000B4980(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + sub_100006F7C(v0 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_1000B4994(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 5))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
      BOOL v4 = v3 >= 5;
      int v2 = v3 - 5;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000B49D0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + sub_100006F7C(v0 + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + sub_100006F7C(v0 + 4) = a2 + 4;
    }
  }

  return result;
}

void type metadata accessor for ProcessEvent()
{
}

uint64_t sub_1000B4A20(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t sub_1000B4A48(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 2sub_100006F7C(v0 + 4) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000B4A8C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 2sub_100006F7C(v0 + 4) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 sub_1000B4B00(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v3;
  return result;
}

uint64_t sub_1000B4B14(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 2sub_100006F7C(v0 + 4) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1000B4B60(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000B4BB4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2sub_100006F7C(v0 + 4) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + sub_10002FFE4((uint64_t)v1, v0 + 16) = a2;
    }
  }

  return result;
}

void type metadata accessor for ProcessHandle()
{
}

uint64_t sub_1000B4C1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(vsub_100006F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000B4C68 + 4 * byte_1000DA765[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000B4C9C + 4 * byte_1000DA760[v4]))();
}

uint64_t sub_1000B4C9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B4CACLL);
  }
  return result;
}

uint64_t sub_1000B4CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B4CC0LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_1000B4CC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4CCC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ProcessPriority()
{
}

unint64_t sub_1000B4CE8()
{
  unint64_t result = qword_10010ED50;
  if (!qword_10010ED50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA7F4, &unk_100105070);
    atomic_store(result, (unint64_t *)&qword_10010ED50);
  }

  return result;
}

void *sub_1000B4D24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v43 = (char *)&v39 - v8;
  uint64_t v51 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0LL);
  uint64_t v42 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v39 = a2;
    uint64_t v52 = v2;
    uint64_t v53 = _swiftEmptyArrayStorage;
    sub_100016E18();
    unint64_t result = (void *)sub_100020E24(a1);
    uint64_t v13 = (uint64_t)result;
    int v15 = v14 & 1;
    uint64_t v40 = a1;
    uint64_t v41 = a1 + 56;
    uint64_t v16 = v45;
    uint64_t v17 = v46;
    while ((v13 & 0x8000000000000000LL) == 0 && v13 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v12) {
        goto LABEL_17;
      }
      int v47 = v15;
      uint64_t v48 = v12;
      uint64_t v49 = v10;
      uint64_t v18 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))( v43,  *(void *)(a1 + 48) + *(void *)(v16 + 72) * v13,  v17);
      uint64_t v19 = v44;
      uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v44, v18, v17);
      uint64_t v21 = InferenceProviderAssetDescriptor.identifier.getter(v20);
      uint64_t v23 = v22;
      uint64_t v30 = InferenceProviderAssetDescriptor.version.getter(v21, v22, v24, v25, v26, v27, v28, v29);
      uint64_t v32 = v31;
      uint64_t v33 = __chkstk_darwin(v30);
      *(&v39 - sub_100006F7C(v0 + 4) = v21;
      *(&v39 - 3) = v23;
      *(&v39 - 2) = v33;
      *(&v39 - 1) = v32;
      uint64_t v34 = v52;
      static Buildable.with(_:)( sub_1000B9088,  &v39 - 6,  v51,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
      uint64_t v52 = v34;
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v17);
      uint64_t v35 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
      {
        sub_100016E18();
        uint64_t v35 = v53;
      }

      uint64_t v36 = v49;
      unint64_t v37 = v35[2];
      if (v37 >= v35[3] >> 1)
      {
        sub_100016E18();
        uint64_t v35 = v53;
      }

      v35[2] = v37 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))( (unint64_t)v35 + ((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
      + *(void *)(v42 + 72) * v37,
        v50,
        v51);
      uint64_t v53 = v35;
      a1 = v40;
      unint64_t result = (void *)sub_100020D3C(v13, v48, v47 & 1, v40);
      uint64_t v13 = (uint64_t)result;
      int v15 = v38 & 1;
      uint64_t v10 = v36 - 1;
      if (!v10)
      {
        sub_10000B830((uint64_t)result, v12, v15);
        swift_release();
        return v35;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t EventReporterWrapper.deinit()
{
  return v0;
}

uint64_t type metadata accessor for EventReporterWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd20EventReporterWrapper);
}

uint64_t _s13modelmanagerd20EventReporterWrapperCfD_0()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for TelemetryIntervalState()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd22TelemetryIntervalState);
}

void *sub_1000B50D4(void *a1)
{
  uint64_t v4 = sub_100003B20(&qword_10010EFB0);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for UInt32,  v4,  &protocol witness table for UInt32);
  uint64_t v6 = sub_100003B20(&qword_10010EFB8);
  uint64_t v7 = swift_allocObject(v6, 28LL, 7LL);
  *(_DWORD *)(v7 + 2sub_100006F7C(v0 + 4) = 0;
  *(void *)(v7 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v5;
  a1[2] = v7;
  a1[3] = sub_1000B51E8;
  a1[4] = 0LL;
  uint64_t v8 = type metadata accessor for AuditToken(0LL);
  sub_100005FB0(v1, 1LL, 1LL, v8);
  sub_1000B51E8(v1, (uint64_t *)v11);
  sub_10003EDB4(v1, &qword_10010DA40);
  sub_1000070EC(v11, (uint64_t)(a1 + 5));
  uint64_t v9 = type metadata accessor for TelemetrySignposter(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  a1[10] = sub_100092550();
  return a1;
}

uint64_t sub_1000B51E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100003B20(&qword_10010DA40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B9030(a1, (uint64_t)v6, &qword_10010DA40);
  uint64_t v7 = type metadata accessor for AuditToken(0LL);
  sub_1000060B4((uint64_t)v6, 1LL, v7);
  sub_10003EDB4((uint64_t)v6, &qword_10010DA40);
  uint64_t v8 = type metadata accessor for EventReporter(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = EventReporter.init()();
  uint64_t v10 = type metadata accessor for EventReporterWrapper();
  uint64_t result = swift_allocObject(v10, 24LL, 7LL);
  *(void *)(result + sub_10002FFE4((uint64_t)v1, v0 + 16) = v9;
  a2[3] = v10;
  a2[4] = (uint64_t)&off_1001050B8;
  *a2 = result;
  return result;
}

void sub_1000B52CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, unsigned __int8 a26, unsigned __int8 a27, unsigned __int8 a28, uint64_t a29)
{
  uint64_t v73 = v34;
  sub_1000B91C0();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v65 = a29;
  LODWORD(v61) = a27;
  HIDWORD(v61) = a26;
  uint64_t v60 = a25;
  uint64_t v58 = a24;
  uint64_t v59 = a23;
  uint64_t v57 = a22;
  uint64_t v62 = a21;
  sub_100003B20(&qword_10010EF50);
  sub_100030A28();
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v56 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B90D8();
  uint64_t v66 = v40;
  uint64_t v74 = v40;
  uint64_t v75 = v38;
  uint64_t v44 = v58;
  uint64_t v67 = v38;
  uint64_t v45 = v57;
  uint64_t v68 = v36;
  uint64_t v76 = v36;
  uint64_t v77 = v33;
  uint64_t v46 = v60;
  uint64_t v69 = v33;
  char v47 = v61;
  uint64_t v70 = v32;
  uint64_t v78 = v32;
  uint64_t v79 = v31;
  uint64_t v48 = v59;
  uint64_t v71 = v31;
  char v49 = BYTE4(v61);
  uint64_t v63 = v29;
  uint64_t v80 = v29;
  uint64_t v81 = v30;
  uint64_t v72 = v30;
  uint64_t v82 = v73;
  uint64_t v83 = v57;
  uint64_t v84 = v59;
  uint64_t v85 = v58;
  uint64_t v86 = v60;
  char v87 = BYTE4(v61);
  char v88 = v61;
  HIDWORD(v6sub_100006F7C(v0 + 4) = a28;
  unsigned __int8 v89 = a28;
  uint64_t v50 = v62;
  uint64_t v90 = v62;
  sub_1000B90CC();
  sub_1000B90BC();
  if (v30) {
    sub_100021F6C();
  }
  uint64_t v51 = sub_1000B90C4();
  sub_1000B90B0((uint64_t)v43, v52, v53, v51);
  sub_10003EDB4((uint64_t)v43, &qword_10010EF50);
  BYTE2(v5sub_100006F7C(v0 + 4) = BYTE4(v64) & 1;
  BYTE1(v5sub_100006F7C(v0 + 4) = v47 & 1;
  LOBYTE(v5sub_100006F7C(v0 + 4) = v49 & 1;
  sub_1000926EC( v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v50,  v45,  v48,  v44,  v46,  v54,  v65,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  BYTE1(v65));
  sub_100007448();
}

uint64_t sub_1000B5518( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v36 = a7;
  uint64_t v35 = a6;
  uint64_t v34 = a5;
  uint64_t v33 = a4;
  uint64_t v32 = a3;
  uint64_t v61 = a17;
  int v41 = a16;
  int v40 = a15;
  int v39 = a14;
  uint64_t v38 = a13;
  uint64_t v37 = a12;
  __int128 v31 = a9;
  uint64_t v19 = sub_100003B20(&qword_10010EF78);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD000000000000021LL, 0x80000001000DD000LL);
  uint64_t v51 = a2;
  uint64_t v52 = v32;
  uint64_t v53 = v33;
  uint64_t v54 = v34;
  uint64_t v55 = v35;
  uint64_t v56 = v36;
  uint64_t v57 = a8;
  uint64_t v25 = a8;
  __int128 v58 = v31;
  uint64_t v59 = a10;
  uint64_t v60 = a11;
  static Buildable.with(_:)( sub_1000B8FCC,  v50,  v22,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v24);
  uint64_t v26 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest(0LL);
  uint64_t v27 = swift_allocBox();
  uint64_t v43 = v37;
  uint64_t v44 = v38;
  char v45 = v39;
  char v46 = v40;
  char v47 = v41;
  uint64_t v48 = v61;
  uint64_t v49 = v25;
  static Buildable.with(_:)( sub_1000B9008,  v42,  v26,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest);
  *uint64_t v21 = v27;
  uint64_t v28 = enum case for GenerativeFunctionsInstrumentationMetadata.mmExecuteRequest(_:);
  uint64_t v29 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL))(v21, v28, v29);
  sub_100005FB0((uint64_t)v21, 0LL, 1LL, v29);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v21);
}

uint64_t sub_1000B57D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v26 = a4;
  uint64_t v27 = a6;
  uint64_t v35 = a11;
  uint64_t v29 = a10;
  uint64_t v28 = a9;
  uint64_t v14 = sub_100003B20(&qword_10010EF68);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003B20(&qword_10010EF70);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003B20(&qword_10010B408);
  UUIDIdentifier.uuid.getter(v20);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  sub_100005FB0((uint64_t)v19, 0LL, 1LL, v21);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v19);
  uint64_t v22 = sub_100003B20(&qword_10010B9A0);
  UUIDIdentifier.uuid.getter(v22);
  sub_100005FB0((uint64_t)v19, 0LL, 1LL, v21);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v19);
  swift_bridgeObjectRetain(a5);
  GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter(v26, a5);
  swift_bridgeObjectRetain(a7);
  GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter(v27, a7);
  uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0LL);
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  static Buildable.with(_:)( sub_1000B9088,  v30,  v23,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005FB0((uint64_t)v16, 0LL, 1LL, v23);
  GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v16);
  swift_bridgeObjectRetain(a12);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(v35, a12);
}

uint64_t sub_1000B59CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = sub_100003B20(&qword_10010EFA8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.createdByPID.setter(a2, 0LL);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.onBehalfOfPID.setter(a3, 0LL);
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType(0LL);
  uint64_t v19 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.oneShot(_:);
  if ((a4 & 1) == 0) {
    uint64_t v19 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.streaming(_:);
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v18 - 8) + 104LL))(v17, *v19, v18);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType(0LL);
  sub_100005FB0((uint64_t)v17, 0LL, 1LL, v18);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter(v17);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isFallbackRequest.setter(a5 & 1);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isInference.setter(a6 & 1);
  swift_retain();
  uint64_t v20 = sub_1000B4D24(a7, a8);
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter(v20);
}

void sub_1000B5B18()
{
  if (v0) {
    sub_100021F6C();
  }
  uint64_t v3 = sub_1000B90C4();
  sub_1000B90B0(v1, v4, v5, v3);
  sub_10003EDB4(v1, &qword_10010EF50);
  sub_1000B9108();
  sub_100092DF4();
  sub_100007448();
}

void sub_1000B5BE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned __int8 a21, unsigned __int8 a22)
{
  uint64_t v28 = v27;
  sub_1000B91C0();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  LODWORD(v45) = a22;
  HIDWORD(v45) = a21;
  sub_100003B20(&qword_10010EF50);
  sub_100030A28();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v45 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = v22;
  sub_10000729C((void *)(v22 + 40), *(void *)(v22 + 64));
  uint64_t v47 = v34;
  uint64_t v48 = v32;
  uint64_t v56 = v34;
  uint64_t v57 = v32;
  char v38 = v45;
  uint64_t v49 = v30;
  uint64_t v58 = v30;
  uint64_t v59 = v26;
  char v39 = BYTE4(v45);
  uint64_t v50 = v26;
  uint64_t v51 = v25;
  uint64_t v60 = v25;
  uint64_t v61 = v24;
  uint64_t v52 = v24;
  uint64_t v53 = v23;
  uint64_t v62 = v23;
  uint64_t v63 = v28;
  uint64_t v54 = v28;
  char v64 = BYTE4(v45);
  char v65 = v45;
  sub_1000B90CC();
  sub_1000B90BC();
  if (v23) {
    sub_100021F6C();
  }
  uint64_t v40 = sub_1000B90C4();
  sub_1000B90B0((uint64_t)v37, v41, v42, v40);
  sub_10003EDB4((uint64_t)v37, &qword_10010EF50);
  BYTE1(v43) = v38 & 1;
  LOBYTE(v43) = v39 & 1;
  sub_1000930C8(v47, v48, v49, v50, v51, v52, v53, v54, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55);
  sub_100007448();
}

uint64_t sub_1000B5D34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v29 = a8;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v26 = a5;
  int v40 = a10;
  int v41 = a11;
  uint64_t v14 = sub_100003B20(&qword_10010EF78);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001FLL, 0x80000001000DCFC0LL);
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v35 = v26;
  uint64_t v36 = v27;
  uint64_t v37 = v28;
  uint64_t v38 = v29;
  uint64_t v39 = a9;
  static Buildable.with(_:)( sub_1000B8F0C,  v31,  v17,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v19);
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest(0LL);
  uint64_t v21 = swift_allocBox();
  _BYTE v30[16] = v40;
  v30[17] = v41;
  static Buildable.with(_:)( sub_1000B8F28,  v30,  v20,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest);
  *uint64_t v16 = v21;
  uint64_t v22 = enum case for GenerativeFunctionsInstrumentationMetadata.mmExecuteRequest(_:);
  uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104LL))(v16, v22, v23);
  sub_100005FB0((uint64_t)v16, 0LL, 1LL, v23);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v16);
}

uint64_t sub_1000B5F28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = a6;
  uint64_t v20 = a8;
  uint64_t v12 = sub_100003B20(&qword_10010EF70);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003B20(&qword_10010B408);
  UUIDIdentifier.uuid.getter(v15);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  sub_100005FB0((uint64_t)v14, 0LL, 1LL, v16);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v14);
  uint64_t v17 = sub_100003B20(&qword_10010B9A0);
  UUIDIdentifier.uuid.getter(v17);
  sub_100005FB0((uint64_t)v14, 0LL, 1LL, v16);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v14);
  swift_bridgeObjectRetain(a5);
  GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter(a4, a5);
  swift_bridgeObjectRetain(a7);
  GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter(v19, a7);
  swift_bridgeObjectRetain(a9);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(v20, a9);
}

uint64_t sub_1000B607C(uint64_t a1, char a2, char a3)
{
  uint64_t v5 = sub_100003B20(&qword_10010EFA8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType(0LL);
  uint64_t v9 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.oneShot(_:);
  if ((a2 & 1) == 0) {
    uint64_t v9 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.streaming(_:);
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))(v7, *v9, v8);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType(0LL);
  sub_100005FB0((uint64_t)v7, 0LL, 1LL, v8);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter(v7);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isInference.setter(a3 & 1);
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter(_swiftEmptyArrayStorage);
}

void sub_1000B6168()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100003B20(&qword_10010EF50);
  sub_100030A28();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B90D8();
  v15[2] = v8;
  void v15[3] = v4;
  v15[4] = v2;
  v15[5] = v6;
  sub_1000B90CC();
  sub_1000B90BC();
  if (v0) {
    sub_100021F6C();
  }
  uint64_t v12 = sub_1000B90C4();
  sub_1000B90B0((uint64_t)v11, v13, v14, v12);
  sub_10003EDB4((uint64_t)v11, &qword_10010EF50);
  sub_1000935B0();
  sub_100007448();
}

void sub_1000B6248( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  sub_100030A28();
  __chkstk_darwin(v17);
  sub_1000846F4();
  GenerativeFunctionsInstrumentationEvent.eventType.setter(a6, a7);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  static Buildable.with(_:)( a8,  v24,  v16,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v8);
  if (a5)
  {
    swift_getErrorValue(a5, v29, v28);
    uint64_t v18 = v28[1];
    uint64_t v19 = (char *)v28[2];
    swift_errorRetain(a5);
    sub_10004E1FC(v18, v19, v9);
    uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationError(0LL);
    uint64_t v21 = sub_1000B9168(v20);
    GenerativeFunctionsInstrumentationEvent.error.setter(v21);
    swift_errorRelease(a5);
  }

  sub_100084DC8();
}

void sub_1000B6374( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v50 = v42;
  sub_100003B20(&qword_10010EF50);
  sub_100030A28();
  __chkstk_darwin(v43);
  sub_1000499DC();
  sub_10000729C((void *)(v27 + 40), *(void *)(v27 + 64));
  sub_1000B90CC();
  sub_1000B90BC();
  if (v31) {
    sub_100021F6C();
  }
  uint64_t v44 = sub_1000B90C4();
  uint64_t v47 = sub_1000B90B0(v25, v45, v46, v44);
  sub_1000B9100(v47, &qword_10010EF50);
  sub_100093884( v50,  v41,  v39,  v37,  v35,  v33,  v31,  v29,  a21,  a22,  a23,  a24,  a25,  v48,  v49,  a22,  a23,  a24,  a25,  v50,  v41,  v39,  v37,  v35);
  sub_100007448();
}

uint64_t sub_1000B64EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v36 = a8;
  uint64_t v35 = a7;
  uint64_t v34 = a6;
  uint64_t v33 = a5;
  uint64_t v32 = a4;
  uint64_t v51 = a12;
  __int128 v37 = a11;
  uint64_t v31 = a10;
  uint64_t v30 = a9;
  uint64_t v14 = sub_100003B20(&qword_10010EF78);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003B20(&qword_10010EF60);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001CLL, 0x80000001000DCF80LL);
  uint64_t v23 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  uint64_t v24 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104LL))(v22, v23, v24);
  sub_100005FB0((uint64_t)v22, 0LL, 1LL, v24);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v22);
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = v32;
  uint64_t v45 = v33;
  uint64_t v46 = v34;
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  uint64_t v49 = v30;
  uint64_t v50 = v31;
  static Buildable.with(_:)( sub_1000B8E34,  v41,  v17,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v19);
  uint64_t v25 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition(0LL);
  uint64_t v26 = swift_allocBox();
  __int128 v39 = v37;
  uint64_t v40 = v51;
  static Buildable.with(_:)( sub_1000B8E58,  v38,  v25,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.AssetTransition);
  *uint64_t v16 = v26;
  uint64_t v27 = enum case for GenerativeFunctionsInstrumentationMetadata.assetTransition(_:);
  uint64_t v28 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104LL))(v16, v27, v28);
  sub_100005FB0((uint64_t)v16, 0LL, 1LL, v28);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v16);
}

uint64_t sub_1000B67BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v46 = a8;
  uint64_t v43 = a1;
  uint64_t v44 = a7;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v53 = a10;
  uint64_t v47 = a9;
  uint64_t v10 = sub_100003B20(&qword_10010DA80);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003B20(&qword_10010B9A0);
  uint64_t v38 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  __int128 v37 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003B20(&qword_10010EF70);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003B20(&qword_10010BAA0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003B20(&qword_10010B408);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100003B20(&qword_10010EF68);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0LL);
  uint64_t v49 = v39;
  uint64_t v50 = v40;
  uint64_t v51 = v41;
  uint64_t v52 = v42;
  uint64_t v29 = v45;
  static Buildable.with(_:)( sub_1000B9088,  v48,  v28,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  uint64_t v45 = v29;
  sub_100005FB0((uint64_t)v27, 0LL, 1LL, v28);
  GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v27);
  sub_1000B9030(v44, (uint64_t)v20, &qword_10010BAA0);
  if (sub_1000060B4((uint64_t)v20, 1LL, v21) == 1)
  {
    sub_10003EDB4((uint64_t)v20, &qword_10010BAA0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    UUIDIdentifier.uuid.getter(v21);
    uint64_t v30 = type metadata accessor for UUID(0LL);
    sub_100005FB0((uint64_t)v17, 0LL, 1LL, v30);
    GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v17);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }

  sub_1000B9030(v46, (uint64_t)v12, &qword_10010DA80);
  if (sub_1000060B4((uint64_t)v12, 1LL, v13) == 1)
  {
    sub_10003EDB4((uint64_t)v12, &qword_10010DA80);
  }

  else
  {
    uint64_t v32 = v37;
    uint64_t v31 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v12, v13);
    UUIDIdentifier.uuid.getter(v13);
    uint64_t v33 = type metadata accessor for UUID(0LL);
    sub_100005FB0((uint64_t)v17, 0LL, 1LL, v33);
    GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v17);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v13);
  }

  uint64_t v34 = v53;
  swift_bridgeObjectRetain(v53);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(v47, v34);
}

uint64_t sub_1000B6B48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100003B20(&qword_10010EF98);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100003B20(&qword_10010EFA0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, a2, v9);
  sub_100005FB0((uint64_t)v8, 0LL, 1LL, v9);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.reason.setter(v8);
  sub_1000B6CAC(v5);
  uint64_t State = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState(0LL);
  sub_100005FB0((uint64_t)v5, 0LL, 1LL, State);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.fromState.setter(v5);
  sub_1000B6CAC(v5);
  sub_100005FB0((uint64_t)v5, 0LL, 1LL, State);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.toState.setter(v5);
}

uint64_t sub_1000B6CAC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  __chkstk_darwin(State);
  sub_10008570C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, State);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v2, State);
  if (v7 == enum case for LoadState.unloaded(_:))
  {
    uint64_t v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.unloaded(_:);
LABEL_7:
    uint64_t v9 = *v8;
    type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState(0LL);
    uint64_t v10 = sub_1000B918C();
    return v11(v10, v9);
  }

  if (v7 == enum case for LoadState.dynamicMode(_:))
  {
    uint64_t v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.dynamicMode(_:);
    goto LABEL_7;
  }

  if (v7 == enum case for LoadState.loaded(_:))
  {
    uint64_t v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.loaded(_:);
    goto LABEL_7;
  }

  *a1 = 0LL;
  uint64_t v13 = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.unknown(_:);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState(0LL);
  uint64_t v14 = sub_1000B918C();
  v15(v14, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, State);
}

void sub_1000B6DD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v25 = v23;
  uint64_t v46 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v45 = v39;
  sub_100003B20(&qword_10010EF50);
  sub_100030A28();
  __chkstk_darwin(v40);
  sub_1000499DC();
  sub_10000729C((void *)(v25 + 40), *(void *)(v25 + 64));
  sub_1000B90CC();
  sub_1000B90BC();
  if (v24) {
    sub_100021F6C();
  }
  uint64_t v41 = sub_1000B90C4();
  uint64_t v44 = sub_1000B90B0(v22, v42, v43, v41);
  sub_1000B9100(v44, &qword_10010EF50);
  sub_100094170(v45, v38, v36, v34, v32, v30, v28, v46, a21, a22, a22, v45, v28, v46, v47, v48, v25, v38, v36, v34, v32);
  sub_100007448();
}

uint64_t sub_1000B6EDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v33 = a4;
  uint64_t v32 = a3;
  uint64_t v31 = a2;
  uint64_t v9 = sub_100003B20(&qword_10010EF58);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_100003B20(&qword_10010EF78);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003B20(&qword_10010EF60);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001CLL, 0x80000001000DCF80LL);
  uint64_t v21 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.end(_:);
  uint64_t v22 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104LL))(v20, v21, v22);
  sub_100005FB0((uint64_t)v20, 0LL, 1LL, v22);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v20);
  uint64_t v42 = v31;
  uint64_t v43 = v32;
  uint64_t v44 = v33;
  uint64_t v45 = v34;
  uint64_t v46 = v35;
  static Buildable.with(_:)( sub_1000B8DD0,  v41,  v15,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v17);
  uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition(0LL);
  uint64_t v24 = swift_allocBox();
  uint64_t v39 = v36;
  uint64_t v40 = v37;
  static Buildable.with(_:)( sub_1000B8DF0,  v38,  v23,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.AssetTransition);
  *uint64_t v14 = v24;
  uint64_t v25 = enum case for GenerativeFunctionsInstrumentationMetadata.assetTransition(_:);
  uint64_t v26 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(v14, v25, v26);
  sub_100005FB0((uint64_t)v14, 0LL, 1LL, v26);
  uint64_t result = GenerativeFunctionsInstrumentationEvent.metadata.setter(v14);
  if (a9)
  {
    swift_getErrorValue(a9, v48, v47);
    uint64_t v28 = v47[1];
    uint64_t v29 = (char *)v47[2];
    swift_errorRetain(a9);
    sub_10004E1FC(v28, v29, v11);
    uint64_t v30 = type metadata accessor for GenerativeFunctionsInstrumentationError(0LL);
    sub_100005FB0((uint64_t)v11, 0LL, 1LL, v30);
    GenerativeFunctionsInstrumentationEvent.error.setter(v11);
    return swift_errorRelease(a9);
  }

  return result;
}

uint64_t sub_1000B71F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_100003B20(&qword_10010EF68);
  __chkstk_darwin(v10);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0LL);
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  static Buildable.with(_:)( sub_1000B9088,  v15,  v13,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005FB0((uint64_t)v12, 0LL, 1LL, v13);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v12);
}

uint64_t sub_1000B72E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100003B20(&qword_10010EF90);
  __chkstk_darwin(v5);
  int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.memoryCostKB.setter(a2, 0LL);
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v7, a3, v8);
  sub_100005FB0((uint64_t)v7, 0LL, 1LL, v8);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.result.setter(v7);
}

void sub_1000B73A4()
{
  if (v2) {
    sub_100021F6C();
  }
  uint64_t v4 = sub_1000B90C4();
  uint64_t v7 = sub_1000B90B0(v0, v5, v6, v4);
  sub_1000B9100(v7, &qword_10010EF50);
  sub_1000B9108();
  sub_10009475C();
  sub_100007448();
}

uint64_t sub_1000B7484( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v28 = a5;
  int v40 = a8;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v27 = a4;
  uint64_t v10 = sub_100003B20(&qword_10010EF78);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003B20(&qword_10010EF60);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD000000000000017LL, 0x80000001000DCF60LL);
  uint64_t v19 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(v18, v19, v20);
  sub_100005FB0((uint64_t)v18, 0LL, 1LL, v20);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v18);
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v39 = v27;
  static Buildable.with(_:)( sub_1000B8D68,  v36,  v13,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v15);
  uint64_t v21 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent(0LL);
  uint64_t v22 = swift_allocBox();
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  uint64_t v34 = v30;
  char v35 = v40;
  static Buildable.with(_:)( sub_1000B8D98,  v31,  v21,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent);
  *uint64_t v12 = v22;
  uint64_t v23 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  uint64_t v24 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104LL))(v12, v23, v24);
  sub_100005FB0((uint64_t)v12, 0LL, 1LL, v24);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v12);
}

void sub_1000B76E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t v14 = sub_100003B20(a5);
  UUIDIdentifier.uuid.getter(v14);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  sub_100005FB0(v7, 0LL, 1LL, v15);
  a6(v7);
  swift_bridgeObjectRetain(a4);
  a7(a3, a4);
  sub_100084DC8();
}

uint64_t sub_1000B77A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = sub_100003B20(&qword_10010EF88);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.add(_:);
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(v11, v12, v13);
  sub_100005FB0((uint64_t)v11, 0LL, 1LL, v13);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter(v11);
  uint64_t v14 = swift_bridgeObjectRetain(a2);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.supportedAssetBundleIdentifiers.setter(v14);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.onBehalfOfPID.setter(a3, 0LL);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.createdByPID.setter(a4, 0LL);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.containsSensitiveData.setter(a5 & 1);
}

void sub_1000B78AC()
{
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10000729C((void *)(v0 + 40), *(void *)(v0 + 64));
  uint64_t v11 = v3;
  uint64_t v12 = v2;
  sub_1000B90CC();
  sub_1000B90BC();
  if (v1) {
    sub_100021F6C();
  }
  uint64_t v7 = sub_1000B90C4();
  sub_1000B90B0((uint64_t)v6, v8, v9, v7);
  sub_10003EDB4((uint64_t)v6, &qword_10010EF50);
  sub_1000B91D4();
  sub_100094BC8();
  sub_100022108();
}

void sub_1000B796C()
{
  if (v0) {
    sub_100021F6C();
  }
  uint64_t v3 = sub_1000B90C4();
  sub_1000B90B0(v1, v4, v5, v3);
  sub_10003EDB4(v1, &qword_10010EF50);
  sub_100094E58();
}

uint64_t sub_1000B7A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100003B20(&qword_10010EF78);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)&v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100003B20(&qword_10010EF60);
  __chkstk_darwin(v9);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001ALL, 0x80000001000DCF40LL);
  uint64_t v12 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(v11, v12, v13);
  sub_100005FB0((uint64_t)v11, 0LL, 1LL, v13);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v11);
  uint64_t v20 = a2;
  static Buildable.with(_:)( sub_1000B9074,  v19,  v6,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v8);
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent(0LL);
  uint64_t v15 = swift_allocBox();
  static Buildable.with(_:)( sub_1000B7C58,  0LL,  v14,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent);
  *uint64_t v5 = v15;
  uint64_t v16 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v5, v16, v17);
  sub_100005FB0((uint64_t)v5, 0LL, 1LL, v17);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v5);
}

uint64_t sub_1000B7C58()
{
  uint64_t v0 = sub_100003B20(&qword_10010EF88);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.remove(_:);
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(v2, v3, v4);
  sub_100005FB0((uint64_t)v2, 0LL, 1LL, v4);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter(v2);
}

void sub_1000B7D14()
{
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10000729C((void *)(v0 + 40), *(void *)(v0 + 64));
  uint64_t v11 = v3;
  uint64_t v12 = v2;
  sub_1000B90CC();
  sub_1000B90BC();
  if (v1) {
    sub_100021F6C();
  }
  uint64_t v7 = sub_1000B90C4();
  sub_1000B90B0((uint64_t)v6, v8, v9, v7);
  sub_10003EDB4((uint64_t)v6, &qword_10010EF50);
  sub_1000B91D4();
  sub_100095130();
  sub_100022108();
}

void sub_1000B7DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a7;
  sub_100003B20(&qword_10010EF78);
  sub_100030A28();
  __chkstk_darwin(v14);
  sub_1000846F4();
  uint64_t v15 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  sub_100030A28();
  __chkstk_darwin(v16);
  sub_10003D2C8();
  sub_100003B20(&qword_10010EF60);
  sub_100030A28();
  __chkstk_darwin(v17);
  sub_1000B451C();
  GenerativeFunctionsInstrumentationEvent.eventType.setter(a4, a5);
  uint64_t v18 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.end(_:);
  uint64_t v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v9, v18, v19);
  sub_1000B9150(v9);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v9);
  uint64_t v28 = a2;
  static Buildable.with(_:)( a6,  v27,  v15,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v8);
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent(0LL);
  uint64_t v21 = swift_allocBox();
  uint64_t v26 = a3;
  static Buildable.with(_:)( v29,  v25,  v20,  &protocol witness table for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent);
  *uint64_t v7 = v21;
  uint64_t v22 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104LL))(v7, v22, v23);
  sub_100005FB0((uint64_t)v7, 0LL, 1LL, v23);
  GenerativeFunctionsInstrumentationEvent.metadata.setter(v7);
  sub_100084DC8();
}

uint64_t sub_1000B7FA0()
{
  uint64_t v1 = sub_100003B20(&qword_10010B9A0);
  UUIDIdentifier.uuid.getter(v1);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_1000B9168(v2);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v3);
}

uint64_t sub_1000B801C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v9 = *a3;
  uint64_t v10 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL))(v4, v9, v10);
  sub_100005FB0(v4, 0LL, 1LL, v10);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter(v4);
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v3, a2, v11);
  sub_1000B9150(v3);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventResult.setter(v3);
}

void sub_1000B811C()
{
  if (v1) {
    sub_100021F6C();
  }
  uint64_t v3 = sub_1000B90C4();
  uint64_t v6 = sub_1000B90B0(v0, v4, v5, v3);
  sub_1000B9100(v6, &qword_10010EF50);
  sub_100007448();
}

uint64_t sub_1000B81EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a7;
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001BLL, 0x80000001000DCF20LL);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = v17;
  static Buildable.with(_:)( sub_1000B8C24,  v18,  v12,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  return GenerativeFunctionsInstrumentationEvent.identifiers.setter(v14);
}

uint64_t sub_1000B82F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = sub_100003B20(&qword_10010EF68);
  __chkstk_darwin(v11);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_100003B20(&qword_10010EF70);
  __chkstk_darwin(v14);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = sub_100003B20(&qword_10010B9A0);
  UUIDIdentifier.uuid.getter(v17);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  sub_100005FB0((uint64_t)v16, 0LL, 1LL, v18);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v16);
  swift_bridgeObjectRetain(a4);
  GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(a3, a4);
  uint64_t v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0LL);
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  static Buildable.with(_:)( sub_1000B9088,  v21,  v19,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005FB0((uint64_t)v13, 0LL, 1LL, v19);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v13);
}

void sub_1000B846C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    sub_100021F6C();
  }
  uint64_t v8 = sub_1000B90C4();
  uint64_t v11 = sub_1000B90B0(v5, v9, v10, v8);
  sub_1000B9100(v11, &qword_10010EF50);
  sub_100022108();
}

uint64_t sub_1000B8520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  uint64_t v9 = sub_100003B20(&qword_10010EF58);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003B20(&qword_10010EF60);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD000000000000021LL, 0x80000001000DCEF0LL);
  uint64_t v18 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.fail(_:);
  uint64_t v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  sub_100005FB0((uint64_t)v17, 0LL, 1LL, v19);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v17);
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = v23;
  uint64_t v31 = v24;
  uint64_t v32 = v25;
  static Buildable.with(_:)( sub_1000B8BCC,  v27,  v12,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v14);
  swift_getErrorValue(v26, v34, v33);
  sub_10004E1FC(v33[1], (char *)v33[2], v11);
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationError(0LL);
  sub_100005FB0((uint64_t)v11, 0LL, 1LL, v20);
  return GenerativeFunctionsInstrumentationEvent.error.setter(v11);
}

uint64_t sub_1000B8728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100003B20(&qword_10010EF68);
  __chkstk_darwin(v8);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100003B20(&qword_10010EF70);
  __chkstk_darwin(v11);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_100003B20(&qword_10010B408);
  UUIDIdentifier.uuid.getter(v14);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  sub_100005FB0((uint64_t)v13, 0LL, 1LL, v15);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v13);
  uint64_t v16 = sub_100003B20(&qword_10010B9A0);
  UUIDIdentifier.uuid.getter(v16);
  sub_100005FB0((uint64_t)v13, 0LL, 1LL, v15);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v13);
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0LL);
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  static Buildable.with(_:)( sub_1000B8BEC,  v19,  v17,  &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005FB0((uint64_t)v10, 0LL, 1LL, v17);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v10);
}

uint64_t sub_1000B88C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = 3157552LL;
  }
  if (a5) {
    unint64_t v10 = a5;
  }
  else {
    unint64_t v10 = 0xE300000000000000LL;
  }
  swift_bridgeObjectRetain(a5);
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter(v9, v10);
}

uint64_t sub_1000B894C()
{
  return v0;
}

uint64_t sub_1000B897C()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for TelemetryManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd16TelemetryManager);
}

#error "1000B8A00: call analysis failed (funcsize=22)"
void sub_1000B8A14()
{
  sub_1000B5B18();
}

#error "1000B8A58: call analysis failed (funcsize=14)"
void sub_1000B8A6C()
{
  sub_1000B6168();
}

#error "1000B8AB0: call analysis failed (funcsize=14)"
#error "1000B8AE0: call analysis failed (funcsize=12)"
void sub_1000B8AF4()
{
  sub_1000B73A4();
}

void sub_1000B8B14()
{
}

void sub_1000B8B34()
{
}

void sub_1000B8B54()
{
}

void sub_1000B8B74()
{
}

void sub_1000B8B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1000B8BB4()
{
  return sub_1000B8520(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1000B8BCC(uint64_t a1)
{
  return sub_1000B8728(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000B8BEC(uint64_t a1)
{
  return sub_1000B88C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000B8C08()
{
  return sub_1000B8C40();
}

uint64_t sub_1000B8C24()
{
  return sub_1000B8C40();
}

uint64_t sub_1000B8C40()
{
  return v0();
}

void sub_1000B8C5C(uint64_t a1)
{
}

uint64_t sub_1000B8C9C(uint64_t a1)
{
  return sub_1000B801C( a1,  *(void *)(v1 + 16),  (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.remove(_:));
}

uint64_t sub_1000B8CBC(uint64_t a1)
{
  return sub_1000B7A24(a1, *(void *)(v1 + 16));
}

void sub_1000B8CD4(uint64_t a1)
{
}

uint64_t sub_1000B8D14()
{
  return sub_1000B7FA0();
}

uint64_t sub_1000B8D2C(uint64_t a1)
{
  return sub_1000B801C( a1,  *(void *)(v1 + 16),  (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.add(_:));
}

uint64_t sub_1000B8D4C()
{
  return sub_1000B7484(v1, v2, v3, v4, v5, v6, v7, *(unsigned __int8 *)(v0 + 64));
}

void sub_1000B8D68()
{
}

uint64_t sub_1000B8D98()
{
  return sub_1000B77A4(v1, v2, v3, v4, *(_BYTE *)(v0 + 40));
}

void sub_1000B8DB4()
{
}

uint64_t sub_1000B8DD0(uint64_t a1)
{
  return sub_1000B71F4(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000B8DF0(uint64_t a1)
{
  return sub_1000B72E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000B8E08()
{
  __n128 v1 = sub_1000B90E4();
  return sub_1000B64EC(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_i64[0], v1.n128_i64[1], v10, *(void *)(v0 + 104));
}

void sub_1000B8E34()
{
}

uint64_t sub_1000B8E58()
{
  return sub_1000B6B48(v0, v1);
}

void sub_1000B8E70(uint64_t a1)
{
}

void sub_1000B8EAC()
{
}

void sub_1000B8EDC()
{
}

void sub_1000B8F0C()
{
}

uint64_t sub_1000B8F28(uint64_t a1)
{
  return sub_1000B607C(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

void sub_1000B8F44(uint64_t a1)
{
}

uint64_t sub_1000B8F80()
{
  __n128 v1 = sub_1000B90E4();
  return sub_1000B5518( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  *(_OWORD *)&v1,  v10,  v11,  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(_BYTE *)(v0 + 120),  *(_BYTE *)(v0 + 121),  *(_BYTE *)(v0 + 122),  *(void *)(v0 + 128));
}

uint64_t sub_1000B8FCC(uint64_t a1)
{
  return sub_1000B57D4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_1000B9008(uint64_t a1)
{
  return sub_1000B59CC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32),  *(_BYTE *)(v1 + 33),  *(_BYTE *)(v1 + 34),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1000B9030(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003B20(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B9074()
{
  return sub_1000B8D14();
}

uint64_t sub_1000B9088(uint64_t a1)
{
  return sub_1000B8BEC(a1);
}

void sub_1000B909C()
{
}

uint64_t sub_1000B90B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005FB0(a1, v4, 1LL, a4);
}

uint64_t sub_1000B90BC()
{
  return EventReporter.send(eventBuiltWithPresetsAnd:)();
}

uint64_t sub_1000B90C4()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationEvent(0LL);
}

  ;
}

void *sub_1000B90D8()
{
  return sub_10000729C((void *)(v0 + 40), *(void *)(v0 + 64));
}

__n128 sub_1000B90E4()
{
  return *(__n128 *)(v0 + 72);
}

uint64_t sub_1000B9100(uint64_t a1, uint64_t *a2)
{
  return sub_10003EDB4(v2, a2);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B9150(uint64_t a1)
{
  return sub_100005FB0(a1, 0LL, 1LL, v1);
}

  ;
}

uint64_t sub_1000B9168(uint64_t a1)
{
  return v1;
}

uint64_t sub_1000B918C()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B91D4()
{
  return v0;
}

  ;
}

uint64_t sub_1000B91FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010EFC0);
  sub_100003BA0(v0, (uint64_t)qword_10010EFC0);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_1000B9268(uint64_t a1, uint64_t a2, char a3)
{
  if (&_sendAneSignal)
  {
    if (qword_10010B1D0 != -1) {
      swift_once(&qword_10010B1D0, sub_1000B91FC);
    }
    uint64_t v7 = sub_10000BF6C();
    sub_100003BA0(v7, (uint64_t)qword_10010EFC0);
    uint64_t v8 = sub_10003D28C();
    Logger.logObject.getter(v8);
    os_log_type_t v9 = sub_100022604();
    if (os_log_type_enabled(v3, v9))
    {
      uint64_t v10 = sub_10000BCF4(18LL);
      uint64_t v11 = sub_10000BCF4(32LL);
      v23[0] = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      sub_100021EB0();
      sub_100015EF8(a1, a2, v23);
      uint64_t v22 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23);
      sub_10003D3C0();
      *(_WORD *)(v10 + 12) = 1024;
      LODWORD(v22) = a3 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v9,  "Sending start ANE session signal for %s (useEnergyEfficientMode: %{BOOL}d)",  (uint8_t *)v10,  0x12u);
      swift_arrayDestroy(v11, 1LL);
      sub_10000BCC4(v11);
      sub_10000BCC4(v10);
    }

    else
    {

      sub_1000B4080();
    }

    uint64_t v13 = sub_100003B20(&qword_10010F088);
    uint64_t v16 = sub_1000B98C8(v13, v14, v15);
    *(_OWORD *)(v16 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000D9580;
    *(void *)(v16 + 32) = 0xD000000000000017LL;
    *(void *)(v16 + 40) = 0x80000001000DD060LL;
    *(void *)(v16 + 48) = a1;
    *(void *)(v16 + 56) = a2;
    *(void *)(v16 + 72) = &type metadata for String;
    *(void *)(v16 + 80) = 0xD000000000000020LL;
    *(void *)(v16 + 88) = 0x80000001000DD0C0LL;
    *(void *)(v16 + 120) = &type metadata for Bool;
    *(_BYTE *)(v16 + 96) = a3 & 1;
    sub_100021EB0();
    uint64_t v17 = sub_1000B9904();
    Dictionary.init(dictionaryLiteral:)(v17, v18, v19, v20);
    NSString v21 = sub_1000B989C();
    sub_1000B9904();
    Dictionary._bridgeToObjectiveC()();
    sub_1000B987C();
    sendAneSignal(v21, (char *)&type metadata for Any + 8);
  }

void sub_1000B94C0(uint64_t a1, uint64_t a2)
{
  if (&_sendAneSignal)
  {
    if (qword_10010B1D0 != -1) {
      swift_once(&qword_10010B1D0, sub_1000B91FC);
    }
    uint64_t v5 = sub_10000BF6C();
    sub_100003BA0(v5, (uint64_t)qword_10010EFC0);
    uint64_t v6 = sub_10003D28C();
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_100022604();
    if (sub_10003D1F0(v7))
    {
      uint64_t v8 = sub_10000BCF4(12LL);
      uint64_t v9 = sub_10000BCF4(32LL);
      uint64_t v10 = sub_1000B9888(4.8149e-34);
      sub_1000B98A8(v10);
      sub_1000B984C(v11, v12, v13, v14, v15, v16, v17, v18, v30, v9);
      sub_10003D3C0();
      sub_1000B9868((void *)&_mh_execute_header, v19, v20, "Sending stop ANE session signal for %s");
      sub_1000B98B8();
      sub_10000BCC4(v9);
      sub_10000BCC4(v8);
    }

    else
    {

      sub_1000B4080();
    }

    uint64_t v21 = sub_100003B20(&qword_10010F088);
    uint64_t v24 = sub_1000B98C8(v21, v22, v23);
    *(_OWORD *)(v24 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000D8890;
    *(void *)(v24 + 32) = 0xD000000000000017LL;
    *(void *)(v24 + 40) = 0x80000001000DD060LL;
    *(void *)(v24 + 72) = &type metadata for String;
    *(void *)(v24 + 48) = a1;
    *(void *)(v24 + 56) = a2;
    sub_100021EB0();
    uint64_t v25 = sub_1000B98DC();
    Dictionary.init(dictionaryLiteral:)(v25, v26, v27, v28);
    NSString v29 = sub_1000B989C();
    sub_1000B98DC();
    Dictionary._bridgeToObjectiveC()();
    sub_1000B987C();
    sub_1000B98D0();
  }

void sub_1000B966C()
{
  if (&_sendAneSignal)
  {
    if (qword_10010B1D0 != -1) {
      swift_once(&qword_10010B1D0, sub_1000B91FC);
    }
    uint64_t v1 = sub_10000BF6C();
    sub_100003BA0(v1, (uint64_t)qword_10010EFC0);
    uint64_t v2 = sub_10003D28C();
    Logger.logObject.getter(v2);
    os_log_type_t v3 = sub_100022604();
    if (sub_10003D1F0(v3))
    {
      uint64_t v4 = sub_10000BCF4(12LL);
      uint64_t v5 = sub_10000BCF4(32LL);
      uint64_t v6 = sub_1000B9888(4.8149e-34);
      sub_1000B98A8(v6);
      sub_1000B984C(v7, v8, v9, v10, v11, v12, v13, v14, v28, v5);
      sub_10003D3C0();
      sub_1000B9868((void *)&_mh_execute_header, v15, v16, "Sending abort ANE session signal for %s");
      sub_1000B98B8();
      sub_10000BCC4(v5);
      sub_10000BCC4(v4);
    }

    else
    {

      sub_1000B4080();
    }

    uint64_t v17 = sub_100003B20(&qword_10010F088);
    uint64_t v20 = sub_1000B98C8(v17, v18, v19);
    *(_OWORD *)(v20 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000D8890;
    *(void *)(v20 + 32) = 0xD000000000000017LL;
    *(void *)(v20 + 40) = 0x80000001000DD060LL;
    NSString v21 = String._bridgeToObjectiveC()();
    type metadata accessor for CFString(0LL);
    *(void *)(v20 + 72) = v22;
    *(void *)(v20 + 48) = v21;
    uint64_t v23 = sub_1000B98F0();
    Dictionary.init(dictionaryLiteral:)(v23, v24, v25, v26);
    NSString v27 = sub_1000B989C();
    sub_1000B98F0();
    Dictionary._bridgeToObjectiveC()();
    sub_1000B987C();
    sub_1000B98D0();
  }

uint64_t type metadata accessor for NeuralEngine()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd12NeuralEngine);
}

uint64_t sub_1000B984C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

void sub_1000B9868(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000B987C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000B9888(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

NSString sub_1000B989C()
{
  return String._bridgeToObjectiveC()();
}

void sub_1000B98A8(uint64_t a1, ...)
{
}

uint64_t sub_1000B98B8()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_1000B98C8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000B98D0()
{
  return sendAneSignal(v1, v0);
}

uint64_t sub_1000B98DC()
{
  return v0;
}

uint64_t sub_1000B98F0()
{
  return v0;
}

uint64_t sub_1000B9904()
{
  return v0;
}

uint64_t sub_1000B9918()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010F090);
  sub_100003BA0(v0, (uint64_t)qword_10010F090);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000B9988()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = __chkstk_darwin(v1);
  unint64_t v5 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  static OS_dispatch_source.MemoryPressureEvent.critical.getter(v4);
  sub_10000BAC0( &qword_10010F0B0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
  char v6 = sub_1000BAAFC((uint64_t)&v17 - v5);
  uint64_t v7 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v8 = sub_1000BAADC();
  if ((v6 & 1) != 0) {
    return 0LL;
  }
  uint64_t v10 = __chkstk_darwin(v8);
  static OS_dispatch_source.MemoryPressureEvent.warning.getter(v10);
  char v11 = sub_1000BAAFC((uint64_t)&v17 - v5);
  uint64_t v12 = sub_1000BAADC();
  __chkstk_darwin(v12);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v17 - v5, v0, v1);
  if ((v11 & 1) != 0)
  {
    sub_1000BAADC();
    return 1LL;
  }

  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static OS_dispatch_source.MemoryPressureEvent.normal.getter(v14);
  char v16 = sub_1000BAAFC((uint64_t)v15);
  v7(v15, v1);
  sub_1000BAADC();
  if ((v16 & 1) != 0) {
    return 1LL;
  }
  return 2LL;
}

uint64_t sub_1000B9B2C(uint64_t a1)
{
  uint64_t v58 = a1;
  uint64_t v2 = sub_100003B20(&qword_10010F0B8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v61 = v2;
  uint64_t v62 = v4;
  __chkstk_darwin(v2);
  uint64_t v60 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000BA884();
  uint64_t v6 = sub_100003B20(&qword_10010F0C8);
  uint64_t v7 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = swift_allocObject( v6,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + 3LL * *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + sub_10002FFE4((uint64_t)v1, v0 + 16) = xmmword_1000DA250;
  uint64_t v10 = static OS_dispatch_source.MemoryPressureEvent.all.getter();
  uint64_t v11 = static OS_dispatch_source.MemoryPressureEvent.procLimitWarn.getter(v10);
  uint64_t v12 = static OS_dispatch_source.MemoryPressureEvent.procLimitCritical.getter(v11);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = (void **)v9;
  uint64_t v15 = sub_10000BAC0( &qword_10010F0B0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
  uint64_t v16 = sub_100003B20(&qword_10010F0D0);
  uint64_t v17 = sub_1000BAA44(&qword_10010F0D8, &qword_10010F0D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v63, v16, v17, v7, v15);
  uint64_t v18 = static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)(v14, 0LL);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  uint64_t ObjectType = swift_getObjectType(v18);
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v20 = v60;
  uint64_t v21 = a1;
  uint64_t v22 = v61;
  v59(v60, v21, v61);
  uint64_t v23 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v24 = (v23 + 24) & ~v23;
  uint64_t v57 = v23 | 7;
  uint64_t v25 = swift_allocObject(&unk_100105140, v24 + v62, v23 | 7);
  *(void *)(v25 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v18;
  uint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 32);
  v56(v25 + v24, v20, v22);
  char v65 = sub_1000BA938;
  uint64_t v66 = v25;
  uint64_t v63 = _NSConcreteStackBlock;
  uint64_t v64 = 1107296256LL;
  uint64_t v26 = sub_1000BAB08((uint64_t)&unk_100105158);
  uint64_t v50 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v27 = *(void *)(v50 - 8);
  uint64_t v54 = *(void *)(v27 + 64);
  __chkstk_darwin(v50);
  unint64_t v55 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  NSString v29 = (char *)&v50 - v55;
  uint64_t v30 = swift_unknownObjectRetain(v18);
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v52 = v31;
  uint64_t v33 = *(void *)(v32 + 64);
  __chkstk_darwin(v31);
  unint64_t v53 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v34 = (char *)&v50 - v53;
  uint64_t v51 = ObjectType;
  sub_1000BA3C8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v29, v34, v26, ObjectType);
  _Block_release(v26);
  char v35 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35(v34, v31);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v37 = v50;
  v36(v29, v50);
  swift_release(v66);
  uint64_t v39 = v60;
  uint64_t v38 = v61;
  v59(v60, v58, v61);
  uint64_t v40 = (v23 + 16) & ~v23;
  uint64_t v41 = swift_allocObject(&unk_100105190, v40 + v62, v57);
  v56(v41 + v40, v39, v38);
  char v65 = sub_1000BA9E8;
  uint64_t v66 = v41;
  uint64_t v63 = _NSConcreteStackBlock;
  uint64_t v64 = 1107296256LL;
  uint64_t v42 = sub_1000BAB08((uint64_t)&unk_1001051A8);
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v50 - v55;
  uint64_t v45 = static DispatchQoS.unspecified.getter(v43);
  __chkstk_darwin(v45);
  uint64_t v46 = (char *)&v50 - v53;
  uint64_t v47 = v51;
  sub_1000BA3C8();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v44, v46, v42, v47);
  _Block_release(v42);
  v35(v46, v52);
  v36(v44, v37);
  swift_release(v66);
  OS_dispatch_source.activate()();
  uint64_t v48 = swift_allocObject(&unk_1001051E0, 24LL, 7LL);
  *(void *)(v48 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v18;
  return AsyncStream.Continuation.onTermination.setter(sub_1000BAA3C, v48, v38);
}

uint64_t sub_1000B9FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010F158);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v10 = (char *)v29 - v9;
  uint64_t ObjectType = swift_getObjectType(a1);
  OS_dispatch_source_memorypressure.data.getter(ObjectType);
  if (qword_10010B1D8 != -1) {
    swift_once(&qword_10010B1D8, sub_1000B9918);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_100003BA0(v12, (uint64_t)qword_10010F090);
  v29[2] = v29;
  __chkstk_darwin(v13);
  uint64_t v14 = (char *)v29 - v9;
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))((char *)v29 - v9, (char *)v29 - v9, v6);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v19;
    v29[1] = a2;
    *(_DWORD *)uint64_t v18 = 136315138;
    v29[0] = v18 + 4;
    uint64_t v20 = sub_10000BAC0( (unint64_t *)&unk_10010F160,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v6, v20);
    uint64_t v23 = v22;
    sub_100015EF8(v21, v22, &v34);
    uint64_t v33 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v29[0]);
    swift_bridgeObjectRelease(v23);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v14, v6);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received dispatch memory pressure event: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25((char *)v29 - v9, v6);
  }

  LOBYTE(v3sub_100006F7C(v0 + 4) = sub_1000B9988();
  uint64_t v26 = sub_100003B20(&qword_10010F0B8);
  uint64_t v27 = v30;
  AsyncStream.Continuation.yield(_:)(&v34, v26);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v32);
  return ((uint64_t (*)(char *, uint64_t))v25)(v10, v6);
}

uint64_t sub_1000BA2B8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_1000BA2E4()
{
  if (qword_10010B1D8 != -1) {
    swift_once(&qword_10010B1D8, sub_1000B9918);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_100003BA0(v0, (uint64_t)qword_10010F090);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Dispatch memory pressure source cancelled", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  sub_100003B20(&qword_10010F0B8);
  AsyncStream.Continuation.finish()();
}

uint64_t sub_1000BA3C8()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = &_swiftEmptyArrayStorage;
  uint64_t v1 = sub_10000BAC0( (unint64_t *)&qword_10010F140,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_100003B20(&qword_10010C090);
  uint64_t v3 = sub_1000BAA44(&qword_10010F150, &qword_10010C090);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void sub_1000BA474(uint64_t a1, uint64_t a2)
{
  if (qword_10010B1D8 != -1) {
    swift_once(&qword_10010B1D8, sub_1000B9918);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_100003BA0(v3, (uint64_t)qword_10010F090);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Dispatch memory pressure event stream cancelled", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_getObjectType(a2);
  OS_dispatch_source.cancel()();
}

uint8_t *sub_1000BA554()
{
  size_t v33 = 8LL;
  uint64_t v34 = 0LL;
  if (!sysctlbyname("kern.memorystatus_vm_pressure_level", &v34, &v33, 0LL, 0LL))
  {
    uint64_t v17 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    __chkstk_darwin(v17);
    uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    OS_dispatch_source.MemoryPressureEvent.init(rawValue:)(v34);
    uint64_t v0 = (uint8_t *)sub_1000B9988();
    if (v0 == 2)
    {
      if (qword_10010B1D8 != -1) {
        swift_once(&qword_10010B1D8, sub_1000B9918);
      }
      uint64_t v21 = sub_10000BF6C();
      uint64_t v22 = (os_log_s *)sub_10003CE68(v21, (uint64_t)qword_10010F090);
      os_log_type_t v23 = static os_log_type_t.fault.getter();
      if (!sub_100084B90(v23)) {
        goto LABEL_17;
      }
      uint64_t v24 = (float *)sub_1000BAAE8();
      sub_1000BAABC(v24, 3.852e-34);
      sub_1000BAA9C();
      uint64_t v25 = "kern.memorystatus_vm_pressure_level contains system memory pressure: %lu";
    }

    else
    {
      if (qword_10010B1D8 != -1) {
        swift_once(&qword_10010B1D8, sub_1000B9918);
      }
      uint64_t v26 = sub_10000BF6C();
      uint64_t v22 = (os_log_s *)sub_10003CE68(v26, (uint64_t)qword_10010F090);
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (!sub_100084B90(v27)) {
        goto LABEL_17;
      }
      uint64_t v24 = (float *)sub_1000BAAE8();
      sub_1000BAABC(v24, 3.852e-34);
      sub_1000BAA9C();
      uint64_t v25 = "kern.memorystatus_vm_pressure_level: %lu";
    }

    _os_log_impl((void *)&_mh_execute_header, v22, v1, v25, (uint8_t *)v24, 0xCu);
    sub_10000BCC4((uint64_t)v24);
    uint64_t v17 = v30;
LABEL_17:

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return v0;
  }

  int v2 = errno.getter();
  if (qword_10010B1D8 != -1) {
    swift_once(&qword_10010B1D8, sub_1000B9918);
  }
  uint64_t v3 = sub_10000BF6C();
  uint64_t v4 = (os_log_s *)sub_10003CE68(v3, (uint64_t)qword_10010F090);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v0 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v0 = 67109120;
    int v35 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v0 + 4);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "sysctlbyname(kern.memorystatus_vm_pressure_level) failed: %{darwin.errno}d",  v0,  8u);
    sub_10000BCC4((uint64_t)v0);
  }

  uint64_t v6 = type metadata accessor for ModelManagerError(0LL);
  unint64_t v7 = sub_10009CDF8();
  swift_allocError(v6, v7, 0LL, 0LL);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v8,  enum case for ModelManagerError.internalError(_:),  v6);
  swift_willThrow(v9, v10, v11, v12, v13, v14, v15, v16, v29, v30, v31, v32, v33, v34);
  return v0;
}

unint64_t sub_1000BA884()
{
  unint64_t result = qword_10010F0C0;
  if (!qword_10010F0C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_source);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10010F0C0);
  }

  return result;
}

uint64_t sub_1000BA8C0()
{
  uint64_t v1 = sub_100003B20(&qword_10010F0B8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BA938()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100003B20(&qword_10010F0B8) - 8) + 80LL);
  return sub_1000B9FD8(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1000BA96C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BA97C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000BA984()
{
  uint64_t v1 = sub_100003B20(&qword_10010F0B8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000BA9E8()
{
}

uint64_t sub_1000BAA18()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000BAA3C(uint64_t a1)
{
}

uint64_t sub_1000BAA44(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000603C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for MemoryPressureEventProvider()
{
  return &type metadata for MemoryPressureEventProvider;
}

uint64_t sub_1000BAA9C()
{
  *(void *)(v1 - 136) = *(void *)(v1 - 120);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 136, v1 - 128, v0);
}

uint64_t sub_1000BAABC(float *a1, float a2)
{
  *a1 = a2;
  return swift_beginAccess(v2 - 120, v2 - 112, 0LL, 0LL);
}

uint64_t sub_1000BAADC()
{
  return v2(v1, v0);
}

uint64_t sub_1000BAAE8()
{
  *(void *)(v2 - 152) = v1;
  *(void *)(v2 - 14sub_100006F7C(v0 + 4) = v0;
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_1000BAAFC(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)(a1, v1, v2);
}

void *sub_1000BAB08@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 136) = v1;
  *(void *)(v2 - 128) = a1;
  return _Block_copy((const void *)(v2 - 152));
}

void sub_1000BAB14()
{
  uint64_t v0 = Hasher.init(_seed:)(v1, 0LL);
  sub_1000BB48C((uint64_t)v0);
  Hasher._finalize()();
  sub_100049AA0();
}

Swift::Int sub_1000BAB44(char a1)
{
  return sub_1000BABC4(0LL, a1 & 1);
}

uint64_t sub_1000BAB50(uint64_t a1)
{
  return String.hash(into:)(a1, 0x64656C6261736964LL, 0xE800000000000000LL);
}

uint64_t sub_1000BAB68(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x73694C776F6C6C41LL;
  }
  else {
    uint64_t v3 = 0x73656963696C6F50LL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0xE900000000000074LL;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1000BABC4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x73694C776F6C6C41LL;
  }
  else {
    uint64_t v3 = 0x73656963696C6F50LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0xE900000000000074LL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000BAC44(uint64_t a1)
{
  uint64_t v1 = Hasher.init(_seed:)(v2, a1);
  sub_1000BB48C((uint64_t)v1);
  Hasher._finalize()();
  sub_100049AA0();
}

uint64_t sub_1000BAC70(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100102860, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000BACC4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x73694C776F6C6C41LL;
  }
  else {
    return 0x73656963696C6F50LL;
  }
}

uint64_t sub_1000BAD00(void *a1)
{
  uint64_t v3 = sub_100003B20(&qword_10010F230);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_10000729C(a1, v4);
  unint64_t v6 = sub_1000BB1BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PolicyFile.CodingKeys,  &type metadata for PolicyFile.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_10003D244();
  }

  else
  {
    sub_100003B20(&qword_10010F240);
    sub_1000BB1F8();
    sub_1000BB4B0();
    sub_1000BB4D8();
    uint64_t v4 = v9;
    sub_100003B20(&qword_10010F258);
    unint64_t v8 = sub_1000BB2A4();
    swift_bridgeObjectRetain();
    sub_1000BB4B0();
    sub_1000BB4D8();
    sub_1000BB4C8();
    if (v8)
    {
      sub_10000C000();
      sub_10003D244();
    }

    else
    {
      swift_bridgeObjectRetain();
      sub_10003D244();
      swift_bridgeObjectRelease();
    }

    sub_10000C000();
  }

  return v4;
}

uint64_t sub_1000BAE74(uint64_t a1)
{
  return sub_1000BB4A8(a1, qword_1001102E8, 41LL, 0x80000001000DD180LL);
}

uint64_t sub_1000BAE94(uint64_t a1)
{
  return sub_1000BB4A8(a1, qword_100110300, 48LL, 0x80000001000DD140LL);
}

uint64_t sub_1000BAEB4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for FilePath(0LL);
  sub_100003B60(v7, a2);
  sub_100003BA0(v7, (uint64_t)a2);
  return FilePath.init(stringLiteral:)(a3, a4);
}

uint64_t destroy for PolicyFile(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s13modelmanagerd10PolicyFileVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for PolicyFile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for PolicyFile(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PolicyFile(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(sub_10003C8BC(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10003C8BC(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PolicyFile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_10002FFE4((uint64_t)v1, v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PolicyFile()
{
  return &type metadata for PolicyFile;
}

void sub_1000BB094(char *a1, char *a2)
{
}

Swift::Int sub_1000BB0A0()
{
  return sub_1000BAB44(*v0);
}

uint64_t sub_1000BB0A8(uint64_t a1)
{
  return sub_1000BAB68(a1, *v1);
}

Swift::Int sub_1000BB0B0(uint64_t a1)
{
  return sub_1000BABC4(a1, *v1);
}

uint64_t sub_1000BB0B8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000BAC70(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BB0E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000BACC4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000BB10C()
{
  return sub_1000BACC4(*v0);
}

uint64_t sub_1000BB114@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000BACC0(a1);
  *a2 = result;
  return result;
}

void sub_1000BB138(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000BB144(uint64_t a1)
{
  unint64_t v2 = sub_1000BB1BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BB16C(uint64_t a1)
{
  unint64_t v2 = sub_1000BB1BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BB194@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000BAD00(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

unint64_t sub_1000BB1BC()
{
  unint64_t result = qword_10010F238;
  if (!qword_10010F238)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DAAB8, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F238);
  }

  return result;
}

unint64_t sub_1000BB1F8()
{
  unint64_t result = qword_10010F248;
  if (!qword_10010F248)
  {
    uint64_t v1 = sub_10000603C(&qword_10010F240);
    sub_1000BB264();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10010F248);
  }

  return result;
}

unint64_t sub_1000BB264()
{
  unint64_t result = qword_10010F250;
  if (!qword_10010F250)
  {
    uint64_t v1 = type metadata accessor for Policy(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Policy, v1);
    atomic_store(result, (unint64_t *)&qword_10010F250);
  }

  return result;
}

unint64_t sub_1000BB2A4()
{
  unint64_t result = qword_10010F260;
  if (!qword_10010F260)
  {
    uint64_t v1 = sub_10000603C(&qword_10010F258);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10010F260);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PolicyFile.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000BB34C + 4 * byte_1000DA981[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000BB380 + 4 * byte_1000DA97C[v4]))();
}

uint64_t sub_1000BB380(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB388(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000BB390LL);
  }
  return result;
}

uint64_t sub_1000BB39C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000BB3A4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000BB3A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB3B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PolicyFile.CodingKeys()
{
  return &type metadata for PolicyFile.CodingKeys;
}

unint64_t sub_1000BB3D0()
{
  unint64_t result = qword_10010F268;
  if (!qword_10010F268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DAA90, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F268);
  }

  return result;
}

unint64_t sub_1000BB410()
{
  unint64_t result = qword_10010F270;
  if (!qword_10010F270)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA9C8, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F270);
  }

  return result;
}

unint64_t sub_1000BB450()
{
  unint64_t result = qword_10010F278;
  if (!qword_10010F278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA9F0, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10010F278);
  }

  return result;
}

uint64_t sub_1000BB48C(uint64_t a1, ...)
{
  return String.hash(into:)(va, 0x64656C6261736964LL, 0xE800000000000000LL);
}

uint64_t sub_1000BB4A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BAEB4(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a4);
}

uint64_t sub_1000BB4B0()
{
  return v0;
}

uint64_t sub_1000BB4C8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BB4D8()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1000BB4E4(uint64_t a1)
{
  v3[5] = a1;
  v3[6] = v2;
  uint64_t v4 = sub_100003B20(&qword_10010F3D0);
  v3[7] = sub_10009F224(v4);
  _BYTE v3[8] = swift_task_alloc(v1);
  return sub_10000BCD0();
}

uint64_t sub_1000BB534()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = sub_100003B20(&qword_10010C088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v1, v3, v5);
  sub_100005FB0(v1, 0LL, 1LL, v5);
  sub_1000BC388(v1, v2);
  uint64_t v6 = v4 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  sub_10000BE64(v4 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation, v0 + 16, 33LL);
  sub_1000BC340(v2, v6);
  swift_endAccess();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return sub_1000300E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BB5F0()
{
  _WORD v2[8] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010F3D0);
  void v2[9] = sub_10009F224(v3);
  v2[10] = swift_task_alloc(v0);
  uint64_t v4 = sub_100003B20(&qword_10010C088);
  v2[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[12] = v5;
  v2[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return sub_10000BCD0();
}

uint64_t sub_1000BB66C()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  sub_10000BE64(v3, v0 + 16, 0LL);
  sub_1000BC2B8(v3, v2);
  if (sub_1000060B4(v2, 1LL, v1) == 1)
  {
    sub_1000BC300(*(void *)(v0 + 80));
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 32))(v4, *(void *)(v0 + 80), v6);
    sub_100005FB0(v7, 1LL, 1LL, v6);
    sub_10000BE64(v3, v0 + 40, 33LL);
    sub_1000BC340(v7, v3);
    uint64_t v8 = swift_endAccess();
    CheckedContinuation.resume(returning:)(v8, v6);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }

  uint64_t v9 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 104));
  sub_10000C140();
  swift_task_dealloc(v9);
  return sub_1000300E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BB774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  uint64_t v5[2] = a1;
  return swift_task_switch(sub_1000BB794, v4, 0LL);
}

uint64_t sub_1000BB794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = *(void *)(v16 + 48);
  uint64_t v19 = *(void *)(v16 + 16);
  uint64_t v18 = *(void *)(v16 + 24);
  unint64_t v20 = sub_1000BC05C();
  uint64_t v21 = swift_task_alloc(64LL);
  *(void *)(v16 + 56) = v21;
  __int128 v22 = *(_OWORD *)(v16 + 32);
  *(void *)(v21 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v17;
  *(void *)(v21 + 2sub_100006F7C(v0 + 4) = v19;
  *(void *)(v21 + 32) = v18;
  *(_OWORD *)(v21 + 40) = v22;
  os_log_type_t v23 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v16 + 6sub_100006F7C(v0 + 4) = v23;
  *os_log_type_t v23 = v16;
  v23[1] = sub_1000BB854;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v23,  v17,  v20,  0xD00000000000001CLL,  0x80000001000DD200LL,  sub_1000BC09C,  v21,  (char *)&type metadata for () + 8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16);
}

uint64_t sub_1000BB854()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_task_dealloc(*(void *)(v2 + 56));
  }
  return sub_10000BCD0();
}

uint64_t sub_1000BB8BC()
{
}

uint64_t sub_1000BB8D8()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

double sub_1000BB910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v8 = sub_100003B20(&qword_10010C088);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v14, 1LL, 1LL, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  unint64_t v16 = sub_1000BC05C();
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = (v17 + 40) & ~v17;
  unint64_t v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (char *)swift_allocObject(&unk_100105418, v20 + 16, v17 | 7);
  *((void *)v21 + 2) = a2;
  *((void *)v21 + 3) = v16;
  *((void *)v21 + sub_100006F7C(v0 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v18], v11, v8);
  __int128 v22 = &v21[v19];
  uint64_t v23 = v29;
  *(void *)__int128 v22 = v28;
  *((void *)v22 + 1) = v23;
  uint64_t v24 = &v21[v20];
  uint64_t v25 = v31;
  *(void *)uint64_t v24 = v30;
  *((void *)v24 + 1) = v25;
  swift_retain_n(a2, 2LL);
  swift_retain();
  sub_10000C81C((uint64_t)v14, (uint64_t)&unk_10010F3B8, (uint64_t)v21);
  *(void *)&double result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_1000BBAA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a8;
  void v8[6] = v13;
  v8[3] = a6;
  v8[4] = a7;
  void v8[2] = a4;
  uint64_t v10 = sub_100003B20(&qword_10010B208);
  v8[7] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)swift_task_alloc(dword_10010F2BC);
  v8[8] = v11;
  *uint64_t v11 = v8;
  v11[1] = sub_1000BBB34;
  return sub_1000BB4E4(a5);
}

uint64_t sub_1000BBB34()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  sub_10000BCE4(*(void *)(*(void *)v0 + 64LL));
  return swift_task_switch(sub_1000BBB80, v1, 0LL);
}

uint64_t sub_1000BBB80()
{
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v2 = (int *)v0[5];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0(v1, 1LL, 1LL, v6);
  unint64_t v7 = sub_1000BC05C();
  uint64_t v8 = (void *)swift_allocObject(&unk_100105440, 56LL, 7LL);
  void v8[2] = v4;
  v8[3] = v7;
  v8[4] = v5;
  v8[5] = v3;
  void v8[6] = v4;
  swift_retain_n(v4, 2LL);
  sub_10000C81C(v1, (uint64_t)&unk_10010F3C8, (uint64_t)v8);
  swift_release();
  uint64_t v11 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v9 = (void *)swift_task_alloc(v2[1]);
  void v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000BBC64;
  return v11();
}

uint64_t sub_1000BBC64()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v2 + 56));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    uint64_t v6 = (void *)swift_task_alloc(dword_10010F2C4);
    *(void *)(v2 + 80) = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1000BBCE8;
    return sub_1000BB5F0();
  }

uint64_t sub_1000BBCE8()
{
  return sub_100007418(v0[1]);
}

uint64_t sub_1000BBD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  v6[5] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v6[6] = v9;
  v6[7] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000BBD90, a6, 0LL);
}

uint64_t sub_1000BBD90()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10010FEA8 + dword_10010FEA8);
  uint64_t v1 = (void *)swift_task_alloc(unk_10010FEAC);
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000BBE08;
  return v3(v0[2], v0[3], 0LL, 0LL, 1);
}

uint64_t sub_1000BBE08()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (v0) {
    unint64_t v7 = sub_1000BBEEC;
  }
  else {
    unint64_t v7 = sub_1000BBE90;
  }
  return swift_task_switch(v7, *(void *)(v2 + 32), 0LL);
}

uint64_t sub_1000BBE90()
{
  *(_BYTE *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout) = 1;
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F2C4);
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000BBCE8;
  return sub_1000BB5F0();
}

uint64_t sub_1000BBEEC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BBF18()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000BBF44()
{
  return type metadata accessor for TimeoutExecutor(0LL);
}

uint64_t type metadata accessor for TimeoutExecutor(uint64_t a1)
{
  uint64_t result = qword_10010F2A8;
  if (!qword_10010F2A8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeoutExecutor);
  }
  return result;
}

void sub_1000BBF84(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = &unk_1000DAB38;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_1000BC004(uint64_t a1)
{
  if (!qword_10010F2D0)
  {
    uint64_t v2 = sub_10000603C(&qword_10010C088);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10010F2D0);
    }
  }

unint64_t sub_1000BC05C()
{
  unint64_t result = qword_10010F3A8;
  if (!qword_10010F3A8)
  {
    uint64_t v1 = type metadata accessor for TimeoutExecutor(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000DAB50, v1);
    atomic_store(result, &qword_10010F3A8);
  }

  return result;
}

double sub_1000BC09C(uint64_t a1)
{
  return sub_1000BB910(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000BC0AC()
{
  uint64_t v1 = sub_100003B20(&qword_10010C088);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  __n128 v7 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000BC154()
{
  uint64_t v2 = sub_100003B20(&qword_10010C088);
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL)
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = (uint64_t *)(v0 + v3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_10010F3B4);
  *(void *)(v1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10000B5F8;
  uint64_t v10 = sub_1000BC3D0();
  return sub_1000BBAA8(v10, v11, v12, v13, v14, v6, v7, v8);
}

uint64_t sub_1000BC220()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000BC24C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  unint64_t v3 = (void *)swift_task_alloc(dword_10010F3C4);
  *(void *)(v1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10000BCBC;
  uint64_t v4 = sub_1000BC3D0();
  return sub_1000BBD28(v4, v5, v6, v7, v8, v2);
}

uint64_t sub_1000BC2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010F3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC300(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010F3D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000BC340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010F3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010F3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC3D0()
{
  return v0;
}

BOOL sub_1000BC3EC(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 >= a2;
}

uint64_t sub_1000BC3FC()
{
  return sub_1000BC4FC();
}

uint64_t sub_1000BC418()
{
  return sub_1000BC4FC();
}

void sub_1000BC434(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x73694C776F6C6C41LL;
  }
  else {
    uint64_t v3 = 0x73656963696C6F50LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE900000000000074LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x73694C776F6C6C41LL;
  }
  else {
    uint64_t v5 = 0x73656963696C6F50LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v6 = 0xE900000000000074LL;
  }
  else {
    uint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_100021EB8(v3, v4, v5, v6);
  }
  sub_10000C1E0();
  sub_10000BD28();
  sub_10004E1F0();
}

uint64_t sub_1000BC4C4()
{
  return sub_1000BC4FC();
}

uint64_t sub_1000BC4E0()
{
  return sub_1000BC4FC();
}

uint64_t sub_1000BC4FC()
{
  if (v8 == v6 && v9 == v7) {
    char v4 = 1;
  }
  else {
    char v4 = sub_100021EB8(v8, v9, v6, v7);
  }
  sub_10000C1E0();
  sub_10000BD28();
  return v4 & 1;
}

uint64_t sub_1000BC5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    swift_retain();
    sub_10000C030();
    sub_100084314();
    uint64_t v4 = 0LL;
    while (1)
    {
      sub_10000C20C();
      sub_100013F44();
      char v6 = v5;
      swift_release();
      if ((v6 & 1) != 0) {
        break;
      }
      if (v3 == ++v4)
      {
        sub_1000228C4();
        sub_10000C280();
        sub_10000C1F0();
        sub_100021E70();
        return 0LL;
      }
    }

    sub_1000228C4();
    sub_10000C280();
    sub_10000C1F0();
    sub_100021E70();
    return 1LL;
  }

  else
  {
    sub_1000228C4();
    return 0LL;
  }

uint64_t sub_1000BC690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (uint64_t *)v3;
  sub_100003B20(&qword_10010B208);
  sub_10000C240();
  __chkstk_darwin(v9);
  sub_1000D0CF8();
  sub_10004DE58(a1, v3, &qword_10010B208);
  uint64_t v10 = sub_100021FC8();
  uint64_t v11 = sub_1000060B4(v3, 1LL, v10);
  if ((_DWORD)v11 == 1)
  {
    sub_1000CF88C(v3, &qword_10010B208);
    uint64_t v12 = 12544LL;
  }

  else
  {
    unsigned __int8 v13 = TaskPriority.rawValue.getter(v11);
    sub_100022CF4(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL));
    uint64_t v12 = v13 | 0x3100LL;
  }

  if (*(void *)(a3 + 16))
  {
    uint64_t v14 = *(void *)(a3 + 24);
    swift_getObjectType(*(void *)(a3 + 16));
    sub_1000D0AA0();
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v4, v14);
    uint64_t v17 = v16;
    sub_1000D0B18();
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  uint64_t v18 = *v5;
  uint64_t v19 = sub_100007460((uint64_t)&unk_1001056D0, 32LL);
  *(void *)(v19 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a2;
  *(void *)(v19 + 2sub_100006F7C(v0 + 4) = a3;
  unint64_t v20 = (void *)(v17 | v15);
  if (v17 | v15)
  {
    v24[0] = 0LL;
    v24[1] = 0LL;
    unint64_t v20 = v24;
    v24[2] = v15;
    v24[3] = v17;
  }

  v23[0] = 1LL;
  v23[1] = v20;
  v23[2] = v18;
  uint64_t v21 = swift_task_create(v12, v23, (char *)&type metadata for () + 8, &unk_10010F958, v19);
  return swift_release(v21);
}

uint64_t sub_1000BC808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    swift_retain();
    sub_100021D80();
    sub_10000C278();
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(a3 + 8 * v5 + 32);
      sub_10000C0F0();
      sub_1000BE074();
      BOOL v7 = sub_1000BE154();
      swift_bridgeObjectRelease();
      if (v7) {
        break;
      }
      swift_release();
      if (v3 == ++v5)
      {
        sub_100021E70();
        swift_release();
        sub_10000C280();
        swift_release();
        return 0LL;
      }
    }

    sub_100021E70();
    swift_release();
    sub_10000C280();
    swift_release();
  }

  else
  {
    sub_100021E70();
    return 0LL;
  }

  return v6;
}

uint64_t sub_1000BC918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_foregroundOvercommitBudget;
    uint64_t v7 = 4LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      }

      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain();
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      sub_1000BE074();
      if (__CFADD__(a3, *(void *)(a2 + v6))) {
        goto LABEL_14;
      }
      BOOL v10 = sub_1000BE154();
      swift_bridgeObjectRelease();
      if (v10)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v8;
      }

      swift_release();
      ++v7;
      if (v9 == v5) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

BOOL sub_1000BCA88(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v1 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v1 = *(void *)(a1 + 16);
  }

  return v1 == 0;
}

uint64_t sub_1000BCAC4(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return *(void *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaSet.count.getter(a1);
}

void sub_1000BCAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = a3 + 32;
    while (v7 < *(void *)(a3 + 16))
    {
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      uint64_t v10 = *(void *)(v9 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
      swift_retain();
      sub_1000C9914(a4, v10);
      if ((v11 & 1) != 0)
      {
        swift_release();
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        uint64_t v12 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
        specialized ContiguousArray._endMutation()(v13);
      }

      if (v6 == ++v7) {
        goto LABEL_8;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }

uint64_t sub_1000BCC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_10000C088((uint64_t)sub_1000BCC30, 0LL);
}

uint64_t sub_1000BCC30()
{
  uint64_t v1 = sub_1000851EC();
  sub_1000D0D60(v1);
  BOOL v2 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 48) = v2;
  *BOOL v2 = v0;
  v2[1] = sub_1000BCC94;
  sub_1000836A0();
  return sub_1000D07B0();
}

uint64_t sub_1000BCC94()
{
  return sub_10000BD98();
}

uint64_t sub_1000BCCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000BCCF0, 0LL, 0LL);
}

uint64_t sub_1000BCCF0()
{
  uint64_t v1 = sub_1000851EC();
  sub_1000D0D60(v1);
  BOOL v2 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 48) = v2;
  *BOOL v2 = v0;
  v2[1] = sub_1000BCD54;
  sub_1000836A0();
  return sub_1000D07B0();
}

uint64_t sub_1000BCD54()
{
  return sub_10000BD98();
}

uint64_t sub_1000BCD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  unint64_t v6 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B208) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[20] = swift_task_alloc(v6);
  v5[21] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000BCE04, 0LL, 0LL);
}

void sub_1000BCE04()
{
  if (v7)
  {
    uint64_t v49 = v1 + 56;
    uint64_t v10 = -(-1LL << *(_BYTE *)(v1 + 32));
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v6 = v11 & *(void *)(v1 + 56);
    sub_1000225A4();
    uint64_t v5 = 0LL;
  }

  else
  {
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000225A4();
    uint64_t v0 = __CocoaSet.makeIterator()(v8);
    sub_100022DB0();
    sub_100021AD0(&qword_10010B908, type metadata accessor for InferenceProviderAsset);
    sub_1000D09F0(v9);
    sub_1000D0F5C();
  }

  sub_1000D02D4();
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v6)
    {
      sub_1000D0988();
      goto LABEL_36;
    }

    if (__OFADD__(v5, 1LL)) {
      break;
    }
    sub_1000D0F48();
    if (v17 == v18) {
      goto LABEL_47;
    }
    uint64_t v0 = v16;
    if (!*(void *)(v49 + 8 * v16))
    {
      uint64_t v0 = v16 + 1;
      sub_1000D097C();
      if (v17 == v18) {
        goto LABEL_47;
      }
      sub_1000D0970();
      if (!v20)
      {
        uint64_t v0 = v19 + 2;
        sub_1000D097C();
        if (v17 == v18) {
          goto LABEL_47;
        }
        sub_1000D0970();
        if (!v22)
        {
          uint64_t v0 = v21 + 3;
          sub_1000D097C();
          if (v17 == v18) {
            goto LABEL_47;
          }
          sub_1000D0970();
          if (!v24)
          {
            uint64_t v0 = v23 + 4;
            if (v23 + 4 >= v48) {
              goto LABEL_47;
            }
            if (!*(void *)(v49 + 8 * v0))
            {
              while (1)
              {
                sub_1000D0F48();
                if (v17 == v18) {
                  break;
                }
                uint64_t v26 = *(void *)(v49 + 8 * v25);
                uint64_t v27 = v25 + 1;
                if (v26)
                {
                  uint64_t v0 = v27 - 1;
                  goto LABEL_35;
                }
              }

LABEL_47:
              sub_1000D0874();
              v2[22] = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
              sub_100003B20(&qword_10010BD98);
              sub_1000D0B84((uint64_t)sub_1000CFC78);
              sub_1000D0184();
              return;
            }
          }
        }
      }
    }

              sub_1000D0874();
              v2[22] = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
              sub_100003B20(&qword_10010BD98);
              sub_1000D0B84((uint64_t)sub_1000BD4F4);
              sub_1000D0184();
              return;
            }
          }
        }
      }
    }

uint64_t sub_1000BD144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  unint64_t v6 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B208) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[20] = swift_task_alloc(v6);
  v5[21] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000BD1B4, 0LL, 0LL);
}

void sub_1000BD1B4()
{
  if (v7)
  {
    uint64_t v49 = v1 + 56;
    uint64_t v10 = -(-1LL << *(_BYTE *)(v1 + 32));
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v6 = v11 & *(void *)(v1 + 56);
    sub_1000225A4();
    uint64_t v5 = 0LL;
  }

  else
  {
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000225A4();
    uint64_t v0 = __CocoaSet.makeIterator()(v8);
    sub_10000C074();
    sub_100021AD0(&qword_10010B478, type metadata accessor for DaemonRequest);
    sub_1000D09F0(v9);
    sub_1000D0F5C();
  }

  sub_1000D02D4();
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v6)
    {
      sub_1000D0988();
      goto LABEL_36;
    }

    if (__OFADD__(v5, 1LL)) {
      break;
    }
    sub_1000D0F48();
    if (v17 == v18) {
      goto LABEL_47;
    }
    uint64_t v0 = v16;
    if (!*(void *)(v49 + 8 * v16))
    {
      uint64_t v0 = v16 + 1;
      sub_1000D097C();
      if (v17 == v18) {
        goto LABEL_47;
      }
      sub_1000D0970();
      if (!v20)
      {
        uint64_t v0 = v19 + 2;
        sub_1000D097C();
        if (v17 == v18) {
          goto LABEL_47;
        }
        sub_1000D0970();
        if (!v22)
        {
          uint64_t v0 = v21 + 3;
          sub_1000D097C();
          if (v17 == v18) {
            goto LABEL_47;
          }
          sub_1000D0970();
          if (!v24)
          {
            uint64_t v0 = v23 + 4;
            if (v23 + 4 >= v48) {
              goto LABEL_47;
            }
            if (!*(void *)(v49 + 8 * v0))
            {
              while (1)
              {
                sub_1000D0F48();
                if (v17 == v18) {
                  break;
                }
                uint64_t v26 = *(void *)(v49 + 8 * v25);
                uint64_t v27 = v25 + 1;
                if (v26)
                {
                  uint64_t v0 = v27 - 1;
                  goto LABEL_35;
                }
              }

uint64_t sub_1000BD4F4()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BD530(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  char v7 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 2sub_100006F7C(v0 + 4) = v7;
  *char v7 = v6;
  v7[1] = sub_1000BD594;
  return v9(v6 + 16);
}

uint64_t sub_1000BD594()
{
  return sub_10000BD98();
}

uint64_t sub_1000BD5D0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  char v7 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 2sub_100006F7C(v0 + 4) = v7;
  *char v7 = v6;
  v7[1] = sub_1000BD634;
  return v9(v6 + 16);
}

uint64_t sub_1000BD634()
{
  return sub_10000BD98();
}

uint64_t sub_1000BD670()
{
  uint64_t v0 = sub_100003B20(&qword_10010CA28);
  sub_1000071C0(&qword_10010F7B8, &qword_10010CA28);
  uint64_t v2 = v1;
  unint64_t v3 = sub_10009CE7C();
  uint64_t v4 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v0, v2, v3);
  sub_100022B4C();
  sub_100022418();
  sub_1000D0E98();
  sub_10000C1E8();
  uint64_t v5 = type metadata accessor for RequestManagerPolicy(0LL);
  uint64_t v6 = RequestPriority.rawValue.getter(v5);
  uint64_t v8 = v7;
  sub_1000225A4();
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  sub_100022B4C();
  sub_10000C1E8();
  sub_100021EB0();
  sub_1000D0E80();
  sub_10000C1E0();
  return v4;
}

uint64_t sub_1000BD77C()
{
  if ((v0 & 1) != 0)
  {
    type metadata accessor for RequestManagerPolicy(0LL);
    char v1 = sub_1000BC4FC();
  }

  else
  {
    char v1 = 0;
  }

  return v1 & 1;
}

uint64_t sub_1000BD7F0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010F3D8);
  sub_100003BA0(v0, (uint64_t)qword_10010F3D8);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_1000BD860()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  sub_10002FFE4(v1, (uint64_t)v11);
  uint64_t v2 = *(void *)(v1 + 16);
  sub_100084314();
  sub_10000C278();
  sub_10000C030();
  sub_100021EB0();
  uint64_t v3 = sub_1000D108C();
  char v6 = sub_1000BC5A0(v3, v4, v5);
  sub_100021E70();
  sub_10000C280();
  sub_10000C1F0();
  if ((v6 & 1) == 0)
  {
    if (qword_10010B1F0 != -1) {
      swift_once(&qword_10010B1F0, sub_1000BD7F0);
    }
    uint64_t v7 = sub_10000BF6C();
    sub_100003BA0(v7, (uint64_t)qword_10010F3D8);
    uint64_t v8 = (os_log_s *)sub_10004E144();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (sub_10003D070(v9))
    {
      uint64_t v10 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v10);
      sub_1000495CC( (void *)&_mh_execute_header,  v8,  (os_log_type_t)v2,  "assertActiveGroupsContainsGroup couldn't find active group with assets",  0LL);
      sub_10000BCC4(0LL);
    }
  }

void sub_1000BD968()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v17);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  sub_100084314();
  sub_10000C278();
  sub_10000C0A0();
  sub_100021EB0();
  char v5 = sub_1000BC5A0(v2, v3, v4);
  sub_1000304F8();
  sub_10000C280();
  sub_10000C1F0();
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups;
    sub_10002FFE4(v6, (uint64_t)v16);
    uint64_t v7 = *(void *)(v6 + 16);
    sub_100084314();
    sub_10000C278();
    sub_10000C030();
    sub_100021EB0();
    uint64_t v8 = sub_1000D108C();
    char v11 = sub_1000BC5A0(v8, v9, v10);
    sub_100021E70();
    sub_10000C280();
    sub_10000C1F0();
    if ((v11 & 1) == 0)
    {
      if (qword_10010B1F0 != -1) {
        swift_once(&qword_10010B1F0, sub_1000BD7F0);
      }
      uint64_t v12 = sub_10000BF6C();
      sub_100003BA0(v12, (uint64_t)qword_10010F3D8);
      uint64_t v13 = (os_log_s *)sub_10004E144();
      os_log_type_t v14 = static os_log_type_t.fault.getter();
      if (sub_10003D070(v14))
      {
        uint64_t v15 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v15);
        sub_1000495CC( (void *)&_mh_execute_header,  v13,  (os_log_type_t)v7,  "assertPendingGroupsContainsGroup couldn't find pending group with assets",  0LL);
        sub_10000BCC4(0LL);
      }
    }
  }

  sub_1000D08B4();
}

uint64_t sub_1000BDABC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v48[2] = *(void *)(v3 - 8);
  v48[3] = v3;
  sub_10000C240();
  __chkstk_darwin(v4);
  sub_100022518();
  v48[1] = v5;
  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002FFE4(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v55);
  uint64_t v7 = v6[1];
  uint64_t v8 = v6[2];
  uint64_t v50 = *v6;
  uint64_t v51 = v7;
  uint64_t v52 = a1;
  sub_1000837AC();
  sub_1000224B4();
  sub_100084314();
  uint64_t v9 = sub_1000CC470((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50, (uint64_t)v49, v7);
  if ((v10 & 1) == 0)
  {
    unint64_t v56 = sub_1000CC44C((unint64_t)v9, v8);
    sub_10000C1F0();
    sub_100021DDC();
    uint64_t v11 = sub_1000308D8();
    uint64_t v12 = sub_1000D0DD8(v11, (uint64_t)v54);
    uint64_t v13 = *v6;
    uint64_t v14 = v6[1];
    __chkstk_darwin(v12);
    v48[-4] = v13;
    v48[-3] = v14;
    v48[-2] = a1;
    sub_100084314();
    sub_1000837AC();
    sub_1000D05AC((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50);
    char v16 = v15;
    sub_1000308D8();
    sub_10000C1F0();
    if ((v16 & 1) == 0)
    {
      sub_1000D085C();
      sub_1000D0D40();
      sub_1000D1134();
      swift_release();
    }

void sub_1000BDE44(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v2[1];
  uint64_t v32 = *v2;
  uint64_t v9 = v32;
  uint64_t v33 = v10;
  uint64_t v34 = a2;
  swift_retain();
  swift_retain();
  unint64_t v11 = (unint64_t)sub_1000CC470( (void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50,  (uint64_t)v31,  v10);
  char v13 = v12;
  uint64_t v15 = v14;
  swift_release(v10);
  __n128 v16 = swift_release(v9);
  if ((v13 & 1) != 0)
  {
    if (a1)
    {
      swift_retain();
      sub_1000CD170();
      uint64_t v24 = swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      uint64_t v25 = *(void *)(v3[2] + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, a1);
      goto LABEL_10;
    }

    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(a2, v30, v16);
  }

  else if (a1)
  {
    uint64_t v19 = v3[2];
    uint64_t v18 = v3 + 2;
    uint64_t v17 = v19;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    *uint64_t v18 = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v17 = sub_1000CD694(v17);
      *uint64_t v18 = v17;
    }

    if ((v11 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (v11 < *(void *)(v17 + 16))
    {
      unint64_t v21 = v17 + 8 * v11;
      uint64_t v22 = *(void *)(v21 + 32);
      swift_retain();
      swift_release(v22);
      *(void *)(v21 + 32) = a1;
LABEL_10:
      specialized ContiguousArray._endMutation()(v23);
      (*(void (**)(char *, uint64_t))(v6 + 8))(a2, v30);
      swift_release_n(a1, 2LL);
      return;
    }

    __break(1u);
  }

  else
  {
    sub_1000CD37C(v11, v15, (uint64_t)v8);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v27 = v30;
    v26(v8, v30);
    uint64_t v28 = sub_1000CD538(v11);
    v26(a2, v27);
    swift_release(v28);
  }

void *sub_1000BE074()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, (uint64_t)v11);
  uint64_t v2 = v1[2];
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return _swiftEmptySetSingleton;
  }
  uint64_t v6 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v6[1];
  sub_10000BD20(v4);
  sub_10000BD20(v2);
  sub_10000BD20(v5);
  uint64_t v7 = 0LL;
  do
  {
    ++v7;
    swift_bridgeObjectRetain();
    sub_100012590();
    uint64_t v9 = v8;
  }

  while (v3 != v7);
  sub_10000BCDC(v2);
  sub_10000BCDC(v5);
  sub_10000BCDC(v4);
  return (void *)v9;
}

BOOL sub_1000BE154()
{
  uint64_t v79 = v1;
  uint64_t v80 = v2;
  uint64_t v72 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v75 = *(void *)(v6 - 8);
  uint64_t v76 = (char *)v6;
  sub_10000C240();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  char v12 = (char *)&v69 - v11;
  uint64_t v13 = type metadata accessor for AssetCost(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000D0AC8();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v69 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  unint64_t v21 = (char *)&v69 - v20;
  __chkstk_darwin(v19);
  uint64_t v71 = (uint64_t)&v69 - v22;
  uint64_t v69 = v5;
  sub_100021EB0();
  sub_100083500();
  sub_100012590();
  unint64_t v24 = v23;
  AssetCost.init(onDeviceMemory:)(0LL);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v70 = v21;
  sub_100022218((uint64_t)v18, (uint64_t)v21, v25);
  uint64_t v26 = *(void *)(v24 + 56);
  unint64_t v73 = v24 + 56;
  uint64_t v27 = 1LL << *(_BYTE *)(v24 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v74 = (unint64_t)(v27 + 63) >> 6;
  sub_100021EB0();
  int64_t v30 = 0LL;
  if (!v29) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v31 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  for (unint64_t i = v31 | (v30 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v30 << 6))
  {
    sub_1000CF694( *(void *)(v24 + 48) + *(void *)(v75 + 72) * i,  (uint64_t)v12,  type metadata accessor for ModelCatalogAsset);
    uint64_t v43 = sub_1000D1080();
    sub_10000B7B0(v43, v44);
    static AssetCost.+ infix(_:_:)(v18, &v10[*((int *)v76 + 7)]);
    sub_1000CF6B8((uint64_t)v10, type metadata accessor for ModelCatalogAsset);
    sub_100022BF8((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
    sub_100022218((uint64_t)v18, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
    if (v29) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v33 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v33 >= v74) {
      break;
    }
    unint64_t v34 = *(void *)(v73 + 8 * v33);
    ++v30;
    if (v34) {
      goto LABEL_27;
    }
    int64_t v30 = v33 + 1;
    sub_1000D0CC4();
    if (v35 == v36) {
      break;
    }
    sub_1000D0CB8();
    if (v34) {
      goto LABEL_27;
    }
    int64_t v30 = v37 + 2;
    sub_1000D0CC4();
    if (v35 == v36) {
      break;
    }
    sub_1000D0CB8();
    if (v34) {
      goto LABEL_27;
    }
    int64_t v30 = v38 + 3;
    sub_1000D0CC4();
    if (v35 == v36) {
      break;
    }
    sub_1000D0CB8();
    if (v34) {
      goto LABEL_27;
    }
    int64_t v30 = v39 + 4;
    sub_1000D0CC4();
    if (v35 == v36) {
      break;
    }
    sub_1000D0CB8();
    if (v34) {
      goto LABEL_27;
    }
    int64_t v41 = v40 + 5;
    if (v41 >= v74) {
      break;
    }
    unint64_t v34 = *(void *)(v73 + 8 * v41);
    if (!v34)
    {
      while (1)
      {
        int64_t v30 = v41 + 1;
        if (__OFADD__(v41, 1LL)) {
          break;
        }
        sub_1000D0CC4();
        if (v35 == v36) {
          goto LABEL_30;
        }
        sub_1000D0CB8();
        int64_t v41 = v42 + 1;
        if (v34) {
          goto LABEL_27;
        }
      }

uint64_t sub_1000BE648()
{
  *(void *)(v1 + 40) = v0;
  return sub_10000C088((uint64_t)sub_1000BE65C, v0);
}

uint64_t sub_1000BE65C()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002FFE4((uint64_t)v1, v0 + 16);
  *(void *)(v0 + 48) = v1[1];
  uint64_t v2 = v1[2];
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v3;
  if (!v3) {
    return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
  }
  *(void *)(v0 + 72) = *v1;
  *(void *)(v0 + 80) = 0LL;
  uint64_t v4 = *(void *)(v2 + 16);
  swift_retain();
  sub_1000224B4();
  uint64_t result = sub_10000C030();
  if (v4)
  {
    *(void *)(v0 + 88) = *(void *)(v2 + 32);
    sub_10000C030();
    uint64_t v6 = (void *)sub_10002287C();
    *(void *)(v0 + 96) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000BE71C;
    uint64_t v7 = sub_1000306EC(*(void *)(v0 + 40));
    return sub_1000084EC(v7);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000BE71C()
{
  return sub_10000BD98();
}

void sub_1000BE754()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 88));
  if (v1 + 1 == v2)
  {
    swift_release(*(void *)(v0 + 48));
    sub_100021DDC();
    sub_100021E70();
    sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    unint64_t v3 = *(void *)(v0 + 80) + 1LL;
    *(void *)(v0 + 80) = v3;
    uint64_t v4 = *(void *)(v0 + 56);
    if (v3 >= *(void *)(v4 + 16))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 88) = *(void *)(v4 + 8 * v3 + 32);
      sub_10000C030();
      uint64_t v5 = (void *)sub_10002287C();
      *(void *)(v0 + 96) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1000BE71C;
      uint64_t v6 = sub_1000306EC(*(void *)(v0 + 40));
      sub_1000084EC(v6);
    }
  }

uint64_t sub_1000BE808(uint64_t a1)
{
  v2[7] = a1;
  _WORD v2[8] = v1;
  uint64_t v3 = sub_10000BE28();
  void v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_100021CC4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010F7E8);
  v2[12] = sub_10002FDFC(*(void *)(v5 - 8));
  v2[13] = sub_10002287C();
  uint64_t v6 = sub_100003B20(&qword_10010F7F0);
  v2[14] = v6;
  v2[15] = sub_10002FDFC(*(void *)(v6 - 8));
  v2[16] = sub_10002287C();
  v2[17] = sub_10002287C();
  uint64_t v7 = sub_100003B20(&qword_10010F8E8);
  v2[18] = sub_100021CC4(*(void *)(v7 - 8));
  sub_100021C90();
  return sub_100021BCC(v8, v9, v10);
}

uint64_t sub_1000BE8B4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_1000BEF34();
  uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  uint64_t v3 = sub_1000307DC();
  sub_10002FFE4(v3, v4);
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v80 = *(void *)(v7 + 16);
  if (v80)
  {
    uint64_t v76 = *(void *)(v0 + 80);
    sub_100022C2C();
    uint64_t v75 = v6 + v8;
    uint64_t v77 = v9;
    uint64_t v78 = v10;
    uint64_t v74 = *(int *)(v9 + 48);
    uint64_t v79 = *(void *)(v6 + 16);
    sub_10000BD20(v5);
    sub_10000BD20(v6);
    uint64_t v83 = v7;
    sub_10000BD20(v7);
    uint64_t v11 = 0LL;
    uint64_t v81 = v0;
    while (v79 != v11)
    {
      uint64_t v13 = *(void *)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 136);
      uint64_t v84 = *(void *)(v0 + 120);
      uint64_t v14 = *(void *)(v0 + 96);
      uint64_t v15 = *(void *)(v0 + 104);
      uint64_t v16 = *(void *)(v0 + 72);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16);
      v17(v15, v75 + *(void *)(v76 + 72) * v11, v16);
      uint64_t v18 = *(void *)(v83 + 8 * v11 + 32);
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32);
      v19(v14, v15, v16);
      uint64_t v20 = sub_1000307DC();
      ((void (*)(uint64_t))v19)(v20);
      *(void *)(v78 + v7sub_100006F7C(v0 + 4) = v18;
      sub_10004DFFC(v12, v13, &qword_10010F7F0);
      uint64_t v21 = *(int *)(v77 + 48);
      v17(v84, v13, v16);
      *(void *)(v84 + v21) = *(void *)(v13 + v21);
      sub_100021D80();
      sub_10000C030();
      sub_10000819C();
      uint64_t v23 = v22;
      sub_100021E70();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v84, v16);
      if (v23)
      {
        uint64_t v0 = v81;
        sub_1000304F8();
        sub_10000C280();
        sub_10000BF84();
        uint64_t v25 = sub_100030C8C();
        sub_10004DFFC(v25, v26, v27);
        uint64_t v24 = 0LL;
        goto LABEL_10;
      }

      uint64_t v0 = v81;
      ++v11;
      sub_1000CF88C(*(void *)(v81 + 128), &qword_10010F7F0);
      if (v80 == v11)
      {
        sub_1000304F8();
        sub_10000C280();
        sub_10000BF84();
        goto LABEL_8;
      }
    }

    __break(1u);
    goto LABEL_22;
  }

  sub_100021D80();
  sub_10000C278();
  sub_10000C0A0();
LABEL_8:
  uint64_t v24 = 1LL;
LABEL_10:
  uint64_t v28 = *(void *)(v0 + 144);
  uint64_t v29 = *(void *)(v0 + 112);
  sub_100005FB0(v28, v24, 1LL, v29);
  sub_1000304F8();
  sub_10000C280();
  sub_10000BF84();
  int v30 = sub_1000060B4(v28, 1LL, v29);
  uint64_t v31 = *(void *)(v0 + 144);
  if (v30 == 1)
  {
    sub_1000CF88C(v31, &qword_10010F8E8);
    if (qword_10010B1F0 == -1)
    {
LABEL_12:
      uint64_t v32 = sub_10000BF6C();
      sub_100003BA0(v32, (uint64_t)qword_10010F3D8);
      int64_t v33 = (os_log_s *)sub_10004E144();
      os_log_type_t v34 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v33, v34))
      {
        char v35 = (uint8_t *)sub_10000BCF4(2LL);
        *(_WORD *)char v35 = 0;
        sub_1000495CC( (void *)&_mh_execute_header,  v33,  v34,  "We can't acquire assets for foreground group but there are no nonzero cost active groups",  v35);
        sub_10000BCC4((uint64_t)v35);
      }

      uint64_t v36 = type metadata accessor for ModelManagerError(0LL);
      sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_1000302B0(v36, v37);
      uint64_t v39 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  enum case for ModelManagerError.internalError(_:),  v36);
      swift_willThrow(v39, v40, v41, v42, v43, v44, v45, v46);
      sub_100030494();
      sub_100030500();
      sub_10002FF48();
      sub_10002FF04();
      sub_10002294C();
      sub_10000BFE4();
      sub_10000C140();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

uint64_t sub_1000BEEA4()
{
  return sub_10000BD98();
}

uint64_t sub_1000BEEDC()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100049570(v0);
}

uint64_t sub_1000BEF34()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, (uint64_t)&v11);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  sub_10000C0A0();
  sub_10000C20C();
  sub_10000C0F0();
  sub_100084314();
  sub_100021D80();
  sub_1000224B4();
  sub_1000D1110();
  sub_1000C8FF0(v5, v6, v7, v2, v3, v4);
  uint64_t v9 = v8;
  sub_1000304F8();
  sub_100030B78();
  sub_1000228B4();
  sub_10000C1F0();
  sub_10000BF84();
  sub_100021DDC();
  if (!sub_1000BCA88(v9)) {
    sub_1000C9FA8();
  }
  return sub_100022D34();
}

uint64_t sub_1000BF010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v8;
  uint64_t v10 = v7;
  uint64_t v12 = a3;
  uint64_t v15 = *(void *)(a3 + 16);
  if (v15 || *(void *)(a6 + 16))
  {
    uint64_t v16 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v60 = _swiftEmptyArrayStorage;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v15)
    {
      uint64_t v54 = a1;
      uint64_t v55 = a2;
      uint64_t v57 = v10;
      uint64_t v58 = a7;
      uint64_t v56 = v12;
      uint64_t v17 = (uint64_t *)(v12 + 32);
      uint64_t v18 = (char *)&v61 + 8;
      uint64_t v19 = &v62;
      uint64_t v20 = &OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
      uint64_t v21 = (uint64_t *)&unk_10010F898;
      do
      {
        uint64_t v22 = *v17;
        uint64_t v23 = (__int128 *)(*v17 + *v20);
        swift_beginAccess(v23, v59, 0LL, 0LL);
        __int128 v24 = *v23;
        __int128 v25 = v23[2];
        __int128 v62 = v23[1];
        __int128 v63 = v25;
        __int128 v61 = v24;
        sub_10004DFFC((uint64_t)v18, (uint64_t)&v64, v21);
        sub_10004DFFC((uint64_t)v19, (uint64_t)&v65, &qword_10010F8A0);
        sub_10004DFFC((uint64_t)&v62 + 8, (uint64_t)&v66, &qword_10010F8A8);
        uint64_t v68 = *((void *)&v63 + 1);
        v67[0] = v63;
        swift_retain();
        sub_1000CF6E8(&v64);
        sub_1000CF6E8(&v65);
        sub_1000CF6E8(&v66);
        sub_1000CF710(v67);
        sub_1000CF710(&v68);
        LOBYTE(v23) = sub_100008664();
        sub_100049090(&v64);
        sub_100049090(&v65);
        sub_100049090(&v66);
        sub_10000B4BC(v67);
        uint64_t v26 = sub_10000B4BC(&v68);
        if ((v23 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          uint64_t v27 = v19;
          uint64_t v28 = v18;
          uint64_t v29 = v21;
          int v30 = v20;
          uint64_t v31 = v60[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
          uint64_t v32 = v31;
          uint64_t v20 = v30;
          uint64_t v21 = v29;
          uint64_t v18 = v28;
          uint64_t v19 = v27;
          uint64_t v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v22);
          specialized ContiguousArray._endMutation()(v33);
        }

        else
        {
          swift_release();
        }

        ++v17;
        --v15;
      }

      while (v15);
      uint64_t v16 = (uint64_t)v60;
      uint64_t v10 = v57;
      a7 = v58;
      uint64_t v12 = v56;
      a1 = v54;
      a2 = v55;
    }

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v16 < 0 || (v16 & 0x4000000000000000LL) != 0)
    {
      if (_CocoaArrayWrapper.endIndex.getter(v16)) {
        goto LABEL_13;
      }
    }

    else if (*(void *)(v16 + 16))
    {
LABEL_13:
      swift_retain();
      uint64_t v9 = (uint8_t *)sub_1000BC918(v16, v10, a7);
      swift_release();
      return (uint64_t)v9;
    }

    swift_release();
    swift_retain();
    uint64_t v49 = sub_1000BC808(a1, a2, v12);
    if (v49)
    {
      return v49;
    }

    else
    {
      swift_retain();
      return sub_1000BC808(a4, a5, a6);
    }
  }

  else
  {
    if (qword_10010B1F0 != -1) {
      swift_once(&qword_10010B1F0, sub_1000BD7F0);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_100003BA0(v34, (uint64_t)qword_10010F3D8);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "In determineNextGroupToAcquire but all pending groups are empty",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v38 = type metadata accessor for ModelManagerError(0LL);
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v38, v39, 0LL, 0LL);
    uint64_t v41 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v38 - 8) + 104LL))( v40,  enum case for ModelManagerError.internalError(_:),  v38);
    swift_willThrow(v41, v42, v43, v44, v45, v46, v47, v48);
  }

  return (uint64_t)v9;
}

void sub_1000BF434(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  if (!*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire))
  {
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    sub_10002FFE4(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v29);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = v5[2];
    uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    sub_10002FFE4(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, (uint64_t)v28);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v9[2];
    sub_10000C0A0();
    sub_1000837AC();
    sub_100083778();
    sub_10000C278();
    sub_10000C20C();
    sub_10000C0F0();
    uint64_t v26 = sub_1000BF010(v6, v7, v8, v10, v11, v12, a1);
    swift_release();
    swift_release();
    sub_10000C280();
    swift_release();
    sub_1000308D8();
    swift_release();
    if (!v2)
    {
      *(void *)(v1 + v3) = v26;
      swift_release();
      uint64_t v13 = *(void *)(v1 + v3);
      if (v13)
      {
        uint64_t v14 = qword_10010B1F0;
        sub_100084314();
        if (v14 != -1) {
          swift_once(&qword_10010B1F0, sub_1000BD7F0);
        }
        uint64_t v15 = sub_10000BF6C();
        sub_100003BA0(v15, (uint64_t)qword_10010F3D8);
        uint64_t v16 = sub_10000BD20(v13);
        uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
        os_log_type_t v18 = static os_log_type_t.default.getter(v17);
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)sub_10000BCF4(12LL);
          uint64_t v20 = sub_10000BCF4(32LL);
          *(_DWORD *)uint64_t v19 = 136315138;
          uint64_t v30 = v20;
          uint64_t v21 = type metadata accessor for UUID(0LL);
          sub_100021AD0(&qword_10010B420, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
          sub_100015EF8(v23, v24, &v30);
          uint64_t v27 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
          sub_10000BCDC(v13);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Next exection group: %s", v19, 0xCu);
          swift_arrayDestroy(v20, 1LL);
          sub_10000BCC4(v20);
          sub_10000BCC4((uint64_t)v19);
          sub_10000C1F0();
        }

        else
        {

          swift_release_n(v13, 3LL);
        }
      }
    }
  }

uint64_t sub_1000BF6EC(uint64_t a1)
{
  *(void *)(v2 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a1;
  *(void *)(v2 + 2sub_100006F7C(v0 + 4) = v1;
  return sub_10000C088((uint64_t)sub_1000BF700, v1);
}

uint64_t sub_1000BF700()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager;
  v0[4] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  v0[5] = v3;
  uint64_t v4 = *(void *)(v1 + v2);
  v0[6] = 0LL;
  if (v4)
  {
    uint64_t v5 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100007418(v5);
  }

  else
  {
    v0[7] = sub_10000729C((void *)(v1 + v3), *(void *)(v1 + v3 + 24));
    return sub_10000BD98();
  }

uint64_t sub_1000BF76C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 6sub_100006F7C(v0 + 4) = sub_100052B5C();
  return sub_100021BCC((uint64_t)sub_1000BF7B0, v1, 0LL);
}

uint64_t sub_1000BF7B0()
{
  uint64_t v1 = v0[6];
  sub_1000BF434(v0[8]);
  if (v1)
  {
    uint64_t v2 = (uint64_t (*)(void))sub_1000308A4();
    return sub_1000CFD80(v2);
  }

  if (*(void *)(v0[3] + v0[4]))
  {
    v0[6] = 0LL;
    uint64_t v2 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000CFD80(v2);
  }

  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_10010F434);
  void v0[9] = (uint64_t)v4;
  os_log_s *v4 = v0;
  v4[1] = (uint64_t *)sub_1000BF83C;
  uint64_t v5 = sub_1000306EC(v0[2]);
  return sub_1000BE808(v5);
}

uint64_t sub_1000BF83C()
{
  if (v1) {
    return sub_100021E4C(*(uint64_t (**)(void))(v2 + 8));
  }
  else {
    return sub_100021BCC((uint64_t)sub_1000BF884, *(void *)(v0 + 24), 0LL);
  }
}

uint64_t sub_1000BF884()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + v0[4]);
  v0[6] = v0[10];
  if (v2)
  {
    uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100007418(v3);
  }

  else
  {
    v0[7] = sub_10000729C((void *)(v1 + v0[5]), *(void *)(v1 + v0[5] + 24));
    return sub_10000BD98();
  }

uint64_t sub_1000BF8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010DA40);
  v4[15] = sub_100021CC4(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  v4[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[17] = v7;
  v4[18] = sub_100021CC4(v7);
  uint64_t v8 = sub_100003B20(&qword_10010B9A0);
  v4[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[20] = v9;
  v4[21] = sub_100021CC4(v9);
  uint64_t v10 = sub_100022694();
  v4[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[23] = v11;
  v4[24] = sub_100021CC4(v11);
  uint64_t v12 = sub_100003B20(&qword_10010F8E0);
  v4[25] = v12;
  v4[26] = sub_10002FDFC(*(void *)(v12 - 8));
  v4[27] = sub_10002287C();
  uint64_t v13 = sub_100003B20(&qword_10010EF70);
  v4[28] = sub_10002FDFC(*(void *)(v13 - 8));
  v4[29] = sub_10002287C();
  v4[30] = sub_10002287C();
  v4[31] = sub_10002287C();
  v4[32] = sub_10002287C();
  v4[33] = sub_10002287C();
  uint64_t v14 = sub_100003B20(&qword_10010B408);
  v4[34] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[35] = v15;
  v4[36] = sub_10002FDFC(v15);
  v4[37] = sub_10002287C();
  uint64_t v16 = sub_10000BE28();
  v4[38] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[39] = v17;
  v4[40] = sub_10002FDFC(v17);
  v4[41] = sub_10002287C();
  v4[42] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v18, v19, v20);
}

#error "1000BFBFC: call analysis failed (funcsize=475)"
uint64_t sub_1000C0238()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 424));
  sub_100021C90();
  return sub_10000BD98();
}

#error "1000C03E8: call analysis failed (funcsize=311)"
uint64_t sub_1000C07BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  sub_10000C130();
  sub_100022B10(v2);
  *(void *)(v0 + 440) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_1000C1148;
  }
  else {
    uint64_t v4 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C0810;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 112), 0LL);
}

#error "1000C0988: call analysis failed (funcsize=312)"
uint64_t sub_1000C0D60( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t *a20,  uint64_t a21,  uint64_t a22)
{
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  sub_10002234C();
  a21 = v24;
  a22 = v25;
  a20 = (uint64_t *)v23;
  a20 = *v23;
  uint64_t v26 = a20;
  sub_100022B10(&a20);
  v26[59] = v22;
  swift_task_dealloc(v27);
  uint64_t v28 = v26[35];
  uint64_t v39 = v26[34];
  uint64_t v40 = v26[36];
  uint64_t v29 = v26[23];
  uint64_t v30 = v26[24];
  uint64_t v32 = v26[21];
  uint64_t v31 = v26[22];
  uint64_t v33 = v26[20];
  sub_1000CF88C(v26[15], &qword_10010DA40);
  sub_10003029C(v32, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  if (!v22) {
    v26[60] = (uint64_t)v34;
  }
  v34(v40, v39);
  sub_100030544();
  return swift_task_switch(v35, v36, v37);
}

#error "1000C0FDC: call analysis failed (funcsize=117)"
#error "1000C111C: call analysis failed (funcsize=78)"
#error "1000C1330: call analysis failed (funcsize=122)"
uint64_t sub_1000C135C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = sub_10000BE28();
  v4[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[14] = v6;
  v4[15] = sub_10002FDFC(v6);
  v4[16] = sub_10002287C();
  uint64_t v7 = sub_100003B20(&qword_10010B408);
  v4[17] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[18] = v8;
  v4[19] = sub_100021CC4(v8);
  sub_100021C90();
  return sub_100021BCC(v9, v10, v11);
}

uint64_t sub_1000C13D0()
{
  uint64_t v1 = sub_10000729C( (void *)(v0[12] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager),  *(void *)(v0[12] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager + 24));
  RequestMetadata.id.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_10010D61C);
  v0[20] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000C1460;
  uint64_t v3 = sub_1000306EC(v0[19]);
  return sub_10005DACC(v3);
}

uint64_t sub_1000C1460()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[12];
  sub_10000BCE4(v0[20]);
  sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_100021BCC((uint64_t)sub_1000C14B4, v2, 0LL);
}

uint64_t sub_1000C14B4()
{
  uint64_t v45 = v1;
  uint64_t v46 = v2;
  uint64_t v44 = v0;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 96);
  sub_1000BD860();
  uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002FFE4(v4 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, v0 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = (void *)sub_1000851EC();
  __int128 v9[2] = v7;
  v9[3] = v6;
  v9[4] = v3;
  sub_10000C0A0();
  sub_1000224B4();
  sub_10000C030();
  uint64_t v10 = sub_1000CC470((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50, (uint64_t)v9, v6);
  char v12 = v11;
  sub_100030500();
  if ((v12 & 1) != 0)
  {
    sub_1000304F8();
    sub_100021DDC();
    sub_100021E70();
    if (qword_10010B1F0 != -1) {
      swift_once(&qword_10010B1F0, sub_1000BD7F0);
    }
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = sub_10000BF6C();
    sub_100003BA0(v17, (uint64_t)qword_10010F3D8);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v16, v14);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 104);
    if (v21)
    {
      uint64_t v41 = *(void *)(v0 + 112);
      uint64_t v23 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v42 = sub_10000BCF4(32LL);
      uint64_t v43 = v42;
      *(_DWORD *)uint64_t v23 = 136315138;
      sub_100021AD0(&qword_10010B420, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
      sub_100015EF8(v25, v26, &v43);
      *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v27;
      sub_100022C00(v0 + 64, v0 + 72, (uint64_t)(v23 + 4));
      sub_1000228C4();
      sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
      sub_100022210( (void *)&_mh_execute_header,  v19,  v20,  "assertActiveGroupsContainsGroup couldn't find active group for %s",  v23);
      sub_100021F38(v42);
      sub_10000BCC4(v42);
      sub_10000BCC4((uint64_t)v23);
    }

    else
    {
      sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 112) + 8LL));
    }
  }

  else
  {
    sub_1000CC44C((unint64_t)v10, v8);
    sub_1000304F8();
    sub_100021DDC();
    sub_100021E70();
    sub_1000228B4();
  }

  uint64_t v28 = *(void *)(v0 + 72);
  sub_10000BE64((uint64_t)v5, v0 + 40, 33LL);
  uint64_t v29 = *v5;
  uint64_t v30 = v5[1];
  uint64_t v31 = (void *)sub_1000851EC();
  v31[2] = v29;
  v31[3] = v30;
  v31[4] = v28;
  sub_10000C0A0();
  sub_10000C20C();
  uint64_t v32 = sub_1000CC470((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50, (uint64_t)v31, v30);
  char v34 = v33;
  sub_1000304F8();
  sub_100030B78();
  sub_100030494();
  if ((v34 & 1) == 0)
  {
    uint64_t v36 = *(void *)(v0 + 112);
    uint64_t v35 = *(void *)(v0 + 120);
    int64_t v37 = sub_100030C8C();
    sub_1000CD37C(v37, v38, v39);
    sub_1000304C4(v35, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
    sub_1000CD538((unint64_t)v32);
    swift_release();
  }

  swift_endAccess();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C17DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  void v5[8] = a1;
  uint64_t v6 = sub_100022694();
  v5[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[14] = v7;
  v5[15] = sub_10002FDFC(v7);
  v5[16] = sub_10002287C();
  uint64_t v8 = sub_10000BE28();
  v5[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[18] = v9;
  v5[19] = sub_10002FDFC(v9);
  v5[20] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v10, v11, v12);
}

#error "1000C1884: call analysis failed (funcsize=159)"
uint64_t sub_1000C1AFC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  sub_10000C130();
  sub_100022B10(v2);
  *(void *)(v0 + 192) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_1000C1BA8;
  }
  else {
    uint64_t v4 = sub_1000C1B50;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 96), 0LL);
}

uint64_t sub_1000C1B50()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  swift_release(v0[22]);
  sub_100021E70();
  sub_100022CF4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002FF04();
  sub_10002FF48();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100049570(v3);
}

uint64_t sub_1000C1BA8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_release(*(void *)(v0 + 176));
  sub_100021E70();
  sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000D1044();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C1C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000C1C1C, a2, 0LL);
}

uint64_t sub_1000C1C1C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F444);
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000C1C94;
  sub_1000306EC(*(void *)(v0 + 32));
  sub_1000D1110();
  return sub_1000BF8E4(v2, v3, v4);
}

uint64_t sub_1000C1C94()
{
  if (v1) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = v0 & 1;
  }
  return sub_1000D07A4(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000C1CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000C1CE8, a2, 0LL);
}

uint64_t sub_1000C1CE8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
  uint64_t v2 = (void *)swift_task_alloc(dword_10010F44C);
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000C1D60;
  uint64_t v3 = sub_100084094();
  return sub_1000C135C(v3, v4, v1);
}

uint64_t sub_1000C1D60()
{
  return sub_100007418(v0[1]);
}

uint64_t sub_1000C1D94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(void *)(v2 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v5;
  uint64_t v6 = sub_100003B20(&qword_10010B468);
  *uint64_t v5 = v2;
  v5[1] = sub_10000B5F8;
  return Task.value.getter( a1,  a2,  (char *)&type metadata for () + 8,  v6,  &protocol self-conformance witness table for Error);
}

void sub_1000C1E1C()
{
}

uint64_t sub_1000C1E60(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010F7E8);
  v2[19] = sub_10002FDFC(*(void *)(v3 - 8));
  v2[20] = sub_10002287C();
  uint64_t v4 = sub_100003B20(&qword_10010F7F0);
  v2[21] = v4;
  v2[22] = sub_100021CC4(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for ModelCatalogAsset(0LL);
  v2[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _BYTE v2[24] = v6;
  v2[25] = sub_10002FDFC(v6);
  v2[26] = sub_10002287C();
  v2[27] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v7, v8, v9);
}

void sub_1000C1EF8()
{
  uint64_t v115 = v0 + 2;
  uint64_t v110 = (uint64_t)(v0 + 14);
  uint64_t v3 = v0[17];
  char v4 = *(_BYTE *)(v3 + 32);
  *((_BYTE *)v0 + 26sub_100006F7C(v0 + 4) = v4;
  uint64_t v5 = 1LL;
  uint64_t v6 = 1LL << v4;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  uint64_t v9 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager;
  v0[28] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  v0[29] = v9;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_100084F2C();
  sub_10002FFE4(v10, v11);
  uint64_t v12 = 0LL;
  if (!v8)
  {
LABEL_6:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_132;
    }
    unint64_t v18 = (1LL << *((_BYTE *)v0 + 264)) + 63;
    uint64_t v16 = v0[17];
    uint64_t v19 = v16 + 56;
    unint64_t v20 = *(void *)(v16 + 56 + 8 * v17);
    ++v12;
    if (!v20)
    {
      int64_t v21 = v18 >> 6;
      uint64_t v12 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_129;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v12);
      if (!v20)
      {
        uint64_t v12 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_129;
        }
        unint64_t v20 = *(void *)(v19 + 8 * v12);
        if (!v20)
        {
          int64_t v22 = v17 + 3;
          if (v22 < v21)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v22);
            if (!v20)
            {
              while (1)
              {
                uint64_t v12 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_133;
                }
                if (v12 >= v21) {
                  goto LABEL_129;
                }
                unint64_t v20 = *(void *)(v19 + 8 * v12);
                ++v22;
                if (v20) {
                  goto LABEL_19;
                }
              }
            }

            uint64_t v12 = v22;
            goto LABEL_19;
          }

LABEL_129:
          swift_release();
          sub_1000D08E4();
          sub_10000C140();
          sub_10000BFE4();
          sub_10000C1B8();
          sub_10002294C();
          sub_10002FF04();
          sub_1000D014C((uint64_t (*)(void))v0[1]);
          return;
        }
      }
    }

LABEL_102:
      v74 += 40LL;
      v73 += 40LL;
      uint64_t v14 = (uint64_t *)((char *)v14 - 1);
      if (!v14)
      {
        uint64_t v53 = v128[25];
        break;
      }
    }
  }

  if ((sub_1000D0728(v53) & 1) == 0) {
    goto LABEL_104;
  }
  sub_1000D03AC();
  if (!v51) {
    goto LABEL_104;
  }
  sub_1000D0954();
  if (!v51) {
    goto LABEL_104;
  }
  sub_1000D0938();
  if (!v51) {
    goto LABEL_104;
  }
  sub_1000CF6B8(v57, type metadata accessor for ModelCatalogAsset);
  uint64_t v82 = v114 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  sub_10002FFE4(v114 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState, v110);
  uint64_t v83 = *(void *)(v82 + 8);
  uint64_t v1 = *(void *)(v82 + 16);
  sub_100083778();
  sub_1000225FC();
  sub_10002289C();
  sub_100021D80();
  sub_10000C0A0();
  sub_1000CAE8C();
  sub_10002289C();
  sub_1000CAE8C();
  sub_10000C000();
  sub_1000D0B9C();
  sub_10000BF84();
  sub_1000304F8();
  sub_100030B98();
  sub_100022024();
  sub_10000C000();
  if ((unint64_t)v129 >> 62)
  {
    if (v129 < 0) {
      LOBYTE(v83) = v129;
    }
    else {
      LOBYTE(v83) = v129 & 0xF8;
    }
    sub_100022944();
    uint64_t v2 = sub_100022B44();
  }

  else
  {
    uint64_t v2 = *(void *)((v129 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100022944();
  }

  uint64_t v14 = &OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled;
  if (!v2)
  {
LABEL_119:
    sub_10008407C();
    uint64_t v0 = v128;
    goto LABEL_107;
  }

  uint64_t v1 = 0LL;
  while (1)
  {
    uint64_t v84 = (v129 & 0xC000000000000001LL) != 0 ? sub_1000D083C(v1) : sub_1000D0668(v129 + 8 * v1);
    uint64_t v5 = v1 + 1;
    if (__OFADD__(v1, 1LL)) {
      break;
    }
    sub_1000D0EBC(v84);
    if ((v83 & 1) != 0)
    {
      uint64_t v0 = v128;
      uint64_t v85 = v128[26];
      uint64_t v1 = v128[22];
      sub_10008407C();
      sub_1000CF88C(v1, &qword_10010F7F0);
      sub_10000BCDC(v119);
      sub_10000BCDC(v111);
      uint64_t v86 = sub_10000BCDC(v112);
      sub_100084970(v86, v87, v88, v89, v90, v91, v92, v93, v105, v106, v108, v110, v111, v112, v113);
      sub_1000D0A68(v85);
      uint64_t v5 = 1LL;
      unint64_t v8 = v107;
      uint64_t v12 = v109;
      if (v107) {
        goto LABEL_5;
      }
      goto LABEL_6;
    }

    ++v1;
    if (v5 == v2) {
      goto LABEL_119;
    }
  }

LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
}

uint64_t sub_1000C25EC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_10005EC54(*(void *)(v0 + 208));
  return sub_100021BCC((uint64_t)sub_1000C2630, v1, 0LL);
}

void sub_1000C2630()
{
  uint64_t v109 = v1 + 2;
  uint64_t v104 = (uint64_t)(v1 + 14);
  sub_1000D0A68(v1[26]);
  uint64_t v6 = v1[30];
  unint64_t v5 = v1[31];
  if (!v5)
  {
LABEL_3:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_129;
    }
    unint64_t v12 = (1LL << *((_BYTE *)v1 + 264)) + 63;
    uint64_t v10 = v1[17];
    uint64_t v13 = v10 + 56;
    unint64_t v14 = *(void *)(v10 + 56 + 8 * v11);
    ++v6;
    if (!v14)
    {
      int64_t v15 = v12 >> 6;
      uint64_t v6 = v11 + 1;
      if (v11 + 1 >= v15) {
        goto LABEL_126;
      }
      unint64_t v14 = *(void *)(v13 + 8 * v6);
      if (!v14)
      {
        uint64_t v6 = v11 + 2;
        if (v11 + 2 >= v15) {
          goto LABEL_126;
        }
        unint64_t v14 = *(void *)(v13 + 8 * v6);
        if (!v14)
        {
          int64_t v16 = v11 + 3;
          if (v16 < v15)
          {
            unint64_t v14 = *(void *)(v13 + 8 * v16);
            if (!v14)
            {
              while (1)
              {
                uint64_t v6 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_130;
                }
                if (v6 >= v15) {
                  goto LABEL_126;
                }
                unint64_t v14 = *(void *)(v13 + 8 * v6);
                ++v16;
                if (v14) {
                  goto LABEL_16;
                }
              }
            }

            uint64_t v6 = v16;
            goto LABEL_16;
          }

LABEL_2:
  unint64_t v7 = __clz(__rbit64(v5));
  uint64_t v8 = (v5 - 1) & v5;
  uint64_t v9 = v7 | (v6 << 6);
  uint64_t v10 = v1[17];
LABEL_17:
  uint64_t v100 = v8;
  uint64_t v102 = v6;
  v1[30] = v6;
  v1[31] = v8;
  sub_1000D0090(v10, v9);
  sub_1000D1128();
  uint64_t v17 = sub_1000D0C58();
  sub_1000D0FDC(v17);
  if (!v18)
  {
LABEL_125:
    sub_10000C0A0();
    sub_1000224B4();
    goto LABEL_123;
  }

  uint64_t v19 = v1[21];
  uint64_t v119 = v1[22];
  uint64_t v20 = sub_10000BE28();
  uint64_t v117 = *(void *)(v20 - 8);
  uint64_t v118 = v20;
  uint64_t v116 = v3 + ((*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80));
  uint64_t v114 = *(int *)(v19 + 48);
  uint64_t v115 = (uint64_t)(v0 + 4);
  uint64_t v120 = *(void *)(v3 + 16);
  sub_10000BD20(v4);
  uint64_t v105 = v3;
  sub_10000BD20(v3);
  uint64_t v106 = (uint64_t)v0;
  uint64_t v21 = sub_10000BD20((uint64_t)v0);
  uint64_t v29 = 0LL;
  uint64_t v122 = v1;
  uint64_t v113 = v4;
  while (1)
  {
    if (v29 == v120)
    {
      __break(1u);
      goto LABEL_128;
    }

    sub_1000D01B0( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v99,  v100,  v102,  v104,  v105,  v106,  v107,  v108,  (uint64_t)v109,  v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118);
    sub_1000D0514();
    uint64_t v30 = sub_1000D0E40();
    *(void *)(v119 + v11sub_100006F7C(v0 + 4) = v4;
    uint64_t v121 = v29;
    if (*(void *)(*(void *)(v4 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets) + 16LL)) {
      break;
    }
    sub_10000C20C();
LABEL_104:
    uint64_t v29 = v121 + 1;
    sub_1000CF88C(v1[22], &qword_10010F7F0);
    uint64_t v4 = v113;
    if (v121 + 1 == v112)
    {
      sub_10000BCDC(v113);
      sub_1000304F8();
      sub_10000BF84();
LABEL_123:
      uint64_t v88 = v1[29];
      uint64_t v89 = v1[18];
      sub_1000304F8();
      uint64_t v90 = sub_10000BF84();
      sub_100084970(v90, v91, v92, v93, v94, v95, v96, v97, v99, v100, v102, v104, v105, v106, v107);
      uint64_t v98 = sub_10000729C((void *)(v89 + v88), *(void *)(v89 + v88 + 24));
      v1[32] = (uint64_t)v98;
      sub_1000D0168((uint64_t)sub_1000C25EC, *v98, 0LL);
      return;
    }
  }

  sub_1000D0A54(v30, v31, v32, v33, v34, v35, v36, v37, v99, v100, v102, v104, v105, v106, v107, v108, v109);
  uint64_t v38 = (uint64_t *)*v0;
  uint64_t v39 = v0[1];
  uint64_t v108 = v4;
  sub_10000C20C();
  sub_1000225A4();
  sub_1000D0D20();
  sub_100022B4C();
  sub_1000D0A40();
  if (v39)
  {
    sub_100022C50();
    uint64_t v2 = v38;
    uint64_t v0 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v4 = *v0;
      sub_10002289C();
      sub_1000D0D30();
      sub_10000C000();
      v0 += 2;
      --v39;
    }

    while (v39);
    sub_1000228C4();
  }

  sub_1000D0A2C();
  if (v29)
  {
    sub_10002289C();
    uint64_t v2 = (uint64_t *)(v4 + 64);
    do
    {
      sub_1000D0A18();
      sub_100022C50();
      sub_1000D0E60();
      if (type metadata accessor for ModelCatalogAsset)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        sub_1000D0E50();
        sub_1000303D0();
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      Hasher._combine(_:)(v39);
      sub_1000228C4();
      sub_1000303D0();
      v2 += 5;
      --v29;
    }

    while (v29);
    sub_10000C000();
  }

  uint64_t v40 = sub_1000D04DC();
  sub_100021AD0(&qword_10010B7E8, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
  sub_1000D0A04(v41);
  sub_1000D09DC();
  sub_1000D0C10();
  sub_1000D09C8();
  Hasher._finalize()();
  sub_1000D0300();
  if ((v42 & 1) == 0) {
    goto LABEL_104;
  }
  while (1)
  {
    sub_1000D04C0();
    uint64_t v43 = v38[1];
    uint64_t v44 = v0[1];
    BOOL v45 = *v38 == *v0 && v43 == v44;
    if (!v45 && (sub_100021EB8(*v38, v43, *v0, v44) & 1) == 0) {
      goto LABEL_101;
    }
    sub_1000D0708();
    if (!v45) {
      goto LABEL_101;
    }
    if (v38) {
      BOOL v46 = v40 == (void)v2;
    }
    else {
      BOOL v46 = 1;
    }
    if (!v46)
    {
      uint64_t v52 = *(void *)(v40 + 32);
      uint64_t v53 = *(void *)(v40 + 40);
      uint64_t v54 = v2[4];
      uint64_t v55 = v2[5];
      BOOL v56 = v52 == v54 && v53 == v55;
      if (!v56 && (sub_100021EB8(v52, v53, v54, v55) & 1) == 0) {
        goto LABEL_101;
      }
      if (v38 != (uint64_t *)1)
      {
        uint64_t v57 = *(void *)(v40 + 48);
        uint64_t v58 = *(void *)(v40 + 56);
        uint64_t v59 = v2[6];
        uint64_t v60 = v2[7];
        BOOL v61 = v57 == v59 && v58 == v60;
        if (!v61 && (sub_100021EB8(v57, v58, v59, v60) & 1) == 0) {
          goto LABEL_101;
        }
        if (v38 != (uint64_t *)2)
        {
          uint64_t v1 = v2 + 9;
          uint64_t v0 = (uint64_t *)(v40 + 72);
          uint64_t v40 = 2LL;
          while ((unint64_t)v38 > 2)
          {
            uint64_t v62 = *(v0 - 1);
            uint64_t v63 = *v0;
            uint64_t v64 = v2[8];
            uint64_t v65 = *v1;
            BOOL v66 = v62 == v64 && v63 == v65;
            if (!v66 && (sub_100021EB8(v62, v63, v64, v65) & 1) == 0) {
              goto LABEL_101;
            }
            sub_1000D0F1C();
            if (v45) {
              goto LABEL_45;
            }
          }

          __break(1u);
          goto LABEL_125;
        }
      }
    }

LABEL_45:
    sub_1000D06E8();
    if (v45) {
      break;
    }
LABEL_101:
    uint64_t v1 = v122;
    sub_1000D0A68(v122[25]);
    sub_1000D0410();
    if ((v75 & 1) == 0) {
      goto LABEL_104;
    }
  }

  if (v2) {
    BOOL v50 = v48 == v49;
  }
  else {
    BOOL v50 = 1;
  }
  if (!v50)
  {
    uint64_t v67 = v49 + 64;
    uint64_t v68 = v48 + 64;
    while (1)
    {
      uint64_t v69 = sub_1000D06B0();
      BOOL v73 = v45 && v70 == v72;
      if (!v73 && (sub_100021EB8(v69, v70, v71, v72) & 1) == 0) {
        goto LABEL_101;
      }
      if (v38)
      {
        if (!v3) {
          goto LABEL_101;
        }
        if (v40 == v29 && v38 == (uint64_t *)v3)
        {
          if ((_DWORD)v1 != (_DWORD)v0) {
            goto LABEL_101;
          }
          goto LABEL_99;
        }
      }

      else if (v3)
      {
        goto LABEL_101;
      }

LABEL_99:
      v68 += 40LL;
      v67 += 40LL;
      uint64_t v2 = (uint64_t *)((char *)v2 - 1);
      if (!v2)
      {
        uint64_t v47 = v122[25];
        break;
      }
    }
  }

  if ((sub_1000D0728(v47) & 1) == 0) {
    goto LABEL_101;
  }
  sub_1000D03AC();
  if (!v45) {
    goto LABEL_101;
  }
  sub_1000D0954();
  if (!v45) {
    goto LABEL_101;
  }
  sub_1000D0938();
  if (!v45) {
    goto LABEL_101;
  }
  sub_1000CF6B8(v51, type metadata accessor for ModelCatalogAsset);
  uint64_t v76 = v108 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  sub_10002FFE4(v108 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState, v104);
  uint64_t v77 = *(void *)(v76 + 8);
  uint64_t v3 = *(void *)(v76 + 16);
  sub_100083778();
  sub_1000225FC();
  sub_10002289C();
  sub_100021D80();
  sub_10000C0A0();
  sub_1000CAE8C();
  sub_10002289C();
  sub_1000CAE8C();
  sub_10000C000();
  sub_1000D0B9C();
  sub_10000BF84();
  sub_1000304F8();
  sub_100030B98();
  sub_100022024();
  sub_10000C000();
  if ((unint64_t)v123 >> 62)
  {
    if (v123 < 0) {
      LOBYTE(v77) = v123;
    }
    else {
      LOBYTE(v77) = v123 & 0xF8;
    }
    sub_100022944();
    uint64_t v4 = sub_100022B44();
  }

  else
  {
    uint64_t v4 = *(void *)((v123 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100022944();
  }

  uint64_t v2 = &OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled;
  if (!v4)
  {
LABEL_116:
    sub_10008407C();
    uint64_t v1 = v122;
    goto LABEL_104;
  }

  uint64_t v3 = 0LL;
  while (1)
  {
    uint64_t v78 = (v123 & 0xC000000000000001LL) != 0 ? sub_1000D083C(v3) : sub_1000D0668(v123 + 8 * v3);
    uint64_t v0 = (uint64_t *)(v3 + 1);
    if (__OFADD__(v3, 1LL)) {
      break;
    }
    sub_1000D0EBC(v78);
    if ((v77 & 1) != 0)
    {
      uint64_t v1 = v122;
      uint64_t v79 = v122[26];
      uint64_t v3 = v122[22];
      sub_10008407C();
      sub_1000CF88C(v3, &qword_10010F7F0);
      sub_10000BCDC(v113);
      sub_10000BCDC(v105);
      uint64_t v80 = sub_10000BCDC(v106);
      sub_100084970(v80, v81, v82, v83, v84, v85, v86, v87, v99, v100, v102, v104, v105, v106, v107);
      sub_1000D0A68(v79);
      unint64_t v5 = v101;
      uint64_t v6 = v103;
      if (v101) {
        goto LABEL_2;
      }
      goto LABEL_3;
    }

    ++v3;
  }

LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
}

uint64_t sub_1000C2CDC()
{
  v1[8] = v0;
  uint64_t v2 = sub_100003B20(&qword_10010F7E8);
  void v1[9] = sub_10002FDFC(*(void *)(v2 - 8));
  v1[10] = sub_10002287C();
  uint64_t v3 = sub_100003B20(&qword_10010F7F0);
  v1[11] = v3;
  v1[12] = sub_10002FDFC(*(void *)(v3 - 8));
  v1[13] = sub_10002287C();
  v1[14] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v4, v5, v6);
}

#error "1000C2E10: call analysis failed (funcsize=151)"
uint64_t sub_1000C2FC4()
{
  uint64_t v0;
  uint64_t v1;
  sub_10000BDE4();
  uint64_t v1 = *(void *)(v0 + 64);
  sub_10000BCE4(*(void *)(v0 + 184));
  sub_100021E70();
  return sub_100021BCC((uint64_t)sub_1000C3008, v1, 0LL);
}

#error "1000C3090: call analysis failed (funcsize=127)"
uint64_t sub_1000C3218( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  v9[13] = v14;
  v9[14] = v8;
  v9[11] = a7;
  v9[12] = a8;
  void v9[9] = a5;
  v9[10] = a6;
  v9[7] = a3;
  v9[8] = a4;
  v9[5] = a1;
  v9[6] = a2;
  sub_100021C90();
  return swift_task_switch(v10, v11, v12);
}

uint64_t sub_1000C324C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v1 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    sub_10000BD20(*(void *)(v0 + 48));
    sub_10000BD20(v1);
    sub_10000BD20(v4);
    sub_100022C50();
    sub_10000C278();
    while (1)
    {
      uint64_t v5 = *v3;
      *(void *)(v0 + 120) = *v3;
      sub_1000224B4();
      sub_100013F44();
      if ((v6 & 1) != 0)
      {
        unint64_t v7 = (unsigned __int8 *)(v5
                               + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
        sub_10002FFE4( v5 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  v0 + 16);
        if (*v7 <= 2u) {
          break;
        }
      }

      sub_100021DDC();
      ++v3;
      if (!--v2)
      {
        sub_100021E70();
        sub_1000304F8();
        sub_10000C280();
        sub_100022B4C();
        sub_100021DDC();
        goto LABEL_8;
      }
    }

    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 56);
    sub_10000BCDC(v4);
    sub_10000BCDC(v11);
    sub_10000BCDC(v10);
    sub_100022D34();
    sub_10000BF84();
    if (v9)
    {
      unint64_t v12 = *(void (**)(uint64_t))(v0 + 96);
      sub_10000C030();
      v12(v5);
      uint64_t v13 = sub_100084F2C();
      sub_100095A54(v13, v14);
    }

    uint64_t v15 = sub_100008904(*(void *)(v0 + 112), *(void *)(v0 + 64), *(void *)(v0 + 80), *(void *)(v0 + 88));
    *(void *)(v0 + 128) = v15;
    uint64_t v16 = v15;
    uint64_t v17 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 136) = v17;
    uint64_t v18 = sub_100003B20(&qword_10010B468);
    *uint64_t v17 = v0;
    v17[1] = sub_1000C346C;
    return Task.value.getter( v18,  v16,  (char *)&type metadata for () + 8,  v18,  &protocol self-conformance witness table for Error);
  }

  else
  {
    sub_10000C030();
    sub_100021D80();
    sub_1000224B4();
LABEL_8:
    sub_100021E70();
    sub_10000BF84();
    sub_100021DDC();
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_1000C346C()
{
  *(void *)(v0 + 14sub_100006F7C(v0 + 4) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_1000C34F4;
  }
  else {
    uint64_t v4 = sub_1000C34C0;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 112), 0LL);
}

uint64_t sub_1000C34C0()
{
  return sub_100021CB8(1LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C34F4()
{
  return sub_100021CB8(0LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C3528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = sub_100022694();
  v4[19] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[20] = v6;
  v4[21] = sub_10002FDFC(v6);
  v4[22] = sub_10002287C();
  uint64_t v7 = sub_100003B20(&qword_10010B408);
  v4[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[24] = v8;
  v4[25] = sub_100021CC4(v8);
  sub_100021C90();
  return sub_100021BCC(v9, v10, v11);
}

uint64_t sub_1000C359C()
{
  uint64_t v3 = *(void *)(v1[15] + 16LL);
  v1[26] = v3;
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v4 = sub_10000BF6C();
  v1[27] = sub_100003BA0(v4, (uint64_t)qword_10010F3D8);
  sub_10004E144();
  os_log_type_t v5 = sub_10003D3E0();
  if (sub_1000228A4(v5))
  {
    uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
    sub_100084CB8(v6);
    sub_1000CFEA0((void *)&_mh_execute_header, v7, v8, "Entering enqueueRequestAndWait");
    sub_10000BCC4(v2);
  }

  uint64_t v9 = v1[18];

  uint64_t v10 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  v1[28] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  uint64_t v11 = (void *)(v9 + v10);
  sub_10002FFE4(v9 + v10, (uint64_t)(v1 + 2));
  v1[29] = *v11;
  uint64_t v12 = v11[1];
  v1[30] = v12;
  uint64_t v13 = v11[2];
  v1[31] = v13;
  uint64_t v14 = dword_10010F46C;
  sub_100021D80();
  sub_10000C278();
  sub_10000C20C();
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v1[32] = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_1000C36DC;
  uint64_t v16 = sub_100084094();
  return sub_1000C3218(v16, v12, v13, v17, v3, v18, v19, 0LL);
}

uint64_t sub_1000C36DC(char a1)
{
  uint64_t v5 = *v2;
  sub_10000BE20(*(void *)(v3 + 256), v6);
  sub_10000BF84();
  sub_10000C280();
  sub_1000304F8();
  if (v1)
  {
    sub_1000D1030();
    sub_10000BFE4();
    sub_10000C1B8();
    return sub_100021E4C(*(uint64_t (**)(void))(v5 + 8));
  }

  else
  {
    uint64_t v8 = *(void *)(v3 + 144);
    *(_BYTE *)(v3 + 34sub_100006F7C(v0 + 4) = a1 & 1;
    return sub_100021BCC((uint64_t)sub_1000C3770, v8, 0LL);
  }

uint64_t sub_1000C3770()
{
  if (*(_BYTE *)(v1 + 344) == 1)
  {
    uint64_t v3 = sub_10000BD20(*(void *)(v1 + 120));
    Logger.logObject.getter(v3);
    os_log_type_t v4 = sub_10000C108();
    if (sub_10000C0F8(v4))
    {
      uint64_t v5 = *(void *)(v1 + 200);
      uint64_t v28 = *(void *)(v1 + 192);
      uint64_t v27 = *(void *)(v1 + 120);
      uint64_t v6 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v29 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v30 = v29;
      sub_1000D0F3C();
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      sub_100092104(v7, v7);
      uint64_t v8 = sub_10003029C(v5, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      sub_1000D0044(v8, v9, &v30);
      *(void *)(v1 + 112) = v10;
      sub_1000D0E38(v1 + 112, v1 + 120, (uint64_t)(v6 + 4));
      sub_10000BCDC(v27);
      sub_10000C000();
      sub_100022210((void *)&_mh_execute_header, v0, v2, "Added request %s to existing pending foreground group ", v6);
      sub_100021F38(v29);
      sub_10000BCC4(v29);
      sub_10000BCC4((uint64_t)v6);
    }

    else
    {
      uint64_t v25 = *(void *)(v1 + 120);

      sub_10000BCDC(v25);
    }

    sub_1000D090C();
    sub_10000C140();
    sub_10000BFE4();
    uint64_t v26 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000D00C8(v26);
  }

  else
  {
    uint64_t v11 = *(void *)(v1 + 144);
    uint64_t v12 = *(void *)(v1 + 120);
    uint64_t v13 = (uint64_t *)(v11 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    sub_10002FFE4(v11 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, v1 + 40);
    uint64_t v14 = *v13;
    *(void *)(v1 + 26sub_100006F7C(v0 + 4) = *v13;
    uint64_t v15 = v13[1];
    *(void *)(v1 + 272) = v15;
    uint64_t v16 = v13[2];
    *(void *)(v1 + 280) = v16;
    uint64_t v17 = sub_100007460((uint64_t)&unk_1001055E0, 32LL);
    *(void *)(v1 + 288) = v17;
    *(void *)(v17 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v12;
    *(void *)(v17 + 2sub_100006F7C(v0 + 4) = v11;
    uint64_t v18 = dword_10010F46C;
    sub_10000C0A0();
    sub_100083778();
    sub_1000224B4();
    sub_100021D80();
    sub_10000C278();
    uint64_t v19 = (void *)swift_task_alloc(v18);
    *(void *)(v1 + 296) = v19;
    sub_1000D0FC8(v19, (uint64_t)sub_1000C39BC);
    return sub_1000D01D8(v14, v15, v16, v20, v21, v22, v23, (uint64_t)sub_1000CE7F0);
  }

uint64_t sub_1000C39BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  char v23 = v22;
  uint64_t v24 = *v19;
  a16 = (void *)v24;
  uint64_t v25 = *v19;
  sub_10000BE20(*(void *)(v24 + 296), &a16);
  sub_10000C280();
  sub_1000304F8();
  sub_100030B78();
  sub_10000BF84();
  if (v18)
  {
    swift_task_dealloc(*(void *)(v24 + 200));
    sub_10000BFE4();
    sub_10000C1B8();
    return sub_100049570(*(uint64_t (**)(void))(v25 + 8));
  }

  else
  {
    *(_BYTE *)(v24 + 345) = v23 & 1;
    sub_100021F54();
    return swift_task_switch(v27, v28, v29);
  }

uint64_t sub_1000C3A58()
{
  if (*(_BYTE *)(v1 + 345) == 1)
  {
    uint64_t v2 = *(void *)(v1 + 216);
    uint64_t v3 = sub_10000BD20(*(void *)(v1 + 120));
    Logger.logObject.getter(v3);
    os_log_type_t v4 = sub_10000C108();
    if (sub_10003CEBC(v0))
    {
      uint64_t v62 = *(void *)(v1 + 192);
      uint64_t v58 = *(void *)(v1 + 120);
      uint64_t v5 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v6 = sub_10000BCF4(32LL);
      sub_1000D0C80(v6, 4.8149e-34);
      sub_1000D0A84();
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      sub_1000D0228(v7);
      uint64_t v8 = sub_1000D0218(v62);
      sub_1000D0044(v8, v9, &v64);
      *(void *)(v1 + 10sub_100006F7C(v0 + 4) = v10;
      sub_1000D0C98(v10, v1 + 112, v11, v12, v13, v14, v15, v16, v56, v57, v58, v62, v1 + 104);
      sub_10000BCDC(v59);
      sub_10000C000();
      sub_100022210((void *)&_mh_execute_header, v0, v4, "Added request %s to existing pending background group", v5);
      sub_100021F38(v6);
      sub_10000BCC4(v6);
      sub_10000BCC4((uint64_t)v5);
    }

    else
    {
      sub_1000D0C78();
      sub_10000BCDC(v2);
    }

    sub_1000D090C();
    sub_10000C140();
    sub_10000BFE4();
    uint64_t v24 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000D00C8(v24);
  }

  uint64_t v18 = *(os_log_s **)(v1 + 168);
  uint64_t v17 = *(os_log_s **)(v1 + 176);
  uint64_t v19 = *(void *)(v1 + 152);
  uint64_t v20 = *(void *)(v1 + 160);
  sub_1000D192C();
  (*(void (**)(os_log_s *, void, uint64_t))(v20 + 104))( v18,  enum case for RequestPriority.foreground(_:),  v19);
  sub_10003D238();
  char v21 = sub_1000BC4FC();
  char v22 = *(void (**)(os_log_s *, uint64_t))(v20 + 8);
  v22(v18, v19);
  v22(v17, v19);
  if ((v21 & 1) != 0)
  {
    uint64_t v23 = *(void *)(v1 + 144);
LABEL_11:
    uint64_t v41 = (void *)(v23 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
    sub_10002FFE4(v23 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, v1 + 64);
    *(void *)(v1 + 30sub_100006F7C(v0 + 4) = *v41;
    *(void *)(v1 + 312) = v41[1];
    uint64_t v42 = v41[2];
    *(void *)(v1 + 320) = v42;
    uint64_t v43 = dword_10010F46C;
    sub_1000224B4();
    sub_100021D80();
    sub_10000C0A0();
    uint64_t v44 = (void *)swift_task_alloc(v43);
    *(void *)(v1 + 328) = v44;
    sub_1000D0FC8(v44, (uint64_t)sub_1000C3E40);
    uint64_t v45 = sub_10003D238();
    return sub_1000D01D8(v45, v46, v42, v47, v48, v49, v50, 0LL);
  }

  uint64_t v23 = *(void *)(v1 + 144);
  if (!*(void *)(*(void *)(v23 + *(void *)(v1 + 224) + 16) + 16LL)) {
    goto LABEL_11;
  }
  uint64_t v26 = *(void *)(v1 + 216);
  uint64_t v27 = sub_10000BD20(*(void *)(v1 + 120));
  Logger.logObject.getter(v27);
  os_log_type_t v28 = sub_10000C108();
  if (sub_10003CEBC(v17))
  {
    uint64_t v63 = *(void *)(v1 + 192);
    uint64_t v60 = *(void *)(v1 + 120);
    uint64_t v29 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v30 = sub_10000BCF4(32LL);
    sub_1000D0C80(v30, 4.8149e-34);
    sub_1000D0A84();
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    sub_1000D0228(v31);
    uint64_t v32 = sub_1000D0218(v63);
    sub_1000D0044(v32, v33, &v64);
    *(void *)(v1 + 88) = v34;
    sub_1000D0C98(v34, v1 + 96, v35, v36, v37, v38, v39, v40, v56, v57, v60, v63, v1 + 88);
    sub_10000BCDC(v61);
    sub_10000C000();
    sub_100022210((void *)&_mh_execute_header, v17, v28, "Creating new execution group for request %s", v29);
    sub_100021F38(v30);
    sub_10000BCC4(v30);
    sub_10000BCC4((uint64_t)v29);
  }

  else
  {
    sub_1000D0C78();
    sub_10000BCDC(v26);
  }

  uint64_t v51 = (void *)swift_task_alloc(dword_10010F454);
  *(void *)(v1 + 336) = v51;
  *uint64_t v51 = v1;
  v51[1] = sub_1000C41CC;
  uint64_t v52 = sub_1000306EC(*(void *)(v1 + 120));
  return sub_1000D0798(v52, v53, v54, v55);
}

uint64_t sub_1000C3E40(char a1)
{
  uint64_t v5 = *v2;
  sub_10000BE20(*(void *)(v3 + 328), v6);
  sub_10000BF84();
  sub_10000C280();
  sub_1000304F8();
  if (v1)
  {
    sub_1000D1030();
    sub_10000BFE4();
    sub_10000C1B8();
    return sub_100021E4C(*(uint64_t (**)(void))(v5 + 8));
  }

  else
  {
    uint64_t v8 = *(void *)(v3 + 144);
    *(_BYTE *)(v3 + 346) = a1 & 1;
    return sub_100021BCC((uint64_t)sub_1000C3ED4, v8, 0LL);
  }

uint64_t sub_1000C3ED4()
{
  int v2 = *(unsigned __int8 *)(v1 + 346);
  uint64_t v3 = *(void *)(v1 + 216);
  uint64_t v4 = sub_10000BD20(*(void *)(v1 + 120));
  Logger.logObject.getter(v4);
  os_log_type_t v5 = sub_10000C108();
  BOOL v6 = os_log_type_enabled(v0, v5);
  if (v2 == 1)
  {
    if (v6)
    {
      uint64_t v35 = *(void *)(v1 + 120);
      uint64_t v37 = *(void *)(v1 + 192);
      uint64_t v7 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v38 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v7 = 136315138;
      sub_1000D0A84();
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      sub_1000D0228(v8);
      uint64_t v9 = sub_1000D0218(v37);
      sub_10003D0C0(v9, v10, v11, v12, v13, v14);
      *(void *)(v1 + 96) = v15;
      sub_1000D0E38(v1 + 96, v1 + 104, (uint64_t)(v7 + 4));
      sub_10000BCDC(v35);
      sub_100022024();
      sub_100022210((void *)&_mh_execute_header, v0, v5, "Added request %s to existing active group", v7);
      sub_100021F38(v38);
      sub_10000BCC4(v38);
      sub_10000BCC4((uint64_t)v7);
    }

    else
    {
      sub_1000D0C78();
      sub_10000BCDC(v3);
    }

    sub_1000D090C();
    sub_10000C140();
    sub_10000BFE4();
    uint64_t v27 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000D00C8(v27);
  }

  else
  {
    if (v6)
    {
      uint64_t v16 = *(void *)(v1 + 200);
      uint64_t v36 = *(void *)(v1 + 192);
      uint64_t v17 = *(void *)(v1 + 184);
      uint64_t v34 = *(void *)(v1 + 120);
      uint64_t v18 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v39 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v18 = 136315138;
      RequestMetadata.id.getter(v39);
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
      uint64_t v20 = sub_1000D0434(v16, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
      sub_10003D0C0(v20, v21, v22, v23, v24, v25);
      *(void *)(v1 + 88) = v26;
      sub_1000D0E38(v1 + 88, v1 + 96, (uint64_t)(v18 + 4));
      sub_10000BCDC(v34);
      sub_100022024();
      sub_100022210((void *)&_mh_execute_header, v0, v5, "Creating new execution group for request %s", v18);
      sub_100021F38(v39);
      sub_10000BCC4(v39);
      sub_10000BCC4((uint64_t)v18);
    }

    else
    {
      sub_1000D0C78();
      sub_10000BCDC(v3);
    }

    uint64_t v29 = (void *)swift_task_alloc(dword_10010F454);
    *(void *)(v1 + 336) = v29;
    *uint64_t v29 = v1;
    v29[1] = sub_1000C41CC;
    uint64_t v30 = sub_1000306EC(*(void *)(v1 + 120));
    return sub_1000D0798(v30, v31, v32, v33);
  }

uint64_t sub_1000C41CC()
{
  uint64_t v1 = *v0;
  uint64_t v4 = v1;
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v1 + 336), &v4);
  swift_task_dealloc(*(void *)(v1 + 200));
  sub_10000BFE4();
  sub_10000C1B8();
  return sub_1000CFD80(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000C4220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RequestPriority(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  sub_1000D192C();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for RequestPriority.foreground(_:), v8);
  char v15 = sub_1000BC4FC();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
  if ((v15 & 1) != 0)
  {
    uint64_t v31 = a3;
    uint64_t v32 = a1;
    uint64_t v18 = a1 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id;
    uint64_t v19 = (uint64_t *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    uint64_t v20 = swift_beginAccess( a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups,  v34,  33LL,  0LL);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    __chkstk_darwin(v20);
    *(&v30 - sub_100006F7C(v0 + 4) = v21;
    *(&v30 - 3) = v22;
    uint64_t v30 = v18;
    *(&v30 - 2) = v18;
    swift_retain();
    swift_retain();
    uint64_t v23 = sub_1000CC470( (void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CF678,  (uint64_t)(&v30 - 6),  v22);
    LOBYTE(v18) = v24;
    uint64_t v26 = v25;
    swift_release(v22);
    swift_release(v21);
    uint64_t v27 = v33;
    if ((v18 & 1) == 0)
    {
      sub_1000CD37C((int64_t)v23, v26, (uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
      uint64_t v28 = sub_1000CD538((unint64_t)v23);
      swift_release(v28);
    }

    swift_endAccess(v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v30, v27);
    swift_beginAccess(v31 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, v34, 33LL, 0LL);
    uint64_t v29 = swift_retain();
    sub_1000BDE44(v29, v7);
    return swift_endAccess(v34);
  }

  return result;
}

uint64_t sub_1000C44A4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for RequestManagerPolicy(0LL);
  sub_10000C240();
  __chkstk_darwin(v6);
  sub_1000D0AAC(v7, v106);
  uint64_t v8 = type metadata accessor for RequestPriority(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100003B20(&qword_10010BFF8);
  sub_10000C240();
  __chkstk_darwin(v12);
  sub_100022990();
  uint64_t v13 = type metadata accessor for ModelManagerError(0LL);
  uint64_t v115 = *(void *)(v13 - 8);
  uint64_t v116 = v13;
  sub_10000C240();
  __chkstk_darwin(v14);
  sub_100022518();
  uint64_t v114 = v15;
  uint64_t v16 = sub_100003B20(&qword_10010B408);
  uint64_t v112 = *(void *)(v16 - 8);
  uint64_t v113 = v16;
  sub_10000C240();
  __chkstk_darwin(v17);
  sub_10003D2C8();
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) == 1)
  {
    uint64_t v18 = a1;
    if (qword_10010B1F0 != -1) {
      swift_once(&qword_10010B1F0, sub_1000BD7F0);
    }
    uint64_t v19 = sub_10000BF6C();
    uint64_t v20 = sub_100003BA0(v19, (uint64_t)qword_10010F3D8);
    uint64_t v21 = sub_10000BD20(v18);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      char v24 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v25 = sub_10000BCF4(32LL);
      uint64_t v111 = (uint64_t *)v25;
      uint64_t v110 = v24;
      *(_DWORD *)char v24 = 136315138;
      v119[0] = v25;
      uint64_t v109 = v24 + 4;
      RequestMetadata.id.getter(v25);
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      uint64_t v26 = v113;
      dispatch thunk of CustomStringConvertible.description.getter(v113, v27);
      uint64_t v28 = sub_1000D0D78();
      uint64_t v30 = v29(v28, v26);
      sub_1000D111C(v30, v31, v119);
      uint64_t v33 = sub_1000D0740(v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34, v109);
      sub_10000BCDC(v18);
      swift_bridgeObjectRelease(v9);
      uint64_t v35 = v110;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Request %s cancelled before executing", v110, 0xCu);
      uint64_t v20 = (uint64_t)v111;
      swift_arrayDestroy(v111, 1LL);
      sub_10000BCC4(v20);
      sub_10000BCC4((uint64_t)v35);
    }

    else
    {

      sub_10000BCDC(v18);
    }

    uint64_t v81 = v114;
    uint64_t v82 = v18 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
    sub_10002FFE4(v18 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError, (uint64_t)v119);
    sub_10004DE58(v82, v2, &qword_10010BFF8);
    if (sub_1000060B4(v2, 1LL, v116) == 1)
    {
      uint64_t v83 = v115;
      (*(void (**)(uint64_t, void, uint64_t))(v115 + 104))( v81,  enum case for ModelManagerError.operationCancelled(_:),  v116);
      sub_1000CF88C(v2, &qword_10010BFF8);
    }

    else
    {
      uint64_t v83 = v115;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v81, v2, v116);
    }

    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000D0844(v84);
    uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v81, v20);
    swift_willThrow(v86, v87, v88, v89, v90, v91, v92, v93);
    uint64_t v94 = sub_1000D10A0();
    return v95(v94);
  }

  else
  {
    uint64_t v114 = v3;
    uint64_t v36 = (char *)(v3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
    sub_10002FFE4((uint64_t)v36, (uint64_t)v119);
    uint64_t v110 = (uint8_t *)v5;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, &v36[*(int *)(v5 + 20)], v8);
    uint64_t v37 = a1;
    char v38 = sub_1000D370C();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v38 & 1) != 0)
    {
      if (qword_10010B1F0 != -1) {
        swift_once(&qword_10010B1F0, sub_1000BD7F0);
      }
      uint64_t v40 = sub_10000BF6C();
      uint64_t v41 = sub_100003BA0(v40, (uint64_t)qword_10010F3D8);
      uint64_t v42 = v37;
      sub_10000BD20(v37);
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000BD20(v114);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (sub_10003D070(v46))
      {
        uint64_t v47 = sub_10000BCF4(22LL);
        uint64_t v48 = sub_10000BCF4(64LL);
        uint64_t v109 = (uint8_t *)v48;
        uint64_t v120 = v48;
        *(_DWORD *)uint64_t v47 = 136315394;
        os_log_t v108 = v45;
        int v107 = v41;
        RequestMetadata.id.getter(v48);
        sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
        uint64_t v49 = v113;
        dispatch thunk of CustomStringConvertible.description.getter(v113, v50);
        uint64_t v51 = sub_1000D0D78();
        uint64_t v53 = v52(v51, v49);
        sub_1000D111C(v53, v54, &v120);
        uint64_t v56 = sub_1000D0740(v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v57, v47 + 4);
        sub_10000BCDC(v42);
        swift_bridgeObjectRelease(v9);
        *(_WORD *)(v47 + 12) = 2080;
        uint64_t v58 = v111;
        sub_1000CF694((uint64_t)v36, (uint64_t)v111, type metadata accessor for RequestManagerPolicy);
        uint64_t v117 = *v58;
        sub_100021EB0();
        uint64_t v59 = sub_100003B20(&qword_10010CA28);
        sub_1000071C0(&qword_10010F7B8, &qword_10010CA28);
        uint64_t v61 = v60;
        unint64_t v62 = sub_10009CE7C();
        uint64_t v63 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v59, v61, v62);
        uint64_t v65 = v64;
        sub_10000C1E0();
        uint64_t v117 = v63;
        uint64_t v118 = v65;
        sub_10002289C();
        v66._countAndFlagsBits = 10272LL;
        v66._object = (void *)0xE200000000000000LL;
        String.append(_:)(v66);
        uint64_t v67 = swift_bridgeObjectRelease(v65);
        uint64_t v69 = v117;
        uint64_t v68 = v118;
        uint64_t v70 = RequestPriority.rawValue.getter(v67);
        uint64_t v72 = v71;
        uint64_t v117 = v69;
        uint64_t v118 = v68;
        sub_100021EB0();
        v73._countAndFlagsBits = v70;
        v73._object = v72;
        String.append(_:)(v73);
        sub_10000C1E0();
        swift_bridgeObjectRelease(v72);
        sub_100021EB0();
        v74._countAndFlagsBits = 41LL;
        v74._object = (void *)0xE100000000000000LL;
        String.append(_:)(v74);
        sub_10000C1E0();
        uint64_t v75 = v118;
        sub_1000CF6B8((uint64_t)v58, type metadata accessor for RequestManagerPolicy);
        uint64_t v76 = sub_100030C8C();
        sub_100015EF8(v76, v77, v78);
        uint64_t v117 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v47 + 14);
        sub_10000BCDC(v43);
        swift_bridgeObjectRelease(v75);
        os_log_t v80 = v108;
        _os_log_impl( (void *)&_mh_execute_header,  v108,  (os_log_type_t)v107,  "Request %s denied due to policy %s",  (uint8_t *)v47,  0x16u);
        uint64_t v41 = (uint64_t)v109;
        swift_arrayDestroy(v109, 2LL);
        sub_10000BCC4(v41);
        sub_10000BCC4(v47);
      }

      else
      {

        sub_10000BCDC(v43);
        sub_10000BCDC(v37);
      }

      sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_1000D0844(v96);
      *uint64_t v97 = *(void *)v36;
      (*(void (**)(void *, void, uint64_t))(v115 + 104))( v97,  enum case for ModelManagerError.deniedDueToSpecifiedSystemState(_:),  v41);
      uint64_t v98 = sub_100021EB0();
      return swift_willThrow(v98, v99, v100, v101, v102, v103, v104, v105);
    }
  }

  return result;
}

uint64_t sub_1000C4BD8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100022694();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_100021CC4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _WORD v2[8] = v6;
  void v2[9] = sub_100021CC4(v6);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000C4C3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v13 = sub_10000BF6C();
  sub_100003BA0(v13, (uint64_t)qword_10010F3D8);
  sub_10004E144();
  os_log_type_t v14 = sub_10003D3E0();
  if (sub_100030684(v10))
  {
    uint64_t v15 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v15);
    sub_1000495CC((void *)&_mh_execute_header, v10, v14, "RequestManager holdAssets called", v11);
    sub_10000BCC4((uint64_t)v11);
  }

  uint64_t v16 = (void *)v12[2];

  uint64_t v17 = v16[7];
  sub_10000729C(v16 + 3, v16[6]);
  sub_1000D0F54();
  sub_1000D192C();
  uint64_t v18 = (void *)sub_100021BB8(*(void *)(v17 + 40));
  v12[10] = v18;
  *uint64_t v18 = v12;
  v18[1] = sub_1000C4D64;
  sub_1000306EC(v12[9]);
  sub_100021F54();
  return v23(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t sub_1000C4D64()
{
  uint64_t v3 = v2[8];
  uint64_t v5 = v2[5];
  uint64_t v4 = v2[6];
  sub_100022B10(v6);
  v2[11] = v0;
  swift_task_dealloc(v7);
  sub_1000304C4(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v0) {
    return sub_100021BCC((uint64_t)sub_1000C4EE0, v2[3], 0LL);
  }
  uint64_t v9 = (void *)swift_task_alloc(dword_10010F474);
  v2[12] = (uint64_t)v9;
  *uint64_t v9 = v1;
  v9[1] = sub_1000C4E30;
  uint64_t v10 = sub_1000306EC(v2[2]);
  return sub_1000C3528(v10, v11, 0LL);
}

uint64_t sub_1000C4E30()
{
  *(void *)(v0 + 10sub_100006F7C(v0 + 4) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_1000C4F10;
  }
  else {
    uint64_t v4 = sub_1000C4E84;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 24), 0LL);
}

uint64_t sub_1000C4E84()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v0);
}

uint64_t sub_1000C4EE0()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C4F10()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C4F68()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant(0LL);
  v0[7] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[8] = v2;
  unint64_t v3 = (*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v0[9] = swift_task_alloc(v3);
  v0[10] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  v0[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[12] = v5;
  v0[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000C4FFC, 0LL, 0LL);
}

uint64_t sub_1000C4FFC()
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  sub_1000D048C(v2, (uint64_t)sub_1000C508C);
  return sub_1000D0238();
}

uint64_t sub_1000C508C()
{
  uint64_t v9 = *v1;
  uint64_t v2 = v9;
  sub_100022B10(&v9);
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_1000D0EA4(*(uint64_t (**)(void, void))(v2 + 112));
  }

  else
  {
    uint64_t v4 = *(void *)(v2 + 96);
    sub_1000D0EA4(*(uint64_t (**)(void, void))(v2 + 112));
    sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }

  sub_10003CE0C();
  return sub_100021BCC(v5, v6, v7);
}

uint64_t sub_1000C5108()
{
  return sub_1000CFD80(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C5158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  void v4[4] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B208);
  v4[7] = sub_100021CC4(*(void *)(v5 - 8));
  uint64_t v6 = sub_100021FC8();
  void v4[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[9] = v7;
  v4[10] = sub_100021CC4(v7);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000C51B8()
{
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  uint64_t v32 = v1;
  sub_1000D1154(v1[3]);
  if (v0)
  {
    swift_task_dealloc(v1[10]);
    sub_10000C140();
    uint64_t v4 = (uint64_t (*)(void))sub_1000308A4();
    return sub_10003036C(v4);
  }

  else
  {
    if (qword_10010B1F0 != -1) {
      swift_once(&qword_10010B1F0, sub_1000BD7F0);
    }
    uint64_t v6 = sub_10000BF6C();
    sub_100003BA0(v6, (uint64_t)qword_10010F3D8);
    uint64_t v7 = (os_log_s *)sub_10004E144();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = v1[10];
      uint64_t v28 = v1[9];
      uint64_t v10 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v29 = sub_10000BCF4(32LL);
      uint64_t v31 = v29;
      *(_DWORD *)uint64_t v10 = 136315138;
      ((void (*)(void))static Task<>.currentPriority.getter)();
      sub_100021AD0(&qword_10010F848, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority);
      uint64_t v12 = sub_100092104(v11, v11);
      uint64_t v14 = v13;
      sub_10003029C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      sub_100015EF8(v12, v14, &v31);
      v1[2] = v15;
      sub_100022C00((uint64_t)(v1 + 2), (uint64_t)(v1 + 3), (uint64_t)(v10 + 4));
      sub_10000C000();
      sub_100022210((void *)&_mh_execute_header, v7, v8, "executeRequest executing (Priority: %s)", v10);
      sub_100021F38(v29);
      sub_10000BCC4(v29);
      sub_10000BCC4((uint64_t)v10);
    }

    uint64_t v16 = v1[7];
    uint64_t v18 = v1[5];
    uint64_t v17 = v1[6];
    __int128 v30 = *(_OWORD *)(v1 + 3);
    sub_1000D0F00(v16, 1LL, v19, v1[8]);
    sub_100021AD0(&qword_10010B3C8, type metadata accessor for RequestManager);
    uint64_t v21 = v20;
    uint64_t v22 = sub_100007460((uint64_t)&unk_100105540, 64LL);
    *(void *)(v22 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v17;
    *(void *)(v22 + 2sub_100006F7C(v0 + 4) = v21;
    *(void *)(v22 + 32) = v17;
    *(_OWORD *)(v22 + 40) = v30;
    *(void *)(v22 + 56) = v18;
    sub_10000BD20(v17);
    sub_1000224B4();
    sub_100021D80();
    sub_10000C81C(v16, (uint64_t)&unk_10010F840, v22);
    uint64_t v24 = v23;
    uint64_t v25 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask;
    v1[11] = v23;
    v1[12] = v25;
    *(void *)(v30 + v25) = v23;
    swift_retain();
    sub_10000BF84();
    uint64_t v26 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v1[13] = v26;
    uint64_t v27 = sub_100003B20(&qword_10010B468);
    *uint64_t v26 = v1;
    v26[1] = sub_1000C547C;
    return Task.value.getter( v27,  v24,  (char *)&type metadata for () + 8,  v27,  &protocol self-conformance witness table for Error);
  }

uint64_t sub_1000C547C()
{
  *(void *)(v0 + 112) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_1000C5520;
  }
  else {
    uint64_t v4 = sub_1000C54D0;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 48), 0LL);
}

uint64_t sub_1000C54D0()
{
  *(void *)(*(void *)(v0 + 24) + *(void *)(v0 + sub_10000BCE4(*(void *)(v0 + 96)) = 0LL;
  swift_release();
  sub_10000BF84();
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_1000CFD80(v1);
}

uint64_t sub_1000C5520()
{
  *(void *)(*(void *)(v0 + 24) + *(void *)(v0 + sub_10000BCE4(*(void *)(v0 + 96)) = 0LL;
  swift_release();
  sub_100021E70();
  swift_task_dealloc(*(void *)(v0 + 80));
  sub_10000BFE4();
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C5570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_1000C5590, a4, 0LL);
}

uint64_t sub_1000C5590()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = sub_1000851EC();
  *(void *)(v0 + 56) = v3;
  __int128 v9 = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v2;
  *(_OWORD *)(v3 + 2sub_100006F7C(v0 + 4) = v9;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = swift_task_alloc(32LL);
  *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v4;
  *(void *)(v4 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v9;
  *(void *)(v4 + 2sub_100006F7C(v0 + 4) = v2;
  sub_100021AD0(&qword_10010B3C8, type metadata accessor for RequestManager);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  *(void *)(v0 + 72) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000C5680;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( *(void *)(v0 + 16),  &unk_10010F858,  v3,  sub_1000CE6F8,  v4,  v2,  v6,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000C5680()
{
  if (v1) {
    return sub_100021BCC((uint64_t)sub_1000C56D4, *(void *)(v0 + 24), 0LL);
  }
  swift_task_dealloc(*(void *)(v0 + 64));
  sub_10000C140();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v3);
}

uint64_t sub_1000C56D4()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C5704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  v5[17] = a2;
  v5[18] = a3;
  uint64_t v7 = sub_100003B20(&qword_10010BFF8);
  v5[21] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ModelManagerError(0LL);
  v5[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[23] = v9;
  v5[24] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003B20(&qword_10010B408);
  v5[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[26] = v11;
  v5[27] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  v5[28] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[29] = v13;
  v5[30] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ClientData(0LL);
  v5[31] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[32] = v15;
  v5[33] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for InferenceProviderRequestResult(0LL);
  v5[34] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v5[35] = v17;
  v5[36] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000C5834, a2, 0LL);
}

uint64_t sub_1000C5834()
{
  if (v0)
  {
    sub_1000D0E70(v1[36]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v2 = (uint64_t (*)(void))sub_1000308A4();
    return v2();
  }

  else
  {
    sub_10002FFE4(v1[17] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests, (uint64_t)(v1 + 2));
    uint64_t v4 = sub_100022944();
    BOOL v5 = sub_1000BCA88(v4);
    sub_10000BD28();
    if (v5) {
      sub_1000C873C();
    }
    uint64_t v6 = v1[30];
    uint64_t v7 = (void *)v1[18];
    uint64_t v8 = sub_10003D238();
    sub_10000BE64(v8, v9, 33LL);
    sub_10000C20C();
    sub_100017AD0(&v16, (uint64_t)v7);
    sub_1000D0B10();
    swift_release();
    uint64_t v10 = v7[6];
    uint64_t v11 = v7[7];
    uint64_t v12 = sub_10000729C(v7 + 3, v10);
    v1[37] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
    char v13 = RequestMetadata.isStream.getter(v12);
    RequestMetadata.clientData.getter();
    sub_1000D187C(v6);
    uint64_t v14 = (void *)sub_100021EFC(*(void *)(v11 + 32));
    v1[38] = v14;
    *uint64_t v14 = v1;
    v14[1] = sub_1000C59C8;
    return v15(v1[36], v13 & 1, v1[33], v1[30], v10, v11);
  }

uint64_t sub_1000C59C8()
{
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  uint64_t v19 = v1;
  uint64_t v19 = (void *)*v1;
  uint64_t v4 = v19;
  sub_100022B10(&v19);
  v4[39] = v0;
  swift_task_dealloc(v5);
  uint64_t v7 = v4[32];
  uint64_t v6 = v4[33];
  uint64_t v8 = v4[30];
  uint64_t v9 = v4[28];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4[29] + 8LL);
  if (v0)
  {
    v10(v8, v9);
    sub_100030250(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    sub_100021C90();
    return swift_task_switch(v11, v12, v13);
  }

  else
  {
    uint64_t v15 = (int *)v4[19];
    v10(v8, v9);
    sub_100030250(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    uint64_t v18 = (uint64_t (*)(uint64_t))((char *)v15 + *v15);
    uint64_t v16 = (void *)swift_task_alloc(v15[1]);
    v4[40] = v16;
    *uint64_t v16 = v1;
    v16[1] = sub_1000C5AA8;
    uint64_t v17 = sub_1000306EC(v4[36]);
    return v18(v17);
  }

uint64_t sub_1000C5AA8()
{
  return sub_10000BD98();
}

uint64_t sub_1000C5AE0(uint64_t a1)
{
  if ((RequestMetadata.isStream.getter(a1) & 1) != 0)
  {
    uint64_t v2 = (void *)v1[18];
    uint64_t v3 = v2[6];
    uint64_t v4 = v2[7];
    sub_10000729C(v2 + 3, v3);
    sub_1000D0F54();
    uint64_t v5 = (void *)sub_100021EFC(*(void *)(v4 + 72));
    v1[41] = v5;
    *uint64_t v5 = v1;
    v5[1] = sub_1000C5BC8;
    uint64_t v6 = sub_1000306EC(v1[27]);
    return v9(v6, v3, v4);
  }

  else
  {
    sub_1000D0254();
    sub_1000D0FF8();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v8 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000495D4(v8);
  }

uint64_t sub_1000C5BC8()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[17];
  sub_10000BCE4(v0[41]);
  sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_100021BCC((uint64_t)sub_1000C5C20, v2, 0LL);
}

uint64_t sub_1000C5C20()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v0);
}

uint64_t sub_1000C5C7C()
{
  uint64_t v1 = sub_1000307DC();
  char v3 = sub_1000314C4(v1, v2);
  uint64_t v4 = sub_10000C1E0();
  if ((v3 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v15 = *(void *)(v0 + 144);
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v13, v17);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)(v16 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
    sub_10002FFE4(v16 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy, v0 + 112);
    *uint64_t v19 = *v20;
    (*(void (**)(void *, void, uint64_t))(v14 + 104))( v19,  enum case for ModelManagerError.deniedDueToSpecifiedSystemState(_:),  v13);
    uint64_t v21 = sub_1000225A4();
    swift_willThrow(v21, v22, v23, v24, v25, v26, v27, v28);
    swift_errorRelease(v12);
    uint64_t v29 = v16;
    uint64_t v30 = v15;
LABEL_8:
    sub_1000C5EBC(v29, v30);
    goto LABEL_9;
  }

  uint64_t v31 = *(void *)(v0 + 144);
  if (*(_BYTE *)(v31 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) == 1)
  {
    uint64_t v33 = *(void *)(v0 + 168);
    uint64_t v32 = *(void *)(v0 + 176);
    uint64_t v34 = v31 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
    sub_10002FFE4(v34, v0 + 88);
    sub_10004DE58(v34, v33, &qword_10010BFF8);
    if (sub_1000060B4(v33, 1LL, v32) != 1)
    {
      uint64_t v38 = *(void *)(v0 + 184);
      uint64_t v37 = *(void *)(v0 + 192);
      uint64_t v39 = *(void *)(v0 + 176);
      uint64_t v41 = *(void *)(v0 + 136);
      uint64_t v40 = *(void *)(v0 + 144);
      sub_100083B50(v37, *(void *)(v0 + 168), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32));
      sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_1000302B0(v39, v42);
      uint64_t v44 = sub_100083B50(v43, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
      swift_willThrow(v44, v45, v46, v47, v48, v49, v50, v51);
      sub_1000301C0();
      sub_1000304C4(v37, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
      uint64_t v29 = v41;
      uint64_t v30 = v40;
      goto LABEL_8;
    }

    sub_1000CF88C(*(void *)(v0 + 168), &qword_10010BFF8);
  }

  swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v35 = sub_100030C8C();
  sub_1000C5EBC(v35, v36);
LABEL_9:
  sub_1000D0E70(*(void *)(v0 + 288));
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_1000495D4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000C5EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests);
  swift_beginAccess( a1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests,  v10,  0LL,  0LL);
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  char v6 = sub_1000314C4(a2, v5);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_beginAccess(v4, &v9, 33LL, 0LL);
    sub_1000CB780(a2);
    swift_endAccess();
    swift_release();
  }

  uint64_t v7 = swift_bridgeObjectRetain();
  BOOL v8 = sub_1000BCA88(v7);
  swift_bridgeObjectRelease();
  if (v8) {
    sub_1000C873C();
  }
}

double sub_1000C5FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v4);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for _OSActivity(0LL);
  _OSActivity.__allocating_init(_:)("Request cancelled", 17LL, 2LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v6, 1LL, 1LL, v7);
  BOOL v8 = (void *)swift_allocObject(&unk_100105568, 48LL, 7LL);
  void v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  swift_retain();
  swift_retain();
  sub_100003854((uint64_t)v6, (uint64_t)&unk_10010F868, (uint64_t)v8);
  swift_release();
  _OSActivity.close()();
  *(void *)&double result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000C60D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  uint64_t v6 = sub_100003B20(&qword_10010B408);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000C6138, 0LL, 0LL);
}

uint64_t sub_1000C6138()
{
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_10000BF6C();
  uint64_t v4 = (os_log_s *)sub_100003BA0(v3, (uint64_t)qword_10010F3D8);
  uint64_t v5 = sub_10000BD20(v2);
  Logger.logObject.getter(v5);
  os_log_type_t v6 = sub_10003CF80();
  if (sub_10000C0F8(v6))
  {
    uint64_t v7 = v0[7];
    uint64_t v17 = v0[6];
    uint64_t v16 = v0[3];
    BOOL v8 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v18 = sub_10000BCF4(32LL);
    uint64_t v19 = v18;
    *(_DWORD *)BOOL v8 = 136315138;
    sub_1000D0F3C();
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    sub_100092104(v9, v9);
    uint64_t v10 = sub_10003029C(v7, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    sub_1000D0044(v10, v11, &v19);
    v0[2] = v12;
    sub_1000D0E38((uint64_t)(v0 + 2), (uint64_t)(v0 + 3), (uint64_t)(v8 + 4));
    sub_10000C000();
    sub_10000BCDC(v16);
    sub_100022210((void *)&_mh_execute_header, v4, v1, "InferenceProvider cancel for Request %s", v8);
    sub_100021F38(v18);
    sub_10000BCC4(v18);
    sub_10000BCC4((uint64_t)v8);
  }

  else
  {
    sub_10000BCDC(v0[3]);
  }

  uint64_t v13 = *(void *)(v0[3] + 16LL);
  uint64_t v14 = (void *)swift_task_alloc(dword_10010F45C);
  v0[8] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1000C6328;
  return sub_1000C1E60(v13);
}

uint64_t sub_1000C6328()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C6358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = sub_1000306E4();
  v4[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[18] = v6;
  v4[19] = sub_100021CC4(v6);
  uint64_t v7 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  v4[20] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[21] = v8;
  v4[22] = sub_100021CC4(v8);
  uint64_t v9 = sub_100003B20(&qword_10010B9A0);
  v4[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[24] = v10;
  v4[25] = sub_100021CC4(v10);
  uint64_t v11 = sub_100022694();
  v4[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[27] = v12;
  v4[28] = sub_100021CC4(v12);
  uint64_t v13 = sub_100003B20(&qword_10010B408);
  v4[29] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[30] = v14;
  v4[31] = sub_10002FDFC(v14);
  v4[32] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v15, v16, v17);
}

uint64_t sub_1000C6420()
{
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v2 = sub_10000BF6C();
  v1[33] = sub_100003BA0(v2, (uint64_t)qword_10010F3D8);
  uint64_t v3 = (os_log_s *)sub_10004E144();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (sub_100030684(v3))
  {
    uint64_t v5 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v5);
    sub_1000495CC((void *)&_mh_execute_header, v3, v4, "executeRequest requested", v0);
    sub_10000BCC4((uint64_t)v0);
  }

  uint64_t v6 = v1[13];

  sub_1000D1154(v6);
  if (v0)
  {
    sub_100030494();
    sub_10000C140();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v7 = (uint64_t (*)(void))sub_1000308A4();
    return sub_1000495D4(v7);
  }

  else
  {
    uint64_t v9 = (void *)v1[13];
    uint64_t v10 = v9[7];
    sub_10000729C(v9 + 3, v9[6]);
    v1[34] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
    sub_1000D0B54();
    sub_1000D192C();
    uint64_t v11 = (void *)sub_100021EFC(*(void *)(v10 + 40));
    v1[35] = v11;
    *uint64_t v11 = v1;
    v11[1] = sub_1000C65BC;
    uint64_t v12 = sub_1000306EC(v1[32]);
    return v13(v12);
  }

uint64_t sub_1000C65BC()
{
  uint64_t v9 = (void *)*v1;
  uint64_t v2 = v9;
  sub_100022B10(&v9);
  v2[36] = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[30];
  uint64_t v5 = v2[16];
  (*(void (**)(void, void))(v2[27] + 8LL))(v2[28], v2[26]);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  if (v0)
  {
    sub_100082DE8(v6);
    uint64_t v7 = sub_1000C6A20;
  }

  else
  {
    v2[37] = v6;
    sub_100082DE8(v6);
    uint64_t v7 = sub_1000C6654;
  }

  return sub_100021BCC((uint64_t)v7, v5, 0LL);
}

uint64_t sub_1000C6654()
{
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v37 = *(void *)(v0 + 248);
  uint64_t v41 = *(void *)(v0 + 232);
  uint64_t v35 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v39 = *(void *)(v0 + 192);
  uint64_t v40 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v45 = *(void *)(v0 + 120);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v43 = *(void *)(v0 + 128);
  uint64_t v44 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v32 = *(void *)(v0 + 144);
  uint64_t v34 = *(void *)(v0 + 136);
  sub_100007104(v43 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_telemetryManager, v0 + 16);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v36 = *(void *)(v0 + 40);
  uint64_t v38 = sub_10000729C((void *)(v0 + 16), v36);
  uint64_t v6 = RequestMetadata.id.getter(v38);
  uint64_t v7 = RequestMetadata.sessionID.getter(v6);
  uint64_t v33 = RequestMetadata.loggingIdentifier.getter(v7);
  uint64_t v9 = v8;
  sub_1000D187C(v1);
  uint64_t v31 = InferenceProviderRequestConfiguration.useCaseIdentifier.getter();
  uint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v30);
  uint64_t v12 = v3[6];
  uint64_t v13 = v3[7];
  sub_10000729C(v3 + 3, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v15 = InferenceProviderDescriptor.id.getter(v14);
  uint64_t v17 = v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
  *(void *)(v0 + 30sub_100006F7C(v0 + 4) = v18;
  uint64_t v19 = v18(v4, v34);
  LOBYTE(vsub_100006F7C(v0 + 4) = RequestMetadata.isStream.getter(v19);
  HIBYTE(v29) = RequestMetadata.isInference.getter() & 1;
  LOBYTE(v29) = (v4 & 1) == 0;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, uint64_t, uint64_t))(v5 + 24))( v37,  v35,  v33,  v9,  v31,  v11,  v15,  v17,  v29,  v36,  v5);
  *(void *)(v0 + 312) = v20;
  sub_100022B4C();
  sub_10000C000();
  swift_bridgeObjectRelease(v17);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v40);
  v42(v37, v41);
  uint64_t v21 = sub_100003B20(&qword_10010F808);
  uint64_t v22 = sub_100007460(v21, 24LL);
  *(void *)(v0 + 320) = v22;
  *(_DWORD *)(v22 + 20) = 0;
  *(_BYTE *)(v22 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0;
  sub_100007104(v0 + 16, v0 + 56);
  uint64_t v23 = (void *)sub_100007460((uint64_t)&unk_1001054C8, 104LL);
  *(void *)(v0 + 328) = v23;
  sub_1000070EC((__int128 *)(v0 + 56), (uint64_t)(v23 + 2));
  v23[7] = v3;
  v23[8] = v20;
  v23[9] = v22;
  v23[10] = v43;
  v23[11] = v44;
  v23[12] = v45;
  uint64_t v24 = dword_10010F474;
  sub_10000C0A0();
  sub_10000C030();
  sub_1000224B4();
  sub_10000C0F0();
  sub_10000C20C();
  uint64_t v25 = (void *)swift_task_alloc(v24);
  *(void *)(v0 + 336) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_1000C6918;
  uint64_t v26 = sub_1000306EC(*(void *)(v0 + 104));
  return sub_1000C3528(v26, v27, (uint64_t)v23);
}

uint64_t sub_1000C6918()
{
  v0[43] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[16];
    uint64_t v5 = sub_1000C6B80;
  }

  else
  {
    uint64_t v6 = v0[16];
    swift_release(v0[41]);
    uint64_t v5 = sub_1000C697C;
    uint64_t v4 = v6;
  }

  return sub_100021BCC((uint64_t)v5, v4, 0LL);
}

uint64_t sub_1000C697C()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_1000495D4(v1);
}

uint64_t sub_1000C6A20()
{
  uint64_t v2 = *(void *)(v1 + 288);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (sub_1000228A4(v5))
  {
    uint64_t v6 = *(void *)(v1 + 288);
    uint64_t v7 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v8 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v6);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v1 + 96) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v7 + 4);
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    sub_100022210((void *)&_mh_execute_header, v4, v0, "Calling back request unable to add connection with %@", v7);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v8);
    sub_10000BCC4((uint64_t)v8);
    sub_10000BCC4((uint64_t)v7);
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
  }

  swift_willThrow(v10, v11, v12, v13, v14, v15, v16, v17);
  sub_1000D076C();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_1000495D4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000C6B80()
{
  uint64_t v1 = *(void *)(v0 + 320);
  swift_release(*(void *)(v0 + 328));
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  LOBYTE(sub_10002F90C(v0, v1) = *(_BYTE *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  if ((v1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    uint64_t v29 = *(void *)(v0 + 312);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v30 = *(void *)(v0 + 232);
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v14 = *(void **)(v0 + 104);
    uint64_t v15 = v14 + 3;
    uint64_t v16 = *(void *)(v0 + 48);
    uint64_t v26 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 40);
    uint64_t v25 = sub_10000729C((void *)(v0 + 16), v27);
    RequestMetadata.id.getter(v25);
    uint64_t v18 = v14[6];
    uint64_t v17 = v14[7];
    sub_10000729C(v15, v18);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    swift_errorRetain(v11);
    uint64_t v20 = v19(v18, v17);
    uint64_t v21 = InferenceProviderDescriptor.id.getter(v20);
    uint64_t v23 = v22;
    v28(v13, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 32))( v12,  v29,  v11,  v21,  v23,  v27,  v16);
    sub_10000C1E0();
    swift_errorRelease(v11);
    uint64_t v3 = v31(v12, v30);
  }

  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100021E70();
  sub_100021DDC();
  sub_100006F7C((void *)(v0 + 16));
  sub_1000C6D14();
  sub_1000D076C();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_10003036C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000C6D14()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_100003B20(&qword_10010B208);
  sub_10000C240();
  __chkstk_darwin(v11);
  sub_1000D0CF8();
  uint64_t v12 = sub_100021FC8();
  sub_100005FB0(v0, 1LL, 1LL, v12);
  uint64_t v13 = (void *)sub_100007460(v8, 40LL);
  void v13[2] = 0LL;
  uint64_t v14 = v13 + 2;
  v13[3] = 0LL;
  v13[4] = v10;
  int v15 = sub_1000060B4(v0, 1LL, v12);
  uint64_t v16 = sub_10000C20C();
  if (v15 == 1)
  {
    sub_1000CF88C(v0, &qword_10010B208);
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 7168LL;
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v16);
    sub_1000304C4(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL));
    uint64_t v19 = v20 | 0x1C00LL;
    uint64_t v21 = *v14;
    if (*v14)
    {
      uint64_t v22 = v13[3];
      uint64_t ObjectType = swift_getObjectType(*v14);
      swift_unknownObjectRetain(v21);
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v22);
      uint64_t v18 = v24;
      swift_unknownObjectRelease(v21);
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
    }
  }

  uint64_t v25 = sub_100007460(v6, 32LL);
  *(void *)(v25 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v4;
  *(void *)(v25 + 2sub_100006F7C(v0 + 4) = v13;
  if (v18 | v17)
  {
    v28[0] = 0LL;
    v28[1] = 0LL;
    uint64_t v26 = v28;
    v28[2] = v17;
    void v28[3] = v18;
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  uint64_t v27 = swift_task_create(v19, v26, (char *)&type metadata for () + 8, v2, v25);
  swift_release(v27);
  sub_100007448();
}

uint64_t sub_1000C6EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor(0LL);
  void v7[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[10] = v10;
  v7[11] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003B20(&qword_10010B408);
  void v7[12] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[13] = v12;
  v7[14] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000C6F3C, a5, 0LL);
}

uint64_t sub_1000C6F3C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[11];
  uint64_t v23 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[5];
  uint64_t v21 = v0[9];
  uint64_t v22 = v0[4];
  uint64_t v5 = (void *)v0[2];
  uint64_t v6 = (void *)v0[3];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  sub_10000729C(v5, v7);
  sub_1000D0F54();
  uint64_t v9 = v6 + 3;
  uint64_t v10 = v6[6];
  uint64_t v11 = v6[7];
  sub_10000729C(v9, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  uint64_t v13 = InferenceProviderDescriptor.id.getter(v12);
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v21);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))( v1,  v22,  0LL,  v13,  v15,  v7,  v8);
  sub_100022B4C();
  sub_10009837C(v23);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 20));
  *(_BYTE *)(v4 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 20));
  uint64_t v16 = (void *)swift_task_alloc(dword_10010F484);
  v0[15] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1000C7084;
  uint64_t v17 = sub_1000306EC(v0[3]);
  return sub_1000C5158(v17, v18, v19);
}

uint64_t sub_1000C7084()
{
  return sub_1000CFD80(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C70C4(uint64_t a1)
{
  v2[34] = a1;
  v2[35] = v1;
  uint64_t v3 = type metadata accessor for RequestCancellationReason(0LL);
  v2[36] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[37] = v4;
  v2[38] = sub_100021CC4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  v2[39] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[40] = v6;
  v2[41] = sub_100021CC4(v6);
  uint64_t v7 = sub_100003B20(&qword_10010F7E8);
  v2[42] = sub_10002FDFC(*(void *)(v7 - 8));
  v2[43] = sub_10002287C();
  uint64_t v8 = sub_100003B20(&qword_10010F7F0);
  v2[44] = v8;
  v2[45] = sub_10002FDFC(*(void *)(v8 - 8));
  v2[46] = sub_10002287C();
  v2[47] = sub_10002287C();
  uint64_t v9 = sub_100022694();
  v2[48] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[49] = v10;
  v2[50] = sub_100021CC4(v10);
  uint64_t v11 = type metadata accessor for RequestManagerPolicy(0LL);
  v2[51] = v11;
  v2[52] = sub_10002FDFC(*(void *)(v11 - 8));
  v2[53] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v12, v13, v14);
}

uint64_t sub_1000C71B4()
{
  unint64_t v1 = (unint64_t)(v0 + 12);
  uint64_t v2 = (uint64_t)(v0 + 18);
  if (qword_10010B1F0 != -1) {
    goto LABEL_100;
  }
  while (1)
  {
    uint64_t v3 = sub_10000BF6C();
    v0[54] = sub_100003BA0(v3, (uint64_t)qword_10010F3D8);
    uint64_t v4 = sub_100030C8C();
    sub_1000CF694(v4, v5, v6);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[53];
    uint64_t v169 = v0;
    if (v10)
    {
      os_log_type_t v164 = v9;
      uint64_t v155 = v0 + 34;
      uint64_t v158 = v0 + 33;
      uint64_t v12 = (void *)v0[52];
      uint64_t v13 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v161 = sub_10000BCF4(32LL);
      uint64_t v170 = v161;
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_1000CF694(v11, (uint64_t)v12, type metadata accessor for RequestManagerPolicy);
      v0[32] = *v12;
      sub_1000225A4();
      unint64_t v166 = v1;
      uint64_t v14 = sub_100003B20(&qword_10010CA28);
      sub_1000071C0(&qword_10010F7B8, &qword_10010CA28);
      uint64_t v16 = v15;
      unint64_t v17 = sub_10009CE7C();
      uint64_t v18 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v14, v16, v17);
      uint64_t v20 = v19;
      sub_100022B4C();
      uint64_t v171 = v18;
      uint64_t v172 = v20;
      sub_100022C50();
      sub_1000D0E98();
      uint64_t v21 = sub_1000228C4();
      uint64_t v23 = v171;
      uint64_t v22 = v172;
      uint64_t v24 = RequestPriority.rawValue.getter(v21);
      uint64_t v26 = v25;
      uint64_t v171 = v23;
      uint64_t v172 = v22;
      sub_1000225A4();
      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      uint64_t v28 = v26;
      unint64_t v1 = v166;
      swift_bridgeObjectRelease(v28);
      sub_100022B4C();
      sub_1000225A4();
      sub_1000D0E80();
      sub_100022B4C();
      uint64_t v29 = v171;
      uint64_t v30 = v172;
      uint64_t v0 = v169;
      sub_1000CF6B8((uint64_t)v12, type metadata accessor for RequestManagerPolicy);
      sub_100015EF8(v29, v30, &v170);
      v169[33] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v158, v155, v13 + 4);
      sub_100022B4C();
      sub_1000CF6B8(v11, type metadata accessor for RequestManagerPolicy);
      sub_100022210((void *)&_mh_execute_header, v8, v164, "Processing policy change, new policy: %s", v13);
      sub_100021F38(v161);
      sub_10000BCC4(v161);
      sub_10000BCC4((uint64_t)v13);
    }

    else
    {
      sub_1000CF6B8(v11, type metadata accessor for RequestManagerPolicy);
    }

    uint64_t v162 = (uint64_t)(v0 + 15);
    uint64_t v154 = (uint64_t)(v0 + 24);
    uint64_t v33 = v0[34];
    uint64_t v32 = v0[35];
    uint64_t v34 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy;
    v0[55] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy;
    uint64_t v35 = v32 + v34;
    sub_10000BE64(v32 + v34, v1, 33LL);
    uint64_t v168 = v35;
    sub_1000CE290(v33, v35);
    swift_endAccess(v1);
    v0[29] = &_swiftEmptySetSingleton;
    uint64_t v36 = (uint64_t *)(v32 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests);
    sub_10002FFE4(v32 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests, v2);
    uint64_t v37 = *v36;
    uint64_t v148 = (uint64_t)(v0 + 21);
    if ((*v36 & 0xC000000000000001LL) != 0)
    {
      uint64_t v38 = v37 < 0 ? *v36 : v37 & 0xFFFFFFFFFFFFFF8LL;
      sub_1000225A4();
      __CocoaSet.makeIterator()(v38);
      sub_10000C074();
      sub_100021AD0(&qword_10010B478, type metadata accessor for DaemonRequest);
      uint64_t v39 = sub_10003D238();
      uint64_t v42 = Set.Iterator.init(_cocoa:)(v39, v40, v41);
      uint64_t v37 = v0[7];
      uint64_t v159 = v0[8];
      uint64_t v43 = v0[9];
      int64_t v44 = v0[10];
      unint64_t v45 = v0[11];
    }

    else
    {
      uint64_t v46 = -1LL << *(_BYTE *)(v37 + 32);
      uint64_t v159 = v37 + 56;
      uint64_t v43 = ~v46;
      uint64_t v47 = -v46;
      uint64_t v48 = v47 < 64 ? ~(-1LL << v47) : -1LL;
      unint64_t v45 = v48 & *(void *)(v37 + 56);
      uint64_t v42 = sub_1000225A4();
      int64_t v44 = 0LL;
    }

    uint64_t v142 = v0 + 27;
    uint64_t v143 = v0 + 28;
    uint64_t v165 = v0 + 29;
    uint64_t v151 = v0 + 30;
    uint64_t v49 = v0 + 31;
    uint64_t v167 = v0[51];
    uint64_t v2 = v0[49];
    int64_t v156 = (unint64_t)(v43 + 64) >> 6;
    unint64_t v1 = (unint64_t)v169;
    if (v37 < 0)
    {
      while (1)
      {
        uint64_t v52 = __CocoaSet.Iterator.next()(v42);
        if (!v52) {
          break;
        }
        *uint64_t v49 = v52;
        uint64_t v53 = sub_10000C074();
        sub_100022CFC();
        sub_100022CC0((uint64_t)v151, (uint64_t)v49, (uint64_t)&type metadata for Swift.AnyObject + 8, v53);
        uint64_t v54 = *v151;
        sub_100030590();
        int64_t v51 = v44;
        uint64_t v0 = (void *)v45;
        if (!v54) {
          break;
        }
LABEL_35:
        uint64_t v58 = v169[50];
        sub_100083B50(v58, v168 + *(int *)(v167 + 20), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
        char v59 = sub_1000D370C();
        sub_1000304C4(v58, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
        if ((v59 & 1) != 0)
        {
          sub_10000BE64( v169[35] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests,  v162,  33LL);
          sub_1000837AC();
          uint64_t v60 = (uint64_t *)sub_1000D0F8C();
          sub_100017AD0(v60, v61);
          swift_endAccess(v162);
          swift_release(v171);
          unint64_t v62 = (uint64_t *)sub_1000D0F8C();
          sub_100017AD0(v62, v63);
          uint64_t v64 = v171;
        }

        else
        {
          uint64_t v64 = v54;
        }

        uint64_t v42 = swift_release(v64);
        int64_t v44 = v51;
        unint64_t v45 = (unint64_t)v0;
        if ((v37 & 0x8000000000000000LL) == 0) {
          goto LABEL_15;
        }
      }
    }

    else
    {
LABEL_15:
      if (v45)
      {
        uint64_t v0 = (void *)((v45 - 1) & v45);
        unint64_t v50 = __clz(__rbit64(v45)) | (v44 << 6);
        int64_t v51 = v44;
        goto LABEL_34;
      }

      int64_t v55 = v44 + 1;
      if (__OFADD__(v44, 1LL)) {
        goto LABEL_99;
      }
      if (v55 < v156)
      {
        unint64_t v56 = *(void *)(v159 + 8 * v55);
        int64_t v51 = v44 + 1;
        if (v56) {
          goto LABEL_33;
        }
        int64_t v51 = v44 + 2;
        if (v44 + 2 >= v156) {
          goto LABEL_40;
        }
        unint64_t v56 = *(void *)(v159 + 8 * v51);
        if (v56) {
          goto LABEL_33;
        }
        int64_t v51 = v44 + 3;
        if (v44 + 3 >= v156) {
          goto LABEL_40;
        }
        unint64_t v56 = *(void *)(v159 + 8 * v51);
        if (v56) {
          goto LABEL_33;
        }
        int64_t v51 = v44 + 4;
        if (v44 + 4 >= v156) {
          goto LABEL_40;
        }
        unint64_t v56 = *(void *)(v159 + 8 * v51);
        if (v56)
        {
LABEL_33:
          uint64_t v0 = (void *)((v56 - 1) & v56);
          unint64_t v50 = __clz(__rbit64(v56)) + (v51 << 6);
LABEL_34:
          uint64_t v54 = *(void *)(*(void *)(v37 + 48) + 8 * v50);
          sub_1000837AC();
          if (!v54) {
            goto LABEL_40;
          }
          goto LABEL_35;
        }

        int64_t v57 = v44 + 5;
        while (v57 < v156)
        {
          unint64_t v56 = *(void *)(v159 + 8 * v57++);
          if (v56)
          {
            int64_t v51 = v57 - 1;
            goto LABEL_33;
          }
        }
      }
    }

LABEL_55:
      unint64_t v74 = v160 + 1;
      unint64_t v1 = (unint64_t)v169;
      uint64_t v93 = v169[46];
      sub_100022D34();
      sub_1000CF88C(v93, &qword_10010F7F0);
      uint64_t v71 = v144;
      uint64_t v68 = v145;
      uint64_t v72 = v163;
      if (v160 + 1 == v153)
      {
        sub_1000D0FF0(v94, v95, v96, v97, v98, v99, v100, v101, v140, v141);
        swift_release(v157);
        uint64_t result = sub_100021DDC();
        goto LABEL_62;
      }
    }

    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }

LABEL_82:
  uint64_t v115 = (v135 - 1) & v135;
  unint64_t v116 = __clz(__rbit64(v135)) + (v117 << 6);
LABEL_73:
  uint64_t v118 = *(void *)(*(void *)(v103 + 48) + 8 * v116);
  sub_10000C278();
LABEL_76:
  *(void *)(v1 + 480) = v117;
  *(void *)(v1 + 488) = v115;
  *(void *)(v1 + 472) = v118;
  if (!v118) {
    goto LABEL_95;
  }
  uint64_t v121 = sub_10000BD20(v118);
  Logger.logObject.getter(v121);
  os_log_type_t v122 = sub_10000C108();
  if (os_log_type_enabled((os_log_t)v110, v122))
  {
    uint64_t v123 = *(void *)(v1 + 320);
    uint64_t v124 = *(void *)(v1 + 328);
    uint64_t v125 = sub_10000BCF4(12LL);
    uint64_t v126 = sub_10000BCF4(32LL);
    uint64_t v171 = v126;
    *(_DWORD *)uint64_t v125 = 136315138;
    sub_1000D0B54();
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    sub_1000D056C(v127);
    uint64_t v129 = v128;
    uint64_t v130 = sub_10003029C(v124, *(uint64_t (**)(uint64_t, uint64_t))(v123 + 8));
    sub_1000A86C8(v130, v131, &v171);
    *(void *)(v125 + sub_100006F7C(v0 + 4) = v132;
    unint64_t v1 = (unint64_t)v169;
    swift_bridgeObjectRelease(v129);
    sub_10000BCDC(v118);
    sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v110,  v122,  "Cancelling request %s due to policy change",  (uint8_t *)v125);
    sub_100021F38(v126);
    sub_10000BCC4(v126);
    sub_10000BCC4(v125);
  }

  else
  {
    sub_10000BCDC(v118);
  }

  sub_1000D0D10(*(void **)(v1 + 304), *(void *)(v1 + 440));
  sub_100022944();
  uint64_t v136 = (void *)sub_10002287C();
  *(void *)(v1 + 496) = v136;
  void *v136 = v1;
  v136[1] = sub_1000C7E98;
  return sub_1000D2DDC(*(void *)(v1 + 280), *(void *)(v1 + 304));
}

uint64_t sub_1000C7E98()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[35];
  sub_10000BCE4(v0[62]);
  sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_100021BCC((uint64_t)sub_1000C7EEC, v2, 0LL);
}

uint64_t sub_1000C7EEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  uint64_t result = swift_release(*(void *)(v22 + 472));
  uint64_t v26 = *(void *)(v22 + 480);
  unint64_t v27 = *(void *)(v22 + 488);
  uint64_t v28 = *(void *)(v22 + 448);
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    if (v27)
    {
      uint64_t v29 = (v27 - 1) & v27;
      unint64_t v30 = __clz(__rbit64(v27)) | (v26 << 6);
      uint64_t v31 = *(void *)(v22 + 480);
LABEL_4:
      uint64_t v32 = *(void *)(*(void *)(v28 + 48) + 8 * v30);
      sub_1000224B4();
      goto LABEL_7;
    }

    int64_t v44 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      return result;
    }

    unint64_t v45 = *(void *)(v22 + 464) + 64LL;
    if (v44 < (uint64_t)(v45 >> 6))
    {
      uint64_t v46 = *(void *)(v22 + 456);
      unint64_t v47 = *(void *)(v46 + 8 * v44);
      uint64_t v31 = v26 + 1;
      if (!v47)
      {
        int64_t v52 = v45 >> 6;
        uint64_t v31 = v26 + 2;
        if (v26 + 2 >= v52) {
          goto LABEL_26;
        }
        unint64_t v47 = *(void *)(v46 + 8 * v31);
        if (!v47)
        {
          uint64_t v31 = v26 + 3;
          if (v26 + 3 >= v52) {
            goto LABEL_26;
          }
          unint64_t v47 = *(void *)(v46 + 8 * v31);
          if (!v47)
          {
            uint64_t v31 = v26 + 4;
            if (v26 + 4 >= v52) {
              goto LABEL_26;
            }
            unint64_t v47 = *(void *)(v46 + 8 * v31);
            if (!v47)
            {
              uint64_t v53 = v26 + 5;
              while (v53 < v52)
              {
                unint64_t v47 = *(void *)(v46 + 8 * v53++);
                if (v47)
                {
                  uint64_t v31 = v53 - 1;
                  goto LABEL_13;
                }
              }

              goto LABEL_26;
            }
          }
        }
      }

uint64_t sub_1000C81F4()
{
  return sub_10000BD98();
}

#error "1000C82DC: call analysis failed (funcsize=47)"
uint64_t sub_1000C82F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int *v6;
  _BYTE v8[24];
  sub_10002FFE4(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests, (uint64_t)v8);
  uint64_t v3 = sub_100022944();
  uint64_t v4 = sub_1000BCA88(v3);
  sub_10000BD28();
  uint64_t v5 = type metadata accessor for InferenceMonitor.Event(0LL);
  uint64_t v6 = (unsigned int *)&enum case for InferenceMonitor.Event.inferencesNotRunning(_:);
  if (!v4) {
    uint64_t v6 = (unsigned int *)&enum case for InferenceMonitor.Event.inferencesRunning(_:);
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104LL))(a1, *v6, v5);
}

void sub_1000C8380(Swift::UInt a1, int a2)
{
}

void sub_1000C8404()
{
  uint64_t v3 = v0;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for InferenceMonitor.Event(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000D0AC8();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - v11;
  sub_1000C82F0((uint64_t)&v29 - v11);
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v13 = sub_10000BF6C();
  uint64_t v14 = sub_100003BA0(v13, (uint64_t)qword_10010F3D8);
  sub_100083B50(v2, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  uint64_t v15 = sub_10000BD20(v7);
  uint64_t v33 = v14;
  Logger.logObject.getter(v15);
  os_log_type_t v16 = sub_10000C160();
  if (sub_100030684(v1))
  {
    uint64_t v17 = sub_10000BCF4(18LL);
    uint64_t v31 = v3;
    uint64_t v18 = v17;
    uint64_t v30 = sub_10000BCF4(32LL);
    uint64_t v36 = v30;
    *(_DWORD *)uint64_t v18 = 136315394;
    int v32 = v5;
    sub_100021AD0(&qword_10010F7E0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceMonitor.Event);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v8, v19);
    sub_100015EF8(v20, v21, &v36);
    uint64_t v23 = sub_1000D0740(v22);
    int v24 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, v25, v18 + 4);
    sub_10000BD28();
    sub_1000D0C68();
    *(_WORD *)(v18 + 12) = 1024;
    sub_10000C1F0();
    int v34 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v18 + 14);
    sub_10000C1F0();
    _os_log_impl( (void *)&_mh_execute_header,  v1,  v16,  "Sending inference monitor event: %s to pid %d",  (uint8_t *)v18,  0x12u);
    uint64_t v26 = v30;
    sub_100021F38(v30);
    sub_10000BCC4(v26);
    sub_10000BCC4(v18);
  }

  else
  {
    sub_10000C1F0();
    sub_1000D0C68();

    sub_10000C1F0();
  }

  sub_100021AD0(&qword_10010F7D8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceMonitor.Event);
  uint64_t v27 = sub_1000D1080();
  dispatch thunk of XPCSession.send<A>(_:)(v27);
  uint64_t v28 = sub_1000D1080();
  ((void (*)(uint64_t))v9)(v28);
  sub_100007448();
}

void sub_1000C873C()
{
  uint64_t v4 = sub_100021FC8();
  sub_1000D0F00(v0, 0LL, v5, v4);
  sub_100021AD0(&qword_10010B3C8, type metadata accessor for RequestManager);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)sub_100007460((uint64_t)&unk_1001054A0, 40LL);
  void v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  sub_10000BD20(v1);
  sub_100003854(v0, (uint64_t)&unk_10010F7D0, (uint64_t)v8);
  swift_release();
  sub_10004E1F0();
}

uint64_t sub_1000C87F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return swift_task_switch(sub_1000C880C, a4, 0LL);
}

uint64_t sub_1000C880C()
{
  uint64_t v1 = *(void *)(v0 + 40) + OBJC_IVAR____TtC13modelmanagerd14RequestManager_inferenceMonitors;
  sub_10002FFE4(v1, v0 + 16);
  uint64_t v2 = *(void *)v1 + 56LL;
  uint64_t v3 = -1LL;
  uint64_t v4 = -1LL << *(_BYTE *)(*(void *)v1 + 32LL);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1LL << -(char)v4);
  }
  uint64_t v5 = v3 & *(void *)(*(void *)v1 + 56LL);
  int64_t v6 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = sub_100021EB0();
  int64_t v8 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  for (v5 &= v5 - 1; ; uint64_t v5 = (v10 - 1) & v10)
  {
    sub_100021D80();
    sub_1000C8404();
    uint64_t result = sub_10000BF84();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v9 >= v6) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v2 + 8 * v9);
    ++v8;
    if (!v10)
    {
      int64_t v8 = v9 + 1;
      if (v9 + 1 >= v6) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v2 + 8 * v8);
      if (!v10)
      {
        int64_t v8 = v9 + 2;
        if (v9 + 2 >= v6) {
          goto LABEL_21;
        }
        uint64_t v10 = *(void *)(v2 + 8 * v8);
        if (!v10) {
          break;
        }
      }
    }

uint64_t sub_1000C8988()
{
  return v0;
}

uint64_t sub_1000C8A70()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000C8A88()
{
  return type metadata accessor for RequestManager(0LL);
}

uint64_t type metadata accessor for RequestManager(uint64_t a1)
{
  return sub_100047EF0(a1, (uint64_t *)&unk_10010F418, (uint64_t)&nominal type descriptor for RequestManager);
}

uint64_t sub_1000C8AA4(uint64_t a1)
{
  uint64_t result = type metadata accessor for RequestManagerPolicy(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1000DABA8;
    void v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[4] = &unk_1000DABA8;
    void v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = &unk_1000DABC0;
    v4[7] = &unk_1000DABC0;
    void v4[8] = &unk_1000DABC0;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = &unk_1000DABD8;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256LL, 14LL, v4, a1 + 80);
  }

  return result;
}

uint64_t type metadata accessor for RequestManagerPolicy(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010F780, (uint64_t)&nominal type descriptor for RequestManagerPolicy);
}

uint64_t *sub_1000C8B80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    int64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for RequestPriority(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t sub_1000C8C18(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for RequestPriority(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_1000C8C60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for RequestPriority(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000C8CD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for RequestPriority(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

void *sub_1000C8D44(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for RequestPriority(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000C8DA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for RequestPriority(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000C8E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C8E18);
}

void sub_1000C8E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10004E1F0();
  }

  else
  {
    uint64_t v6 = sub_100022694();
    sub_1000060B4(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_1000C8E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C8E8C);
}

void sub_1000C8E8C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_10004E1F0();
  }

  else
  {
    uint64_t v7 = sub_100022694();
    sub_100005FB0((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

uint64_t sub_1000C8EEC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for RequestPriority(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_1000C8F64(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

uint64_t sub_1000C8FA4()
{
  uint64_t v0 = swift_task_alloc(dword_10010F7CC);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_1000C87F4(v2, v3, v4, v5);
}

void sub_1000C8FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  *(void *)&__int128 v89 = _swiftEmptyArrayStorage;
  uint64_t v9 = *(void *)(a3 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v80 = a6;
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(a3 + 32);
    uint64_t v11 = (char *)&v92 + 8;
    uint64_t v12 = &v93;
    uint64_t v13 = (uint64_t *)&unk_10010F898;
    uint64_t v14 = &qword_10010F8A0;
    uint64_t v15 = &qword_10010F8A8;
    do
    {
      uint64_t v16 = *v10;
      uint64_t v17 = *v10 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
      swift_beginAccess(v17, v88, 0LL, 0LL);
      __int128 v18 = *(_OWORD *)v17;
      __int128 v19 = *(_OWORD *)(v17 + 32);
      __int128 v93 = *(_OWORD *)(v17 + 16);
      __int128 v94 = v19;
      __int128 v92 = v18;
      sub_10004DFFC((uint64_t)v11, (uint64_t)&v95, v13);
      sub_10004DFFC((uint64_t)v12, (uint64_t)&v96, v14);
      sub_10004DFFC((uint64_t)&v93 + 8, (uint64_t)&v97, v15);
      __int128 v98 = v94;
      swift_retain();
      sub_1000CF6E8(&v95);
      sub_1000CF6E8(&v96);
      sub_1000CF6E8(&v97);
      sub_1000CF710(&v98);
      sub_1000CF710((void *)&v98 + 1);
      LOBYTE(v17) = sub_100008664();
      sub_100049090(&v95);
      sub_100049090(&v96);
      sub_100049090(&v97);
      sub_10000B4BC(&v98);
      uint64_t v20 = sub_10000B4BC((void *)&v98 + 1);
      if ((v17 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        uint64_t v21 = v12;
        uint64_t v22 = v11;
        uint64_t v23 = v15;
        int v24 = v14;
        uint64_t v25 = v13;
        uint64_t v26 = *(void *)(v89 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
        uint64_t v27 = v26;
        uint64_t v13 = v25;
        uint64_t v14 = v24;
        uint64_t v15 = v23;
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v16);
        specialized ContiguousArray._endMutation()(v28);
      }

      else
      {
        swift_release();
      }

      ++v10;
      --v9;
    }

    while (v9);
    unint64_t v8 = v89;
    a6 = v80;
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if ((v8 & 0x8000000000000000LL) != 0 || (v8 & 0x4000000000000000LL) != 0)
  {
    uint64_t v55 = swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v55);
  }

  else
  {
    uint64_t v29 = *(void *)(v8 + 16);
    swift_bridgeObjectRetain();
  }

  uint64_t v30 = &OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets;
  if (v29)
  {
    if (v29 < 1)
    {
      __break(1u);
      goto LABEL_42;
    }

    uint64_t v31 = 0LL;
    do
    {
      if ((v8 & 0xC000000000000001LL) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v8);
      }
      else {
        swift_retain();
      }
      ++v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100012590();
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      swift_release();
    }

    while (v29 != v31);
  }

  else
  {
    uint64_t v33 = _swiftEmptySetSingleton;
  }

  swift_release_n(v8, 2LL);
  if (!v33[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_78;
  }

  unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v85 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a6 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v34)
  {
    int v35 = (uint64_t *)(a6 + 32);
    uint64_t v36 = (char *)&v89 + 8;
    uint64_t v37 = &v90;
    uint64_t v38 = (char *)&v90 + 8;
    uint64_t v39 = (uint64_t *)&unk_10010F898;
    do
    {
      uint64_t v40 = *v35;
      uint64_t v41 = *v35 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
      swift_beginAccess(v41, v87, 0LL, 0LL);
      __int128 v42 = *(_OWORD *)v41;
      __int128 v43 = *(_OWORD *)(v41 + 32);
      __int128 v90 = *(_OWORD *)(v41 + 16);
      __int128 v91 = v43;
      __int128 v89 = v42;
      sub_10004DFFC((uint64_t)v36, (uint64_t)&v99, v39);
      sub_10004DFFC((uint64_t)v37, (uint64_t)&v100, &qword_10010F8A0);
      sub_10004DFFC((uint64_t)v38, (uint64_t)&v101, &qword_10010F8A8);
      __int128 v102 = v91;
      swift_retain();
      sub_1000CF6E8(&v99);
      sub_1000CF6E8(&v100);
      sub_1000CF6E8(&v101);
      sub_1000CF710(&v102);
      sub_1000CF710((void *)&v102 + 1);
      LOBYTE(v41) = sub_100008664();
      sub_100049090(&v99);
      sub_100049090(&v100);
      sub_100049090(&v101);
      sub_10000B4BC(&v102);
      int64_t v44 = sub_10000B4BC((void *)&v102 + 1);
      if ((v41 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v44);
        unint64_t v45 = v38;
        uint64_t v46 = v37;
        unint64_t v47 = v36;
        uint64_t v48 = v39;
        uint64_t v49 = v30;
        uint64_t v50 = v85[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v50);
        uint64_t v51 = v50;
        uint64_t v30 = v49;
        uint64_t v39 = v48;
        uint64_t v36 = v47;
        uint64_t v37 = v46;
        uint64_t v38 = v45;
        uint64_t v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v40);
        specialized ContiguousArray._endMutation()(v52);
      }

      else
      {
        swift_release();
      }

      ++v35;
      --v34;
    }

    while (v34);
    unint64_t v8 = (unint64_t)v85;
    a6 = v80;
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if ((v8 & 0x8000000000000000LL) == 0 && (v8 & 0x4000000000000000LL) == 0)
  {
    uint64_t v53 = *(void *)(v8 + 16);
    swift_bridgeObjectRetain();
    if (!v53) {
      goto LABEL_43;
    }
    goto LABEL_31;
  }

void sub_1000C9914(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = (int *)type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v4 = *((void *)v101 - 1);
  uint64_t v5 = __chkstk_darwin(v101);
  uint64_t v7 = (uint64_t *)((char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v109 = (uint64_t *)((char *)&v90 - v9);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v90 - v10;
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v12 = a2 + 56;
  uint64_t v13 = -1LL << *(_BYTE *)(a2 + 32);
  uint64_t v14 = ~v13;
  if (-v13 < 64) {
    uint64_t v15 = ~(-1LL << -(char)v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & *(void *)(a2 + 56);
  int64_t v17 = (unint64_t)(63 - v13) >> 6;
  uint64_t v108 = a1 + 56;
  swift_bridgeObjectRetain();
  int64_t v18 = 0LL;
  uint64_t v98 = a2 + 56;
  uint64_t v97 = v14;
  int64_t v95 = v17;
LABEL_6:
  uint64_t v99 = v18;
  unint64_t v100 = v16;
  if (v16)
  {
    uint64_t v91 = (v16 - 1) & v16;
    unint64_t v19 = __clz(__rbit64(v16)) | (v18 << 6);
    int64_t v92 = v18;
  }

  else
  {
    int64_t v20 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_101;
    }
    if (v20 >= v17) {
      goto LABEL_96;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    int64_t v22 = v18 + 1;
    if (!v21)
    {
      int64_t v22 = v18 + 2;
      if (v18 + 2 >= v17) {
        goto LABEL_96;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v18 + 3;
        if (v18 + 3 >= v17) {
          goto LABEL_96;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v22);
        if (!v21)
        {
          uint64_t v23 = v18 + 4;
          if (v18 + 4 >= v17) {
            goto LABEL_96;
          }
          unint64_t v21 = *(void *)(v12 + 8 * v23);
          if (v21)
          {
            int64_t v22 = v18 + 4;
          }

          else
          {
            do
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1LL)) {
                goto LABEL_102;
              }
              if (v22 >= v17) {
                goto LABEL_96;
              }
              unint64_t v21 = *(void *)(v12 + 8 * v22);
              ++v23;
            }

            while (!v21);
          }
        }
      }
    }

    uint64_t v91 = (v21 - 1) & v21;
    int64_t v92 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  }

  uint64_t v96 = a2;
  uint64_t v24 = *(void *)(a2 + 48);
  uint64_t v94 = v4;
  uint64_t v107 = *(void *)(v4 + 72);
  sub_1000CF694(v24 + v107 * v19, (uint64_t)v11, type metadata accessor for ModelCatalogAsset);
  __int128 v93 = v11;
  sub_10000B7B0((uint64_t)v11, (uint64_t)v109);
  if (*(void *)(a1 + 16))
  {
    Hasher.init(_seed:)(v110, *(void *)(a1 + 40));
    sub_10004EA94((uint64_t)v110);
    Swift::Int v25 = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(a1 + 32);
    unint64_t v27 = v25 & ~v26;
    if (((*(void *)(v108 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) != 0)
    {
      uint64_t v105 = ~v26;
      uint64_t v106 = a1;
      do
      {
        sub_1000CF694(*(void *)(a1 + 48) + v27 * v107, (uint64_t)v7, type metadata accessor for ModelCatalogAsset);
        uint64_t v28 = v7[1];
        uint64_t v29 = v109[1];
        BOOL v30 = *v7 == *v109 && v28 == v29;
        if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v7, v28, *v109, v29, 0LL) & 1) == 0) {
          goto LABEL_94;
        }
        uint64_t v31 = (void *)v7[2];
        int v32 = (void *)v109[2];
        unint64_t v33 = v31[2];
        if (v33 != v32[2]) {
          goto LABEL_94;
        }
        if (v33) {
          BOOL v34 = v31 == v32;
        }
        else {
          BOOL v34 = 1;
        }
        if (v34) {
          goto LABEL_36;
        }
        uint64_t v39 = v31[4];
        uint64_t v40 = v31[5];
        uint64_t v41 = v32[4];
        uint64_t v42 = v32[5];
        BOOL v43 = v39 == v41 && v40 == v42;
        if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v41, v42, 0LL) & 1) == 0) {
          goto LABEL_94;
        }
        if (v33 == 1) {
          goto LABEL_36;
        }
        uint64_t v44 = v31[6];
        uint64_t v45 = v31[7];
        uint64_t v46 = v32[6];
        uint64_t v47 = v32[7];
        BOOL v48 = v44 == v46 && v45 == v47;
        if (!v48 && (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v46, v47, 0LL) & 1) == 0) {
          goto LABEL_94;
        }
        if (v33 == 2)
        {
LABEL_36:
          uint64_t v35 = v7[3];
          uint64_t v36 = v109[3];
          unint64_t v37 = *(void *)(v35 + 16);
          if (v37 == *(void *)(v36 + 16))
          {
            if (v37) {
              BOOL v38 = v35 == v36;
            }
            else {
              BOOL v38 = 1;
            }
            if (v38)
            {
LABEL_42:
              if ((static AssetCost.== infix(_:_:)((char *)v7 + v101[7], (char *)v109 + v101[7]) & 1) != 0
                && *((unsigned __int8 *)v7 + v101[8]) == *((unsigned __int8 *)v109 + v101[8])
                && *((unsigned __int8 *)v7 + v101[9]) == *((unsigned __int8 *)v109 + v101[9])
                && *((unsigned __int8 *)v7 + v101[10]) == *((unsigned __int8 *)v109 + v101[10]))
              {
                sub_1000CF6B8((uint64_t)v7, type metadata accessor for ModelCatalogAsset);
                sub_1000CF6B8((uint64_t)v109, type metadata accessor for ModelCatalogAsset);
                int64_t v18 = v92;
                unint64_t v16 = v91;
                a2 = v96;
                uint64_t v12 = v98;
                a1 = v106;
                uint64_t v4 = v94;
                uint64_t v11 = v93;
                int64_t v17 = v95;
                goto LABEL_6;
              }
            }

            else
            {
              uint64_t v57 = *(void *)(v35 + 32);
              uint64_t v58 = *(void *)(v35 + 40);
              uint64_t v59 = *(void *)(v35 + 48);
              uint64_t v60 = *(void *)(v35 + 56);
              int v61 = *(unsigned __int8 *)(v35 + 64);
              uint64_t v62 = *(void *)(v36 + 32);
              uint64_t v63 = *(void *)(v36 + 40);
              uint64_t v65 = *(void *)(v36 + 48);
              uint64_t v64 = *(void *)(v36 + 56);
              int v66 = *(unsigned __int8 *)(v36 + 64);
              if (v57 != v62 || v58 != v63)
              {
                int v68 = *(unsigned __int8 *)(v35 + 64);
                uint64_t v69 = *(void *)(v36 + 56);
                uint64_t v104 = *(void *)(v36 + 48);
                char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v62, v63, 0LL);
                uint64_t v65 = v104;
                uint64_t v64 = v69;
                int v61 = v68;
                if ((v70 & 1) == 0) {
                  goto LABEL_94;
                }
              }

              uint64_t v71 = 0LL;
              unint64_t v72 = 1LL;
              if (v60)
              {
LABEL_74:
                if (v64)
                {
                  if (v59 != v65 || v60 != v64)
                  {
                    uint64_t v74 = v59;
                    int v75 = v61;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v74, v60, v65, v64, 0LL) & 1) == 0
                      || ((v66 ^ v75) & 1) != 0)
                    {
                      goto LABEL_94;
                    }

                    goto LABEL_84;
                  }

                  goto LABEL_83;
                }
              }

              else
              {
                while (!v64)
                {
LABEL_83:
                  if (((v66 ^ v61) & 1) != 0) {
                    break;
                  }
LABEL_84:
                  if (v37 == v72) {
                    goto LABEL_42;
                  }
                  if (v72 >= v37)
                  {
                    __break(1u);
LABEL_99:
                    __break(1u);
LABEL_100:
                    __break(1u);
LABEL_101:
                    __break(1u);
LABEL_102:
                    __break(1u);
                    return;
                  }

                  if (v72 >= *(void *)(v36 + 16)) {
                    goto LABEL_99;
                  }
                  uint64_t v76 = *(void *)(v35 + v71 + 72);
                  uint64_t v77 = *(void *)(v35 + v71 + 80);
                  uint64_t v59 = *(void *)(v35 + v71 + 88);
                  uint64_t v60 = *(void *)(v35 + v71 + 96);
                  int v61 = *(unsigned __int8 *)(v35 + v71 + 104);
                  uint64_t v78 = *(void *)(v36 + v71 + 72);
                  uint64_t v79 = *(void *)(v36 + v71 + 80);
                  uint64_t v65 = *(void *)(v36 + v71 + 88);
                  uint64_t v64 = *(void *)(v36 + v71 + 96);
                  int v66 = *(unsigned __int8 *)(v36 + v71 + 104);
                  if (v76 != v78 || v77 != v79)
                  {
                    uint64_t v103 = *(void *)(v35 + v71 + 96);
                    uint64_t v104 = v71;
                    uint64_t v102 = v59;
                    uint64_t v81 = v36;
                    unint64_t v82 = v37;
                    uint64_t v83 = v7;
                    uint64_t v84 = v35;
                    int v85 = v66;
                    int v86 = v61;
                    uint64_t v87 = v64;
                    uint64_t v88 = v65;
                    char v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v78, v79, 0LL);
                    uint64_t v65 = v88;
                    uint64_t v64 = v87;
                    int v61 = v86;
                    int v66 = v85;
                    uint64_t v35 = v84;
                    uint64_t v7 = v83;
                    unint64_t v37 = v82;
                    uint64_t v36 = v81;
                    uint64_t v59 = v102;
                    uint64_t v60 = v103;
                    uint64_t v71 = v104;
                    if ((v89 & 1) == 0) {
                      break;
                    }
                  }

                  v71 += 40LL;
                  ++v72;
                  if (v60) {
                    goto LABEL_74;
                  }
                }
              }
            }
          }
        }

        else
        {
          uint64_t v49 = v31 + 9;
          uint64_t v50 = v32 + 9;
          unint64_t v51 = 2LL;
          while (1)
          {
            if (v51 >= v33) {
              goto LABEL_100;
            }
            uint64_t v52 = *(v49 - 1);
            uint64_t v53 = *v49;
            uint64_t v54 = *(v50 - 1);
            uint64_t v55 = *v50;
            BOOL v56 = v52 == v54 && v53 == v55;
            if (!v56 && (_stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v54, v55, 0LL) & 1) == 0) {
              break;
            }
            ++v51;
            v49 += 2;
            v50 += 2;
            if (v33 == v51) {
              goto LABEL_36;
            }
          }
        }

LABEL_94:
        sub_1000CF6B8((uint64_t)v7, type metadata accessor for ModelCatalogAsset);
        a1 = v106;
        unint64_t v27 = (v27 + 1) & v105;
      }

      while (((*(void *)(v108 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) != 0);
    }
  }

  sub_1000CF6B8((uint64_t)v109, type metadata accessor for ModelCatalogAsset);
  a2 = v96;
LABEL_96:
  sub_1000212AC(a2);
}

void sub_1000C9FA8()
{
  uint64_t v72 = v1;
  uint64_t v3 = v2;
  sub_100003B20(&qword_10010B208);
  sub_10000C240();
  __chkstk_darwin(v4);
  sub_1000499DC();
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  sub_10000C240();
  __chkstk_darwin(v6);
  sub_1000D0AAC(v7, v66);
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v8 = sub_10000BF6C();
  uint64_t v9 = sub_100003BA0(v8, (uint64_t)qword_10010F3D8);
  uint64_t v10 = *(void *)(v8 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v10 + 16))(v12);
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v13 = (void *)sub_10003D390();
  HIDWORD(v71) = static os_log_type_t.default.getter(v13);
  if (!os_log_type_enabled((os_log_t)v13, BYTE4(v71)))
  {
    sub_1000D1024();

    sub_100022CF4((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_31:
    uint64_t v60 = sub_100021FC8();
    sub_1000D0F00(v0, 1LL, v61, v60);
    sub_100021AD0(&qword_10010B3C8, type metadata accessor for RequestManager);
    uint64_t v63 = v62;
    uint64_t v64 = (void *)sub_100007460((uint64_t)&unk_100105658, 48LL);
    uint64_t v65 = v72;
    uint64_t v64[2] = v72;
    v64[3] = v63;
    v64[4] = v3;
    v64[5] = v65;
    sub_10000BD20(v65);
    sub_1000225FC();
    sub_100003854(v0, (uint64_t)&unk_10010F8F8, (uint64_t)v64);
    swift_release();
    sub_100007448();
    return;
  }

  int v68 = (os_log_s *)v13;
  uint64_t v69 = &v66;
  uint64_t v73 = v8;
  uint64_t v70 = v0;
  uint64_t v14 = (uint8_t *)sub_10000BCF4(12LL);
  uint64_t v66 = sub_10000BCF4(32LL);
  uint64_t v86 = v66;
  unint64_t v67 = v14;
  *(_DWORD *)uint64_t v14 = 136315138;
  uint64_t v15 = sub_1000BCAC4(v3);
  unint64_t v16 = (char *)_swiftEmptyArrayStorage;
  if (!v15)
  {
LABEL_30:
    uint64_t v53 = v67;
    uint64_t v54 = Array.description.getter(v16);
    uint64_t v56 = v55;
    sub_10000BD28();
    sub_100015EF8(v54, v56, &v86);
    uint64_t v80 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    sub_100022D34();
    sub_1000D1024();
    uint64_t v58 = v68;
    sub_100022210( (void *)&_mh_execute_header,  v68,  BYTE4(v71),  "Foreground requests are blocked from running; will preemptively cancel background requests %s",
      v53);
    uint64_t v59 = v66;
    sub_100021F38(v66);
    sub_10000BCC4(v59);
    sub_10000BCC4((uint64_t)v53);

    sub_100030250((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    uint64_t v0 = v70;
    goto LABEL_31;
  }

  uint64_t v17 = v15;
  int v85 = (char *)_swiftEmptyArrayStorage;
  sub_100016D94();
  unint64_t v76 = v3 & 0xC000000000000001LL;
  if ((v3 & 0xC000000000000001LL) != 0)
  {
    if (v3 < 0) {
      uint64_t v18 = v3;
    }
    else {
      uint64_t v18 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v19 = __CocoaSet.startIndex.getter(v18);
    char v21 = 1;
  }

  else
  {
    uint64_t v19 = sub_100020E24(v3);
    char v21 = v22 & 1;
  }

  uint64_t v82 = v19;
  uint64_t v83 = v20;
  LOBYTE(v8sub_100006F7C(v0 + 4) = v21;
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    uint64_t v23 = v3 & 0xFFFFFFFFFFFFFF8LL;
    if (v3 < 0) {
      uint64_t v23 = v3;
    }
    uint64_t v74 = v23;
    uint64_t v75 = v3;
    do
    {
      uint64_t v24 = v12;
      uint64_t v26 = v82;
      uint64_t v25 = v83;
      char v27 = v84;
      uint64_t v28 = sub_1000D0CA8();
      sub_1000CF218( v28,  v29,  v30,  v3,  (uint64_t)type metadata accessor for DaemonRequest,  (uint64_t)sub_1000D3C08,  (uint64_t)sub_1000D3B1C,  v31,  v66,  (uint64_t)v67,  (uint64_t)v68,  (uint64_t)v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81[0],  v81[1],  v81[2],  v82,  v83,  v84,  (uint64_t)v85);
      RequestMetadata.id.getter(v32);
      sub_10000C280();
      unint64_t v33 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
      {
        sub_100016D94();
        unint64_t v33 = v85;
      }

      unint64_t v34 = *((void *)v33 + 2);
      if (v34 >= *((void *)v33 + 3) >> 1)
      {
        sub_100016D94();
        unint64_t v33 = v85;
      }

      *((void *)v33 + 2) = v34 + 1;
      sub_100022C2C();
      (*(void (**)(char *, uint64_t))(v36 + 32))(&v33[v35 + *(void *)(v36 + 72) * v34], v79);
      if (v76)
      {
        uint64_t v3 = v75;
        if ((v27 & 1) == 0) {
          goto LABEL_33;
        }
        uint64_t v37 = __CocoaSet.Index.handleBitPattern.getter(v26, v25);
        if (v37) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v12 = v24;
        uint64_t v50 = sub_100003B20(&qword_10010E6F8);
        unint64_t v51 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(&v80, v50);
        __CocoaSet.formIndex(after:isUnique:)(v52, isUniquelyReferenced_nonNull_native, v74);
        v51(&v80, 0LL);
      }

      else
      {
        uint64_t v39 = sub_1000D0CA8();
        uint64_t v3 = v75;
        uint64_t v42 = sub_100020D3C(v39, v40, v41, v75);
        uint64_t v44 = v43;
        char v46 = v45;
        uint64_t v47 = sub_1000D0CA8();
        sub_10000B830(v47, v48, v49);
        uint64_t v82 = v42;
        uint64_t v83 = v44;
        LOBYTE(v8sub_100006F7C(v0 + 4) = v46 & 1;
        uint64_t v12 = v24;
      }

      --v17;
    }

    while (v17);
    sub_10000B830(v82, v83, v84);
    unint64_t v16 = v85;
    goto LABEL_30;
  }

  __break(1u);
LABEL_33:
  sub_100022024();
  __break(1u);
}

uint64_t sub_1000CA494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a4;
  *(void *)(v5 + 2sub_100006F7C(v0 + 4) = a5;
  return swift_task_switch(sub_1000CA4AC, a5, 0LL);
}

uint64_t sub_1000CA4AC()
{
  v0[4] = _OSActivity.__allocating_init(_:)("Cancelling preempted background requests", 40LL, 2LL);
  uint64_t v1 = unk_10010F914;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_10010F910 + dword_10010F910);
  sub_1000224B4();
  uint64_t v2 = (uint64_t **)swift_task_alloc(v1);
  v0[5] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_1000CA544;
  uint64_t v3 = sub_1000306EC(v0[2]);
  return v5(v3);
}

uint64_t sub_1000CA544()
{
  return sub_10000BD98();
}

uint64_t sub_1000CA588()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000CA5B4(uint64_t *a1, uint64_t a2)
{
  v2[3] = a2;
  uint64_t v4 = type metadata accessor for RequestCancellationReason(0LL);
  v2[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[5] = v5;
  v2[6] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003B20(&qword_10010B408);
  v2[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _WORD v2[8] = v7;
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  void v2[9] = v8;
  v2[10] = v9;
  return swift_task_switch(sub_1000CA648, 0LL, 0LL);
}

uint64_t sub_1000CA648()
{
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = sub_10000BF6C();
  uint64_t v3 = (os_log_s *)sub_100003BA0(v2, (uint64_t)qword_10010F3D8);
  uint64_t v4 = sub_10000BD20(v1);
  Logger.logObject.getter(v4);
  os_log_type_t v5 = sub_10000C108();
  BOOL v6 = sub_10003CEBC(v3);
  uint64_t v7 = v0[10];
  if (v6)
  {
    uint64_t v17 = v0[8];
    uint64_t v8 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v18 = sub_10000BCF4(32LL);
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v8 = 136315138;
    sub_1000D0A84();
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    sub_1000D0228(v9);
    uint64_t v10 = sub_1000D0218(v17);
    sub_1000D0044(v10, v11, &v19);
    v0[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    sub_10000C000();
    sub_10000BCDC(v7);
    sub_100022210((void *)&_mh_execute_header, v3, v5, "Cancelling request %s due to pending foreground request(s)", v8);
    sub_100021F38(v18);
    sub_10000BCC4(v18);
    sub_10000BCC4((uint64_t)v8);
  }

  else
  {
    sub_10000BCDC(v0[10]);
  }

  (*(void (**)(void, void, void))(v0[5] + 104LL))( v0[6],  enum case for RequestCancellationReason.requestPreemption(_:),  v0[4]);
  uint64_t v13 = (void *)swift_task_alloc(dword_10010FBC4);
  v0[11] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000CA848;
  uint64_t v14 = sub_1000306EC(v0[3]);
  return sub_1000D2DDC(v14, v15);
}

uint64_t sub_1000CA848()
{
  uint64_t v2 = *(void *)(v1 + 40);
  sub_10000BCE4(*(void *)(v1 + 88));
  sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10000C140();
  sub_10000BFE4();
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000CA89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  void v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[4] = v6;
  void v4[5] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000CA900, 0LL, 0LL);
}

uint64_t sub_1000CA900()
{
  uint64_t v2 = (void *)sub_100021BB8(*(void *)(v0 + 48));
  *(void *)(v1 + 48) = v2;
  uint64_t v3 = sub_1000D0530(v2, (uint64_t)sub_1000CFC80);
  return sub_1000D03FC(v3, v4, v5, v6);
}

uint64_t sub_1000CA94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  void v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[4] = v6;
  void v4[5] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000CA9B0, 0LL, 0LL);
}

uint64_t sub_1000CA9B0()
{
  uint64_t v2 = (void *)sub_100021BB8(*(void *)(v0 + 48));
  *(void *)(v1 + 48) = v2;
  uint64_t v3 = sub_1000D0530(v2, (uint64_t)sub_1000CA9FC);
  return sub_1000D03FC(v3, v4, v5, v6);
}

uint64_t sub_1000CA9FC()
{
  uint64_t v1 = *((void *)*v0 + 4);
  sub_10000BCE4(*((void *)*v0 + 6));
  sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10000C140();
  return sub_10000BD30(v0[1]);
}

uint64_t sub_1000CAA44(uint64_t a1, int *a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = swift_task_alloc(a2[1]);
  uint64_t v5 = (void *)sub_100007524(v4);
  *uint64_t v5 = v2;
  v5[1] = sub_1000CFC64;
  return v7(a1);
}

uint64_t sub_1000CAAA4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000CAB08;
  return v6(a1);
}

uint64_t sub_1000CAB08()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v1);
}

unint64_t sub_1000CAB40(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000CAB64(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_100021EB0();
    uint64_t v3 = sub_100022B44();
    sub_10000C1E0();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v16 = *v1;
    }
    else {
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100022418();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v16);
    sub_10000C1E8();
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    sub_100022418();
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t result = sub_1000CDF84( v8 + 8LL * *(void *)(v8 + 16) + 32,  (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16),  a1,  (void (*)(uint64_t, void, uint64_t))sub_100015BE0,  &qword_10010F800,  &qword_10010F7F8,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000CE154);
    if (v11 >= v3) {
      break;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    sub_100022418();
    uint64_t v9 = sub_1000D10D0();
    sub_10000C1E8();
  }

  if (v11 < 1) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_20:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

void sub_1000CAD14()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000D10F8() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_1000B278C();
    uint64_t v2 = v6;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_1000D1168();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100015B48(v0 + 32, v3, v2 + 16 * v7 + 32);
  if (!v3)
  {
LABEL_11:
    sub_10000C1E0();
    *uint64_t v1 = v2;
    sub_1000496F8();
    return;
  }

  uint64_t v9 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v9, v3);
  uint64_t v10 = v9 + v3;
  if (!v5)
  {
    *(void *)(v2 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v10;
    goto LABEL_11;
  }

void sub_1000CADBC()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000D10F8() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_1000B2AF4();
    uint64_t v2 = v6;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_1000D1168();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100015D24(v0 + 32, v3);
  if (!v3)
  {
LABEL_11:
    sub_10000C1E0();
    *uint64_t v1 = v2;
    sub_1000496F8();
    return;
  }

  uint64_t v8 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v8, v3);
  uint64_t v9 = v8 + v3;
  if (!v5)
  {
    *(void *)(v2 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v9;
    goto LABEL_11;
  }

void sub_1000CAE68()
{
}

void sub_1000CAE8C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_100003B20(&qword_10010CFB8);
    uint64_t v3 = (const void *)sub_100007460(v2, 8 * v1 + 32);
    sub_1000CFFFC(v3);
    sub_1000D0DF8(v4);
    sub_1000CE318(v5, v6, v7, v8);
    sub_1000225A4();
    sub_1000CFF1C();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1000CFE04();
}

void *sub_1000CAF08(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return _swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaSet.count.getter(a1);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100003B20(&qword_10010CFB8);
    uint64_t v4 = (void *)sub_100007460(v3, 8 * v2 + 32);
    sub_1000CFFFC(v4);
    void v4[2] = v2;
    void v4[3] = v5;
  }

  sub_100022944();
  uint64_t v6 = sub_1000CE7F8((uint64_t)&v8, v4 + 4, v2, v1);
  uint64_t result = (void *)sub_1000212AC(v8);
  if (v6 == v2) {
    return v4;
  }
  __break(1u);
  return result;
}

void sub_1000CAFE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (!v29) {
    goto LABEL_9;
  }
  uint64_t v30 = v27;
  uint64_t v31 = sub_100003B20(&qword_10010B7B8);
  uint64_t v32 = *(void *)(type metadata accessor for Assertion.DaemonRep(0LL) - 8);
  uint64_t v33 = *(void *)(v32 + 72);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = (v34 + 32) & ~v34;
  uint64_t v36 = (void *)swift_allocObject(v31, v35 + v33 * v29, v34 | 7);
  size_t v37 = j__malloc_size(v36);
  if (v33)
  {
    BOOL v38 = v37 - v35 == 0x8000000000000000LL && v33 == -1;
    if (!v38)
    {
      uint64_t v36[2] = v29;
      uint64_t v36[3] = 2 * ((uint64_t)(v37 - v35) / v33);
      sub_1000CEAF4(&a10, (uint64_t)v36 + v35, v29, v30);
      sub_100022944();
      sub_1000CFF1C();
      if (!v38) {
        __break(1u);
      }
LABEL_9:
      sub_1000CFE04();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_1000CB0B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (!v7) {
    goto LABEL_13;
  }
  sub_1000D0D50();
  if (v8 ^ v9 | v17) {
    goto LABEL_11;
  }
  uint64_t v10 = sub_100003B20(&qword_10010BA38);
  uint64_t v11 = *(void *)(sub_1000306E4() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v7, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_15;
  }
  BOOL v17 = v16 - v14 == 0x8000000000000000LL && v12 == -1;
  if (v17) {
    goto LABEL_16;
  }
  v15[2] = v7;
  void v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_11:
  if (v6 != v4)
  {
    sub_1000306E4();
    sub_1000D1060();
    sub_100015BEC(v5 + *(void *)(v18 + 72) * v4, v7);
LABEL_13:
    sub_100022108();
    return;
  }

void sub_1000CB1A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v7) {
      goto LABEL_9;
    }
    sub_1000D0D50();
    if (v9 ^ v10 | v8)
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v11 = sub_100003B20(&qword_10010B810);
      uint64_t v12 = (void *)sub_100007460(v11, 40 * v7 + 32);
      size_t v13 = j__malloc_size(v12);
      v12[2] = v7;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
    }

    if (v6 != v4)
    {
      sub_100015BF8(v5 + 40 * v4, v7, (unint64_t)(v12 + 4));
LABEL_9:
      sub_1000496F8();
      return;
    }
  }

  __break(1u);
}

void sub_1000CB24C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_100003B20(&qword_10010B718);
    uint64_t v3 = (const void *)sub_100007460(v2, 16 * v1 + 32);
    size_t v4 = j__malloc_size(v3);
    sub_1000D0DF8(2 * ((uint64_t)(v4 - 32) / 16));
    sub_1000CEDBC(v5, v6, v7, v8);
    sub_1000225A4();
    sub_1000CFF1C();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1000CFE04();
}

void sub_1000CB2D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    uint64_t v30 = v27;
    uint64_t v31 = sub_100003B20(&qword_10010D330);
    uint64_t v32 = (void *)sub_100007460(v31, 40 * v29 + 32);
    size_t v33 = j__malloc_size(v32);
    v32[2] = v29;
    v32[3] = 2 * ((uint64_t)(v33 - 32) / 40);
    sub_1000CEFB8((uint64_t)&a10, (uint64_t)(v32 + 4), v29, v30);
    sub_100022944();
    sub_1000CFF1C();
    if (!v34) {
      __break(1u);
    }
  }

  sub_1000CFE04();
}

void sub_1000CB374()
{
}

void sub_1000CB398()
{
  if (v5 >> 62) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v6)
  {
    if (v6 <= 0)
    {
      uint64_t v8 = &_swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v7 = sub_100003B20(&qword_10010CFB8);
      uint64_t v8 = (void *)sub_100007460(v7, 8 * v6 + 32);
      sub_1000CFFFC(v8);
      void v8[2] = v6;
      v8[3] = v9;
    }

    sub_100083500();
    uint64_t v10 = sub_1000CDF84((uint64_t)(v8 + 4), v6, v4, v3, v2, v1, v0);
    uint64_t v0 = v11;
    swift_bridgeObjectRelease(v10);
    __break(1u);
LABEL_8:
    sub_100083500();
    uint64_t v6 = sub_1000D10D0();
    sub_100022D34();
  }

  sub_100022108();
}

void sub_1000CB470(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    sub_1000D0D50();
    if (!(v9 ^ v10 | v8))
    {
      uint64_t v11 = sub_100003B20(&qword_10010CFB8);
      uint64_t v12 = (void *)sub_100007460(v11, 8 * v7 + 32);
      sub_1000CFFFC(v12);
      v12[2] = v7;
      v12[3] = v13;
    }

    if (v6 != v4)
    {
      sub_100015DC4(v5 + 8 * v4, v7);
LABEL_8:
      sub_1000496F8();
      return;
    }
  }

  __break(1u);
}

#error "1000CB610: call analysis failed (funcsize=74)"
#error "1000CB750: call analysis failed (funcsize=75)"
#error "1000CB88C: call analysis failed (funcsize=74)"
uint64_t sub_1000CB8BC(Swift::UInt a1)
{
  void *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void v14[9];
  uint64_t v3 = *v1;
  Hasher.init(_seed:)(v14, *(void *)(*v1 + 40LL));
  Hasher._combine(_:)(a1);
  uint64_t v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 16 * v6) != a1)
  {
    char v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v7 + 16 * v6) != a1);
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  char v10 = *v1;
  v14[0] = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001D5EC();
    char v10 = v14[0];
  }

  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 16 * v6);
  sub_1000CBF30(v6);
  uint64_t v12 = *v1;
  *uint64_t v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

void sub_1000CB9F0()
{
}

void sub_1000CBA14()
{
}

void sub_1000CBA38()
{
  char v34 = v2;
  BOOL v38 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v8 = v1;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = sub_1000224D0(v9, v6);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000499DC();
  uint64_t v15 = *v1;
  uint64_t v16 = *(void *)(*v1 + 40);
  uint64_t v39 = v7;
  sub_1000071C0(v5, v7);
  uint64_t v18 = v17;
  sub_10002289C();
  uint64_t v37 = v10;
  uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v13, v18);
  uint64_t v20 = -1LL << *(_BYTE *)(v15 + 32);
  unint64_t v21 = v19 & ~v20;
  if (((*(void *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
  {
    size_t v33 = v8;
    uint64_t v35 = v12;
    uint64_t v36 = v14;
    uint64_t v22 = ~v20;
    uint64_t v23 = *(void *)(v14 + 72);
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
    while (1)
    {
      unint64_t v25 = v23 * v21;
      v24(v0, *(void *)(v15 + 48) + v23 * v21, v13);
      sub_1000071C0(v38, v39);
      char v28 = sub_1000225F0(v0, v37, v27, v26);
      sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
      if ((v28 & 1) != 0) {
        break;
      }
      unint64_t v21 = (v21 + 1) & v22;
      if (((*(void *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0)
      {
        sub_10000C000();
        uint64_t v29 = 1LL;
        uint64_t v12 = v35;
        goto LABEL_10;
      }
    }

    sub_10000C000();
    char v30 = sub_1000D0CF0();
    uint64_t v31 = *v33;
    uint64_t v40 = *v33;
    *size_t v33 = 0x8000000000000000LL;
    if ((v30 & 1) == 0)
    {
      v34();
      uint64_t v31 = v40;
    }

    uint64_t v12 = v35;
    sub_100022218(v35, *(void *)(v31 + 48) + v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
    sub_1000CC0DC();
    uint64_t v32 = *v33;
    *size_t v33 = v40;
    swift_bridgeObjectRelease(v32);
    uint64_t v29 = 0LL;
  }

  else
  {
    sub_10000C000();
    uint64_t v29 = 1LL;
  }

uint64_t sub_1000CBC20( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(void *), void (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v13 = __CocoaSet.count.getter(a1);
  uint64_t v14 = swift_unknownObjectRetain(a1);
  uint64_t v15 = a3(v14, v13);
  uint64_t v30 = v15;
  Hasher.init(_seed:)(v29, *(void *)(v15 + 40));
  sub_10000C0A0();
  a4(v29);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = v16 & ~v17;
  sub_1000D0EE0();
  if ((v19 & 1) != 0)
  {
    a5(0LL);
    uint64_t v20 = sub_100083778();
    char v21 = sub_1000D0E8C(v20);
    sub_100030B98();
    if ((v21 & 1) != 0)
    {
LABEL_6:
      sub_1000304F8();
      uint64_t v26 = *(void *)(*(void *)(v15 + 48) + 8 * v18);
      sub_1000CBD94();
      if ((a6(a2, v26) & 1) != 0)
      {
        *char v28 = v30;
        return v26;
      }

      __break(1u);
    }

    else
    {
      uint64_t v22 = ~v17;
      while (1)
      {
        uint64_t v18 = (v18 + 1) & v22;
        sub_1000D0EE0();
        if ((v23 & 1) == 0) {
          break;
        }
        uint64_t v24 = sub_100083778();
        char v25 = sub_1000D0E8C(v24);
        sub_100030B98();
        if ((v25 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    sub_1000304F8();
    __break(1u);
  }

  uint64_t result = sub_1000304F8();
  __break(1u);
  return result;
}

void sub_1000CBD94()
{
  uint64_t v26 = v1;
  uint64_t v27 = v4;
  int64_t v5 = v2;
  uint64_t v6 = *v0;
  uint64_t v7 = *v0 + 56;
  uint64_t v8 = -1LL << *(_BYTE *)(*v0 + 32);
  unint64_t v9 = (v2 + 1) & ~v8;
  if (((1LL << v9) & *(void *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = v3;
    uint64_t v11 = ~v8;
    sub_1000224B4();
    uint64_t v12 = _HashTable.previousHole(before:)(v5, v7, v11);
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1LL << v9)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      do
      {
        Hasher.init(_seed:)(v25, *(void *)(v6 + 40));
        sub_10000C20C();
        v10(v25);
        Swift::Int v14 = sub_100022308();
        sub_100030B78();
        Swift::Int v15 = v14 & v11;
        if (v5 >= (uint64_t)v13)
        {
          if (v15 >= v13 && v5 >= v15)
          {
LABEL_15:
            uint64_t v18 = *(void *)(v6 + 48);
            char v19 = (void *)(v18 + 8 * v5);
            uint64_t v20 = (void *)(v18 + 8 * v9);
            BOOL v21 = v5 != v9 || v19 >= v20 + 1;
            int64_t v5 = v9;
            if (v21)
            {
              *char v19 = *v20;
              int64_t v5 = v9;
            }
          }
        }

        else if (v15 >= v13 || v5 >= v15)
        {
          goto LABEL_15;
        }

        unint64_t v9 = (v9 + 1) & v11;
      }

      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
    }

    *(void *)(v7 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v5) - 1;
    sub_100021DDC();
  }

  else
  {
    *(void *)(v7 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
  }

  uint64_t v22 = *(void *)(v6 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v24;
    ++*(_DWORD *)(v6 + 36);
  }

unint64_t sub_1000CBF30(unint64_t result)
{
  Swift::Int v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = 16 * v6;
        Swift::UInt v11 = *(void *)(*(void *)(v3 + 48) + 16 * v6);
        Hasher.init(_seed:)(v22, *(void *)(v3 + 40));
        Hasher._combine(_:)(v11);
        Swift::Int v12 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v3 + 48);
            Swift::Int v16 = (_OWORD *)(v15 + 16 * v2);
            uint64_t v17 = (_OWORD *)(v15 + v10);
            BOOL v18 = 16 * v2 != v10 || v16 >= v17 + 1;
            Swift::Int v2 = v6;
            if (v18)
            {
              *Swift::Int v16 = *v17;
              Swift::Int v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void sub_1000CC0DC()
{
  uint64_t v35 = v2;
  uint64_t v36 = v3;
  int64_t v5 = v4;
  uint64_t v6 = sub_1000224D0(v4, v2);
  uint64_t v37 = *(void *)(v6 - 8);
  sub_10000C240();
  __chkstk_darwin(v7);
  sub_100022990();
  uint64_t v8 = *v0;
  uint64_t v9 = *v0 + 56;
  uint64_t v10 = -1LL << *(_BYTE *)(*v0 + 32);
  unint64_t v11 = (v5 + 1) & ~v10;
  if (((1LL << v11) & *(void *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    size_t v33 = v0;
    uint64_t v12 = ~v10;
    sub_1000837AC();
    uint64_t v13 = _HashTable.previousHole(before:)(v5, v9, v12);
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1LL << v11)) != 0)
    {
      uint64_t v14 = (v13 + 1) & v12;
      uint64_t v38 = *(void *)(v37 + 72);
      char v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16);
      while (1)
      {
        uint64_t v15 = v9;
        int64_t v16 = v38 * v11;
        v34(v1, *(void *)(v8 + 48) + v38 * v11, v6);
        unint64_t v17 = v14;
        uint64_t v18 = *(void *)(v8 + 40);
        sub_1000071C0(v36, v35);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v6, v19);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v1, v6);
        uint64_t v21 = v20 & v12;
        uint64_t v14 = v17;
        if (v5 >= (uint64_t)v17)
        {
          if (v21 < v17 || v5 < v21) {
            goto LABEL_24;
          }
        }

        else if (v21 < v17 && v5 < v21)
        {
          goto LABEL_24;
        }

        uint64_t v24 = *(void *)(v8 + 48);
        int64_t v25 = v38 * v5;
        unint64_t v26 = v24 + v38 * v5;
        unint64_t v27 = v24 + v16 + v38;
        if (v38 * v5 < v16 || v26 >= v27) {
          break;
        }
        int64_t v5 = v11;
        if (v25 != v16)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_23;
        }

void sub_1000CC31C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) < a1)
  {
    __break(1u);
  }

  else if ((a1 & 0x8000000000000000LL) == 0)
  {
    sub_1000306E4();
    sub_100022C2C();
    sub_100022944();
    sub_10004E1F0();
    return;
  }

  __break(1u);
}

void sub_1000CC380(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) < a1)
  {
    __break(1u);
  }

  else if ((a1 & 0x8000000000000000LL) == 0)
  {
    swift_bridgeObjectRetain(a2);
    sub_10004E1F0();
    return;
  }

  __break(1u);
}

uint64_t sub_1000CC3D4(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }

  else if ((result & 0x8000000000000000LL) == 0)
  {
    type metadata accessor for UUID(0LL);
    return swift_retain(a2);
  }

  __break(1u);
  return result;
}

unint64_t sub_1000CC44C(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(a2 + 16) > result)
  {
    return swift_retain(*(void *)(a2 + 8 * result + 32));
  }

  __break(1u);
  return result;
}

void *sub_1000CC470( void *(*a1)(uint64_t *__return_ptr, uint64_t, void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t result = a1(&v8, a3 + ((v6 + 32) & ~v6), *(void *)(a3 + 16));
  if (!v3) {
    return (void *)v8;
  }
  return result;
}

void sub_1000CC4EC()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000306E4();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10003D2C8();
  uint64_t v11 = *v4;
  sub_100021AD0(&qword_10010DC18, v12);
  dispatch thunk of Hashable._rawHashValue(seed:)(v11, v9, v13);
  sub_1000D07F4();
  if (v16)
  {
    __break(1u);
  }

  else
  {
    uint64_t v39 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v14, v4, v2);
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashTable.BucketIterator.currentValue.getter)( v39,  v17,  v18,  v19,  v20,  v21,  v22,  v23);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = *(void *)(v10 + 72);
      unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      do
      {
        v27(v0, v6 + v26 * v24, v9);
        sub_100021AD0( &qword_10010DC10,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v0, v8, v9, v28);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v9);
        if ((v29 & 1) != 0) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashTable.BucketIterator.currentValue.getter)( v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37);
      }

      while ((v38 & 1) == 0);
    }
  }

void sub_1000CC6A4( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (v12)
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = sub_1000D08F8(v10, v11);
    uint64_t v21 = sub_1000D0804( v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v51,  v55,  v59,  v63,  v66,  v69,  v71,  v74,  v76,  v79,  v80,  v81,  v82,  v83,  *((uint64_t *)&v83 + 1),  v84);
    sub_1000D0690( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v52,  v56,  v60,  v64,  v67,  v70,  v72,  v75,  v77,  v79,  v80,  v81,  v82,  v83);
    if ((v29 & 1) == 0)
    {
      uint64_t v30 = *(void *)v9;
      uint64_t v31 = *(void *)(v9 + 8);
      do
      {
        uint64_t v32 = v8 + 40 * v21;
        uint64_t v33 = *(void *)(v32 + 8);
        uint64_t v35 = *(void *)(v32 + 16);
        uint64_t v34 = *(void *)(v32 + 24);
        int v36 = *(unsigned __int8 *)(v32 + 32);
        BOOL v37 = *(void *)v32 == v30 && v33 == v31;
        if (v37 || (sub_100021EB8(*(void *)v32, v33, v30, v31) & 1) != 0)
        {
          uint64_t v38 = *(void *)(v9 + 24);
          if (v34)
          {
            if (v38)
            {
              uint64_t v39 = *(void *)(v9 + 16);
              BOOL v40 = v35 == v39 && v34 == v38;
              if (v40 || (sub_100021EB8(v35, v34, v39, v38) & 1) != 0)
              {
LABEL_18:
                if (v36 == (*(_BYTE *)(v9 + 32) & 1)) {
                  return;
                }
              }
            }
          }

          else if (!v38)
          {
            goto LABEL_18;
          }
        }

        _HashTable.BucketIterator.advance()();
        uint64_t v21 = sub_1000D029C( v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v53,  v57,  v61,  v68,  v73,  v78,  v79,  v80,  v81,  v82,  v83,  *((uint64_t *)&v83 + 1),  v84);
      }

      while ((v49 & 1) == 0);
    }
  }

uint64_t sub_1000CC7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a4;
  sub_100021AD0(&qword_10010B7F0, v14);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v9, v15);
  uint64_t v17 = 1LL << *a4;
  BOOL v18 = __OFSUB__(v17, 1LL);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = v19 & result;
    uint64_t v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & result, a4, a5);
    *(void *)&__int128 v58 = a4;
    *((void *)&v58 + 1) = a5;
    *(void *)&__int128 v59 = v20;
    *((void *)&v59 + 1) = v21;
    *(void *)&__int128 v60 = v22;
    *((void *)&v60 + 1) = v23;
    char v61 = 0;
    uint64_t v29 = _HashTable.BucketIterator.currentValue.getter( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v44,  v45,  v46,  *((void *)&v46 + 1),  v47,  *((void *)&v47 + 1),  v48,  *((void *)&v48 + 1),  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56);
    __int128 v46 = v58;
    __int128 v47 = v59;
    __int128 v48 = v60;
    LOBYTE(v49) = v61;
    if ((v30 & 1) == 0)
    {
      uint64_t v31 = *(void *)(v10 + 72);
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      do
      {
        v32(v12, a2 + v31 * v29, v9);
        sub_100021AD0(&qword_10010B7F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v12, a1, v9, v33);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        if ((v34 & 1) != 0) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        char v57 = v49;
        uint64_t v29 = _HashTable.BucketIterator.currentValue.getter( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v44,  v45,  v46,  *((void *)&v46 + 1),  v47,  *((void *)&v47 + 1),  v48,  *((void *)&v48 + 1),  v49,  v50,  v46,  *((void *)&v46 + 1),  v47,  *((void *)&v47 + 1),  v48,  *((void *)&v48 + 1));
      }

      while ((v43 & 1) == 0);
    }

    return v29;
  }

  return result;
}

void sub_1000CC9A0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (v10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = sub_1000D08F8(v8, v9);
    uint64_t v19 = sub_1000D0804( v11,  v12,  v13,  v14,  v15,  v16,  v17,  v18,  v40,  v44,  v48,  v52,  v55,  v58,  v60,  v63,  v65,  v68,  v69,  v70,  v71,  v72,  *((uint64_t *)&v72 + 1),  v73);
    sub_1000D0690( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v41,  v45,  v49,  v53,  v56,  v59,  v61,  v64,  v66,  v68,  v69,  v70,  v71,  v72);
    if ((v27 & 1) == 0)
    {
      sub_100022DB0();
      sub_10000C0F0();
      char v28 = sub_1000D1104();
      sub_1000228B4();
      if ((v28 & 1) == 0)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          sub_1000D029C( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v42,  v46,  v50,  v57,  v62,  v67,  v68,  v69,  v70,  v71,  v72,  *((uint64_t *)&v72 + 1),  v73);
          if ((v37 & 1) != 0) {
            break;
          }
          sub_10000C0F0();
          char v38 = sub_1000D1104();
          sub_1000228B4();
        }

        while ((v38 & 1) == 0);
      }
    }
  }

void sub_1000CCA88()
{
  if (*v1)
  {
    _HashTable.copy()();
    sub_1000D0B20();
    *uint64_t v1 = v0;
LABEL_5:
    sub_1000075C0();
    return;
  }

  __break(1u);
}

void sub_1000CCAC4()
{
}

void sub_1000CCAD0()
{
  uint64_t v2 = sub_1000D0614();
  sub_1000CCBB4(v2, v3, v4, v5, v6, v7);
  sub_1000D0B20();
  *uint64_t v1 = v0;
  sub_1000075C0();
}

void sub_1000CCAFC()
{
}

void sub_1000CCB08()
{
  uint64_t v2 = sub_1000D0614();
  sub_1000CCB38(v2, v3, v4, v5, v6);
  sub_1000D0B20();
  *uint64_t v1 = v0;
  sub_1000075C0();
}

void sub_1000CCB2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000CCB38( uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = static _HashTable.scale(forCapacity:)(*(void *)(a1 + 16));
  if ((a3 & 1) != 0) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = a2;
  }
  if (v11 <= v10) {
    uint64_t v11 = v10;
  }
  if (v11 <= a4) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = v11;
  }
  if (v12 >= 5)
  {
    uint64_t v13 = _HashTable.init(scale:reservedScale:)();
    a5(a1, v13 + 16, v13 + 32);
  }

  sub_1000496F8();
}

void sub_1000CCBB4( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6)
{
  uint64_t v12 = static _HashTable.scale(forCapacity:)(*(void *)(a1 + 16));
  if ((a3 & 1) != 0) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = a2;
  }
  if (v13 <= v12) {
    uint64_t v13 = v12;
  }
  if (v13 <= a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14 >= 5)
  {
    uint64_t v15 = _HashTable.init(scale:reservedScale:)();
    sub_1000CCDD0(a1, (void *)(v15 + 16), v15 + 32, a5, a6);
  }

  sub_100022108();
}

void sub_1000CCC48(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

Swift::Int sub_1000CCC54(Swift::Int result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = 0LL;
    Swift::Int v22 = result + 32;
    while (1)
    {
      Swift::Int v7 = v22 + 40 * v6;
      uint64_t v8 = *(void *)v7;
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v11 = *(void *)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 24);
      Swift::UInt8 v12 = *(_BYTE *)(v7 + 32);
      Hasher.init(_seed:)(v23, *a2);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(v23, v8, v9);
      if (v10)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v10);
        String.hash(into:)(v23, v11, v10);
        swift_bridgeObjectRelease(v10);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      Hasher._combine(_:)(v12);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = 1LL << *a2;
      BOOL v14 = __OFSUB__(v13, 1LL);
      uint64_t v15 = v13 - 1;
      if (v14) {
        break;
      }
      Swift::Int v16 = v15 & result;
      uint64_t v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & result, a2, a3);
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
      v23[0] = a2;
      v23[1] = a3;
      v23[2] = v16;
      uint64_t v24 = v17;
      uint64_t v25 = v19;
      uint64_t v26 = v21;
      char v27 = 0;
      while (v24)
        _HashTable.BucketIterator.advance()();
      uint64_t result = _HashTable.BucketIterator.currentValue.setter(v6++, 0LL);
      if (v6 == v3) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

void sub_1000CCDD0( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v9 = a4(0LL);
    sub_1000D1060();
    sub_100021AD0(a5, a4);
    uint64_t v11 = v10;
    uint64_t v12 = 0LL;
    while (1)
    {
      dispatch thunk of Hashable._rawHashValue(seed:)(*a2, v9, v11);
      sub_1000D07F4();
      if (v13) {
        break;
      }
      sub_1000D1110();
      if (_HashTable.UnsafeHandle._startIterator(bucket:)(v14, v15, v16))
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }

      _HashTable.BucketIterator.currentValue.setter(v12++, 0LL);
      if (v12 == v5) {
        return;
      }
    }

    __break(1u);
  }

Swift::Int sub_1000CCED8(Swift::Int result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = 0LL;
    Swift::Int v7 = result + 32;
    while (1)
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      Hasher.init(_seed:)(v18, *a2);
      swift_retain();
      sub_100091270((uint64_t)v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v9 = 1LL << *a2;
      BOOL v10 = __OFSUB__(v9, 1LL);
      uint64_t v11 = v9 - 1;
      if (v10) {
        break;
      }
      Swift::Int v12 = v11 & result;
      uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & result, a2, a3);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      swift_release(v8);
      v18[0] = a2;
      v18[1] = a3;
      v18[2] = v12;
      uint64_t v19 = v13;
      uint64_t v20 = v15;
      uint64_t v21 = v17;
      char v22 = 0;
      while (v19)
        _HashTable.BucketIterator.advance()();
      uint64_t result = _HashTable.BucketIterator.currentValue.setter(v6++, 0LL);
      if (v6 == v3) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

void sub_1000CCFE0()
{
}

void sub_1000CD004(__int128 *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __int128 v19 = *a1;
  sub_10004DFFC((uint64_t)(a1 + 1), (uint64_t)v18, &qword_10010DC20);
  uint64_t v8 = v2[1];
  uint64_t v6 = v2 + 1;
  uint64_t v7 = v8;
  sub_100082A94((uint64_t)&v19);
  sub_100082A94((uint64_t)v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *uint64_t v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100016C44(0LL, *(void *)(v7 + 16) + 1LL, 1);
    uint64_t v7 = *v6;
  }

  unint64_t v11 = *(void *)(v7 + 16);
  unint64_t v10 = *(void *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    sub_100016C44((char *)(v10 > 1), v11 + 1, 1);
    uint64_t v7 = *v6;
  }

  *(void *)(v7 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v11 + 1;
  uint64_t v12 = v7 + 40 * v11;
  __int128 v13 = *a1;
  __int128 v14 = a1[1];
  *(_BYTE *)(v12 + 6sub_100006F7C(v0 + 4) = *((_BYTE *)a1 + 32);
  *(_OWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 48) = v14;
  v3[1] = v7;
  unint64_t v15 = *(void *)(v7 + 16);
  uint64_t v16 = *v3;
  if (!*v3)
  {
    if (v15 <= 0xF) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }

  sub_10002FFE4(v16 + 16, (uint64_t)v17);
  if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v16 + 16) & 0x3FLL) < (uint64_t)v15)
  {
    if (v15 <= 0xF && (*(void *)(v16 + 24) & 0x3FLL) == 0)
    {
      sub_10000C1F0();
      *uint64_t v3 = 0LL;
LABEL_14:
      sub_1000D08B4();
      return;
    }

void sub_1000CD170()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v24 = v8;
  uint64_t v11 = sub_1000D10AC(v9, v8, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  __int128 v14 = (char *)&v23 - v13;
  (*(void (**)(char *, void *, uint64_t))(v12 + 16))((char *)&v23 - v13, v0, v11);
  unint64_t v15 = v0 + 1;
  uint64_t v16 = v7[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *unint64_t v15 = v16;
  uint64_t v25 = v4;
  uint64_t v26 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6(0, *(void *)(v16 + 16) + 1LL, 1LL);
    uint64_t v16 = *v15;
  }

  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v18 = *(void *)(v16 + 24);
  if (v19 >= v18 >> 1)
  {
    v6(v18 > 1, v19 + 1, 1LL);
    uint64_t v16 = *v15;
  }

  *(void *)(v16 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v19 + 1;
  sub_100022C2C();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))( v16 + v20 + *(void *)(v12 + 72) * v19,  v14,  v11);
  v7[1] = v16;
  unint64_t v21 = *(void *)(v16 + 16);
  uint64_t v22 = *v7;
  if (!*v7)
  {
    if (v21 <= 0xF) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }

  sub_10002FFE4(v22 + 16, (uint64_t)&v27);
  if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v22 + 16) & 0x3FLL) < (uint64_t)v21)
  {
    if (v21 <= 0xF && (*(void *)(v22 + 24) & 0x3FLL) == 0)
    {
      sub_100030B78();
      *uint64_t v7 = 0LL;
LABEL_14:
      sub_100007448();
      return;
    }

uint64_t sub_1000CD318(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a4 + 8) + 16LL) + ~((uint64_t)a1[1] >> 6);
  return _HashTable.UnsafeHandle.subscript.setter((-1LL << *a1) ^ ~(((v4 >> 63) & ~(-1LL << *a1)) + v4), a3, a1, a2);
}

void sub_1000CD37C(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3 + 1;
  uint64_t v8 = *(void *)(v3[1] + 16);
  uint64_t v9 = *v4;
  if (!*v4)
  {
    if (!v8) {
      goto LABEL_13;
    }
LABEL_12:
    sub_1000CD5B4(a1, a3);
    return;
  }

  swift_beginAccess(v9 + 16, &v16, 0LL, 0LL);
  if ((*(void *)(v9 + 16) & 0x3FLL) == (*(void *)(v9 + 24) & 0x3FLL))
  {
    if (!v8) {
      goto LABEL_13;
    }
LABEL_8:
    sub_1000CCA88();
    uint64_t v11 = *v4;
    if (*v4)
    {
      swift_retain();
      sub_1000CD6A8(a2, (uint64_t *)(v11 + 16), v11 + 32, (uint64_t)v4);
      if (__OFADD__(a1, 1LL))
      {
        __break(1u);
      }

      else if (a1 + 1 >= a1)
      {
        uint64_t v12 = v4[1];
        swift_retain();
        sub_1000CD924(a1, a1 + 1, v12, (void *)(v11 + 16), v11 + 32);
        swift_release(v11);
        swift_release(v12);
        goto LABEL_12;
      }

      __break(1u);
    }

    __break(1u);
    return;
  }

  if (v8 > static _HashTable.minimumCapacity(forScale:)()) {
    goto LABEL_8;
  }
LABEL_13:
  sub_1000CD5B4(a1, a3);
  uint64_t v13 = *v7;
  if (v9)
  {
    swift_beginAccess(v9 + 16, v17, 0LL, 0LL);
    uint64_t v14 = *(void *)(v9 + 24) & 0x3FLL;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  unint64_t v15 = *(void *)(v13 + 16);
  if (v14 || v15 >= 0x10)
  {
    static _HashTable.scale(forCapacity:)(v15);
    sub_1000CCAD0();
  }

  else
  {
    swift_release(v9);
    uint64_t *v4 = 0LL;
  }

uint64_t sub_1000CD538(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_1000CD694(v3);
    uint64_t v3 = result;
    *uint64_t v1 = result;
  }

  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = v5 - 1 - a1;
    uint64_t v8 = v3 + 8 * a1;
    uint64_t v9 = *(void *)(v8 + 32);
    uint64_t v10 = sub_100015888(v8 + 40, v7, v8 + 32);
    *(void *)(v3 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v6;
    specialized ContiguousArray._endMutation()(v10);
    return v9;
  }

  return result;
}

void sub_1000CD5B4(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
  {
    sub_1000CD680();
    uint64_t v5 = v6;
  }

  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
    sub_100015900(v11 + v10, v7 - 1 - a1);
    *(void *)(v5 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v7 - 1;
    *uint64_t v2 = v5;
  }

void sub_1000CD66C(uint64_t a1)
{
}

void sub_1000CD680()
{
}

uint64_t sub_1000CD694(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

unint64_t sub_1000CD6A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  *(void *)&__int128 v55 = a2;
  *((void *)&v55 + 1) = a3;
  uint64_t v56 = a1;
  uint64_t v57 = v11;
  uint64_t v58 = v12;
  uint64_t v59 = v13;
  LOBYTE(v60) = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v14 = v57;
  if (!v57) {
    return _HashTable.UnsafeHandle.subscript.setter(0LL, a1, a2, a3);
  }
  char v15 = v60;
  uint64_t v16 = a3;
  uint64_t v18 = v58;
  uint64_t v17 = v59;
  uint64_t v19 = v56;
  __int128 v50 = v55;
  uint64_t v52 = v16;
  uint64_t v20 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(a1, a2);
  __int128 v28 = v50;
  uint64_t v53 = v20;
  while (1)
  {
    uint64_t v64 = v19;
    uint64_t v65 = v14;
    uint64_t v66 = v18;
    uint64_t v67 = v17;
    char v68 = v15 & 1;
    unint64_t result = _HashTable.BucketIterator.currentValue.getter( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v50,  *((void *)&v50 + 1),  v51,  v52,  v53,  v54,  v55,  *((void *)&v55 + 1),  v56,  v57,  v58,  v59,  v60,  v61,  v28,  *((void *)&v28 + 1));
    if ((v30 & 1) != 0) {
      break;
    }
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }

    uint64_t v31 = *(void *)(v54 + 8);
    if (result >= *(void *)(v31 + 16)) {
      goto LABEL_26;
    }
    uint64_t v32 = *a2;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v10,  v31 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
    + *(void *)(v8 + 72) * result,
      v7);
    sub_100021AD0(&qword_10010B7F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v7, v33);
    unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v42 = 1LL << *a2;
    uint64_t v43 = v42 - 1;
    if (__OFSUB__(v42, 1LL)) {
      goto LABEL_27;
    }
    uint64_t v44 = v43 & v34;
    if (a1 >= v53)
    {
      if (v44 < v53 || a1 < v44) {
        goto LABEL_22;
      }
    }

    else if (v44 < v53 && a1 < v44)
    {
      goto LABEL_22;
    }

    uint64_t v47 = _HashTable.BucketIterator.currentValue.getter( result,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v50,  *((void *)&v50 + 1),  v51,  v52,  v53,  v54,  v55,  *((void *)&v55 + 1),  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63);
    if ((v48 & 1) != 0) {
      uint64_t v49 = 0LL;
    }
    else {
      uint64_t v49 = ((v43 & ((v47 - (a2[1] >> 6)) >> 63)) + v47 - (a2[1] >> 6)) ^ v43;
    }
    _HashTable.UnsafeHandle.subscript.setter(v49, a1, a2, v52);
    a1 = v19;
LABEL_22:
    _HashTable.BucketIterator.advance()();
    __int128 v28 = v55;
    uint64_t v19 = v56;
    uint64_t v14 = v57;
    uint64_t v18 = v58;
    uint64_t v17 = v59;
    char v15 = v60;
    if (!v57) {
      return _HashTable.UnsafeHandle.subscript.setter(0LL, a1, a2, v52);
    }
  }

  __break(1u);
  return result;
}

void sub_1000CD924(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v110 = a5;
  uint64_t v108 = a3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v105 - v13;
  uint64_t v15 = sub_100003B20(&qword_10010EF70);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v105 - v19;
  uint64_t v21 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  if (v21 < 1) {
    return;
  }
  unint64_t v22 = *(void *)(v108 + 16);
  uint64_t v109 = a2 - a1;
  if ((uint64_t)(v22 - v21) / 2 > a1)
  {
    if (static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3 <= a1)
    {
      uint64_t v73 = v110;
      uint64_t v74 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a4, v110);
      uint64_t v82 = 0LL;
      unint64_t v111 = a4;
      uint64_t v112 = v73;
      uint64_t v113 = 0LL;
      *(void *)&__int128 v114 = v74;
      *((void *)&v114 + 1) = v75;
      uint64_t v115 = v76;
      LOBYTE(v1sub_10002FFE4((uint64_t)v1, v0 + 16) = 0;
      uint64_t v83 = v109;
      while (1)
      {
        uint64_t v118 = v82;
        __int128 v119 = v114;
        uint64_t v120 = v115;
        char v121 = v116;
        uint64_t v84 = _HashTable.BucketIterator.currentValue.getter( v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  *((void *)&v114 + 1),  v115,  v116,  v117,  v111,  v112);
        if ((v85 & 1) == 0 && v84 < a1)
        {
          BOOL v30 = __OFADD__(v84, v83);
          uint64_t v86 = v84 + v83;
          if (v30)
          {
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }

          _HashTable.BucketIterator.currentValue.setter(v86, 0LL);
        }

        _HashTable.BucketIterator.advance()();
        uint64_t v82 = v113;
        if (!v113) {
          goto LABEL_54;
        }
      }
    }

    if (a1 < 0) {
      goto LABEL_73;
    }
    if (v22 < a1)
    {
LABEL_74:
      __break(1u);
      return;
    }

    if (a1)
    {
      uint64_t v107 = v108 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v106 = *(void *)(v9 + 72);
      uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      swift_retain();
      uint64_t v24 = 0LL;
      uint64_t v25 = v110;
      while (v24 != a1)
      {
        v23(v20, v107 + v106 * v24, v8);
        sub_100005FB0((uint64_t)v20, 0LL, 1LL, v8);
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v20, v8);
        uint64_t v26 = *a4;
        sub_100021AD0(&qword_10010B7F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
        uint64_t v29 = 1LL << *a4;
        BOOL v30 = __OFSUB__(v29, 1LL);
        uint64_t v31 = v29 - 1;
        if (v30) {
          goto LABEL_63;
        }
        uint64_t v32 = v31 & v28;
        uint64_t v33 = _HashTable.UnsafeHandle._startIterator(bucket:)(v31 & v28, a4, v25);
        unint64_t v111 = a4;
        uint64_t v112 = v25;
        uint64_t v113 = v32;
        *(void *)&__int128 v114 = v33;
        *((void *)&v114 + 1) = v34;
        uint64_t v115 = v35;
        LOBYTE(v1sub_10002FFE4((uint64_t)v1, v0 + 16) = 0;
        if (v33)
        {
          char v41 = 0;
          uint64_t v42 = a4;
          uint64_t v43 = v110;
          do
          {
            uint64_t v118 = v32;
            *(void *)&__int128 v119 = v33;
            *((void *)&v119 + 1) = v34;
            uint64_t v120 = v35;
            char v121 = v41 & 1;
            uint64_t v44 = _HashTable.BucketIterator.currentValue.getter( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  *((void *)&v114 + 1),  v115,  v116,  v117,  v42,  v43);
            if ((v45 & 1) == 0 && v44 == v24) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v43 = v112;
            uint64_t v42 = v111;
            uint64_t v32 = v113;
            uint64_t v34 = *((void *)&v114 + 1);
            uint64_t v33 = v114;
            uint64_t v35 = v115;
            char v41 = v116;
          }

          while ((void)v114);
        }

        uint64_t v46 = v24 + v109;
        if (__OFADD__(v24, v109)) {
          goto LABEL_64;
        }
        ++v24;
        _HashTable.BucketIterator.currentValue.setter(v46, 0LL);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        if (v24 == a1) {
          goto LABEL_52;
        }
      }

      goto LABEL_62;
    }

    swift_retain();
LABEL_52:
    sub_100005FB0((uint64_t)v20, 1LL, 1LL, v8);
LABEL_53:
    swift_release(v108);
    uint64_t v83 = v109;
LABEL_54:
    uint64_t v101 = a4[1];
    if (!__OFSUB__(v101 >> 6, v83))
    {
      uint64_t v102 = 1LL << *a4;
      BOOL v30 = __OFSUB__(v102, 1LL);
      uint64_t v103 = v102 - 1;
      if (!v30)
      {
        uint64_t v104 = (v103 & (((v101 >> 6) - v83) >> 63)) + (v101 >> 6) - v83;
        if (v104 < v103) {
          uint64_t v103 = 0LL;
        }
        a4[1] = a4[1] & 0x3FLL | ((v104 - v103) << 6);
        return;
      }

      goto LABEL_72;
    }

LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  BOOL v30 = __OFSUB__(v22, a2);
  uint64_t v47 = v22 - a2;
  if (v30)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  if (v47 >= static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3)
  {
    uint64_t v87 = v110;
    uint64_t v88 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a4, v110);
    uint64_t v96 = 0LL;
    unint64_t v111 = a4;
    uint64_t v112 = v87;
    uint64_t v113 = 0LL;
    *(void *)&__int128 v114 = v88;
    *((void *)&v114 + 1) = v89;
    uint64_t v115 = v90;
    LOBYTE(v1sub_10002FFE4((uint64_t)v1, v0 + 16) = 0;
    uint64_t v97 = v109;
    do
    {
      uint64_t v118 = v96;
      __int128 v119 = v114;
      uint64_t v120 = v115;
      char v121 = v116;
      uint64_t v98 = _HashTable.BucketIterator.currentValue.getter( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  *((void *)&v114 + 1),  v115,  v116,  v117,  v111,  v112);
      if ((v99 & 1) == 0 && v98 >= a2)
      {
        BOOL v30 = __OFSUB__(v98, v97);
        uint64_t v100 = v98 - v97;
        if (v30) {
          goto LABEL_61;
        }
        _HashTable.BucketIterator.currentValue.setter(v100, 0LL);
      }

      _HashTable.BucketIterator.advance()();
      uint64_t v96 = v113;
    }

    while (v113);
  }

  else
  {
    uint64_t v107 = sub_1000CC3D4(a2, v108);
    uint64_t v108 = v48;
    if (v49 == v50 >> 1)
    {
LABEL_35:
      sub_100005FB0((uint64_t)v18, 1LL, 1LL, v8);
    }

    else
    {
      uint64_t v51 = v49;
      int64_t v52 = v50 >> 1;
      uint64_t v53 = v110;
      while (1)
      {
        if (v51 >= v52) {
          goto LABEL_65;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v108 + *(void *)(v9 + 72) * v51, v8);
        sub_100005FB0((uint64_t)v18, 0LL, 1LL, v8);
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v18, v8);
        uint64_t v54 = *a4;
        sub_100021AD0(&qword_10010B7F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v56 = dispatch thunk of Hashable._rawHashValue(seed:)(v54, v8, v55);
        uint64_t v57 = 1LL << *a4;
        BOOL v30 = __OFSUB__(v57, 1LL);
        uint64_t v58 = v57 - 1;
        if (v30) {
          goto LABEL_66;
        }
        uint64_t v59 = v58 & v56;
        uint64_t v60 = _HashTable.UnsafeHandle._startIterator(bucket:)(v58 & v56, a4, v53);
        unint64_t v111 = a4;
        uint64_t v112 = v53;
        uint64_t v113 = v59;
        *(void *)&__int128 v114 = v60;
        *((void *)&v114 + 1) = v61;
        uint64_t v115 = v62;
        LOBYTE(v1sub_10002FFE4((uint64_t)v1, v0 + 16) = 0;
        if (v60)
        {
          char v68 = 0;
          uint64_t v69 = a4;
          uint64_t v70 = v110;
          do
          {
            uint64_t v118 = v59;
            *(void *)&__int128 v119 = v60;
            *((void *)&v119 + 1) = v61;
            uint64_t v120 = v62;
            char v121 = v68 & 1;
            uint64_t v71 = _HashTable.BucketIterator.currentValue.getter( v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  *((void *)&v114 + 1),  v115,  v116,  v117,  v69,  v70);
            if ((v72 & 1) == 0 && v71 == a2) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v70 = v112;
            uint64_t v69 = v111;
            uint64_t v59 = v113;
            uint64_t v61 = *((void *)&v114 + 1);
            uint64_t v60 = v114;
            uint64_t v62 = v115;
            char v68 = v116;
          }

          while ((void)v114);
        }

        if (__OFSUB__(a2, v109))
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }

        _HashTable.BucketIterator.currentValue.setter(a2 - v109, 0LL);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        BOOL v30 = __OFADD__(a2++, 1LL);
        if (v30) {
          goto LABEL_68;
        }
        if (++v51 == v52) {
          goto LABEL_35;
        }
      }
    }

    swift_unknownObjectRelease(v107);
  }

uint64_t sub_1000CDF84( uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100021EB0();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v24);
    unint64_t result = sub_10000C1E0();
    if (!v15) {
      return sub_100030C8C();
    }
  }

  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15) {
      return sub_100030C8C();
    }
  }

  if (v13)
  {
    if (v14)
    {
      sub_100021EB0();
      uint64_t v16 = sub_1000D10D0();
      unint64_t result = sub_10000C1E0();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          sub_1000071C0(a5, a6);
          uint64_t v18 = v17;
          sub_100021EB0();
          for (uint64_t i = 0LL; i != v15; ++i)
          {
            uint64_t v20 = sub_100003B20(a6);
            uint64_t v21 = (void (*)(_BYTE *, void))a7(v25, i, a3, v20, v18);
            uint64_t v23 = *v22;
            sub_1000837AC();
            v21(v25, 0LL);
            *(void *)(v13 + 8 * i) = v23;
          }

          sub_10000C1E0();
          return sub_100030C8C();
        }

        goto LABEL_19;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10), v13);
        return sub_100030C8C();
      }

      __break(1u);
    }

    __break(1u);
LABEL_19:
    __break(1u);
  }

  __break(1u);
  return result;
}

void (*sub_1000CE0FC(uint64_t **a1, unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000CE1E0(v6, a2, a3);
  return sub_1000CE150;
}

void sub_1000CE154()
{
  uint64_t v1 = sub_1000D0AFC();
  uint64_t v2 = sub_1000D0FB4((uint64_t)v1);
  sub_1000CE24C(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10004E1F0();
}

void sub_1000CE184()
{
  uint64_t v1 = sub_1000D0AFC();
  uint64_t v2 = sub_1000D0FB4((uint64_t)v1);
  sub_1000CE2D4(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10004E1F0();
}

void sub_1000CE1B4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t (*sub_1000CE1E0(uint64_t *a1, unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_1000CAB40(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    uint64_t v7 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
  }
  *a1 = v7;
  return j__s13modelmanagerd22DaemonInferenceMonitorVwxx;
}

void sub_1000CE24C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v6) {
    uint64_t v7 = sub_1000D083C(v5);
  }
  else {
    uint64_t v7 = sub_1000D0668(v4 + 8 * v5);
  }
  *unint64_t v3 = v7;
  sub_10004E1F0();
}

uint64_t sub_1000CE290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RequestManagerPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void sub_1000CE2D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v6) {
    uint64_t v7 = sub_1000D083C(v5);
  }
  else {
    uint64_t v7 = sub_1000D0668(v4 + 8 * v5);
  }
  *unint64_t v3 = v7;
  sub_10004E1F0();
}

uint64_t sub_1000CE318(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      swift_retain(v20);
      goto LABEL_38;
    }

    ++v11;
    unint64_t result = swift_retain(v20);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000CE510()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_1000CE55C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F814);
  *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B5F8;
  sub_1000D0B2C();
  sub_100021F54();
  return sub_1000C6EA0(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000CE5C4()
{
  uint64_t v0 = swift_task_alloc(dword_10010F824);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_1000CA94C(v2, v3, v4, v5);
}

uint64_t sub_1000CE610()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000CE644()
{
  uint64_t v1 = swift_task_alloc(dword_10010F83C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_1000D0B2C();
  sub_100021F54();
  return sub_1000C5570(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000CE6A8()
{
  uint64_t v0 = swift_task_alloc(dword_10010F854);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_1000C5704(v2, v3, v4, v5, v6);
}

double sub_1000CE6F8()
{
  return sub_1000C5FD4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000CE700()
{
  return sub_1000CF8C4((void (*)(void))&_swift_release);
}

uint64_t sub_1000CE70C()
{
  uint64_t v0 = swift_task_alloc(dword_10010F864);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_1000C60D4(v2, v3, v4, v5, v6);
}

uint64_t sub_1000CE760()
{
  uint64_t v0 = swift_task_alloc(dword_10010F87C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_1000CA89C(v2, v3, v4, v5);
}

uint64_t sub_1000CE7AC()
{
  uint64_t v0 = sub_100007598();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_100007390(v1);
  return sub_100007380(v2, v3, v4, v5);
}

uint64_t sub_1000CE7F0(uint64_t a1)
{
  return sub_1000C4220(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000CE7F8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = (uint64_t *)result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = __CocoaSet.makeIterator()(v8);
    uint64_t v10 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100021AD0(&qword_10010B908, type metadata accessor for InferenceProviderAsset);
    unint64_t result = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    uint64_t v4 = v35[1];
    uint64_t v12 = v35[2];
    uint64_t v13 = v35[3];
    int64_t v14 = v35[4];
    unint64_t v15 = v35[5];
  }

  else
  {
    int64_t v14 = 0LL;
    uint64_t v16 = -1LL << *(_BYTE *)(a4 + 32);
    uint64_t v12 = a4 + 56;
    uint64_t v13 = ~v16;
    uint64_t v17 = -v16;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v15 = v18 & *(void *)(a4 + 56);
  }

  uint64_t v32 = v7;
  if (!a2)
  {
    uint64_t v19 = 0LL;
LABEL_50:
    *uint64_t v32 = v4;
    v32[1] = v12;
    v32[2] = v13;
    v32[3] = v14;
    v32[4] = v15;
    return v19;
  }

  if (!a3)
  {
    uint64_t v19 = 0LL;
    goto LABEL_50;
  }

  if (a3 < 0) {
    goto LABEL_52;
  }
  uint64_t v19 = 0LL;
  int64_t v33 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v31 = v13;
  while (1)
  {
    if (v4 < 0)
    {
      uint64_t v22 = v12;
      uint64_t v23 = __CocoaSet.Iterator.next()(result);
      if (!v23) {
        goto LABEL_49;
      }
      uint64_t v24 = v23;
      uint64_t v34 = v23;
      uint64_t v25 = type metadata accessor for InferenceProviderAsset(0LL);
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v25, 7LL);
      uint64_t v26 = v35[0];
      unint64_t result = swift_unknownObjectRelease(v24);
      uint64_t v12 = v22;
      if (!v26) {
        goto LABEL_49;
      }
      goto LABEL_31;
    }

    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_30;
    }

    int64_t v27 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v27 >= v33)
    {
      unint64_t v15 = 0LL;
      goto LABEL_49;
    }

    unint64_t v28 = *(void *)(v12 + 8 * v27);
    if (v28) {
      goto LABEL_29;
    }
    int64_t v29 = v14 + 2;
    if (v14 + 2 >= v33)
    {
      unint64_t v15 = 0LL;
      ++v14;
      goto LABEL_49;
    }

    unint64_t v28 = *(void *)(v12 + 8 * v29);
    if (!v28)
    {
      if (v14 + 3 >= v33) {
        goto LABEL_46;
      }
      unint64_t v28 = *(void *)(v12 + 8 * (v14 + 3));
      if (v28)
      {
        int64_t v27 = v14 + 3;
        goto LABEL_29;
      }

      int64_t v29 = v14 + 4;
      if (v14 + 4 >= v33)
      {
        unint64_t v15 = 0LL;
        v14 += 3LL;
        goto LABEL_49;
      }

      unint64_t v28 = *(void *)(v12 + 8 * v29);
      if (!v28)
      {
        int64_t v27 = v14 + 5;
        if (v14 + 5 >= v33)
        {
LABEL_46:
          unint64_t v15 = 0LL;
          int64_t v14 = v29;
          goto LABEL_49;
        }

        unint64_t v28 = *(void *)(v12 + 8 * v27);
        if (!v28)
        {
          int64_t v30 = v14 + 6;
          while (v30 < v33)
          {
            unint64_t v28 = *(void *)(v12 + 8 * v30++);
            if (v28)
            {
              int64_t v27 = v30 - 1;
              goto LABEL_29;
            }
          }

          unint64_t v15 = 0LL;
          int64_t v14 = v33 - 1;
          goto LABEL_49;
        }

        goto LABEL_29;
      }
    }

    int64_t v27 = v29;
LABEL_29:
    unint64_t v15 = (v28 - 1) & v28;
    unint64_t v21 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v14 = v27;
LABEL_30:
    uint64_t v26 = *(void *)(*(void *)(v4 + 48) + 8 * v21);
    unint64_t result = swift_retain(v26);
    if (!v26) {
      goto LABEL_49;
    }
LABEL_31:
    ++v19;
    *a2++ = v26;
    if (v19 == a3)
    {
      uint64_t v19 = a3;
LABEL_49:
      uint64_t v13 = v31;
      goto LABEL_50;
    }
  }

  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1000CEAF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v32 - v14;
  uint64_t v39 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v37 = v17;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v17 - 24);
  uint64_t v35 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v36 = (unint64_t)(63 - v19) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(void *)(v39 + 48) + v29 * v25, v8);
    int64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v36) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v33;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v37 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000CEDBC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000CEFB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v13;
  }

  if (!a3)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v20 = -1LL << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    sub_100007104(*(void *)(a4 + 56) + 40 * v16, (uint64_t)v21);
    sub_1000070EC(v21, (uint64_t)v22);
    uint64_t result = sub_1000070EC(v22, v11);
    v11 += 40LL;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v20;
      goto LABEL_36;
    }
  }

  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v17 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2LL;
    goto LABEL_22;
  }

  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3LL;
    goto LABEL_22;
  }

  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0LL;
    goto LABEL_35;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v17 = v19;
LABEL_22:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

void sub_1000CF1C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

void sub_1000CF1E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

void sub_1000CF1FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

void sub_1000CF218( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  a29 = v30;
  a30 = v36;
  uint64_t v37 = v34;
  if ((v34 & 0xC000000000000001LL) == 0)
  {
    if ((v33 & 1) != 0) {
      goto LABEL_10;
    }
    if (v31 < 0 || 1LL << *(_BYTE *)(v34 + 32) <= v31)
    {
      __break(1u);
    }

    else if (((*(void *)(v34 + (((unint64_t)v31 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v31) & 1) != 0)
    {
      if (*(_DWORD *)(v34 + 36) == v32) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_10:
      uint64_t v40 = v35;
      uint64_t v41 = sub_1000D10A0();
      if (__CocoaSet.Index.age.getter(v41) == *(_DWORD *)(v37 + 36))
      {
        uint64_t v42 = sub_1000D10A0();
        __CocoaSet.Index.element.getter(v42);
        uint64_t v43 = sub_1000D0D90();
        sub_100022CFC();
        sub_100022CC0((uint64_t)&a9, (uint64_t)&a18, (uint64_t)&type metadata for Swift.AnyObject + 8, v43);
        sub_100030590();
        Hasher.init(_seed:)(&a9, *(void *)(v37 + 40));
        v40(&a9);
        Swift::Int v44 = Hasher._finalize()();
        uint64_t v45 = -1LL << *(_BYTE *)(v37 + 32);
        uint64_t v46 = v44 & ~v45;
        sub_1000D0FA0();
        if ((v47 & 1) != 0)
        {
          uint64_t v48 = sub_10000C20C();
          char v49 = sub_1000D1074(v48);
          sub_100030B78();
          if ((v49 & 1) == 0)
          {
            uint64_t v50 = ~v45;
            do
            {
              uint64_t v46 = (v46 + 1) & v50;
              sub_1000D0FA0();
              if ((v51 & 1) == 0) {
                goto LABEL_22;
              }
              uint64_t v52 = sub_10000C20C();
              char v53 = sub_1000D1074(v52);
              sub_100030B78();
            }

            while ((v53 & 1) == 0);
          }

          sub_1000304F8();
LABEL_17:
          sub_1000224B4();
          goto LABEL_18;
        }

uint64_t sub_1000CF3E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)swift_task_alloc(dword_10010F98C);
  *(void *)(v5 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10000BCBC;
  return sub_1000BCD94(a1, a2, v10, a4, a5);
}

uint64_t sub_1000CF464(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = (void *)swift_task_alloc(dword_10010F9AC);
  *(void *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_10000BCBC;
  return sub_1000BD530(a1, a2, a3, a4, a5, v12);
}

void sub_1000CF4EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    swift_retain();
    a2 = sub_1000CC7C4(a4, a1, a2, (uint64_t *)(a3 + 16), a3 + 32);
    char v16 = v15;
    uint64_t v18 = v17;
    swift_release(a3);
    char v19 = v16 & 1;
  }

  else if (a2)
  {
    uint64_t v25 = a2;
    v24[0] = a5;
    v24[1] = v5;
    a2 = 0LL;
    uint64_t v20 = *(void *)(v12 + 72);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    while (1)
    {
      v21(v14, a1, v11);
      sub_100021AD0(&qword_10010B7F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, a4, v11, v22);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      if ((v23 & 1) != 0) {
        break;
      }
      ++a2;
      a1 += v20;
      if (v25 == a2)
      {
        a2 = 0LL;
        break;
      }
    }

    uint64_t v18 = 0LL;
    char v19 = v23 ^ 1;
    a5 = v24[0];
  }

  else
  {
    uint64_t v18 = 0LL;
    char v19 = 1;
  }

  *(void *)a5 = a2;
  *(_BYTE *)(a5 + 8) = v19 & 1;
  *(void *)(a5 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v18;
}

void sub_1000CF678(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_1000CF694(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000D10AC(a1, a2, a3);
  sub_100030708(v3);
  sub_1000075C0();
}

void sub_1000CF6B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_10009837C(*(void *)(v2 - 8));
  sub_1000075C0();
}

void *sub_1000CF6E8(void *a1)
{
  return a1;
}

void *sub_1000CF710(void *a1)
{
  return a1;
}

uint64_t sub_1000CF73C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F8B4);
  *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  uint64_t v2 = sub_1000847D4(v1, (uint64_t)sub_1000CF788);
  return sub_1000C1C04(v2, v3, v4);
}

uint64_t sub_1000CF788()
{
  return sub_1000D07A4(v0, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000CF7BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000CF7E8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F8C4);
  *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  uint64_t v2 = sub_1000847D4(v1, (uint64_t)sub_10000BCBC);
  return sub_1000C1CD0(v2, v3, v4);
}

uint64_t sub_1000CF834(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc(dword_10010F8D4);
  uint64_t v5 = (void *)sub_100007524(v4);
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_1000C1D94(a1, v1);
}

void sub_1000CF884()
{
}

void sub_1000CF88C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1000224D0(a1, a2);
  sub_10009837C(*(void *)(v2 - 8));
  sub_1000075C0();
}

uint64_t sub_1000CF8B8()
{
  return sub_1000CF8C4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000CF8C4(void (*a1)(void))
{
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_1000CF8FC()
{
  uint64_t v0 = swift_task_alloc(dword_10010F8F4);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_1000CA494(v2, v3, v4, v5, v6);
}

uint64_t sub_1000CF94C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F904);
  *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  uint64_t v2 = (uint64_t *)sub_100030C8C();
  return sub_1000CA5B4(v2, v3);
}

uint64_t sub_1000CF998(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)swift_task_alloc(dword_10010F92C);
  *(void *)(v5 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10000BCBC;
  return sub_1000BD144(a1, a2, v10, a4, a5);
}

uint64_t sub_1000CFA18()
{
  uint64_t v0 = swift_task_alloc(dword_10010F91C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10008317C(v1);
  return sub_1000832E0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000CFA60(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = (void *)swift_task_alloc(dword_10010F954);
  *(void *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_10000BCBC;
  return sub_1000BD5D0(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_1000CFAEC()
{
  uint64_t v0 = swift_task_alloc(dword_10010F934);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000D0380(v1);
  return sub_1000D0368(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000CFB30()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000CFB54()
{
  uint64_t v0 = sub_100007598();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_100007390(v1);
  return sub_100007380(v2, v3, v4, v5);
}

uint64_t sub_1000CFB94()
{
  uint64_t v0 = swift_task_alloc(dword_10010F97C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10008317C(v1);
  return sub_1000832E0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000CFBE0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000CFC0C()
{
  uint64_t v0 = swift_task_alloc(dword_10010F994);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000D0380(v1);
  return sub_1000D0368(v2, v3, v4, v5, v6, v7, v8);
}

void sub_1000CFC50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_1000CFC88()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 352))( *(void *)(v0 + 328),  *(void *)(v0 + 104),  *(void *)(v0 + 304));
}

uint64_t sub_1000CFCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[44];
  uint64_t v4 = v2[38];
  uint64_t v5 = v2[29];
  uint64_t v6 = v2[13];
  sub_100005FB0(v2[30], a2, 1LL, v4);
  return v3(v5, v6, v4);
}

uint64_t sub_1000CFD10()
{
  return swift_task_dealloc(*(void *)(v0 + 336));
}

uint64_t sub_1000CFD54()
{
  return (*(uint64_t (**)(void, uint64_t, void))(v1[39] + 32LL))(v1[41], v0, v1[38]);
}

uint64_t sub_1000CFD80(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000CFD8C(uint64_t a1)
{
}

uint64_t sub_1000CFD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10005C15C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000CFDB0(uint64_t a1)
{
  return sub_1000083A0(a1);
}

uint64_t sub_1000CFDCC(uint64_t a1)
{
  return sub_1000BF6EC(a1);
}

  ;
}

  ;
}

uint64_t sub_1000CFE20(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000CFE3C()
{
  return sub_1000060B4(v1, 1LL, v0);
}

uint64_t sub_1000CFE5C()
{
  return swift_task_dealloc(*(void *)(v0 + 336));
}

void sub_1000CFEA0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_1000CFEDC(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v1, v2, a1);
}

uint64_t sub_1000CFEF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 96);
}

uint64_t sub_1000CFF1C()
{
  return sub_1000212AC(v0);
}

void sub_1000CFF44()
{
}

void sub_1000CFF54()
{
}

uint64_t sub_1000CFF64()
{
  return sub_100005FB0(v1, 0LL, 1LL, v0);
}

  ;
}

uint64_t sub_1000CFFA0()
{
  uint64_t v3 = v1[19];
  uint64_t v2 = v1[20];
  uint64_t v5 = v1[9];
  uint64_t v4 = v1[10];
  v1[22] = *(void *)(v1[16] + 8 * v0 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5, v4, v3);
}

uint64_t sub_1000CFFD8()
{
  return sub_1000060B4(v1, 1LL, v0);
}

size_t sub_1000CFFFC(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_1000D0020()
{
  return sub_1000060B4(v0, 1LL, v1);
}

void sub_1000D0044(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000D0050(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[44];
  uint64_t v4 = v2[38];
  uint64_t v5 = v2[32];
  uint64_t v6 = v2[13];
  sub_100005FB0(v2[33], a2, 1LL, v4);
  return v3(v5, v6, v4);
}

void sub_1000D0090(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 216);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(*(void *)(v2 + 192) + 72LL);
  *(void *)(v4 - 128) = v7;
  sub_1000CF694(v6 + v7 * a2, v5, v3);
}

void sub_1000D00C0(uint64_t a1)
{
}

uint64_t sub_1000D00C8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000D00D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t, void))(v2 + 352))( *(void *)(v2 + 264),  a1 + *v1,  *(void *)(v2 + 304));
}

uint64_t sub_1000D00EC()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_1000D00F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_1000D0104@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void, unint64_t, void))(*(void *)(v2 + 160) + 16LL))( *(void *)(v2 + 80),  a1 + ((*(unsigned __int8 *)(v2 + 192) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 192))
         + *(void *)(*(void *)(v2 + 160) + 72LL) * v1,
           *(void *)(v2 + 152));
}

uint64_t sub_1000D0130(uint64_t a1)
{
  return sub_1000084EC(a1);
}

uint64_t sub_1000D014C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000D0168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000D0184()
{
  return ((uint64_t (*)(void))TaskGroup.awaitAllRemainingTasks(isolation:))();
}

uint64_t sub_1000D01A0()
{
  return v0(v1, v2);
}

uint64_t sub_1000D01B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a25 + 16))( *(void *)(v26 + 160),  a24 + *(void *)(a25 + 72) * v27,  a26);
}

uint64_t sub_1000D01D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000C3218(a1, a2, a3, a4, a5, a6, a7, a8);
}

  ;
}

void sub_1000D0210(uint64_t a1)
{
}

uint64_t sub_1000D0218@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000D0228(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_1000D0238()
{
  return ((uint64_t (*)(void))dispatch thunk of Clock.sleep(until:tolerance:))();
}

uint64_t sub_1000D0254()
{
  return (*(uint64_t (**)(void, void))(v0[35] + 8LL))(v0[36], v0[34]);
}

uint64_t sub_1000D027C()
{
  return sub_1000060B4(v0, 1LL, v1);
}

uint64_t sub_1000D029C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  *uint64_t v21 = a11;
  v21[1] = a12;
  __int128 v21[2] = a13;
  return _HashTable.BucketIterator.currentValue.getter( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  *((void *)&a11 + 1),  a12,  *((void *)&a12 + 1),  a13,  *((void *)&a13 + 1),  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21);
}

uint64_t sub_1000D02C0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 456) = a1;
  return RequestMetadata.id.getter();
}

  ;
}

void sub_1000D0300()
{
  *(void *)(v1 - 112) = v0 + 56;
}

uint64_t sub_1000D032C()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 352))( *(void *)(v0 + 320),  *(void *)(v0 + 104),  *(void *)(v0 + 304));
}

uint64_t sub_1000D0340()
{
  return sub_1000BDABC(*(void *)(v0 + 104));
}

void sub_1000D034C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_1000D0360(uint64_t a1)
{
}

uint64_t sub_1000D0368( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t sub_1000D0380(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000D03AC()
{
  return *(void *)(*(void *)(v0 - 96) + 200LL);
}

  ;
}

uint64_t sub_1000D03E4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1000D03F4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000D03FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

  ;
}

uint64_t sub_1000D0434@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void *sub_1000D043C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *a4);
}

uint64_t sub_1000D0458()
{
  uint64_t v2 = *(void *)(v1 + v0);
  *(void *)(v1 + sub_100007104(v1, v0) = 0LL;
  return swift_release(v2);
}

uint64_t sub_1000D0464()
{
  *(void *)(v1 - 80) = v0;
  return type metadata accessor for TaskPriority(0LL);
}

void sub_1000D0480()
{
}

uint64_t sub_1000D048C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 120) = a1;
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 80);
}

void sub_1000D04B0()
{
}

void sub_1000D04C0()
{
}

uint64_t sub_1000D04DC()
{
  return type metadata accessor for AssetCost(0LL);
}

uint64_t sub_1000D04F8@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1 + 16));
}

uint64_t sub_1000D0508(uint64_t a1)
{
  *(void *)(v1 + sub_100006F7C(v0 + 4) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000D0514()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v3, v1, v2);
}

uint64_t sub_1000D0530@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 40);
}

uint64_t sub_1000D0554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return v2(a1, a2 + v3);
}

uint64_t sub_1000D055C()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_1000D056C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_1000D057C()
{
  return v0(v2, v1);
}

void sub_1000D0588( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

unint64_t sub_1000D0590(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1000CAB40(a2, (a3 & 0xC000000000000001LL) == 0, a3);
}

void *sub_1000D05AC(void *(*a1)(uint64_t *__return_ptr, uint64_t, void))
{
  return sub_1000CC470(a1, v1, v2);
}

  ;
}

uint64_t sub_1000D05D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v12 + v10) = v13;
  return v14(a10, v12, v11);
}

uint64_t sub_1000D05F4( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(void *), void (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t))
{
  return sub_1000CBC20(v6, v7, a3, a4, a5, a6);
}

uint64_t sub_1000D0604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t))
{
  return a17(v17, v18);
}

uint64_t sub_1000D0614()
{
  return *(void *)(v0 + 8);
}

void sub_1000D0634(__n128 a1)
{
  *(__n128 *)(v1 + 40) = a1;
  *(void *)(v1 + 2sub_100006F7C(v0 + 4) = 0LL;
  *(void *)(v1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = 0LL;
  *(_BYTE *)(v1 + 32) = 1;
}

  ;
}

uint64_t sub_1000D0668@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(a1 + 32));
}

uint64_t sub_1000D0670@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v3 | 0x3100;
  v2[11] = 1LL;
  v2[12] = a1;
  v2[13] = v1;
  return result;
}

__n128 sub_1000D0690( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, __int128 a22)
{
  return (__n128)a22;
}

uint64_t sub_1000D06B0()
{
  return *(void *)(v0 - 32);
}

uint64_t sub_1000D06D0(uint64_t a1)
{
  return sub_100005FB0(v1, 1LL, 1LL, a1);
}

  ;
}

  ;
}

uint64_t sub_1000D0728@<X0>(uint64_t a1@<X8>)
{
  return static AssetCost.== infix(_:_:)( a1 + *(int *)(*(void *)(*(void *)(v1 - 96) + 184LL) + 28LL),  *(void *)(v1 - 136));
}

uint64_t sub_1000D0740(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_1000D0754(uint64_t a1)
{
  return dispatch thunk of InstantProtocol.advanced(by:)(v2, v1, a1);
}

uint64_t sub_1000D076C()
{
  return swift_task_dealloc(*(void *)(v0 + 256));
}

void sub_1000D0784()
{
  v0[51] = *(void *)(v0[14] + v0[46]);
}

uint64_t sub_1000D0798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C17DC(a1, a2, a3, a4);
}

uint64_t sub_1000D07A4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000D07B0()
{
  return ((uint64_t (*)(void))withTaskGroup<A, B>(of:returning:isolation:body:))();
}

uint64_t sub_1000D07BC()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_1000D07CC()
{
  return ContinuousClock.init()();
}

uint64_t sub_1000D07E4()
{
  return *(void *)(v0 + 240);
}

  ;
}

uint64_t sub_1000D0804( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  LOBYTE(a2sub_100006F7C(v0 + 4) = 0;
  return _HashTable.BucketIterator.currentValue.getter( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v26,  v25,  v24,  a1,  a2,  a3,  a24);
}

uint64_t sub_1000D081C(uint64_t a1)
{
  return sub_1000060B4(a1, 1LL, v1);
}

uint64_t sub_1000D083C(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_1000D0844(uint64_t a1)
{
  return swift_allocError(*(void *)(v1 - 128), a1, 0LL, 0LL);
}

void sub_1000D085C()
{
}

uint64_t sub_1000D0874()
{
  return sub_1000212AC(v0);
}

void sub_1000D088C()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

  ;
}

  ;
}

uint64_t sub_1000D08CC()
{
  *(void *)(v3 + sub_100007104(v1, v0) = v5;
  return v2(v4, v3, v1);
}

uint64_t sub_1000D08E4()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_1000D08F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _HashTable.UnsafeHandle._startIterator(bucket:)(a2 & a1, v3, v2);
}

uint64_t sub_1000D090C()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

void sub_1000D0918(uint64_t a1)
{
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v1;
  sub_10004DE58(v4, v5, v3);
}

uint64_t sub_1000D092C()
{
  return InferenceProviderRequestConfiguration.auditToken.getter();
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D09A4()
{
  return RequestMetadata.sessionID.getter();
}

void sub_1000D09B0()
{
}

uint64_t sub_1000D09BC()
{
  uint64_t v2 = *(void *)(v1 + v0);
  *(void *)(v1 + sub_100007104(v1, v0) = 0LL;
  return swift_release(v2);
}

void sub_1000D09C8()
{
  uint64_t v3 = *(int *)(v0 + 40);
  *(void *)(v2 - 152) = v1;
  Hasher._combine(_:)(*(_BYTE *)(v1 + v3));
}

void sub_1000D09DC()
{
}

uint64_t sub_1000D09F0(uint64_t a1)
{
  return Set.Iterator.init(_cocoa:)(v1, v2, a1);
}

uint64_t sub_1000D0A04(uint64_t a1)
{
  *(void *)(v4 - 136) = v1;
  return dispatch thunk of Hashable.hash(into:)(v3, v2, a1);
}

uint64_t sub_1000D0A18()
{
  return swift_bridgeObjectRetain(*(void *)(v0 - 8));
}

void sub_1000D0A2C()
{
}

void sub_1000D0A40()
{
}

void *sub_1000D0A54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  return Hasher.init(_seed:)(a17, *(void *)(v17 + 40));
}

void sub_1000D0A68(uint64_t a1)
{
}

uint64_t sub_1000D0A70()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 112) = v4;
  return v4(v1, v2);
}

uint64_t sub_1000D0A84()
{
  return RequestMetadata.id.getter();
}

uint64_t sub_1000D0A8C(uint64_t a1)
{
  return dispatch thunk of Clock.now.getter(v1, a1);
}

uint64_t sub_1000D0AA0()
{
  return swift_unknownObjectRetain(v0);
}

void sub_1000D0AAC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

void sub_1000D0AE4()
{
}

void *sub_1000D0AF0(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

void *sub_1000D0AFC()
{
  return malloc(0x28uLL);
}

uint64_t sub_1000D0B10()
{
  return swift_endAccess(v0);
}

uint64_t sub_1000D0B18()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000D0B20()
{
  return swift_release(*v0);
}

  ;
}

uint64_t sub_1000D0B48()
{
  return swift_retain_n(v0, 3LL);
}

uint64_t sub_1000D0B54()
{
  return RequestMetadata.id.getter();
}

void *sub_1000D0B5C()
{
  return sub_10000729C((void *)(*(void *)(v0 + 16) + 24LL), *(void *)(*(void *)(v0 + 16) + 48LL));
}

uint64_t sub_1000D0B84@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
  return 0LL;
}

uint64_t sub_1000D0B9C()
{
  *(void *)(v2 - 88) = v0;
  return sub_1000CAB64(v1);
}

uint64_t sub_1000D0BAC()
{
  return 0LL;
}

  ;
}

uint64_t sub_1000D0BD4()
{
  return Logger.logObject.getter();
}

  ;
}

void *sub_1000D0BF4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000729C((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
}

void sub_1000D0C10()
{
}

uint64_t sub_1000D0C20()
{
  return v2(v0, v1);
}

uint64_t sub_1000D0C30()
{
  return *(void *)(v0 + 256);
}

uint64_t sub_1000D0C40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 64);
}

uint64_t sub_1000D0C58()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_1000D0C68()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_1000D0C78()
{
}

uint64_t sub_1000D0C80(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 + 2sub_100006F7C(v0 + 4) = result;
  return result;
}

uint64_t sub_1000D0C98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a13, a2, a10);
}

uint64_t sub_1000D0CA8()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000D0CD0()
{
  return dispatch thunk of Actor.unownedExecutor.getter(v1, v0);
}

void sub_1000D0CE0()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000D0CF0()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

  ;
}

uint64_t sub_1000D0D10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = *(void *)(v3 + a2);
  return (*(uint64_t (**)(void))(v2 + 104))();
}

uint64_t sub_1000D0D20()
{
  return String.hash(into:)(v2, v0, v1);
}

uint64_t sub_1000D0D30()
{
  return String.hash(into:)(v1, v0, v2);
}

uint64_t sub_1000D0D40()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 208) + 8LL))(v0, *(void *)(v1 - 200));
}

  ;
}

__n128 sub_1000D0D60(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  __n128 result = *(__n128 *)(v2 + 24);
  *(void *)(a1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  *(__n128 *)(a1 + 2sub_100006F7C(v0 + 4) = result;
  return result;
}

uint64_t sub_1000D0D78()
{
  return v0;
}

uint64_t sub_1000D0D90()
{
  return v0(0LL);
}

uint64_t sub_1000D0DA0()
{
  return swift_task_dealloc(*(void *)(v0 + 112));
}

uint64_t sub_1000D0DB0()
{
  return sub_100005FB0(v1, 0LL, 1LL, v0);
}

uint64_t sub_1000D0DD8(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 33LL, 0LL);
}

uint64_t sub_1000D0DE8()
{
  return v1(v2, v3, v0);
}

void sub_1000D0DF8(uint64_t a1@<X8>)
{
  *(void *)(v2 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  *(void *)(v2 + 2sub_100006F7C(v0 + 4) = a1;
}

  ;
}

uint64_t sub_1000D0E28()
{
  return sub_1000CAB64(v0);
}

uint64_t sub_1000D0E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_1000D0E40()
{
  return v0(v1, v3, v2);
}

uint64_t sub_1000D0E50()
{
  return String.hash(into:)(v0, v2, v1);
}

uint64_t sub_1000D0E60()
{
  return String.hash(into:)(v1, v0, v2);
}

uint64_t sub_1000D0E70(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

void sub_1000D0E80()
{
  v0._countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000D0E8C(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1000D0E98()
{
  v0._countAndFlagsBits = 10272LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000D0EA4@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 + 80), *(void *)(v1 + 56));
}

uint64_t sub_1000D0EB0(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000D0EBC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000D0EC8()
{
  return swift_task_dealloc(*(void *)(v0 + 72));
}

uint64_t sub_1000D0ED4()
{
  return swift_release(*(void *)(v0 + 120));
}

  ;
}

uint64_t sub_1000D0EF4()
{
  return swift_getObjectType(v0);
}

uint64_t sub_1000D0F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005FB0(a1, a2, 1LL, a4);
}

uint64_t sub_1000D0F08(uint64_t a1, uint64_t a2)
{
  return sub_100005FB0(a1, a2, 1LL, v2);
}

uint64_t sub_1000D0F14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

  ;
}

uint64_t sub_1000D0F30()
{
  return *(void *)(v0 + 208);
}

uint64_t sub_1000D0F3C()
{
  return RequestMetadata.id.getter();
}

  ;
}

uint64_t sub_1000D0F54()
{
  return RequestMetadata.id.getter();
}

  ;
}

uint64_t sub_1000D0F70@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1));
}

  ;
}

uint64_t sub_1000D0F8C()
{
  return v0 - 96;
}

void sub_1000D0F98(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_1000D0FB4(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void *sub_1000D0FC8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *__n128 result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000D0FDC(uint64_t result)
{
  *(void *)(result + sub_10002FFE4((uint64_t)v1, v0 + 16) = v1;
  *(void *)(result + 2sub_100006F7C(v0 + 4) = v2;
  return result;
}

uint64_t sub_1000D0FF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_release(a10);
}

void sub_1000D0FF8()
{
}

void *sub_1000D1004(void *result)
{
  result[2] = 0LL;
  result[3] = 0LL;
  result[4] = v1;
  return result;
}

uint64_t sub_1000D1018()
{
  return v2(v1, v0);
}

uint64_t sub_1000D1024()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000D1030()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

void sub_1000D103C(uint64_t a1)
{
}

uint64_t sub_1000D1044()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

uint64_t sub_1000D1050(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_1000D1058(uint64_t a1)
{
  return __CocoaSet.contains(_:)(a1, v1);
}

  ;
}

uint64_t sub_1000D1074(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000D1080()
{
  return v0;
}

uint64_t sub_1000D108C()
{
  return v0;
}

uint64_t sub_1000D10A0()
{
  return v0;
}

uint64_t sub_1000D10AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t sub_1000D10B8()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000D10C4()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, v0);
}

uint64_t sub_1000D10D0()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1000D10D8()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

  ;
}

uint64_t sub_1000D10F8()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000D1104()
{
  return sub_100091114();
}

  ;
}

void sub_1000D111C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000D1128()
{
  return sub_10000B7B0(v0, v1);
}

uint64_t sub_1000D1134()
{
  return sub_1000CD538(v0);
}

void sub_1000D1140()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000D1154(uint64_t a1)
{
  return sub_1000C44A4(a1);
}

uint64_t sub_1000D115C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD318(a1, a2, a3, v3);
}

  ;
}

  ;
}

uint64_t sub_1000D1190()
{
  return RequestMetadata.id.getter();
}

void sub_1000D119C()
{
  *(void *)(v1 + 168) = v0;
}

uint64_t sub_1000D11B0(char a1)
{
  if (!a1) {
    return 0x6C61636974697263LL;
  }
  if (a1 == 1) {
    return 0x746972632D6E6F6ELL;
  }
  return 0x6E776F6E6B6E75LL;
}

uint64_t sub_1000D1210()
{
  return sub_1000D11B0(*v0);
}

uint64_t getEnumTagSinglePayload for MemoryPressure(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for MemoryPressure(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vsub_100006F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000D12EC + 4 * byte_1000DACA5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D1320 + 4 * byte_1000DACA0[v4]))();
}

uint64_t sub_1000D1320(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D1328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D1330LL);
  }
  return result;
}

uint64_t sub_1000D133C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D1344LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_1000D1348(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D1350(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MemoryPressure()
{
  return &type metadata for MemoryPressure;
}

unint64_t sub_1000D1370()
{
  unint64_t result = qword_10010F9C8;
  if (!qword_10010F9C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DAD44, &type metadata for MemoryPressure);
    atomic_store(result, (unint64_t *)&qword_10010F9C8);
  }

  return result;
}

uint64_t sub_1000D13AC()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for WorkQueueState()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd14WorkQueueState);
}

uint64_t sub_1000D13F0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DetachedWorkQueue.Actor()
{
  return objc_opt_self(&OBJC_CLASS____TtCV13modelmanagerd17DetachedWorkQueue5Actor);
}

unint64_t sub_1000D1434(uint64_t a1)
{
  unint64_t result = sub_1000D1458();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D1458()
{
  unint64_t result = qword_10010FB68;
  if (!qword_10010FB68)
  {
    uint64_t v1 = type metadata accessor for DetachedWorkQueue.Actor();
    unint64_t result = swift_getWitnessTable(&unk_1000DADF0, v1);
    atomic_store(result, (unint64_t *)&qword_10010FB68);
  }

  return result;
}

ValueMetadata *type metadata accessor for DetachedWorkQueue()
{
  return &type metadata for DetachedWorkQueue;
}

void sub_1000D14A4()
{
  uint64_t v53 = v3;
  uint64_t v54 = v2;
  uint64_t v51 = v4;
  int v57 = v5;
  uint64_t v55 = v6;
  uint64_t v56 = v7;
  uint64_t v9 = (uint64_t)v8;
  Swift::Int v44 = v8;
  uint64_t v11 = v10;
  uint64_t v52 = sub_100030CC8();
  uint64_t v12 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  sub_100022518();
  uint64_t v50 = v13;
  uint64_t v49 = sub_1000D40EC();
  uint64_t v41 = *(void *)(v49 - 8);
  uint64_t v14 = v41;
  __chkstk_darwin(v49);
  sub_100022518();
  uint64_t v48 = v15;
  uint64_t v16 = sub_1000D40D8();
  uint64_t v17 = type metadata accessor for AuditToken(v16);
  sub_100085754();
  __chkstk_darwin(v18);
  sub_100095CF0();
  uint64_t v43 = v1;
  type metadata accessor for UUID(0LL);
  sub_10000C240();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = v11;
  uint64_t v23 = Session.Metadata.sessionSetID.getter(v20);
  uint64_t v47 = Session.Metadata.onBehalfOfPID.getter(v23);
  uint64_t v45 = Session.Metadata.parentOfOnBehalfOfPID.getter();
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))( v1,  v11 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken,  v17);
  HIDWORD(v42) = AuditToken.auditUserIdentifier.getter(v24);
  uint64_t v25 = sub_100021868(v9, (uint64_t)v58);
  uint64_t v40 = Session.Metadata.useCaseID.getter(v25);
  uint64_t v39 = v26;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v28 = v48;
  uint64_t v29 = v49;
  uint64_t v30 = v51;
  uint64_t v31 = v27(v48, v51, v49);
  uint64_t v32 = Session.Metadata.loggingIdentifier.getter(v31);
  uint64_t v34 = v33;
  uint64_t v35 = v50;
  uint64_t v36 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v50, v53, v52);
  LOBYTE(v37) = v57;
  sub_1000D1B14( (uint64_t)v22,  v54,  v47,  v45,  v43,  HIDWORD(v42),  (uint64_t)v58,  v40,  v39,  v55,  v56,  v37,  v28,  v32,  v34,  v35,  v38,  v39,  v40,  v41,  v42,  v43,  (uint64_t)v44,  v45,  v46,  v47,  v48,  v49);
  swift_release(v46);
  sub_1000303C8(v36, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v30, v29);
  sub_100006F7C(v44);
  sub_100007448();
}

uint64_t sub_1000D16FC(uint64_t a1, void *a2)
{
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = sub_100030CC8();
  __chkstk_darwin(v7);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 16))( &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_100021868((uint64_t)a2, (uint64_t)v15);
  swift_bridgeObjectRetain(v10);
  sub_1000D187C((uint64_t)v6);
  uint64_t v11 = type metadata accessor for DaemonRequest(0LL);
  uint64_t v12 = sub_10000749C(v11);
  sub_1000D19C0();
  swift_release(a1);
  sub_100006F7C(a2);
  return v12;
}

uint64_t sub_1000D180C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010FB70);
  sub_100003BA0(v0, (uint64_t)qword_10010FB70);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_1000D187C(uint64_t a1@<X8>)
{
}

uint64_t sub_1000D18DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
}

void sub_1000D192C()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 64)
                          + ((*(unsigned int *)(**(void **)(v0 + 64) + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v1);
  InferenceProviderRequestConfiguration.requestPriority.getter();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000D1998()
{
  return InferenceProviderRequestConfiguration.requestPriority.getter();
}

void sub_1000D19C0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask) = 0LL;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) = 0;
  uint64_t v9 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
  uint64_t v10 = type metadata accessor for ModelManagerError(0LL);
  sub_100005FB0(v9, 1LL, 1LL, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
  uint64_t v12 = sub_100030CC8();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v8, v12);
  *(void *)(v0 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v6;
  sub_100021868((uint64_t)v4, v0 + 24);
  uint64_t v14 = sub_100003B20(&qword_10010FD30);
  uint64_t v15 = swift_allocObject( v14,  ((*(unsigned int *)(v14 + 48) + 3LL) & 0x1FFFFFFFCLL) + 4,  *(unsigned __int16 *)(v14 + 52) | 3LL);
  *(_DWORD *)(v15 + ((*(unsigned int *)(*(void *)v15 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  uint64_t v16 = v15 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v15 + 16LL);
  uint64_t v17 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v2, v17);
  sub_1000303C8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  sub_100006F7C(v4);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v8, v12);
  *(void *)(v0 + 6sub_100006F7C(v0 + 4) = v15;
  sub_100007448();
}

void sub_1000D1B14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, unsigned __int8 a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  uint64_t v182 = v29;
  uint64_t v191 = (char *)v30;
  int v179 = v31;
  uint64_t v200 = v32;
  uint64_t v180 = v33;
  uint64_t v181 = v34;
  uint64_t v206 = v35;
  uint64_t v192 = v36;
  uint64_t v164 = sub_100003B20(&qword_10010B408);
  uint64_t v163 = *(void *)(v164 - 8);
  sub_10000C240();
  __chkstk_darwin(v37);
  sub_100022518();
  uint64_t v161 = v38;
  uint64_t v185 = sub_100030CC8();
  uint64_t v193 = *(void *)(v185 - 8);
  sub_10000C240();
  __chkstk_darwin(v39);
  sub_10004E158();
  sub_1000A872C();
  __chkstk_darwin(v40);
  sub_100085CE8();
  os_log_t v183 = v41;
  sub_100003B20(&qword_10010DA40);
  sub_10000C240();
  __chkstk_darwin(v42);
  sub_100022518();
  uint64_t v178 = v43;
  uint64_t v172 = sub_100003B20(&qword_10010B9A0);
  uint64_t v171 = *(void *)(v172 - 8);
  sub_10000C240();
  __chkstk_darwin(v44);
  sub_100022518();
  uint64_t v170 = v45;
  uint64_t v46 = sub_1000D40D8();
  uint64_t v47 = type metadata accessor for UUID(v46);
  uint64_t v198 = *(void *)(v47 - 8);
  uint64_t v199 = v47;
  sub_10000C240();
  __chkstk_darwin(v48);
  sub_10004E158();
  sub_1000A872C();
  __chkstk_darwin(v49);
  sub_1000A872C();
  __chkstk_darwin(v50);
  sub_100085CE8();
  uint64_t v174 = v51;
  uint64_t v52 = sub_1000D40D8();
  uint64_t v205 = *(void *)(type metadata accessor for ModelCatalogAsset(v52) - 8);
  sub_10000C240();
  __chkstk_darwin(v53);
  sub_10000C110();
  uint64_t v56 = v54 - v55;
  __chkstk_darwin(v57);
  sub_100085CE8();
  uint64_t v204 = v58;
  uint64_t v59 = sub_1000D40D8();
  uint64_t v60 = type metadata accessor for InferenceProviderRequestConfiguration(v59);
  uint64_t v196 = *(void *)(v60 - 8);
  uint64_t v197 = v60;
  sub_10000C240();
  __chkstk_darwin(v61);
  sub_10004E158();
  sub_1000A872C();
  __chkstk_darwin(v62);
  sub_100085CE8();
  uint64_t v195 = v63;
  uint64_t v64 = sub_1000D40EC();
  sub_100085754();
  __chkstk_darwin(v65);
  sub_10004E158();
  sub_1000A872C();
  uint64_t v67 = __chkstk_darwin(v66);
  uint64_t v69 = (char *)&v160 - v68;
  __chkstk_darwin(v67);
  uint64_t v71 = (char *)&v160 - v70;
  uint64_t v72 = sub_100022694();
  uint64_t v73 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  sub_10004E158();
  sub_1000A872C();
  __chkstk_darwin(v74);
  sub_100085CE8();
  uint64_t v202 = v75;
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  uint64_t v190 = a25;
  uint64_t v173 = v76;
  uint64_t v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v76)(v71, a25, v64);
  int v165 = a24;
  if (a24)
  {
    unint64_t v160 = *(void (**)(char *, uint64_t))(v28 + 8);
    v160(v71, v64);
  }

  else
  {
    static TaskPriority.low.getter(v77);
    char v78 = static TaskPriority.>= infix(_:_:)(v71, v69);
    uint64_t v79 = *(void (**)(char *, uint64_t))(v28 + 8);
    v79(v69, v64);
    unint64_t v160 = v79;
    v79(v71, v64);
    if ((v78 & 1) != 0)
    {
      uint64_t v80 = (unsigned int *)&enum case for RequestPriority.foreground(_:);
      uint64_t v81 = v206;
      goto LABEL_6;
    }
  }

  uint64_t v81 = v206;
  uint64_t v80 = (unsigned int *)&enum case for RequestPriority.background(_:);
LABEL_6:
  uint64_t v162 = v28;
  uint64_t v188 = v64;
  uint64_t v82 = *v80;
  uint64_t v194 = v73;
  uint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 104);
  uint64_t v201 = v72;
  uint64_t v84 = v83(v202, v82, v72);
  uint64_t v189 = a28;
  uint64_t v169 = RequestMetadata.loggingIdentifier.getter(v84);
  uint64_t v168 = v85;
  uint64_t v86 = *(void *)(v81 + 16);
  uint64_t v87 = _swiftEmptyArrayStorage;
  if (v86)
  {
    v208[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100016BD0(0, v86, 0);
    uint64_t v88 = sub_100020E24(v81);
    uint64_t v90 = v89;
    uint64_t v92 = v91 & 1;
    uint64_t v203 = v81 + 56;
    while ((v88 & 0x8000000000000000LL) == 0 && v88 < 1LL << *(_BYTE *)(v81 + 32))
    {
      if (*(_DWORD *)(v81 + 36) != (_DWORD)v90) {
        goto LABEL_25;
      }
      sub_10000B76C(*(void *)(v81 + 48) + *(void *)(v205 + 72) * v88, v204);
      uint64_t v93 = sub_1000307DC();
      sub_10000B7B0(v93, v94);
      uint64_t v95 = *(void *)v56;
      uint64_t v69 = *(char **)(v56 + 8);
      swift_bridgeObjectRetain(v69);
      sub_10000B7F4(v56);
      uint64_t v87 = (void *)v208[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v208[0]) & 1) == 0)
      {
        sub_100016BD0(0, v87[2] + 1LL, 1);
        uint64_t v87 = (void *)v208[0];
      }

      unint64_t v97 = v87[2];
      unint64_t v96 = v87[3];
      if (v97 >= v96 >> 1)
      {
        sub_100016BD0(v96 > 1, v97 + 1, 1);
        uint64_t v87 = (void *)v208[0];
      }

      uint64_t v87[2] = v97 + 1;
      uint64_t v98 = &v87[2 * v97];
      v98[4] = v95;
      v98[5] = v69;
      uint64_t v81 = v206;
      uint64_t v99 = sub_100020D3C(v88, v90, v92 & 1, v206);
      uint64_t v88 = v99;
      uint64_t v90 = v100;
      uint64_t v92 = v101 & 1;
      if (!--v86)
      {
        sub_10000B830(v99, v100, v101 & 1);
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

  else
  {
LABEL_18:
    uint64_t v102 = v192;
    uint64_t v203 = a27;
    uint64_t v167 = a26;
    uint64_t v166 = a23;
    sub_10001137C((uint64_t)v87);
    uint64_t v104 = v103;
    uint64_t v105 = v174;
    uint64_t v106 = v189;
    uint64_t v107 = RequestMetadata.uuid.getter();
    uint64_t v108 = v170;
    RequestMetadata.sessionID.getter(v107);
    uint64_t v109 = v176;
    uint64_t v110 = v172;
    UUIDIdentifier.uuid.getter(v172);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v108, v110);
    uint64_t v111 = v177;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v198 + 16))(v177, v102, v199);
    uint64_t v112 = type metadata accessor for AuditToken(0LL);
    uint64_t v204 = *(void *)(v112 - 8);
    uint64_t v113 = v178;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v204 + 16))(v178, v200, v112);
    uint64_t v205 = v112;
    sub_100005FB0(v113, 0LL, 1LL, v112);
    uint64_t v114 = v186;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 16))(v186, v202, v201);
    uint64_t v159 = v114;
    uint64_t v92 = v106;
    uint64_t v115 = v195;
    InferenceProviderRequestConfiguration.init(sessionLoggingIdentifier:requestLoggingIdentifier:assetIdentifiers:requestUUID:sessionUUID:sessionSetID:onBehalfOfPID:parentOfOnBehalfOfPID:auditToken:auditSessionUID:useCaseIdentifier:assetBundleIdentifier:requestPriority:)( v167,  v203,  v169,  v168,  v104,  v105,  v109,  v111,  v181,  v180,  v113,  v179,  v182,  a21,  a22,  v166,  v159);
    uint64_t v56 = *(void *)(v193 + 16);
    uint64_t v88 = v185;
    ((void (*)(os_log_t, uint64_t, uint64_t))v56)(v183, v106, v185);
    uint64_t v69 = v191;
    sub_100021868((uint64_t)v191, (uint64_t)v208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16))(v175, v115, v197);
    uint64_t v116 = type metadata accessor for DaemonRequest(0LL);
    uint64_t v81 = sub_10000749C(v116);
    sub_1000D19C0();
    uint64_t v117 = qword_10010B1F8;
    swift_retain();
    uint64_t v90 = v187;
    if (v117 == -1) {
      goto LABEL_19;
    }
  }

  swift_once(&qword_10010B1F8, sub_1000D180C);
LABEL_19:
  uint64_t v118 = sub_10000BF6C();
  sub_100003BA0(v118, (uint64_t)qword_10010FB70);
  uint64_t v119 = v184;
  ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v184, v92, v88);
  uint64_t v120 = v190;
  uint64_t v121 = v188;
  v173(v90, v190, v188);
  uint64_t v122 = swift_retain();
  uint64_t v123 = (os_log_s *)Logger.logObject.getter(v122);
  os_log_type_t v124 = static os_log_type_t.default.getter();
  int v125 = v124;
  if (os_log_type_enabled(v123, v124))
  {
    uint64_t v126 = sub_10000BCF4(42LL);
    uint64_t v127 = sub_10000BCF4(128LL);
    uint64_t v206 = v127;
    v208[0] = v127;
    *(_DWORD *)uint64_t v126 = 136315906;
    os_log_t v183 = v123;
    uint64_t v128 = v161;
    LODWORD(v203) = v125;
    RequestMetadata.id.getter(v127);
    sub_1000D3F98((unint64_t *)&qword_10010B418);
    uint64_t v129 = v88;
    uint64_t v130 = v164;
    uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter(v164, v131);
    uint64_t v133 = v119;
    uint64_t v135 = v134;
    (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v128, v130);
    sub_100015EF8(v132, v135, v208);
    uint64_t v207 = v136;
    sub_1000B437C((uint64_t)&v207, (uint64_t)v208);
    swift_bridgeObjectRelease(v135);
    uint64_t v193 = *(void *)(v193 + 8);
    ((void (*)(uint64_t, uint64_t))v193)(v133, v129);
    *(_WORD *)(v126 + 12) = 2080;
    uint64_t v137 = v186;
    sub_1000D192C();
    uint64_t v138 = String.init<A>(describing:)(v137, v201);
    sub_1000D4104(v138, v139);
    uint64_t v207 = v140;
    sub_1000B437C((uint64_t)&v207, (uint64_t)v208);
    sub_10000BCDC(v81);
    sub_10000BD28();
    *(_WORD *)(v126 + 22) = 2080;
    LOBYTE(v207) = v165;
    uint64_t v141 = String.init<A>(describing:)(&v207, &unk_100105070);
    uint64_t v143 = v142;
    sub_1000D4104(v141, v142);
    uint64_t v207 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v126 + 24);
    swift_bridgeObjectRelease(v143);
    *(_WORD *)(v126 + 32) = 2080;
    sub_100021AD0(&qword_10010F848, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority);
    uint64_t v145 = v187;
    uint64_t v146 = v188;
    uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter(v188, v147);
    sub_1000D4104(v148, v149);
    uint64_t v207 = v150;
    sub_1000B437C((uint64_t)&v207, (uint64_t)v208);
    sub_10000BD28();
    uint64_t v151 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
    uint64_t v152 = v145;
    uint64_t v153 = v146;
    v151(v152, v146);
    os_log_t v154 = v183;
    _os_log_impl( (void *)&_mh_execute_header,  v183,  (os_log_type_t)v203,  "Resolved priority for request %s to %s (from %s and %s)",  (uint8_t *)v126,  0x2Au);
    uint64_t v155 = v206;
    swift_arrayDestroy(v206, 4LL);
    sub_10000BCC4(v155);
    sub_10000BCC4(v126);

    ((void (*)(uint64_t, uint64_t))v193)(v189, v129);
    v151(v190, v153);
    int64_t v156 = v191;
  }

  else
  {

    uint64_t v157 = (void (*)(uint64_t, uint64_t))v160;
    v160((char *)v90, v121);
    sub_10000BCDC(v81);
    uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
    v158(v119, v88);
    v158(v92, v88);
    v157(v120, v121);
    int64_t v156 = v69;
  }

  sub_100006F7C(v156);
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v200, v205);
  (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v192, v199);
  (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v195, v197);
  (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v202, v201);
  sub_100007448();
}

void sub_1000D2658()
{
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  uint64_t v3 = v0;
  unsigned __int8 v5 = v4;
  uint64_t v6 = sub_100003B20(&qword_10010B408);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (os_unfair_lock_s *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100022694();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10000C110();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - v16;
  sub_1000D192C();
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v14, enum case for RequestPriority.background(_:), v10);
  uint64_t v18 = sub_1000BC418();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v19(v14, v10);
  v19((uint64_t)v17, v10);
  if ((v18 & 1) != 0)
  {
    if (qword_10010B1F8 != -1) {
      swift_once(&qword_10010B1F8, sub_1000D180C);
    }
    uint64_t v20 = sub_10000BF6C();
    sub_100003BA0(v20, (uint64_t)qword_10010FB70);
    uint64_t v21 = sub_10000BD20(v3);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v25 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v24 = 136315138;
      v35[0] = v25;
      uint64_t v33 = v24 + 4;
      sub_1000D40E4();
      sub_1000D3F98((unint64_t *)&qword_10010B418);
      dispatch thunk of CustomStringConvertible.description.getter(v6, v26);
      uint64_t v27 = v7;
      uint64_t v29 = v28;
      uint64_t v30 = sub_1000D40F8(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      sub_1000A86C8(v30, v31, v35);
      uint64_t v34 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v33);
      sub_10000BCDC(v3);
      swift_bridgeObjectRelease(v29);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Request %s updateSessionPriority doing nothing for background request",  v24,  0xCu);
      swift_arrayDestroy(v25, 1LL);
      sub_10000BCC4(v25);
      sub_10000BCC4((uint64_t)v24);
    }

    else
    {

      sub_10000BCDC(v3);
    }
  }

  else
  {
    sub_1000D40A4(*(void *)(v3 + 64));
    sub_1000D2928(v18, v5, v3);
    os_unfair_lock_unlock(v9);
  }

void sub_1000D2928(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v7 = type metadata accessor for RequestPriority(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003B20(&qword_10010B408);
  uint64_t v50 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v6)
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for RequestPriority.userInitiated(_:),  v7);
    InferenceProviderRequestConfiguration.requestPriority.setter(v10);
    if (qword_10010B1F8 != -1) {
      swift_once(&qword_10010B1F8, sub_1000D180C);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v14, (uint64_t)qword_10010FB70);
    uint64_t v15 = swift_retain_n(a3, 2LL);
    uint64_t v16 = a3;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v20;
      uint64_t v49 = v3;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v53 = v20;
      uint64_t v47 = v19 + 4;
      RequestMetadata.id.getter(v20);
      sub_1000D3F98((unint64_t *)&qword_10010B418);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v11, v21);
      uint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v11);
      sub_100015EF8(v22, v24, &v53);
      uint64_t v51 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v47);
      swift_release_n(v16, 2LL);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Reducing priority of request %s to userInitiated", v19, 0xCu);
      uint64_t v26 = v48;
      swift_arrayDestroy(v48, 1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v16, 2LL);
    }
  }

  else
  {
    uint64_t v48 = a1;
    uint64_t v49 = v3;
    if (qword_10010B1F8 != -1) {
      swift_once(&qword_10010B1F8, sub_1000D180C);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v27, (uint64_t)qword_10010FB70);
    uint64_t v28 = swift_retain_n(a3, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc(12LL, -1LL);
      LODWORD(v47) = v31;
      uint64_t v33 = (uint8_t *)v32;
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v34;
      uint64_t v45 = v33;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v53 = v34;
      uint64_t v44 = v33 + 4;
      RequestMetadata.id.getter(v34);
      sub_1000D3F98((unint64_t *)&qword_10010B418);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v11, v35);
      uint64_t v43 = a3;
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v11);
      sub_100015EF8(v36, v38, &v53);
      uint64_t v51 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v44);
      swift_release_n(v43, 2LL);
      swift_bridgeObjectRelease(v38);
      uint64_t v40 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v47,  "Increasing priority of request %s to foreground",  v45,  0xCu);
      uint64_t v41 = v46;
      swift_arrayDestroy(v46, 1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a3, 2LL);
    }

    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for RequestPriority.foreground(_:), v7);
    InferenceProviderRequestConfiguration.requestPriority.setter(v10);
  }

uint64_t sub_1000D2DDC(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  _BYTE v3[8] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010BFF8);
  v3[11] = sub_10003CE24(*(void *)(v4 - 8));
  v3[12] = swift_task_alloc(v2);
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  v3[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[14] = v6;
  v3[15] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RequestCancellationReason(0LL);
  v3[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[17] = v8;
  v3[18] = sub_10003CE24(v8);
  v3[19] = swift_task_alloc(v2);
  return sub_10000BCD0();
}

uint64_t sub_1000D2E8C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) & 1) == 0)
  {
    uint64_t v12 = v0[10];
    if (qword_10010B1F8 != -1)
    {
      swift_once(&qword_10010B1F8, sub_1000D180C);
      uint64_t v12 = v0[10];
    }

    uint64_t v13 = v0[19];
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[17];
    uint64_t v16 = v0[9];
    uint64_t v17 = sub_10000BF6C();
    v0[20] = sub_100003BA0(v17, (uint64_t)qword_10010FB70);
    os_log_type_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v18(v13, v16, v14);
    uint64_t v19 = sub_10000BD20(v12);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = v0[19];
    uint64_t v25 = v0[16];
    uint64_t v24 = v0[17];
    if (v22)
    {
      uint64_t v64 = v0[19];
      uint64_t v65 = v0[16];
      uint64_t v26 = v0[15];
      uint64_t v62 = v0[14];
      uint64_t v68 = v2;
      uint64_t v27 = v0[13];
      uint64_t v28 = v0[10];
      uint64_t v67 = v18;
      uint64_t v29 = sub_10000BCF4(22LL);
      uint64_t v66 = sub_10000BCF4(64LL);
      uint64_t v69 = v66;
      *(_DWORD *)uint64_t v29 = 136315394;
      RequestMetadata.id.getter(v66);
      sub_1000D3F98((unint64_t *)&qword_10010B418);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v27, v30);
      uint64_t v63 = v24;
      uint64_t v33 = v32;
      uint64_t v34 = v27;
      uint64_t v2 = v68;
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v26, v34);
      sub_100015EF8(v31, v33, &v69);
      v0[6] = v35;
      sub_100095BC0((uint64_t)(v0 + 6), (uint64_t)(v0 + 7));
      swift_bridgeObjectRelease(v33);
      sub_10000BCDC(v28);
      *(_WORD *)(v29 + 12) = 2080;
      sub_100021AD0( &qword_10010FD28,  (uint64_t (*)(uint64_t))&type metadata accessor for RequestCancellationReason);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v65, v36);
      sub_100015EF8(v37, v38, &v69);
      v0[7] = v39;
      sub_100095BC0((uint64_t)(v0 + 7), (uint64_t)(v0 + 8));
      sub_10000BD28();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v40(v64, v65);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cancelling request %s due to %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v66, 2LL);
      sub_10000BCC4(v66);
      uint64_t v41 = v29;
      os_log_type_t v18 = v67;
      sub_10000BCC4(v41);
    }

    else
    {
      sub_10000BCDC(v0[10]);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v40(v23, v25);
    }

    uint64_t v42 = v0[18];
    uint64_t v43 = v0[16];
    uint64_t v44 = v0[9];
    *(_BYTE *)(v1 + sub_1000CF694(*(void *)(v3 + 48) + v1 * *(void *)(v4 - 128), *(void *)(v0 + 200), v2) = 1;
    v18(v42, v44, v43);
    uint64_t v45 = sub_1000307DC();
    int v47 = v46(v45);
    int v48 = enum case for RequestCancellationReason.requestPreemption(_:);
    uint64_t v49 = sub_1000307DC();
    ((void (*)(uint64_t))v40)(v49);
    if (v47 == v48)
    {
      uint64_t v51 = v0[11];
      uint64_t v50 = v0[12];
      uint64_t v52 = v0[10];
      uint64_t v53 = enum case for ModelManagerError.cancelledByPreemption(_:);
      uint64_t v54 = type metadata accessor for ModelManagerError(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 104LL))(v50, v53, v54);
      sub_100005FB0(v50, 0LL, 1LL, v54);
      sub_1000D3FD0(v50, v51);
      uint64_t v55 = v52 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
      swift_beginAccess(v52 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError, v0 + 2, 33LL, 0LL);
      sub_1000D4018(v51, v55);
      swift_endAccess(v0 + 2);
    }

    uint64_t v56 = (void *)v0[10];
    uint64_t v57 = v56[7];
    uint64_t v58 = sub_10000729C(v56 + 3, v56[6]);
    v0[21] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
    RequestMetadata.id.getter(v58);
    uint64_t v59 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v57 + 56) + 4LL));
    v0[22] = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_1000D3350;
    sub_100030888();
    __asm { BR              X4 }
  }

  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask);
  v0[24] = v3;
  if (!v3)
  {
    sub_1000D40C8();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_100030888();
    __asm { BR              X0 }
  }

  uint64_t v4 = async function pointer to Task.value.getter[1];
  swift_retain(v3);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[25] = v5;
  sub_100003B20(&qword_10010B468);
  *uint64_t v5 = v0;
  v5[1] = sub_1000D3664;
  sub_100030888();
  return Task.value.getter(v6, v7, v8, v9, v10);
}

uint64_t sub_1000D3350()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v7 = v1;
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[8];
  sub_1000B4734(v1[22], &v7);
  v1[23] = *(void *)(v2 + 8);
  uint64_t v4 = sub_1000307DC();
  v5(v4);
  return swift_task_switch(sub_1000D33C4, v3, 0LL);
}

uint64_t sub_1000D33C4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask);
  if (v3)
  {
    sub_10000BD20(v1);
    uint64_t v4 = swift_retain(v3);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
      uint64_t v7 = *(void *)(v0 + 120);
      uint64_t v8 = *(void *)(v0 + 104);
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v9 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v22 = sub_10000BCF4(32LL);
      uint64_t v23 = v22;
      *(_DWORD *)uint64_t v9 = 136315138;
      RequestMetadata.id.getter(v22);
      sub_1000D3F98((unint64_t *)&qword_10010B418);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v8, v10);
      uint64_t v13 = v12;
      v20(v7, v8);
      sub_100015EF8(v11, v13, &v23);
      *(void *)(v0 + 40) = v14;
      uint64_t v2 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4);
      swift_bridgeObjectRelease(v13);
      sub_10000BCDC(v21);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cancelling Task running the request %s", v9, 0xCu);
      swift_arrayDestroy(v22, 1LL);
      sub_10000BCC4(v22);
      sub_10000BCC4((uint64_t)v9);
    }

    else
    {
      sub_10000BCDC(*(void *)(v0 + 80));
    }

    sub_100003B20(&qword_10010B468);
    Task.cancel()();
    swift_release(v3);
    uint64_t v15 = *(void *)(*(void *)(v0 + 80) + v2[115]);
    *(void *)(v0 + 192) = v15;
    if (v15)
    {
      uint64_t v16 = async function pointer to Task.value.getter[1];
      swift_retain(v15);
      uint64_t v17 = (void *)swift_task_alloc(v16);
      *(void *)(v0 + 200) = v17;
      uint64_t v18 = sub_100003B20(&qword_10010B468);
      *uint64_t v17 = v0;
      v17[1] = sub_1000D3664;
      return Task.value.getter( v18,  v15,  (char *)&type metadata for () + 8,  v18,  &protocol self-conformance witness table for Error);
    }
  }

  else
  {
    *(void *)(v0 + 192) = 0LL;
  }

  sub_1000D40C8();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3664()
{
  uint64_t v3 = *v1;
  sub_1000B4734(*(void *)(v3 + 200), &v3);
  if (v0) {
    swift_errorRelease(v0);
  }
  return sub_10000BCD0();
}

uint64_t sub_1000D36C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D370C()
{
  uint64_t v70 = v2;
  uint64_t v71 = v3;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100003B20(&qword_10010B408);
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  sub_10000C240();
  __chkstk_darwin(v8);
  sub_100022518();
  uint64_t v63 = v9;
  uint64_t v10 = sub_1000D40D8();
  uint64_t v67 = type metadata accessor for InferenceProviderDescriptor(v10);
  uint64_t v11 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  sub_100095CF0();
  uint64_t v12 = sub_100022694();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10000C110();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v58 - v18;
  sub_1000D192C();
  sub_100021AD0(&qword_10010B738, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
  uint64_t v66 = v6;
  char v21 = ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))dispatch thunk of static Comparable.< infix(_:_:))( v6,  v19,  v12,  v20);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v62 = v19;
  v22(v19, v12);
  if ((v21 & 1) != 0) {
    return 0LL;
  }
  uint64_t v60 = (void (*)(uint64_t, uint64_t))v22;
  uint64_t v61 = v16;
  uint64_t v23 = v4[6];
  uint64_t v24 = v4[7];
  sub_10000729C(v4 + 3, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  char v26 = ((uint64_t (*)(uint64_t))InferenceProviderDescriptor.hostedOnServer.getter)(v25);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v67);
  if ((v26 & 1) != 0) {
    return 0LL;
  }
  if (qword_10010B1F8 != -1) {
    swift_once(&qword_10010B1F8, sub_1000D180C);
  }
  uint64_t v28 = sub_10000BF6C();
  sub_100003BA0(v28, (uint64_t)qword_10010FB70);
  uint64_t v29 = v61;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v61, v66, v12);
  uint64_t v30 = swift_retain_n(v4, 4LL);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  int v33 = v32;
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v34 = sub_10000BCF4(32LL);
    uint64_t v35 = sub_10000BCF4(96LL);
    uint64_t v67 = v35;
    v69[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315650;
    LODWORD(v66) = v33;
    os_log_t v59 = v31;
    uint64_t v36 = v63;
    RequestMetadata.id.getter(v35);
    sub_1000D3F98((unint64_t *)&qword_10010B418);
    dispatch thunk of CustomStringConvertible.description.getter(v65, v37);
    uint64_t v39 = v38;
    uint64_t v40 = sub_1000303C8(v36, *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    sub_1000A86C8(v40, v41, v69);
    uint64_t v68 = v42;
    sub_1000B437C((uint64_t)&v68, (uint64_t)v69);
    sub_10000BCDC((uint64_t)v4);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v43 = v62;
    sub_1000D192C();
    uint64_t v44 = ((uint64_t (*)(void))RequestPriority.rawValue.getter)();
    uint64_t v46 = v45;
    uint64_t v47 = v12;
    uint64_t v48 = v12;
    uint64_t v49 = v60;
    v60((uint64_t)v43, v47);
    sub_100015EF8(v44, v46, v69);
    uint64_t v68 = v50;
    sub_1000B437C((uint64_t)&v68, (uint64_t)v69);
    sub_10000BCDC((uint64_t)v4);
    uint64_t v51 = swift_bridgeObjectRelease(v46);
    *(_WORD *)(v34 + 22) = 2080;
    uint64_t v52 = v61;
    uint64_t v53 = ((uint64_t (*)(uint64_t))RequestPriority.rawValue.getter)(v51);
    sub_100015EF8(v53, v54, v69);
    uint64_t v68 = v55;
    sub_100095BC0((uint64_t)&v68, (uint64_t)v69);
    sub_10000BD28();
    v49(v52, v48);
    os_log_t v56 = v59;
    _os_log_impl( (void *)&_mh_execute_header,  v59,  (os_log_type_t)v66,  "Request %s should be cancelled: priority %s <= %s and it is not using a server IP",  (uint8_t *)v34,  0x20u);
    uint64_t v57 = v67;
    swift_arrayDestroy(v67, 3LL);
    sub_10000BCC4(v57);
    sub_10000BCC4(v34);
  }

  else
  {
    swift_release_n(v4, 4LL);
    v60(v29, v12);
  }

  return 1LL;
}

uint64_t sub_1000D3B1C()
{
  uint64_t v0 = sub_100003B20(&qword_10010B408);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10000C110();
  uint64_t v4 = (char *)(v2 - v3);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - v7;
  RequestMetadata.id.getter(v6);
  sub_1000D40E4();
  uint64_t v9 = sub_100030CC8();
  char v10 = static UUIDIdentifier.== infix(_:_:)(v8, v4, v9, &protocol witness table for RequestMetadata);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v8, v0);
  return v10 & 1;
}

uint64_t sub_1000D3C08(uint64_t a1)
{
  uint64_t v3 = sub_100003B20(&qword_10010B408);
  sub_100085754();
  __chkstk_darwin(v4);
  sub_1000D40E4();
  sub_1000D3F98(&qword_10010B9B0);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v5);
  return sub_1000D40F8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
}

void sub_1000D3CAC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
  uint64_t v2 = sub_100030CC8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  sub_1000D4060(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError);
  sub_1000075C0();
}

uint64_t sub_1000D3D20()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for DaemonRequest(uint64_t a1)
{
  uint64_t result = qword_10010FBB0;
  if (!qword_10010FBB0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonRequest);
  }
  return result;
}

void sub_1000D3D7C(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = "(";
  v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t v2 = type metadata accessor for RequestMetadata(319LL);
  if (v3 <= 0x3F)
  {
    v6[3] = *(void *)(v2 - 8) + 64LL;
    v6[4] = &unk_1000DAE60;
    v6[5] = &unk_1000DAE78;
    sub_1000D3E7C(319LL);
    if (v5 <= 0x3F)
    {
      void v6[6] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 7LL, v6, a1 + 80);
    }
  }

Swift::Int sub_1000D3E40()
{
  return Hasher._finalize()();
}

void sub_1000D3E7C(uint64_t a1)
{
  if (!qword_10010FBC8)
  {
    uint64_t v2 = type metadata accessor for ModelManagerError(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10010FBC8);
    }
  }

void sub_1000D3ED0()
{
}

uint64_t sub_1000D3EFC()
{
  return sub_1000D3B1C() & 1;
}

Swift::Int sub_1000D3F1C()
{
  return sub_1000D3E40();
}

uint64_t sub_1000D3F3C(uint64_t a1)
{
  return sub_1000D3C08(a1);
}

Swift::Int sub_1000D3F5C(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_1000D3F98(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_10000603C(&qword_10010B408);
    atomic_store(sub_1000075DC(v2), a1);
  }

  sub_1000075C0();
}

uint64_t sub_1000D3FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010BFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010BFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4060(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010BFF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1000D40A4(uint64_t a1@<X8>)
{
}

uint64_t sub_1000D40C8()
{
  return swift_task_dealloc(*(void *)(v0 + 152));
}

uint64_t sub_1000D40D8()
{
  return 0LL;
}

uint64_t sub_1000D40E4()
{
  return RequestMetadata.id.getter();
}

uint64_t sub_1000D40EC()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_1000D40F8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1000D4104(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000D410C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010FD38);
  sub_100003BA0(v0, (uint64_t)qword_10010FD38);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000D417C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a4;
  return swift_task_switch(sub_1000D4194, 0LL, 0LL);
}

uint64_t sub_1000D4194()
{
  *(void *)(v0 + 2sub_100006F7C(v0 + 4) = _OSActivity.__allocating_init(_:)("Critical Memory Pressure Event Loop", 35LL, 2LL);
  uint64_t v1 = (void *)swift_task_alloc(dword_10010FD8C);
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D41FC;
  return sub_1000D43E8();
}

uint64_t sub_1000D41FC()
{
  return sub_10000BD98();
}

uint64_t sub_1000D4234()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000D4260()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }

  sub_100006F7C((void *)(v0 + 112));
  sub_100006F7C((void *)(v0 + 152));
  sub_1000D6460(v0 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID);
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000D42F4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000D430C()
{
  return type metadata accessor for MemoryPressureObserver(0LL);
}

uint64_t type metadata accessor for MemoryPressureObserver(uint64_t a1)
{
  uint64_t result = qword_10010FD78;
  if (!qword_10010FD78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MemoryPressureObserver);
  }
  return result;
}

void sub_1000D434C(uint64_t a1)
{
  v4[1] = &unk_1000DAF40;
  void v4[2] = &unk_1000DAF40;
  sub_1000D59AC(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[5] = &unk_1000DAF58;
    swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
  }

uint64_t sub_1000D43E8()
{
  v1[2] = v0;
  uint64_t v2 = sub_100003B20(&qword_10010FEB0);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = sub_100021CC4(v3);
  uint64_t v4 = sub_100003B20(&qword_10010FEB8);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = sub_100021CC4(v5);
  uint64_t v6 = sub_100003B20(&qword_10010FEC0);
  void v1[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[10] = v7;
  v1[11] = sub_100021CC4(v7);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000D4474()
{
  if (qword_10010B200 != -1) {
    swift_once(&qword_10010B200, sub_1000D410C);
  }
  uint64_t v2 = sub_10000BF6C();
  uint64_t v3 = sub_100003BA0(v2, (uint64_t)qword_10010FD38);
  v1[12] = v3;
  uint64_t v4 = (void *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (sub_10002275C(v5))
  {
    uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v6);
    sub_10003F1B4((void *)&_mh_execute_header, v7, v8, "Listening for memory pressure events");
    sub_10000BCC4(v0);
  }

  uint64_t v10 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v12 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];

  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))( v12,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v13);
  AsyncStream.init(_:bufferingPolicy:_:)( &type metadata for MemoryPressure,  v12,  sub_1000B9B2C,  0LL,  &type metadata for MemoryPressure);
  AsyncStream.makeAsyncIterator()(v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v1[13] = sub_10000BAC0(&qword_10010FE98, type metadata accessor for MemoryPressureObserver, (uint64_t)&unk_1000DAF70);
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[14] = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_1000D45EC;
  sub_1000D6610();
  sub_10002FF0C();
  return AsyncStream.Iterator.next(isolation:)(v16, v17, v18, v19);
}

uint64_t sub_1000D45EC()
{
  uint64_t v0 = sub_1000D662C();
  sub_10000BCE4(v0);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000D4620()
{
  int v2 = *(unsigned __int8 *)(v1 + 128);
  if (v2 == 3)
  {
    uint64_t v3 = *(void **)(v1 + 96);
    uint64_t v4 = (*(uint64_t (**)(void, void))(*(void *)(v1 + 80) + 8LL))( *(void *)(v1 + 88),  *(void *)(v1 + 72));
    Logger.logObject.getter(v4);
    os_log_type_t v5 = sub_10003CEEC();
    if (sub_10002275C(v5))
    {
      uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v6);
      sub_10003F1B4((void *)&_mh_execute_header, v7, v8, "Memory pressure events ended");
      sub_10000BCC4(v0);
    }

    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v10 = (void *)swift_task_alloc(dword_10010FD94);
    *(void *)(v1 + 120) = v10;
    *uint64_t v10 = v1;
    v10[1] = sub_1000D46FC;
    return sub_1000D4790(v2);
  }

uint64_t sub_1000D46FC()
{
  uint64_t v1 = *(void **)v0;
  int v2 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[2];
  os_log_type_t v5 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v1[14] = v5;
  *os_log_type_t v5 = v2;
  v5[1] = sub_1000D45EC;
  return AsyncStream.Iterator.next(isolation:)(v1 + 16, v4, v3, v1[9]);
}

uint64_t sub_1000D4790(char a1)
{
  *(void *)(v2 + 176) = v1;
  *(_BYTE *)(v2 + 336) = a1;
  uint64_t v3 = type metadata accessor for Assertion.DaemonRep(0LL);
  *(void *)(v2 + 18sub_100006F7C(v0 + 4) = v3;
  *(void *)(v2 + 192) = *(void *)(v3 - 8);
  *(void *)(v2 + 200) = sub_10002287C();
  *(void *)(v2 + 208) = sub_10002287C();
  *(void *)(v2 + 2sub_10002FFE4((uint64_t)v1, v0 + 16) = sub_10002287C();
  sub_100003B20(&qword_10010B740);
  *(void *)(v2 + 22sub_100006F7C(v0 + 4) = sub_10002287C();
  *(void *)(v2 + 232) = sub_10002287C();
  *(void *)(v2 + 240) = sub_10002287C();
  *(void *)(v2 + 248) = sub_10002287C();
  uint64_t v4 = sub_100003B20(&qword_10010B228);
  *(void *)(v2 + 256) = v4;
  *(void *)(v2 + 26sub_100006F7C(v0 + 4) = *(void *)(v4 - 8);
  *(void *)(v2 + 272) = sub_10002287C();
  *(void *)(v2 + 280) = sub_10002287C();
  *(void *)(v2 + 288) = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v5, v6, v7);
}

uint64_t sub_1000D4874( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  a18 = v21;
  if (qword_10010B200 != -1) {
    swift_once(&qword_10010B200, sub_1000D410C);
  }
  uint64_t v24 = sub_10000BF6C();
  uint64_t v25 = (void *)sub_100003BA0(v24, (uint64_t)qword_10010FD38);
  *(void *)(v21 + 296) = v25;
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_10000C108();
  if (os_log_type_enabled(v20, v26))
  {
    int v27 = *(unsigned __int8 *)(v21 + 336);
    uint64_t v28 = (_DWORD *)sub_10000BCF4(12LL);
    uint64_t v29 = sub_10000BCF4(32LL);
    a9 = v29;
    *uint64_t v28 = 136315138;
    unint64_t v30 = 0xEC0000006C616369LL;
    uint64_t v31 = 0x746972632D6E6F6ELL;
    if (v27 != 1)
    {
      uint64_t v31 = 0x6E776F6E6B6E75LL;
      unint64_t v30 = 0xE700000000000000LL;
    }

    if (v27) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0x6C61636974697263LL;
    }
    if (v27) {
      uint64_t v33 = v30;
    }
    else {
      uint64_t v33 = 0xE800000000000000LL;
    }
    sub_100015EF8(v32, v33, &a9);
    *(void *)(v21 + 168) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v21 + 168, v21 + 176, v28 + 1);
    swift_bridgeObjectRelease(v33);
    sub_10002FE40((void *)&_mh_execute_header, v20, v26, "Processing memory pressure %s event");
    sub_100021F38(v29);
    sub_10000BCC4(v29);
    sub_10000BCC4((uint64_t)v28);
  }

  uint64_t v35 = *(void *)(v21 + 176);
  uint64_t v36 = sub_1000D5480(v35, (uint8_t *)*(unsigned __int8 *)(v21 + 336));
  uint64_t v37 = v36;
  uint64_t v38 = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask;
  if (*(void *)(v35 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask))
  {
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Cancelling critical memory pressure watchdog", v41, 2u);
      sub_10000BCC4((uint64_t)v41);
    }

    uint64_t v42 = *(void *)(v35 + v38);
    if (v42)
    {
      swift_retain(*(void *)(v35 + v38));
      Task.cancel()();
      swift_release(v42);
      uint64_t v43 = *(void *)(v35 + v38);
    }

    else
    {
      uint64_t v43 = 0LL;
    }

    *(void *)(v35 + v38) = 0LL;
    uint64_t v36 = swift_release(v43);
  }

  if ((_BYTE)v37)
  {
    if (v37 == 1)
    {
      uint64_t v45 = *(void *)(v21 + 248);
      uint64_t v44 = *(void *)(v21 + 256);
      uint64_t v46 = *(void *)(v21 + 176) + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
      sub_10002FFE4(v46, v21 + 112);
      sub_1000D6418(v46, v45);
      if (sub_1000060B4(v45, 1LL, v44) != 1)
      {
        uint64_t v70 = *(void *)(v21 + 256);
        uint64_t v71 = *(void *)(v21 + 240);
        uint64_t v72 = *(void *)(v21 + 176);
        (*(void (**)(void, void, uint64_t))(*(void *)(v21 + 264) + 32LL))( *(void *)(v21 + 288),  *(void *)(v21 + 248),  v70);
        sub_100005FB0(v71, 1LL, 1LL, v70);
        sub_10000BE64(v46, v21 + 88, 33LL);
        sub_1000D64E8(v71, v46);
        swift_endAccess(v21 + 88);
        sub_10000729C((void *)(v72 + 112), *(void *)(v72 + 136));
        uint64_t v73 = (void *)swift_task_alloc(dword_10010B75C);
        *(void *)(v21 + 30sub_100006F7C(v0 + 4) = v73;
        *uint64_t v73 = v21;
        v73[1] = sub_1000D4D90;
        sub_10002FF0C();
        return sub_10000D140(v74);
      }

      sub_1000D6460(*(void *)(v21 + 248));
    }

    else
    {
      Logger.logObject.getter(v36);
      os_log_type_t v66 = sub_10003CEEC();
      if (sub_10002275C(v66))
      {
        uint64_t v67 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v67);
        sub_10003F1B4((void *)&_mh_execute_header, v68, v69, "Unknown memory pressure event");
        sub_10000BCC4(v37);
      }
    }
  }

  else
  {
    uint64_t v47 = *(void *)(v21 + 256);
    uint64_t v48 = *(void *)(v21 + 232);
    uint64_t v49 = *(void *)(v21 + 176);
    uint64_t v50 = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    *(void *)(v21 + 312) = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    uint64_t v51 = v49 + v50;
    sub_10002FFE4(v49 + v50, v21 + 16);
    uint64_t v52 = sub_10003D238();
    sub_1000D6418(v52, v53);
    LODWORD(v47) = sub_1000060B4(v48, 1LL, v47);
    sub_1000D6460(v48);
    if ((_DWORD)v47 == 1)
    {
      uint64_t v54 = *(void *)(v21 + 272);
      uint64_t v55 = *(void *)(v21 + 256);
      uint64_t v56 = *(void *)(v21 + 240);
      uint64_t v57 = *(void *)(v21 + 224);
      uint64_t v58 = *(void *)(v21 + 176);
      uint64_t v59 = type metadata accessor for Assertion(0LL);
      UUIDIdentifier.init()(v59, &protocol witness table for Assertion);
      uint64_t v60 = Assertion.DaemonRep.init(policy:description:id:)( 0xD000000000000016LL,  0x80000001000DD5D0LL,  0xD000000000000016LL,  0x80000001000DD5D0LL,  v54);
      Assertion.DaemonRep.id.getter(v60);
      sub_100005FB0(v56, 0LL, 1LL, v55);
      sub_1000D64A0(v56, v57);
      uint64_t v61 = sub_10003D238();
      sub_10000BE64(v61, v62, 33LL);
      sub_1000D64E8(v57, v51);
      swift_endAccess(v21 + 40);
      sub_10000729C((void *)(v58 + 112), *(void *)(v58 + 136));
      uint64_t v63 = (void *)swift_task_alloc(dword_10010B77C);
      *(void *)(v21 + 320) = v63;
      *uint64_t v63 = v21;
      v63[1] = sub_1000D4F54;
      sub_10002FF0C();
      return sub_10000CF84(v64);
    }

    sub_1000D58D4();
  }

  sub_1000D6574();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  sub_10002FF0C();
  return v75(v75, v76, v77, v78, v79, v80, v81, v82, a9, a10, a11, a12);
}

uint64_t sub_1000D4D90()
{
  return sub_10000BD98();
}

uint64_t sub_1000D4DC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v23;
  uint64_t v26 = (*(uint64_t (**)(void, void, void))(*(void *)(v23 + 264) + 16LL))( *(void *)(v23 + 280),  *(void *)(v23 + 288),  *(void *)(v23 + 256));
  Logger.logObject.getter(v26);
  os_log_type_t v27 = sub_10000C108();
  if (os_log_type_enabled(v22, v27))
  {
    uint64_t v28 = *(void *)(v23 + 256);
    uint64_t v44 = *(void *)(v23 + 264);
    uint64_t v45 = *(void *)(v23 + 288);
    uint64_t v29 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v30 = sub_10000BCF4(32LL);
    a11 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    unint64_t v31 = sub_1000D6530();
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v28, v31);
    uint64_t v34 = v33;
    sub_100015EF8(v32, v33, &a11);
    *(void *)(v23 + 160) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23 + 160, v23 + 168, v29 + 4);
    swift_bridgeObjectRelease(v34);
    uint64_t v36 = *(void (**)(uint64_t))(v44 + 8);
    uint64_t v37 = sub_100085A34();
    v36(v37);
    _os_log_impl((void *)&_mh_execute_header, v22, v27, "Released critical memory pressure assertion %s", v29, 0xCu);
    sub_100021F38(v30);
    sub_10000BCC4(v30);
    sub_10000BCC4((uint64_t)v29);

    ((void (*)(uint64_t, uint64_t))v36)(v45, v28);
  }

  else
  {
    uint64_t v38 = *(void *)(v23 + 280);
    uint64_t v39 = *(void *)(v23 + 256);
    uint64_t v40 = *(void *)(v23 + 264);

    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v41(v38, v39);
    uint64_t v42 = sub_100085A34();
    ((void (*)(uint64_t))v41)(v42);
  }

  sub_1000D6574();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  return sub_100021CD4(*(uint64_t (**)(void))(v23 + 8));
}

uint64_t sub_1000D4F54()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 320);
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000D5198;
  }
  else {
    uint64_t v4 = sub_1000D4FB4;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v2 + 176), 0LL);
}

uint64_t sub_1000D4FB4()
{
  uint64_t v2 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 192) + 16LL))( *(void *)(v1 + 208),  *(void *)(v1 + 216),  *(void *)(v1 + 184));
  Logger.logObject.getter(v2);
  os_log_type_t v3 = sub_10000C108();
  if (os_log_type_enabled(v0, v3))
  {
    uint64_t v4 = *(void *)(v1 + 272);
    uint64_t v5 = *(void *)(v1 + 256);
    uint64_t v16 = *(void *)(v1 + 208);
    uint64_t v17 = *(void *)(v1 + 264);
    uint64_t v18 = *(void *)(v1 + 192);
    uint64_t v19 = *(void *)(v1 + 184);
    uint64_t v6 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v7 = sub_10000BCF4(32LL);
    uint64_t v20 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    Assertion.DaemonRep.id.getter();
    unint64_t v8 = sub_1000D6530();
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    uint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v5);
    sub_100015EF8(v9, v11, &v20);
    *(void *)(v1 + 136) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v6 + 4);
    swift_bridgeObjectRelease(v11);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v13(v16, v19);
    _os_log_impl((void *)&_mh_execute_header, v0, v3, "Acquired critical memory pressure assertion %s", v6, 0xCu);
    sub_100021F38(v7);
    sub_10000BCC4(v7);
    sub_10000BCC4((uint64_t)v6);
  }

  else
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 192) + 8LL);
    v13(*(void *)(v1 + 208), *(void *)(v1 + 184));
  }

  sub_1000D58D4();
  uint64_t v14 = sub_10003D238();
  ((void (*)(uint64_t))v13)(v14);
  sub_1000D6574();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000D5198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 328);
  uint64_t v5 = *(void *)(v3 + 240);
  uint64_t v6 = *(void *)(v3 + 216);
  uint64_t v8 = *(void *)(v3 + 192);
  uint64_t v7 = *(void *)(v3 + 200);
  uint64_t v9 = *(void *)(v3 + 184);
  uint64_t v10 = *(void *)(v3 + 176) + *(void *)(v3 + 312);
  sub_10002FF3C(v5, a2, a3, *(void *)(v3 + 256));
  sub_10000BE64(v10, v3 + 64, 33LL);
  sub_1000D64E8(v5, v10);
  swift_endAccess(v3 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
  swift_errorRetain(v4);
  uint64_t v11 = swift_errorRetain(v4);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = *(void *)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 272);
    uint64_t v16 = *(void *)(v3 + 256);
    uint64_t v38 = *(void *)(v3 + 216);
    uint64_t v33 = *(void *)(v3 + 200);
    uint64_t v34 = *(void *)(v3 + 264);
    uint64_t v35 = *(void *)(v3 + 192);
    uint64_t v36 = *(void *)(v3 + 184);
    uint64_t v17 = sub_10000BCF4(22LL);
    uint64_t v37 = (void *)sub_10000BCF4(8LL);
    uint64_t v39 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v17 = 136315394;
    Assertion.DaemonRep.id.getter();
    unint64_t v18 = sub_1000D6530();
    dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    uint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v15, v16);
    uint64_t v21 = sub_100085A34();
    sub_100015EF8(v21, v22, v23);
    *(void *)(v3 + 152) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 152, v3 + 160, v17 + 4);
    swift_bridgeObjectRelease(v20);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v25(v33, v36);
    *(_WORD *)(v17 + 12) = 2112;
    swift_errorRetain(v14);
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v14);
    *(void *)(v3 + 14sub_100006F7C(v0 + 4) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 144, v3 + 152, v17 + 14);
    void *v37 = v26;
    sub_100021F6C();
    sub_100021F6C();
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Failed to acquire critical memory pressure assertion %s: %@",  (uint8_t *)v17,  0x16u);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v37);
    sub_10000BCC4((uint64_t)v37);
    sub_100021F38(v39);
    sub_10000BCC4(v39);
    sub_10000BCC4(v17);

    sub_100021F6C();
    v25(v38, v36);
  }

  else
  {
    uint64_t v27 = *(void *)(v3 + 216);
    uint64_t v29 = *(void *)(v3 + 192);
    uint64_t v28 = *(void *)(v3 + 200);
    uint64_t v30 = *(void *)(v3 + 184);

    sub_100022D04();
    sub_100022D04();
    unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v31(v28, v30);
    sub_100022D04();
    v31(v27, v30);
  }

  sub_1000D6574();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000D5480(uint64_t a1, uint8_t *a2)
{
  uint64_t v2 = a2;
  if ((sub_1000D580C((char)a2) & 1) != 0)
  {
    sub_10000729C((void *)(a1 + 152), *(void *)(a1 + 176));
    uint64_t v2 = sub_1000BA554();
    if (qword_10010B200 != -1) {
      swift_once(&qword_10010B200, sub_1000D410C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100003BA0(v4, (uint64_t)qword_10010FD38);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      v36[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      if ((_BYTE)v2)
      {
        else {
          uint64_t v10 = 0x6E776F6E6B6E75LL;
        }
        else {
          uint64_t v11 = 0xE700000000000000LL;
        }
      }

      else
      {
        uint64_t v11 = 0xE800000000000000LL;
        uint64_t v10 = 0x6C61636974697263LL;
      }

      sub_100015EF8(v10, v11, v36);
      uint64_t v35 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v8 + 4);
      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetched memory pressure directly from kernel: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    if (v2 == 2)
    {
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "kernel memory pressure unknown!", v16, 2u);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      uint64_t v17 = type metadata accessor for ModelManagerError(0LL);
      uint64_t v18 = sub_10000BAC0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
      uint64_t v19 = swift_allocError(v17, v18, 0LL, 0LL);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v20,  enum case for ModelManagerError.internalError(_:),  v17);
      swift_willThrow(v21, v22, v23, v24, v25, v26, v27, v28);
      if (qword_10010B200 != -1) {
        swift_once(&qword_10010B200, sub_1000D410C);
      }
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = sub_100003BA0(v29, (uint64_t)qword_10010FD38);
      unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Failed to query current kernel memory pressure. Assuming non-critical.",  v33,  2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      swift_errorRelease(v19);

      return 1LL;
    }
  }

  return (uint64_t)v2;
}

uint64_t sub_1000D580C(char a1)
{
  uint64_t v4 = sub_100003B20(&qword_10010B740);
  __chkstk_darwin(v4);
  sub_1000499DC();
  if (a1 == 2) {
    return 1LL;
  }
  if (a1) {
    return 0LL;
  }
  uint64_t v5 = v2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
  sub_10002FFE4(v5, (uint64_t)v9);
  sub_1000D6418(v5, v1);
  uint64_t v6 = sub_100003B20(&qword_10010B228);
  BOOL v7 = sub_1000060B4(v1, 1LL, v6) != 1;
  sub_1000D6460(v1);
  return v7;
}

uint64_t sub_1000D58D4()
{
  uint64_t v2 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v2);
  sub_1000499DC();
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  sub_10002FF3C(v0, v4, v5, v3);
  uint64_t v6 = sub_10000BAC0(&qword_10010FE98, type metadata accessor for MemoryPressureObserver, (uint64_t)&unk_1000DAF70);
  BOOL v7 = (void *)swift_allocObject(&unk_1001058F0, 40LL, 7LL);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  swift_retain_n(v1, 2LL);
  uint64_t v8 = sub_100003854(v0, (uint64_t)&unk_10010FEA0, (uint64_t)v7);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask);
  *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask) = v8;
  return swift_release(v9);
}

void sub_1000D59AC(uint64_t a1)
{
  if (!qword_10010FD98)
  {
    uint64_t v2 = sub_10000603C(&qword_10010B228);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10010FD98);
    }
  }

uint64_t sub_1000D5A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a4;
  uint64_t v6 = sub_100003B20(&qword_10010B740);
  v4[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock(0LL);
  void v4[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[9] = v8;
  v4[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D5A8C, a4, 0LL);
}

uint64_t sub_1000D5A8C()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10010FEA8 + dword_10010FEA8);
  uint64_t v1 = (void *)swift_task_alloc(unk_10010FEAC);
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D5B30;
  uint64_t v2 = sub_10003D238();
  return v5(v2, v3, 1000000000000000000LL, 0LL, 0);
}

uint64_t sub_1000D5B30()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 48);
  if (v0)
  {
    sub_100022D04();
    sub_10008344C();
    uint64_t v5 = sub_1000D5E34;
  }

  else
  {
    sub_10008344C();
    uint64_t v5 = sub_1000D5BAC;
  }

  return sub_1000830E0((uint64_t)v5, v4, 0LL);
}

#error "1000D5D88: call analysis failed (funcsize=144)"
#error "1000D6010: call analysis failed (funcsize=144)"
uint64_t sub_1000D60BC()
{
  uint64_t v0;
  uint64_t v0 = sub_1000D662C();
  sub_10000BCE4(v0);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000D60F0()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000D6120()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D614C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_10010FE94);
  *(void *)(v1 + sub_10002FFE4((uint64_t)v1, v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100023AD0;
  uint64_t v4 = sub_1000D6610();
  return sub_1000D5A04(v4, v5, v6, v2);
}

uint64_t sub_1000D61AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + 6sub_100006F7C(v0 + 4) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 80) = swift_task_alloc(v14);
  *(void *)(v6 + 88) = swift_task_alloc(v14);
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + sub_10002FFE4((uint64_t)v1, v0 + 16) = a3;
  *(void *)(v6 + 2sub_100006F7C(v0 + 4) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return sub_100021BCC((uint64_t)sub_1000D624C, 0LL, 0LL);
}

uint64_t sub_1000D624C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12[10];
  uint64_t v14 = v12[8];
  uint64_t v15 = v12[9];
  uint64_t v16 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v17 = sub_10000BAC0( &qword_10010DAE0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v16, v17);
  uint64_t v18 = sub_10000BAC0( &qword_10010F890,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v12 + 5, v14, v18);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v12[12] = v19;
  v19(v13, v14);
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v12[13] = v20;
  *uint64_t v20 = v12;
  v20[1] = sub_1000D634C;
  sub_10002FF0C();
  return dispatch thunk of Clock.sleep(until:tolerance:)(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t sub_1000D634C()
{
  uint64_t v3 = *(void (**)(uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *v1;
  *(void *)(v4 + 112) = v0;
  swift_task_dealloc(v2);
  uint64_t v5 = sub_10003D238();
  v3(v5);
  if (v0) {
    return sub_1000830E0((uint64_t)sub_1000D63E0, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v4 + 88));
  sub_10000C140();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000D63E0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6418(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6460(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010B740);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000D64A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D64E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D6530()
{
  unint64_t result = qword_10010B770;
  if (!qword_10010B770)
  {
    uint64_t v1 = sub_10000603C(&qword_10010B228);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUIDIdentifier<A>, v1);
    atomic_store(result, &qword_10010B770);
  }

  return result;
}

uint64_t sub_1000D6574()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

uint64_t sub_1000D6590(char a1)
{
  return sub_1000D4790(a1);
}

uint64_t sub_1000D65AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v9, v10);
}

void sub_1000D65C8(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1000D65E4()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

void sub_1000D65F0(uint64_t a1, uint64_t a2, ...)
{
}

void *sub_1000D6600()
{
  return sub_10000729C((void *)(*(void *)v0 + 152LL), *(void *)(*(void *)v0 + 176LL));
}

uint64_t sub_1000D6610()
{
  return v0;
}

void sub_1000D6624()
{
}

uint64_t sub_1000D662C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 112);
}

uint64_t sub_1000D6640(uint64_t a1)
{
  return _OSActivity.__allocating_init(_:)(a1, 33LL, 2LL);
}

uint64_t sub_1000D664C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}